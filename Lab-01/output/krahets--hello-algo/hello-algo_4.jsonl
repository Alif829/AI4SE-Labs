{"dataset_split": "train", "example_id": "hello-algo@7822bf9:codes/dart/chapter_heap/top_k.dart#49-51", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "7822bf9cd4816577b1de02baad51db40642ce893", "license": null}, "file": {"path": "codes/dart/chapter_heap/top_k.dart", "language": "Java"}, "method": {"name": "getHeap", "qualified_name": "codes.dart.chapter_heap.top_k.dart#getHeap", "start_line": 49, "end_line": 51, "signature": "getHeap()", "original_code": "List<int> getHeap() {\n    return _minHeap;\n  }", "doc_comment": "/* \u8fd4\u56de\u5806\u4e2d\u7684\u5143\u7d20 */"}, "code_tokens": ["getHeap", "List", "(", ")", "{", "}", "<", ">", "return", "_minHeap", ";", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 20, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 12}}
{"dataset_split": "train", "example_id": "hello-algo@7822bf9:codes/dart/chapter_heap/top_k.dart#54-56", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "7822bf9cd4816577b1de02baad51db40642ce893", "license": null}, "file": {"path": "codes/dart/chapter_heap/top_k.dart", "language": "Java"}, "method": {"name": "_left", "qualified_name": "codes.dart.chapter_heap.top_k.dart#_left", "start_line": 54, "end_line": 56, "signature": "_left(int i)", "original_code": "int _left(int i) {\n    return 2 * i + 1;\n  }", "doc_comment": "/* \u83b7\u53d6\u5de6\u5b50\u8282\u70b9\u7d22\u5f15 */"}, "code_tokens": ["_left", "int", "(", ")", "{", "}", "i", "return", ";", "int", "+", "1", "2", "*", "i"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 25, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 13}}
{"dataset_split": "train", "example_id": "hello-algo@7822bf9:codes/dart/chapter_heap/top_k.dart#59-61", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "7822bf9cd4816577b1de02baad51db40642ce893", "license": null}, "file": {"path": "codes/dart/chapter_heap/top_k.dart", "language": "Java"}, "method": {"name": "_right", "qualified_name": "codes.dart.chapter_heap.top_k.dart#_right", "start_line": 59, "end_line": 61, "signature": "_right(int i)", "original_code": "int _right(int i) {\n    return 2 * i + 2;\n  }", "doc_comment": "/* \u83b7\u53d6\u53f3\u5b50\u8282\u70b9\u7d22\u5f15 */"}, "code_tokens": ["_right", "int", "(", ")", "{", "}", "i", "return", ";", "int", "+", "2", "2", "*", "i"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 25, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 12}}
{"dataset_split": "train", "example_id": "hello-algo@7822bf9:codes/dart/chapter_heap/top_k.dart#64-66", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "7822bf9cd4816577b1de02baad51db40642ce893", "license": null}, "file": {"path": "codes/dart/chapter_heap/top_k.dart", "language": "Java"}, "method": {"name": "_parent", "qualified_name": "codes.dart.chapter_heap.top_k.dart#_parent", "start_line": 64, "end_line": 66, "signature": "_parent(int i)", "original_code": "int _parent(int i) {\n    return (i - 1) ~/ 2; // \u5411\u4e0b\u6574\u9664\n  }", "doc_comment": "/* \u83b7\u53d6\u7236\u8282\u70b9\u7d22\u5f15 */"}, "code_tokens": ["_parent", "int", "(", ")", "{", "// \u5411\u4e0b\u6574\u9664", "}", "i", "return", ";", "int", "/", "2", "(", ")", "~", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 31, "ast_depth": 8, "n_identifiers": 2, "vocab_size": 15}}
{"dataset_split": "train", "example_id": "hello-algo@7822bf9:codes/dart/chapter_heap/top_k.dart#69-73", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "7822bf9cd4816577b1de02baad51db40642ce893", "license": null}, "file": {"path": "codes/dart/chapter_heap/top_k.dart", "language": "Java"}, "method": {"name": "_swap", "qualified_name": "codes.dart.chapter_heap.top_k.dart#_swap", "start_line": 69, "end_line": 73, "signature": "_swap(int i, int j)", "original_code": "void _swap(int i, int j) {\n    int tmp = _minHeap[i];\n    _minHeap[i] = _minHeap[j];\n    _minHeap[j] = tmp;\n  }", "doc_comment": "/* \u4ea4\u6362\u5143\u7d20 */"}, "code_tokens": ["void", "_swap", "(", ",", ")", "{", "}", "i", "j", ";", ";", ";", "int", "int", "int", "tmp", "=", "=", "=", "tmp", "_minHeap", "[", "i", "]", "_minHeap", "[", "i", "]", "_minHeap", "[", "j", "]", "_minHeap", "[", "j", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 55, "ast_depth": 7, "n_identifiers": 5, "vocab_size": 16}}
{"dataset_split": "train", "example_id": "hello-algo@7822bf9:codes/dart/chapter_heap/top_k.dart#76-78", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "7822bf9cd4816577b1de02baad51db40642ce893", "license": null}, "file": {"path": "codes/dart/chapter_heap/top_k.dart", "language": "Java"}, "method": {"name": "size", "qualified_name": "codes.dart.chapter_heap.top_k.dart#size", "start_line": 76, "end_line": 78, "signature": "size()", "original_code": "int size() {\n    return _minHeap.length;\n  }", "doc_comment": "/* \u83b7\u53d6\u5806\u5927\u5c0f */"}, "code_tokens": ["size", "int", "(", ")", "{", "}", "return", ";", "_minHeap", ".", "length"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 18, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 11}}
{"dataset_split": "train", "example_id": "hello-algo@7822bf9:codes/dart/chapter_heap/top_k.dart#81-83", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "7822bf9cd4816577b1de02baad51db40642ce893", "license": null}, "file": {"path": "codes/dart/chapter_heap/top_k.dart", "language": "Java"}, "method": {"name": "isEmpty", "qualified_name": "codes.dart.chapter_heap.top_k.dart#isEmpty", "start_line": 81, "end_line": 83, "signature": "isEmpty()", "original_code": "bool isEmpty() {\n    return size() == 0;\n  }", "doc_comment": "/* \u5224\u65ad\u5806\u662f\u5426\u4e3a\u7a7a */"}, "code_tokens": ["bool", "isEmpty", "(", ")", "{", "}", "return", ";", "==", "0", "size", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 21, "ast_depth": 8, "n_identifiers": 2, "vocab_size": 11}}
{"dataset_split": "train", "example_id": "hello-algo@7822bf9:codes/dart/chapter_heap/top_k.dart#86-88", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "7822bf9cd4816577b1de02baad51db40642ce893", "license": null}, "file": {"path": "codes/dart/chapter_heap/top_k.dart", "language": "Java"}, "method": {"name": "peek", "qualified_name": "codes.dart.chapter_heap.top_k.dart#peek", "start_line": 86, "end_line": 88, "signature": "peek()", "original_code": "int peek() {\n    return _minHeap[0];\n  }", "doc_comment": "/* \u8bbf\u95ee\u5806\u9876\u5143\u7d20 */"}, "code_tokens": ["peek", "int", "(", ")", "{", "}", "return", ";", "_minHeap", "[", "0", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 19, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 12}}
{"dataset_split": "train", "example_id": "hello-algo@7822bf9:codes/dart/chapter_heap/top_k.dart#91-96", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "7822bf9cd4816577b1de02baad51db40642ce893", "license": null}, "file": {"path": "codes/dart/chapter_heap/top_k.dart", "language": "Java"}, "method": {"name": "push", "qualified_name": "codes.dart.chapter_heap.top_k.dart#push", "start_line": 91, "end_line": 96, "signature": "push(int val)", "original_code": "void push(int val) {\n    // \u6dfb\u52a0\u8282\u70b9\n    _minHeap.add(val);\n    // \u4ece\u5e95\u81f3\u9876\u5806\u5316\n    siftUp(size() - 1);\n  }", "doc_comment": "/* \u5143\u7d20\u5165\u5806 */"}, "code_tokens": ["void", "push", "(", ")", "{", "// \u6dfb\u52a0\u8282\u70b9", "// \u4ece\u5e95\u81f3\u9876\u5806\u5316", "}", "val", ";", ";", "int", "_minHeap", ".", "add", "siftUp", "(", "val", ")", "(", ")", "-", "1", "size", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 41, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 18}}
{"dataset_split": "train", "example_id": "hello-algo@7822bf9:codes/dart/chapter_heap/top_k.dart#99-112", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "7822bf9cd4816577b1de02baad51db40642ce893", "license": null}, "file": {"path": "codes/dart/chapter_heap/top_k.dart", "language": "Java"}, "method": {"name": "siftUp", "qualified_name": "codes.dart.chapter_heap.top_k.dart#siftUp", "start_line": 99, "end_line": 112, "signature": "siftUp(int i)", "original_code": "void siftUp(int i) {\n    while (true) {\n      // \u83b7\u53d6\u8282\u70b9 i \u7684\u7236\u8282\u70b9\n      int p = _parent(i);\n      // \u5f53\u201c\u8d8a\u8fc7\u6839\u8282\u70b9\u201d\u6216\u201c\u8282\u70b9\u65e0\u987b\u4fee\u590d\u201d\u65f6\uff0c\u7ed3\u675f\u5806\u5316\n      if (p < 0 || _minHeap[i] >= _minHeap[p]) {\n        break;\n      }\n      // \u4ea4\u6362\u4e24\u8282\u70b9\n      _swap(i, p);\n      // \u5faa\u73af\u5411\u4e0a\u5806\u5316\n      i = p;\n    }\n  }", "doc_comment": "/* \u4ece\u8282\u70b9 i \u5f00\u59cb\uff0c\u4ece\u5e95\u81f3\u9876\u5806\u5316 */"}, "code_tokens": ["void", "siftUp", "(", ")", "{", "}", "i", "while", "int", "(", "true", ")", "{", "// \u83b7\u53d6\u8282\u70b9 i \u7684\u7236\u8282\u70b9", "// \u5f53\u201c\u8d8a\u8fc7\u6839\u8282\u70b9\u201d\u6216\u201c\u8282\u70b9\u65e0\u987b\u4fee\u590d\u201d\u65f6\uff0c\u7ed3\u675f\u5806\u5316", "// \u4ea4\u6362\u4e24\u8282\u70b9", "// \u5faa\u73af\u5411\u4e0a\u5806\u5316", "}", ";", "if", ";", ";", "int", "p", "=", "(", ")", "{", "}", "_swap", "i", "=", "p", "_parent", "||", "break", ";", "(", "i", ",", "p", ")", "(", "i", ")", "p", "<", "0", ">=", "_minHeap", "[", "i", "]", "_minHeap", "[", "p", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 85, "ast_depth": 11, "n_identifiers": 6, "vocab_size": 29}}
{"dataset_split": "train", "example_id": "hello-algo@7822bf9:codes/dart/chapter_heap/top_k.dart#115-126", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "7822bf9cd4816577b1de02baad51db40642ce893", "license": null}, "file": {"path": "codes/dart/chapter_heap/top_k.dart", "language": "Java"}, "method": {"name": "pop", "qualified_name": "codes.dart.chapter_heap.top_k.dart#pop", "start_line": 115, "end_line": 126, "signature": "pop()", "original_code": "int pop() {\n    // \u5224\u7a7a\u5904\u7406\n    if (isEmpty()) throw Exception('\u5806\u4e3a\u7a7a');\n    // \u4ea4\u6362\u6839\u8282\u70b9\u4e0e\u6700\u53f3\u53f6\u8282\u70b9\uff08\u5373\u4ea4\u6362\u9996\u5143\u7d20\u4e0e\u5c3e\u5143\u7d20\uff09\n    _swap(0, size() - 1);\n    // \u5220\u9664\u8282\u70b9\n    int val = _minHeap.removeLast();\n    // \u4ece\u9876\u81f3\u5e95\u5806\u5316\n    siftDown(0);\n    // \u8fd4\u56de\u5806\u9876\u5143\u7d20\n    return val;\n  }", "doc_comment": "/* \u5143\u7d20\u51fa\u5806 */"}, "code_tokens": ["pop", "int", "(", ")", "{", "// \u5224\u7a7a\u5904\u7406", "// \u4ea4\u6362\u6839\u8282\u70b9\u4e0e\u6700\u53f3\u53f6\u8282\u70b9\uff08\u5373\u4ea4\u6362\u9996\u5143\u7d20\u4e0e\u5c3e\u5143\u7d20\uff09", "// \u5220\u9664\u8282\u70b9", "// \u4ece\u9876\u81f3\u5e95\u5806\u5316", "// \u8fd4\u56de\u5806\u9876\u5143\u7d20", "}", "if", ";", ";", ";", "return", "val", ";", "(", ")", "throw", ";", "_swap", "int", "val", "=", "siftDown", "isEmpty", "Exception", "(", "0", ",", ")", "_minHeap", ".", "removeLast", "(", "0", ")", "(", ")", "(", "'\u5806\u4e3a\u7a7a'", ")", "-", "1", "(", ")", "size", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 78, "ast_depth": 10, "n_identifiers": 9, "vocab_size": 30}}
{"dataset_split": "train", "example_id": "hello-algo@7822bf9:codes/dart/chapter_heap/top_k.dart#129-144", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "7822bf9cd4816577b1de02baad51db40642ce893", "license": null}, "file": {"path": "codes/dart/chapter_heap/top_k.dart", "language": "Java"}, "method": {"name": "siftDown", "qualified_name": "codes.dart.chapter_heap.top_k.dart#siftDown", "start_line": 129, "end_line": 144, "signature": "siftDown(int i)", "original_code": "void siftDown(int i) {\n    while (true) {\n      // \u5224\u65ad\u8282\u70b9 i, l, r \u4e2d\u503c\u6700\u5927\u7684\u8282\u70b9\uff0c\u8bb0\u4e3a ma\n      int l = _left(i);\n      int r = _right(i);\n      int mi = i;\n      if (l < size() && _minHeap[l] < _minHeap[mi]) mi = l;\n      if (r < size() && _minHeap[r] < _minHeap[mi]) mi = r;\n      // \u82e5\u8282\u70b9 i \u6700\u5927\u6216\u7d22\u5f15 l, r \u8d8a\u754c\uff0c\u5219\u65e0\u987b\u7ee7\u7eed\u5806\u5316\uff0c\u8df3\u51fa\n      if (mi == i) break;\n      // \u4ea4\u6362\u4e24\u8282\u70b9\n      _swap(i, mi);\n      // \u5faa\u73af\u5411\u4e0b\u5806\u5316\n      i = mi;\n    }\n  }", "doc_comment": "/* \u4ece\u8282\u70b9 i \u5f00\u59cb\uff0c\u4ece\u9876\u81f3\u5e95\u5806\u5316 */"}, "code_tokens": ["void", "siftDown", "(", ")", "{", "}", "i", "while", "int", "(", "true", ")", "{", "// \u5224\u65ad\u8282\u70b9 i, l, r \u4e2d\u503c\u6700\u5927\u7684\u8282\u70b9\uff0c\u8bb0\u4e3a ma", "// \u82e5\u8282\u70b9 i \u6700\u5927\u6216\u7d22\u5f15 l, r \u8d8a\u754c\uff0c\u5219\u65e0\u987b\u7ee7\u7eed\u5806\u5316\uff0c\u8df3\u51fa", "// \u4ea4\u6362\u4e24\u8282\u70b9", "// \u5faa\u73af\u5411\u4e0b\u5806\u5316", "}", ";", ";", ";", "if", "if", "if", ";", ";", "int", "l", "=", "int", "r", "=", "int", "mi", "=", "i", "(", ")", ";", "(", ")", ";", "(", ")", "break", ";", "_swap", "i", "=", "mi", "_left", "_right", "&&", "mi", "=", "l", "&&", "mi", "=", "r", "mi", "==", "i", "(", "i", ",", "mi", ")", "(", "i", ")", "(", "i", ")", "l", "<", "<", "r", "<", "<", "size", "_minHeap", "[", "l", "]", "_minHeap", "[", "mi", "]", "size", "_minHeap", "[", "r", "]", "_minHeap", "[", "mi", "]", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 155, "ast_depth": 12, "n_identifiers": 10, "vocab_size": 32}}
{"dataset_split": "train", "example_id": "hello-algo@7822bf9:codes/dart/chapter_heap/top_k.dart#147-149", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "7822bf9cd4816577b1de02baad51db40642ce893", "license": null}, "file": {"path": "codes/dart/chapter_heap/top_k.dart", "language": "Java"}, "method": {"name": "print", "qualified_name": "codes.dart.chapter_heap.top_k.dart#print", "start_line": 147, "end_line": 149, "signature": "print()", "original_code": "void print() {\n    printHeap(_minHeap);\n  }", "doc_comment": "/* \u6253\u5370\u5806\uff08\u4e8c\u53c9\u6811\uff09 */"}, "code_tokens": ["void", "print", "(", ")", "{", "}", ";", "printHeap", "(", "_minHeap", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 18, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 9}}
{"dataset_split": "train", "example_id": "hello-algo@7822bf9:codes/go/chapter_heap/top_k.go#34-51", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "7822bf9cd4816577b1de02baad51db40642ce893", "license": null}, "file": {"path": "codes/go/chapter_heap/top_k.go", "language": "Java"}, "method": {"name": "topKHeap", "qualified_name": "codes.go.chapter_heap.top_k.go#topKHeap", "start_line": 34, "end_line": 51, "signature": "topKHeap(nums []int, k int)", "original_code": "func topKHeap(nums []int, k int) *minHeap {\n\t// \u521d\u59cb\u5316\u5c0f\u9876\u5806\n\th := &minHeap{}\n\theap.Init(h)\n\t// \u5c06\u6570\u7ec4\u7684\u524d k \u4e2a\u5143\u7d20\u5165\u5806\n\tfor i := 0; i < k; i++ {\n\t\theap.Push(h, nums[i])\n\t}\n\t// \u4ece\u7b2c k+1 \u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u4fdd\u6301\u5806\u7684\u957f\u5ea6\u4e3a k\n\tfor i := k; i < len(nums); i++ {\n\t\t// \u82e5\u5f53\u524d\u5143\u7d20\u5927\u4e8e\u5806\u9876\u5143\u7d20\uff0c\u5219\u5c06\u5806\u9876\u5143\u7d20\u51fa\u5806\u3001\u5f53\u524d\u5143\u7d20\u5165\u5806\n\t\tif nums[i] > h.Top().(int) {\n\t\t\theap.Pop(h)\n\t\t\theap.Push(h, nums[i])\n\t\t}\n\t}\n\treturn h\n}", "doc_comment": "/* \u57fa\u4e8e\u5806\u67e5\u627e\u6570\u7ec4\u4e2d\u6700\u5927\u7684 k \u4e2a\u5143\u7d20 */"}, "code_tokens": ["func", "topKHeap", "(", ",", ")", "*", "minHeap", "{", "// \u521d\u59cb\u5316\u5c0f\u9876\u5806", "// \u4ece\u7b2c k+1 \u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u4fdd\u6301\u5806\u7684\u957f\u5ea6\u4e3a k", "}", "int", "k", "int", "", "{", "}", "// \u5c06\u6570\u7ec4\u7684\u524d k \u4e2a\u5143\u7d20\u5165\u5806", ";", ";", "", "{", "}", "for", ";", ";", "", "{", "// \u82e5\u5f53\u524d\u5143\u7d20\u5927\u4e8e\u5806\u9876\u5143\u7d20\uff0c\u5219\u5c06\u5806\u9876\u5143\u7d20\u51fa\u5806\u3001\u5f53\u524d\u5143\u7d20\u5165\u5806", "}", "return", "h", "", "nums", "h", "&", "minHeap", "heap", ".", "Init", "for", "i", ":", "=", "0", "i", "<", "k", "i", "++", "", "i", "=", "k", "i", "<", "i", "++", "if", ">", "(", ")", "{", "}", "[", "]", ":", "=", "(", "h", ")", "heap", ".", "Push", ":", "len", "nums", "[", "i", "]", ".", "int", "", "(", "h", ",", ")", "(", "nums", ")", "h", ".", "Top", ".", "Push", "nums", "[", "i", "]", "(", ")", "heap", ".", "Pop", "heap", "(", "h", ",", ")", "(", "h", ")", "nums", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 168, "ast_depth": 10, "n_identifiers": 14, "vocab_size": 39}}
{"dataset_split": "train", "example_id": "hello-algo@7822bf9:codes/java/chapter_heap/top_k.java#14-30", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "7822bf9cd4816577b1de02baad51db40642ce893", "license": null}, "file": {"path": "codes/java/chapter_heap/top_k.java", "language": "Java"}, "method": {"name": "topKHeap", "qualified_name": "codes.java.chapter_heap.top_k#topKHeap", "start_line": 14, "end_line": 30, "signature": "topKHeap(int[] nums, int k)", "original_code": "static Queue<Integer> topKHeap(int[] nums, int k) {\n        // \u521d\u59cb\u5316\u5c0f\u9876\u5806\n        Queue<Integer> heap = new PriorityQueue<Integer>();\n        // \u5c06\u6570\u7ec4\u7684\u524d k \u4e2a\u5143\u7d20\u5165\u5806\n        for (int i = 0; i < k; i++) {\n            heap.offer(nums[i]);\n        }\n        // \u4ece\u7b2c k+1 \u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u4fdd\u6301\u5806\u7684\u957f\u5ea6\u4e3a k\n        for (int i = k; i < nums.length; i++) {\n            // \u82e5\u5f53\u524d\u5143\u7d20\u5927\u4e8e\u5806\u9876\u5143\u7d20\uff0c\u5219\u5c06\u5806\u9876\u5143\u7d20\u51fa\u5806\u3001\u5f53\u524d\u5143\u7d20\u5165\u5806\n            if (nums[i] > heap.peek()) {\n                heap.poll();\n                heap.offer(nums[i]);\n            }\n        }\n        return heap;\n    }", "doc_comment": "/* \u57fa\u4e8e\u5806\u67e5\u627e\u6570\u7ec4\u4e2d\u6700\u5927\u7684 k \u4e2a\u5143\u7d20 */"}, "code_tokens": ["topKHeap", "static", "Queue", "(", ",", ")", "{", "// \u521d\u59cb\u5316\u5c0f\u9876\u5806", "// \u5c06\u6570\u7ec4\u7684\u524d k \u4e2a\u5143\u7d20\u5165\u5806", "// \u4ece\u7b2c k+1 \u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u4fdd\u6301\u5806\u7684\u957f\u5ea6\u4e3a k", "}", "<", "Integer", ">", "nums", "k", ";", "for", "(", ";", ")", "for", "(", ";", ")", "return", "heap", ";", "int", "Queue", "heap", "=", ";", "i", "<", "k", "i", "++", "{", "}", ";", "i", "<", "i", "++", "{", "// \u82e5\u5f53\u524d\u5143\u7d20\u5927\u4e8e\u5806\u9876\u5143\u7d20\uff0c\u5219\u5c06\u5806\u9876\u5143\u7d20\u51fa\u5806\u3001\u5f53\u524d\u5143\u7d20\u5165\u5806", "}", "int", "[", "]", "<", "Integer", ">", "new", "int", "i", "=", "0", ";", "int", "i", "=", "k", "nums", ".", "length", "if", "PriorityQueue", "(", ")", "heap", ".", "offer", "(", ")", "{", "}", "<", "Integer", ">", "(", ")", ">", ";", ";", "nums", "[", "i", "]", "nums", "[", "i", "]", "heap", ".", "peek", "heap", ".", "poll", "heap", ".", "offer", "(", ")", "(", ")", "(", ")", "nums", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 168, "ast_depth": 12, "n_identifiers": 9, "vocab_size": 36}}
{"dataset_split": "train", "example_id": "hello-algo@7822bf9:codes/java/chapter_heap/top_k.java#32-39", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "7822bf9cd4816577b1de02baad51db40642ce893", "license": null}, "file": {"path": "codes/java/chapter_heap/top_k.java", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.java.chapter_heap.top_k#main", "start_line": 32, "end_line": 39, "signature": "main(String[] args)", "original_code": "public static void main(String[] args) {\n        int[] nums = { 1, 7, 6, 3, 2 };\n        int k = 3;\n\n        Queue<Integer> res = topKHeap(nums, k);\n        System.out.println(\"\u6700\u5927\u7684 \" + k + \" \u4e2a\u5143\u7d20\u4e3a\");\n        PrintUtil.printHeap(res);\n    }", "doc_comment": ""}, "code_tokens": ["void", "main", "public", "static", "(", ")", "{", "}", "args", ";", ";", ";", ";", ";", "String", "nums", "=", "int", "k", "=", "3", "Queue", "res", "=", ".", "println", "PrintUtil", ".", "printHeap", "[", "]", "int", "[", "]", "{", "1", ",", "7", ",", "6", ",", "3", ",", "2", "}", "<", "Integer", ">", "topKHeap", "System", ".", "out", "(", ")", "(", "res", ")", "(", "nums", ",", "k", ")", "+", "+", "k", "\"", " \u4e2a\u5143\u7d20\u4e3a", "\"", "\"", "\u6700\u5927\u7684 ", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 105, "ast_depth": 10, "n_identifiers": 11, "vocab_size": 39}}
{"dataset_split": "train", "example_id": "hello-algo@7822bf9:codes/javascript/chapter_heap/top_k.js#10-13", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "7822bf9cd4816577b1de02baad51db40642ce893", "license": null}, "file": {"path": "codes/javascript/chapter_heap/top_k.js", "language": "Java"}, "method": {"name": "pushMinHeap", "qualified_name": "codes.javascript.chapter_heap.top_k.js#pushMinHeap", "start_line": 10, "end_line": 13, "signature": "pushMinHeap(maxHeap, val)", "original_code": "function pushMinHeap(maxHeap, val) {\n    // \u5143\u7d20\u53d6\u53cd\n    maxHeap.push(-val);\n}", "doc_comment": "/* \u5143\u7d20\u5165\u5806 */"}, "code_tokens": ["function", "pushMinHeap", "(", ")", "{", "// \u5143\u7d20\u53d6\u53cd", "}", "maxHeap", "val", ";", ",", "maxHeap", ".", "push", "(", ")", "-", "val"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 28, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 14}}
{"dataset_split": "train", "example_id": "hello-algo@7822bf9:codes/javascript/chapter_heap/top_k.js#16-19", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "7822bf9cd4816577b1de02baad51db40642ce893", "license": null}, "file": {"path": "codes/javascript/chapter_heap/top_k.js", "language": "Java"}, "method": {"name": "popMinHeap", "qualified_name": "codes.javascript.chapter_heap.top_k.js#popMinHeap", "start_line": 16, "end_line": 19, "signature": "popMinHeap(maxHeap)", "original_code": "function popMinHeap(maxHeap) {\n    // \u5143\u7d20\u53d6\u53cd\n    return -maxHeap.pop();\n}", "doc_comment": "/* \u5143\u7d20\u51fa\u5806 */"}, "code_tokens": ["function", "popMinHeap", "(", ")", "{", "// \u5143\u7d20\u53d6\u53cd", "}", "maxHeap", "return", ";", "-", "maxHeap", ".", "pop", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 25, "ast_depth": 8, "n_identifiers": 3, "vocab_size": 13}}
{"dataset_split": "train", "example_id": "hello-algo@7822bf9:codes/javascript/chapter_heap/top_k.js#22-25", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "7822bf9cd4816577b1de02baad51db40642ce893", "license": null}, "file": {"path": "codes/javascript/chapter_heap/top_k.js", "language": "Java"}, "method": {"name": "peekMinHeap", "qualified_name": "codes.javascript.chapter_heap.top_k.js#peekMinHeap", "start_line": 22, "end_line": 25, "signature": "peekMinHeap(maxHeap)", "original_code": "function peekMinHeap(maxHeap) {\n    // \u5143\u7d20\u53d6\u53cd\n    return -maxHeap.peek();\n}", "doc_comment": "/* \u8bbf\u95ee\u5806\u9876\u5143\u7d20 */"}, "code_tokens": ["function", "peekMinHeap", "(", ")", "{", "// \u5143\u7d20\u53d6\u53cd", "}", "maxHeap", "return", ";", "-", "maxHeap", ".", "peek", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 25, "ast_depth": 8, "n_identifiers": 3, "vocab_size": 13}}
{"dataset_split": "train", "example_id": "hello-algo@7822bf9:codes/javascript/chapter_heap/top_k.js#28-31", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "7822bf9cd4816577b1de02baad51db40642ce893", "license": null}, "file": {"path": "codes/javascript/chapter_heap/top_k.js", "language": "Java"}, "method": {"name": "getMinHeap", "qualified_name": "codes.javascript.chapter_heap.top_k.js#getMinHeap", "start_line": 28, "end_line": 31, "signature": "getMinHeap(maxHeap)", "original_code": "function getMinHeap(maxHeap) {\n    // \u5143\u7d20\u53d6\u53cd\n    return maxHeap.getMaxHeap().map((num) => -num);\n}", "doc_comment": "/* \u53d6\u51fa\u5806\u4e2d\u5143\u7d20 */"}, "code_tokens": ["function", "getMinHeap", "(", ")", "{", "// \u5143\u7d20\u53d6\u53cd", "}", "maxHeap", "return", ";", ">", ")", ".", "map", "(", "=", "-", "num", "maxHeap", ".", "getMaxHeap", "(", "num", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 40, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 17}}
{"dataset_split": "train", "example_id": "hello-algo@7822bf9:codes/javascript/chapter_heap/top_k.js#34-52", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "7822bf9cd4816577b1de02baad51db40642ce893", "license": null}, "file": {"path": "codes/javascript/chapter_heap/top_k.js", "language": "Java"}, "method": {"name": "topKHeap", "qualified_name": "codes.javascript.chapter_heap.top_k.js#topKHeap", "start_line": 34, "end_line": 52, "signature": "topKHeap(nums, k)", "original_code": "function topKHeap(nums, k) {\n    // \u521d\u59cb\u5316\u5c0f\u9876\u5806\n    // \u8bf7\u6ce8\u610f\uff1a\u6211\u4eec\u5c06\u5806\u4e2d\u6240\u6709\u5143\u7d20\u53d6\u53cd\uff0c\u4ece\u800c\u7528\u5927\u9876\u5806\u6765\u6a21\u62df\u5c0f\u9876\u5806\n    const maxHeap = new MaxHeap([]);\n    // \u5c06\u6570\u7ec4\u7684\u524d k \u4e2a\u5143\u7d20\u5165\u5806\n    for (let i = 0; i < k; i++) {\n        pushMinHeap(maxHeap, nums[i]);\n    }\n    // \u4ece\u7b2c k+1 \u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u4fdd\u6301\u5806\u7684\u957f\u5ea6\u4e3a k\n    for (let i = k; i < nums.length; i++) {\n        // \u82e5\u5f53\u524d\u5143\u7d20\u5927\u4e8e\u5806\u9876\u5143\u7d20\uff0c\u5219\u5c06\u5806\u9876\u5143\u7d20\u51fa\u5806\u3001\u5f53\u524d\u5143\u7d20\u5165\u5806\n        if (nums[i] > peekMinHeap(maxHeap)) {\n            popMinHeap(maxHeap);\n            pushMinHeap(maxHeap, nums[i]);\n        }\n    }\n    // \u8fd4\u56de\u5806\u4e2d\u5143\u7d20\n    return getMinHeap(maxHeap);\n}", "doc_comment": "/* \u57fa\u4e8e\u5806\u67e5\u627e\u6570\u7ec4\u4e2d\u6700\u5927\u7684 k \u4e2a\u5143\u7d20 */"}, "code_tokens": ["function", "topKHeap", "(", ")", "{", "// \u521d\u59cb\u5316\u5c0f\u9876\u5806", "// \u8bf7\u6ce8\u610f\uff1a\u6211\u4eec\u5c06\u5806\u4e2d\u6240\u6709\u5143\u7d20\u53d6\u53cd\uff0c\u4ece\u800c\u7528\u5927\u9876\u5806\u6765\u6a21\u62df\u5c0f\u9876\u5806", "// \u5c06\u6570\u7ec4\u7684\u524d k \u4e2a\u5143\u7d20\u5165\u5806", "// \u4ece\u7b2c k+1 \u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u4fdd\u6301\u5806\u7684\u957f\u5ea6\u4e3a k", "// \u8fd4\u56de\u5806\u4e2d\u5143\u7d20", "}", "nums", "k", "const", ";", "for", "(", ";", ")", "for", "(", ";", ")", "return", ";", ",", "maxHeap", "=", "new", "MaxHeap", ")", "let", ";", "i", "<", "k", "i", "++", "{", "}", "let", ";", "i", "<", "i", "++", "{", "// \u82e5\u5f53\u524d\u5143\u7d20\u5927\u4e8e\u5806\u9876\u5143\u7d20\uff0c\u5219\u5c06\u5806\u9876\u5143\u7d20\u51fa\u5806\u3001\u5f53\u524d\u5143\u7d20\u5165\u5806", "}", "getMinHeap", "(", "[", "]", "i", "=", "0", ";", "i", "=", "k", "nums", ".", "length", "if", "(", "maxHeap", ")", "pushMinHeap", "(", ")", "{", "}", "(", "maxHeap", ",", ")", ">", ";", ";", "nums", "[", "i", "]", "nums", "[", "i", "]", "peekMinHeap", "popMinHeap", "pushMinHeap", "(", "maxHeap", ")", "(", "maxHeap", ")", "(", "maxHeap", ",", ")", "nums", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 149, "ast_depth": 12, "n_identifiers": 11, "vocab_size": 38}}
{"dataset_split": "train", "example_id": "hello-algo@7822bf9:codes/rust/chapter_heap/top_k.rs#28-39", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "7822bf9cd4816577b1de02baad51db40642ce893", "license": null}, "file": {"path": "codes/rust/chapter_heap/top_k.rs", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.rust.chapter_heap.top_k.rs#main", "start_line": 28, "end_line": 39, "signature": "main()", "original_code": "heap\n}\n\n/* Driver Code */\nfn main() {\n    let nums = vec![1, 7, 6, 3, 2];\n    let k = 3;\n\n    let res = top_k_heap(nums, k);\n    println!(\"\u6700\u5927\u7684 {} \u4e2a\u5143\u7d20\u4e3a\", k);\n    print_util::print_heap(res.into_iter().map(|item| item.0).collect());\n}", "doc_comment": ""}, "code_tokens": ["heap", "/* Driver Code */", "main", "}", "fn", "(", ")", "{", "}", "let", ";", "let", ";", "let", ";", ";", "", ";", "nums", "=", "k", "=", "3", "res", "=", "println", "print_util", "::", "print_heap", "(", ")", "vec", "[", "2", "]", "top_k_heap", "!", "(", ",", "k", ")", ".", "collect", "!", "1", ",", "7", ",", "6", ",", "3", ",", "(", "nums", ",", "k", ")", "\"", "\u6700\u5927\u7684 {} \u4e2a\u5143\u7d20\u4e3a", "\"", ".", "map", "(", ")", "res", ".", "into_iter", "(", ")", "(", ")", "|", "item", "|", "item", ".0"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 111, "ast_depth": 10, "n_identifiers": 14, "vocab_size": 39}}
{"dataset_split": "train", "example_id": "hello-algo@e441ee4:codes/c/chapter_sorting/merge_sort.c#10-38", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e441ee4e35b15be0e03604c246b4027a3a776c16", "license": null}, "file": {"path": "codes/c/chapter_sorting/merge_sort.c", "language": "Java"}, "method": {"name": "merge", "qualified_name": "codes.c.chapter_sorting.merge_sort.c#merge", "start_line": 10, "end_line": 38, "signature": "merge(int *nums, int left, int mid, int right)", "original_code": "void merge(int *nums, int left, int mid, int right) {\n    // \u5de6\u5b50\u6570\u7ec4\u533a\u95f4 [left, mid], \u53f3\u5b50\u6570\u7ec4\u533a\u95f4 [mid+1, right]\n    // \u521b\u5efa\u4e00\u4e2a\u4e34\u65f6\u6570\u7ec4 tmp \uff0c\u7528\u4e8e\u5b58\u653e\u5408\u5e76\u540e\u7684\u7ed3\u679c\n    int tmpSize = right - left + 1;\n    int *tmp = (int *)malloc(tmpSize * sizeof(int));\n    // \u521d\u59cb\u5316\u5de6\u5b50\u6570\u7ec4\u548c\u53f3\u5b50\u6570\u7ec4\u7684\u8d77\u59cb\u7d22\u5f15\n    int i = left, j = mid + 1, k = 0;\n    // \u5f53\u5de6\u53f3\u5b50\u6570\u7ec4\u90fd\u8fd8\u6709\u5143\u7d20\u65f6\uff0c\u6bd4\u8f83\u5e76\u5c06\u8f83\u5c0f\u7684\u5143\u7d20\u590d\u5236\u5230\u4e34\u65f6\u6570\u7ec4\u4e2d\n    while (i <= mid && j <= right) {\n        if (nums[i] <= nums[j]) {\n            tmp[k++] = nums[i++];\n        } else {\n            tmp[k++] = nums[j++];\n        }\n    }\n    // \u5c06\u5de6\u5b50\u6570\u7ec4\u548c\u53f3\u5b50\u6570\u7ec4\u7684\u5269\u4f59\u5143\u7d20\u590d\u5236\u5230\u4e34\u65f6\u6570\u7ec4\u4e2d\n    while (i <= mid) {\n        tmp[k++] = nums[i++];\n    }\n    while (j <= right) {\n        tmp[k++] = nums[j++];\n    }\n    // \u5c06\u4e34\u65f6\u6570\u7ec4 tmp \u4e2d\u7684\u5143\u7d20\u590d\u5236\u56de\u539f\u6570\u7ec4 nums \u7684\u5bf9\u5e94\u533a\u95f4\n    for (k = 0; k < tmpSize; ++k) {\n        nums[left + k] = tmp[k];\n    }\n    // \u91ca\u653e\u5185\u5b58\n    free(tmp);\n}", "doc_comment": "/* \u5408\u5e76\u5de6\u5b50\u6570\u7ec4\u548c\u53f3\u5b50\u6570\u7ec4 */"}, "code_tokens": ["void", "merge", "(", ",", ",", ",", ")", "{", "// \u5de6\u5b50\u6570\u7ec4\u533a\u95f4 [left, mid], \u53f3\u5b50\u6570\u7ec4\u533a\u95f4 [mid+1, right]", "// \u521b\u5efa\u4e00\u4e2a\u4e34\u65f6\u6570\u7ec4 tmp \uff0c\u7528\u4e8e\u5b58\u653e\u5408\u5e76\u540e\u7684\u7ed3\u679c", "// \u521d\u59cb\u5316\u5de6\u5b50\u6570\u7ec4\u548c\u53f3\u5b50\u6570\u7ec4\u7684\u8d77\u59cb\u7d22\u5f15", "// \u5f53\u5de6\u53f3\u5b50\u6570\u7ec4\u90fd\u8fd8\u6709\u5143\u7d20\u65f6\uff0c\u6bd4\u8f83\u5e76\u5c06\u8f83\u5c0f\u7684\u5143\u7d20\u590d\u5236\u5230\u4e34\u65f6\u6570\u7ec4\u4e2d", "// \u5c06\u5de6\u5b50\u6570\u7ec4\u548c\u53f3\u5b50\u6570\u7ec4\u7684\u5269\u4f59\u5143\u7d20\u590d\u5236\u5230\u4e34\u65f6\u6570\u7ec4\u4e2d", "// \u5c06\u4e34\u65f6\u6570\u7ec4 tmp \u4e2d\u7684\u5143\u7d20\u590d\u5236\u56de\u539f\u6570\u7ec4 nums \u7684\u5bf9\u5e94\u533a\u95f4", "// \u91ca\u653e\u5185\u5b58", "}", "nums", "left", "mid", "right", ";", ";", ",", ",", ";", "while", "while", "while", "for", "(", ";", ";", ")", ";", "int", "*", "int", "int", "int", "int", "tmpSize", "=", "int", "*", "tmp", "=", "int", "i", "=", "left", "j", "=", "k", "=", "0", "(", ")", "{", "}", "(", ")", "{", "}", "(", ")", "{", "}", "k", "=", "0", "k", "<", "tmpSize", "++", "k", "{", "}", "free", "+", "1", "(", ")", "mid", "+", "1", "&&", "if", "else", "i", "<=", "mid", ";", "j", "<=", "right", ";", ";", "(", "tmp", ")", "right", "-", "left", "int", "*", "malloc", "i", "<=", "mid", "j", "<=", "right", "(", ")", "{", "}", "{", "}", "=", "=", "=", "(", ")", "<=", ";", ";", "tmp", "[", "]", "nums", "[", "]", "tmp", "[", "]", "nums", "[", "]", "nums", "[", "]", "tmp", "[", "k", "]", "tmpSize", "*", "nums", "[", "i", "]", "nums", "[", "j", "]", "=", "=", "k", "++", "i", "++", "k", "++", "j", "++", "left", "+", "k", "sizeof", "tmp", "[", "]", "nums", "[", "]", "tmp", "[", "]", "nums", "[", "]", "(", ")", "k", "++", "i", "++", "k", "++", "j", "++", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 288, "ast_depth": 14, "n_identifiers": 13, "vocab_size": 44}}
{"dataset_split": "train", "example_id": "hello-algo@e441ee4:codes/c/chapter_sorting/merge_sort.c#41-51", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e441ee4e35b15be0e03604c246b4027a3a776c16", "license": null}, "file": {"path": "codes/c/chapter_sorting/merge_sort.c", "language": "Java"}, "method": {"name": "mergeSort", "qualified_name": "codes.c.chapter_sorting.merge_sort.c#mergeSort", "start_line": 41, "end_line": 51, "signature": "mergeSort(int *nums, int left, int right)", "original_code": "void mergeSort(int *nums, int left, int right) {\n    // \u7ec8\u6b62\u6761\u4ef6\n    if (left >= right)\n        return; // \u5f53\u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52\n    // \u5212\u5206\u9636\u6bb5\n    int mid = (left + right) / 2;    // \u8ba1\u7b97\u4e2d\u70b9\n    mergeSort(nums, left, mid);      // \u9012\u5f52\u5de6\u5b50\u6570\u7ec4\n    mergeSort(nums, mid + 1, right); // \u9012\u5f52\u53f3\u5b50\u6570\u7ec4\n    // \u5408\u5e76\u9636\u6bb5\n    merge(nums, left, mid, right);\n}", "doc_comment": "/* \u5f52\u5e76\u6392\u5e8f */"}, "code_tokens": ["void", "mergeSort", "(", ",", ",", ")", "{", "// \u7ec8\u6b62\u6761\u4ef6", "// \u5f53\u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52", "// \u5212\u5206\u9636\u6bb5", "// \u8ba1\u7b97\u4e2d\u70b9", "// \u9012\u5f52\u5de6\u5b50\u6570\u7ec4", "// \u9012\u5f52\u53f3\u5b50\u6570\u7ec4", "// \u5408\u5e76\u9636\u6bb5", "}", "nums", "left", "right", "if", ";", ";", ";", ";", "int", "*", "int", "int", "(", ")", "return", ";", "int", "mid", "=", "mergeSort", "mergeSort", "merge", "left", ">=", "right", "/", "2", "(", "nums", ",", "left", ",", "mid", ")", "(", "nums", ",", ",", "right", ")", "(", "nums", ",", "left", ",", "mid", ",", "right", ")", "(", ")", "mid", "+", "1", "left", "+", "right"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 103, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 30}}
{"dataset_split": "train", "example_id": "hello-algo@e441ee4:codes/c/chapter_sorting/merge_sort.c#54-63", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e441ee4e35b15be0e03604c246b4027a3a776c16", "license": null}, "file": {"path": "codes/c/chapter_sorting/merge_sort.c", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.c.chapter_sorting.merge_sort.c#main", "start_line": 54, "end_line": 63, "signature": "main()", "original_code": "int main() {\n    /* \u5f52\u5e76\u6392\u5e8f */\n    int nums[] = {7, 3, 2, 6, 0, 1, 5, 4};\n    int size = sizeof(nums) / sizeof(int);\n    mergeSort(nums, 0, size - 1);\n    printf(\"\u5f52\u5e76\u6392\u5e8f\u5b8c\u6210\u540e nums = \");\n    printArray(nums, size);\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "/* \u5f52\u5e76\u6392\u5e8f */", "}", ";", ";", ";", ";", ";", "return", "0", ";", "int", "nums", "=", "int", "size", "=", "mergeSort", "printf", "printArray", "[", "]", "{", "7", ",", "3", ",", "2", ",", "6", ",", "0", ",", "1", ",", "5", ",", "4", "}", "/", "(", "nums", ",", "0", ",", ")", "(", ")", "(", "nums", ",", "size", ")", "sizeof", "sizeof", "size", "-", "1", "\"", "\u5f52\u5e76\u6392\u5e8f\u5b8c\u6210\u540e nums = ", "\"", "(", "nums", ")", "(", ")", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 103, "ast_depth": 11, "n_identifiers": 7, "vocab_size": 31}}
{"dataset_split": "train", "example_id": "hello-algo@e441ee4:codes/cpp/chapter_sorting/merge_sort.cpp#10-34", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e441ee4e35b15be0e03604c246b4027a3a776c16", "license": null}, "file": {"path": "codes/cpp/chapter_sorting/merge_sort.cpp", "language": "Java"}, "method": {"name": "merge", "qualified_name": "codes.cpp.chapter_sorting.merge_sort.cpp#merge", "start_line": 10, "end_line": 34, "signature": "merge(vector<int> &nums, int left, int mid, int right)", "original_code": "void merge(vector<int> &nums, int left, int mid, int right) {\n    // \u5de6\u5b50\u6570\u7ec4\u533a\u95f4 [left, mid], \u53f3\u5b50\u6570\u7ec4\u533a\u95f4 [mid+1, right]\n    // \u521b\u5efa\u4e00\u4e2a\u4e34\u65f6\u6570\u7ec4 tmp \uff0c\u7528\u4e8e\u5b58\u653e\u5408\u5e76\u540e\u7684\u7ed3\u679c\n    vector<int> tmp(right - left + 1);\n    // \u521d\u59cb\u5316\u5de6\u5b50\u6570\u7ec4\u548c\u53f3\u5b50\u6570\u7ec4\u7684\u8d77\u59cb\u7d22\u5f15\n    int i = left, j = mid + 1, k = 0;\n    // \u5f53\u5de6\u53f3\u5b50\u6570\u7ec4\u90fd\u8fd8\u6709\u5143\u7d20\u65f6\uff0c\u6bd4\u8f83\u5e76\u5c06\u8f83\u5c0f\u7684\u5143\u7d20\u590d\u5236\u5230\u4e34\u65f6\u6570\u7ec4\u4e2d\n    while (i <= mid && j <= right) {\n        if (nums[i] <= nums[j])\n            tmp[k++] = nums[i++];\n        else\n            tmp[k++] = nums[j++];\n    }\n    // \u5c06\u5de6\u5b50\u6570\u7ec4\u548c\u53f3\u5b50\u6570\u7ec4\u7684\u5269\u4f59\u5143\u7d20\u590d\u5236\u5230\u4e34\u65f6\u6570\u7ec4\u4e2d\n    while (i <= mid) {\n        tmp[k++] = nums[i++];\n    }\n    while (j <= right) {\n        tmp[k++] = nums[j++];\n    }\n    // \u5c06\u4e34\u65f6\u6570\u7ec4 tmp \u4e2d\u7684\u5143\u7d20\u590d\u5236\u56de\u539f\u6570\u7ec4 nums \u7684\u5bf9\u5e94\u533a\u95f4\n    for (k = 0; k < tmp.size(); k++) {\n        nums[left + k] = tmp[k];\n    }\n}", "doc_comment": "/* \u5408\u5e76\u5de6\u5b50\u6570\u7ec4\u548c\u53f3\u5b50\u6570\u7ec4 */"}, "code_tokens": ["void", "merge", "(", ",", ",", ",", ")", "{", "// \u5de6\u5b50\u6570\u7ec4\u533a\u95f4 [left, mid], \u53f3\u5b50\u6570\u7ec4\u533a\u95f4 [mid+1, right]", "// \u521b\u5efa\u4e00\u4e2a\u4e34\u65f6\u6570\u7ec4 tmp \uff0c\u7528\u4e8e\u5b58\u653e\u5408\u5e76\u540e\u7684\u7ed3\u679c", "// \u521d\u59cb\u5316\u5de6\u5b50\u6570\u7ec4\u548c\u53f3\u5b50\u6570\u7ec4\u7684\u8d77\u59cb\u7d22\u5f15", "// \u5f53\u5de6\u53f3\u5b50\u6570\u7ec4\u90fd\u8fd8\u6709\u5143\u7d20\u65f6\uff0c\u6bd4\u8f83\u5e76\u5c06\u8f83\u5c0f\u7684\u5143\u7d20\u590d\u5236\u5230\u4e34\u65f6\u6570\u7ec4\u4e2d", "// \u5c06\u5de6\u5b50\u6570\u7ec4\u548c\u53f3\u5b50\u6570\u7ec4\u7684\u5269\u4f59\u5143\u7d20\u590d\u5236\u5230\u4e34\u65f6\u6570\u7ec4\u4e2d", "// \u5c06\u4e34\u65f6\u6570\u7ec4 tmp \u4e2d\u7684\u5143\u7d20\u590d\u5236\u56de\u539f\u6570\u7ec4 nums \u7684\u5bf9\u5e94\u533a\u95f4", "}", "nums", "left", "mid", "right", "", ";", ",", ",", ";", "while", "while", "while", "for", "(", ";", ";", ")", "vector", "&", "int", "int", "int", "vector", "tmp", "(", ")", "int", "i", "=", "left", "j", "=", "k", "=", "0", "(", ")", "{", "}", "(", ")", "{", "}", "(", ")", "{", "}", "k", "=", "0", "k", "<", "k", "++", "{", "}", "<", ">", "<", ">", "+", "1", "mid", "+", "1", "&&", "if", "else", "i", "<=", "mid", ";", "j", "<=", "right", ";", "tmp", ".", "size", ";", "int", "int", "right", "-", "left", "i", "<=", "mid", "j", "<=", "right", "(", ")", ";", ";", "=", "=", "(", ")", "=", "<=", "=", "=", "tmp", "[", "]", "nums", "[", "]", "tmp", "[", "]", "nums", "[", "]", "nums", "[", "]", "tmp", "[", "k", "]", "nums", "[", "i", "]", "nums", "[", "j", "]", "tmp", "[", "]", "nums", "[", "]", "tmp", "[", "]", "nums", "[", "]", "k", "++", "i", "++", "k", "++", "j", "++", "left", "+", "k", "k", "++", "i", "++", "k", "++", "j", "++"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 261, "ast_depth": 11, "n_identifiers": 10, "vocab_size": 44}}
{"dataset_split": "train", "example_id": "hello-algo@e441ee4:codes/cpp/chapter_sorting/merge_sort.cpp#37-47", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e441ee4e35b15be0e03604c246b4027a3a776c16", "license": null}, "file": {"path": "codes/cpp/chapter_sorting/merge_sort.cpp", "language": "Java"}, "method": {"name": "mergeSort", "qualified_name": "codes.cpp.chapter_sorting.merge_sort.cpp#mergeSort", "start_line": 37, "end_line": 47, "signature": "mergeSort(vector<int> &nums, int left, int right)", "original_code": "void mergeSort(vector<int> &nums, int left, int right) {\n    // \u7ec8\u6b62\u6761\u4ef6\n    if (left >= right)\n        return; // \u5f53\u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52\n    // \u5212\u5206\u9636\u6bb5\n    int mid = (left + right) / 2;    // \u8ba1\u7b97\u4e2d\u70b9\n    mergeSort(nums, left, mid);      // \u9012\u5f52\u5de6\u5b50\u6570\u7ec4\n    mergeSort(nums, mid + 1, right); // \u9012\u5f52\u53f3\u5b50\u6570\u7ec4\n    // \u5408\u5e76\u9636\u6bb5\n    merge(nums, left, mid, right);\n}", "doc_comment": "/* \u5f52\u5e76\u6392\u5e8f */"}, "code_tokens": ["void", "mergeSort", "(", ",", ",", ")", "{", "// \u7ec8\u6b62\u6761\u4ef6", "// \u5f53\u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52", "// \u5212\u5206\u9636\u6bb5", "// \u8ba1\u7b97\u4e2d\u70b9", "// \u9012\u5f52\u5de6\u5b50\u6570\u7ec4", "// \u9012\u5f52\u53f3\u5b50\u6570\u7ec4", "// \u5408\u5e76\u9636\u6bb5", "}", "nums", "left", "right", "if", ";", ";", ";", ";", "vector", "&", "int", "int", "(", ")", "return", ";", "int", "mid", "=", "mergeSort", "mergeSort", "merge", "<", ">", "left", ">=", "right", "/", "2", "(", "nums", ",", "left", ",", "mid", ")", "(", "nums", ",", ",", "right", ")", "(", "nums", ",", "left", ",", "mid", ",", "right", ")", "int", "(", ")", "mid", "+", "1", "left", "+", "right"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 108, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 33}}
{"dataset_split": "train", "example_id": "hello-algo@e441ee4:codes/cpp/chapter_sorting/merge_sort.cpp#50-58", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e441ee4e35b15be0e03604c246b4027a3a776c16", "license": null}, "file": {"path": "codes/cpp/chapter_sorting/merge_sort.cpp", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.cpp.chapter_sorting.merge_sort.cpp#main", "start_line": 50, "end_line": 58, "signature": "main()", "original_code": "int main() {\n    /* \u5f52\u5e76\u6392\u5e8f */\n    vector<int> nums = {7, 3, 2, 6, 0, 1, 5, 4};\n    mergeSort(nums, 0, nums.size() - 1);\n    cout << \"\u5f52\u5e76\u6392\u5e8f\u5b8c\u6210\u540e nums = \";\n    printVector(nums);\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "/* \u5f52\u5e76\u6392\u5e8f */", "}", ";", ";", ";", ";", "return", "0", ";", "vector", "nums", "=", "mergeSort", "cout", "<<", "printVector", "<", ">", "{", "7", ",", "3", ",", "2", ",", "6", ",", "0", ",", "1", ",", "5", ",", "4", "}", "(", "nums", ",", "0", ",", ")", "\"", "\u5f52\u5e76\u6392\u5e8f\u5b8c\u6210\u540e nums = ", "\"", "(", "nums", ")", "int", "-", "1", "nums", ".", "size", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 84, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 32}}
{"dataset_split": "train", "example_id": "hello-algo@e441ee4:codes/csharp/chapter_sorting/merge_sort.cs#11-35", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e441ee4e35b15be0e03604c246b4027a3a776c16", "license": null}, "file": {"path": "codes/csharp/chapter_sorting/merge_sort.cs", "language": "Java"}, "method": {"name": "Merge", "qualified_name": "codes.csharp.chapter_sorting.merge_sort.cs#Merge", "start_line": 11, "end_line": 35, "signature": "Merge(int[] nums, int left, int mid, int right)", "original_code": "static void Merge(int[] nums, int left, int mid, int right) {\n        // \u5de6\u5b50\u6570\u7ec4\u533a\u95f4 [left, mid], \u53f3\u5b50\u6570\u7ec4\u533a\u95f4 [mid+1, right]\n        // \u521b\u5efa\u4e00\u4e2a\u4e34\u65f6\u6570\u7ec4 tmp \uff0c\u7528\u4e8e\u5b58\u653e\u5408\u5e76\u540e\u7684\u7ed3\u679c\n        int[] tmp = new int[right - left + 1];\n        // \u521d\u59cb\u5316\u5de6\u5b50\u6570\u7ec4\u548c\u53f3\u5b50\u6570\u7ec4\u7684\u8d77\u59cb\u7d22\u5f15\n        int i = left, j = mid + 1, k = 0;\n        // \u5f53\u5de6\u53f3\u5b50\u6570\u7ec4\u90fd\u8fd8\u6709\u5143\u7d20\u65f6\uff0c\u6bd4\u8f83\u5e76\u5c06\u8f83\u5c0f\u7684\u5143\u7d20\u590d\u5236\u5230\u4e34\u65f6\u6570\u7ec4\u4e2d\n        while (i <= mid && j <= right) {\n            if (nums[i] <= nums[j])\n                tmp[k++] = nums[i++];\n            else\n                tmp[k++] = nums[j++];\n        }\n        // \u5c06\u5de6\u5b50\u6570\u7ec4\u548c\u53f3\u5b50\u6570\u7ec4\u7684\u5269\u4f59\u5143\u7d20\u590d\u5236\u5230\u4e34\u65f6\u6570\u7ec4\u4e2d\n        while (i <= mid) {\n            tmp[k++] = nums[i++];\n        }\n        while (j <= right) {\n            tmp[k++] = nums[j++];\n        }\n        // \u5c06\u4e34\u65f6\u6570\u7ec4 tmp \u4e2d\u7684\u5143\u7d20\u590d\u5236\u56de\u539f\u6570\u7ec4 nums \u7684\u5bf9\u5e94\u533a\u95f4\n        for (k = 0; k < tmp.Length; ++k) {\n            nums[left + k] = tmp[k];\n        }\n    }", "doc_comment": "/* \u5408\u5e76\u5de6\u5b50\u6570\u7ec4\u548c\u53f3\u5b50\u6570\u7ec4 */"}, "code_tokens": ["void", "Merge", "static", "(", ",", ",", ",", ")", "{", "// \u5de6\u5b50\u6570\u7ec4\u533a\u95f4 [left, mid], \u53f3\u5b50\u6570\u7ec4\u533a\u95f4 [mid+1, right]", "// \u521b\u5efa\u4e00\u4e2a\u4e34\u65f6\u6570\u7ec4 tmp \uff0c\u7528\u4e8e\u5b58\u653e\u5408\u5e76\u540e\u7684\u7ed3\u679c", "// \u521d\u59cb\u5316\u5de6\u5b50\u6570\u7ec4\u548c\u53f3\u5b50\u6570\u7ec4\u7684\u8d77\u59cb\u7d22\u5f15", "// \u5f53\u5de6\u53f3\u5b50\u6570\u7ec4\u90fd\u8fd8\u6709\u5143\u7d20\u65f6\uff0c\u6bd4\u8f83\u5e76\u5c06\u8f83\u5c0f\u7684\u5143\u7d20\u590d\u5236\u5230\u4e34\u65f6\u6570\u7ec4\u4e2d", "// \u5c06\u5de6\u5b50\u6570\u7ec4\u548c\u53f3\u5b50\u6570\u7ec4\u7684\u5269\u4f59\u5143\u7d20\u590d\u5236\u5230\u4e34\u65f6\u6570\u7ec4\u4e2d", "// \u5c06\u4e34\u65f6\u6570\u7ec4 tmp \u4e2d\u7684\u5143\u7d20\u590d\u5236\u56de\u539f\u6570\u7ec4 nums \u7684\u5bf9\u5e94\u533a\u95f4", "}", "nums", "left", "mid", "right", ";", ",", ",", ";", "while", "while", "while", "for", "(", ";", ";", ")", "int", "int", "int", "tmp", "=", "int", "i", "=", "left", "j", "=", "k", "=", "0", "(", ")", "{", "}", "(", ")", "{", "}", "(", ")", "{", "}", "k", "=", "0", "k", "<", "++", "k", "{", "}", "int", "[", "]", "int", "[", "]", "new", "mid", "+", "1", "&&", "if", "else", "i", "<=", "mid", ";", "j", "<=", "right", ";", "tmp", ".", "Length", ";", "int", "[", "]", "i", "<=", "mid", "j", "<=", "right", "(", ")", ";", ";", "=", "=", "=", "+", "1", "<=", "=", "=", "tmp", "[", "]", "nums", "[", "]", "tmp", "[", "]", "nums", "[", "]", "nums", "[", "]", "tmp", "[", "k", "]", "right", "-", "left", "nums", "[", "i", "]", "nums", "[", "j", "]", "tmp", "[", "]", "nums", "[", "]", "tmp", "[", "]", "nums", "[", "]", "k", "++", "i", "++", "k", "++", "j", "++", "left", "+", "k", "k", "++", "i", "++", "k", "++", "j", "++"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 259, "ast_depth": 11, "n_identifiers": 10, "vocab_size": 42}}
{"dataset_split": "train", "example_id": "hello-algo@e441ee4:codes/csharp/chapter_sorting/merge_sort.cs#38-47", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e441ee4e35b15be0e03604c246b4027a3a776c16", "license": null}, "file": {"path": "codes/csharp/chapter_sorting/merge_sort.cs", "language": "Java"}, "method": {"name": "MergeSort", "qualified_name": "codes.csharp.chapter_sorting.merge_sort.cs#MergeSort", "start_line": 38, "end_line": 47, "signature": "MergeSort(int[] nums, int left, int right)", "original_code": "static void MergeSort(int[] nums, int left, int right) {\n        // \u7ec8\u6b62\u6761\u4ef6\n        if (left >= right) return;       // \u5f53\u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52\n        // \u5212\u5206\u9636\u6bb5\n        int mid = (left + right) / 2;    // \u8ba1\u7b97\u4e2d\u70b9\n        MergeSort(nums, left, mid);      // \u9012\u5f52\u5de6\u5b50\u6570\u7ec4\n        MergeSort(nums, mid + 1, right); // \u9012\u5f52\u53f3\u5b50\u6570\u7ec4\n        // \u5408\u5e76\u9636\u6bb5\n        Merge(nums, left, mid, right);\n    }", "doc_comment": "/* \u5f52\u5e76\u6392\u5e8f */"}, "code_tokens": ["void", "MergeSort", "static", "(", ",", ",", ")", "{", "// \u7ec8\u6b62\u6761\u4ef6", "// \u5f53\u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52", "// \u5212\u5206\u9636\u6bb5", "// \u8ba1\u7b97\u4e2d\u70b9", "// \u9012\u5f52\u5de6\u5b50\u6570\u7ec4", "// \u9012\u5f52\u53f3\u5b50\u6570\u7ec4", "// \u5408\u5e76\u9636\u6bb5", "}", "nums", "left", "right", "if", ";", ";", ";", ";", "int", "int", "(", ")", "return", ";", "int", "mid", "=", "MergeSort", "MergeSort", "Merge", "int", "[", "]", "left", ">=", "right", "/", "2", "(", "nums", ",", "left", ",", "mid", ")", "(", "nums", ",", ",", "right", ")", "(", "nums", ",", "left", ",", "mid", ",", "right", ")", "(", ")", "mid", "+", "1", "left", "+", "right"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 107, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 32}}
{"dataset_split": "train", "example_id": "hello-algo@e441ee4:codes/csharp/chapter_sorting/merge_sort.cs#50-55", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e441ee4e35b15be0e03604c246b4027a3a776c16", "license": null}, "file": {"path": "codes/csharp/chapter_sorting/merge_sort.cs", "language": "Java"}, "method": {"name": "Test", "qualified_name": "codes.csharp.chapter_sorting.merge_sort.cs#Test", "start_line": 50, "end_line": 55, "signature": "Test()", "original_code": "public void Test() {\n        /* \u5f52\u5e76\u6392\u5e8f */\n        int[] nums = { 7, 3, 2, 6, 0, 1, 5, 4 };\n        MergeSort(nums, 0, nums.Length - 1);\n        Console.WriteLine(\"\u5f52\u5e76\u6392\u5e8f\u5b8c\u6210\u540e nums = \" + string.Join(\",\", nums));\n    }", "doc_comment": ""}, "code_tokens": ["void", "Test", "public", "(", ")", "{", "/* \u5f52\u5e76\u6392\u5e8f */", "}", ";", ";", ";", "nums", "=", "MergeSort", "Console", ".", "WriteLine", "int", "[", "]", "{", "7", ",", "3", ",", "2", ",", "6", ",", "0", ",", "1", ",", "5", ",", "4", "}", "(", "nums", ",", "0", ",", ")", "(", ")", "-", "1", "+", "nums", ".", "Length", "\"", "\u5f52\u5e76\u6392\u5e8f\u5b8c\u6210\u540e nums = ", "\"", "string", ".", "Join", "(", ",", "nums", ")", "\"", ",", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 88, "ast_depth": 11, "n_identifiers": 8, "vocab_size": 34}}
{"dataset_split": "train", "example_id": "hello-algo@e441ee4:codes/go/chapter_sorting/merge_sort.go#8-24", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e441ee4e35b15be0e03604c246b4027a3a776c16", "license": null}, "file": {"path": "codes/go/chapter_sorting/merge_sort.go", "language": "Java"}, "method": {"name": "merge", "qualified_name": "codes.go.chapter_sorting.merge_sort.go#merge", "start_line": 8, "end_line": 24, "signature": "merge(nums []int, left, mid, right int)", "original_code": "func merge(nums []int, left, mid, right int) {\n\t// \u5de6\u5b50\u6570\u7ec4\u533a\u95f4 [left, mid], \u53f3\u5b50\u6570\u7ec4\u533a\u95f4 [mid+1, right]\n\t// \u521b\u5efa\u4e00\u4e2a\u4e34\u65f6\u6570\u7ec4 tmp \uff0c\u7528\u4e8e\u5b58\u653e\u5408\u5e76\u540e\u7684\u7ed3\u679c\n\ttmp := make([]int, right-left+1)\n\t// \u521d\u59cb\u5316\u5de6\u5b50\u6570\u7ec4\u548c\u53f3\u5b50\u6570\u7ec4\u7684\u8d77\u59cb\u7d22\u5f15\n\ti, j, k := left, mid+1, 0\n\t// \u5f53\u5de6\u53f3\u5b50\u6570\u7ec4\u90fd\u8fd8\u6709\u5143\u7d20\u65f6\uff0c\u6bd4\u8f83\u5e76\u5c06\u8f83\u5c0f\u7684\u5143\u7d20\u590d\u5236\u5230\u4e34\u65f6\u6570\u7ec4\u4e2d\n\tfor i <= mid && j <= right {\n\t\tif nums[i] <= nums[j] {\n\t\t\ttmp[k] = nums[i]\n\t\t\ti++\n\t\t} else {\n\t\t\ttmp[k] = nums[j]\n\t\t\tj++\n\t\t}\n\t\tk++\n\t}", "doc_comment": ""}, "code_tokens": ["func", "merge", "(", ",", ",", ")", "{", "// \u5de6\u5b50\u6570\u7ec4\u533a\u95f4 [left, mid], \u53f3\u5b50\u6570\u7ec4\u533a\u95f4 [mid+1, right]", "// \u521b\u5efa\u4e00\u4e2a\u4e34\u65f6\u6570\u7ec4 tmp \uff0c\u7528\u4e8e\u5b58\u653e\u5408\u5e76\u540e\u7684\u7ed3\u679c", "// \u521d\u59cb\u5316\u5de6\u5b50\u6570\u7ec4\u548c\u53f3\u5b50\u6570\u7ec4\u7684\u8d77\u59cb\u7d22\u5f15", "// \u5f53\u5de6\u53f3\u5b50\u6570\u7ec4\u90fd\u8fd8\u6709\u5143\u7d20\u65f6\uff0c\u6bd4\u8f83\u5e76\u5c06\u8f83\u5c0f\u7684\u5143\u7d20\u590d\u5236\u5230\u4e34\u65f6\u6570\u7ec4\u4e2d", "}", "int", "left", "mid", "right", "int", ")", "i", ",", ",", "", ",", "0", "for", "{", "if", "", "{", "}", "else", "", "{", "}", "", "nums", ",", "tmp", "=", ",", "j", "k", "=", "left", "mid", "+", "1", "&&", "<=", "", "", "k", "++", "[", "]", ":", "int", ",", "+", "1", ":", "i", "<=", "mid", "j", "<=", "right", "nums", "[", "i", "]", "nums", "[", "j", "]", "=", "=", "make", "right", "-", "left", "tmp", "[", "k", "]", "++", "tmp", "[", "k", "]", "++", "(", "[", "]", "nums", "[", "i", "]", "i", "nums", "[", "j", "]", "j"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 156, "ast_depth": 9, "n_identifiers": 11, "vocab_size": 36}}
{"dataset_split": "train", "example_id": "hello-algo@e441ee4:codes/go/chapter_sorting/merge_sort.go#43-54", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e441ee4e35b15be0e03604c246b4027a3a776c16", "license": null}, "file": {"path": "codes/go/chapter_sorting/merge_sort.go", "language": "Java"}, "method": {"name": "mergeSort", "qualified_name": "codes.go.chapter_sorting.merge_sort.go#mergeSort", "start_line": 43, "end_line": 54, "signature": "mergeSort(nums []int, left, right int)", "original_code": "func mergeSort(nums []int, left, right int) {\n\t// \u7ec8\u6b62\u6761\u4ef6\n\tif left >= right {\n\t\treturn\n\t}\n\t// \u5212\u5206\u9636\u6bb5\n\tmid := (left + right) / 2\n\tmergeSort(nums, left, mid)\n\tmergeSort(nums, mid+1, right)\n\t// \u5408\u5e76\u9636\u6bb5\n\tmerge(nums, left, mid, right)\n}", "doc_comment": "/* \u5f52\u5e76\u6392\u5e8f */"}, "code_tokens": ["func", "mergeSort", "(", ",", ",", ")", "{", "// \u7ec8\u6b62\u6761\u4ef6", "// \u5212\u5206\u9636\u6bb5", "}", "int", "left", "", "right", "int", "if", "{", "}", "", "nums", "left", ">=", "right", "return", "mid", "=", "[", "]", ":", "/", "// \u5408\u5e76\u9636\u6bb5", "(", ")", "2", "merge", "left", "+", "right", "mergeSort", "mergeSort", "(", "nums", ",", "left", ",", "mid", ",", "right", ")", "(", "nums", ",", "left", ",", "mid", ")", "(", "nums", ",", ",", "right", ")", "mid", "+", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 92, "ast_depth": 11, "n_identifiers": 8, "vocab_size": 28}}
{"dataset_split": "train", "example_id": "hello-algo@e441ee4:codes/java/chapter_sorting/merge_sort.java#13-37", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e441ee4e35b15be0e03604c246b4027a3a776c16", "license": null}, "file": {"path": "codes/java/chapter_sorting/merge_sort.java", "language": "Java"}, "method": {"name": "merge", "qualified_name": "codes.java.chapter_sorting.merge_sort#merge", "start_line": 13, "end_line": 37, "signature": "merge(int[] nums, int left, int mid, int right)", "original_code": "static void merge(int[] nums, int left, int mid, int right) {\n        // \u5de6\u5b50\u6570\u7ec4\u533a\u95f4 [left, mid], \u53f3\u5b50\u6570\u7ec4\u533a\u95f4 [mid+1, right]\n        // \u521b\u5efa\u4e00\u4e2a\u4e34\u65f6\u6570\u7ec4 tmp \uff0c\u7528\u4e8e\u5b58\u653e\u5408\u5e76\u540e\u7684\u7ed3\u679c\n        int[] tmp = new int[right - left + 1];\n        // \u521d\u59cb\u5316\u5de6\u5b50\u6570\u7ec4\u548c\u53f3\u5b50\u6570\u7ec4\u7684\u8d77\u59cb\u7d22\u5f15\n        int i = left, j = mid + 1, k = 0;\n        // \u5f53\u5de6\u53f3\u5b50\u6570\u7ec4\u90fd\u8fd8\u6709\u5143\u7d20\u65f6\uff0c\u6bd4\u8f83\u5e76\u5c06\u8f83\u5c0f\u7684\u5143\u7d20\u590d\u5236\u5230\u4e34\u65f6\u6570\u7ec4\u4e2d\n        while (i <= mid && j <= right) {\n            if (nums[i] <= nums[j])\n                tmp[k++] = nums[i++];\n            else\n                tmp[k++] = nums[j++];\n        }\n        // \u5c06\u5de6\u5b50\u6570\u7ec4\u548c\u53f3\u5b50\u6570\u7ec4\u7684\u5269\u4f59\u5143\u7d20\u590d\u5236\u5230\u4e34\u65f6\u6570\u7ec4\u4e2d\n        while (i <= mid) {\n            tmp[k++] = nums[i++];\n        }\n        while (j <= right) {\n            tmp[k++] = nums[j++];\n        }\n        // \u5c06\u4e34\u65f6\u6570\u7ec4 tmp \u4e2d\u7684\u5143\u7d20\u590d\u5236\u56de\u539f\u6570\u7ec4 nums \u7684\u5bf9\u5e94\u533a\u95f4\n        for (k = 0; k < tmp.length; k++) {\n            nums[left + k] = tmp[k];\n        }\n    }", "doc_comment": "/* \u5408\u5e76\u5de6\u5b50\u6570\u7ec4\u548c\u53f3\u5b50\u6570\u7ec4 */"}, "code_tokens": ["void", "merge", "static", "(", ",", ",", ",", ")", "{", "// \u5de6\u5b50\u6570\u7ec4\u533a\u95f4 [left, mid], \u53f3\u5b50\u6570\u7ec4\u533a\u95f4 [mid+1, right]", "// \u521b\u5efa\u4e00\u4e2a\u4e34\u65f6\u6570\u7ec4 tmp \uff0c\u7528\u4e8e\u5b58\u653e\u5408\u5e76\u540e\u7684\u7ed3\u679c", "// \u521d\u59cb\u5316\u5de6\u5b50\u6570\u7ec4\u548c\u53f3\u5b50\u6570\u7ec4\u7684\u8d77\u59cb\u7d22\u5f15", "// \u5f53\u5de6\u53f3\u5b50\u6570\u7ec4\u90fd\u8fd8\u6709\u5143\u7d20\u65f6\uff0c\u6bd4\u8f83\u5e76\u5c06\u8f83\u5c0f\u7684\u5143\u7d20\u590d\u5236\u5230\u4e34\u65f6\u6570\u7ec4\u4e2d", "// \u5c06\u5de6\u5b50\u6570\u7ec4\u548c\u53f3\u5b50\u6570\u7ec4\u7684\u5269\u4f59\u5143\u7d20\u590d\u5236\u5230\u4e34\u65f6\u6570\u7ec4\u4e2d", "// \u5c06\u4e34\u65f6\u6570\u7ec4 tmp \u4e2d\u7684\u5143\u7d20\u590d\u5236\u56de\u539f\u6570\u7ec4 nums \u7684\u5bf9\u5e94\u533a\u95f4", "}", "nums", "left", "mid", "right", ";", ",", ",", ";", "while", "while", "while", "for", "(", ";", ";", ")", "int", "int", "int", "tmp", "=", "int", "i", "=", "left", "j", "=", "k", "=", "0", "(", ")", "{", "}", "(", ")", "{", "}", "(", ")", "{", "}", "k", "=", "0", "k", "<", "k", "++", "{", "}", "int", "[", "]", "int", "[", "]", "new", "mid", "+", "1", "&&", "if", "else", "i", "<=", "mid", ";", "j", "<=", "right", ";", "tmp", ".", "length", ";", "int", "[", "]", "i", "<=", "mid", "j", "<=", "right", "(", ")", ";", ";", "=", "=", "=", "+", "1", "<=", "=", "=", "tmp", "[", "]", "nums", "[", "]", "tmp", "[", "]", "nums", "[", "]", "nums", "[", "]", "tmp", "[", "k", "]", "right", "-", "left", "nums", "[", "i", "]", "nums", "[", "j", "]", "tmp", "[", "]", "nums", "[", "]", "tmp", "[", "]", "nums", "[", "]", "k", "++", "i", "++", "k", "++", "j", "++", "left", "+", "k", "k", "++", "i", "++", "k", "++", "j", "++"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 259, "ast_depth": 11, "n_identifiers": 10, "vocab_size": 42}}
{"dataset_split": "train", "example_id": "hello-algo@e441ee4:codes/java/chapter_sorting/merge_sort.java#40-50", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e441ee4e35b15be0e03604c246b4027a3a776c16", "license": null}, "file": {"path": "codes/java/chapter_sorting/merge_sort.java", "language": "Java"}, "method": {"name": "mergeSort", "qualified_name": "codes.java.chapter_sorting.merge_sort#mergeSort", "start_line": 40, "end_line": 50, "signature": "mergeSort(int[] nums, int left, int right)", "original_code": "static void mergeSort(int[] nums, int left, int right) {\n        // \u7ec8\u6b62\u6761\u4ef6\n        if (left >= right)\n            return; // \u5f53\u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52\n        // \u5212\u5206\u9636\u6bb5\n        int mid = (left + right) / 2; // \u8ba1\u7b97\u4e2d\u70b9\n        mergeSort(nums, left, mid); // \u9012\u5f52\u5de6\u5b50\u6570\u7ec4\n        mergeSort(nums, mid + 1, right); // \u9012\u5f52\u53f3\u5b50\u6570\u7ec4\n        // \u5408\u5e76\u9636\u6bb5\n        merge(nums, left, mid, right);\n    }", "doc_comment": "/* \u5f52\u5e76\u6392\u5e8f */"}, "code_tokens": ["void", "mergeSort", "static", "(", ",", ",", ")", "{", "// \u7ec8\u6b62\u6761\u4ef6", "// \u5f53\u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52", "// \u5212\u5206\u9636\u6bb5", "// \u8ba1\u7b97\u4e2d\u70b9", "// \u9012\u5f52\u5de6\u5b50\u6570\u7ec4", "// \u9012\u5f52\u53f3\u5b50\u6570\u7ec4", "// \u5408\u5e76\u9636\u6bb5", "}", "nums", "left", "right", "if", ";", ";", ";", ";", "int", "int", "(", ")", "return", ";", "int", "mid", "=", "mergeSort", "mergeSort", "merge", "int", "[", "]", "left", ">=", "right", "/", "2", "(", "nums", ",", "left", ",", "mid", ")", "(", "nums", ",", ",", "right", ")", "(", "nums", ",", "left", ",", "mid", ",", "right", ")", "(", ")", "mid", "+", "1", "left", "+", "right"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 107, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 32}}
{"dataset_split": "train", "example_id": "hello-algo@e441ee4:codes/java/chapter_sorting/merge_sort.java#52-57", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e441ee4e35b15be0e03604c246b4027a3a776c16", "license": null}, "file": {"path": "codes/java/chapter_sorting/merge_sort.java", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.java.chapter_sorting.merge_sort#main", "start_line": 52, "end_line": 57, "signature": "main(String[] args)", "original_code": "public static void main(String[] args) {\n        /* \u5f52\u5e76\u6392\u5e8f */\n        int[] nums = { 7, 3, 2, 6, 0, 1, 5, 4 };\n        mergeSort(nums, 0, nums.length - 1);\n        System.out.println(\"\u5f52\u5e76\u6392\u5e8f\u5b8c\u6210\u540e nums = \" + Arrays.toString(nums));\n    }", "doc_comment": ""}, "code_tokens": ["void", "main", "public", "static", "(", ")", "{", "/* \u5f52\u5e76\u6392\u5e8f */", "}", "args", ";", ";", ";", "String", "nums", "=", "mergeSort", ".", "println", "[", "]", "int", "[", "]", "{", "7", ",", "3", ",", "2", ",", "6", ",", "0", ",", "1", ",", "5", ",", "4", "}", "(", "nums", ",", "0", ",", ")", "System", ".", "out", "(", ")", "-", "1", "+", "nums", ".", "length", "\"", "\u5f52\u5e76\u6392\u5e8f\u5b8c\u6210\u540e nums = ", "\"", "Arrays", ".", "toString", "(", "nums", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 94, "ast_depth": 10, "n_identifiers": 10, "vocab_size": 38}}
{"dataset_split": "train", "example_id": "hello-algo@e441ee4:codes/javascript/chapter_sorting/merge_sort.js#38-47", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e441ee4e35b15be0e03604c246b4027a3a776c16", "license": null}, "file": {"path": "codes/javascript/chapter_sorting/merge_sort.js", "language": "Java"}, "method": {"name": "mergeSort", "qualified_name": "codes.javascript.chapter_sorting.merge_sort.js#mergeSort", "start_line": 38, "end_line": 47, "signature": "mergeSort(nums, left, right)", "original_code": "function mergeSort(nums, left, right) {\n    // \u7ec8\u6b62\u6761\u4ef6\n    if (left >= right) return; // \u5f53\u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52\n    // \u5212\u5206\u9636\u6bb5\n    let mid = Math.floor((left + right) / 2); // \u8ba1\u7b97\u4e2d\u70b9\n    mergeSort(nums, left, mid); // \u9012\u5f52\u5de6\u5b50\u6570\u7ec4\n    mergeSort(nums, mid + 1, right); // \u9012\u5f52\u53f3\u5b50\u6570\u7ec4\n    // \u5408\u5e76\u9636\u6bb5\n    merge(nums, left, mid, right);\n}", "doc_comment": "/* \u5f52\u5e76\u6392\u5e8f */"}, "code_tokens": ["function", "mergeSort", "(", ",", ")", "{", "// \u7ec8\u6b62\u6761\u4ef6", "// \u5f53\u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52", "// \u5212\u5206\u9636\u6bb5", "// \u8ba1\u7b97\u4e2d\u70b9", "// \u9012\u5f52\u5de6\u5b50\u6570\u7ec4", "// \u9012\u5f52\u53f3\u5b50\u6570\u7ec4", "// \u5408\u5e76\u9636\u6bb5", "}", "nums", "left", "right", "", "if", "let", ";", ";", ";", ";", ",", "(", ")", "return", ";", "mid", "=", "mergeSort", "mergeSort", "merge", "left", ">=", "right", "Math", ".", "floor", "(", "nums", ",", "left", ",", "mid", ")", "(", "nums", ",", ",", "right", ")", "(", "nums", ",", "left", ",", "mid", ",", "right", ")", "(", ")", "mid", "+", "1", "/", "2", "(", ")", "left", "+", "right"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 102, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 33}}
{"dataset_split": "train", "example_id": "hello-algo@e441ee4:codes/typescript/chapter_sorting/merge_sort.ts#8-35", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e441ee4e35b15be0e03604c246b4027a3a776c16", "license": null}, "file": {"path": "codes/typescript/chapter_sorting/merge_sort.ts", "language": "Java"}, "method": {"name": "merge", "qualified_name": "codes.typescript.chapter_sorting.merge_sort.ts#merge", "start_line": 8, "end_line": 35, "signature": "merge(nums: number[], left: number, mid: number, right: number)", "original_code": "function merge(nums: number[], left: number, mid: number, right: number): void {\n    // \u5de6\u5b50\u6570\u7ec4\u533a\u95f4 [left, mid], \u53f3\u5b50\u6570\u7ec4\u533a\u95f4 [mid+1, right]\n    // \u521b\u5efa\u4e00\u4e2a\u4e34\u65f6\u6570\u7ec4 tmp \uff0c\u7528\u4e8e\u5b58\u653e\u5408\u5e76\u540e\u7684\u7ed3\u679c\n    const tmp = new Array(right - left + 1);\n    // \u521d\u59cb\u5316\u5de6\u5b50\u6570\u7ec4\u548c\u53f3\u5b50\u6570\u7ec4\u7684\u8d77\u59cb\u7d22\u5f15\n    let i = left,\n        j = mid + 1,\n        k = 0;\n    // \u5f53\u5de6\u53f3\u5b50\u6570\u7ec4\u90fd\u8fd8\u6709\u5143\u7d20\u65f6\uff0c\u6bd4\u8f83\u5e76\u5c06\u8f83\u5c0f\u7684\u5143\u7d20\u590d\u5236\u5230\u4e34\u65f6\u6570\u7ec4\u4e2d\n    while (i <= mid && j <= right) {\n        if (nums[i] <= nums[j]) {\n            tmp[k++] = nums[i++];\n        } else {\n            tmp[k++] = nums[j++];\n        }\n    }\n    // \u5c06\u5de6\u5b50\u6570\u7ec4\u548c\u53f3\u5b50\u6570\u7ec4\u7684\u5269\u4f59\u5143\u7d20\u590d\u5236\u5230\u4e34\u65f6\u6570\u7ec4\u4e2d\n    while (i <= mid) {\n        tmp[k++] = nums[i++];\n    }\n    while (j <= right) {\n        tmp[k++] = nums[j++];\n    }\n    // \u5c06\u4e34\u65f6\u6570\u7ec4 tmp \u4e2d\u7684\u5143\u7d20\u590d\u5236\u56de\u539f\u6570\u7ec4 nums \u7684\u5bf9\u5e94\u533a\u95f4\n    for (k = 0; k < tmp.length; k++) {\n        nums[left + k] = tmp[k];\n    }\n}", "doc_comment": "/* \u5408\u5e76\u5de6\u5b50\u6570\u7ec4\u548c\u53f3\u5b50\u6570\u7ec4 */"}, "code_tokens": ["function", "merge", "(", ",", ",", ",", ")", ":", "void", "{", "// \u5de6\u5b50\u6570\u7ec4\u533a\u95f4 [left, mid], \u53f3\u5b50\u6570\u7ec4\u533a\u95f4 [mid+1, right]", "// \u521b\u5efa\u4e00\u4e2a\u4e34\u65f6\u6570\u7ec4 tmp \uff0c\u7528\u4e8e\u5b58\u653e\u5408\u5e76\u540e\u7684\u7ed3\u679c", "// \u521d\u59cb\u5316\u5de6\u5b50\u6570\u7ec4\u548c\u53f3\u5b50\u6570\u7ec4\u7684\u8d77\u59cb\u7d22\u5f15", "// \u5f53\u5de6\u53f3\u5b50\u6570\u7ec4\u90fd\u8fd8\u6709\u5143\u7d20\u65f6\uff0c\u6bd4\u8f83\u5e76\u5c06\u8f83\u5c0f\u7684\u5143\u7d20\u590d\u5236\u5230\u4e34\u65f6\u6570\u7ec4\u4e2d", "// \u5c06\u5de6\u5b50\u6570\u7ec4\u548c\u53f3\u5b50\u6570\u7ec4\u7684\u5269\u4f59\u5143\u7d20\u590d\u5236\u5230\u4e34\u65f6\u6570\u7ec4\u4e2d", "// \u5c06\u4e34\u65f6\u6570\u7ec4 tmp \u4e2d\u7684\u5143\u7d20\u590d\u5236\u56de\u539f\u6570\u7ec4 nums \u7684\u5bf9\u5e94\u533a\u95f4", "}", "nums", "number", "left", "number", "mid", "number", "right", "number", "const", ";", "let", ",", ",", ";", "while", "while", "while", "for", "(", ";", ";", ")", ":", "[", "]", ":", ":", ":", "tmp", "=", "i", "=", "left", "j", "=", "k", "=", "0", "(", ")", "{", "}", "(", ")", "{", "}", "(", ")", "{", "}", "k", "=", "0", "k", "<", "k", "++", "{", "}", "new", "Array", "mid", "+", "1", "&&", "if", "else", "i", "<=", "mid", ";", "j", "<=", "right", ";", "tmp", ".", "length", ";", "(", ")", "i", "<=", "mid", "j", "<=", "right", "(", ")", "{", "}", "{", "}", "=", "=", "=", "+", "1", "<=", ";", ";", "tmp", "[", "]", "nums", "[", "]", "tmp", "[", "]", "nums", "[", "]", "nums", "[", "]", "tmp", "[", "k", "]", "right", "-", "left", "nums", "[", "i", "]", "nums", "[", "j", "]", "=", "=", "k", "++", "i", "++", "k", "++", "j", "++", "left", "+", "k", "tmp", "[", "]", "nums", "[", "]", "tmp", "[", "]", "nums", "[", "]", "k", "++", "i", "++", "k", "++", "j", "++"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 262, "ast_depth": 12, "n_identifiers": 11, "vocab_size": 46}}
{"dataset_split": "train", "example_id": "hello-algo@e441ee4:codes/typescript/chapter_sorting/merge_sort.ts#38-47", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e441ee4e35b15be0e03604c246b4027a3a776c16", "license": null}, "file": {"path": "codes/typescript/chapter_sorting/merge_sort.ts", "language": "Java"}, "method": {"name": "mergeSort", "qualified_name": "codes.typescript.chapter_sorting.merge_sort.ts#mergeSort", "start_line": 38, "end_line": 47, "signature": "mergeSort(nums: number[], left: number, right: number)", "original_code": "function mergeSort(nums: number[], left: number, right: number): void {\n    // \u7ec8\u6b62\u6761\u4ef6\n    if (left >= right) return; // \u5f53\u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52\n    // \u5212\u5206\u9636\u6bb5\n    let mid = Math.floor((left + right) / 2); // \u8ba1\u7b97\u4e2d\u70b9\n    mergeSort(nums, left, mid); // \u9012\u5f52\u5de6\u5b50\u6570\u7ec4\n    mergeSort(nums, mid + 1, right); // \u9012\u5f52\u53f3\u5b50\u6570\u7ec4\n    // \u5408\u5e76\u9636\u6bb5\n    merge(nums, left, mid, right);\n}", "doc_comment": "/* \u5f52\u5e76\u6392\u5e8f */"}, "code_tokens": ["function", "mergeSort", "(", ",", ",", ")", ":", "void", "{", "// \u7ec8\u6b62\u6761\u4ef6", "// \u5f53\u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52", "// \u5212\u5206\u9636\u6bb5", "// \u8ba1\u7b97\u4e2d\u70b9", "// \u9012\u5f52\u5de6\u5b50\u6570\u7ec4", "// \u9012\u5f52\u53f3\u5b50\u6570\u7ec4", "// \u5408\u5e76\u9636\u6bb5", "}", "nums", "number", "left", "number", "right", "number", "if", "let", ";", ";", ";", ";", ":", "[", "]", ":", ":", "(", ")", "return", ";", "mid", "=", "mergeSort", "mergeSort", "merge", "left", ">=", "right", "Math", ".", "floor", "(", "nums", ",", "left", ",", "mid", ")", "(", "nums", ",", ",", "right", ")", "(", "nums", ",", "left", ",", "mid", ",", "right", ")", "(", ")", "mid", "+", "1", "/", "2", "(", ")", "left", "+", "right"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 116, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 37}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_array_and_linkedlist/linked_list.c#18-27", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/linked_list.c", "language": "Java"}, "method": {"name": "removeItem", "qualified_name": "codes.c.chapter_array_and_linkedlist.linked_list.c#removeItem", "start_line": 18, "end_line": 27, "signature": "removeItem(ListNode *n0)", "original_code": "void removeItem(ListNode *n0) {\n    if (!n0->next)\n        return;\n    // n0 -> P -> n1\n    ListNode *P = n0->next;\n    ListNode *n1 = P->next;\n    n0->next = n1;\n    // \u91ca\u653e\u5185\u5b58\n    free(P);\n}", "doc_comment": "// \u6ce8\u610f\uff1astdio.h \u5360\u7528\u4e86 remove \u5173\u952e\u8bcd"}, "code_tokens": ["void", "removeItem", "(", ")", "{", "// n0 -> P -> n1", "// \u91ca\u653e\u5185\u5b58", "}", "ListNode", "n0", "if", ";", ";", ";", ";", "*", "(", ")", "return", ";", "ListNode", "*", "ListNode", "*", "n0", "->", "free", "!", "P", "=", "n1", "=", "next", "=", "n1", "(", "P", ")", "n0", "->", "next", "n0", "->", "next", "P", "->", "next"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 72, "ast_depth": 8, "n_identifiers": 7, "vocab_size": 21}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_array_and_linkedlist/linked_list.c#39-48", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/linked_list.c", "language": "Java"}, "method": {"name": "find", "qualified_name": "codes.c.chapter_array_and_linkedlist.linked_list.c#find", "start_line": 39, "end_line": 48, "signature": "find(ListNode *head, int target)", "original_code": "int find(ListNode *head, int target) {\n    int index = 0;\n    while (head) {\n        if (head->val == target)\n            return index;\n        head = head->next;\n        index++;\n    }\n    return -1;\n}", "doc_comment": "/* \u5728\u94fe\u8868\u4e2d\u67e5\u627e\u503c\u4e3a target \u7684\u9996\u4e2a\u8282\u70b9 */"}, "code_tokens": ["find", "int", "(", ",", ")", "{", "}", "ListNode", "head", "target", ";", "while", "return", ";", "*", "int", "int", "index", "=", "0", "(", "head", ")", "{", "}", "-", "1", "if", ";", ";", "(", ")", "return", "index", ";", "head", "=", "index", "++", "head", "->", "head", "->", "next", "val", "==", "target"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 74, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 25}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_array_and_linkedlist/linked_list.c#51-88", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/linked_list.c", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.c.chapter_array_and_linkedlist.linked_list.c#main", "start_line": 51, "end_line": 88, "signature": "main()", "original_code": "int main() {\n    /* \u521d\u59cb\u5316\u94fe\u8868 */\n    // \u521d\u59cb\u5316\u5404\u4e2a\u8282\u70b9\n    ListNode *n0 = newListNode(1);\n    ListNode *n1 = newListNode(3);\n    ListNode *n2 = newListNode(2);\n    ListNode *n3 = newListNode(5);\n    ListNode *n4 = newListNode(4);\n    // \u6784\u5efa\u5f15\u7528\u6307\u5411\n    n0->next = n1;\n    n1->next = n2;\n    n2->next = n3;\n    n3->next = n4;\n    printf(\"\u521d\u59cb\u5316\u7684\u94fe\u8868\u4e3a\\r\\n\");\n    printLinkedList(n0);\n\n    /* \u63d2\u5165\u8282\u70b9 */\n    insert(n0, newListNode(0));\n    printf(\"\u63d2\u5165\u8282\u70b9\u540e\u7684\u94fe\u8868\u4e3a\\r\\n\");\n    printLinkedList(n0);\n\n    /* \u5220\u9664\u8282\u70b9 */\n    removeItem(n0);\n    printf(\"\u5220\u9664\u8282\u70b9\u540e\u7684\u94fe\u8868\u4e3a\\r\\n\");\n    printLinkedList(n0);\n\n    /* \u8bbf\u95ee\u8282\u70b9 */\n    ListNode *node = access(n0, 3);\n    printf(\"\u94fe\u8868\u4e2d\u7d22\u5f15 3 \u5904\u7684\u8282\u70b9\u7684\u503c = %d\\r\\n\", node->val);\n\n    /* \u67e5\u627e\u8282\u70b9 */\n    int index = find(n0, 2);\n    printf(\"\u94fe\u8868\u4e2d\u503c\u4e3a 2 \u7684\u8282\u70b9\u7684\u7d22\u5f15 = %d\\r\\n\", index);\n\n    // \u91ca\u653e\u5185\u5b58\n    freeMemoryLinkedList(n0);\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "/* \u521d\u59cb\u5316\u94fe\u8868 */", "// \u521d\u59cb\u5316\u5404\u4e2a\u8282\u70b9", "// \u6784\u5efa\u5f15\u7528\u6307\u5411", "/* \u63d2\u5165\u8282\u70b9 */", "/* \u5220\u9664\u8282\u70b9 */", "/* \u8bbf\u95ee\u8282\u70b9 */", "/* \u67e5\u627e\u8282\u70b9 */", "// \u91ca\u653e\u5185\u5b58", "}", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "return", "0", ";", "ListNode", "*", "ListNode", "*", "ListNode", "*", "ListNode", "*", "ListNode", "*", "n0", "->", "n1", "->", "n2", "->", "n3", "->", "printf", "printLinkedList", "insert", "printf", "printLinkedList", "removeItem", "printf", "printLinkedList", "ListNode", "*", "printf", "int", "index", "=", "printf", "freeMemoryLinkedList", "n0", "=", "n1", "=", "n2", "=", "n3", "=", "n4", "=", "next", "=", "n1", "next", "=", "n2", "next", "=", "n3", "next", "=", "n4", "(", ")", "(", "n0", ")", "(", "n0", ",", ")", "(", ")", "(", "n0", ")", "(", "n0", ")", "(", ")", "(", "n0", ")", "node", "=", "(", ",", ")", "find", "(", ",", "index", ")", "(", "n0", ")", "newListNode", "newListNode", "newListNode", "newListNode", "newListNode", "\"", "\u521d\u59cb\u5316\u7684\u94fe\u8868\u4e3a", "\\r", "\\n", "\"", "newListNode", "\"", "\u63d2\u5165\u8282\u70b9\u540e\u7684\u94fe\u8868\u4e3a", "\\r", "\\n", "\"", "\"", "\u5220\u9664\u8282\u70b9\u540e\u7684\u94fe\u8868\u4e3a", "\\r", "\\n", "\"", "access", "\"", "\u94fe\u8868\u4e2d\u7d22\u5f15 3 \u5904\u7684\u8282\u70b9\u7684\u503c = %d", "\\r", "\\n", "\"", "node", "->", "val", "(", "n0", ",", "2", ")", "\"", "\u94fe\u8868\u4e2d\u503c\u4e3a 2 \u7684\u8282\u70b9\u7684\u7d22\u5f15 = %d", "\\r", "\\n", "\"", "(", "1", ")", "(", "3", ")", "(", "2", ")", "(", "5", ")", "(", "4", ")", "(", "0", ")", "(", "n0", ",", "3", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 287, "ast_depth": 9, "n_identifiers": 19, "vocab_size": 52}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_array_and_linkedlist/my_list.c#17-17", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/my_list.c", "language": "Java"}, "method": {"name": "extendCapacity", "qualified_name": "codes.c.chapter_array_and_linkedlist.my_list.c#extendCapacity", "start_line": 17, "end_line": 17, "signature": "extendCapacity(MyList *nums)", "original_code": "void extendCapacity(MyList *nums);", "doc_comment": ""}, "code_tokens": ["void", "extendCapacity", ";", "(", ")", "MyList", "nums", "*"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 13, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 8}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_array_and_linkedlist/my_list.c#30-33", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/my_list.c", "language": "Java"}, "method": {"name": "delMyList", "qualified_name": "codes.c.chapter_array_and_linkedlist.my_list.c#delMyList", "start_line": 30, "end_line": 33, "signature": "delMyList(MyList *nums)", "original_code": "void delMyList(MyList *nums) {\n    free(nums->arr);\n    free(nums);\n}", "doc_comment": "/* \u6790\u6784\u51fd\u6570 */"}, "code_tokens": ["void", "delMyList", "(", ")", "{", "}", "MyList", "nums", ";", ";", "*", "free", "free", "(", ")", "(", "nums", ")", "nums", "->", "arr"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 34, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 13}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_array_and_linkedlist/my_list.c#36-38", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/my_list.c", "language": "Java"}, "method": {"name": "size", "qualified_name": "codes.c.chapter_array_and_linkedlist.my_list.c#size", "start_line": 36, "end_line": 38, "signature": "size(MyList *nums)", "original_code": "int size(MyList *nums) {\n    return nums->size;\n}", "doc_comment": "/* \u83b7\u53d6\u5217\u8868\u957f\u5ea6 */"}, "code_tokens": ["size", "int", "(", ")", "{", "}", "MyList", "nums", "return", ";", "*", "nums", "->", "size"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 23, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 12}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_array_and_linkedlist/my_list.c#41-43", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/my_list.c", "language": "Java"}, "method": {"name": "capacity", "qualified_name": "codes.c.chapter_array_and_linkedlist.my_list.c#capacity", "start_line": 41, "end_line": 43, "signature": "capacity(MyList *nums)", "original_code": "int capacity(MyList *nums) {\n    return nums->capacity;\n}", "doc_comment": "/* \u83b7\u53d6\u5217\u8868\u5bb9\u91cf */"}, "code_tokens": ["capacity", "int", "(", ")", "{", "}", "MyList", "nums", "return", ";", "*", "nums", "->", "capacity"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 23, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 12}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_array_and_linkedlist/my_list.c#46-49", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/my_list.c", "language": "Java"}, "method": {"name": "get", "qualified_name": "codes.c.chapter_array_and_linkedlist.my_list.c#get", "start_line": 46, "end_line": 49, "signature": "get(MyList *nums, int index)", "original_code": "int get(MyList *nums, int index) {\n    assert(index >= 0 && index < nums->size);\n    return nums->arr[index];\n}", "doc_comment": "/* \u8bbf\u95ee\u5143\u7d20 */"}, "code_tokens": ["get", "int", "(", ",", ")", "{", "}", "MyList", "nums", "index", "assert", ";", "return", ";", "*", "int", "(", ")", "nums", "->", "&&", "arr", "[", "index", "]", "index", ">=", "0", "index", "<", "nums", "->", "size"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 51, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 23}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_array_and_linkedlist/my_list.c#52-55", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/my_list.c", "language": "Java"}, "method": {"name": "set", "qualified_name": "codes.c.chapter_array_and_linkedlist.my_list.c#set", "start_line": 52, "end_line": 55, "signature": "set(MyList *nums, int index, int num)", "original_code": "void set(MyList *nums, int index, int num) {\n    assert(index >= 0 && index < nums->size);\n    nums->arr[index] = num;\n}", "doc_comment": "/* \u66f4\u65b0\u5143\u7d20 */"}, "code_tokens": ["void", "set", "(", ",", ",", ")", "{", "}", "MyList", "nums", "index", "num", "assert", ";", ";", "*", "int", "int", "(", ")", "nums", "->", "&&", "=", "num", "index", ">=", "0", "index", "<", "arr", "[", "index", "]", "nums", "->", "size"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 57, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 25}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_array_and_linkedlist/my_list.c#58-64", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/my_list.c", "language": "Java"}, "method": {"name": "add", "qualified_name": "codes.c.chapter_array_and_linkedlist.my_list.c#add", "start_line": 58, "end_line": 64, "signature": "add(MyList *nums, int num)", "original_code": "void add(MyList *nums, int num) {\n    if (size(nums) == capacity(nums)) {\n        extendCapacity(nums); // \u6269\u5bb9\n    }\n    nums->arr[size(nums)] = num;\n    nums->size++;\n}", "doc_comment": "/* \u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 */"}, "code_tokens": ["void", "add", "(", ",", ")", "{", "}", "MyList", "nums", "num", "if", ";", ";", "*", "int", "(", ")", "{", "// \u6269\u5bb9", "}", "nums", "->", "nums", "->", "==", ";", "=", "num", "size", "++", "size", "capacity", "extendCapacity", "arr", "[", "]", "(", "nums", ")", "(", "nums", ")", "(", "nums", ")", "size", "(", "nums", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 77, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 25}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_array_and_linkedlist/my_list.c#67-78", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/my_list.c", "language": "Java"}, "method": {"name": "insert", "qualified_name": "codes.c.chapter_array_and_linkedlist.my_list.c#insert", "start_line": 67, "end_line": 78, "signature": "insert(MyList *nums, int index, int num)", "original_code": "void insert(MyList *nums, int index, int num) {\n    assert(index >= 0 && index < size(nums));\n    // \u5143\u7d20\u6570\u91cf\u8d85\u51fa\u5bb9\u91cf\u65f6\uff0c\u89e6\u53d1\u6269\u5bb9\u673a\u5236\n    if (size(nums) == capacity(nums)) {\n        extendCapacity(nums); // \u6269\u5bb9\n    }\n    for (int i = size(nums); i > index; --i) {\n        nums->arr[i] = nums->arr[i - 1];\n    }\n    nums->arr[index] = num;\n    nums->size++;\n}", "doc_comment": "/* \u4e2d\u95f4\u63d2\u5165\u5143\u7d20 */"}, "code_tokens": ["void", "insert", "(", ",", ",", ")", "{", "// \u5143\u7d20\u6570\u91cf\u8d85\u51fa\u5bb9\u91cf\u65f6\uff0c\u89e6\u53d1\u6269\u5bb9\u673a\u5236", "}", "MyList", "nums", "index", "num", "assert", ";", "if", "for", "(", ";", ")", ";", ";", "*", "int", "int", "(", ")", "(", ")", "{", "// \u6269\u5bb9", "}", ";", "i", ">", "index", "--", "i", "{", "}", "nums", "->", "nums", "->", "&&", "==", ";", "int", "i", "=", ";", "=", "num", "size", "++", "index", ">=", "0", "index", "<", "size", "capacity", "extendCapacity", "size", "nums", "->", "arr", "[", "index", "]", "size", "(", "nums", ")", "(", "nums", ")", "(", "nums", ")", "(", "nums", ")", "=", "(", "nums", ")", "arr", "[", "i", "]", "nums", "->", "arr", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 150, "ast_depth": 12, "n_identifiers": 9, "vocab_size": 38}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_array_and_linkedlist/my_list.c#82-90", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/my_list.c", "language": "Java"}, "method": {"name": "removeItem", "qualified_name": "codes.c.chapter_array_and_linkedlist.my_list.c#removeItem", "start_line": 82, "end_line": 90, "signature": "removeItem(MyList *nums, int index)", "original_code": "int removeItem(MyList *nums, int index) {\n    assert(index >= 0 && index < size(nums));\n    int num = nums->arr[index];\n    for (int i = index; i < size(nums) - 1; i++) {\n        nums->arr[i] = nums->arr[i + 1];\n    }\n    nums->size--;\n    return num;\n}", "doc_comment": "// \u6ce8\u610f\uff1astdio.h \u5360\u7528\u4e86 remove \u5173\u952e\u8bcd"}, "code_tokens": ["removeItem", "int", "(", ",", ")", "{", "}", "MyList", "nums", "index", "assert", ";", ";", "for", "(", ";", ")", ";", "return", "num", ";", "*", "int", "(", ")", "int", "num", "=", ";", "i", "<", "i", "++", "{", "}", "nums", "->", "&&", "nums", "->", "int", "i", "=", "index", "-", "1", ";", "size", "--", "index", ">=", "0", "index", "<", "arr", "[", "index", "]", "size", "nums", "->", "size", "(", "nums", ")", "=", "(", "nums", ")", "arr", "[", "i", "]", "nums", "->", "arr", "[", "]", "i", "+", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 123, "ast_depth": 12, "n_identifiers": 7, "vocab_size": 32}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_array_and_linkedlist/my_list.c#93-109", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/my_list.c", "language": "Java"}, "method": {"name": "extendCapacity", "qualified_name": "codes.c.chapter_array_and_linkedlist.my_list.c#extendCapacity", "start_line": 93, "end_line": 109, "signature": "extendCapacity(MyList *nums)", "original_code": "void extendCapacity(MyList *nums) {\n    // \u5148\u5206\u914d\u7a7a\u95f4\n    int newCapacity = capacity(nums) * nums->extendRatio;\n    int *extend = (int *)malloc(sizeof(int) * newCapacity);\n    int *temp = nums->arr;\n\n    // \u62f7\u8d1d\u65e7\u6570\u636e\u5230\u65b0\u6570\u636e\n    for (int i = 0; i < size(nums); i++)\n        extend[i] = nums->arr[i];\n\n    // \u91ca\u653e\u65e7\u6570\u636e\n    free(temp);\n\n    // \u66f4\u65b0\u65b0\u6570\u636e\n    nums->arr = extend;\n    nums->capacity = newCapacity;\n}", "doc_comment": "/* \u5217\u8868\u6269\u5bb9 */"}, "code_tokens": ["void", "extendCapacity", "(", ")", "{", "// \u5148\u5206\u914d\u7a7a\u95f4", "// \u62f7\u8d1d\u65e7\u6570\u636e\u5230\u65b0\u6570\u636e", "// \u91ca\u653e\u65e7\u6570\u636e", "// \u66f4\u65b0\u65b0\u6570\u636e", "}", "MyList", "nums", ";", ";", ";", "for", "(", ";", ")", ";", ";", ";", "*", "int", "newCapacity", "=", "int", "*", "extend", "=", "int", "*", "temp", "=", ";", "i", "<", "i", "++", ";", "free", "nums", "->", "nums", "->", "*", "(", ")", "nums", "->", "arr", "int", "i", "=", "0", "size", "=", "(", "temp", ")", "arr", "=", "extend", "capacity", "=", "newCapacity", "capacity", "nums", "->", "extendRatio", "int", "*", "malloc", "(", "nums", ")", "extend", "[", "i", "]", "nums", "->", "(", "nums", ")", "(", ")", "arr", "[", "i", "]", "*", "newCapacity", "sizeof", "(", ")", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 151, "ast_depth": 14, "n_identifiers": 13, "vocab_size": 34}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_array_and_linkedlist/my_list.c#112-114", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/my_list.c", "language": "Java"}, "method": {"name": "toArray", "qualified_name": "codes.c.chapter_array_and_linkedlist.my_list.c#toArray", "start_line": 112, "end_line": 114, "signature": "toArray(MyList *nums)", "original_code": "int *toArray(MyList *nums) {\n    return nums->arr;\n}", "doc_comment": "/* \u5c06\u5217\u8868\u8f6c\u6362\u4e3a Array \u7528\u4e8e\u6253\u5370 */"}, "code_tokens": ["toArray", "int", "*", "(", ")", "{", "}", "MyList", "nums", "return", ";", "*", "nums", "->", "arr"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 25, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 13}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_array_and_linkedlist/my_list.c#117-163", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/my_list.c", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.c.chapter_array_and_linkedlist.my_list.c#main", "start_line": 117, "end_line": 163, "signature": "main()", "original_code": "int main() {\n    /* \u521d\u59cb\u5316\u5217\u8868 */\n    MyList *nums = newMyList();\n    /* \u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 */\n    add(nums, 1);\n    add(nums, 3);\n    add(nums, 2);\n    add(nums, 5);\n    add(nums, 4);\n    printf(\"\u5217\u8868 nums = \");\n    printArray(toArray(nums), size(nums));\n    printf(\"\u5bb9\u91cf = %d \uff0c\u957f\u5ea6 = %d\\n\", capacity(nums), size(nums));\n\n    /* \u4e2d\u95f4\u63d2\u5165\u5143\u7d20 */\n    insert(nums, 3, 6);\n    printf(\"\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = \");\n    printArray(toArray(nums), size(nums));\n\n    /* \u5220\u9664\u5143\u7d20 */\n    removeItem(nums, 3);\n    printf(\"\u5220\u9664\u7d22\u5f15 3 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = \");\n    printArray(toArray(nums), size(nums));\n\n    /* \u8bbf\u95ee\u5143\u7d20 */\n    int num = get(nums, 1);\n    printf(\"\u8bbf\u95ee\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 num = %d\\n\", num);\n\n    /* \u66f4\u65b0\u5143\u7d20 */\n    set(nums, 1, 0);\n    printf(\"\u5c06\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\u66f4\u65b0\u4e3a 0 \uff0c\u5f97\u5230 nums = \");\n    printArray(toArray(nums), size(nums));\n\n    /* \u6d4b\u8bd5\u6269\u5bb9\u673a\u5236 */\n    for (int i = 0; i < 10; i++) {\n        // \u5728 i = 5 \u65f6\uff0c\u5217\u8868\u957f\u5ea6\u5c06\u8d85\u51fa\u5217\u8868\u5bb9\u91cf\uff0c\u6b64\u65f6\u89e6\u53d1\u6269\u5bb9\u673a\u5236\n        add(nums, i);\n    }\n\n    printf(\"\u6269\u5bb9\u540e\u7684\u5217\u8868 nums = \");\n    printArray(toArray(nums), size(nums));\n    printf(\"\u5bb9\u91cf = %d \uff0c\u957f\u5ea6 = %d\\n\", capacity(nums), size(nums));\n\n    /* \u91ca\u653e\u5206\u914d\u5185\u5b58 */\n    delMyList(nums);\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "/* \u521d\u59cb\u5316\u5217\u8868 */", "/* \u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 */", "/* \u4e2d\u95f4\u63d2\u5165\u5143\u7d20 */", "/* \u5220\u9664\u5143\u7d20 */", "/* \u8bbf\u95ee\u5143\u7d20 */", "/* \u66f4\u65b0\u5143\u7d20 */", "/* \u6d4b\u8bd5\u6269\u5bb9\u673a\u5236 */", "/* \u91ca\u653e\u5206\u914d\u5185\u5b58 */", "}", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "for", "(", ";", ")", ";", ";", ";", ";", "return", "0", ";", "MyList", "*", "add", "add", "add", "add", "add", "printf", "printArray", "printf", "insert", "printf", "printArray", "removeItem", "printf", "printArray", "int", "num", "=", "printf", "set", "printf", "printArray", ";", "i", "<", "10", "i", "++", "{", "// \u5728 i = 5 \u65f6\uff0c\u5217\u8868\u957f\u5ea6\u5c06\u8d85\u51fa\u5217\u8868\u5bb9\u91cf\uff0c\u6b64\u65f6\u89e6\u53d1\u6269\u5bb9\u673a\u5236", "}", "printf", "printArray", "printf", "delMyList", "nums", "=", "(", "nums", ",", "1", ")", "(", "nums", ",", "3", ")", "(", "nums", ",", "2", ")", "(", "nums", ",", "5", ")", "(", "nums", ",", "4", ")", "(", ")", "(", ",", ")", "(", ",", ",", ")", "(", "nums", ",", "3", ",", "6", ")", "(", ")", "(", ",", ")", "(", "nums", ",", "3", ")", "(", ")", "(", ",", ")", "get", "(", ",", "num", ")", "(", "nums", ",", "1", ",", "0", ")", "(", ")", "(", ",", ")", "int", "i", "=", "0", ";", "(", ")", "(", ",", ")", "(", ",", ",", ")", "(", "nums", ")", "newMyList", "\"", "\u5217\u8868 nums = ", "\"", "toArray", "size", "\"", "\u5bb9\u91cf = %d \uff0c\u957f\u5ea6 = %d", "\\n", "\"", "capacity", "size", "\"", "\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = ", "\"", "toArray", "size", "\"", "\u5220\u9664\u7d22\u5f15 3 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = ", "\"", "toArray", "size", "(", "nums", ",", "1", ")", "\"", "\u8bbf\u95ee\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 num = %d", "\\n", "\"", "\"", "\u5c06\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\u66f4\u65b0\u4e3a 0 \uff0c\u5f97\u5230 nums = ", "\"", "toArray", "size", "add", "\"", "\u6269\u5bb9\u540e\u7684\u5217\u8868 nums = ", "\"", "toArray", "size", "\"", "\u5bb9\u91cf = %d \uff0c\u957f\u5ea6 = %d", "\\n", "\"", "capacity", "size", "(", ")", "(", "nums", ")", "(", "nums", ")", "(", "nums", ")", "(", "nums", ")", "(", "nums", ")", "(", "nums", ")", "(", "nums", ")", "(", "nums", ")", "(", "nums", ")", "(", "nums", ")", "(", "nums", ",", "i", ")", "(", "nums", ")", "(", "nums", ")", "(", "nums", ")", "(", "nums", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 398, "ast_depth": 9, "n_identifiers": 17, "vocab_size": 56}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_divide_and_conquer/build_tree.c#45-61", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_divide_and_conquer/build_tree.c", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.c.chapter_divide_and_conquer.build_tree.c#main", "start_line": 45, "end_line": 61, "signature": "main()", "original_code": "int main() {\n    int preorder[] = {3, 9, 2, 1, 7};\n    int inorder[] = {9, 3, 1, 2, 7};\n    int preorderSize = sizeof(preorder) / sizeof(preorder[0]);\n    int inorderSize = sizeof(inorder) / sizeof(inorder[0]);\n    printf(\"\u524d\u5e8f\u904d\u5386 = \");\n    printArray(preorder, preorderSize);\n    printf(\"\u4e2d\u5e8f\u904d\u5386 = \");\n    printArray(inorder, inorderSize);\n\n    TreeNode *root = buildTree(preorder, preorderSize, inorder, inorderSize);\n    printf(\"\u6784\u5efa\u7684\u4e8c\u53c9\u6811\u4e3a\uff1a\\n\");\n    printTree(root);\n\n    freeMemoryTree(root);\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "}", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "return", "0", ";", "int", "preorder", "=", "int", "inorder", "=", "int", "preorderSize", "=", "int", "inorderSize", "=", "printf", "printArray", "printf", "printArray", "TreeNode", "*", "printf", "printTree", "freeMemoryTree", "[", "]", "{", "3", ",", "9", ",", "2", ",", "1", ",", "7", "}", "[", "]", "{", "9", ",", "3", ",", "1", ",", "2", ",", "7", "}", "/", "/", "(", ")", "(", "preorder", ",", "preorderSize", ")", "(", ")", "(", "inorder", ",", "inorderSize", ")", "root", "=", "(", ")", "(", "root", ")", "(", "root", ")", "sizeof", "sizeof", "sizeof", "sizeof", "\"", "\u524d\u5e8f\u904d\u5386 = ", "\"", "\"", "\u4e2d\u5e8f\u904d\u5386 = ", "\"", "buildTree", "\"", "\u6784\u5efa\u7684\u4e8c\u53c9\u6811\u4e3a\uff1a", "\\n", "\"", "(", "preorder", ")", "(", ")", "(", "inorder", ")", "(", ")", "(", "preorder", ",", "preorderSize", ",", "inorder", ",", "inorderSize", ")", "preorder", "[", "0", "]", "inorder", "[", "0", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 199, "ast_depth": 10, "n_identifiers": 13, "vocab_size": 37}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_graph/graph_adjacency_matrix.c#32-34", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_graph/graph_adjacency_matrix.c", "language": "Java"}, "method": {"name": "delGraphAdjMat", "qualified_name": "codes.c.chapter_graph.graph_adjacency_matrix.c#delGraphAdjMat", "start_line": 32, "end_line": 34, "signature": "delGraphAdjMat(GraphAdjMat *graph)", "original_code": "void delGraphAdjMat(GraphAdjMat *graph) {\n    free(graph);\n}", "doc_comment": "/* \u6790\u6784\u51fd\u6570 */"}, "code_tokens": ["void", "delGraphAdjMat", "(", ")", "{", "}", "GraphAdjMat", "graph", ";", "*", "free", "(", "graph", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 23, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 11}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_graph/graph_adjacency_matrix.c#37-49", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_graph/graph_adjacency_matrix.c", "language": "Java"}, "method": {"name": "addVertex", "qualified_name": "codes.c.chapter_graph.graph_adjacency_matrix.c#addVertex", "start_line": 37, "end_line": 49, "signature": "addVertex(GraphAdjMat *graph, int val)", "original_code": "void addVertex(GraphAdjMat *graph, int val) {\n    if (graph->size == MAX_SIZE) {\n        fprintf(stderr, \"\u56fe\u7684\u9876\u70b9\u6570\u91cf\u5df2\u8fbe\u6700\u5927\u503c\\n\");\n        return;\n    }\n    // \u6dfb\u52a0\u7b2c n \u4e2a\u9876\u70b9\uff0c\u5e76\u5c06\u7b2c n \u884c\u548c\u5217\u7f6e\u96f6\n    int n = graph->size;\n    graph->vertices[n] = val;\n    for (int i = 0; i <= n; i++) {\n        graph->adjMat[n][i] = graph->adjMat[i][n] = 0;\n    }\n    graph->size++;\n}", "doc_comment": "/* \u6dfb\u52a0\u9876\u70b9 */"}, "code_tokens": ["void", "addVertex", "(", ",", ")", "{", "// \u6dfb\u52a0\u7b2c n \u4e2a\u9876\u70b9\uff0c\u5e76\u5c06\u7b2c n \u884c\u548c\u5217\u7f6e\u96f6", "}", "GraphAdjMat", "graph", "val", "if", ";", ";", "for", "(", ";", ")", ";", "*", "int", "(", ")", "{", "}", "int", "n", "=", "graph", "->", ";", "i", "<=", "n", "i", "++", "{", "}", "graph", "->", "graph", "->", ";", "return", ";", "graph", "->", "size", "=", "val", "int", "i", "=", "0", ";", "size", "++", "size", "==", "MAX_SIZE", "fprintf", "vertices", "[", "n", "]", "graph", "->", "(", "stderr", ",", ")", "=", "\"", "\u56fe\u7684\u9876\u70b9\u6570\u91cf\u5df2\u8fbe\u6700\u5927\u503c", "\\n", "\"", "[", "i", "]", "graph", "->", "adjMat", "[", "n", "]", "=", "0", "[", "n", "]", "adjMat", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 139, "ast_depth": 13, "n_identifiers": 11, "vocab_size": 36}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_graph/graph_adjacency_matrix.c#52-74", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_graph/graph_adjacency_matrix.c", "language": "Java"}, "method": {"name": "removeVertex", "qualified_name": "codes.c.chapter_graph.graph_adjacency_matrix.c#removeVertex", "start_line": 52, "end_line": 74, "signature": "removeVertex(GraphAdjMat *graph, int index)", "original_code": "void removeVertex(GraphAdjMat *graph, int index) {\n    if (index < 0 || index >= graph->size) {\n        fprintf(stderr, \"\u9876\u70b9\u7d22\u5f15\u8d8a\u754c\\n\");\n        return;\n    }\n    // \u5728\u9876\u70b9\u5217\u8868\u4e2d\u79fb\u9664\u7d22\u5f15 index \u7684\u9876\u70b9\n    for (int i = index; i < graph->size - 1; i++) {\n        graph->vertices[i] = graph->vertices[i + 1];\n    }\n    // \u5728\u90bb\u63a5\u77e9\u9635\u4e2d\u5220\u9664\u7d22\u5f15 index \u7684\u884c\n    for (int i = index; i < graph->size - 1; i++) {\n        for (int j = 0; j < graph->size; j++) {\n            graph->adjMat[i][j] = graph->adjMat[i + 1][j];\n        }\n    }\n    // \u5728\u90bb\u63a5\u77e9\u9635\u4e2d\u5220\u9664\u7d22\u5f15 index \u7684\u5217\n    for (int i = 0; i < graph->size; i++) {\n        for (int j = index; j < graph->size - 1; j++) {\n            graph->adjMat[i][j] = graph->adjMat[i][j + 1];\n        }\n    }\n    graph->size--;\n}", "doc_comment": "/* \u5220\u9664\u9876\u70b9 */"}, "code_tokens": ["void", "removeVertex", "(", ",", ")", "{", "// \u5728\u9876\u70b9\u5217\u8868\u4e2d\u79fb\u9664\u7d22\u5f15 index \u7684\u9876\u70b9", "// \u5728\u90bb\u63a5\u77e9\u9635\u4e2d\u5220\u9664\u7d22\u5f15 index \u7684\u884c", "// \u5728\u90bb\u63a5\u77e9\u9635\u4e2d\u5220\u9664\u7d22\u5f15 index \u7684\u5217", "}", "GraphAdjMat", "graph", "index", "if", "for", "(", ";", ")", "for", "(", ";", ")", "for", "(", ";", ")", ";", "*", "int", "(", ")", "{", "}", ";", "i", "<", "i", "++", "{", "}", ";", "i", "<", "i", "++", "{", "}", ";", "i", "<", "i", "++", "{", "}", "graph", "->", "||", ";", "return", ";", "int", "i", "=", "index", "graph", "->", ";", "int", "i", "=", "index", "graph", "->", "for", "(", ";", ")", "int", "i", "=", "0", "graph", "->", "size", "for", "(", ";", ")", "size", "--", "index", "<", "0", "index", ">=", "fprintf", "size", "-", "1", "graph", "->", "size", "-", "1", ";", "j", "<", "j", "++", "{", "}", ";", "j", "<", "j", "++", "{", "}", "graph", "->", "size", "(", "stderr", ",", ")", "=", "int", "j", "=", "0", "graph", "->", "size", ";", "int", "j", "=", "index", "graph", "->", ";", "\"", "\u9876\u70b9\u7d22\u5f15\u8d8a\u754c", "\\n", "\"", "vertices", "[", "i", "]", "graph", "->", "graph", "->", "size", "-", "1", "graph", "->", "vertices", "[", "]", "=", "=", "i", "+", "1", "[", "j", "]", "graph", "->", "[", "j", "]", "graph", "->", "adjMat", "[", "i", "]", "[", "j", "]", "adjMat", "[", "i", "]", "[", "]", "adjMat", "[", "]", "adjMat", "[", "i", "]", "j", "+", "1", "i", "+", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 293, "ast_depth": 15, "n_identifiers": 10, "vocab_size": 42}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_graph/graph_adjacency_matrix.c#78-85", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_graph/graph_adjacency_matrix.c", "language": "Java"}, "method": {"name": "addEdge", "qualified_name": "codes.c.chapter_graph.graph_adjacency_matrix.c#addEdge", "start_line": 78, "end_line": 85, "signature": "addEdge(GraphAdjMat *graph, int i, int j)", "original_code": "void addEdge(GraphAdjMat *graph, int i, int j) {\n    if (i < 0 || j < 0 || i >= graph->size || j >= graph->size || i == j) {\n        fprintf(stderr, \"\u8fb9\u7d22\u5f15\u8d8a\u754c\u6216\u76f8\u7b49\\n\");\n        return;\n    }\n    graph->adjMat[i][j] = 1;\n    graph->adjMat[j][i] = 1;\n}", "doc_comment": "// \u53c2\u6570 i, j \u5bf9\u5e94 vertices \u5143\u7d20\u7d22\u5f15"}, "code_tokens": ["void", "addEdge", "(", ",", ",", ")", "{", "}", "GraphAdjMat", "graph", "i", "j", "if", ";", ";", "*", "int", "int", "(", ")", "{", "}", "graph", "->", "graph", "->", "||", ";", "return", ";", "=", "1", "=", "1", "||", "i", ">=", "fprintf", "[", "j", "]", "[", "i", "]", "i", "<", "0", "j", "<", "0", "graph", "->", "(", "stderr", ",", ")", "adjMat", "[", "i", "]", "adjMat", "[", "j", "]", "size", "||", "\"", "\u8fb9\u7d22\u5f15\u8d8a\u754c\u6216\u76f8\u7b49", "\\n", "\"", "j", ">=", "graph", "->", "size", "||", "i", "==", "j"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 118, "ast_depth": 14, "n_identifiers": 8, "vocab_size": 33}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_graph/graph_adjacency_matrix.c#89-96", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_graph/graph_adjacency_matrix.c", "language": "Java"}, "method": {"name": "removeEdge", "qualified_name": "codes.c.chapter_graph.graph_adjacency_matrix.c#removeEdge", "start_line": 89, "end_line": 96, "signature": "removeEdge(GraphAdjMat *graph, int i, int j)", "original_code": "void removeEdge(GraphAdjMat *graph, int i, int j) {\n    if (i < 0 || j < 0 || i >= graph->size || j >= graph->size || i == j) {\n        fprintf(stderr, \"\u8fb9\u7d22\u5f15\u8d8a\u754c\u6216\u76f8\u7b49\\n\");\n        return;\n    }\n    graph->adjMat[i][j] = 0;\n    graph->adjMat[j][i] = 0;\n}", "doc_comment": "// \u53c2\u6570 i, j \u5bf9\u5e94 vertices \u5143\u7d20\u7d22\u5f15"}, "code_tokens": ["void", "removeEdge", "(", ",", ",", ")", "{", "}", "GraphAdjMat", "graph", "i", "j", "if", ";", ";", "*", "int", "int", "(", ")", "{", "}", "graph", "->", "graph", "->", "||", ";", "return", ";", "=", "0", "=", "0", "||", "i", ">=", "fprintf", "[", "j", "]", "[", "i", "]", "i", "<", "0", "j", "<", "0", "graph", "->", "(", "stderr", ",", ")", "adjMat", "[", "i", "]", "adjMat", "[", "j", "]", "size", "||", "\"", "\u8fb9\u7d22\u5f15\u8d8a\u754c\u6216\u76f8\u7b49", "\\n", "\"", "j", ">=", "graph", "->", "size", "||", "i", "==", "j"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 118, "ast_depth": 14, "n_identifiers": 8, "vocab_size": 32}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_graph/graph_adjacency_matrix.c#99-106", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_graph/graph_adjacency_matrix.c", "language": "Java"}, "method": {"name": "printGraphAdjMat", "qualified_name": "codes.c.chapter_graph.graph_adjacency_matrix.c#printGraphAdjMat", "start_line": 99, "end_line": 106, "signature": "printGraphAdjMat(GraphAdjMat *graph)", "original_code": "void printGraphAdjMat(GraphAdjMat *graph) {\n    printf(\"\u9876\u70b9\u5217\u8868 = \");\n    printArray(graph->vertices, graph->size);\n    printf(\"\u90bb\u63a5\u77e9\u9635 =\\n\");\n    for (int i = 0; i < graph->size; i++) {\n        printArray(graph->adjMat[i], graph->size);\n    }\n}", "doc_comment": "/* \u6253\u5370\u90bb\u63a5\u77e9\u9635 */"}, "code_tokens": ["void", "printGraphAdjMat", "(", ")", "{", "}", "GraphAdjMat", "graph", ";", ";", ";", "for", "(", ";", ")", "*", "printf", "printArray", "printf", ";", "i", "<", "i", "++", "{", "}", "(", ")", "(", ",", ")", "(", ")", "int", "i", "=", "0", "graph", "->", "size", ";", "\"", "\u9876\u70b9\u5217\u8868 = ", "\"", "graph", "->", "vertices", "graph", "->", "size", "\"", "\u90bb\u63a5\u77e9\u9635 =", "\\n", "\"", "printArray", "(", ",", ")", "graph", "->", "graph", "->", "size", "adjMat", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 100, "ast_depth": 11, "n_identifiers": 8, "vocab_size": 30}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_graph/graph_adjacency_matrix.c#109-150", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_graph/graph_adjacency_matrix.c", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.c.chapter_graph.graph_adjacency_matrix.c#main", "start_line": 109, "end_line": 150, "signature": "main()", "original_code": "int main() {\n    // \u521d\u59cb\u5316\u65e0\u5411\u56fe\n    GraphAdjMat *graph = newGraphAdjMat();\n    int vertices[] = {1, 3, 2, 5, 4};\n    for (int i = 0; i < 5; i++) {\n        addVertex(graph, vertices[i]);\n    }\n    int edges[][2] = {{0, 1}, {0, 3}, {1, 2}, {2, 3}, {2, 4}, {3, 4}};\n    for (int i = 0; i < 6; i++) {\n        addEdge(graph, edges[i][0], edges[i][1]);\n    }\n    printf(\"\\n\u521d\u59cb\u5316\u540e\uff0c\u56fe\u4e3a\\n\");\n    printGraphAdjMat(graph);\n\n    /* \u6dfb\u52a0\u8fb9 */\n    // \u9876\u70b9 1, 2 \u7684\u7d22\u5f15\u5206\u522b\u4e3a 0, 2\n    addEdge(graph, 0, 2);\n    printf(\"\\n\u6dfb\u52a0\u8fb9 1-2 \u540e\uff0c\u56fe\u4e3a\\n\");\n    printGraphAdjMat(graph);\n\n    /* \u5220\u9664\u8fb9 */\n    // \u9876\u70b9 1, 3 \u7684\u7d22\u5f15\u5206\u522b\u4e3a 0, 1\n    removeEdge(graph, 0, 1);\n    printf(\"\\n\u5220\u9664\u8fb9 1-3 \u540e\uff0c\u56fe\u4e3a\\n\");\n    printGraphAdjMat(graph);\n\n    /* \u6dfb\u52a0\u9876\u70b9 */\n    addVertex(graph, 6);\n    printf(\"\\n\u6dfb\u52a0\u9876\u70b9 6 \u540e\uff0c\u56fe\u4e3a\\n\");\n    printGraphAdjMat(graph);\n\n    /* \u5220\u9664\u9876\u70b9 */\n    // \u9876\u70b9 3 \u7684\u7d22\u5f15\u4e3a 1\n    removeVertex(graph, 1);\n    printf(\"\\n\u5220\u9664\u9876\u70b9 3 \u540e\uff0c\u56fe\u4e3a\\n\");\n    printGraphAdjMat(graph);\n\n    // \u91ca\u653e\u5185\u5b58\n    delGraphAdjMat(graph);\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "// \u521d\u59cb\u5316\u65e0\u5411\u56fe", "/* \u6dfb\u52a0\u8fb9 */", "// \u9876\u70b9 1, 2 \u7684\u7d22\u5f15\u5206\u522b\u4e3a 0, 2", "/* \u5220\u9664\u8fb9 */", "// \u9876\u70b9 1, 3 \u7684\u7d22\u5f15\u5206\u522b\u4e3a 0, 1", "/* \u6dfb\u52a0\u9876\u70b9 */", "/* \u5220\u9664\u9876\u70b9 */", "// \u9876\u70b9 3 \u7684\u7d22\u5f15\u4e3a 1", "// \u91ca\u653e\u5185\u5b58", "}", ";", ";", "for", "(", ";", ")", ";", "for", "(", ";", ")", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "return", "0", ";", "GraphAdjMat", "*", "int", "vertices", "=", ";", "i", "<", "5", "i", "++", "{", "}", "int", "edges", "=", ";", "i", "<", "6", "i", "++", "{", "}", "printf", "printGraphAdjMat", "addEdge", "printf", "printGraphAdjMat", "removeEdge", "printf", "printGraphAdjMat", "addVertex", "printf", "printGraphAdjMat", "removeVertex", "printf", "printGraphAdjMat", "delGraphAdjMat", "graph", "=", "[", "]", "{", "1", ",", "3", ",", "2", ",", "5", ",", "4", "}", "int", "i", "=", "0", ";", "[", "]", "[", "]", "{", ",", ",", ",", ",", ",", "}", "int", "i", "=", "0", ";", "(", ")", "(", "graph", ")", "(", "graph", ",", "0", ",", "2", ")", "(", ")", "(", "graph", ")", "(", "graph", ",", "0", ",", "1", ")", "(", ")", "(", "graph", ")", "(", "graph", ",", "6", ")", "(", ")", "(", "graph", ")", "(", "graph", ",", "1", ")", "(", ")", "(", "graph", ")", "(", "graph", ")", "newGraphAdjMat", "addVertex", "2", "{", "0", ",", "1", "}", "{", "0", ",", "3", "}", "{", "1", ",", "2", "}", "{", "2", ",", "3", "}", "{", "2", ",", "4", "}", "{", "3", ",", "4", "}", "addEdge", "\"", "\\n", "\u521d\u59cb\u5316\u540e\uff0c\u56fe\u4e3a", "\\n", "\"", "\"", "\\n", "\u6dfb\u52a0\u8fb9 1-2 \u540e\uff0c\u56fe\u4e3a", "\\n", "\"", "\"", "\\n", "\u5220\u9664\u8fb9 1-3 \u540e\uff0c\u56fe\u4e3a", "\\n", "\"", "\"", "\\n", "\u6dfb\u52a0\u9876\u70b9 6 \u540e\uff0c\u56fe\u4e3a", "\\n", "\"", "\"", "\\n", "\u5220\u9664\u9876\u70b9 3 \u540e\uff0c\u56fe\u4e3a", "\\n", "\"", "(", ")", "(", "graph", ",", ")", "(", "graph", ",", ",", ")", "vertices", "[", "i", "]", "[", "0", "]", "[", "1", "]", "edges", "[", "i", "]", "edges", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 362, "ast_depth": 11, "n_identifiers": 14, "vocab_size": 52}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_hashing/array_hash_map.c#36-44", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_hashing/array_hash_map.c", "language": "Java"}, "method": {"name": "delArrayHashMap", "qualified_name": "codes.c.chapter_hashing.array_hash_map.c#delArrayHashMap", "start_line": 36, "end_line": 44, "signature": "delArrayHashMap(ArrayHashMap *hmap)", "original_code": "void delArrayHashMap(ArrayHashMap *hmap) {\n    for (int i = 0; i < HASHTABLE_CAPACITY; i++) {\n        if (hmap->buckets[i] != NULL) {\n            free(hmap->buckets[i]->val);\n            free(hmap->buckets[i]);\n        }\n    }\n    free(hmap);\n}", "doc_comment": "/* \u6790\u6784\u51fd\u6570 */"}, "code_tokens": ["void", "delArrayHashMap", "(", ")", "{", "}", "ArrayHashMap", "hmap", "for", "(", ";", ")", ";", "*", ";", "i", "<", "HASHTABLE_CAPACITY", "i", "++", "{", "}", "free", "int", "i", "=", "0", "if", "(", "hmap", ")", "(", ")", "{", "}", "hmap", "->", ";", ";", "!=", "NULL", "free", "free", "buckets", "[", "i", "]", "(", ")", "(", ")", "hmap", "->", "->", "val", "hmap", "->", "buckets", "[", "i", "]", "buckets", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 98, "ast_depth": 13, "n_identifiers": 8, "vocab_size": 27}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_hashing/array_hash_map.c#47-50", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_hashing/array_hash_map.c", "language": "Java"}, "method": {"name": "hashFunc", "qualified_name": "codes.c.chapter_hashing.array_hash_map.c#hashFunc", "start_line": 47, "end_line": 50, "signature": "hashFunc(int key)", "original_code": "int hashFunc(int key) {\n    int index = key % HASHTABLE_CAPACITY;\n    return index;\n}", "doc_comment": "/* \u54c8\u5e0c\u51fd\u6570 */"}, "code_tokens": ["hashFunc", "int", "(", ")", "{", "}", "key", ";", "return", "index", ";", "int", "int", "index", "=", "key", "%", "HASHTABLE_CAPACITY"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 30, "ast_depth": 7, "n_identifiers": 4, "vocab_size": 13}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_hashing/array_hash_map.c#53-59", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_hashing/array_hash_map.c", "language": "Java"}, "method": {"name": "char", "qualified_name": "codes.c.chapter_hashing.array_hash_map.c#char", "start_line": 53, "end_line": 59, "signature": "char(const ArrayHashMap *hmap, const int key)", "original_code": "const char *get(const ArrayHashMap *hmap, const int key) {\n    int index = hashFunc(key);\n    const Pair *Pair = hmap->buckets[index];\n    if (Pair == NULL)\n        return NULL;\n    return Pair->val;\n}", "doc_comment": "/* \u67e5\u8be2\u64cd\u4f5c */"}, "code_tokens": ["const", "char", "*", "get", "(", ",", ")", "{", "}", "const", "ArrayHashMap", "*", "hmap", "const", "int", "key", ";", "const", ";", "if", "return", ";", "int", "index", "=", "Pair", "=", "(", ")", "return", "NULL", ";", "Pair", "->", "val", "hashFunc", "*", "Pair", "hmap", "->", "Pair", "==", "NULL", "(", "key", ")", "buckets", "[", "index", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 75, "ast_depth": 8, "n_identifiers": 12, "vocab_size": 27}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_hashing/array_hash_map.c#62-70", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_hashing/array_hash_map.c", "language": "Java"}, "method": {"name": "put", "qualified_name": "codes.c.chapter_hashing.array_hash_map.c#put", "start_line": 62, "end_line": 70, "signature": "put(ArrayHashMap *hmap, const int key, const char *val)", "original_code": "void put(ArrayHashMap *hmap, const int key, const char *val) {\n    Pair *Pair = malloc(sizeof(Pair));\n    Pair->key = key;\n    Pair->val = malloc(strlen(val) + 1);\n    strcpy(Pair->val, val);\n\n    int index = hashFunc(key);\n    hmap->buckets[index] = Pair;\n}", "doc_comment": "/* \u6dfb\u52a0\u64cd\u4f5c */"}, "code_tokens": ["void", "put", "(", ",", ",", ")", "{", "}", "ArrayHashMap", "hmap", "const", "int", "key", "const", "char", "*", "val", ";", ";", ";", ";", ";", ";", "*", "Pair", "*", "Pair", "->", "Pair", "->", "strcpy", "int", "index", "=", "hmap", "->", "Pair", "=", "key", "=", "key", "val", "=", "(", ",", "val", ")", "hashFunc", "=", "Pair", "malloc", "malloc", "Pair", "->", "val", "(", "key", ")", "buckets", "[", "index", "]", "(", ")", "(", ")", "sizeof", "+", "1", "(", "Pair", ")", "strlen", "(", "val", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 117, "ast_depth": 12, "n_identifiers": 14, "vocab_size": 30}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_hashing/array_hash_map.c#73-78", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_hashing/array_hash_map.c", "language": "Java"}, "method": {"name": "removeItem", "qualified_name": "codes.c.chapter_hashing.array_hash_map.c#removeItem", "start_line": 73, "end_line": 78, "signature": "removeItem(ArrayHashMap *hmap, const int key)", "original_code": "void removeItem(ArrayHashMap *hmap, const int key) {\n    int index = hashFunc(key);\n    free(hmap->buckets[index]->val);\n    free(hmap->buckets[index]);\n    hmap->buckets[index] = NULL;\n}", "doc_comment": "/* \u5220\u9664\u64cd\u4f5c */"}, "code_tokens": ["void", "removeItem", "(", ",", ")", "{", "}", "ArrayHashMap", "hmap", "const", "int", "key", ";", ";", ";", ";", "*", "int", "index", "=", "free", "free", "hmap", "->", "hashFunc", "(", ")", "(", ")", "=", "NULL", "(", "key", ")", "hmap", "->", "->", "val", "hmap", "->", "buckets", "[", "index", "]", "buckets", "[", "index", "]", "buckets", "[", "index", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 80, "ast_depth": 9, "n_identifiers": 10, "vocab_size": 24}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_hashing/array_hash_map.c#81-102", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_hashing/array_hash_map.c", "language": "Java"}, "method": {"name": "pairSet", "qualified_name": "codes.c.chapter_hashing.array_hash_map.c#pairSet", "start_line": 81, "end_line": 102, "signature": "pairSet(ArrayHashMap *hmap, MapSet *set)", "original_code": "void pairSet(ArrayHashMap *hmap, MapSet *set) {\n    Pair *entries;\n    int i = 0, index = 0;\n    int total = 0;\n    /* \u7edf\u8ba1\u6709\u6548\u952e\u503c\u5bf9\u6570\u91cf */\n    for (i = 0; i < HASHTABLE_CAPACITY; i++) {\n        if (hmap->buckets[i] != NULL) {\n            total++;\n        }\n    }\n    entries = malloc(sizeof(Pair) * total);\n    for (i = 0; i < HASHTABLE_CAPACITY; i++) {\n        if (hmap->buckets[i] != NULL) {\n            entries[index].key = hmap->buckets[i]->key;\n            entries[index].val = malloc(strlen(hmap->buckets[i]->val + 1));\n            strcpy(entries[index].val, hmap->buckets[i]->val);\n            index++;\n        }\n    }\n    set->set = entries;\n    set->len = total;\n}", "doc_comment": "/* \u83b7\u53d6\u6240\u6709\u952e\u503c\u5bf9 */"}, "code_tokens": ["void", "pairSet", "(", ",", ")", "{", "/* \u7edf\u8ba1\u6709\u6548\u952e\u503c\u5bf9\u6570\u91cf */", "}", "ArrayHashMap", "hmap", "MapSet", "set", ";", ",", ";", ";", "for", "(", ";", ";", ")", ";", "for", "(", ";", ";", ")", ";", ";", "*", "*", "Pair", "*", "entries", "int", "i", "=", "0", "index", "=", "0", "int", "total", "=", "0", "i", "=", "0", "i", "<", "HASHTABLE_CAPACITY", "i", "++", "{", "}", "entries", "=", "i", "=", "0", "i", "<", "HASHTABLE_CAPACITY", "i", "++", "{", "}", "set", "->", "set", "->", "if", "malloc", "if", "set", "=", "entries", "len", "=", "total", "(", ")", "{", "}", "(", ")", "(", ")", "{", "}", "hmap", "->", ";", "*", "total", "hmap", "->", ";", ";", ";", ";", "!=", "NULL", "total", "++", "sizeof", "!=", "NULL", "=", "->", "key", "=", "strcpy", "index", "++", "buckets", "[", "i", "]", "(", "Pair", ")", "buckets", "[", "i", "]", ".", "key", "hmap", "->", ".", "val", "malloc", "(", ",", ")", "entries", "[", "index", "]", "buckets", "[", "i", "]", "entries", "[", "index", "]", "(", ")", ".", "val", "hmap", "->", "->", "val", "strlen", "entries", "[", "index", "]", "buckets", "[", "i", "]", "(", ")", "hmap", "->", "+", "1", "buckets", "[", "i", "]", "->", "val"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 260, "ast_depth": 17, "n_identifiers": 18, "vocab_size": 43}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_hashing/array_hash_map.c#105-124", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_hashing/array_hash_map.c", "language": "Java"}, "method": {"name": "keySet", "qualified_name": "codes.c.chapter_hashing.array_hash_map.c#keySet", "start_line": 105, "end_line": 124, "signature": "keySet(ArrayHashMap *hmap, MapSet *set)", "original_code": "void keySet(ArrayHashMap *hmap, MapSet *set) {\n    int *keys;\n    int i = 0, index = 0;\n    int total = 0;\n    /* \u7edf\u8ba1\u6709\u6548\u952e\u503c\u5bf9\u6570\u91cf */\n    for (i = 0; i < HASHTABLE_CAPACITY; i++) {\n        if (hmap->buckets[i] != NULL) {\n            total++;\n        }\n    }\n    keys = malloc(total * sizeof(int));\n    for (i = 0; i < HASHTABLE_CAPACITY; i++) {\n        if (hmap->buckets[i] != NULL) {\n            keys[index] = hmap->buckets[i]->key;\n            index++;\n        }\n    }\n    set->set = keys;\n    set->len = total;\n}", "doc_comment": "/* \u83b7\u53d6\u6240\u6709\u952e */"}, "code_tokens": ["void", "keySet", "(", ",", ")", "{", "/* \u7edf\u8ba1\u6709\u6548\u952e\u503c\u5bf9\u6570\u91cf */", "}", "ArrayHashMap", "hmap", "MapSet", "set", ";", ",", ";", ";", "for", "(", ";", ";", ")", ";", "for", "(", ";", ";", ")", ";", ";", "*", "*", "int", "*", "keys", "int", "i", "=", "0", "index", "=", "0", "int", "total", "=", "0", "i", "=", "0", "i", "<", "HASHTABLE_CAPACITY", "i", "++", "{", "}", "keys", "=", "i", "=", "0", "i", "<", "HASHTABLE_CAPACITY", "i", "++", "{", "}", "set", "->", "set", "->", "if", "malloc", "if", "set", "=", "keys", "len", "=", "total", "(", ")", "{", "}", "(", ")", "(", ")", "{", "}", "hmap", "->", ";", "total", "*", "hmap", "->", ";", ";", "!=", "NULL", "total", "++", "sizeof", "!=", "NULL", "=", "->", "key", "index", "++", "buckets", "[", "i", "]", "(", ")", "buckets", "[", "i", "]", "keys", "[", "index", "]", "hmap", "->", "buckets", "[", "i", "]", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 198, "ast_depth": 13, "n_identifiers": 14, "vocab_size": 36}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_hashing/array_hash_map.c#127-146", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_hashing/array_hash_map.c", "language": "Java"}, "method": {"name": "valueSet", "qualified_name": "codes.c.chapter_hashing.array_hash_map.c#valueSet", "start_line": 127, "end_line": 146, "signature": "valueSet(ArrayHashMap *hmap, MapSet *set)", "original_code": "void valueSet(ArrayHashMap *hmap, MapSet *set) {\n    char **vals;\n    int i = 0, index = 0;\n    int total = 0;\n    /* \u7edf\u8ba1\u6709\u6548\u952e\u503c\u5bf9\u6570\u91cf */\n    for (i = 0; i < HASHTABLE_CAPACITY; i++) {\n        if (hmap->buckets[i] != NULL) {\n            total++;\n        }\n    }\n    vals = malloc(total * sizeof(char *));\n    for (i = 0; i < HASHTABLE_CAPACITY; i++) {\n        if (hmap->buckets[i] != NULL) {\n            vals[index] = hmap->buckets[i]->val;\n            index++;\n        }\n    }\n    set->set = vals;\n    set->len = total;\n}", "doc_comment": "/* \u83b7\u53d6\u6240\u6709\u503c */"}, "code_tokens": ["void", "valueSet", "(", ",", ")", "{", "/* \u7edf\u8ba1\u6709\u6548\u952e\u503c\u5bf9\u6570\u91cf */", "}", "ArrayHashMap", "hmap", "MapSet", "set", ";", ",", ";", ";", "for", "(", ";", ";", ")", ";", "for", "(", ";", ";", ")", ";", ";", "*", "*", "char", "*", "*", "vals", "int", "i", "=", "0", "index", "=", "0", "int", "total", "=", "0", "i", "=", "0", "i", "<", "HASHTABLE_CAPACITY", "i", "++", "{", "}", "vals", "=", "i", "=", "0", "i", "<", "HASHTABLE_CAPACITY", "i", "++", "{", "}", "set", "->", "set", "->", "if", "malloc", "if", "set", "=", "vals", "len", "=", "total", "(", ")", "{", "}", "(", ")", "(", ")", "{", "}", "hmap", "->", ";", "total", "*", "hmap", "->", ";", ";", "!=", "NULL", "total", "++", "sizeof", "!=", "NULL", "=", "->", "val", "index", "++", "buckets", "[", "i", "]", "(", ")", "buckets", "[", "i", "]", "vals", "[", "index", "]", "hmap", "->", "*", "buckets", "[", "i", "]", "char"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 200, "ast_depth": 13, "n_identifiers": 14, "vocab_size": 37}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_hashing/array_hash_map.c#149-212", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_hashing/array_hash_map.c", "language": "Java"}, "method": {"name": "print", "qualified_name": "codes.c.chapter_hashing.array_hash_map.c#print", "start_line": 149, "end_line": 212, "signature": "print(ArrayHashMap *hmap)", "original_code": "void print(ArrayHashMap *hmap) {\n    int i;\n    MapSet set;\n    pairSet(hmap, &set);\n    Pair *entries = (Pair *)set.set;\n    for (i = 0; i < set.len; i++) {\n        printf(\"%d -> %s\\n\", entries[i].key, entries[i].val);\n    }\n    free(set.set);\n}\n\n/* Driver Code */\nint main() {\n    /* \u521d\u59cb\u5316\u54c8\u5e0c\u8868 */\n    ArrayHashMap *hmap = newArrayHashMap();\n\n    /* \u6dfb\u52a0\u64cd\u4f5c */\n    // \u5728\u54c8\u5e0c\u8868\u4e2d\u6dfb\u52a0\u952e\u503c\u5bf9 (key, value)\n    put(hmap, 12836, \"\u5c0f\u54c8\");\n    put(hmap, 15937, \"\u5c0f\u5570\");\n    put(hmap, 16750, \"\u5c0f\u7b97\");\n    put(hmap, 13276, \"\u5c0f\u6cd5\");\n    put(hmap, 10583, \"\u5c0f\u9e2d\");\n    printf(\"\\n\u6dfb\u52a0\u5b8c\u6210\u540e\uff0c\u54c8\u5e0c\u8868\u4e3a\\nKey -> Value\\n\");\n    print(hmap);\n\n    /* \u67e5\u8be2\u64cd\u4f5c */\n    // \u5411\u54c8\u5e0c\u8868\u8f93\u5165\u952e key \uff0c\u5f97\u5230\u503c value\n    const char *name = get(hmap, 15937);\n    printf(\"\\n\u8f93\u5165\u5b66\u53f7 15937 \uff0c\u67e5\u8be2\u5230\u59d3\u540d %s\\n\", name);\n\n    /* \u5220\u9664\u64cd\u4f5c */\n    // \u5728\u54c8\u5e0c\u8868\u4e2d\u5220\u9664\u952e\u503c\u5bf9 (key, value)\n    removeItem(hmap, 10583);\n    printf(\"\\n\u5220\u9664 10583 \u540e\uff0c\u54c8\u5e0c\u8868\u4e3a\\nKey -> Value\\n\");\n    print(hmap);\n\n    /* \u904d\u5386\u54c8\u5e0c\u8868 */\n    int i;\n\n    printf(\"\\n\u904d\u5386\u952e\u503c\u5bf9 Key->Value\\n\");\n    print(hmap);\n\n    MapSet set;\n\n    keySet(hmap, &set);\n    int *keys = (int *)set.set;\n    printf(\"\\n\u5355\u72ec\u904d\u5386\u952e Key\\n\");\n    for (i = 0; i < set.len; i++) {\n        printf(\"%d\\n\", keys[i]);\n    }\n    free(set.set);\n\n    valueSet(hmap, &set);\n    char **vals = (char **)set.set;\n    printf(\"\\n\u5355\u72ec\u904d\u5386\u952e Value\\n\");\n    for (i = 0; i < set.len; i++) {\n        printf(\"%s\\n\", vals[i]);\n    }\n    free(set.set);\n\n    delArrayHashMap(hmap);\n    return 0;\n}", "doc_comment": "/* \u6253\u5370\u54c8\u5e0c\u8868 */"}, "code_tokens": ["void", "print", "(", ")", "{", "/* \u6dfb\u52a0\u64cd\u4f5c */", "// \u5728\u54c8\u5e0c\u8868\u4e2d\u6dfb\u52a0\u952e\u503c\u5bf9 (key, value)", "/* \u67e5\u8be2\u64cd\u4f5c */", "// \u5411\u54c8\u5e0c\u8868\u8f93\u5165\u952e key \uff0c\u5f97\u5230\u503c value", "/* \u5220\u9664\u64cd\u4f5c */", "// \u5728\u54c8\u5e0c\u8868\u4e2d\u5220\u9664\u952e\u503c\u5bf9 (key, value)", "/* \u904d\u5386\u54c8\u5e0c\u8868 */", "}", "ArrayHashMap", "hmap", ";", "MapSet", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "const", ";", ";", ";", ";", ";", ";", ";", ";", "MapSet", ";", ";", ";", ";", "for", "(", ";", ";", ")", ";", ";", ";", ";", "for", "(", ";", ";", ")", ";", ";", "return", "0", ";", "*", "int", "i", "set", "pairSet", "Pair", "*", "put", "put", "put", "put", "put", "printf", "print", "char", "=", "printf", "removeItem", "printf", "print", "int", "i", "printf", "print", "set", "keySet", "int", "*", "keys", "=", "printf", "i", "=", "0", "i", "<", "i", "++", "{", "}", "free", "valueSet", "char", "*", "*", "vals", "=", "printf", "i", "=", "0", "i", "<", "i", "++", "{", "}", "free", "delArrayHashMap", "(", ")", "entries", "=", "(", "hmap", ",", "12836", ",", ")", "(", "hmap", ",", "15937", ",", ")", "(", "hmap", ",", "16750", ",", ")", "(", "hmap", ",", "13276", ",", ")", "(", "hmap", ",", "10583", ",", ")", "(", ")", "(", "hmap", ")", "*", "name", "get", "(", ",", "name", ")", "(", "hmap", ",", "10583", ")", "(", ")", "(", "hmap", ")", "(", ")", "(", "hmap", ")", "(", ")", "(", ")", "(", ")", "set", ".", "len", ";", "(", ")", "(", ")", "(", ")", "(", ")", "set", ".", "len", ";", "(", ")", "(", "hmap", ")", "hmap", "&", "set", "(", "", "\"", "\u5c0f\u54c8", "\"", "\"", "\u5c0f\u5570", "\"", "\"", "\u5c0f\u7b97", "\"", "\"", "\u5c0f\u6cd5", "\"", "\"", "\u5c0f\u9e2d", "\"", "\"", "\\n", "\u6dfb\u52a0\u5b8c\u6210\u540e\uff0c\u54c8\u5e0c\u8868\u4e3a", "\\n", "Key -> Value", "\\n", "\"", "(", "hmap", ",", "15937", ")", "\"", "\\n", "\u8f93\u5165\u5b66\u53f7 15937 \uff0c\u67e5\u8be2\u5230\u59d3\u540d %s", "\\n", "\"", "\"", "\\n", "\u5220\u9664 10583 \u540e\uff0c\u54c8\u5e0c\u8868\u4e3a", "\\n", "Key -> Value", "\\n", "\"", "\"", "\\n", "\u904d\u5386\u952e\u503c\u5bf9 Key->Value", "\\n", "\"", "hmap", "&", "set", "int", "*", "set", ".", "set", "\"", "\\n", "\u5355\u72ec\u904d\u5386\u952e Key", "\\n", "\"", "printf", "set", ".", "set", "hmap", "&", "set", "char", "*", "*", "set", ".", "set", "\"", "\\n", "\u5355\u72ec\u904d\u5386\u952e Value", "\\n", "\"", "printf", "set", ".", "set", ",", "*", ",", "(", ",", ")", ",", "(", ",", ")", "Pair", "*", "/* \u521d\u59cb\u5316\u54c8\u5e0c\u8868 */", "ArrayHashMap", "hmap", "=", "\"", "%d", "\\n", "\"", "keys", "[", "i", "]", "\"", "%s", "\\n", "\"", "vals", "[", "i", "]", ")", ";", "for", "{", "newArrayHashMap", "set", ".", "set", "(", "/* Driver Code */", ")", "(", ")", ";", "}", ";", "}", "main", "(", "<", "free", "int", "i", "=", "0", ";", "i", ";", "i", "++", ")", "{", "printf", "(", ")", "(", ")", "set", ".", "len", ",", ",", ".", "val", "set", ".", "set", "\"", "%d -> %s", "\\n", "\"", ".", "key", "entries", "[", "i", "]", "entries", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 557, "ast_depth": 18, "n_identifiers": 25, "vocab_size": 78}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_hashing/hash_map_chaining.c#50-62", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_hashing/hash_map_chaining.c", "language": "Java"}, "method": {"name": "delHashMapChaining", "qualified_name": "codes.c.chapter_hashing.hash_map_chaining.c#delHashMapChaining", "start_line": 50, "end_line": 62, "signature": "delHashMapChaining(HashMapChaining *hashMap)", "original_code": "void delHashMapChaining(HashMapChaining *hashMap) {\n    for (int i = 0; i < hashMap->capacity; i++) {\n        Node *cur = hashMap->buckets[i];\n        while (cur) {\n            Node *tmp = cur;\n            cur = cur->next;\n            free(tmp->pair);\n            free(tmp);\n        }\n    }\n    free(hashMap->buckets);\n    free(hashMap);\n}", "doc_comment": "/* \u6790\u6784\u51fd\u6570 */"}, "code_tokens": ["void", "delHashMapChaining", "(", ")", "{", "}", "HashMapChaining", "hashMap", "for", "(", ";", ")", ";", ";", "*", ";", "i", "<", "i", "++", "{", "}", "free", "free", "int", "i", "=", "0", "hashMap", "->", "capacity", ";", "while", "(", ")", "(", "hashMap", ")", "Node", "*", "(", "cur", ")", "{", "}", "hashMap", "->", "buckets", "cur", "=", ";", ";", ";", ";", "hashMap", "->", "Node", "*", "cur", "=", "free", "free", "buckets", "[", "i", "]", "tmp", "=", "cur", "cur", "->", "next", "(", ")", "(", "tmp", ")", "tmp", "->", "pair"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 122, "ast_depth": 12, "n_identifiers": 11, "vocab_size": 29}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_hashing/hash_map_chaining.c#65-67", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_hashing/hash_map_chaining.c", "language": "Java"}, "method": {"name": "hashFunc", "qualified_name": "codes.c.chapter_hashing.hash_map_chaining.c#hashFunc", "start_line": 65, "end_line": 67, "signature": "hashFunc(HashMapChaining *hashMap, int key)", "original_code": "int hashFunc(HashMapChaining *hashMap, int key) {\n    return key % hashMap->capacity;\n}", "doc_comment": "/* \u54c8\u5e0c\u51fd\u6570 */"}, "code_tokens": ["hashFunc", "int", "(", ",", ")", "{", "}", "HashMapChaining", "hashMap", "key", "return", ";", "*", "int", "key", "%", "hashMap", "->", "capacity"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 31, "ast_depth": 7, "n_identifiers": 4, "vocab_size": 16}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_hashing/hash_map_chaining.c#70-72", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_hashing/hash_map_chaining.c", "language": "Java"}, "method": {"name": "loadFactor", "qualified_name": "codes.c.chapter_hashing.hash_map_chaining.c#loadFactor", "start_line": 70, "end_line": 72, "signature": "loadFactor(HashMapChaining *hashMap)", "original_code": "double loadFactor(HashMapChaining *hashMap) {\n    return (double)hashMap->size / (double)hashMap->capacity;\n}", "doc_comment": "/* \u8d1f\u8f7d\u56e0\u5b50 */"}, "code_tokens": ["loadFactor", "double", "(", ")", "{", "}", "HashMapChaining", "hashMap", "return", ";", "*", "(", ")", "double", "hashMap", "->", "size", "/", "(", ")", "double", "hashMap", "->", "capacity"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 39, "ast_depth": 10, "n_identifiers": 4, "vocab_size": 15}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_hashing/hash_map_chaining.c#75-86", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_hashing/hash_map_chaining.c", "language": "Java"}, "method": {"name": "get", "qualified_name": "codes.c.chapter_hashing.hash_map_chaining.c#get", "start_line": 75, "end_line": 86, "signature": "get(HashMapChaining *hashMap, int key)", "original_code": "char *get(HashMapChaining *hashMap, int key) {\n    int index = hashFunc(hashMap, key);\n    // \u904d\u5386\u6876\uff0c\u82e5\u627e\u5230 key \u5219\u8fd4\u56de\u5bf9\u5e94 val\n    Node *cur = hashMap->buckets[index];\n    while (cur) {\n        if (cur->pair->key == key) {\n            return cur->pair->val;\n        }\n        cur = cur->next;\n    }\n    return \"\"; // \u82e5\u672a\u627e\u5230 key \u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\n}", "doc_comment": "/* \u67e5\u8be2\u64cd\u4f5c */"}, "code_tokens": ["get", "char", "*", "(", ",", ")", "{", "// \u904d\u5386\u6876\uff0c\u82e5\u627e\u5230 key \u5219\u8fd4\u56de\u5bf9\u5e94 val", "// \u82e5\u672a\u627e\u5230 key \u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32", "}", "HashMapChaining", "hashMap", "key", ";", ";", "while", "return", ";", "*", "int", "int", "index", "=", "Node", "*", "(", "cur", ")", "{", "}", "\"", "\"", "hashFunc", "cur", "=", "if", ";", "(", "hashMap", ",", "key", ")", "hashMap", "->", "(", ")", "{", "}", "cur", "=", "buckets", "[", "index", "]", "cur", "->", "return", ";", "cur", "->", "next", "pair", "->", "cur", "->", "key", "==", "key", "pair", "->", "val"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 108, "ast_depth": 11, "n_identifiers": 11, "vocab_size": 32}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_hashing/hash_map_chaining.c#89-89", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_hashing/hash_map_chaining.c", "language": "Java"}, "method": {"name": "put", "qualified_name": "codes.c.chapter_hashing.hash_map_chaining.c#put", "start_line": 89, "end_line": 89, "signature": "put(HashMapChaining *hashMap, int key, const char *val)", "original_code": "void put(HashMapChaining *hashMap, int key, const char *val);", "doc_comment": "/* \u6dfb\u52a0\u64cd\u4f5c */"}, "code_tokens": ["void", "put", ";", "(", ",", ",", ")", "HashMapChaining", "hashMap", "key", "const", "char", "*", "val", "*", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 25, "ast_depth": 6, "n_identifiers": 5, "vocab_size": 14}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_hashing/hash_map_chaining.c#92-117", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_hashing/hash_map_chaining.c", "language": "Java"}, "method": {"name": "extend", "qualified_name": "codes.c.chapter_hashing.hash_map_chaining.c#extend", "start_line": 92, "end_line": 117, "signature": "extend(HashMapChaining *hashMap)", "original_code": "void extend(HashMapChaining *hashMap) {\n    // \u6682\u5b58\u539f\u54c8\u5e0c\u8868\n    int oldCapacity = hashMap->capacity;\n    Node **oldBuckets = hashMap->buckets;\n    // \u521d\u59cb\u5316\u6269\u5bb9\u540e\u7684\u65b0\u54c8\u5e0c\u8868\n    hashMap->capacity *= hashMap->extendRatio;\n    hashMap->buckets = (Node **)malloc(hashMap->capacity * sizeof(Node *));\n    for (int i = 0; i < hashMap->capacity; i++) {\n        hashMap->buckets[i] = NULL;\n    }\n    hashMap->size = 0;\n    // \u5c06\u952e\u503c\u5bf9\u4ece\u539f\u54c8\u5e0c\u8868\u642c\u8fd0\u81f3\u65b0\u54c8\u5e0c\u8868\n    for (int i = 0; i < oldCapacity; i++) {\n        Node *cur = oldBuckets[i];\n        while (cur) {\n            put(hashMap, cur->pair->key, cur->pair->val);\n            Node *temp = cur;\n            cur = cur->next;\n            // \u91ca\u653e\u5185\u5b58\n            free(temp->pair);\n            free(temp);\n        }\n    }\n\n    free(oldBuckets);\n}", "doc_comment": "/* \u6269\u5bb9\u54c8\u5e0c\u8868 */"}, "code_tokens": ["void", "extend", "(", ")", "{", "// \u6682\u5b58\u539f\u54c8\u5e0c\u8868", "// \u521d\u59cb\u5316\u6269\u5bb9\u540e\u7684\u65b0\u54c8\u5e0c\u8868", "// \u5c06\u952e\u503c\u5bf9\u4ece\u539f\u54c8\u5e0c\u8868\u642c\u8fd0\u81f3\u65b0\u54c8\u5e0c\u8868", "}", "HashMapChaining", "hashMap", ";", ";", ";", ";", "for", "(", ";", ")", ";", "for", "(", ";", ")", ";", "*", "int", "oldCapacity", "=", "Node", "*", "hashMap", "->", "hashMap", "->", ";", "i", "<", "i", "++", "{", "}", "hashMap", "->", ";", "i", "<", "oldCapacity", "i", "++", "{", "}", "free", "hashMap", "->", "capacity", "*", "oldBuckets", "=", "capacity", "*=", "buckets", "=", "int", "i", "=", "0", "hashMap", "->", "capacity", ";", "size", "=", "0", "int", "i", "=", "0", ";", "while", "(", "oldBuckets", ")", "hashMap", "->", "buckets", "hashMap", "->", "extendRatio", "(", "", "hashMap", "->", "Node", "*", "(", "cur", ")", "{", "// \u91ca\u653e\u5185\u5b58", "}", "Node", "*", "=", "NULL", "cur", "=", ";", ";", ";", ";", ";", "*", ")", "malloc", "buckets", "[", "i", "]", "oldBuckets", "[", "i", "]", "put", "Node", "*", "cur", "=", "free", "free", "(", ")", "(", "hashMap", ",", ",", ")", "temp", "=", "cur", "cur", "->", "next", "(", ")", "(", "temp", ")", "hashMap", "->", "cur", "->", "cur", "->", "temp", "->", "pair", "capacity", "*", "pair", "->", "key", "pair", "->", "val", "sizeof", "(", ")", "Node", "*", ""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 255, "ast_depth": 16, "n_identifiers": 22, "vocab_size": 46}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_hashing/hash_map_chaining.c#120-144", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_hashing/hash_map_chaining.c", "language": "Java"}, "method": {"name": "put", "qualified_name": "codes.c.chapter_hashing.hash_map_chaining.c#put", "start_line": 120, "end_line": 144, "signature": "put(HashMapChaining *hashMap, int key, const char *val)", "original_code": "void put(HashMapChaining *hashMap, int key, const char *val) {\n    // \u5f53\u8d1f\u8f7d\u56e0\u5b50\u8d85\u8fc7\u9608\u503c\u65f6\uff0c\u6267\u884c\u6269\u5bb9\n    if (loadFactor(hashMap) > hashMap->loadThres) {\n        extend(hashMap);\n    }\n    int index = hashFunc(hashMap, key);\n    // \u904d\u5386\u6876\uff0c\u82e5\u9047\u5230\u6307\u5b9a key \uff0c\u5219\u66f4\u65b0\u5bf9\u5e94 val \u5e76\u8fd4\u56de\n    Node *cur = hashMap->buckets[index];\n    while (cur) {\n        if (cur->pair->key == key) {\n            strcpy(cur->pair->val, val); // \u82e5\u9047\u5230\u6307\u5b9a key \uff0c\u5219\u66f4\u65b0\u5bf9\u5e94 val \u5e76\u8fd4\u56de\n            return;\n        }\n        cur = cur->next;\n    }\n    // \u82e5\u65e0\u8be5 key \uff0c\u5219\u5c06\u952e\u503c\u5bf9\u6dfb\u52a0\u81f3\u5c3e\u90e8\n    Pair *newPair = (Pair *)malloc(sizeof(Pair));\n    newPair->key = key;\n    strcpy(newPair->val, val);\n    Node *newNode = (Node *)malloc(sizeof(Node));\n    newNode->pair = newPair;\n    newNode->next = hashMap->buckets[index];\n    hashMap->buckets[index] = newNode;\n    hashMap->size++;\n}", "doc_comment": "/* \u6dfb\u52a0\u64cd\u4f5c */"}, "code_tokens": ["void", "put", "(", ",", ",", ")", "{", "// \u5f53\u8d1f\u8f7d\u56e0\u5b50\u8d85\u8fc7\u9608\u503c\u65f6\uff0c\u6267\u884c\u6269\u5bb9", "// \u904d\u5386\u6876\uff0c\u82e5\u9047\u5230\u6307\u5b9a key \uff0c\u5219\u66f4\u65b0\u5bf9\u5e94 val \u5e76\u8fd4\u56de", "// \u82e5\u65e0\u8be5 key \uff0c\u5219\u5c06\u952e\u503c\u5bf9\u6dfb\u52a0\u81f3\u5c3e\u90e8", "}", "HashMapChaining", "hashMap", "key", "const", "char", "*", "val", "if", ";", ";", "while", ";", ";", ";", ";", ";", ";", ";", ";", "*", "int", "(", ")", "{", "}", "int", "index", "=", "Node", "*", "(", "cur", ")", "{", "}", "Pair", "*", "newPair", "->", "strcpy", "Node", "*", "newNode", "->", "newNode", "->", "hashMap", "->", "hashMap", "->", ">", ";", "hashFunc", "cur", "=", "if", ";", "newPair", "=", "key", "=", "key", "(", ",", "val", ")", "newNode", "=", "pair", "=", "newPair", "next", "=", "=", "newNode", "size", "++", "loadFactor", "hashMap", "->", "loadThres", "extend", "(", "hashMap", ",", "key", ")", "hashMap", "->", "(", ")", "{", "// \u82e5\u9047\u5230\u6307\u5b9a key \uff0c\u5219\u66f4\u65b0\u5bf9\u5e94 val \u5e76\u8fd4\u56de", "}", "cur", "=", "(", "", "newPair", "->", "val", "(", "", "hashMap", "->", "buckets", "[", "index", "]", "(", "hashMap", ")", "(", "hashMap", ")", "buckets", "[", "index", "]", "cur", "->", ";", "return", ";", "cur", "->", "next", "Pair", "*", "Node", "*", "buckets", "[", "index", "]", "pair", "->", "strcpy", ")", "malloc", ")", "malloc", "key", "==", "key", "(", ",", "val", ")", "(", ")", "(", ")", "cur", "->", "sizeof", "sizeof", "pair", "->", "val", "(", "Pair", ")", "(", "Node", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 267, "ast_depth": 13, "n_identifiers": 22, "vocab_size": 48}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_hashing/hash_map_chaining.c#147-168", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_hashing/hash_map_chaining.c", "language": "Java"}, "method": {"name": "removeItem", "qualified_name": "codes.c.chapter_hashing.hash_map_chaining.c#removeItem", "start_line": 147, "end_line": 168, "signature": "removeItem(HashMapChaining *hashMap, int key)", "original_code": "void removeItem(HashMapChaining *hashMap, int key) {\n    int index = hashFunc(hashMap, key);\n    Node *cur = hashMap->buckets[index];\n    Node *pre = NULL;\n    while (cur) {\n        if (cur->pair->key == key) {\n            // \u4ece\u4e2d\u5220\u9664\u952e\u503c\u5bf9\n            if (pre) {\n                pre->next = cur->next;\n            } else {\n                hashMap->buckets[index] = cur->next;\n            }\n            // \u91ca\u653e\u5185\u5b58\n            free(cur->pair);\n            free(cur);\n            hashMap->size--;\n            return;\n        }\n        pre = cur;\n        cur = cur->next;\n    }\n}", "doc_comment": "/* \u5220\u9664\u64cd\u4f5c */"}, "code_tokens": ["void", "removeItem", "(", ",", ")", "{", "}", "HashMapChaining", "hashMap", "key", ";", ";", ";", "while", "*", "int", "int", "index", "=", "Node", "*", "Node", "*", "(", "cur", ")", "{", "}", "hashFunc", "cur", "=", "pre", "=", "NULL", "if", ";", ";", "(", "hashMap", ",", "key", ")", "hashMap", "->", "(", ")", "{", "// \u4ece\u4e2d\u5220\u9664\u952e\u503c\u5bf9", "// \u91ca\u653e\u5185\u5b58", "}", "pre", "=", "cur", "cur", "=", "buckets", "[", "index", "]", "cur", "->", "if", "else", ";", ";", ";", "return", ";", "cur", "->", "next", "pair", "->", "(", "pre", ")", "{", "}", "{", "}", "free", "free", "hashMap", "->", "key", "==", "key", ";", ";", "(", ")", "(", "cur", ")", "size", "--", "pre", "->", "hashMap", "->", "cur", "->", "pair", "next", "=", "=", "cur", "->", "next", "buckets", "[", "index", "]", "cur", "->", "next"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 175, "ast_depth": 14, "n_identifiers": 14, "vocab_size": 36}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_hashing/hash_map_chaining.c#171-181", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_hashing/hash_map_chaining.c", "language": "Java"}, "method": {"name": "print", "qualified_name": "codes.c.chapter_hashing.hash_map_chaining.c#print", "start_line": 171, "end_line": 181, "signature": "print(HashMapChaining *hashMap)", "original_code": "void print(HashMapChaining *hashMap) {\n    for (int i = 0; i < hashMap->capacity; i++) {\n        Node *cur = hashMap->buckets[i];\n        printf(\"[\");\n        while (cur) {\n            printf(\"%d -> %s, \", cur->pair->key, cur->pair->val);\n            cur = cur->next;\n        }\n        printf(\"]\\n\");\n    }\n}", "doc_comment": "/* \u6253\u5370\u54c8\u5e0c\u8868 */"}, "code_tokens": ["void", "print", "(", ")", "{", "}", "HashMapChaining", "hashMap", "for", "(", ";", ")", "*", ";", "i", "<", "i", "++", "{", "}", "int", "i", "=", "0", "hashMap", "->", "capacity", ";", ";", "while", ";", "Node", "*", "printf", "(", "cur", ")", "{", "}", "printf", "cur", "=", "(", ")", ";", ";", "(", ")", "hashMap", "->", "\"", "[", "\"", "printf", "cur", "=", "\"", "]", "\\n", "\"", "buckets", "[", "i", "]", "(", ",", ",", ")", "cur", "->", "next", "\"", "%d -> %s, ", "\"", "cur", "->", "cur", "->", "pair", "->", "key", "pair", "->", "val"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 125, "ast_depth": 13, "n_identifiers": 12, "vocab_size": 34}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_hashing/hash_map_chaining.c#184-213", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_hashing/hash_map_chaining.c", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.c.chapter_hashing.hash_map_chaining.c#main", "start_line": 184, "end_line": 213, "signature": "main()", "original_code": "int main() {\n    /* \u521d\u59cb\u5316\u54c8\u5e0c\u8868 */\n    HashMapChaining *hashMap = newHashMapChaining();\n\n    /* \u6dfb\u52a0\u64cd\u4f5c */\n    // \u5728\u54c8\u5e0c\u8868\u4e2d\u6dfb\u52a0\u952e\u503c\u5bf9 (key, value)\n    put(hashMap, 12836, \"\u5c0f\u54c8\");\n    put(hashMap, 15937, \"\u5c0f\u5570\");\n    put(hashMap, 16750, \"\u5c0f\u7b97\");\n    put(hashMap, 13276, \"\u5c0f\u6cd5\");\n    put(hashMap, 10583, \"\u5c0f\u9e2d\");\n    printf(\"\\n\u6dfb\u52a0\u5b8c\u6210\u540e\uff0c\u54c8\u5e0c\u8868\u4e3a\\nKey -> Value\\n\");\n    print(hashMap);\n\n    /* \u67e5\u8be2\u64cd\u4f5c */\n    // \u5411\u54c8\u5e0c\u8868\u8f93\u5165\u952e key \uff0c\u5f97\u5230\u503c value\n    char *name = get(hashMap, 13276);\n    printf(\"\\n\u8f93\u5165\u5b66\u53f7 13276 \uff0c\u67e5\u8be2\u5230\u59d3\u540d %s\\n\", name);\n\n    /* \u5220\u9664\u64cd\u4f5c */\n    // \u5728\u54c8\u5e0c\u8868\u4e2d\u5220\u9664\u952e\u503c\u5bf9 (key, value)\n    removeItem(hashMap, 12836);\n    printf(\"\\n\u5220\u9664\u5b66\u53f7 12836 \u540e\uff0c\u54c8\u5e0c\u8868\u4e3a\\nKey -> Value\\n\");\n    print(hashMap);\n\n    /* \u91ca\u653e\u54c8\u5e0c\u8868\u7a7a\u95f4 */\n    delHashMapChaining(hashMap);\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "/* \u521d\u59cb\u5316\u54c8\u5e0c\u8868 */", "/* \u6dfb\u52a0\u64cd\u4f5c */", "// \u5728\u54c8\u5e0c\u8868\u4e2d\u6dfb\u52a0\u952e\u503c\u5bf9 (key, value)", "/* \u67e5\u8be2\u64cd\u4f5c */", "// \u5411\u54c8\u5e0c\u8868\u8f93\u5165\u952e key \uff0c\u5f97\u5230\u503c value", "/* \u5220\u9664\u64cd\u4f5c */", "// \u5728\u54c8\u5e0c\u8868\u4e2d\u5220\u9664\u952e\u503c\u5bf9 (key, value)", "/* \u91ca\u653e\u54c8\u5e0c\u8868\u7a7a\u95f4 */", "}", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "return", "0", ";", "HashMapChaining", "*", "put", "put", "put", "put", "put", "printf", "print", "char", "*", "name", "=", "printf", "removeItem", "printf", "print", "delHashMapChaining", "hashMap", "=", "(", "hashMap", ",", "12836", ",", ")", "(", "hashMap", ",", "15937", ",", ")", "(", "hashMap", ",", "16750", ",", ")", "(", "hashMap", ",", "13276", ",", ")", "(", "hashMap", ",", "10583", ",", ")", "(", ")", "(", "hashMap", ")", "get", "(", ",", "name", ")", "(", "hashMap", ",", "12836", ")", "(", ")", "(", "hashMap", ")", "(", "hashMap", ")", "newHashMapChaining", "\"", "\u5c0f\u54c8", "\"", "\"", "\u5c0f\u5570", "\"", "\"", "\u5c0f\u7b97", "\"", "\"", "\u5c0f\u6cd5", "\"", "\"", "\u5c0f\u9e2d", "\"", "\"", "\\n", "\u6dfb\u52a0\u5b8c\u6210\u540e\uff0c\u54c8\u5e0c\u8868\u4e3a", "\\n", "Key -> Value", "\\n", "\"", "(", "hashMap", ",", "13276", ")", "\"", "\\n", "\u8f93\u5165\u5b66\u53f7 13276 \uff0c\u67e5\u8be2\u5230\u59d3\u540d %s", "\\n", "\"", "\"", "\\n", "\u5220\u9664\u5b66\u53f7 12836 \u540e\uff0c\u54c8\u5e0c\u8868\u4e3a", "\\n", "Key -> Value", "\\n", "\"", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 207, "ast_depth": 9, "n_identifiers": 11, "vocab_size": 47}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_heap/my_heap.c#20-20", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_heap/my_heap.c", "language": "Java"}, "method": {"name": "siftDown", "qualified_name": "codes.c.chapter_heap.my_heap.c#siftDown", "start_line": 20, "end_line": 20, "signature": "siftDown(MaxHeap *maxHeap, int i)", "original_code": "void siftDown(MaxHeap *maxHeap, int i);", "doc_comment": "// \u51fd\u6570\u58f0\u660e"}, "code_tokens": ["void", "siftDown", ";", "(", ",", ")", "MaxHeap", "maxHeap", "i", "*", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 18, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 11}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_heap/my_heap.c#21-21", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_heap/my_heap.c", "language": "Java"}, "method": {"name": "siftUp", "qualified_name": "codes.c.chapter_heap.my_heap.c#siftUp", "start_line": 21, "end_line": 21, "signature": "siftUp(MaxHeap *maxHeap, int i)", "original_code": "void siftUp(MaxHeap *maxHeap, int i);", "doc_comment": ""}, "code_tokens": ["void", "siftUp", ";", "(", ",", ")", "MaxHeap", "maxHeap", "i", "*", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 18, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 11}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_heap/my_heap.c#22-22", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_heap/my_heap.c", "language": "Java"}, "method": {"name": "parent", "qualified_name": "codes.c.chapter_heap.my_heap.c#parent", "start_line": 22, "end_line": 22, "signature": "parent(MaxHeap *maxHeap, int i)", "original_code": "int parent(MaxHeap *maxHeap, int i);", "doc_comment": ""}, "code_tokens": ["parent", ";", "int", "(", ",", ")", "MaxHeap", "maxHeap", "i", "*", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 19, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 10}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_heap/my_heap.c#38-41", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_heap/my_heap.c", "language": "Java"}, "method": {"name": "delMaxHeap", "qualified_name": "codes.c.chapter_heap.my_heap.c#delMaxHeap", "start_line": 38, "end_line": 41, "signature": "delMaxHeap(MaxHeap *maxHeap)", "original_code": "void delMaxHeap(MaxHeap *maxHeap) {\n    // \u91ca\u653e\u5185\u5b58\n    free(maxHeap);\n}", "doc_comment": "/* \u6790\u6784\u51fd\u6570 */"}, "code_tokens": ["void", "delMaxHeap", "(", ")", "{", "// \u91ca\u653e\u5185\u5b58", "}", "MaxHeap", "maxHeap", ";", "*", "free", "(", "maxHeap", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 24, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 12}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_heap/my_heap.c#44-46", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_heap/my_heap.c", "language": "Java"}, "method": {"name": "left", "qualified_name": "codes.c.chapter_heap.my_heap.c#left", "start_line": 44, "end_line": 46, "signature": "left(MaxHeap *maxHeap, int i)", "original_code": "int left(MaxHeap *maxHeap, int i) {\n    return 2 * i + 1;\n}", "doc_comment": "/* \u83b7\u53d6\u5de6\u5b50\u8282\u70b9\u7d22\u5f15 */"}, "code_tokens": ["left", "int", "(", ",", ")", "{", "}", "MaxHeap", "maxHeap", "i", "return", ";", "*", "int", "+", "1", "2", "*", "i"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 31, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 16}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_heap/my_heap.c#49-51", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_heap/my_heap.c", "language": "Java"}, "method": {"name": "right", "qualified_name": "codes.c.chapter_heap.my_heap.c#right", "start_line": 49, "end_line": 51, "signature": "right(MaxHeap *maxHeap, int i)", "original_code": "int right(MaxHeap *maxHeap, int i) {\n    return 2 * i + 2;\n}", "doc_comment": "/* \u83b7\u53d6\u53f3\u5b50\u8282\u70b9\u7d22\u5f15 */"}, "code_tokens": ["right", "int", "(", ",", ")", "{", "}", "MaxHeap", "maxHeap", "i", "return", ";", "*", "int", "+", "2", "2", "*", "i"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 31, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 15}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_heap/my_heap.c#54-56", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_heap/my_heap.c", "language": "Java"}, "method": {"name": "parent", "qualified_name": "codes.c.chapter_heap.my_heap.c#parent", "start_line": 54, "end_line": 56, "signature": "parent(MaxHeap *maxHeap, int i)", "original_code": "int parent(MaxHeap *maxHeap, int i) {\n    return (i - 1) / 2;\n}", "doc_comment": "/* \u83b7\u53d6\u7236\u8282\u70b9\u7d22\u5f15 */"}, "code_tokens": ["parent", "int", "(", ",", ")", "{", "}", "MaxHeap", "maxHeap", "i", "return", ";", "*", "int", "/", "2", "(", ")", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 34, "ast_depth": 8, "n_identifiers": 3, "vocab_size": 17}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_heap/my_heap.c#59-63", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_heap/my_heap.c", "language": "Java"}, "method": {"name": "swap", "qualified_name": "codes.c.chapter_heap.my_heap.c#swap", "start_line": 59, "end_line": 63, "signature": "swap(MaxHeap *maxHeap, int i, int j)", "original_code": "void swap(MaxHeap *maxHeap, int i, int j) {\n    int temp = maxHeap->data[i];\n    maxHeap->data[i] = maxHeap->data[j];\n    maxHeap->data[j] = temp;\n}", "doc_comment": "/* \u4ea4\u6362\u5143\u7d20 */"}, "code_tokens": ["void", "swap", "(", ",", ",", ")", "{", "}", "MaxHeap", "maxHeap", "i", "j", ";", ";", ";", "*", "int", "int", "int", "temp", "=", "maxHeap", "->", "maxHeap", "->", "maxHeap", "->", "=", "=", "temp", "data", "[", "i", "]", "data", "[", "i", "]", "maxHeap", "->", "data", "[", "j", "]", "data", "[", "j", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 73, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 20}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_heap/my_heap.c#66-68", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_heap/my_heap.c", "language": "Java"}, "method": {"name": "size", "qualified_name": "codes.c.chapter_heap.my_heap.c#size", "start_line": 66, "end_line": 68, "signature": "size(MaxHeap *maxHeap)", "original_code": "int size(MaxHeap *maxHeap) {\n    return maxHeap->size;\n}", "doc_comment": "/* \u83b7\u53d6\u5806\u5927\u5c0f */"}, "code_tokens": ["size", "int", "(", ")", "{", "}", "MaxHeap", "maxHeap", "return", ";", "*", "maxHeap", "->", "size"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 23, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 12}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_heap/my_heap.c#71-73", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_heap/my_heap.c", "language": "Java"}, "method": {"name": "isEmpty", "qualified_name": "codes.c.chapter_heap.my_heap.c#isEmpty", "start_line": 71, "end_line": 73, "signature": "isEmpty(MaxHeap *maxHeap)", "original_code": "int isEmpty(MaxHeap *maxHeap) {\n    return maxHeap->size == 0;\n}", "doc_comment": "/* \u5224\u65ad\u5806\u662f\u5426\u4e3a\u7a7a */"}, "code_tokens": ["isEmpty", "int", "(", ")", "{", "}", "MaxHeap", "maxHeap", "return", ";", "*", "maxHeap", "->", "size", "==", "0"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 26, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 15}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_heap/my_heap.c#76-78", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_heap/my_heap.c", "language": "Java"}, "method": {"name": "peek", "qualified_name": "codes.c.chapter_heap.my_heap.c#peek", "start_line": 76, "end_line": 78, "signature": "peek(MaxHeap *maxHeap)", "original_code": "int peek(MaxHeap *maxHeap) {\n    return maxHeap->data[0];\n}", "doc_comment": "/* \u8bbf\u95ee\u5806\u9876\u5143\u7d20 */"}, "code_tokens": ["peek", "int", "(", ")", "{", "}", "MaxHeap", "maxHeap", "return", ";", "*", "maxHeap", "->", "data", "[", "0", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 27, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 16}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_heap/my_heap.c#81-93", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_heap/my_heap.c", "language": "Java"}, "method": {"name": "push", "qualified_name": "codes.c.chapter_heap.my_heap.c#push", "start_line": 81, "end_line": 93, "signature": "push(MaxHeap *maxHeap, int val)", "original_code": "void push(MaxHeap *maxHeap, int val) {\n    // \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4e0d\u5e94\u8be5\u6dfb\u52a0\u8fd9\u4e48\u591a\u8282\u70b9\n    if (maxHeap->size == MAX_SIZE) {\n        printf(\"heap is full!\");\n        return;\n    }\n    // \u6dfb\u52a0\u8282\u70b9\n    maxHeap->data[maxHeap->size] = val;\n    maxHeap->size++;\n\n    // \u4ece\u5e95\u81f3\u9876\u5806\u5316\n    siftUp(maxHeap, maxHeap->size - 1);\n}", "doc_comment": "/* \u5143\u7d20\u5165\u5806 */"}, "code_tokens": ["void", "push", "(", ",", ")", "{", "// \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4e0d\u5e94\u8be5\u6dfb\u52a0\u8fd9\u4e48\u591a\u8282\u70b9", "// \u6dfb\u52a0\u8282\u70b9", "// \u4ece\u5e95\u81f3\u9876\u5806\u5316", "}", "MaxHeap", "maxHeap", "val", "if", ";", ";", ";", "*", "int", "(", ")", "{", "}", "maxHeap", "->", "maxHeap", "->", "siftUp", "maxHeap", "->", ";", "return", ";", "=", "val", "size", "++", "(", "maxHeap", ",", ")", "size", "==", "MAX_SIZE", "printf", "data", "[", "]", "maxHeap", "->", "(", ")", "maxHeap", "->", "size", "size", "-", "1", "\"", "heap is full!", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 92, "ast_depth": 10, "n_identifiers": 8, "vocab_size": 33}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_heap/my_heap.c#96-112", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_heap/my_heap.c", "language": "Java"}, "method": {"name": "pop", "qualified_name": "codes.c.chapter_heap.my_heap.c#pop", "start_line": 96, "end_line": 112, "signature": "pop(MaxHeap *maxHeap)", "original_code": "int pop(MaxHeap *maxHeap) {\n    // \u5224\u7a7a\u5904\u7406\n    if (isEmpty(maxHeap)) {\n        printf(\"heap is empty!\");\n        return INT_MAX;\n    }\n    // \u4ea4\u6362\u6839\u8282\u70b9\u4e0e\u6700\u53f3\u53f6\u8282\u70b9\uff08\u5373\u4ea4\u6362\u9996\u5143\u7d20\u4e0e\u5c3e\u5143\u7d20\uff09\n    swap(maxHeap, 0, size(maxHeap) - 1);\n    // \u5220\u9664\u8282\u70b9\n    int val = maxHeap->data[maxHeap->size - 1];\n    maxHeap->size--;\n    // \u4ece\u9876\u81f3\u5e95\u5806\u5316\n    siftDown(maxHeap, 0);\n\n    // \u8fd4\u56de\u5806\u9876\u5143\u7d20\n    return val;\n}", "doc_comment": "/* \u5143\u7d20\u51fa\u5806 */"}, "code_tokens": ["pop", "int", "(", ")", "{", "// \u5224\u7a7a\u5904\u7406", "// \u4ea4\u6362\u6839\u8282\u70b9\u4e0e\u6700\u53f3\u53f6\u8282\u70b9\uff08\u5373\u4ea4\u6362\u9996\u5143\u7d20\u4e0e\u5c3e\u5143\u7d20\uff09", "// \u5220\u9664\u8282\u70b9", "// \u4ece\u9876\u81f3\u5e95\u5806\u5316", "// \u8fd4\u56de\u5806\u9876\u5143\u7d20", "}", "MaxHeap", "maxHeap", "if", ";", ";", ";", ";", "return", "val", ";", "*", "(", ")", "{", "}", "swap", "int", "val", "=", "maxHeap", "->", "siftDown", "isEmpty", ";", "return", "INT_MAX", ";", "(", "maxHeap", ",", "0", ",", ")", "maxHeap", "->", "size", "--", "(", "maxHeap", ",", "0", ")", "(", "maxHeap", ")", "printf", "-", "1", "data", "[", "]", "(", ")", "size", "maxHeap", "->", "\"", "heap is empty!", "\"", "(", "maxHeap", ")", "size", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 113, "ast_depth": 10, "n_identifiers": 10, "vocab_size": 36}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_heap/my_heap.c#115-136", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_heap/my_heap.c", "language": "Java"}, "method": {"name": "siftDown", "qualified_name": "codes.c.chapter_heap.my_heap.c#siftDown", "start_line": 115, "end_line": 136, "signature": "siftDown(MaxHeap *maxHeap, int i)", "original_code": "void siftDown(MaxHeap *maxHeap, int i) {\n    while (true) {\n        // \u5224\u65ad\u8282\u70b9 i, l, r \u4e2d\u503c\u6700\u5927\u7684\u8282\u70b9\uff0c\u8bb0\u4e3a max\n        int l = left(maxHeap, i);\n        int r = right(maxHeap, i);\n        int max = i;\n        if (l < size(maxHeap) && maxHeap->data[l] > maxHeap->data[max]) {\n            max = l;\n        }\n        if (r < size(maxHeap) && maxHeap->data[r] > maxHeap->data[max]) {\n            max = r;\n        }\n        // \u82e5\u8282\u70b9 i \u6700\u5927\u6216\u7d22\u5f15 l, r \u8d8a\u754c\uff0c\u5219\u65e0\u987b\u7ee7\u7eed\u5806\u5316\uff0c\u8df3\u51fa\n        if (max == i) {\n            break;\n        }\n        // \u4ea4\u6362\u4e24\u8282\u70b9\n        swap(maxHeap, i, max);\n        // \u5faa\u73af\u5411\u4e0b\u5806\u5316\n        i = max;\n    }\n}", "doc_comment": "/* \u4ece\u8282\u70b9 i \u5f00\u59cb\uff0c\u4ece\u9876\u81f3\u5e95\u5806\u5316 */"}, "code_tokens": ["void", "siftDown", "(", ",", ")", "{", "}", "MaxHeap", "maxHeap", "i", "while", "*", "int", "(", "true", ")", "{", "// \u5224\u65ad\u8282\u70b9 i, l, r \u4e2d\u503c\u6700\u5927\u7684\u8282\u70b9\uff0c\u8bb0\u4e3a max", "// \u82e5\u8282\u70b9 i \u6700\u5927\u6216\u7d22\u5f15 l, r \u8d8a\u754c\uff0c\u5219\u65e0\u987b\u7ee7\u7eed\u5806\u5316\uff0c\u8df3\u51fa", "// \u4ea4\u6362\u4e24\u8282\u70b9", "// \u5faa\u73af\u5411\u4e0b\u5806\u5316", "}", ";", ";", ";", "if", "if", "if", ";", ";", "int", "l", "=", "int", "r", "=", "int", "max", "=", "i", "(", ")", "{", "}", "(", ")", "{", "}", "(", ")", "{", "}", "swap", "i", "=", "max", "left", "right", "&&", ";", "&&", ";", "max", "==", "i", "break", ";", "(", "maxHeap", ",", "i", ",", "max", ")", "(", "maxHeap", ",", "i", ")", "(", "maxHeap", ",", "i", ")", "l", "<", "maxHeap", "->", "max", "=", "l", "r", "<", "maxHeap", "->", "max", "=", "r", "size", ">", "size", ">", "(", "maxHeap", ")", "data", "[", "l", "]", "maxHeap", "->", "(", "maxHeap", ")", "data", "[", "r", "]", "maxHeap", "->", "data", "[", "max", "]", "data", "[", "max", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 190, "ast_depth": 13, "n_identifiers": 11, "vocab_size": 37}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_heap/my_heap.c#139-152", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_heap/my_heap.c", "language": "Java"}, "method": {"name": "siftUp", "qualified_name": "codes.c.chapter_heap.my_heap.c#siftUp", "start_line": 139, "end_line": 152, "signature": "siftUp(MaxHeap *maxHeap, int i)", "original_code": "void siftUp(MaxHeap *maxHeap, int i) {\n    while (true) {\n        // \u83b7\u53d6\u8282\u70b9 i \u7684\u7236\u8282\u70b9\n        int p = parent(maxHeap, i);\n        // \u5f53\u201c\u8d8a\u8fc7\u6839\u8282\u70b9\u201d\u6216\u201c\u8282\u70b9\u65e0\u987b\u4fee\u590d\u201d\u65f6\uff0c\u7ed3\u675f\u5806\u5316\n        if (p < 0 || maxHeap->data[i] <= maxHeap->data[p]) {\n            break;\n        }\n        // \u4ea4\u6362\u4e24\u8282\u70b9\n        swap(maxHeap, i, p);\n        // \u5faa\u73af\u5411\u4e0a\u5806\u5316\n        i = p;\n    }\n}", "doc_comment": "/* \u4ece\u8282\u70b9 i \u5f00\u59cb\uff0c\u4ece\u5e95\u81f3\u9876\u5806\u5316 */"}, "code_tokens": ["void", "siftUp", "(", ",", ")", "{", "}", "MaxHeap", "maxHeap", "i", "while", "*", "int", "(", "true", ")", "{", "// \u83b7\u53d6\u8282\u70b9 i \u7684\u7236\u8282\u70b9", "// \u5f53\u201c\u8d8a\u8fc7\u6839\u8282\u70b9\u201d\u6216\u201c\u8282\u70b9\u65e0\u987b\u4fee\u590d\u201d\u65f6\uff0c\u7ed3\u675f\u5806\u5316", "// \u4ea4\u6362\u4e24\u8282\u70b9", "// \u5faa\u73af\u5411\u4e0a\u5806\u5316", "}", ";", "if", ";", ";", "int", "p", "=", "(", ")", "{", "}", "swap", "i", "=", "p", "parent", "||", "break", ";", "(", "maxHeap", ",", "i", ",", "p", ")", "(", "maxHeap", ",", "i", ")", "p", "<", "0", "maxHeap", "->", "<=", "data", "[", "i", "]", "maxHeap", "->", "data", "[", "p", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 101, "ast_depth": 13, "n_identifiers": 7, "vocab_size": 33}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_heap/my_heap_test.c#10-41", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_heap/my_heap_test.c", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.c.chapter_heap.my_heap_test.c#main", "start_line": 10, "end_line": 41, "signature": "main()", "original_code": "int main() {\n    /* \u521d\u59cb\u5316\u5806 */\n    // \u521d\u59cb\u5316\u5927\u9876\u5806\n    int nums[] = {9, 8, 6, 6, 7, 5, 2, 1, 4, 3, 6, 2};\n    MaxHeap *maxHeap = newMaxHeap(nums, sizeof(nums) / sizeof(int));\n    printf(\"\u8f93\u5165\u6570\u7ec4\u5e76\u5efa\u5806\u540e\\n\");\n    printHeap(maxHeap->data, maxHeap->size);\n\n    /* \u83b7\u53d6\u5806\u9876\u5143\u7d20 */\n    printf(\"\\n\u5806\u9876\u5143\u7d20\u4e3a %d\\n\", peek(maxHeap));\n\n    /* \u5143\u7d20\u5165\u5806 */\n    push(maxHeap, 7);\n    printf(\"\\n\u5143\u7d20 7 \u5165\u5806\u540e\\n\");\n    printHeap(maxHeap->data, maxHeap->size);\n\n    /* \u5806\u9876\u5143\u7d20\u51fa\u5806 */\n    int top = pop(maxHeap);\n    printf(\"\\n\u5806\u9876\u5143\u7d20 %d \u51fa\u5806\u540e\\n\", top);\n    printHeap(maxHeap->data, maxHeap->size);\n\n    /* \u83b7\u53d6\u5806\u5927\u5c0f */\n    printf(\"\\n\u5806\u5143\u7d20\u6570\u91cf\u4e3a %d\\n\", size(maxHeap));\n\n    /* \u5224\u65ad\u5806\u662f\u5426\u4e3a\u7a7a */\n    printf(\"\\n\u5806\u662f\u5426\u4e3a\u7a7a %d\\n\", isEmpty(maxHeap));\n\n    // \u91ca\u653e\u5185\u5b58\n    delMaxHeap(maxHeap);\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "/* \u521d\u59cb\u5316\u5806 */", "// \u521d\u59cb\u5316\u5927\u9876\u5806", "/* \u83b7\u53d6\u5806\u9876\u5143\u7d20 */", "/* \u5143\u7d20\u5165\u5806 */", "/* \u5806\u9876\u5143\u7d20\u51fa\u5806 */", "/* \u83b7\u53d6\u5806\u5927\u5c0f */", "/* \u5224\u65ad\u5806\u662f\u5426\u4e3a\u7a7a */", "// \u91ca\u653e\u5185\u5b58", "}", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "return", "0", ";", "int", "nums", "=", "MaxHeap", "*", "printf", "printHeap", "printf", "push", "printf", "printHeap", "int", "top", "=", "printf", "printHeap", "printf", "printf", "delMaxHeap", "[", "]", "{", "9", ",", "8", ",", "6", ",", "6", ",", "7", ",", "5", ",", "2", ",", "1", ",", "4", ",", "3", ",", "6", ",", "2", "}", "maxHeap", "=", "(", ")", "(", ",", ")", "(", ",", ")", "(", "maxHeap", ",", "7", ")", "(", ")", "(", ",", ")", "pop", "(", ",", "top", ")", "(", ",", ")", "(", ",", ")", "(", ",", ")", "(", "maxHeap", ")", "newMaxHeap", "\"", "\u8f93\u5165\u6570\u7ec4\u5e76\u5efa\u5806\u540e", "\\n", "\"", "maxHeap", "->", "data", "maxHeap", "->", "size", "\"", "\\n", "\u5806\u9876\u5143\u7d20\u4e3a %d", "\\n", "\"", "peek", "\"", "\\n", "\u5143\u7d20 7 \u5165\u5806\u540e", "\\n", "\"", "maxHeap", "->", "data", "maxHeap", "->", "size", "(", "maxHeap", ")", "\"", "\\n", "\u5806\u9876\u5143\u7d20 %d \u51fa\u5806\u540e", "\\n", "\"", "maxHeap", "->", "data", "maxHeap", "->", "size", "\"", "\\n", "\u5806\u5143\u7d20\u6570\u91cf\u4e3a %d", "\\n", "\"", "size", "\"", "\\n", "\u5806\u662f\u5426\u4e3a\u7a7a %d", "\\n", "\"", "isEmpty", "(", "nums", ",", ")", "(", "maxHeap", ")", "(", "maxHeap", ")", "(", "maxHeap", ")", "/", "sizeof", "sizeof", "(", "nums", ")", "(", ")", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 269, "ast_depth": 14, "n_identifiers": 16, "vocab_size": 56}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_heap/top_k.c#16-19", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_heap/top_k.c", "language": "Java"}, "method": {"name": "popMinHeap", "qualified_name": "codes.c.chapter_heap.top_k.c#popMinHeap", "start_line": 16, "end_line": 19, "signature": "popMinHeap(MaxHeap *maxHeap)", "original_code": "int popMinHeap(MaxHeap *maxHeap) {\n    // \u5143\u7d20\u53d6\u53cd\n    return -pop(maxHeap);\n}", "doc_comment": "/* \u5143\u7d20\u51fa\u5806 */"}, "code_tokens": ["popMinHeap", "int", "(", ")", "{", "// \u5143\u7d20\u53d6\u53cd", "}", "MaxHeap", "maxHeap", "return", ";", "*", "-", "pop", "(", "maxHeap", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 28, "ast_depth": 8, "n_identifiers": 3, "vocab_size": 14}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_heap/top_k.c#22-25", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_heap/top_k.c", "language": "Java"}, "method": {"name": "peekMinHeap", "qualified_name": "codes.c.chapter_heap.top_k.c#peekMinHeap", "start_line": 22, "end_line": 25, "signature": "peekMinHeap(MaxHeap *maxHeap)", "original_code": "int peekMinHeap(MaxHeap *maxHeap) {\n    // \u5143\u7d20\u53d6\u53cd\n    return -peek(maxHeap);\n}", "doc_comment": "/* \u8bbf\u95ee\u5806\u9876\u5143\u7d20 */"}, "code_tokens": ["peekMinHeap", "int", "(", ")", "{", "// \u5143\u7d20\u53d6\u53cd", "}", "MaxHeap", "maxHeap", "return", ";", "*", "-", "peek", "(", "maxHeap", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 28, "ast_depth": 8, "n_identifiers": 3, "vocab_size": 14}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_heap/top_k.c#28-35", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_heap/top_k.c", "language": "Java"}, "method": {"name": "getMinHeap", "qualified_name": "codes.c.chapter_heap.top_k.c#getMinHeap", "start_line": 28, "end_line": 35, "signature": "getMinHeap(MaxHeap *maxHeap)", "original_code": "int *getMinHeap(MaxHeap *maxHeap) {\n    // \u5c06\u5806\u4e2d\u6240\u6709\u5143\u7d20\u53d6\u53cd\u5e76\u5b58\u5165 res \u6570\u7ec4\n    int *res = (int *)malloc(maxHeap->size * sizeof(int));\n    for (int i = 0; i < maxHeap->size; i++) {\n        res[i] = -maxHeap->data[i];\n    }\n    return res;\n}", "doc_comment": "/* \u53d6\u51fa\u5806\u4e2d\u5143\u7d20 */"}, "code_tokens": ["getMinHeap", "int", "*", "(", ")", "{", "// \u5c06\u5806\u4e2d\u6240\u6709\u5143\u7d20\u53d6\u53cd\u5e76\u5b58\u5165 res \u6570\u7ec4", "}", "MaxHeap", "maxHeap", ";", "for", "(", ";", ")", "return", "res", ";", "*", "int", "*", "res", "=", ";", "i", "<", "i", "++", "{", "}", "(", ")", "int", "i", "=", "0", "maxHeap", "->", "size", ";", "int", "*", "malloc", "=", "(", ")", "res", "[", "i", "]", "-", "maxHeap", "->", "maxHeap", "->", "size", "*", "data", "[", "i", "]", "sizeof", "(", ")", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 103, "ast_depth": 15, "n_identifiers": 8, "vocab_size": 27}}
