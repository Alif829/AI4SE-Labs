{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/java/utils/PrintUtil.java#103-107", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/java/utils/PrintUtil.java", "language": "Java"}, "method": {"name": "printHashMap", "qualified_name": "codes.java.utils.PrintUtil#printHashMap", "start_line": 103, "end_line": 107, "signature": "printHashMap(Map<K, V> map)", "original_code": "public static <K, V> void printHashMap(Map<K, V> map) {\n        for (Map.Entry<K, V> kv : map.entrySet()) {\n            System.out.println(kv.getKey() + \" -> \" + kv.getValue());\n        }\n    }", "doc_comment": "/* Print a hash map */"}, "code_tokens": ["void", "printHashMap", "public", "static", "<", ",", ">", "(", ")", "{", "}", "K", "V", "map", "for", "(", "kv", ":", ")", "Map", "map", ".", "entrySet", "{", "}", "<", "K", ",", "V", ">", "Map", ".", "Entry", "<", "K", ",", "V", ">", "(", ")", ";", ".", "println", "System", ".", "out", "(", ")", "+", "+", "kv", ".", "getValue", "kv", ".", "getKey", "\"", " -> ", "\"", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 92, "ast_depth": 13, "n_identifiers": 9, "vocab_size": 30}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/java/utils/PrintUtil.java#110-117", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/java/utils/PrintUtil.java", "language": "Java"}, "method": {"name": "printHeap", "qualified_name": "codes.java.utils.PrintUtil#printHeap", "start_line": 110, "end_line": 117, "signature": "printHeap(Queue<Integer> queue)", "original_code": "public static void printHeap(Queue<Integer> queue) {\n        List<Integer> list = new ArrayList<>(queue);\n        System.out.print(\"\u5806\u7684\u6570\u7ec4\u8868\u793a\uff1a\");\n        System.out.println(list);\n        System.out.println(\"\u5806\u7684\u6811\u72b6\u8868\u793a\uff1a\");\n        TreeNode root = TreeNode.listToTree(list);\n        printTree(root);\n    }", "doc_comment": "/* Print a heap (PriorityQueue) */"}, "code_tokens": ["void", "printHeap", "public", "static", "(", ")", "{", "}", "queue", ";", ";", ";", ";", "TreeNode", ";", ";", "Queue", "List", "list", "=", ".", "print", ".", "println", ".", "println", "root", "=", "printTree", "<", "Integer", ">", "<", "Integer", ">", "new", "System", ".", "out", "(", ")", "System", ".", "out", "(", "list", ")", "System", ".", "out", "(", ")", "TreeNode", ".", "listToTree", "(", "root", ")", "ArrayList", "(", "queue", ")", "\"", "\u5806\u7684\u6570\u7ec4\u8868\u793a\uff1a", "\"", "\"", "\u5806\u7684\u6811\u72b6\u8868\u793a\uff1a", "\"", "(", "list", ")", "<", ">"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 110, "ast_depth": 9, "n_identifiers": 11, "vocab_size": 31}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/javascript/modules/PrintUtil.js#13-20", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/javascript/modules/PrintUtil.js", "language": "Java"}, "method": {"name": "printLinkedList", "qualified_name": "codes.javascript.modules.PrintUtil.js#printLinkedList", "start_line": 13, "end_line": 20, "signature": "printLinkedList(head)", "original_code": "function printLinkedList(head) {\n    let list = [];\n    while (head !== null) {\n        list.push(head.val.toString());\n        head = head.next;\n    }\n    console.log(list.join(' -> '));\n}", "doc_comment": "/**\n * Print a linked list\n * @param head\n */"}, "code_tokens": ["function", "printLinkedList", "(", ")", "{", "}", "head", "let", ";", "while", ";", "list", "=", "(", ")", "{", "}", "console", ".", "log", "", "head", "!=", "null", ";", ";", "(", ")", "[", "]", "=", "list", ".", "push", "head", "=", "list", ".", "join", "(", ")", "head", ".", "next", "(", "' -> '", ")", ".", "toString", "head", ".", "val", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 83, "ast_depth": 11, "n_identifiers": 10, "vocab_size": 26}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/javascript/modules/PrintUtil.js#22-25", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/javascript/modules/PrintUtil.js", "language": "Java"}, "method": {"name": "Trunk", "qualified_name": "codes.javascript.modules.PrintUtil.js#Trunk", "start_line": 22, "end_line": 25, "signature": "Trunk(prev, str)", "original_code": "function Trunk(prev, str) {\n    this.prev = prev;\n    this.str = str;\n}", "doc_comment": ""}, "code_tokens": ["function", "Trunk", "(", ")", "{", "}", "prev", "str", ";", ";", ",", "=", "prev", "=", "str", "this", ".", "prev", "this", ".", "str"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 33, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 13}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/javascript/modules/PrintUtil.js#33-35", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/javascript/modules/PrintUtil.js", "language": "Java"}, "method": {"name": "printTree", "qualified_name": "codes.javascript.modules.PrintUtil.js#printTree", "start_line": 33, "end_line": 35, "signature": "printTree(root)", "original_code": "function printTree(root) {\n    printTree(root, null, false);\n}", "doc_comment": "/**\n * The interface of the tree printer\n * This tree printer is borrowed from TECHIE DELIGHT\n * https://www.techiedelight.com/c-program-print-binary-tree/\n * @param root\n */"}, "code_tokens": ["function", "printTree", "(", ")", "{", "}", "root", ";", "printTree", "(", "root", ",", "null", ",", "false", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 24, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 11}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/javascript/modules/PrintUtil.js#43-72", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/javascript/modules/PrintUtil.js", "language": "Java"}, "method": {"name": "printTree", "qualified_name": "codes.javascript.modules.PrintUtil.js#printTree", "start_line": 43, "end_line": 72, "signature": "printTree(root, prev, isRight)", "original_code": "function printTree(root, prev, isRight) {\n    if (root === null) {\n        return;\n    }\n\n    let prev_str = '    ';\n    let trunk = new Trunk(prev, prev_str);\n\n    printTree(root.right, trunk, true);\n\n    if (!prev) {\n        trunk.str = '\u2014\u2014\u2014';\n    } else if (isRight) {\n        trunk.str = '/\u2014\u2014\u2014';\n        prev_str = '   |';\n    } else {\n        trunk.str = '\\\\\u2014\u2014\u2014';\n        prev.str = prev_str;\n    }\n\n    showTrunks(trunk);\n    console.log(' ' + root.val);\n\n    if (prev) {\n        prev.str = prev_str;\n    }\n    trunk.str = '   |';\n\n    printTree(root.left, trunk, false);\n}", "doc_comment": "/**\n * Print a binary tree\n * @param root\n * @param prev\n * @param isRight\n */"}, "code_tokens": ["function", "printTree", "(", ",", ")", "{", "}", "root", "prev", "isRight", "", "if", "let", ";", "let", ";", ";", "if", "else", ";", ";", "if", ";", ";", ",", "(", ")", "{", "}", "prev_str", "=", "'    '", "trunk", "=", "printTree", "(", ")", "{", "}", "if", "else", "showTrunks", "console", ".", "log", "(", "prev", ")", "{", "}", "=", "'   |'", "printTree", "root", "==", "null", "return", ";", "new", "Trunk", "(", ",", "trunk", ",", "true", ")", "!", "prev", ";", "(", "isRight", ")", "{", "}", "{", "}", "(", "trunk", ")", "(", ")", ";", "trunk", ".", "str", "(", ",", "trunk", ",", "false", ")", "=", "(", "prev", ",", "prev_str", ")", "root", ".", "right", "=", "'\u2014\u2014\u2014'", ";", ";", ";", ";", "' '", "+", "=", "prev_str", "root", ".", "left", "trunk", ".", "str", "=", "'/\u2014\u2014\u2014'", "prev_str", "=", "'   |'", "=", "'\\\\\u2014\u2014\u2014'", "=", "prev_str", "root", ".", "val", "prev", ".", "str", "trunk", ".", "str", "trunk", ".", "str", "prev", ".", "str"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 206, "ast_depth": 10, "n_identifiers": 14, "vocab_size": 41}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/javascript/modules/PrintUtil.js#78-85", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/javascript/modules/PrintUtil.js", "language": "Java"}, "method": {"name": "showTrunks", "qualified_name": "codes.javascript.modules.PrintUtil.js#showTrunks", "start_line": 78, "end_line": 85, "signature": "showTrunks(p)", "original_code": "function showTrunks(p) {\n    if (!p) {\n        return;\n    }\n\n    showTrunks(p.prev);\n    process.stdout.write(p.str);\n}", "doc_comment": "/**\n * Helper function to print branches of the binary tree\n * @param p\n */"}, "code_tokens": ["function", "showTrunks", "(", ")", "{", "}", "p", "if", ";", ";", "(", ")", "{", "}", "showTrunks", ".", "write", "!", "p", "return", ";", "(", ")", "process", ".", "stdout", "(", ")", "p", ".", "prev", "p", ".", "str"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 53, "ast_depth": 8, "n_identifiers": 7, "vocab_size": 17}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/javascript/modules/PrintUtil.js#91-96", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/javascript/modules/PrintUtil.js", "language": "Java"}, "method": {"name": "printHeap", "qualified_name": "codes.javascript.modules.PrintUtil.js#printHeap", "start_line": 91, "end_line": 96, "signature": "printHeap(arr)", "original_code": "function printHeap(arr) {\n    console.log('\u5806\u7684\u6570\u7ec4\u8868\u793a\uff1a');\n    console.log(arr);\n    console.log('\u5806\u7684\u6811\u72b6\u8868\u793a\uff1a');\n    printTree(arrToTree(arr));\n}", "doc_comment": "/**\n * Print a heap\n * @param arr\n */"}, "code_tokens": ["function", "printHeap", "(", ")", "{", "}", "arr", ";", ";", ";", ";", "console", ".", "log", "console", ".", "log", "console", ".", "log", "printTree", "(", "'\u5806\u7684\u6570\u7ec4\u8868\u793a\uff1a'", ")", "(", "arr", ")", "(", "'\u5806\u7684\u6811\u72b6\u8868\u793a\uff1a'", ")", "(", ")", "arrToTree", "(", "arr", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 55, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 15}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/rust/include/print_util.rs#87-92", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/rust/include/print_util.rs", "language": "Java"}, "method": {"name": "show_trunks", "qualified_name": "codes.rust.include.print_util.rs#show_trunks", "start_line": 87, "end_line": 92, "signature": "show_trunks(trunk: Option<&Trunk>)", "original_code": "fn show_trunks(trunk: Option<&Trunk>) {\n    if let Some(trunk) = trunk {\n        show_trunks(trunk.prev);\n        print!(\"{}\", trunk.str.get());\n    }\n}", "doc_comment": ""}, "code_tokens": ["fn", "show_trunks", "(", ")", "{", "}", "trunk", "Trunk", ">", "if", "let", "=", "trunk", "{", "}", ":", "Option", "<", "&", "Some", ";", ";", "(", "trunk", ")", "show_trunks", "print", "(", ")", "!", "(", ",", ")", "trunk", ".", "prev", "\"", "{}", "\"", ".", "get", "trunk", ".", "str", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 69, "ast_depth": 10, "n_identifiers": 10, "vocab_size": 27}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/swift/utils/PrintUtil.swift#9-16", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/swift/utils/PrintUtil.swift", "language": "Java"}, "method": {"name": "init", "qualified_name": "codes.swift.utils.PrintUtil.swift#init", "start_line": 9, "end_line": 16, "signature": "init(prev: Trunk?, str: String)", "original_code": "var prev: Trunk?\n        var str: String\n\n        init(prev: Trunk?, str: String) {\n            self.prev = prev\n            self.str = str\n        }\n    }", "doc_comment": ""}, "code_tokens": ["var", "", "str", ":", "{", "}", "prev", ":", "Trunk", "?", "var", "String", "", "(", ",", ")", "}", "init", "prev", "Trunk", "?", "str", "String", "=", ":", ":", "self", ".", "prev", "prev", "=", "str", "self", ".", "str"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 56, "ast_depth": 7, "n_identifiers": 7, "vocab_size": 17}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/swift/utils/PrintUtil.swift#18-35", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/swift/utils/PrintUtil.swift", "language": "Java"}, "method": {"name": "printLinkedList", "qualified_name": "codes.swift.utils.PrintUtil.swift#printLinkedList", "start_line": 18, "end_line": 35, "signature": "printLinkedList(head: ListNode)", "original_code": "public static func printLinkedList(head: ListNode) {\n        var head: ListNode? = head\n        var list: [String] = []\n        while head != nil {\n            list.append(\"\\(head!.val)\")\n            head = head?.next\n        }\n        print(list.joined(separator: \" -> \"))\n    }\n\n    public static func printTree(root: TreeNode?) {\n        printTree(root: root, prev: nil, isRight: false)\n    }\n\n    private static func printTree(root: TreeNode?, prev: Trunk?, isRight: Bool) {\n        if root == nil {\n            return\n        }", "doc_comment": ""}, "code_tokens": ["func", "printLinkedList", "public", "static", "(", ")", "{", "}", "head", "ListNode", "var", "root", "==", "nil", "{", "return", ":", "head", ":", ",", ")", "}", "private", "static", "func", "printTree", "(", "root", ":", "TreeNode", "?", ",", "prev", ":", "Trunk", "?", ",", "isRight", ":", ")", "{", "if", "ListNode", "?", "=", "{", "?", ")", "{", "printTree", "(", "root", ":", "root", "prev", ":", "nil", ",", "isRight", ":", "false", "Bool", "while", "head", "=", "head", "!=", "nil", "list", ".", "append", "head", "?", ":", "TreeNode", "head", "=", "[", "]", "(", ")", ".", "next", "}", "}", "public", "static", "func", "printTree", "var", "list", ":", "[", "]", "\"", "\\(", "head!.val)", "\"", "print", "(", "root", "", "String", "(", ")", "list", ".", "joined", "(", ")", "separator", ":", "\"", " -> ", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 155, "ast_depth": 15, "n_identifiers": 21, "vocab_size": 45}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/swift/utils/PrintUtil.swift#63-76", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/swift/utils/PrintUtil.swift", "language": "Java"}, "method": {"name": "showTrunks", "qualified_name": "codes.swift.utils.PrintUtil.swift#showTrunks", "start_line": 63, "end_line": 76, "signature": "showTrunks(p: Trunk?)", "original_code": "private static func showTrunks(p: Trunk?) {\n        if p == nil {\n            return\n        }\n\n        showTrunks(p: p?.prev)\n        print(p!.str, terminator: \"\")\n    }\n\n    public static func printHashMap<K, V>(map: [K: V]) {\n        for (key, value) in map {\n            print(\"\\(key) -> \\(value)\")\n        }\n    }", "doc_comment": ""}, "code_tokens": ["func", "showTrunks", "private", "static", "(", ")", "{", "}", "p", "Trunk", "?", "if", "{", "}", "func", ",", ",", ")", "in", "map", "{", "}", ":", "p", "==", "nil", "return", "", "public", "static", "printHashMap", "<", "K", "V", ">", "(", "map", ":", "[", "K", ":", "V", "]", ")", "{", "for", "(", "key", "value", "", "}", "showTrunks", "print", "(", ")", "(", ")", "p", ":", "p", "?", ":", "\"", "\\(", "key) -> ", "\\(", "value)", "\"", ".", "prev", ")", "print", "\"", "\"", "(", ",", "terminator", "", "p", ".", "str", "!"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 117, "ast_depth": 13, "n_identifiers": 15, "vocab_size": 41}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/typescript/modules/PrintUtil.ts#14-21", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/typescript/modules/PrintUtil.ts", "language": "Java"}, "method": {"name": "printLinkedList", "qualified_name": "codes.typescript.modules.PrintUtil.ts#printLinkedList", "start_line": 14, "end_line": 21, "signature": "printLinkedList(head: ListNode | null)", "original_code": "function printLinkedList(head: ListNode | null): void {\n    const list: string[] = [];\n    while (head !== null) {\n        list.push(head.val.toString());\n        head = head.next;\n    }\n    console.log(list.join(' -> '));\n}", "doc_comment": "/**\n * Print a linked list\n * @param head\n */"}, "code_tokens": ["function", "printLinkedList", "(", ")", ":", "void", "{", "}", "head", "ListNode", "|", "null", ";", "while", ";", ":", "const", "", "(", ")", "{", "}", "console", ".", "log", "list", ":", "string", "=", "[", "]", "head", "!=", "null", ";", ";", "(", ")", "[", "]", "=", "list", ".", "push", "head", "=", "list", ".", "join", "(", ")", "head", ".", "next", "(", "' -> '", ")", ".", "toString", "head", ".", "val", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 97, "ast_depth": 11, "n_identifiers": 13, "vocab_size": 31}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/typescript/modules/PrintUtil.ts#39-41", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/typescript/modules/PrintUtil.ts", "language": "Java"}, "method": {"name": "printTree", "qualified_name": "codes.typescript.modules.PrintUtil.ts#printTree", "start_line": 39, "end_line": 41, "signature": "printTree(root: TreeNode | null)", "original_code": "function printTree(root: TreeNode | null) {\n    printTreeHelper(root, null, false);\n}", "doc_comment": "/**\n * The interface of the tree printer\n * This tree printer is borrowed from TECHIE DELIGHT\n * https://www.techiedelight.com/c-program-print-binary-tree/\n * @param root\n */"}, "code_tokens": ["function", "printTree", "(", ")", "{", "}", "root", "TreeNode", "|", "null", ";", ":", "printTreeHelper", "(", "root", ",", "null", ",", "false", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 30, "ast_depth": 7, "n_identifiers": 4, "vocab_size": 15}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/typescript/modules/PrintUtil.ts#49-82", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/typescript/modules/PrintUtil.ts", "language": "Java"}, "method": {"name": "printTreeHelper", "qualified_name": "codes.typescript.modules.PrintUtil.ts#printTreeHelper", "start_line": 49, "end_line": 82, "signature": "printTreeHelper(\n    root: TreeNode | null,\n    prev: Trunk | null,\n    isRight: boolean\n)", "original_code": "function printTreeHelper(\n    root: TreeNode | null,\n    prev: Trunk | null,\n    isRight: boolean\n) {\n    if (root === null) {\n        return;\n    }\n\n    let prev_str = '    ';\n    const trunk = new Trunk(prev, prev_str);\n\n    printTreeHelper(root.right, trunk, true);\n\n    if (prev === null) {\n        trunk.str = '\u2014\u2014\u2014';\n    } else if (isRight) {\n        trunk.str = '/\u2014\u2014\u2014';\n        prev_str = '   |';\n    } else {\n        trunk.str = '\\\\\u2014\u2014\u2014';\n        prev.str = prev_str;\n    }\n\n    showTrunks(trunk);\n    console.log(' ' + root.val);\n\n    if (prev) {\n        prev.str = prev_str;\n    }\n    trunk.str = '   |';\n\n    printTreeHelper(root.left, trunk, false);\n}", "doc_comment": "/**\n * Print a binary tree\n * @param root\n * @param prev\n * @param isRight\n */"}, "code_tokens": ["function", "printTreeHelper", "(", ")", "{", "}", "root", "TreeNode", "|", "null", ",", ",", "boolean", "if", "let", ";", "const", ";", ";", "if", "else", ";", ";", "if", ";", ";", ":", "prev", "Trunk", "|", "null", "isRight", ":", "(", ")", "{", "}", "prev_str", "=", "'    '", "trunk", "=", "printTreeHelper", "(", ")", "{", "}", "if", "else", "showTrunks", "console", ".", "log", "(", "prev", ")", "{", "}", "=", "'   |'", "printTreeHelper", ":", "root", "==", "null", "return", ";", "new", "Trunk", "(", ",", "trunk", ",", "true", ")", "prev", "==", "null", ";", "(", "isRight", ")", "{", "}", "{", "}", "(", "trunk", ")", "(", ")", ";", "trunk", ".", "str", "(", ",", "trunk", ",", "false", ")", "=", "(", "prev", ",", "prev_str", ")", "root", ".", "right", "=", "=", "'\u2014\u2014\u2014'", ";", ";", ";", ";", "' '", "+", "=", "prev_str", "root", ".", "left", "trunk", ".", "str", "=", "'/\u2014\u2014\u2014'", "prev_str", "=", "'   |'", "=", "'\\\\\u2014\u2014\u2014'", "=", "prev_str", "root", ".", "val", "prev", ".", "str", "trunk", ".", "str", "trunk", ".", "str", "prev", ".", "str"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 222, "ast_depth": 10, "n_identifiers": 15, "vocab_size": 44}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/typescript/modules/PrintUtil.ts#88-98", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/typescript/modules/PrintUtil.ts", "language": "Java"}, "method": {"name": "showTrunks", "qualified_name": "codes.typescript.modules.PrintUtil.ts#showTrunks", "start_line": 88, "end_line": 98, "signature": "showTrunks(p: Trunk | null)", "original_code": "function showTrunks(p: Trunk | null) {\n    if (p === null) {\n        return;\n    }\n\n    showTrunks(p.prev);\n    process.stdout.write(p.str);\n    // ts-node to execute, we need to install type definitions for node\n    // solve: npm i --save-dev @types/node\n    // restart the vscode\n}", "doc_comment": "/**\n * Helper function to print branches of the binary tree\n * @param p\n */"}, "code_tokens": ["function", "showTrunks", "(", ")", "{", "// ts-node to execute, we need to install type definitions for node", "// solve: npm i --save-dev @types/node", "// restart the vscode", "}", "p", "Trunk", "|", "null", "if", ";", ";", ":", "(", ")", "{", "}", "showTrunks", ".", "write", "p", "==", "null", "return", ";", "(", ")", "process", ".", "stdout", "(", ")", "=", "p", ".", "prev", "p", ".", "str"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 65, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 25}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/typescript/modules/PrintUtil.ts#104-110", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/typescript/modules/PrintUtil.ts", "language": "Java"}, "method": {"name": "printHeap", "qualified_name": "codes.typescript.modules.PrintUtil.ts#printHeap", "start_line": 104, "end_line": 110, "signature": "printHeap(arr: number[])", "original_code": "function printHeap(arr: number[]): void {\n    console.log('\u5806\u7684\u6570\u7ec4\u8868\u793a\uff1a');\n    console.log(arr);\n    console.log('\u5806\u7684\u6811\u72b6\u8868\u793a\uff1a');\n    const root = arrToTree(arr);\n    printTree(root);\n}", "doc_comment": "/**\n * Print a heap\n * @param arr\n */"}, "code_tokens": ["function", "printHeap", "(", ")", ":", "void", "{", "}", "arr", "number", ";", ";", ";", "const", ";", ";", ":", "[", "]", "console", ".", "log", "console", ".", "log", "console", ".", "log", "root", "=", "printTree", "(", "'\u5806\u7684\u6570\u7ec4\u8868\u793a\uff1a'", ")", "(", "arr", ")", "(", "'\u5806\u7684\u6811\u72b6\u8868\u793a\uff1a'", ")", "arrToTree", "(", "root", ")", "(", "arr", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 71, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 23}}
{"dataset_split": "train", "example_id": "hello-algo@5f3ad1e:codes/c/chapter_dynamic_programming/coin_change.c#10-12", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5f3ad1ed3d4396019f9fd343587a5fb39ca4e700", "license": null}, "file": {"path": "codes/c/chapter_dynamic_programming/coin_change.c", "language": "Java"}, "method": {"name": "min", "qualified_name": "codes.c.chapter_dynamic_programming.coin_change.c#min", "start_line": 10, "end_line": 12, "signature": "min(int a, int b)", "original_code": "int min(int a, int b) {\n    return a < b ? a : b;\n}", "doc_comment": "/* \u6c42\u6700\u5c0f\u503c */"}, "code_tokens": ["min", "int", "(", ",", ")", "{", "}", "a", "b", "return", ";", "int", "int", "?", "a", ":", "b", "a", "<", "b"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 32, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 14}}
{"dataset_split": "train", "example_id": "hello-algo@5f3ad1e:codes/c/chapter_dynamic_programming/coin_change.c#15-38", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5f3ad1ed3d4396019f9fd343587a5fb39ca4e700", "license": null}, "file": {"path": "codes/c/chapter_dynamic_programming/coin_change.c", "language": "Java"}, "method": {"name": "coinChangeDP", "qualified_name": "codes.c.chapter_dynamic_programming.coin_change.c#coinChangeDP", "start_line": 15, "end_line": 38, "signature": "coinChangeDP(int coins[], int amt, int coinsSize)", "original_code": "int coinChangeDP(int coins[], int amt, int coinsSize) {\n    int n = coinsSize;\n    int MAX = amt + 1;\n    // \u521d\u59cb\u5316 dp \u8868\n    int dp[n + 1][amt + 1];\n    memset(dp, 0, sizeof(dp));\n    // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c\u9996\u5217\n    for (int a = 1; a <= amt; a++) {\n        dp[0][a] = MAX;\n    }\n    // \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\u5217\n    for (int i = 1; i <= n; i++) {\n        for (int a = 1; a <= amt; a++) {\n            if (coins[i - 1] > a) {\n                // \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i\n                dp[i][a] = dp[i - 1][a];\n            } else {\n                // \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5c0f\u503c\n                dp[i][a] = min(dp[i - 1][a], dp[i][a - coins[i - 1]] + 1);\n            }\n        }\n    }\n    return dp[n][amt] != MAX ? dp[n][amt] : -1;\n}", "doc_comment": "/* \u96f6\u94b1\u5151\u6362\uff1a\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["coinChangeDP", "int", "(", ",", ",", ")", "{", "// \u521d\u59cb\u5316 dp \u8868", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c\u9996\u5217", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\u5217", "}", "coins", "amt", "coinsSize", ";", ";", ";", ";", "for", "(", ";", ")", "for", "(", ";", ")", "return", ";", "int", "[", "]", "int", "int", "int", "n", "=", "coinsSize", "int", "MAX", "=", "int", "dp", "memset", ";", "a", "<=", "amt", "a", "++", "{", "}", ";", "i", "<=", "n", "i", "++", "{", "}", "?", ":", "amt", "+", "1", "[", "]", "[", "]", "(", "dp", ",", "0", ",", ")", "int", "a", "=", "1", ";", "int", "i", "=", "1", "for", "(", ";", ")", "!=", "MAX", "[", "amt", "]", "-", "1", "n", "+", "1", "amt", "+", "1", "sizeof", "=", "MAX", ";", "a", "<=", "amt", "a", "++", "{", "}", "[", "amt", "]", "dp", "[", "n", "]", "(", "dp", ")", "[", "a", "]", "int", "a", "=", "1", "if", "else", "dp", "[", "n", "]", "dp", "[", "0", "]", "(", ")", "{", "// \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i", "}", "{", "// \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5c0f\u503c", "}", ">", "a", ";", ";", "coins", "[", "]", "=", "=", "i", "-", "1", "[", "a", "]", "[", "a", "]", "[", "a", "]", "min", "dp", "[", "i", "]", "dp", "[", "]", "dp", "[", "i", "]", "(", ",", ")", "i", "-", "1", "[", "a", "]", "+", "1", "dp", "[", "]", "[", "]", "i", "-", "1", "dp", "[", "i", "]", "a", "-", "coins", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 302, "ast_depth": 19, "n_identifiers": 12, "vocab_size": 41}}
{"dataset_split": "train", "example_id": "hello-algo@5f3ad1e:codes/c/chapter_dynamic_programming/coin_change.c#41-61", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5f3ad1ed3d4396019f9fd343587a5fb39ca4e700", "license": null}, "file": {"path": "codes/c/chapter_dynamic_programming/coin_change.c", "language": "Java"}, "method": {"name": "coinChangeDPComp", "qualified_name": "codes.c.chapter_dynamic_programming.coin_change.c#coinChangeDPComp", "start_line": 41, "end_line": 61, "signature": "coinChangeDPComp(int coins[], int amt, int coinsSize)", "original_code": "int coinChangeDPComp(int coins[], int amt, int coinsSize) {\n    int n = coinsSize;\n    int MAX = amt + 1;\n    // \u521d\u59cb\u5316 dp \u8868\n    int dp[amt + 1];\n    memset(dp, MAX, sizeof(dp));\n    dp[0] = 0;\n    // \u72b6\u6001\u8f6c\u79fb\n    for (int i = 1; i <= n; i++) {\n        for (int a = 1; a <= amt; a++) {\n            if (coins[i - 1] > a) {\n                // \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i\n                dp[a] = dp[a];\n            } else {\n                // \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5c0f\u503c\n                dp[a] = min(dp[a], dp[a - coins[i - 1]] + 1);\n            }\n        }\n    }\n    return dp[amt] != MAX ? dp[amt] : -1;\n}", "doc_comment": "/* \u96f6\u94b1\u5151\u6362\uff1a\u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["coinChangeDPComp", "int", "(", ",", ",", ")", "{", "// \u521d\u59cb\u5316 dp \u8868", "// \u72b6\u6001\u8f6c\u79fb", "}", "coins", "amt", "coinsSize", ";", ";", ";", ";", ";", "for", "(", ";", ")", "return", ";", "int", "[", "]", "int", "int", "int", "n", "=", "coinsSize", "int", "MAX", "=", "int", "dp", "memset", "=", "0", ";", "i", "<=", "n", "i", "++", "{", "}", "?", ":", "amt", "+", "1", "[", "]", "(", "dp", ",", "MAX", ",", ")", "dp", "[", "0", "]", "int", "i", "=", "1", "for", "(", ";", ")", "!=", "MAX", "dp", "[", "amt", "]", "-", "1", "amt", "+", "1", "sizeof", ";", "a", "<=", "amt", "a", "++", "{", "}", "dp", "[", "amt", "]", "(", "dp", ")", "int", "a", "=", "1", "if", "else", "(", ")", "{", "// \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i", "}", "{", "// \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5c0f\u503c", "}", ">", "a", ";", ";", "coins", "[", "]", "=", "=", "i", "-", "1", "dp", "[", "a", "]", "dp", "[", "a", "]", "dp", "[", "a", "]", "min", "(", ",", ")", "dp", "[", "a", "]", "+", "1", "dp", "[", "]", "a", "-", "coins", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 234, "ast_depth": 19, "n_identifiers": 12, "vocab_size": 40}}
{"dataset_split": "train", "example_id": "hello-algo@5f3ad1e:codes/c/chapter_dynamic_programming/coin_change.c#64-78", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5f3ad1ed3d4396019f9fd343587a5fb39ca4e700", "license": null}, "file": {"path": "codes/c/chapter_dynamic_programming/coin_change.c", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.c.chapter_dynamic_programming.coin_change.c#main", "start_line": 64, "end_line": 78, "signature": "main()", "original_code": "int main() {\n    int coins[] = {1, 2, 5};\n    int coinsSize = sizeof(coins) / sizeof(coins[0]);\n    int amt = 4;\n\n    // \u52a8\u6001\u89c4\u5212\n    int res = coinChangeDP(coins, amt, coinsSize);\n    printf(\"\u51d1\u5230\u76ee\u6807\u91d1\u989d\u6240\u9700\u7684\u6700\u5c11\u786c\u5e01\u6570\u91cf\u4e3a %d\\n\", res);\n\n    // \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212\n    res = coinChangeDPComp(coins, amt, coinsSize);\n    printf(\"\u51d1\u5230\u76ee\u6807\u91d1\u989d\u6240\u9700\u7684\u6700\u5c11\u786c\u5e01\u6570\u91cf\u4e3a %d\\n\", res);\n\n    return 0;\n}", "doc_comment": "/* Driver code */"}, "code_tokens": ["main", "int", "(", ")", "{", "// \u52a8\u6001\u89c4\u5212", "// \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212", "}", ";", ";", ";", ";", ";", ";", ";", "return", "0", ";", "int", "coins", "=", "int", "coinsSize", "=", "int", "amt", "=", "4", "int", "res", "=", "printf", "res", "=", "printf", "[", "]", "{", "1", ",", "2", ",", "5", "}", "/", "coinChangeDP", "(", ",", "res", ")", "coinChangeDPComp", "(", ",", "res", ")", "sizeof", "sizeof", "(", "coins", ",", "amt", ",", "coinsSize", ")", "\"", "\u51d1\u5230\u76ee\u6807\u91d1\u989d\u6240\u9700\u7684\u6700\u5c11\u786c\u5e01\u6570\u91cf\u4e3a %d", "\\n", "\"", "(", "coins", ",", "amt", ",", "coinsSize", ")", "\"", "\u51d1\u5230\u76ee\u6807\u91d1\u989d\u6240\u9700\u7684\u6700\u5c11\u786c\u5e01\u6570\u91cf\u4e3a %d", "\\n", "\"", "(", "coins", ")", "(", ")", "coins", "[", "0", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 128, "ast_depth": 10, "n_identifiers": 9, "vocab_size": 31}}
{"dataset_split": "train", "example_id": "hello-algo@5f3ad1e:codes/c/chapter_dynamic_programming/coin_change_ii.c#10-32", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5f3ad1ed3d4396019f9fd343587a5fb39ca4e700", "license": null}, "file": {"path": "codes/c/chapter_dynamic_programming/coin_change_ii.c", "language": "Java"}, "method": {"name": "coinChangeIIDP", "qualified_name": "codes.c.chapter_dynamic_programming.coin_change_ii.c#coinChangeIIDP", "start_line": 10, "end_line": 32, "signature": "coinChangeIIDP(int coins[], int amt, int coinsSize)", "original_code": "int coinChangeIIDP(int coins[], int amt, int coinsSize) {\n    int n = coinsSize;\n    // \u521d\u59cb\u5316 dp \u8868\n    int dp[n + 1][amt + 1];\n    memset(dp, 0, sizeof(dp));\n    // \u521d\u59cb\u5316\u9996\u5217\n    for (int i = 0; i <= n; i++) {\n        dp[i][0] = 1;\n    }\n    // \u72b6\u6001\u8f6c\u79fb\n    for (int i = 1; i <= n; i++) {\n        for (int a = 1; a <= amt; a++) {\n            if (coins[i - 1] > a) {\n                // \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i\n                dp[i][a] = dp[i - 1][a];\n            } else {\n                // \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u4e4b\u548c\n                dp[i][a] = dp[i - 1][a] + dp[i][a - coins[i - 1]];\n            }\n        }\n    }\n    return dp[n][amt];\n}", "doc_comment": "/* \u96f6\u94b1\u5151\u6362 II\uff1a\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["coinChangeIIDP", "int", "(", ",", ",", ")", "{", "// \u521d\u59cb\u5316 dp \u8868", "// \u521d\u59cb\u5316\u9996\u5217", "// \u72b6\u6001\u8f6c\u79fb", "}", "coins", "amt", "coinsSize", ";", ";", ";", "for", "(", ";", ")", "for", "(", ";", ")", "return", ";", "int", "[", "]", "int", "int", "int", "n", "=", "coinsSize", "int", "dp", "memset", ";", "i", "<=", "n", "i", "++", "{", "}", ";", "i", "<=", "n", "i", "++", "{", "}", "[", "amt", "]", "[", "]", "[", "]", "(", "dp", ",", "0", ",", ")", "int", "i", "=", "0", ";", "int", "i", "=", "1", "for", "(", ";", ")", "dp", "[", "n", "]", "n", "+", "1", "amt", "+", "1", "sizeof", "=", "1", ";", "a", "<=", "amt", "a", "++", "{", "}", "(", "dp", ")", "[", "0", "]", "int", "a", "=", "1", "if", "else", "dp", "[", "i", "]", "(", ")", "{", "// \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i", "}", "{", "// \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u4e4b\u548c", "}", ">", "a", ";", ";", "coins", "[", "]", "=", "=", "i", "-", "1", "[", "a", "]", "[", "a", "]", "[", "a", "]", "+", "dp", "[", "i", "]", "dp", "[", "]", "dp", "[", "i", "]", "[", "a", "]", "[", "]", "i", "-", "1", "dp", "[", "]", "dp", "[", "i", "]", "a", "-", "i", "-", "1", "coins", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 266, "ast_depth": 17, "n_identifiers": 10, "vocab_size": 36}}
{"dataset_split": "train", "example_id": "hello-algo@5f3ad1e:codes/c/chapter_dynamic_programming/coin_change_ii.c#35-54", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5f3ad1ed3d4396019f9fd343587a5fb39ca4e700", "license": null}, "file": {"path": "codes/c/chapter_dynamic_programming/coin_change_ii.c", "language": "Java"}, "method": {"name": "coinChangeIIDPComp", "qualified_name": "codes.c.chapter_dynamic_programming.coin_change_ii.c#coinChangeIIDPComp", "start_line": 35, "end_line": 54, "signature": "coinChangeIIDPComp(int coins[], int amt, int coinsSize)", "original_code": "int coinChangeIIDPComp(int coins[], int amt, int coinsSize) {\n    int n = coinsSize;\n    // \u521d\u59cb\u5316 dp \u8868\n    int dp[amt + 1];\n    memset(dp, 0, sizeof(dp));\n    dp[0] = 1;\n    // \u72b6\u6001\u8f6c\u79fb\n    for (int i = 1; i <= n; i++) {\n        for (int a = 1; a <= amt; a++) {\n            if (coins[i - 1] > a) {\n                // \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i\n                dp[a] = dp[a];\n            } else {\n                // \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u4e4b\u548c\n                dp[a] = dp[a] + dp[a - coins[i - 1]];\n            }\n        }\n    }\n    return dp[amt];\n}", "doc_comment": "/* \u96f6\u94b1\u5151\u6362 II\uff1a\u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["coinChangeIIDPComp", "int", "(", ",", ",", ")", "{", "// \u521d\u59cb\u5316 dp \u8868", "// \u72b6\u6001\u8f6c\u79fb", "}", "coins", "amt", "coinsSize", ";", ";", ";", ";", "for", "(", ";", ")", "return", ";", "int", "[", "]", "int", "int", "int", "n", "=", "coinsSize", "int", "dp", "memset", "=", "1", ";", "i", "<=", "n", "i", "++", "{", "}", "dp", "[", "amt", "]", "[", "]", "(", "dp", ",", "0", ",", ")", "dp", "[", "0", "]", "int", "i", "=", "1", "for", "(", ";", ")", "amt", "+", "1", "sizeof", ";", "a", "<=", "amt", "a", "++", "{", "}", "(", "dp", ")", "int", "a", "=", "1", "if", "else", "(", ")", "{", "// \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i", "}", "{", "// \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u4e4b\u548c", "}", ">", "a", ";", ";", "coins", "[", "]", "=", "=", "i", "-", "1", "dp", "[", "a", "]", "dp", "[", "a", "]", "dp", "[", "a", "]", "+", "dp", "[", "a", "]", "dp", "[", "]", "a", "-", "coins", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 202, "ast_depth": 17, "n_identifiers": 10, "vocab_size": 35}}
{"dataset_split": "train", "example_id": "hello-algo@5f3ad1e:codes/c/chapter_dynamic_programming/coin_change_ii.c#57-71", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5f3ad1ed3d4396019f9fd343587a5fb39ca4e700", "license": null}, "file": {"path": "codes/c/chapter_dynamic_programming/coin_change_ii.c", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.c.chapter_dynamic_programming.coin_change_ii.c#main", "start_line": 57, "end_line": 71, "signature": "main()", "original_code": "int main() {\n    int coins[] = {1, 2, 5};\n    int coinsSize = sizeof(coins) / sizeof(coins[0]);\n    int amt = 5;\n\n    // \u52a8\u6001\u89c4\u5212\n    int res = coinChangeIIDP(coins, amt, coinsSize);\n    printf(\"\u51d1\u51fa\u76ee\u6807\u91d1\u989d\u7684\u786c\u5e01\u7ec4\u5408\u6570\u91cf\u4e3a %d\\n\", res);\n\n    // \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212\n    res = coinChangeIIDPComp(coins, amt, coinsSize);\n    printf(\"\u51d1\u51fa\u76ee\u6807\u91d1\u989d\u7684\u786c\u5e01\u7ec4\u5408\u6570\u91cf\u4e3a %d\\n\", res);\n\n    return 0;\n}", "doc_comment": "/* Driver code */"}, "code_tokens": ["main", "int", "(", ")", "{", "// \u52a8\u6001\u89c4\u5212", "// \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212", "}", ";", ";", ";", ";", ";", ";", ";", "return", "0", ";", "int", "coins", "=", "int", "coinsSize", "=", "int", "amt", "=", "5", "int", "res", "=", "printf", "res", "=", "printf", "[", "]", "{", "1", ",", "2", ",", "5", "}", "/", "coinChangeIIDP", "(", ",", "res", ")", "coinChangeIIDPComp", "(", ",", "res", ")", "sizeof", "sizeof", "(", "coins", ",", "amt", ",", "coinsSize", ")", "\"", "\u51d1\u51fa\u76ee\u6807\u91d1\u989d\u7684\u786c\u5e01\u7ec4\u5408\u6570\u91cf\u4e3a %d", "\\n", "\"", "(", "coins", ",", "amt", ",", "coinsSize", ")", "\"", "\u51d1\u51fa\u76ee\u6807\u91d1\u989d\u7684\u786c\u5e01\u7ec4\u5408\u6570\u91cf\u4e3a %d", "\\n", "\"", "(", "coins", ")", "(", ")", "coins", "[", "0", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 128, "ast_depth": 10, "n_identifiers": 9, "vocab_size": 30}}
{"dataset_split": "train", "example_id": "hello-algo@5f3ad1e:codes/cpp/chapter_dynamic_programming/coin_change.cpp#10-32", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5f3ad1ed3d4396019f9fd343587a5fb39ca4e700", "license": null}, "file": {"path": "codes/cpp/chapter_dynamic_programming/coin_change.cpp", "language": "Java"}, "method": {"name": "coinChangeDP", "qualified_name": "codes.cpp.chapter_dynamic_programming.coin_change.cpp#coinChangeDP", "start_line": 10, "end_line": 32, "signature": "coinChangeDP(vector<int> &coins, int amt)", "original_code": "int coinChangeDP(vector<int> &coins, int amt) {\n    int n = coins.size();\n    int MAX = amt + 1;\n    // \u521d\u59cb\u5316 dp \u8868\n    vector<vector<int>> dp(n + 1, vector<int>(amt + 1, 0));\n    // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c\u9996\u5217\n    for (int a = 1; a <= amt; a++) {\n        dp[0][a] = MAX;\n    }\n    // \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\u5217\n    for (int i = 1; i <= n; i++) {\n        for (int a = 1; a <= amt; a++) {\n            if (coins[i - 1] > a) {\n                // \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i\n                dp[i][a] = dp[i - 1][a];\n            } else {\n                // \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5c0f\u503c\n                dp[i][a] = min(dp[i - 1][a], dp[i][a - coins[i - 1]] + 1);\n            }\n        }\n    }\n    return dp[n][amt] != MAX ? dp[n][amt] : -1;\n}", "doc_comment": "/* \u96f6\u94b1\u5151\u6362\uff1a\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["coinChangeDP", "int", "(", ",", ")", "{", "// \u521d\u59cb\u5316 dp \u8868", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c\u9996\u5217", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\u5217", "}", "coins", "amt", ";", ";", "", ";", "for", "(", ";", ")", "for", "(", ";", ")", "return", ";", "vector", "&", "int", "int", "n", "=", "int", "MAX", "=", "vector", "dp", "(", ")", ";", "a", "<=", "amt", "a", "++", "{", "}", ";", "i", "<=", "n", "i", "++", "{", "}", "?", ":", "<", ">", "coins", ".", "size", "amt", "+", "1", "<", ">", ",", "(", ")", "int", "a", "=", "1", ";", "int", "i", "=", "1", "for", "(", ";", ")", "!=", "MAX", "[", "amt", "]", "-", "1", "int", "(", ")", "vector", "n", "+", "1", "vector", "amt", "+", "1", ",", "0", "=", "MAX", ";", "a", "<=", "amt", "a", "++", "{", "}", "[", "amt", "]", "dp", "[", "n", "]", "<", ">", "<", ">", "[", "a", "]", "int", "a", "=", "1", "if", "else", "dp", "[", "n", "]", "int", "int", "dp", "[", "0", "]", "(", ")", "{", "// \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i", "}", "{", "// \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5c0f\u503c", "}", ">", "a", ";", ";", "coins", "[", "]", "=", "=", "i", "-", "1", "[", "a", "]", "[", "a", "]", "[", "a", "]", "min", "dp", "[", "i", "]", "dp", "[", "]", "dp", "[", "i", "]", "(", ",", ")", "i", "-", "1", "[", "a", "]", "+", "1", "dp", "[", "]", "[", "]", "i", "-", "1", "dp", "[", "i", "]", "a", "-", "coins", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 315, "ast_depth": 19, "n_identifiers": 10, "vocab_size": 44}}
{"dataset_split": "train", "example_id": "hello-algo@5f3ad1e:codes/cpp/chapter_dynamic_programming/coin_change.cpp#35-54", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5f3ad1ed3d4396019f9fd343587a5fb39ca4e700", "license": null}, "file": {"path": "codes/cpp/chapter_dynamic_programming/coin_change.cpp", "language": "Java"}, "method": {"name": "coinChangeDPComp", "qualified_name": "codes.cpp.chapter_dynamic_programming.coin_change.cpp#coinChangeDPComp", "start_line": 35, "end_line": 54, "signature": "coinChangeDPComp(vector<int> &coins, int amt)", "original_code": "int coinChangeDPComp(vector<int> &coins, int amt) {\n    int n = coins.size();\n    int MAX = amt + 1;\n    // \u521d\u59cb\u5316 dp \u8868\n    vector<int> dp(amt + 1, MAX);\n    dp[0] = 0;\n    // \u72b6\u6001\u8f6c\u79fb\n    for (int i = 1; i <= n; i++) {\n        for (int a = 1; a <= amt; a++) {\n            if (coins[i - 1] > a) {\n                // \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i\n                dp[a] = dp[a];\n            } else {\n                // \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5c0f\u503c\n                dp[a] = min(dp[a], dp[a - coins[i - 1]] + 1);\n            }\n        }\n    }\n    return dp[amt] != MAX ? dp[amt] : -1;\n}", "doc_comment": "/* \u96f6\u94b1\u5151\u6362\uff1a\u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["coinChangeDPComp", "int", "(", ",", ")", "{", "// \u521d\u59cb\u5316 dp \u8868", "// \u72b6\u6001\u8f6c\u79fb", "}", "coins", "amt", ";", ";", "", ";", ";", "for", "(", ";", ")", "return", ";", "vector", "&", "int", "int", "n", "=", "int", "MAX", "=", "vector", "dp", "(", ")", "=", "0", ";", "i", "<=", "n", "i", "++", "{", "}", "?", ":", "<", ">", "coins", ".", "size", "amt", "+", "1", "<", ">", "amt", "+", "1", ",", "MAX", "dp", "[", "0", "]", "int", "i", "=", "1", "for", "(", ";", ")", "!=", "MAX", "dp", "[", "amt", "]", "-", "1", "int", "(", ")", "int", ";", "a", "<=", "amt", "a", "++", "{", "}", "dp", "[", "amt", "]", "int", "a", "=", "1", "if", "else", "(", ")", "{", "// \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i", "}", "{", "// \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5c0f\u503c", "}", ">", "a", ";", ";", "coins", "[", "]", "=", "=", "i", "-", "1", "dp", "[", "a", "]", "dp", "[", "a", "]", "dp", "[", "a", "]", "min", "(", ",", ")", "dp", "[", "a", "]", "+", "1", "dp", "[", "]", "a", "-", "coins", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 232, "ast_depth": 19, "n_identifiers": 10, "vocab_size": 43}}
{"dataset_split": "train", "example_id": "hello-algo@5f3ad1e:codes/cpp/chapter_dynamic_programming/coin_change.cpp#57-70", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5f3ad1ed3d4396019f9fd343587a5fb39ca4e700", "license": null}, "file": {"path": "codes/cpp/chapter_dynamic_programming/coin_change.cpp", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.cpp.chapter_dynamic_programming.coin_change.cpp#main", "start_line": 57, "end_line": 70, "signature": "main()", "original_code": "int main() {\n    vector<int> coins = {1, 2, 5};\n    int amt = 4;\n\n    // \u52a8\u6001\u89c4\u5212\n    int res = coinChangeDP(coins, amt);\n    cout << \"\u51d1\u5230\u76ee\u6807\u91d1\u989d\u6240\u9700\u7684\u6700\u5c11\u786c\u5e01\u6570\u91cf\u4e3a \" << res << endl;\n\n    // \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212\n    res = coinChangeDPComp(coins, amt);\n    cout << \"\u51d1\u5230\u76ee\u6807\u91d1\u989d\u6240\u9700\u7684\u6700\u5c11\u786c\u5e01\u6570\u91cf\u4e3a \" << res << endl;\n\n    return 0;\n}", "doc_comment": "/* Driver code */"}, "code_tokens": ["main", "int", "(", ")", "{", "// \u52a8\u6001\u89c4\u5212", "// \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212", "}", ";", ";", ";", ";", ";", ";", "return", "0", ";", "vector", "coins", "=", "int", "amt", "=", "4", "int", "res", "=", "<<", "endl", "res", "=", "<<", "endl", "<", ">", "{", "1", ",", "2", ",", "5", "}", "coinChangeDP", "<<", "res", "coinChangeDPComp", "<<", "res", "int", "(", "coins", ",", "amt", ")", "cout", "<<", "(", "coins", ",", "amt", ")", "cout", "<<", "\"", "\u51d1\u5230\u76ee\u6807\u91d1\u989d\u6240\u9700\u7684\u6700\u5c11\u786c\u5e01\u6570\u91cf\u4e3a ", "\"", "\"", "\u51d1\u5230\u76ee\u6807\u91d1\u989d\u6240\u9700\u7684\u6700\u5c11\u786c\u5e01\u6570\u91cf\u4e3a ", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 103, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 30}}
{"dataset_split": "train", "example_id": "hello-algo@5f3ad1e:codes/cpp/chapter_dynamic_programming/coin_change_ii.cpp#10-31", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5f3ad1ed3d4396019f9fd343587a5fb39ca4e700", "license": null}, "file": {"path": "codes/cpp/chapter_dynamic_programming/coin_change_ii.cpp", "language": "Java"}, "method": {"name": "coinChangeIIDP", "qualified_name": "codes.cpp.chapter_dynamic_programming.coin_change_ii.cpp#coinChangeIIDP", "start_line": 10, "end_line": 31, "signature": "coinChangeIIDP(vector<int> &coins, int amt)", "original_code": "int coinChangeIIDP(vector<int> &coins, int amt) {\n    int n = coins.size();\n    // \u521d\u59cb\u5316 dp \u8868\n    vector<vector<int>> dp(n + 1, vector<int>(amt + 1, 0));\n    // \u521d\u59cb\u5316\u9996\u5217\n    for (int i = 0; i <= n; i++) {\n        dp[i][0] = 1;\n    }\n    // \u72b6\u6001\u8f6c\u79fb\n    for (int i = 1; i <= n; i++) {\n        for (int a = 1; a <= amt; a++) {\n            if (coins[i - 1] > a) {\n                // \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i\n                dp[i][a] = dp[i - 1][a];\n            } else {\n                // \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u4e4b\u548c\n                dp[i][a] = dp[i - 1][a] + dp[i][a - coins[i - 1]];\n            }\n        }\n    }\n    return dp[n][amt];\n}", "doc_comment": "/* \u96f6\u94b1\u5151\u6362 II\uff1a\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["coinChangeIIDP", "int", "(", ",", ")", "{", "// \u521d\u59cb\u5316 dp \u8868", "// \u521d\u59cb\u5316\u9996\u5217", "// \u72b6\u6001\u8f6c\u79fb", "}", "coins", "amt", ";", "", ";", "for", "(", ";", ")", "for", "(", ";", ")", "return", ";", "vector", "&", "int", "int", "n", "=", "vector", "dp", "(", ")", ";", "i", "<=", "n", "i", "++", "{", "}", ";", "i", "<=", "n", "i", "++", "{", "}", "[", "amt", "]", "<", ">", "coins", ".", "size", "<", ">", ",", "(", ")", "int", "i", "=", "0", ";", "int", "i", "=", "1", "for", "(", ";", ")", "dp", "[", "n", "]", "int", "(", ")", "vector", "n", "+", "1", "vector", "amt", "+", "1", ",", "0", "=", "1", ";", "a", "<=", "amt", "a", "++", "{", "}", "<", ">", "<", ">", "[", "0", "]", "int", "a", "=", "1", "if", "else", "int", "int", "dp", "[", "i", "]", "(", ")", "{", "// \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i", "}", "{", "// \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u4e4b\u548c", "}", ">", "a", ";", ";", "coins", "[", "]", "=", "=", "i", "-", "1", "[", "a", "]", "[", "a", "]", "[", "a", "]", "+", "dp", "[", "i", "]", "dp", "[", "]", "dp", "[", "i", "]", "[", "a", "]", "[", "]", "i", "-", "1", "dp", "[", "]", "dp", "[", "i", "]", "a", "-", "i", "-", "1", "coins", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 279, "ast_depth": 17, "n_identifiers": 8, "vocab_size": 39}}
{"dataset_split": "train", "example_id": "hello-algo@5f3ad1e:codes/cpp/chapter_dynamic_programming/coin_change_ii.cpp#34-52", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5f3ad1ed3d4396019f9fd343587a5fb39ca4e700", "license": null}, "file": {"path": "codes/cpp/chapter_dynamic_programming/coin_change_ii.cpp", "language": "Java"}, "method": {"name": "coinChangeIIDPComp", "qualified_name": "codes.cpp.chapter_dynamic_programming.coin_change_ii.cpp#coinChangeIIDPComp", "start_line": 34, "end_line": 52, "signature": "coinChangeIIDPComp(vector<int> &coins, int amt)", "original_code": "int coinChangeIIDPComp(vector<int> &coins, int amt) {\n    int n = coins.size();\n    // \u521d\u59cb\u5316 dp \u8868\n    vector<int> dp(amt + 1, 0);\n    dp[0] = 1;\n    // \u72b6\u6001\u8f6c\u79fb\n    for (int i = 1; i <= n; i++) {\n        for (int a = 1; a <= amt; a++) {\n            if (coins[i - 1] > a) {\n                // \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i\n                dp[a] = dp[a];\n            } else {\n                // \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u4e4b\u548c\n                dp[a] = dp[a] + dp[a - coins[i - 1]];\n            }\n        }\n    }\n    return dp[amt];\n}", "doc_comment": "/* \u96f6\u94b1\u5151\u6362 II\uff1a\u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["coinChangeIIDPComp", "int", "(", ",", ")", "{", "// \u521d\u59cb\u5316 dp \u8868", "// \u72b6\u6001\u8f6c\u79fb", "}", "coins", "amt", ";", "", ";", ";", "for", "(", ";", ")", "return", ";", "vector", "&", "int", "int", "n", "=", "vector", "dp", "(", ")", "=", "1", ";", "i", "<=", "n", "i", "++", "{", "}", "dp", "[", "amt", "]", "<", ">", "coins", ".", "size", "<", ">", "amt", "+", "1", ",", "0", "dp", "[", "0", "]", "int", "i", "=", "1", "for", "(", ";", ")", "int", "(", ")", "int", ";", "a", "<=", "amt", "a", "++", "{", "}", "int", "a", "=", "1", "if", "else", "(", ")", "{", "// \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i", "}", "{", "// \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u4e4b\u548c", "}", ">", "a", ";", ";", "coins", "[", "]", "=", "=", "i", "-", "1", "dp", "[", "a", "]", "dp", "[", "a", "]", "dp", "[", "a", "]", "+", "dp", "[", "a", "]", "dp", "[", "]", "a", "-", "coins", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 200, "ast_depth": 17, "n_identifiers": 8, "vocab_size": 38}}
{"dataset_split": "train", "example_id": "hello-algo@5f3ad1e:codes/cpp/chapter_dynamic_programming/coin_change_ii.cpp#55-68", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5f3ad1ed3d4396019f9fd343587a5fb39ca4e700", "license": null}, "file": {"path": "codes/cpp/chapter_dynamic_programming/coin_change_ii.cpp", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.cpp.chapter_dynamic_programming.coin_change_ii.cpp#main", "start_line": 55, "end_line": 68, "signature": "main()", "original_code": "int main() {\n    vector<int> coins = {1, 2, 5};\n    int amt = 5;\n\n    // \u52a8\u6001\u89c4\u5212\n    int res = coinChangeIIDP(coins, amt);\n    cout << \"\u51d1\u51fa\u76ee\u6807\u91d1\u989d\u7684\u786c\u5e01\u7ec4\u5408\u6570\u91cf\u4e3a \" << res << endl;\n\n    // \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212\n    res = coinChangeIIDPComp(coins, amt);\n    cout << \"\u51d1\u51fa\u76ee\u6807\u91d1\u989d\u7684\u786c\u5e01\u7ec4\u5408\u6570\u91cf\u4e3a \" << res << endl;\n\n    return 0;\n}", "doc_comment": "/* Driver code */"}, "code_tokens": ["main", "int", "(", ")", "{", "// \u52a8\u6001\u89c4\u5212", "// \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212", "}", ";", ";", ";", ";", ";", ";", "return", "0", ";", "vector", "coins", "=", "int", "amt", "=", "5", "int", "res", "=", "<<", "endl", "res", "=", "<<", "endl", "<", ">", "{", "1", ",", "2", ",", "5", "}", "coinChangeIIDP", "<<", "res", "coinChangeIIDPComp", "<<", "res", "int", "(", "coins", ",", "amt", ")", "cout", "<<", "(", "coins", ",", "amt", ")", "cout", "<<", "\"", "\u51d1\u51fa\u76ee\u6807\u91d1\u989d\u7684\u786c\u5e01\u7ec4\u5408\u6570\u91cf\u4e3a ", "\"", "\"", "\u51d1\u51fa\u76ee\u6807\u91d1\u989d\u7684\u786c\u5e01\u7ec4\u5408\u6570\u91cf\u4e3a ", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 103, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 29}}
{"dataset_split": "train", "example_id": "hello-algo@5f3ad1e:codes/csharp/chapter_dynamic_programming/coin_change.cs#11-33", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5f3ad1ed3d4396019f9fd343587a5fb39ca4e700", "license": null}, "file": {"path": "codes/csharp/chapter_dynamic_programming/coin_change.cs", "language": "Java"}, "method": {"name": "CoinChangeDP", "qualified_name": "codes.csharp.chapter_dynamic_programming.coin_change.cs#CoinChangeDP", "start_line": 11, "end_line": 33, "signature": "CoinChangeDP(int[] coins, int amt)", "original_code": "public int CoinChangeDP(int[] coins, int amt) {\n        int n = coins.Length;\n        int MAX = amt + 1;\n        // \u521d\u59cb\u5316 dp \u8868\n        int[,] dp = new int[n + 1, amt + 1];\n        // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c\u9996\u5217\n        for (int a = 1; a <= amt; a++) {\n            dp[0, a] = MAX;\n        }\n        // \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\u5217\n        for (int i = 1; i <= n; i++) {\n            for (int a = 1; a <= amt; a++) {\n                if (coins[i - 1] > a) {\n                    // \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i\n                    dp[i, a] = dp[i - 1, a];\n                } else {\n                    // \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5c0f\u503c\n                    dp[i, a] = Math.Min(dp[i - 1, a], dp[i, a - coins[i - 1]] + 1);\n                }\n            }\n        }\n        return dp[n, amt] != MAX ? dp[n, amt] : -1;\n    }", "doc_comment": "/* \u96f6\u94b1\u5151\u6362\uff1a\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["CoinChangeDP", "public", "int", "(", ",", ")", "{", "// \u521d\u59cb\u5316 dp \u8868", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c\u9996\u5217", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\u5217", "}", "coins", "amt", ";", ";", ";", "for", "(", ";", ")", "for", "(", ";", ")", "return", ";", "int", "int", "n", "=", "int", "MAX", "=", "dp", "=", ";", "a", "<=", "amt", "a", "++", "{", "}", ";", "i", "<=", "n", "i", "++", "{", "}", "?", ":", "int", "[", "]", "coins", ".", "Length", "amt", "+", "1", "int", "[", "]", "new", "int", "a", "=", "1", ";", "int", "i", "=", "1", "for", "(", ";", ")", "!=", "MAX", "dp", "[", "amt", "]", "-", "1", ",", "int", "[", "]", "=", "MAX", ";", "a", "<=", "amt", "a", "++", "{", "}", "dp", "[", "amt", "]", "n", ",", ",", "amt", "+", "1", "dp", "[", "a", "]", "int", "a", "=", "1", "if", "else", "n", ",", "n", "+", "1", "0", ",", "(", ")", "{", "// \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i", "}", "{", "// \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5c0f\u503c", "}", ">", "a", ";", ";", "coins", "[", "]", "=", "=", "i", "-", "1", "dp", "[", "a", "]", "dp", "[", "]", "dp", "[", "a", "]", "Math", ".", "Min", "i", ",", "i", "-", "1", ",", "a", "i", ",", "(", ",", ")", "dp", "[", "a", "]", "+", "1", ",", "dp", "[", "]", "i", "-", "1", "i", ",", "a", "-", "coins", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 291, "ast_depth": 19, "n_identifiers": 11, "vocab_size": 43}}
{"dataset_split": "train", "example_id": "hello-algo@5f3ad1e:codes/csharp/chapter_dynamic_programming/coin_change.cs#36-56", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5f3ad1ed3d4396019f9fd343587a5fb39ca4e700", "license": null}, "file": {"path": "codes/csharp/chapter_dynamic_programming/coin_change.cs", "language": "Java"}, "method": {"name": "CoinChangeDPComp", "qualified_name": "codes.csharp.chapter_dynamic_programming.coin_change.cs#CoinChangeDPComp", "start_line": 36, "end_line": 56, "signature": "CoinChangeDPComp(int[] coins, int amt)", "original_code": "public int CoinChangeDPComp(int[] coins, int amt) {\n        int n = coins.Length;\n        int MAX = amt + 1;\n        // \u521d\u59cb\u5316 dp \u8868\n        int[] dp = new int[amt + 1];\n        Array.Fill(dp, MAX);\n        dp[0] = 0;\n        // \u72b6\u6001\u8f6c\u79fb\n        for (int i = 1; i <= n; i++) {\n            for (int a = 1; a <= amt; a++) {\n                if (coins[i - 1] > a) {\n                    // \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i\n                    dp[a] = dp[a];\n                } else {\n                    // \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5c0f\u503c\n                    dp[a] = Math.Min(dp[a], dp[a - coins[i - 1]] + 1);\n                }\n            }\n        }\n        return dp[amt] != MAX ? dp[amt] : -1;\n    }", "doc_comment": "/* \u96f6\u94b1\u5151\u6362\uff1a\u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["CoinChangeDPComp", "public", "int", "(", ",", ")", "{", "// \u521d\u59cb\u5316 dp \u8868", "// \u72b6\u6001\u8f6c\u79fb", "}", "coins", "amt", ";", ";", ";", ";", ";", "for", "(", ";", ")", "return", ";", "int", "int", "n", "=", "int", "MAX", "=", "dp", "=", "Array", ".", "Fill", "=", "0", ";", "i", "<=", "n", "i", "++", "{", "}", "?", ":", "int", "[", "]", "coins", ".", "Length", "amt", "+", "1", "int", "[", "]", "new", "(", "dp", ",", "MAX", ")", "dp", "[", "0", "]", "int", "i", "=", "1", "for", "(", ";", ")", "!=", "MAX", "dp", "[", "amt", "]", "-", "1", "int", "[", "]", ";", "a", "<=", "amt", "a", "++", "{", "}", "dp", "[", "amt", "]", "amt", "+", "1", "int", "a", "=", "1", "if", "else", "(", ")", "{", "// \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i", "}", "{", "// \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5c0f\u503c", "}", ">", "a", ";", ";", "coins", "[", "]", "=", "=", "i", "-", "1", "dp", "[", "a", "]", "dp", "[", "a", "]", "dp", "[", "a", "]", "Math", ".", "Min", "(", ",", ")", "dp", "[", "a", "]", "+", "1", "dp", "[", "]", "a", "-", "coins", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 241, "ast_depth": 19, "n_identifiers": 13, "vocab_size": 44}}
{"dataset_split": "train", "example_id": "hello-algo@5f3ad1e:codes/csharp/chapter_dynamic_programming/coin_change.cs#59-70", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5f3ad1ed3d4396019f9fd343587a5fb39ca4e700", "license": null}, "file": {"path": "codes/csharp/chapter_dynamic_programming/coin_change.cs", "language": "Java"}, "method": {"name": "Test", "qualified_name": "codes.csharp.chapter_dynamic_programming.coin_change.cs#Test", "start_line": 59, "end_line": 70, "signature": "Test()", "original_code": "public void Test() {\n        int[] coins = { 1, 2, 5 };\n        int amt = 4;\n\n        // \u52a8\u6001\u89c4\u5212\n        int res = CoinChangeDP(coins, amt);\n        Console.WriteLine(\"\u51d1\u5230\u76ee\u6807\u91d1\u989d\u6240\u9700\u7684\u6700\u5c11\u786c\u5e01\u6570\u91cf\u4e3a \" + res);\n\n        // \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212\n        res = CoinChangeDPComp(coins, amt);\n        Console.WriteLine(\"\u51d1\u5230\u76ee\u6807\u91d1\u989d\u6240\u9700\u7684\u6700\u5c11\u786c\u5e01\u6570\u91cf\u4e3a \" + res);\n    }", "doc_comment": ""}, "code_tokens": ["void", "Test", "public", "(", ")", "{", "// \u52a8\u6001\u89c4\u5212", "// \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212", "}", ";", ";", ";", ";", ";", ";", "coins", "=", "int", "amt", "=", "4", "int", "res", "=", "Console", ".", "WriteLine", "res", "=", "Console", ".", "WriteLine", "int", "[", "]", "{", "1", ",", "2", ",", "5", "}", "CoinChangeDP", "(", ")", "CoinChangeDPComp", "(", ")", "(", "coins", ",", "amt", ")", "+", "res", "(", "coins", ",", "amt", ")", "+", "res", "\"", "\u51d1\u5230\u76ee\u6807\u91d1\u989d\u6240\u9700\u7684\u6700\u5c11\u786c\u5e01\u6570\u91cf\u4e3a ", "\"", "\"", "\u51d1\u5230\u76ee\u6807\u91d1\u989d\u6240\u9700\u7684\u6700\u5c11\u786c\u5e01\u6570\u91cf\u4e3a ", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 101, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 30}}
{"dataset_split": "train", "example_id": "hello-algo@5f3ad1e:codes/csharp/chapter_dynamic_programming/coin_change_ii.cs#11-32", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5f3ad1ed3d4396019f9fd343587a5fb39ca4e700", "license": null}, "file": {"path": "codes/csharp/chapter_dynamic_programming/coin_change_ii.cs", "language": "Java"}, "method": {"name": "CoinChangeIIDP", "qualified_name": "codes.csharp.chapter_dynamic_programming.coin_change_ii.cs#CoinChangeIIDP", "start_line": 11, "end_line": 32, "signature": "CoinChangeIIDP(int[] coins, int amt)", "original_code": "public int CoinChangeIIDP(int[] coins, int amt) {\n        int n = coins.Length;\n        // \u521d\u59cb\u5316 dp \u8868\n        int[,] dp = new int[n + 1, amt + 1];\n        // \u521d\u59cb\u5316\u9996\u5217\n        for (int i = 0; i <= n; i++) {\n            dp[i, 0] = 1;\n        }\n        // \u72b6\u6001\u8f6c\u79fb\n        for (int i = 1; i <= n; i++) {\n            for (int a = 1; a <= amt; a++) {\n                if (coins[i - 1] > a) {\n                    // \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i\n                    dp[i, a] = dp[i - 1, a];\n                } else {\n                    // \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u4e4b\u548c\n                    dp[i, a] = dp[i - 1, a] + dp[i, a - coins[i - 1]];\n                }\n            }\n        }\n        return dp[n, amt];\n    }", "doc_comment": "/* \u96f6\u94b1\u5151\u6362 II\uff1a\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["CoinChangeIIDP", "public", "int", "(", ",", ")", "{", "// \u521d\u59cb\u5316 dp \u8868", "// \u521d\u59cb\u5316\u9996\u5217", "// \u72b6\u6001\u8f6c\u79fb", "}", "coins", "amt", ";", ";", "for", "(", ";", ")", "for", "(", ";", ")", "return", ";", "int", "int", "n", "=", "dp", "=", ";", "i", "<=", "n", "i", "++", "{", "}", ";", "i", "<=", "n", "i", "++", "{", "}", "dp", "[", "amt", "]", "int", "[", "]", "coins", ".", "Length", "int", "[", "]", "new", "int", "i", "=", "0", ";", "int", "i", "=", "1", "for", "(", ";", ")", "n", ",", ",", "int", "[", "]", "=", "1", ";", "a", "<=", "amt", "a", "++", "{", "}", ",", "amt", "+", "1", "dp", "[", "0", "]", "int", "a", "=", "1", "if", "else", "n", "+", "1", "i", ",", "(", ")", "{", "// \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i", "}", "{", "// \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u4e4b\u548c", "}", ">", "a", ";", ";", "coins", "[", "]", "=", "=", "i", "-", "1", "dp", "[", "a", "]", "dp", "[", "]", "dp", "[", "a", "]", "+", "i", ",", "i", "-", "1", ",", "a", "i", ",", "dp", "[", "]", "dp", "[", "]", "i", "-", "1", ",", "a", "i", ",", "a", "-", "coins", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 254, "ast_depth": 17, "n_identifiers": 8, "vocab_size": 37}}
{"dataset_split": "train", "example_id": "hello-algo@5f3ad1e:codes/csharp/chapter_dynamic_programming/coin_change_ii.cs#35-53", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5f3ad1ed3d4396019f9fd343587a5fb39ca4e700", "license": null}, "file": {"path": "codes/csharp/chapter_dynamic_programming/coin_change_ii.cs", "language": "Java"}, "method": {"name": "CoinChangeIIDPComp", "qualified_name": "codes.csharp.chapter_dynamic_programming.coin_change_ii.cs#CoinChangeIIDPComp", "start_line": 35, "end_line": 53, "signature": "CoinChangeIIDPComp(int[] coins, int amt)", "original_code": "public int CoinChangeIIDPComp(int[] coins, int amt) {\n        int n = coins.Length;\n        // \u521d\u59cb\u5316 dp \u8868\n        int[] dp = new int[amt + 1];\n        dp[0] = 1;\n        // \u72b6\u6001\u8f6c\u79fb\n        for (int i = 1; i <= n; i++) {\n            for (int a = 1; a <= amt; a++) {\n                if (coins[i - 1] > a) {\n                    // \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i\n                    dp[a] = dp[a];\n                } else {\n                    // \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u4e4b\u548c\n                    dp[a] = dp[a] + dp[a - coins[i - 1]];\n                }\n            }\n        }\n        return dp[amt];\n    }", "doc_comment": "/* \u96f6\u94b1\u5151\u6362 II\uff1a\u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["CoinChangeIIDPComp", "public", "int", "(", ",", ")", "{", "// \u521d\u59cb\u5316 dp \u8868", "// \u72b6\u6001\u8f6c\u79fb", "}", "coins", "amt", ";", ";", ";", "for", "(", ";", ")", "return", ";", "int", "int", "n", "=", "dp", "=", "=", "1", ";", "i", "<=", "n", "i", "++", "{", "}", "dp", "[", "amt", "]", "int", "[", "]", "coins", ".", "Length", "int", "[", "]", "new", "dp", "[", "0", "]", "int", "i", "=", "1", "for", "(", ";", ")", "int", "[", "]", ";", "a", "<=", "amt", "a", "++", "{", "}", "amt", "+", "1", "int", "a", "=", "1", "if", "else", "(", ")", "{", "// \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i", "}", "{", "// \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u4e4b\u548c", "}", ">", "a", ";", ";", "coins", "[", "]", "=", "=", "i", "-", "1", "dp", "[", "a", "]", "dp", "[", "a", "]", "dp", "[", "a", "]", "+", "dp", "[", "a", "]", "dp", "[", "]", "a", "-", "coins", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 195, "ast_depth": 17, "n_identifiers": 8, "vocab_size": 36}}
{"dataset_split": "train", "example_id": "hello-algo@5f3ad1e:codes/csharp/chapter_dynamic_programming/coin_change_ii.cs#56-67", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5f3ad1ed3d4396019f9fd343587a5fb39ca4e700", "license": null}, "file": {"path": "codes/csharp/chapter_dynamic_programming/coin_change_ii.cs", "language": "Java"}, "method": {"name": "Test", "qualified_name": "codes.csharp.chapter_dynamic_programming.coin_change_ii.cs#Test", "start_line": 56, "end_line": 67, "signature": "Test()", "original_code": "public void Test() {\n        int[] coins = { 1, 2, 5 };\n        int amt = 5;\n\n        // \u52a8\u6001\u89c4\u5212\n        int res = CoinChangeIIDP(coins, amt);\n        Console.WriteLine(\"\u51d1\u51fa\u76ee\u6807\u91d1\u989d\u7684\u786c\u5e01\u7ec4\u5408\u6570\u91cf\u4e3a \" + res);\n\n        // \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212\n        res = CoinChangeIIDPComp(coins, amt);\n        Console.WriteLine(\"\u51d1\u51fa\u76ee\u6807\u91d1\u989d\u7684\u786c\u5e01\u7ec4\u5408\u6570\u91cf\u4e3a \" + res);\n    }", "doc_comment": ""}, "code_tokens": ["void", "Test", "public", "(", ")", "{", "// \u52a8\u6001\u89c4\u5212", "// \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212", "}", ";", ";", ";", ";", ";", ";", "coins", "=", "int", "amt", "=", "5", "int", "res", "=", "Console", ".", "WriteLine", "res", "=", "Console", ".", "WriteLine", "int", "[", "]", "{", "1", ",", "2", ",", "5", "}", "CoinChangeIIDP", "(", ")", "CoinChangeIIDPComp", "(", ")", "(", "coins", ",", "amt", ")", "+", "res", "(", "coins", ",", "amt", ")", "+", "res", "\"", "\u51d1\u51fa\u76ee\u6807\u91d1\u989d\u7684\u786c\u5e01\u7ec4\u5408\u6570\u91cf\u4e3a ", "\"", "\"", "\u51d1\u51fa\u76ee\u6807\u91d1\u989d\u7684\u786c\u5e01\u7ec4\u5408\u6570\u91cf\u4e3a ", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 101, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 29}}
{"dataset_split": "train", "example_id": "hello-algo@5f3ad1e:codes/dart/chapter_dynamic_programming/coin_change.dart#10-32", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5f3ad1ed3d4396019f9fd343587a5fb39ca4e700", "license": null}, "file": {"path": "codes/dart/chapter_dynamic_programming/coin_change.dart", "language": "Java"}, "method": {"name": "coinChangeDP", "qualified_name": "codes.dart.chapter_dynamic_programming.coin_change.dart#coinChangeDP", "start_line": 10, "end_line": 32, "signature": "coinChangeDP(List<int> coins, int amt)", "original_code": "int coinChangeDP(List<int> coins, int amt) {\n  int n = coins.length;\n  int MAX = amt + 1;\n  // \u521d\u59cb\u5316 dp \u8868\n  List<List<int>> dp = List.generate(n + 1, (index) => List.filled(amt + 1, 0));\n  // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c\u9996\u5217\n  for (int a = 1; a <= amt; a++) {\n    dp[0][a] = MAX;\n  }\n  // \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\u5217\n  for (int i = 1; i <= n; i++) {\n    for (int a = 1; a <= amt; a++) {\n      if (coins[i - 1] > a) {\n        // \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i\n        dp[i][a] = dp[i - 1][a];\n      } else {\n        // \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5c0f\u503c\n        dp[i][a] = min(dp[i - 1][a], dp[i][a - coins[i - 1]] + 1);\n      }\n    }\n  }\n  return dp[n][amt] != MAX ? dp[n][amt] : -1;\n}", "doc_comment": "/* \u96f6\u94b1\u5151\u6362\uff1a\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["coinChangeDP", "int", "(", ",", ")", "{", "// \u521d\u59cb\u5316 dp \u8868", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c\u9996\u5217", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\u5217", "}", "coins", "amt", ";", ";", ";", "for", "(", ";", ")", "for", "(", ";", ")", "return", ";", "List", "int", "int", "n", "=", "int", "MAX", "=", "List", "dp", "=", ";", "a", "<=", "amt", "a", "++", "{", "}", ";", "i", "<=", "n", "i", "++", "{", "}", "?", ":", "<", ">", "coins", ".", "length", "amt", "+", "1", "<", ">", "List", ".", "generate", "int", "a", "=", "1", ";", "int", "i", "=", "1", "for", "(", ";", ")", "!=", "MAX", "[", "amt", "]", "-", "1", "int", "List", "(", ",", ")", "=", "MAX", ";", "a", "<=", "amt", "a", "++", "{", "}", "[", "amt", "]", "dp", "[", "n", "]", "<", ">", "n", "+", "1", "=", ">", "List", ".", "filled", "[", "a", "]", "int", "a", "=", "1", "if", "else", "dp", "[", "n", "]", "int", "(", "index", ")", "(", ",", "0", ")", "dp", "[", "0", "]", "(", ")", "{", "// \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i", "}", "{", "// \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5c0f\u503c", "}", "amt", "+", "1", ">", "a", ";", ";", "coins", "[", "]", "=", "=", "i", "-", "1", "[", "a", "]", "[", "a", "]", "[", "a", "]", "min", "dp", "[", "i", "]", "dp", "[", "]", "dp", "[", "i", "]", "(", ",", ")", "i", "-", "1", "[", "a", "]", "+", "1", "dp", "[", "]", "[", "]", "i", "-", "1", "dp", "[", "i", "]", "a", "-", "coins", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 315, "ast_depth": 19, "n_identifiers": 14, "vocab_size": 45}}
{"dataset_split": "train", "example_id": "hello-algo@5f3ad1e:codes/dart/chapter_dynamic_programming/coin_change.dart#35-54", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5f3ad1ed3d4396019f9fd343587a5fb39ca4e700", "license": null}, "file": {"path": "codes/dart/chapter_dynamic_programming/coin_change.dart", "language": "Java"}, "method": {"name": "coinChangeDPComp", "qualified_name": "codes.dart.chapter_dynamic_programming.coin_change.dart#coinChangeDPComp", "start_line": 35, "end_line": 54, "signature": "coinChangeDPComp(List<int> coins, int amt)", "original_code": "int coinChangeDPComp(List<int> coins, int amt) {\n  int n = coins.length;\n  int MAX = amt + 1;\n  // \u521d\u59cb\u5316 dp \u8868\n  List<int> dp = List.filled(amt + 1, MAX);\n  dp[0] = 0;\n  // \u72b6\u6001\u8f6c\u79fb\n  for (int i = 1; i <= n; i++) {\n    for (int a = 1; a <= amt; a++) {\n      if (coins[i - 1] > a) {\n        // \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i\n        dp[a] = dp[a];\n      } else {\n        // \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5c0f\u503c\n        dp[a] = min(dp[a], dp[a - coins[i - 1]] + 1);\n      }\n    }\n  }\n  return dp[amt] != MAX ? dp[amt] : -1;\n}", "doc_comment": "/* \u96f6\u94b1\u5151\u6362\uff1a\u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["coinChangeDPComp", "int", "(", ",", ")", "{", "// \u521d\u59cb\u5316 dp \u8868", "// \u72b6\u6001\u8f6c\u79fb", "}", "coins", "amt", ";", ";", ";", ";", "for", "(", ";", ")", "return", ";", "List", "int", "int", "n", "=", "int", "MAX", "=", "List", "dp", "=", "=", "0", ";", "i", "<=", "n", "i", "++", "{", "}", "?", ":", "<", ">", "coins", ".", "length", "amt", "+", "1", "<", ">", "List", ".", "filled", "dp", "[", "0", "]", "int", "i", "=", "1", "for", "(", ";", ")", "!=", "MAX", "dp", "[", "amt", "]", "-", "1", "int", "int", "(", ",", "MAX", ")", ";", "a", "<=", "amt", "a", "++", "{", "}", "dp", "[", "amt", "]", "amt", "+", "1", "int", "a", "=", "1", "if", "else", "(", ")", "{", "// \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i", "}", "{", "// \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5c0f\u503c", "}", ">", "a", ";", ";", "coins", "[", "]", "=", "=", "i", "-", "1", "dp", "[", "a", "]", "dp", "[", "a", "]", "dp", "[", "a", "]", "min", "(", ",", ")", "dp", "[", "a", "]", "+", "1", "dp", "[", "]", "a", "-", "coins", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 229, "ast_depth": 19, "n_identifiers": 12, "vocab_size": 42}}
{"dataset_split": "train", "example_id": "hello-algo@5f3ad1e:codes/dart/chapter_dynamic_programming/coin_change.dart#57-68", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5f3ad1ed3d4396019f9fd343587a5fb39ca4e700", "license": null}, "file": {"path": "codes/dart/chapter_dynamic_programming/coin_change.dart", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.dart.chapter_dynamic_programming.coin_change.dart#main", "start_line": 57, "end_line": 68, "signature": "main()", "original_code": "void main() {\n  List<int> coins = [1, 2, 5];\n  int amt = 4;\n\n  // \u52a8\u6001\u89c4\u5212\n  int res = coinChangeDP(coins, amt);\n  print(\"\u51d1\u5230\u76ee\u6807\u91d1\u989d\u6240\u9700\u7684\u6700\u5c11\u786c\u5e01\u6570\u91cf\u4e3a $res\");\n\n  // \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212\n  res = coinChangeDPComp(coins, amt);\n  print(\"\u51d1\u5230\u76ee\u6807\u91d1\u989d\u6240\u9700\u7684\u6700\u5c11\u786c\u5e01\u6570\u91cf\u4e3a $res\");\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["void", "main", "(", ")", "{", "// \u52a8\u6001\u89c4\u5212", "// \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212", "}", ";", ";", ";", ";", ";", ";", "List", "coins", "=", "1", ",", "2", ",", "5", "]", "int", "amt", "=", "4", "int", "res", "=", "print", "res", "=", "print", "<", ">", "[", "coinChangeDP", "(", ")", "coinChangeDPComp", "(", ")", "int", "(", "coins", ",", "amt", ")", "\"", "\u51d1\u5230\u76ee\u6807\u91d1\u989d\u6240\u9700\u7684\u6700\u5c11\u786c\u5e01\u6570\u91cf\u4e3a $res", "\"", "(", "coins", ",", "amt", ")", "\"", "\u51d1\u5230\u76ee\u6807\u91d1\u989d\u6240\u9700\u7684\u6700\u5c11\u786c\u5e01\u6570\u91cf\u4e3a $res", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 91, "ast_depth": 8, "n_identifiers": 7, "vocab_size": 29}}
{"dataset_split": "train", "example_id": "hello-algo@5f3ad1e:codes/dart/chapter_dynamic_programming/coin_change_ii.dart#8-29", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5f3ad1ed3d4396019f9fd343587a5fb39ca4e700", "license": null}, "file": {"path": "codes/dart/chapter_dynamic_programming/coin_change_ii.dart", "language": "Java"}, "method": {"name": "coinChangeIIDP", "qualified_name": "codes.dart.chapter_dynamic_programming.coin_change_ii.dart#coinChangeIIDP", "start_line": 8, "end_line": 29, "signature": "coinChangeIIDP(List<int> coins, int amt)", "original_code": "int coinChangeIIDP(List<int> coins, int amt) {\n  int n = coins.length;\n  // \u521d\u59cb\u5316 dp \u8868\n  List<List<int>> dp = List.generate(n + 1, (index) => List.filled(amt + 1, 0));\n  // \u521d\u59cb\u5316\u9996\u5217\n  for (int i = 0; i <= n; i++) {\n    dp[i][0] = 1;\n  }\n  // \u72b6\u6001\u8f6c\u79fb\n  for (int i = 1; i <= n; i++) {\n    for (int a = 1; a <= amt; a++) {\n      if (coins[i - 1] > a) {\n        // \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i\n        dp[i][a] = dp[i - 1][a];\n      } else {\n        // \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u4e4b\u548c\n        dp[i][a] = dp[i - 1][a] + dp[i][a - coins[i - 1]];\n      }\n    }\n  }\n  return dp[n][amt];\n}", "doc_comment": "/* \u96f6\u94b1\u5151\u6362 II\uff1a\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["coinChangeIIDP", "int", "(", ",", ")", "{", "// \u521d\u59cb\u5316 dp \u8868", "// \u521d\u59cb\u5316\u9996\u5217", "// \u72b6\u6001\u8f6c\u79fb", "}", "coins", "amt", ";", ";", "for", "(", ";", ")", "for", "(", ";", ")", "return", ";", "List", "int", "int", "n", "=", "List", "dp", "=", ";", "i", "<=", "n", "i", "++", "{", "}", ";", "i", "<=", "n", "i", "++", "{", "}", "[", "amt", "]", "<", ">", "coins", ".", "length", "<", ">", "List", ".", "generate", "int", "i", "=", "0", ";", "int", "i", "=", "1", "for", "(", ";", ")", "dp", "[", "n", "]", "int", "List", "(", ",", ")", "=", "1", ";", "a", "<=", "amt", "a", "++", "{", "}", "<", ">", "n", "+", "1", "=", ">", "List", ".", "filled", "[", "0", "]", "int", "a", "=", "1", "if", "else", "int", "(", "index", ")", "(", ",", "0", ")", "dp", "[", "i", "]", "(", ")", "{", "// \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i", "}", "{", "// \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u4e4b\u548c", "}", "amt", "+", "1", ">", "a", ";", ";", "coins", "[", "]", "=", "=", "i", "-", "1", "[", "a", "]", "[", "a", "]", "[", "a", "]", "+", "dp", "[", "i", "]", "dp", "[", "]", "dp", "[", "i", "]", "[", "a", "]", "[", "]", "i", "-", "1", "dp", "[", "]", "dp", "[", "i", "]", "a", "-", "i", "-", "1", "coins", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 279, "ast_depth": 17, "n_identifiers": 12, "vocab_size": 40}}
{"dataset_split": "train", "example_id": "hello-algo@5f3ad1e:codes/dart/chapter_dynamic_programming/coin_change_ii.dart#32-50", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5f3ad1ed3d4396019f9fd343587a5fb39ca4e700", "license": null}, "file": {"path": "codes/dart/chapter_dynamic_programming/coin_change_ii.dart", "language": "Java"}, "method": {"name": "coinChangeIIDPComp", "qualified_name": "codes.dart.chapter_dynamic_programming.coin_change_ii.dart#coinChangeIIDPComp", "start_line": 32, "end_line": 50, "signature": "coinChangeIIDPComp(List<int> coins, int amt)", "original_code": "int coinChangeIIDPComp(List<int> coins, int amt) {\n  int n = coins.length;\n  // \u521d\u59cb\u5316 dp \u8868\n  List<int> dp = List.filled(amt + 1, 0);\n  dp[0] = 1;\n  // \u72b6\u6001\u8f6c\u79fb\n  for (int i = 1; i <= n; i++) {\n    for (int a = 1; a <= amt; a++) {\n      if (coins[i - 1] > a) {\n        // \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i\n        dp[a] = dp[a];\n      } else {\n        // \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u4e4b\u548c\n        dp[a] = dp[a] + dp[a - coins[i - 1]];\n      }\n    }\n  }\n  return dp[amt];\n}", "doc_comment": "/* \u96f6\u94b1\u5151\u6362 II\uff1a\u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["coinChangeIIDPComp", "int", "(", ",", ")", "{", "// \u521d\u59cb\u5316 dp \u8868", "// \u72b6\u6001\u8f6c\u79fb", "}", "coins", "amt", ";", ";", ";", "for", "(", ";", ")", "return", ";", "List", "int", "int", "n", "=", "List", "dp", "=", "=", "1", ";", "i", "<=", "n", "i", "++", "{", "}", "dp", "[", "amt", "]", "<", ">", "coins", ".", "length", "<", ">", "List", ".", "filled", "dp", "[", "0", "]", "int", "i", "=", "1", "for", "(", ";", ")", "int", "int", "(", ",", "0", ")", ";", "a", "<=", "amt", "a", "++", "{", "}", "amt", "+", "1", "int", "a", "=", "1", "if", "else", "(", ")", "{", "// \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i", "}", "{", "// \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u4e4b\u548c", "}", ">", "a", ";", ";", "coins", "[", "]", "=", "=", "i", "-", "1", "dp", "[", "a", "]", "dp", "[", "a", "]", "dp", "[", "a", "]", "+", "dp", "[", "a", "]", "dp", "[", "]", "a", "-", "coins", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 197, "ast_depth": 17, "n_identifiers": 10, "vocab_size": 37}}
{"dataset_split": "train", "example_id": "hello-algo@5f3ad1e:codes/dart/chapter_dynamic_programming/coin_change_ii.dart#53-64", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5f3ad1ed3d4396019f9fd343587a5fb39ca4e700", "license": null}, "file": {"path": "codes/dart/chapter_dynamic_programming/coin_change_ii.dart", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.dart.chapter_dynamic_programming.coin_change_ii.dart#main", "start_line": 53, "end_line": 64, "signature": "main()", "original_code": "void main() {\n  List<int> coins = [1, 2, 5];\n  int amt = 5;\n\n  // \u52a8\u6001\u89c4\u5212\n  int res = coinChangeIIDP(coins, amt);\n  print(\"\u51d1\u51fa\u76ee\u6807\u91d1\u989d\u7684\u786c\u5e01\u7ec4\u5408\u6570\u91cf\u4e3a $res\");\n\n  // \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212\n  res = coinChangeIIDPComp(coins, amt);\n  print(\"\u51d1\u51fa\u76ee\u6807\u91d1\u989d\u7684\u786c\u5e01\u7ec4\u5408\u6570\u91cf\u4e3a $res\");\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["void", "main", "(", ")", "{", "// \u52a8\u6001\u89c4\u5212", "// \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212", "}", ";", ";", ";", ";", ";", ";", "List", "coins", "=", "1", ",", "2", ",", "5", "]", "int", "amt", "=", "5", "int", "res", "=", "print", "res", "=", "print", "<", ">", "[", "coinChangeIIDP", "(", ")", "coinChangeIIDPComp", "(", ")", "int", "(", "coins", ",", "amt", ")", "\"", "\u51d1\u51fa\u76ee\u6807\u91d1\u989d\u7684\u786c\u5e01\u7ec4\u5408\u6570\u91cf\u4e3a $res", "\"", "(", "coins", ",", "amt", ")", "\"", "\u51d1\u51fa\u76ee\u6807\u91d1\u989d\u7684\u786c\u5e01\u7ec4\u5408\u6570\u91cf\u4e3a $res", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 91, "ast_depth": 8, "n_identifiers": 7, "vocab_size": 28}}
{"dataset_split": "train", "example_id": "hello-algo@5f3ad1e:codes/go/chapter_dynamic_programming/coin_change.go#10-38", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5f3ad1ed3d4396019f9fd343587a5fb39ca4e700", "license": null}, "file": {"path": "codes/go/chapter_dynamic_programming/coin_change.go", "language": "Java"}, "method": {"name": "coinChangeDP", "qualified_name": "codes.go.chapter_dynamic_programming.coin_change.go#coinChangeDP", "start_line": 10, "end_line": 38, "signature": "coinChangeDP(coins []int, amt int)", "original_code": "func coinChangeDP(coins []int, amt int) int {\n\tn := len(coins)\n\tmax := amt + 1\n\t// \u521d\u59cb\u5316 dp \u8868\n\tdp := make([][]int, n+1)\n\tfor i := 0; i <= n; i++ {\n\t\tdp[i] = make([]int, amt+1)\n\t}\n\t// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c\u9996\u5217\n\tfor a := 1; a <= amt; a++ {\n\t\tdp[0][a] = max\n\t}\n\t// \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\u5217\n\tfor i := 1; i <= n; i++ {\n\t\tfor a := 1; a <= amt; a++ {\n\t\t\tif coins[i-1] > a {\n\t\t\t\t// \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i\n\t\t\t\tdp[i][a] = dp[i-1][a]\n\t\t\t} else {\n\t\t\t\t// \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5c0f\u503c\n\t\t\t\tdp[i][a] = int(math.Min(float64(dp[i-1][a]), float64(dp[i][a-coins[i-1]]+1)))\n\t\t\t}\n\t\t}\n\t}\n\tif dp[n][amt] != max {\n\t\treturn dp[n][amt]\n\t}\n\treturn -1\n}", "doc_comment": "/* \u96f6\u94b1\u5151\u6362\uff1a\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["func", "coinChangeDP", "(", ",", ")", "int", "{", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c\u9996\u5217", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\u5217", "}", "int", "amt", "int", "", "// \u521d\u59cb\u5316 dp \u8868", "", ")", "for", ";", ";", "", "{", "}", "for", ";", ";", "", "{", "}", "for", ";", ";", "", "{", "}", "if", "{", "return", "}", "return", "", "coins", "n", "=", "max", "=", "dp", "=", "i", "=", "0", "i", "<=", "n", "i", "++", ")", "a", "=", "1", "a", "<=", "amt", "a", "++", "", "i", "=", "1", "i", "<=", "n", "i", "++", "for", "{", "}", "!=", "max", "[", "amt", "]", "-", "1", "[", "]", ":", "len", ":", "amt", "+", "1", ":", "int", ",", "n", "+", "1", ":", "=", ":", "=", "max", ":", ";", ";", "a", "++", "if", "else", "{", "// \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5c0f\u503c", "}", "[", "amt", "]", "dp", "[", "n", "]", "(", "coins", ")", "make", "dp", "[", "i", "]", "int", ",", "amt", "+", "1", "[", "a", "]", "a", "=", "1", "a", "<=", "amt", ">", "a", "{", "// \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i", "}", "", "dp", "[", "n", "]", "(", "[", "]", "[", "]", "make", "dp", "[", "0", "]", ":", "coins", "[", "]", "", "=", "(", "[", "]", "i", "-", "1", "=", "[", "a", "]", "(", ")", "[", "a", "]", "[", "a", "]", "dp", "[", "i", "]", "int", "math", ".", "Min", "dp", "[", "i", "]", "dp", "[", "]", "(", ",", ")", "i", "-", "1", "float64", "float64", "(", ")", "(", ")", "[", "a", "]", "+", "1", "dp", "[", "]", "[", "]", "i", "-", "1", "dp", "[", "i", "]", "a", "-", "coins", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 353, "ast_depth": 19, "n_identifiers": 14, "vocab_size": 44}}
{"dataset_split": "train", "example_id": "hello-algo@5f3ad1e:codes/go/chapter_dynamic_programming/coin_change.go#41-66", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5f3ad1ed3d4396019f9fd343587a5fb39ca4e700", "license": null}, "file": {"path": "codes/go/chapter_dynamic_programming/coin_change.go", "language": "Java"}, "method": {"name": "coinChangeDPComp", "qualified_name": "codes.go.chapter_dynamic_programming.coin_change.go#coinChangeDPComp", "start_line": 41, "end_line": 66, "signature": "coinChangeDPComp(coins []int, amt int)", "original_code": "func coinChangeDPComp(coins []int, amt int) int {\n\tn := len(coins)\n\tmax := amt + 1\n\t// \u521d\u59cb\u5316 dp \u8868\n\tdp := make([]int, amt+1)\n\tfor i := 1; i <= amt; i++ {\n\t\tdp[i] = max\n\t}\n\t// \u72b6\u6001\u8f6c\u79fb\n\tfor i := 1; i <= n; i++ {\n\t\t// \u5012\u5e8f\u904d\u5386\n\t\tfor a := 1; a <= amt; a++ {\n\t\t\tif coins[i-1] > a {\n\t\t\t\t// \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i\n\t\t\t\tdp[a] = dp[a]\n\t\t\t} else {\n\t\t\t\t// \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5c0f\u503c\n\t\t\t\tdp[a] = int(math.Min(float64(dp[a]), float64(dp[a-coins[i-1]]+1)))\n\t\t\t}\n\t\t}\n\t}\n\tif dp[amt] != max {\n\t\treturn dp[amt]\n\t}\n\treturn -1\n}", "doc_comment": "/* \u96f6\u94b1\u5151\u6362\uff1a\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["func", "coinChangeDPComp", "(", ",", ")", "int", "{", "// \u72b6\u6001\u8f6c\u79fb", "}", "int", "amt", "int", "", "// \u521d\u59cb\u5316 dp \u8868", "", ")", "for", ";", ";", "", "{", "}", "for", ";", ";", "", "{", "// \u5012\u5e8f\u904d\u5386", "}", "if", "{", "return", "}", "return", "", "coins", "n", "=", "max", "=", "dp", "=", "i", "=", "1", "i", "<=", "amt", "i", "++", "", "i", "=", "1", "i", "<=", "n", "i", "++", "for", "{", "}", "!=", "max", "dp", "[", "amt", "]", "-", "1", "[", "]", ":", "len", ":", "amt", "+", "1", ":", "int", ",", "amt", "+", "1", ":", "=", "max", ":", ";", ";", "a", "++", "if", "else", "{", "// \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5c0f\u503c", "}", "dp", "[", "amt", "]", "(", "coins", ")", "make", "dp", "[", "i", "]", "a", "=", "1", "a", "<=", "amt", ">", "a", "{", "// \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i", "}", "", "(", "[", "]", ":", "coins", "[", "]", "", "=", "i", "-", "1", "=", "dp", "[", "a", "]", "(", ")", "dp", "[", "a", "]", "dp", "[", "a", "]", "int", "math", ".", "Min", "(", ",", ")", "float64", "float64", "(", ")", "(", ")", "dp", "[", "a", "]", "+", "1", "dp", "[", "]", "a", "-", "coins", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 266, "ast_depth": 19, "n_identifiers": 14, "vocab_size": 43}}
{"dataset_split": "train", "example_id": "hello-algo@5f3ad1e:codes/go/chapter_dynamic_programming/coin_change_ii.go#8-32", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5f3ad1ed3d4396019f9fd343587a5fb39ca4e700", "license": null}, "file": {"path": "codes/go/chapter_dynamic_programming/coin_change_ii.go", "language": "Java"}, "method": {"name": "coinChangeIIDP", "qualified_name": "codes.go.chapter_dynamic_programming.coin_change_ii.go#coinChangeIIDP", "start_line": 8, "end_line": 32, "signature": "coinChangeIIDP(coins []int, amt int)", "original_code": "func coinChangeIIDP(coins []int, amt int) int {\n\tn := len(coins)\n\t// \u521d\u59cb\u5316 dp \u8868\n\tdp := make([][]int, n+1)\n\tfor i := 0; i <= n; i++ {\n\t\tdp[i] = make([]int, amt+1)\n\t}\n\t// \u521d\u59cb\u5316\u9996\u5217\n\tfor i := 0; i <= n; i++ {\n\t\tdp[i][0] = 1\n\t}\n\t// \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\u5217\n\tfor i := 1; i <= n; i++ {\n\t\tfor a := 1; a <= amt; a++ {\n\t\t\tif coins[i-1] > a {\n\t\t\t\t// \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i\n\t\t\t\tdp[i][a] = dp[i-1][a]\n\t\t\t} else {\n\t\t\t\t// \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u4e4b\u548c\n\t\t\t\tdp[i][a] = dp[i-1][a] + dp[i][a-coins[i-1]]\n\t\t\t}\n\t\t}\n\t}\n\treturn dp[n][amt]\n}", "doc_comment": ""}, "code_tokens": ["func", "coinChangeIIDP", "(", ",", ")", "int", "{", "// \u521d\u59cb\u5316\u9996\u5217", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\u5217", "}", "int", "amt", "int", "// \u521d\u59cb\u5316 dp \u8868", "", ")", "for", ";", ";", "", "{", "}", "for", ";", ";", "", "{", "}", "for", ";", ";", "", "{", "}", "return", "", "coins", "n", "=", "dp", "=", "i", "=", "0", "i", "<=", "n", "i", "++", ")", "i", "=", "0", "i", "<=", "n", "i", "++", "", "i", "=", "1", "i", "<=", "n", "i", "++", "for", "{", "}", "[", "amt", "]", "[", "]", ":", "len", ":", "int", ",", "n", "+", "1", ":", "=", ":", "=", "1", ":", ";", ";", "a", "++", "if", "else", "{", "// \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u4e4b\u548c", "}", "dp", "[", "n", "]", "(", "coins", ")", "make", "dp", "[", "i", "]", "int", ",", "amt", "+", "1", "[", "0", "]", "a", "=", "1", "a", "<=", "amt", ">", "a", "{", "// \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i", "}", "", "(", "[", "]", "[", "]", "make", "dp", "[", "i", "]", ":", "coins", "[", "]", "", "=", "(", "[", "]", "i", "-", "1", "=", "[", "a", "]", "+", "[", "a", "]", "[", "a", "]", "dp", "[", "i", "]", "[", "a", "]", "[", "]", "dp", "[", "i", "]", "dp", "[", "]", "dp", "[", "]", "dp", "[", "i", "]", "a", "-", "i", "-", "1", "i", "-", "1", "coins", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 297, "ast_depth": 14, "n_identifiers": 10, "vocab_size": 38}}
{"dataset_split": "train", "example_id": "hello-algo@5f3ad1e:codes/go/chapter_dynamic_programming/coin_change_ii.go#35-54", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5f3ad1ed3d4396019f9fd343587a5fb39ca4e700", "license": null}, "file": {"path": "codes/go/chapter_dynamic_programming/coin_change_ii.go", "language": "Java"}, "method": {"name": "coinChangeIIDPComp", "qualified_name": "codes.go.chapter_dynamic_programming.coin_change_ii.go#coinChangeIIDPComp", "start_line": 35, "end_line": 54, "signature": "coinChangeIIDPComp(coins []int, amt int)", "original_code": "func coinChangeIIDPComp(coins []int, amt int) int {\n\tn := len(coins)\n\t// \u521d\u59cb\u5316 dp \u8868\n\tdp := make([]int, amt+1)\n\tdp[0] = 1\n\t// \u72b6\u6001\u8f6c\u79fb\n\tfor i := 1; i <= n; i++ {\n\t\t// \u5012\u5e8f\u904d\u5386\n\t\tfor a := 1; a <= amt; a++ {\n\t\t\tif coins[i-1] > a {\n\t\t\t\t// \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i\n\t\t\t\tdp[a] = dp[a]\n\t\t\t} else {\n\t\t\t\t// \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u4e4b\u548c\n\t\t\t\tdp[a] = dp[a] + dp[a-coins[i-1]]\n\t\t\t}\n\t\t}\n\t}\n\treturn dp[amt]\n}", "doc_comment": "/* \u96f6\u94b1\u5151\u6362 II\uff1a\u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["func", "coinChangeIIDPComp", "(", ",", ")", "int", "{", "}", "int", "amt", "int", "// \u521d\u59cb\u5316 dp \u8868", "", ")", "// \u72b6\u6001\u8f6c\u79fb", ";", ";", "", "{", "// \u5012\u5e8f\u904d\u5386", "}", "return", "", "coins", "n", "=", "dp", "=", "=", "1", "for", "i", ":", "=", "1", "i", "<=", "n", "i", "++", "for", "{", "}", "dp", "[", "amt", "]", "[", "]", ":", "len", ":", "int", ",", "amt", "+", "1", "dp", "[", "0", "]", ";", ";", "a", "++", "if", "else", "{", "// \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u4e4b\u548c", "}", "(", "coins", ")", "make", "a", "=", "1", "a", "<=", "amt", ">", "a", "{", "// \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i", "}", "", "(", "[", "]", ":", "coins", "[", "]", "", "=", "i", "-", "1", "=", "dp", "[", "a", "]", "+", "dp", "[", "a", "]", "dp", "[", "a", "]", "dp", "[", "a", "]", "dp", "[", "]", "a", "-", "coins", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 187, "ast_depth": 14, "n_identifiers": 11, "vocab_size": 38}}
{"dataset_split": "train", "example_id": "hello-algo@5f3ad1e:codes/java/chapter_dynamic_programming/coin_change.java#13-35", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5f3ad1ed3d4396019f9fd343587a5fb39ca4e700", "license": null}, "file": {"path": "codes/java/chapter_dynamic_programming/coin_change.java", "language": "Java"}, "method": {"name": "coinChangeDP", "qualified_name": "codes.java.chapter_dynamic_programming.coin_change#coinChangeDP", "start_line": 13, "end_line": 35, "signature": "coinChangeDP(int[] coins, int amt)", "original_code": "static int coinChangeDP(int[] coins, int amt) {\n        int n = coins.length;\n        int MAX = amt + 1;\n        // \u521d\u59cb\u5316 dp \u8868\n        int[][] dp = new int[n + 1][amt + 1];\n        // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c\u9996\u5217\n        for (int a = 1; a <= amt; a++) {\n            dp[0][a] = MAX;\n        }\n        // \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\u5217\n        for (int i = 1; i <= n; i++) {\n            for (int a = 1; a <= amt; a++) {\n                if (coins[i - 1] > a) {\n                    // \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i\n                    dp[i][a] = dp[i - 1][a];\n                } else {\n                    // \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5c0f\u503c\n                    dp[i][a] = Math.min(dp[i - 1][a], dp[i][a - coins[i - 1]] + 1);\n                }\n            }\n        }\n        return dp[n][amt] != MAX ? dp[n][amt] : -1;\n    }", "doc_comment": "/* \u96f6\u94b1\u5151\u6362\uff1a\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["coinChangeDP", "static", "int", "(", ",", ")", "{", "// \u521d\u59cb\u5316 dp \u8868", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c\u9996\u5217", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\u5217", "}", "coins", "amt", ";", ";", ";", "for", "(", ";", ")", "for", "(", ";", ")", "return", ";", "int", "int", "n", "=", "int", "MAX", "=", "dp", "=", ";", "a", "<=", "amt", "a", "++", "{", "}", ";", "i", "<=", "n", "i", "++", "{", "}", "?", ":", "int", "[", "]", "coins", ".", "length", "amt", "+", "1", "int", "[", "]", "[", "]", "new", "int", "a", "=", "1", ";", "int", "i", "=", "1", "for", "(", ";", ")", "!=", "MAX", "[", "amt", "]", "-", "1", "int", "[", "]", "[", "]", "=", "MAX", ";", "a", "<=", "amt", "a", "++", "{", "}", "[", "amt", "]", "dp", "[", "n", "]", "n", "+", "1", "amt", "+", "1", "[", "a", "]", "int", "a", "=", "1", "if", "else", "dp", "[", "n", "]", "dp", "[", "0", "]", "(", ")", "{", "// \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i", "}", "{", "// \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5c0f\u503c", "}", ">", "a", ";", ";", "coins", "[", "]", "=", "=", "i", "-", "1", "[", "a", "]", "[", "a", "]", "[", "a", "]", "Math", ".", "min", "dp", "[", "i", "]", "dp", "[", "]", "dp", "[", "i", "]", "(", ",", ")", "i", "-", "1", "[", "a", "]", "+", "1", "dp", "[", "]", "[", "]", "i", "-", "1", "dp", "[", "i", "]", "a", "-", "coins", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 300, "ast_depth": 19, "n_identifiers": 11, "vocab_size": 43}}
{"dataset_split": "train", "example_id": "hello-algo@5f3ad1e:codes/java/chapter_dynamic_programming/coin_change.java#38-58", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5f3ad1ed3d4396019f9fd343587a5fb39ca4e700", "license": null}, "file": {"path": "codes/java/chapter_dynamic_programming/coin_change.java", "language": "Java"}, "method": {"name": "coinChangeDPComp", "qualified_name": "codes.java.chapter_dynamic_programming.coin_change#coinChangeDPComp", "start_line": 38, "end_line": 58, "signature": "coinChangeDPComp(int[] coins, int amt)", "original_code": "static int coinChangeDPComp(int[] coins, int amt) {\n        int n = coins.length;\n        int MAX = amt + 1;\n        // \u521d\u59cb\u5316 dp \u8868\n        int[] dp = new int[amt + 1];\n        Arrays.fill(dp, MAX);\n        dp[0] = 0;\n        // \u72b6\u6001\u8f6c\u79fb\n        for (int i = 1; i <= n; i++) {\n            for (int a = 1; a <= amt; a++) {\n                if (coins[i - 1] > a) {\n                    // \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i\n                    dp[a] = dp[a];\n                } else {\n                    // \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5c0f\u503c\n                    dp[a] = Math.min(dp[a], dp[a - coins[i - 1]] + 1);\n                }\n            }\n        }\n        return dp[amt] != MAX ? dp[amt] : -1;\n    }", "doc_comment": "/* \u96f6\u94b1\u5151\u6362\uff1a\u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["coinChangeDPComp", "static", "int", "(", ",", ")", "{", "// \u521d\u59cb\u5316 dp \u8868", "// \u72b6\u6001\u8f6c\u79fb", "}", "coins", "amt", ";", ";", ";", ";", ";", "for", "(", ";", ")", "return", ";", "int", "int", "n", "=", "int", "MAX", "=", "dp", "=", "Arrays", ".", "fill", "=", "0", ";", "i", "<=", "n", "i", "++", "{", "}", "?", ":", "int", "[", "]", "coins", ".", "length", "amt", "+", "1", "int", "[", "]", "new", "(", "dp", ",", "MAX", ")", "dp", "[", "0", "]", "int", "i", "=", "1", "for", "(", ";", ")", "!=", "MAX", "dp", "[", "amt", "]", "-", "1", "int", "[", "]", ";", "a", "<=", "amt", "a", "++", "{", "}", "dp", "[", "amt", "]", "amt", "+", "1", "int", "a", "=", "1", "if", "else", "(", ")", "{", "// \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i", "}", "{", "// \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5c0f\u503c", "}", ">", "a", ";", ";", "coins", "[", "]", "=", "=", "i", "-", "1", "dp", "[", "a", "]", "dp", "[", "a", "]", "dp", "[", "a", "]", "Math", ".", "min", "(", ",", ")", "dp", "[", "a", "]", "+", "1", "dp", "[", "]", "a", "-", "coins", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 241, "ast_depth": 19, "n_identifiers": 13, "vocab_size": 44}}
{"dataset_split": "train", "example_id": "hello-algo@5f3ad1e:codes/java/chapter_dynamic_programming/coin_change.java#60-71", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5f3ad1ed3d4396019f9fd343587a5fb39ca4e700", "license": null}, "file": {"path": "codes/java/chapter_dynamic_programming/coin_change.java", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.java.chapter_dynamic_programming.coin_change#main", "start_line": 60, "end_line": 71, "signature": "main(String[] args)", "original_code": "public static void main(String[] args) {\n        int[] coins = { 1, 2, 5 };\n        int amt = 4;\n\n        // \u52a8\u6001\u89c4\u5212\n        int res = coinChangeDP(coins, amt);\n        System.out.println(\"\u51d1\u5230\u76ee\u6807\u91d1\u989d\u6240\u9700\u7684\u6700\u5c11\u786c\u5e01\u6570\u91cf\u4e3a \" + res);\n\n        // \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212\n        res = coinChangeDPComp(coins, amt);\n        System.out.println(\"\u51d1\u5230\u76ee\u6807\u91d1\u989d\u6240\u9700\u7684\u6700\u5c11\u786c\u5e01\u6570\u91cf\u4e3a \" + res);\n    }", "doc_comment": ""}, "code_tokens": ["void", "main", "public", "static", "(", ")", "{", "// \u52a8\u6001\u89c4\u5212", "// \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212", "}", "args", ";", ";", ";", ";", ";", ";", "String", "coins", "=", "int", "amt", "=", "4", "int", "res", "=", ".", "println", "res", "=", ".", "println", "[", "]", "int", "[", "]", "{", "1", ",", "2", ",", "5", "}", "coinChangeDP", "System", ".", "out", "(", ")", "coinChangeDPComp", "System", ".", "out", "(", ")", "(", "coins", ",", "amt", ")", "+", "res", "(", "coins", ",", "amt", ")", "+", "res", "\"", "\u51d1\u5230\u76ee\u6807\u91d1\u989d\u6240\u9700\u7684\u6700\u5c11\u786c\u5e01\u6570\u91cf\u4e3a ", "\"", "\"", "\u51d1\u5230\u76ee\u6807\u91d1\u989d\u6240\u9700\u7684\u6700\u5c11\u786c\u5e01\u6570\u91cf\u4e3a ", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 115, "ast_depth": 9, "n_identifiers": 10, "vocab_size": 34}}
{"dataset_split": "train", "example_id": "hello-algo@5f3ad1e:codes/java/chapter_dynamic_programming/coin_change_ii.java#11-32", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5f3ad1ed3d4396019f9fd343587a5fb39ca4e700", "license": null}, "file": {"path": "codes/java/chapter_dynamic_programming/coin_change_ii.java", "language": "Java"}, "method": {"name": "coinChangeIIDP", "qualified_name": "codes.java.chapter_dynamic_programming.coin_change_ii#coinChangeIIDP", "start_line": 11, "end_line": 32, "signature": "coinChangeIIDP(int[] coins, int amt)", "original_code": "static int coinChangeIIDP(int[] coins, int amt) {\n        int n = coins.length;\n        // \u521d\u59cb\u5316 dp \u8868\n        int[][] dp = new int[n + 1][amt + 1];\n        // \u521d\u59cb\u5316\u9996\u5217\n        for (int i = 0; i <= n; i++) {\n            dp[i][0] = 1;\n        }\n        // \u72b6\u6001\u8f6c\u79fb\n        for (int i = 1; i <= n; i++) {\n            for (int a = 1; a <= amt; a++) {\n                if (coins[i - 1] > a) {\n                    // \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i\n                    dp[i][a] = dp[i - 1][a];\n                } else {\n                    // \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u4e4b\u548c\n                    dp[i][a] = dp[i - 1][a] + dp[i][a - coins[i - 1]];\n                }\n            }\n        }\n        return dp[n][amt];\n    }", "doc_comment": "/* \u96f6\u94b1\u5151\u6362 II\uff1a\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["coinChangeIIDP", "static", "int", "(", ",", ")", "{", "// \u521d\u59cb\u5316 dp \u8868", "// \u521d\u59cb\u5316\u9996\u5217", "// \u72b6\u6001\u8f6c\u79fb", "}", "coins", "amt", ";", ";", "for", "(", ";", ")", "for", "(", ";", ")", "return", ";", "int", "int", "n", "=", "dp", "=", ";", "i", "<=", "n", "i", "++", "{", "}", ";", "i", "<=", "n", "i", "++", "{", "}", "[", "amt", "]", "int", "[", "]", "coins", ".", "length", "int", "[", "]", "[", "]", "new", "int", "i", "=", "0", ";", "int", "i", "=", "1", "for", "(", ";", ")", "dp", "[", "n", "]", "int", "[", "]", "[", "]", "=", "1", ";", "a", "<=", "amt", "a", "++", "{", "}", "n", "+", "1", "amt", "+", "1", "[", "0", "]", "int", "a", "=", "1", "if", "else", "dp", "[", "i", "]", "(", ")", "{", "// \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i", "}", "{", "// \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u4e4b\u548c", "}", ">", "a", ";", ";", "coins", "[", "]", "=", "=", "i", "-", "1", "[", "a", "]", "[", "a", "]", "[", "a", "]", "+", "dp", "[", "i", "]", "dp", "[", "]", "dp", "[", "i", "]", "[", "a", "]", "[", "]", "i", "-", "1", "dp", "[", "]", "dp", "[", "i", "]", "a", "-", "i", "-", "1", "coins", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 262, "ast_depth": 17, "n_identifiers": 8, "vocab_size": 37}}
{"dataset_split": "train", "example_id": "hello-algo@5f3ad1e:codes/java/chapter_dynamic_programming/coin_change_ii.java#35-53", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5f3ad1ed3d4396019f9fd343587a5fb39ca4e700", "license": null}, "file": {"path": "codes/java/chapter_dynamic_programming/coin_change_ii.java", "language": "Java"}, "method": {"name": "coinChangeIIDPComp", "qualified_name": "codes.java.chapter_dynamic_programming.coin_change_ii#coinChangeIIDPComp", "start_line": 35, "end_line": 53, "signature": "coinChangeIIDPComp(int[] coins, int amt)", "original_code": "static int coinChangeIIDPComp(int[] coins, int amt) {\n        int n = coins.length;\n        // \u521d\u59cb\u5316 dp \u8868\n        int[] dp = new int[amt + 1];\n        dp[0] = 1;\n        // \u72b6\u6001\u8f6c\u79fb\n        for (int i = 1; i <= n; i++) {\n            for (int a = 1; a <= amt; a++) {\n                if (coins[i - 1] > a) {\n                    // \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i\n                    dp[a] = dp[a];\n                } else {\n                    // \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u4e4b\u548c\n                    dp[a] = dp[a] + dp[a - coins[i - 1]];\n                }\n            }\n        }\n        return dp[amt];\n    }", "doc_comment": "/* \u96f6\u94b1\u5151\u6362 II\uff1a\u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["coinChangeIIDPComp", "static", "int", "(", ",", ")", "{", "// \u521d\u59cb\u5316 dp \u8868", "// \u72b6\u6001\u8f6c\u79fb", "}", "coins", "amt", ";", ";", ";", "for", "(", ";", ")", "return", ";", "int", "int", "n", "=", "dp", "=", "=", "1", ";", "i", "<=", "n", "i", "++", "{", "}", "dp", "[", "amt", "]", "int", "[", "]", "coins", ".", "length", "int", "[", "]", "new", "dp", "[", "0", "]", "int", "i", "=", "1", "for", "(", ";", ")", "int", "[", "]", ";", "a", "<=", "amt", "a", "++", "{", "}", "amt", "+", "1", "int", "a", "=", "1", "if", "else", "(", ")", "{", "// \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i", "}", "{", "// \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u4e4b\u548c", "}", ">", "a", ";", ";", "coins", "[", "]", "=", "=", "i", "-", "1", "dp", "[", "a", "]", "dp", "[", "a", "]", "dp", "[", "a", "]", "+", "dp", "[", "a", "]", "dp", "[", "]", "a", "-", "coins", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 195, "ast_depth": 17, "n_identifiers": 8, "vocab_size": 36}}
{"dataset_split": "train", "example_id": "hello-algo@5f3ad1e:codes/java/chapter_dynamic_programming/coin_change_ii.java#55-66", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5f3ad1ed3d4396019f9fd343587a5fb39ca4e700", "license": null}, "file": {"path": "codes/java/chapter_dynamic_programming/coin_change_ii.java", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.java.chapter_dynamic_programming.coin_change_ii#main", "start_line": 55, "end_line": 66, "signature": "main(String[] args)", "original_code": "public static void main(String[] args) {\n        int[] coins = { 1, 2, 5 };\n        int amt = 5;\n\n        // \u52a8\u6001\u89c4\u5212\n        int res = coinChangeIIDP(coins, amt);\n        System.out.println(\"\u51d1\u51fa\u76ee\u6807\u91d1\u989d\u7684\u786c\u5e01\u7ec4\u5408\u6570\u91cf\u4e3a \" + res);\n\n        // \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212\n        res = coinChangeIIDPComp(coins, amt);\n        System.out.println(\"\u51d1\u51fa\u76ee\u6807\u91d1\u989d\u7684\u786c\u5e01\u7ec4\u5408\u6570\u91cf\u4e3a \" + res);\n    }", "doc_comment": ""}, "code_tokens": ["void", "main", "public", "static", "(", ")", "{", "// \u52a8\u6001\u89c4\u5212", "// \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212", "}", "args", ";", ";", ";", ";", ";", ";", "String", "coins", "=", "int", "amt", "=", "5", "int", "res", "=", ".", "println", "res", "=", ".", "println", "[", "]", "int", "[", "]", "{", "1", ",", "2", ",", "5", "}", "coinChangeIIDP", "System", ".", "out", "(", ")", "coinChangeIIDPComp", "System", ".", "out", "(", ")", "(", "coins", ",", "amt", ")", "+", "res", "(", "coins", ",", "amt", ")", "+", "res", "\"", "\u51d1\u51fa\u76ee\u6807\u91d1\u989d\u7684\u786c\u5e01\u7ec4\u5408\u6570\u91cf\u4e3a ", "\"", "\"", "\u51d1\u51fa\u76ee\u6807\u91d1\u989d\u7684\u786c\u5e01\u7ec4\u5408\u6570\u91cf\u4e3a ", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 115, "ast_depth": 9, "n_identifiers": 10, "vocab_size": 33}}
{"dataset_split": "train", "example_id": "hello-algo@5f3ad1e:codes/javascript/chapter_dynamic_programming/coin_change.js#8-32", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5f3ad1ed3d4396019f9fd343587a5fb39ca4e700", "license": null}, "file": {"path": "codes/javascript/chapter_dynamic_programming/coin_change.js", "language": "Java"}, "method": {"name": "coinChangeDP", "qualified_name": "codes.javascript.chapter_dynamic_programming.coin_change.js#coinChangeDP", "start_line": 8, "end_line": 32, "signature": "coinChangeDP(coins, amt)", "original_code": "function coinChangeDP(coins, amt) {\r\n    const n = coins.length;\r\n    const MAX = amt + 1;\r\n    // \u521d\u59cb\u5316 dp \u8868\r\n    const dp = Array.from({ length: n + 1 }, () =>\r\n        Array.from({ length: amt + 1 }, () => 0)\r\n    );\r\n    // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c\u9996\u5217\r\n    for (let a = 1; a <= amt; a++) {\r\n        dp[0][a] = MAX;\r\n    }\r\n    // \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\u5217\r\n    for (let i = 1; i <= n; i++) {\r\n        for (let a = 1; a <= amt; a++) {\r\n            if (coins[i - 1] > a) {\r\n                // \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i\r\n                dp[i][a] = dp[i - 1][a];\r\n            } else {\r\n                // \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5c0f\u503c\r\n                dp[i][a] = Math.min(dp[i - 1][a], dp[i][a - coins[i - 1]] + 1);\r\n            }\r\n        }\r\n    }\r\n    return dp[n][amt] !== MAX ? dp[n][amt] : -1;\r\n}", "doc_comment": "/* \u96f6\u94b1\u5151\u6362\uff1a\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["function", "coinChangeDP", "(", ")", "{", "// \u521d\u59cb\u5316 dp \u8868\r", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c\u9996\u5217\r", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\u5217\r", "}", "coins", "amt", "const", ";", "const", ";", "const", ";", "for", "(", ";", ")", "for", "(", ";", ")", "return", ";", ",", "n", "=", "MAX", "=", "dp", "=", "let", ";", "a", "<=", "amt", "a", "++", "{", "}", "let", ";", "i", "<=", "n", "i", "++", "{", "}", "?", ":", "coins", ".", "length", "amt", "+", "1", "Array", ".", "from", "a", "=", "1", ";", "i", "=", "1", "for", "(", ";", ")", "!=", "MAX", "[", "amt", "]", "-", "1", "(", ")", "=", "MAX", "let", ";", "a", "<=", "amt", "a", "++", "{", "}", "[", "amt", "]", "=", "dp", "[", "n", "]", "{", "length", ":", ">", "[", "a", "]", "a", "=", "1", "if", "else", "dp", "[", "n", "]", "n", "+", "1", "}", ",", "=", "Array", ".", "from", "dp", "[", "0", "]", "(", ")", "{", "// \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i\r", "}", "{", "// \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5c0f\u503c\r", "}", "(", ")", "(", ")", ">", "a", ";", ";", "{", "length", ":", ">", "0", "coins", "[", "]", "=", "=", "amt", "+", "1", "}", ",", "=", "i", "-", "1", "[", "a", "]", "[", "a", "]", "[", "a", "]", "Math", ".", "min", "(", ")", "dp", "[", "i", "]", "dp", "[", "]", "dp", "[", "i", "]", "(", ",", ")", "i", "-", "1", "[", "a", "]", "+", "1", "dp", "[", "]", "[", "]", "i", "-", "1", "dp", "[", "i", "]", "a", "-", "coins", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 310, "ast_depth": 19, "n_identifiers": 13, "vocab_size": 45}}
{"dataset_split": "train", "example_id": "hello-algo@5f3ad1e:codes/javascript/chapter_dynamic_programming/coin_change.js#35-54", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5f3ad1ed3d4396019f9fd343587a5fb39ca4e700", "license": null}, "file": {"path": "codes/javascript/chapter_dynamic_programming/coin_change.js", "language": "Java"}, "method": {"name": "coinChangeDPComp", "qualified_name": "codes.javascript.chapter_dynamic_programming.coin_change.js#coinChangeDPComp", "start_line": 35, "end_line": 54, "signature": "coinChangeDPComp(coins, amt)", "original_code": "function coinChangeDPComp(coins, amt) {\r\n    const n = coins.length;\r\n    const MAX = amt + 1;\r\n    // \u521d\u59cb\u5316 dp \u8868\r\n    const dp = Array.from({ length: amt + 1 }, () => MAX);\r\n    dp[0] = 0;\r\n    // \u72b6\u6001\u8f6c\u79fb\r\n    for (let i = 1; i <= n; i++) {\r\n        for (let a = 1; a <= amt; a++) {\r\n            if (coins[i - 1] > a) {\r\n                // \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i\r\n                dp[a] = dp[a];\r\n            } else {\r\n                // \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5c0f\u503c\r\n                dp[a] = Math.min(dp[a], dp[a - coins[i - 1]] + 1);\r\n            }\r\n        }\r\n    }\r\n    return dp[amt] !== MAX ? dp[amt] : -1;\r\n}", "doc_comment": "/* \u96f6\u94b1\u5151\u6362\uff1a\u72b6\u6001\u538b\u7f29\u540e\u7684\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["function", "coinChangeDPComp", "(", ")", "{", "// \u521d\u59cb\u5316 dp \u8868\r", "// \u72b6\u6001\u8f6c\u79fb\r", "}", "coins", "amt", "const", ";", "const", ";", "const", ";", ";", "for", "(", ";", ")", "return", ";", ",", "n", "=", "MAX", "=", "dp", "=", "=", "0", "let", ";", "i", "<=", "n", "i", "++", "{", "}", "?", ":", "coins", ".", "length", "amt", "+", "1", "Array", ".", "from", "dp", "[", "0", "]", "i", "=", "1", "for", "(", ";", ")", "!=", "MAX", "dp", "[", "amt", "]", "-", "1", "(", ")", "let", ";", "a", "<=", "amt", "a", "++", "{", "}", "dp", "[", "amt", "]", "=", "{", "length", ":", ">", "MAX", "a", "=", "1", "if", "else", "amt", "+", "1", "}", ",", "=", "(", ")", "{", "// \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i\r", "}", "{", "// \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5c0f\u503c\r", "}", "(", ")", ">", "a", ";", ";", "coins", "[", "]", "=", "=", "i", "-", "1", "dp", "[", "a", "]", "dp", "[", "a", "]", "dp", "[", "a", "]", "Math", ".", "min", "(", ",", ")", "dp", "[", "a", "]", "+", "1", "dp", "[", "]", "a", "-", "coins", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 225, "ast_depth": 19, "n_identifiers": 13, "vocab_size": 44}}
{"dataset_split": "train", "example_id": "hello-algo@5f3ad1e:codes/javascript/chapter_dynamic_programming/coin_change_ii.js#8-31", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5f3ad1ed3d4396019f9fd343587a5fb39ca4e700", "license": null}, "file": {"path": "codes/javascript/chapter_dynamic_programming/coin_change_ii.js", "language": "Java"}, "method": {"name": "coinChangeIIDP", "qualified_name": "codes.javascript.chapter_dynamic_programming.coin_change_ii.js#coinChangeIIDP", "start_line": 8, "end_line": 31, "signature": "coinChangeIIDP(coins, amt)", "original_code": "function coinChangeIIDP(coins, amt) {\r\n    const n = coins.length;\r\n    // \u521d\u59cb\u5316 dp \u8868\r\n    const dp = Array.from({ length: n + 1 }, () =>\r\n        Array.from({ length: amt + 1 }, () => 0)\r\n    );\r\n    // \u521d\u59cb\u5316\u9996\u5217\r\n    for (let i = 0; i <= n; i++) {\r\n        dp[i][0] = 1;\r\n    }\r\n    // \u72b6\u6001\u8f6c\u79fb\r\n    for (let i = 1; i <= n; i++) {\r\n        for (let a = 1; a <= amt; a++) {\r\n            if (coins[i - 1] > a) {\r\n                // \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i\r\n                dp[i][a] = dp[i - 1][a];\r\n            } else {\r\n                // \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u4e4b\u548c\r\n                dp[i][a] = dp[i - 1][a] + dp[i][a - coins[i - 1]];\r\n            }\r\n        }\r\n    }\r\n    return dp[n][amt];\r\n}", "doc_comment": "/* \u96f6\u94b1\u5151\u6362 II\uff1a\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["function", "coinChangeIIDP", "(", ")", "{", "// \u521d\u59cb\u5316 dp \u8868\r", "// \u521d\u59cb\u5316\u9996\u5217\r", "// \u72b6\u6001\u8f6c\u79fb\r", "}", "coins", "amt", "const", ";", "const", ";", "for", "(", ";", ")", "for", "(", ";", ")", "return", ";", ",", "n", "=", "dp", "=", "let", ";", "i", "<=", "n", "i", "++", "{", "}", "let", ";", "i", "<=", "n", "i", "++", "{", "}", "[", "amt", "]", "coins", ".", "length", "Array", ".", "from", "i", "=", "0", ";", "i", "=", "1", "for", "(", ";", ")", "dp", "[", "n", "]", "(", ")", "=", "1", "let", ";", "a", "<=", "amt", "a", "++", "{", "}", "{", "length", ":", ">", "[", "0", "]", "a", "=", "1", "if", "else", "n", "+", "1", "}", ",", "=", "Array", ".", "from", "dp", "[", "i", "]", "(", ")", "{", "// \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i\r", "}", "{", "// \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u4e4b\u548c\r", "}", "(", ")", "(", ")", ">", "a", ";", ";", "{", "length", ":", ">", "0", "coins", "[", "]", "=", "=", "amt", "+", "1", "}", ",", "=", "i", "-", "1", "[", "a", "]", "[", "a", "]", "[", "a", "]", "+", "(", ")", "dp", "[", "i", "]", "dp", "[", "]", "dp", "[", "i", "]", "[", "a", "]", "[", "]", "i", "-", "1", "dp", "[", "]", "dp", "[", "i", "]", "a", "-", "i", "-", "1", "coins", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 271, "ast_depth": 17, "n_identifiers": 10, "vocab_size": 40}}
{"dataset_split": "train", "example_id": "hello-algo@5f3ad1e:codes/javascript/chapter_dynamic_programming/coin_change_ii.js#34-52", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5f3ad1ed3d4396019f9fd343587a5fb39ca4e700", "license": null}, "file": {"path": "codes/javascript/chapter_dynamic_programming/coin_change_ii.js", "language": "Java"}, "method": {"name": "coinChangeIIDPComp", "qualified_name": "codes.javascript.chapter_dynamic_programming.coin_change_ii.js#coinChangeIIDPComp", "start_line": 34, "end_line": 52, "signature": "coinChangeIIDPComp(coins, amt)", "original_code": "function coinChangeIIDPComp(coins, amt) {\r\n    const n = coins.length;\r\n    // \u521d\u59cb\u5316 dp \u8868\r\n    const dp = Array.from({ length: amt + 1 }, () => 0);\r\n    dp[0] = 1;\r\n    // \u72b6\u6001\u8f6c\u79fb\r\n    for (let i = 1; i <= n; i++) {\r\n        for (let a = 1; a <= amt; a++) {\r\n            if (coins[i - 1] > a) {\r\n                // \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i\r\n                dp[a] = dp[a];\r\n            } else {\r\n                // \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u4e4b\u548c\r\n                dp[a] = dp[a] + dp[a - coins[i - 1]];\r\n            }\r\n        }\r\n    }\r\n    return dp[amt];\r\n}", "doc_comment": "/* \u96f6\u94b1\u5151\u6362 II\uff1a\u72b6\u6001\u538b\u7f29\u540e\u7684\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["function", "coinChangeIIDPComp", "(", ")", "{", "// \u521d\u59cb\u5316 dp \u8868\r", "// \u72b6\u6001\u8f6c\u79fb\r", "}", "coins", "amt", "const", ";", "const", ";", ";", "for", "(", ";", ")", "return", ";", ",", "n", "=", "dp", "=", "=", "1", "let", ";", "i", "<=", "n", "i", "++", "{", "}", "dp", "[", "amt", "]", "coins", ".", "length", "Array", ".", "from", "dp", "[", "0", "]", "i", "=", "1", "for", "(", ";", ")", "(", ")", "let", ";", "a", "<=", "amt", "a", "++", "{", "}", "{", "length", ":", ">", "0", "a", "=", "1", "if", "else", "amt", "+", "1", "}", ",", "=", "(", ")", "{", "// \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i\r", "}", "{", "// \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u4e4b\u548c\r", "}", "(", ")", ">", "a", ";", ";", "coins", "[", "]", "=", "=", "i", "-", "1", "dp", "[", "a", "]", "dp", "[", "a", "]", "dp", "[", "a", "]", "+", "dp", "[", "a", "]", "dp", "[", "]", "a", "-", "coins", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 190, "ast_depth": 17, "n_identifiers": 10, "vocab_size": 39}}
{"dataset_split": "train", "example_id": "hello-algo@5f3ad1e:codes/rust/chapter_dynamic_programming/coin_change.rs#8-16", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5f3ad1ed3d4396019f9fd343587a5fb39ca4e700", "license": null}, "file": {"path": "codes/rust/chapter_dynamic_programming/coin_change.rs", "language": "Java"}, "method": {"name": "coin_change_dp", "qualified_name": "codes.rust.chapter_dynamic_programming.coin_change.rs#coin_change_dp", "start_line": 8, "end_line": 16, "signature": "coin_change_dp(coins: &[i32], amt: usize)", "original_code": "fn coin_change_dp(coins: &[i32], amt: usize) -> i32 {\n    let n = coins.len();\n    let max = amt + 1;\n    // \u521d\u59cb\u5316 dp \u8868\n    let mut dp = vec![vec![0; amt + 1]; n + 1];\n    // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c\u9996\u5217\n    for a in 1..= amt {\n        dp[0][a] = max;\n    }", "doc_comment": "/* \u96f6\u94b1\u5151\u6362\uff1a\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["fn", "coin_change_dp", "(", ")", "->", "i32", "{", "// \u521d\u59cb\u5316 dp \u8868", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c\u9996\u5217", "}", "usize", "let", ";", "let", ";", "let", ";", ";", "for", "a", "", ";", "coins", ",", "amt", ":", "n", "=", "max", "=", "mut", "=", "vec", "!", "[", "n", "+", "1", "]", "in", "=", "max", ":", "&", "[", "]", "coins", ".", "len", "amt", "+", "1", "dp", "vec", "[", "]", "[", "a", "]", "i32", "(", ")", "!", "0", ";", "amt", "+", "1", "[", "0", "]", "1.", ".", "dp", "=", "amt", "{"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 115, "ast_depth": 10, "n_identifiers": 13, "vocab_size": 37}}
{"dataset_split": "train", "example_id": "hello-algo@5f3ad1e:codes/rust/chapter_dynamic_programming/coin_change.rs#33-52", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5f3ad1ed3d4396019f9fd343587a5fb39ca4e700", "license": null}, "file": {"path": "codes/rust/chapter_dynamic_programming/coin_change.rs", "language": "Java"}, "method": {"name": "coin_change_dp_comp", "qualified_name": "codes.rust.chapter_dynamic_programming.coin_change.rs#coin_change_dp_comp", "start_line": 33, "end_line": 52, "signature": "coin_change_dp_comp(coins: &[i32], amt: usize)", "original_code": "fn coin_change_dp_comp(coins: &[i32], amt: usize) -> i32 {\n    let n = coins.len();\n    let max = amt + 1;\n    // \u521d\u59cb\u5316 dp \u8868\n    let mut dp = vec![0; amt + 1];\n    dp.fill(max);\n    dp[0] = 0;\n    // \u72b6\u6001\u8f6c\u79fb\n    for i in 1..=n {\n        for a in 1..=amt {\n            if coins[i - 1] > a as i32 {\n                // \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i\n                dp[a] = dp[a];\n            } else {\n                // \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5c0f\u503c\n                dp[a] = std::cmp::min(dp[a], dp[a - coins[i - 1] as usize] + 1);\n            }\n        }\n    }\n    if dp[amt] != max { return dp[amt] as i32; }", "doc_comment": "/* \u96f6\u94b1\u5151\u6362\uff1a\u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["fn", "coin_change_dp_comp", "(", ")", "->", "i32", "{", "// \u521d\u59cb\u5316 dp \u8868", "// \u72b6\u6001\u8f6c\u79fb", "}", "usize", "let", ";", "let", ";", "let", ";", ";", ";", ";", "for", "i", "", "", "{", "}", "if", "{", "return", "", "as", ";", "coins", ",", "amt", ":", "n", "=", "max", "=", "mut", "=", "vec", "!", "[", "0", "amt", "+", "1", "]", "dp", ".", "fill", "=", "0", "in", "1.", ".", "n", "for", "a", "in", "{", "}", "!=", "max", "dp", "[", "amt", "]", "i32", ":", "&", "[", "]", "coins", ".", "len", "amt", "+", "1", "dp", "(", "max", ")", "dp", "[", "0", "]", "=", "1.", ".", "amt", "if", "else", "{", "// \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5c0f\u503c", "}", "dp", "[", "amt", "]", "i32", "(", ")", "=", ">", "i32", "{", "// \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i", "}", "", ";", "coins", "[", "]", "a", "as", ";", "=", "(", ")", "i", "-", "1", "=", "dp", "[", "a", "]", "::", "min", ",", "+", "1", "dp", "[", "a", "]", "dp", "[", "a", "]", "std", "::", "cmp", "dp", "[", "a", "]", "dp", "[", "]", "a", "-", "as", "usize", "coins", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 238, "ast_depth": 14, "n_identifiers": 20, "vocab_size": 52}}
{"dataset_split": "train", "example_id": "hello-algo@5f3ad1e:codes/rust/chapter_dynamic_programming/coin_change.rs#56-67", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5f3ad1ed3d4396019f9fd343587a5fb39ca4e700", "license": null}, "file": {"path": "codes/rust/chapter_dynamic_programming/coin_change.rs", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.rust.chapter_dynamic_programming.coin_change.rs#main", "start_line": 56, "end_line": 67, "signature": "main()", "original_code": "pub fn main() {\n    let coins = [ 1, 2, 5 ];\n    let amt: usize = 4;\n\n    // \u52a8\u6001\u89c4\u5212\n    let res = coin_change_dp(&coins, amt);\n    println!(\"\u51d1\u5230\u76ee\u6807\u91d1\u989d\u6240\u9700\u7684\u6700\u5c11\u786c\u5e01\u6570\u91cf\u4e3a {res}\");\n\n    // \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212\n    let res = coin_change_dp_comp(&coins, amt);\n    println!(\"\u51d1\u5230\u76ee\u6807\u91d1\u989d\u6240\u9700\u7684\u6700\u5c11\u786c\u5e01\u6570\u91cf\u4e3a {res}\");\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["pub", "main", "fn", "(", ")", "{", "// \u52a8\u6001\u89c4\u5212", "// \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212", "}", "let", ";", "let", ";", "let", ";", ";", "let", ";", ";", "coins", "=", "1", ",", "2", ",", "5", "]", "amt", ":", "usize", "=", "4", "res", "=", "println", "res", "=", "println", "[", "coin_change_dp", "!", "(", ")", "coin_change_dp_comp", "!", "(", ")", "(", "coins", ",", "amt", ")", "\"", "\u51d1\u5230\u76ee\u6807\u91d1\u989d\u6240\u9700\u7684\u6700\u5c11\u786c\u5e01\u6570\u91cf\u4e3a {res}", "\"", "(", "coins", ",", "amt", ")", "\"", "\u51d1\u5230\u76ee\u6807\u91d1\u989d\u6240\u9700\u7684\u6700\u5c11\u786c\u5e01\u6570\u91cf\u4e3a {res}", "\"", "&", "&"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 97, "ast_depth": 9, "n_identifiers": 9, "vocab_size": 31}}
{"dataset_split": "train", "example_id": "hello-algo@5f3ad1e:codes/rust/chapter_dynamic_programming/coin_change_ii.rs#8-15", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5f3ad1ed3d4396019f9fd343587a5fb39ca4e700", "license": null}, "file": {"path": "codes/rust/chapter_dynamic_programming/coin_change_ii.rs", "language": "Java"}, "method": {"name": "coin_change_ii_dp", "qualified_name": "codes.rust.chapter_dynamic_programming.coin_change_ii.rs#coin_change_ii_dp", "start_line": 8, "end_line": 15, "signature": "coin_change_ii_dp(coins: &[i32], amt: usize)", "original_code": "fn coin_change_ii_dp(coins: &[i32], amt: usize) -> i32 {\n    let n = coins.len();\n    // \u521d\u59cb\u5316 dp \u8868\n    let mut dp = vec![vec![0; amt + 1]; n + 1];\n    // \u521d\u59cb\u5316\u9996\u5217\n    for i in 0..= n {\n        dp[i][0] = 1;\n    }", "doc_comment": "/* \u96f6\u94b1\u5151\u6362 II\uff1a\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["fn", "coin_change_ii_dp", "(", ")", "->", "i32", "{", "// \u521d\u59cb\u5316 dp \u8868", "// \u521d\u59cb\u5316\u9996\u5217", "}", "usize", "let", ";", "let", ";", ";", "for", "i", "", ";", "coins", ",", "amt", ":", "n", "=", "mut", "=", "vec", "!", "[", "n", "+", "1", "]", "in", "=", "1", ":", "&", "[", "]", "coins", ".", "len", "dp", "vec", "[", "]", "[", "0", "]", "i32", "(", ")", "!", "0", ";", "amt", "+", "1", "[", "i", "]", "0.", ".", "dp", "=", "n", "{"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 105, "ast_depth": 10, "n_identifiers": 12, "vocab_size": 36}}
{"dataset_split": "train", "example_id": "hello-algo@5f3ad1e:codes/rust/chapter_dynamic_programming/coin_change_ii.rs#32-50", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5f3ad1ed3d4396019f9fd343587a5fb39ca4e700", "license": null}, "file": {"path": "codes/rust/chapter_dynamic_programming/coin_change_ii.rs", "language": "Java"}, "method": {"name": "coin_change_ii_dp_comp", "qualified_name": "codes.rust.chapter_dynamic_programming.coin_change_ii.rs#coin_change_ii_dp_comp", "start_line": 32, "end_line": 50, "signature": "coin_change_ii_dp_comp(coins: &[i32], amt: usize)", "original_code": "fn coin_change_ii_dp_comp(coins: &[i32], amt: usize) -> i32 {\n    let n = coins.len();\n    // \u521d\u59cb\u5316 dp \u8868\n    let mut dp = vec![0; amt + 1];\n    dp[0] = 1;\n    // \u72b6\u6001\u8f6c\u79fb\n    for i in 1..=n {\n        for a in 1..=amt {\n            if coins[i - 1] > a as i32 {\n                // \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i\n                dp[a] = dp[a];\n            } else {\n                // \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5c0f\u503c\n                dp[a] = dp[a] + dp[a - coins[i - 1] as usize];\n            }\n        }\n    }\n    dp[amt]\n}", "doc_comment": "/* \u96f6\u94b1\u5151\u6362 II\uff1a\u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["fn", "coin_change_ii_dp_comp", "(", ")", "->", "i32", "{", "// \u521d\u59cb\u5316 dp \u8868", "// \u72b6\u6001\u8f6c\u79fb", "}", "usize", "let", ";", "let", ";", ";", ";", "for", "i", "", "", "{", "}", "", "coins", ",", "amt", ":", "n", "=", "mut", "=", "vec", "!", "[", "0", "amt", "+", "1", "]", "=", "1", "in", "1.", ".", "n", "for", "a", "in", "{", "}", "dp", "[", "amt", "]", ":", "&", "[", "]", "coins", ".", "len", "dp", "dp", "[", "0", "]", "=", "1.", ".", "amt", "if", "else", "{", "// \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5c0f\u503c", "}", "i32", "(", ")", "=", ">", "i32", "{", "// \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i", "}", ";", "coins", "[", "]", "a", "as", ";", "=", "i", "-", "1", "=", "dp", "[", "a", "]", "+", "dp", "[", "a", "]", "dp", "[", "a", "]", "dp", "[", "a", "]", "dp", "[", "]", "a", "-", "as", "usize", "coins", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 186, "ast_depth": 14, "n_identifiers": 15, "vocab_size": 44}}
{"dataset_split": "train", "example_id": "hello-algo@5f3ad1e:codes/rust/chapter_dynamic_programming/coin_change_ii.rs#53-64", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5f3ad1ed3d4396019f9fd343587a5fb39ca4e700", "license": null}, "file": {"path": "codes/rust/chapter_dynamic_programming/coin_change_ii.rs", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.rust.chapter_dynamic_programming.coin_change_ii.rs#main", "start_line": 53, "end_line": 64, "signature": "main()", "original_code": "pub fn main() {\n    let coins = [ 1, 2, 5 ];\n    let amt: usize = 5;\n\n    // \u52a8\u6001\u89c4\u5212\n    let res = coin_change_ii_dp(&coins, amt);\n    println!(\"\u51d1\u51fa\u76ee\u6807\u91d1\u989d\u7684\u786c\u5e01\u7ec4\u5408\u6570\u91cf\u4e3a {res}\");\n\n    // \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212\n    let res = coin_change_ii_dp_comp(&coins, amt);\n    println!(\"\u51d1\u51fa\u76ee\u6807\u91d1\u989d\u7684\u786c\u5e01\u7ec4\u5408\u6570\u91cf\u4e3a {res}\");\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["pub", "main", "fn", "(", ")", "{", "// \u52a8\u6001\u89c4\u5212", "// \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212", "}", "let", ";", "let", ";", "let", ";", ";", "let", ";", ";", "coins", "=", "1", ",", "2", ",", "5", "]", "amt", ":", "usize", "=", "5", "res", "=", "println", "res", "=", "println", "[", "coin_change_ii_dp", "!", "(", ")", "coin_change_ii_dp_comp", "!", "(", ")", "(", "coins", ",", "amt", ")", "\"", "\u51d1\u51fa\u76ee\u6807\u91d1\u989d\u7684\u786c\u5e01\u7ec4\u5408\u6570\u91cf\u4e3a {res}", "\"", "(", "coins", ",", "amt", ")", "\"", "\u51d1\u51fa\u76ee\u6807\u91d1\u989d\u7684\u786c\u5e01\u7ec4\u5408\u6570\u91cf\u4e3a {res}", "\"", "&", "&"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 97, "ast_depth": 9, "n_identifiers": 9, "vocab_size": 30}}
{"dataset_split": "train", "example_id": "hello-algo@5f3ad1e:codes/swift/chapter_dynamic_programming/coin_change.swift#8-28", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5f3ad1ed3d4396019f9fd343587a5fb39ca4e700", "license": null}, "file": {"path": "codes/swift/chapter_dynamic_programming/coin_change.swift", "language": "Java"}, "method": {"name": "coinChangeDP", "qualified_name": "codes.swift.chapter_dynamic_programming.coin_change.swift#coinChangeDP", "start_line": 8, "end_line": 28, "signature": "coinChangeDP(coins: [Int], amt: Int)", "original_code": "func coinChangeDP(coins: [Int], amt: Int) -> Int {\n    let n = coins.count\n    let MAX = amt + 1\n    // \u521d\u59cb\u5316 dp \u8868\n    var dp = Array(repeating: Array(repeating: 0, count: amt + 1), count: n + 1)\n    // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c\u9996\u5217\n    for a in stride(from: 1, through: amt, by: 1) {\n        dp[0][a] = MAX\n    }\n    // \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\u5217\n    for i in stride(from: 1, through: n, by: 1) {\n        for a in stride(from: 1, through: amt, by: 1) {\n            if coins[i - 1] > a {\n                // \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i\n                dp[i][a] = dp[i - 1][a]\n            } else {\n                // \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5c0f\u503c\n                dp[i][a] = min(dp[i - 1][a], dp[i][a - coins[i - 1]] + 1)\n            }\n        }\n    }", "doc_comment": "/* \u96f6\u94b1\u5151\u6362\uff1a\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["func", "coinChangeDP", "(", ")", "->", "Int", "{", "}", "Int", "let", "// \u521d\u59cb\u5316 dp \u8868", "", "var", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\u5217", ",", ",", "", "", "{", "}", "coins", ",", "amt", ":", "n", "=", "dp", "=", "for", "i", "in", "stride", "(", "from", ":", "1", "through", ":", "n", "by", ":", "1", ")", "{", "for", "a", "in", "stride", "if", "else", "{", "// \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5c0f\u503c", "}", ":", "[", "]", "let", "MAX", "=", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c\u9996\u5217", "for", "a", "in", "{", "}", "(", "1", ")", ">", "a", "{", "// \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i", "}", "", "Int", "coins", ".", "count", "amt", "+", "1", "Array", "stride", "=", "MAX", "from", ":", "1", ",", "through", ":", "amt", ",", "by", ":", "coins", "[", "]", "", "=", "(", ")", "(", "from", ",", "through", ",", "by", ")", "[", "a", "]", "i", "-", "1", "=", "[", "a", "]", "min", "repeating", ":", ",", "count", ":", "n", "+", "1", ":", "1", ":", "amt", ":", "1", "dp", "[", "0", "]", "[", "a", "]", "[", "a", "]", "dp", "[", "i", "]", "(", ",", ")", "Array", "dp", "[", "i", "]", "dp", "[", "]", "[", "a", "]", "+", "1", "(", ")", "i", "-", "1", "dp", "[", "]", "[", "]", "repeating", "+", "1", "i", "-", "1", "dp", "[", "i", "]", "a", "-", ":", "0", ",", "count", ":", "amt", "coins", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 273, "ast_depth": 15, "n_identifiers": 21, "vocab_size": 46}}
{"dataset_split": "train", "example_id": "hello-algo@5f3ad1e:codes/swift/chapter_dynamic_programming/coin_change.swift#57-69", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5f3ad1ed3d4396019f9fd343587a5fb39ca4e700", "license": null}, "file": {"path": "codes/swift/chapter_dynamic_programming/coin_change.swift", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.swift.chapter_dynamic_programming.coin_change.swift#main", "start_line": 57, "end_line": 69, "signature": "main()", "original_code": "static func main() {\n        let coins = [1, 2, 5]\n        let amt = 4\n\n        // \u52a8\u6001\u89c4\u5212\n        var res = coinChangeDP(coins: coins, amt: amt)\n        print(\"\u51d1\u5230\u76ee\u6807\u91d1\u989d\u6240\u9700\u7684\u6700\u5c11\u786c\u5e01\u6570\u91cf\u4e3a \\(res)\")\n\n        // \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212\n        res = coinChangeDPComp(coins: coins, amt: amt)\n        print(\"\u51d1\u5230\u76ee\u6807\u91d1\u989d\u6240\u9700\u7684\u6700\u5c11\u786c\u5e01\u6570\u91cf\u4e3a \\(res)\")\n    }\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["func", "main", "static", "(", ")", "{", "}", "let", ",", "// \u52a8\u6001\u89c4\u5212", "", "var", "", "// \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212", "", "", "}", "coins", "=", "1", "2", ",", "5", "]", "let", "amt", "=", "4", "res", "=", "print", "res", "=", "print", "[", "coinChangeDP", "(", ")", "coinChangeDPComp", "(", ")", "(", "amt", ")", "\"", "\u51d1\u5230\u76ee\u6807\u91d1\u989d\u6240\u9700\u7684\u6700\u5c11\u786c\u5e01\u6570\u91cf\u4e3a ", "\\(", "res)", "\"", "(", "amt", ")", "\"", "\u51d1\u5230\u76ee\u6807\u91d1\u989d\u6240\u9700\u7684\u6700\u5c11\u786c\u5e01\u6570\u91cf\u4e3a ", "\\(", "res)", "\"", "coins", ":", "coins", ",", "amt", ":", "coins", ":", "coins", ",", "amt", ":"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 97, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 31}}
{"dataset_split": "train", "example_id": "hello-algo@5f3ad1e:codes/swift/chapter_dynamic_programming/coin_change_ii.swift#8-15", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5f3ad1ed3d4396019f9fd343587a5fb39ca4e700", "license": null}, "file": {"path": "codes/swift/chapter_dynamic_programming/coin_change_ii.swift", "language": "Java"}, "method": {"name": "coinChangeIIDP", "qualified_name": "codes.swift.chapter_dynamic_programming.coin_change_ii.swift#coinChangeIIDP", "start_line": 8, "end_line": 15, "signature": "coinChangeIIDP(coins: [Int], amt: Int)", "original_code": "func coinChangeIIDP(coins: [Int], amt: Int) -> Int {\n    let n = coins.count\n    // \u521d\u59cb\u5316 dp \u8868\n    var dp = Array(repeating: Array(repeating: 0, count: amt + 1), count: n + 1)\n    // \u521d\u59cb\u5316\u9996\u5217\n    for i in stride(from: 0, through: n, by: 1) {\n        dp[i][0] = 1\n    }", "doc_comment": "/* \u96f6\u94b1\u5151\u6362 II\uff1a\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["func", "coinChangeIIDP", "(", ")", "->", "Int", "{", "}", "Int", "let", "", "coins", ",", "amt", ":", "n", "=", ":", "[", "]", "// \u521d\u59cb\u5316 dp \u8868", "var", "dp", "=", "Int", "coins", ".", "count", "// \u521d\u59cb\u5316\u9996\u5217", "for", "i", "in", "{", "=", "1", "Array", "stride", "[", "0", "]", "(", ")", "(", "from", ",", "through", ",", "by", ")", "dp", "[", "i", "]", "repeating", ":", ",", "count", ":", "n", "+", "1", ":", "0", ":", "n", ":", "1", "Array", "(", ")", "repeating", "+", "1", ":", "0", ",", "count", ":", "amt"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 112, "ast_depth": 15, "n_identifiers": 16, "vocab_size": 36}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/c/chapter_array_and_linkedlist/array.c#10-16", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/array.c", "language": "Java"}, "method": {"name": "randomAccess", "qualified_name": "codes.c.chapter_array_and_linkedlist.array.c#randomAccess", "start_line": 10, "end_line": 16, "signature": "randomAccess(int *nums, int size)", "original_code": "int randomAccess(int *nums, int size) {\r\n    // \u5728\u533a\u95f4 [0, size) \u4e2d\u968f\u673a\u62bd\u53d6\u4e00\u4e2a\u6570\u5b57\r\n    int randomIndex = rand() % size;\r\n    // \u83b7\u53d6\u5e76\u8fd4\u56de\u968f\u673a\u5143\u7d20\r\n    int randomNum = nums[randomIndex];\r\n    return randomNum;\r\n}", "doc_comment": "/* \u968f\u673a\u8bbf\u95ee\u5143\u7d20 */"}, "code_tokens": ["randomAccess", "int", "(", ",", ")", "{", "// \u5728\u533a\u95f4 [0, size) \u4e2d\u968f\u673a\u62bd\u53d6\u4e00\u4e2a\u6570\u5b57\r", "// \u83b7\u53d6\u5e76\u8fd4\u56de\u968f\u673a\u5143\u7d20\r", "}", "nums", "size", ";", ";", "return", "randomNum", ";", "int", "*", "int", "int", "randomIndex", "=", "int", "randomNum", "=", "%", "size", "nums", "[", "randomIndex", "]", "rand", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 55, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 21}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/c/chapter_array_and_linkedlist/array.c#19-32", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/array.c", "language": "Java"}, "method": {"name": "extend", "qualified_name": "codes.c.chapter_array_and_linkedlist.array.c#extend", "start_line": 19, "end_line": 32, "signature": "extend(int *nums, int size, int enlarge)", "original_code": "int *extend(int *nums, int size, int enlarge) {\r\n    // \u521d\u59cb\u5316\u4e00\u4e2a\u6269\u5c55\u957f\u5ea6\u540e\u7684\u6570\u7ec4\r\n    int *res = (int *)malloc(sizeof(int) * (size + enlarge));\r\n    // \u5c06\u539f\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u5143\u7d20\u590d\u5236\u5230\u65b0\u6570\u7ec4\r\n    for (int i = 0; i < size; i++) {\r\n        res[i] = nums[i];\r\n    }\r\n    // \u521d\u59cb\u5316\u6269\u5c55\u540e\u7684\u7a7a\u95f4\r\n    for (int i = size; i < size + enlarge; i++) {\r\n        res[i] = 0;\r\n    }\r\n    // \u8fd4\u56de\u6269\u5c55\u540e\u7684\u65b0\u6570\u7ec4\r\n    return res;\r\n}", "doc_comment": "/* \u6269\u5c55\u6570\u7ec4\u957f\u5ea6 */"}, "code_tokens": ["extend", "int", "*", "(", ",", ",", ")", "{", "// \u521d\u59cb\u5316\u4e00\u4e2a\u6269\u5c55\u957f\u5ea6\u540e\u7684\u6570\u7ec4\r", "// \u5c06\u539f\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u5143\u7d20\u590d\u5236\u5230\u65b0\u6570\u7ec4\r", "// \u521d\u59cb\u5316\u6269\u5c55\u540e\u7684\u7a7a\u95f4\r", "// \u8fd4\u56de\u6269\u5c55\u540e\u7684\u65b0\u6570\u7ec4\r", "}", "nums", "size", "enlarge", ";", "for", "(", ";", ")", "for", "(", ";", ")", "return", "res", ";", "int", "*", "int", "int", "int", "*", "res", "=", ";", "i", "<", "size", "i", "++", "{", "}", ";", "i", "<", "i", "++", "{", "}", "(", ")", "int", "i", "=", "0", ";", "int", "i", "=", "size", "size", "+", "enlarge", ";", "int", "*", "malloc", "=", "=", "0", "(", ")", "res", "[", "i", "]", "nums", "[", "i", "]", "res", "[", "i", "]", "*", "sizeof", "(", ")", "(", ")", "size", "+", "enlarge", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 148, "ast_depth": 14, "n_identifiers": 8, "vocab_size": 29}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/c/chapter_array_and_linkedlist/array.c#35-42", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/array.c", "language": "Java"}, "method": {"name": "insert", "qualified_name": "codes.c.chapter_array_and_linkedlist.array.c#insert", "start_line": 35, "end_line": 42, "signature": "insert(int *nums, int size, int num, int index)", "original_code": "void insert(int *nums, int size, int num, int index) {\r\n    // \u628a\u7d22\u5f15 index \u4ee5\u53ca\u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u540e\u79fb\u52a8\u4e00\u4f4d\r\n    for (int i = size - 1; i > index; i--) {\r\n        nums[i] = nums[i - 1];\r\n    }\r\n    // \u5c06 num \u8d4b\u7ed9 index \u5904\u5143\u7d20\r\n    nums[index] = num;\r\n}", "doc_comment": "/* \u5728\u6570\u7ec4\u7684\u7d22\u5f15 index \u5904\u63d2\u5165\u5143\u7d20 num */"}, "code_tokens": ["void", "insert", "(", ",", ",", ",", ")", "{", "// \u628a\u7d22\u5f15 index \u4ee5\u53ca\u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u540e\u79fb\u52a8\u4e00\u4f4d\r", "// \u5c06 num \u8d4b\u7ed9 index \u5904\u5143\u7d20\r", "}", "nums", "size", "num", "index", "for", "(", ";", ")", ";", "int", "*", "int", "int", "int", ";", "i", ">", "index", "i", "--", "{", "}", "=", "num", "int", "i", "=", ";", "nums", "[", "index", "]", "size", "-", "1", "=", "nums", "[", "i", "]", "nums", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 86, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 25}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/c/chapter_array_and_linkedlist/array.c#46-51", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/array.c", "language": "Java"}, "method": {"name": "removeItem", "qualified_name": "codes.c.chapter_array_and_linkedlist.array.c#removeItem", "start_line": 46, "end_line": 51, "signature": "removeItem(int *nums, int size, int index)", "original_code": "void removeItem(int *nums, int size, int index) {\r\n    // \u628a\u7d22\u5f15 index \u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u524d\u79fb\u52a8\u4e00\u4f4d\r\n    for (int i = index; i < size - 1; i++) {\r\n        nums[i] = nums[i + 1];\r\n    }\r\n}", "doc_comment": "// \u6ce8\u610f\uff1astdio.h \u5360\u7528\u4e86 remove \u5173\u952e\u8bcd"}, "code_tokens": ["void", "removeItem", "(", ",", ",", ")", "{", "// \u628a\u7d22\u5f15 index \u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u524d\u79fb\u52a8\u4e00\u4f4d\r", "}", "nums", "size", "index", "for", "(", ";", ")", "int", "*", "int", "int", ";", "i", "<", "i", "++", "{", "}", "int", "i", "=", "index", "size", "-", "1", ";", "=", "nums", "[", "i", "]", "nums", "[", "]", "i", "+", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 70, "ast_depth": 10, "n_identifiers": 5, "vocab_size": 24}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/c/chapter_array_and_linkedlist/array.c#54-60", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/array.c", "language": "Java"}, "method": {"name": "traverse", "qualified_name": "codes.c.chapter_array_and_linkedlist.array.c#traverse", "start_line": 54, "end_line": 60, "signature": "traverse(int *nums, int size)", "original_code": "void traverse(int *nums, int size) {\r\n    int count = 0;\r\n    // \u901a\u8fc7\u7d22\u5f15\u904d\u5386\u6570\u7ec4\r\n    for (int i = 0; i < size; i++) {\r\n        count += nums[i];\r\n    }\r\n}", "doc_comment": "/* \u904d\u5386\u6570\u7ec4 */"}, "code_tokens": ["void", "traverse", "(", ",", ")", "{", "// \u901a\u8fc7\u7d22\u5f15\u904d\u5386\u6570\u7ec4\r", "}", "nums", "size", ";", "for", "(", ";", ")", "int", "*", "int", "int", "count", "=", "0", ";", "i", "<", "size", "i", "++", "{", "}", "int", "i", "=", "0", ";", "count", "+=", "nums", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 63, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 23}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/c/chapter_array_and_linkedlist/array.c#63-69", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/array.c", "language": "Java"}, "method": {"name": "find", "qualified_name": "codes.c.chapter_array_and_linkedlist.array.c#find", "start_line": 63, "end_line": 69, "signature": "find(int *nums, int size, int target)", "original_code": "int find(int *nums, int size, int target) {\r\n    for (int i = 0; i < size; i++) {\r\n        if (nums[i] == target)\r\n            return i;\r\n    }\r\n    return -1;\r\n}", "doc_comment": "/* \u5728\u6570\u7ec4\u4e2d\u67e5\u627e\u6307\u5b9a\u5143\u7d20 */"}, "code_tokens": ["find", "int", "(", ",", ",", ")", "{", "}", "nums", "size", "target", "for", "(", ";", ")", "return", ";", "int", "*", "int", "int", ";", "i", "<", "size", "i", "++", "{", "}", "-", "1", "int", "i", "=", "0", "if", "(", ")", "return", "i", ";", "==", "target", "nums", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 73, "ast_depth": 10, "n_identifiers": 5, "vocab_size": 25}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/c/chapter_array_and_linkedlist/array.c#72-114", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/array.c", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.c.chapter_array_and_linkedlist.array.c#main", "start_line": 72, "end_line": 114, "signature": "main()", "original_code": "int main() {\r\n    /* \u521d\u59cb\u5316\u6570\u7ec4 */\r\n    int size = 5;\r\n    int arr[5];\r\n    printf(\"\u6570\u7ec4 arr = \");\r\n    printArray(arr, size);\r\n\r\n    int nums[5] = {1, 3, 2, 5, 4};\r\n    printf(\"\u6570\u7ec4 nums = \");\r\n    printArray(nums, size);\r\n\r\n    /* \u968f\u673a\u8bbf\u95ee */\r\n    int randomNum = randomAccess(nums, size);\r\n    printf(\"\u5728 nums \u4e2d\u83b7\u53d6\u968f\u673a\u5143\u7d20 %d\", randomNum);\r\n\r\n    /* \u957f\u5ea6\u6269\u5c55 */\r\n    int enlarge = 3;\r\n    int *res = extend(nums, size, enlarge);\r\n    size += enlarge;\r\n    printf(\"\u5c06\u6570\u7ec4\u957f\u5ea6\u6269\u5c55\u81f3 8 \uff0c\u5f97\u5230 nums = \");\r\n    printArray(res, size);\r\n\r\n    /* \u63d2\u5165\u5143\u7d20 */\r\n    insert(res, size, 6, 3);\r\n    printf(\"\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = \");\r\n    printArray(res, size);\r\n\r\n    /* \u5220\u9664\u5143\u7d20 */\r\n    removeItem(res, size, 2);\r\n    printf(\"\u5220\u9664\u7d22\u5f15 2 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = \");\r\n    printArray(res, size);\r\n\r\n    /* \u904d\u5386\u6570\u7ec4 */\r\n    traverse(res, size);\r\n\r\n    /* \u67e5\u627e\u5143\u7d20 */\r\n    int index = find(res, size, 3);\r\n    printf(\"\u5728 res \u4e2d\u67e5\u627e\u5143\u7d20 3 \uff0c\u5f97\u5230\u7d22\u5f15 = %d\\n\", index);\r\n\r\n    /* \u91ca\u653e\u5185\u5b58 */\r\n    free(res);\r\n    return 0;\r\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "/* \u521d\u59cb\u5316\u6570\u7ec4 */", "/* \u968f\u673a\u8bbf\u95ee */", "/* \u957f\u5ea6\u6269\u5c55 */", "/* \u63d2\u5165\u5143\u7d20 */", "/* \u5220\u9664\u5143\u7d20 */", "/* \u904d\u5386\u6570\u7ec4 */", "/* \u67e5\u627e\u5143\u7d20 */", "/* \u91ca\u653e\u5185\u5b58 */", "}", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "return", "0", ";", "int", "size", "=", "5", "int", "arr", "printf", "printArray", "int", "nums", "=", "printf", "printArray", "int", "randomNum", "=", "printf", "int", "enlarge", "=", "3", "int", "*", "res", "=", "size", "+=", "enlarge", "printf", "printArray", "insert", "printf", "printArray", "removeItem", "printf", "printArray", "traverse", "int", "index", "=", "printf", "free", "[", "]", "(", ")", "(", "arr", ",", "size", ")", "[", "]", "{", "1", ",", "3", ",", "2", ",", "5", ",", "4", "}", "(", ")", "(", "nums", ",", "size", ")", "randomAccess", "(", ",", "randomNum", ")", "extend", "(", ")", "(", "res", ",", "size", ")", "(", "res", ",", "size", ",", "6", ",", "3", ")", "(", ")", "(", "res", ",", "size", ")", "(", "res", ",", "size", ",", "2", ")", "(", ")", "(", "res", ",", "size", ")", "(", "res", ",", "size", ")", "find", "(", ",", "index", ")", "(", "res", ")", "5", "\"", "\u6570\u7ec4 arr = ", "\"", "5", "\"", "\u6570\u7ec4 nums = ", "\"", "(", "nums", ",", "size", ")", "\"", "\u5728 nums \u4e2d\u83b7\u53d6\u968f\u673a\u5143\u7d20 %d", "\"", "(", "nums", ",", "size", ",", "enlarge", ")", "\"", "\u5c06\u6570\u7ec4\u957f\u5ea6\u6269\u5c55\u81f3 8 \uff0c\u5f97\u5230 nums = ", "\"", "\"", "\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = ", "\"", "\"", "\u5220\u9664\u7d22\u5f15 2 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = ", "\"", "(", "res", ",", "size", ",", "3", ")", "\"", "\u5728 res \u4e2d\u67e5\u627e\u5143\u7d20 3 \uff0c\u5f97\u5230\u7d22\u5f15 = %d", "\\n", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 307, "ast_depth": 8, "n_identifiers": 17, "vocab_size": 54}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/c/chapter_dynamic_programming/climbing_stairs_backtrack.c#10-24", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/c/chapter_dynamic_programming/climbing_stairs_backtrack.c", "language": "Java"}, "method": {"name": "backtrack", "qualified_name": "codes.c.chapter_dynamic_programming.climbing_stairs_backtrack.c#backtrack", "start_line": 10, "end_line": 24, "signature": "backtrack(int *choices, int state, int n, int *res, int len)", "original_code": "void backtrack(int *choices, int state, int n, int *res, int len) {\r\n    // \u5f53\u722c\u5230\u7b2c n \u9636\u65f6\uff0c\u65b9\u6848\u6570\u91cf\u52a0 1\r\n    if (state == n)\r\n        res[0]++;\r\n    // \u904d\u5386\u6240\u6709\u9009\u62e9\r\n    for (int i = 0; i < len; i++) {\r\n        int choice = choices[i];\r\n        // \u526a\u679d\uff1a\u4e0d\u5141\u8bb8\u8d8a\u8fc7\u7b2c n \u9636\r\n        if (state + choice > n)\r\n            continue;\r\n        // \u5c1d\u8bd5\uff1a\u505a\u51fa\u9009\u62e9\uff0c\u66f4\u65b0\u72b6\u6001\r\n        backtrack(choices, state + choice, n, res, len);\r\n        // \u56de\u9000\r\n    }\r\n}", "doc_comment": "/* \u56de\u6eaf */"}, "code_tokens": ["void", "backtrack", "(", ",", ",", ",", ",", ")", "{", "// \u5f53\u722c\u5230\u7b2c n \u9636\u65f6\uff0c\u65b9\u6848\u6570\u91cf\u52a0 1\r", "// \u904d\u5386\u6240\u6709\u9009\u62e9\r", "}", "choices", "state", "n", "res", "len", "if", "for", "(", ";", ")", "int", "*", "int", "int", "int", "*", "int", "(", ")", ";", ";", "i", "<", "len", "i", "++", "{", "// \u526a\u679d\uff1a\u4e0d\u5141\u8bb8\u8d8a\u8fc7\u7b2c n \u9636\r", "// \u5c1d\u8bd5\uff1a\u505a\u51fa\u9009\u62e9\uff0c\u66f4\u65b0\u72b6\u6001\r", "// \u56de\u9000\r", "}", "state", "==", "n", "++", "int", "i", "=", "0", ";", "if", ";", "res", "[", "0", "]", "int", "choice", "=", "(", ")", "continue", ";", "backtrack", "choices", "[", "i", "]", ">", "n", "(", "choices", ",", ",", "n", ",", "res", ",", "len", ")", "state", "+", "choice", "state", "+", "choice"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 130, "ast_depth": 10, "n_identifiers": 8, "vocab_size": 34}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/c/chapter_dynamic_programming/climbing_stairs_backtrack.c#27-37", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/c/chapter_dynamic_programming/climbing_stairs_backtrack.c", "language": "Java"}, "method": {"name": "climbingStairsBacktrack", "qualified_name": "codes.c.chapter_dynamic_programming.climbing_stairs_backtrack.c#climbingStairsBacktrack", "start_line": 27, "end_line": 37, "signature": "climbingStairsBacktrack(int n)", "original_code": "int climbingStairsBacktrack(int n) {\r\n    int choices[2] = {1, 2}; // \u53ef\u9009\u62e9\u5411\u4e0a\u722c 1 \u6216 2 \u9636\r\n    int state = 0;           // \u4ece\u7b2c 0 \u9636\u5f00\u59cb\u722c\r\n    int *res = (int *)malloc(sizeof(int));\r\n    *res = 0; // \u4f7f\u7528 res[0] \u8bb0\u5f55\u65b9\u6848\u6570\u91cf\r\n    int len = sizeof(choices) / sizeof(int);\r\n    backtrack(choices, state, n, res, len);\r\n    int result = *res;\r\n    free(res);\r\n    return result;\r\n}", "doc_comment": "/* \u722c\u697c\u68af\uff1a\u56de\u6eaf */"}, "code_tokens": ["climbingStairsBacktrack", "int", "(", ")", "{", "// \u53ef\u9009\u62e9\u5411\u4e0a\u722c 1 \u6216 2 \u9636\r", "// \u4ece\u7b2c 0 \u9636\u5f00\u59cb\u722c\r", "// \u4f7f\u7528 res[0] \u8bb0\u5f55\u65b9\u6848\u6570\u91cf\r", "}", "n", ";", ";", ";", "*", ";", ";", ";", ";", ";", "return", "result", ";", "int", "int", "choices", "=", "int", "state", "=", "0", "int", "*", "res", "=", "res", "=", "0", "int", "len", "=", "backtrack", "int", "result", "=", "res", "free", "[", "]", "{", "1", ",", "2", "}", "(", ")", "/", "(", "choices", ",", "state", ",", "n", ",", "res", ",", "len", ")", "*", "(", "res", ")", "2", "int", "*", "malloc", "sizeof", "sizeof", "(", ")", "(", "choices", ")", "(", ")", "sizeof", "(", ")", "int", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 142, "ast_depth": 13, "n_identifiers": 11, "vocab_size": 30}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/c/chapter_dynamic_programming/climbing_stairs_backtrack.c#40-47", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/c/chapter_dynamic_programming/climbing_stairs_backtrack.c", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.c.chapter_dynamic_programming.climbing_stairs_backtrack.c#main", "start_line": 40, "end_line": 47, "signature": "main()", "original_code": "int main() {\r\n    int n = 9;\r\n\r\n    int res = climbingStairsBacktrack(n);\r\n    printf(\"\u722c %d \u9636\u697c\u68af\u5171\u6709 %d \u79cd\u65b9\u6848\\n\", n, res);\r\n\r\n    return 0;\r\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "}", ";", ";", ";", "return", "0", ";", "int", "n", "=", "9", "int", "res", "=", "printf", "climbingStairsBacktrack", "(", ",", "n", ",", "res", ")", "(", "n", ")", "\"", "\u722c %d \u9636\u697c\u68af\u5171\u6709 %d \u79cd\u65b9\u6848", "\\n", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 52, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 19}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/cpp/chapter_array_and_linkedlist/array.cpp#10-16", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/cpp/chapter_array_and_linkedlist/array.cpp", "language": "Java"}, "method": {"name": "randomAccess", "qualified_name": "codes.cpp.chapter_array_and_linkedlist.array.cpp#randomAccess", "start_line": 10, "end_line": 16, "signature": "randomAccess(int *nums, int size)", "original_code": "int randomAccess(int *nums, int size) {\n    // \u5728\u533a\u95f4 [0, size) \u4e2d\u968f\u673a\u62bd\u53d6\u4e00\u4e2a\u6570\u5b57\n    int randomIndex = rand() % size;\n    // \u83b7\u53d6\u5e76\u8fd4\u56de\u968f\u673a\u5143\u7d20\n    int randomNum = nums[randomIndex];\n    return randomNum;\n}", "doc_comment": "/* \u968f\u673a\u8bbf\u95ee\u5143\u7d20 */"}, "code_tokens": ["randomAccess", "int", "(", ",", ")", "{", "// \u5728\u533a\u95f4 [0, size) \u4e2d\u968f\u673a\u62bd\u53d6\u4e00\u4e2a\u6570\u5b57", "// \u83b7\u53d6\u5e76\u8fd4\u56de\u968f\u673a\u5143\u7d20", "}", "nums", "size", ";", ";", "return", "randomNum", ";", "int", "*", "int", "int", "randomIndex", "=", "int", "randomNum", "=", "%", "size", "nums", "[", "randomIndex", "]", "rand", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 55, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 21}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/cpp/chapter_array_and_linkedlist/array.cpp#19-30", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/cpp/chapter_array_and_linkedlist/array.cpp", "language": "Java"}, "method": {"name": "extend", "qualified_name": "codes.cpp.chapter_array_and_linkedlist.array.cpp#extend", "start_line": 19, "end_line": 30, "signature": "extend(int *nums, int size, int enlarge)", "original_code": "int *extend(int *nums, int size, int enlarge) {\n    // \u521d\u59cb\u5316\u4e00\u4e2a\u6269\u5c55\u957f\u5ea6\u540e\u7684\u6570\u7ec4\n    int *res = new int[size + enlarge];\n    // \u5c06\u539f\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u5143\u7d20\u590d\u5236\u5230\u65b0\u6570\u7ec4\n    for (int i = 0; i < size; i++) {\n        res[i] = nums[i];\n    }\n    // \u91ca\u653e\u5185\u5b58\n    delete[] nums;\n    // \u8fd4\u56de\u6269\u5c55\u540e\u7684\u65b0\u6570\u7ec4\n    return res;\n}", "doc_comment": "/* \u6269\u5c55\u6570\u7ec4\u957f\u5ea6 */"}, "code_tokens": ["extend", "int", "*", "(", ",", ",", ")", "{", "// \u521d\u59cb\u5316\u4e00\u4e2a\u6269\u5c55\u957f\u5ea6\u540e\u7684\u6570\u7ec4", "// \u5c06\u539f\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u5143\u7d20\u590d\u5236\u5230\u65b0\u6570\u7ec4", "// \u91ca\u653e\u5185\u5b58", "// \u8fd4\u56de\u6269\u5c55\u540e\u7684\u65b0\u6570\u7ec4", "}", "nums", "size", "enlarge", ";", "for", "(", ";", ")", ";", "return", "res", ";", "int", "*", "int", "int", "int", "*", "res", "=", ";", "i", "<", "size", "i", "++", "{", "}", "delete", "nums", "new", "int", "i", "=", "0", ";", "[", "]", "int", "[", "]", "=", "size", "+", "enlarge", "res", "[", "i", "]", "nums", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 103, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 29}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/cpp/chapter_array_and_linkedlist/array.cpp#33-40", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/cpp/chapter_array_and_linkedlist/array.cpp", "language": "Java"}, "method": {"name": "insert", "qualified_name": "codes.cpp.chapter_array_and_linkedlist.array.cpp#insert", "start_line": 33, "end_line": 40, "signature": "insert(int *nums, int size, int num, int index)", "original_code": "void insert(int *nums, int size, int num, int index) {\n    // \u628a\u7d22\u5f15 index \u4ee5\u53ca\u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u540e\u79fb\u52a8\u4e00\u4f4d\n    for (int i = size - 1; i > index; i--) {\n        nums[i] = nums[i - 1];\n    }\n    // \u5c06 num \u8d4b\u7ed9 index \u5904\u5143\u7d20\n    nums[index] = num;\n}", "doc_comment": "/* \u5728\u6570\u7ec4\u7684\u7d22\u5f15 index \u5904\u63d2\u5165\u5143\u7d20 num */"}, "code_tokens": ["void", "insert", "(", ",", ",", ",", ")", "{", "// \u628a\u7d22\u5f15 index \u4ee5\u53ca\u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u540e\u79fb\u52a8\u4e00\u4f4d", "// \u5c06 num \u8d4b\u7ed9 index \u5904\u5143\u7d20", "}", "nums", "size", "num", "index", "for", "(", ";", ")", ";", "int", "*", "int", "int", "int", ";", "i", ">", "index", "i", "--", "{", "}", "=", "num", "int", "i", "=", ";", "nums", "[", "index", "]", "size", "-", "1", "=", "nums", "[", "i", "]", "nums", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 86, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 25}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/cpp/chapter_array_and_linkedlist/array.cpp#43-48", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/cpp/chapter_array_and_linkedlist/array.cpp", "language": "Java"}, "method": {"name": "remove", "qualified_name": "codes.cpp.chapter_array_and_linkedlist.array.cpp#remove", "start_line": 43, "end_line": 48, "signature": "remove(int *nums, int size, int index)", "original_code": "void remove(int *nums, int size, int index) {\n    // \u628a\u7d22\u5f15 index \u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u524d\u79fb\u52a8\u4e00\u4f4d\n    for (int i = index; i < size - 1; i++) {\n        nums[i] = nums[i + 1];\n    }\n}", "doc_comment": "/* \u5220\u9664\u7d22\u5f15 index \u5904\u5143\u7d20 */"}, "code_tokens": ["void", "remove", "(", ",", ",", ")", "{", "// \u628a\u7d22\u5f15 index \u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u524d\u79fb\u52a8\u4e00\u4f4d", "}", "nums", "size", "index", "for", "(", ";", ")", "int", "*", "int", "int", ";", "i", "<", "i", "++", "{", "}", "int", "i", "=", "index", "size", "-", "1", ";", "=", "nums", "[", "i", "]", "nums", "[", "]", "i", "+", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 70, "ast_depth": 10, "n_identifiers": 5, "vocab_size": 24}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/cpp/chapter_array_and_linkedlist/array.cpp#51-57", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/cpp/chapter_array_and_linkedlist/array.cpp", "language": "Java"}, "method": {"name": "traverse", "qualified_name": "codes.cpp.chapter_array_and_linkedlist.array.cpp#traverse", "start_line": 51, "end_line": 57, "signature": "traverse(int *nums, int size)", "original_code": "void traverse(int *nums, int size) {\n    int count = 0;\n    // \u901a\u8fc7\u7d22\u5f15\u904d\u5386\u6570\u7ec4\n    for (int i = 0; i < size; i++) {\n        count += nums[i];\n    }\n}", "doc_comment": "/* \u904d\u5386\u6570\u7ec4 */"}, "code_tokens": ["void", "traverse", "(", ",", ")", "{", "// \u901a\u8fc7\u7d22\u5f15\u904d\u5386\u6570\u7ec4", "}", "nums", "size", ";", "for", "(", ";", ")", "int", "*", "int", "int", "count", "=", "0", ";", "i", "<", "size", "i", "++", "{", "}", "int", "i", "=", "0", ";", "count", "+=", "nums", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 63, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 23}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/cpp/chapter_array_and_linkedlist/array.cpp#60-66", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/cpp/chapter_array_and_linkedlist/array.cpp", "language": "Java"}, "method": {"name": "find", "qualified_name": "codes.cpp.chapter_array_and_linkedlist.array.cpp#find", "start_line": 60, "end_line": 66, "signature": "find(int *nums, int size, int target)", "original_code": "int find(int *nums, int size, int target) {\n    for (int i = 0; i < size; i++) {\n        if (nums[i] == target)\n            return i;\n    }\n    return -1;\n}", "doc_comment": "/* \u5728\u6570\u7ec4\u4e2d\u67e5\u627e\u6307\u5b9a\u5143\u7d20 */"}, "code_tokens": ["find", "int", "(", ",", ",", ")", "{", "}", "nums", "size", "target", "for", "(", ";", ")", "return", ";", "int", "*", "int", "int", ";", "i", "<", "size", "i", "++", "{", "}", "-", "1", "int", "i", "=", "0", "if", "(", ")", "return", "i", ";", "==", "target", "nums", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 73, "ast_depth": 10, "n_identifiers": 5, "vocab_size": 25}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/cpp/chapter_array_and_linkedlist/array.cpp#69-113", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/cpp/chapter_array_and_linkedlist/array.cpp", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.cpp.chapter_array_and_linkedlist.array.cpp#main", "start_line": 69, "end_line": 113, "signature": "main()", "original_code": "int main() {\n    /* \u521d\u59cb\u5316\u6570\u7ec4 */\n    int size = 5;\n    int *arr = new int[size];\n    cout << \"\u6570\u7ec4 arr = \";\n    printArray(arr, size);\n\n    int *nums = new int[size]{1, 3, 2, 5, 4};\n    cout << \"\u6570\u7ec4 nums = \";\n    printArray(nums, size);\n\n    /* \u968f\u673a\u8bbf\u95ee */\n    int randomNum = randomAccess(nums, size);\n    cout << \"\u5728 nums \u4e2d\u83b7\u53d6\u968f\u673a\u5143\u7d20 \" << randomNum << endl;\n\n    /* \u957f\u5ea6\u6269\u5c55 */\n    int enlarge = 3;\n    nums = extend(nums, size, enlarge);\n    size += enlarge;\n    cout << \"\u5c06\u6570\u7ec4\u957f\u5ea6\u6269\u5c55\u81f3 8 \uff0c\u5f97\u5230 nums = \";\n    printArray(nums, size);\n\n    /* \u63d2\u5165\u5143\u7d20 */\n    insert(nums, size, 6, 3);\n    cout << \"\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = \";\n    printArray(nums, size);\n\n    /* \u5220\u9664\u5143\u7d20 */\n    remove(nums, size, 2);\n    cout << \"\u5220\u9664\u7d22\u5f15 2 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = \";\n    printArray(nums, size);\n\n    /* \u904d\u5386\u6570\u7ec4 */\n    traverse(nums, size);\n\n    /* \u67e5\u627e\u5143\u7d20 */\n    int index = find(nums, size, 3);\n    cout << \"\u5728 nums \u4e2d\u67e5\u627e\u5143\u7d20 3 \uff0c\u5f97\u5230\u7d22\u5f15 = \" << index << endl;\n\n    // \u91ca\u653e\u5185\u5b58\n    delete[] arr;\n    delete[] nums;\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "/* \u521d\u59cb\u5316\u6570\u7ec4 */", "/* \u968f\u673a\u8bbf\u95ee */", "/* \u957f\u5ea6\u6269\u5c55 */", "/* \u63d2\u5165\u5143\u7d20 */", "/* \u5220\u9664\u5143\u7d20 */", "/* \u904d\u5386\u6570\u7ec4 */", "/* \u67e5\u627e\u5143\u7d20 */", "// \u91ca\u653e\u5185\u5b58", "}", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "return", "0", ";", "int", "size", "=", "5", "int", "*", "arr", "=", "cout", "<<", "printArray", "int", "*", "nums", "=", "cout", "<<", "printArray", "int", "randomNum", "=", "<<", "endl", "int", "enlarge", "=", "3", "nums", "=", "size", "+=", "enlarge", "cout", "<<", "printArray", "insert", "cout", "<<", "printArray", "remove", "cout", "<<", "printArray", "traverse", "int", "index", "=", "<<", "endl", "delete", "arr", "delete", "nums", "new", "\"", "\u6570\u7ec4 arr = ", "\"", "(", "arr", ",", "size", ")", "{", "1", ",", "3", ",", "2", ",", "5", ",", "4", "}", "\"", "\u6570\u7ec4 nums = ", "\"", "(", "nums", ",", "size", ")", "randomAccess", "<<", "randomNum", "extend", "\"", "\u5c06\u6570\u7ec4\u957f\u5ea6\u6269\u5c55\u81f3 8 \uff0c\u5f97\u5230 nums = ", "\"", "(", "nums", ",", "size", ")", "(", "nums", ",", "size", ",", "6", ",", "3", ")", "\"", "\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = ", "\"", "(", "nums", ",", "size", ")", "(", "nums", ",", "size", ",", "2", ")", "\"", "\u5220\u9664\u7d22\u5f15 2 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = ", "\"", "(", "nums", ",", "size", ")", "(", "nums", ",", "size", ")", "find", "<<", "index", "[", "]", "[", "]", "int", "[", "size", "]", "new", "(", "nums", ",", "size", ")", "cout", "<<", "(", "nums", ",", "size", ",", "enlarge", ")", "(", "nums", ",", "size", ",", "3", ")", "cout", "<<", "int", "[", "size", "]", "\"", "\u5728 nums \u4e2d\u83b7\u53d6\u968f\u673a\u5143\u7d20 ", "\"", "\"", "\u5728 nums \u4e2d\u67e5\u627e\u5143\u7d20 3 \uff0c\u5f97\u5230\u7d22\u5f15 = ", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 318, "ast_depth": 9, "n_identifiers": 16, "vocab_size": 55}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/cpp/chapter_array_and_linkedlist/list.cpp#10-72", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/cpp/chapter_array_and_linkedlist/list.cpp", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.cpp.chapter_array_and_linkedlist.list.cpp#main", "start_line": 10, "end_line": 72, "signature": "main()", "original_code": "int main() {\n    /* \u521d\u59cb\u5316\u5217\u8868 */\n    vector<int> nums = {1, 3, 2, 5, 4};\n    cout << \"\u5217\u8868 nums = \";\n    printVector(nums);\n\n    /* \u8bbf\u95ee\u5143\u7d20 */\n    int num = nums[1];\n    cout << \"\u8bbf\u95ee\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 num = \" << num << endl;\n\n    /* \u66f4\u65b0\u5143\u7d20 */\n    nums[1] = 0;\n    cout << \"\u5c06\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\u66f4\u65b0\u4e3a 0 \uff0c\u5f97\u5230 nums = \";\n    printVector(nums);\n\n    /* \u6e05\u7a7a\u5217\u8868 */\n    nums.clear();\n    cout << \"\u6e05\u7a7a\u5217\u8868\u540e nums = \";\n    printVector(nums);\n\n    /* \u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 */\n    nums.push_back(1);\n    nums.push_back(3);\n    nums.push_back(2);\n    nums.push_back(5);\n    nums.push_back(4);\n    cout << \"\u6dfb\u52a0\u5143\u7d20\u540e nums = \";\n    printVector(nums);\n\n    /* \u4e2d\u95f4\u63d2\u5165\u5143\u7d20 */\n    nums.insert(nums.begin() + 3, 6);\n    cout << \"\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = \";\n    printVector(nums);\n\n    /* \u5220\u9664\u5143\u7d20 */\n    nums.erase(nums.begin() + 3);\n    cout << \"\u5220\u9664\u7d22\u5f15 3 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = \";\n    printVector(nums);\n\n    /* \u901a\u8fc7\u7d22\u5f15\u904d\u5386\u5217\u8868 */\n    int count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        count += nums[i];\n    }\n    /* \u76f4\u63a5\u904d\u5386\u5217\u8868\u5143\u7d20 */\n    count = 0;\n    for (int x : nums) {\n        count += x;\n    }\n\n    /* \u62fc\u63a5\u4e24\u4e2a\u5217\u8868 */\n    vector<int> nums1 = {6, 8, 7, 10, 9};\n    nums.insert(nums.end(), nums1.begin(), nums1.end());\n    cout << \"\u5c06\u5217\u8868 nums1 \u62fc\u63a5\u5230 nums \u4e4b\u540e\uff0c\u5f97\u5230 nums = \";\n    printVector(nums);\n\n    /* \u6392\u5e8f\u5217\u8868 */\n    sort(nums.begin(), nums.end());\n    cout << \"\u6392\u5e8f\u5217\u8868\u540e nums = \";\n    printVector(nums);\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "/* \u521d\u59cb\u5316\u5217\u8868 */", "/* \u8bbf\u95ee\u5143\u7d20 */", "/* \u66f4\u65b0\u5143\u7d20 */", "/* \u6e05\u7a7a\u5217\u8868 */", "/* \u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 */", "/* \u4e2d\u95f4\u63d2\u5165\u5143\u7d20 */", "/* \u5220\u9664\u5143\u7d20 */", "/* \u901a\u8fc7\u7d22\u5f15\u904d\u5386\u5217\u8868 */", "/* \u76f4\u63a5\u904d\u5386\u5217\u8868\u5143\u7d20 */", "/* \u62fc\u63a5\u4e24\u4e2a\u5217\u8868 */", "/* \u6392\u5e8f\u5217\u8868 */", "}", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "for", "(", ";", ")", ";", "for", "(", "x", ":", "nums", ")", ";", ";", ";", ";", ";", ";", ";", "return", "0", ";", "vector", "nums", "=", "cout", "<<", "printVector", "int", "num", "=", "<<", "endl", "=", "0", "cout", "<<", "printVector", "nums", ".", "clear", "cout", "<<", "printVector", "nums", ".", "push_back", "nums", ".", "push_back", "nums", ".", "push_back", "nums", ".", "push_back", "nums", ".", "push_back", "cout", "<<", "printVector", "nums", ".", "insert", "cout", "<<", "printVector", "nums", ".", "erase", "cout", "<<", "printVector", "int", "count", "=", "0", ";", "i", "<", "i", "++", "{", "}", "count", "=", "0", "int", "{", "}", "vector", "nums1", "=", "nums", ".", "insert", "cout", "<<", "printVector", "sort", "cout", "<<", "printVector", "<", ">", "{", "1", ",", "3", ",", "2", ",", "5", ",", "4", "}", "\"", "\u5217\u8868 nums = ", "\"", "(", "nums", ")", "nums", "[", "1", "]", "<<", "num", "nums", "[", "1", "]", "\"", "\u5c06\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\u66f4\u65b0\u4e3a 0 \uff0c\u5f97\u5230 nums = ", "\"", "(", "nums", ")", "(", ")", "\"", "\u6e05\u7a7a\u5217\u8868\u540e nums = ", "\"", "(", "nums", ")", "(", "1", ")", "(", "3", ")", "(", "2", ")", "(", "5", ")", "(", "4", ")", "\"", "\u6dfb\u52a0\u5143\u7d20\u540e nums = ", "\"", "(", "nums", ")", "(", ",", "6", ")", "\"", "\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = ", "\"", "(", "nums", ")", "(", ")", "\"", "\u5220\u9664\u7d22\u5f15 3 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = ", "\"", "(", "nums", ")", "int", "i", "=", "0", "nums", ".", "size", ";", ";", "<", ">", "{", "6", ",", "8", ",", "7", ",", "10", ",", "9", "}", "(", ",", ",", ")", "\"", "\u5c06\u5217\u8868 nums1 \u62fc\u63a5\u5230 nums \u4e4b\u540e\uff0c\u5f97\u5230 nums = ", "\"", "(", "nums", ")", "(", ",", ")", "\"", "\u6392\u5e8f\u5217\u8868\u540e nums = ", "\"", "(", "nums", ")", "int", "cout", "<<", "+", "3", "+", "3", "(", ")", "count", "+=", "count", "+=", "x", "int", "nums", ".", "end", "nums1", ".", "begin", "nums1", ".", "end", "nums", ".", "begin", "nums", ".", "end", "\"", "\u8bbf\u95ee\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 num = ", "\"", "nums", ".", "begin", "nums", ".", "begin", "nums", "[", "i", "]", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 471, "ast_depth": 10, "n_identifiers": 18, "vocab_size": 71}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/cpp/chapter_dynamic_programming/climbing_stairs_backtrack.cpp#11-24", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/cpp/chapter_dynamic_programming/climbing_stairs_backtrack.cpp", "language": "Java"}, "method": {"name": "backtrack", "qualified_name": "codes.cpp.chapter_dynamic_programming.climbing_stairs_backtrack.cpp#backtrack", "start_line": 11, "end_line": 24, "signature": "backtrack(vector<int> &choices, int state, int n, vector<int> &res)", "original_code": "void backtrack(vector<int> &choices, int state, int n, vector<int> &res) {\n    // \u5f53\u722c\u5230\u7b2c n \u9636\u65f6\uff0c\u65b9\u6848\u6570\u91cf\u52a0 1\n    if (state == n)\n        res[0]++;\n    // \u904d\u5386\u6240\u6709\u9009\u62e9\n    for (auto &choice : choices) {\n        // \u526a\u679d\uff1a\u4e0d\u5141\u8bb8\u8d8a\u8fc7\u7b2c n \u9636\n        if (state + choice > n)\n            continue;\n        // \u5c1d\u8bd5\uff1a\u505a\u51fa\u9009\u62e9\uff0c\u66f4\u65b0\u72b6\u6001\n        backtrack(choices, state + choice, n, res);\n        // \u56de\u9000\n    }\n}", "doc_comment": "/* \u56de\u6eaf */"}, "code_tokens": ["void", "backtrack", "(", ",", ",", ",", ")", "{", "// \u5f53\u722c\u5230\u7b2c n \u9636\u65f6\uff0c\u65b9\u6848\u6570\u91cf\u52a0 1", "// \u904d\u5386\u6240\u6709\u9009\u62e9", "}", "choices", "state", "n", "res", "if", "for", "(", ":", "choices", ")", "{", "// \u526a\u679d\uff1a\u4e0d\u5141\u8bb8\u8d8a\u8fc7\u7b2c n \u9636", "// \u5c1d\u8bd5\uff1a\u505a\u51fa\u9009\u62e9\uff0c\u66f4\u65b0\u72b6\u6001", "// \u56de\u9000", "}", "vector", "&", "int", "int", "vector", "&", "(", ")", ";", "auto", "&", "choice", "if", ";", "<", ">", "<", ">", "state", "==", "n", "++", "(", ")", "continue", ";", "backtrack", "int", "int", "res", "[", "0", "]", ">", "n", "(", "choices", ",", ",", "n", ",", "res", ")", "state", "+", "choice", "state", "+", "choice"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 111, "ast_depth": 9, "n_identifiers": 7, "vocab_size": 34}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/cpp/chapter_dynamic_programming/climbing_stairs_backtrack.cpp#27-33", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/cpp/chapter_dynamic_programming/climbing_stairs_backtrack.cpp", "language": "Java"}, "method": {"name": "climbingStairsBacktrack", "qualified_name": "codes.cpp.chapter_dynamic_programming.climbing_stairs_backtrack.cpp#climbingStairsBacktrack", "start_line": 27, "end_line": 33, "signature": "climbingStairsBacktrack(int n)", "original_code": "int climbingStairsBacktrack(int n) {\n    vector<int> choices = {1, 2}; // \u53ef\u9009\u62e9\u5411\u4e0a\u722c 1 \u6216 2 \u9636\n    int state = 0;                // \u4ece\u7b2c 0 \u9636\u5f00\u59cb\u722c\n    vector<int> res = {0};        // \u4f7f\u7528 res[0] \u8bb0\u5f55\u65b9\u6848\u6570\u91cf\n    backtrack(choices, state, n, res);\n    return res[0];\n}", "doc_comment": "/* \u722c\u697c\u68af\uff1a\u56de\u6eaf */"}, "code_tokens": ["climbingStairsBacktrack", "int", "(", ")", "{", "// \u53ef\u9009\u62e9\u5411\u4e0a\u722c 1 \u6216 2 \u9636", "// \u4ece\u7b2c 0 \u9636\u5f00\u59cb\u722c", "// \u4f7f\u7528 res[0] \u8bb0\u5f55\u65b9\u6848\u6570\u91cf", "}", "n", ";", ";", ";", ";", "return", ";", "int", "vector", "choices", "=", "int", "state", "=", "0", "vector", "res", "=", "backtrack", "res", "[", "0", "]", "<", ">", "{", "1", ",", "2", "}", "<", ">", "{", "0", "}", "(", "choices", ",", "state", ",", "n", ",", "res", ")", "int", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 82, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 26}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/cpp/chapter_dynamic_programming/climbing_stairs_backtrack.cpp#36-43", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/cpp/chapter_dynamic_programming/climbing_stairs_backtrack.cpp", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.cpp.chapter_dynamic_programming.climbing_stairs_backtrack.cpp#main", "start_line": 36, "end_line": 43, "signature": "main()", "original_code": "int main() {\n    int n = 9;\n\n    int res = climbingStairsBacktrack(n);\n    cout << \"\u722c \" << n << \" \u9636\u697c\u68af\u5171\u6709 \" << res << \" \u79cd\u65b9\u6848\" << endl;\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "}", ";", ";", ";", "return", "0", ";", "int", "n", "=", "9", "int", "res", "=", "<<", "endl", "climbingStairsBacktrack", "<<", "(", "n", ")", "<<", "res", "\"", " \u79cd\u65b9\u6848", "\"", "<<", "<<", "n", "\"", " \u9636\u697c\u68af\u5171\u6709 ", "\"", "cout", "<<", "\"", "\u722c ", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 66, "ast_depth": 12, "n_identifiers": 6, "vocab_size": 21}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/csharp/chapter_array_and_linkedlist/array.cs#9-16", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/csharp/chapter_array_and_linkedlist/array.cs", "language": "Java"}, "method": {"name": "RandomAccess", "qualified_name": "codes.csharp.chapter_array_and_linkedlist.array.cs#RandomAccess", "start_line": 9, "end_line": 16, "signature": "RandomAccess(int[] nums)", "original_code": "public static int RandomAccess(int[] nums) {\n        Random random = new();\n        // \u5728\u533a\u95f4 [0, nums.Length) \u4e2d\u968f\u673a\u62bd\u53d6\u4e00\u4e2a\u6570\u5b57\n        int randomIndex = random.Next(nums.Length);\n        // \u83b7\u53d6\u5e76\u8fd4\u56de\u968f\u673a\u5143\u7d20\n        int randomNum = nums[randomIndex];\n        return randomNum;\n    }", "doc_comment": "/* \u968f\u673a\u8bbf\u95ee\u5143\u7d20 */"}, "code_tokens": ["RandomAccess", "public", "static", "int", "(", ")", "{", "// \u5728\u533a\u95f4 [0, nums.Length) \u4e2d\u968f\u673a\u62bd\u53d6\u4e00\u4e2a\u6570\u5b57", "// \u83b7\u53d6\u5e76\u8fd4\u56de\u968f\u673a\u5143\u7d20", "}", "nums", "Random", ";", ";", ";", "return", "randomNum", ";", "random", "=", "int", "randomIndex", "=", "int", "randomNum", "=", "int", "[", "]", "new", "random", ".", "Next", "nums", "[", "randomIndex", "]", "", "(", ")", "(", ")", "nums", ".", "Length"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 71, "ast_depth": 9, "n_identifiers": 7, "vocab_size": 25}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/csharp/chapter_array_and_linkedlist/array.cs#19-28", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/csharp/chapter_array_and_linkedlist/array.cs", "language": "Java"}, "method": {"name": "Extend", "qualified_name": "codes.csharp.chapter_array_and_linkedlist.array.cs#Extend", "start_line": 19, "end_line": 28, "signature": "Extend(int[] nums, int enlarge)", "original_code": "public static int[] Extend(int[] nums, int enlarge) {\n        // \u521d\u59cb\u5316\u4e00\u4e2a\u6269\u5c55\u957f\u5ea6\u540e\u7684\u6570\u7ec4\n        int[] res = new int[nums.Length + enlarge];\n        // \u5c06\u539f\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u5143\u7d20\u590d\u5236\u5230\u65b0\u6570\u7ec4\n        for (int i = 0; i < nums.Length; i++) {\n            res[i] = nums[i];\n        }\n        // \u8fd4\u56de\u6269\u5c55\u540e\u7684\u65b0\u6570\u7ec4\n        return res;\n    }", "doc_comment": "/* \u6269\u5c55\u6570\u7ec4\u957f\u5ea6 */"}, "code_tokens": ["Extend", "public", "static", "(", ",", ")", "{", "// \u521d\u59cb\u5316\u4e00\u4e2a\u6269\u5c55\u957f\u5ea6\u540e\u7684\u6570\u7ec4", "// \u5c06\u539f\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u5143\u7d20\u590d\u5236\u5230\u65b0\u6570\u7ec4", "// \u8fd4\u56de\u6269\u5c55\u540e\u7684\u65b0\u6570\u7ec4", "}", "int", "[", "]", "nums", "enlarge", ";", "for", "(", ";", ")", "return", "res", ";", "int", "res", "=", ";", "i", "<", "i", "++", "{", "}", "int", "[", "]", "int", "[", "]", "new", "int", "i", "=", "0", "nums", ".", "Length", ";", "int", "[", "]", "=", "+", "enlarge", "res", "[", "i", "]", "nums", "[", "i", "]", "nums", ".", "Length"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 103, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 29}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/csharp/chapter_array_and_linkedlist/array.cs#31-38", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/csharp/chapter_array_and_linkedlist/array.cs", "language": "Java"}, "method": {"name": "Insert", "qualified_name": "codes.csharp.chapter_array_and_linkedlist.array.cs#Insert", "start_line": 31, "end_line": 38, "signature": "Insert(int[] nums, int num, int index)", "original_code": "public static void Insert(int[] nums, int num, int index) {\n        // \u628a\u7d22\u5f15 index \u4ee5\u53ca\u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u540e\u79fb\u52a8\u4e00\u4f4d\n        for (int i = nums.Length - 1; i > index; i--) {\n            nums[i] = nums[i - 1];\n        }\n        // \u5c06 num \u8d4b\u7ed9 index \u5904\u5143\u7d20\n        nums[index] = num;\n    }", "doc_comment": "/* \u5728\u6570\u7ec4\u7684\u7d22\u5f15 index \u5904\u63d2\u5165\u5143\u7d20 num */"}, "code_tokens": ["void", "Insert", "public", "static", "(", ",", ",", ")", "{", "// \u628a\u7d22\u5f15 index \u4ee5\u53ca\u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u540e\u79fb\u52a8\u4e00\u4f4d", "// \u5c06 num \u8d4b\u7ed9 index \u5904\u5143\u7d20", "}", "nums", "num", "index", "for", "(", ";", ")", ";", "int", "int", ";", "i", ">", "index", "i", "--", "{", "}", "=", "num", "int", "[", "]", "int", "i", "=", ";", "nums", "[", "index", "]", "-", "1", "=", "nums", ".", "Length", "nums", "[", "i", "]", "nums", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 89, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 27}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/csharp/chapter_array_and_linkedlist/array.cs#41-46", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/csharp/chapter_array_and_linkedlist/array.cs", "language": "Java"}, "method": {"name": "Remove", "qualified_name": "codes.csharp.chapter_array_and_linkedlist.array.cs#Remove", "start_line": 41, "end_line": 46, "signature": "Remove(int[] nums, int index)", "original_code": "public static void Remove(int[] nums, int index) {\n        // \u628a\u7d22\u5f15 index \u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u524d\u79fb\u52a8\u4e00\u4f4d\n        for (int i = index; i < nums.Length - 1; i++) {\n            nums[i] = nums[i + 1];\n        }\n    }", "doc_comment": "/* \u5220\u9664\u7d22\u5f15 index \u5904\u5143\u7d20 */"}, "code_tokens": ["void", "Remove", "public", "static", "(", ",", ")", "{", "// \u628a\u7d22\u5f15 index \u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u524d\u79fb\u52a8\u4e00\u4f4d", "}", "nums", "index", "for", "(", ";", ")", "int", ";", "i", "<", "i", "++", "{", "}", "int", "[", "]", "int", "i", "=", "index", "-", "1", ";", "nums", ".", "Length", "=", "nums", "[", "i", "]", "nums", "[", "]", "i", "+", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 73, "ast_depth": 10, "n_identifiers": 5, "vocab_size": 26}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/csharp/chapter_array_and_linkedlist/array.cs#49-59", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/csharp/chapter_array_and_linkedlist/array.cs", "language": "Java"}, "method": {"name": "Traverse", "qualified_name": "codes.csharp.chapter_array_and_linkedlist.array.cs#Traverse", "start_line": 49, "end_line": 59, "signature": "Traverse(int[] nums)", "original_code": "public static void Traverse(int[] nums) {\n        int count = 0;\n        // \u901a\u8fc7\u7d22\u5f15\u904d\u5386\u6570\u7ec4\n        for (int i = 0; i < nums.Length; i++) {\n            count += nums[i];\n        }\n        // \u76f4\u63a5\u904d\u5386\u6570\u7ec4\u5143\u7d20\n        foreach (int num in nums) {\n            count += num;\n        }\n    }", "doc_comment": "/* \u904d\u5386\u6570\u7ec4 */"}, "code_tokens": ["void", "Traverse", "public", "static", "(", ")", "{", "// \u901a\u8fc7\u7d22\u5f15\u904d\u5386\u6570\u7ec4", "// \u76f4\u63a5\u904d\u5386\u6570\u7ec4\u5143\u7d20", "}", "nums", ";", "for", "(", ";", ")", "", "{", "}", "int", "count", "=", "0", ";", "i", "<", "i", "++", "{", "}", "foreach", ";", "int", "[", "]", "int", "i", "=", "0", "nums", ".", "Length", ";", "(", "nums", ")", "count", "+=", "num", "count", "+=", "num", "in", "nums", "[", "i", "]", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 89, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 29}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/csharp/chapter_array_and_linkedlist/array.cs#62-68", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/csharp/chapter_array_and_linkedlist/array.cs", "language": "Java"}, "method": {"name": "Find", "qualified_name": "codes.csharp.chapter_array_and_linkedlist.array.cs#Find", "start_line": 62, "end_line": 68, "signature": "Find(int[] nums, int target)", "original_code": "public static int Find(int[] nums, int target) {\n        for (int i = 0; i < nums.Length; i++) {\n            if (nums[i] == target)\n                return i;\n        }\n        return -1;\n    }", "doc_comment": "/* \u5728\u6570\u7ec4\u4e2d\u67e5\u627e\u6307\u5b9a\u5143\u7d20 */"}, "code_tokens": ["Find", "public", "static", "int", "(", ",", ")", "{", "}", "nums", "target", "for", "(", ";", ")", "return", ";", "int", ";", "i", "<", "i", "++", "{", "}", "-", "1", "int", "[", "]", "int", "i", "=", "0", "nums", ".", "Length", "if", "(", ")", "return", "i", ";", "==", "target", "nums", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 76, "ast_depth": 10, "n_identifiers": 5, "vocab_size": 27}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/csharp/chapter_array_and_linkedlist/array.cs#71-73", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/csharp/chapter_array_and_linkedlist/array.cs", "language": "Java"}, "method": {"name": "ToString", "qualified_name": "codes.csharp.chapter_array_and_linkedlist.array.cs#ToString", "start_line": 71, "end_line": 73, "signature": "ToString(int[] nums)", "original_code": "public static string ToString(int[] nums) {\n        return string.Join(\",\", nums);\n    }", "doc_comment": "/* \u8f85\u52a9\u51fd\u6570,\u6570\u7ec4\u8f6c\u5b57\u7b26\u4e32 */"}, "code_tokens": ["string", "ToString", "public", "static", "(", ")", "{", "}", "nums", "return", ";", "string", ".", "Join", "int", "[", "]", "(", ",", "nums", ")", "\"", ",", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 37, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 18}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/csharp/chapter_array_and_linkedlist/array.cs#77-106", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/csharp/chapter_array_and_linkedlist/array.cs", "language": "Java"}, "method": {"name": "Test", "qualified_name": "codes.csharp.chapter_array_and_linkedlist.array.cs#Test", "start_line": 77, "end_line": 106, "signature": "Test()", "original_code": "public static void Test() {\n        // \u521d\u59cb\u5316\u6570\u7ec4\n        int[] arr = new int[5];\n        Console.WriteLine(\"\u6570\u7ec4 arr = \" + ToString(arr));\n        int[] nums = { 1, 3, 2, 5, 4 };\n        Console.WriteLine(\"\u6570\u7ec4 nums = \" + ToString(nums));\n\n        // \u968f\u673a\u8bbf\u95ee\n        int randomNum = RandomAccess(nums);\n        Console.WriteLine(\"\u5728 nums \u4e2d\u83b7\u53d6\u968f\u673a\u5143\u7d20 \" + randomNum);\n\n        // \u957f\u5ea6\u6269\u5c55\n        nums = Extend(nums, 3);\n        Console.WriteLine(\"\u5c06\u6570\u7ec4\u957f\u5ea6\u6269\u5c55\u81f3 8 \uff0c\u5f97\u5230 nums = \" + ToString(nums));\n\n        // \u63d2\u5165\u5143\u7d20\n        Insert(nums, 6, 3);\n        Console.WriteLine(\"\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = \" + ToString(nums));\n\n        // \u5220\u9664\u5143\u7d20\n        Remove(nums, 2);\n        Console.WriteLine(\"\u5220\u9664\u7d22\u5f15 2 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = \" + ToString(nums));\n\n        // \u904d\u5386\u6570\u7ec4\n        Traverse(nums);\n\n        // \u67e5\u627e\u5143\u7d20 \n        int index = Find(nums, 3);\n        Console.WriteLine(\"\u5728 nums \u4e2d\u67e5\u627e\u5143\u7d20 3 \uff0c\u5f97\u5230\u7d22\u5f15 = \" + index);\n    }", "doc_comment": ""}, "code_tokens": ["void", "Test", "public", "static", "(", ")", "{", "// \u521d\u59cb\u5316\u6570\u7ec4", "// \u968f\u673a\u8bbf\u95ee", "// \u957f\u5ea6\u6269\u5c55", "// \u63d2\u5165\u5143\u7d20", "// \u5220\u9664\u5143\u7d20", "// \u904d\u5386\u6570\u7ec4", "// \u67e5\u627e\u5143\u7d20 ", "}", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "arr", "=", "Console", ".", "WriteLine", "nums", "=", "Console", ".", "WriteLine", "int", "randomNum", "=", "Console", ".", "WriteLine", "nums", "=", "Console", ".", "WriteLine", "Insert", "Console", ".", "WriteLine", "Remove", "Console", ".", "WriteLine", "Traverse", "int", "index", "=", "Console", ".", "WriteLine", "int", "[", "]", "new", "(", ")", "int", "[", "]", "{", "1", ",", "3", ",", "2", ",", "5", ",", "4", "}", "(", ")", "RandomAccess", "(", ")", "Extend", "(", ")", "(", "nums", ",", "6", ",", "3", ")", "(", ")", "(", "nums", ",", "2", ")", "(", ")", "(", "nums", ")", "Find", "(", ")", "int", "[", "5", "]", "+", "+", "(", "nums", ")", "+", "randomNum", "(", "nums", ",", "3", ")", "+", "+", "+", "(", "nums", ",", "3", ")", "+", "index", "\"", "\u6570\u7ec4 arr = ", "\"", "ToString", "\"", "\u6570\u7ec4 nums = ", "\"", "ToString", "\"", "\u5728 nums \u4e2d\u83b7\u53d6\u968f\u673a\u5143\u7d20 ", "\"", "\"", "\u5c06\u6570\u7ec4\u957f\u5ea6\u6269\u5c55\u81f3 8 \uff0c\u5f97\u5230 nums = ", "\"", "ToString", "\"", "\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = ", "\"", "ToString", "\"", "\u5220\u9664\u7d22\u5f15 2 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = ", "\"", "ToString", "\"", "\u5728 nums \u4e2d\u67e5\u627e\u5143\u7d20 3 \uff0c\u5f97\u5230\u7d22\u5f15 = ", "\"", "(", "arr", ")", "(", "nums", ")", "(", "nums", ")", "(", "nums", ")", "(", "nums", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 270, "ast_depth": 10, "n_identifiers": 14, "vocab_size": 51}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/csharp/chapter_array_and_linkedlist/list.cs#11-65", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/csharp/chapter_array_and_linkedlist/list.cs", "language": "Java"}, "method": {"name": "Test", "qualified_name": "codes.csharp.chapter_array_and_linkedlist.list.cs#Test", "start_line": 11, "end_line": 65, "signature": "Test()", "original_code": "public void Test() {\n\n        /* \u521d\u59cb\u5316\u5217\u8868 */\n        int[] numbers = new int[] { 1, 3, 2, 5, 4 };\n        List<int> nums = numbers.ToList();\n        Console.WriteLine(\"\u5217\u8868 nums = \" + string.Join(\",\", nums));\n\n        /* \u8bbf\u95ee\u5143\u7d20 */\n        int num = nums[1];\n        Console.WriteLine(\"\u8bbf\u95ee\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 num = \" + num);\n\n        /* \u66f4\u65b0\u5143\u7d20 */\n        nums[1] = 0;\n        Console.WriteLine(\"\u5c06\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\u66f4\u65b0\u4e3a 0 \uff0c\u5f97\u5230 nums = \" + string.Join(\",\", nums));\n\n        /* \u6e05\u7a7a\u5217\u8868 */\n        nums.Clear();\n        Console.WriteLine(\"\u6e05\u7a7a\u5217\u8868\u540e nums = \" + string.Join(\",\", nums));\n\n        /* \u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 */\n        nums.Add(1);\n        nums.Add(3);\n        nums.Add(2);\n        nums.Add(5);\n        nums.Add(4);\n        Console.WriteLine(\"\u6dfb\u52a0\u5143\u7d20\u540e nums = \" + string.Join(\",\", nums));\n\n        /* \u4e2d\u95f4\u63d2\u5165\u5143\u7d20 */\n        nums.Insert(3, 6);\n        Console.WriteLine(\"\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = \" + string.Join(\",\", nums));\n\n        /* \u5220\u9664\u5143\u7d20 */\n        nums.RemoveAt(3);\n        Console.WriteLine(\"\u5220\u9664\u7d22\u5f15 3 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = \" + string.Join(\",\", nums));\n\n        /* \u901a\u8fc7\u7d22\u5f15\u904d\u5386\u5217\u8868 */\n        int count = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            count += nums[i];\n        }\n        /* \u76f4\u63a5\u904d\u5386\u5217\u8868\u5143\u7d20 */\n        count = 0;\n        foreach (int x in nums) {\n            count += x;\n        }\n\n        /* \u62fc\u63a5\u4e24\u4e2a\u5217\u8868 */\n        List<int> nums1 = new() { 6, 8, 7, 10, 9 };\n        nums.AddRange(nums1);\n        Console.WriteLine(\"\u5c06\u5217\u8868 nums1 \u62fc\u63a5\u5230 nums \u4e4b\u540e\uff0c\u5f97\u5230 nums = \" + string.Join(\",\", nums));\n\n        /* \u6392\u5e8f\u5217\u8868 */\n        nums.Sort(); // \u6392\u5e8f\u540e\uff0c\u5217\u8868\u5143\u7d20\u4ece\u5c0f\u5230\u5927\u6392\u5217\n        Console.WriteLine(\"\u6392\u5e8f\u5217\u8868\u540e nums = \" + string.Join(\",\", nums));\n    }", "doc_comment": ""}, "code_tokens": ["void", "Test", "public", "(", ")", "{", "/* \u521d\u59cb\u5316\u5217\u8868 */", "/* \u8bbf\u95ee\u5143\u7d20 */", "/* \u66f4\u65b0\u5143\u7d20 */", "/* \u6e05\u7a7a\u5217\u8868 */", "/* \u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 */", "/* \u4e2d\u95f4\u63d2\u5165\u5143\u7d20 */", "/* \u5220\u9664\u5143\u7d20 */", "/* \u901a\u8fc7\u7d22\u5f15\u904d\u5386\u5217\u8868 */", "/* \u76f4\u63a5\u904d\u5386\u5217\u8868\u5143\u7d20 */", "/* \u62fc\u63a5\u4e24\u4e2a\u5217\u8868 */", "/* \u6392\u5e8f\u5217\u8868 */", "// \u6392\u5e8f\u540e\uff0c\u5217\u8868\u5143\u7d20\u4ece\u5c0f\u5230\u5927\u6392\u5217", "}", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "for", "(", ";", ")", ";", "", "{", "}", ";", ";", ";", ";", ";", "numbers", "=", "List", "nums", "=", "Console", ".", "WriteLine", "int", "num", "=", "Console", ".", "WriteLine", "=", "0", "Console", ".", "WriteLine", "nums", ".", "Clear", "Console", ".", "WriteLine", "nums", ".", "Add", "nums", ".", "Add", "nums", ".", "Add", "nums", ".", "Add", "nums", ".", "Add", "Console", ".", "WriteLine", "nums", ".", "Insert", "Console", ".", "WriteLine", "nums", ".", "RemoveAt", "Console", ".", "WriteLine", "int", "count", "=", "0", ";", "i", "<", "i", "++", "{", "}", "count", "=", "0", "foreach", ";", "List", "nums1", "=", "nums", ".", "AddRange", "Console", ".", "WriteLine", "nums", ".", "Sort", "Console", ".", "WriteLine", "int", "[", "]", "new", "<", ">", "numbers", ".", "ToList", "(", ")", "nums", "[", "1", "]", "(", ")", "nums", "[", "1", "]", "(", ")", "(", ")", "(", ")", "(", "1", ")", "(", "3", ")", "(", "2", ")", "(", "5", ")", "(", "4", ")", "(", ")", "(", "3", ",", "6", ")", "(", ")", "(", "3", ")", "(", ")", "int", "i", "=", "0", "nums", ".", "Count", ";", "(", "nums", ")", "count", "+=", "x", "<", ">", "new", "(", "nums1", ")", "(", ")", "(", ")", "(", ")", "int", "[", "]", "{", "1", ",", "3", ",", "2", ",", "5", ",", "4", "}", "int", "(", ")", "+", "+", "num", "+", "+", "+", "+", "+", "count", "+=", "x", "in", "int", "", "(", ")", "{", "}", "+", "+", "\"", "\u5217\u8868 nums = ", "\"", "string", ".", "Join", "\"", "\u8bbf\u95ee\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 num = ", "\"", "\"", "\u5c06\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\u66f4\u65b0\u4e3a 0 \uff0c\u5f97\u5230 nums = ", "\"", "string", ".", "Join", "\"", "\u6e05\u7a7a\u5217\u8868\u540e nums = ", "\"", "string", ".", "Join", "\"", "\u6dfb\u52a0\u5143\u7d20\u540e nums = ", "\"", "string", ".", "Join", "\"", "\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = ", "\"", "string", ".", "Join", "\"", "\u5220\u9664\u7d22\u5f15 3 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = ", "\"", "string", ".", "Join", "nums", "[", "i", "]", "int", "6", ",", "8", ",", "7", ",", "10", ",", "9", "\"", "\u5c06\u5217\u8868 nums1 \u62fc\u63a5\u5230 nums \u4e4b\u540e\uff0c\u5f97\u5230 nums = ", "\"", "string", ".", "Join", "\"", "\u6392\u5e8f\u5217\u8868\u540e nums = ", "\"", "string", ".", "Join", "(", ",", "nums", ")", "(", ",", "nums", ")", "(", ",", "nums", ")", "(", ",", "nums", ")", "(", ",", "nums", ")", "(", ",", "nums", ")", "(", ",", "nums", ")", "(", ",", "nums", ")", "\"", ",", "\"", "\"", ",", "\"", "\"", ",", "\"", "\"", ",", "\"", "\"", ",", "\"", "\"", ",", "\"", "\"", ",", "\"", "\"", ",", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 539, "ast_depth": 11, "n_identifiers": 22, "vocab_size": 77}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/csharp/chapter_dynamic_programming/climbing_stairs_backtrack.cs#11-24", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/csharp/chapter_dynamic_programming/climbing_stairs_backtrack.cs", "language": "Java"}, "method": {"name": "Backtrack", "qualified_name": "codes.csharp.chapter_dynamic_programming.climbing_stairs_backtrack.cs#Backtrack", "start_line": 11, "end_line": 24, "signature": "Backtrack(List<int> choices, int state, int n, List<int> res)", "original_code": "public void Backtrack(List<int> choices, int state, int n, List<int> res) {\n        // \u5f53\u722c\u5230\u7b2c n \u9636\u65f6\uff0c\u65b9\u6848\u6570\u91cf\u52a0 1\n        if (state == n)\n            res[0]++;\n        // \u904d\u5386\u6240\u6709\u9009\u62e9\n        foreach (int choice in choices) {\n            // \u526a\u679d\uff1a\u4e0d\u5141\u8bb8\u8d8a\u8fc7\u7b2c n \u9636\n            if (state + choice > n)\n                continue;\n            // \u5c1d\u8bd5\uff1a\u505a\u51fa\u9009\u62e9\uff0c\u66f4\u65b0\u72b6\u6001\n            Backtrack(choices, state + choice, n, res);\n            // \u56de\u9000\n        }\n    }", "doc_comment": "/* \u56de\u6eaf */"}, "code_tokens": ["void", "Backtrack", "public", "(", ",", ",", ",", ")", "{", "// \u5f53\u722c\u5230\u7b2c n \u9636\u65f6\uff0c\u65b9\u6848\u6570\u91cf\u52a0 1", "// \u904d\u5386\u6240\u6709\u9009\u62e9", "}", "choices", "state", "n", "res", "if", "", "{", "// \u526a\u679d\uff1a\u4e0d\u5141\u8bb8\u8d8a\u8fc7\u7b2c n \u9636", "// \u5c1d\u8bd5\uff1a\u505a\u51fa\u9009\u62e9\uff0c\u66f4\u65b0\u72b6\u6001", "// \u56de\u9000", "}", "List", "int", "int", "List", "(", ")", ";", "foreach", "if", ";", "<", ">", "<", ">", "state", "==", "n", "++", "(", "choices", ")", "(", ")", "continue", ";", "Backtrack", "int", "int", "res", "[", "0", "]", "choice", "in", ">", "n", "(", "choices", ",", ",", "n", ",", "res", ")", "int", "state", "+", "choice", "state", "+", "choice"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 112, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 34}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/csharp/chapter_dynamic_programming/climbing_stairs_backtrack.cs#27-33", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/csharp/chapter_dynamic_programming/climbing_stairs_backtrack.cs", "language": "Java"}, "method": {"name": "ClimbingStairsBacktrack", "qualified_name": "codes.csharp.chapter_dynamic_programming.climbing_stairs_backtrack.cs#ClimbingStairsBacktrack", "start_line": 27, "end_line": 33, "signature": "ClimbingStairsBacktrack(int n)", "original_code": "public int ClimbingStairsBacktrack(int n) {\n        List<int> choices = new() { 1, 2 }; // \u53ef\u9009\u62e9\u5411\u4e0a\u722c 1 \u6216 2 \u9636\n        int state = 0; // \u4ece\u7b2c 0 \u9636\u5f00\u59cb\u722c\n        List<int> res = new() { 0 }; // \u4f7f\u7528 res[0] \u8bb0\u5f55\u65b9\u6848\u6570\u91cf\n        Backtrack(choices, state, n, res);\n        return res[0];\n    }", "doc_comment": "/* \u722c\u697c\u68af\uff1a\u56de\u6eaf */"}, "code_tokens": ["ClimbingStairsBacktrack", "public", "int", "(", ")", "{", "// \u53ef\u9009\u62e9\u5411\u4e0a\u722c 1 \u6216 2 \u9636", "// \u4ece\u7b2c 0 \u9636\u5f00\u59cb\u722c", "// \u4f7f\u7528 res[0] \u8bb0\u5f55\u65b9\u6848\u6570\u91cf", "}", "n", ";", ";", ";", ";", "return", ";", "int", "List", "choices", "=", "int", "state", "=", "0", "List", "res", "=", "Backtrack", "res", "[", "0", "]", "<", ">", "new", "<", ">", "new", "(", "choices", ",", "state", ",", "n", ",", "res", ")", "int", "", "(", ")", "{", "}", "int", "", "(", ")", "{", "}", "1", ",", "2", "0"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 100, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 29}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/csharp/chapter_dynamic_programming/climbing_stairs_backtrack.cs#36-40", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/csharp/chapter_dynamic_programming/climbing_stairs_backtrack.cs", "language": "Java"}, "method": {"name": "Test", "qualified_name": "codes.csharp.chapter_dynamic_programming.climbing_stairs_backtrack.cs#Test", "start_line": 36, "end_line": 40, "signature": "Test()", "original_code": "public void Test() {\n        int n = 9;\n        int res = ClimbingStairsBacktrack(n);\n        Console.WriteLine($\"\u722c {n} \u9636\u697c\u68af\u5171\u6709 {res} \u79cd\u65b9\u6848\");\n    }", "doc_comment": ""}, "code_tokens": ["void", "Test", "public", "(", ")", "{", "}", ";", ";", ";", "int", "n", "=", "9", "int", "res", "=", "Console", ".", "WriteLine", "ClimbingStairsBacktrack", "(", ")", "(", "n", ")", "$", "\"", "\u722c {n} \u9636\u697c\u68af\u5171\u6709 {res} \u79cd\u65b9\u6848", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 48, "ast_depth": 8, "n_identifiers": 7, "vocab_size": 20}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/dart/chapter_array_and_linkedlist/array.dart#12-18", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/dart/chapter_array_and_linkedlist/array.dart", "language": "Java"}, "method": {"name": "randomAccess", "qualified_name": "codes.dart.chapter_array_and_linkedlist.array.dart#randomAccess", "start_line": 12, "end_line": 18, "signature": "randomAccess(List<int> nums)", "original_code": "int randomAccess(List<int> nums) {\n  // \u5728\u533a\u95f4 [0, nums.length) \u4e2d\u968f\u673a\u62bd\u53d6\u4e00\u4e2a\u6570\u5b57\n  int randomIndex = Random().nextInt(nums.length);\n  // \u83b7\u53d6\u5e76\u8fd4\u56de\u968f\u673a\u5143\u7d20\n  int randomNum = nums[randomIndex];\n  return randomNum;\n}", "doc_comment": "/* \u968f\u673a\u8bbf\u95ee\u5143\u7d20 */"}, "code_tokens": ["randomAccess", "int", "(", ")", "{", "// \u5728\u533a\u95f4 [0, nums.length) \u4e2d\u968f\u673a\u62bd\u53d6\u4e00\u4e2a\u6570\u5b57", "// \u83b7\u53d6\u5e76\u8fd4\u56de\u968f\u673a\u5143\u7d20", "}", "nums", ";", ";", "return", "randomNum", ";", "List", "int", "randomIndex", "=", "int", "randomNum", "=", "<", ">", ".", "nextInt", "nums", "[", "randomIndex", "]", "int", "Random", "(", ")", "(", ")", "nums", ".", "length"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 60, "ast_depth": 9, "n_identifiers": 7, "vocab_size": 23}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/dart/chapter_array_and_linkedlist/array.dart#21-30", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/dart/chapter_array_and_linkedlist/array.dart", "language": "Java"}, "method": {"name": "extend", "qualified_name": "codes.dart.chapter_array_and_linkedlist.array.dart#extend", "start_line": 21, "end_line": 30, "signature": "extend(List<int> nums, int enlarge)", "original_code": "List<int> extend(List<int> nums, int enlarge) {\n  // \u521d\u59cb\u5316\u4e00\u4e2a\u6269\u5c55\u957f\u5ea6\u540e\u7684\u6570\u7ec4\n  List<int> res = List.filled(nums.length + enlarge, 0);\n  // \u5c06\u539f\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u5143\u7d20\u590d\u5236\u5230\u65b0\u6570\u7ec4\n  for (var i = 0; i < nums.length; i++) {\n    res[i] = nums[i];\n  }\n  // \u8fd4\u56de\u6269\u5c55\u540e\u7684\u65b0\u6570\u7ec4\n  return res;\n}", "doc_comment": "/* \u6269\u5c55\u6570\u7ec4\u957f\u5ea6 */"}, "code_tokens": ["extend", "List", "(", ",", ")", "{", "// \u521d\u59cb\u5316\u4e00\u4e2a\u6269\u5c55\u957f\u5ea6\u540e\u7684\u6570\u7ec4", "// \u5c06\u539f\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u5143\u7d20\u590d\u5236\u5230\u65b0\u6570\u7ec4", "// \u8fd4\u56de\u6269\u5c55\u540e\u7684\u65b0\u6570\u7ec4", "}", "<", ">", "nums", "enlarge", ";", "for", "(", ";", ")", "return", "res", ";", "int", "List", "int", "List", "res", "=", "var", ";", "i", "<", "i", "++", "{", "}", "<", ">", "<", ">", "List", ".", "filled", "i", "=", "0", "nums", ".", "length", ";", "int", "int", "(", ",", "0", ")", "=", "+", "enlarge", "res", "[", "i", "]", "nums", "[", "i", "]", "nums", ".", "length"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 104, "ast_depth": 10, "n_identifiers": 8, "vocab_size": 30}}
