{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/dart/chapter_array_and_linkedlist/array.dart#33-40", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/dart/chapter_array_and_linkedlist/array.dart", "language": "Java"}, "method": {"name": "insert", "qualified_name": "codes.dart.chapter_array_and_linkedlist.array.dart#insert", "start_line": 33, "end_line": 40, "signature": "insert(List<int> nums, int num, int index)", "original_code": "void insert(List<int> nums, int num, int index) {\n  // \u628a\u7d22\u5f15 index \u4ee5\u53ca\u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u540e\u79fb\u52a8\u4e00\u4f4d\n  for (var i = nums.length - 1; i > index; i--) {\n    nums[i] = nums[i - 1];\n  }\n  // \u5c06 num \u8d4b\u7ed9 index \u5904\u5143\u7d20\n  nums[index] = num;\n}", "doc_comment": "/* \u5728\u6570\u7ec4\u7684\u7d22\u5f15 index \u5904\u63d2\u5165\u5143\u7d20 num */"}, "code_tokens": ["void", "insert", "(", ",", ",", ")", "{", "// \u628a\u7d22\u5f15 index \u4ee5\u53ca\u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u540e\u79fb\u52a8\u4e00\u4f4d", "// \u5c06 num \u8d4b\u7ed9 index \u5904\u5143\u7d20", "}", "nums", "num", "index", "for", "(", ";", ")", ";", "List", "int", "int", "var", ";", "i", ">", "index", "i", "--", "{", "}", "=", "num", "<", ">", "i", "=", ";", "nums", "[", "index", "]", "int", "-", "1", "=", "nums", ".", "length", "nums", "[", "i", "]", "nums", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 86, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 28}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/dart/chapter_array_and_linkedlist/array.dart#43-48", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/dart/chapter_array_and_linkedlist/array.dart", "language": "Java"}, "method": {"name": "remove", "qualified_name": "codes.dart.chapter_array_and_linkedlist.array.dart#remove", "start_line": 43, "end_line": 48, "signature": "remove(List<int> nums, int index)", "original_code": "void remove(List<int> nums, int index) {\n  // \u628a\u7d22\u5f15 index \u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u524d\u79fb\u52a8\u4e00\u4f4d\n  for (var i = index; i < nums.length - 1; i++) {\n    nums[i] = nums[i + 1];\n  }\n}", "doc_comment": "/* \u5220\u9664\u7d22\u5f15 index \u5904\u5143\u7d20 */"}, "code_tokens": ["void", "remove", "(", ",", ")", "{", "// \u628a\u7d22\u5f15 index \u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u524d\u79fb\u52a8\u4e00\u4f4d", "}", "nums", "index", "for", "(", ";", ")", "List", "int", "var", ";", "i", "<", "i", "++", "{", "}", "<", ">", "i", "=", "index", "-", "1", ";", "int", "nums", ".", "length", "=", "nums", "[", "i", "]", "nums", "[", "]", "i", "+", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 70, "ast_depth": 10, "n_identifiers": 5, "vocab_size": 27}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/dart/chapter_array_and_linkedlist/array.dart#51-105", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/dart/chapter_array_and_linkedlist/array.dart", "language": "Java"}, "method": {"name": "traverse", "qualified_name": "codes.dart.chapter_array_and_linkedlist.array.dart#traverse", "start_line": 51, "end_line": 105, "signature": "traverse(List<int> nums)", "original_code": "void traverse(List<int> nums) {\n  int count = 0;\n  // \u901a\u8fc7\u7d22\u5f15\u904d\u5386\u6570\u7ec4\n  for (var i = 0; i < nums.length; i++) {\n    count += nums[i];\n  }\n  // \u76f4\u63a5\u904d\u5386\u6570\u7ec4\u5143\u7d20\n  for (int num in nums) {\n    count += num;\n  }\n  // \u901a\u8fc7 forEach \u65b9\u6cd5\u904d\u5386\u6570\u7ec4\n  nums.forEach((num) {\n    count += num;\n  });\n}\n\n/* \u5728\u6570\u7ec4\u4e2d\u67e5\u627e\u6307\u5b9a\u5143\u7d20 */\nint find(List<int> nums, int target) {\n  for (var i = 0; i < nums.length; i++) {\n    if (nums[i] == target) return i;\n  }\n  return -1;\n}\n\n/* Driver Code */\nvoid main() {\n  /* \u521d\u59cb\u5316\u6570\u7ec4 */\n  var arr = List.filled(5, 0);\n  print('\u6570\u7ec4 arr = $arr');\n  List<int> nums = [1, 3, 2, 5, 4];\n  print('\u6570\u7ec4 nums = $nums');\n\n  /* \u968f\u673a\u8bbf\u95ee */\n  int randomNum = randomAccess(nums);\n  print('\u5728 nums \u4e2d\u83b7\u53d6\u968f\u673a\u5143\u7d20 $randomNum');\n\n  /* \u957f\u5ea6\u6269\u5c55 */\n  nums = extend(nums, 3);\n  print('\u5c06\u6570\u7ec4\u957f\u5ea6\u6269\u5c55\u81f3 8 \uff0c\u5f97\u5230 nums = $nums');\n\n  /* \u63d2\u5165\u5143\u7d20 */\n  insert(nums, 6, 3);\n  print(\"\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = $nums\");\n\n  /* \u5220\u9664\u5143\u7d20 */\n  remove(nums, 2);\n  print(\"\u5220\u9664\u7d22\u5f15 2 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = $nums\");\n\n  /* \u904d\u5386\u6570\u7ec4 */\n  traverse(nums);\n\n  /* \u67e5\u627e\u5143\u7d20 */\n  int index = find(nums, 3);\n  print(\"\u5728 nums \u4e2d\u67e5\u627e\u5143\u7d20 3 \uff0c\u5f97\u5230\u7d22\u5f15 = $index\");\n}", "doc_comment": "/* \u904d\u5386\u6570\u7ec4\u5143\u7d20 */"}, "code_tokens": ["void", "traverse", "{", "// \u901a\u8fc7\u7d22\u5f15\u904d\u5386\u6570\u7ec4", "// \u76f4\u63a5\u904d\u5386\u6570\u7ec4\u5143\u7d20", "for", "(", "// \u901a\u8fc7 forEach \u65b9\u6cd5\u904d\u5386\u6570\u7ec4", ";", "/* \u5728\u6570\u7ec4\u4e2d\u67e5\u627e\u6307\u5b9a\u5143\u7d20 */", "/* Driver Code */", "/* \u521d\u59cb\u5316\u6570\u7ec4 */", ",", "3", ",", "2", ",", "5", ",", "/* \u968f\u673a\u8bbf\u95ee */", "/* \u957f\u5ea6\u6269\u5c55 */", "/* \u63d2\u5165\u5143\u7d20 */", "/* \u5220\u9664\u5143\u7d20 */", "/* \u904d\u5386\u6570\u7ec4 */", "/* \u67e5\u627e\u5143\u7d20 */", ";", "}", "(", ")", ";", "for", "(", ";", ")", ";", "}", "nums", ".", "forEach", "}", "find", "{", "for", ";", "}", "void", "{", "var", ";", ";", "nums", "=", "1", "4", "]", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "print", "nums", "int", "count", "=", "0", "var", ";", "i", "<", "i", "++", "{", "}", "int", "num", "in", "nums", ")", "{", "count", "+=", "num", "(", ")", "int", "(", ",", ")", "-", "1", "main", "arr", "=", "print", "List", "[", "print", "int", "randomNum", "=", "print", "nums", "=", "print", "insert", "print", "remove", "print", "traverse", "int", "index", "=", "(", ")", "List", "i", "=", "0", "nums", ".", "length", ";", "{", "count", "+=", "num", ";", "}", "nums", "target", "(", "var", ")", "i", ";", "}", "return", "(", ")", "List", ".", "filled", "(", "'\u6570\u7ec4 arr = $arr'", ")", "<", ">", "(", "'\u6570\u7ec4 nums = $nums'", ")", "randomAccess", "(", "'\u5728 nums \u4e2d\u83b7\u53d6\u968f\u673a\u5143\u7d20 $randomNum'", ")", "extend", "(", "'\u5c06\u6570\u7ec4\u957f\u5ea6\u6269\u5c55\u81f3 8 \uff0c\u5f97\u5230 nums = $nums'", ")", "(", "nums", ",", "6", ",", "3", ")", "(", ")", "(", "nums", ",", "2", ")", "(", ")", "(", "nums", ")", "find", "\"", "\u5728 nums \u4e2d\u67e5\u627e\u5143\u7d20 3 \uff0c\u5f97\u5230\u7d22\u5f15 = $index", "\"", "<", ">", "count", "+=", "(", "num", ")", "List", "int", "i", "=", "0", ";", "i", "<", "nums", ".", "length", ";", "i", "++", "{", "if", "return", "(", "5", ",", "0", ")", "int", "(", "nums", ")", "(", "nums", ",", "3", ")", "\"", "\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = $nums", "\"", "\"", "\u5220\u9664\u7d22\u5f15 2 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = $nums", "\"", "(", "nums", ",", "3", ")", "int", "nums", "[", "i", "]", "<", ">", "(", ")", "int", "==", "target", "nums", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 355, "ast_depth": 9, "n_identifiers": 21, "vocab_size": 70}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/dart/chapter_array_and_linkedlist/list.dart#10-62", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/dart/chapter_array_and_linkedlist/list.dart", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.dart.chapter_array_and_linkedlist.list.dart#main", "start_line": 10, "end_line": 62, "signature": "main()", "original_code": "void main() {\n  /* \u521d\u59cb\u5316\u5217\u8868 */\n  List<int> nums = [1, 3, 2, 5, 4];\n  print('\u5217\u8868 nums = $nums');\n\n  /* \u8bbf\u95ee\u5143\u7d20 */\n  int num = nums[1];\n  print('\u8bbf\u95ee\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 num = $num');\n\n  /* \u66f4\u65b0\u5143\u7d20 */\n  nums[1] = 0;\n  print('\u5c06\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\u66f4\u65b0\u4e3a 0 \uff0c\u5f97\u5230 nums = $nums');\n\n  /* \u6e05\u7a7a\u5217\u8868 */\n  nums.clear();\n  print('\u6e05\u7a7a\u5217\u8868\u540e nums = $nums');\n\n  /* \u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 */\n  nums.add(1);\n  nums.add(3);\n  nums.add(2);\n  nums.add(5);\n  nums.add(4);\n  print('\u6dfb\u52a0\u5143\u7d20\u540e nums = $nums');\n\n  /* \u4e2d\u95f4\u63d2\u5165\u5143\u7d20 */\n  nums.insert(3, 6);\n  print('\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = $nums');\n\n  /* \u5220\u9664\u5143\u7d20 */\n  nums.removeAt(3);\n  print('\u5220\u9664\u7d22\u5f15 3 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = $nums');\n\n  /* \u901a\u8fc7\u7d22\u5f15\u904d\u5386\u5217\u8868 */\n  int count = 0;\n  for (var i = 0; i < nums.length; i++) {\n    count += nums[i];\n  }\n  /* \u76f4\u63a5\u904d\u5386\u5217\u8868\u5143\u7d20 */\n  count = 0;\n  for (var x in nums) {\n    count += x;\n  }\n\n  /* \u62fc\u63a5\u4e24\u4e2a\u5217\u8868 */\n  List<int> nums1 = [6, 8, 7, 10, 9];\n  nums.addAll(nums1);\n  print('\u5c06\u5217\u8868 nums1 \u62fc\u63a5\u5230 nums \u4e4b\u540e\uff0c\u5f97\u5230 nums = $nums');\n\n  /* \u6392\u5e8f\u5217\u8868 */\n  nums.sort();\n  print('\u6392\u5e8f\u5217\u8868\u540e nums = $nums');\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["void", "main", "(", ")", "{", "/* \u521d\u59cb\u5316\u5217\u8868 */", "/* \u8bbf\u95ee\u5143\u7d20 */", "/* \u66f4\u65b0\u5143\u7d20 */", "/* \u6e05\u7a7a\u5217\u8868 */", "/* \u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 */", "/* \u4e2d\u95f4\u63d2\u5165\u5143\u7d20 */", "/* \u5220\u9664\u5143\u7d20 */", "/* \u901a\u8fc7\u7d22\u5f15\u904d\u5386\u5217\u8868 */", "/* \u76f4\u63a5\u904d\u5386\u5217\u8868\u5143\u7d20 */", "}", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "for", "(", ";", ")", ";", "for", "(", "/* \u62fc\u63a5\u4e24\u4e2a\u5217\u8868 */", "9", ";", ";", "List", "nums", "=", "1", ",", "3", ",", "2", ",", "5", ",", "4", "]", "print", "int", "num", "=", "print", "=", "0", "print", "nums", ".", "clear", "print", "nums", ".", "add", "nums", ".", "add", "nums", ".", "add", "nums", ".", "add", "nums", ".", "add", "print", "nums", ".", "insert", "print", "nums", ".", "removeAt", "print", "int", "count", "=", "0", "var", ";", "i", "<", "i", "++", "{", "}", "count", "=", "0", "var", ";", "}", ",", "8", ",", "7", ",", "10", ",", "]", ";", ";", ";", "/* \u6392\u5e8f\u5217\u8868 */", "print", "<", ">", "[", "(", "'\u5217\u8868 nums = $nums'", ")", "nums", "[", "1", "]", "(", "'\u8bbf\u95ee\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 num = $num'", ")", "nums", "[", "1", "]", "(", "'\u5c06\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\u66f4\u65b0\u4e3a 0 \uff0c\u5f97\u5230 nums = $nums'", ")", "(", ")", "(", "'\u6e05\u7a7a\u5217\u8868\u540e nums = $nums'", ")", "(", "1", ")", "(", "3", ")", "(", "2", ")", "(", "5", ")", "(", "4", ")", "(", "'\u6dfb\u52a0\u5143\u7d20\u540e nums = $nums'", ")", "(", "3", ",", "6", ")", "(", "'\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = $nums'", ")", "(", "3", ")", "(", "'\u5220\u9664\u7d22\u5f15 3 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = $nums'", ")", "i", "=", "0", "nums", ".", "length", ";", "x", "in", "nums", ")", "{", "count", "+=", "x", "List", "nums1", "=", "6", "nums", ".", "addAll", "print", "nums", ".", "sort", "(", "'\u6392\u5e8f\u5217\u8868\u540e nums = $nums'", ")", "int", "count", "+=", "<", ">", "[", "(", "nums1", ")", "(", "'\u5c06\u5217\u8868 nums1 \u62fc\u63a5\u5230 nums \u4e4b\u540e\uff0c\u5f97\u5230 nums = $nums'", ")", "(", ")", "nums", "[", "i", "]", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 328, "ast_depth": 9, "n_identifiers": 16, "vocab_size": 66}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/dart/chapter_dynamic_programming/climbing_stairs_backtrack.dart#8-21", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/dart/chapter_dynamic_programming/climbing_stairs_backtrack.dart", "language": "Java"}, "method": {"name": "backtrack", "qualified_name": "codes.dart.chapter_dynamic_programming.climbing_stairs_backtrack.dart#backtrack", "start_line": 8, "end_line": 21, "signature": "backtrack(List<int> choices, int state, int n, List<int> res)", "original_code": "void backtrack(List<int> choices, int state, int n, List<int> res) {\n  // \u5f53\u722c\u5230\u7b2c n \u9636\u65f6\uff0c\u65b9\u6848\u6570\u91cf\u52a0 1\n  if (state == n) {\n    res[0]++;\n  }\n  // \u904d\u5386\u6240\u6709\u9009\u62e9\n  for (int choice in choices) {\n    // \u526a\u679d\uff1a\u4e0d\u5141\u8bb8\u8d8a\u8fc7\u7b2c n \u9636\n    if (state + choice > n) continue;\n    // \u5c1d\u8bd5\uff1a\u505a\u51fa\u9009\u62e9\uff0c\u66f4\u65b0\u72b6\u6001\n    backtrack(choices, state + choice, n, res);\n    // \u56de\u9000\n  }\n}", "doc_comment": "/* \u56de\u6eaf */"}, "code_tokens": ["void", "backtrack", "(", ",", ",", ",", ")", "{", "// \u5f53\u722c\u5230\u7b2c n \u9636\u65f6\uff0c\u65b9\u6848\u6570\u91cf\u52a0 1", "// \u904d\u5386\u6240\u6709\u9009\u62e9", "}", "choices", "state", "n", "res", "if", "for", "(", "choices", ")", "{", "// \u526a\u679d\uff1a\u4e0d\u5141\u8bb8\u8d8a\u8fc7\u7b2c n \u9636", "// \u5c1d\u8bd5\uff1a\u505a\u51fa\u9009\u62e9\uff0c\u66f4\u65b0\u72b6\u6001", "// \u56de\u9000", "}", "List", "int", "int", "List", "(", ")", "{", "}", "int", "choice", "in", "if", ";", "<", ">", "<", ">", "state", "==", "n", ";", "(", ")", "continue", ";", "backtrack", "int", "int", "++", ">", "n", "(", "choices", ",", ",", "n", ",", "res", ")", "res", "[", "0", "]", "state", "+", "choice", "state", "+", "choice"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 110, "ast_depth": 9, "n_identifiers": 7, "vocab_size": 32}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/dart/chapter_dynamic_programming/climbing_stairs_backtrack.dart#24-31", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/dart/chapter_dynamic_programming/climbing_stairs_backtrack.dart", "language": "Java"}, "method": {"name": "climbingStairsBacktrack", "qualified_name": "codes.dart.chapter_dynamic_programming.climbing_stairs_backtrack.dart#climbingStairsBacktrack", "start_line": 24, "end_line": 31, "signature": "climbingStairsBacktrack(int n)", "original_code": "int climbingStairsBacktrack(int n) {\n  List<int> choices = [1, 2]; // \u53ef\u9009\u62e9\u5411\u4e0a\u722c 1 \u6216 2 \u9636\n  int state = 0; // \u4ece\u7b2c 0 \u9636\u5f00\u59cb\u722c\n  List<int> res = [];\n  res.add(0); // \u4f7f\u7528 res[0] \u8bb0\u5f55\u65b9\u6848\u6570\u91cf\n  backtrack(choices, state, n, res);\n  return res[0];\n}", "doc_comment": "/* \u722c\u697c\u68af\uff1a\u56de\u6eaf */"}, "code_tokens": ["climbingStairsBacktrack", "int", "(", ")", "{", "// \u53ef\u9009\u62e9\u5411\u4e0a\u722c 1 \u6216 2 \u9636", "// \u4ece\u7b2c 0 \u9636\u5f00\u59cb\u722c", "// \u4f7f\u7528 res[0] \u8bb0\u5f55\u65b9\u6848\u6570\u91cf", "}", "n", ";", ";", ";", ";", ";", "return", ";", "int", "List", "choices", "=", "1", ",", "2", "]", "int", "state", "=", "0", "List", "res", "=", "res", ".", "add", "backtrack", "res", "[", "0", "]", "<", ">", "[", "<", ">", "", "(", "0", ")", "(", "choices", ",", "state", ",", "n", ",", "res", ")", "int", "int", "[", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 95, "ast_depth": 8, "n_identifiers": 7, "vocab_size": 29}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/dart/chapter_dynamic_programming/climbing_stairs_backtrack.dart#34-39", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/dart/chapter_dynamic_programming/climbing_stairs_backtrack.dart", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.dart.chapter_dynamic_programming.climbing_stairs_backtrack.dart#main", "start_line": 34, "end_line": 39, "signature": "main()", "original_code": "void main() {\n  int n = 9;\n\n  int res = climbingStairsBacktrack(n);\n  print(\"\u722c $n \u9636\u697c\u68af\u5171\u6709 $res \u79cd\u65b9\u6848\");\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["void", "main", "(", ")", "{", "}", ";", ";", ";", "int", "n", "=", "9", "int", "res", "=", "print", "climbingStairsBacktrack", "(", ")", "(", "n", ")", "\"", "\u722c $n \u9636\u697c\u68af\u5171\u6709 $res \u79cd\u65b9\u6848", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 42, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 16}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/go/chapter_array_and_linkedlist/array.go#12-79", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/go/chapter_array_and_linkedlist/array.go", "language": "Java"}, "method": {"name": "randomAccess", "qualified_name": "codes.go.chapter_array_and_linkedlist.array.go#randomAccess", "start_line": 12, "end_line": 79, "signature": "randomAccess(randomNum int)", "original_code": "func randomAccess(nums []int) (randomNum int) {\n\t// \u5728\u533a\u95f4 [0, nums.length) \u4e2d\u968f\u673a\u62bd\u53d6\u4e00\u4e2a\u6570\u5b57\n\trandomIndex := rand.Intn(len(nums))\n\t// \u83b7\u53d6\u5e76\u8fd4\u56de\u968f\u673a\u5143\u7d20\n\trandomNum = nums[randomIndex]\n\treturn\n}\n\n/* \u6269\u5c55\u6570\u7ec4\u957f\u5ea6 */\nfunc extend(nums []int, enlarge int) []int {\n\t// \u521d\u59cb\u5316\u4e00\u4e2a\u6269\u5c55\u957f\u5ea6\u540e\u7684\u6570\u7ec4\n\tres := make([]int, len(nums)+enlarge)\n\t// \u5c06\u539f\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u5143\u7d20\u590d\u5236\u5230\u65b0\u6570\u7ec4\n\tfor i, num := range nums {\n\t\tres[i] = num\n\t}\n\t// \u8fd4\u56de\u6269\u5c55\u540e\u7684\u65b0\u6570\u7ec4\n\treturn res\n}\n\n/* \u5728\u6570\u7ec4\u7684\u7d22\u5f15 index \u5904\u63d2\u5165\u5143\u7d20 num */\nfunc insert(nums []int, num int, index int) {\n\t// \u628a\u7d22\u5f15 index \u4ee5\u53ca\u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u540e\u79fb\u52a8\u4e00\u4f4d\n\tfor i := len(nums) - 1; i > index; i-- {\n\t\tnums[i] = nums[i-1]\n\t}\n\t// \u5c06 num \u8d4b\u7ed9 index \u5904\u5143\u7d20\n\tnums[index] = num\n}\n\n/* \u5220\u9664\u7d22\u5f15 index \u5904\u5143\u7d20 */\nfunc remove(nums []int, index int) {\n\t// \u628a\u7d22\u5f15 index \u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u524d\u79fb\u52a8\u4e00\u4f4d\n\tfor i := index; i < len(nums)-1; i++ {\n\t\tnums[i] = nums[i+1]\n\t}\n}\n\n/* \u904d\u5386\u6570\u7ec4 */\nfunc traverse(nums []int) {\n\tcount := 0\n\t// \u901a\u8fc7\u7d22\u5f15\u904d\u5386\u6570\u7ec4\n\tfor i := 0; i < len(nums); i++ {\n\t\tcount += nums[i]\n\t}\n\tcount = 0\n\t// \u76f4\u63a5\u904d\u5386\u6570\u7ec4\u5143\u7d20\n\tfor _, num := range nums {\n\t\tcount += num\n\t}\n\t// \u540c\u65f6\u904d\u5386\u6570\u636e\u7d22\u5f15\u548c\u5143\u7d20\n\tfor i, num := range nums {\n\t\tcount += nums[i]\n\t\tcount += num\n\t}\n}\n\n/* \u5728\u6570\u7ec4\u4e2d\u67e5\u627e\u6307\u5b9a\u5143\u7d20 */\nfunc find(nums []int, target int) (index int) {\n\tindex = -1\n\tfor i := 0; i < len(nums); i++ {\n\t\tif nums[i] == target {\n\t\t\tindex = i\n\t\t\tbreak\n\t\t}\n\t}\n\treturn\n}", "doc_comment": "/* \u968f\u673a\u8bbf\u95ee\u5143\u7d20 */"}, "code_tokens": ["func", "randomAccess", "(", ")", "{", "// \u5728\u533a\u95f4 [0, nums.length) \u4e2d\u968f\u673a\u62bd\u53d6\u4e00\u4e2a\u6570\u5b57", "/* \u5728\u6570\u7ec4\u7684\u7d22\u5f15 index \u5904\u63d2\u5165\u5143\u7d20 num */", "/* \u5220\u9664\u7d22\u5f15 index \u5904\u5143\u7d20 */", "/* \u904d\u5386\u6570\u7ec4 */", "/* \u5728\u6570\u7ec4\u4e2d\u67e5\u627e\u6307\u5b9a\u5143\u7d20 */", "", "(", ")", "randomNum", "int", "", "{", "// \u521d\u59cb\u5316\u4e00\u4e2a\u6269\u5c55\u957f\u5ea6\u540e\u7684\u6570\u7ec4", "// \u5c06\u539f\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u5143\u7d20\u590d\u5236\u5230\u65b0\u6570\u7ec4", "}", "func", "", "{", "// \u628a\u7d22\u5f15 index \u4ee5\u53ca\u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u540e\u79fb\u52a8\u4e00\u4f4d", "}", "func", "", "{", "// \u628a\u7d22\u5f15 index \u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u524d\u79fb\u52a8\u4e00\u4f4d", "}", "func", "", "{", "}", "func", "", "{", "}", "int", "randomIndex", "int", ")", "for", "i", ",", "// \u8fd4\u56de\u6269\u5c55\u540e\u7684\u65b0\u6570\u7ec4", "return", "res", "insert", "(", ",", ",", ")", "for", "// \u5c06 num \u8d4b\u7ed9 index \u5904\u5143\u7d20", "remove", "(", ",", ")", "for", "{", "}", "traverse", "(", ")", ";", ";", "", "{", "}", "count", ",", "", "find", "(", ",", ")", "(", ")", ";", ";", "", "{", "}", "return", "", "nums", ":", "=", "// \u83b7\u53d6\u5e76\u8fd4\u56de\u968f\u673a\u5143\u7d20", "randomNum", "=", "/* \u6269\u5c55\u6570\u7ec4\u957f\u5ea6 */", "[", "]", "res", "=", "num", ":", "int", "num", "int", "index", "int", ";", ";", "i", "--", "{", "}", "=", "num", "int", "index", "int", ";", ";", "i", "++", "", "int", "count", "=", "0", "i", "<", "i", "++", "", "=", "0", "// \u76f4\u63a5\u904d\u5386\u6570\u7ec4\u5143\u7d20", "for", ",", "// \u540c\u65f6\u904d\u5386\u6570\u636e\u7d22\u5f15\u548c\u5143\u7d20", "for", "i", "num", "=", "int", "target", "int", "index", "int", "index", "=", "for", "i", ":", "=", "0", "i", "<", "i", "++", "if", "{", "}", "[", "]", "rand", ".", "Intn", "return", "}", "func", "extend", "(", ",", ")", ":", "int", ",", "+", "enlarge", "=", "range", "nums", "{", "}", "nums", "i", "=", "i", ">", "index", "", "nums", "[", "index", "]", "nums", "i", "=", "index", "i", "<", "=", "nums", ":", "=", "0", "// \u901a\u8fc7\u7d22\u5f15\u904d\u5386\u6570\u7ec4", "for", "i", ":", "len", "count", "+=", "_", "num", "=", ":", "range", "nums", "{", "}", "nums", "-", "1", "len", "==", "target", "index", "=", "i", "break", "(", ")", "nums", "[", "randomIndex", "]", "int", "enlarge", "int", "make", "len", "", "[", "]", ":", "-", "1", "=", "[", "]", ":", "-", "1", "nums", "[", "i", "]", "nums", "[", "]", "[", "]", "(", "nums", ")", "nums", "[", "i", "]", ":", "range", "nums", "{", "}", "count", "+=", "[", "]", "(", "nums", ")", "nums", "[", "i", "]", "len", "nums", "(", "[", "]", "(", "nums", ")", "=", "num", "len", "nums", "[", "i", "]", "nums", "[", "]", "len", "i", "+", "1", "count", "+=", "num", "+=", "num", "(", "nums", ")", "[", "]", "res", "[", "i", "]", "(", "nums", ")", "i", "-", "1", "(", "nums", ")", "nums", "[", "i", "]", "count"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 496, "ast_depth": 11, "n_identifiers": 23, "vocab_size": 66}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/go/chapter_dynamic_programming/climbing_stairs_backtrack.go#8-23", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/go/chapter_dynamic_programming/climbing_stairs_backtrack.go", "language": "Java"}, "method": {"name": "backtrack", "qualified_name": "codes.go.chapter_dynamic_programming.climbing_stairs_backtrack.go#backtrack", "start_line": 8, "end_line": 23, "signature": "backtrack(choices []int, state, n int, res []int)", "original_code": "func backtrack(choices []int, state, n int, res []int) {\n\t// \u5f53\u722c\u5230\u7b2c n \u9636\u65f6\uff0c\u65b9\u6848\u6570\u91cf\u52a0 1\n\tif state == n {\n\t\tres[0] = res[0] + 1\n\t}\n\t// \u904d\u5386\u6240\u6709\u9009\u62e9\n\tfor _, choice := range choices {\n\t\t// \u526a\u679d\uff1a\u4e0d\u5141\u8bb8\u8d8a\u8fc7\u7b2c n \u9636\n\t\tif state+choice > n {\n\t\t\tcontinue\n\t\t}\n\t\t// \u5c1d\u8bd5\uff1a\u505a\u51fa\u9009\u62e9\uff0c\u66f4\u65b0\u72b6\u6001\n\t\tbacktrack(choices, state+choice, n, res)\n\t\t// \u56de\u9000\n\t}\n}", "doc_comment": ""}, "code_tokens": ["func", "backtrack", "(", ",", ",", ",", ")", "{", "// \u5f53\u722c\u5230\u7b2c n \u9636\u65f6\uff0c\u65b9\u6848\u6570\u91cf\u52a0 1", "// \u904d\u5386\u6240\u6709\u9009\u62e9", "}", "int", "state", "", "n", "int", "int", "if", "{", "}", "for", "_", ",", "choice", ":", "choices", "res", "state", "==", "n", "", "=", "range", "choices", "{", "// \u526a\u679d\uff1a\u4e0d\u5141\u8bb8\u8d8a\u8fc7\u7b2c n \u9636", "// \u56de\u9000", "}", "[", "]", "[", "]", "=", "if", "// \u5c1d\u8bd5\uff1a\u505a\u51fa\u9009\u62e9\uff0c\u66f4\u65b0\u72b6\u6001", "res", "[", "0", "]", "+", "1", ">", "n", "{", "}", "backtrack", "res", "[", "0", "]", "state", "+", "choice", "continue", "(", "choices", ",", ",", "n", ",", "res", ")", "state", "+", "choice"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 107, "ast_depth": 10, "n_identifiers": 9, "vocab_size": 33}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/go/chapter_dynamic_programming/climbing_stairs_backtrack.go#26-36", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/go/chapter_dynamic_programming/climbing_stairs_backtrack.go", "language": "Java"}, "method": {"name": "climbingStairsBacktrack", "qualified_name": "codes.go.chapter_dynamic_programming.climbing_stairs_backtrack.go#climbingStairsBacktrack", "start_line": 26, "end_line": 36, "signature": "climbingStairsBacktrack(n int)", "original_code": "func climbingStairsBacktrack(n int) int {\n\t// \u53ef\u9009\u62e9\u5411\u4e0a\u722c 1 \u6216 2 \u9636\n\tchoices := []int{1, 2}\n\t// \u4ece\u7b2c 0 \u9636\u5f00\u59cb\u722c\n\tstate := 0\n\tres := make([]int, 1)\n\t// \u4f7f\u7528 res[0] \u8bb0\u5f55\u65b9\u6848\u6570\u91cf\n\tres[0] = 0\n\tbacktrack(choices, state, n, res)\n\treturn res[0]\n}", "doc_comment": "/* \u722c\u697c\u68af\uff1a\u56de\u6eaf */"}, "code_tokens": ["func", "climbingStairsBacktrack", "(", ")", "int", "{", "// \u53ef\u9009\u62e9\u5411\u4e0a\u722c 1 \u6216 2 \u9636", "// \u4ece\u7b2c 0 \u9636\u5f00\u59cb\u722c", "}", "n", "int", "", "{", "}", "", "", "choices", "int", "1", ",", "2", "state", "=", "0", "res", "=", "// \u4f7f\u7528 res[0] \u8bb0\u5f55\u65b9\u6848\u6570\u91cf", ":", "=", "[", "]", ":", ":", "int", ",", "1", ")", "=", "make", "res", "[", "0", "]", "0", "return", "res", "[", "0", "]", "(", "[", "]", "backtrack", "(", "choices", ",", "state", ",", "n", ",", "res", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 91, "ast_depth": 10, "n_identifiers": 8, "vocab_size": 26}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/java/chapter_array_and_linkedlist/array.java#14-20", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/java/chapter_array_and_linkedlist/array.java", "language": "Java"}, "method": {"name": "randomAccess", "qualified_name": "codes.java.chapter_array_and_linkedlist.array#randomAccess", "start_line": 14, "end_line": 20, "signature": "randomAccess(int[] nums)", "original_code": "static int randomAccess(int[] nums) {\n        // \u5728\u533a\u95f4 [0, nums.length) \u4e2d\u968f\u673a\u62bd\u53d6\u4e00\u4e2a\u6570\u5b57\n        int randomIndex = ThreadLocalRandom.current().nextInt(0, nums.length);\n        // \u83b7\u53d6\u5e76\u8fd4\u56de\u968f\u673a\u5143\u7d20\n        int randomNum = nums[randomIndex];\n        return randomNum;\n    }", "doc_comment": "/* \u968f\u673a\u8bbf\u95ee\u5143\u7d20 */"}, "code_tokens": ["randomAccess", "static", "int", "(", ")", "{", "// \u5728\u533a\u95f4 [0, nums.length) \u4e2d\u968f\u673a\u62bd\u53d6\u4e00\u4e2a\u6570\u5b57", "// \u83b7\u53d6\u5e76\u8fd4\u56de\u968f\u673a\u5143\u7d20", "}", "nums", ";", ";", "return", "randomNum", ";", "int", "randomIndex", "=", "int", "randomNum", "=", "int", "[", "]", ".", "nextInt", "nums", "[", "randomIndex", "]", "ThreadLocalRandom", ".", "current", "(", "0", ",", ")", "(", ")", "nums", ".", "length"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 65, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 24}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/java/chapter_array_and_linkedlist/array.java#23-32", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/java/chapter_array_and_linkedlist/array.java", "language": "Java"}, "method": {"name": "extend", "qualified_name": "codes.java.chapter_array_and_linkedlist.array#extend", "start_line": 23, "end_line": 32, "signature": "extend(int[] nums, int enlarge)", "original_code": "static int[] extend(int[] nums, int enlarge) {\n        // \u521d\u59cb\u5316\u4e00\u4e2a\u6269\u5c55\u957f\u5ea6\u540e\u7684\u6570\u7ec4\n        int[] res = new int[nums.length + enlarge];\n        // \u5c06\u539f\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u5143\u7d20\u590d\u5236\u5230\u65b0\u6570\u7ec4\n        for (int i = 0; i < nums.length; i++) {\n            res[i] = nums[i];\n        }\n        // \u8fd4\u56de\u6269\u5c55\u540e\u7684\u65b0\u6570\u7ec4\n        return res;\n    }", "doc_comment": "/* \u6269\u5c55\u6570\u7ec4\u957f\u5ea6 */"}, "code_tokens": ["extend", "static", "(", ",", ")", "{", "// \u521d\u59cb\u5316\u4e00\u4e2a\u6269\u5c55\u957f\u5ea6\u540e\u7684\u6570\u7ec4", "// \u5c06\u539f\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u5143\u7d20\u590d\u5236\u5230\u65b0\u6570\u7ec4", "// \u8fd4\u56de\u6269\u5c55\u540e\u7684\u65b0\u6570\u7ec4", "}", "int", "[", "]", "nums", "enlarge", ";", "for", "(", ";", ")", "return", "res", ";", "int", "res", "=", ";", "i", "<", "i", "++", "{", "}", "int", "[", "]", "int", "[", "]", "new", "int", "i", "=", "0", "nums", ".", "length", ";", "int", "[", "]", "=", "+", "enlarge", "res", "[", "i", "]", "nums", "[", "i", "]", "nums", ".", "length"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 102, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 28}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/java/chapter_array_and_linkedlist/array.java#35-42", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/java/chapter_array_and_linkedlist/array.java", "language": "Java"}, "method": {"name": "insert", "qualified_name": "codes.java.chapter_array_and_linkedlist.array#insert", "start_line": 35, "end_line": 42, "signature": "insert(int[] nums, int num, int index)", "original_code": "static void insert(int[] nums, int num, int index) {\n        // \u628a\u7d22\u5f15 index \u4ee5\u53ca\u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u540e\u79fb\u52a8\u4e00\u4f4d\n        for (int i = nums.length - 1; i > index; i--) {\n            nums[i] = nums[i - 1];\n        }\n        // \u5c06 num \u8d4b\u7ed9 index \u5904\u5143\u7d20\n        nums[index] = num;\n    }", "doc_comment": "/* \u5728\u6570\u7ec4\u7684\u7d22\u5f15 index \u5904\u63d2\u5165\u5143\u7d20 num */"}, "code_tokens": ["void", "insert", "static", "(", ",", ",", ")", "{", "// \u628a\u7d22\u5f15 index \u4ee5\u53ca\u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u540e\u79fb\u52a8\u4e00\u4f4d", "// \u5c06 num \u8d4b\u7ed9 index \u5904\u5143\u7d20", "}", "nums", "num", "index", "for", "(", ";", ")", ";", "int", "int", ";", "i", ">", "index", "i", "--", "{", "}", "=", "num", "int", "[", "]", "int", "i", "=", ";", "nums", "[", "index", "]", "-", "1", "=", "nums", ".", "length", "nums", "[", "i", "]", "nums", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 88, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 26}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/java/chapter_array_and_linkedlist/array.java#45-50", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/java/chapter_array_and_linkedlist/array.java", "language": "Java"}, "method": {"name": "remove", "qualified_name": "codes.java.chapter_array_and_linkedlist.array#remove", "start_line": 45, "end_line": 50, "signature": "remove(int[] nums, int index)", "original_code": "static void remove(int[] nums, int index) {\n        // \u628a\u7d22\u5f15 index \u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u524d\u79fb\u52a8\u4e00\u4f4d\n        for (int i = index; i < nums.length - 1; i++) {\n            nums[i] = nums[i + 1];\n        }\n    }", "doc_comment": "/* \u5220\u9664\u7d22\u5f15 index \u5904\u5143\u7d20 */"}, "code_tokens": ["void", "remove", "static", "(", ",", ")", "{", "// \u628a\u7d22\u5f15 index \u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u524d\u79fb\u52a8\u4e00\u4f4d", "}", "nums", "index", "for", "(", ";", ")", "int", ";", "i", "<", "i", "++", "{", "}", "int", "[", "]", "int", "i", "=", "index", "-", "1", ";", "nums", ".", "length", "=", "nums", "[", "i", "]", "nums", "[", "]", "i", "+", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 72, "ast_depth": 10, "n_identifiers": 5, "vocab_size": 25}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/java/chapter_array_and_linkedlist/array.java#53-63", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/java/chapter_array_and_linkedlist/array.java", "language": "Java"}, "method": {"name": "traverse", "qualified_name": "codes.java.chapter_array_and_linkedlist.array#traverse", "start_line": 53, "end_line": 63, "signature": "traverse(int[] nums)", "original_code": "static void traverse(int[] nums) {\n        int count = 0;\n        // \u901a\u8fc7\u7d22\u5f15\u904d\u5386\u6570\u7ec4\n        for (int i = 0; i < nums.length; i++) {\n            count += nums[i];\n        }\n        // \u76f4\u63a5\u904d\u5386\u6570\u7ec4\u5143\u7d20\n        for (int num : nums) {\n            count += num;\n        }\n    }", "doc_comment": "/* \u904d\u5386\u6570\u7ec4 */"}, "code_tokens": ["void", "traverse", "static", "(", ")", "{", "// \u901a\u8fc7\u7d22\u5f15\u904d\u5386\u6570\u7ec4", "// \u76f4\u63a5\u904d\u5386\u6570\u7ec4\u5143\u7d20", "}", "nums", ";", "for", "(", ";", ")", "for", "(", "num", ":", "nums", ")", "int", "count", "=", "0", ";", "i", "<", "i", "++", "{", "}", "int", "{", "}", "int", "[", "]", "int", "i", "=", "0", "nums", ".", "length", ";", ";", "count", "+=", "count", "+=", "num", "nums", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 84, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 26}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/java/chapter_array_and_linkedlist/array.java#66-72", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/java/chapter_array_and_linkedlist/array.java", "language": "Java"}, "method": {"name": "find", "qualified_name": "codes.java.chapter_array_and_linkedlist.array#find", "start_line": 66, "end_line": 72, "signature": "find(int[] nums, int target)", "original_code": "static int find(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            if (nums[i] == target)\n                return i;\n        }\n        return -1;\n    }", "doc_comment": "/* \u5728\u6570\u7ec4\u4e2d\u67e5\u627e\u6307\u5b9a\u5143\u7d20 */"}, "code_tokens": ["find", "static", "int", "(", ",", ")", "{", "}", "nums", "target", "for", "(", ";", ")", "return", ";", "int", ";", "i", "<", "i", "++", "{", "}", "-", "1", "int", "[", "]", "int", "i", "=", "0", "nums", ".", "length", "if", "(", ")", "return", "i", ";", "==", "target", "nums", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 75, "ast_depth": 10, "n_identifiers": 5, "vocab_size": 26}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/java/chapter_array_and_linkedlist/array.java#75-104", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/java/chapter_array_and_linkedlist/array.java", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.java.chapter_array_and_linkedlist.array#main", "start_line": 75, "end_line": 104, "signature": "main(String[] args)", "original_code": "public static void main(String[] args) {\n        /* \u521d\u59cb\u5316\u6570\u7ec4 */\n        int[] arr = new int[5];\n        System.out.println(\"\u6570\u7ec4 arr = \" + Arrays.toString(arr));\n        int[] nums = { 1, 3, 2, 5, 4 };\n        System.out.println(\"\u6570\u7ec4 nums = \" + Arrays.toString(nums));\n\n        /* \u968f\u673a\u8bbf\u95ee */\n        int randomNum = randomAccess(nums);\n        System.out.println(\"\u5728 nums \u4e2d\u83b7\u53d6\u968f\u673a\u5143\u7d20 \" + randomNum);\n\n        /* \u957f\u5ea6\u6269\u5c55 */\n        nums = extend(nums, 3);\n        System.out.println(\"\u5c06\u6570\u7ec4\u957f\u5ea6\u6269\u5c55\u81f3 8 \uff0c\u5f97\u5230 nums = \" + Arrays.toString(nums));\n\n        /* \u63d2\u5165\u5143\u7d20 */\n        insert(nums, 6, 3);\n        System.out.println(\"\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = \" + Arrays.toString(nums));\n\n        /* \u5220\u9664\u5143\u7d20 */\n        remove(nums, 2);\n        System.out.println(\"\u5220\u9664\u7d22\u5f15 2 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = \" + Arrays.toString(nums));\n\n        /* \u904d\u5386\u6570\u7ec4 */\n        traverse(nums);\n\n        /* \u67e5\u627e\u5143\u7d20 */\n        int index = find(nums, 3);\n        System.out.println(\"\u5728 nums \u4e2d\u67e5\u627e\u5143\u7d20 3 \uff0c\u5f97\u5230\u7d22\u5f15 = \" + index);\n    }", "doc_comment": "/* Driver Code */"}, "code_tokens": ["void", "main", "public", "static", "(", ")", "{", "/* \u521d\u59cb\u5316\u6570\u7ec4 */", "/* \u968f\u673a\u8bbf\u95ee */", "/* \u957f\u5ea6\u6269\u5c55 */", "/* \u63d2\u5165\u5143\u7d20 */", "/* \u5220\u9664\u5143\u7d20 */", "/* \u904d\u5386\u6570\u7ec4 */", "/* \u67e5\u627e\u5143\u7d20 */", "}", "args", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "String", "arr", "=", ".", "println", "nums", "=", ".", "println", "int", "randomNum", "=", ".", "println", "nums", "=", ".", "println", "insert", ".", "println", "remove", ".", "println", "traverse", "int", "index", "=", ".", "println", "[", "]", "int", "[", "]", "new", "System", ".", "out", "(", ")", "int", "[", "]", "{", "1", ",", "3", ",", "2", ",", "5", ",", "4", "}", "System", ".", "out", "(", ")", "randomAccess", "System", ".", "out", "(", ")", "extend", "System", ".", "out", "(", ")", "(", "nums", ",", "6", ",", "3", ")", "System", ".", "out", "(", ")", "(", "nums", ",", "2", ")", "System", ".", "out", "(", ")", "(", "nums", ")", "find", "System", ".", "out", "(", ")", "int", "[", "5", "]", "+", "+", "(", "nums", ")", "+", "randomNum", "(", "nums", ",", "3", ")", "+", "+", "+", "(", "nums", ",", "3", ")", "+", "index", "\"", "\u6570\u7ec4 arr = ", "\"", "Arrays", ".", "toString", "\"", "\u6570\u7ec4 nums = ", "\"", "Arrays", ".", "toString", "\"", "\u5728 nums \u4e2d\u83b7\u53d6\u968f\u673a\u5143\u7d20 ", "\"", "\"", "\u5c06\u6570\u7ec4\u957f\u5ea6\u6269\u5c55\u81f3 8 \uff0c\u5f97\u5230 nums = ", "\"", "Arrays", ".", "toString", "\"", "\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = ", "\"", "Arrays", ".", "toString", "\"", "\u5220\u9664\u7d22\u5f15 2 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = ", "\"", "Arrays", ".", "toString", "\"", "\u5728 nums \u4e2d\u67e5\u627e\u5143\u7d20 3 \uff0c\u5f97\u5230\u7d22\u5f15 = ", "\"", "(", "arr", ")", "(", "nums", ")", "(", "nums", ")", "(", "nums", ")", "(", "nums", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 308, "ast_depth": 10, "n_identifiers": 17, "vocab_size": 55}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/java/chapter_array_and_linkedlist/list.java#12-65", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/java/chapter_array_and_linkedlist/list.java", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.java.chapter_array_and_linkedlist.list#main", "start_line": 12, "end_line": 65, "signature": "main(String[] args)", "original_code": "public static void main(String[] args) {\n        /* \u521d\u59cb\u5316\u5217\u8868 */\n        // \u6ce8\u610f\u6570\u7ec4\u7684\u5143\u7d20\u7c7b\u578b\u662f int[] \u7684\u5305\u88c5\u7c7b Integer[]\n        Integer[] numbers = new Integer[] { 1, 3, 2, 5, 4 };\n        List<Integer> nums = new ArrayList<>(Arrays.asList(numbers));\n        System.out.println(\"\u5217\u8868 nums = \" + nums);\n\n        /* \u8bbf\u95ee\u5143\u7d20 */\n        int num = nums.get(1);\n        System.out.println(\"\u8bbf\u95ee\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 num = \" + num);\n\n        /* \u66f4\u65b0\u5143\u7d20 */\n        nums.set(1, 0);\n        System.out.println(\"\u5c06\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\u66f4\u65b0\u4e3a 0 \uff0c\u5f97\u5230 nums = \" + nums);\n\n        /* \u6e05\u7a7a\u5217\u8868 */\n        nums.clear();\n        System.out.println(\"\u6e05\u7a7a\u5217\u8868\u540e nums = \" + nums);\n\n        /* \u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 */\n        nums.add(1);\n        nums.add(3);\n        nums.add(2);\n        nums.add(5);\n        nums.add(4);\n        System.out.println(\"\u6dfb\u52a0\u5143\u7d20\u540e nums = \" + nums);\n\n        /* \u4e2d\u95f4\u63d2\u5165\u5143\u7d20 */\n        nums.add(3, 6);\n        System.out.println(\"\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = \" + nums);\n\n        /* \u5220\u9664\u5143\u7d20 */\n        nums.remove(3);\n        System.out.println(\"\u5220\u9664\u7d22\u5f15 3 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = \" + nums);\n\n        /* \u901a\u8fc7\u7d22\u5f15\u904d\u5386\u5217\u8868 */\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            count += nums.get(i);\n        }\n        /* \u76f4\u63a5\u904d\u5386\u5217\u8868\u5143\u7d20 */\n        for (int x : nums) {\n            count += x;\n        }\n\n        /* \u62fc\u63a5\u4e24\u4e2a\u5217\u8868 */\n        List<Integer> nums1 = new ArrayList<>(Arrays.asList(new Integer[] { 6, 8, 7, 10, 9 }));\n        nums.addAll(nums1);\n        System.out.println(\"\u5c06\u5217\u8868 nums1 \u62fc\u63a5\u5230 nums \u4e4b\u540e\uff0c\u5f97\u5230 nums = \" + nums);\n\n        /* \u6392\u5e8f\u5217\u8868 */\n        Collections.sort(nums);\n        System.out.println(\"\u6392\u5e8f\u5217\u8868\u540e nums = \" + nums);\n    }", "doc_comment": ""}, "code_tokens": ["void", "main", "public", "static", "(", ")", "{", "/* \u521d\u59cb\u5316\u5217\u8868 */", "// \u6ce8\u610f\u6570\u7ec4\u7684\u5143\u7d20\u7c7b\u578b\u662f int[] \u7684\u5305\u88c5\u7c7b Integer[]", "/* \u8bbf\u95ee\u5143\u7d20 */", "/* \u66f4\u65b0\u5143\u7d20 */", "/* \u6e05\u7a7a\u5217\u8868 */", "/* \u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 */", "/* \u4e2d\u95f4\u63d2\u5165\u5143\u7d20 */", "/* \u5220\u9664\u5143\u7d20 */", "/* \u901a\u8fc7\u7d22\u5f15\u904d\u5386\u5217\u8868 */", "/* \u76f4\u63a5\u904d\u5386\u5217\u8868\u5143\u7d20 */", "/* \u62fc\u63a5\u4e24\u4e2a\u5217\u8868 */", "/* \u6392\u5e8f\u5217\u8868 */", "}", "args", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "for", "(", ";", ")", "for", "(", "x", ":", "nums", ")", ";", ";", ";", ";", ";", "String", "Integer", "numbers", "=", "List", "nums", "=", ".", "println", "int", "num", "=", ".", "println", "nums", ".", "set", ".", "println", "nums", ".", "clear", ".", "println", "nums", ".", "add", "nums", ".", "add", "nums", ".", "add", "nums", ".", "add", "nums", ".", "add", ".", "println", "nums", ".", "add", ".", "println", "nums", ".", "remove", ".", "println", "int", "count", "=", "0", ";", "i", "<", "i", "++", "{", "}", "int", "{", "}", "List", "nums1", "=", "nums", ".", "addAll", ".", "println", "Collections", ".", "sort", ".", "println", "[", "]", "[", "]", "new", "Integer", "<", "Integer", ">", "new", "System", ".", "out", "(", ")", "nums", ".", "get", "System", ".", "out", "(", ")", "(", "1", ",", "0", ")", "System", ".", "out", "(", ")", "(", ")", "System", ".", "out", "(", ")", "(", "1", ")", "(", "3", ")", "(", "2", ")", "(", "5", ")", "(", "4", ")", "System", ".", "out", "(", ")", "(", "3", ",", "6", ")", "System", ".", "out", "(", ")", "(", "3", ")", "System", ".", "out", "(", ")", "int", "i", "=", "0", "nums", ".", "size", ";", ";", "<", "Integer", ">", "new", "(", "nums1", ")", "System", ".", "out", "(", ")", "(", "nums", ")", "System", ".", "out", "(", ")", "[", "]", "{", "1", ",", "3", ",", "2", ",", "5", ",", "4", "}", "ArrayList", "(", ")", "+", "nums", "(", "1", ")", "+", "num", "+", "nums", "+", "nums", "+", "nums", "+", "nums", "+", "nums", "(", ")", "count", "+=", "count", "+=", "x", "ArrayList", "(", ")", "+", "nums", "+", "nums", "<", ">", "Arrays", ".", "asList", "\"", "\u5217\u8868 nums = ", "\"", "\"", "\u8bbf\u95ee\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 num = ", "\"", "\"", "\u5c06\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\u66f4\u65b0\u4e3a 0 \uff0c\u5f97\u5230 nums = ", "\"", "\"", "\u6e05\u7a7a\u5217\u8868\u540e nums = ", "\"", "\"", "\u6dfb\u52a0\u5143\u7d20\u540e nums = ", "\"", "\"", "\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = ", "\"", "\"", "\u5220\u9664\u7d22\u5f15 3 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = ", "\"", "nums", ".", "get", "<", ">", "Arrays", ".", "asList", "\"", "\u5c06\u5217\u8868 nums1 \u62fc\u63a5\u5230 nums \u4e4b\u540e\uff0c\u5f97\u5230 nums = ", "\"", "\"", "\u6392\u5e8f\u5217\u8868\u540e nums = ", "\"", "(", "numbers", ")", "(", "i", ")", "(", ")", "new", "Integer", "[", "]", "{", "6", ",", "8", ",", "7", ",", "10", ",", "9", "}"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 502, "ast_depth": 12, "n_identifiers": 23, "vocab_size": 82}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/java/chapter_dynamic_programming/climbing_stairs_backtrack.java#13-26", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/java/chapter_dynamic_programming/climbing_stairs_backtrack.java", "language": "Java"}, "method": {"name": "backtrack", "qualified_name": "codes.java.chapter_dynamic_programming.climbing_stairs_backtrack#backtrack", "start_line": 13, "end_line": 26, "signature": "backtrack(List<Integer> choices, int state, int n, List<Integer> res)", "original_code": "public static void backtrack(List<Integer> choices, int state, int n, List<Integer> res) {\n        // \u5f53\u722c\u5230\u7b2c n \u9636\u65f6\uff0c\u65b9\u6848\u6570\u91cf\u52a0 1\n        if (state == n)\n            res.set(0, res.get(0) + 1);\n        // \u904d\u5386\u6240\u6709\u9009\u62e9\n        for (Integer choice : choices) {\n            // \u526a\u679d\uff1a\u4e0d\u5141\u8bb8\u8d8a\u8fc7\u7b2c n \u9636\n            if (state + choice > n)\n                continue;\n            // \u5c1d\u8bd5\uff1a\u505a\u51fa\u9009\u62e9\uff0c\u66f4\u65b0\u72b6\u6001\n            backtrack(choices, state + choice, n, res);\n            // \u56de\u9000\n        }\n    }", "doc_comment": "/* \u56de\u6eaf */"}, "code_tokens": ["void", "backtrack", "public", "static", "(", ",", ",", ",", ")", "{", "// \u5f53\u722c\u5230\u7b2c n \u9636\u65f6\uff0c\u65b9\u6848\u6570\u91cf\u52a0 1", "// \u904d\u5386\u6240\u6709\u9009\u62e9", "}", "choices", "state", "n", "res", "if", "for", "(", "Integer", "choice", ":", "choices", ")", "List", "int", "int", "List", "(", ")", ";", "{", "// \u526a\u679d\uff1a\u4e0d\u5141\u8bb8\u8d8a\u8fc7\u7b2c n \u9636", "// \u5c1d\u8bd5\uff1a\u505a\u51fa\u9009\u62e9\uff0c\u66f4\u65b0\u72b6\u6001", "// \u56de\u9000", "}", "<", "Integer", ">", "<", "Integer", ">", "state", "==", "n", "res", ".", "set", "if", ";", "(", "0", ",", ")", "(", ")", "continue", ";", "backtrack", "+", "1", ">", "n", "(", "choices", ",", ",", "n", ",", "res", ")", "res", ".", "get", "state", "+", "choice", "state", "+", "choice", "(", "0", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 119, "ast_depth": 11, "n_identifiers": 8, "vocab_size": 36}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/java/chapter_dynamic_programming/climbing_stairs_backtrack.java#29-36", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/java/chapter_dynamic_programming/climbing_stairs_backtrack.java", "language": "Java"}, "method": {"name": "climbingStairsBacktrack", "qualified_name": "codes.java.chapter_dynamic_programming.climbing_stairs_backtrack#climbingStairsBacktrack", "start_line": 29, "end_line": 36, "signature": "climbingStairsBacktrack(int n)", "original_code": "public static int climbingStairsBacktrack(int n) {\n        List<Integer> choices = Arrays.asList(1, 2); // \u53ef\u9009\u62e9\u5411\u4e0a\u722c 1 \u6216 2 \u9636\n        int state = 0; // \u4ece\u7b2c 0 \u9636\u5f00\u59cb\u722c\n        List<Integer> res = new ArrayList<>();\n        res.add(0); // \u4f7f\u7528 res[0] \u8bb0\u5f55\u65b9\u6848\u6570\u91cf\n        backtrack(choices, state, n, res);\n        return res.get(0);\n    }", "doc_comment": "/* \u722c\u697c\u68af\uff1a\u56de\u6eaf */"}, "code_tokens": ["climbingStairsBacktrack", "public", "static", "int", "(", ")", "{", "// \u53ef\u9009\u62e9\u5411\u4e0a\u722c 1 \u6216 2 \u9636", "// \u4ece\u7b2c 0 \u9636\u5f00\u59cb\u722c", "// \u4f7f\u7528 res[0] \u8bb0\u5f55\u65b9\u6848\u6570\u91cf", "}", "n", ";", ";", ";", ";", ";", "return", ";", "int", "List", "choices", "=", "int", "state", "=", "0", "List", "res", "=", "res", ".", "add", "backtrack", "res", ".", "get", "<", "Integer", ">", "Arrays", ".", "asList", "<", "Integer", ">", "new", "(", "0", ")", "(", "choices", ",", "state", ",", "n", ",", "res", ")", "(", "0", ")", "(", "1", ",", "2", ")", "ArrayList", "(", ")", "<", ">"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 106, "ast_depth": 9, "n_identifiers": 10, "vocab_size": 34}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/java/chapter_dynamic_programming/climbing_stairs_backtrack.java#38-43", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/java/chapter_dynamic_programming/climbing_stairs_backtrack.java", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.java.chapter_dynamic_programming.climbing_stairs_backtrack#main", "start_line": 38, "end_line": 43, "signature": "main(String[] args)", "original_code": "public static void main(String[] args) {\n        int n = 9;\n\n        int res = climbingStairsBacktrack(n);\n        System.out.println(String.format(\"\u722c %d \u9636\u697c\u68af\u5171\u6709 %d \u79cd\u65b9\u6848\", n, res));\n    }", "doc_comment": ""}, "code_tokens": ["void", "main", "public", "static", "(", ")", "{", "}", "args", ";", ";", ";", "String", "int", "n", "=", "9", "int", "res", "=", ".", "println", "[", "]", "climbingStairsBacktrack", "System", ".", "out", "(", ")", "(", "n", ")", "String", ".", "format", "(", ",", "n", ",", "res", ")", "\"", "\u722c %d \u9636\u697c\u68af\u5171\u6709 %d \u79cd\u65b9\u6848", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 68, "ast_depth": 10, "n_identifiers": 10, "vocab_size": 27}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/javascript/chapter_array_and_linkedlist/array.js#8-14", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/javascript/chapter_array_and_linkedlist/array.js", "language": "Java"}, "method": {"name": "randomAccess", "qualified_name": "codes.javascript.chapter_array_and_linkedlist.array.js#randomAccess", "start_line": 8, "end_line": 14, "signature": "randomAccess(nums)", "original_code": "function randomAccess(nums) {\n    // \u5728\u533a\u95f4 [0, nums.length) \u4e2d\u968f\u673a\u62bd\u53d6\u4e00\u4e2a\u6570\u5b57\n    const random_index = Math.floor(Math.random() * nums.length);\n    // \u83b7\u53d6\u5e76\u8fd4\u56de\u968f\u673a\u5143\u7d20\n    const random_num = nums[random_index];\n    return random_num;\n}", "doc_comment": "/* \u968f\u673a\u8bbf\u95ee\u5143\u7d20 */"}, "code_tokens": ["function", "randomAccess", "(", ")", "{", "// \u5728\u533a\u95f4 [0, nums.length) \u4e2d\u968f\u673a\u62bd\u53d6\u4e00\u4e2a\u6570\u5b57", "// \u83b7\u53d6\u5e76\u8fd4\u56de\u968f\u673a\u5143\u7d20", "}", "nums", "const", ";", "const", ";", "return", "random_num", ";", "random_index", "=", "random_num", "=", "Math", ".", "floor", "nums", "[", "random_index", "]", "(", ")", "*", "Math", ".", "random", "nums", ".", "length", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 55, "ast_depth": 11, "n_identifiers": 8, "vocab_size": 23}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/javascript/chapter_array_and_linkedlist/array.js#19-28", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/javascript/chapter_array_and_linkedlist/array.js", "language": "Java"}, "method": {"name": "extend", "qualified_name": "codes.javascript.chapter_array_and_linkedlist.array.js#extend", "start_line": 19, "end_line": 28, "signature": "extend(nums, enlarge)", "original_code": "function extend(nums, enlarge) {\n    // \u521d\u59cb\u5316\u4e00\u4e2a\u6269\u5c55\u957f\u5ea6\u540e\u7684\u6570\u7ec4\n    const res = new Array(nums.length + enlarge).fill(0);\n    // \u5c06\u539f\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u5143\u7d20\u590d\u5236\u5230\u65b0\u6570\u7ec4\n    for (let i = 0; i < nums.length; i++) {\n        res[i] = nums[i];\n    }\n    // \u8fd4\u56de\u6269\u5c55\u540e\u7684\u65b0\u6570\u7ec4\n    return res;\n}", "doc_comment": "// \u4e3a\u4e86\u65b9\u4fbf\u5b66\u4e60\uff0c\u672c\u51fd\u6570\u5c06 Array \u770b\u4f5c\u662f\u957f\u5ea6\u4e0d\u53ef\u53d8\u7684\u6570\u7ec4"}, "code_tokens": ["function", "extend", "(", ")", "{", "// \u521d\u59cb\u5316\u4e00\u4e2a\u6269\u5c55\u957f\u5ea6\u540e\u7684\u6570\u7ec4", "// \u5c06\u539f\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u5143\u7d20\u590d\u5236\u5230\u65b0\u6570\u7ec4", "// \u8fd4\u56de\u6269\u5c55\u540e\u7684\u65b0\u6570\u7ec4", "}", "nums", "enlarge", "const", ";", "for", "(", ";", ")", "return", "res", ";", ",", "res", "=", "let", ";", "i", "<", "i", "++", "{", "}", ".", "fill", "i", "=", "0", "nums", ".", "length", ";", "new", "Array", "(", "0", ")", "=", "(", ")", "res", "[", "i", "]", "nums", "[", "i", "]", "+", "enlarge", "nums", ".", "length"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 87, "ast_depth": 11, "n_identifiers": 7, "vocab_size": 31}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/javascript/chapter_array_and_linkedlist/array.js#31-38", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/javascript/chapter_array_and_linkedlist/array.js", "language": "Java"}, "method": {"name": "insert", "qualified_name": "codes.javascript.chapter_array_and_linkedlist.array.js#insert", "start_line": 31, "end_line": 38, "signature": "insert(nums, num, index)", "original_code": "function insert(nums, num, index) {\n    // \u628a\u7d22\u5f15 index \u4ee5\u53ca\u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u540e\u79fb\u52a8\u4e00\u4f4d\n    for (let i = nums.length - 1; i > index; i--) {\n        nums[i] = nums[i - 1];\n    }\n    // \u5c06 num \u8d4b\u7ed9 index \u5904\u5143\u7d20\n    nums[index] = num;\n}", "doc_comment": "/* \u5728\u6570\u7ec4\u7684\u7d22\u5f15 index \u5904\u63d2\u5165\u5143\u7d20 num */"}, "code_tokens": ["function", "insert", "(", ",", ")", "{", "// \u628a\u7d22\u5f15 index \u4ee5\u53ca\u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u540e\u79fb\u52a8\u4e00\u4f4d", "// \u5c06 num \u8d4b\u7ed9 index \u5904\u5143\u7d20", "}", "nums", "num", "index", "", "for", "(", ";", ")", ";", ",", "let", ";", "i", ">", "index", "i", "--", "{", "}", "=", "num", "i", "=", ";", "nums", "[", "index", "]", "-", "1", "=", "nums", ".", "length", "nums", "[", "i", "]", "nums", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 76, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 26}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/javascript/chapter_array_and_linkedlist/array.js#41-46", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/javascript/chapter_array_and_linkedlist/array.js", "language": "Java"}, "method": {"name": "remove", "qualified_name": "codes.javascript.chapter_array_and_linkedlist.array.js#remove", "start_line": 41, "end_line": 46, "signature": "remove(nums, index)", "original_code": "function remove(nums, index) {\n    // \u628a\u7d22\u5f15 index \u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u524d\u79fb\u52a8\u4e00\u4f4d\n    for (let i = index; i < nums.length - 1; i++) {\n        nums[i] = nums[i + 1];\n    }\n}", "doc_comment": "/* \u5220\u9664\u7d22\u5f15 index \u5904\u5143\u7d20 */"}, "code_tokens": ["function", "remove", "(", ")", "{", "// \u628a\u7d22\u5f15 index \u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u524d\u79fb\u52a8\u4e00\u4f4d", "}", "nums", "index", "for", "(", ";", ")", ",", "let", ";", "i", "<", "i", "++", "{", "}", "i", "=", "index", "-", "1", ";", "nums", ".", "length", "=", "nums", "[", "i", "]", "nums", "[", "]", "i", "+", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 61, "ast_depth": 10, "n_identifiers": 5, "vocab_size": 24}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/javascript/chapter_array_and_linkedlist/array.js#49-67", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/javascript/chapter_array_and_linkedlist/array.js", "language": "Java"}, "method": {"name": "traverse", "qualified_name": "codes.javascript.chapter_array_and_linkedlist.array.js#traverse", "start_line": 49, "end_line": 67, "signature": "traverse(nums)", "original_code": "function traverse(nums) {\n    let count = 0;\n    // \u901a\u8fc7\u7d22\u5f15\u904d\u5386\u6570\u7ec4\n    for (let i = 0; i < nums.length; i++) {\n        count += nums[i];\n    }\n    // \u76f4\u63a5\u904d\u5386\u6570\u7ec4\u5143\u7d20\n    for (const num of nums) {\n        count += num;\n    }\n}\n\n/* \u5728\u6570\u7ec4\u4e2d\u67e5\u627e\u6307\u5b9a\u5143\u7d20 */\nfunction find(nums, target) {\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] === target) return i;\n    }\n    return -1;\n}", "doc_comment": "/* \u904d\u5386\u6570\u7ec4 */"}, "code_tokens": ["function", "traverse", "(", ")", "{", "// \u901a\u8fc7\u7d22\u5f15\u904d\u5386\u6570\u7ec4", "// \u76f4\u63a5\u904d\u5386\u6570\u7ec4\u5143\u7d20", "}", "nums", "let", ";", "for", "(", ";", ")", "for", "(", "/* \u5728\u6570\u7ec4\u4e2d\u67e5\u627e\u6307\u5b9a\u5143\u7d20 */", ";", ")", "return", ";", "count", "=", "0", "let", ";", "i", "<", "i", "++", "{", "}", "const", ";", "}", "}", "function", "{", "for", "(", "=", "0", "i", "++", "{", "}", "-", "1", "i", "=", "0", "nums", ".", "length", ";", "num", "of", "nums", ")", "{", "count", "+=", "num", "find", "let", "i", "<", ";", "i", "if", "count", "+=", "(", "nums", ",", "target", ")", "nums", ".", "length", "(", ")", "return", "i", ";", "nums", "[", "i", "]", "==", "target", "nums", "[", "i", "]", "="], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 135, "ast_depth": 10, "n_identifiers": 9, "vocab_size": 35}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/javascript/chapter_dynamic_programming/climbing_stairs_backtrack.js#22-29", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/javascript/chapter_dynamic_programming/climbing_stairs_backtrack.js", "language": "Java"}, "method": {"name": "climbingStairsBacktrack", "qualified_name": "codes.javascript.chapter_dynamic_programming.climbing_stairs_backtrack.js#climbingStairsBacktrack", "start_line": 22, "end_line": 29, "signature": "climbingStairsBacktrack(n)", "original_code": "function climbingStairsBacktrack(n) {\n    const choices = [1, 2]; // \u53ef\u9009\u62e9\u5411\u4e0a\u722c 1 \u6216 2 \u9636\n    const state = 0; // \u4ece\u7b2c 0 \u9636\u5f00\u59cb\u722c\n    const res = new Map();\n    res.set(0, 0); // \u4f7f\u7528 res[0] \u8bb0\u5f55\u65b9\u6848\u6570\u91cf\n    backtrack(choices, state, n, res);\n    return res.get(0);\n}", "doc_comment": "/* \u722c\u697c\u68af\uff1a\u56de\u6eaf */"}, "code_tokens": ["function", "climbingStairsBacktrack", "(", ")", "{", "// \u53ef\u9009\u62e9\u5411\u4e0a\u722c 1 \u6216 2 \u9636", "// \u4ece\u7b2c 0 \u9636\u5f00\u59cb\u722c", "// \u4f7f\u7528 res[0] \u8bb0\u5f55\u65b9\u6848\u6570\u91cf", "}", "n", "const", ";", "const", ";", "const", ";", ";", ";", "return", ";", "choices", "=", "1", ",", "2", "]", "state", "=", "0", "res", "=", "res", ".", "set", "backtrack", "res", ".", "get", "[", "new", "Map", "(", "0", ",", "0", ")", "(", "choices", ",", "state", ",", "n", ",", "res", ")", "(", "0", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 84, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 29}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/rust/chapter_array_and_linkedlist/array.rs#12-18", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/rust/chapter_array_and_linkedlist/array.rs", "language": "Java"}, "method": {"name": "random_access", "qualified_name": "codes.rust.chapter_array_and_linkedlist.array.rs#random_access", "start_line": 12, "end_line": 18, "signature": "random_access(nums: &[i32]) -> i32", "original_code": "fn random_access(nums: &[i32]) -> i32 {\n    // \u5728\u533a\u95f4 [0, nums.len()) \u4e2d\u968f\u673a\u62bd\u53d6\u4e00\u4e2a\u6570\u5b57\n    let random_index = rand::thread_rng().gen_range(0..nums.len());\n    // \u83b7\u53d6\u5e76\u8fd4\u56de\u968f\u673a\u5143\u7d20\n    let random_num = nums[random_index];\n    random_num\n}", "doc_comment": "/* \u968f\u673a\u8bbf\u95ee\u5143\u7d20 */"}, "code_tokens": ["fn", "random_access", "(", "", "{", "// \u5728\u533a\u95f4 [0, nums.len()) \u4e2d\u968f\u673a\u62bd\u53d6\u4e00\u4e2a\u6570\u5b57", "// \u83b7\u53d6\u5e76\u8fd4\u56de\u968f\u673a\u5143\u7d20", "}", "i32", "let", "", ".", ";", "let", ";", "random_num", "", "nums", ")", "->", "random_index", "=", "(", ")", "gen_range", "random_num", "=", ":", "&", "[", "]", "rand", "::", "thread_rng", "(", ")", "nums", "[", "random_index", "]", "i32", ".", "len", "0.", ".", "nums", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 73, "ast_depth": 9, "n_identifiers": 9, "vocab_size": 28}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/rust/chapter_array_and_linkedlist/array.rs#33-40", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/rust/chapter_array_and_linkedlist/array.rs", "language": "Java"}, "method": {"name": "insert", "qualified_name": "codes.rust.chapter_array_and_linkedlist.array.rs#insert", "start_line": 33, "end_line": 40, "signature": "insert(nums: &mut Vec<i32>, num: i32, index: usize)", "original_code": "fn insert(nums: &mut Vec<i32>, num: i32, index: usize) {\n    // \u628a\u7d22\u5f15 index \u4ee5\u53ca\u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u540e\u79fb\u52a8\u4e00\u4f4d\n    for i in (index + 1..nums.len()).rev() {\n        nums[i] = nums[i - 1];\n    }\n    // \u5c06 num \u8d4b\u7ed9 index \u5904\u5143\u7d20\n    nums[index] = num;\n}", "doc_comment": "/* \u5728\u6570\u7ec4\u7684\u7d22\u5f15 index \u5904\u63d2\u5165\u5143\u7d20 num */"}, "code_tokens": ["fn", "insert", "(", ",", ",", ")", "{", "// \u628a\u7d22\u5f15 index \u4ee5\u53ca\u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u540e\u79fb\u52a8\u4e00\u4f4d", "// \u5c06 num \u8d4b\u7ed9 index \u5904\u5143\u7d20", "}", "nums", "i32", ">", "num", "i32", "index", "usize", "for", "i", "{", "}", ";", ":", "&", "mut", "Vec", "<", ":", ":", ".", "rev", ";", "=", "num", "in", "(", ")", "=", "nums", "[", "index", "]", "(", ")", "nums", "[", "i", "]", "nums", "[", "]", "index", "+", "i", "-", "1", ".", "len", "1.", ".", "nums", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 92, "ast_depth": 11, "n_identifiers": 12, "vocab_size": 34}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/rust/chapter_array_and_linkedlist/array.rs#43-48", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/rust/chapter_array_and_linkedlist/array.rs", "language": "Java"}, "method": {"name": "remove", "qualified_name": "codes.rust.chapter_array_and_linkedlist.array.rs#remove", "start_line": 43, "end_line": 48, "signature": "remove(nums: &mut Vec<i32>, index: usize)", "original_code": "fn remove(nums: &mut Vec<i32>, index: usize) {\n    // \u628a\u7d22\u5f15 index \u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u524d\u79fb\u52a8\u4e00\u4f4d\n    for i in index..nums.len() - 1 {\n        nums[i] = nums[i + 1];\n    }\n}", "doc_comment": "/* \u5220\u9664\u7d22\u5f15 index \u5904\u5143\u7d20 */"}, "code_tokens": ["fn", "remove", "(", ",", ")", "{", "// \u628a\u7d22\u5f15 index \u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u524d\u79fb\u52a8\u4e00\u4f4d", "}", "nums", "i32", ">", "index", "usize", "for", "i", "in", "index", ".", ".", "nums", ".", "len", "{", "}", ":", "&", "mut", "Vec", "<", ":", "(", ")", "-", "1", ";", "=", "nums", "[", "i", "]", "nums", "[", "]", "i", "+", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 64, "ast_depth": 9, "n_identifiers": 9, "vocab_size": 30}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/rust/chapter_array_and_linkedlist/array.rs#51-61", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/rust/chapter_array_and_linkedlist/array.rs", "language": "Java"}, "method": {"name": "traverse", "qualified_name": "codes.rust.chapter_array_and_linkedlist.array.rs#traverse", "start_line": 51, "end_line": 61, "signature": "traverse(nums: &[i32])", "original_code": "fn traverse(nums: &[i32]) {\n    let mut _count = 0;\n    // \u901a\u8fc7\u7d22\u5f15\u904d\u5386\u6570\u7ec4\n    for i in 0..nums.len() {\n        _count += nums[i];\n    }\n    // \u76f4\u63a5\u904d\u5386\u6570\u7ec4\u5143\u7d20\n    for num in nums {\n        _count += num;\n    }\n}", "doc_comment": "/* \u904d\u5386\u6570\u7ec4 */"}, "code_tokens": ["fn", "traverse", "(", ")", "{", "// \u901a\u8fc7\u7d22\u5f15\u904d\u5386\u6570\u7ec4", "// \u76f4\u63a5\u904d\u5386\u6570\u7ec4\u5143\u7d20", "}", "", "let", ";", "for", "i", "", "", "{", "}", "for", "num", "in", "", "{", "}", "nums", "mut", "_count", "=", "0", "in", ".", "len", ";", "nums", ";", ":", "&", "[", "]", "0.", ".", "nums", "(", ")", "_count", "+=", "_count", "+=", "num", "i32", "nums", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 82, "ast_depth": 8, "n_identifiers": 10, "vocab_size": 29}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/rust/chapter_array_and_linkedlist/array.rs#64-71", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/rust/chapter_array_and_linkedlist/array.rs", "language": "Java"}, "method": {"name": "find", "qualified_name": "codes.rust.chapter_array_and_linkedlist.array.rs#find", "start_line": 64, "end_line": 71, "signature": "find(nums: &[i32], target: i32)", "original_code": "fn find(nums: &[i32], target: i32) -> Option<usize> {\n    for i in 0..nums.len() {\n        if nums[i] == target {\n            return Some(i);\n        }\n    }\n    None\n}", "doc_comment": "/* \u5728\u6570\u7ec4\u4e2d\u67e5\u627e\u6307\u5b9a\u5143\u7d20 */"}, "code_tokens": ["fn", "find", "(", ")", "->", "Option", "<", "usize", ">", "{", "}", "i32", "for", "i", "in", "None", "nums", ",", "target", ":", ".", "len", "{", "}", ":", "&", "[", "]", "0.", ".", "nums", "(", ")", "if", "{", "}", "i32", "==", "target", "return", ";", "nums", "[", "i", "]", "Some", "(", "i", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 72, "ast_depth": 10, "n_identifiers": 11, "vocab_size": 31}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/rust/chapter_array_and_linkedlist/array.rs#74-111", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/rust/chapter_array_and_linkedlist/array.rs", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.rust.chapter_array_and_linkedlist.array.rs#main", "start_line": 74, "end_line": 111, "signature": "main()", "original_code": "fn main() {\n    /* \u521d\u59cb\u5316\u6570\u7ec4 */\n    let arr = [0; 5];\n    print!(\"\u6570\u7ec4 arr = \");\n    print_util::print_array(&arr);\n    // \u5728 Rust \u4e2d\uff0c\u6307\u5b9a\u957f\u5ea6\u65f6\uff08[i32; 5]\uff09\u4e3a\u6570\u7ec4\n    // \u7531\u4e8e Rust \u7684\u6570\u7ec4\u88ab\u8bbe\u8ba1\u4e3a\u5728\u7f16\u8bd1\u671f\u786e\u5b9a\u957f\u5ea6\uff0c\u56e0\u6b64\u53ea\u80fd\u4f7f\u7528\u5e38\u91cf\u6765\u6307\u5b9a\u957f\u5ea6\n    // \u4e3a\u4e86\u65b9\u4fbf\u5b9e\u73b0\u6269\u5bb9 extend() \u65b9\u6cd5\uff0c\u4ee5\u4e0b\u5c06(Vec) \u770b\u4f5c\u6570\u7ec4\uff08Array\uff09\u4e5f\u662frust\u4e00\u822c\u60c5\u51b5\u4e0b\u4f7f\u7528\u52a8\u6001\u6570\u7ec4\u7684\u7c7b\u578b\n    let nums = vec![ 1, 3, 2, 5, 4 ];\n    print!(\"\\n\u6570\u7ec4 nums = \");\n    print_util::print_array(&nums);\n\n    // \u968f\u673a\u8bbf\u95ee\n    let random_num = random_access(&nums);\n    println!(\"\\n\u5728 nums \u4e2d\u83b7\u53d6\u968f\u673a\u5143\u7d20 {}\", random_num);\n\n    // \u957f\u5ea6\u6269\u5c55\n    let mut nums = extend(nums, 3);\n    print!(\"\u5c06\u6570\u7ec4\u957f\u5ea6\u6269\u5c55\u81f3 8 \uff0c\u5f97\u5230 nums = \");\n    print_util::print_array(&arr);\n\n    // \u63d2\u5165\u5143\u7d20\n    insert(&mut nums, 6, 3);\n    print!(\"\\n\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = \");\n    print_util::print_array(&nums);\n\n    // \u5220\u9664\u5143\u7d20\n    remove(&mut nums, 2);\n    print!(\"\\n\u5220\u9664\u7d22\u5f15 2 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = \");\n    print_util::print_array(&nums);\n\n    // \u904d\u5386\u6570\u7ec4\n    traverse(&nums);\n\n    // \u67e5\u627e\u5143\u7d20\n    let index = find(&nums, 3).unwrap();\n    println!(\"\\n\u5728 nums \u4e2d\u67e5\u627e\u5143\u7d20 3 \uff0c\u5f97\u5230\u7d22\u5f15 = {}\", index);\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["fn", "main", "(", ")", "{", "/* \u521d\u59cb\u5316\u6570\u7ec4 */", "// \u5728 Rust \u4e2d\uff0c\u6307\u5b9a\u957f\u5ea6\u65f6\uff08[i32; 5]\uff09\u4e3a\u6570\u7ec4", "// \u7531\u4e8e Rust \u7684\u6570\u7ec4\u88ab\u8bbe\u8ba1\u4e3a\u5728\u7f16\u8bd1\u671f\u786e\u5b9a\u957f\u5ea6\uff0c\u56e0\u6b64\u53ea\u80fd\u4f7f\u7528\u5e38\u91cf\u6765\u6307\u5b9a\u957f\u5ea6", "// \u4e3a\u4e86\u65b9\u4fbf\u5b9e\u73b0\u6269\u5bb9 extend() \u65b9\u6cd5\uff0c\u4ee5\u4e0b\u5c06(Vec) \u770b\u4f5c\u6570\u7ec4\uff08Array\uff09\u4e5f\u662frust\u4e00\u822c\u60c5\u51b5\u4e0b\u4f7f\u7528\u52a8\u6001\u6570\u7ec4\u7684\u7c7b\u578b", "// \u968f\u673a\u8bbf\u95ee", "// \u957f\u5ea6\u6269\u5c55", "// \u63d2\u5165\u5143\u7d20", "// \u5220\u9664\u5143\u7d20", "// \u904d\u5386\u6570\u7ec4", "// \u67e5\u627e\u5143\u7d20", "}", "let", ";", "5", ";", ";", ";", "let", ";", ";", ";", "let", ";", ";", "let", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "let", ";", ";", "arr", "=", "0", "]", "print", "&", "arr", ")", "nums", "=", "print", "&", "nums", ")", "random_num", "=", "println", "mut", "nums", "=", "print", "&", "arr", ")", "insert", "print", "&", "nums", ")", "remove", "print", "&", "nums", ")", "traverse", "index", "=", "println", "[", "!", "(", ")", "print_util", "::", "print_array", "(", "vec", "[", "4", "]", "!", "(", ")", "print_util", "::", "print_array", "(", "random_access", "!", "(", ",", "random_num", ")", "extend", "!", "(", ")", "print_util", "::", "print_array", "(", "(", ")", "!", "(", ")", "print_util", "::", "print_array", "(", "(", ")", "!", "(", ")", "print_util", "::", "print_array", "(", "(", "nums", ")", ".", "unwrap", "!", "(", ",", "index", ")", "\"", "\u6570\u7ec4 arr = ", "\"", "!", "1", ",", "3", ",", "2", ",", "5", ",", "\"", "\\n", "\u6570\u7ec4 nums = ", "\"", "(", "nums", ")", "\"", "\\n", "\u5728 nums \u4e2d\u83b7\u53d6\u968f\u673a\u5143\u7d20 {}", "\"", "(", "nums", ",", "3", ")", "\"", "\u5c06\u6570\u7ec4\u957f\u5ea6\u6269\u5c55\u81f3 8 \uff0c\u5f97\u5230 nums = ", "\"", "&", "mut", "nums", ",", "6", ",", "3", "\"", "\\n", "\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = ", "\"", "&", "mut", "nums", ",", "2", "\"", "\\n", "\u5220\u9664\u7d22\u5f15 2 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = ", "\"", "&", "find", "(", ")", "\"", "\\n", "\u5728 nums \u4e2d\u67e5\u627e\u5143\u7d20 3 \uff0c\u5f97\u5230\u7d22\u5f15 = {}", "\"", "&", "(", "nums", ",", "3", ")", "&"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 311, "ast_depth": 10, "n_identifiers": 18, "vocab_size": 59}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/rust/chapter_array_and_linkedlist/list.rs#10-71", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/rust/chapter_array_and_linkedlist/list.rs", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.rust.chapter_array_and_linkedlist.list.rs#main", "start_line": 10, "end_line": 71, "signature": "main()", "original_code": "fn main() {\n    // \u521d\u59cb\u5316\u5217\u8868\n    let mut nums: Vec<i32> = vec![ 1, 3, 2, 5, 4 ];\n    print!(\"\u5217\u8868 nums = \");\n    print_util::print_array(&nums);\n\n    // \u8bbf\u95ee\u5143\u7d20\n    let num = nums[1];\n    println!(\"\\n\u8bbf\u95ee\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 num = {num}\");\n\n    // \u66f4\u65b0\u5143\u7d20\n    nums[1] = 0;\n    print!(\"\u5c06\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\u66f4\u65b0\u4e3a 0 \uff0c\u5f97\u5230 nums = \");\n    print_util::print_array(&nums);\n\n    // \u6e05\u7a7a\u5217\u8868\n    nums.clear();\n    print!(\"\\n\u6e05\u7a7a\u5217\u8868\u540e nums = \");\n    print_util::print_array(&nums);\n\n    // \u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20\n    nums.push(1);\n    nums.push(3);\n    nums.push(2);\n    nums.push(5);\n    nums.push(4);\n    print!(\"\\n\u6dfb\u52a0\u5143\u7d20\u540e nums = \");\n    print_util::print_array(&nums);\n\n    // \u4e2d\u95f4\u63d2\u5165\u5143\u7d20\n    nums.insert(3, 6);\n    print!(\"\\n\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = \");\n    print_util::print_array(&nums);\n\n    // \u5220\u9664\u5143\u7d20\n    nums.remove(3);\n    print!(\"\\n\u5220\u9664\u7d22\u5f15 3 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = \");\n    print_util::print_array(&nums);\n\n    // \u901a\u8fc7\u7d22\u5f15\u904d\u5386\u5217\u8868\n    let mut _count = 0;\n    for i in 0..nums.len() {\n        _count += nums[i];\n    }\n    // \u76f4\u63a5\u904d\u5386\u5217\u8868\u5143\u7d20\n    _count = 0;\n    for x in &nums {\n        _count += x;\n    }\n\n    // \u62fc\u63a5\u4e24\u4e2a\u5217\u8868\n    let mut nums1 = vec![ 6, 8, 7, 10, 9 ];\n    nums.append(&mut nums1);  // append\uff08\u79fb\u52a8\uff09 \u4e4b\u540e nums1 \u4e3a\u7a7a\uff01\n    // nums.extend(&nums1);   // extend\uff08\u501f\u7528\uff09 nums1 \u80fd\u7ee7\u7eed\u4f7f\u7528 \n    print!(\"\\n\u5c06\u5217\u8868 nums1 \u62fc\u63a5\u5230 nums \u4e4b\u540e\uff0c\u5f97\u5230 nums = \");\n    print_util::print_array(&nums);\n\n    // \u6392\u5e8f\u5217\u8868\n    nums.sort();\n    print!(\"\\n\u6392\u5e8f\u5217\u8868\u540e nums = \");\n    print_util::print_array(&nums);\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["fn", "main", "(", ")", "{", "// \u521d\u59cb\u5316\u5217\u8868", "// \u8bbf\u95ee\u5143\u7d20", "// \u66f4\u65b0\u5143\u7d20", "// \u6e05\u7a7a\u5217\u8868", "// \u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20", "// \u4e2d\u95f4\u63d2\u5165\u5143\u7d20", "// \u5220\u9664\u5143\u7d20", "// \u901a\u8fc7\u7d22\u5f15\u904d\u5386\u5217\u8868", "// \u76f4\u63a5\u904d\u5386\u5217\u8868\u5143\u7d20", "// \u62fc\u63a5\u4e24\u4e2a\u5217\u8868", "// append\uff08\u79fb\u52a8\uff09 \u4e4b\u540e nums1 \u4e3a\u7a7a\uff01", "// nums.extend(&nums1);   // extend\uff08\u501f\u7528\uff09 nums1 \u80fd\u7ee7\u7eed\u4f7f\u7528 ", "// \u6392\u5e8f\u5217\u8868", "}", "let", "", "nums", ":", ";", ";", "let", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "let", ";", "for", "i", "", "", "{", "}", ";", "for", "x", "", "{", "}", "let", ";", ";", ";", ";", ";", ";", ";", "mut", ";", "print", "&", "nums", ")", "num", "=", "println", "=", "0", "print", "&", "nums", ")", "nums", ".", "clear", "print", "&", "nums", ")", "nums", ".", "push", "nums", ".", "push", "nums", ".", "push", "nums", ".", "push", "nums", ".", "push", "print", "&", "nums", ")", "nums", ".", "insert", "print", "&", "nums", ")", "nums", ".", "remove", "print", "&", "nums", ")", "mut", "_count", "=", "0", "in", ".", "len", ";", "_count", "=", "0", "in", "&", "nums", ";", "mut", "nums1", "=", "nums", ".", "append", "print", "&", "nums", ")", "nums", ".", "sort", "print", "&", "nums", ")", "Vec", "=", "vec", "!", "[", "1", ",", "3", ",", "2", ",", "5", ",", "4", "]", "!", "(", ")", "print_util", "::", "print_array", "(", "nums", "[", "1", "]", "!", "(", ")", "nums", "[", "1", "]", "!", "(", ")", "print_util", "::", "print_array", "(", "(", ")", "!", "(", ")", "print_util", "::", "print_array", "(", "(", "1", ")", "(", "3", ")", "(", "2", ")", "(", "5", ")", "(", "4", ")", "!", "(", ")", "print_util", "::", "print_array", "(", "(", "3", ",", "6", ")", "!", "(", ")", "print_util", "::", "print_array", "(", "(", "3", ")", "!", "(", ")", "print_util", "::", "print_array", "(", "0.", ".", "nums", "(", ")", "_count", "+=", "_count", "+=", "x", "vec", "[", "9", "]", "(", ")", "!", "(", ")", "print_util", "::", "print_array", "(", "(", ")", "!", "(", ")", "print_util", "::", "print_array", "(", "<", "i32", ">", "\"", "\u5217\u8868 nums = ", "\"", "\"", "\\n", "\u8bbf\u95ee\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 num = {num}", "\"", "\"", "\u5c06\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\u66f4\u65b0\u4e3a 0 \uff0c\u5f97\u5230 nums = ", "\"", "\"", "\\n", "\u6e05\u7a7a\u5217\u8868\u540e nums = ", "\"", "\"", "\\n", "\u6dfb\u52a0\u5143\u7d20\u540e nums = ", "\"", "\"", "\\n", "\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = ", "\"", "\"", "\\n", "\u5220\u9664\u7d22\u5f15 3 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = ", "\"", "nums", "[", "i", "]", "!", "6", ",", "8", ",", "7", ",", "10", ",", "&", "mut", "nums1", "\"", "\\n", "\u5c06\u5217\u8868 nums1 \u62fc\u63a5\u5230 nums \u4e4b\u540e\uff0c\u5f97\u5230 nums = ", "\"", "\"", "\\n", "\u6392\u5e8f\u5217\u8868\u540e nums = ", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 497, "ast_depth": 8, "n_identifiers": 21, "vocab_size": 80}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/rust/chapter_dynamic_programming/climbing_stairs_backtrack.rs#8-19", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/rust/chapter_dynamic_programming/climbing_stairs_backtrack.rs", "language": "Java"}, "method": {"name": "backtrack", "qualified_name": "codes.rust.chapter_dynamic_programming.climbing_stairs_backtrack.rs#backtrack", "start_line": 8, "end_line": 19, "signature": "backtrack(choices: &[i32], state: i32, n: i32, res: &mut [i32])", "original_code": "fn backtrack(choices: &[i32], state: i32, n: i32, res: &mut [i32]) {\r\n    // \u5f53\u722c\u5230\u7b2c n \u9636\u65f6\uff0c\u65b9\u6848\u6570\u91cf\u52a0 1\r\n    if state == n { res[0] = res[0] + 1; }\r\n    // \u904d\u5386\u6240\u6709\u9009\u62e9\r\n    for &choice in choices {\r\n        // \u526a\u679d\uff1a\u4e0d\u5141\u8bb8\u8d8a\u8fc7\u7b2c n \u9636\r\n        if state + choice > n { continue; }\r\n        // \u5c1d\u8bd5\uff1a\u505a\u51fa\u9009\u62e9\uff0c\u66f4\u65b0\u72b6\u6001\r\n        backtrack(choices, state + choice, n, res);\r\n        // \u56de\u9000\r\n    }\r\n}", "doc_comment": "/* \u56de\u6eaf */"}, "code_tokens": ["fn", "backtrack", "(", ",", ",", ")", "{", "// \u5f53\u722c\u5230\u7b2c n \u9636\u65f6\uff0c\u65b9\u6848\u6570\u91cf\u52a0 1\r", "// \u904d\u5386\u6240\u6709\u9009\u62e9\r", "}", "i32", "n", "i32", "res", "mut", "if", "{", "}", "for", "&", "choice", "in", "choices", "{", "// \u526a\u679d\uff1a\u4e0d\u5141\u8bb8\u8d8a\u8fc7\u7b2c n \u9636\r", "// \u5c1d\u8bd5\uff1a\u505a\u51fa\u9009\u62e9\uff0c\u66f4\u65b0\u72b6\u6001\r", "// \u56de\u9000\r", "}", "choices", ",", "state", ":", ":", ":", "&", "[", "]", "state", "==", "n", ";", "if", "{", "}", ";", ":", "&", "[", "]", "i32", "=", ">", "n", "continue", ";", "backtrack", "i32", "res", "[", "0", "]", "+", "1", "state", "+", "choice", "(", "choices", ",", ",", "n", ",", "res", ")", "res", "[", "0", "]", "state", "+", "choice"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 116, "ast_depth": 9, "n_identifiers": 9, "vocab_size": 34}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/rust/chapter_dynamic_programming/climbing_stairs_backtrack.rs#22-29", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/rust/chapter_dynamic_programming/climbing_stairs_backtrack.rs", "language": "Java"}, "method": {"name": "climbing_stairs_backtrack", "qualified_name": "codes.rust.chapter_dynamic_programming.climbing_stairs_backtrack.rs#climbing_stairs_backtrack", "start_line": 22, "end_line": 29, "signature": "climbing_stairs_backtrack(n: usize)", "original_code": "fn climbing_stairs_backtrack(n: usize) -> i32 {\r\n    let choices = vec![ 1, 2 ]; // \u53ef\u9009\u62e9\u5411\u4e0a\u722c 1 \u6216 2 \u9636\r\n    let state = 0; // \u4ece\u7b2c 0 \u9636\u5f00\u59cb\u722c\r\n    let mut res = Vec::new();\r\n    res.push(0); // \u4f7f\u7528 res[0] \u8bb0\u5f55\u65b9\u6848\u6570\u91cf\r\n    backtrack(&choices, state, n as i32, &mut res);\r\n    res[0]\r\n}", "doc_comment": "/* \u722c\u697c\u68af\uff1a\u56de\u6eaf */"}, "code_tokens": ["fn", "climbing_stairs_backtrack", "(", ")", "->", "i32", "{", "// \u53ef\u9009\u62e9\u5411\u4e0a\u722c 1 \u6216 2 \u9636\r", "// \u4ece\u7b2c 0 \u9636\u5f00\u59cb\u722c\r", "// \u4f7f\u7528 res[0] \u8bb0\u5f55\u65b9\u6848\u6570\u91cf\r", "}", "n", "usize", "let", ";", "let", ";", "let", ";", ";", "", ":", "choices", "=", "state", "=", "0", "mut", "res", "=", "backtrack", "res", "[", "0", "]", "vec", "[", "2", "]", ";", "res", ".", "push", "(", "choices", ",", "state", ",", "i32", ",", "res", ")", "!", "1", ",", "Vec", "::", "new", "(", ")", "(", "0", ")", "&", "n", "as", "&", "mut"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 98, "ast_depth": 8, "n_identifiers": 12, "vocab_size": 38}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/rust/chapter_dynamic_programming/climbing_stairs_backtrack.rs#32-37", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/rust/chapter_dynamic_programming/climbing_stairs_backtrack.rs", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.rust.chapter_dynamic_programming.climbing_stairs_backtrack.rs#main", "start_line": 32, "end_line": 37, "signature": "main()", "original_code": "pub fn main() {\r\n    let n: usize = 9;\r\n\r\n    let res = climbing_stairs_backtrack(n);\r\n    println!(\"\u722c {n} \u9636\u697c\u68af\u5171\u6709 {res} \u79cd\u65b9\u6848\");\r\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["pub", "main", "fn", "(", ")", "{", "}", "let", ";", "let", ";", ";", "n", ":", "usize", "=", "9", "res", "=", "println", "climbing_stairs_backtrack", "!", "(", ")", "(", "n", ")", "\"", "\u722c {n} \u9636\u697c\u68af\u5171\u6709 {res} \u79cd\u65b9\u6848", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 47, "ast_depth": 8, "n_identifiers": 7, "vocab_size": 20}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/swift/chapter_array_and_linkedlist/array.swift#8-14", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/swift/chapter_array_and_linkedlist/array.swift", "language": "Java"}, "method": {"name": "randomAccess", "qualified_name": "codes.swift.chapter_array_and_linkedlist.array.swift#randomAccess", "start_line": 8, "end_line": 14, "signature": "randomAccess(nums: [Int]) -> Int", "original_code": "func randomAccess(nums: [Int]) -> Int {\n    // \u5728\u533a\u95f4 [0, nums.count) \u4e2d\u968f\u673a\u62bd\u53d6\u4e00\u4e2a\u6570\u5b57\n    let randomIndex = nums.indices.randomElement()!\n    // \u83b7\u53d6\u5e76\u8fd4\u56de\u968f\u673a\u5143\u7d20\n    let randomNum = nums[randomIndex]\n    return randomNum\n}", "doc_comment": "/* \u968f\u673a\u8bbf\u95ee\u5143\u7d20 */"}, "code_tokens": ["func", "randomAccess", "(", "", "{", "// \u5728\u533a\u95f4 [0, nums.count) \u4e2d\u968f\u673a\u62bd\u53d6\u4e00\u4e2a\u6570\u5b57", "}", "Int", "let", "", "", "return", "randomNum", "", "nums", ")", "->", "randomIndex", "=", "!", "// \u83b7\u53d6\u5e76\u8fd4\u56de\u968f\u673a\u5143\u7d20", ":", "[", "]", ".", "randomElement", "let", "randomNum", "=", "Int", "nums", ".", "indices", "(", ")", "nums", "[", "randomIndex", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 60, "ast_depth": 8, "n_identifiers": 7, "vocab_size": 24}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/swift/chapter_array_and_linkedlist/array.swift#17-26", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/swift/chapter_array_and_linkedlist/array.swift", "language": "Java"}, "method": {"name": "extend", "qualified_name": "codes.swift.chapter_array_and_linkedlist.array.swift#extend", "start_line": 17, "end_line": 26, "signature": "extend(nums: [Int], enlarge: Int)", "original_code": "func extend(nums: [Int], enlarge: Int) -> [Int] {\n    // \u521d\u59cb\u5316\u4e00\u4e2a\u6269\u5c55\u957f\u5ea6\u540e\u7684\u6570\u7ec4\n    var res = Array(repeating: 0, count: nums.count + enlarge)\n    // \u5c06\u539f\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u5143\u7d20\u590d\u5236\u5230\u65b0\u6570\u7ec4\n    for i in nums.indices {\n        res[i] = nums[i]\n    }\n    // \u8fd4\u56de\u6269\u5c55\u540e\u7684\u65b0\u6570\u7ec4\n    return res\n}", "doc_comment": "/* \u6269\u5c55\u6570\u7ec4\u957f\u5ea6 */"}, "code_tokens": ["func", "extend", "(", ")", "->", "[", "]", "{", "// \u521d\u59cb\u5316\u4e00\u4e2a\u6269\u5c55\u957f\u5ea6\u540e\u7684\u6570\u7ec4", "}", "Int", "Int", "var", "// \u8fd4\u56de\u6269\u5c55\u540e\u7684\u65b0\u6570\u7ec4", "", "return", "res", "", "nums", ",", "enlarge", ":", "res", "=", ":", "[", "]", "// \u5c06\u539f\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u5143\u7d20\u590d\u5236\u5230\u65b0\u6570\u7ec4", "for", "i", "in", "{", "}", "Int", "Array", "nums", ".", "indices", "=", "(", ")", "res", "[", "i", "]", "nums", "[", "i", "]", "repeating", ",", "count", ":", "+", "enlarge", ":", "0", "nums", ".", "count"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 88, "ast_depth": 11, "n_identifiers": 11, "vocab_size": 32}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/swift/chapter_array_and_linkedlist/array.swift#29-58", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/swift/chapter_array_and_linkedlist/array.swift", "language": "Java"}, "method": {"name": "insert", "qualified_name": "codes.swift.chapter_array_and_linkedlist.array.swift#insert", "start_line": 29, "end_line": 58, "signature": "insert(nums: inout [Int], num: Int, index: Int)", "original_code": "func insert(nums: inout [Int], num: Int, index: Int) {\n    // \u628a\u7d22\u5f15 index \u4ee5\u53ca\u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u540e\u79fb\u52a8\u4e00\u4f4d\n    for i in sequence(first: nums.count - 1, next: { $0 > index + 1 ? $0 - 1 : nil }) {\n        nums[i] = nums[i - 1]\n    }\n    // \u5c06 num \u8d4b\u7ed9 index \u5904\u5143\u7d20\n    nums[index] = num\n}\n\n/* \u5220\u9664\u7d22\u5f15 index \u5904\u5143\u7d20 */\nfunc remove(nums: inout [Int], index: Int) {\n    let count = nums.count\n    // \u628a\u7d22\u5f15 index \u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u524d\u79fb\u52a8\u4e00\u4f4d\n    for i in sequence(first: index, next: { $0 < count - 1 - 1 ? $0 + 1 : nil }) {\n        nums[i] = nums[i + 1]\n    }\n}\n\n/* \u904d\u5386\u6570\u7ec4 */\nfunc traverse(nums: [Int]) {\n    var count = 0\n    // \u901a\u8fc7\u7d22\u5f15\u904d\u5386\u6570\u7ec4\n    for i in nums.indices {\n        count += nums[i]\n    }\n    // \u76f4\u63a5\u904d\u5386\u6570\u7ec4\u5143\u7d20\n    for num in nums {\n        count += num\n    }\n}", "doc_comment": "/* \u5728\u6570\u7ec4\u7684\u7d22\u5f15 index \u5904\u63d2\u5165\u5143\u7d20 num */"}, "code_tokens": ["func", "insert", "(", ",", ",", ")", "{", "// \u628a\u7d22\u5f15 index \u4ee5\u53ca\u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u540e\u79fb\u52a8\u4e00\u4f4d", "/* \u5220\u9664\u7d22\u5f15 index \u5904\u5143\u7d20 */", "/* \u904d\u5386\u6570\u7ec4 */", "}", "nums", "inout", "num", "Int", "index", "Int", "for", "i", "in", "sequence", "(", "first", "nums", ".", "count", "-", "1", ",", "next", ":", "{", "}", "func", "", "{", "}", "func", "", "", "{", "}", ":", "[", "]", ":", ":", ":", "}", ")", "// \u5c06 num \u8d4b\u7ed9 index \u5904\u5143\u7d20", "remove", "(", ",", ")", "let", ")", "{", "}", "traverse", "(", ")", "var", "// \u76f4\u63a5\u904d\u5386\u6570\u7ec4\u5143\u7d20", "for", "num", "in", "nums", "{", "count", "+=", "num", "Int", "?", ":", "nil", "{", "}", "=", "num", "nums", "inout", "index", "Int", "count", "=", "", "nums", "[", "Int", "]", "count", "=", "$0", ">", "$0", "-", "1", "", "nums", "[", "index", "]", ":", "[", "]", ":", "// \u628a\u7d22\u5f15 index \u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u524d\u79fb\u52a8\u4e00\u4f4d", "for", "i", "in", "sequence", "(", "index", ",", "next", ":", "{", "}", "=", ":", "0", "// \u901a\u8fc7\u7d22\u5f15\u904d\u5386\u6570\u7ec4", "for", "i", "in", "{", "}", "index", "+", "1", "=", "Int", "nums", ".", "count", "first", ":", "?", ":", "nil", "nums", "[", "i", "]", "nums", "[", "]", "nums", ".", "indices", "count", "+=", "nums", "[", "i", "]", "nums", "[", "]", "$0", "<", "$0", "+", "1", "i", "+", "1", "nums", "[", "i", "]", "i", "-", "1", "-", "1", "count", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 250, "ast_depth": 12, "n_identifiers": 17, "vocab_size": 47}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/swift/chapter_array_and_linkedlist/array.swift#61-68", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/swift/chapter_array_and_linkedlist/array.swift", "language": "Java"}, "method": {"name": "find", "qualified_name": "codes.swift.chapter_array_and_linkedlist.array.swift#find", "start_line": 61, "end_line": 68, "signature": "find(nums: [Int], target: Int)", "original_code": "func find(nums: [Int], target: Int) -> Int {\n    for i in nums.indices {\n        if nums[i] == target {\n            return i\n        }\n    }\n    return -1\n}", "doc_comment": "/* \u5728\u6570\u7ec4\u4e2d\u67e5\u627e\u6307\u5b9a\u5143\u7d20 */"}, "code_tokens": ["func", "find", "(", ")", "->", "Int", "{", "}", "Int", "for", "i", "in", "indices", "return", "nums", ",", "target", ":", "nums", ".", "{", "}", "-", "1", ":", "[", "]", "if", "{", "}", "Int", "==", "target", "return", "i", "", "nums", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 60, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 25}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/swift/chapter_dynamic_programming/climbing_stairs_backtrack.swift#8-21", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/swift/chapter_dynamic_programming/climbing_stairs_backtrack.swift", "language": "Java"}, "method": {"name": "backtrack", "qualified_name": "codes.swift.chapter_dynamic_programming.climbing_stairs_backtrack.swift#backtrack", "start_line": 8, "end_line": 21, "signature": "backtrack(choices: [Int], state: Int, n: Int, res: inout [Int])", "original_code": "func backtrack(choices: [Int], state: Int, n: Int, res: inout [Int]) {\n    // \u5f53\u722c\u5230\u7b2c n \u9636\u65f6\uff0c\u65b9\u6848\u6570\u91cf\u52a0 1\n    if state == n {\n        res[0] += 1\n    }\n    // \u904d\u5386\u6240\u6709\u9009\u62e9\n    for choice in choices {\n        // \u526a\u679d\uff1a\u4e0d\u5141\u8bb8\u8d8a\u8fc7\u7b2c n \u9636\n        if state + choice > n {\n            continue\n        }\n        backtrack(choices: choices, state: state + choice, n: n, res: &res)\n    }\n}", "doc_comment": "/* \u56de\u6eaf */"}, "code_tokens": ["func", "backtrack", "(", ",", ",", ")", "{", "// \u5f53\u722c\u5230\u7b2c n \u9636\u65f6\uff0c\u65b9\u6848\u6570\u91cf\u52a0 1", "// \u904d\u5386\u6240\u6709\u9009\u62e9", "}", "Int", "n", "Int", "res", "inout", "if", "{", "}", "for", "choice", "in", "", "{", "// \u526a\u679d\uff1a\u4e0d\u5141\u8bb8\u8d8a\u8fc7\u7b2c n \u9636", "}", "choices", ",", "state", ":", ":", ":", "[", "]", "state", "==", "n", "", "choices", "if", ":", "[", "]", "Int", "+=", "1", ">", "n", "{", "}", "backtrack", "Int", "res", "[", "0", "]", "state", "+", "choice", "continue", "(", "res", ")", "choices", ":", "choices", ",", "state", ":", ",", "n", ":", "n", ",", "res", ":", "&", "state", "+", "choice"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 114, "ast_depth": 10, "n_identifiers": 8, "vocab_size": 32}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/swift/chapter_dynamic_programming/climbing_stairs_backtrack.swift#24-31", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/swift/chapter_dynamic_programming/climbing_stairs_backtrack.swift", "language": "Java"}, "method": {"name": "climbingStairsBacktrack", "qualified_name": "codes.swift.chapter_dynamic_programming.climbing_stairs_backtrack.swift#climbingStairsBacktrack", "start_line": 24, "end_line": 31, "signature": "climbingStairsBacktrack(n: Int)", "original_code": "func climbingStairsBacktrack(n: Int) -> Int {\n    let choices = [1, 2] // \u53ef\u9009\u62e9\u5411\u4e0a\u722c 1 \u6216 2 \u9636\n    let state = 0 // \u4ece\u7b2c 0 \u9636\u5f00\u59cb\u722c\n    var res: [Int] = []\n    res.append(0) // \u4f7f\u7528 res[0] \u8bb0\u5f55\u65b9\u6848\u6570\u91cf\n    backtrack(choices: choices, state: state, n: n, res: &res)\n    return res[0]\n}", "doc_comment": "/* \u722c\u697c\u68af\uff1a\u56de\u6eaf */"}, "code_tokens": ["func", "climbingStairsBacktrack", "(", ")", "->", "Int", "{", "}", "n", "Int", "let", ",", "// \u53ef\u9009\u62e9\u5411\u4e0a\u722c 1 \u6216 2 \u9636", "// \u4ece\u7b2c 0 \u9636\u5f00\u59cb\u722c", "", "", "// \u4f7f\u7528 res[0] \u8bb0\u5f55\u65b9\u6848\u6570\u91cf", "", "", "return", "", ":", "choices", "=", "1", "2", "]", "let", "state", "=", "0", "var", "res", ".", "append", "(", "0", ")", "backtrack", "res", "[", "0", "]", "[", "res", "=", "[", "]", "(", "res", ")", ":", "[", "Int", "]", "choices", ":", "choices", ",", "state", ":", "state", ",", "n", ":", "n", ",", "res", ":", "&"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 98, "ast_depth": 8, "n_identifiers": 9, "vocab_size": 31}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/typescript/chapter_array_and_linkedlist/array.ts#8-14", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/typescript/chapter_array_and_linkedlist/array.ts", "language": "Java"}, "method": {"name": "randomAccess", "qualified_name": "codes.typescript.chapter_array_and_linkedlist.array.ts#randomAccess", "start_line": 8, "end_line": 14, "signature": "randomAccess(nums: number[])", "original_code": "function randomAccess(nums: number[]): number {\n    // \u5728\u533a\u95f4 [0, nums.length) \u4e2d\u968f\u673a\u62bd\u53d6\u4e00\u4e2a\u6570\u5b57\n    const random_index = Math.floor(Math.random() * nums.length);\n    // \u83b7\u53d6\u5e76\u8fd4\u56de\u968f\u673a\u5143\u7d20\n    const random_num = nums[random_index];\n    return random_num;\n}", "doc_comment": "/* \u968f\u673a\u8bbf\u95ee\u5143\u7d20 */"}, "code_tokens": ["function", "randomAccess", "(", ")", ":", "number", "{", "// \u5728\u533a\u95f4 [0, nums.length) \u4e2d\u968f\u673a\u62bd\u53d6\u4e00\u4e2a\u6570\u5b57", "// \u83b7\u53d6\u5e76\u8fd4\u56de\u968f\u673a\u5143\u7d20", "}", "nums", "number", "const", ";", "const", ";", "return", "random_num", ";", ":", "[", "]", "random_index", "=", "random_num", "=", "Math", ".", "floor", "nums", "[", "random_index", "]", "(", ")", "*", "Math", ".", "random", "nums", ".", "length", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 64, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 25}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/typescript/chapter_array_and_linkedlist/array.ts#19-28", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/typescript/chapter_array_and_linkedlist/array.ts", "language": "Java"}, "method": {"name": "extend", "qualified_name": "codes.typescript.chapter_array_and_linkedlist.array.ts#extend", "start_line": 19, "end_line": 28, "signature": "extend(nums: number[], enlarge: number)", "original_code": "function extend(nums: number[], enlarge: number): number[] {\n    // \u521d\u59cb\u5316\u4e00\u4e2a\u6269\u5c55\u957f\u5ea6\u540e\u7684\u6570\u7ec4\n    const res = new Array(nums.length + enlarge).fill(0);\n    // \u5c06\u539f\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u5143\u7d20\u590d\u5236\u5230\u65b0\u6570\u7ec4\n    for (let i = 0; i < nums.length; i++) {\n        res[i] = nums[i];\n    }\n    // \u8fd4\u56de\u6269\u5c55\u540e\u7684\u65b0\u6570\u7ec4\n    return res;\n}", "doc_comment": "// \u4e3a\u4e86\u65b9\u4fbf\u5b66\u4e60\uff0c\u672c\u51fd\u6570\u5c06 Array \u770b\u4f5c\u662f\u957f\u5ea6\u4e0d\u53ef\u53d8\u7684\u6570\u7ec4"}, "code_tokens": ["function", "extend", "(", ",", ")", ":", "number", "[", "]", "{", "// \u521d\u59cb\u5316\u4e00\u4e2a\u6269\u5c55\u957f\u5ea6\u540e\u7684\u6570\u7ec4", "// \u5c06\u539f\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u5143\u7d20\u590d\u5236\u5230\u65b0\u6570\u7ec4", "// \u8fd4\u56de\u6269\u5c55\u540e\u7684\u65b0\u6570\u7ec4", "}", "nums", "number", "enlarge", "number", "const", ";", "for", "(", ";", ")", "return", "res", ";", ":", "[", "]", ":", "res", "=", "let", ";", "i", "<", "i", "++", "{", "}", ".", "fill", "i", "=", "0", "nums", ".", "length", ";", "new", "Array", "(", "0", ")", "=", "(", ")", "res", "[", "i", "]", "nums", "[", "i", "]", "+", "enlarge", "nums", ".", "length"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 102, "ast_depth": 11, "n_identifiers": 8, "vocab_size": 33}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/typescript/chapter_array_and_linkedlist/array.ts#31-38", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/typescript/chapter_array_and_linkedlist/array.ts", "language": "Java"}, "method": {"name": "insert", "qualified_name": "codes.typescript.chapter_array_and_linkedlist.array.ts#insert", "start_line": 31, "end_line": 38, "signature": "insert(nums: number[], num: number, index: number)", "original_code": "function insert(nums: number[], num: number, index: number): void {\n    // \u628a\u7d22\u5f15 index \u4ee5\u53ca\u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u540e\u79fb\u52a8\u4e00\u4f4d\n    for (let i = nums.length - 1; i > index; i--) {\n        nums[i] = nums[i - 1];\n    }\n    // \u5c06 num \u8d4b\u7ed9 index \u5904\u5143\u7d20\n    nums[index] = num;\n}", "doc_comment": "/* \u5728\u6570\u7ec4\u7684\u7d22\u5f15 index \u5904\u63d2\u5165\u5143\u7d20 num */"}, "code_tokens": ["function", "insert", "(", ",", ",", ")", ":", "void", "{", "// \u628a\u7d22\u5f15 index \u4ee5\u53ca\u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u540e\u79fb\u52a8\u4e00\u4f4d", "// \u5c06 num \u8d4b\u7ed9 index \u5904\u5143\u7d20", "}", "nums", "number", "num", "number", "index", "number", "for", "(", ";", ")", ";", ":", "[", "]", ":", ":", "let", ";", "i", ">", "index", "i", "--", "{", "}", "=", "num", "i", "=", ";", "nums", "[", "index", "]", "-", "1", "=", "nums", ".", "length", "nums", "[", "i", "]", "nums", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 90, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 28}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/typescript/chapter_array_and_linkedlist/array.ts#41-46", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/typescript/chapter_array_and_linkedlist/array.ts", "language": "Java"}, "method": {"name": "remove", "qualified_name": "codes.typescript.chapter_array_and_linkedlist.array.ts#remove", "start_line": 41, "end_line": 46, "signature": "remove(nums: number[], index: number)", "original_code": "function remove(nums: number[], index: number): void {\n    // \u628a\u7d22\u5f15 index \u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u524d\u79fb\u52a8\u4e00\u4f4d\n    for (let i = index; i < nums.length - 1; i++) {\n        nums[i] = nums[i + 1];\n    }\n}", "doc_comment": "/* \u5220\u9664\u7d22\u5f15 index \u5904\u5143\u7d20 */"}, "code_tokens": ["function", "remove", "(", ",", ")", ":", "void", "{", "// \u628a\u7d22\u5f15 index \u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u524d\u79fb\u52a8\u4e00\u4f4d", "}", "nums", "number", "index", "number", "for", "(", ";", ")", ":", "[", "]", ":", "let", ";", "i", "<", "i", "++", "{", "}", "i", "=", "index", "-", "1", ";", "nums", ".", "length", "=", "nums", "[", "i", "]", "nums", "[", "]", "i", "+", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 73, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 27}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/typescript/chapter_array_and_linkedlist/array.ts#49-69", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/typescript/chapter_array_and_linkedlist/array.ts", "language": "Java"}, "method": {"name": "traverse", "qualified_name": "codes.typescript.chapter_array_and_linkedlist.array.ts#traverse", "start_line": 49, "end_line": 69, "signature": "traverse(nums: number[])", "original_code": "function traverse(nums: number[]): void {\n    let count = 0;\n    // \u901a\u8fc7\u7d22\u5f15\u904d\u5386\u6570\u7ec4\n    for (let i = 0; i < nums.length; i++) {\n        count += nums[i];\n    }\n    // \u76f4\u63a5\u904d\u5386\u6570\u7ec4\u5143\u7d20\n    for (const num of nums) {\n        count += num;\n    }\n}\n\n/* \u5728\u6570\u7ec4\u4e2d\u67e5\u627e\u6307\u5b9a\u5143\u7d20 */\nfunction find(nums: number[], target: number): number {\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] === target) {\n            return i;\n        }\n    }\n    return -1;\n}", "doc_comment": "/* \u904d\u5386\u6570\u7ec4 */"}, "code_tokens": ["function", "traverse", "(", ")", ":", "void", "{", "// \u901a\u8fc7\u7d22\u5f15\u904d\u5386\u6570\u7ec4", "// \u76f4\u63a5\u904d\u5386\u6570\u7ec4\u5143\u7d20", "}", "nums", "number", "let", ";", "for", "(", ";", ")", "for", "(", "/* \u5728\u6570\u7ec4\u4e2d\u67e5\u627e\u6307\u5b9a\u5143\u7d20 */", ";", ")", "return", ";", ":", "[", "]", "count", "=", "0", "let", ";", "i", "<", "i", "++", "{", "}", "const", ";", "}", "}", "function", ":", "number", "=", "0", "i", "++", "{", "}", "-", "1", "i", "=", "0", "nums", ".", "length", ";", "num", "of", "nums", ")", "{", "count", "+=", "num", "find", "{", "for", "(", "let", "i", "<", ";", "i", "if", "count", "+=", "(", "number", ")", "nums", ".", "length", "(", ")", "{", "}", "nums", "[", "i", "]", "nums", ":", ",", "target", ":", "==", "target", "return", "i", ";", "number", "nums", "[", "i", "]", "=", "[", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 159, "ast_depth": 11, "n_identifiers": 10, "vocab_size": 38}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/typescript/chapter_dynamic_programming/climbing_stairs_backtrack.ts#8-24", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/typescript/chapter_dynamic_programming/climbing_stairs_backtrack.ts", "language": "Java"}, "method": {"name": "backtrack", "qualified_name": "codes.typescript.chapter_dynamic_programming.climbing_stairs_backtrack.ts#backtrack", "start_line": 8, "end_line": 24, "signature": "backtrack(\n    choices: number[],\n    state: number,\n    n: number,\n    res: Map<0, any>\n)", "original_code": "function backtrack(\n    choices: number[],\n    state: number,\n    n: number,\n    res: Map<0, any>\n): void {\n    // \u5f53\u722c\u5230\u7b2c n \u9636\u65f6\uff0c\u65b9\u6848\u6570\u91cf\u52a0 1\n    if (state === n) res.set(0, res.get(0) + 1);\n    // \u904d\u5386\u6240\u6709\u9009\u62e9\n    for (const choice of choices) {\n        // \u526a\u679d\uff1a\u4e0d\u5141\u8bb8\u8d8a\u8fc7\u7b2c n \u9636\n        if (state + choice > n) continue;\n        // \u5c1d\u8bd5\uff1a\u505a\u51fa\u9009\u62e9\uff0c\u66f4\u65b0\u72b6\u6001\n        backtrack(choices, state + choice, n, res);\n        // \u56de\u9000\n    }\n}", "doc_comment": "/* \u56de\u6eaf */"}, "code_tokens": ["function", "backtrack", "(", ",", ",", ",", ")", ":", "void", "{", "// \u5f53\u722c\u5230\u7b2c n \u9636\u65f6\uff0c\u65b9\u6848\u6570\u91cf\u52a0 1", "// \u904d\u5386\u6240\u6709\u9009\u62e9", "}", "choices", "number", "state", "number", "n", "number", "res", "Map", "<", "0", ",", "any", ">", "if", "for", "(", "const", "choices", ")", "{", "// \u526a\u679d\uff1a\u4e0d\u5141\u8bb8\u8d8a\u8fc7\u7b2c n \u9636", "// \u5c1d\u8bd5\uff1a\u505a\u51fa\u9009\u62e9\uff0c\u66f4\u65b0\u72b6\u6001", "// \u56de\u9000", "}", ":", "[", "]", ":", ":", ":", "(", ")", ";", "choice", "of", "if", ";", "state", "==", "n", "res", ".", "set", "(", ")", "continue", ";", "backtrack", "=", "(", "0", ",", ")", ">", "n", "(", "choices", ",", ",", "n", ",", "res", ")", "+", "1", "state", "+", "choice", "state", "+", "choice", "res", ".", "get", "(", "0", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 127, "ast_depth": 11, "n_identifiers": 11, "vocab_size": 40}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/typescript/chapter_dynamic_programming/climbing_stairs_backtrack.ts#27-34", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/typescript/chapter_dynamic_programming/climbing_stairs_backtrack.ts", "language": "Java"}, "method": {"name": "climbingStairsBacktrack", "qualified_name": "codes.typescript.chapter_dynamic_programming.climbing_stairs_backtrack.ts#climbingStairsBacktrack", "start_line": 27, "end_line": 34, "signature": "climbingStairsBacktrack(n: number)", "original_code": "function climbingStairsBacktrack(n: number): number {\n    const choices = [1, 2]; // \u53ef\u9009\u62e9\u5411\u4e0a\u722c 1 \u6216 2 \u9636\n    const state = 0; // \u4ece\u7b2c 0 \u9636\u5f00\u59cb\u722c\n    const res = new Map();\n    res.set(0, 0); // \u4f7f\u7528 res[0] \u8bb0\u5f55\u65b9\u6848\u6570\u91cf\n    backtrack(choices, state, n, res);\n    return res.get(0);\n}", "doc_comment": "/* \u722c\u697c\u68af\uff1a\u56de\u6eaf */"}, "code_tokens": ["function", "climbingStairsBacktrack", "(", ")", ":", "number", "{", "// \u53ef\u9009\u62e9\u5411\u4e0a\u722c 1 \u6216 2 \u9636", "// \u4ece\u7b2c 0 \u9636\u5f00\u59cb\u722c", "// \u4f7f\u7528 res[0] \u8bb0\u5f55\u65b9\u6848\u6570\u91cf", "}", "n", "number", "const", ";", "const", ";", "const", ";", ";", ";", "return", ";", ":", "choices", "=", "1", ",", "2", "]", "state", "=", "0", "res", "=", "res", ".", "set", "backtrack", "res", ".", "get", "[", "new", "Map", "(", "0", ",", "0", ")", "(", "choices", ",", "state", ",", "n", ",", "res", ")", "(", "0", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 90, "ast_depth": 8, "n_identifiers": 9, "vocab_size": 31}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/zig/chapter_array_and_linkedlist/array.zig#9-15", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/zig/chapter_array_and_linkedlist/array.zig", "language": "Java"}, "method": {"name": "randomAccess", "qualified_name": "codes.zig.chapter_array_and_linkedlist.array.zig#randomAccess", "start_line": 9, "end_line": 15, "signature": "randomAccess(nums: []i32)", "original_code": "pub fn randomAccess(nums: []i32) i32 {\n    // \u5728\u533a\u95f4 [0, nums.len) \u4e2d\u968f\u673a\u62bd\u53d6\u4e00\u4e2a\u6574\u6570\n    var randomIndex = std.crypto.random.intRangeLessThan(usize, 0, nums.len);\n    // \u83b7\u53d6\u5e76\u8fd4\u56de\u968f\u673a\u5143\u7d20\n    var randomNum = nums[randomIndex];\n    return randomNum;\n}", "doc_comment": "// \u968f\u673a\u8bbf\u95ee\u5143\u7d20"}, "code_tokens": ["pub", "randomAccess", "fn", "(", ")", "i32", "{", "// \u5728\u533a\u95f4 [0, nums.len) \u4e2d\u968f\u673a\u62bd\u53d6\u4e00\u4e2a\u6574\u6570", "// \u83b7\u53d6\u5e76\u8fd4\u56de\u968f\u673a\u5143\u7d20", "}", "i32", "var", ";", "var", ";", "return", "randomNum", ";", "nums", "randomIndex", "=", "randomNum", "=", ":", "[", "]", ".", "intRangeLessThan", "nums", "[", "randomIndex", "]", ".", "random", "(", "usize", ",", "0", ",", ")", "std", ".", "crypto", "nums", ".", "len"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 67, "ast_depth": 9, "n_identifiers": 12, "vocab_size": 29}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/zig/chapter_array_and_linkedlist/array.zig#18-26", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/zig/chapter_array_and_linkedlist/array.zig", "language": "Java"}, "method": {"name": "extend", "qualified_name": "codes.zig.chapter_array_and_linkedlist.array.zig#extend", "start_line": 18, "end_line": 26, "signature": "extend(mem_allocator: std.mem.Allocator, nums: []i32, enlarge: usize)", "original_code": "pub fn extend(mem_allocator: std.mem.Allocator, nums: []i32, enlarge: usize) ![]i32 {\n    // \u521d\u59cb\u5316\u4e00\u4e2a\u6269\u5c55\u957f\u5ea6\u540e\u7684\u6570\u7ec4\n    var res = try mem_allocator.alloc(i32, nums.len + enlarge);\n    @memset(res, 0);\n    // \u5c06\u539f\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u5143\u7d20\u590d\u5236\u5230\u65b0\u6570\u7ec4\n    std.mem.copy(i32, res, nums);\n    // \u8fd4\u56de\u6269\u5c55\u540e\u7684\u65b0\u6570\u7ec4\n    return res;\n}", "doc_comment": "// \u6269\u5c55\u6570\u7ec4\u957f\u5ea6"}, "code_tokens": ["pub", "extend", "fn", "(", ",", ")", "!", "[", "]", "i32", "{", "// \u521d\u59cb\u5316\u4e00\u4e2a\u6269\u5c55\u957f\u5ea6\u540e\u7684\u6570\u7ec4", ";", "// \u5c06\u539f\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u5143\u7d20\u590d\u5236\u5230\u65b0\u6570\u7ec4", "// \u8fd4\u56de\u6269\u5c55\u540e\u7684\u65b0\u6570\u7ec4", "}", "i32", "enlarge", "usize", "var", ";", ";", "return", "res", ";", "mem_allocator", ":", "res", "=", "@", "memset", ".", "copy", ":", "std", ".", "mem", ".", "Allocator", ",", "nums", ":", "[", "]", "try", "mem_allocator", ".", "alloc", "(", "res", ")", "std", ".", "mem", "(", "i32", ",", "res", ",", "nums", ")", "(", "i32", ",", ")", ",", "0", "+", "enlarge", "nums", ".", "len"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 102, "ast_depth": 10, "n_identifiers": 15, "vocab_size": 37}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/zig/chapter_array_and_linkedlist/array.zig#29-37", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/zig/chapter_array_and_linkedlist/array.zig", "language": "Java"}, "method": {"name": "insert", "qualified_name": "codes.zig.chapter_array_and_linkedlist.array.zig#insert", "start_line": 29, "end_line": 37, "signature": "insert(nums: []i32, num: i32, index: usize)", "original_code": "pub fn insert(nums: []i32, num: i32, index: usize) void {\n    // \u628a\u7d22\u5f15 index \u4ee5\u53ca\u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u540e\u79fb\u52a8\u4e00\u4f4d\n    var i = nums.len - 1;\n    while (i > index) : (i -= 1) {\n        nums[i] = nums[i - 1];\n    }\n    // \u5c06 num \u8d4b\u7ed9 index \u5904\u5143\u7d20\n    nums[index] = num;\n}", "doc_comment": "// \u5728\u6570\u7ec4\u7684\u7d22\u5f15 index \u5904\u63d2\u5165\u5143\u7d20 num"}, "code_tokens": ["pub", "insert", "fn", "(", ",", ",", ")", "void", "{", "// \u628a\u7d22\u5f15 index \u4ee5\u53ca\u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u540e\u79fb\u52a8\u4e00\u4f4d", "// \u5c06 num \u8d4b\u7ed9 index \u5904\u5143\u7d20", "}", "i32", "num", "i32", "index", "usize", "var", ";", "while", ";", "nums", ":", ":", "i", "=", "(", ")", ":", "{", "}", "=", "num", ":", "[", "]", "-", "1", "i", ">", "index", "(", ")", ";", "nums", "[", "index", "]", "nums", ".", "len", "i", "-=", "1", "=", "nums", "[", "i", "]", "nums", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 98, "ast_depth": 10, "n_identifiers": 10, "vocab_size": 30}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/zig/chapter_array_and_linkedlist/array.zig#40-46", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/zig/chapter_array_and_linkedlist/array.zig", "language": "Java"}, "method": {"name": "remove", "qualified_name": "codes.zig.chapter_array_and_linkedlist.array.zig#remove", "start_line": 40, "end_line": 46, "signature": "remove(nums: []i32, index: usize)", "original_code": "pub fn remove(nums: []i32, index: usize) void {\n    // \u628a\u7d22\u5f15 index \u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u524d\u79fb\u52a8\u4e00\u4f4d\n    var i = index;\n    while (i < nums.len - 1) : (i += 1) {\n        nums[i] = nums[i + 1];\n    }\n}", "doc_comment": "// \u5220\u9664\u7d22\u5f15 index \u5904\u5143\u7d20"}, "code_tokens": ["pub", "remove", "fn", "(", ",", ")", "void", "{", "// \u628a\u7d22\u5f15 index \u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u524d\u79fb\u52a8\u4e00\u4f4d", "}", "i32", "index", "usize", "var", ";", "while", "nums", ":", "i", "=", "index", "(", ")", ":", "{", "}", ":", "[", "]", "i", "<", "(", ")", ";", "-", "1", "i", "+=", "1", "=", "nums", ".", "len", "nums", "[", "i", "]", "nums", "[", "]", "i", "+", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 81, "ast_depth": 10, "n_identifiers": 9, "vocab_size": 29}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/zig/chapter_array_and_linkedlist/list.zig#9-9", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/zig/chapter_array_and_linkedlist/list.zig", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.zig.chapter_array_and_linkedlist.list.zig#main", "start_line": 9, "end_line": 9, "signature": "main()", "original_code": "pub fn main()", "doc_comment": "// Driver Code"}, "code_tokens": ["pub", "main", "", "fn", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 10, "ast_depth": 4, "n_identifiers": 2, "vocab_size": 6}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/zig/chapter_dynamic_programming/climbing_stairs_backtrack.zig#8-23", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/zig/chapter_dynamic_programming/climbing_stairs_backtrack.zig", "language": "Java"}, "method": {"name": "backtrack", "qualified_name": "codes.zig.chapter_dynamic_programming.climbing_stairs_backtrack.zig#backtrack", "start_line": 8, "end_line": 23, "signature": "backtrack(choices: []i32, state: i32, n: i32, res: std.ArrayList(i32)", "original_code": "fn backtrack(choices: []i32, state: i32, n: i32, res: std.ArrayList(i32)) void {\n    // \u5f53\u722c\u5230\u7b2c n \u9636\u65f6\uff0c\u65b9\u6848\u6570\u91cf\u52a0 1\n    if (state == n) {\n        res.items[0] = res.items[0] + 1;\n    }\n    // \u904d\u5386\u6240\u6709\u9009\u62e9\n    for (choices) |choice| {\n        // \u526a\u679d\uff1a\u4e0d\u5141\u8bb8\u8d8a\u8fc7\u7b2c n \u9636\n        if (state + choice > n) {\n            continue;\n        }\n        // \u5c1d\u8bd5\uff1a\u505a\u51fa\u9009\u62e9\uff0c\u66f4\u65b0\u72b6\u6001\n        backtrack(choices, state + choice, n, res);\n        // \u56de\u9000\n    }\n}", "doc_comment": "// \u56de\u6eaf"}, "code_tokens": ["fn", "backtrack", "(", ",", ",", ",", ")", ")", "void", "{", "// \u5f53\u722c\u5230\u7b2c n \u9636\u65f6\uff0c\u65b9\u6848\u6570\u91cf\u52a0 1", "// \u904d\u5386\u6240\u6709\u9009\u62e9", "}", "i32", "state", "i32", "n", "i32", "res", "i32", "if", "for", "(", "|", "{", "// \u526a\u679d\uff1a\u4e0d\u5141\u8bb8\u8d8a\u8fc7\u7b2c n \u9636", "// \u5c1d\u8bd5\uff1a\u505a\u51fa\u9009\u62e9\uff0c\u66f4\u65b0\u72b6\u6001", "// \u56de\u9000", "}", "choices", ":", ":", ":", "std", ".", "ArrayList", "(", "(", ")", "{", "}", "choices", "|", "choice", "if", ";", ":", "[", "]", "state", "==", "n", ";", ")", "(", ")", "{", "}", "backtrack", "=", ">", "n", "continue", ";", "(", "choices", ",", ",", "n", ",", "res", ")", "[", "0", "]", "+", "1", "state", "+", "choice", "state", "+", "choice", "res", ".", "items", "[", "0", "]", "res", ".", "items"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 132, "ast_depth": 11, "n_identifiers": 10, "vocab_size": 37}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/zig/chapter_dynamic_programming/climbing_stairs_backtrack.zig#26-26", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/zig/chapter_dynamic_programming/climbing_stairs_backtrack.zig", "language": "Java"}, "method": {"name": "climbingStairsBacktrack", "qualified_name": "codes.zig.chapter_dynamic_programming.climbing_stairs_backtrack.zig#climbingStairsBacktrack", "start_line": 26, "end_line": 26, "signature": "climbingStairsBacktrack(n: usize)", "original_code": "fn climbingStairsBacktrack(n: usize)", "doc_comment": "// \u722c\u697c\u68af\uff1a\u56de\u6eaf"}, "code_tokens": ["fn", "climbingStairsBacktrack", "", "(", ")", "n", "usize", ":"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 13, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 8}}
{"dataset_split": "train", "example_id": "hello-algo@fcbaf10:codes/zig/chapter_dynamic_programming/climbing_stairs_backtrack.zig#37-37", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fcbaf101a416bb6616c49a0581d2fc36b7f17f14", "license": null}, "file": {"path": "codes/zig/chapter_dynamic_programming/climbing_stairs_backtrack.zig", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.zig.chapter_dynamic_programming.climbing_stairs_backtrack.zig#main", "start_line": 37, "end_line": 37, "signature": "main()", "original_code": "pub fn main()", "doc_comment": "// Driver Code"}, "code_tokens": ["pub", "main", "", "fn", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 10, "ast_depth": 4, "n_identifiers": 2, "vocab_size": 6}}
{"dataset_split": "train", "example_id": "hello-algo@5b6fb34:codes/java/chapter_tree/array_binary_tree.java#22-24", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5b6fb34a82e071871025a64462da35eb8f21c6ac", "license": null}, "file": {"path": "codes/java/chapter_tree/array_binary_tree.java", "language": "Java"}, "method": {"name": "size", "qualified_name": "codes.java.chapter_tree.array_binary_tree#size", "start_line": 22, "end_line": 24, "signature": "size()", "original_code": "public int size() {\n        return tree.size();\n    }", "doc_comment": "/* \u8282\u70b9\u6570\u91cf */"}, "code_tokens": ["size", "public", "int", "(", ")", "{", "}", "return", ";", "tree", ".", "size", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 23, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 11}}
{"dataset_split": "train", "example_id": "hello-algo@5b6fb34:codes/java/chapter_tree/array_binary_tree.java#27-32", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5b6fb34a82e071871025a64462da35eb8f21c6ac", "license": null}, "file": {"path": "codes/java/chapter_tree/array_binary_tree.java", "language": "Java"}, "method": {"name": "val", "qualified_name": "codes.java.chapter_tree.array_binary_tree#val", "start_line": 27, "end_line": 32, "signature": "val(int i)", "original_code": "public Integer val(int i) {\n        // \u82e5\u7d22\u5f15\u8d8a\u754c\uff0c\u5219\u8fd4\u56de null \uff0c\u4ee3\u8868\u7a7a\u4f4d\n        if (i < 0 || i >= size())\n            return null;\n        return tree.get(i);\n    }", "doc_comment": "/* \u83b7\u53d6\u7d22\u5f15\u4e3a i \u8282\u70b9\u7684\u503c */"}, "code_tokens": ["Integer", "val", "public", "(", ")", "{", "// \u82e5\u7d22\u5f15\u8d8a\u754c\uff0c\u5219\u8fd4\u56de null \uff0c\u4ee3\u8868\u7a7a\u4f4d", "}", "i", "if", "return", ";", "int", "(", ")", "return", "null", ";", "tree", ".", "get", "||", "(", "i", ")", "i", "<", "0", "i", ">=", "size", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 51, "ast_depth": 10, "n_identifiers": 5, "vocab_size": 22}}
{"dataset_split": "train", "example_id": "hello-algo@5b6fb34:codes/java/chapter_tree/array_binary_tree.java#35-37", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5b6fb34a82e071871025a64462da35eb8f21c6ac", "license": null}, "file": {"path": "codes/java/chapter_tree/array_binary_tree.java", "language": "Java"}, "method": {"name": "left", "qualified_name": "codes.java.chapter_tree.array_binary_tree#left", "start_line": 35, "end_line": 37, "signature": "left(int i)", "original_code": "public Integer left(int i) {\n        return 2 * i + 1;\n    }", "doc_comment": "/* \u83b7\u53d6\u7d22\u5f15\u4e3a i \u8282\u70b9\u7684\u5de6\u5b50\u8282\u70b9\u7684\u7d22\u5f15 */"}, "code_tokens": ["Integer", "left", "public", "(", ")", "{", "}", "i", "return", ";", "int", "+", "1", "2", "*", "i"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 26, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 15}}
{"dataset_split": "train", "example_id": "hello-algo@5b6fb34:codes/java/chapter_tree/array_binary_tree.java#40-42", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5b6fb34a82e071871025a64462da35eb8f21c6ac", "license": null}, "file": {"path": "codes/java/chapter_tree/array_binary_tree.java", "language": "Java"}, "method": {"name": "right", "qualified_name": "codes.java.chapter_tree.array_binary_tree#right", "start_line": 40, "end_line": 42, "signature": "right(int i)", "original_code": "public Integer right(int i) {\n        return 2 * i + 2;\n    }", "doc_comment": "/* \u83b7\u53d6\u7d22\u5f15\u4e3a i \u8282\u70b9\u7684\u53f3\u5b50\u8282\u70b9\u7684\u7d22\u5f15 */"}, "code_tokens": ["Integer", "right", "public", "(", ")", "{", "}", "i", "return", ";", "int", "+", "2", "2", "*", "i"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 26, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 14}}
{"dataset_split": "train", "example_id": "hello-algo@5b6fb34:codes/java/chapter_tree/array_binary_tree.java#45-47", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5b6fb34a82e071871025a64462da35eb8f21c6ac", "license": null}, "file": {"path": "codes/java/chapter_tree/array_binary_tree.java", "language": "Java"}, "method": {"name": "parent", "qualified_name": "codes.java.chapter_tree.array_binary_tree#parent", "start_line": 45, "end_line": 47, "signature": "parent(int i)", "original_code": "public Integer parent(int i) {\n        return (i - 1) / 2;\n    }", "doc_comment": "/* \u83b7\u53d6\u7d22\u5f15\u4e3a i \u8282\u70b9\u7684\u7236\u8282\u70b9\u7684\u7d22\u5f15 */"}, "code_tokens": ["Integer", "parent", "public", "(", ")", "{", "}", "i", "return", ";", "int", "/", "2", "(", ")", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 29, "ast_depth": 8, "n_identifiers": 2, "vocab_size": 15}}
{"dataset_split": "train", "example_id": "hello-algo@5b6fb34:codes/java/chapter_tree/array_binary_tree.java#50-58", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5b6fb34a82e071871025a64462da35eb8f21c6ac", "license": null}, "file": {"path": "codes/java/chapter_tree/array_binary_tree.java", "language": "Java"}, "method": {"name": "levelOrder", "qualified_name": "codes.java.chapter_tree.array_binary_tree#levelOrder", "start_line": 50, "end_line": 58, "signature": "levelOrder()", "original_code": "public List<Integer> levelOrder() {\n        List<Integer> res = new ArrayList<>();\n        // \u76f4\u63a5\u904d\u5386\u6570\u7ec4\n        for (int i = 0; i < size(); i++) {\n            if (val(i) != null)\n                res.add(val(i));\n        }\n        return res;\n    }", "doc_comment": "/* \u5c42\u5e8f\u904d\u5386 */"}, "code_tokens": ["levelOrder", "public", "List", "(", ")", "{", "// \u76f4\u63a5\u904d\u5386\u6570\u7ec4", "}", "<", "Integer", ">", ";", "for", "(", ";", ")", "return", "res", ";", "List", "res", "=", ";", "i", "<", "i", "++", "{", "}", "<", "Integer", ">", "new", "int", "i", "=", "0", "size", "if", "ArrayList", "(", ")", "(", ")", "(", ")", ";", "<", ">", "!=", "null", "res", ".", "add", "val", "(", ")", "(", "i", ")", "val", "(", "i", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 99, "ast_depth": 12, "n_identifiers": 6, "vocab_size": 29}}
{"dataset_split": "train", "example_id": "hello-algo@5b6fb34:codes/java/chapter_tree/array_binary_tree.java#61-76", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5b6fb34a82e071871025a64462da35eb8f21c6ac", "license": null}, "file": {"path": "codes/java/chapter_tree/array_binary_tree.java", "language": "Java"}, "method": {"name": "dfs", "qualified_name": "codes.java.chapter_tree.array_binary_tree#dfs", "start_line": 61, "end_line": 76, "signature": "dfs(Integer i, String order, List<Integer> res)", "original_code": "private void dfs(Integer i, String order, List<Integer> res) {\n        // \u82e5\u4e3a\u7a7a\u4f4d\uff0c\u5219\u8fd4\u56de\n        if (val(i) == null)\n            return;\n        // \u524d\u5e8f\u904d\u5386\n        if (\"pre\".equals(order))\n            res.add(val(i));\n        dfs(left(i), order, res);\n        // \u4e2d\u5e8f\u904d\u5386\n        if (\"in\".equals(order))\n            res.add(val(i));\n        dfs(right(i), order, res);\n        // \u540e\u5e8f\u904d\u5386\n        if (\"post\".equals(order))\n            res.add(val(i));\n    }", "doc_comment": "/* \u6df1\u5ea6\u4f18\u5148\u904d\u5386 */"}, "code_tokens": ["void", "dfs", "private", "(", ",", ",", ")", "{", "// \u82e5\u4e3a\u7a7a\u4f4d\uff0c\u5219\u8fd4\u56de", "// \u524d\u5e8f\u904d\u5386", "// \u4e2d\u5e8f\u904d\u5386", "// \u540e\u5e8f\u904d\u5386", "}", "Integer", "i", "String", "order", "res", "if", "if", ";", "if", ";", "if", "List", "(", ")", "return", ";", "(", ")", ";", "dfs", "(", ")", ";", "dfs", "(", ")", ";", "<", "Integer", ">", "==", "null", ".", "equals", "res", ".", "add", "(", ",", "order", ",", "res", ")", ".", "equals", "res", ".", "add", "(", ",", "order", ",", "res", ")", ".", "equals", "res", ".", "add", "val", "\"", "pre", "\"", "(", "order", ")", "(", ")", "left", "\"", "in", "\"", "(", "order", ")", "(", ")", "right", "\"", "post", "\"", "(", "order", ")", "(", ")", "(", "i", ")", "val", "(", "i", ")", "val", "(", "i", ")", "val", "(", "i", ")", "(", "i", ")", "(", "i", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 176, "ast_depth": 10, "n_identifiers": 9, "vocab_size": 35}}
{"dataset_split": "train", "example_id": "hello-algo@5b6fb34:codes/java/chapter_tree/array_binary_tree.java#79-83", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5b6fb34a82e071871025a64462da35eb8f21c6ac", "license": null}, "file": {"path": "codes/java/chapter_tree/array_binary_tree.java", "language": "Java"}, "method": {"name": "preOrder", "qualified_name": "codes.java.chapter_tree.array_binary_tree#preOrder", "start_line": 79, "end_line": 83, "signature": "preOrder()", "original_code": "public List<Integer> preOrder() {\n        List<Integer> res = new ArrayList<>();\n        dfs(0, \"pre\", res);\n        return res;\n    }", "doc_comment": "/* \u524d\u5e8f\u904d\u5386 */"}, "code_tokens": ["preOrder", "public", "List", "(", ")", "{", "}", "<", "Integer", ">", ";", ";", "return", "res", ";", "List", "res", "=", "dfs", "<", "Integer", ">", "new", "(", "0", ",", ",", "res", ")", "ArrayList", "(", ")", "\"", "pre", "\"", "<", ">"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 57, "ast_depth": 9, "n_identifiers": 3, "vocab_size": 21}}
{"dataset_split": "train", "example_id": "hello-algo@5b6fb34:codes/java/chapter_tree/array_binary_tree.java#86-90", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5b6fb34a82e071871025a64462da35eb8f21c6ac", "license": null}, "file": {"path": "codes/java/chapter_tree/array_binary_tree.java", "language": "Java"}, "method": {"name": "inOrder", "qualified_name": "codes.java.chapter_tree.array_binary_tree#inOrder", "start_line": 86, "end_line": 90, "signature": "inOrder()", "original_code": "public List<Integer> inOrder() {\n        List<Integer> res = new ArrayList<>();\n        dfs(0, \"in\", res);\n        return res;\n    }", "doc_comment": "/* \u4e2d\u5e8f\u904d\u5386 */"}, "code_tokens": ["inOrder", "public", "List", "(", ")", "{", "}", "<", "Integer", ">", ";", ";", "return", "res", ";", "List", "res", "=", "dfs", "<", "Integer", ">", "new", "(", "0", ",", ",", "res", ")", "ArrayList", "(", ")", "\"", "in", "\"", "<", ">"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 57, "ast_depth": 9, "n_identifiers": 3, "vocab_size": 21}}
{"dataset_split": "train", "example_id": "hello-algo@5b6fb34:codes/java/chapter_tree/array_binary_tree.java#93-97", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5b6fb34a82e071871025a64462da35eb8f21c6ac", "license": null}, "file": {"path": "codes/java/chapter_tree/array_binary_tree.java", "language": "Java"}, "method": {"name": "postOrder", "qualified_name": "codes.java.chapter_tree.array_binary_tree#postOrder", "start_line": 93, "end_line": 97, "signature": "postOrder()", "original_code": "public List<Integer> postOrder() {\n        List<Integer> res = new ArrayList<>();\n        dfs(0, \"post\", res);\n        return res;\n    }", "doc_comment": "/* \u540e\u5e8f\u904d\u5386 */"}, "code_tokens": ["postOrder", "public", "List", "(", ")", "{", "}", "<", "Integer", ">", ";", ";", "return", "res", ";", "List", "res", "=", "dfs", "<", "Integer", ">", "new", "(", "0", ",", ",", "res", ")", "ArrayList", "(", ")", "\"", "post", "\"", "<", ">"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 57, "ast_depth": 9, "n_identifiers": 3, "vocab_size": 21}}
{"dataset_split": "train", "example_id": "hello-algo@5b6fb34:codes/java/chapter_tree/array_binary_tree.java#101-135", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5b6fb34a82e071871025a64462da35eb8f21c6ac", "license": null}, "file": {"path": "codes/java/chapter_tree/array_binary_tree.java", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.java.chapter_tree.array_binary_tree#main", "start_line": 101, "end_line": 135, "signature": "main(String[] args)", "original_code": "public static void main(String[] args) {\n        // \u521d\u59cb\u5316\u4e8c\u53c9\u6811\n        // \u8fd9\u91cc\u501f\u52a9\u4e86\u4e00\u4e2a\u4ece\u6570\u7ec4\u76f4\u63a5\u751f\u6210\u4e8c\u53c9\u6811\u7684\u51fd\u6570\n        List<Integer> arr = Arrays.asList(1, 2, 3, 4, null, 6, 7, 8, 9, null, null, 12, null, null, 15);\n\n        TreeNode root = TreeNode.listToTree(arr);\n        System.out.println(\"\\n\u521d\u59cb\u5316\u4e8c\u53c9\u6811\\n\");\n        System.out.println(\"\u4e8c\u53c9\u6811\u7684\u6570\u7ec4\u8868\u793a\uff1a\");\n        System.out.println(arr);\n        System.out.println(\"\u4e8c\u53c9\u6811\u7684\u94fe\u8868\u8868\u793a\uff1a\");\n        PrintUtil.printTree(root);\n\n        // \u6570\u7ec4\u8868\u793a\u4e0b\u7684\u4e8c\u53c9\u6811\u7c7b\n        ArrayBinaryTree abt = new ArrayBinaryTree(arr);\n\n        // \u8bbf\u95ee\u8282\u70b9\n        int i = 1;\n        Integer l = abt.left(i);\n        Integer r = abt.right(i);\n        Integer p = abt.parent(i);\n        System.out.println(\"\\n\u5f53\u524d\u8282\u70b9\u7684\u7d22\u5f15\u4e3a \" + i + \" \uff0c\u503c\u4e3a \" + abt.val(i));\n        System.out.println(\"\u5176\u5de6\u5b50\u8282\u70b9\u7684\u7d22\u5f15\u4e3a \" + l + \" \uff0c\u503c\u4e3a \" + (l == null ? \"null\" : abt.val(l)));\n        System.out.println(\"\u5176\u53f3\u5b50\u8282\u70b9\u7684\u7d22\u5f15\u4e3a \" + r + \" \uff0c\u503c\u4e3a \" + (r == null ? \"null\" : abt.val(r)));\n        System.out.println(\"\u5176\u7236\u8282\u70b9\u7684\u7d22\u5f15\u4e3a \" + p + \" \uff0c\u503c\u4e3a \" + (p == null ? \"null\" : abt.val(p)));\n\n        // \u904d\u5386\u6811\n        List<Integer> res = abt.levelOrder();\n        System.out.println(\"\\n\u5c42\u5e8f\u904d\u5386\u4e3a\uff1a\" + res);\n        res = abt.preOrder();\n        System.out.println(\"\u524d\u5e8f\u904d\u5386\u4e3a\uff1a\" + res);\n        res = abt.inOrder();\n        System.out.println(\"\u4e2d\u5e8f\u904d\u5386\u4e3a\uff1a\" + res);\n        res = abt.postOrder();\n        System.out.println(\"\u540e\u5e8f\u904d\u5386\u4e3a\uff1a\" + res);\n    }", "doc_comment": ""}, "code_tokens": ["void", "main", "public", "static", "(", ")", "{", "// \u521d\u59cb\u5316\u4e8c\u53c9\u6811", "// \u8fd9\u91cc\u501f\u52a9\u4e86\u4e00\u4e2a\u4ece\u6570\u7ec4\u76f4\u63a5\u751f\u6210\u4e8c\u53c9\u6811\u7684\u51fd\u6570", "// \u6570\u7ec4\u8868\u793a\u4e0b\u7684\u4e8c\u53c9\u6811\u7c7b", "// \u8bbf\u95ee\u8282\u70b9", "// \u904d\u5386\u6811", "}", "args", ";", "TreeNode", ";", ";", ";", ";", ";", ";", "ArrayBinaryTree", ";", ";", "Integer", ";", "Integer", ";", "Integer", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "String", "List", "arr", "=", "root", "=", ".", "println", ".", "println", ".", "println", ".", "println", "PrintUtil", ".", "printTree", "abt", "=", "int", "i", "=", "1", "l", "=", "r", "=", "p", "=", ".", "println", ".", "println", ".", "println", ".", "println", "List", "res", "=", ".", "println", "res", "=", ".", "println", "res", "=", ".", "println", "res", "=", ".", "println", "[", "]", "<", "Integer", ">", "Arrays", ".", "asList", "TreeNode", ".", "listToTree", "System", ".", "out", "(", ")", "System", ".", "out", "(", ")", "System", ".", "out", "(", "arr", ")", "System", ".", "out", "(", ")", "(", "root", ")", "new", "ArrayBinaryTree", "abt", ".", "left", "abt", ".", "right", "abt", ".", "parent", "System", ".", "out", "(", ")", "System", ".", "out", "(", ")", "System", ".", "out", "(", ")", "System", ".", "out", "(", ")", "<", "Integer", ">", "abt", ".", "levelOrder", "System", ".", "out", "(", ")", "abt", ".", "preOrder", "System", ".", "out", "(", ")", "abt", ".", "inOrder", "System", ".", "out", "(", ")", "abt", ".", "postOrder", "System", ".", "out", "(", ")", "(", "1", ",", "2", ",", "3", ",", "4", ",", "null", ",", "6", ",", "7", ",", "8", ",", "9", ",", "null", ",", "null", ",", "12", ",", "null", ",", "null", ",", "15", ")", "(", "arr", ")", "\"", "\\n", "\u521d\u59cb\u5316\u4e8c\u53c9\u6811", "\\n", "\"", "\"", "\u4e8c\u53c9\u6811\u7684\u6570\u7ec4\u8868\u793a\uff1a", "\"", "\"", "\u4e8c\u53c9\u6811\u7684\u94fe\u8868\u8868\u793a\uff1a", "\"", "(", "arr", ")", "(", "i", ")", "(", "i", ")", "(", "i", ")", "+", "+", "+", "+", "(", ")", "+", "res", "(", ")", "+", "res", "(", ")", "+", "res", "(", ")", "+", "res", "+", "abt", ".", "val", "+", "(", ")", "+", "(", ")", "+", "(", ")", "\"", "\\n", "\u5c42\u5e8f\u904d\u5386\u4e3a\uff1a", "\"", "\"", "\u524d\u5e8f\u904d\u5386\u4e3a\uff1a", "\"", "\"", "\u4e2d\u5e8f\u904d\u5386\u4e3a\uff1a", "\"", "\"", "\u540e\u5e8f\u904d\u5386\u4e3a\uff1a", "\"", "+", "i", "\"", " \uff0c\u503c\u4e3a ", "\"", "(", "i", ")", "+", "l", "\"", " \uff0c\u503c\u4e3a ", "\"", "?", ":", "+", "r", "\"", " \uff0c\u503c\u4e3a ", "\"", "?", ":", "+", "p", "\"", " \uff0c\u503c\u4e3a ", "\"", "?", ":", "\"", "\\n", "\u5f53\u524d\u8282\u70b9\u7684\u7d22\u5f15\u4e3a ", "\"", "\"", "\u5176\u5de6\u5b50\u8282\u70b9\u7684\u7d22\u5f15\u4e3a ", "\"", "l", "==", "null", "\"", "null", "\"", "abt", ".", "val", "\"", "\u5176\u53f3\u5b50\u8282\u70b9\u7684\u7d22\u5f15\u4e3a ", "\"", "r", "==", "null", "\"", "null", "\"", "abt", ".", "val", "\"", "\u5176\u7236\u8282\u70b9\u7684\u7d22\u5f15\u4e3a ", "\"", "p", "==", "null", "\"", "null", "\"", "abt", ".", "val", "(", "l", ")", "(", "r", ")", "(", "p", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 536, "ast_depth": 12, "n_identifiers": 27, "vocab_size": 82}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_array_and_linkedlist/array.c#10-16", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/array.c", "language": "Java"}, "method": {"name": "randomAccess", "qualified_name": "codes.c.chapter_array_and_linkedlist.array.c#randomAccess", "start_line": 10, "end_line": 16, "signature": "randomAccess(int *nums, int size)", "original_code": "int randomAccess(int *nums, int size) {\r\n    // \u5728\u533a\u95f4 [0, size) \u4e2d\u968f\u673a\u62bd\u53d6\u4e00\u4e2a\u6570\u5b57\r\n    int randomIndex = rand() % size;\r\n    // \u83b7\u53d6\u5e76\u8fd4\u56de\u968f\u673a\u5143\u7d20\r\n    int randomNum = nums[randomIndex];\r\n    return randomNum;\r\n}", "doc_comment": "/* \u968f\u673a\u8bbf\u95ee\u5143\u7d20 */"}, "code_tokens": ["randomAccess", "int", "(", ",", ")", "{", "// \u5728\u533a\u95f4 [0, size) \u4e2d\u968f\u673a\u62bd\u53d6\u4e00\u4e2a\u6570\u5b57\r", "// \u83b7\u53d6\u5e76\u8fd4\u56de\u968f\u673a\u5143\u7d20\r", "}", "nums", "size", ";", ";", "return", "randomNum", ";", "int", "*", "int", "int", "randomIndex", "=", "int", "randomNum", "=", "%", "size", "nums", "[", "randomIndex", "]", "rand", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 55, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 21}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_array_and_linkedlist/array.c#19-32", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/array.c", "language": "Java"}, "method": {"name": "extend", "qualified_name": "codes.c.chapter_array_and_linkedlist.array.c#extend", "start_line": 19, "end_line": 32, "signature": "extend(int *nums, int size, int enlarge)", "original_code": "int *extend(int *nums, int size, int enlarge) {\r\n    // \u521d\u59cb\u5316\u4e00\u4e2a\u6269\u5c55\u957f\u5ea6\u540e\u7684\u6570\u7ec4\r\n    int *res = (int *)malloc(sizeof(int) * (size + enlarge));\r\n    // \u5c06\u539f\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u5143\u7d20\u590d\u5236\u5230\u65b0\u6570\u7ec4\r\n    for (int i = 0; i < size; i++) {\r\n        res[i] = nums[i];\r\n    }\r\n    // \u521d\u59cb\u5316\u6269\u5c55\u540e\u7684\u7a7a\u95f4\r\n    for (int i = size; i < size + enlarge; i++) {\r\n        res[i] = 0;\r\n    }\r\n    // \u8fd4\u56de\u6269\u5c55\u540e\u7684\u65b0\u6570\u7ec4\r\n    return res;\r\n}", "doc_comment": "/* \u6269\u5c55\u6570\u7ec4\u957f\u5ea6 */"}, "code_tokens": ["extend", "int", "*", "(", ",", ",", ")", "{", "// \u521d\u59cb\u5316\u4e00\u4e2a\u6269\u5c55\u957f\u5ea6\u540e\u7684\u6570\u7ec4\r", "// \u5c06\u539f\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u5143\u7d20\u590d\u5236\u5230\u65b0\u6570\u7ec4\r", "// \u521d\u59cb\u5316\u6269\u5c55\u540e\u7684\u7a7a\u95f4\r", "// \u8fd4\u56de\u6269\u5c55\u540e\u7684\u65b0\u6570\u7ec4\r", "}", "nums", "size", "enlarge", ";", "for", "(", ";", ")", "for", "(", ";", ")", "return", "res", ";", "int", "*", "int", "int", "int", "*", "res", "=", ";", "i", "<", "size", "i", "++", "{", "}", ";", "i", "<", "i", "++", "{", "}", "(", ")", "int", "i", "=", "0", ";", "int", "i", "=", "size", "size", "+", "enlarge", ";", "int", "*", "malloc", "=", "=", "0", "(", ")", "res", "[", "i", "]", "nums", "[", "i", "]", "res", "[", "i", "]", "*", "sizeof", "(", ")", "(", ")", "size", "+", "enlarge", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 148, "ast_depth": 14, "n_identifiers": 8, "vocab_size": 29}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_array_and_linkedlist/array.c#35-42", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/array.c", "language": "Java"}, "method": {"name": "insert", "qualified_name": "codes.c.chapter_array_and_linkedlist.array.c#insert", "start_line": 35, "end_line": 42, "signature": "insert(int *nums, int size, int num, int index)", "original_code": "void insert(int *nums, int size, int num, int index) {\r\n    // \u628a\u7d22\u5f15 index \u4ee5\u53ca\u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u540e\u79fb\u52a8\u4e00\u4f4d\r\n    for (int i = size - 1; i > index; i--) {\r\n        nums[i] = nums[i - 1];\r\n    }\r\n    // \u5c06 num \u8d4b\u7ed9 index \u5904\u7684\u5143\u7d20\r\n    nums[index] = num;\r\n}", "doc_comment": "/* \u5728\u6570\u7ec4\u7684\u7d22\u5f15 index \u5904\u63d2\u5165\u5143\u7d20 num */"}, "code_tokens": ["void", "insert", "(", ",", ",", ",", ")", "{", "// \u628a\u7d22\u5f15 index \u4ee5\u53ca\u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u540e\u79fb\u52a8\u4e00\u4f4d\r", "// \u5c06 num \u8d4b\u7ed9 index \u5904\u7684\u5143\u7d20\r", "}", "nums", "size", "num", "index", "for", "(", ";", ")", ";", "int", "*", "int", "int", "int", ";", "i", ">", "index", "i", "--", "{", "}", "=", "num", "int", "i", "=", ";", "nums", "[", "index", "]", "size", "-", "1", "=", "nums", "[", "i", "]", "nums", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 86, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 25}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_array_and_linkedlist/array.c#46-51", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/array.c", "language": "Java"}, "method": {"name": "removeItem", "qualified_name": "codes.c.chapter_array_and_linkedlist.array.c#removeItem", "start_line": 46, "end_line": 51, "signature": "removeItem(int *nums, int size, int index)", "original_code": "void removeItem(int *nums, int size, int index) {\r\n    // \u628a\u7d22\u5f15 index \u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u524d\u79fb\u52a8\u4e00\u4f4d\r\n    for (int i = index; i < size - 1; i++) {\r\n        nums[i] = nums[i + 1];\r\n    }\r\n}", "doc_comment": "// \u6ce8\u610f\uff1astdio.h \u5360\u7528\u4e86 remove \u5173\u952e\u8bcd"}, "code_tokens": ["void", "removeItem", "(", ",", ",", ")", "{", "// \u628a\u7d22\u5f15 index \u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u524d\u79fb\u52a8\u4e00\u4f4d\r", "}", "nums", "size", "index", "for", "(", ";", ")", "int", "*", "int", "int", ";", "i", "<", "i", "++", "{", "}", "int", "i", "=", "index", "size", "-", "1", ";", "=", "nums", "[", "i", "]", "nums", "[", "]", "i", "+", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 70, "ast_depth": 10, "n_identifiers": 5, "vocab_size": 24}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_array_and_linkedlist/array.c#54-60", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/array.c", "language": "Java"}, "method": {"name": "traverse", "qualified_name": "codes.c.chapter_array_and_linkedlist.array.c#traverse", "start_line": 54, "end_line": 60, "signature": "traverse(int *nums, int size)", "original_code": "void traverse(int *nums, int size) {\r\n    int count = 0;\r\n    // \u901a\u8fc7\u7d22\u5f15\u904d\u5386\u6570\u7ec4\r\n    for (int i = 0; i < size; i++) {\r\n        count += nums[i];\r\n    }\r\n}", "doc_comment": "/* \u904d\u5386\u6570\u7ec4 */"}, "code_tokens": ["void", "traverse", "(", ",", ")", "{", "// \u901a\u8fc7\u7d22\u5f15\u904d\u5386\u6570\u7ec4\r", "}", "nums", "size", ";", "for", "(", ";", ")", "int", "*", "int", "int", "count", "=", "0", ";", "i", "<", "size", "i", "++", "{", "}", "int", "i", "=", "0", ";", "count", "+=", "nums", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 63, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 23}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_array_and_linkedlist/array.c#63-69", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/array.c", "language": "Java"}, "method": {"name": "find", "qualified_name": "codes.c.chapter_array_and_linkedlist.array.c#find", "start_line": 63, "end_line": 69, "signature": "find(int *nums, int size, int target)", "original_code": "int find(int *nums, int size, int target) {\r\n    for (int i = 0; i < size; i++) {\r\n        if (nums[i] == target)\r\n            return i;\r\n    }\r\n    return -1;\r\n}", "doc_comment": "/* \u5728\u6570\u7ec4\u4e2d\u67e5\u627e\u6307\u5b9a\u5143\u7d20 */"}, "code_tokens": ["find", "int", "(", ",", ",", ")", "{", "}", "nums", "size", "target", "for", "(", ";", ")", "return", ";", "int", "*", "int", "int", ";", "i", "<", "size", "i", "++", "{", "}", "-", "1", "int", "i", "=", "0", "if", "(", ")", "return", "i", ";", "==", "target", "nums", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 73, "ast_depth": 10, "n_identifiers": 5, "vocab_size": 25}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_array_and_linkedlist/array.c#72-114", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/array.c", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.c.chapter_array_and_linkedlist.array.c#main", "start_line": 72, "end_line": 114, "signature": "main()", "original_code": "int main() {\r\n    /* \u521d\u59cb\u5316\u6570\u7ec4 */\r\n    int size = 5;\r\n    int arr[5];\r\n    printf(\"\u6570\u7ec4 arr = \");\r\n    printArray(arr, size);\r\n\r\n    int nums[] = {1, 3, 2, 5, 4};\r\n    printf(\"\u6570\u7ec4 nums = \");\r\n    printArray(nums, size);\r\n\r\n    /* \u968f\u673a\u8bbf\u95ee */\r\n    int randomNum = randomAccess(nums, size);\r\n    printf(\"\u5728 nums \u4e2d\u83b7\u53d6\u968f\u673a\u5143\u7d20 %d\", randomNum);\r\n\r\n    /* \u957f\u5ea6\u6269\u5c55 */\r\n    int enlarge = 3;\r\n    int *res = extend(nums, size, enlarge);\r\n    size += enlarge;\r\n    printf(\"\u5c06\u6570\u7ec4\u957f\u5ea6\u6269\u5c55\u81f3 8 \uff0c\u5f97\u5230 nums = \");\r\n    printArray(res, size);\r\n\r\n    /* \u63d2\u5165\u5143\u7d20 */\r\n    insert(res, size, 6, 3);\r\n    printf(\"\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = \");\r\n    printArray(res, size);\r\n\r\n    /* \u5220\u9664\u5143\u7d20 */\r\n    removeItem(res, size, 2);\r\n    printf(\"\u5220\u9664\u7d22\u5f15 2 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = \");\r\n    printArray(res, size);\r\n\r\n    /* \u904d\u5386\u6570\u7ec4 */\r\n    traverse(res, size);\r\n\r\n    /* \u67e5\u627e\u5143\u7d20 */\r\n    int index = find(res, size, 3);\r\n    printf(\"\u5728 res \u4e2d\u67e5\u627e\u5143\u7d20 3 \uff0c\u5f97\u5230\u7d22\u5f15 = %d\\n\", index);\r\n\r\n    /* \u91ca\u653e\u5185\u5b58 */\r\n    free(res);\r\n    return 0;\r\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "/* \u521d\u59cb\u5316\u6570\u7ec4 */", "/* \u968f\u673a\u8bbf\u95ee */", "/* \u957f\u5ea6\u6269\u5c55 */", "/* \u63d2\u5165\u5143\u7d20 */", "/* \u5220\u9664\u5143\u7d20 */", "/* \u904d\u5386\u6570\u7ec4 */", "/* \u67e5\u627e\u5143\u7d20 */", "/* \u91ca\u653e\u5185\u5b58 */", "}", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "return", "0", ";", "int", "size", "=", "5", "int", "arr", "printf", "printArray", "int", "nums", "=", "printf", "printArray", "int", "randomNum", "=", "printf", "int", "enlarge", "=", "3", "int", "*", "res", "=", "size", "+=", "enlarge", "printf", "printArray", "insert", "printf", "printArray", "removeItem", "printf", "printArray", "traverse", "int", "index", "=", "printf", "free", "[", "]", "(", ")", "(", "arr", ",", "size", ")", "[", "]", "{", "1", ",", "3", ",", "2", ",", "5", ",", "4", "}", "(", ")", "(", "nums", ",", "size", ")", "randomAccess", "(", ",", "randomNum", ")", "extend", "(", ")", "(", "res", ",", "size", ")", "(", "res", ",", "size", ",", "6", ",", "3", ")", "(", ")", "(", "res", ",", "size", ")", "(", "res", ",", "size", ",", "2", ")", "(", ")", "(", "res", ",", "size", ")", "(", "res", ",", "size", ")", "find", "(", ",", "index", ")", "(", "res", ")", "5", "\"", "\u6570\u7ec4 arr = ", "\"", "\"", "\u6570\u7ec4 nums = ", "\"", "(", "nums", ",", "size", ")", "\"", "\u5728 nums \u4e2d\u83b7\u53d6\u968f\u673a\u5143\u7d20 %d", "\"", "(", "nums", ",", "size", ",", "enlarge", ")", "\"", "\u5c06\u6570\u7ec4\u957f\u5ea6\u6269\u5c55\u81f3 8 \uff0c\u5f97\u5230 nums = ", "\"", "\"", "\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = ", "\"", "\"", "\u5220\u9664\u7d22\u5f15 2 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = ", "\"", "(", "res", ",", "size", ",", "3", ")", "\"", "\u5728 res \u4e2d\u67e5\u627e\u5143\u7d20 3 \uff0c\u5f97\u5230\u7d22\u5f15 = %d", "\\n", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 305, "ast_depth": 8, "n_identifiers": 17, "vocab_size": 54}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_array_and_linkedlist/linked_list.c#18-27", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/linked_list.c", "language": "Java"}, "method": {"name": "removeItem", "qualified_name": "codes.c.chapter_array_and_linkedlist.linked_list.c#removeItem", "start_line": 18, "end_line": 27, "signature": "removeItem(ListNode *n0)", "original_code": "void removeItem(ListNode *n0) {\n    if (!n0->next)\n        return;\n    // n0 -> P -> n1\n    ListNode *P = n0->next;\n    ListNode *n1 = P->next;\n    n0->next = n1;\n    // \u91ca\u653e\u5185\u5b58\n    free(P);\n}", "doc_comment": "// \u6ce8\u610f\uff1astdio.h \u5360\u7528\u4e86 remove \u5173\u952e\u8bcd"}, "code_tokens": ["void", "removeItem", "(", ")", "{", "// n0 -> P -> n1", "// \u91ca\u653e\u5185\u5b58", "}", "ListNode", "n0", "if", ";", ";", ";", ";", "*", "(", ")", "return", ";", "ListNode", "*", "ListNode", "*", "n0", "->", "free", "!", "P", "=", "n1", "=", "next", "=", "n1", "(", "P", ")", "n0", "->", "next", "n0", "->", "next", "P", "->", "next"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 72, "ast_depth": 8, "n_identifiers": 7, "vocab_size": 21}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_array_and_linkedlist/linked_list.c#39-48", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/linked_list.c", "language": "Java"}, "method": {"name": "find", "qualified_name": "codes.c.chapter_array_and_linkedlist.linked_list.c#find", "start_line": 39, "end_line": 48, "signature": "find(ListNode *head, int target)", "original_code": "int find(ListNode *head, int target) {\n    int index = 0;\n    while (head) {\n        if (head->val == target)\n            return index;\n        head = head->next;\n        index++;\n    }\n    return -1;\n}", "doc_comment": "/* \u5728\u94fe\u8868\u4e2d\u67e5\u627e\u503c\u4e3a target \u7684\u9996\u4e2a\u8282\u70b9 */"}, "code_tokens": ["find", "int", "(", ",", ")", "{", "}", "ListNode", "head", "target", ";", "while", "return", ";", "*", "int", "int", "index", "=", "0", "(", "head", ")", "{", "}", "-", "1", "if", ";", ";", "(", ")", "return", "index", ";", "head", "=", "index", "++", "head", "->", "head", "->", "next", "val", "==", "target"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 74, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 25}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_array_and_linkedlist/linked_list.c#51-88", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/linked_list.c", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.c.chapter_array_and_linkedlist.linked_list.c#main", "start_line": 51, "end_line": 88, "signature": "main()", "original_code": "int main() {\n    /* \u521d\u59cb\u5316\u94fe\u8868 */\n    // \u521d\u59cb\u5316\u5404\u4e2a\u8282\u70b9\n    ListNode *n0 = newListNode(1);\n    ListNode *n1 = newListNode(3);\n    ListNode *n2 = newListNode(2);\n    ListNode *n3 = newListNode(5);\n    ListNode *n4 = newListNode(4);\n    // \u6784\u5efa\u8282\u70b9\u4e4b\u95f4\u7684\u5f15\u7528\n    n0->next = n1;\n    n1->next = n2;\n    n2->next = n3;\n    n3->next = n4;\n    printf(\"\u521d\u59cb\u5316\u7684\u94fe\u8868\u4e3a\\r\\n\");\n    printLinkedList(n0);\n\n    /* \u63d2\u5165\u8282\u70b9 */\n    insert(n0, newListNode(0));\n    printf(\"\u63d2\u5165\u8282\u70b9\u540e\u7684\u94fe\u8868\u4e3a\\r\\n\");\n    printLinkedList(n0);\n\n    /* \u5220\u9664\u8282\u70b9 */\n    removeItem(n0);\n    printf(\"\u5220\u9664\u8282\u70b9\u540e\u7684\u94fe\u8868\u4e3a\\r\\n\");\n    printLinkedList(n0);\n\n    /* \u8bbf\u95ee\u8282\u70b9 */\n    ListNode *node = access(n0, 3);\n    printf(\"\u94fe\u8868\u4e2d\u7d22\u5f15 3 \u5904\u7684\u8282\u70b9\u7684\u503c = %d\\r\\n\", node->val);\n\n    /* \u67e5\u627e\u8282\u70b9 */\n    int index = find(n0, 2);\n    printf(\"\u94fe\u8868\u4e2d\u503c\u4e3a 2 \u7684\u8282\u70b9\u7684\u7d22\u5f15 = %d\\r\\n\", index);\n\n    // \u91ca\u653e\u5185\u5b58\n    freeMemoryLinkedList(n0);\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "/* \u521d\u59cb\u5316\u94fe\u8868 */", "// \u521d\u59cb\u5316\u5404\u4e2a\u8282\u70b9", "// \u6784\u5efa\u8282\u70b9\u4e4b\u95f4\u7684\u5f15\u7528", "/* \u63d2\u5165\u8282\u70b9 */", "/* \u5220\u9664\u8282\u70b9 */", "/* \u8bbf\u95ee\u8282\u70b9 */", "/* \u67e5\u627e\u8282\u70b9 */", "// \u91ca\u653e\u5185\u5b58", "}", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "return", "0", ";", "ListNode", "*", "ListNode", "*", "ListNode", "*", "ListNode", "*", "ListNode", "*", "n0", "->", "n1", "->", "n2", "->", "n3", "->", "printf", "printLinkedList", "insert", "printf", "printLinkedList", "removeItem", "printf", "printLinkedList", "ListNode", "*", "printf", "int", "index", "=", "printf", "freeMemoryLinkedList", "n0", "=", "n1", "=", "n2", "=", "n3", "=", "n4", "=", "next", "=", "n1", "next", "=", "n2", "next", "=", "n3", "next", "=", "n4", "(", ")", "(", "n0", ")", "(", "n0", ",", ")", "(", ")", "(", "n0", ")", "(", "n0", ")", "(", ")", "(", "n0", ")", "node", "=", "(", ",", ")", "find", "(", ",", "index", ")", "(", "n0", ")", "newListNode", "newListNode", "newListNode", "newListNode", "newListNode", "\"", "\u521d\u59cb\u5316\u7684\u94fe\u8868\u4e3a", "\\r", "\\n", "\"", "newListNode", "\"", "\u63d2\u5165\u8282\u70b9\u540e\u7684\u94fe\u8868\u4e3a", "\\r", "\\n", "\"", "\"", "\u5220\u9664\u8282\u70b9\u540e\u7684\u94fe\u8868\u4e3a", "\\r", "\\n", "\"", "access", "\"", "\u94fe\u8868\u4e2d\u7d22\u5f15 3 \u5904\u7684\u8282\u70b9\u7684\u503c = %d", "\\r", "\\n", "\"", "node", "->", "val", "(", "n0", ",", "2", ")", "\"", "\u94fe\u8868\u4e2d\u503c\u4e3a 2 \u7684\u8282\u70b9\u7684\u7d22\u5f15 = %d", "\\r", "\\n", "\"", "(", "1", ")", "(", "3", ")", "(", "2", ")", "(", "5", ")", "(", "4", ")", "(", "0", ")", "(", "n0", ",", "3", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 287, "ast_depth": 9, "n_identifiers": 19, "vocab_size": 52}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_array_and_linkedlist/my_list.c#17-17", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/my_list.c", "language": "Java"}, "method": {"name": "extendCapacity", "qualified_name": "codes.c.chapter_array_and_linkedlist.my_list.c#extendCapacity", "start_line": 17, "end_line": 17, "signature": "extendCapacity(MyList *nums)", "original_code": "void extendCapacity(MyList *nums);", "doc_comment": ""}, "code_tokens": ["void", "extendCapacity", ";", "(", ")", "MyList", "nums", "*"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 13, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 8}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_array_and_linkedlist/my_list.c#30-33", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/my_list.c", "language": "Java"}, "method": {"name": "delMyList", "qualified_name": "codes.c.chapter_array_and_linkedlist.my_list.c#delMyList", "start_line": 30, "end_line": 33, "signature": "delMyList(MyList *nums)", "original_code": "void delMyList(MyList *nums) {\n    free(nums->arr);\n    free(nums);\n}", "doc_comment": "/* \u6790\u6784\u51fd\u6570 */"}, "code_tokens": ["void", "delMyList", "(", ")", "{", "}", "MyList", "nums", ";", ";", "*", "free", "free", "(", ")", "(", "nums", ")", "nums", "->", "arr"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 34, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 13}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_array_and_linkedlist/my_list.c#36-38", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/my_list.c", "language": "Java"}, "method": {"name": "size", "qualified_name": "codes.c.chapter_array_and_linkedlist.my_list.c#size", "start_line": 36, "end_line": 38, "signature": "size(MyList *nums)", "original_code": "int size(MyList *nums) {\n    return nums->size;\n}", "doc_comment": "/* \u83b7\u53d6\u5217\u8868\u957f\u5ea6 */"}, "code_tokens": ["size", "int", "(", ")", "{", "}", "MyList", "nums", "return", ";", "*", "nums", "->", "size"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 23, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 12}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_array_and_linkedlist/my_list.c#41-43", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/my_list.c", "language": "Java"}, "method": {"name": "capacity", "qualified_name": "codes.c.chapter_array_and_linkedlist.my_list.c#capacity", "start_line": 41, "end_line": 43, "signature": "capacity(MyList *nums)", "original_code": "int capacity(MyList *nums) {\n    return nums->capacity;\n}", "doc_comment": "/* \u83b7\u53d6\u5217\u8868\u5bb9\u91cf */"}, "code_tokens": ["capacity", "int", "(", ")", "{", "}", "MyList", "nums", "return", ";", "*", "nums", "->", "capacity"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 23, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 12}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_array_and_linkedlist/my_list.c#46-49", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/my_list.c", "language": "Java"}, "method": {"name": "get", "qualified_name": "codes.c.chapter_array_and_linkedlist.my_list.c#get", "start_line": 46, "end_line": 49, "signature": "get(MyList *nums, int index)", "original_code": "int get(MyList *nums, int index) {\n    assert(index >= 0 && index < nums->size);\n    return nums->arr[index];\n}", "doc_comment": "/* \u8bbf\u95ee\u5143\u7d20 */"}, "code_tokens": ["get", "int", "(", ",", ")", "{", "}", "MyList", "nums", "index", "assert", ";", "return", ";", "*", "int", "(", ")", "nums", "->", "&&", "arr", "[", "index", "]", "index", ">=", "0", "index", "<", "nums", "->", "size"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 51, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 23}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_array_and_linkedlist/my_list.c#52-55", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/my_list.c", "language": "Java"}, "method": {"name": "set", "qualified_name": "codes.c.chapter_array_and_linkedlist.my_list.c#set", "start_line": 52, "end_line": 55, "signature": "set(MyList *nums, int index, int num)", "original_code": "void set(MyList *nums, int index, int num) {\n    assert(index >= 0 && index < nums->size);\n    nums->arr[index] = num;\n}", "doc_comment": "/* \u66f4\u65b0\u5143\u7d20 */"}, "code_tokens": ["void", "set", "(", ",", ",", ")", "{", "}", "MyList", "nums", "index", "num", "assert", ";", ";", "*", "int", "int", "(", ")", "nums", "->", "&&", "=", "num", "index", ">=", "0", "index", "<", "arr", "[", "index", "]", "nums", "->", "size"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 57, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 25}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_array_and_linkedlist/my_list.c#58-64", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/my_list.c", "language": "Java"}, "method": {"name": "add", "qualified_name": "codes.c.chapter_array_and_linkedlist.my_list.c#add", "start_line": 58, "end_line": 64, "signature": "add(MyList *nums, int num)", "original_code": "void add(MyList *nums, int num) {\n    if (size(nums) == capacity(nums)) {\n        extendCapacity(nums); // \u6269\u5bb9\n    }\n    nums->arr[size(nums)] = num;\n    nums->size++;\n}", "doc_comment": "/* \u5728\u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 */"}, "code_tokens": ["void", "add", "(", ",", ")", "{", "}", "MyList", "nums", "num", "if", ";", ";", "*", "int", "(", ")", "{", "// \u6269\u5bb9", "}", "nums", "->", "nums", "->", "==", ";", "=", "num", "size", "++", "size", "capacity", "extendCapacity", "arr", "[", "]", "(", "nums", ")", "(", "nums", ")", "(", "nums", ")", "size", "(", "nums", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 77, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 25}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_array_and_linkedlist/my_list.c#67-78", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/my_list.c", "language": "Java"}, "method": {"name": "insert", "qualified_name": "codes.c.chapter_array_and_linkedlist.my_list.c#insert", "start_line": 67, "end_line": 78, "signature": "insert(MyList *nums, int index, int num)", "original_code": "void insert(MyList *nums, int index, int num) {\n    assert(index >= 0 && index < size(nums));\n    // \u5143\u7d20\u6570\u91cf\u8d85\u51fa\u5bb9\u91cf\u65f6\uff0c\u89e6\u53d1\u6269\u5bb9\u673a\u5236\n    if (size(nums) == capacity(nums)) {\n        extendCapacity(nums); // \u6269\u5bb9\n    }\n    for (int i = size(nums); i > index; --i) {\n        nums->arr[i] = nums->arr[i - 1];\n    }\n    nums->arr[index] = num;\n    nums->size++;\n}", "doc_comment": "/* \u5728\u4e2d\u95f4\u63d2\u5165\u5143\u7d20 */"}, "code_tokens": ["void", "insert", "(", ",", ",", ")", "{", "// \u5143\u7d20\u6570\u91cf\u8d85\u51fa\u5bb9\u91cf\u65f6\uff0c\u89e6\u53d1\u6269\u5bb9\u673a\u5236", "}", "MyList", "nums", "index", "num", "assert", ";", "if", "for", "(", ";", ")", ";", ";", "*", "int", "int", "(", ")", "(", ")", "{", "// \u6269\u5bb9", "}", ";", "i", ">", "index", "--", "i", "{", "}", "nums", "->", "nums", "->", "&&", "==", ";", "int", "i", "=", ";", "=", "num", "size", "++", "index", ">=", "0", "index", "<", "size", "capacity", "extendCapacity", "size", "nums", "->", "arr", "[", "index", "]", "size", "(", "nums", ")", "(", "nums", ")", "(", "nums", ")", "(", "nums", ")", "=", "(", "nums", ")", "arr", "[", "i", "]", "nums", "->", "arr", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 150, "ast_depth": 12, "n_identifiers": 9, "vocab_size": 38}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_array_and_linkedlist/my_list.c#82-90", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/my_list.c", "language": "Java"}, "method": {"name": "removeItem", "qualified_name": "codes.c.chapter_array_and_linkedlist.my_list.c#removeItem", "start_line": 82, "end_line": 90, "signature": "removeItem(MyList *nums, int index)", "original_code": "int removeItem(MyList *nums, int index) {\n    assert(index >= 0 && index < size(nums));\n    int num = nums->arr[index];\n    for (int i = index; i < size(nums) - 1; i++) {\n        nums->arr[i] = nums->arr[i + 1];\n    }\n    nums->size--;\n    return num;\n}", "doc_comment": "// \u6ce8\u610f\uff1astdio.h \u5360\u7528\u4e86 remove \u5173\u952e\u8bcd"}, "code_tokens": ["removeItem", "int", "(", ",", ")", "{", "}", "MyList", "nums", "index", "assert", ";", ";", "for", "(", ";", ")", ";", "return", "num", ";", "*", "int", "(", ")", "int", "num", "=", ";", "i", "<", "i", "++", "{", "}", "nums", "->", "&&", "nums", "->", "int", "i", "=", "index", "-", "1", ";", "size", "--", "index", ">=", "0", "index", "<", "arr", "[", "index", "]", "size", "nums", "->", "size", "(", "nums", ")", "=", "(", "nums", ")", "arr", "[", "i", "]", "nums", "->", "arr", "[", "]", "i", "+", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 123, "ast_depth": 12, "n_identifiers": 7, "vocab_size": 32}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_array_and_linkedlist/my_list.c#93-109", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/my_list.c", "language": "Java"}, "method": {"name": "extendCapacity", "qualified_name": "codes.c.chapter_array_and_linkedlist.my_list.c#extendCapacity", "start_line": 93, "end_line": 109, "signature": "extendCapacity(MyList *nums)", "original_code": "void extendCapacity(MyList *nums) {\n    // \u5148\u5206\u914d\u7a7a\u95f4\n    int newCapacity = capacity(nums) * nums->extendRatio;\n    int *extend = (int *)malloc(sizeof(int) * newCapacity);\n    int *temp = nums->arr;\n\n    // \u62f7\u8d1d\u65e7\u6570\u636e\u5230\u65b0\u6570\u636e\n    for (int i = 0; i < size(nums); i++)\n        extend[i] = nums->arr[i];\n\n    // \u91ca\u653e\u65e7\u6570\u636e\n    free(temp);\n\n    // \u66f4\u65b0\u65b0\u6570\u636e\n    nums->arr = extend;\n    nums->capacity = newCapacity;\n}", "doc_comment": "/* \u5217\u8868\u6269\u5bb9 */"}, "code_tokens": ["void", "extendCapacity", "(", ")", "{", "// \u5148\u5206\u914d\u7a7a\u95f4", "// \u62f7\u8d1d\u65e7\u6570\u636e\u5230\u65b0\u6570\u636e", "// \u91ca\u653e\u65e7\u6570\u636e", "// \u66f4\u65b0\u65b0\u6570\u636e", "}", "MyList", "nums", ";", ";", ";", "for", "(", ";", ")", ";", ";", ";", "*", "int", "newCapacity", "=", "int", "*", "extend", "=", "int", "*", "temp", "=", ";", "i", "<", "i", "++", ";", "free", "nums", "->", "nums", "->", "*", "(", ")", "nums", "->", "arr", "int", "i", "=", "0", "size", "=", "(", "temp", ")", "arr", "=", "extend", "capacity", "=", "newCapacity", "capacity", "nums", "->", "extendRatio", "int", "*", "malloc", "(", "nums", ")", "extend", "[", "i", "]", "nums", "->", "(", "nums", ")", "(", ")", "arr", "[", "i", "]", "*", "newCapacity", "sizeof", "(", ")", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 151, "ast_depth": 14, "n_identifiers": 13, "vocab_size": 34}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_array_and_linkedlist/my_list.c#112-114", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/my_list.c", "language": "Java"}, "method": {"name": "toArray", "qualified_name": "codes.c.chapter_array_and_linkedlist.my_list.c#toArray", "start_line": 112, "end_line": 114, "signature": "toArray(MyList *nums)", "original_code": "int *toArray(MyList *nums) {\n    return nums->arr;\n}", "doc_comment": "/* \u5c06\u5217\u8868\u8f6c\u6362\u4e3a Array \u7528\u4e8e\u6253\u5370 */"}, "code_tokens": ["toArray", "int", "*", "(", ")", "{", "}", "MyList", "nums", "return", ";", "*", "nums", "->", "arr"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 25, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 13}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_array_and_linkedlist/my_list.c#117-163", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/my_list.c", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.c.chapter_array_and_linkedlist.my_list.c#main", "start_line": 117, "end_line": 163, "signature": "main()", "original_code": "int main() {\n    /* \u521d\u59cb\u5316\u5217\u8868 */\n    MyList *nums = newMyList();\n    /* \u5728\u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 */\n    add(nums, 1);\n    add(nums, 3);\n    add(nums, 2);\n    add(nums, 5);\n    add(nums, 4);\n    printf(\"\u5217\u8868 nums = \");\n    printArray(toArray(nums), size(nums));\n    printf(\"\u5bb9\u91cf = %d \uff0c\u957f\u5ea6 = %d\\n\", capacity(nums), size(nums));\n\n    /* \u5728\u4e2d\u95f4\u63d2\u5165\u5143\u7d20 */\n    insert(nums, 3, 6);\n    printf(\"\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = \");\n    printArray(toArray(nums), size(nums));\n\n    /* \u5220\u9664\u5143\u7d20 */\n    removeItem(nums, 3);\n    printf(\"\u5220\u9664\u7d22\u5f15 3 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = \");\n    printArray(toArray(nums), size(nums));\n\n    /* \u8bbf\u95ee\u5143\u7d20 */\n    int num = get(nums, 1);\n    printf(\"\u8bbf\u95ee\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 num = %d\\n\", num);\n\n    /* \u66f4\u65b0\u5143\u7d20 */\n    set(nums, 1, 0);\n    printf(\"\u5c06\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\u66f4\u65b0\u4e3a 0 \uff0c\u5f97\u5230 nums = \");\n    printArray(toArray(nums), size(nums));\n\n    /* \u6d4b\u8bd5\u6269\u5bb9\u673a\u5236 */\n    for (int i = 0; i < 10; i++) {\n        // \u5728 i = 5 \u65f6\uff0c\u5217\u8868\u957f\u5ea6\u5c06\u8d85\u51fa\u5217\u8868\u5bb9\u91cf\uff0c\u6b64\u65f6\u89e6\u53d1\u6269\u5bb9\u673a\u5236\n        add(nums, i);\n    }\n\n    printf(\"\u6269\u5bb9\u540e\u7684\u5217\u8868 nums = \");\n    printArray(toArray(nums), size(nums));\n    printf(\"\u5bb9\u91cf = %d \uff0c\u957f\u5ea6 = %d\\n\", capacity(nums), size(nums));\n\n    /* \u91ca\u653e\u5206\u914d\u5185\u5b58 */\n    delMyList(nums);\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "/* \u521d\u59cb\u5316\u5217\u8868 */", "/* \u5728\u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 */", "/* \u5728\u4e2d\u95f4\u63d2\u5165\u5143\u7d20 */", "/* \u5220\u9664\u5143\u7d20 */", "/* \u8bbf\u95ee\u5143\u7d20 */", "/* \u66f4\u65b0\u5143\u7d20 */", "/* \u6d4b\u8bd5\u6269\u5bb9\u673a\u5236 */", "/* \u91ca\u653e\u5206\u914d\u5185\u5b58 */", "}", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "for", "(", ";", ")", ";", ";", ";", ";", "return", "0", ";", "MyList", "*", "add", "add", "add", "add", "add", "printf", "printArray", "printf", "insert", "printf", "printArray", "removeItem", "printf", "printArray", "int", "num", "=", "printf", "set", "printf", "printArray", ";", "i", "<", "10", "i", "++", "{", "// \u5728 i = 5 \u65f6\uff0c\u5217\u8868\u957f\u5ea6\u5c06\u8d85\u51fa\u5217\u8868\u5bb9\u91cf\uff0c\u6b64\u65f6\u89e6\u53d1\u6269\u5bb9\u673a\u5236", "}", "printf", "printArray", "printf", "delMyList", "nums", "=", "(", "nums", ",", "1", ")", "(", "nums", ",", "3", ")", "(", "nums", ",", "2", ")", "(", "nums", ",", "5", ")", "(", "nums", ",", "4", ")", "(", ")", "(", ",", ")", "(", ",", ",", ")", "(", "nums", ",", "3", ",", "6", ")", "(", ")", "(", ",", ")", "(", "nums", ",", "3", ")", "(", ")", "(", ",", ")", "get", "(", ",", "num", ")", "(", "nums", ",", "1", ",", "0", ")", "(", ")", "(", ",", ")", "int", "i", "=", "0", ";", "(", ")", "(", ",", ")", "(", ",", ",", ")", "(", "nums", ")", "newMyList", "\"", "\u5217\u8868 nums = ", "\"", "toArray", "size", "\"", "\u5bb9\u91cf = %d \uff0c\u957f\u5ea6 = %d", "\\n", "\"", "capacity", "size", "\"", "\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = ", "\"", "toArray", "size", "\"", "\u5220\u9664\u7d22\u5f15 3 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = ", "\"", "toArray", "size", "(", "nums", ",", "1", ")", "\"", "\u8bbf\u95ee\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 num = %d", "\\n", "\"", "\"", "\u5c06\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\u66f4\u65b0\u4e3a 0 \uff0c\u5f97\u5230 nums = ", "\"", "toArray", "size", "add", "\"", "\u6269\u5bb9\u540e\u7684\u5217\u8868 nums = ", "\"", "toArray", "size", "\"", "\u5bb9\u91cf = %d \uff0c\u957f\u5ea6 = %d", "\\n", "\"", "capacity", "size", "(", ")", "(", "nums", ")", "(", "nums", ")", "(", "nums", ")", "(", "nums", ")", "(", "nums", ")", "(", "nums", ")", "(", "nums", ")", "(", "nums", ")", "(", "nums", ")", "(", "nums", ")", "(", "nums", ",", "i", ")", "(", "nums", ")", "(", "nums", ")", "(", "nums", ")", "(", "nums", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 398, "ast_depth": 9, "n_identifiers": 17, "vocab_size": 56}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_backtracking/n_queens.c#12-41", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_backtracking/n_queens.c", "language": "Java"}, "method": {"name": "backtrack", "qualified_name": "codes.c.chapter_backtracking.n_queens.c#backtrack", "start_line": 12, "end_line": 41, "signature": "backtrack(int row, int n, char state[MAX_SIZE][MAX_SIZE], char ***res, int *resSize, bool cols[MAX_SIZE],\n               bool diags1[2 * MAX_SIZE - 1], bool diags2[2 * MAX_SIZE - 1])", "original_code": "void backtrack(int row, int n, char state[MAX_SIZE][MAX_SIZE], char ***res, int *resSize, bool cols[MAX_SIZE],\n               bool diags1[2 * MAX_SIZE - 1], bool diags2[2 * MAX_SIZE - 1]) {\n    // \u5f53\u653e\u7f6e\u5b8c\u6240\u6709\u884c\u65f6\uff0c\u8bb0\u5f55\u89e3\n    if (row == n) {\n        res[*resSize] = (char **)malloc(sizeof(char *) * n);\n        for (int i = 0; i < n; ++i) {\n            res[*resSize][i] = (char *)malloc(sizeof(char) * (n + 1));\n            strcpy(res[*resSize][i], state[i]);\n        }\n        (*resSize)++;\n        return;\n    }\n    // \u904d\u5386\u6240\u6709\u5217\n    for (int col = 0; col < n; col++) {\n        // \u8ba1\u7b97\u8be5\u683c\u5b50\u5bf9\u5e94\u7684\u4e3b\u5bf9\u89d2\u7ebf\u548c\u526f\u5bf9\u89d2\u7ebf\n        int diag1 = row - col + n - 1;\n        int diag2 = row + col;\n        // \u526a\u679d\uff1a\u4e0d\u5141\u8bb8\u8be5\u683c\u5b50\u6240\u5728\u5217\u3001\u4e3b\u5bf9\u89d2\u7ebf\u3001\u526f\u5bf9\u89d2\u7ebf\u4e0a\u5b58\u5728\u7687\u540e\n        if (!cols[col] && !diags1[diag1] && !diags2[diag2]) {\n            // \u5c1d\u8bd5\uff1a\u5c06\u7687\u540e\u653e\u7f6e\u5728\u8be5\u683c\u5b50\n            state[row][col] = 'Q';\n            cols[col] = diags1[diag1] = diags2[diag2] = true;\n            // \u653e\u7f6e\u4e0b\u4e00\u884c\n            backtrack(row + 1, n, state, res, resSize, cols, diags1, diags2);\n            // \u56de\u9000\uff1a\u5c06\u8be5\u683c\u5b50\u6062\u590d\u4e3a\u7a7a\u4f4d\n            state[row][col] = '#';\n            cols[col] = diags1[diag1] = diags2[diag2] = false;\n        }\n    }\n}", "doc_comment": "/* \u56de\u6eaf\u7b97\u6cd5\uff1aN \u7687\u540e */"}, "code_tokens": ["void", "backtrack", "(", ",", ",", ",", ",", ",", ",", ",", ")", "{", "// \u5f53\u653e\u7f6e\u5b8c\u6240\u6709\u884c\u65f6\uff0c\u8bb0\u5f55\u89e3", "// \u904d\u5386\u6240\u6709\u5217", "}", "row", "n", "state", "res", "resSize", "bool", "cols", "bool", "diags1", "bool", "diags2", "if", "for", "(", ";", ")", "int", "int", "char", "[", "]", "[", "]", "char", "*", "*", "*", "int", "*", "[", "]", "[", "]", "[", "]", "(", ")", "{", "}", ";", "col", "<", "n", "col", "++", "{", "// \u8ba1\u7b97\u8be5\u683c\u5b50\u5bf9\u5e94\u7684\u4e3b\u5bf9\u89d2\u7ebf\u548c\u526f\u5bf9\u89d2\u7ebf", "// \u526a\u679d\uff1a\u4e0d\u5141\u8bb8\u8be5\u683c\u5b50\u6240\u5728\u5217\u3001\u4e3b\u5bf9\u89d2\u7ebf\u3001\u526f\u5bf9\u89d2\u7ebf\u4e0a\u5b58\u5728\u7687\u540e", "}", "MAX_SIZE", "MAX_SIZE", "MAX_SIZE", "2", "*", "MAX_SIZE", "-", "1", "2", "*", "MAX_SIZE", "-", "1", "row", "==", "n", "res", ";", "for", "(", ";", ")", ";", "return", ";", "int", "col", "=", "0", ";", ";", "if", "[", "*", "resSize", "=", ";", "i", "<", "n", "++", "i", "{", "}", "++", "int", "diag1", "=", "int", "diag2", "=", "(", ")", "{", "// \u5c1d\u8bd5\uff1a\u5c06\u7687\u540e\u653e\u7f6e\u5728\u8be5\u683c\u5b50", "// \u653e\u7f6e\u4e0b\u4e00\u884c", "// \u56de\u9000\uff1a\u5c06\u8be5\u683c\u5b50\u6062\u590d\u4e3a\u7a7a\u4f4d", "}", "]", "(", ")", "int", "i", "=", "0", "res", ";", ";", "(", "resSize", ")", "-", "1", "row", "+", "col", "&&", ";", ";", ";", ";", ";", "char", "*", "*", "malloc", "[", "*", "resSize", "=", "strcpy", "*", "+", "n", "&&", "!", "=", "'Q'", "=", "backtrack", "=", "'#'", "=", "(", ")", "]", "[", "]", "(", ")", "(", ")", "row", "-", "col", "!", "!", "diags2", "[", "diag2", "]", "[", "col", "]", "cols", "[", "col", "]", "=", "(", ",", "n", ",", "state", ",", "res", ",", "resSize", ",", "cols", ",", "diags1", ",", "diags2", ")", "[", "col", "]", "cols", "[", "col", "]", "=", "*", "n", "i", "char", "*", "malloc", ",", "state", "[", "i", "]", "cols", "[", "col", "]", "diags1", "[", "diag1", "]", "state", "[", "row", "]", "diags1", "[", "diag1", "]", "=", "true", "row", "+", "1", "state", "[", "row", "]", "diags1", "[", "diag1", "]", "=", "false", "sizeof", "(", ")", "res", "diags2", "[", "diag2", "]", "diags2", "[", "diag2", "]", "(", ")", "*", "[", "]", "[", "]", "*", "sizeof", "(", ")", "*", "resSize", "i", "char", "(", ")", "n", "+", "1", "char"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 431, "ast_depth": 18, "n_identifiers": 17, "vocab_size": 55}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_backtracking/n_queens.c#44-95", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_backtracking/n_queens.c", "language": "Java"}, "method": {"name": "nQueens", "qualified_name": "codes.c.chapter_backtracking.n_queens.c#nQueens", "start_line": 44, "end_line": 95, "signature": "nQueens(int n, int *returnSize)", "original_code": "char ***nQueens(int n, int *returnSize) {\n    char state[MAX_SIZE][MAX_SIZE];\n    // \u521d\u59cb\u5316 n*n \u5927\u5c0f\u7684\u68cb\u76d8\uff0c\u5176\u4e2d 'Q' \u4ee3\u8868\u7687\u540e\uff0c'#' \u4ee3\u8868\u7a7a\u4f4d\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < n; ++j) {\n            state[i][j] = '#';\n        }\n        state[i][n] = '\\0';\n    }\n    bool cols[MAX_SIZE] = {false};           // \u8bb0\u5f55\u5217\u662f\u5426\u6709\u7687\u540e\n    bool diags1[2 * MAX_SIZE - 1] = {false}; // \u8bb0\u5f55\u4e3b\u5bf9\u89d2\u7ebf\u4e0a\u662f\u5426\u6709\u7687\u540e\n    bool diags2[2 * MAX_SIZE - 1] = {false}; // \u8bb0\u5f55\u526f\u5bf9\u89d2\u7ebf\u4e0a\u662f\u5426\u6709\u7687\u540e\n\n    char ***res = (char ***)malloc(sizeof(char **) * MAX_SIZE);\n    *returnSize = 0;\n    backtrack(0, n, state, res, returnSize, cols, diags1, diags2);\n    return res;\n}\n\n/* Driver Code */\nint main() {\n    int n = 4;\n    int returnSize;\n    char ***res = nQueens(n, &returnSize);\n\n    printf(\"\u8f93\u5165\u68cb\u76d8\u957f\u5bbd\u4e3a%d\\n\", n);\n    printf(\"\u7687\u540e\u653e\u7f6e\u65b9\u6848\u5171\u6709 %d \u79cd\\n\", returnSize);\n    for (int i = 0; i < returnSize; ++i) {\n        for (int j = 0; j < n; ++j) {\n            printf(\"[\");\n            for (int k = 0; res[i][j][k] != '\\0'; ++k) {\n                printf(\"%c\", res[i][j][k]);\n                if (res[i][j][k + 1] != '\\0') {\n                    printf(\", \");\n                }\n            }\n            printf(\"]\\n\");\n        }\n        printf(\"---------------------\\n\");\n    }\n\n    // \u91ca\u653e\u5185\u5b58\n    for (int i = 0; i < returnSize; ++i) {\n        for (int j = 0; j < n; ++j) {\n            free(res[i][j]);\n        }\n        free(res[i]);\n    }\n    free(res);\n\n    return 0;\n}", "doc_comment": "/* \u6c42\u89e3 N \u7687\u540e */"}, "code_tokens": ["nQueens", "char", "*", "*", "*", "(", ",", ")", "{", "// \u521d\u59cb\u5316 n*n \u5927\u5c0f\u7684\u68cb\u76d8\uff0c\u5176\u4e2d 'Q' \u4ee3\u8868\u7687\u540e\uff0c'#' \u4ee3\u8868\u7a7a\u4f4d", "// \u8bb0\u5f55\u5217\u662f\u5426\u6709\u7687\u540e", "", "n", "returnSize", ";", "for", "(", ";", ")", "bool", ";", "bool", "diags1", "[", "]", "=", "{", "// \u8bb0\u5f55\u4e3b\u5bf9\u89d2\u7ebf\u4e0a\u662f\u5426\u6709\u7687\u540e", "/* Driver Code */", "", "int", "int", "*", "char", "state", ";", "i", "<", "n", "++", "i", "{", "}", "cols", "=", "-", "1", "false", ";", "bool", "diags2", "[", "]", "=", "{", "// \u8bb0\u5f55\u526f\u5bf9\u89d2\u7ebf\u4e0a\u662f\u5426\u6709\u7687\u540e", "}", "", "{", "// \u91ca\u653e\u5185\u5b58", "}", "[", "]", "[", "]", "int", "i", "=", "0", "for", "(", ";", ")", ";", "[", "]", "{", "false", "}", "2", "*", "MAX_SIZE", "}", "-", "1", "false", ";", ";", "*", ";", ";", "return", "res", ";", "int", "main", "(", ")", ";", ";", ";", ";", ";", "for", "(", ";", ")", "for", "(", ";", ")", ";", "return", "0", ";", "MAX_SIZE", "MAX_SIZE", ";", "j", "<", "n", "++", "j", "{", "}", "=", "'\\0'", "MAX_SIZE", "2", "*", "MAX_SIZE", "}", "char", "*", "*", "*", "res", "=", "returnSize", "=", "0", "backtrack", "int", "n", "=", "4", "int", "returnSize", "char", "*", "*", "*", "res", "=", "printf", "printf", ";", "i", "<", "returnSize", "++", "i", "{", "}", ";", "i", "<", "returnSize", "++", "i", "{", "}", "free", "int", "j", "=", "0", ";", "[", "n", "]", "(", ")", "(", "0", ",", "n", ",", "state", ",", "res", ",", "returnSize", ",", "cols", ",", "diags1", ",", "diags2", ")", "nQueens", "(", ",", "n", ")", "(", ",", "returnSize", ")", "int", "i", "=", "0", "for", "(", ";", ")", ";", "int", "i", "=", "0", "for", "(", ";", ")", ";", "(", "res", ")", "=", "'#'", "state", "[", "i", "]", "char", "*", "*", "*", "malloc", "(", ")", "\"", "\u8f93\u5165\u68cb\u76d8\u957f\u5bbd\u4e3a%d", "\\n", "\"", "\"", "\u7687\u540e\u653e\u7f6e\u65b9\u6848\u5171\u6709 %d \u79cd", "\\n", "\"", ";", "j", "<", "n", "++", "j", "{", "}", "printf", ";", "j", "<", "n", "++", "j", "{", "}", "free", "[", "j", "]", "(", ")", "n", "&", "returnSize", "int", "j", "=", "0", ";", "for", "(", ";", ")", ";", "(", ")", "int", "j", "=", "0", ";", "(", ")", "state", "[", "i", "]", "*", "MAX_SIZE", ",", "printf", ";", "!=", "'\\0'", "++", "k", "{", "}", "printf", "\"", "---------------------", "\\n", "\"", "free", "res", "[", "i", "]", "sizeof", "(", ")", "int", "k", "=", "0", "[", "k", "]", ";", "if", "(", ")", "(", ")", "(", ")", "\"", "[", "\"", "[", "j", "]", "printf", "(", ")", "{", "}", "\"", "]", "\\n", "\"", "[", "j", "]", "*", "*", "res", "[", "i", "]", "(", ",", ")", "!=", "'\\0'", ";", "res", "[", "i", "]", "char", "\"", "%c", "\"", "[", "k", "]", "[", "]", "printf", "[", "j", "]", "[", "j", "]", "k", "+", "1", "(", ")", "res", "[", "i", "]", "res", "[", "i", "]", "\"", ", ", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 592, "ast_depth": 18, "n_identifiers": 18, "vocab_size": 61}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_computational_complexity/iteration.c#10-17", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_computational_complexity/iteration.c", "language": "Java"}, "method": {"name": "forLoop", "qualified_name": "codes.c.chapter_computational_complexity.iteration.c#forLoop", "start_line": 10, "end_line": 17, "signature": "forLoop(int n)", "original_code": "int forLoop(int n) {\n    int res = 0;\n    // \u5faa\u73af\u6c42\u548c 1, 2, ..., n-1, n\n    for (int i = 1; i <= n; i++) {\n        res += i;\n    }\n    return res;\n}", "doc_comment": "/* for \u5faa\u73af */"}, "code_tokens": ["forLoop", "int", "(", ")", "{", "// \u5faa\u73af\u6c42\u548c 1, 2, ..., n-1, n", "}", "n", ";", "for", "(", ";", ")", "return", "res", ";", "int", "int", "res", "=", "0", ";", "i", "<=", "n", "i", "++", "{", "}", "int", "i", "=", "1", ";", "res", "+=", "i"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 57, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 19}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_computational_complexity/iteration.c#20-29", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_computational_complexity/iteration.c", "language": "Java"}, "method": {"name": "whileLoop", "qualified_name": "codes.c.chapter_computational_complexity.iteration.c#whileLoop", "start_line": 20, "end_line": 29, "signature": "whileLoop(int n)", "original_code": "int whileLoop(int n) {\n    int res = 0;\n    int i = 1; // \u521d\u59cb\u5316\u6761\u4ef6\u53d8\u91cf\n    // \u5faa\u73af\u6c42\u548c 1, 2, ..., n-1, n\n    while (i <= n) {\n        res += i;\n        i++; // \u66f4\u65b0\u6761\u4ef6\u53d8\u91cf\n    }\n    return res;\n}", "doc_comment": "/* while \u5faa\u73af */"}, "code_tokens": ["whileLoop", "int", "(", ")", "{", "// \u521d\u59cb\u5316\u6761\u4ef6\u53d8\u91cf", "// \u5faa\u73af\u6c42\u548c 1, 2, ..., n-1, n", "}", "n", ";", ";", "while", "return", "res", ";", "int", "int", "res", "=", "0", "int", "i", "=", "1", "(", ")", "{", "// \u66f4\u65b0\u6761\u4ef6\u53d8\u91cf", "}", "i", "<=", "n", ";", ";", "res", "+=", "i", "i", "++"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 61, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 21}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_computational_complexity/iteration.c#32-43", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_computational_complexity/iteration.c", "language": "Java"}, "method": {"name": "whileLoopII", "qualified_name": "codes.c.chapter_computational_complexity.iteration.c#whileLoopII", "start_line": 32, "end_line": 43, "signature": "whileLoopII(int n)", "original_code": "int whileLoopII(int n) {\n    int res = 0;\n    int i = 1; // \u521d\u59cb\u5316\u6761\u4ef6\u53d8\u91cf\n    // \u5faa\u73af\u6c42\u548c 1, 4, 10, ...\n    while (i <= n) {\n        res += i;\n        // \u66f4\u65b0\u6761\u4ef6\u53d8\u91cf\n        i++;\n        i *= 2;\n    }\n    return res;\n}", "doc_comment": "/* while \u5faa\u73af\uff08\u4e24\u6b21\u66f4\u65b0\uff09 */"}, "code_tokens": ["whileLoopII", "int", "(", ")", "{", "// \u521d\u59cb\u5316\u6761\u4ef6\u53d8\u91cf", "// \u5faa\u73af\u6c42\u548c 1, 4, 10, ...", "}", "n", ";", ";", "while", "return", "res", ";", "int", "int", "res", "=", "0", "int", "i", "=", "1", "(", ")", "{", "// \u66f4\u65b0\u6761\u4ef6\u53d8\u91cf", "}", "i", "<=", "n", ";", ";", ";", "res", "+=", "i", "i", "++", "i", "*=", "2"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 67, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 23}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_computational_complexity/iteration.c#46-60", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_computational_complexity/iteration.c", "language": "Java"}, "method": {"name": "nestedForLoop", "qualified_name": "codes.c.chapter_computational_complexity.iteration.c#nestedForLoop", "start_line": 46, "end_line": 60, "signature": "nestedForLoop(int n)", "original_code": "char *nestedForLoop(int n) {\n    // n * n \u4e3a\u5bf9\u5e94\u70b9\u6570\u91cf\uff0c\"(i, j), \" \u5bf9\u5e94\u5b57\u7b26\u4e32\u957f\u6700\u5927\u4e3a 6+10*2\uff0c\u52a0\u4e0a\u6700\u540e\u4e00\u4e2a\u7a7a\u5b57\u7b26 \\0 \u7684\u989d\u5916\u7a7a\u95f4\n    int size = n * n * 26 + 1;\n    char *res = malloc(size * sizeof(char));\n    // \u5faa\u73af i = 1, 2, ..., n-1, n\n    for (int i = 1; i <= n; i++) {\n        // \u5faa\u73af j = 1, 2, ..., n-1, n\n        for (int j = 1; j <= n; j++) {\n            char tmp[26];\n            snprintf(tmp, sizeof(tmp), \"(%d, %d), \", i, j);\n            strncat(res, tmp, size - strlen(res) - 1);\n        }\n    }\n    return res;\n}", "doc_comment": "/* \u53cc\u5c42 for \u5faa\u73af */"}, "code_tokens": ["nestedForLoop", "char", "*", "(", ")", "{", "// n * n \u4e3a\u5bf9\u5e94\u70b9\u6570\u91cf\uff0c\"(i, j), \" \u5bf9\u5e94\u5b57\u7b26\u4e32\u957f\u6700\u5927\u4e3a 6+10*2\uff0c\u52a0\u4e0a\u6700\u540e\u4e00\u4e2a\u7a7a\u5b57\u7b26 \\0 \u7684\u989d\u5916\u7a7a\u95f4", "// \u5faa\u73af i = 1, 2, ..., n-1, n", "}", "n", ";", ";", "for", "(", ";", ")", "return", "res", ";", "int", "int", "size", "=", "char", "*", "res", "=", ";", "i", "<=", "n", "i", "++", "{", "// \u5faa\u73af j = 1, 2, ..., n-1, n", "}", "+", "1", "malloc", "int", "i", "=", "1", "for", "(", ";", ")", "*", "26", "(", ")", ";", "j", "<=", "n", "j", "++", "{", "}", "n", "*", "n", "size", "*", "int", "j", "=", "1", ";", ";", ";", "sizeof", "char", "tmp", "snprintf", "strncat", "(", ")", "[", "]", "(", "tmp", ",", ",", ",", "i", ",", "j", ")", "(", "res", ",", "tmp", ",", ")", "26", "sizeof", "\"", "(%d, %d), ", "\"", "-", "1", "char", "(", "tmp", ")", "size", "-", "strlen", "(", "res", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 170, "ast_depth": 15, "n_identifiers": 12, "vocab_size": 37}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_computational_complexity/iteration.c#63-81", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_computational_complexity/iteration.c", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.c.chapter_computational_complexity.iteration.c#main", "start_line": 63, "end_line": 81, "signature": "main()", "original_code": "int main() {\n    int n = 5;\n    int res;\n\n    res = forLoop(n);\n    printf(\"\\nfor \u5faa\u73af\u7684\u6c42\u548c\u7ed3\u679c res = %d\\n\", res);\n\n    res = whileLoop(n);\n    printf(\"\\nwhile \u5faa\u73af\u7684\u6c42\u548c\u7ed3\u679c res = %d\\n\", res);\n\n    res = whileLoopII(n);\n    printf(\"\\nwhile \u5faa\u73af\uff08\u4e24\u6b21\u66f4\u65b0\uff09\u6c42\u548c\u7ed3\u679c res = %d\\n\", res);\n\n    char *resStr = nestedForLoop(n);\n    printf(\"\\n\u53cc\u5c42 for \u5faa\u73af\u7684\u904d\u5386\u7ed3\u679c %s\\r\\n\", resStr);\n    free(resStr);\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "}", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "return", "0", ";", "int", "n", "=", "5", "int", "res", "res", "=", "printf", "res", "=", "printf", "res", "=", "printf", "char", "*", "resStr", "=", "printf", "free", "forLoop", "(", ",", "res", ")", "whileLoop", "(", ",", "res", ")", "whileLoopII", "(", ",", "res", ")", "nestedForLoop", "(", ",", "resStr", ")", "(", "resStr", ")", "(", "n", ")", "\"", "\\n", "for \u5faa\u73af\u7684\u6c42\u548c\u7ed3\u679c res = %d", "\\n", "\"", "(", "n", ")", "\"", "\\n", "while \u5faa\u73af\u7684\u6c42\u548c\u7ed3\u679c res = %d", "\\n", "\"", "(", "n", ")", "\"", "\\n", "while \u5faa\u73af\uff08\u4e24\u6b21\u66f4\u65b0\uff09\u6c42\u548c\u7ed3\u679c res = %d", "\\n", "\"", "(", "n", ")", "\"", "\\n", "\u53cc\u5c42 for \u5faa\u73af\u7684\u904d\u5386\u7ed3\u679c %s", "\\r", "\\n", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 146, "ast_depth": 8, "n_identifiers": 10, "vocab_size": 30}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_divide_and_conquer/hanota.c#13-21", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_divide_and_conquer/hanota.c", "language": "Java"}, "method": {"name": "move", "qualified_name": "codes.c.chapter_divide_and_conquer.hanota.c#move", "start_line": 13, "end_line": 21, "signature": "move(int *src, int *srcSize, int *tar, int *tarSize)", "original_code": "void move(int *src, int *srcSize, int *tar, int *tarSize) {\n    // \u4ece src \u9876\u90e8\u62ff\u51fa\u4e00\u4e2a\u5706\u76d8\n    int pan = src[*srcSize - 1];\n    src[*srcSize - 1] = 0;\n    (*srcSize)--;\n    // \u5c06\u5706\u76d8\u653e\u5165 tar \u9876\u90e8\n    tar[*tarSize] = pan;\n    (*tarSize)++;\n}", "doc_comment": "/* \u79fb\u52a8\u4e00\u4e2a\u5706\u76d8 */"}, "code_tokens": ["void", "move", "(", ",", ",", ",", ")", "{", "// \u4ece src \u9876\u90e8\u62ff\u51fa\u4e00\u4e2a\u5706\u76d8", "// \u5c06\u5706\u76d8\u653e\u5165 tar \u9876\u90e8", "}", "src", "srcSize", "tar", "tarSize", ";", "src", "", ";", ";", "tar", ";", ";", "int", "*", "int", "*", "int", "*", "int", "*", "int", "pan", "=", "]", "[", "*", "srcSize", "-", "1", "]", "=", "0", "--", "[", "*", "tarSize", "=", "pan", "++", "src", "[", "*", "srcSize", "-", "1", "(", "srcSize", ")", "]", "(", "tarSize", ")", "*", "*"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 105, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 26}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_divide_and_conquer/hanota.c#24-36", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_divide_and_conquer/hanota.c", "language": "Java"}, "method": {"name": "dfs", "qualified_name": "codes.c.chapter_divide_and_conquer.hanota.c#dfs", "start_line": 24, "end_line": 36, "signature": "dfs(int i, int *src, int *srcSize, int *buf, int *bufSize, int *tar, int *tarSize)", "original_code": "void dfs(int i, int *src, int *srcSize, int *buf, int *bufSize, int *tar, int *tarSize) {\n    // \u82e5 src \u53ea\u5269\u4e0b\u4e00\u4e2a\u5706\u76d8\uff0c\u5219\u76f4\u63a5\u5c06\u5176\u79fb\u5230 tar\n    if (i == 1) {\n        move(src, srcSize, tar, tarSize);\n        return;\n    }\n    // \u5b50\u95ee\u9898 f(i-1) \uff1a\u5c06 src \u9876\u90e8 i-1 \u4e2a\u5706\u76d8\u501f\u52a9 tar \u79fb\u5230 buf\n    dfs(i - 1, src, srcSize, tar, tarSize, buf, bufSize);\n    // \u5b50\u95ee\u9898 f(1) \uff1a\u5c06 src \u5269\u4f59\u4e00\u4e2a\u5706\u76d8\u79fb\u5230 tar\n    move(src, srcSize, tar, tarSize);\n    // \u5b50\u95ee\u9898 f(i-1) \uff1a\u5c06 buf \u9876\u90e8 i-1 \u4e2a\u5706\u76d8\u501f\u52a9 src \u79fb\u5230 tar\n    dfs(i - 1, buf, bufSize, src, srcSize, tar, tarSize);\n}", "doc_comment": "/* \u6c42\u89e3\u6c49\u8bfa\u5854\u95ee\u9898 f(i) */"}, "code_tokens": ["void", "dfs", "(", ",", ",", ",", ",", ",", ",", ")", "{", "// \u82e5 src \u53ea\u5269\u4e0b\u4e00\u4e2a\u5706\u76d8\uff0c\u5219\u76f4\u63a5\u5c06\u5176\u79fb\u5230 tar", "// \u5b50\u95ee\u9898 f(i-1) \uff1a\u5c06 src \u9876\u90e8 i-1 \u4e2a\u5706\u76d8\u501f\u52a9 tar \u79fb\u5230 buf", "// \u5b50\u95ee\u9898 f(1) \uff1a\u5c06 src \u5269\u4f59\u4e00\u4e2a\u5706\u76d8\u79fb\u5230 tar", "// \u5b50\u95ee\u9898 f(i-1) \uff1a\u5c06 buf \u9876\u90e8 i-1 \u4e2a\u5706\u76d8\u501f\u52a9 src \u79fb\u5230 tar", "}", "i", "src", "srcSize", "buf", "bufSize", "tar", "tarSize", "if", ";", ";", ";", "int", "int", "*", "int", "*", "int", "*", "int", "*", "int", "*", "int", "*", "(", ")", "{", "}", "dfs", "move", "dfs", "i", "==", "1", ";", "return", ";", "(", ",", "src", ",", "srcSize", ",", "tar", ",", "tarSize", ",", "buf", ",", "bufSize", ")", "(", "src", ",", "srcSize", ",", "tar", ",", "tarSize", ")", "(", ",", "buf", ",", "bufSize", ",", "src", ",", "srcSize", ",", "tar", ",", "tarSize", ")", "move", "i", "-", "1", "i", "-", "1", "(", "src", ",", "srcSize", ",", "tar", ",", "tarSize", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 149, "ast_depth": 9, "n_identifiers": 9, "vocab_size": 27}}
