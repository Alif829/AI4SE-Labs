{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_heap/top_k.c#38-59", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_heap/top_k.c", "language": "Java"}, "method": {"name": "topKHeap", "qualified_name": "codes.c.chapter_heap.top_k.c#topKHeap", "start_line": 38, "end_line": 59, "signature": "topKHeap(int *nums, int sizeNums, int k)", "original_code": "int *topKHeap(int *nums, int sizeNums, int k) {\n    // \u521d\u59cb\u5316\u5c0f\u9876\u5806\n    // \u8bf7\u6ce8\u610f\uff1a\u6211\u4eec\u5c06\u5806\u4e2d\u6240\u6709\u5143\u7d20\u53d6\u53cd\uff0c\u4ece\u800c\u7528\u5927\u9876\u5806\u6765\u6a21\u62df\u5c0f\u9876\u5806\n    int empty[0];\n    MaxHeap *maxHeap = newMaxHeap(empty, 0);\n    // \u5c06\u6570\u7ec4\u7684\u524d k \u4e2a\u5143\u7d20\u5165\u5806\n    for (int i = 0; i < k; i++) {\n        pushMinHeap(maxHeap, nums[i]);\n    }\n    // \u4ece\u7b2c k+1 \u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u4fdd\u6301\u5806\u7684\u957f\u5ea6\u4e3a k\n    for (int i = k; i < sizeNums; i++) {\n        // \u82e5\u5f53\u524d\u5143\u7d20\u5927\u4e8e\u5806\u9876\u5143\u7d20\uff0c\u5219\u5c06\u5806\u9876\u5143\u7d20\u51fa\u5806\u3001\u5f53\u524d\u5143\u7d20\u5165\u5806\n        if (nums[i] > peekMinHeap(maxHeap)) {\n            popMinHeap(maxHeap);\n            pushMinHeap(maxHeap, nums[i]);\n        }\n    }\n    int *res = getMinHeap(maxHeap);\n    // \u91ca\u653e\u5185\u5b58\n    delMaxHeap(maxHeap);\n    return res;\n}", "doc_comment": "// \u57fa\u4e8e\u5806\u67e5\u627e\u6570\u7ec4\u4e2d\u6700\u5927\u7684 k \u4e2a\u5143\u7d20\u7684\u51fd\u6570"}, "code_tokens": ["topKHeap", "int", "*", "(", ",", ",", ")", "{", "// \u521d\u59cb\u5316\u5c0f\u9876\u5806", "// \u8bf7\u6ce8\u610f\uff1a\u6211\u4eec\u5c06\u5806\u4e2d\u6240\u6709\u5143\u7d20\u53d6\u53cd\uff0c\u4ece\u800c\u7528\u5927\u9876\u5806\u6765\u6a21\u62df\u5c0f\u9876\u5806", "// \u5c06\u6570\u7ec4\u7684\u524d k \u4e2a\u5143\u7d20\u5165\u5806", "// \u4ece\u7b2c k+1 \u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u4fdd\u6301\u5806\u7684\u957f\u5ea6\u4e3a k", "// \u91ca\u653e\u5185\u5b58", "}", "nums", "sizeNums", "k", ";", ";", "for", "(", ";", ")", "for", "(", ";", ")", ";", ";", "return", "res", ";", "int", "*", "int", "int", "int", "empty", "MaxHeap", "*", ";", "i", "<", "k", "i", "++", "{", "}", ";", "i", "<", "sizeNums", "i", "++", "{", "// \u82e5\u5f53\u524d\u5143\u7d20\u5927\u4e8e\u5806\u9876\u5143\u7d20\uff0c\u5219\u5c06\u5806\u9876\u5143\u7d20\u51fa\u5806\u3001\u5f53\u524d\u5143\u7d20\u5165\u5806", "}", "int", "*", "res", "=", "delMaxHeap", "[", "]", "maxHeap", "=", "int", "i", "=", "0", ";", "int", "i", "=", "k", "if", "getMinHeap", "(", "maxHeap", ")", "0", "newMaxHeap", "pushMinHeap", "(", ")", "{", "}", "(", "maxHeap", ")", "(", "empty", ",", "0", ")", "(", "maxHeap", ",", ")", ">", ";", ";", "nums", "[", "i", "]", "nums", "[", "i", "]", "peekMinHeap", "popMinHeap", "pushMinHeap", "(", "maxHeap", ")", "(", "maxHeap", ")", "(", "maxHeap", ",", ")", "nums", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 192, "ast_depth": 12, "n_identifiers": 15, "vocab_size": 39}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_heap/top_k.c#62-73", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_heap/top_k.c", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.c.chapter_heap.top_k.c#main", "start_line": 62, "end_line": 73, "signature": "main()", "original_code": "int main() {\n    int nums[] = {1, 7, 6, 3, 2};\n    int k = 3;\n    int sizeNums = sizeof(nums) / sizeof(nums[0]);\n\n    int *res = topKHeap(nums, sizeNums, k);\n    printf(\"\u6700\u5927\u7684 %d \u4e2a\u5143\u7d20\u4e3a: \", k);\n    printArray(res, k);\n\n    free(res);\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "}", ";", ";", ";", ";", ";", ";", ";", "return", "0", ";", "int", "nums", "=", "int", "k", "=", "3", "int", "sizeNums", "=", "int", "*", "res", "=", "printf", "printArray", "free", "[", "]", "{", "1", ",", "7", ",", "6", ",", "3", ",", "2", "}", "/", "topKHeap", "(", ",", "k", ")", "(", "res", ",", "k", ")", "(", "res", ")", "sizeof", "sizeof", "(", "nums", ",", "sizeNums", ",", "k", ")", "\"", "\u6700\u5927\u7684 %d \u4e2a\u5143\u7d20\u4e3a: ", "\"", "(", "nums", ")", "(", ")", "nums", "[", "0", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 120, "ast_depth": 10, "n_identifiers": 10, "vocab_size": 31}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_searching/binary_search_edge.c#10-22", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_searching/binary_search_edge.c", "language": "Java"}, "method": {"name": "binarySearchInsertion", "qualified_name": "codes.c.chapter_searching.binary_search_edge.c#binarySearchInsertion", "start_line": 10, "end_line": 22, "signature": "binarySearchInsertion(int *nums, int numSize, int target)", "original_code": "int binarySearchInsertion(int *nums, int numSize, int target) {\n    int i = 0, j = numSize - 1; // \u521d\u59cb\u5316\u53cc\u95ed\u533a\u95f4 [0, n-1]\n    while (i <= j) {\n        int m = i + (j - i) / 2; // \u8ba1\u7b97\u4e2d\u70b9\u7d22\u5f15 m\n        if (nums[m] < target) {\n            i = m + 1; // target \u5728\u533a\u95f4 [m+1, j] \u4e2d\n        } else {\n            j = m - 1; // \u9996\u4e2a\u5c0f\u4e8e target \u7684\u5143\u7d20\u5728\u533a\u95f4 [i, m-1] \u4e2d\n        }\n    }\n    // \u8fd4\u56de\u63d2\u5165\u70b9 i\n    return i;\n}", "doc_comment": "/* \u4e8c\u5206\u67e5\u627e\u63d2\u5165\u70b9\uff08\u5b58\u5728\u91cd\u590d\u5143\u7d20\uff09 */"}, "code_tokens": ["binarySearchInsertion", "int", "(", ",", ",", ")", "{", "// \u521d\u59cb\u5316\u53cc\u95ed\u533a\u95f4 [0, n-1]", "// \u8fd4\u56de\u63d2\u5165\u70b9 i", "}", "nums", "numSize", "target", ",", ";", "while", "return", "i", ";", "int", "*", "int", "int", "int", "i", "=", "0", "j", "=", "(", ")", "{", "// \u8ba1\u7b97\u4e2d\u70b9\u7d22\u5f15 m", "}", "numSize", "-", "1", "i", "<=", "j", ";", "if", "else", "int", "m", "=", "(", ")", "{", "// target \u5728\u533a\u95f4 [m+1, j] \u4e2d", "}", "{", "// \u9996\u4e2a\u5c0f\u4e8e target \u7684\u5143\u7d20\u5728\u533a\u95f4 [i, m-1] \u4e2d", "}", "i", "+", "<", "target", ";", ";", "/", "2", "nums", "[", "m", "]", "i", "=", "j", "=", "(", ")", "m", "+", "1", "m", "-", "1", "j", "-", "i"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 122, "ast_depth": 12, "n_identifiers": 7, "vocab_size": 35}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_searching/binary_search_edge.c#25-34", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_searching/binary_search_edge.c", "language": "Java"}, "method": {"name": "binarySearchLeftEdge", "qualified_name": "codes.c.chapter_searching.binary_search_edge.c#binarySearchLeftEdge", "start_line": 25, "end_line": 34, "signature": "binarySearchLeftEdge(int *nums, int numSize, int target)", "original_code": "int binarySearchLeftEdge(int *nums, int numSize, int target) {\n    // \u7b49\u4ef7\u4e8e\u67e5\u627e target \u7684\u63d2\u5165\u70b9\n    int i = binarySearchInsertion(nums, numSize, target);\n    // \u672a\u627e\u5230 target \uff0c\u8fd4\u56de -1\n    if (i == numSize || nums[i] != target) {\n        return -1;\n    }\n    // \u627e\u5230 target \uff0c\u8fd4\u56de\u7d22\u5f15 i\n    return i;\n}", "doc_comment": "/* \u4e8c\u5206\u67e5\u627e\u6700\u5de6\u4e00\u4e2a target */"}, "code_tokens": ["binarySearchLeftEdge", "int", "(", ",", ",", ")", "{", "// \u7b49\u4ef7\u4e8e\u67e5\u627e target \u7684\u63d2\u5165\u70b9", "// \u672a\u627e\u5230 target \uff0c\u8fd4\u56de -1", "// \u627e\u5230 target \uff0c\u8fd4\u56de\u7d22\u5f15 i", "}", "nums", "numSize", "target", ";", "if", "return", "i", ";", "int", "*", "int", "int", "int", "i", "=", "(", ")", "{", "}", "binarySearchInsertion", "||", "return", ";", "(", "nums", ",", "numSize", ",", "target", ")", "i", "==", "numSize", "!=", "target", "-", "1", "nums", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 79, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 27}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_searching/binary_search_edge.c#37-48", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_searching/binary_search_edge.c", "language": "Java"}, "method": {"name": "binarySearchRightEdge", "qualified_name": "codes.c.chapter_searching.binary_search_edge.c#binarySearchRightEdge", "start_line": 37, "end_line": 48, "signature": "binarySearchRightEdge(int *nums, int numSize, int target)", "original_code": "int binarySearchRightEdge(int *nums, int numSize, int target) {\n    // \u8f6c\u5316\u4e3a\u67e5\u627e\u6700\u5de6\u4e00\u4e2a target + 1\n    int i = binarySearchInsertion(nums, numSize, target + 1);\n    // j \u6307\u5411\u6700\u53f3\u4e00\u4e2a target \uff0ci \u6307\u5411\u9996\u4e2a\u5927\u4e8e target \u7684\u5143\u7d20\n    int j = i - 1;\n    // \u672a\u627e\u5230 target \uff0c\u8fd4\u56de -1\n    if (j == -1 || nums[j] != target) {\n        return -1;\n    }\n    // \u627e\u5230 target \uff0c\u8fd4\u56de\u7d22\u5f15 j\n    return j;\n}", "doc_comment": "/* \u4e8c\u5206\u67e5\u627e\u6700\u53f3\u4e00\u4e2a target */"}, "code_tokens": ["binarySearchRightEdge", "int", "(", ",", ",", ")", "{", "// \u8f6c\u5316\u4e3a\u67e5\u627e\u6700\u5de6\u4e00\u4e2a target + 1", "// j \u6307\u5411\u6700\u53f3\u4e00\u4e2a target \uff0ci \u6307\u5411\u9996\u4e2a\u5927\u4e8e target \u7684\u5143\u7d20", "// \u672a\u627e\u5230 target \uff0c\u8fd4\u56de -1", "// \u627e\u5230 target \uff0c\u8fd4\u56de\u7d22\u5f15 j", "}", "nums", "numSize", "target", ";", ";", "if", "return", "j", ";", "int", "*", "int", "int", "int", "i", "=", "int", "j", "=", "(", ")", "{", "}", "binarySearchInsertion", "i", "-", "1", "||", "return", ";", "(", "nums", ",", "numSize", ",", ")", "j", "==", "!=", "target", "-", "1", "target", "+", "1", "-", "1", "nums", "[", "j", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 96, "ast_depth": 9, "n_identifiers": 7, "vocab_size": 30}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_searching/binary_search_edge.c#51-67", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_searching/binary_search_edge.c", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.c.chapter_searching.binary_search_edge.c#main", "start_line": 51, "end_line": 67, "signature": "main()", "original_code": "int main() {\n    // \u5305\u542b\u91cd\u590d\u5143\u7d20\u7684\u6570\u7ec4\n    int nums[] = {1, 3, 6, 6, 6, 6, 6, 10, 12, 15};\n    printf(\"\\n\u6570\u7ec4 nums = \");\n    printArray(nums, sizeof(nums) / sizeof(nums[0]));\n\n    // \u4e8c\u5206\u67e5\u627e\u5de6\u8fb9\u754c\u548c\u53f3\u8fb9\u754c\n    int targets[] = {6, 7};\n    for (int i = 0; i < sizeof(targets) / sizeof(targets[0]); i++) {\n        int index = binarySearchLeftEdge(nums, sizeof(nums) / sizeof(nums[0]), targets[i]);\n        printf(\"\u6700\u5de6\u4e00\u4e2a\u5143\u7d20 %d \u7684\u7d22\u5f15\u4e3a %d\\n\", targets[i], index);\n        index = binarySearchRightEdge(nums, sizeof(nums) / sizeof(nums[0]), targets[i]);\n        printf(\"\u6700\u53f3\u4e00\u4e2a\u5143\u7d20 %d \u7684\u7d22\u5f15\u4e3a %d\\n\", targets[i], index);\n    }\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "// \u5305\u542b\u91cd\u590d\u5143\u7d20\u7684\u6570\u7ec4", "// \u4e8c\u5206\u67e5\u627e\u5de6\u8fb9\u754c\u548c\u53f3\u8fb9\u754c", "}", ";", ";", ";", ";", "for", "(", ";", ")", "return", "0", ";", "int", "nums", "=", "printf", "printArray", "int", "targets", "=", ";", "i", "<", "i", "++", "{", "}", "[", "]", "{", "1", ",", "3", ",", "6", ",", "6", ",", "6", ",", "6", ",", "6", ",", "10", ",", "12", ",", "15", "}", "(", ")", "(", "nums", ",", ")", "[", "]", "{", "6", ",", "7", "}", "int", "i", "=", "0", "/", ";", ";", ";", ";", "\"", "\\n", "\u6570\u7ec4 nums = ", "\"", "/", "sizeof", "sizeof", "int", "index", "=", "printf", "index", "=", "printf", "sizeof", "sizeof", "(", "targets", ")", "(", ")", "binarySearchLeftEdge", "(", ",", ",", "index", ")", "binarySearchRightEdge", "(", ",", ",", "index", ")", "(", "nums", ")", "(", ")", "targets", "[", "0", "]", "(", "nums", ",", ",", ")", "\"", "\u6700\u5de6\u4e00\u4e2a\u5143\u7d20 %d \u7684\u7d22\u5f15\u4e3a %d", "\\n", "\"", "targets", "[", "i", "]", "(", "nums", ",", ",", ")", "\"", "\u6700\u53f3\u4e00\u4e2a\u5143\u7d20 %d \u7684\u7d22\u5f15\u4e3a %d", "\\n", "\"", "targets", "[", "i", "]", "nums", "[", "0", "]", "/", "targets", "[", "i", "]", "/", "targets", "[", "i", "]", "sizeof", "sizeof", "sizeof", "sizeof", "(", "nums", ")", "(", ")", "(", "nums", ")", "(", ")", "nums", "[", "0", "]", "nums", "[", "0", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 258, "ast_depth": 14, "n_identifiers": 10, "vocab_size": 40}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_stack_and_queue/array_deque.c#28-31", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_stack_and_queue/array_deque.c", "language": "Java"}, "method": {"name": "delArrayDeque", "qualified_name": "codes.c.chapter_stack_and_queue.array_deque.c#delArrayDeque", "start_line": 28, "end_line": 31, "signature": "delArrayDeque(ArrayDeque *deque)", "original_code": "void delArrayDeque(ArrayDeque *deque) {\n    free(deque->nums);\n    free(deque);\n}", "doc_comment": "/* \u6790\u6784\u51fd\u6570 */"}, "code_tokens": ["void", "delArrayDeque", "(", ")", "{", "}", "ArrayDeque", "deque", ";", ";", "*", "free", "free", "(", ")", "(", "deque", ")", "deque", "->", "nums"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 34, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 13}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_stack_and_queue/array_deque.c#34-36", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_stack_and_queue/array_deque.c", "language": "Java"}, "method": {"name": "capacity", "qualified_name": "codes.c.chapter_stack_and_queue.array_deque.c#capacity", "start_line": 34, "end_line": 36, "signature": "capacity(ArrayDeque *deque)", "original_code": "int capacity(ArrayDeque *deque) {\n    return deque->queCapacity;\n}", "doc_comment": "/* \u83b7\u53d6\u53cc\u5411\u961f\u5217\u7684\u5bb9\u91cf */"}, "code_tokens": ["capacity", "int", "(", ")", "{", "}", "ArrayDeque", "deque", "return", ";", "*", "deque", "->", "queCapacity"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 23, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 13}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_stack_and_queue/array_deque.c#39-41", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_stack_and_queue/array_deque.c", "language": "Java"}, "method": {"name": "size", "qualified_name": "codes.c.chapter_stack_and_queue.array_deque.c#size", "start_line": 39, "end_line": 41, "signature": "size(ArrayDeque *deque)", "original_code": "int size(ArrayDeque *deque) {\n    return deque->queSize;\n}", "doc_comment": "/* \u83b7\u53d6\u53cc\u5411\u961f\u5217\u7684\u957f\u5ea6 */"}, "code_tokens": ["size", "int", "(", ")", "{", "}", "ArrayDeque", "deque", "return", ";", "*", "deque", "->", "queSize"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 23, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 13}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_stack_and_queue/array_deque.c#44-46", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_stack_and_queue/array_deque.c", "language": "Java"}, "method": {"name": "empty", "qualified_name": "codes.c.chapter_stack_and_queue.array_deque.c#empty", "start_line": 44, "end_line": 46, "signature": "empty(ArrayDeque *deque)", "original_code": "bool empty(ArrayDeque *deque) {\n    return deque->queSize == 0;\n}", "doc_comment": "/* \u5224\u65ad\u53cc\u5411\u961f\u5217\u662f\u5426\u4e3a\u7a7a */"}, "code_tokens": ["bool", "empty", "(", ")", "{", "}", "ArrayDeque", "deque", "return", ";", "*", "deque", "->", "queSize", "==", "0"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 25, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 15}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_stack_and_queue/array_deque.c#49-54", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_stack_and_queue/array_deque.c", "language": "Java"}, "method": {"name": "dequeIndex", "qualified_name": "codes.c.chapter_stack_and_queue.array_deque.c#dequeIndex", "start_line": 49, "end_line": 54, "signature": "dequeIndex(ArrayDeque *deque, int i)", "original_code": "int dequeIndex(ArrayDeque *deque, int i) {\n    // \u901a\u8fc7\u53d6\u4f59\u64cd\u4f5c\u5b9e\u73b0\u6570\u7ec4\u9996\u5c3e\u76f8\u8fde\n    // \u5f53 i \u8d8a\u8fc7\u6570\u7ec4\u5c3e\u90e8\u65f6\uff0c\u56de\u5230\u5934\u90e8\n    // \u5f53 i \u8d8a\u8fc7\u6570\u7ec4\u5934\u90e8\u540e\uff0c\u56de\u5230\u5c3e\u90e8\n    return ((i + capacity(deque)) % capacity(deque));\n}", "doc_comment": "/* \u8ba1\u7b97\u73af\u5f62\u6570\u7ec4\u7d22\u5f15 */"}, "code_tokens": ["dequeIndex", "int", "(", ",", ")", "{", "// \u901a\u8fc7\u53d6\u4f59\u64cd\u4f5c\u5b9e\u73b0\u6570\u7ec4\u9996\u5c3e\u76f8\u8fde", "// \u5f53 i \u8d8a\u8fc7\u6570\u7ec4\u5c3e\u90e8\u65f6\uff0c\u56de\u5230\u5934\u90e8", "// \u5f53 i \u8d8a\u8fc7\u6570\u7ec4\u5934\u90e8\u540e\uff0c\u56de\u5230\u5c3e\u90e8", "}", "ArrayDeque", "deque", "i", "return", ";", "*", "int", "(", ")", "%", "(", ")", "capacity", "i", "+", "(", "deque", ")", "capacity", "(", "deque", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 50, "ast_depth": 11, "n_identifiers": 4, "vocab_size": 19}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_stack_and_queue/array_deque.c#57-68", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_stack_and_queue/array_deque.c", "language": "Java"}, "method": {"name": "pushFirst", "qualified_name": "codes.c.chapter_stack_and_queue.array_deque.c#pushFirst", "start_line": 57, "end_line": 68, "signature": "pushFirst(ArrayDeque *deque, int num)", "original_code": "void pushFirst(ArrayDeque *deque, int num) {\n    if (deque->queSize == capacity(deque)) {\n        printf(\"\u53cc\u5411\u961f\u5217\u5df2\u6ee1\\r\\n\");\n        return;\n    }\n    // \u961f\u9996\u6307\u9488\u5411\u5de6\u79fb\u52a8\u4e00\u4f4d\n    // \u901a\u8fc7\u53d6\u4f59\u64cd\u4f5c\uff0c\u5b9e\u73b0 front \u8d8a\u8fc7\u6570\u7ec4\u5934\u90e8\u56de\u5230\u5c3e\u90e8\n    deque->front = dequeIndex(deque, deque->front - 1);\n    // \u5c06 num \u6dfb\u52a0\u5230\u961f\u9996\n    deque->nums[deque->front] = num;\n    deque->queSize++;\n}", "doc_comment": "/* \u961f\u9996\u5165\u961f */"}, "code_tokens": ["void", "pushFirst", "(", ",", ")", "{", "// \u961f\u9996\u6307\u9488\u5411\u5de6\u79fb\u52a8\u4e00\u4f4d", "// \u901a\u8fc7\u53d6\u4f59\u64cd\u4f5c\uff0c\u5b9e\u73b0 front \u8d8a\u8fc7\u6570\u7ec4\u5934\u90e8\u56de\u5230\u5c3e\u90e8", "// \u5c06 num \u6dfb\u52a0\u5230\u961f\u9996", "}", "ArrayDeque", "deque", "num", "if", ";", ";", ";", "*", "int", "(", ")", "{", "}", "deque", "->", "deque", "->", "deque", "->", "deque", "->", ";", "return", ";", "front", "=", "=", "num", "queSize", "++", "queSize", "==", "printf", "dequeIndex", "nums", "[", "]", "capacity", "(", ")", "(", "deque", ",", ")", "deque", "->", "front", "(", "deque", ")", "\"", "\u53cc\u5411\u961f\u5217\u5df2\u6ee1", "\\r", "\\n", "\"", "deque", "->", "front", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 105, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 36}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_stack_and_queue/array_deque.c#71-81", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_stack_and_queue/array_deque.c", "language": "Java"}, "method": {"name": "pushLast", "qualified_name": "codes.c.chapter_stack_and_queue.array_deque.c#pushLast", "start_line": 71, "end_line": 81, "signature": "pushLast(ArrayDeque *deque, int num)", "original_code": "void pushLast(ArrayDeque *deque, int num) {\n    if (deque->queSize == capacity(deque)) {\n        printf(\"\u53cc\u5411\u961f\u5217\u5df2\u6ee1\\r\\n\");\n        return;\n    }\n    // \u8ba1\u7b97\u5c3e\u6307\u9488\uff0c\u6307\u5411\u961f\u5c3e\u7d22\u5f15 + 1\n    int rear = dequeIndex(deque, deque->front + deque->queSize);\n    // \u5c06 num \u6dfb\u52a0\u81f3\u961f\u5c3e\n    deque->nums[rear] = num;\n    deque->queSize++;\n}", "doc_comment": "/* \u961f\u5c3e\u5165\u961f */"}, "code_tokens": ["void", "pushLast", "(", ",", ")", "{", "// \u8ba1\u7b97\u5c3e\u6307\u9488\uff0c\u6307\u5411\u961f\u5c3e\u7d22\u5f15 + 1", "// \u5c06 num \u6dfb\u52a0\u81f3\u961f\u5c3e", "}", "ArrayDeque", "deque", "num", "if", ";", ";", ";", "*", "int", "(", ")", "{", "}", "int", "rear", "=", "deque", "->", "deque", "->", "deque", "->", ";", "return", ";", "dequeIndex", "=", "num", "queSize", "++", "queSize", "==", "printf", "(", "deque", ",", ")", "nums", "[", "rear", "]", "capacity", "(", ")", "deque", "->", "(", "deque", ")", "\"", "\u53cc\u5411\u961f\u5217\u5df2\u6ee1", "\\r", "\\n", "\"", "front", "+", "deque", "->", "queSize"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 103, "ast_depth": 11, "n_identifiers": 10, "vocab_size": 35}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_stack_and_queue/array_deque.c#84-88", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_stack_and_queue/array_deque.c", "language": "Java"}, "method": {"name": "peekFirst", "qualified_name": "codes.c.chapter_stack_and_queue.array_deque.c#peekFirst", "start_line": 84, "end_line": 88, "signature": "peekFirst(ArrayDeque *deque)", "original_code": "int peekFirst(ArrayDeque *deque) {\n    // \u8bbf\u95ee\u5f02\u5e38\uff1a\u53cc\u5411\u961f\u5217\u4e3a\u7a7a\n    assert(empty(deque) == 0);\n    return deque->nums[deque->front];\n}", "doc_comment": "/* \u8bbf\u95ee\u961f\u9996\u5143\u7d20 */"}, "code_tokens": ["peekFirst", "int", "(", ")", "{", "// \u8bbf\u95ee\u5f02\u5e38\uff1a\u53cc\u5411\u961f\u5217\u4e3a\u7a7a", "}", "ArrayDeque", "deque", "assert", ";", "return", ";", "*", "(", ")", "deque", "->", "==", "0", "nums", "[", "]", "empty", "deque", "->", "front", "(", "deque", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 46, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 21}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_stack_and_queue/array_deque.c#91-96", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_stack_and_queue/array_deque.c", "language": "Java"}, "method": {"name": "peekLast", "qualified_name": "codes.c.chapter_stack_and_queue.array_deque.c#peekLast", "start_line": 91, "end_line": 96, "signature": "peekLast(ArrayDeque *deque)", "original_code": "int peekLast(ArrayDeque *deque) {\n    // \u8bbf\u95ee\u5f02\u5e38\uff1a\u53cc\u5411\u961f\u5217\u4e3a\u7a7a\n    assert(empty(deque) == 0);\n    int last = dequeIndex(deque, deque->front + deque->queSize - 1);\n    return deque->nums[last];\n}", "doc_comment": "/* \u8bbf\u95ee\u961f\u5c3e\u5143\u7d20 */"}, "code_tokens": ["peekLast", "int", "(", ")", "{", "// \u8bbf\u95ee\u5f02\u5e38\uff1a\u53cc\u5411\u961f\u5217\u4e3a\u7a7a", "}", "ArrayDeque", "deque", "assert", ";", ";", "return", ";", "*", "(", ")", "int", "last", "=", "deque", "->", "==", "0", "dequeIndex", "nums", "[", "last", "]", "empty", "(", "deque", ",", ")", "(", "deque", ")", "deque", "->", "front", "+", "deque", "->", "queSize", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 70, "ast_depth": 12, "n_identifiers": 8, "vocab_size": 29}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_stack_and_queue/array_deque.c#99-105", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_stack_and_queue/array_deque.c", "language": "Java"}, "method": {"name": "popFirst", "qualified_name": "codes.c.chapter_stack_and_queue.array_deque.c#popFirst", "start_line": 99, "end_line": 105, "signature": "popFirst(ArrayDeque *deque)", "original_code": "int popFirst(ArrayDeque *deque) {\n    int num = peekFirst(deque);\n    // \u961f\u9996\u6307\u9488\u5411\u540e\u79fb\u52a8\u4e00\u4f4d\n    deque->front = dequeIndex(deque, deque->front + 1);\n    deque->queSize--;\n    return num;\n}", "doc_comment": "/* \u961f\u9996\u51fa\u961f */"}, "code_tokens": ["popFirst", "int", "(", ")", "{", "// \u961f\u9996\u6307\u9488\u5411\u540e\u79fb\u52a8\u4e00\u4f4d", "}", "ArrayDeque", "deque", ";", ";", ";", "return", "num", ";", "*", "int", "num", "=", "deque", "->", "deque", "->", "peekFirst", "front", "=", "queSize", "--", "(", "deque", ")", "dequeIndex", "(", "deque", ",", ")", "deque", "->", "front", "+", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 64, "ast_depth": 11, "n_identifiers": 7, "vocab_size": 23}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_stack_and_queue/array_deque.c#108-112", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_stack_and_queue/array_deque.c", "language": "Java"}, "method": {"name": "popLast", "qualified_name": "codes.c.chapter_stack_and_queue.array_deque.c#popLast", "start_line": 108, "end_line": 112, "signature": "popLast(ArrayDeque *deque)", "original_code": "int popLast(ArrayDeque *deque) {\n    int num = peekLast(deque);\n    deque->queSize--;\n    return num;\n}", "doc_comment": "/* \u961f\u5c3e\u51fa\u961f */"}, "code_tokens": ["popLast", "int", "(", ")", "{", "}", "ArrayDeque", "deque", ";", ";", "return", "num", ";", "*", "int", "num", "=", "deque", "->", "peekLast", "queSize", "--", "(", "deque", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 41, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 17}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_stack_and_queue/array_deque.c#115-122", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_stack_and_queue/array_deque.c", "language": "Java"}, "method": {"name": "printArrayDeque", "qualified_name": "codes.c.chapter_stack_and_queue.array_deque.c#printArrayDeque", "start_line": 115, "end_line": 122, "signature": "printArrayDeque(ArrayDeque *deque)", "original_code": "void printArrayDeque(ArrayDeque *deque) {\n    int arr[deque->queSize];\n    // \u62f7\u8d1d\n    for (int i = 0, j = deque->front; i < deque->queSize; i++, j++) {\n        arr[i] = deque->nums[j % deque->queCapacity];\n    }\n    printArray(arr, deque->queSize);\n}", "doc_comment": "/* \u6253\u5370\u961f\u5217 */"}, "code_tokens": ["void", "printArrayDeque", "(", ")", "{", "// \u62f7\u8d1d", "}", "ArrayDeque", "deque", ";", "for", "(", ";", ",", ")", ";", "*", "int", "arr", ",", ";", "i", "<", "i", "++", "j", "++", "{", "}", "printArray", "[", "]", "int", "i", "=", "0", "j", "=", "deque", "->", "queSize", ";", "(", "arr", ",", ")", "deque", "->", "queSize", "deque", "->", "front", "=", "deque", "->", "queSize", "arr", "[", "i", "]", "deque", "->", "nums", "[", "]", "j", "%", "deque", "->", "queCapacity"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 103, "ast_depth": 12, "n_identifiers": 10, "vocab_size": 30}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_stack_and_queue/array_deque.c#125-169", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_stack_and_queue/array_deque.c", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.c.chapter_stack_and_queue.array_deque.c#main", "start_line": 125, "end_line": 169, "signature": "main()", "original_code": "int main() {\n    /* \u521d\u59cb\u5316\u961f\u5217 */\n    int capacity = 10;\n    ArrayDeque *deque = newArrayDeque(capacity);\n    pushLast(deque, 3);\n    pushLast(deque, 2);\n    pushLast(deque, 5);\n    printf(\"\u53cc\u5411\u961f\u5217 deque = \");\n    printArrayDeque(deque);\n\n    /* \u8bbf\u95ee\u5143\u7d20 */\n    int peekFirstNum = peekFirst(deque);\n    printf(\"\u961f\u9996\u5143\u7d20 peekFirst = %d\\r\\n\", peekFirstNum);\n    int peekLastNum = peekLast(deque);\n    printf(\"\u961f\u5c3e\u5143\u7d20 peekLast = %d\\r\\n\", peekLastNum);\n\n    /* \u5143\u7d20\u5165\u961f */\n    pushLast(deque, 4);\n    printf(\"\u5143\u7d20 4 \u961f\u5c3e\u5165\u961f\u540e deque = \");\n    printArrayDeque(deque);\n    pushFirst(deque, 1);\n    printf(\"\u5143\u7d20 1 \u961f\u9996\u5165\u961f\u540e deque = \");\n    printArrayDeque(deque);\n\n    /* \u5143\u7d20\u51fa\u961f */\n    int popLastNum = popLast(deque);\n    printf(\"\u961f\u5c3e\u51fa\u961f\u5143\u7d20 = %d \uff0c\u961f\u5c3e\u51fa\u961f\u540e deque= \", popLastNum);\n    printArrayDeque(deque);\n    int popFirstNum = popFirst(deque);\n    printf(\"\u961f\u9996\u51fa\u961f\u5143\u7d20 = %d \uff0c\u961f\u9996\u51fa\u961f\u540e deque= \", popFirstNum);\n    printArrayDeque(deque);\n\n    /* \u83b7\u53d6\u961f\u5217\u7684\u957f\u5ea6 */\n    int dequeSize = size(deque);\n    printf(\"\u53cc\u5411\u961f\u5217\u957f\u5ea6 size = %d\\r\\n\", dequeSize);\n\n    /* \u5224\u65ad\u961f\u5217\u662f\u5426\u4e3a\u7a7a */\n    bool isEmpty = empty(deque);\n    printf(\"\u961f\u5217\u662f\u5426\u4e3a\u7a7a = %s\\r\\n\", isEmpty ? \"true\" : \"false\");\n\n    // \u91ca\u653e\u5185\u5b58\n    delArrayDeque(deque);\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "/* \u521d\u59cb\u5316\u961f\u5217 */", "/* \u8bbf\u95ee\u5143\u7d20 */", "/* \u5143\u7d20\u5165\u961f */", "/* \u5143\u7d20\u51fa\u961f */", "/* \u83b7\u53d6\u961f\u5217\u7684\u957f\u5ea6 */", "/* \u5224\u65ad\u961f\u5217\u662f\u5426\u4e3a\u7a7a */", "// \u91ca\u653e\u5185\u5b58", "}", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "bool", ";", ";", ";", "return", "0", ";", "int", "capacity", "=", "10", "ArrayDeque", "*", "pushLast", "pushLast", "pushLast", "printf", "printArrayDeque", "int", "peekFirstNum", "=", "printf", "int", "peekLastNum", "=", "printf", "pushLast", "printf", "printArrayDeque", "pushFirst", "printf", "printArrayDeque", "int", "popLastNum", "=", "printf", "printArrayDeque", "int", "popFirstNum", "=", "printf", "printArrayDeque", "int", "dequeSize", "=", "printf", "isEmpty", "=", "printf", "delArrayDeque", "deque", "=", "(", "deque", ",", "3", ")", "(", "deque", ",", "2", ")", "(", "deque", ",", "5", ")", "(", ")", "(", "deque", ")", "peekFirst", "(", ",", "peekFirstNum", ")", "peekLast", "(", ",", "peekLastNum", ")", "(", "deque", ",", "4", ")", "(", ")", "(", "deque", ")", "(", "deque", ",", "1", ")", "(", ")", "(", "deque", ")", "popLast", "(", ",", "popLastNum", ")", "(", "deque", ")", "popFirst", "(", ",", "popFirstNum", ")", "(", "deque", ")", "size", "(", ",", "dequeSize", ")", "empty", "(", ",", ")", "(", "deque", ")", "newArrayDeque", "\"", "\u53cc\u5411\u961f\u5217 deque = ", "\"", "(", "deque", ")", "\"", "\u961f\u9996\u5143\u7d20 peekFirst = %d", "\\r", "\\n", "\"", "(", "deque", ")", "\"", "\u961f\u5c3e\u5143\u7d20 peekLast = %d", "\\r", "\\n", "\"", "\"", "\u5143\u7d20 4 \u961f\u5c3e\u5165\u961f\u540e deque = ", "\"", "\"", "\u5143\u7d20 1 \u961f\u9996\u5165\u961f\u540e deque = ", "\"", "(", "deque", ")", "\"", "\u961f\u5c3e\u51fa\u961f\u5143\u7d20 = %d \uff0c\u961f\u5c3e\u51fa\u961f\u540e deque= ", "\"", "(", "deque", ")", "\"", "\u961f\u9996\u51fa\u961f\u5143\u7d20 = %d \uff0c\u961f\u9996\u51fa\u961f\u540e deque= ", "\"", "(", "deque", ")", "\"", "\u53cc\u5411\u961f\u5217\u957f\u5ea6 size = %d", "\\r", "\\n", "\"", "(", "deque", ")", "\"", "\u961f\u5217\u662f\u5426\u4e3a\u7a7a = %s", "\\r", "\\n", "\"", "isEmpty", "?", ":", "(", "capacity", ")", "\"", "true", "\"", "\"", "false", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 349, "ast_depth": 9, "n_identifiers": 22, "vocab_size": 63}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_stack_and_queue/array_queue.c#28-31", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_stack_and_queue/array_queue.c", "language": "Java"}, "method": {"name": "delArrayQueue", "qualified_name": "codes.c.chapter_stack_and_queue.array_queue.c#delArrayQueue", "start_line": 28, "end_line": 31, "signature": "delArrayQueue(ArrayQueue *queue)", "original_code": "void delArrayQueue(ArrayQueue *queue) {\n    free(queue->nums);\n    free(queue);\n}", "doc_comment": "/* \u6790\u6784\u51fd\u6570 */"}, "code_tokens": ["void", "delArrayQueue", "(", ")", "{", "}", "ArrayQueue", "queue", ";", ";", "*", "free", "free", "(", ")", "(", "queue", ")", "queue", "->", "nums"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 34, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 13}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_stack_and_queue/array_queue.c#34-36", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_stack_and_queue/array_queue.c", "language": "Java"}, "method": {"name": "capacity", "qualified_name": "codes.c.chapter_stack_and_queue.array_queue.c#capacity", "start_line": 34, "end_line": 36, "signature": "capacity(ArrayQueue *queue)", "original_code": "int capacity(ArrayQueue *queue) {\n    return queue->queCapacity;\n}", "doc_comment": "/* \u83b7\u53d6\u961f\u5217\u7684\u5bb9\u91cf */"}, "code_tokens": ["capacity", "int", "(", ")", "{", "}", "ArrayQueue", "queue", "return", ";", "*", "queue", "->", "queCapacity"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 23, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 13}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_stack_and_queue/array_queue.c#39-41", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_stack_and_queue/array_queue.c", "language": "Java"}, "method": {"name": "size", "qualified_name": "codes.c.chapter_stack_and_queue.array_queue.c#size", "start_line": 39, "end_line": 41, "signature": "size(ArrayQueue *queue)", "original_code": "int size(ArrayQueue *queue) {\n    return queue->queSize;\n}", "doc_comment": "/* \u83b7\u53d6\u961f\u5217\u7684\u957f\u5ea6 */"}, "code_tokens": ["size", "int", "(", ")", "{", "}", "ArrayQueue", "queue", "return", ";", "*", "queue", "->", "queSize"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 23, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 13}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_stack_and_queue/array_queue.c#44-46", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_stack_and_queue/array_queue.c", "language": "Java"}, "method": {"name": "empty", "qualified_name": "codes.c.chapter_stack_and_queue.array_queue.c#empty", "start_line": 44, "end_line": 46, "signature": "empty(ArrayQueue *queue)", "original_code": "bool empty(ArrayQueue *queue) {\n    return queue->queSize == 0;\n}", "doc_comment": "/* \u5224\u65ad\u961f\u5217\u662f\u5426\u4e3a\u7a7a */"}, "code_tokens": ["bool", "empty", "(", ")", "{", "}", "ArrayQueue", "queue", "return", ";", "*", "queue", "->", "queSize", "==", "0"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 25, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 15}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_stack_and_queue/array_queue.c#49-52", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_stack_and_queue/array_queue.c", "language": "Java"}, "method": {"name": "peek", "qualified_name": "codes.c.chapter_stack_and_queue.array_queue.c#peek", "start_line": 49, "end_line": 52, "signature": "peek(ArrayQueue *queue)", "original_code": "int peek(ArrayQueue *queue) {\n    assert(size(queue) != 0);\n    return queue->nums[queue->front];\n}", "doc_comment": "/* \u8bbf\u95ee\u961f\u9996\u5143\u7d20 */"}, "code_tokens": ["peek", "int", "(", ")", "{", "}", "ArrayQueue", "queue", "assert", ";", "return", ";", "*", "(", ")", "queue", "->", "!=", "0", "nums", "[", "]", "size", "queue", "->", "front", "(", "queue", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 45, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 20}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_stack_and_queue/array_queue.c#55-66", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_stack_and_queue/array_queue.c", "language": "Java"}, "method": {"name": "push", "qualified_name": "codes.c.chapter_stack_and_queue.array_queue.c#push", "start_line": 55, "end_line": 66, "signature": "push(ArrayQueue *queue, int num)", "original_code": "void push(ArrayQueue *queue, int num) {\n    if (size(queue) == capacity(queue)) {\n        printf(\"\u961f\u5217\u5df2\u6ee1\\r\\n\");\n        return;\n    }\n    // \u8ba1\u7b97\u961f\u5c3e\u6307\u9488\uff0c\u6307\u5411\u961f\u5c3e\u7d22\u5f15 + 1\n    // \u901a\u8fc7\u53d6\u4f59\u64cd\u4f5c\uff0c\u5b9e\u73b0 rear \u8d8a\u8fc7\u6570\u7ec4\u5c3e\u90e8\u540e\u56de\u5230\u5934\u90e8\n    int rear = (queue->front + queue->queSize) % queue->queCapacity;\n    // \u5c06 num \u6dfb\u52a0\u81f3\u961f\u5c3e\n    queue->nums[rear] = num;\n    queue->queSize++;\n}", "doc_comment": "/* \u5165\u961f */"}, "code_tokens": ["void", "push", "(", ",", ")", "{", "// \u8ba1\u7b97\u961f\u5c3e\u6307\u9488\uff0c\u6307\u5411\u961f\u5c3e\u7d22\u5f15 + 1", "// \u901a\u8fc7\u53d6\u4f59\u64cd\u4f5c\uff0c\u5b9e\u73b0 rear \u8d8a\u8fc7\u6570\u7ec4\u5c3e\u90e8\u540e\u56de\u5230\u5934\u90e8", "// \u5c06 num \u6dfb\u52a0\u81f3\u961f\u5c3e", "}", "ArrayQueue", "queue", "num", "if", ";", ";", ";", "*", "int", "(", ")", "{", "}", "int", "rear", "=", "queue", "->", "queue", "->", "==", ";", "return", ";", "%", "=", "num", "queSize", "++", "size", "capacity", "printf", "(", ")", "queue", "->", "queCapacity", "nums", "[", "rear", "]", "(", "queue", ")", "(", "queue", ")", "(", ")", "queue", "->", "\"", "\u961f\u5217\u5df2\u6ee1", "\\r", "\\n", "\"", "front", "+", "queue", "->", "queSize"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 108, "ast_depth": 11, "n_identifiers": 11, "vocab_size": 38}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_stack_and_queue/array_queue.c#69-74", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_stack_and_queue/array_queue.c", "language": "Java"}, "method": {"name": "pop", "qualified_name": "codes.c.chapter_stack_and_queue.array_queue.c#pop", "start_line": 69, "end_line": 74, "signature": "pop(ArrayQueue *queue)", "original_code": "void pop(ArrayQueue *queue) {\n    int num = peek(queue);\n    // \u961f\u9996\u6307\u9488\u5411\u540e\u79fb\u52a8\u4e00\u4f4d\uff0c\u82e5\u8d8a\u8fc7\u5c3e\u90e8\u5219\u8fd4\u56de\u5230\u6570\u7ec4\u5934\u90e8\n    queue->front = (queue->front + 1) % queue->queCapacity;\n    queue->queSize--;\n}", "doc_comment": "/* \u51fa\u961f */"}, "code_tokens": ["void", "pop", "(", ")", "{", "// \u961f\u9996\u6307\u9488\u5411\u540e\u79fb\u52a8\u4e00\u4f4d\uff0c\u82e5\u8d8a\u8fc7\u5c3e\u90e8\u5219\u8fd4\u56de\u5230\u6570\u7ec4\u5934\u90e8", "}", "ArrayQueue", "queue", ";", ";", ";", "*", "int", "num", "=", "queue", "->", "queue", "->", "peek", "front", "=", "queSize", "--", "(", "queue", ")", "%", "(", ")", "queue", "->", "queCapacity", "queue", "->", "front", "+", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 61, "ast_depth": 11, "n_identifiers": 7, "vocab_size": 23}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_stack_and_queue/array_queue.c#77-84", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_stack_and_queue/array_queue.c", "language": "Java"}, "method": {"name": "printArrayQueue", "qualified_name": "codes.c.chapter_stack_and_queue.array_queue.c#printArrayQueue", "start_line": 77, "end_line": 84, "signature": "printArrayQueue(ArrayQueue *queue)", "original_code": "void printArrayQueue(ArrayQueue *queue) {\n    int arr[queue->queSize];\n    // \u62f7\u8d1d\n    for (int i = 0, j = queue->front; i < queue->queSize; i++, j++) {\n        arr[i] = queue->nums[j % queue->queCapacity];\n    }\n    printArray(arr, queue->queSize);\n}", "doc_comment": "/* \u6253\u5370\u961f\u5217 */"}, "code_tokens": ["void", "printArrayQueue", "(", ")", "{", "// \u62f7\u8d1d", "}", "ArrayQueue", "queue", ";", "for", "(", ";", ",", ")", ";", "*", "int", "arr", ",", ";", "i", "<", "i", "++", "j", "++", "{", "}", "printArray", "[", "]", "int", "i", "=", "0", "j", "=", "queue", "->", "queSize", ";", "(", "arr", ",", ")", "queue", "->", "queSize", "queue", "->", "front", "=", "queue", "->", "queSize", "arr", "[", "i", "]", "queue", "->", "nums", "[", "]", "j", "%", "queue", "->", "queCapacity"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 103, "ast_depth": 12, "n_identifiers": 10, "vocab_size": 30}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_stack_and_queue/array_queue.c#87-130", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_stack_and_queue/array_queue.c", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.c.chapter_stack_and_queue.array_queue.c#main", "start_line": 87, "end_line": 130, "signature": "main()", "original_code": "int main() {\n    /* \u521d\u59cb\u5316\u961f\u5217 */\n    int capacity = 10;\n    ArrayQueue *queue = newArrayQueue(capacity);\n\n    /* \u5143\u7d20\u5165\u961f */\n    push(queue, 1);\n    push(queue, 3);\n    push(queue, 2);\n    push(queue, 5);\n    push(queue, 4);\n    printf(\"\u961f\u5217 queue = \");\n    printArrayQueue(queue);\n\n    /* \u8bbf\u95ee\u961f\u9996\u5143\u7d20 */\n    int peekNum = peek(queue);\n    printf(\"\u961f\u9996\u5143\u7d20 peek = %d\\r\\n\", peekNum);\n\n    /* \u5143\u7d20\u51fa\u961f */\n    pop(queue);\n    printf(\"\u51fa\u961f\u5143\u7d20 pop = %d \uff0c\u51fa\u961f\u540e queue = \", peekNum);\n    printArrayQueue(queue);\n\n    /* \u83b7\u53d6\u961f\u5217\u7684\u957f\u5ea6 */\n    int queueSize = size(queue);\n    printf(\"\u961f\u5217\u957f\u5ea6 size = %d\\r\\n\", queueSize);\n\n    /* \u5224\u65ad\u961f\u5217\u662f\u5426\u4e3a\u7a7a */\n    bool isEmpty = empty(queue);\n    printf(\"\u961f\u5217\u662f\u5426\u4e3a\u7a7a = %s\\r\\n\", isEmpty ? \"true\" : \"false\");\n\n    /* \u6d4b\u8bd5\u73af\u5f62\u6570\u7ec4 */\n    for (int i = 0; i < 10; i++) {\n        push(queue, i);\n        pop(queue);\n        printf(\"\u7b2c %d \u8f6e\u5165\u961f + \u51fa\u961f\u540e queue = \", i);\n        printArrayQueue(queue);\n    }\n\n    // \u91ca\u653e\u5185\u5b58\n    delArrayQueue(queue);\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "/* \u521d\u59cb\u5316\u961f\u5217 */", "/* \u5143\u7d20\u5165\u961f */", "/* \u8bbf\u95ee\u961f\u9996\u5143\u7d20 */", "/* \u5143\u7d20\u51fa\u961f */", "/* \u83b7\u53d6\u961f\u5217\u7684\u957f\u5ea6 */", "/* \u5224\u65ad\u961f\u5217\u662f\u5426\u4e3a\u7a7a */", "/* \u6d4b\u8bd5\u73af\u5f62\u6570\u7ec4 */", "// \u91ca\u653e\u5185\u5b58", "}", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "bool", ";", ";", "for", "(", ";", ")", ";", "return", "0", ";", "int", "capacity", "=", "10", "ArrayQueue", "*", "push", "push", "push", "push", "push", "printf", "printArrayQueue", "int", "peekNum", "=", "printf", "pop", "printf", "printArrayQueue", "int", "queueSize", "=", "printf", "isEmpty", "=", "printf", ";", "i", "<", "10", "i", "++", "{", "}", "delArrayQueue", "queue", "=", "(", "queue", ",", "1", ")", "(", "queue", ",", "3", ")", "(", "queue", ",", "2", ")", "(", "queue", ",", "5", ")", "(", "queue", ",", "4", ")", "(", ")", "(", "queue", ")", "peek", "(", ",", "peekNum", ")", "(", "queue", ")", "(", ",", "peekNum", ")", "(", "queue", ")", "size", "(", ",", "queueSize", ")", "empty", "(", ",", ")", "int", "i", "=", "0", ";", ";", ";", ";", "(", "queue", ")", "newArrayQueue", "\"", "\u961f\u5217 queue = ", "\"", "(", "queue", ")", "\"", "\u961f\u9996\u5143\u7d20 peek = %d", "\\r", "\\n", "\"", "\"", "\u51fa\u961f\u5143\u7d20 pop = %d \uff0c\u51fa\u961f\u540e queue = ", "\"", "(", "queue", ")", "\"", "\u961f\u5217\u957f\u5ea6 size = %d", "\\r", "\\n", "\"", "(", "queue", ")", "\"", "\u961f\u5217\u662f\u5426\u4e3a\u7a7a = %s", "\\r", "\\n", "\"", "isEmpty", "?", ":", "push", "pop", "printf", "printArrayQueue", "(", "capacity", ")", "\"", "true", "\"", "\"", "false", "\"", "(", "queue", ",", "i", ")", "(", "queue", ")", "(", ",", "i", ")", "(", "queue", ")", "\"", "\u7b2c %d \u8f6e\u5165\u961f + \u51fa\u961f\u540e queue = ", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 307, "ast_depth": 10, "n_identifiers": 17, "vocab_size": 59}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_stack_and_queue/array_stack.c#27-30", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_stack_and_queue/array_stack.c", "language": "Java"}, "method": {"name": "delArrayStack", "qualified_name": "codes.c.chapter_stack_and_queue.array_stack.c#delArrayStack", "start_line": 27, "end_line": 30, "signature": "delArrayStack(ArrayStack *stack)", "original_code": "void delArrayStack(ArrayStack *stack) {\n    free(stack->data);\n    free(stack);\n}", "doc_comment": "/* \u6790\u6784\u51fd\u6570 */"}, "code_tokens": ["void", "delArrayStack", "(", ")", "{", "}", "ArrayStack", "stack", ";", ";", "*", "free", "free", "(", ")", "(", "stack", ")", "stack", "->", "data"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 34, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 13}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_stack_and_queue/array_stack.c#33-35", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_stack_and_queue/array_stack.c", "language": "Java"}, "method": {"name": "size", "qualified_name": "codes.c.chapter_stack_and_queue.array_stack.c#size", "start_line": 33, "end_line": 35, "signature": "size(ArrayStack *stack)", "original_code": "int size(ArrayStack *stack) {\n    return stack->size;\n}", "doc_comment": "/* \u83b7\u53d6\u6808\u7684\u957f\u5ea6 */"}, "code_tokens": ["size", "int", "(", ")", "{", "}", "ArrayStack", "stack", "return", ";", "*", "stack", "->", "size"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 23, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 12}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_stack_and_queue/array_stack.c#38-40", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_stack_and_queue/array_stack.c", "language": "Java"}, "method": {"name": "isEmpty", "qualified_name": "codes.c.chapter_stack_and_queue.array_stack.c#isEmpty", "start_line": 38, "end_line": 40, "signature": "isEmpty(ArrayStack *stack)", "original_code": "bool isEmpty(ArrayStack *stack) {\n    return stack->size == 0;\n}", "doc_comment": "/* \u5224\u65ad\u6808\u662f\u5426\u4e3a\u7a7a */"}, "code_tokens": ["bool", "isEmpty", "(", ")", "{", "}", "ArrayStack", "stack", "return", ";", "*", "stack", "->", "size", "==", "0"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 25, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 15}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_stack_and_queue/array_stack.c#43-50", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_stack_and_queue/array_stack.c", "language": "Java"}, "method": {"name": "push", "qualified_name": "codes.c.chapter_stack_and_queue.array_stack.c#push", "start_line": 43, "end_line": 50, "signature": "push(ArrayStack *stack, int num)", "original_code": "void push(ArrayStack *stack, int num) {\n    if (stack->size == MAX_SIZE) {\n        printf(\"stack is full.\\n\");\n        return;\n    }\n    stack->data[stack->size] = num;\n    stack->size++;\n}", "doc_comment": "/* \u5165\u6808 */"}, "code_tokens": ["void", "push", "(", ",", ")", "{", "}", "ArrayStack", "stack", "num", "if", ";", ";", "*", "int", "(", ")", "{", "}", "stack", "->", "stack", "->", "stack", "->", ";", "return", ";", "=", "num", "size", "++", "size", "==", "MAX_SIZE", "printf", "data", "[", "]", "(", ")", "stack", "->", "size", "\"", "stack is full.", "\\n", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 74, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 28}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_stack_and_queue/array_stack.c#53-59", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_stack_and_queue/array_stack.c", "language": "Java"}, "method": {"name": "peek", "qualified_name": "codes.c.chapter_stack_and_queue.array_stack.c#peek", "start_line": 53, "end_line": 59, "signature": "peek(ArrayStack *stack)", "original_code": "int peek(ArrayStack *stack) {\n    if (stack->size == 0) {\n        printf(\"stack is empty.\\n\");\n        return INT_MAX;\n    }\n    return stack->data[stack->size - 1];\n}", "doc_comment": "/* \u8bbf\u95ee\u6808\u9876\u5143\u7d20 */"}, "code_tokens": ["peek", "int", "(", ")", "{", "}", "ArrayStack", "stack", "if", "return", ";", "*", "(", ")", "{", "}", "stack", "->", "stack", "->", ";", "return", "INT_MAX", ";", "data", "[", "]", "size", "==", "0", "printf", "stack", "->", "(", ")", "size", "-", "1", "\"", "stack is empty.", "\\n", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 64, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 26}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_stack_and_queue/array_stack.c#62-70", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_stack_and_queue/array_stack.c", "language": "Java"}, "method": {"name": "pop", "qualified_name": "codes.c.chapter_stack_and_queue.array_stack.c#pop", "start_line": 62, "end_line": 70, "signature": "pop(ArrayStack *stack)", "original_code": "int pop(ArrayStack *stack) {\n    if (stack->size == 0) {\n        printf(\"stack is empty.\\n\");\n        return INT_MAX;\n    }\n    int val = peek(stack);\n    stack->size--;\n    return val;\n}", "doc_comment": "/* \u51fa\u6808 */"}, "code_tokens": ["pop", "int", "(", ")", "{", "}", "ArrayStack", "stack", "if", ";", ";", "return", "val", ";", "*", "(", ")", "{", "}", "int", "val", "=", "stack", "->", "stack", "->", ";", "return", "INT_MAX", ";", "peek", "size", "--", "size", "==", "0", "printf", "(", "stack", ")", "(", ")", "\"", "stack is empty.", "\\n", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 72, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 25}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_stack_and_queue/array_stack.c#73-107", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_stack_and_queue/array_stack.c", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.c.chapter_stack_and_queue.array_stack.c#main", "start_line": 73, "end_line": 107, "signature": "main()", "original_code": "int main() {\n    /* \u521d\u59cb\u5316\u6808 */\n    ArrayStack *stack = newArrayStack();\n\n    /* \u5143\u7d20\u5165\u6808 */\n    push(stack, 1);\n    push(stack, 3);\n    push(stack, 2);\n    push(stack, 5);\n    push(stack, 4);\n    printf(\"\u6808 stack = \");\n    printArray(stack->data, stack->size);\n\n    /* \u8bbf\u95ee\u6808\u9876\u5143\u7d20 */\n    int val = peek(stack);\n    printf(\"\u6808\u9876\u5143\u7d20 top = %d\\n\", val);\n\n    /* \u5143\u7d20\u51fa\u6808 */\n    val = pop(stack);\n    printf(\"\u51fa\u6808\u5143\u7d20 pop = %d \uff0c\u51fa\u6808\u540e stack = \", val);\n    printArray(stack->data, stack->size);\n\n    /* \u83b7\u53d6\u6808\u7684\u957f\u5ea6 */\n    int size = stack->size;\n    printf(\"\u6808\u7684\u957f\u5ea6 size =  %d\\n\", size);\n\n    /* \u5224\u65ad\u662f\u5426\u4e3a\u7a7a */\n    bool empty = isEmpty(stack);\n    printf(\"\u6808\u662f\u5426\u4e3a\u7a7a = %stack\\n\", empty ? \"true\" : \"false\");\n\n    // \u91ca\u653e\u5185\u5b58\n    delArrayStack(stack);\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "/* \u521d\u59cb\u5316\u6808 */", "/* \u5143\u7d20\u5165\u6808 */", "/* \u8bbf\u95ee\u6808\u9876\u5143\u7d20 */", "/* \u5143\u7d20\u51fa\u6808 */", "/* \u83b7\u53d6\u6808\u7684\u957f\u5ea6 */", "/* \u5224\u65ad\u662f\u5426\u4e3a\u7a7a */", "// \u91ca\u653e\u5185\u5b58", "}", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "bool", ";", ";", ";", "return", "0", ";", "ArrayStack", "*", "push", "push", "push", "push", "push", "printf", "printArray", "int", "val", "=", "printf", "val", "=", "printf", "printArray", "int", "size", "=", "printf", "empty", "=", "printf", "delArrayStack", "stack", "=", "(", "stack", ",", "1", ")", "(", "stack", ",", "3", ")", "(", "stack", ",", "2", ")", "(", "stack", ",", "5", ")", "(", "stack", ",", "4", ")", "(", ")", "(", ",", ")", "peek", "(", ",", "val", ")", "pop", "(", ",", "val", ")", "(", ",", ")", "stack", "->", "size", "(", ",", "size", ")", "isEmpty", "(", ",", ")", "(", "stack", ")", "newArrayStack", "\"", "\u6808 stack = ", "\"", "stack", "->", "data", "stack", "->", "size", "(", "stack", ")", "\"", "\u6808\u9876\u5143\u7d20 top = %d", "\\n", "\"", "(", "stack", ")", "\"", "\u51fa\u6808\u5143\u7d20 pop = %d \uff0c\u51fa\u6808\u540e stack = ", "\"", "stack", "->", "data", "stack", "->", "size", "\"", "\u6808\u7684\u957f\u5ea6 size =  %d", "\\n", "\"", "(", "stack", ")", "\"", "\u6808\u662f\u5426\u4e3a\u7a7a = %stack", "\\n", "\"", "empty", "?", ":", "(", ")", "\"", "true", "\"", "\"", "false", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 249, "ast_depth": 9, "n_identifiers": 15, "vocab_size": 51}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_tree/array_binary_tree.c#25-28", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_tree/array_binary_tree.c", "language": "Java"}, "method": {"name": "delArrayBinaryTree", "qualified_name": "codes.c.chapter_tree.array_binary_tree.c#delArrayBinaryTree", "start_line": 25, "end_line": 28, "signature": "delArrayBinaryTree(ArrayBinaryTree *abt)", "original_code": "void delArrayBinaryTree(ArrayBinaryTree *abt) {\n    free(abt->tree);\n    free(abt);\n}", "doc_comment": "/* \u6790\u6784\u51fd\u6570 */"}, "code_tokens": ["void", "delArrayBinaryTree", "(", ")", "{", "}", "ArrayBinaryTree", "abt", ";", ";", "*", "free", "free", "(", ")", "(", "abt", ")", "abt", "->", "tree"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 34, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 13}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_tree/array_binary_tree.c#31-33", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_tree/array_binary_tree.c", "language": "Java"}, "method": {"name": "size", "qualified_name": "codes.c.chapter_tree.array_binary_tree.c#size", "start_line": 31, "end_line": 33, "signature": "size(ArrayBinaryTree *abt)", "original_code": "int size(ArrayBinaryTree *abt) {\n    return abt->size;\n}", "doc_comment": "/* \u8282\u70b9\u6570\u91cf */"}, "code_tokens": ["size", "int", "(", ")", "{", "}", "ArrayBinaryTree", "abt", "return", ";", "*", "abt", "->", "size"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 23, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 12}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_tree/array_binary_tree.c#36-41", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_tree/array_binary_tree.c", "language": "Java"}, "method": {"name": "val", "qualified_name": "codes.c.chapter_tree.array_binary_tree.c#val", "start_line": 36, "end_line": 41, "signature": "val(ArrayBinaryTree *abt, int i)", "original_code": "int val(ArrayBinaryTree *abt, int i) {\n    // \u82e5\u7d22\u5f15\u8d8a\u754c\uff0c\u5219\u8fd4\u56de INT_MAX \uff0c\u4ee3\u8868\u7a7a\u4f4d\n    if (i < 0 || i >= size(abt))\n        return INT_MAX;\n    return abt->tree[i];\n}", "doc_comment": "/* \u83b7\u53d6\u7d22\u5f15\u4e3a i \u8282\u70b9\u7684\u503c */"}, "code_tokens": ["val", "int", "(", ",", ")", "{", "// \u82e5\u7d22\u5f15\u8d8a\u754c\uff0c\u5219\u8fd4\u56de INT_MAX \uff0c\u4ee3\u8868\u7a7a\u4f4d", "}", "ArrayBinaryTree", "abt", "i", "if", "return", ";", "*", "int", "(", ")", "return", "INT_MAX", ";", "abt", "->", "||", "tree", "[", "i", "]", "i", "<", "0", "i", ">=", "size", "(", "abt", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 57, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 25}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_tree/array_binary_tree.c#44-46", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_tree/array_binary_tree.c", "language": "Java"}, "method": {"name": "left", "qualified_name": "codes.c.chapter_tree.array_binary_tree.c#left", "start_line": 44, "end_line": 46, "signature": "left(int i)", "original_code": "int left(int i) {\n    return 2 * i + 1;\n}", "doc_comment": "/* \u83b7\u53d6\u7d22\u5f15\u4e3a i \u8282\u70b9\u7684\u5de6\u5b50\u8282\u70b9\u7684\u7d22\u5f15 */"}, "code_tokens": ["left", "int", "(", ")", "{", "}", "i", "return", ";", "int", "+", "1", "2", "*", "i"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 25, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 13}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_tree/array_binary_tree.c#49-51", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_tree/array_binary_tree.c", "language": "Java"}, "method": {"name": "right", "qualified_name": "codes.c.chapter_tree.array_binary_tree.c#right", "start_line": 49, "end_line": 51, "signature": "right(int i)", "original_code": "int right(int i) {\n    return 2 * i + 2;\n}", "doc_comment": "/* \u83b7\u53d6\u7d22\u5f15\u4e3a i \u8282\u70b9\u7684\u53f3\u5b50\u8282\u70b9\u7684\u7d22\u5f15 */"}, "code_tokens": ["right", "int", "(", ")", "{", "}", "i", "return", ";", "int", "+", "2", "2", "*", "i"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 25, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 12}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_tree/array_binary_tree.c#54-56", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_tree/array_binary_tree.c", "language": "Java"}, "method": {"name": "parent", "qualified_name": "codes.c.chapter_tree.array_binary_tree.c#parent", "start_line": 54, "end_line": 56, "signature": "parent(int i)", "original_code": "int parent(int i) {\n    return (i - 1) / 2;\n}", "doc_comment": "/* \u83b7\u53d6\u7d22\u5f15\u4e3a i \u8282\u70b9\u7684\u7236\u8282\u70b9\u7684\u7d22\u5f15 */"}, "code_tokens": ["parent", "int", "(", ")", "{", "}", "i", "return", ";", "int", "/", "2", "(", ")", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 28, "ast_depth": 8, "n_identifiers": 2, "vocab_size": 13}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_tree/array_binary_tree.c#59-69", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_tree/array_binary_tree.c", "language": "Java"}, "method": {"name": "levelOrder", "qualified_name": "codes.c.chapter_tree.array_binary_tree.c#levelOrder", "start_line": 59, "end_line": 69, "signature": "levelOrder(ArrayBinaryTree *abt, int *returnSize)", "original_code": "int *levelOrder(ArrayBinaryTree *abt, int *returnSize) {\n    int *res = (int *)malloc(sizeof(int) * size(abt));\n    int index = 0;\n    // \u76f4\u63a5\u904d\u5386\u6570\u7ec4\n    for (int i = 0; i < size(abt); i++) {\n        if (val(abt, i) != INT_MAX)\n            res[index++] = val(abt, i);\n    }\n    *returnSize = index;\n    return res;\n}", "doc_comment": "/* \u5c42\u5e8f\u904d\u5386 */"}, "code_tokens": ["levelOrder", "int", "*", "(", ",", ")", "{", "// \u76f4\u63a5\u904d\u5386\u6570\u7ec4", "}", "ArrayBinaryTree", "abt", "returnSize", ";", ";", "for", "(", ";", ")", "*", ";", "return", "res", ";", "*", "int", "*", "int", "*", "res", "=", "int", "index", "=", "0", ";", "i", "<", "i", "++", "{", "}", "returnSize", "=", "index", "(", ")", "int", "i", "=", "0", "size", "if", "int", "*", "malloc", "(", "abt", ")", "(", ")", ";", "(", ")", "!=", "INT_MAX", "=", "*", "val", "res", "[", "]", "val", "sizeof", "size", "(", "abt", ",", "i", ")", "index", "++", "(", "abt", ",", "i", ")", "(", ")", "(", "abt", ")", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 146, "ast_depth": 14, "n_identifiers": 11, "vocab_size": 31}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_tree/array_binary_tree.c#72-87", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_tree/array_binary_tree.c", "language": "Java"}, "method": {"name": "dfs", "qualified_name": "codes.c.chapter_tree.array_binary_tree.c#dfs", "start_line": 72, "end_line": 87, "signature": "dfs(ArrayBinaryTree *abt, int i, char *order, int *res, int *index)", "original_code": "void dfs(ArrayBinaryTree *abt, int i, char *order, int *res, int *index) {\n    // \u82e5\u4e3a\u7a7a\u4f4d\uff0c\u5219\u8fd4\u56de\n    if (val(abt, i) == INT_MAX)\n        return;\n    // \u524d\u5e8f\u904d\u5386\n    if (strcmp(order, \"pre\") == 0)\n        res[(*index)++] = val(abt, i);\n    dfs(abt, left(i), order, res, index);\n    // \u4e2d\u5e8f\u904d\u5386\n    if (strcmp(order, \"in\") == 0)\n        res[(*index)++] = val(abt, i);\n    dfs(abt, right(i), order, res, index);\n    // \u540e\u5e8f\u904d\u5386\n    if (strcmp(order, \"post\") == 0)\n        res[(*index)++] = val(abt, i);\n}", "doc_comment": "/* \u6df1\u5ea6\u4f18\u5148\u904d\u5386 */"}, "code_tokens": ["void", "dfs", "(", ",", ",", ",", ",", ")", "{", "// \u82e5\u4e3a\u7a7a\u4f4d\uff0c\u5219\u8fd4\u56de", "// \u524d\u5e8f\u904d\u5386", "// \u4e2d\u5e8f\u904d\u5386", "// \u540e\u5e8f\u904d\u5386", "}", "ArrayBinaryTree", "abt", "i", "order", "res", "index", "if", "if", ";", "if", ";", "if", "*", "int", "char", "*", "int", "*", "int", "*", "(", ")", "return", ";", "(", ")", ";", "dfs", "(", ")", ";", "dfs", "(", ")", ";", "==", "INT_MAX", "==", "0", "=", "(", "abt", ",", ",", "order", ",", "res", ",", "index", ")", "==", "0", "=", "(", "abt", ",", ",", "order", ",", "res", ",", "index", ")", "==", "0", "=", "val", "strcmp", "res", "[", "]", "val", "left", "strcmp", "res", "[", "]", "val", "right", "strcmp", "res", "[", "]", "val", "(", "abt", ",", "i", ")", "(", "order", ",", ")", "++", "(", "abt", ",", "i", ")", "(", "i", ")", "(", "order", ",", ")", "++", "(", "abt", ",", "i", ")", "(", "i", ")", "(", "order", ",", ")", "++", "(", "abt", ",", "i", ")", "\"", "pre", "\"", "(", "index", ")", "\"", "in", "\"", "(", "index", ")", "\"", "post", "\"", "(", "index", ")", "*", "*", "*"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 235, "ast_depth": 11, "n_identifiers": 11, "vocab_size": 38}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_tree/array_binary_tree.c#90-96", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_tree/array_binary_tree.c", "language": "Java"}, "method": {"name": "preOrder", "qualified_name": "codes.c.chapter_tree.array_binary_tree.c#preOrder", "start_line": 90, "end_line": 96, "signature": "preOrder(ArrayBinaryTree *abt, int *returnSize)", "original_code": "int *preOrder(ArrayBinaryTree *abt, int *returnSize) {\n    int *res = (int *)malloc(sizeof(int) * size(abt));\n    int index = 0;\n    dfs(abt, 0, \"pre\", res, &index);\n    *returnSize = index;\n    return res;\n}", "doc_comment": "/* \u524d\u5e8f\u904d\u5386 */"}, "code_tokens": ["preOrder", "int", "*", "(", ",", ")", "{", "}", "ArrayBinaryTree", "abt", "returnSize", ";", ";", ";", "*", ";", "return", "res", ";", "*", "int", "*", "int", "*", "res", "=", "int", "index", "=", "0", "dfs", "returnSize", "=", "index", "(", ")", "(", "abt", ",", "0", ",", ",", "res", ",", "index", ")", "int", "*", "malloc", "\"", "pre", "\"", "&", "(", ")", "*", "sizeof", "size", "(", ")", "(", "abt", ")", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 103, "ast_depth": 14, "n_identifiers": 9, "vocab_size": 24}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_tree/array_binary_tree.c#99-105", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_tree/array_binary_tree.c", "language": "Java"}, "method": {"name": "inOrder", "qualified_name": "codes.c.chapter_tree.array_binary_tree.c#inOrder", "start_line": 99, "end_line": 105, "signature": "inOrder(ArrayBinaryTree *abt, int *returnSize)", "original_code": "int *inOrder(ArrayBinaryTree *abt, int *returnSize) {\n    int *res = (int *)malloc(sizeof(int) * size(abt));\n    int index = 0;\n    dfs(abt, 0, \"in\", res, &index);\n    *returnSize = index;\n    return res;\n}", "doc_comment": "/* \u4e2d\u5e8f\u904d\u5386 */"}, "code_tokens": ["inOrder", "int", "*", "(", ",", ")", "{", "}", "ArrayBinaryTree", "abt", "returnSize", ";", ";", ";", "*", ";", "return", "res", ";", "*", "int", "*", "int", "*", "res", "=", "int", "index", "=", "0", "dfs", "returnSize", "=", "index", "(", ")", "(", "abt", ",", "0", ",", ",", "res", ",", "index", ")", "int", "*", "malloc", "\"", "in", "\"", "&", "(", ")", "*", "sizeof", "size", "(", ")", "(", "abt", ")", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 103, "ast_depth": 14, "n_identifiers": 9, "vocab_size": 24}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_tree/array_binary_tree.c#108-114", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_tree/array_binary_tree.c", "language": "Java"}, "method": {"name": "postOrder", "qualified_name": "codes.c.chapter_tree.array_binary_tree.c#postOrder", "start_line": 108, "end_line": 114, "signature": "postOrder(ArrayBinaryTree *abt, int *returnSize)", "original_code": "int *postOrder(ArrayBinaryTree *abt, int *returnSize) {\n    int *res = (int *)malloc(sizeof(int) * size(abt));\n    int index = 0;\n    dfs(abt, 0, \"post\", res, &index);\n    *returnSize = index;\n    return res;\n}", "doc_comment": "/* \u540e\u5e8f\u904d\u5386 */"}, "code_tokens": ["postOrder", "int", "*", "(", ",", ")", "{", "}", "ArrayBinaryTree", "abt", "returnSize", ";", ";", ";", "*", ";", "return", "res", ";", "*", "int", "*", "int", "*", "res", "=", "int", "index", "=", "0", "dfs", "returnSize", "=", "index", "(", ")", "(", "abt", ",", "0", ",", ",", "res", ",", "index", ")", "int", "*", "malloc", "\"", "post", "\"", "&", "(", ")", "*", "sizeof", "size", "(", ")", "(", "abt", ")", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 103, "ast_depth": 14, "n_identifiers": 9, "vocab_size": 24}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_tree/array_binary_tree.c#117-166", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_tree/array_binary_tree.c", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.c.chapter_tree.array_binary_tree.c#main", "start_line": 117, "end_line": 166, "signature": "main()", "original_code": "int main() {\n    // \u521d\u59cb\u5316\u4e8c\u53c9\u6811\n    // \u4f7f\u7528 INT_MAX \u4ee3\u8868\u7a7a\u4f4d NULL\n    int arr[] = {1, 2, 3, 4, INT_MAX, 6, 7, 8, 9, INT_MAX, INT_MAX, 12, INT_MAX, INT_MAX, 15};\n    int arrSize = sizeof(arr) / sizeof(arr[0]);\n    TreeNode *root = arrayToTree(arr, arrSize);\n    printf(\"\\n\u521d\u59cb\u5316\u4e8c\u53c9\u6811\\n\");\n    printf(\"\u4e8c\u53c9\u6811\u7684\u6570\u7ec4\u8868\u793a\uff1a\\n\");\n    printArray(arr, arrSize);\n    printf(\"\u4e8c\u53c9\u6811\u7684\u94fe\u8868\u8868\u793a\uff1a\\n\");\n    printTree(root);\n\n    ArrayBinaryTree *abt = newArrayBinaryTree(arr, arrSize);\n\n    // \u8bbf\u95ee\u8282\u70b9\n    int i = 1;\n    int l = left(i), r = right(i), p = parent(i);\n    printf(\"\\n\u5f53\u524d\u8282\u70b9\u7684\u7d22\u5f15\u4e3a %d\uff0c\u503c\u4e3a %d\\n\", i, val(abt, i));\n    printf(\"\u5176\u5de6\u5b50\u8282\u70b9\u7684\u7d22\u5f15\u4e3a %d\uff0c\u503c\u4e3a %d\\n\", l, l < arrSize ? val(abt, l) : INT_MAX);\n    printf(\"\u5176\u53f3\u5b50\u8282\u70b9\u7684\u7d22\u5f15\u4e3a %d\uff0c\u503c\u4e3a %d\\n\", r, r < arrSize ? val(abt, r) : INT_MAX);\n    printf(\"\u5176\u7236\u8282\u70b9\u7684\u7d22\u5f15\u4e3a %d\uff0c\u503c\u4e3a %d\\n\", p, p < arrSize ? val(abt, p) : INT_MAX);\n\n    // \u904d\u5386\u6811\n    int returnSize;\n    int *res;\n\n    res = levelOrder(abt, &returnSize);\n    printf(\"\\n\u5c42\u5e8f\u904d\u5386\u4e3a\uff1a \");\n    printArray(res, returnSize);\n    free(res);\n\n    res = preOrder(abt, &returnSize);\n    printf(\"\u524d\u5e8f\u904d\u5386\u4e3a\uff1a \");\n    printArray(res, returnSize);\n    free(res);\n\n    res = inOrder(abt, &returnSize);\n    printf(\"\u4e2d\u5e8f\u904d\u5386\u4e3a\uff1a \");\n    printArray(res, returnSize);\n    free(res);\n\n    res = postOrder(abt, &returnSize);\n    printf(\"\u540e\u5e8f\u904d\u5386\u4e3a\uff1a \");\n    printArray(res, returnSize);\n    free(res);\n\n    // \u91ca\u653e\u5185\u5b58\n    delArrayBinaryTree(abt);\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "// \u521d\u59cb\u5316\u4e8c\u53c9\u6811", "// \u4f7f\u7528 INT_MAX \u4ee3\u8868\u7a7a\u4f4d NULL", "// \u8bbf\u95ee\u8282\u70b9", "// \u904d\u5386\u6811", "// \u91ca\u653e\u5185\u5b58", "}", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ",", ",", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "return", "0", ";", "int", "arr", "=", "int", "arrSize", "=", "TreeNode", "*", "printf", "printf", "printArray", "printf", "printTree", "ArrayBinaryTree", "*", "int", "i", "=", "1", "int", "l", "=", "r", "=", "p", "=", "printf", "printf", "printf", "printf", "int", "returnSize", "int", "*", "res", "res", "=", "printf", "printArray", "free", "res", "=", "printf", "printArray", "free", "res", "=", "printf", "printArray", "free", "res", "=", "printf", "printArray", "free", "delArrayBinaryTree", "[", "]", "{", "1", ",", "2", ",", "3", ",", "4", ",", "INT_MAX", ",", "6", ",", "7", ",", "8", ",", "9", ",", "INT_MAX", ",", "INT_MAX", ",", "12", ",", "INT_MAX", ",", "INT_MAX", ",", "15", "}", "/", "root", "=", "(", ")", "(", ")", "(", "arr", ",", "arrSize", ")", "(", ")", "(", "root", ")", "abt", "=", "left", "right", "parent", "(", ",", "i", ",", ")", "(", ",", "l", ",", ")", "(", ",", "r", ",", ")", "(", ",", "p", ",", ")", "levelOrder", "(", ")", "(", "res", ",", "returnSize", ")", "(", "res", ")", "preOrder", "(", ")", "(", "res", ",", "returnSize", ")", "(", "res", ")", "inOrder", "(", ")", "(", "res", ",", "returnSize", ")", "(", "res", ")", "postOrder", "(", ")", "(", "res", ",", "returnSize", ")", "(", "res", ")", "(", "abt", ")", "sizeof", "sizeof", "arrayToTree", "\"", "\\n", "\u521d\u59cb\u5316\u4e8c\u53c9\u6811", "\\n", "\"", "\"", "\u4e8c\u53c9\u6811\u7684\u6570\u7ec4\u8868\u793a\uff1a", "\\n", "\"", "\"", "\u4e8c\u53c9\u6811\u7684\u94fe\u8868\u8868\u793a\uff1a", "\\n", "\"", "newArrayBinaryTree", "(", "i", ")", "(", "i", ")", "(", "i", ")", "\"", "\\n", "\u5f53\u524d\u8282\u70b9\u7684\u7d22\u5f15\u4e3a %d\uff0c\u503c\u4e3a %d", "\\n", "\"", "val", "\"", "\u5176\u5de6\u5b50\u8282\u70b9\u7684\u7d22\u5f15\u4e3a %d\uff0c\u503c\u4e3a %d", "\\n", "\"", "?", ":", "INT_MAX", "\"", "\u5176\u53f3\u5b50\u8282\u70b9\u7684\u7d22\u5f15\u4e3a %d\uff0c\u503c\u4e3a %d", "\\n", "\"", "?", ":", "INT_MAX", "\"", "\u5176\u7236\u8282\u70b9\u7684\u7d22\u5f15\u4e3a %d\uff0c\u503c\u4e3a %d", "\\n", "\"", "?", ":", "INT_MAX", "(", ")", "\"", "\\n", "\u5c42\u5e8f\u904d\u5386\u4e3a\uff1a ", "\"", "(", ")", "\"", "\u524d\u5e8f\u904d\u5386\u4e3a\uff1a ", "\"", "(", ")", "\"", "\u4e2d\u5e8f\u904d\u5386\u4e3a\uff1a ", "\"", "(", ")", "\"", "\u540e\u5e8f\u904d\u5386\u4e3a\uff1a ", "\"", "(", "arr", ")", "(", ")", "(", "arr", ",", "arrSize", ")", "(", "arr", ",", "arrSize", ")", "(", "abt", ",", "i", ")", "l", "<", "arrSize", "val", "r", "<", "arrSize", "val", "p", "<", "arrSize", "val", "abt", "&", "returnSize", "abt", "&", "returnSize", "abt", "&", "returnSize", "abt", "&", "returnSize", "arr", "[", "0", "]", "(", "abt", ",", "l", ")", "(", "abt", ",", "r", ")", "(", "abt", ",", "p", ")", ",", ",", ",", ","], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 535, "ast_depth": 10, "n_identifiers": 30, "vocab_size": 76}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_tree/avl_tree.c#22-25", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_tree/avl_tree.c", "language": "Java"}, "method": {"name": "delAVLTree", "qualified_name": "codes.c.chapter_tree.avl_tree.c#delAVLTree", "start_line": 22, "end_line": 25, "signature": "delAVLTree(AVLTree *tree)", "original_code": "void delAVLTree(AVLTree *tree) {\n    freeMemoryTree(tree->root);\n    free(tree);\n}", "doc_comment": "/* \u6790\u6784\u51fd\u6570 */"}, "code_tokens": ["void", "delAVLTree", "(", ")", "{", "}", "AVLTree", "tree", ";", ";", "*", "freeMemoryTree", "free", "(", ")", "(", "tree", ")", "tree", "->", "root"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 34, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 14}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_tree/avl_tree.c#28-34", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_tree/avl_tree.c", "language": "Java"}, "method": {"name": "height", "qualified_name": "codes.c.chapter_tree.avl_tree.c#height", "start_line": 28, "end_line": 34, "signature": "height(TreeNode *node)", "original_code": "int height(TreeNode *node) {\n    // \u7a7a\u8282\u70b9\u9ad8\u5ea6\u4e3a -1 \uff0c\u53f6\u8282\u70b9\u9ad8\u5ea6\u4e3a 0\n    if (node != NULL) {\n        return node->height;\n    }\n    return -1;\n}", "doc_comment": "/* \u83b7\u53d6\u8282\u70b9\u9ad8\u5ea6 */"}, "code_tokens": ["height", "int", "(", ")", "{", "// \u7a7a\u8282\u70b9\u9ad8\u5ea6\u4e3a -1 \uff0c\u53f6\u8282\u70b9\u9ad8\u5ea6\u4e3a 0", "}", "TreeNode", "node", "if", "return", ";", "*", "(", ")", "{", "}", "-", "1", "node", "!=", "NULL", "return", ";", "node", "->", "height"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 42, "ast_depth": 8, "n_identifiers": 3, "vocab_size": 18}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_tree/avl_tree.c#37-46", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_tree/avl_tree.c", "language": "Java"}, "method": {"name": "updateHeight", "qualified_name": "codes.c.chapter_tree.avl_tree.c#updateHeight", "start_line": 37, "end_line": 46, "signature": "updateHeight(TreeNode *node)", "original_code": "void updateHeight(TreeNode *node) {\n    int lh = height(node->left);\n    int rh = height(node->right);\n    // \u8282\u70b9\u9ad8\u5ea6\u7b49\u4e8e\u6700\u9ad8\u5b50\u6811\u9ad8\u5ea6 + 1\n    if (lh > rh) {\n        node->height = lh + 1;\n    } else {\n        node->height = rh + 1;\n    }\n}", "doc_comment": "/* \u66f4\u65b0\u8282\u70b9\u9ad8\u5ea6 */"}, "code_tokens": ["void", "updateHeight", "(", ")", "{", "// \u8282\u70b9\u9ad8\u5ea6\u7b49\u4e8e\u6700\u9ad8\u5b50\u6811\u9ad8\u5ea6 + 1", "}", "TreeNode", "node", ";", ";", "if", "else", "*", "int", "lh", "=", "int", "rh", "=", "(", ")", "{", "}", "{", "}", "height", "height", "lh", ">", "rh", ";", ";", "(", ")", "(", ")", "node", "->", "node", "->", "node", "->", "left", "node", "->", "right", "height", "=", "height", "=", "lh", "+", "1", "rh", "+", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 88, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 24}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_tree/avl_tree.c#49-56", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_tree/avl_tree.c", "language": "Java"}, "method": {"name": "balanceFactor", "qualified_name": "codes.c.chapter_tree.avl_tree.c#balanceFactor", "start_line": 49, "end_line": 56, "signature": "balanceFactor(TreeNode *node)", "original_code": "int balanceFactor(TreeNode *node) {\n    // \u7a7a\u8282\u70b9\u5e73\u8861\u56e0\u5b50\u4e3a 0\n    if (node == NULL) {\n        return 0;\n    }\n    // \u8282\u70b9\u5e73\u8861\u56e0\u5b50 = \u5de6\u5b50\u6811\u9ad8\u5ea6 - \u53f3\u5b50\u6811\u9ad8\u5ea6\n    return height(node->left) - height(node->right);\n}", "doc_comment": "/* \u83b7\u53d6\u5e73\u8861\u56e0\u5b50 */"}, "code_tokens": ["balanceFactor", "int", "(", ")", "{", "// \u7a7a\u8282\u70b9\u5e73\u8861\u56e0\u5b50\u4e3a 0", "// \u8282\u70b9\u5e73\u8861\u56e0\u5b50 = \u5de6\u5b50\u6811\u9ad8\u5ea6 - \u53f3\u5b50\u6811\u9ad8\u5ea6", "}", "TreeNode", "node", "if", "return", ";", "*", "(", ")", "{", "}", "-", "node", "==", "NULL", "return", "0", ";", "height", "height", "(", ")", "(", ")", "node", "->", "left", "node", "->", "right"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 57, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 22}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_tree/avl_tree.c#141-143", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_tree/avl_tree.c", "language": "Java"}, "method": {"name": "insert", "qualified_name": "codes.c.chapter_tree.avl_tree.c#insert", "start_line": 141, "end_line": 143, "signature": "insert(AVLTree *tree, int val)", "original_code": "void insert(AVLTree *tree, int val) {\n    tree->root = insertHelper(tree->root, val);\n}", "doc_comment": "/* \u63d2\u5165\u8282\u70b9 */"}, "code_tokens": ["void", "insert", "(", ",", ")", "{", "}", "AVLTree", "tree", "val", ";", "*", "int", "tree", "->", "root", "=", "insertHelper", "(", ",", "val", ")", "tree", "->", "root"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 39, "ast_depth": 10, "n_identifiers": 5, "vocab_size": 17}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_tree/avl_tree.c#190-192", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_tree/avl_tree.c", "language": "Java"}, "method": {"name": "removeItem", "qualified_name": "codes.c.chapter_tree.avl_tree.c#removeItem", "start_line": 190, "end_line": 192, "signature": "removeItem(AVLTree *tree, int val)", "original_code": "void removeItem(AVLTree *tree, int val) {\n    TreeNode *root = removeHelper(tree->root, val);\n}", "doc_comment": "// \u7531\u4e8e\u5f15\u5165\u4e86 stdio.h \uff0c\u6b64\u5904\u65e0\u6cd5\u4f7f\u7528 remove \u5173\u952e\u8bcd"}, "code_tokens": ["void", "removeItem", "(", ",", ")", "{", "}", "AVLTree", "tree", "val", ";", "*", "int", "TreeNode", "*", "root", "=", "removeHelper", "(", ",", "val", ")", "tree", "->", "root"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 39, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 18}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_tree/avl_tree.c#214-218", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_tree/avl_tree.c", "language": "Java"}, "method": {"name": "testInsert", "qualified_name": "codes.c.chapter_tree.avl_tree.c#testInsert", "start_line": 214, "end_line": 218, "signature": "testInsert(AVLTree *tree, int val)", "original_code": "void testInsert(AVLTree *tree, int val) {\n    insert(tree, val);\n    printf(\"\\n\u63d2\u5165\u8282\u70b9 %d \u540e\uff0cAVL \u6811\u4e3a \\n\", val);\n    printTree(tree->root);\n}", "doc_comment": ""}, "code_tokens": ["void", "testInsert", "(", ",", ")", "{", "}", "AVLTree", "tree", "val", ";", ";", ";", "*", "int", "insert", "printf", "printTree", "(", "tree", ",", "val", ")", "(", ",", "val", ")", "(", ")", "\"", "\\n", "\u63d2\u5165\u8282\u70b9 %d \u540e\uff0cAVL \u6811\u4e3a ", "\\n", "\"", "tree", "->", "root"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 56, "ast_depth": 8, "n_identifiers": 7, "vocab_size": 21}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_tree/avl_tree.c#220-224", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_tree/avl_tree.c", "language": "Java"}, "method": {"name": "testRemove", "qualified_name": "codes.c.chapter_tree.avl_tree.c#testRemove", "start_line": 220, "end_line": 224, "signature": "testRemove(AVLTree *tree, int val)", "original_code": "void testRemove(AVLTree *tree, int val) {\n    removeItem(tree, val);\n    printf(\"\\n\u5220\u9664\u8282\u70b9 %d \u540e\uff0cAVL \u6811\u4e3a \\n\", val);\n    printTree(tree->root);\n}", "doc_comment": ""}, "code_tokens": ["void", "testRemove", "(", ",", ")", "{", "}", "AVLTree", "tree", "val", ";", ";", ";", "*", "int", "removeItem", "printf", "printTree", "(", "tree", ",", "val", ")", "(", ",", "val", ")", "(", ")", "\"", "\\n", "\u5220\u9664\u8282\u70b9 %d \u540e\uff0cAVL \u6811\u4e3a ", "\\n", "\"", "tree", "->", "root"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 56, "ast_depth": 8, "n_identifiers": 7, "vocab_size": 21}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_tree/avl_tree.c#227-259", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_tree/avl_tree.c", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.c.chapter_tree.avl_tree.c#main", "start_line": 227, "end_line": 259, "signature": "main()", "original_code": "int main() {\n    /* \u521d\u59cb\u5316\u7a7a AVL \u6811 */\n    AVLTree *tree = (AVLTree *)newAVLTree();\n    /* \u63d2\u5165\u8282\u70b9 */\n    // \u8bf7\u5173\u6ce8\u63d2\u5165\u8282\u70b9\u540e\uff0cAVL \u6811\u662f\u5982\u4f55\u4fdd\u6301\u5e73\u8861\u7684\n    testInsert(tree, 1);\n    testInsert(tree, 2);\n    testInsert(tree, 3);\n    testInsert(tree, 4);\n    testInsert(tree, 5);\n    testInsert(tree, 8);\n    testInsert(tree, 7);\n    testInsert(tree, 9);\n    testInsert(tree, 10);\n    testInsert(tree, 6);\n\n    /* \u63d2\u5165\u91cd\u590d\u8282\u70b9 */\n    testInsert(tree, 7);\n\n    /* \u5220\u9664\u8282\u70b9 */\n    // \u8bf7\u5173\u6ce8\u5220\u9664\u8282\u70b9\u540e\uff0cAVL \u6811\u662f\u5982\u4f55\u4fdd\u6301\u5e73\u8861\u7684\n    testRemove(tree, 8); // \u5220\u9664\u5ea6\u4e3a 0 \u7684\u8282\u70b9\n    testRemove(tree, 5); // \u5220\u9664\u5ea6\u4e3a 1 \u7684\u8282\u70b9\n    testRemove(tree, 4); // \u5220\u9664\u5ea6\u4e3a 2 \u7684\u8282\u70b9\n\n    /* \u67e5\u8be2\u8282\u70b9 */\n    TreeNode *node = search(tree, 7);\n    printf(\"\\n\u67e5\u627e\u5230\u7684\u8282\u70b9\u5bf9\u8c61\u8282\u70b9\u503c = %d \\n\", node->val);\n\n    // \u91ca\u653e\u5185\u5b58\n    delAVLTree(tree);\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "/* \u521d\u59cb\u5316\u7a7a AVL \u6811 */", "/* \u63d2\u5165\u8282\u70b9 */", "// \u8bf7\u5173\u6ce8\u63d2\u5165\u8282\u70b9\u540e\uff0cAVL \u6811\u662f\u5982\u4f55\u4fdd\u6301\u5e73\u8861\u7684", "/* \u63d2\u5165\u91cd\u590d\u8282\u70b9 */", "/* \u5220\u9664\u8282\u70b9 */", "// \u8bf7\u5173\u6ce8\u5220\u9664\u8282\u70b9\u540e\uff0cAVL \u6811\u662f\u5982\u4f55\u4fdd\u6301\u5e73\u8861\u7684", "// \u5220\u9664\u5ea6\u4e3a 0 \u7684\u8282\u70b9", "// \u5220\u9664\u5ea6\u4e3a 1 \u7684\u8282\u70b9", "// \u5220\u9664\u5ea6\u4e3a 2 \u7684\u8282\u70b9", "/* \u67e5\u8be2\u8282\u70b9 */", "// \u91ca\u653e\u5185\u5b58", "}", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "return", "0", ";", "AVLTree", "*", "testInsert", "testInsert", "testInsert", "testInsert", "testInsert", "testInsert", "testInsert", "testInsert", "testInsert", "testInsert", "testInsert", "testRemove", "testRemove", "testRemove", "TreeNode", "*", "printf", "delAVLTree", "tree", "=", "(", "tree", ",", "1", ")", "(", "tree", ",", "2", ")", "(", "tree", ",", "3", ")", "(", "tree", ",", "4", ")", "(", "tree", ",", "5", ")", "(", "tree", ",", "8", ")", "(", "tree", ",", "7", ")", "(", "tree", ",", "9", ")", "(", "tree", ",", "10", ")", "(", "tree", ",", "6", ")", "(", "tree", ",", "7", ")", "(", "tree", ",", "8", ")", "(", "tree", ",", "5", ")", "(", "tree", ",", "4", ")", "node", "=", "(", ",", ")", "(", "tree", ")", "(", "", "search", "\"", "\\n", "\u67e5\u627e\u5230\u7684\u8282\u70b9\u5bf9\u8c61\u8282\u70b9\u503c = %d ", "\\n", "\"", "node", "->", "val", "AVLTree", "*", "(", "tree", ",", "7", ")", ")", "newAVLTree", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 229, "ast_depth": 11, "n_identifiers": 12, "vocab_size": 49}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_tree/binary_search_tree.c#23-26", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_tree/binary_search_tree.c", "language": "Java"}, "method": {"name": "delBinarySearchTree", "qualified_name": "codes.c.chapter_tree.binary_search_tree.c#delBinarySearchTree", "start_line": 23, "end_line": 26, "signature": "delBinarySearchTree(BinarySearchTree *bst)", "original_code": "void delBinarySearchTree(BinarySearchTree *bst) {\n    freeMemoryTree(bst->root);\n    free(bst);\n}", "doc_comment": "/* \u6790\u6784\u51fd\u6570 */"}, "code_tokens": ["void", "delBinarySearchTree", "(", ")", "{", "}", "BinarySearchTree", "bst", ";", ";", "*", "freeMemoryTree", "free", "(", ")", "(", "bst", ")", "bst", "->", "root"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 34, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 14}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_tree/binary_search_tree.c#54-83", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_tree/binary_search_tree.c", "language": "Java"}, "method": {"name": "insert", "qualified_name": "codes.c.chapter_tree.binary_search_tree.c#insert", "start_line": 54, "end_line": 83, "signature": "insert(BinarySearchTree *bst, int num)", "original_code": "void insert(BinarySearchTree *bst, int num) {\n    // \u82e5\u6811\u4e3a\u7a7a\uff0c\u5219\u521d\u59cb\u5316\u6839\u8282\u70b9\n    if (bst->root == NULL) {\n        bst->root = newTreeNode(num);\n        return;\n    }\n    TreeNode *cur = bst->root, *pre = NULL;\n    // \u5faa\u73af\u67e5\u627e\uff0c\u8d8a\u8fc7\u53f6\u8282\u70b9\u540e\u8df3\u51fa\n    while (cur != NULL) {\n        // \u627e\u5230\u91cd\u590d\u8282\u70b9\uff0c\u76f4\u63a5\u8fd4\u56de\n        if (cur->val == num) {\n            return;\n        }\n        pre = cur;\n        if (cur->val < num) {\n            // \u63d2\u5165\u4f4d\u7f6e\u5728 cur \u7684\u53f3\u5b50\u6811\u4e2d\n            cur = cur->right;\n        } else {\n            // \u63d2\u5165\u4f4d\u7f6e\u5728 cur \u7684\u5de6\u5b50\u6811\u4e2d\n            cur = cur->left;\n        }\n    }\n    // \u63d2\u5165\u8282\u70b9\n    TreeNode *node = newTreeNode(num);\n    if (pre->val < num) {\n        pre->right = node;\n    } else {\n        pre->left = node;\n    }\n}", "doc_comment": "/* \u63d2\u5165\u8282\u70b9 */"}, "code_tokens": ["void", "insert", "(", ",", ")", "{", "// \u82e5\u6811\u4e3a\u7a7a\uff0c\u5219\u521d\u59cb\u5316\u6839\u8282\u70b9", "// \u5faa\u73af\u67e5\u627e\uff0c\u8d8a\u8fc7\u53f6\u8282\u70b9\u540e\u8df3\u51fa", "// \u63d2\u5165\u8282\u70b9", "}", "BinarySearchTree", "bst", "num", "if", ";", "while", ";", "if", "else", "*", "int", "(", ")", "{", "}", "*", "(", ")", "{", "// \u627e\u5230\u91cd\u590d\u8282\u70b9\uff0c\u76f4\u63a5\u8fd4\u56de", "}", "TreeNode", "*", "(", ")", "{", "}", "{", "}", "bst", "->", ";", "return", ";", "TreeNode", "*", ",", "pre", "=", "NULL", "cur", "!=", "NULL", "if", ";", "if", "else", "node", "=", "pre", "->", ";", ";", "root", "==", "NULL", "bst", "->", "cur", "=", "(", ")", "{", "}", "pre", "=", "cur", "(", ")", "{", "// \u63d2\u5165\u4f4d\u7f6e\u5728 cur \u7684\u53f3\u5b50\u6811\u4e2d", "}", "{", "// \u63d2\u5165\u4f4d\u7f6e\u5728 cur \u7684\u5de6\u5b50\u6811\u4e2d", "}", "newTreeNode", "val", "<", "num", "pre", "->", "pre", "->", "root", "=", "bst", "->", "root", "cur", "->", "return", ";", "cur", "->", ";", ";", "(", "num", ")", "right", "=", "node", "left", "=", "node", "newTreeNode", "val", "==", "num", "val", "<", "num", "cur", "=", "cur", "=", "(", "num", ")", "cur", "->", "right", "cur", "->", "left"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 202, "ast_depth": 11, "n_identifiers": 13, "vocab_size": 38}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_tree/binary_search_tree.c#87-133", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_tree/binary_search_tree.c", "language": "Java"}, "method": {"name": "removeItem", "qualified_name": "codes.c.chapter_tree.binary_search_tree.c#removeItem", "start_line": 87, "end_line": 133, "signature": "removeItem(BinarySearchTree *bst, int num)", "original_code": "void removeItem(BinarySearchTree *bst, int num) {\n    // \u82e5\u6811\u4e3a\u7a7a\uff0c\u76f4\u63a5\u63d0\u524d\u8fd4\u56de\n    if (bst->root == NULL)\n        return;\n    TreeNode *cur = bst->root, *pre = NULL;\n    // \u5faa\u73af\u67e5\u627e\uff0c\u8d8a\u8fc7\u53f6\u8282\u70b9\u540e\u8df3\u51fa\n    while (cur != NULL) {\n        // \u627e\u5230\u5f85\u5220\u9664\u8282\u70b9\uff0c\u8df3\u51fa\u5faa\u73af\n        if (cur->val == num)\n            break;\n        pre = cur;\n        if (cur->val < num) {\n            // \u5f85\u5220\u9664\u8282\u70b9\u5728 root \u7684\u53f3\u5b50\u6811\u4e2d\n            cur = cur->right;\n        } else {\n            // \u5f85\u5220\u9664\u8282\u70b9\u5728 root \u7684\u5de6\u5b50\u6811\u4e2d\n            cur = cur->left;\n        }\n    }\n    // \u82e5\u65e0\u5f85\u5220\u9664\u8282\u70b9\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\n    if (cur == NULL)\n        return;\n    // \u5224\u65ad\u5f85\u5220\u9664\u8282\u70b9\u662f\u5426\u5b58\u5728\u5b50\u8282\u70b9\n    if (cur->left == NULL || cur->right == NULL) {\n        /* \u5b50\u8282\u70b9\u6570\u91cf = 0 or 1 */\n        // \u5f53\u5b50\u8282\u70b9\u6570\u91cf = 0 / 1 \u65f6\uff0c child = nullptr / \u8be5\u5b50\u8282\u70b9\n        TreeNode *child = cur->left != NULL ? cur->left : cur->right;\n        // \u5220\u9664\u8282\u70b9 cur\n        if (pre->left == cur) {\n            pre->left = child;\n        } else {\n            pre->right = child;\n        }\n    } else {\n        /* \u5b50\u8282\u70b9\u6570\u91cf = 2 */\n        // \u83b7\u53d6\u4e2d\u5e8f\u904d\u5386\u4e2d cur \u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\n        TreeNode *tmp = cur->right;\n        while (tmp->left != NULL) {\n            tmp = tmp->left;\n        }\n        int tmpVal = tmp->val;\n        // \u9012\u5f52\u5220\u9664\u8282\u70b9 tmp\n        removeItem(bst, tmp->val);\n        // \u7528 tmp \u8986\u76d6 cur\n        cur->val = tmpVal;\n    }\n}", "doc_comment": "// \u7531\u4e8e\u5f15\u5165\u4e86 stdio.h \uff0c\u6b64\u5904\u65e0\u6cd5\u4f7f\u7528 remove \u5173\u952e\u8bcd"}, "code_tokens": ["void", "removeItem", "(", ",", ")", "{", "// \u82e5\u6811\u4e3a\u7a7a\uff0c\u76f4\u63a5\u63d0\u524d\u8fd4\u56de", "// \u5faa\u73af\u67e5\u627e\uff0c\u8d8a\u8fc7\u53f6\u8282\u70b9\u540e\u8df3\u51fa", "// \u82e5\u65e0\u5f85\u5220\u9664\u8282\u70b9\uff0c\u5219\u76f4\u63a5\u8fd4\u56de", "// \u5224\u65ad\u5f85\u5220\u9664\u8282\u70b9\u662f\u5426\u5b58\u5728\u5b50\u8282\u70b9", "}", "BinarySearchTree", "bst", "num", "if", ";", "while", "if", "if", "else", "*", "int", "(", ")", "return", ";", "*", "(", ")", "{", "// \u627e\u5230\u5f85\u5220\u9664\u8282\u70b9\uff0c\u8df3\u51fa\u5faa\u73af", "}", "(", ")", "return", ";", "(", ")", "{", "/* \u5b50\u8282\u70b9\u6570\u91cf = 0 or 1 */", "// \u5f53\u5b50\u8282\u70b9\u6570\u91cf = 0 / 1 \u65f6\uff0c child = nullptr / \u8be5\u5b50\u8282\u70b9", "// \u5220\u9664\u8282\u70b9 cur", "}", "{", "/* \u5b50\u8282\u70b9\u6570\u91cf = 2 */", "// \u83b7\u53d6\u4e2d\u5e8f\u904d\u5386\u4e2d cur \u7684\u4e0b\u4e00\u4e2a\u8282\u70b9", "// \u9012\u5f52\u5220\u9664\u8282\u70b9 tmp", "// \u7528 tmp \u8986\u76d6 cur", "}", "bst", "->", "TreeNode", "*", ",", "pre", "=", "NULL", "cur", "!=", "NULL", "if", ";", "if", "else", "cur", "==", "NULL", "cur", "->", ";", "if", "else", ";", "while", ";", ";", ";", "root", "==", "NULL", "cur", "=", "(", ")", "break", ";", "pre", "=", "cur", "(", ")", "{", "// \u5f85\u5220\u9664\u8282\u70b9\u5728 root \u7684\u53f3\u5b50\u6811\u4e2d", "}", "{", "// \u5f85\u5220\u9664\u8282\u70b9\u5728 root \u7684\u5de6\u5b50\u6811\u4e2d", "}", "||", "TreeNode", "*", "(", ")", "{", "}", "{", "}", "TreeNode", "*", "(", ")", "{", "}", "int", "tmpVal", "=", "removeItem", "cur", "->", "bst", "->", "root", "cur", "->", "cur", "->", ";", ";", "left", "==", "NULL", "cur", "->", "child", "=", "pre", "->", ";", ";", "tmp", "=", "tmp", "->", ";", "tmp", "->", "val", "(", "bst", ",", ")", "val", "=", "tmpVal", "val", "==", "num", "val", "<", "num", "cur", "=", "cur", "=", "right", "==", "NULL", "cur", "->", "left", "==", "cur", "pre", "->", "pre", "->", "cur", "->", "right", "left", "!=", "NULL", "tmp", "=", "tmp", "->", "val", "cur", "->", "right", "cur", "->", "left", "?", ":", "left", "=", "child", "right", "=", "child", "tmp", "->", "left", "left", "!=", "NULL", "cur", "->", "left", "cur", "->", "right"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 311, "ast_depth": 12, "n_identifiers": 14, "vocab_size": 51}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_tree/binary_search_tree.c#136-169", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_tree/binary_search_tree.c", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.c.chapter_tree.binary_search_tree.c#main", "start_line": 136, "end_line": 169, "signature": "main()", "original_code": "int main() {\n    /* \u521d\u59cb\u5316\u4e8c\u53c9\u641c\u7d22\u6811 */\n    int nums[] = {8, 4, 12, 2, 6, 10, 14, 1, 3, 5, 7, 9, 11, 13, 15};\n    BinarySearchTree *bst = newBinarySearchTree();\n    for (int i = 0; i < sizeof(nums) / sizeof(int); i++) {\n        insert(bst, nums[i]);\n    }\n    printf(\"\u521d\u59cb\u5316\u7684\u4e8c\u53c9\u6811\u4e3a\\n\");\n    printTree(getRoot(bst));\n\n    /* \u67e5\u627e\u8282\u70b9 */\n    TreeNode *node = search(bst, 7);\n    printf(\"\u67e5\u627e\u5230\u7684\u8282\u70b9\u5bf9\u8c61\u7684\u8282\u70b9\u503c = %d\\n\", node->val);\n\n    /* \u63d2\u5165\u8282\u70b9 */\n    insert(bst, 16);\n    printf(\"\u63d2\u5165\u8282\u70b9 16 \u540e\uff0c\u4e8c\u53c9\u6811\u4e3a\\n\");\n    printTree(getRoot(bst));\n\n    /* \u5220\u9664\u8282\u70b9 */\n    removeItem(bst, 1);\n    printf(\"\u5220\u9664\u8282\u70b9 1 \u540e\uff0c\u4e8c\u53c9\u6811\u4e3a\\n\");\n    printTree(getRoot(bst));\n    removeItem(bst, 2);\n    printf(\"\u5220\u9664\u8282\u70b9 2 \u540e\uff0c\u4e8c\u53c9\u6811\u4e3a\\n\");\n    printTree(getRoot(bst));\n    removeItem(bst, 4);\n    printf(\"\u5220\u9664\u8282\u70b9 4 \u540e\uff0c\u4e8c\u53c9\u6811\u4e3a\\n\");\n    printTree(getRoot(bst));\n\n    // \u91ca\u653e\u5185\u5b58\n    delBinarySearchTree(bst);\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "/* \u521d\u59cb\u5316\u4e8c\u53c9\u641c\u7d22\u6811 */", "/* \u67e5\u627e\u8282\u70b9 */", "/* \u63d2\u5165\u8282\u70b9 */", "/* \u5220\u9664\u8282\u70b9 */", "// \u91ca\u653e\u5185\u5b58", "}", ";", ";", "for", "(", ";", ")", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "return", "0", ";", "int", "nums", "=", "BinarySearchTree", "*", ";", "i", "<", "i", "++", "{", "}", "printf", "printTree", "TreeNode", "*", "printf", "insert", "printf", "printTree", "removeItem", "printf", "printTree", "removeItem", "printf", "printTree", "removeItem", "printf", "printTree", "delBinarySearchTree", "[", "]", "{", "8", ",", "4", ",", "12", ",", "2", ",", "6", ",", "10", ",", "14", ",", "1", ",", "3", ",", "5", ",", "7", ",", "9", ",", "11", ",", "13", ",", "15", "}", "bst", "=", "int", "i", "=", "0", "/", ";", "(", ")", "(", ")", "node", "=", "(", ",", ")", "(", "bst", ",", "16", ")", "(", ")", "(", ")", "(", "bst", ",", "1", ")", "(", ")", "(", ")", "(", "bst", ",", "2", ")", "(", ")", "(", ")", "(", "bst", ",", "4", ")", "(", ")", "(", ")", "(", "bst", ")", "newBinarySearchTree", "sizeof", "sizeof", "insert", "\"", "\u521d\u59cb\u5316\u7684\u4e8c\u53c9\u6811\u4e3a", "\\n", "\"", "getRoot", "search", "\"", "\u67e5\u627e\u5230\u7684\u8282\u70b9\u5bf9\u8c61\u7684\u8282\u70b9\u503c = %d", "\\n", "\"", "node", "->", "val", "\"", "\u63d2\u5165\u8282\u70b9 16 \u540e\uff0c\u4e8c\u53c9\u6811\u4e3a", "\\n", "\"", "getRoot", "\"", "\u5220\u9664\u8282\u70b9 1 \u540e\uff0c\u4e8c\u53c9\u6811\u4e3a", "\\n", "\"", "getRoot", "\"", "\u5220\u9664\u8282\u70b9 2 \u540e\uff0c\u4e8c\u53c9\u6811\u4e3a", "\\n", "\"", "getRoot", "\"", "\u5220\u9664\u8282\u70b9 4 \u540e\uff0c\u4e8c\u53c9\u6811\u4e3a", "\\n", "\"", "getRoot", "(", ")", "(", "nums", ")", "(", ")", "(", "bst", ",", ")", "(", "bst", ")", "(", "bst", ",", "7", ")", "(", "bst", ")", "(", "bst", ")", "(", "bst", ")", "(", "bst", ")", "nums", "[", "i", "]", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 333, "ast_depth": 11, "n_identifiers": 17, "vocab_size": 64}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_tree/binary_tree.c#10-43", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_tree/binary_tree.c", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.c.chapter_tree.binary_tree.c#main", "start_line": 10, "end_line": 43, "signature": "main()", "original_code": "int main() {\n    /* \u521d\u59cb\u5316\u4e8c\u53c9\u6811 */\n    // \u521d\u59cb\u5316\u8282\u70b9\n    TreeNode *n1 = newTreeNode(1);\n    TreeNode *n2 = newTreeNode(2);\n    TreeNode *n3 = newTreeNode(3);\n    TreeNode *n4 = newTreeNode(4);\n    TreeNode *n5 = newTreeNode(5);\n    // \u6784\u5efa\u5f15\u7528\u6307\u5411\uff08\u5373\u6307\u9488\uff09\n    n1->left = n2;\n    n1->right = n3;\n    n2->left = n4;\n    n2->right = n5;\n    printf(\"\u521d\u59cb\u5316\u4e8c\u53c9\u6811\\n\");\n    printTree(n1);\n\n    /* \u63d2\u5165\u4e0e\u5220\u9664\u8282\u70b9 */\n    TreeNode *P = newTreeNode(0);\n    // \u5728 n1 -> n2 \u4e2d\u95f4\u63d2\u5165\u8282\u70b9 P\n    n1->left = P;\n    P->left = n2;\n    printf(\"\u63d2\u5165\u8282\u70b9 P \u540e\\n\");\n    printTree(n1);\n\n    // \u5220\u9664\u8282\u70b9 P\n    n1->left = n2;\n    // \u91ca\u653e\u5185\u5b58\n    free(P);\n    printf(\"\u5220\u9664\u8282\u70b9 P \u540e\\n\");\n    printTree(n1);\n\n    freeMemoryTree(n1);\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "/* \u521d\u59cb\u5316\u4e8c\u53c9\u6811 */", "// \u521d\u59cb\u5316\u8282\u70b9", "// \u6784\u5efa\u5f15\u7528\u6307\u5411\uff08\u5373\u6307\u9488\uff09", "/* \u63d2\u5165\u4e0e\u5220\u9664\u8282\u70b9 */", "// \u5728 n1 -> n2 \u4e2d\u95f4\u63d2\u5165\u8282\u70b9 P", "// \u5220\u9664\u8282\u70b9 P", "// \u91ca\u653e\u5185\u5b58", "}", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "return", "0", ";", "TreeNode", "*", "TreeNode", "*", "TreeNode", "*", "TreeNode", "*", "TreeNode", "*", "n1", "->", "n1", "->", "n2", "->", "n2", "->", "printf", "printTree", "TreeNode", "*", "n1", "->", "P", "->", "printf", "printTree", "n1", "->", "free", "printf", "printTree", "freeMemoryTree", "n1", "=", "n2", "=", "n3", "=", "n4", "=", "n5", "=", "left", "=", "n2", "right", "=", "n3", "left", "=", "n4", "right", "=", "n5", "(", ")", "(", "n1", ")", "P", "=", "left", "=", "P", "left", "=", "n2", "(", ")", "(", "n1", ")", "left", "=", "n2", "(", "P", ")", "(", ")", "(", "n1", ")", "(", "n1", ")", "newTreeNode", "newTreeNode", "newTreeNode", "newTreeNode", "newTreeNode", "\"", "\u521d\u59cb\u5316\u4e8c\u53c9\u6811", "\\n", "\"", "newTreeNode", "\"", "\u63d2\u5165\u8282\u70b9 P \u540e", "\\n", "\"", "\"", "\u5220\u9664\u8282\u70b9 P \u540e", "\\n", "\"", "(", "1", ")", "(", "2", ")", "(", "3", ")", "(", "4", ")", "(", "5", ")", "(", "0", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 245, "ast_depth": 9, "n_identifiers": 15, "vocab_size": 43}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_tree/binary_tree_dfs.c#15-22", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_tree/binary_tree_dfs.c", "language": "Java"}, "method": {"name": "preOrder", "qualified_name": "codes.c.chapter_tree.binary_tree_dfs.c#preOrder", "start_line": 15, "end_line": 22, "signature": "preOrder(TreeNode *root, int *size)", "original_code": "void preOrder(TreeNode *root, int *size) {\n    if (root == NULL)\n        return;\n    // \u8bbf\u95ee\u4f18\u5148\u7ea7\uff1a\u6839\u8282\u70b9 -> \u5de6\u5b50\u6811 -> \u53f3\u5b50\u6811\n    arr[(*size)++] = root->val;\n    preOrder(root->left, size);\n    preOrder(root->right, size);\n}", "doc_comment": "/* \u524d\u5e8f\u904d\u5386 */"}, "code_tokens": ["void", "preOrder", "(", ",", ")", "{", "// \u8bbf\u95ee\u4f18\u5148\u7ea7\uff1a\u6839\u8282\u70b9 -> \u5de6\u5b50\u6811 -> \u53f3\u5b50\u6811", "}", "TreeNode", "root", "size", "if", ";", ";", ";", "*", "int", "*", "(", ")", "return", ";", "=", "preOrder", "preOrder", "root", "==", "NULL", "arr", "[", "]", "root", "->", "val", "(", ",", "size", ")", "(", ",", "size", ")", "++", "root", "->", "left", "root", "->", "right", "(", "size", ")", "*"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 81, "ast_depth": 10, "n_identifiers": 8, "vocab_size": 27}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_tree/binary_tree_dfs.c#25-32", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_tree/binary_tree_dfs.c", "language": "Java"}, "method": {"name": "inOrder", "qualified_name": "codes.c.chapter_tree.binary_tree_dfs.c#inOrder", "start_line": 25, "end_line": 32, "signature": "inOrder(TreeNode *root, int *size)", "original_code": "void inOrder(TreeNode *root, int *size) {\n    if (root == NULL)\n        return;\n    // \u8bbf\u95ee\u4f18\u5148\u7ea7\uff1a\u5de6\u5b50\u6811 -> \u6839\u8282\u70b9 -> \u53f3\u5b50\u6811\n    inOrder(root->left, size);\n    arr[(*size)++] = root->val;\n    inOrder(root->right, size);\n}", "doc_comment": "/* \u4e2d\u5e8f\u904d\u5386 */"}, "code_tokens": ["void", "inOrder", "(", ",", ")", "{", "// \u8bbf\u95ee\u4f18\u5148\u7ea7\uff1a\u5de6\u5b50\u6811 -> \u6839\u8282\u70b9 -> \u53f3\u5b50\u6811", "}", "TreeNode", "root", "size", "if", ";", ";", ";", "*", "int", "*", "(", ")", "return", ";", "inOrder", "=", "inOrder", "root", "==", "NULL", "(", ",", "size", ")", "arr", "[", "]", "root", "->", "val", "(", ",", "size", ")", "root", "->", "left", "++", "root", "->", "right", "(", "size", ")", "*"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 81, "ast_depth": 10, "n_identifiers": 8, "vocab_size": 27}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_tree/binary_tree_dfs.c#35-42", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_tree/binary_tree_dfs.c", "language": "Java"}, "method": {"name": "postOrder", "qualified_name": "codes.c.chapter_tree.binary_tree_dfs.c#postOrder", "start_line": 35, "end_line": 42, "signature": "postOrder(TreeNode *root, int *size)", "original_code": "void postOrder(TreeNode *root, int *size) {\n    if (root == NULL)\n        return;\n    // \u8bbf\u95ee\u4f18\u5148\u7ea7\uff1a\u5de6\u5b50\u6811 -> \u53f3\u5b50\u6811 -> \u6839\u8282\u70b9\n    postOrder(root->left, size);\n    postOrder(root->right, size);\n    arr[(*size)++] = root->val;\n}", "doc_comment": "/* \u540e\u5e8f\u904d\u5386 */"}, "code_tokens": ["void", "postOrder", "(", ",", ")", "{", "// \u8bbf\u95ee\u4f18\u5148\u7ea7\uff1a\u5de6\u5b50\u6811 -> \u53f3\u5b50\u6811 -> \u6839\u8282\u70b9", "}", "TreeNode", "root", "size", "if", ";", ";", ";", "*", "int", "*", "(", ")", "return", ";", "postOrder", "postOrder", "=", "root", "==", "NULL", "(", ",", "size", ")", "(", ",", "size", ")", "arr", "[", "]", "root", "->", "val", "root", "->", "left", "root", "->", "right", "++", "(", "size", ")", "*"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 81, "ast_depth": 10, "n_identifiers": 8, "vocab_size": 27}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/chapter_tree/binary_tree_dfs.c#45-75", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/chapter_tree/binary_tree_dfs.c", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.c.chapter_tree.binary_tree_dfs.c#main", "start_line": 45, "end_line": 75, "signature": "main()", "original_code": "int main() {\n    /* \u521d\u59cb\u5316\u4e8c\u53c9\u6811 */\n    // \u8fd9\u91cc\u501f\u52a9\u4e86\u4e00\u4e2a\u4ece\u6570\u7ec4\u76f4\u63a5\u751f\u6210\u4e8c\u53c9\u6811\u7684\u51fd\u6570\n    int nums[] = {1, 2, 3, 4, 5, 6, 7};\n    int size = sizeof(nums) / sizeof(int);\n    TreeNode *root = arrayToTree(nums, size);\n    printf(\"\u521d\u59cb\u5316\u4e8c\u53c9\u6811\\n\");\n    printTree(root);\n\n    /* \u524d\u5e8f\u904d\u5386 */\n    // \u521d\u59cb\u5316\u8f85\u52a9\u6570\u7ec4\n    size = 0;\n    preOrder(root, &size);\n    printf(\"\u524d\u5e8f\u904d\u5386\u7684\u8282\u70b9\u6253\u5370\u5e8f\u5217 = \");\n    printArray(arr, size);\n\n    /* \u4e2d\u5e8f\u904d\u5386 */\n    size = 0;\n    inOrder(root, &size);\n    printf(\"\u4e2d\u5e8f\u904d\u5386\u7684\u8282\u70b9\u6253\u5370\u5e8f\u5217 = \");\n    printArray(arr, size);\n\n    /* \u540e\u5e8f\u904d\u5386 */\n    size = 0;\n    postOrder(root, &size);\n    printf(\"\u540e\u5e8f\u904d\u5386\u7684\u8282\u70b9\u6253\u5370\u5e8f\u5217 = \");\n    printArray(arr, size);\n\n    freeMemoryTree(root);\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "/* \u521d\u59cb\u5316\u4e8c\u53c9\u6811 */", "// \u8fd9\u91cc\u501f\u52a9\u4e86\u4e00\u4e2a\u4ece\u6570\u7ec4\u76f4\u63a5\u751f\u6210\u4e8c\u53c9\u6811\u7684\u51fd\u6570", "/* \u524d\u5e8f\u904d\u5386 */", "// \u521d\u59cb\u5316\u8f85\u52a9\u6570\u7ec4", "/* \u4e2d\u5e8f\u904d\u5386 */", "/* \u540e\u5e8f\u904d\u5386 */", "}", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "return", "0", ";", "int", "nums", "=", "int", "size", "=", "TreeNode", "*", "printf", "printTree", "size", "=", "0", "preOrder", "printf", "printArray", "size", "=", "0", "inOrder", "printf", "printArray", "size", "=", "0", "postOrder", "printf", "printArray", "freeMemoryTree", "[", "]", "{", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", "}", "/", "root", "=", "(", ")", "(", "root", ")", "(", ")", "(", ")", "(", "arr", ",", "size", ")", "(", ")", "(", ")", "(", "arr", ",", "size", ")", "(", ")", "(", ")", "(", "arr", ",", "size", ")", "(", "root", ")", "sizeof", "sizeof", "arrayToTree", "\"", "\u521d\u59cb\u5316\u4e8c\u53c9\u6811", "\\n", "\"", "root", "&", "size", "\"", "\u524d\u5e8f\u904d\u5386\u7684\u8282\u70b9\u6253\u5370\u5e8f\u5217 = ", "\"", "root", "&", "size", "\"", "\u4e2d\u5e8f\u904d\u5386\u7684\u8282\u70b9\u6253\u5370\u5e8f\u5217 = ", "\"", "root", "&", "size", "\"", "\u540e\u5e8f\u904d\u5386\u7684\u8282\u70b9\u6253\u5370\u5e8f\u5217 = ", "\"", "(", "nums", ")", "(", ")", "(", "nums", ",", "size", ")", ",", ",", ",", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 234, "ast_depth": 11, "n_identifiers": 15, "vocab_size": 49}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/utils/list_node.h#53-61", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/utils/list_node.h", "language": "Java"}, "method": {"name": "freeMemoryLinkedList", "qualified_name": "codes.c.utils.list_node.h#freeMemoryLinkedList", "start_line": 53, "end_line": 61, "signature": "freeMemoryLinkedList(ListNode *cur)", "original_code": "void freeMemoryLinkedList(ListNode *cur) {\n    // \u91ca\u653e\u5185\u5b58\n    ListNode *pre;\n    while (cur != NULL) {\n        pre = cur;\n        cur = cur->next;\n        free(pre);\n    }\n}", "doc_comment": "/* Free the memory allocated to a linked list */"}, "code_tokens": ["void", "freeMemoryLinkedList", "(", ")", "{", "// \u91ca\u653e\u5185\u5b58", "}", "ListNode", "cur", ";", "while", "*", "ListNode", "*", "pre", "(", ")", "{", "}", "cur", "!=", "NULL", ";", ";", ";", "pre", "=", "cur", "cur", "=", "free", "cur", "->", "next", "(", "pre", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 57, "ast_depth": 9, "n_identifiers": 7, "vocab_size": 19}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/utils/print_util.h#22-40", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/utils/print_util.h", "language": "Java"}, "method": {"name": "printArray", "qualified_name": "codes.c.utils.print_util.h#printArray", "start_line": 22, "end_line": 40, "signature": "printArray(int arr[], int size)", "original_code": "void printArray(int arr[], int size) {\n    printf(\"[\");\n    if (arr != NULL && size != 0) {\n        for (int i = 0; i < size - 1; i++) {\n            if (arr[i] != INT_MAX) {\n                printf(\"%d, \", arr[i]);\n            } else {\n                printf(\"NULL, \");\n            }\n        }\n        if (arr[size - 1] != INT_MAX) {\n            printf(\"%d]\\n\", arr[size - 1]);\n        } else {\n            printf(\"NULL]\\n\");\n        }\n    } else {\n        printf(\"]\\n\");\n    }\n}", "doc_comment": ""}, "code_tokens": ["void", "printArray", "(", ",", ")", "{", "}", "arr", "size", ";", "if", "else", "int", "[", "]", "int", "printf", "(", ")", "{", "}", "{", "}", "(", ")", "&&", "for", "(", ";", ")", "if", "else", ";", "\"", "[", "\"", "arr", "!=", "NULL", "size", "!=", "0", ";", "i", "<", "i", "++", "{", "}", "(", ")", "{", "}", "{", "}", "printf", "int", "i", "=", "0", "size", "-", "1", "if", "else", "!=", "INT_MAX", ";", ";", "(", ")", "(", ")", "{", "}", "{", "}", "arr", "[", "]", "printf", "printf", "\"", "]", "\\n", "\"", "!=", "INT_MAX", ";", ";", "size", "-", "1", "(", ",", ")", "(", ")", "arr", "[", "i", "]", "printf", "printf", "\"", "%d]", "\\n", "\"", "arr", "[", "]", "\"", "NULL]", "\\n", "\"", "(", ",", ")", "(", ")", "size", "-", "1", "\"", "%d, ", "\"", "arr", "[", "i", "]", "\"", "NULL, ", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 197, "ast_depth": 14, "n_identifiers": 7, "vocab_size": 34}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/utils/print_util.h#43-61", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/utils/print_util.h", "language": "Java"}, "method": {"name": "printArrayFloat", "qualified_name": "codes.c.utils.print_util.h#printArrayFloat", "start_line": 43, "end_line": 61, "signature": "printArrayFloat(float arr[], int size)", "original_code": "static void printArrayFloat(float arr[], int size) {\n    printf(\"[\");\n    if (arr != NULL && size != 0) {\n        for (int i = 0; i < size - 1; i++) {\n            if (arr[i] != INT_MAX) {\n                printf(\"%.2f, \", arr[i]);\n            } else {\n                printf(\"NULL, \");\n            }\n        }\n        if (arr[size - 1] != INT_MAX) {\n            printf(\"%.2f]\\n\", arr[size - 1]);\n        } else {\n            printf(\"NULL]\\n\");\n        }\n    } else {\n        printf(\"]\");\n    }\n}", "doc_comment": "/* Print an Array */"}, "code_tokens": ["void", "printArrayFloat", "static", "(", ",", ")", "{", "}", "arr", "size", ";", "if", "else", "float", "[", "]", "int", "printf", "(", ")", "{", "}", "{", "}", "(", ")", "&&", "for", "(", ";", ")", "if", "else", ";", "\"", "[", "\"", "arr", "!=", "NULL", "size", "!=", "0", ";", "i", "<", "i", "++", "{", "}", "(", ")", "{", "}", "{", "}", "printf", "int", "i", "=", "0", "size", "-", "1", "if", "else", "!=", "INT_MAX", ";", ";", "(", ")", "(", ")", "{", "}", "{", "}", "arr", "[", "]", "printf", "printf", "\"", "]", "\"", "!=", "INT_MAX", ";", ";", "size", "-", "1", "(", ",", ")", "(", ")", "arr", "[", "i", "]", "printf", "printf", "\"", "%.2f]", "\\n", "\"", "arr", "[", "]", "\"", "NULL]", "\\n", "\"", "(", ",", ")", "(", ")", "size", "-", "1", "\"", "%.2f, ", "\"", "arr", "[", "i", "]", "\"", "NULL, ", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 198, "ast_depth": 14, "n_identifiers": 7, "vocab_size": 36}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/utils/print_util.h#64-73", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/utils/print_util.h", "language": "Java"}, "method": {"name": "printLinkedList", "qualified_name": "codes.c.utils.print_util.h#printLinkedList", "start_line": 64, "end_line": 73, "signature": "printLinkedList(ListNode *node)", "original_code": "static void printLinkedList(ListNode *node) {\n    if (node == NULL) {\n        return;\n    }\n    while (node->next != NULL) {\n        printf(\"%d -> \", node->val);\n        node = node->next;\n    }\n    printf(\"%d\\n\", node->val);\n}", "doc_comment": "/* Print a linked list */"}, "code_tokens": ["void", "printLinkedList", "static", "(", ")", "{", "}", "ListNode", "node", "if", "while", ";", "*", "(", ")", "{", "}", "(", ")", "{", "}", "printf", "node", "==", "NULL", "return", ";", "node", "->", ";", ";", "(", ",", ")", "next", "!=", "NULL", "printf", "node", "=", "\"", "%d", "\\n", "\"", "node", "->", "val", "(", ",", ")", "node", "->", "next", "\"", "%d -> ", "\"", "node", "->", "val"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 89, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 27}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/utils/print_util.h#89-95", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/utils/print_util.h", "language": "Java"}, "method": {"name": "showTrunks", "qualified_name": "codes.c.utils.print_util.h#showTrunks", "start_line": 89, "end_line": 95, "signature": "showTrunks(Trunk *trunk)", "original_code": "void showTrunks(Trunk *trunk) {\n    if (trunk == NULL) {\n        return;\n    }\n    showTrunks(trunk->prev);\n    printf(\"%s\", trunk->str);\n}", "doc_comment": "/* Helper function to print branches of the binary tree */"}, "code_tokens": ["void", "showTrunks", "(", ")", "{", "}", "Trunk", "trunk", "if", ";", ";", "*", "(", ")", "{", "}", "showTrunks", "printf", "trunk", "==", "NULL", "return", ";", "(", ")", "(", ",", ")", "trunk", "->", "prev", "\"", "%s", "\"", "trunk", "->", "str"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 57, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 21}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/utils/print_util.h#98-123", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/utils/print_util.h", "language": "Java"}, "method": {"name": "printTreeHelper", "qualified_name": "codes.c.utils.print_util.h#printTreeHelper", "start_line": 98, "end_line": 123, "signature": "printTreeHelper(TreeNode *node, Trunk *prev, bool isRight)", "original_code": "static void printTreeHelper(TreeNode *node, Trunk *prev, bool isRight) {\n    if (node == NULL) {\n        return;\n    }\n    char *prev_str = \"    \";\n    Trunk *trunk = newTrunk(prev, prev_str);\n    printTreeHelper(node->right, trunk, true);\n    if (prev == NULL) {\n        trunk->str = \"\u2014\u2014\u2014\";\n    } else if (isRight) {\n        trunk->str = \"/\u2014\u2014\u2014\";\n        prev_str = \"   |\";\n    } else {\n        trunk->str = \"\\\\\u2014\u2014\u2014\";\n        prev->str = prev_str;\n    }\n    showTrunks(trunk);\n    printf(\"%d\\n\", node->val);\n\n    if (prev != NULL) {\n        prev->str = prev_str;\n    }\n    trunk->str = \"   |\";\n\n    printTreeHelper(node->left, trunk, false);\n}", "doc_comment": "/* Help to print a binary tree, hide more details */"}, "code_tokens": ["void", "printTreeHelper", "static", "(", ",", ",", ")", "{", "}", "TreeNode", "node", "Trunk", "prev", "bool", "isRight", "if", ";", ";", ";", "if", "else", ";", ";", "if", ";", ";", "*", "*", "(", ")", "{", "}", "char", "*", "prev_str", "=", "Trunk", "*", "printTreeHelper", "(", ")", "{", "}", "if", "else", "showTrunks", "printf", "(", ")", "{", "}", "trunk", "->", "printTreeHelper", "node", "==", "NULL", "return", ";", "\"", "    ", "\"", "trunk", "=", "(", ",", "trunk", ",", "true", ")", "prev", "==", "NULL", ";", "(", "isRight", ")", "{", "}", "{", "}", "(", "trunk", ")", "(", ",", ")", "prev", "!=", "NULL", ";", "str", "=", "(", ",", "trunk", ",", "false", ")", "newTrunk", "node", "->", "right", "trunk", "->", ";", ";", ";", ";", "\"", "%d", "\\n", "\"", "node", "->", "val", "prev", "->", "\"", "   |", "\"", "node", "->", "left", "(", "prev", ",", "prev_str", ")", "str", "=", "trunk", "->", "prev_str", "=", "trunk", "->", "prev", "->", "str", "=", "prev_str", "\"", "\u2014\u2014\u2014", "\"", "str", "=", "\"", "   |", "\"", "str", "=", "str", "=", "prev_str", "\"", "/\u2014\u2014\u2014", "\"", "\"", "\\\\", "\u2014\u2014\u2014", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 240, "ast_depth": 11, "n_identifiers": 15, "vocab_size": 44}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/utils/print_util.h#126-128", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/utils/print_util.h", "language": "Java"}, "method": {"name": "printTree", "qualified_name": "codes.c.utils.print_util.h#printTree", "start_line": 126, "end_line": 128, "signature": "printTree(TreeNode *root)", "original_code": "static void printTree(TreeNode *root) {\n    printTreeHelper(root, NULL, false);\n}", "doc_comment": "/* Print a binary tree */"}, "code_tokens": ["void", "printTree", "static", "(", ")", "{", "}", "TreeNode", "root", ";", "*", "printTreeHelper", "(", "root", ",", "NULL", ",", "false", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 29, "ast_depth": 7, "n_identifiers": 4, "vocab_size": 15}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/c/utils/print_util.h#131-138", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/c/utils/print_util.h", "language": "Java"}, "method": {"name": "printHeap", "qualified_name": "codes.c.utils.print_util.h#printHeap", "start_line": 131, "end_line": 138, "signature": "printHeap(int arr[], int size)", "original_code": "static void printHeap(int arr[], int size) {\n    TreeNode *root;\n    printf(\"\u5806\u7684\u6570\u7ec4\u8868\u793a\uff1a\");\n    printArray(arr, size);\n    printf(\"\u5806\u7684\u6811\u72b6\u8868\u793a\uff1a\\n\");\n    root = arrayToTree(arr, size);\n    printTree(root);\n}", "doc_comment": "/* Print a Heap */"}, "code_tokens": ["void", "printHeap", "static", "(", ",", ")", "{", "}", "arr", "size", ";", ";", ";", ";", ";", ";", "int", "[", "]", "int", "TreeNode", "*", "root", "printf", "printArray", "printf", "root", "=", "printTree", "(", ")", "(", "arr", ",", "size", ")", "(", ")", "arrayToTree", "(", "root", ")", "\"", "\u5806\u7684\u6570\u7ec4\u8868\u793a\uff1a", "\"", "\"", "\u5806\u7684\u6811\u72b6\u8868\u793a\uff1a", "\\n", "\"", "(", "arr", ",", "size", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 84, "ast_depth": 8, "n_identifiers": 9, "vocab_size": 26}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/cpp/utils/print_utils.hpp#28-37", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/cpp/utils/print_utils.hpp", "language": "Java"}, "method": {"name": "strJoin", "qualified_name": "codes.cpp.utils.print_utils.hpp#strJoin", "start_line": 28, "end_line": 37, "signature": "strJoin(const string &delim, const T &vec)", "original_code": "template <typename T> string strJoin(const string &delim, const T &vec) {\n    ostringstream s;\n    for (const auto &i : vec) {\n        if (&i != &vec[0]) {\n            s << delim;\n        }\n        s << i;\n    }\n    return s.str();\n}", "doc_comment": "/* Concatenate a vector with a delim */"}, "code_tokens": ["strJoin", "template", "string", "(", ",", ")", "{", "}", "<", "typename", ">", "const", "string", "&", "delim", "const", "vec", "ostringstream", ";", "for", "(", "const", "auto", ":", "vec", ")", "return", ";", "T", "T", "&", "s", "&", "i", "{", "}", "s", ".", "str", "if", ";", "(", ")", "(", ")", "{", "}", "s", "<<", "i", "&", "i", "!=", ";", "&", "vec", "[", "0", "]", "s", "<<", "delim"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 93, "ast_depth": 10, "n_identifiers": 9, "vocab_size": 32}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/cpp/utils/print_utils.hpp#40-45", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/cpp/utils/print_utils.hpp", "language": "Java"}, "method": {"name": "strRepeat", "qualified_name": "codes.cpp.utils.print_utils.hpp#strRepeat", "start_line": 40, "end_line": 45, "signature": "strRepeat(string str, int n)", "original_code": "string strRepeat(string str, int n) {\n    ostringstream os;\n    for (int i = 0; i < n; i++)\n        os << str;\n    return os.str();\n}", "doc_comment": "/* Repeat a string for n times */"}, "code_tokens": ["string", "strRepeat", "(", ",", ")", "{", "}", "string", "str", "n", "ostringstream", ";", "for", "(", ";", ")", "return", ";", "int", "os", ";", "i", "<", "n", "i", "++", ";", "os", ".", "str", "int", "i", "=", "0", "os", "<<", "str", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 59, "ast_depth": 7, "n_identifiers": 5, "vocab_size": 22}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/cpp/utils/print_utils.hpp#60-62", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/cpp/utils/print_utils.hpp", "language": "Java"}, "method": {"name": "getVectorString", "qualified_name": "codes.cpp.utils.print_utils.hpp#getVectorString", "start_line": 60, "end_line": 62, "signature": "getVectorString(vector<T> &list)", "original_code": "template <typename T> string getVectorString(vector<T> &list) {\n    return \"[\" + strJoin(\", \", list) + \"]\";\n}", "doc_comment": "/* Get the Vector String object */"}, "code_tokens": ["getVectorString", "template", "string", "(", ")", "{", "}", "<", "typename", ">", "list", "return", ";", "T", "vector", "&", "+", "<", "T", ">", "+", "\"", "]", "\"", "\"", "[", "\"", "strJoin", "(", ",", "list", ")", "\"", ", ", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 55, "ast_depth": 10, "n_identifiers": 5, "vocab_size": 23}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/cpp/utils/print_utils.hpp#65-67", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/cpp/utils/print_utils.hpp", "language": "Java"}, "method": {"name": "printVector", "qualified_name": "codes.cpp.utils.print_utils.hpp#printVector", "start_line": 65, "end_line": 67, "signature": "printVector(vector<T> list)", "original_code": "template <typename T> void printVector(vector<T> list) {\n    cout << getVectorString(list) << '\\n';\n}", "doc_comment": "/* Print a vector */"}, "code_tokens": ["printVector", "template", "void", "(", ")", "{", "}", "<", "typename", ">", "list", ";", "T", "vector", "<<", "'\\n'", "<", "T", ">", "cout", "<<", "getVectorString", "(", "list", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 41, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 18}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/cpp/utils/print_utils.hpp#78-86", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/cpp/utils/print_utils.hpp", "language": "Java"}, "method": {"name": "printLinkedList", "qualified_name": "codes.cpp.utils.print_utils.hpp#printLinkedList", "start_line": 78, "end_line": 86, "signature": "printLinkedList(ListNode *head)", "original_code": "void printLinkedList(ListNode *head) {\n    vector<int> list;\n    while (head != nullptr) {\n        list.push_back(head->val);\n        head = head->next;\n    }\n\n    cout << strJoin(\" -> \", list) << '\\n';\n}", "doc_comment": "/* Print a linked list */"}, "code_tokens": ["void", "printLinkedList", "(", ")", "{", "}", "ListNode", "head", ";", "while", ";", "*", "vector", "list", "(", ")", "{", "}", "<<", "'\\n'", "<", ">", "head", "!=", "nullptr", ";", ";", "cout", "<<", "int", "list", ".", "push_back", "head", "=", "strJoin", "(", ")", "head", "->", "next", "(", ",", "list", ")", "head", "->", "val", "\"", " -> ", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 79, "ast_depth": 10, "n_identifiers": 9, "vocab_size": 31}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/cpp/utils/print_utils.hpp#102-109", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/cpp/utils/print_utils.hpp", "language": "Java"}, "method": {"name": "showTrunks", "qualified_name": "codes.cpp.utils.print_utils.hpp#showTrunks", "start_line": 102, "end_line": 109, "signature": "showTrunks(Trunk *p)", "original_code": "void showTrunks(Trunk *p) {\n    if (p == nullptr) {\n        return;\n    }\n\n    showTrunks(p->prev);\n    cout << p->str;\n}", "doc_comment": "/* Helper function to print branches of the binary tree */"}, "code_tokens": ["void", "showTrunks", "(", ")", "{", "}", "Trunk", "p", "if", ";", ";", "*", "(", ")", "{", "}", "showTrunks", "cout", "<<", "p", "==", "nullptr", "return", ";", "(", ")", "p", "->", "str", "p", "->", "prev"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 50, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 19}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/cpp/utils/print_utils.hpp#112-141", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/cpp/utils/print_utils.hpp", "language": "Java"}, "method": {"name": "printTree", "qualified_name": "codes.cpp.utils.print_utils.hpp#printTree", "start_line": 112, "end_line": 141, "signature": "printTree(TreeNode *root, Trunk *prev, bool isRight)", "original_code": "void printTree(TreeNode *root, Trunk *prev, bool isRight) {\n    if (root == nullptr) {\n        return;\n    }\n\n    string prev_str = \"    \";\n    Trunk trunk(prev, prev_str);\n\n    printTree(root->right, &trunk, true);\n\n    if (!prev) {\n        trunk.str = \"\u2014\u2014\u2014\";\n    } else if (isRight) {\n        trunk.str = \"/\u2014\u2014\u2014\";\n        prev_str = \"   |\";\n    } else {\n        trunk.str = \"\\\\\u2014\u2014\u2014\";\n        prev->str = prev_str;\n    }\n\n    showTrunks(&trunk);\n    cout << \" \" << root->val << endl;\n\n    if (prev) {\n        prev->str = prev_str;\n    }\n    trunk.str = \"   |\";\n\n    printTree(root->left, &trunk, false);\n}", "doc_comment": "/* Print a binary tree */"}, "code_tokens": ["void", "printTree", "(", ",", ",", ")", "{", ";", "}", "TreeNode", "root", "Trunk", "prev", "bool", "isRight", "if", "string", ";", "Trunk", "", ";", "if", "else", ";", ";", "if", ";", ";", "*", "*", "(", ")", "{", "}", "prev_str", "=", "trunk", "(", "prev", ",", "prev_str", ")", "printTree", "(", ")", "{", "}", "if", "else", "showTrunks", "<<", "(", "prev", ")", "{", "}", "=", "printTree", "root", "==", "nullptr", "return", ";", "\"", "    ", "\"", "(", ",", "trunk", ",", "true", ")", "!", "prev", ";", "(", "isRight", ")", "{", "}", "{", "}", "(", "trunk", ")", "cout", "<<", "root", "->", ";", "trunk", ".", "str", "\"", "   |", "\"", "(", ",", "trunk", ",", "false", ")", "root", "->", "right", "&", "=", ";", ";", ";", ";", "&", "\"", " ", "\"", "val", "<<", "endl", "prev", "->", "root", "->", "left", "&", "trunk", ".", "str", "\"", "\u2014\u2014\u2014", "\"", "=", "prev_str", "=", "=", "prev", "->", "str", "=", "prev_str", "trunk", ".", "str", "\"", "/\u2014\u2014\u2014", "\"", "\"", "   |", "\"", "trunk", ".", "str", "\"", "\\\\", "\u2014\u2014\u2014", "\"", "str", "=", "prev_str"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 235, "ast_depth": 10, "n_identifiers": 14, "vocab_size": 46}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/cpp/utils/print_utils.hpp#144-146", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/cpp/utils/print_utils.hpp", "language": "Java"}, "method": {"name": "printTree", "qualified_name": "codes.cpp.utils.print_utils.hpp#printTree", "start_line": 144, "end_line": 146, "signature": "printTree(TreeNode *root)", "original_code": "void printTree(TreeNode *root) {\n    printTree(root, nullptr, false);\n}", "doc_comment": "/* The interface of the tree printer */"}, "code_tokens": ["void", "printTree", "(", ")", "{", "}", "TreeNode", "root", ";", "*", "printTree", "(", "root", ",", "nullptr", ",", "false", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 27, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 13}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/cpp/utils/print_utils.hpp#149-168", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/cpp/utils/print_utils.hpp", "language": "Java"}, "method": {"name": "printStack", "qualified_name": "codes.cpp.utils.print_utils.hpp#printStack", "start_line": 149, "end_line": 168, "signature": "printStack(stack<T> stk)", "original_code": "template <typename T> void printStack(stack<T> stk) {\n    // Reverse the input stack\n    stack<T> tmp;\n    while (!stk.empty()) {\n        tmp.push(stk.top());\n        stk.pop();\n    }\n    // Generate the string to print\n    ostringstream s;\n    bool flag = true;\n    while (!tmp.empty()) {\n        if (flag) {\n            s << tmp.top();\n            flag = false;\n        } else\n            s << \", \" << tmp.top();\n        tmp.pop();\n    }\n    cout << \"[\" + s.str() + \"]\" << '\\n';\n}", "doc_comment": "/* Print a stack */"}, "code_tokens": ["printStack", "template", "void", "(", ")", "{", "// Reverse the input stack", "// Generate the string to print", "}", "<", "typename", ">", "stk", ";", "while", "ostringstream", ";", "bool", ";", "while", ";", "T", "stack", "stack", "tmp", "(", ")", "{", "}", "s", "flag", "=", "true", "(", ")", "{", "}", "<<", "'\\n'", "<", "T", ">", "<", "T", ">", "!", ";", ";", "!", "if", "else", ";", "cout", "<<", "stk", ".", "empty", "tmp", ".", "push", "stk", ".", "pop", "tmp", ".", "empty", "(", "flag", ")", "{", "}", ";", "tmp", ".", "pop", "+", "(", ")", "(", ")", "(", ")", "(", ")", ";", ";", "<<", "(", ")", "+", "\"", "]", "\"", "stk", ".", "top", "s", "<<", "flag", "=", "false", "s", "<<", "tmp", ".", "top", "\"", "[", "\"", "s", ".", "str", "(", ")", "tmp", ".", "top", "\"", ", ", "\"", "(", ")", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 192, "ast_depth": 12, "n_identifiers": 13, "vocab_size": 42}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/cpp/utils/print_utils.hpp#171-184", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/cpp/utils/print_utils.hpp", "language": "Java"}, "method": {"name": "printQueue", "qualified_name": "codes.cpp.utils.print_utils.hpp#printQueue", "start_line": 171, "end_line": 184, "signature": "printQueue(queue<T> queue)", "original_code": "template <typename T> void printQueue(queue<T> queue) {\n    // Generate the string to print\n    ostringstream s;\n    bool flag = true;\n    while (!queue.empty()) {\n        if (flag) {\n            s << queue.front();\n            flag = false;\n        } else\n            s << \", \" << queue.front();\n        queue.pop();\n    }\n    cout << \"[\" + s.str() + \"]\" << '\\n';\n}", "doc_comment": "/* Print a queue */"}, "code_tokens": ["printQueue", "template", "void", "(", ")", "{", "// Generate the string to print", "}", "<", "typename", ">", "queue", "ostringstream", ";", "bool", ";", "while", ";", "T", "queue", "s", "flag", "=", "true", "(", ")", "{", "}", "<<", "'\\n'", "<", "T", ">", "!", "if", "else", ";", "cout", "<<", "queue", ".", "empty", "(", "flag", ")", "{", "}", ";", "queue", ".", "pop", "+", "(", ")", ";", ";", "<<", "(", ")", "+", "\"", "]", "\"", "s", "<<", "flag", "=", "false", "s", "<<", "queue", ".", "front", "\"", "[", "\"", "s", ".", "str", "queue", ".", "front", "\"", ", ", "\"", "(", ")", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 139, "ast_depth": 12, "n_identifiers": 11, "vocab_size": 38}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/cpp/utils/print_utils.hpp#187-200", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/cpp/utils/print_utils.hpp", "language": "Java"}, "method": {"name": "printDeque", "qualified_name": "codes.cpp.utils.print_utils.hpp#printDeque", "start_line": 187, "end_line": 200, "signature": "printDeque(deque<T> deque)", "original_code": "template <typename T> void printDeque(deque<T> deque) {\n    // Generate the string to print\n    ostringstream s;\n    bool flag = true;\n    while (!deque.empty()) {\n        if (flag) {\n            s << deque.front();\n            flag = false;\n        } else\n            s << \", \" << deque.front();\n        deque.pop_front();\n    }\n    cout << \"[\" + s.str() + \"]\" << '\\n';\n}", "doc_comment": "/* Print a deque */"}, "code_tokens": ["printDeque", "template", "void", "(", ")", "{", "// Generate the string to print", "}", "<", "typename", ">", "deque", "ostringstream", ";", "bool", ";", "while", ";", "T", "deque", "s", "flag", "=", "true", "(", ")", "{", "}", "<<", "'\\n'", "<", "T", ">", "!", "if", "else", ";", "cout", "<<", "deque", ".", "empty", "(", "flag", ")", "{", "}", ";", "deque", ".", "pop_front", "+", "(", ")", ";", ";", "<<", "(", ")", "+", "\"", "]", "\"", "s", "<<", "flag", "=", "false", "s", "<<", "deque", ".", "front", "\"", "[", "\"", "s", ".", "str", "deque", ".", "front", "\"", ", ", "\"", "(", ")", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 139, "ast_depth": 12, "n_identifiers": 11, "vocab_size": 38}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/cpp/utils/print_utils.hpp#204-208", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/cpp/utils/print_utils.hpp", "language": "Java"}, "method": {"name": "printHashMap", "qualified_name": "codes.cpp.utils.print_utils.hpp#printHashMap", "start_line": 204, "end_line": 208, "signature": "printHashMap(unordered_map<TKey, TValue> map)", "original_code": "template <typename TKey, typename TValue> void printHashMap(unordered_map<TKey, TValue> map) {\n    for (auto kv : map) {\n        cout << kv.first << \" -> \" << kv.second << '\\n';\n    }\n}", "doc_comment": "// \u5b9a\u4e49\u6a21\u677f\u53c2\u6570 TKey \u548c TValue \uff0c\u7528\u4e8e\u6307\u5b9a\u952e\u503c\u5bf9\u7684\u7c7b\u578b"}, "code_tokens": ["printHashMap", "template", "void", "(", ")", "{", "}", "<", "typename", ",", "typename", ">", "map", "for", "(", "auto", "kv", ":", "map", ")", "TKey", "TValue", "unordered_map", "{", "}", "<", "TKey", ",", "TValue", ">", ";", "<<", "'\\n'", "<<", "<<", "kv", ".", "second", "cout", "<<", "\"", " -> ", "\"", "kv", ".", "first"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 68, "ast_depth": 12, "n_identifiers": 9, "vocab_size": 28}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/cpp/utils/print_utils.hpp#211-216", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/cpp/utils/print_utils.hpp", "language": "Java"}, "method": {"name": "Container", "qualified_name": "codes.cpp.utils.print_utils.hpp#Container", "start_line": 211, "end_line": 216, "signature": "Container(priority_queue<T, S, C> &pq)", "original_code": "template <typename T, typename S, typename C> S &Container(priority_queue<T, S, C> &pq) {\n    struct HackedQueue : private priority_queue<T, S, C> {\n        static S &Container(priority_queue<T, S, C> &pq) {\n            return pq.*&HackedQueue::c;\n        }\n    }", "doc_comment": "/* Expose the underlying storage of the priority_queue container */"}, "code_tokens": ["Container", "template", "S", "&", "(", ")", "{", "}", "<", "typename", ",", "typename", ",", "typename", ">", "pq", "struct", "HackedQueue", ":", "{", "}", "T", "S", "C", "priority_queue", "&", "private", "priority_queue", "S", "", ";", "<", "T", ",", "S", ",", "C", ">", "<", "T", ",", "S", ",", "C", ">", "static", "&", "Container", "&", "(", "&", "pq", ")", "pq", ".", "*", "HackedQueue", "::", "c", "priority_queue", "{", "return", "<", "T", ",", "S", ",", "C", ">"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 100, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 28}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/cpp/utils/print_utils.hpp#221-229", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/cpp/utils/print_utils.hpp", "language": "Java"}, "method": {"name": "printHeap", "qualified_name": "codes.cpp.utils.print_utils.hpp#printHeap", "start_line": 221, "end_line": 229, "signature": "printHeap(priority_queue<T, S, C> &heap)", "original_code": "template <typename T, typename S, typename C> void printHeap(priority_queue<T, S, C> &heap) {\n    vector<T> vec = Container(heap);\n    cout << \"\u5806\u7684\u6570\u7ec4\u8868\u793a\uff1a\";\n    printVector(vec);\n    cout << \"\u5806\u7684\u6811\u72b6\u8868\u793a\uff1a\" << endl;\n    TreeNode *root = vectorToTree(vec);\n    printTree(root);\n    freeMemoryTree(root);\n}", "doc_comment": "/* Print a Heap (PriorityQueue) */"}, "code_tokens": ["printHeap", "template", "void", "(", ")", "{", "}", "<", "typename", ",", "typename", ",", "typename", ">", "heap", ";", ";", ";", ";", ";", ";", ";", "T", "S", "C", "priority_queue", "&", "vector", "vec", "=", "cout", "<<", "printVector", "<<", "endl", "TreeNode", "*", "printTree", "freeMemoryTree", "<", "T", ",", "S", ",", "C", ">", "<", "T", ">", "Container", "\"", "\u5806\u7684\u6570\u7ec4\u8868\u793a\uff1a", "\"", "(", "vec", ")", "cout", "<<", "root", "=", "(", "root", ")", "(", "root", ")", "(", "heap", ")", "\"", "\u5806\u7684\u6811\u72b6\u8868\u793a\uff1a", "\"", "vectorToTree", "(", "vec", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 117, "ast_depth": 9, "n_identifiers": 16, "vocab_size": 35}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/csharp/utils/PrintUtil.cs#48-55", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/csharp/utils/PrintUtil.cs", "language": "Java"}, "method": {"name": "PrintLinkedList", "qualified_name": "codes.csharp.utils.PrintUtil.cs#PrintLinkedList", "start_line": 48, "end_line": 55, "signature": "PrintLinkedList(ListNode head)", "original_code": "public static void PrintLinkedList(ListNode head) {\n        List<string> list = new();\n        while (head != null) {\n            list.Add(head.val.ToString());\n            head = head.next;\n        }\n        Console.Write(string.Join(\" -> \", list));\n    }", "doc_comment": "/* Print a linked list */"}, "code_tokens": ["void", "PrintLinkedList", "public", "static", "(", ")", "{", "}", "ListNode", "head", ";", "while", ";", "List", "list", "=", "(", ")", "{", "}", "Console", ".", "Write", "<", "string", ">", "new", "head", "!=", "null", ";", ";", "(", ")", "", "(", ")", "list", ".", "Add", "head", "=", "string", ".", "Join", "(", ")", "head", ".", "next", "(", ",", "list", ")", ".", "ToString", "\"", " -> ", "\"", "head", ".", "val", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 96, "ast_depth": 11, "n_identifiers": 11, "vocab_size": 33}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/csharp/utils/PrintUtil.cs#62-64", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/csharp/utils/PrintUtil.cs", "language": "Java"}, "method": {"name": "PrintTree", "qualified_name": "codes.csharp.utils.PrintUtil.cs#PrintTree", "start_line": 62, "end_line": 64, "signature": "PrintTree(TreeNode? root)", "original_code": "public static void PrintTree(TreeNode? root) {\n        PrintTree(root, null, false);\n    }", "doc_comment": "/**\n     * The interface of the tree printer\n     * This tree printer is borrowed from TECHIE DELIGHT\n     * https://www.techiedelight.com/c-program-print-binary-tree/\n     */"}, "code_tokens": ["void", "PrintTree", "public", "static", "(", ")", "{", "}", "TreeNode", "root", ";", "?", "PrintTree", "(", "root", ",", "null", ",", "false", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 30, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 15}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/csharp/utils/PrintUtil.cs#67-96", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/csharp/utils/PrintUtil.cs", "language": "Java"}, "method": {"name": "PrintTree", "qualified_name": "codes.csharp.utils.PrintUtil.cs#PrintTree", "start_line": 67, "end_line": 96, "signature": "PrintTree(TreeNode? root, Trunk? prev, bool isRight)", "original_code": "public static void PrintTree(TreeNode? root, Trunk? prev, bool isRight) {\n        if (root == null) {\n            return;\n        }\n\n        string prev_str = \"    \";\n        Trunk trunk = new(prev, prev_str);\n\n        PrintTree(root.right, trunk, true);\n\n        if (prev == null) {\n            trunk.str = \"\u2014\u2014\u2014\";\n        } else if (isRight) {\n            trunk.str = \"/\u2014\u2014\u2014\";\n            prev_str = \"   |\";\n        } else {\n            trunk.str = \"\\\\\u2014\u2014\u2014\";\n            prev.str = prev_str;\n        }\n\n        ShowTrunks(trunk);\n        Console.WriteLine(\" \" + root.val);\n\n        if (prev != null) {\n            prev.str = prev_str;\n        }\n        trunk.str = \"   |\";\n\n        PrintTree(root.left, trunk, false);\n    }", "doc_comment": "/* Print a binary tree */"}, "code_tokens": ["void", "PrintTree", "public", "static", "(", ",", ",", ")", "{", "}", "TreeNode", "root", "Trunk", "prev", "bool", "isRight", "if", "string", ";", "Trunk", ";", ";", "if", "else", ";", ";", "if", ";", ";", "?", "?", "(", ")", "{", "}", "prev_str", "=", "trunk", "=", "PrintTree", "(", ")", "{", "}", "if", "else", "ShowTrunks", "Console", ".", "WriteLine", "(", ")", "{", "}", "=", "PrintTree", "root", "==", "null", "return", ";", "\"", "    ", "\"", "new", "(", ",", "trunk", ",", "true", ")", "prev", "==", "null", ";", "(", "isRight", ")", "{", "}", "{", "}", "(", "trunk", ")", "(", ")", "prev", "!=", "null", ";", "trunk", ".", "str", "\"", "   |", "\"", "(", ",", "trunk", ",", "false", ")", "", "(", "prev", ",", "prev_str", ")", "root", ".", "right", "=", ";", ";", ";", ";", "+", "=", "prev_str", "root", ".", "left", "trunk", ".", "str", "\"", "\u2014\u2014\u2014", "\"", "=", "prev_str", "=", "=", "=", "prev_str", "\"", " ", "\"", "root", ".", "val", "prev", ".", "str", "trunk", ".", "str", "\"", "/\u2014\u2014\u2014", "\"", "\"", "   |", "\"", "trunk", ".", "str", "\"", "\\\\", "\u2014\u2014\u2014", "\"", "prev", ".", "str"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 240, "ast_depth": 10, "n_identifiers": 13, "vocab_size": 47}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/csharp/utils/PrintUtil.cs#99-106", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/csharp/utils/PrintUtil.cs", "language": "Java"}, "method": {"name": "ShowTrunks", "qualified_name": "codes.csharp.utils.PrintUtil.cs#ShowTrunks", "start_line": 99, "end_line": 106, "signature": "ShowTrunks(Trunk? p)", "original_code": "public static void ShowTrunks(Trunk? p) {\n        if (p == null) {\n            return;\n        }\n\n        ShowTrunks(p.prev);\n        Console.Write(p.str);\n    }", "doc_comment": "/* Helper function to print branches of the binary tree */"}, "code_tokens": ["void", "ShowTrunks", "public", "static", "(", ")", "{", "}", "Trunk", "p", "if", ";", ";", "?", "(", ")", "{", "}", "ShowTrunks", "Console", ".", "Write", "p", "==", "null", "return", ";", "(", ")", "(", ")", "p", ".", "prev", "p", ".", "str"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 57, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 21}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/csharp/utils/PrintUtil.cs#109-112", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/csharp/utils/PrintUtil.cs", "language": "Java"}, "method": {"name": "foreach", "qualified_name": "codes.csharp.utils.PrintUtil.cs#foreach", "start_line": 109, "end_line": 112, "signature": "foreach(var kv in map.Keys)", "original_code": "<K, V>(Dictionary<K, V> map) where K : notnull {\n        foreach (var kv in map.Keys) {\n            Console.WriteLine(kv.ToString() + \" -> \" + map[kv]?.ToString());\n        }", "doc_comment": ""}, "code_tokens": ["where", "K", ":", "<", ",", ">", "(", ")", "notnull", "{", "", "K", "V", "map", "", "{", "}", "Dictionary", "foreach", ";", "<", "K", ",", "V", ">", "(", ")", "Console", ".", "WriteLine", "var", "kv", "in", "map", ".", "Keys", "(", ")", "+", "?", "+", "map", "[", "kv", "]", ".", "ToString", "kv", ".", "ToString", "\"", " -> ", "\"", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 88, "ast_depth": 12, "n_identifiers": 11, "vocab_size": 31}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/csharp/utils/PrintUtil.cs#116-123", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/csharp/utils/PrintUtil.cs", "language": "Java"}, "method": {"name": "PrintHeap", "qualified_name": "codes.csharp.utils.PrintUtil.cs#PrintHeap", "start_line": 116, "end_line": 123, "signature": "PrintHeap(Queue<int> queue)", "original_code": "public static void PrintHeap(Queue<int> queue) {\n        Console.Write(\"\u5806\u7684\u6570\u7ec4\u8868\u793a\uff1a\");\n        List<int> list = queue.ToList();\n        Console.WriteLine(string.Join(',', list));\n        Console.WriteLine(\"\u5806\u7684\u6811\u72b6\u8868\u793a\uff1a\");\n        TreeNode tree = TreeNode.ListToTree(list.Cast<int?>().ToList());\n        PrintTree(tree);\n    }", "doc_comment": "/* Print a heap */"}, "code_tokens": ["void", "PrintHeap", "public", "static", "(", ")", "{", "}", "queue", ";", ";", ";", ";", "TreeNode", ";", ";", "Queue", "Console", ".", "Write", "List", "list", "=", "Console", ".", "WriteLine", "Console", ".", "WriteLine", "tree", "=", "PrintTree", "<", ">", "(", ")", "<", ">", "queue", ".", "ToList", "(", ")", "(", ")", "TreeNode", ".", "ListToTree", "(", "tree", ")", "int", "\"", "\u5806\u7684\u6570\u7ec4\u8868\u793a\uff1a", "\"", "int", "(", ")", "string", ".", "Join", "\"", "\u5806\u7684\u6811\u72b6\u8868\u793a\uff1a", "\"", "(", ")", "(", "','", ",", "list", ")", ".", "ToList", "(", ")", "(", ")", "list", ".", "Cast", "<", ">", "int", "?"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 129, "ast_depth": 12, "n_identifiers": 13, "vocab_size": 35}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/csharp/utils/PrintUtil.cs#126-137", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/csharp/utils/PrintUtil.cs", "language": "Java"}, "method": {"name": "PrintHeap", "qualified_name": "codes.csharp.utils.PrintUtil.cs#PrintHeap", "start_line": 126, "end_line": 137, "signature": "PrintHeap(PriorityQueue<int, int> queue)", "original_code": "public static void PrintHeap(PriorityQueue<int, int> queue) {\n        var newQueue = new PriorityQueue<int, int>(queue.UnorderedItems, queue.Comparer);\n        Console.Write(\"\u5806\u7684\u6570\u7ec4\u8868\u793a\uff1a\");\n        List<int> list = new();\n        while (newQueue.TryDequeue(out int element, out _)) {\n            list.Add(element);\n        }\n        Console.WriteLine(\"\u5806\u7684\u6811\u72b6\u8868\u793a\uff1a\");\n        Console.WriteLine(string.Join(',', list.ToList()));\n        TreeNode tree = TreeNode.ListToTree(list.Cast<int?>().ToList());\n        PrintTree(tree);\n    }", "doc_comment": "/* Print a PriorityQueue */"}, "code_tokens": ["void", "PrintHeap", "public", "static", "(", ")", "{", "}", "queue", "var", ";", ";", ";", "while", ";", ";", "TreeNode", ";", ";", "PriorityQueue", "newQueue", "=", "Console", ".", "Write", "List", "list", "=", "(", ")", "{", "}", "Console", ".", "WriteLine", "Console", ".", "WriteLine", "tree", "=", "PrintTree", "<", ",", ">", "new", "(", ")", "<", ">", "new", "newQueue", ".", "TryDequeue", ";", "(", ")", "(", ")", "TreeNode", ".", "ListToTree", "(", "tree", ")", "int", "int", "PriorityQueue", "(", ",", ")", "\"", "\u5806\u7684\u6570\u7ec4\u8868\u793a\uff1a", "\"", "int", "", "(", ")", "(", "element", ")", "list", ".", "Add", "\"", "\u5806\u7684\u6811\u72b6\u8868\u793a\uff1a", "\"", "string", ".", "Join", "(", ")", "<", ",", ">", "queue", ".", "UnorderedItems", "queue", ".", "Comparer", "out", "int", ",", "out", "_", "(", "element", ")", "(", "','", ",", ")", ".", "ToList", "int", "int", "list", ".", "ToList", "(", ")", "(", ")", "(", ")", "list", ".", "Cast", "<", ">", "int", "?"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 201, "ast_depth": 12, "n_identifiers": 20, "vocab_size": 47}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/java/utils/PrintUtil.java#24-30", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/java/utils/PrintUtil.java", "language": "Java"}, "method": {"name": "printMatrix", "qualified_name": "codes.java.utils.PrintUtil#printMatrix", "start_line": 24, "end_line": 30, "signature": "printMatrix(T[][] matrix)", "original_code": "public static <T> void printMatrix(T[][] matrix) {\n        System.out.println(\"[\");\n        for (T[] row : matrix) {\n            System.out.println(\"  \" + row + \",\");\n        }\n        System.out.println(\"]\");\n    }", "doc_comment": "/* Print a matrix (Array) */"}, "code_tokens": ["void", "printMatrix", "public", "static", "<", ">", "(", ")", "{", "}", "T", "matrix", ";", "for", "(", "row", ":", "matrix", ")", ";", "T", ".", "println", "T", "{", "}", ".", "println", "[", "]", "[", "]", "System", ".", "out", "(", ")", "[", "]", ";", "System", ".", "out", "(", ")", "\"", "[", "\"", ".", "println", "\"", "]", "\"", "System", ".", "out", "(", ")", "+", "+", "row", "\"", ",", "\"", "\"", "  ", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 99, "ast_depth": 12, "n_identifiers": 6, "vocab_size": 26}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/java/utils/PrintUtil.java#33-39", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/java/utils/PrintUtil.java", "language": "Java"}, "method": {"name": "printMatrix", "qualified_name": "codes.java.utils.PrintUtil#printMatrix", "start_line": 33, "end_line": 39, "signature": "printMatrix(List<List<T>> matrix)", "original_code": "public static <T> void printMatrix(List<List<T>> matrix) {\n        System.out.println(\"[\");\n        for (List<T> row : matrix) {\n            System.out.println(\"  \" + row + \",\");\n        }\n        System.out.println(\"]\");\n    }", "doc_comment": "/* Print a matrix (List) */"}, "code_tokens": ["void", "printMatrix", "public", "static", "<", ">", "(", ")", "{", "}", "T", "matrix", ";", "for", "(", "row", ":", "matrix", ")", ";", "List", ".", "println", "List", "{", "}", ".", "println", "<", ">", "System", ".", "out", "(", ")", "<", "T", ">", ";", "System", ".", "out", "(", ")", "List", "\"", "[", "\"", ".", "println", "\"", "]", "\"", "<", "T", ">", "System", ".", "out", "(", ")", "+", "+", "row", "\"", ",", "\"", "\"", "  ", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 104, "ast_depth": 12, "n_identifiers": 6, "vocab_size": 27}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/java/utils/PrintUtil.java#42-49", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/java/utils/PrintUtil.java", "language": "Java"}, "method": {"name": "printLinkedList", "qualified_name": "codes.java.utils.PrintUtil#printLinkedList", "start_line": 42, "end_line": 49, "signature": "printLinkedList(ListNode head)", "original_code": "public static void printLinkedList(ListNode head) {\n        List<String> list = new ArrayList<>();\n        while (head != null) {\n            list.add(String.valueOf(head.val));\n            head = head.next;\n        }\n        System.out.println(String.join(\" -> \", list));\n    }", "doc_comment": "/* Print a linked list */"}, "code_tokens": ["void", "printLinkedList", "public", "static", "(", ")", "{", "}", "ListNode", "head", ";", "while", ";", "List", "list", "=", "(", ")", "{", "}", ".", "println", "<", "String", ">", "new", "head", "!=", "null", ";", ";", "System", ".", "out", "(", ")", "ArrayList", "(", ")", "list", ".", "add", "head", "=", "String", ".", "join", "<", ">", "(", ")", "head", ".", "next", "(", ",", "list", ")", "String", ".", "valueOf", "\"", " -> ", "\"", "(", ")", "head", ".", "val"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 103, "ast_depth": 12, "n_identifiers": 12, "vocab_size": 34}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/java/utils/PrintUtil.java#56-58", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/java/utils/PrintUtil.java", "language": "Java"}, "method": {"name": "printTree", "qualified_name": "codes.java.utils.PrintUtil#printTree", "start_line": 56, "end_line": 58, "signature": "printTree(TreeNode root)", "original_code": "public static void printTree(TreeNode root) {\n        printTree(root, null, false);\n    }", "doc_comment": "/**\n     * The interface of the tree printer\n     * This tree printer is borrowed from TECHIE DELIGHT\n     * https://www.techiedelight.com/c-program-print-binary-tree/\n     */"}, "code_tokens": ["void", "printTree", "public", "static", "(", ")", "{", "}", "TreeNode", "root", ";", "printTree", "(", "root", ",", "null", ",", "false", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 28, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 14}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/java/utils/PrintUtil.java#61-90", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/java/utils/PrintUtil.java", "language": "Java"}, "method": {"name": "printTree", "qualified_name": "codes.java.utils.PrintUtil#printTree", "start_line": 61, "end_line": 90, "signature": "printTree(TreeNode root, Trunk prev, boolean isRight)", "original_code": "public static void printTree(TreeNode root, Trunk prev, boolean isRight) {\n        if (root == null) {\n            return;\n        }\n\n        String prev_str = \"    \";\n        Trunk trunk = new Trunk(prev, prev_str);\n\n        printTree(root.right, trunk, true);\n\n        if (prev == null) {\n            trunk.str = \"\u2014\u2014\u2014\";\n        } else if (isRight) {\n            trunk.str = \"/\u2014\u2014\u2014\";\n            prev_str = \"   |\";\n        } else {\n            trunk.str = \"\\\\\u2014\u2014\u2014\";\n            prev.str = prev_str;\n        }\n\n        showTrunks(trunk);\n        System.out.println(\" \" + root.val);\n\n        if (prev != null) {\n            prev.str = prev_str;\n        }\n        trunk.str = \"   |\";\n\n        printTree(root.left, trunk, false);\n    }", "doc_comment": "/* Print a binary tree */"}, "code_tokens": ["void", "printTree", "public", "static", "(", ",", ",", ")", "{", "}", "TreeNode", "root", "Trunk", "prev", "boolean", "isRight", "if", "String", ";", "Trunk", ";", ";", "if", "else", ";", ";", "if", ";", ";", "(", ")", "{", "}", "prev_str", "=", "trunk", "=", "printTree", "(", ")", "{", "}", "if", "else", "showTrunks", ".", "println", "(", ")", "{", "}", "=", "printTree", "root", "==", "null", "return", ";", "\"", "    ", "\"", "new", "Trunk", "(", ",", "trunk", ",", "true", ")", "prev", "==", "null", ";", "(", "isRight", ")", "{", "}", "{", "}", "(", "trunk", ")", "System", ".", "out", "(", ")", "prev", "!=", "null", ";", "trunk", ".", "str", "\"", "   |", "\"", "(", ",", "trunk", ",", "false", ")", "(", "prev", ",", "prev_str", ")", "root", ".", "right", "=", ";", ";", ";", ";", "+", "=", "prev_str", "root", ".", "left", "trunk", ".", "str", "\"", "\u2014\u2014\u2014", "\"", "=", "prev_str", "=", "=", "=", "prev_str", "\"", " ", "\"", "root", ".", "val", "prev", ".", "str", "trunk", ".", "str", "\"", "/\u2014\u2014\u2014", "\"", "\"", "   |", "\"", "trunk", ".", "str", "\"", "\\\\", "\u2014\u2014\u2014", "\"", "prev", ".", "str"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 238, "ast_depth": 10, "n_identifiers": 14, "vocab_size": 46}}
{"dataset_split": "train", "example_id": "hello-algo@355cc3a:codes/java/utils/PrintUtil.java#93-100", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "355cc3a6b1003b1a29f6d174367eeff69518ae51", "license": null}, "file": {"path": "codes/java/utils/PrintUtil.java", "language": "Java"}, "method": {"name": "showTrunks", "qualified_name": "codes.java.utils.PrintUtil#showTrunks", "start_line": 93, "end_line": 100, "signature": "showTrunks(Trunk p)", "original_code": "public static void showTrunks(Trunk p) {\n        if (p == null) {\n            return;\n        }\n\n        showTrunks(p.prev);\n        System.out.print(p.str);\n    }", "doc_comment": "/* Helper function to print branches of the binary tree */"}, "code_tokens": ["void", "showTrunks", "public", "static", "(", ")", "{", "}", "Trunk", "p", "if", ";", ";", "(", ")", "{", "}", "showTrunks", ".", "print", "p", "==", "null", "return", ";", "(", ")", "System", ".", "out", "(", ")", "p", ".", "prev", "p", ".", "str"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 58, "ast_depth": 8, "n_identifiers": 7, "vocab_size": 21}}
