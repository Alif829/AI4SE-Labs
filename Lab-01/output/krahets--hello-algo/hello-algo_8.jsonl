{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_divide_and_conquer/hanota.c#39-42", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_divide_and_conquer/hanota.c", "language": "Java"}, "method": {"name": "solveHanota", "qualified_name": "codes.c.chapter_divide_and_conquer.hanota.c#solveHanota", "start_line": 39, "end_line": 42, "signature": "solveHanota(int *A, int *ASize, int *B, int *BSize, int *C, int *CSize)", "original_code": "void solveHanota(int *A, int *ASize, int *B, int *BSize, int *C, int *CSize) {\n    // \u5c06 A \u9876\u90e8 n \u4e2a\u5706\u76d8\u501f\u52a9 B \u79fb\u5230 C\n    dfs(*ASize, A, ASize, B, BSize, C, CSize);\n}", "doc_comment": "/* \u6c42\u89e3\u6c49\u8bfa\u5854\u95ee\u9898 */"}, "code_tokens": ["void", "solveHanota", "(", ",", ",", ",", ",", ",", ")", "{", "// \u5c06 A \u9876\u90e8 n \u4e2a\u5706\u76d8\u501f\u52a9 B \u79fb\u5230 C", "}", "A", "ASize", "B", "BSize", "C", "CSize", ";", "int", "*", "int", "*", "int", "*", "int", "*", "int", "*", "int", "*", "dfs", "(", "ASize", ",", "A", ",", "ASize", ",", "B", ",", "BSize", ",", "C", ",", "CSize", ")", "*"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 74, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 18}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_divide_and_conquer/hanota.c#45-74", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_divide_and_conquer/hanota.c", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.c.chapter_divide_and_conquer.hanota.c#main", "start_line": 45, "end_line": 74, "signature": "main()", "original_code": "int main() {\n    // \u5217\u8868\u5c3e\u90e8\u662f\u67f1\u5b50\u9876\u90e8\n    int a[] = {5, 4, 3, 2, 1};\n    int b[MAX_SIZE] = {0};\n    int c[MAX_SIZE] = {0};\n\n    int ASize = sizeof(a) / sizeof(a[0]);\n    int BSize = 0;\n    int CSize = 0;\n\n    printf(\"\\n\u521d\u59cb\u72b6\u6001\u4e0b\uff1a\");\n    printf(\"\\nA = \");\n    printArray(a, ASize);\n    printf(\"B = \");\n    printArray(b, BSize);\n    printf(\"C = \");\n    printArray(c, CSize);\n\n    solveHanota(a, &ASize, b, &BSize, c, &CSize);\n\n    printf(\"\\n\u5706\u76d8\u79fb\u52a8\u5b8c\u6210\u540e\uff1a\");\n    printf(\"A = \");\n    printArray(a, ASize);\n    printf(\"B = \");\n    printArray(b, BSize);\n    printf(\"C = \");\n    printArray(c, CSize);\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "// \u5217\u8868\u5c3e\u90e8\u662f\u67f1\u5b50\u9876\u90e8", "}", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "return", "0", ";", "int", "a", "=", "int", "b", "=", "int", "c", "=", "int", "ASize", "=", "int", "BSize", "=", "0", "int", "CSize", "=", "0", "printf", "printf", "printArray", "printf", "printArray", "printf", "printArray", "solveHanota", "printf", "printf", "printArray", "printf", "printArray", "printf", "printArray", "[", "]", "{", "5", ",", "4", ",", "3", ",", "2", ",", "1", "}", "[", "]", "{", "0", "}", "[", "]", "{", "0", "}", "/", "(", ")", "(", ")", "(", "a", ",", "ASize", ")", "(", ")", "(", "b", ",", "BSize", ")", "(", ")", "(", "c", ",", "CSize", ")", "(", "a", ",", "ASize", ",", "b", ",", "BSize", ",", "c", ",", "CSize", ")", "(", ")", "(", ")", "(", "a", ",", "ASize", ")", "(", ")", "(", "b", ",", "BSize", ")", "(", ")", "(", "c", ",", "CSize", ")", "MAX_SIZE", "MAX_SIZE", "sizeof", "sizeof", "\"", "\\n", "\u521d\u59cb\u72b6\u6001\u4e0b\uff1a", "\"", "\"", "\\n", "A = ", "\"", "\"", "B = ", "\"", "\"", "C = ", "\"", "&", "&", "&", "\"", "\\n", "\u5706\u76d8\u79fb\u52a8\u5b8c\u6210\u540e\uff1a", "\"", "\"", "A = ", "\"", "\"", "B = ", "\"", "\"", "C = ", "\"", "(", "a", ")", "(", ")", "a", "[", "0", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 286, "ast_depth": 10, "n_identifiers": 12, "vocab_size": 39}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_dynamic_programming/climbing_stairs_backtrack.c#10-24", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_dynamic_programming/climbing_stairs_backtrack.c", "language": "Java"}, "method": {"name": "backtrack", "qualified_name": "codes.c.chapter_dynamic_programming.climbing_stairs_backtrack.c#backtrack", "start_line": 10, "end_line": 24, "signature": "backtrack(int *choices, int state, int n, int *res, int len)", "original_code": "void backtrack(int *choices, int state, int n, int *res, int len) {\r\n    // \u5f53\u722c\u5230\u7b2c n \u9636\u65f6\uff0c\u65b9\u6848\u6570\u91cf\u52a0 1\r\n    if (state == n)\r\n        res[0]++;\r\n    // \u904d\u5386\u6240\u6709\u9009\u62e9\r\n    for (int i = 0; i < len; i++) {\r\n        int choice = choices[i];\r\n        // \u526a\u679d\uff1a\u4e0d\u5141\u8bb8\u8d8a\u8fc7\u7b2c n \u9636\r\n        if (state + choice > n)\r\n            continue;\r\n        // \u5c1d\u8bd5\uff1a\u505a\u51fa\u9009\u62e9\uff0c\u66f4\u65b0\u72b6\u6001\r\n        backtrack(choices, state + choice, n, res, len);\r\n        // \u56de\u9000\r\n    }\r\n}", "doc_comment": "/* \u56de\u6eaf */"}, "code_tokens": ["void", "backtrack", "(", ",", ",", ",", ",", ")", "{", "// \u5f53\u722c\u5230\u7b2c n \u9636\u65f6\uff0c\u65b9\u6848\u6570\u91cf\u52a0 1\r", "// \u904d\u5386\u6240\u6709\u9009\u62e9\r", "}", "choices", "state", "n", "res", "len", "if", "for", "(", ";", ")", "int", "*", "int", "int", "int", "*", "int", "(", ")", ";", ";", "i", "<", "len", "i", "++", "{", "// \u526a\u679d\uff1a\u4e0d\u5141\u8bb8\u8d8a\u8fc7\u7b2c n \u9636\r", "// \u5c1d\u8bd5\uff1a\u505a\u51fa\u9009\u62e9\uff0c\u66f4\u65b0\u72b6\u6001\r", "// \u56de\u9000\r", "}", "state", "==", "n", "++", "int", "i", "=", "0", ";", "if", ";", "res", "[", "0", "]", "int", "choice", "=", "(", ")", "continue", ";", "backtrack", "choices", "[", "i", "]", ">", "n", "(", "choices", ",", ",", "n", ",", "res", ",", "len", ")", "state", "+", "choice", "state", "+", "choice"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 130, "ast_depth": 10, "n_identifiers": 8, "vocab_size": 34}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_dynamic_programming/climbing_stairs_backtrack.c#27-37", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_dynamic_programming/climbing_stairs_backtrack.c", "language": "Java"}, "method": {"name": "climbingStairsBacktrack", "qualified_name": "codes.c.chapter_dynamic_programming.climbing_stairs_backtrack.c#climbingStairsBacktrack", "start_line": 27, "end_line": 37, "signature": "climbingStairsBacktrack(int n)", "original_code": "int climbingStairsBacktrack(int n) {\r\n    int choices[2] = {1, 2}; // \u53ef\u9009\u62e9\u5411\u4e0a\u722c 1 \u9636\u6216 2 \u9636\r\n    int state = 0;           // \u4ece\u7b2c 0 \u9636\u5f00\u59cb\u722c\r\n    int *res = (int *)malloc(sizeof(int));\r\n    *res = 0; // \u4f7f\u7528 res[0] \u8bb0\u5f55\u65b9\u6848\u6570\u91cf\r\n    int len = sizeof(choices) / sizeof(int);\r\n    backtrack(choices, state, n, res, len);\r\n    int result = *res;\r\n    free(res);\r\n    return result;\r\n}", "doc_comment": "/* \u722c\u697c\u68af\uff1a\u56de\u6eaf */"}, "code_tokens": ["climbingStairsBacktrack", "int", "(", ")", "{", "// \u53ef\u9009\u62e9\u5411\u4e0a\u722c 1 \u9636\u6216 2 \u9636\r", "// \u4ece\u7b2c 0 \u9636\u5f00\u59cb\u722c\r", "// \u4f7f\u7528 res[0] \u8bb0\u5f55\u65b9\u6848\u6570\u91cf\r", "}", "n", ";", ";", ";", "*", ";", ";", ";", ";", ";", "return", "result", ";", "int", "int", "choices", "=", "int", "state", "=", "0", "int", "*", "res", "=", "res", "=", "0", "int", "len", "=", "backtrack", "int", "result", "=", "res", "free", "[", "]", "{", "1", ",", "2", "}", "(", ")", "/", "(", "choices", ",", "state", ",", "n", ",", "res", ",", "len", ")", "*", "(", "res", ")", "2", "int", "*", "malloc", "sizeof", "sizeof", "(", ")", "(", "choices", ")", "(", ")", "sizeof", "(", ")", "int", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 142, "ast_depth": 13, "n_identifiers": 11, "vocab_size": 30}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_dynamic_programming/climbing_stairs_backtrack.c#40-47", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_dynamic_programming/climbing_stairs_backtrack.c", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.c.chapter_dynamic_programming.climbing_stairs_backtrack.c#main", "start_line": 40, "end_line": 47, "signature": "main()", "original_code": "int main() {\r\n    int n = 9;\r\n\r\n    int res = climbingStairsBacktrack(n);\r\n    printf(\"\u722c %d \u9636\u697c\u68af\u5171\u6709 %d \u79cd\u65b9\u6848\\n\", n, res);\r\n\r\n    return 0;\r\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "}", ";", ";", ";", "return", "0", ";", "int", "n", "=", "9", "int", "res", "=", "printf", "climbingStairsBacktrack", "(", ",", "n", ",", "res", ")", "(", "n", ")", "\"", "\u722c %d \u9636\u697c\u68af\u5171\u6709 %d \u79cd\u65b9\u6848", "\\n", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 52, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 19}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_dynamic_programming/coin_change.c#10-12", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_dynamic_programming/coin_change.c", "language": "Java"}, "method": {"name": "myMin", "qualified_name": "codes.c.chapter_dynamic_programming.coin_change.c#myMin", "start_line": 10, "end_line": 12, "signature": "myMin(int a, int b)", "original_code": "int myMin(int a, int b) {\n    return a < b ? a : b;\n}", "doc_comment": "/* \u6c42\u6700\u5c0f\u503c */"}, "code_tokens": ["myMin", "int", "(", ",", ")", "{", "}", "a", "b", "return", ";", "int", "int", "?", "a", ":", "b", "a", "<", "b"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 32, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 14}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_dynamic_programming/coin_change.c#15-46", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_dynamic_programming/coin_change.c", "language": "Java"}, "method": {"name": "coinChangeDP", "qualified_name": "codes.c.chapter_dynamic_programming.coin_change.c#coinChangeDP", "start_line": 15, "end_line": 46, "signature": "coinChangeDP(int coins[], int amt, int coinsSize)", "original_code": "int coinChangeDP(int coins[], int amt, int coinsSize) {\n    int n = coinsSize;\n    int MAX = amt + 1;\n    // \u521d\u59cb\u5316 dp \u8868\n    int **dp = malloc((n + 1) * sizeof(int *));\n    for (int i = 0; i <= n; i++) {\n        dp[i] = calloc(amt + 1, sizeof(int));\n    }\n    // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c\u9996\u5217\n    for (int a = 1; a <= amt; a++) {\n        dp[0][a] = MAX;\n    }\n    // \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\u548c\u5217\n    for (int i = 1; i <= n; i++) {\n        for (int a = 1; a <= amt; a++) {\n            if (coins[i - 1] > a) {\n                // \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i\n                dp[i][a] = dp[i - 1][a];\n            } else {\n                // \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5c0f\u503c\n                dp[i][a] = myMin(dp[i - 1][a], dp[i][a - coins[i - 1]] + 1);\n            }\n        }\n    }\n    int res = dp[n][amt] != MAX ? dp[n][amt] : -1;\n    // \u91ca\u653e\u5185\u5b58\n    for (int i = 0; i <= n; i++) {\n        free(dp[i]);\n    }\n    free(dp);\n    return res;\n}", "doc_comment": "/* \u96f6\u94b1\u5151\u6362\uff1a\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["coinChangeDP", "int", "(", ",", ",", ")", "{", "// \u521d\u59cb\u5316 dp \u8868", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c\u9996\u5217", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\u548c\u5217", "// \u91ca\u653e\u5185\u5b58", "}", "coins", "amt", "coinsSize", ";", ";", ";", "for", "(", ";", ")", "for", "(", ";", ")", "for", "(", ";", ")", ";", "for", "(", ";", ")", ";", "return", "res", ";", "int", "[", "]", "int", "int", "int", "n", "=", "coinsSize", "int", "MAX", "=", "int", "*", "*", "dp", "=", ";", "i", "<=", "n", "i", "++", "{", "}", ";", "a", "<=", "amt", "a", "++", "{", "}", ";", "i", "<=", "n", "i", "++", "{", "}", "int", "res", "=", ";", "i", "<=", "n", "i", "++", "{", "}", "free", "amt", "+", "1", "malloc", "int", "i", "=", "0", ";", "int", "a", "=", "1", ";", "int", "i", "=", "1", "for", "(", ";", ")", "?", ":", "int", "i", "=", "0", ";", "(", "dp", ")", "(", ")", "=", "=", "MAX", ";", "a", "<=", "amt", "a", "++", "{", "}", "!=", "MAX", "[", "amt", "]", "-", "1", "free", "*", "dp", "[", "i", "]", "calloc", "[", "a", "]", "int", "a", "=", "1", "if", "else", "[", "amt", "]", "dp", "[", "n", "]", "(", ")", "(", ")", "sizeof", "(", ",", ")", "dp", "[", "0", "]", "(", ")", "{", "// \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i", "}", "{", "// \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5c0f\u503c", "}", "dp", "[", "n", "]", "dp", "[", "i", "]", "n", "+", "1", "(", ")", "amt", "+", "1", "sizeof", ">", "a", ";", ";", "*", "(", ")", "coins", "[", "]", "=", "=", "int", "i", "-", "1", "[", "a", "]", "[", "a", "]", "[", "a", "]", "myMin", "int", "dp", "[", "i", "]", "dp", "[", "]", "dp", "[", "i", "]", "(", ",", ")", "i", "-", "1", "[", "a", "]", "+", "1", "dp", "[", "]", "[", "]", "i", "-", "1", "dp", "[", "i", "]", "a", "-", "coins", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 401, "ast_depth": 19, "n_identifiers": 15, "vocab_size": 46}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_dynamic_programming/coin_change.c#49-71", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_dynamic_programming/coin_change.c", "language": "Java"}, "method": {"name": "coinChangeDPComp", "qualified_name": "codes.c.chapter_dynamic_programming.coin_change.c#coinChangeDPComp", "start_line": 49, "end_line": 71, "signature": "coinChangeDPComp(int coins[], int amt, int coinsSize)", "original_code": "int coinChangeDPComp(int coins[], int amt, int coinsSize) {\n    int n = coinsSize;\n    int MAX = amt + 1;\n    // \u521d\u59cb\u5316 dp \u8868\n    int *dp = calloc(amt + 1, sizeof(int));\n    dp[0] = 0;\n    // \u72b6\u6001\u8f6c\u79fb\n    for (int i = 1; i <= n; i++) {\n        for (int a = 1; a <= amt; a++) {\n            if (coins[i - 1] > a) {\n                // \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i\n                dp[a] = dp[a];\n            } else {\n                // \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5c0f\u503c\n                dp[a] = myMin(dp[a], dp[a - coins[i - 1]] + 1);\n            }\n        }\n    }\n    int res = dp[amt] != MAX ? dp[amt] : -1;\n    // \u91ca\u653e\u5185\u5b58\n    free(dp);\n    return res;\n}", "doc_comment": "/* \u96f6\u94b1\u5151\u6362\uff1a\u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["coinChangeDPComp", "int", "(", ",", ",", ")", "{", "// \u521d\u59cb\u5316 dp \u8868", "// \u72b6\u6001\u8f6c\u79fb", "// \u91ca\u653e\u5185\u5b58", "}", "coins", "amt", "coinsSize", ";", ";", ";", ";", "for", "(", ";", ")", ";", ";", "return", "res", ";", "int", "[", "]", "int", "int", "int", "n", "=", "coinsSize", "int", "MAX", "=", "int", "*", "dp", "=", "=", "0", ";", "i", "<=", "n", "i", "++", "{", "}", "int", "res", "=", "free", "amt", "+", "1", "calloc", "dp", "[", "0", "]", "int", "i", "=", "1", "for", "(", ";", ")", "?", ":", "(", "dp", ")", "(", ",", ")", ";", "a", "<=", "amt", "a", "++", "{", "}", "!=", "MAX", "dp", "[", "amt", "]", "-", "1", "amt", "+", "1", "sizeof", "int", "a", "=", "1", "if", "else", "dp", "[", "amt", "]", "(", ")", "(", ")", "{", "// \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i", "}", "{", "// \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5c0f\u503c", "}", ">", "a", ";", ";", "int", "coins", "[", "]", "=", "=", "i", "-", "1", "dp", "[", "a", "]", "dp", "[", "a", "]", "dp", "[", "a", "]", "myMin", "(", ",", ")", "dp", "[", "a", "]", "+", "1", "dp", "[", "]", "a", "-", "coins", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 248, "ast_depth": 19, "n_identifiers": 14, "vocab_size": 44}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_dynamic_programming/coin_change.c#74-88", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_dynamic_programming/coin_change.c", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.c.chapter_dynamic_programming.coin_change.c#main", "start_line": 74, "end_line": 88, "signature": "main()", "original_code": "int main() {\n    int coins[] = {1, 2, 5};\n    int coinsSize = sizeof(coins) / sizeof(coins[0]);\n    int amt = 4;\n\n    // \u52a8\u6001\u89c4\u5212\n    int res = coinChangeDP(coins, amt, coinsSize);\n    printf(\"\u51d1\u5230\u76ee\u6807\u91d1\u989d\u6240\u9700\u7684\u6700\u5c11\u786c\u5e01\u6570\u91cf\u4e3a %d\\n\", res);\n\n    // \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212\n    res = coinChangeDPComp(coins, amt, coinsSize);\n    printf(\"\u51d1\u5230\u76ee\u6807\u91d1\u989d\u6240\u9700\u7684\u6700\u5c11\u786c\u5e01\u6570\u91cf\u4e3a %d\\n\", res);\n\n    return 0;\n}", "doc_comment": "/* Driver code */"}, "code_tokens": ["main", "int", "(", ")", "{", "// \u52a8\u6001\u89c4\u5212", "// \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212", "}", ";", ";", ";", ";", ";", ";", ";", "return", "0", ";", "int", "coins", "=", "int", "coinsSize", "=", "int", "amt", "=", "4", "int", "res", "=", "printf", "res", "=", "printf", "[", "]", "{", "1", ",", "2", ",", "5", "}", "/", "coinChangeDP", "(", ",", "res", ")", "coinChangeDPComp", "(", ",", "res", ")", "sizeof", "sizeof", "(", "coins", ",", "amt", ",", "coinsSize", ")", "\"", "\u51d1\u5230\u76ee\u6807\u91d1\u989d\u6240\u9700\u7684\u6700\u5c11\u786c\u5e01\u6570\u91cf\u4e3a %d", "\\n", "\"", "(", "coins", ",", "amt", ",", "coinsSize", ")", "\"", "\u51d1\u5230\u76ee\u6807\u91d1\u989d\u6240\u9700\u7684\u6700\u5c11\u786c\u5e01\u6570\u91cf\u4e3a %d", "\\n", "\"", "(", "coins", ")", "(", ")", "coins", "[", "0", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 128, "ast_depth": 10, "n_identifiers": 9, "vocab_size": 31}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_dynamic_programming/edit_distance.c#10-12", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_dynamic_programming/edit_distance.c", "language": "Java"}, "method": {"name": "myMin", "qualified_name": "codes.c.chapter_dynamic_programming.edit_distance.c#myMin", "start_line": 10, "end_line": 12, "signature": "myMin(int a, int b)", "original_code": "int myMin(int a, int b) {\n    return a < b ? a : b;\n}", "doc_comment": "/* \u6c42\u6700\u5c0f\u503c */"}, "code_tokens": ["myMin", "int", "(", ",", ")", "{", "}", "a", "b", "return", ";", "int", "int", "?", "a", ":", "b", "a", "<", "b"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 32, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 14}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_dynamic_programming/edit_distance.c#15-34", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_dynamic_programming/edit_distance.c", "language": "Java"}, "method": {"name": "editDistanceDFS", "qualified_name": "codes.c.chapter_dynamic_programming.edit_distance.c#editDistanceDFS", "start_line": 15, "end_line": 34, "signature": "editDistanceDFS(char *s, char *t, int i, int j)", "original_code": "int editDistanceDFS(char *s, char *t, int i, int j) {    \n    // \u82e5 s \u548c t \u90fd\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de 0\n    if (i == 0 && j == 0)\n        return 0;\n    // \u82e5 s \u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de t \u957f\u5ea6\n    if (i == 0)\n        return j;\n    // \u82e5 t \u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de s \u957f\u5ea6\n    if (j == 0)\n        return i;\n    // \u82e5\u4e24\u5b57\u7b26\u76f8\u7b49\uff0c\u5219\u76f4\u63a5\u8df3\u8fc7\u6b64\u4e24\u5b57\u7b26\n    if (s[i - 1] == t[j - 1])\n        return editDistanceDFS(s, t, i - 1, j - 1);\n    // \u6700\u5c11\u7f16\u8f91\u6b65\u6570 = \u63d2\u5165\u3001\u5220\u9664\u3001\u66ff\u6362\u8fd9\u4e09\u79cd\u64cd\u4f5c\u7684\u6700\u5c11\u7f16\u8f91\u6b65\u6570 + 1\n    int insert = editDistanceDFS(s, t, i, j - 1);\n    int del = editDistanceDFS(s, t, i - 1, j);\n    int replace = editDistanceDFS(s, t, i - 1, j - 1);\n    // \u8fd4\u56de\u6700\u5c11\u7f16\u8f91\u6b65\u6570\n    return myMin(myMin(insert, del), replace) + 1;\n}", "doc_comment": "/* \u7f16\u8f91\u8ddd\u79bb\uff1a\u66b4\u529b\u641c\u7d22 */"}, "code_tokens": ["editDistanceDFS", "int", "(", ",", ",", ",", ")", "{", "// \u82e5 s \u548c t \u90fd\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de 0", "// \u82e5 s \u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de t \u957f\u5ea6", "// \u82e5 t \u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de s \u957f\u5ea6", "// \u82e5\u4e24\u5b57\u7b26\u76f8\u7b49\uff0c\u5219\u76f4\u63a5\u8df3\u8fc7\u6b64\u4e24\u5b57\u7b26", "// \u6700\u5c11\u7f16\u8f91\u6b65\u6570 = \u63d2\u5165\u3001\u5220\u9664\u3001\u66ff\u6362\u8fd9\u4e09\u79cd\u64cd\u4f5c\u7684\u6700\u5c11\u7f16\u8f91\u6b65\u6570 + 1", "// \u8fd4\u56de\u6700\u5c11\u7f16\u8f91\u6b65\u6570", "}", "s", "t", "i", "j", "if", "if", "if", "if", ";", ";", ";", "return", ";", "char", "*", "char", "*", "int", "int", "(", ")", "return", "0", ";", "(", ")", "return", "j", ";", "(", ")", "return", "i", ";", "(", ")", "return", ";", "int", "insert", "=", "int", "del", "=", "int", "replace", "=", "+", "1", "&&", "i", "==", "0", "j", "==", "0", "==", "editDistanceDFS", "editDistanceDFS", "editDistanceDFS", "editDistanceDFS", "myMin", "i", "==", "0", "j", "==", "0", "s", "[", "]", "t", "[", "]", "(", "s", ",", "t", ",", ",", ")", "(", "s", ",", "t", ",", "i", ",", ")", "(", "s", ",", "t", ",", ",", "j", ")", "(", "s", ",", "t", ",", ",", ")", "(", ",", "replace", ")", "i", "-", "1", "j", "-", "1", "i", "-", "1", "j", "-", "1", "j", "-", "1", "i", "-", "1", "i", "-", "1", "j", "-", "1", "myMin", "(", "insert", ",", "del", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 219, "ast_depth": 10, "n_identifiers": 9, "vocab_size": 35}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_dynamic_programming/edit_distance.c#37-60", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_dynamic_programming/edit_distance.c", "language": "Java"}, "method": {"name": "editDistanceDFSMem", "qualified_name": "codes.c.chapter_dynamic_programming.edit_distance.c#editDistanceDFSMem", "start_line": 37, "end_line": 60, "signature": "editDistanceDFSMem(char *s, char *t, int memCols, int **mem, int i, int j)", "original_code": "int editDistanceDFSMem(char *s, char *t, int memCols, int **mem, int i, int j) {\n    // \u82e5 s \u548c t \u90fd\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de 0\n    if (i == 0 && j == 0)\n        return 0;\n    // \u82e5 s \u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de t \u957f\u5ea6\n    if (i == 0)\n        return j;\n    // \u82e5 t \u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de s \u957f\u5ea6\n    if (j == 0)\n        return i;\n    // \u82e5\u5df2\u6709\u8bb0\u5f55\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u4e4b\n    if (mem[i][j] != -1)\n        return mem[i][j];\n    // \u82e5\u4e24\u5b57\u7b26\u76f8\u7b49\uff0c\u5219\u76f4\u63a5\u8df3\u8fc7\u6b64\u4e24\u5b57\u7b26\n    if (s[i - 1] == t[j - 1])\n        return editDistanceDFSMem(s, t, memCols, mem, i - 1, j - 1);\n    // \u6700\u5c11\u7f16\u8f91\u6b65\u6570 = \u63d2\u5165\u3001\u5220\u9664\u3001\u66ff\u6362\u8fd9\u4e09\u79cd\u64cd\u4f5c\u7684\u6700\u5c11\u7f16\u8f91\u6b65\u6570 + 1\n    int insert = editDistanceDFSMem(s, t, memCols, mem, i, j - 1);\n    int del = editDistanceDFSMem(s, t, memCols, mem, i - 1, j);\n    int replace = editDistanceDFSMem(s, t, memCols, mem, i - 1, j - 1);\n    // \u8bb0\u5f55\u5e76\u8fd4\u56de\u6700\u5c11\u7f16\u8f91\u6b65\u6570\n    mem[i][j] = myMin(myMin(insert, del), replace) + 1;\n    return mem[i][j];\n}", "doc_comment": "/* \u7f16\u8f91\u8ddd\u79bb\uff1a\u8bb0\u5fc6\u5316\u641c\u7d22 */"}, "code_tokens": ["editDistanceDFSMem", "int", "(", ",", ",", ",", ",", ",", ")", "{", "// \u82e5 s \u548c t \u90fd\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de 0", "// \u82e5 s \u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de t \u957f\u5ea6", "// \u82e5 t \u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de s \u957f\u5ea6", "// \u82e5\u5df2\u6709\u8bb0\u5f55\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u4e4b", "// \u82e5\u4e24\u5b57\u7b26\u76f8\u7b49\uff0c\u5219\u76f4\u63a5\u8df3\u8fc7\u6b64\u4e24\u5b57\u7b26", "// \u6700\u5c11\u7f16\u8f91\u6b65\u6570 = \u63d2\u5165\u3001\u5220\u9664\u3001\u66ff\u6362\u8fd9\u4e09\u79cd\u64cd\u4f5c\u7684\u6700\u5c11\u7f16\u8f91\u6b65\u6570 + 1", "// \u8bb0\u5f55\u5e76\u8fd4\u56de\u6700\u5c11\u7f16\u8f91\u6b65\u6570", "}", "s", "t", "memCols", "mem", "i", "j", "if", "if", "if", "if", "if", ";", ";", ";", ";", "return", ";", "char", "*", "char", "*", "int", "int", "*", "*", "int", "int", "(", ")", "return", "0", ";", "(", ")", "return", "j", ";", "(", ")", "return", "i", ";", "(", ")", "return", ";", "(", ")", "return", ";", "int", "insert", "=", "int", "del", "=", "int", "replace", "=", "=", "[", "j", "]", "&&", "i", "==", "0", "j", "==", "0", "!=", "[", "j", "]", "==", "editDistanceDFSMem", "editDistanceDFSMem", "editDistanceDFSMem", "editDistanceDFSMem", "[", "j", "]", "+", "1", "mem", "[", "i", "]", "i", "==", "0", "j", "==", "0", "[", "j", "]", "-", "1", "mem", "[", "i", "]", "s", "[", "]", "t", "[", "]", "(", "s", ",", "t", ",", "memCols", ",", "mem", ",", ",", ")", "(", "s", ",", "t", ",", "memCols", ",", "mem", ",", "i", ",", ")", "(", "s", ",", "t", ",", "memCols", ",", "mem", ",", ",", "j", ")", "(", "s", ",", "t", ",", "memCols", ",", "mem", ",", ",", ")", "mem", "[", "i", "]", "myMin", "mem", "[", "i", "]", "i", "-", "1", "j", "-", "1", "i", "-", "1", "j", "-", "1", "j", "-", "1", "i", "-", "1", "i", "-", "1", "j", "-", "1", "(", ",", "replace", ")", "myMin", "(", "insert", ",", "del", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 302, "ast_depth": 11, "n_identifiers": 11, "vocab_size": 39}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_dynamic_programming/edit_distance.c#63-93", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_dynamic_programming/edit_distance.c", "language": "Java"}, "method": {"name": "editDistanceDP", "qualified_name": "codes.c.chapter_dynamic_programming.edit_distance.c#editDistanceDP", "start_line": 63, "end_line": 93, "signature": "editDistanceDP(char *s, char *t, int n, int m)", "original_code": "int editDistanceDP(char *s, char *t, int n, int m) {\n    int **dp = malloc((n + 1) * sizeof(int *));\n    for (int i = 0; i <= n; i++) {\n        dp[i] = calloc(m + 1, sizeof(int));\n    }\n    // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c\u9996\u5217\n    for (int i = 1; i <= n; i++) {\n        dp[i][0] = i;\n    }\n    for (int j = 1; j <= m; j++) {\n        dp[0][j] = j;\n    }\n    // \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\u548c\u5217\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= m; j++) {\n            if (s[i - 1] == t[j - 1]) {\n                // \u82e5\u4e24\u5b57\u7b26\u76f8\u7b49\uff0c\u5219\u76f4\u63a5\u8df3\u8fc7\u6b64\u4e24\u5b57\u7b26\n                dp[i][j] = dp[i - 1][j - 1];\n            } else {\n                // \u6700\u5c11\u7f16\u8f91\u6b65\u6570 = \u63d2\u5165\u3001\u5220\u9664\u3001\u66ff\u6362\u8fd9\u4e09\u79cd\u64cd\u4f5c\u7684\u6700\u5c11\u7f16\u8f91\u6b65\u6570 + 1\n                dp[i][j] = myMin(myMin(dp[i][j - 1], dp[i - 1][j]), dp[i - 1][j - 1]) + 1;\n            }\n        }\n    }\n    int res = dp[n][m];\n    // \u91ca\u653e\u5185\u5b58\n    for (int i = 0; i <= n; i++) {\n        free(dp[i]);\n    }\n    return res;\n}", "doc_comment": "/* \u7f16\u8f91\u8ddd\u79bb\uff1a\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["editDistanceDP", "int", "(", ",", ",", ",", ")", "{", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c\u9996\u5217", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\u548c\u5217", "// \u91ca\u653e\u5185\u5b58", "}", "s", "t", "n", "m", ";", "for", "(", ";", ")", "for", "(", ";", ")", "for", "(", ";", ")", "for", "(", ";", ")", ";", "for", "(", ";", ")", "return", "res", ";", "char", "*", "char", "*", "int", "int", "int", "*", "*", "dp", "=", ";", "i", "<=", "n", "i", "++", "{", "}", ";", "i", "<=", "n", "i", "++", "{", "}", ";", "j", "<=", "m", "j", "++", "{", "}", ";", "i", "<=", "n", "i", "++", "{", "}", "int", "res", "=", ";", "i", "<=", "n", "i", "++", "{", "}", "malloc", "int", "i", "=", "0", ";", "int", "i", "=", "1", ";", "int", "j", "=", "1", ";", "int", "i", "=", "1", "for", "(", ";", ")", "[", "m", "]", "int", "i", "=", "0", ";", "(", ")", "=", "=", "i", "=", "j", ";", "j", "<=", "m", "j", "++", "{", "}", "dp", "[", "n", "]", "free", "*", "dp", "[", "i", "]", "calloc", "[", "0", "]", "[", "j", "]", "int", "j", "=", "1", "if", "else", "(", ")", "(", ")", "sizeof", "(", ",", ")", "dp", "[", "i", "]", "dp", "[", "0", "]", "(", ")", "{", "// \u82e5\u4e24\u5b57\u7b26\u76f8\u7b49\uff0c\u5219\u76f4\u63a5\u8df3\u8fc7\u6b64\u4e24\u5b57\u7b26", "}", "{", "// \u6700\u5c11\u7f16\u8f91\u6b65\u6570 = \u63d2\u5165\u3001\u5220\u9664\u3001\u66ff\u6362\u8fd9\u4e09\u79cd\u64cd\u4f5c\u7684\u6700\u5c11\u7f16\u8f91\u6b65\u6570 + 1", "}", "dp", "[", "i", "]", "n", "+", "1", "(", ")", "m", "+", "1", "sizeof", "==", ";", ";", "*", "(", ")", "s", "[", "]", "t", "[", "]", "=", "=", "int", "i", "-", "1", "j", "-", "1", "[", "j", "]", "[", "]", "[", "j", "]", "+", "1", "int", "dp", "[", "i", "]", "dp", "[", "]", "j", "-", "1", "dp", "[", "i", "]", "myMin", "i", "-", "1", "(", ",", ")", "myMin", "[", "]", "(", ",", ")", "dp", "[", "]", "j", "-", "1", "[", "]", "[", "j", "]", "i", "-", "1", "dp", "[", "i", "]", "j", "-", "1", "dp", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 422, "ast_depth": 20, "n_identifiers": 14, "vocab_size": 42}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_dynamic_programming/edit_distance.c#96-124", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_dynamic_programming/edit_distance.c", "language": "Java"}, "method": {"name": "editDistanceDPComp", "qualified_name": "codes.c.chapter_dynamic_programming.edit_distance.c#editDistanceDPComp", "start_line": 96, "end_line": 124, "signature": "editDistanceDPComp(char *s, char *t, int n, int m)", "original_code": "int editDistanceDPComp(char *s, char *t, int n, int m) {\n    int *dp = calloc(m + 1, sizeof(int));\n    // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c\n    for (int j = 1; j <= m; j++) {\n        dp[j] = j;\n    }\n    // \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\n    for (int i = 1; i <= n; i++) {\n        // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u5217\n        int leftup = dp[0]; // \u6682\u5b58 dp[i-1, j-1]\n        dp[0] = i;\n        // \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u5217\n        for (int j = 1; j <= m; j++) {\n            int temp = dp[j];\n            if (s[i - 1] == t[j - 1]) {\n                // \u82e5\u4e24\u5b57\u7b26\u76f8\u7b49\uff0c\u5219\u76f4\u63a5\u8df3\u8fc7\u6b64\u4e24\u5b57\u7b26\n                dp[j] = leftup;\n            } else {\n                // \u6700\u5c11\u7f16\u8f91\u6b65\u6570 = \u63d2\u5165\u3001\u5220\u9664\u3001\u66ff\u6362\u8fd9\u4e09\u79cd\u64cd\u4f5c\u7684\u6700\u5c11\u7f16\u8f91\u6b65\u6570 + 1\n                dp[j] = myMin(myMin(dp[j - 1], dp[j]), leftup) + 1;\n            }\n            leftup = temp; // \u66f4\u65b0\u4e3a\u4e0b\u4e00\u8f6e\u7684 dp[i-1, j-1]\n        }\n    }\n    int res = dp[m];\n    // \u91ca\u653e\u5185\u5b58\n    free(dp);\n    return res;\n}", "doc_comment": "/* \u7f16\u8f91\u8ddd\u79bb\uff1a\u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["editDistanceDPComp", "int", "(", ",", ",", ",", ")", "{", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c", "// \u91ca\u653e\u5185\u5b58", "}", "s", "t", "n", "m", ";", "for", "(", ";", ")", "for", "(", ";", ")", ";", ";", "return", "res", ";", "char", "*", "char", "*", "int", "int", "int", "*", "dp", "=", ";", "j", "<=", "m", "j", "++", "{", "}", ";", "i", "<=", "n", "i", "++", "{", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u5217", "// \u6682\u5b58 dp[i-1, j-1]", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u5217", "}", "int", "res", "=", "free", "calloc", "int", "j", "=", "1", ";", "int", "i", "=", "1", ";", ";", "for", "(", ";", ")", "dp", "[", "m", "]", "(", "dp", ")", "(", ",", ")", "=", "j", "int", "leftup", "=", "=", "i", ";", "j", "<=", "m", "j", "++", "{", "// \u66f4\u65b0\u4e3a\u4e0b\u4e00\u8f6e\u7684 dp[i-1, j-1]", "}", "m", "+", "1", "sizeof", "dp", "[", "j", "]", "dp", "[", "0", "]", "dp", "[", "0", "]", "int", "j", "=", "1", ";", "if", "else", ";", "(", ")", "int", "temp", "=", "(", ")", "{", "// \u82e5\u4e24\u5b57\u7b26\u76f8\u7b49\uff0c\u5219\u76f4\u63a5\u8df3\u8fc7\u6b64\u4e24\u5b57\u7b26", "}", "{", "// \u6700\u5c11\u7f16\u8f91\u6b65\u6570 = \u63d2\u5165\u3001\u5220\u9664\u3001\u66ff\u6362\u8fd9\u4e09\u79cd\u64cd\u4f5c\u7684\u6700\u5c11\u7f16\u8f91\u6b65\u6570 + 1", "}", "leftup", "=", "temp", "dp", "[", "j", "]", "==", ";", ";", "int", "s", "[", "]", "t", "[", "]", "=", "leftup", "=", "i", "-", "1", "j", "-", "1", "dp", "[", "j", "]", "dp", "[", "j", "]", "+", "1", "myMin", "(", ",", "leftup", ")", "myMin", "(", ",", ")", "dp", "[", "]", "dp", "[", "j", "]", "j", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 291, "ast_depth": 19, "n_identifiers": 15, "vocab_size": 47}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_dynamic_programming/edit_distance.c#127-159", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_dynamic_programming/edit_distance.c", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.c.chapter_dynamic_programming.edit_distance.c#main", "start_line": 127, "end_line": 159, "signature": "main()", "original_code": "int main() {\n    char *s = \"bag\";\n    char *t = \"pack\";\n    int n = strlen(s), m = strlen(t);\n\n    // \u66b4\u529b\u641c\u7d22\n    int res = editDistanceDFS(s, t, n, m);\n    printf(\"\u5c06 %s \u66f4\u6539\u4e3a %s \u6700\u5c11\u9700\u8981\u7f16\u8f91 %d \u6b65\\n\", s, t, res);\n\n    // \u8bb0\u5fc6\u5316\u641c\u7d22\n    int **mem = malloc((n + 1) * sizeof(int *));\n    for (int i = 0; i <= n; i++) {\n        mem[i] = malloc((m + 1) * sizeof(int));\n        memset(mem[i], -1, (m + 1) * sizeof(int));\n    }\n    res = editDistanceDFSMem(s, t, m + 1, mem, n, m);\n    printf(\"\u5c06 %s \u66f4\u6539\u4e3a %s \u6700\u5c11\u9700\u8981\u7f16\u8f91 %d \u6b65\\n\", s, t, res);\n    // \u91ca\u653e\u5185\u5b58\n    for (int i = 0; i <= n; i++) {\n        free(mem[i]);\n    }\n    free(mem);\n\n    // \u52a8\u6001\u89c4\u5212\n    res = editDistanceDP(s, t, n, m);\n    printf(\"\u5c06 %s \u66f4\u6539\u4e3a %s \u6700\u5c11\u9700\u8981\u7f16\u8f91 %d \u6b65\\n\", s, t, res);\n\n    // \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212\n    res = editDistanceDPComp(s, t, n, m);\n    printf(\"\u5c06 %s \u66f4\u6539\u4e3a %s \u6700\u5c11\u9700\u8981\u7f16\u8f91 %d \u6b65\\n\", s, t, res);\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "// \u66b4\u529b\u641c\u7d22", "// \u8bb0\u5fc6\u5316\u641c\u7d22", "// \u91ca\u653e\u5185\u5b58", "// \u52a8\u6001\u89c4\u5212", "// \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212", "}", ";", ";", ",", ";", ";", ";", ";", "for", "(", ";", ")", ";", ";", "for", "(", ";", ")", ";", ";", ";", ";", ";", "return", "0", ";", "char", "*", "s", "=", "char", "*", "t", "=", "int", "n", "=", "m", "=", "int", "res", "=", "printf", "int", "*", "*", "mem", "=", ";", "i", "<=", "n", "i", "++", "{", "}", "res", "=", "printf", ";", "i", "<=", "n", "i", "++", "{", "}", "free", "res", "=", "printf", "res", "=", "printf", "\"", "bag", "\"", "\"", "pack", "\"", "strlen", "strlen", "editDistanceDFS", "(", ",", "s", ",", "t", ",", "res", ")", "malloc", "int", "i", "=", "0", ";", ";", "editDistanceDFSMem", "(", ",", "s", ",", "t", ",", "res", ")", "int", "i", "=", "0", ";", "(", "mem", ")", "editDistanceDP", "(", ",", "s", ",", "t", ",", "res", ")", "editDistanceDPComp", "(", ",", "s", ",", "t", ",", "res", ")", "(", "s", ")", "(", "t", ")", "(", "s", ",", "t", ",", "n", ",", "m", ")", "\"", "\u5c06 %s \u66f4\u6539\u4e3a %s \u6700\u5c11\u9700\u8981\u7f16\u8f91 %d \u6b65", "\\n", "\"", "(", ")", "=", "memset", "(", "s", ",", "t", ",", ",", "mem", ",", "n", ",", "m", ")", "\"", "\u5c06 %s \u66f4\u6539\u4e3a %s \u6700\u5c11\u9700\u8981\u7f16\u8f91 %d \u6b65", "\\n", "\"", "free", "(", "s", ",", "t", ",", "n", ",", "m", ")", "\"", "\u5c06 %s \u66f4\u6539\u4e3a %s \u6700\u5c11\u9700\u8981\u7f16\u8f91 %d \u6b65", "\\n", "\"", "(", "s", ",", "t", ",", "n", ",", "m", ")", "\"", "\u5c06 %s \u66f4\u6539\u4e3a %s \u6700\u5c11\u9700\u8981\u7f16\u8f91 %d \u6b65", "\\n", "\"", "*", "mem", "[", "i", "]", "malloc", "(", ",", ",", ")", "m", "+", "1", "(", ")", "(", ")", "sizeof", "(", ")", "mem", "[", "i", "]", "-", "1", "*", "mem", "[", "i", "]", "n", "+", "1", "(", ")", "*", "(", ")", "sizeof", "*", "(", ")", "sizeof", "m", "+", "1", "(", ")", "int", "m", "+", "1", "(", ")", "int", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 382, "ast_depth": 15, "n_identifiers": 18, "vocab_size": 48}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_dynamic_programming/knapsack.c#10-12", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_dynamic_programming/knapsack.c", "language": "Java"}, "method": {"name": "myMax", "qualified_name": "codes.c.chapter_dynamic_programming.knapsack.c#myMax", "start_line": 10, "end_line": 12, "signature": "myMax(int a, int b)", "original_code": "int myMax(int a, int b) {\n    return a > b ? a : b;\n}", "doc_comment": "/* \u6c42\u6700\u5927\u503c */"}, "code_tokens": ["myMax", "int", "(", ",", ")", "{", "}", "a", "b", "return", ";", "int", "int", "?", "a", ":", "b", "a", ">", "b"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 32, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 14}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_dynamic_programming/knapsack.c#15-29", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_dynamic_programming/knapsack.c", "language": "Java"}, "method": {"name": "knapsackDFS", "qualified_name": "codes.c.chapter_dynamic_programming.knapsack.c#knapsackDFS", "start_line": 15, "end_line": 29, "signature": "knapsackDFS(int wgt[], int val[], int i, int c)", "original_code": "int knapsackDFS(int wgt[], int val[], int i, int c) {\n    // \u82e5\u5df2\u9009\u5b8c\u6240\u6709\u7269\u54c1\u6216\u80cc\u5305\u65e0\u5269\u4f59\u5bb9\u91cf\uff0c\u5219\u8fd4\u56de\u4ef7\u503c 0\n    if (i == 0 || c == 0) {\n        return 0;\n    }\n    // \u82e5\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\uff0c\u5219\u53ea\u80fd\u9009\u62e9\u4e0d\u653e\u5165\u80cc\u5305\n    if (wgt[i - 1] > c) {\n        return knapsackDFS(wgt, val, i - 1, c);\n    }\n    // \u8ba1\u7b97\u4e0d\u653e\u5165\u548c\u653e\u5165\u7269\u54c1 i \u7684\u6700\u5927\u4ef7\u503c\n    int no = knapsackDFS(wgt, val, i - 1, c);\n    int yes = knapsackDFS(wgt, val, i - 1, c - wgt[i - 1]) + val[i - 1];\n    // \u8fd4\u56de\u4e24\u79cd\u65b9\u6848\u4e2d\u4ef7\u503c\u66f4\u5927\u7684\u90a3\u4e00\u4e2a\n    return myMax(no, yes);\n}", "doc_comment": "/* 0-1 \u80cc\u5305\uff1a\u66b4\u529b\u641c\u7d22 */"}, "code_tokens": ["knapsackDFS", "int", "(", ",", ",", ",", ")", "{", "// \u82e5\u5df2\u9009\u5b8c\u6240\u6709\u7269\u54c1\u6216\u80cc\u5305\u65e0\u5269\u4f59\u5bb9\u91cf\uff0c\u5219\u8fd4\u56de\u4ef7\u503c 0", "// \u82e5\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\uff0c\u5219\u53ea\u80fd\u9009\u62e9\u4e0d\u653e\u5165\u80cc\u5305", "// \u8ba1\u7b97\u4e0d\u653e\u5165\u548c\u653e\u5165\u7269\u54c1 i \u7684\u6700\u5927\u4ef7\u503c", "// \u8fd4\u56de\u4e24\u79cd\u65b9\u6848\u4e2d\u4ef7\u503c\u66f4\u5927\u7684\u90a3\u4e00\u4e2a", "}", "wgt", "val", "i", "c", "if", "if", ";", ";", "return", ";", "int", "[", "]", "int", "[", "]", "int", "int", "(", ")", "{", "}", "(", ")", "{", "}", "int", "no", "=", "int", "yes", "=", "myMax", "||", "return", "0", ";", ">", "c", "return", ";", "knapsackDFS", "+", "(", "no", ",", "yes", ")", "i", "==", "0", "c", "==", "0", "wgt", "[", "]", "knapsackDFS", "(", "wgt", ",", "val", ",", ",", "c", ")", "knapsackDFS", "val", "[", "]", "i", "-", "1", "(", "wgt", ",", "val", ",", ",", "c", ")", "i", "-", "1", "(", "wgt", ",", "val", ",", ",", ")", "i", "-", "1", "i", "-", "1", "i", "-", "1", "c", "-", "wgt", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 174, "ast_depth": 12, "n_identifiers": 8, "vocab_size": 31}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_dynamic_programming/knapsack.c#32-51", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_dynamic_programming/knapsack.c", "language": "Java"}, "method": {"name": "knapsackDFSMem", "qualified_name": "codes.c.chapter_dynamic_programming.knapsack.c#knapsackDFSMem", "start_line": 32, "end_line": 51, "signature": "knapsackDFSMem(int wgt[], int val[], int memCols, int **mem, int i, int c)", "original_code": "int knapsackDFSMem(int wgt[], int val[], int memCols, int **mem, int i, int c) {\n    // \u82e5\u5df2\u9009\u5b8c\u6240\u6709\u7269\u54c1\u6216\u80cc\u5305\u65e0\u5269\u4f59\u5bb9\u91cf\uff0c\u5219\u8fd4\u56de\u4ef7\u503c 0\n    if (i == 0 || c == 0) {\n        return 0;\n    }\n    // \u82e5\u5df2\u6709\u8bb0\u5f55\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\n    if (mem[i][c] != -1) {\n        return mem[i][c];\n    }\n    // \u82e5\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\uff0c\u5219\u53ea\u80fd\u9009\u62e9\u4e0d\u653e\u5165\u80cc\u5305\n    if (wgt[i - 1] > c) {\n        return knapsackDFSMem(wgt, val, memCols, mem, i - 1, c);\n    }\n    // \u8ba1\u7b97\u4e0d\u653e\u5165\u548c\u653e\u5165\u7269\u54c1 i \u7684\u6700\u5927\u4ef7\u503c\n    int no = knapsackDFSMem(wgt, val, memCols, mem, i - 1, c);\n    int yes = knapsackDFSMem(wgt, val, memCols, mem, i - 1, c - wgt[i - 1]) + val[i - 1];\n    // \u8bb0\u5f55\u5e76\u8fd4\u56de\u4e24\u79cd\u65b9\u6848\u4e2d\u4ef7\u503c\u66f4\u5927\u7684\u90a3\u4e00\u4e2a\n    mem[i][c] = myMax(no, yes);\n    return mem[i][c];\n}", "doc_comment": "/* 0-1 \u80cc\u5305\uff1a\u8bb0\u5fc6\u5316\u641c\u7d22 */"}, "code_tokens": ["knapsackDFSMem", "int", "(", ",", ",", ",", ",", ",", ")", "{", "// \u82e5\u5df2\u9009\u5b8c\u6240\u6709\u7269\u54c1\u6216\u80cc\u5305\u65e0\u5269\u4f59\u5bb9\u91cf\uff0c\u5219\u8fd4\u56de\u4ef7\u503c 0", "// \u82e5\u5df2\u6709\u8bb0\u5f55\uff0c\u5219\u76f4\u63a5\u8fd4\u56de", "// \u82e5\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\uff0c\u5219\u53ea\u80fd\u9009\u62e9\u4e0d\u653e\u5165\u80cc\u5305", "// \u8ba1\u7b97\u4e0d\u653e\u5165\u548c\u653e\u5165\u7269\u54c1 i \u7684\u6700\u5927\u4ef7\u503c", "// \u8bb0\u5f55\u5e76\u8fd4\u56de\u4e24\u79cd\u65b9\u6848\u4e2d\u4ef7\u503c\u66f4\u5927\u7684\u90a3\u4e00\u4e2a", "}", "wgt", "val", "memCols", "mem", "i", "c", "if", "if", "if", ";", ";", ";", "return", ";", "int", "[", "]", "int", "[", "]", "int", "int", "*", "*", "int", "int", "(", ")", "{", "}", "(", ")", "{", "}", "(", ")", "{", "}", "int", "no", "=", "int", "yes", "=", "=", "[", "c", "]", "||", "return", "0", ";", "!=", "return", ";", ">", "c", "return", ";", "knapsackDFSMem", "+", "[", "c", "]", "myMax", "mem", "[", "i", "]", "i", "==", "0", "c", "==", "0", "[", "c", "]", "-", "1", "[", "c", "]", "wgt", "[", "]", "knapsackDFSMem", "(", "wgt", ",", "val", ",", "memCols", ",", "mem", ",", ",", "c", ")", "knapsackDFSMem", "val", "[", "]", "mem", "[", "i", "]", "(", "no", ",", "yes", ")", "mem", "[", "i", "]", "mem", "[", "i", "]", "i", "-", "1", "(", "wgt", ",", "val", ",", "memCols", ",", "mem", ",", ",", "c", ")", "i", "-", "1", "(", "wgt", ",", "val", ",", "memCols", ",", "mem", ",", ",", ")", "i", "-", "1", "i", "-", "1", "i", "-", "1", "c", "-", "wgt", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 256, "ast_depth": 12, "n_identifiers": 10, "vocab_size": 36}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_dynamic_programming/knapsack.c#54-79", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_dynamic_programming/knapsack.c", "language": "Java"}, "method": {"name": "knapsackDP", "qualified_name": "codes.c.chapter_dynamic_programming.knapsack.c#knapsackDP", "start_line": 54, "end_line": 79, "signature": "knapsackDP(int wgt[], int val[], int cap, int wgtSize)", "original_code": "int knapsackDP(int wgt[], int val[], int cap, int wgtSize) {\n    int n = wgtSize;\n    // \u521d\u59cb\u5316 dp \u8868\n    int **dp = malloc((n + 1) * sizeof(int *));\n    for (int i = 0; i <= n; i++) {\n        dp[i] = calloc(cap + 1, sizeof(int));\n    }\n    // \u72b6\u6001\u8f6c\u79fb\n    for (int i = 1; i <= n; i++) {\n        for (int c = 1; c <= cap; c++) {\n            if (wgt[i - 1] > c) {\n                // \u82e5\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\uff0c\u5219\u4e0d\u9009\u7269\u54c1 i\n                dp[i][c] = dp[i - 1][c];\n            } else {\n                // \u4e0d\u9009\u548c\u9009\u7269\u54c1 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5927\u503c\n                dp[i][c] = myMax(dp[i - 1][c], dp[i - 1][c - wgt[i - 1]] + val[i - 1]);\n            }\n        }\n    }\n    int res = dp[n][cap];\n    // \u91ca\u653e\u5185\u5b58\n    for (int i = 0; i <= n; i++) {\n        free(dp[i]);\n    }\n    return res;\n}", "doc_comment": "/* 0-1 \u80cc\u5305\uff1a\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["knapsackDP", "int", "(", ",", ",", ",", ")", "{", "// \u521d\u59cb\u5316 dp \u8868", "// \u72b6\u6001\u8f6c\u79fb", "// \u91ca\u653e\u5185\u5b58", "}", "wgt", "val", "cap", "wgtSize", ";", ";", "for", "(", ";", ")", "for", "(", ";", ")", ";", "for", "(", ";", ")", "return", "res", ";", "int", "[", "]", "int", "[", "]", "int", "int", "int", "n", "=", "wgtSize", "int", "*", "*", "dp", "=", ";", "i", "<=", "n", "i", "++", "{", "}", ";", "i", "<=", "n", "i", "++", "{", "}", "int", "res", "=", ";", "i", "<=", "n", "i", "++", "{", "}", "malloc", "int", "i", "=", "0", ";", "int", "i", "=", "1", "for", "(", ";", ")", "[", "cap", "]", "int", "i", "=", "0", ";", "(", ")", "=", ";", "c", "<=", "cap", "c", "++", "{", "}", "dp", "[", "n", "]", "free", "*", "dp", "[", "i", "]", "calloc", "int", "c", "=", "1", "if", "else", "(", ")", "(", ")", "sizeof", "(", ",", ")", "(", ")", "{", "// \u82e5\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\uff0c\u5219\u4e0d\u9009\u7269\u54c1 i", "}", "{", "// \u4e0d\u9009\u548c\u9009\u7269\u54c1 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5927\u503c", "}", "dp", "[", "i", "]", "n", "+", "1", "(", ")", "cap", "+", "1", "sizeof", ">", "c", ";", ";", "*", "(", ")", "wgt", "[", "]", "=", "=", "int", "i", "-", "1", "[", "c", "]", "[", "c", "]", "[", "c", "]", "myMax", "int", "dp", "[", "i", "]", "dp", "[", "]", "dp", "[", "i", "]", "(", ",", ")", "i", "-", "1", "[", "c", "]", "+", "dp", "[", "]", "[", "]", "val", "[", "]", "i", "-", "1", "dp", "[", "]", "c", "-", "i", "-", "1", "i", "-", "1", "wgt", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 344, "ast_depth": 19, "n_identifiers": 15, "vocab_size": 42}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_dynamic_programming/knapsack.c#82-100", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_dynamic_programming/knapsack.c", "language": "Java"}, "method": {"name": "knapsackDPComp", "qualified_name": "codes.c.chapter_dynamic_programming.knapsack.c#knapsackDPComp", "start_line": 82, "end_line": 100, "signature": "knapsackDPComp(int wgt[], int val[], int cap, int wgtSize)", "original_code": "int knapsackDPComp(int wgt[], int val[], int cap, int wgtSize) {\n    int n = wgtSize;\n    // \u521d\u59cb\u5316 dp \u8868\n    int *dp = calloc(cap + 1, sizeof(int));\n    // \u72b6\u6001\u8f6c\u79fb\n    for (int i = 1; i <= n; i++) {\n        // \u5012\u5e8f\u904d\u5386\n        for (int c = cap; c >= 1; c--) {\n            if (wgt[i - 1] <= c) {\n                // \u4e0d\u9009\u548c\u9009\u7269\u54c1 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5927\u503c\n                dp[c] = myMax(dp[c], dp[c - wgt[i - 1]] + val[i - 1]);\n            }\n        }\n    }\n    int res = dp[cap];\n    // \u91ca\u653e\u5185\u5b58\n    free(dp);\n    return res;\n}", "doc_comment": "/* 0-1 \u80cc\u5305\uff1a\u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["knapsackDPComp", "int", "(", ",", ",", ",", ")", "{", "// \u521d\u59cb\u5316 dp \u8868", "// \u72b6\u6001\u8f6c\u79fb", "// \u91ca\u653e\u5185\u5b58", "}", "wgt", "val", "cap", "wgtSize", ";", ";", "for", "(", ";", ")", ";", ";", "return", "res", ";", "int", "[", "]", "int", "[", "]", "int", "int", "int", "n", "=", "wgtSize", "int", "*", "dp", "=", ";", "i", "<=", "n", "i", "++", "{", "// \u5012\u5e8f\u904d\u5386", "}", "int", "res", "=", "free", "calloc", "int", "i", "=", "1", "for", "(", ";", ")", "dp", "[", "cap", "]", "(", "dp", ")", "(", ",", ")", ";", "c", ">=", "1", "c", "--", "{", "}", "cap", "+", "1", "sizeof", "int", "c", "=", "cap", "if", "(", ")", "(", ")", "{", "// \u4e0d\u9009\u548c\u9009\u7269\u54c1 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5927\u503c", "}", "<=", "c", ";", "int", "wgt", "[", "]", "=", "i", "-", "1", "dp", "[", "c", "]", "myMax", "(", ",", ")", "dp", "[", "c", "]", "+", "dp", "[", "]", "val", "[", "]", "c", "-", "i", "-", "1", "wgt", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 210, "ast_depth": 19, "n_identifiers": 14, "vocab_size": 40}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_dynamic_programming/knapsack.c#103-137", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_dynamic_programming/knapsack.c", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.c.chapter_dynamic_programming.knapsack.c#main", "start_line": 103, "end_line": 137, "signature": "main()", "original_code": "int main() {\n    int wgt[] = {10, 20, 30, 40, 50};\n    int val[] = {50, 120, 150, 210, 240};\n    int cap = 50;\n    int n = sizeof(wgt) / sizeof(wgt[0]);\n    int wgtSize = n;\n\n    // \u66b4\u529b\u641c\u7d22\n    int res = knapsackDFS(wgt, val, n, cap);\n    printf(\"\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\u7684\u6700\u5927\u7269\u54c1\u4ef7\u503c\u4e3a %d\\n\", res);\n\n    // \u8bb0\u5fc6\u5316\u641c\u7d22\n    int **mem = malloc((n + 1) * sizeof(int *));\n    for (int i = 0; i <= n; i++) {\n        mem[i] = malloc((cap + 1) * sizeof(int));\n        memset(mem[i], -1, (cap + 1) * sizeof(int));\n    }\n    res = knapsackDFSMem(wgt, val, cap + 1, mem, n, cap);\n    printf(\"\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\u7684\u6700\u5927\u7269\u54c1\u4ef7\u503c\u4e3a %d\\n\", res);\n    // \u91ca\u653e\u5185\u5b58\n    for (int i = 0; i <= n; i++) {\n        free(mem[i]);\n    }\n    free(mem);\n\n    // \u52a8\u6001\u89c4\u5212\n    res = knapsackDP(wgt, val, cap, wgtSize);\n    printf(\"\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\u7684\u6700\u5927\u7269\u54c1\u4ef7\u503c\u4e3a %d\\n\", res);\n\n    // \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212\n    res = knapsackDPComp(wgt, val, cap, wgtSize);\n    printf(\"\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\u7684\u6700\u5927\u7269\u54c1\u4ef7\u503c\u4e3a %d\\n\", res);\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "// \u66b4\u529b\u641c\u7d22", "// \u8bb0\u5fc6\u5316\u641c\u7d22", "// \u91ca\u653e\u5185\u5b58", "// \u52a8\u6001\u89c4\u5212", "// \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212", "}", ";", ";", ";", ";", ";", ";", ";", ";", "for", "(", ";", ")", ";", ";", "for", "(", ";", ")", ";", ";", ";", ";", ";", "return", "0", ";", "int", "wgt", "=", "int", "val", "=", "int", "cap", "=", "50", "int", "n", "=", "int", "wgtSize", "=", "n", "int", "res", "=", "printf", "int", "*", "*", "mem", "=", ";", "i", "<=", "n", "i", "++", "{", "}", "res", "=", "printf", ";", "i", "<=", "n", "i", "++", "{", "}", "free", "res", "=", "printf", "res", "=", "printf", "[", "]", "{", "10", ",", "20", ",", "30", ",", "40", ",", "50", "}", "[", "]", "{", "50", ",", "120", ",", "150", ",", "210", ",", "240", "}", "/", "knapsackDFS", "(", ",", "res", ")", "malloc", "int", "i", "=", "0", ";", ";", "knapsackDFSMem", "(", ",", "res", ")", "int", "i", "=", "0", ";", "(", "mem", ")", "knapsackDP", "(", ",", "res", ")", "knapsackDPComp", "(", ",", "res", ")", "sizeof", "sizeof", "(", "wgt", ",", "val", ",", "n", ",", "cap", ")", "\"", "\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\u7684\u6700\u5927\u7269\u54c1\u4ef7\u503c\u4e3a %d", "\\n", "\"", "(", ")", "=", "memset", "(", "wgt", ",", "val", ",", ",", "mem", ",", "n", ",", "cap", ")", "\"", "\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\u7684\u6700\u5927\u7269\u54c1\u4ef7\u503c\u4e3a %d", "\\n", "\"", "free", "(", "wgt", ",", "val", ",", "cap", ",", "wgtSize", ")", "\"", "\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\u7684\u6700\u5927\u7269\u54c1\u4ef7\u503c\u4e3a %d", "\\n", "\"", "(", "wgt", ",", "val", ",", "cap", ",", "wgtSize", ")", "\"", "\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\u7684\u6700\u5927\u7269\u54c1\u4ef7\u503c\u4e3a %d", "\\n", "\"", "(", "wgt", ")", "(", ")", "*", "mem", "[", "i", "]", "malloc", "(", ",", ",", ")", "cap", "+", "1", "(", ")", "wgt", "[", "0", "]", "(", ")", "sizeof", "(", ")", "mem", "[", "i", "]", "-", "1", "*", "mem", "[", "i", "]", "n", "+", "1", "(", ")", "*", "(", ")", "sizeof", "*", "(", ")", "sizeof", "cap", "+", "1", "(", ")", "int", "cap", "+", "1", "(", ")", "int", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 402, "ast_depth": 15, "n_identifiers": 18, "vocab_size": 55}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_dynamic_programming/min_path_sum.c#13-15", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_dynamic_programming/min_path_sum.c", "language": "Java"}, "method": {"name": "myMin", "qualified_name": "codes.c.chapter_dynamic_programming.min_path_sum.c#myMin", "start_line": 13, "end_line": 15, "signature": "myMin(int a, int b)", "original_code": "int myMin(int a, int b) {\n    return a < b ? a : b;\n}", "doc_comment": "/* \u6c42\u6700\u5c0f\u503c */"}, "code_tokens": ["myMin", "int", "(", ",", ")", "{", "}", "a", "b", "return", ";", "int", "int", "?", "a", ":", "b", "a", "<", "b"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 32, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 14}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_dynamic_programming/min_path_sum.c#18-32", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_dynamic_programming/min_path_sum.c", "language": "Java"}, "method": {"name": "minPathSumDFS", "qualified_name": "codes.c.chapter_dynamic_programming.min_path_sum.c#minPathSumDFS", "start_line": 18, "end_line": 32, "signature": "minPathSumDFS(int grid[MAX_SIZE][MAX_SIZE], int i, int j)", "original_code": "int minPathSumDFS(int grid[MAX_SIZE][MAX_SIZE], int i, int j) {\n    // \u82e5\u4e3a\u5de6\u4e0a\u89d2\u5355\u5143\u683c\uff0c\u5219\u7ec8\u6b62\u641c\u7d22\n    if (i == 0 && j == 0) {\n        return grid[0][0];\n    }\n    // \u82e5\u884c\u5217\u7d22\u5f15\u8d8a\u754c\uff0c\u5219\u8fd4\u56de +\u221e \u4ee3\u4ef7\n    if (i < 0 || j < 0) {\n        return INT_MAX;\n    }\n    // \u8ba1\u7b97\u4ece\u5de6\u4e0a\u89d2\u5230 (i-1, j) \u548c (i, j-1) \u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7\n    int up = minPathSumDFS(grid, i - 1, j);\n    int left = minPathSumDFS(grid, i, j - 1);\n    // \u8fd4\u56de\u4ece\u5de6\u4e0a\u89d2\u5230 (i, j) \u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7\n    return myMin(left, up) != INT_MAX ? myMin(left, up) + grid[i][j] : INT_MAX;\n}", "doc_comment": "/* \u6700\u5c0f\u8def\u5f84\u548c\uff1a\u66b4\u529b\u641c\u7d22 */"}, "code_tokens": ["minPathSumDFS", "int", "(", ",", ",", ")", "{", "// \u82e5\u4e3a\u5de6\u4e0a\u89d2\u5355\u5143\u683c\uff0c\u5219\u7ec8\u6b62\u641c\u7d22", "// \u82e5\u884c\u5217\u7d22\u5f15\u8d8a\u754c\uff0c\u5219\u8fd4\u56de +\u221e \u4ee3\u4ef7", "// \u8ba1\u7b97\u4ece\u5de6\u4e0a\u89d2\u5230 (i-1, j) \u548c (i, j-1) \u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7", "// \u8fd4\u56de\u4ece\u5de6\u4e0a\u89d2\u5230 (i, j) \u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7", "}", "grid", "i", "j", "if", "if", ";", ";", "return", ";", "int", "[", "]", "[", "]", "int", "int", "(", ")", "{", "}", "(", ")", "{", "}", "int", "up", "=", "int", "left", "=", "?", ":", "INT_MAX", "MAX_SIZE", "MAX_SIZE", "&&", "return", ";", "||", "return", "INT_MAX", ";", "minPathSumDFS", "minPathSumDFS", "!=", "INT_MAX", "+", "i", "==", "0", "j", "==", "0", "[", "0", "]", "i", "<", "0", "j", "<", "0", "(", "grid", ",", ",", "j", ")", "(", "grid", ",", "i", ",", ")", "myMin", "myMin", "[", "j", "]", "grid", "[", "0", "]", "i", "-", "1", "j", "-", "1", "(", "left", ",", "up", ")", "(", "left", ",", "up", ")", "grid", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 167, "ast_depth": 9, "n_identifiers": 9, "vocab_size": 36}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_dynamic_programming/min_path_sum.c#35-54", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_dynamic_programming/min_path_sum.c", "language": "Java"}, "method": {"name": "minPathSumDFSMem", "qualified_name": "codes.c.chapter_dynamic_programming.min_path_sum.c#minPathSumDFSMem", "start_line": 35, "end_line": 54, "signature": "minPathSumDFSMem(int grid[MAX_SIZE][MAX_SIZE], int mem[MAX_SIZE][MAX_SIZE], int i, int j)", "original_code": "int minPathSumDFSMem(int grid[MAX_SIZE][MAX_SIZE], int mem[MAX_SIZE][MAX_SIZE], int i, int j) {\n    // \u82e5\u4e3a\u5de6\u4e0a\u89d2\u5355\u5143\u683c\uff0c\u5219\u7ec8\u6b62\u641c\u7d22\n    if (i == 0 && j == 0) {\n        return grid[0][0];\n    }\n    // \u82e5\u884c\u5217\u7d22\u5f15\u8d8a\u754c\uff0c\u5219\u8fd4\u56de +\u221e \u4ee3\u4ef7\n    if (i < 0 || j < 0) {\n        return INT_MAX;\n    }\n    // \u82e5\u5df2\u6709\u8bb0\u5f55\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\n    if (mem[i][j] != -1) {\n        return mem[i][j];\n    }\n    // \u5de6\u8fb9\u548c\u4e0a\u8fb9\u5355\u5143\u683c\u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7\n    int up = minPathSumDFSMem(grid, mem, i - 1, j);\n    int left = minPathSumDFSMem(grid, mem, i, j - 1);\n    // \u8bb0\u5f55\u5e76\u8fd4\u56de\u5de6\u4e0a\u89d2\u5230 (i, j) \u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7\n    mem[i][j] = myMin(left, up) != INT_MAX ? myMin(left, up) + grid[i][j] : INT_MAX;\n    return mem[i][j];\n}", "doc_comment": "/* \u6700\u5c0f\u8def\u5f84\u548c\uff1a\u8bb0\u5fc6\u5316\u641c\u7d22 */"}, "code_tokens": ["minPathSumDFSMem", "int", "(", ",", ",", ",", ")", "{", "// \u82e5\u4e3a\u5de6\u4e0a\u89d2\u5355\u5143\u683c\uff0c\u5219\u7ec8\u6b62\u641c\u7d22", "// \u82e5\u884c\u5217\u7d22\u5f15\u8d8a\u754c\uff0c\u5219\u8fd4\u56de +\u221e \u4ee3\u4ef7", "// \u82e5\u5df2\u6709\u8bb0\u5f55\uff0c\u5219\u76f4\u63a5\u8fd4\u56de", "// \u5de6\u8fb9\u548c\u4e0a\u8fb9\u5355\u5143\u683c\u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7", "// \u8bb0\u5f55\u5e76\u8fd4\u56de\u5de6\u4e0a\u89d2\u5230 (i, j) \u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7", "}", "grid", "mem", "i", "j", "if", "if", "if", ";", ";", ";", "return", ";", "int", "[", "]", "[", "]", "int", "[", "]", "[", "]", "int", "int", "(", ")", "{", "}", "(", ")", "{", "}", "(", ")", "{", "}", "int", "up", "=", "int", "left", "=", "=", "[", "j", "]", "MAX_SIZE", "MAX_SIZE", "MAX_SIZE", "MAX_SIZE", "&&", "return", ";", "||", "return", "INT_MAX", ";", "!=", "return", ";", "minPathSumDFSMem", "minPathSumDFSMem", "[", "j", "]", "?", ":", "INT_MAX", "mem", "[", "i", "]", "i", "==", "0", "j", "==", "0", "[", "0", "]", "i", "<", "0", "j", "<", "0", "[", "j", "]", "-", "1", "[", "j", "]", "(", "grid", ",", "mem", ",", ",", "j", ")", "(", "grid", ",", "mem", ",", "i", ",", ")", "mem", "[", "i", "]", "!=", "INT_MAX", "+", "grid", "[", "0", "]", "mem", "[", "i", "]", "mem", "[", "i", "]", "i", "-", "1", "j", "-", "1", "myMin", "myMin", "[", "j", "]", "(", "left", ",", "up", ")", "(", "left", ",", "up", ")", "grid", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 242, "ast_depth": 10, "n_identifiers": 10, "vocab_size": 38}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_dynamic_programming/min_path_sum.c#57-84", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_dynamic_programming/min_path_sum.c", "language": "Java"}, "method": {"name": "minPathSumDP", "qualified_name": "codes.c.chapter_dynamic_programming.min_path_sum.c#minPathSumDP", "start_line": 57, "end_line": 84, "signature": "minPathSumDP(int grid[MAX_SIZE][MAX_SIZE], int n, int m)", "original_code": "int minPathSumDP(int grid[MAX_SIZE][MAX_SIZE], int n, int m) {\n    // \u521d\u59cb\u5316 dp \u8868\n    int **dp = malloc(n * sizeof(int *));\n    for (int i = 0; i < n; i++) {\n        dp[i] = calloc(m, sizeof(int));\n    }\n    dp[0][0] = grid[0][0];\n    // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c\n    for (int j = 1; j < m; j++) {\n        dp[0][j] = dp[0][j - 1] + grid[0][j];\n    }\n    // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u5217\n    for (int i = 1; i < n; i++) {\n        dp[i][0] = dp[i - 1][0] + grid[i][0];\n    }\n    // \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\u548c\u5217\n    for (int i = 1; i < n; i++) {\n        for (int j = 1; j < m; j++) {\n            dp[i][j] = myMin(dp[i][j - 1], dp[i - 1][j]) + grid[i][j];\n        }\n    }\n    int res = dp[n - 1][m - 1];\n    // \u91ca\u653e\u5185\u5b58\n    for (int i = 0; i < n; i++) {\n        free(dp[i]);\n    }\n    return res;\n}", "doc_comment": "/* \u6700\u5c0f\u8def\u5f84\u548c\uff1a\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["minPathSumDP", "int", "(", ",", ",", ")", "{", "// \u521d\u59cb\u5316 dp \u8868", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u5217", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\u548c\u5217", "// \u91ca\u653e\u5185\u5b58", "}", "grid", "n", "m", ";", "for", "(", ";", ")", ";", "for", "(", ";", ")", "for", "(", ";", ")", "for", "(", ";", ")", ";", "for", "(", ";", ")", "return", "res", ";", "int", "[", "]", "[", "]", "int", "int", "int", "*", "*", "dp", "=", ";", "i", "<", "n", "i", "++", "{", "}", "=", ";", "j", "<", "m", "j", "++", "{", "}", ";", "i", "<", "n", "i", "++", "{", "}", ";", "i", "<", "n", "i", "++", "{", "}", "int", "res", "=", ";", "i", "<", "n", "i", "++", "{", "}", "MAX_SIZE", "MAX_SIZE", "malloc", "int", "i", "=", "0", ";", "[", "0", "]", "[", "0", "]", "int", "j", "=", "1", ";", "int", "i", "=", "1", ";", "int", "i", "=", "1", "for", "(", ";", ")", "[", "]", "int", "i", "=", "0", ";", "(", ")", "=", "dp", "[", "0", "]", "grid", "[", "0", "]", "=", "=", ";", "j", "<", "m", "j", "++", "{", "}", "dp", "[", "]", "m", "-", "1", "free", "n", "*", "dp", "[", "i", "]", "calloc", "[", "j", "]", "+", "[", "0", "]", "+", "int", "j", "=", "1", ";", "n", "-", "1", "(", ")", "sizeof", "(", "m", ",", ")", "dp", "[", "0", "]", "[", "]", "[", "j", "]", "dp", "[", "i", "]", "[", "0", "]", "[", "0", "]", "=", "dp", "[", "i", "]", "(", ")", "sizeof", "dp", "[", "0", "]", "j", "-", "1", "grid", "[", "0", "]", "dp", "[", "]", "grid", "[", "i", "]", "[", "j", "]", "+", "*", "(", ")", "i", "-", "1", "dp", "[", "i", "]", "myMin", "[", "j", "]", "int", "(", ",", ")", "grid", "[", "i", "]", "int", "[", "]", "[", "j", "]", "dp", "[", "i", "]", "j", "-", "1", "dp", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 414, "ast_depth": 16, "n_identifiers": 14, "vocab_size": 38}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_dynamic_programming/min_path_sum.c#87-108", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_dynamic_programming/min_path_sum.c", "language": "Java"}, "method": {"name": "minPathSumDPComp", "qualified_name": "codes.c.chapter_dynamic_programming.min_path_sum.c#minPathSumDPComp", "start_line": 87, "end_line": 108, "signature": "minPathSumDPComp(int grid[MAX_SIZE][MAX_SIZE], int n, int m)", "original_code": "int minPathSumDPComp(int grid[MAX_SIZE][MAX_SIZE], int n, int m) {\n    // \u521d\u59cb\u5316 dp \u8868\n    int *dp = calloc(m, sizeof(int));\n    // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c\n    dp[0] = grid[0][0];\n    for (int j = 1; j < m; j++) {\n        dp[j] = dp[j - 1] + grid[0][j];\n    }\n    // \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\n    for (int i = 1; i < n; i++) {\n        // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u5217\n        dp[0] = dp[0] + grid[i][0];\n        // \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u5217\n        for (int j = 1; j < m; j++) {\n            dp[j] = myMin(dp[j - 1], dp[j]) + grid[i][j];\n        }\n    }\n    int res = dp[m - 1];\n    // \u91ca\u653e\u5185\u5b58\n    free(dp);\n    return res;\n}", "doc_comment": "/* \u6700\u5c0f\u8def\u5f84\u548c\uff1a\u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["minPathSumDPComp", "int", "(", ",", ",", ")", "{", "// \u521d\u59cb\u5316 dp \u8868", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c", "// \u91ca\u653e\u5185\u5b58", "}", "grid", "n", "m", ";", ";", "for", "(", ";", ")", "for", "(", ";", ")", ";", ";", "return", "res", ";", "int", "[", "]", "[", "]", "int", "int", "int", "*", "dp", "=", "=", ";", "j", "<", "m", "j", "++", "{", "}", ";", "i", "<", "n", "i", "++", "{", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u5217", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u5217", "}", "int", "res", "=", "free", "MAX_SIZE", "MAX_SIZE", "calloc", "dp", "[", "0", "]", "[", "0", "]", "int", "j", "=", "1", ";", "int", "i", "=", "1", ";", "for", "(", ";", ")", "dp", "[", "]", "(", "dp", ")", "(", "m", ",", ")", "grid", "[", "0", "]", "=", "=", ";", "j", "<", "m", "j", "++", "{", "}", "m", "-", "1", "sizeof", "dp", "[", "j", "]", "+", "dp", "[", "0", "]", "+", "int", "j", "=", "1", ";", "(", ")", "dp", "[", "]", "[", "j", "]", "dp", "[", "0", "]", "[", "0", "]", "=", "j", "-", "1", "grid", "[", "0", "]", "grid", "[", "i", "]", "dp", "[", "j", "]", "+", "int", "myMin", "[", "j", "]", "(", ",", ")", "grid", "[", "i", "]", "dp", "[", "]", "dp", "[", "j", "]", "j", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 270, "ast_depth": 15, "n_identifiers": 13, "vocab_size": 38}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_dynamic_programming/min_path_sum.c#111-134", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_dynamic_programming/min_path_sum.c", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.c.chapter_dynamic_programming.min_path_sum.c#main", "start_line": 111, "end_line": 134, "signature": "main()", "original_code": "int main() {\n    int grid[MAX_SIZE][MAX_SIZE] = {{1, 3, 1, 5}, {2, 2, 4, 2}, {5, 3, 2, 1}, {4, 3, 5, 2}};\n    int n = 4, m = 4; // \u77e9\u9635\u5bb9\u91cf\u4e3a MAX_SIZE * MAX_SIZE \uff0c\u6709\u6548\u884c\u5217\u6570\u4e3a n * m\n\n    // \u66b4\u529b\u641c\u7d22\n    int res = minPathSumDFS(grid, n - 1, m - 1);\n    printf(\"\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a %d\\n\", res);\n\n    // \u8bb0\u5fc6\u5316\u641c\u7d22\n    int mem[MAX_SIZE][MAX_SIZE];\n    memset(mem, -1, sizeof(mem));\n    res = minPathSumDFSMem(grid, mem, n - 1, m - 1);\n    printf(\"\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a %d\\n\", res);\n\n    // \u52a8\u6001\u89c4\u5212\n    res = minPathSumDP(grid, n, m);\n    printf(\"\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a %d\\n\", res);\n\n    // \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212\n    res = minPathSumDPComp(grid, n, m);\n    printf(\"\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a %d\\n\", res);\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "// \u77e9\u9635\u5bb9\u91cf\u4e3a MAX_SIZE * MAX_SIZE \uff0c\u6709\u6548\u884c\u5217\u6570\u4e3a n * m", "// \u66b4\u529b\u641c\u7d22", "// \u8bb0\u5fc6\u5316\u641c\u7d22", "// \u52a8\u6001\u89c4\u5212", "// \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212", "}", ";", ",", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "return", "0", ";", "int", "grid", "=", "int", "n", "=", "4", "m", "=", "4", "int", "res", "=", "printf", "int", "mem", "memset", "res", "=", "printf", "res", "=", "printf", "res", "=", "printf", "[", "]", "[", "]", "{", ",", ",", ",", "}", "minPathSumDFS", "(", ",", "res", ")", "[", "]", "[", "]", "(", "mem", ",", ",", ")", "minPathSumDFSMem", "(", ",", "res", ")", "minPathSumDP", "(", ",", "res", ")", "minPathSumDPComp", "(", ",", "res", ")", "MAX_SIZE", "MAX_SIZE", "{", "1", ",", "3", ",", "1", ",", "5", "}", "{", "2", ",", "2", ",", "4", ",", "2", "}", "{", "5", ",", "3", ",", "2", ",", "1", "}", "{", "4", ",", "3", ",", "5", ",", "2", "}", "(", "grid", ",", ",", ")", "\"", "\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a %d", "\\n", "\"", "MAX_SIZE", "MAX_SIZE", "-", "1", "sizeof", "(", "grid", ",", "mem", ",", ",", ")", "\"", "\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a %d", "\\n", "\"", "(", "grid", ",", "n", ",", "m", ")", "\"", "\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a %d", "\\n", "\"", "(", "grid", ",", "n", ",", "m", ")", "\"", "\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a %d", "\\n", "\"", "n", "-", "1", "m", "-", "1", "(", "mem", ")", "n", "-", "1", "m", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 261, "ast_depth": 9, "n_identifiers": 14, "vocab_size": 40}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_graph/graph_bfs.c#26-28", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_graph/graph_bfs.c", "language": "Java"}, "method": {"name": "isEmpty", "qualified_name": "codes.c.chapter_graph.graph_bfs.c#isEmpty", "start_line": 26, "end_line": 28, "signature": "isEmpty(Queue *q)", "original_code": "int isEmpty(Queue *q) {\n    return q->size == 0;\n}", "doc_comment": "/* \u5224\u65ad\u961f\u5217\u662f\u5426\u4e3a\u7a7a */"}, "code_tokens": ["isEmpty", "int", "(", ")", "{", "}", "Queue", "q", "return", ";", "*", "q", "->", "size", "==", "0"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 26, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 15}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_graph/graph_bfs.c#31-35", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_graph/graph_bfs.c", "language": "Java"}, "method": {"name": "enqueue", "qualified_name": "codes.c.chapter_graph.graph_bfs.c#enqueue", "start_line": 31, "end_line": 35, "signature": "enqueue(Queue *q, Vertex *vet)", "original_code": "void enqueue(Queue *q, Vertex *vet) {\n    q->vertices[q->rear] = vet;\n    q->rear = (q->rear + 1) % MAX_SIZE;\n    q->size++;\n}", "doc_comment": "/* \u5165\u961f\u64cd\u4f5c */"}, "code_tokens": ["void", "enqueue", "(", ",", ")", "{", "}", "Queue", "q", "Vertex", "vet", ";", ";", ";", "*", "*", "q", "->", "q", "->", "q", "->", "=", "vet", "rear", "=", "size", "++", "vertices", "[", "]", "%", "MAX_SIZE", "q", "->", "rear", "(", ")", "q", "->", "rear", "+", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 66, "ast_depth": 11, "n_identifiers": 7, "vocab_size": 25}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_graph/graph_bfs.c#46-53", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_graph/graph_bfs.c", "language": "Java"}, "method": {"name": "isVisited", "qualified_name": "codes.c.chapter_graph.graph_bfs.c#isVisited", "start_line": 46, "end_line": 53, "signature": "isVisited(Vertex **visited, int size, Vertex *vet)", "original_code": "int isVisited(Vertex **visited, int size, Vertex *vet) {\n    // \u904d\u5386\u67e5\u627e\u8282\u70b9\uff0c\u4f7f\u7528 O(n) \u65f6\u95f4\n    for (int i = 0; i < size; i++) {\n        if (visited[i] == vet)\n            return 1;\n    }\n    return 0;\n}", "doc_comment": "/* \u68c0\u67e5\u9876\u70b9\u662f\u5426\u5df2\u88ab\u8bbf\u95ee */"}, "code_tokens": ["isVisited", "int", "(", ",", ",", ")", "{", "// \u904d\u5386\u67e5\u627e\u8282\u70b9\uff0c\u4f7f\u7528 O(n) \u65f6\u95f4", "}", "Vertex", "visited", "size", "Vertex", "vet", "for", "(", ";", ")", "return", "0", ";", "*", "*", "int", "*", ";", "i", "<", "size", "i", "++", "{", "}", "int", "i", "=", "0", "if", "(", ")", "return", "1", ";", "==", "vet", "visited", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 73, "ast_depth": 10, "n_identifiers": 5, "vocab_size": 26}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_graph/graph_bfs.c#57-79", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_graph/graph_bfs.c", "language": "Java"}, "method": {"name": "graphBFS", "qualified_name": "codes.c.chapter_graph.graph_bfs.c#graphBFS", "start_line": 57, "end_line": 79, "signature": "graphBFS(GraphAdjList *graph, Vertex *startVet, Vertex **res, int *resSize, Vertex **visited, int *visitedSize)", "original_code": "void graphBFS(GraphAdjList *graph, Vertex *startVet, Vertex **res, int *resSize, Vertex **visited, int *visitedSize) {\n    // \u961f\u5217\u7528\u4e8e\u5b9e\u73b0 BFS\n    Queue *queue = newQueue();\n    enqueue(queue, startVet);\n    visited[(*visitedSize)++] = startVet;\n    // \u4ee5\u9876\u70b9 vet \u4e3a\u8d77\u70b9\uff0c\u5faa\u73af\u76f4\u81f3\u8bbf\u95ee\u5b8c\u6240\u6709\u9876\u70b9\n    while (!isEmpty(queue)) {\n        Vertex *vet = dequeue(queue); // \u961f\u9996\u9876\u70b9\u51fa\u961f\n        res[(*resSize)++] = vet;      // \u8bb0\u5f55\u8bbf\u95ee\u9876\u70b9\n        // \u904d\u5386\u8be5\u9876\u70b9\u7684\u6240\u6709\u90bb\u63a5\u9876\u70b9\n        AdjListNode *node = findNode(graph, vet);\n        while (node != NULL) {\n            // \u8df3\u8fc7\u5df2\u88ab\u8bbf\u95ee\u7684\u9876\u70b9\n            if (!isVisited(visited, *visitedSize, node->vertex)) {\n                enqueue(queue, node->vertex);             // \u53ea\u5165\u961f\u672a\u8bbf\u95ee\u7684\u9876\u70b9\n                visited[(*visitedSize)++] = node->vertex; // \u6807\u8bb0\u8be5\u9876\u70b9\u5df2\u88ab\u8bbf\u95ee\n            }\n            node = node->next;\n        }\n    }\n    // \u91ca\u653e\u5185\u5b58\n    free(queue);\n}", "doc_comment": "// \u4f7f\u7528\u90bb\u63a5\u8868\u6765\u8868\u793a\u56fe\uff0c\u4ee5\u4fbf\u83b7\u53d6\u6307\u5b9a\u9876\u70b9\u7684\u6240\u6709\u90bb\u63a5\u9876\u70b9"}, "code_tokens": ["void", "graphBFS", "(", ",", ",", ",", ",", ",", ")", "{", "// \u961f\u5217\u7528\u4e8e\u5b9e\u73b0 BFS", "// \u4ee5\u9876\u70b9 vet \u4e3a\u8d77\u70b9\uff0c\u5faa\u73af\u76f4\u81f3\u8bbf\u95ee\u5b8c\u6240\u6709\u9876\u70b9", "// \u91ca\u653e\u5185\u5b58", "}", "GraphAdjList", "graph", "Vertex", "startVet", "Vertex", "res", "resSize", "Vertex", "visited", "visitedSize", ";", ";", ";", "while", ";", "*", "*", "*", "*", "int", "*", "*", "*", "int", "*", "Queue", "*", "enqueue", "=", "startVet", "(", ")", "{", "// \u961f\u9996\u9876\u70b9\u51fa\u961f", "// \u8bb0\u5f55\u8bbf\u95ee\u9876\u70b9", "// \u904d\u5386\u8be5\u9876\u70b9\u7684\u6240\u6709\u90bb\u63a5\u9876\u70b9", "}", "free", "queue", "=", "(", "queue", ",", "startVet", ")", "visited", "[", "]", "!", ";", ";", ";", "while", "(", "queue", ")", "newQueue", "++", "isEmpty", "Vertex", "*", "=", "vet", "AdjListNode", "*", "(", ")", "{", "// \u8df3\u8fc7\u5df2\u88ab\u8bbf\u95ee\u7684\u9876\u70b9", "}", "(", ")", "(", "visitedSize", ")", "(", "queue", ")", "vet", "=", "res", "[", "]", "node", "=", "node", "!=", "NULL", "if", ";", "*", "dequeue", "++", "findNode", "(", ")", "{", "// \u53ea\u5165\u961f\u672a\u8bbf\u95ee\u7684\u9876\u70b9", "// \u6807\u8bb0\u8be5\u9876\u70b9\u5df2\u88ab\u8bbf\u95ee", "}", "node", "=", "(", "queue", ")", "(", "resSize", ")", "(", "graph", ",", "vet", ")", "!", ";", ";", "node", "->", "next", "*", "isVisited", "enqueue", "=", "(", "visited", ",", "visitedSize", ",", ")", "(", "queue", ",", ")", "visited", "[", "]", "node", "->", "vertex", "*", "node", "->", "vertex", "node", "->", "vertex", "++", "(", "visitedSize", ")", "*"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 248, "ast_depth": 16, "n_identifiers": 23, "vocab_size": 51}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_graph/graph_dfs.c#24-37", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_graph/graph_dfs.c", "language": "Java"}, "method": {"name": "dfs", "qualified_name": "codes.c.chapter_graph.graph_dfs.c#dfs", "start_line": 24, "end_line": 37, "signature": "dfs(GraphAdjList *graph, Vertex **res, int *resSize, Vertex *vet)", "original_code": "void dfs(GraphAdjList *graph, Vertex **res, int *resSize, Vertex *vet) {\n    // \u8bb0\u5f55\u8bbf\u95ee\u9876\u70b9\n    res[(*resSize)++] = vet;\n    // \u904d\u5386\u8be5\u9876\u70b9\u7684\u6240\u6709\u90bb\u63a5\u9876\u70b9\n    AdjListNode *node = findNode(graph, vet);\n    while (node != NULL) {\n        // \u8df3\u8fc7\u5df2\u88ab\u8bbf\u95ee\u7684\u9876\u70b9\n        if (!isVisited(res, *resSize, node->vertex)) {\n            // \u9012\u5f52\u8bbf\u95ee\u90bb\u63a5\u9876\u70b9\n            dfs(graph, res, resSize, node->vertex);\n        }\n        node = node->next;\n    }\n}", "doc_comment": "/* \u6df1\u5ea6\u4f18\u5148\u904d\u5386 DFS \u8f85\u52a9\u51fd\u6570 */"}, "code_tokens": ["void", "dfs", "(", ",", ",", ",", ")", "{", "// \u8bb0\u5f55\u8bbf\u95ee\u9876\u70b9", "// \u904d\u5386\u8be5\u9876\u70b9\u7684\u6240\u6709\u90bb\u63a5\u9876\u70b9", "}", "GraphAdjList", "graph", "Vertex", "res", "resSize", "Vertex", "vet", ";", ";", "while", "*", "*", "*", "int", "*", "*", "=", "vet", "AdjListNode", "*", "(", ")", "{", "// \u8df3\u8fc7\u5df2\u88ab\u8bbf\u95ee\u7684\u9876\u70b9", "}", "res", "[", "]", "node", "=", "node", "!=", "NULL", "if", ";", "++", "findNode", "(", ")", "{", "// \u9012\u5f52\u8bbf\u95ee\u90bb\u63a5\u9876\u70b9", "}", "node", "=", "(", "resSize", ")", "(", "graph", ",", "vet", ")", "!", ";", "node", "->", "next", "*", "isVisited", "dfs", "(", "res", ",", "resSize", ",", ")", "(", "graph", ",", "res", ",", "resSize", ",", ")", "*", "node", "->", "vertex", "node", "->", "vertex"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 135, "ast_depth": 12, "n_identifiers": 12, "vocab_size": 36}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_graph/graph_dfs.c#41-43", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_graph/graph_dfs.c", "language": "Java"}, "method": {"name": "graphDFS", "qualified_name": "codes.c.chapter_graph.graph_dfs.c#graphDFS", "start_line": 41, "end_line": 43, "signature": "graphDFS(GraphAdjList *graph, Vertex *startVet, Vertex **res, int *resSize)", "original_code": "void graphDFS(GraphAdjList *graph, Vertex *startVet, Vertex **res, int *resSize) {\n    dfs(graph, res, resSize, startVet);\n}", "doc_comment": "// \u4f7f\u7528\u90bb\u63a5\u8868\u6765\u8868\u793a\u56fe\uff0c\u4ee5\u4fbf\u83b7\u53d6\u6307\u5b9a\u9876\u70b9\u7684\u6240\u6709\u90bb\u63a5\u9876\u70b9"}, "code_tokens": ["void", "graphDFS", "(", ",", ",", ",", ")", "{", "}", "GraphAdjList", "graph", "Vertex", "startVet", "Vertex", "res", "resSize", ";", "*", "*", "*", "*", "int", "*", "dfs", "(", "graph", ",", "res", ",", "resSize", ",", "startVet", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 49, "ast_depth": 7, "n_identifiers": 6, "vocab_size": 17}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_graph/graph_dfs.c#46-75", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_graph/graph_dfs.c", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.c.chapter_graph.graph_dfs.c#main", "start_line": 46, "end_line": 75, "signature": "main()", "original_code": "int main() {\n    // \u521d\u59cb\u5316\u65e0\u5411\u56fe\n    int vals[] = {0, 1, 2, 3, 4, 5, 6};\n    int size = sizeof(vals) / sizeof(vals[0]);\n    Vertex **v = valsToVets(vals, size);\n    Vertex *edges[][2] = {{v[0], v[1]}, {v[0], v[3]}, {v[1], v[2]}, {v[2], v[5]}, {v[4], v[5]}, {v[5], v[6]}};\n    int egdeSize = sizeof(edges) / sizeof(edges[0]);\n    GraphAdjList *graph = newGraphAdjList();\n    // \u6dfb\u52a0\u6240\u6709\u9876\u70b9\u548c\u8fb9\n    for (int i = 0; i < size; i++) {\n        addVertex(graph, v[i]);\n    }\n    for (int i = 0; i < egdeSize; i++) {\n        addEdge(graph, edges[i][0], edges[i][1]);\n    }\n    printf(\"\\n\u521d\u59cb\u5316\u540e\uff0c\u56fe\u4e3a\\n\");\n    printGraph(graph);\n\n    // \u6df1\u5ea6\u4f18\u5148\u904d\u5386 DFS\n    Vertex *res[MAX_SIZE];\n    int resSize = 0;\n    graphDFS(graph, v[0], res, &resSize);\n    printf(\"\\n\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff08DFS\uff09\u9876\u70b9\u5e8f\u5217\u4e3a\\n\");\n    printArray(vetsToVals(res, resSize), resSize);\n\n    // \u91ca\u653e\u5185\u5b58\n    delGraphAdjList(graph);\n    free(v);\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "// \u521d\u59cb\u5316\u65e0\u5411\u56fe", "", ";", ";", ";", ",", "}", ",", "{", "", "int", "vals", "=", "int", "size", "=", "Vertex", "*", "Vertex", "*", "v", "[", "1", "]", ",", "}", ",", "{", "", "[", "]", "{", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", "}", "/", "*", "v", "=", "=", "{", "{", "v", "[", "0", "]", "v", "[", "0", "]", "v", "[", "3", "]", ",", "}", ",", "{", ";", "// \u6dfb\u52a0\u6240\u6709\u9876\u70b9\u548c\u8fb9", "// \u6df1\u5ea6\u4f18\u5148\u904d\u5386 DFS", "// \u91ca\u653e\u5185\u5b58", "}", "sizeof", "sizeof", "valsToVets", "edges", "v", "[", "1", "]", "v", "[", "2", "]", ",", "}", ",", "{", "}", ";", ";", "for", "(", ";", ")", "for", "(", ";", ")", ";", ";", ";", ";", ";", ";", ";", ";", ";", "return", "0", ";", "(", "vals", ")", "(", ")", "(", "vals", ",", "size", ")", "[", "]", "[", "]", "v", "[", "2", "]", "v", "[", "5", "]", ",", "}", ",", "{", "}", "int", "egdeSize", "=", "GraphAdjList", "*", ";", "i", "<", "size", "i", "++", "{", "}", ";", "i", "<", "egdeSize", "i", "++", "{", "}", "printf", "printGraph", "Vertex", "*", "int", "resSize", "=", "0", "graphDFS", "printf", "printArray", "delGraphAdjList", "free", "vals", "[", "0", "]", "2", "v", "[", "4", "]", "v", "[", "5", "]", ",", "/", "graph", "=", "int", "i", "=", "0", ";", "int", "i", "=", "0", ";", "(", ")", "(", "graph", ")", "res", "[", "MAX_SIZE", "]", "(", "graph", ",", ",", "res", ",", "resSize", ")", "(", ")", "(", ",", "resSize", ")", "(", "graph", ")", "(", "v", ")", "v", "[", "5", "]", "v", "[", "6", "]", "sizeof", "sizeof", "newGraphAdjList", "addVertex", "addEdge", "\"", "\\n", "\u521d\u59cb\u5316\u540e\uff0c\u56fe\u4e3a", "\\n", "\"", "v", "[", "0", "]", "&", "\"", "\\n", "\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff08DFS\uff09\u9876\u70b9\u5e8f\u5217\u4e3a", "\\n", "\"", "vetsToVals", "(", "edges", ")", "(", ")", "(", ")", "(", "graph", ",", ")", "(", "graph", ",", ",", ")", "(", "res", ",", "resSize", ")", "edges", "[", "0", "]", "v", "[", "i", "]", "[", "0", "]", "[", "1", "]", "edges", "[", "i", "]", "edges", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 433, "ast_depth": 14, "n_identifiers": 25, "vocab_size": 58}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_hashing/array_hash_map.c#36-44", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_hashing/array_hash_map.c", "language": "Java"}, "method": {"name": "delArrayHashMap", "qualified_name": "codes.c.chapter_hashing.array_hash_map.c#delArrayHashMap", "start_line": 36, "end_line": 44, "signature": "delArrayHashMap(ArrayHashMap *hmap)", "original_code": "void delArrayHashMap(ArrayHashMap *hmap) {\n    for (int i = 0; i < HASHTABLE_CAPACITY; i++) {\n        if (hmap->buckets[i] != NULL) {\n            free(hmap->buckets[i]->val);\n            free(hmap->buckets[i]);\n        }\n    }\n    free(hmap);\n}", "doc_comment": "/* \u6790\u6784\u51fd\u6570 */"}, "code_tokens": ["void", "delArrayHashMap", "(", ")", "{", "}", "ArrayHashMap", "hmap", "for", "(", ";", ")", ";", "*", ";", "i", "<", "HASHTABLE_CAPACITY", "i", "++", "{", "}", "free", "int", "i", "=", "0", "if", "(", "hmap", ")", "(", ")", "{", "}", "hmap", "->", ";", ";", "!=", "NULL", "free", "free", "buckets", "[", "i", "]", "(", ")", "(", ")", "hmap", "->", "->", "val", "hmap", "->", "buckets", "[", "i", "]", "buckets", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 98, "ast_depth": 13, "n_identifiers": 8, "vocab_size": 27}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_hashing/array_hash_map.c#47-50", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_hashing/array_hash_map.c", "language": "Java"}, "method": {"name": "hashFunc", "qualified_name": "codes.c.chapter_hashing.array_hash_map.c#hashFunc", "start_line": 47, "end_line": 50, "signature": "hashFunc(int key)", "original_code": "int hashFunc(int key) {\n    int index = key % HASHTABLE_CAPACITY;\n    return index;\n}", "doc_comment": "/* \u54c8\u5e0c\u51fd\u6570 */"}, "code_tokens": ["hashFunc", "int", "(", ")", "{", "}", "key", ";", "return", "index", ";", "int", "int", "index", "=", "key", "%", "HASHTABLE_CAPACITY"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 30, "ast_depth": 7, "n_identifiers": 4, "vocab_size": 13}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_hashing/array_hash_map.c#53-59", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_hashing/array_hash_map.c", "language": "Java"}, "method": {"name": "char", "qualified_name": "codes.c.chapter_hashing.array_hash_map.c#char", "start_line": 53, "end_line": 59, "signature": "char(const ArrayHashMap *hmap, const int key)", "original_code": "const char *get(const ArrayHashMap *hmap, const int key) {\n    int index = hashFunc(key);\n    const Pair *Pair = hmap->buckets[index];\n    if (Pair == NULL)\n        return NULL;\n    return Pair->val;\n}", "doc_comment": "/* \u67e5\u8be2\u64cd\u4f5c */"}, "code_tokens": ["const", "char", "*", "get", "(", ",", ")", "{", "}", "const", "ArrayHashMap", "*", "hmap", "const", "int", "key", ";", "const", ";", "if", "return", ";", "int", "index", "=", "Pair", "=", "(", ")", "return", "NULL", ";", "Pair", "->", "val", "hashFunc", "*", "Pair", "hmap", "->", "Pair", "==", "NULL", "(", "key", ")", "buckets", "[", "index", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 75, "ast_depth": 8, "n_identifiers": 12, "vocab_size": 27}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_hashing/array_hash_map.c#62-70", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_hashing/array_hash_map.c", "language": "Java"}, "method": {"name": "put", "qualified_name": "codes.c.chapter_hashing.array_hash_map.c#put", "start_line": 62, "end_line": 70, "signature": "put(ArrayHashMap *hmap, const int key, const char *val)", "original_code": "void put(ArrayHashMap *hmap, const int key, const char *val) {\n    Pair *Pair = malloc(sizeof(Pair));\n    Pair->key = key;\n    Pair->val = malloc(strlen(val) + 1);\n    strcpy(Pair->val, val);\n\n    int index = hashFunc(key);\n    hmap->buckets[index] = Pair;\n}", "doc_comment": "/* \u6dfb\u52a0\u64cd\u4f5c */"}, "code_tokens": ["void", "put", "(", ",", ",", ")", "{", "}", "ArrayHashMap", "hmap", "const", "int", "key", "const", "char", "*", "val", ";", ";", ";", ";", ";", ";", "*", "Pair", "*", "Pair", "->", "Pair", "->", "strcpy", "int", "index", "=", "hmap", "->", "Pair", "=", "key", "=", "key", "val", "=", "(", ",", "val", ")", "hashFunc", "=", "Pair", "malloc", "malloc", "Pair", "->", "val", "(", "key", ")", "buckets", "[", "index", "]", "(", ")", "(", ")", "sizeof", "+", "1", "(", "Pair", ")", "strlen", "(", "val", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 117, "ast_depth": 12, "n_identifiers": 14, "vocab_size": 30}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_hashing/array_hash_map.c#73-78", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_hashing/array_hash_map.c", "language": "Java"}, "method": {"name": "removeItem", "qualified_name": "codes.c.chapter_hashing.array_hash_map.c#removeItem", "start_line": 73, "end_line": 78, "signature": "removeItem(ArrayHashMap *hmap, const int key)", "original_code": "void removeItem(ArrayHashMap *hmap, const int key) {\n    int index = hashFunc(key);\n    free(hmap->buckets[index]->val);\n    free(hmap->buckets[index]);\n    hmap->buckets[index] = NULL;\n}", "doc_comment": "/* \u5220\u9664\u64cd\u4f5c */"}, "code_tokens": ["void", "removeItem", "(", ",", ")", "{", "}", "ArrayHashMap", "hmap", "const", "int", "key", ";", ";", ";", ";", "*", "int", "index", "=", "free", "free", "hmap", "->", "hashFunc", "(", ")", "(", ")", "=", "NULL", "(", "key", ")", "hmap", "->", "->", "val", "hmap", "->", "buckets", "[", "index", "]", "buckets", "[", "index", "]", "buckets", "[", "index", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 80, "ast_depth": 9, "n_identifiers": 10, "vocab_size": 24}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_hashing/array_hash_map.c#81-102", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_hashing/array_hash_map.c", "language": "Java"}, "method": {"name": "pairSet", "qualified_name": "codes.c.chapter_hashing.array_hash_map.c#pairSet", "start_line": 81, "end_line": 102, "signature": "pairSet(ArrayHashMap *hmap, MapSet *set)", "original_code": "void pairSet(ArrayHashMap *hmap, MapSet *set) {\n    Pair *entries;\n    int i = 0, index = 0;\n    int total = 0;\n    /* \u7edf\u8ba1\u6709\u6548\u952e\u503c\u5bf9\u6570\u91cf */\n    for (i = 0; i < HASHTABLE_CAPACITY; i++) {\n        if (hmap->buckets[i] != NULL) {\n            total++;\n        }\n    }\n    entries = malloc(sizeof(Pair) * total);\n    for (i = 0; i < HASHTABLE_CAPACITY; i++) {\n        if (hmap->buckets[i] != NULL) {\n            entries[index].key = hmap->buckets[i]->key;\n            entries[index].val = malloc(strlen(hmap->buckets[i]->val) + 1);\n            strcpy(entries[index].val, hmap->buckets[i]->val);\n            index++;\n        }\n    }\n    set->set = entries;\n    set->len = total;\n}", "doc_comment": "/* \u83b7\u53d6\u6240\u6709\u952e\u503c\u5bf9 */"}, "code_tokens": ["void", "pairSet", "(", ",", ")", "{", "/* \u7edf\u8ba1\u6709\u6548\u952e\u503c\u5bf9\u6570\u91cf */", "}", "ArrayHashMap", "hmap", "MapSet", "set", ";", ",", ";", ";", "for", "(", ";", ";", ")", ";", "for", "(", ";", ";", ")", ";", ";", "*", "*", "Pair", "*", "entries", "int", "i", "=", "0", "index", "=", "0", "int", "total", "=", "0", "i", "=", "0", "i", "<", "HASHTABLE_CAPACITY", "i", "++", "{", "}", "entries", "=", "i", "=", "0", "i", "<", "HASHTABLE_CAPACITY", "i", "++", "{", "}", "set", "->", "set", "->", "if", "malloc", "if", "set", "=", "entries", "len", "=", "total", "(", ")", "{", "}", "(", ")", "(", ")", "{", "}", "hmap", "->", ";", "*", "total", "hmap", "->", ";", ";", ";", ";", "!=", "NULL", "total", "++", "sizeof", "!=", "NULL", "=", "->", "key", "=", "strcpy", "index", "++", "buckets", "[", "i", "]", "(", "Pair", ")", "buckets", "[", "i", "]", ".", "key", "hmap", "->", ".", "val", "malloc", "(", ",", ")", "entries", "[", "index", "]", "buckets", "[", "i", "]", "entries", "[", "index", "]", "(", ")", ".", "val", "hmap", "->", "->", "val", "+", "1", "entries", "[", "index", "]", "buckets", "[", "i", "]", "strlen", "(", ")", "hmap", "->", "->", "val", "buckets", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 260, "ast_depth": 17, "n_identifiers": 18, "vocab_size": 43}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_hashing/array_hash_map.c#105-124", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_hashing/array_hash_map.c", "language": "Java"}, "method": {"name": "keySet", "qualified_name": "codes.c.chapter_hashing.array_hash_map.c#keySet", "start_line": 105, "end_line": 124, "signature": "keySet(ArrayHashMap *hmap, MapSet *set)", "original_code": "void keySet(ArrayHashMap *hmap, MapSet *set) {\n    int *keys;\n    int i = 0, index = 0;\n    int total = 0;\n    /* \u7edf\u8ba1\u6709\u6548\u952e\u503c\u5bf9\u6570\u91cf */\n    for (i = 0; i < HASHTABLE_CAPACITY; i++) {\n        if (hmap->buckets[i] != NULL) {\n            total++;\n        }\n    }\n    keys = malloc(total * sizeof(int));\n    for (i = 0; i < HASHTABLE_CAPACITY; i++) {\n        if (hmap->buckets[i] != NULL) {\n            keys[index] = hmap->buckets[i]->key;\n            index++;\n        }\n    }\n    set->set = keys;\n    set->len = total;\n}", "doc_comment": "/* \u83b7\u53d6\u6240\u6709\u952e */"}, "code_tokens": ["void", "keySet", "(", ",", ")", "{", "/* \u7edf\u8ba1\u6709\u6548\u952e\u503c\u5bf9\u6570\u91cf */", "}", "ArrayHashMap", "hmap", "MapSet", "set", ";", ",", ";", ";", "for", "(", ";", ";", ")", ";", "for", "(", ";", ";", ")", ";", ";", "*", "*", "int", "*", "keys", "int", "i", "=", "0", "index", "=", "0", "int", "total", "=", "0", "i", "=", "0", "i", "<", "HASHTABLE_CAPACITY", "i", "++", "{", "}", "keys", "=", "i", "=", "0", "i", "<", "HASHTABLE_CAPACITY", "i", "++", "{", "}", "set", "->", "set", "->", "if", "malloc", "if", "set", "=", "keys", "len", "=", "total", "(", ")", "{", "}", "(", ")", "(", ")", "{", "}", "hmap", "->", ";", "total", "*", "hmap", "->", ";", ";", "!=", "NULL", "total", "++", "sizeof", "!=", "NULL", "=", "->", "key", "index", "++", "buckets", "[", "i", "]", "(", ")", "buckets", "[", "i", "]", "keys", "[", "index", "]", "hmap", "->", "buckets", "[", "i", "]", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 198, "ast_depth": 13, "n_identifiers": 14, "vocab_size": 36}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_hashing/array_hash_map.c#127-146", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_hashing/array_hash_map.c", "language": "Java"}, "method": {"name": "valueSet", "qualified_name": "codes.c.chapter_hashing.array_hash_map.c#valueSet", "start_line": 127, "end_line": 146, "signature": "valueSet(ArrayHashMap *hmap, MapSet *set)", "original_code": "void valueSet(ArrayHashMap *hmap, MapSet *set) {\n    char **vals;\n    int i = 0, index = 0;\n    int total = 0;\n    /* \u7edf\u8ba1\u6709\u6548\u952e\u503c\u5bf9\u6570\u91cf */\n    for (i = 0; i < HASHTABLE_CAPACITY; i++) {\n        if (hmap->buckets[i] != NULL) {\n            total++;\n        }\n    }\n    vals = malloc(total * sizeof(char *));\n    for (i = 0; i < HASHTABLE_CAPACITY; i++) {\n        if (hmap->buckets[i] != NULL) {\n            vals[index] = hmap->buckets[i]->val;\n            index++;\n        }\n    }\n    set->set = vals;\n    set->len = total;\n}", "doc_comment": "/* \u83b7\u53d6\u6240\u6709\u503c */"}, "code_tokens": ["void", "valueSet", "(", ",", ")", "{", "/* \u7edf\u8ba1\u6709\u6548\u952e\u503c\u5bf9\u6570\u91cf */", "}", "ArrayHashMap", "hmap", "MapSet", "set", ";", ",", ";", ";", "for", "(", ";", ";", ")", ";", "for", "(", ";", ";", ")", ";", ";", "*", "*", "char", "*", "*", "vals", "int", "i", "=", "0", "index", "=", "0", "int", "total", "=", "0", "i", "=", "0", "i", "<", "HASHTABLE_CAPACITY", "i", "++", "{", "}", "vals", "=", "i", "=", "0", "i", "<", "HASHTABLE_CAPACITY", "i", "++", "{", "}", "set", "->", "set", "->", "if", "malloc", "if", "set", "=", "vals", "len", "=", "total", "(", ")", "{", "}", "(", ")", "(", ")", "{", "}", "hmap", "->", ";", "total", "*", "hmap", "->", ";", ";", "!=", "NULL", "total", "++", "sizeof", "!=", "NULL", "=", "->", "val", "index", "++", "buckets", "[", "i", "]", "(", ")", "buckets", "[", "i", "]", "vals", "[", "index", "]", "hmap", "->", "*", "buckets", "[", "i", "]", "char"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 200, "ast_depth": 13, "n_identifiers": 14, "vocab_size": 37}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_hashing/array_hash_map.c#149-212", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_hashing/array_hash_map.c", "language": "Java"}, "method": {"name": "print", "qualified_name": "codes.c.chapter_hashing.array_hash_map.c#print", "start_line": 149, "end_line": 212, "signature": "print(ArrayHashMap *hmap)", "original_code": "void print(ArrayHashMap *hmap) {\n    int i;\n    MapSet set;\n    pairSet(hmap, &set);\n    Pair *entries = (Pair *)set.set;\n    for (i = 0; i < set.len; i++) {\n        printf(\"%d -> %s\\n\", entries[i].key, entries[i].val);\n    }\n    free(set.set);\n}\n\n/* Driver Code */\nint main() {\n    /* \u521d\u59cb\u5316\u54c8\u5e0c\u8868 */\n    ArrayHashMap *hmap = newArrayHashMap();\n\n    /* \u6dfb\u52a0\u64cd\u4f5c */\n    // \u5728\u54c8\u5e0c\u8868\u4e2d\u6dfb\u52a0\u952e\u503c\u5bf9 (key, value)\n    put(hmap, 12836, \"\u5c0f\u54c8\");\n    put(hmap, 15937, \"\u5c0f\u5570\");\n    put(hmap, 16750, \"\u5c0f\u7b97\");\n    put(hmap, 13276, \"\u5c0f\u6cd5\");\n    put(hmap, 10583, \"\u5c0f\u9e2d\");\n    printf(\"\\n\u6dfb\u52a0\u5b8c\u6210\u540e\uff0c\u54c8\u5e0c\u8868\u4e3a\\nKey -> Value\\n\");\n    print(hmap);\n\n    /* \u67e5\u8be2\u64cd\u4f5c */\n    // \u5411\u54c8\u5e0c\u8868\u8f93\u5165\u952e key \uff0c\u5f97\u5230\u503c value\n    const char *name = get(hmap, 15937);\n    printf(\"\\n\u8f93\u5165\u5b66\u53f7 15937 \uff0c\u67e5\u8be2\u5230\u59d3\u540d %s\\n\", name);\n\n    /* \u5220\u9664\u64cd\u4f5c */\n    // \u5728\u54c8\u5e0c\u8868\u4e2d\u5220\u9664\u952e\u503c\u5bf9 (key, value)\n    removeItem(hmap, 10583);\n    printf(\"\\n\u5220\u9664 10583 \u540e\uff0c\u54c8\u5e0c\u8868\u4e3a\\nKey -> Value\\n\");\n    print(hmap);\n\n    /* \u904d\u5386\u54c8\u5e0c\u8868 */\n    int i;\n\n    printf(\"\\n\u904d\u5386\u952e\u503c\u5bf9 Key->Value\\n\");\n    print(hmap);\n\n    MapSet set;\n\n    keySet(hmap, &set);\n    int *keys = (int *)set.set;\n    printf(\"\\n\u5355\u72ec\u904d\u5386\u952e Key\\n\");\n    for (i = 0; i < set.len; i++) {\n        printf(\"%d\\n\", keys[i]);\n    }\n    free(set.set);\n\n    valueSet(hmap, &set);\n    char **vals = (char **)set.set;\n    printf(\"\\n\u5355\u72ec\u904d\u5386\u952e Value\\n\");\n    for (i = 0; i < set.len; i++) {\n        printf(\"%s\\n\", vals[i]);\n    }\n    free(set.set);\n\n    delArrayHashMap(hmap);\n    return 0;\n}", "doc_comment": "/* \u6253\u5370\u54c8\u5e0c\u8868 */"}, "code_tokens": ["void", "print", "(", ")", "{", "/* \u6dfb\u52a0\u64cd\u4f5c */", "// \u5728\u54c8\u5e0c\u8868\u4e2d\u6dfb\u52a0\u952e\u503c\u5bf9 (key, value)", "/* \u67e5\u8be2\u64cd\u4f5c */", "// \u5411\u54c8\u5e0c\u8868\u8f93\u5165\u952e key \uff0c\u5f97\u5230\u503c value", "/* \u5220\u9664\u64cd\u4f5c */", "// \u5728\u54c8\u5e0c\u8868\u4e2d\u5220\u9664\u952e\u503c\u5bf9 (key, value)", "/* \u904d\u5386\u54c8\u5e0c\u8868 */", "}", "ArrayHashMap", "hmap", ";", "MapSet", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "const", ";", ";", ";", ";", ";", ";", ";", ";", "MapSet", ";", ";", ";", ";", "for", "(", ";", ";", ")", ";", ";", ";", ";", "for", "(", ";", ";", ")", ";", ";", "return", "0", ";", "*", "int", "i", "set", "pairSet", "Pair", "*", "put", "put", "put", "put", "put", "printf", "print", "char", "=", "printf", "removeItem", "printf", "print", "int", "i", "printf", "print", "set", "keySet", "int", "*", "keys", "=", "printf", "i", "=", "0", "i", "<", "i", "++", "{", "}", "free", "valueSet", "char", "*", "*", "vals", "=", "printf", "i", "=", "0", "i", "<", "i", "++", "{", "}", "free", "delArrayHashMap", "(", ")", "entries", "=", "(", "hmap", ",", "12836", ",", ")", "(", "hmap", ",", "15937", ",", ")", "(", "hmap", ",", "16750", ",", ")", "(", "hmap", ",", "13276", ",", ")", "(", "hmap", ",", "10583", ",", ")", "(", ")", "(", "hmap", ")", "*", "name", "get", "(", ",", "name", ")", "(", "hmap", ",", "10583", ")", "(", ")", "(", "hmap", ")", "(", ")", "(", "hmap", ")", "(", ")", "(", ")", "(", ")", "set", ".", "len", ";", "(", ")", "(", ")", "(", ")", "(", ")", "set", ".", "len", ";", "(", ")", "(", "hmap", ")", "hmap", "&", "set", "(", "", "\"", "\u5c0f\u54c8", "\"", "\"", "\u5c0f\u5570", "\"", "\"", "\u5c0f\u7b97", "\"", "\"", "\u5c0f\u6cd5", "\"", "\"", "\u5c0f\u9e2d", "\"", "\"", "\\n", "\u6dfb\u52a0\u5b8c\u6210\u540e\uff0c\u54c8\u5e0c\u8868\u4e3a", "\\n", "Key -> Value", "\\n", "\"", "(", "hmap", ",", "15937", ")", "\"", "\\n", "\u8f93\u5165\u5b66\u53f7 15937 \uff0c\u67e5\u8be2\u5230\u59d3\u540d %s", "\\n", "\"", "\"", "\\n", "\u5220\u9664 10583 \u540e\uff0c\u54c8\u5e0c\u8868\u4e3a", "\\n", "Key -> Value", "\\n", "\"", "\"", "\\n", "\u904d\u5386\u952e\u503c\u5bf9 Key->Value", "\\n", "\"", "hmap", "&", "set", "int", "*", "set", ".", "set", "\"", "\\n", "\u5355\u72ec\u904d\u5386\u952e Key", "\\n", "\"", "printf", "set", ".", "set", "hmap", "&", "set", "char", "*", "*", "set", ".", "set", "\"", "\\n", "\u5355\u72ec\u904d\u5386\u952e Value", "\\n", "\"", "printf", "set", ".", "set", ",", "*", ",", "(", ",", ")", ",", "(", ",", ")", "Pair", "*", "/* \u521d\u59cb\u5316\u54c8\u5e0c\u8868 */", "ArrayHashMap", "hmap", "=", "\"", "%d", "\\n", "\"", "keys", "[", "i", "]", "\"", "%s", "\\n", "\"", "vals", "[", "i", "]", ")", ";", "for", "{", "newArrayHashMap", "set", ".", "set", "(", "/* Driver Code */", ")", "(", ")", ";", "}", ";", "}", "main", "(", "<", "free", "int", "i", "=", "0", ";", "i", ";", "i", "++", ")", "{", "printf", "(", ")", "(", ")", "set", ".", "len", ",", ",", ".", "val", "set", ".", "set", "\"", "%d -> %s", "\\n", "\"", ".", "key", "entries", "[", "i", "]", "entries", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 557, "ast_depth": 18, "n_identifiers": 25, "vocab_size": 78}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_heap/my_heap.c#20-20", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_heap/my_heap.c", "language": "Java"}, "method": {"name": "siftDown", "qualified_name": "codes.c.chapter_heap.my_heap.c#siftDown", "start_line": 20, "end_line": 20, "signature": "siftDown(MaxHeap *maxHeap, int i)", "original_code": "void siftDown(MaxHeap *maxHeap, int i);", "doc_comment": "// \u51fd\u6570\u58f0\u660e"}, "code_tokens": ["void", "siftDown", ";", "(", ",", ")", "MaxHeap", "maxHeap", "i", "*", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 18, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 11}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_heap/my_heap.c#21-21", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_heap/my_heap.c", "language": "Java"}, "method": {"name": "siftUp", "qualified_name": "codes.c.chapter_heap.my_heap.c#siftUp", "start_line": 21, "end_line": 21, "signature": "siftUp(MaxHeap *maxHeap, int i)", "original_code": "void siftUp(MaxHeap *maxHeap, int i);", "doc_comment": ""}, "code_tokens": ["void", "siftUp", ";", "(", ",", ")", "MaxHeap", "maxHeap", "i", "*", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 18, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 11}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_heap/my_heap.c#22-22", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_heap/my_heap.c", "language": "Java"}, "method": {"name": "parent", "qualified_name": "codes.c.chapter_heap.my_heap.c#parent", "start_line": 22, "end_line": 22, "signature": "parent(MaxHeap *maxHeap, int i)", "original_code": "int parent(MaxHeap *maxHeap, int i);", "doc_comment": ""}, "code_tokens": ["parent", ";", "int", "(", ",", ")", "MaxHeap", "maxHeap", "i", "*", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 19, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 10}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_heap/my_heap.c#38-41", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_heap/my_heap.c", "language": "Java"}, "method": {"name": "delMaxHeap", "qualified_name": "codes.c.chapter_heap.my_heap.c#delMaxHeap", "start_line": 38, "end_line": 41, "signature": "delMaxHeap(MaxHeap *maxHeap)", "original_code": "void delMaxHeap(MaxHeap *maxHeap) {\n    // \u91ca\u653e\u5185\u5b58\n    free(maxHeap);\n}", "doc_comment": "/* \u6790\u6784\u51fd\u6570 */"}, "code_tokens": ["void", "delMaxHeap", "(", ")", "{", "// \u91ca\u653e\u5185\u5b58", "}", "MaxHeap", "maxHeap", ";", "*", "free", "(", "maxHeap", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 24, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 12}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_heap/my_heap.c#44-46", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_heap/my_heap.c", "language": "Java"}, "method": {"name": "left", "qualified_name": "codes.c.chapter_heap.my_heap.c#left", "start_line": 44, "end_line": 46, "signature": "left(MaxHeap *maxHeap, int i)", "original_code": "int left(MaxHeap *maxHeap, int i) {\n    return 2 * i + 1;\n}", "doc_comment": "/* \u83b7\u53d6\u5de6\u5b50\u8282\u70b9\u7d22\u5f15 */"}, "code_tokens": ["left", "int", "(", ",", ")", "{", "}", "MaxHeap", "maxHeap", "i", "return", ";", "*", "int", "+", "1", "2", "*", "i"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 31, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 16}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_heap/my_heap.c#49-51", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_heap/my_heap.c", "language": "Java"}, "method": {"name": "right", "qualified_name": "codes.c.chapter_heap.my_heap.c#right", "start_line": 49, "end_line": 51, "signature": "right(MaxHeap *maxHeap, int i)", "original_code": "int right(MaxHeap *maxHeap, int i) {\n    return 2 * i + 2;\n}", "doc_comment": "/* \u83b7\u53d6\u53f3\u5b50\u8282\u70b9\u7d22\u5f15 */"}, "code_tokens": ["right", "int", "(", ",", ")", "{", "}", "MaxHeap", "maxHeap", "i", "return", ";", "*", "int", "+", "2", "2", "*", "i"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 31, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 15}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_heap/my_heap.c#54-56", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_heap/my_heap.c", "language": "Java"}, "method": {"name": "parent", "qualified_name": "codes.c.chapter_heap.my_heap.c#parent", "start_line": 54, "end_line": 56, "signature": "parent(MaxHeap *maxHeap, int i)", "original_code": "int parent(MaxHeap *maxHeap, int i) {\n    return (i - 1) / 2;\n}", "doc_comment": "/* \u83b7\u53d6\u7236\u8282\u70b9\u7d22\u5f15 */"}, "code_tokens": ["parent", "int", "(", ",", ")", "{", "}", "MaxHeap", "maxHeap", "i", "return", ";", "*", "int", "/", "2", "(", ")", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 34, "ast_depth": 8, "n_identifiers": 3, "vocab_size": 17}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_heap/my_heap.c#59-63", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_heap/my_heap.c", "language": "Java"}, "method": {"name": "swap", "qualified_name": "codes.c.chapter_heap.my_heap.c#swap", "start_line": 59, "end_line": 63, "signature": "swap(MaxHeap *maxHeap, int i, int j)", "original_code": "void swap(MaxHeap *maxHeap, int i, int j) {\n    int temp = maxHeap->data[i];\n    maxHeap->data[i] = maxHeap->data[j];\n    maxHeap->data[j] = temp;\n}", "doc_comment": "/* \u4ea4\u6362\u5143\u7d20 */"}, "code_tokens": ["void", "swap", "(", ",", ",", ")", "{", "}", "MaxHeap", "maxHeap", "i", "j", ";", ";", ";", "*", "int", "int", "int", "temp", "=", "maxHeap", "->", "maxHeap", "->", "maxHeap", "->", "=", "=", "temp", "data", "[", "i", "]", "data", "[", "i", "]", "maxHeap", "->", "data", "[", "j", "]", "data", "[", "j", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 73, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 20}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_heap/my_heap.c#66-68", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_heap/my_heap.c", "language": "Java"}, "method": {"name": "size", "qualified_name": "codes.c.chapter_heap.my_heap.c#size", "start_line": 66, "end_line": 68, "signature": "size(MaxHeap *maxHeap)", "original_code": "int size(MaxHeap *maxHeap) {\n    return maxHeap->size;\n}", "doc_comment": "/* \u83b7\u53d6\u5806\u5927\u5c0f */"}, "code_tokens": ["size", "int", "(", ")", "{", "}", "MaxHeap", "maxHeap", "return", ";", "*", "maxHeap", "->", "size"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 23, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 12}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_heap/my_heap.c#71-73", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_heap/my_heap.c", "language": "Java"}, "method": {"name": "isEmpty", "qualified_name": "codes.c.chapter_heap.my_heap.c#isEmpty", "start_line": 71, "end_line": 73, "signature": "isEmpty(MaxHeap *maxHeap)", "original_code": "int isEmpty(MaxHeap *maxHeap) {\n    return maxHeap->size == 0;\n}", "doc_comment": "/* \u5224\u65ad\u5806\u662f\u5426\u4e3a\u7a7a */"}, "code_tokens": ["isEmpty", "int", "(", ")", "{", "}", "MaxHeap", "maxHeap", "return", ";", "*", "maxHeap", "->", "size", "==", "0"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 26, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 15}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_heap/my_heap.c#76-78", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_heap/my_heap.c", "language": "Java"}, "method": {"name": "peek", "qualified_name": "codes.c.chapter_heap.my_heap.c#peek", "start_line": 76, "end_line": 78, "signature": "peek(MaxHeap *maxHeap)", "original_code": "int peek(MaxHeap *maxHeap) {\n    return maxHeap->data[0];\n}", "doc_comment": "/* \u8bbf\u95ee\u5806\u9876\u5143\u7d20 */"}, "code_tokens": ["peek", "int", "(", ")", "{", "}", "MaxHeap", "maxHeap", "return", ";", "*", "maxHeap", "->", "data", "[", "0", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 27, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 16}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_heap/my_heap.c#81-93", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_heap/my_heap.c", "language": "Java"}, "method": {"name": "push", "qualified_name": "codes.c.chapter_heap.my_heap.c#push", "start_line": 81, "end_line": 93, "signature": "push(MaxHeap *maxHeap, int val)", "original_code": "void push(MaxHeap *maxHeap, int val) {\n    // \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4e0d\u5e94\u8be5\u6dfb\u52a0\u8fd9\u4e48\u591a\u8282\u70b9\n    if (maxHeap->size == MAX_SIZE) {\n        printf(\"heap is full!\");\n        return;\n    }\n    // \u6dfb\u52a0\u8282\u70b9\n    maxHeap->data[maxHeap->size] = val;\n    maxHeap->size++;\n\n    // \u4ece\u5e95\u81f3\u9876\u5806\u5316\n    siftUp(maxHeap, maxHeap->size - 1);\n}", "doc_comment": "/* \u5143\u7d20\u5165\u5806 */"}, "code_tokens": ["void", "push", "(", ",", ")", "{", "// \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4e0d\u5e94\u8be5\u6dfb\u52a0\u8fd9\u4e48\u591a\u8282\u70b9", "// \u6dfb\u52a0\u8282\u70b9", "// \u4ece\u5e95\u81f3\u9876\u5806\u5316", "}", "MaxHeap", "maxHeap", "val", "if", ";", ";", ";", "*", "int", "(", ")", "{", "}", "maxHeap", "->", "maxHeap", "->", "siftUp", "maxHeap", "->", ";", "return", ";", "=", "val", "size", "++", "(", "maxHeap", ",", ")", "size", "==", "MAX_SIZE", "printf", "data", "[", "]", "maxHeap", "->", "(", ")", "maxHeap", "->", "size", "size", "-", "1", "\"", "heap is full!", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 92, "ast_depth": 10, "n_identifiers": 8, "vocab_size": 33}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_heap/my_heap.c#96-112", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_heap/my_heap.c", "language": "Java"}, "method": {"name": "pop", "qualified_name": "codes.c.chapter_heap.my_heap.c#pop", "start_line": 96, "end_line": 112, "signature": "pop(MaxHeap *maxHeap)", "original_code": "int pop(MaxHeap *maxHeap) {\n    // \u5224\u7a7a\u5904\u7406\n    if (isEmpty(maxHeap)) {\n        printf(\"heap is empty!\");\n        return INT_MAX;\n    }\n    // \u4ea4\u6362\u6839\u8282\u70b9\u4e0e\u6700\u53f3\u53f6\u8282\u70b9\uff08\u4ea4\u6362\u9996\u5143\u7d20\u4e0e\u5c3e\u5143\u7d20\uff09\n    swap(maxHeap, 0, size(maxHeap) - 1);\n    // \u5220\u9664\u8282\u70b9\n    int val = maxHeap->data[maxHeap->size - 1];\n    maxHeap->size--;\n    // \u4ece\u9876\u81f3\u5e95\u5806\u5316\n    siftDown(maxHeap, 0);\n\n    // \u8fd4\u56de\u5806\u9876\u5143\u7d20\n    return val;\n}", "doc_comment": "/* \u5143\u7d20\u51fa\u5806 */"}, "code_tokens": ["pop", "int", "(", ")", "{", "// \u5224\u7a7a\u5904\u7406", "// \u4ea4\u6362\u6839\u8282\u70b9\u4e0e\u6700\u53f3\u53f6\u8282\u70b9\uff08\u4ea4\u6362\u9996\u5143\u7d20\u4e0e\u5c3e\u5143\u7d20\uff09", "// \u5220\u9664\u8282\u70b9", "// \u4ece\u9876\u81f3\u5e95\u5806\u5316", "// \u8fd4\u56de\u5806\u9876\u5143\u7d20", "}", "MaxHeap", "maxHeap", "if", ";", ";", ";", ";", "return", "val", ";", "*", "(", ")", "{", "}", "swap", "int", "val", "=", "maxHeap", "->", "siftDown", "isEmpty", ";", "return", "INT_MAX", ";", "(", "maxHeap", ",", "0", ",", ")", "maxHeap", "->", "size", "--", "(", "maxHeap", ",", "0", ")", "(", "maxHeap", ")", "printf", "-", "1", "data", "[", "]", "(", ")", "size", "maxHeap", "->", "\"", "heap is empty!", "\"", "(", "maxHeap", ")", "size", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 113, "ast_depth": 10, "n_identifiers": 10, "vocab_size": 36}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_heap/my_heap.c#115-136", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_heap/my_heap.c", "language": "Java"}, "method": {"name": "siftDown", "qualified_name": "codes.c.chapter_heap.my_heap.c#siftDown", "start_line": 115, "end_line": 136, "signature": "siftDown(MaxHeap *maxHeap, int i)", "original_code": "void siftDown(MaxHeap *maxHeap, int i) {\n    while (true) {\n        // \u5224\u65ad\u8282\u70b9 i, l, r \u4e2d\u503c\u6700\u5927\u7684\u8282\u70b9\uff0c\u8bb0\u4e3a max\n        int l = left(maxHeap, i);\n        int r = right(maxHeap, i);\n        int max = i;\n        if (l < size(maxHeap) && maxHeap->data[l] > maxHeap->data[max]) {\n            max = l;\n        }\n        if (r < size(maxHeap) && maxHeap->data[r] > maxHeap->data[max]) {\n            max = r;\n        }\n        // \u82e5\u8282\u70b9 i \u6700\u5927\u6216\u7d22\u5f15 l, r \u8d8a\u754c\uff0c\u5219\u65e0\u987b\u7ee7\u7eed\u5806\u5316\uff0c\u8df3\u51fa\n        if (max == i) {\n            break;\n        }\n        // \u4ea4\u6362\u4e24\u8282\u70b9\n        swap(maxHeap, i, max);\n        // \u5faa\u73af\u5411\u4e0b\u5806\u5316\n        i = max;\n    }\n}", "doc_comment": "/* \u4ece\u8282\u70b9 i \u5f00\u59cb\uff0c\u4ece\u9876\u81f3\u5e95\u5806\u5316 */"}, "code_tokens": ["void", "siftDown", "(", ",", ")", "{", "}", "MaxHeap", "maxHeap", "i", "while", "*", "int", "(", "true", ")", "{", "// \u5224\u65ad\u8282\u70b9 i, l, r \u4e2d\u503c\u6700\u5927\u7684\u8282\u70b9\uff0c\u8bb0\u4e3a max", "// \u82e5\u8282\u70b9 i \u6700\u5927\u6216\u7d22\u5f15 l, r \u8d8a\u754c\uff0c\u5219\u65e0\u987b\u7ee7\u7eed\u5806\u5316\uff0c\u8df3\u51fa", "// \u4ea4\u6362\u4e24\u8282\u70b9", "// \u5faa\u73af\u5411\u4e0b\u5806\u5316", "}", ";", ";", ";", "if", "if", "if", ";", ";", "int", "l", "=", "int", "r", "=", "int", "max", "=", "i", "(", ")", "{", "}", "(", ")", "{", "}", "(", ")", "{", "}", "swap", "i", "=", "max", "left", "right", "&&", ";", "&&", ";", "max", "==", "i", "break", ";", "(", "maxHeap", ",", "i", ",", "max", ")", "(", "maxHeap", ",", "i", ")", "(", "maxHeap", ",", "i", ")", "l", "<", "maxHeap", "->", "max", "=", "l", "r", "<", "maxHeap", "->", "max", "=", "r", "size", ">", "size", ">", "(", "maxHeap", ")", "data", "[", "l", "]", "maxHeap", "->", "(", "maxHeap", ")", "data", "[", "r", "]", "maxHeap", "->", "data", "[", "max", "]", "data", "[", "max", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 190, "ast_depth": 13, "n_identifiers": 11, "vocab_size": 37}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_heap/my_heap.c#139-152", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_heap/my_heap.c", "language": "Java"}, "method": {"name": "siftUp", "qualified_name": "codes.c.chapter_heap.my_heap.c#siftUp", "start_line": 139, "end_line": 152, "signature": "siftUp(MaxHeap *maxHeap, int i)", "original_code": "void siftUp(MaxHeap *maxHeap, int i) {\n    while (true) {\n        // \u83b7\u53d6\u8282\u70b9 i \u7684\u7236\u8282\u70b9\n        int p = parent(maxHeap, i);\n        // \u5f53\u201c\u8d8a\u8fc7\u6839\u8282\u70b9\u201d\u6216\u201c\u8282\u70b9\u65e0\u987b\u4fee\u590d\u201d\u65f6\uff0c\u7ed3\u675f\u5806\u5316\n        if (p < 0 || maxHeap->data[i] <= maxHeap->data[p]) {\n            break;\n        }\n        // \u4ea4\u6362\u4e24\u8282\u70b9\n        swap(maxHeap, i, p);\n        // \u5faa\u73af\u5411\u4e0a\u5806\u5316\n        i = p;\n    }\n}", "doc_comment": "/* \u4ece\u8282\u70b9 i \u5f00\u59cb\uff0c\u4ece\u5e95\u81f3\u9876\u5806\u5316 */"}, "code_tokens": ["void", "siftUp", "(", ",", ")", "{", "}", "MaxHeap", "maxHeap", "i", "while", "*", "int", "(", "true", ")", "{", "// \u83b7\u53d6\u8282\u70b9 i \u7684\u7236\u8282\u70b9", "// \u5f53\u201c\u8d8a\u8fc7\u6839\u8282\u70b9\u201d\u6216\u201c\u8282\u70b9\u65e0\u987b\u4fee\u590d\u201d\u65f6\uff0c\u7ed3\u675f\u5806\u5316", "// \u4ea4\u6362\u4e24\u8282\u70b9", "// \u5faa\u73af\u5411\u4e0a\u5806\u5316", "}", ";", "if", ";", ";", "int", "p", "=", "(", ")", "{", "}", "swap", "i", "=", "p", "parent", "||", "break", ";", "(", "maxHeap", ",", "i", ",", "p", ")", "(", "maxHeap", ",", "i", ")", "p", "<", "0", "maxHeap", "->", "<=", "data", "[", "i", "]", "maxHeap", "->", "data", "[", "p", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 101, "ast_depth": 13, "n_identifiers": 7, "vocab_size": 33}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_searching/binary_search.c#10-25", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_searching/binary_search.c", "language": "Java"}, "method": {"name": "binarySearch", "qualified_name": "codes.c.chapter_searching.binary_search.c#binarySearch", "start_line": 10, "end_line": 25, "signature": "binarySearch(int *nums, int len, int target)", "original_code": "int binarySearch(int *nums, int len, int target) {\n    // \u521d\u59cb\u5316\u53cc\u95ed\u533a\u95f4 [0, n-1] \uff0c\u5373 i, j \u5206\u522b\u6307\u5411\u6570\u7ec4\u9996\u5143\u7d20\u3001\u5c3e\u5143\u7d20\n    int i = 0, j = len - 1;\n    // \u5faa\u73af\uff0c\u5f53\u641c\u7d22\u533a\u95f4\u4e3a\u7a7a\u65f6\u8df3\u51fa\uff08\u5f53 i > j \u65f6\u4e3a\u7a7a\uff09\n    while (i <= j) {\n        int m = i + (j - i) / 2; // \u8ba1\u7b97\u4e2d\u70b9\u7d22\u5f15 m\n        if (nums[m] < target)    // \u6b64\u60c5\u51b5\u8bf4\u660e target \u5728\u533a\u95f4 [m+1, j] \u4e2d\n            i = m + 1;\n        else if (nums[m] > target) // \u6b64\u60c5\u51b5\u8bf4\u660e target \u5728\u533a\u95f4 [i, m-1] \u4e2d\n            j = m - 1;\n        else // \u627e\u5230\u76ee\u6807\u5143\u7d20\uff0c\u8fd4\u56de\u5176\u7d22\u5f15\n            return m;\n    }\n    // \u672a\u627e\u5230\u76ee\u6807\u5143\u7d20\uff0c\u8fd4\u56de -1\n    return -1;\n}", "doc_comment": "/* \u4e8c\u5206\u67e5\u627e\uff08\u53cc\u95ed\u533a\u95f4\uff09 */"}, "code_tokens": ["binarySearch", "int", "(", ",", ",", ")", "{", "// \u521d\u59cb\u5316\u53cc\u95ed\u533a\u95f4 [0, n-1] \uff0c\u5373 i, j \u5206\u522b\u6307\u5411\u6570\u7ec4\u9996\u5143\u7d20\u3001\u5c3e\u5143\u7d20", "// \u5faa\u73af\uff0c\u5f53\u641c\u7d22\u533a\u95f4\u4e3a\u7a7a\u65f6\u8df3\u51fa\uff08\u5f53 i > j \u65f6\u4e3a\u7a7a\uff09", "// \u672a\u627e\u5230\u76ee\u6807\u5143\u7d20\uff0c\u8fd4\u56de -1", "}", "nums", "len", "target", ",", ";", "while", "return", ";", "int", "*", "int", "int", "int", "i", "=", "0", "j", "=", "(", ")", "{", "// \u8ba1\u7b97\u4e2d\u70b9\u7d22\u5f15 m", "}", "-", "1", "len", "-", "1", "i", "<=", "j", ";", "if", "// \u6b64\u60c5\u51b5\u8bf4\u660e target \u5728\u533a\u95f4 [m+1, j] \u4e2d", "else", "int", "m", "=", "(", ")", ";", "if", "// \u6b64\u60c5\u51b5\u8bf4\u660e target \u5728\u533a\u95f4 [i, m-1] \u4e2d", "else", "// \u627e\u5230\u76ee\u6807\u5143\u7d20\uff0c\u8fd4\u56de\u5176\u7d22\u5f15", "i", "+", "<", "target", "i", "=", "(", ")", ";", "return", "m", ";", "/", "2", "nums", "[", "m", "]", "m", "+", "1", ">", "target", "j", "=", "(", ")", "nums", "[", "m", "]", "m", "-", "1", "j", "-", "i"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 138, "ast_depth": 12, "n_identifiers": 7, "vocab_size": 38}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_searching/binary_search.c#28-43", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_searching/binary_search.c", "language": "Java"}, "method": {"name": "binarySearchLCRO", "qualified_name": "codes.c.chapter_searching.binary_search.c#binarySearchLCRO", "start_line": 28, "end_line": 43, "signature": "binarySearchLCRO(int *nums, int len, int target)", "original_code": "int binarySearchLCRO(int *nums, int len, int target) {\n    // \u521d\u59cb\u5316\u5de6\u95ed\u53f3\u5f00\u533a\u95f4 [0, n) \uff0c\u5373 i, j \u5206\u522b\u6307\u5411\u6570\u7ec4\u9996\u5143\u7d20\u3001\u5c3e\u5143\u7d20+1\n    int i = 0, j = len;\n    // \u5faa\u73af\uff0c\u5f53\u641c\u7d22\u533a\u95f4\u4e3a\u7a7a\u65f6\u8df3\u51fa\uff08\u5f53 i = j \u65f6\u4e3a\u7a7a\uff09\n    while (i < j) {\n        int m = i + (j - i) / 2; // \u8ba1\u7b97\u4e2d\u70b9\u7d22\u5f15 m\n        if (nums[m] < target)    // \u6b64\u60c5\u51b5\u8bf4\u660e target \u5728\u533a\u95f4 [m+1, j) \u4e2d\n            i = m + 1;\n        else if (nums[m] > target) // \u6b64\u60c5\u51b5\u8bf4\u660e target \u5728\u533a\u95f4 [i, m) \u4e2d\n            j = m;\n        else // \u627e\u5230\u76ee\u6807\u5143\u7d20\uff0c\u8fd4\u56de\u5176\u7d22\u5f15\n            return m;\n    }\n    // \u672a\u627e\u5230\u76ee\u6807\u5143\u7d20\uff0c\u8fd4\u56de -1\n    return -1;\n}", "doc_comment": "/* \u4e8c\u5206\u67e5\u627e\uff08\u5de6\u95ed\u53f3\u5f00\u533a\u95f4\uff09 */"}, "code_tokens": ["binarySearchLCRO", "int", "(", ",", ",", ")", "{", "// \u521d\u59cb\u5316\u5de6\u95ed\u53f3\u5f00\u533a\u95f4 [0, n) \uff0c\u5373 i, j \u5206\u522b\u6307\u5411\u6570\u7ec4\u9996\u5143\u7d20\u3001\u5c3e\u5143\u7d20+1", "// \u5faa\u73af\uff0c\u5f53\u641c\u7d22\u533a\u95f4\u4e3a\u7a7a\u65f6\u8df3\u51fa\uff08\u5f53 i = j \u65f6\u4e3a\u7a7a\uff09", "// \u672a\u627e\u5230\u76ee\u6807\u5143\u7d20\uff0c\u8fd4\u56de -1", "}", "nums", "len", "target", ",", ";", "while", "return", ";", "int", "*", "int", "int", "int", "i", "=", "0", "j", "=", "len", "(", ")", "{", "// \u8ba1\u7b97\u4e2d\u70b9\u7d22\u5f15 m", "}", "-", "1", "i", "<", "j", ";", "if", "// \u6b64\u60c5\u51b5\u8bf4\u660e target \u5728\u533a\u95f4 [m+1, j) \u4e2d", "else", "int", "m", "=", "(", ")", ";", "if", "// \u6b64\u60c5\u51b5\u8bf4\u660e target \u5728\u533a\u95f4 [i, m) \u4e2d", "else", "// \u627e\u5230\u76ee\u6807\u5143\u7d20\uff0c\u8fd4\u56de\u5176\u7d22\u5f15", "i", "+", "<", "target", "i", "=", "(", ")", ";", "return", "m", ";", "/", "2", "nums", "[", "m", "]", "m", "+", "1", ">", "target", "j", "=", "m", "(", ")", "nums", "[", "m", "]", "j", "-", "i"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 132, "ast_depth": 12, "n_identifiers": 7, "vocab_size": 37}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_searching/binary_search.c#46-59", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_searching/binary_search.c", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.c.chapter_searching.binary_search.c#main", "start_line": 46, "end_line": 59, "signature": "main()", "original_code": "int main() {\n    int target = 6;\n    int nums[10] = {1, 3, 6, 8, 12, 15, 23, 26, 31, 35};\n\n    /* \u4e8c\u5206\u67e5\u627e\uff08\u53cc\u95ed\u533a\u95f4\uff09 */\n    int index = binarySearch(nums, 10, target);\n    printf(\"\u76ee\u6807\u5143\u7d20 6 \u7684\u7d22\u5f15 = %d\\n\", index);\n\n    /* \u4e8c\u5206\u67e5\u627e\uff08\u5de6\u95ed\u53f3\u5f00\u533a\u95f4\uff09 */\n    index = binarySearchLCRO(nums, 10, target);\n    printf(\"\u76ee\u6807\u5143\u7d20 6 \u7684\u7d22\u5f15 = %d\\n\", index);\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "/* \u4e8c\u5206\u67e5\u627e\uff08\u53cc\u95ed\u533a\u95f4\uff09 */", "/* \u4e8c\u5206\u67e5\u627e\uff08\u5de6\u95ed\u53f3\u5f00\u533a\u95f4\uff09 */", "}", ";", ";", ";", ";", ";", ";", "return", "0", ";", "int", "target", "=", "6", "int", "nums", "=", "int", "index", "=", "printf", "index", "=", "printf", "[", "]", "{", "1", ",", "3", ",", "6", ",", "8", ",", "12", ",", "15", ",", "23", ",", "26", ",", "31", ",", "35", "}", "binarySearch", "(", ",", "index", ")", "binarySearchLCRO", "(", ",", "index", ")", "10", "(", "nums", ",", "10", ",", "target", ")", "\"", "\u76ee\u6807\u5143\u7d20 6 \u7684\u7d22\u5f15 = %d", "\\n", "\"", "(", "nums", ",", "10", ",", "target", ")", "\"", "\u76ee\u6807\u5143\u7d20 6 \u7684\u7d22\u5f15 = %d", "\\n", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 119, "ast_depth": 8, "n_identifiers": 7, "vocab_size": 35}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_sorting/bucket_sort.c#12-16", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_sorting/bucket_sort.c", "language": "Java"}, "method": {"name": "compare_float", "qualified_name": "codes.c.chapter_sorting.bucket_sort.c#compare_float", "start_line": 12, "end_line": 16, "signature": "compare_float(const void *a, const void *b)", "original_code": "int compare_float(const void *a, const void *b) {\n    float fa = *(const float *)a;\n    float fb = *(const float *)b;\n    return (fa > fb) - (fa < fb);\n}", "doc_comment": "/* \u6bd4\u8f83\u4e24\u4e2a\u6d6e\u70b9\u6570\u7684\u5927\u5c0f */"}, "code_tokens": ["compare_float", "int", "(", ",", ")", "{", "}", "const", "void", "*", "a", "const", "void", "*", "b", ";", ";", "return", ";", "float", "fa", "=", "a", "float", "fb", "=", "b", "-", "*", "*", "(", ")", "(", ")", "(", ")", "(", ")", "fa", ">", "fb", "fa", "<", "fb", "const", "float", "*", "const", "float", "*"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 79, "ast_depth": 9, "n_identifiers": 7, "vocab_size": 21}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_sorting/bucket_sort.c#19-23", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_sorting/bucket_sort.c", "language": "Java"}, "method": {"name": "swap", "qualified_name": "codes.c.chapter_sorting.bucket_sort.c#swap", "start_line": 19, "end_line": 23, "signature": "swap(float *a, float *b)", "original_code": "void swap(float *a, float *b) {\n    float tmp = *a;\n    *a = *b;\n    *b = tmp;\n}", "doc_comment": "/* \u4ea4\u6362\u4e24\u4e2a\u6d6e\u70b9\u6570 */"}, "code_tokens": ["void", "swap", "(", ",", ")", "{", "}", "a", "b", ";", "*", ";", "*", ";", "float", "*", "float", "*", "float", "tmp", "=", "a", "a", "*", "b", "b", "=", "tmp", "*", "="], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 51, "ast_depth": 7, "n_identifiers": 4, "vocab_size": 14}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_sorting/bucket_sort.c#26-71", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_sorting/bucket_sort.c", "language": "Java"}, "method": {"name": "bucketSort", "qualified_name": "codes.c.chapter_sorting.bucket_sort.c#bucketSort", "start_line": 26, "end_line": 71, "signature": "bucketSort(float nums[], int size)", "original_code": "void bucketSort(float nums[], int size) {\n    // \u521d\u59cb\u5316 k = n/2 \u4e2a\u6876\uff0c\u9884\u671f\u5411\u6bcf\u4e2a\u6876\u5206\u914d 2 \u4e2a\u5143\u7d20\n    int k = size / 2;\n    float **buckets = calloc(k, sizeof(float *));\n    for (int i = 0; i < k; i++) {\n        // \u6bcf\u4e2a\u6876\u6700\u591a\u53ef\u4ee5\u5206\u914d k \u4e2a\u5143\u7d20\n        buckets[i] = calloc(ARRAY_SIZE, sizeof(float));\n    }\n\n    // 1. \u5c06\u6570\u7ec4\u5143\u7d20\u5206\u914d\u5230\u5404\u4e2a\u6876\u4e2d\n    for (int i = 0; i < size; i++) {\n        // \u8f93\u5165\u6570\u636e\u8303\u56f4\u4e3a [0, 1)\uff0c\u4f7f\u7528 num * k \u6620\u5c04\u5230\u7d22\u5f15\u8303\u56f4 [0, k-1]\n        int bucket_idx = nums[i] * k;\n        int j = 0;\n        // \u5982\u679c\u6876\u4e2d\u6709\u6570\u636e\u4e14\u6570\u636e\u5c0f\u4e8e\u5f53\u524d\u503c nums[i], \u8981\u5c06\u5176\u653e\u5230\u5f53\u524d\u6876\u7684\u540e\u9762\uff0c\u76f8\u5f53\u4e8e cpp \u4e2d\u7684 push_back\n        while (buckets[bucket_idx][j] > 0 && buckets[bucket_idx][j] < nums[i]) {\n            j++;\n        }\n        float temp = nums[i];\n        while (j < ARRAY_SIZE && buckets[bucket_idx][j] > 0) {\n            swap(&temp, &buckets[bucket_idx][j]);\n            j++;\n        }\n        buckets[bucket_idx][j] = temp;\n    }\n\n    // 2. \u5bf9\u5404\u4e2a\u6876\u6267\u884c\u6392\u5e8f\n    for (int i = 0; i < k; i++) {\n        qsort(buckets[i], ARRAY_SIZE, sizeof(float), compare_float);\n    }\n\n    // 3. \u904d\u5386\u6876\u5408\u5e76\u7ed3\u679c\n    for (int i = 0, j = 0; j < k; j++) {\n        for (int l = 0; l < ARRAY_SIZE; l++) {\n            if (buckets[j][l] > 0) {\n                nums[i++] = buckets[j][l];\n            }\n        }\n    }\n\n    // \u91ca\u653e\u4e0a\u8ff0\u5206\u914d\u7684\u5185\u5b58\n    for (int i = 0; i < k; i++) {\n        free(buckets[i]);\n    }\n    free(buckets);\n}", "doc_comment": "/* \u6876\u6392\u5e8f */"}, "code_tokens": ["void", "bucketSort", "(", ",", ")", "{", "// \u521d\u59cb\u5316 k = n/2 \u4e2a\u6876\uff0c\u9884\u671f\u5411\u6bcf\u4e2a\u6876\u5206\u914d 2 \u4e2a\u5143\u7d20", "// 1. \u5c06\u6570\u7ec4\u5143\u7d20\u5206\u914d\u5230\u5404\u4e2a\u6876\u4e2d", "// 2. \u5bf9\u5404\u4e2a\u6876\u6267\u884c\u6392\u5e8f", "// 3. \u904d\u5386\u6876\u5408\u5e76\u7ed3\u679c", "// \u91ca\u653e\u4e0a\u8ff0\u5206\u914d\u7684\u5185\u5b58", "}", "nums", "size", ";", ";", "for", "(", ";", ")", "for", "(", ";", ")", "for", "(", ";", ")", "for", "(", ";", ")", "for", "(", ";", ")", ";", "float", "[", "]", "int", "int", "k", "=", "float", "*", "*", "buckets", "=", ";", "i", "<", "k", "i", "++", "{", "// \u6bcf\u4e2a\u6876\u6700\u591a\u53ef\u4ee5\u5206\u914d k \u4e2a\u5143\u7d20", "}", ";", "i", "<", "size", "i", "++", "{", "// \u8f93\u5165\u6570\u636e\u8303\u56f4\u4e3a [0, 1)\uff0c\u4f7f\u7528 num * k \u6620\u5c04\u5230\u7d22\u5f15\u8303\u56f4 [0, k-1]", "// \u5982\u679c\u6876\u4e2d\u6709\u6570\u636e\u4e14\u6570\u636e\u5c0f\u4e8e\u5f53\u524d\u503c nums[i], \u8981\u5c06\u5176\u653e\u5230\u5f53\u524d\u6876\u7684\u540e\u9762\uff0c\u76f8\u5f53\u4e8e cpp \u4e2d\u7684 push_back", "}", ";", "i", "<", "k", "i", "++", "{", "}", ",", ";", "j", "<", "k", "j", "++", "{", "}", ";", "i", "<", "k", "i", "++", "{", "}", "free", "size", "/", "2", "calloc", "int", "i", "=", "0", ";", "int", "i", "=", "0", ";", ";", "while", ";", "while", ";", "int", "i", "=", "0", ";", "int", "i", "=", "0", "j", "=", "0", "for", "(", ";", ")", "int", "i", "=", "0", ";", "(", "buckets", ")", "(", "k", ",", ")", "=", "int", "bucket_idx", "=", "int", "j", "=", "0", "(", ")", "{", "}", "float", "temp", "=", "(", ")", "{", "}", "=", "temp", "qsort", ";", "l", "<", "ARRAY_SIZE", "l", "++", "{", "}", "free", "sizeof", "buckets", "[", "i", "]", "calloc", "*", "k", "&&", ";", "nums", "[", "i", "]", "&&", ";", ";", "[", "j", "]", "(", ",", "ARRAY_SIZE", ",", ",", "compare_float", ")", "int", "l", "=", "0", "if", "(", ")", "(", ")", "(", "ARRAY_SIZE", ",", ")", "nums", "[", "i", "]", ">", "0", "<", "j", "++", "j", "<", "ARRAY_SIZE", ">", "0", "swap", "j", "++", "buckets", "[", "bucket_idx", "]", "buckets", "[", "i", "]", "sizeof", "(", ")", "{", "}", "buckets", "[", "i", "]", "*", "sizeof", "[", "j", "]", "[", "j", "]", "nums", "[", "i", "]", "[", "j", "]", "(", ")", "(", ")", ">", "0", ";", "float", "(", ")", "buckets", "[", "bucket_idx", "]", "buckets", "[", "bucket_idx", "]", "buckets", "[", "bucket_idx", "]", "&", "temp", "&", "[", "l", "]", "=", ",", "[", "j", "]", "float", "buckets", "[", "j", "]", "nums", "[", "]", "[", "l", "]", "float", "buckets", "[", "bucket_idx", "]", "i", "++", "buckets", "[", "j", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 465, "ast_depth": 14, "n_identifiers": 17, "vocab_size": 49}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_sorting/bucket_sort.c#74-82", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_sorting/bucket_sort.c", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.c.chapter_sorting.bucket_sort.c#main", "start_line": 74, "end_line": 82, "signature": "main()", "original_code": "int main() {\n    // \u8bbe\u8f93\u5165\u6570\u636e\u4e3a\u6d6e\u70b9\u6570\uff0c\u8303\u56f4\u4e3a [0, 1)\n    float nums[ARRAY_SIZE] = {0.49f, 0.96f, 0.82f, 0.09f, 0.57f, 0.43f, 0.91f, 0.75f, 0.15f, 0.37f};\n    bucketSort(nums, ARRAY_SIZE);\n    printf(\"\u6876\u6392\u5e8f\u5b8c\u6210\u540e nums = \");\n    printArrayFloat(nums, ARRAY_SIZE);\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "// \u8bbe\u8f93\u5165\u6570\u636e\u4e3a\u6d6e\u70b9\u6570\uff0c\u8303\u56f4\u4e3a [0, 1)", "}", ";", ";", ";", ";", "return", "0", ";", "float", "nums", "=", "bucketSort", "printf", "printArrayFloat", "[", "]", "{", "0.49f", ",", "0.96f", ",", "0.82f", ",", "0.09f", ",", "0.57f", ",", "0.43f", ",", "0.91f", ",", "0.75f", ",", "0.15f", ",", "0.37f", "}", "(", "nums", ",", "ARRAY_SIZE", ")", "(", ")", "(", "nums", ",", "ARRAY_SIZE", ")", "ARRAY_SIZE", "\"", "\u6876\u6392\u5e8f\u5b8c\u6210\u540e nums = ", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 81, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 32}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_sorting/heap_sort.c#10-31", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_sorting/heap_sort.c", "language": "Java"}, "method": {"name": "siftDown", "qualified_name": "codes.c.chapter_sorting.heap_sort.c#siftDown", "start_line": 10, "end_line": 31, "signature": "siftDown(int nums[], int n, int i)", "original_code": "void siftDown(int nums[], int n, int i) {\n    while (1) {\n        // \u5224\u65ad\u8282\u70b9 i, l, r \u4e2d\u503c\u6700\u5927\u7684\u8282\u70b9\uff0c\u8bb0\u4e3a ma\n        int l = 2 * i + 1;\n        int r = 2 * i + 2;\n        int ma = i;\n        if (l < n && nums[l] > nums[ma])\n            ma = l;\n        if (r < n && nums[r] > nums[ma])\n            ma = r;\n        // \u82e5\u8282\u70b9 i \u6700\u5927\u6216\u7d22\u5f15 l, r \u8d8a\u754c\uff0c\u5219\u65e0\u987b\u7ee7\u7eed\u5806\u5316\uff0c\u8df3\u51fa\n        if (ma == i) {\n            break;\n        }\n        // \u4ea4\u6362\u4e24\u8282\u70b9\n        int temp = nums[i];\n        nums[i] = nums[ma];\n        nums[ma] = temp;\n        // \u5faa\u73af\u5411\u4e0b\u5806\u5316\n        i = ma;\n    }\n}", "doc_comment": "/* \u5806\u7684\u957f\u5ea6\u4e3a n \uff0c\u4ece\u8282\u70b9 i \u5f00\u59cb\uff0c\u4ece\u9876\u81f3\u5e95\u5806\u5316 */"}, "code_tokens": ["void", "siftDown", "(", ",", ",", ")", "{", "}", "nums", "n", "i", "while", "int", "[", "]", "int", "int", "(", "1", ")", "{", "// \u5224\u65ad\u8282\u70b9 i, l, r \u4e2d\u503c\u6700\u5927\u7684\u8282\u70b9\uff0c\u8bb0\u4e3a ma", "// \u82e5\u8282\u70b9 i \u6700\u5927\u6216\u7d22\u5f15 l, r \u8d8a\u754c\uff0c\u5219\u65e0\u987b\u7ee7\u7eed\u5806\u5316\uff0c\u8df3\u51fa", "// \u4ea4\u6362\u4e24\u8282\u70b9", "// \u5faa\u73af\u5411\u4e0b\u5806\u5316", "}", ";", ";", ";", "if", "if", "if", ";", ";", ";", ";", "int", "l", "=", "int", "r", "=", "int", "ma", "=", "i", "(", ")", ";", "(", ")", ";", "(", ")", "{", "}", "int", "temp", "=", "=", "=", "temp", "i", "=", "ma", "+", "1", "+", "2", "&&", "ma", "=", "l", "&&", "ma", "=", "r", "ma", "==", "i", "break", ";", "nums", "[", "i", "]", "nums", "[", "i", "]", "nums", "[", "ma", "]", "nums", "[", "ma", "]", "2", "*", "i", "2", "*", "i", "l", "<", "n", ">", "r", "<", "n", ">", "nums", "[", "l", "]", "nums", "[", "ma", "]", "nums", "[", "r", "]", "nums", "[", "ma", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 191, "ast_depth": 11, "n_identifiers": 8, "vocab_size": 34}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_sorting/heap_sort.c#34-48", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_sorting/heap_sort.c", "language": "Java"}, "method": {"name": "heapSort", "qualified_name": "codes.c.chapter_sorting.heap_sort.c#heapSort", "start_line": 34, "end_line": 48, "signature": "heapSort(int nums[], int n)", "original_code": "void heapSort(int nums[], int n) {\n    // \u5efa\u5806\u64cd\u4f5c\uff1a\u5806\u5316\u9664\u53f6\u8282\u70b9\u4ee5\u5916\u7684\u5176\u4ed6\u6240\u6709\u8282\u70b9\n    for (int i = n / 2 - 1; i >= 0; --i) {\n        siftDown(nums, n, i);\n    }\n    // \u4ece\u5806\u4e2d\u63d0\u53d6\u6700\u5927\u5143\u7d20\uff0c\u5faa\u73af n-1 \u8f6e\n    for (int i = n - 1; i > 0; --i) {\n        // \u4ea4\u6362\u6839\u8282\u70b9\u4e0e\u6700\u53f3\u53f6\u8282\u70b9\uff08\u4ea4\u6362\u9996\u5143\u7d20\u4e0e\u5c3e\u5143\u7d20\uff09\n        int tmp = nums[0];\n        nums[0] = nums[i];\n        nums[i] = tmp;\n        // \u4ee5\u6839\u8282\u70b9\u4e3a\u8d77\u70b9\uff0c\u4ece\u9876\u81f3\u5e95\u8fdb\u884c\u5806\u5316\n        siftDown(nums, i, 0);\n    }\n}", "doc_comment": "/* \u5806\u6392\u5e8f */"}, "code_tokens": ["void", "heapSort", "(", ",", ")", "{", "// \u5efa\u5806\u64cd\u4f5c\uff1a\u5806\u5316\u9664\u53f6\u8282\u70b9\u4ee5\u5916\u7684\u5176\u4ed6\u6240\u6709\u8282\u70b9", "// \u4ece\u5806\u4e2d\u63d0\u53d6\u6700\u5927\u5143\u7d20\uff0c\u5faa\u73af n-1 \u8f6e", "}", "nums", "n", "for", "(", ";", ")", "for", "(", ";", ")", "int", "[", "]", "int", ";", "i", ">=", "0", "--", "i", "{", "}", ";", "i", ">", "0", "--", "i", "{", "// \u4ea4\u6362\u6839\u8282\u70b9\u4e0e\u6700\u53f3\u53f6\u8282\u70b9\uff08\u4ea4\u6362\u9996\u5143\u7d20\u4e0e\u5c3e\u5143\u7d20\uff09", "// \u4ee5\u6839\u8282\u70b9\u4e3a\u8d77\u70b9\uff0c\u4ece\u9876\u81f3\u5e95\u8fdb\u884c\u5806\u5316", "}", "int", "i", "=", ";", "int", "i", "=", ";", ";", ";", ";", "-", "1", "siftDown", "n", "-", "1", "int", "tmp", "=", "=", "=", "tmp", "siftDown", "n", "/", "2", "(", "nums", ",", "n", ",", "i", ")", "nums", "[", "0", "]", "nums", "[", "0", "]", "nums", "[", "i", "]", "nums", "[", "i", "]", "(", "nums", ",", "i", ",", "0", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 141, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 30}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_sorting/heap_sort.c#51-60", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_sorting/heap_sort.c", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.c.chapter_sorting.heap_sort.c#main", "start_line": 51, "end_line": 60, "signature": "main()", "original_code": "int main() {\n    int nums[] = {4, 1, 3, 1, 5, 2};\n    int n = sizeof(nums) / sizeof(nums[0]);\n\n    heapSort(nums, n);\n    printf(\"\u5806\u6392\u5e8f\u5b8c\u6210\u540e nums = \");\n    printArray(nums, n);\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "}", ";", ";", ";", ";", ";", "return", "0", ";", "int", "nums", "=", "int", "n", "=", "heapSort", "printf", "printArray", "[", "]", "{", "4", ",", "1", ",", "3", ",", "1", ",", "5", ",", "2", "}", "/", "(", "nums", ",", "n", ")", "(", ")", "(", "nums", ",", "n", ")", "sizeof", "sizeof", "\"", "\u5806\u6392\u5e8f\u5b8c\u6210\u540e nums = ", "\"", "(", "nums", ")", "(", ")", "nums", "[", "0", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 95, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 27}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_sorting/quick_sort.c#10-14", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_sorting/quick_sort.c", "language": "Java"}, "method": {"name": "swap", "qualified_name": "codes.c.chapter_sorting.quick_sort.c#swap", "start_line": 10, "end_line": 14, "signature": "swap(int nums[], int i, int j)", "original_code": "void swap(int nums[], int i, int j) {\n    int tmp = nums[i];\n    nums[i] = nums[j];\n    nums[j] = tmp;\n}", "doc_comment": "/* \u5143\u7d20\u4ea4\u6362 */"}, "code_tokens": ["void", "swap", "(", ",", ",", ")", "{", "}", "nums", "i", "j", ";", ";", ";", "int", "[", "]", "int", "int", "int", "tmp", "=", "=", "=", "tmp", "nums", "[", "i", "]", "nums", "[", "i", "]", "nums", "[", "j", "]", "nums", "[", "j", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 63, "ast_depth": 7, "n_identifiers": 5, "vocab_size": 16}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_sorting/quick_sort.c#18-37", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_sorting/quick_sort.c", "language": "Java"}, "method": {"name": "partition", "qualified_name": "codes.c.chapter_sorting.quick_sort.c#partition", "start_line": 18, "end_line": 37, "signature": "partition(int nums[], int left, int right)", "original_code": "int partition(int nums[], int left, int right) {\n    // \u4ee5 nums[left] \u4e3a\u57fa\u51c6\u6570\n    int i = left, j = right;\n    while (i < j) {\n        while (i < j && nums[j] >= nums[left]) {\n            // \u4ece\u53f3\u5411\u5de6\u627e\u9996\u4e2a\u5c0f\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20\n            j--;\n        }\n        while (i < j && nums[i] <= nums[left]) {\n            // \u4ece\u5de6\u5411\u53f3\u627e\u9996\u4e2a\u5927\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20\n            i++;\n        }\n        // \u4ea4\u6362\u8fd9\u4e24\u4e2a\u5143\u7d20\n        swap(nums, i, j);\n    }\n    // \u5c06\u57fa\u51c6\u6570\u4ea4\u6362\u81f3\u4e24\u5b50\u6570\u7ec4\u7684\u5206\u754c\u7ebf\n    swap(nums, i, left);\n    // \u8fd4\u56de\u57fa\u51c6\u6570\u7684\u7d22\u5f15\n    return i;\n}", "doc_comment": "// \u5feb\u901f\u6392\u5e8f\u7c7b-\u54e8\u5175\u5212\u5206"}, "code_tokens": ["partition", "int", "(", ",", ",", ")", "{", "// \u4ee5 nums[left] \u4e3a\u57fa\u51c6\u6570", "// \u5c06\u57fa\u51c6\u6570\u4ea4\u6362\u81f3\u4e24\u5b50\u6570\u7ec4\u7684\u5206\u754c\u7ebf", "// \u8fd4\u56de\u57fa\u51c6\u6570\u7684\u7d22\u5f15", "}", "nums", "left", "right", ",", ";", "while", ";", "return", "i", ";", "int", "[", "]", "int", "int", "int", "i", "=", "left", "j", "=", "right", "(", ")", "{", "// \u4ea4\u6362\u8fd9\u4e24\u4e2a\u5143\u7d20", "}", "swap", "i", "<", "j", "while", "while", ";", "(", "nums", ",", "i", ",", "left", ")", "(", ")", "{", "// \u4ece\u53f3\u5411\u5de6\u627e\u9996\u4e2a\u5c0f\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20", "}", "(", ")", "{", "// \u4ece\u5de6\u5411\u53f3\u627e\u9996\u4e2a\u5927\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20", "}", "swap", "&&", ";", "&&", ";", "(", "nums", ",", "i", ",", "j", ")", "i", "<", "j", ">=", "j", "--", "i", "<", "j", "<=", "i", "++", "nums", "[", "j", "]", "nums", "[", "left", "]", "nums", "[", "i", "]", "nums", "[", "left", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 149, "ast_depth": 11, "n_identifiers": 7, "vocab_size": 31}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_sorting/quick_sort.c#40-50", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_sorting/quick_sort.c", "language": "Java"}, "method": {"name": "quickSort", "qualified_name": "codes.c.chapter_sorting.quick_sort.c#quickSort", "start_line": 40, "end_line": 50, "signature": "quickSort(int nums[], int left, int right)", "original_code": "void quickSort(int nums[], int left, int right) {\n    // \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52\n    if (left >= right) {\n        return;\n    }\n    // \u54e8\u5175\u5212\u5206\n    int pivot = partition(nums, left, right);\n    // \u9012\u5f52\u5de6\u5b50\u6570\u7ec4\u3001\u53f3\u5b50\u6570\u7ec4\n    quickSort(nums, left, pivot - 1);\n    quickSort(nums, pivot + 1, right);\n}", "doc_comment": "// \u5feb\u901f\u6392\u5e8f\u7c7b-\u5feb\u901f\u6392\u5e8f"}, "code_tokens": ["void", "quickSort", "(", ",", ",", ")", "{", "// \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52", "// \u54e8\u5175\u5212\u5206", "// \u9012\u5f52\u5de6\u5b50\u6570\u7ec4\u3001\u53f3\u5b50\u6570\u7ec4", "}", "nums", "left", "right", "if", ";", ";", ";", "int", "[", "]", "int", "int", "(", ")", "{", "}", "int", "pivot", "=", "quickSort", "quickSort", "left", ">=", "right", "return", ";", "partition", "(", "nums", ",", "left", ",", ")", "(", "nums", ",", ",", "right", ")", "(", "nums", ",", "left", ",", "right", ")", "pivot", "-", "1", "pivot", "+", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 92, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 26}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_sorting/quick_sort.c#54-63", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_sorting/quick_sort.c", "language": "Java"}, "method": {"name": "medianThree", "qualified_name": "codes.c.chapter_sorting.quick_sort.c#medianThree", "start_line": 54, "end_line": 63, "signature": "medianThree(int nums[], int left, int mid, int right)", "original_code": "int medianThree(int nums[], int left, int mid, int right) {\n    // \u6b64\u5904\u4f7f\u7528\u5f02\u6216\u8fd0\u7b97\u6765\u7b80\u5316\u4ee3\u7801\n    // \u5f02\u6216\u89c4\u5219\u4e3a 0 ^ 0 = 1 ^ 1 = 0, 0 ^ 1 = 1 ^ 0 = 1\n    if ((nums[left] < nums[mid]) ^ (nums[left] < nums[right]))\n        return left;\n    else if ((nums[mid] < nums[left]) ^ (nums[mid] < nums[right]))\n        return mid;\n    else\n        return right;\n}", "doc_comment": "// \u9009\u53d6\u4e09\u4e2a\u5143\u7d20\u7684\u4e2d\u4f4d\u6570"}, "code_tokens": ["medianThree", "int", "(", ",", ",", ",", ")", "{", "// \u6b64\u5904\u4f7f\u7528\u5f02\u6216\u8fd0\u7b97\u6765\u7b80\u5316\u4ee3\u7801", "// \u5f02\u6216\u89c4\u5219\u4e3a 0 ^ 0 = 1 ^ 1 = 0, 0 ^ 1 = 1 ^ 0 = 1", "}", "nums", "left", "mid", "right", "if", "else", "int", "[", "]", "int", "int", "int", "(", ")", "return", "left", ";", "if", "else", "^", "(", ")", "return", "mid", ";", "return", "right", ";", "(", ")", "(", ")", "^", "<", "<", "(", ")", "(", ")", "nums", "[", "left", "]", "nums", "[", "mid", "]", "nums", "[", "left", "]", "nums", "[", "right", "]", "<", "<", "nums", "[", "mid", "]", "nums", "[", "left", "]", "nums", "[", "mid", "]", "nums", "[", "right", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 123, "ast_depth": 11, "n_identifiers": 5, "vocab_size": 21}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_sorting/quick_sort.c#66-82", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_sorting/quick_sort.c", "language": "Java"}, "method": {"name": "partitionMedian", "qualified_name": "codes.c.chapter_sorting.quick_sort.c#partitionMedian", "start_line": 66, "end_line": 82, "signature": "partitionMedian(int nums[], int left, int right)", "original_code": "int partitionMedian(int nums[], int left, int right) {\n    // \u9009\u53d6\u4e09\u4e2a\u5019\u9009\u5143\u7d20\u7684\u4e2d\u4f4d\u6570\n    int med = medianThree(nums, left, (left + right) / 2, right);\n    // \u5c06\u4e2d\u4f4d\u6570\u4ea4\u6362\u81f3\u6570\u7ec4\u6700\u5de6\u7aef\n    swap(nums, left, med);\n    // \u4ee5 nums[left] \u4e3a\u57fa\u51c6\u6570\n    int i = left, j = right;\n    while (i < j) {\n        while (i < j && nums[j] >= nums[left])\n            j--; // \u4ece\u53f3\u5411\u5de6\u627e\u9996\u4e2a\u5c0f\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20\n        while (i < j && nums[i] <= nums[left])\n            i++;          // \u4ece\u5de6\u5411\u53f3\u627e\u9996\u4e2a\u5927\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20\n        swap(nums, i, j); // \u4ea4\u6362\u8fd9\u4e24\u4e2a\u5143\u7d20\n    }\n    swap(nums, i, left); // \u5c06\u57fa\u51c6\u6570\u4ea4\u6362\u81f3\u4e24\u5b50\u6570\u7ec4\u7684\u5206\u754c\u7ebf\n    return i;            // \u8fd4\u56de\u57fa\u51c6\u6570\u7684\u7d22\u5f15\n}", "doc_comment": "/* \u54e8\u5175\u5212\u5206\uff08\u4e09\u6570\u53d6\u4e2d\u503c\uff09 */"}, "code_tokens": ["partitionMedian", "int", "(", ",", ",", ")", "{", "// \u9009\u53d6\u4e09\u4e2a\u5019\u9009\u5143\u7d20\u7684\u4e2d\u4f4d\u6570", "// \u5c06\u4e2d\u4f4d\u6570\u4ea4\u6362\u81f3\u6570\u7ec4\u6700\u5de6\u7aef", "// \u4ee5 nums[left] \u4e3a\u57fa\u51c6\u6570", "// \u5c06\u57fa\u51c6\u6570\u4ea4\u6362\u81f3\u4e24\u5b50\u6570\u7ec4\u7684\u5206\u754c\u7ebf", "// \u8fd4\u56de\u57fa\u51c6\u6570\u7684\u7d22\u5f15", "}", "nums", "left", "right", ";", ";", ",", ";", "while", ";", "return", "i", ";", "int", "[", "]", "int", "int", "int", "med", "=", "swap", "int", "i", "=", "left", "j", "=", "right", "(", ")", "{", "// \u4ece\u53f3\u5411\u5de6\u627e\u9996\u4e2a\u5c0f\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20", "// \u4ece\u5de6\u5411\u53f3\u627e\u9996\u4e2a\u5927\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20", "// \u4ea4\u6362\u8fd9\u4e24\u4e2a\u5143\u7d20", "}", "swap", "medianThree", "(", "nums", ",", "left", ",", "med", ")", "i", "<", "j", "while", "while", ";", "(", "nums", ",", "i", ",", "left", ")", "(", "nums", ",", "left", ",", ",", "right", ")", "(", ")", ";", "(", ")", ";", "swap", "/", "2", "&&", "j", "--", "&&", "i", "++", "(", "nums", ",", "i", ",", "j", ")", "(", ")", "i", "<", "j", ">=", "i", "<", "j", "<=", "left", "+", "right", "nums", "[", "j", "]", "nums", "[", "left", "]", "nums", "[", "i", "]", "nums", "[", "left", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 185, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 38}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_sorting/quick_sort.c#85-94", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_sorting/quick_sort.c", "language": "Java"}, "method": {"name": "quickSortMedian", "qualified_name": "codes.c.chapter_sorting.quick_sort.c#quickSortMedian", "start_line": 85, "end_line": 94, "signature": "quickSortMedian(int nums[], int left, int right)", "original_code": "void quickSortMedian(int nums[], int left, int right) {\n    // \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52\n    if (left >= right)\n        return;\n    // \u54e8\u5175\u5212\u5206\n    int pivot = partitionMedian(nums, left, right);\n    // \u9012\u5f52\u5de6\u5b50\u6570\u7ec4\u3001\u53f3\u5b50\u6570\u7ec4\n    quickSortMedian(nums, left, pivot - 1);\n    quickSortMedian(nums, pivot + 1, right);\n}", "doc_comment": "// \u4e2d\u4f4d\u57fa\u51c6\u6570\u4f18\u5316-\u5feb\u901f\u6392\u5e8f"}, "code_tokens": ["void", "quickSortMedian", "(", ",", ",", ")", "{", "// \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52", "// \u54e8\u5175\u5212\u5206", "// \u9012\u5f52\u5de6\u5b50\u6570\u7ec4\u3001\u53f3\u5b50\u6570\u7ec4", "}", "nums", "left", "right", "if", ";", ";", ";", "int", "[", "]", "int", "int", "(", ")", "return", ";", "int", "pivot", "=", "quickSortMedian", "quickSortMedian", "left", ">=", "right", "partitionMedian", "(", "nums", ",", "left", ",", ")", "(", "nums", ",", ",", "right", ")", "(", "nums", ",", "left", ",", "right", ")", "pivot", "-", "1", "pivot", "+", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 89, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 26}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_sorting/quick_sort.c#98-112", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_sorting/quick_sort.c", "language": "Java"}, "method": {"name": "quickSortTailCall", "qualified_name": "codes.c.chapter_sorting.quick_sort.c#quickSortTailCall", "start_line": 98, "end_line": 112, "signature": "quickSortTailCall(int nums[], int left, int right)", "original_code": "void quickSortTailCall(int nums[], int left, int right) {\n    // \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\n    while (left < right) {\n        // \u54e8\u5175\u5212\u5206\u64cd\u4f5c\n        int pivot = partition(nums, left, right);\n        // \u5bf9\u4e24\u4e2a\u5b50\u6570\u7ec4\u4e2d\u8f83\u77ed\u7684\u90a3\u4e2a\u6267\u884c\u5feb\u901f\u6392\u5e8f\n        if (pivot - left < right - pivot) {\n            quickSortTailCall(nums, left, pivot - 1); // \u9012\u5f52\u6392\u5e8f\u5de6\u5b50\u6570\u7ec4\n            left = pivot + 1;                         // \u5269\u4f59\u672a\u6392\u5e8f\u533a\u95f4\u4e3a [pivot + 1, right]\n        } else {\n            quickSortTailCall(nums, pivot + 1, right); // \u9012\u5f52\u6392\u5e8f\u53f3\u5b50\u6570\u7ec4\n            right = pivot - 1;                         // \u5269\u4f59\u672a\u6392\u5e8f\u533a\u95f4\u4e3a [left, pivot - 1]\n        }\n    }\n}", "doc_comment": "// \u5feb\u901f\u6392\u5e8f\uff08\u5c3e\u9012\u5f52\u4f18\u5316\uff09"}, "code_tokens": ["void", "quickSortTailCall", "(", ",", ",", ")", "{", "// \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62", "}", "nums", "left", "right", "while", "int", "[", "]", "int", "int", "(", ")", "{", "// \u54e8\u5175\u5212\u5206\u64cd\u4f5c", "// \u5bf9\u4e24\u4e2a\u5b50\u6570\u7ec4\u4e2d\u8f83\u77ed\u7684\u90a3\u4e2a\u6267\u884c\u5feb\u901f\u6392\u5e8f", "}", "left", "<", "right", ";", "if", "else", "int", "pivot", "=", "(", ")", "{", "// \u9012\u5f52\u6392\u5e8f\u5de6\u5b50\u6570\u7ec4", "// \u5269\u4f59\u672a\u6392\u5e8f\u533a\u95f4\u4e3a [pivot + 1, right]", "}", "{", "// \u9012\u5f52\u6392\u5e8f\u53f3\u5b50\u6570\u7ec4", "// \u5269\u4f59\u672a\u6392\u5e8f\u533a\u95f4\u4e3a [left, pivot - 1]", "}", "partition", "<", ";", ";", ";", ";", "(", "nums", ",", "left", ",", "right", ")", "pivot", "-", "left", "right", "-", "pivot", "quickSortTailCall", "left", "=", "quickSortTailCall", "right", "=", "(", "nums", ",", "left", ",", ")", "pivot", "+", "1", "(", "nums", ",", ",", "right", ")", "pivot", "-", "1", "pivot", "-", "1", "pivot", "+", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 133, "ast_depth": 12, "n_identifiers": 6, "vocab_size": 31}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_sorting/quick_sort.c#115-136", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_sorting/quick_sort.c", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.c.chapter_sorting.quick_sort.c#main", "start_line": 115, "end_line": 136, "signature": "main()", "original_code": "int main() {\n    /* \u5feb\u901f\u6392\u5e8f */\n    int nums[] = {2, 4, 1, 0, 3, 5};\n    int size = sizeof(nums) / sizeof(int);\n    quickSort(nums, 0, size - 1);\n    printf(\"\u5feb\u901f\u6392\u5e8f\u5b8c\u6210\u540e nums = \");\n    printArray(nums, size);\n\n    /* \u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u51c6\u6570\u4f18\u5316\uff09 */\n    int nums1[] = {2, 4, 1, 0, 3, 5};\n    quickSortMedian(nums1, 0, size - 1);\n    printf(\"\u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u51c6\u6570\u4f18\u5316\uff09\u5b8c\u6210\u540e nums = \");\n    printArray(nums1, size);\n\n    /* \u5feb\u901f\u6392\u5e8f\uff08\u5c3e\u9012\u5f52\u4f18\u5316\uff09 */\n    int nums2[] = {2, 4, 1, 0, 3, 5};\n    quickSortTailCall(nums2, 0, size - 1);\n    printf(\"\u5feb\u901f\u6392\u5e8f\uff08\u5c3e\u9012\u5f52\u4f18\u5316\uff09\u5b8c\u6210\u540e nums = \");\n    printArray(nums1, size);\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "/* \u5feb\u901f\u6392\u5e8f */", "/* \u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u51c6\u6570\u4f18\u5316\uff09 */", "/* \u5feb\u901f\u6392\u5e8f\uff08\u5c3e\u9012\u5f52\u4f18\u5316\uff09 */", "}", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "return", "0", ";", "int", "nums", "=", "int", "size", "=", "quickSort", "printf", "printArray", "int", "nums1", "=", "quickSortMedian", "printf", "printArray", "int", "nums2", "=", "quickSortTailCall", "printf", "printArray", "[", "]", "{", "2", ",", "4", ",", "1", ",", "0", ",", "3", ",", "5", "}", "/", "(", "nums", ",", "0", ",", ")", "(", ")", "(", "nums", ",", "size", ")", "[", "]", "{", "2", ",", "4", ",", "1", ",", "0", ",", "3", ",", "5", "}", "(", "nums1", ",", "0", ",", ")", "(", ")", "(", "nums1", ",", "size", ")", "[", "]", "{", "2", ",", "4", ",", "1", ",", "0", ",", "3", ",", "5", "}", "(", "nums2", ",", "0", ",", ")", "(", ")", "(", "nums1", ",", "size", ")", "sizeof", "sizeof", "size", "-", "1", "\"", "\u5feb\u901f\u6392\u5e8f\u5b8c\u6210\u540e nums = ", "\"", "size", "-", "1", "\"", "\u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u51c6\u6570\u4f18\u5316\uff09\u5b8c\u6210\u540e nums = ", "\"", "size", "-", "1", "\"", "\u5feb\u901f\u6392\u5e8f\uff08\u5c3e\u9012\u5f52\u4f18\u5316\uff09\u5b8c\u6210\u540e nums = ", "\"", "(", "nums", ")", "(", ")", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 221, "ast_depth": 11, "n_identifiers": 11, "vocab_size": 37}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_sorting/radix_sort.c#10-13", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_sorting/radix_sort.c", "language": "Java"}, "method": {"name": "digit", "qualified_name": "codes.c.chapter_sorting.radix_sort.c#digit", "start_line": 10, "end_line": 13, "signature": "digit(int num, int exp)", "original_code": "int digit(int num, int exp) {\n    // \u4f20\u5165 exp \u800c\u975e k \u53ef\u4ee5\u907f\u514d\u5728\u6b64\u91cd\u590d\u6267\u884c\u6602\u8d35\u7684\u6b21\u65b9\u8ba1\u7b97\n    return (num / exp) % 10;\n}", "doc_comment": "/* \u83b7\u53d6\u5143\u7d20 num \u7684\u7b2c k \u4f4d\uff0c\u5176\u4e2d exp = 10^(k-1) */"}, "code_tokens": ["digit", "int", "(", ",", ")", "{", "// \u4f20\u5165 exp \u800c\u975e k \u53ef\u4ee5\u907f\u514d\u5728\u6b64\u91cd\u590d\u6267\u884c\u6602\u8d35\u7684\u6b21\u65b9\u8ba1\u7b97", "}", "num", "exp", "return", ";", "int", "int", "%", "10", "(", ")", "num", "/", "exp"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 34, "ast_depth": 8, "n_identifiers": 3, "vocab_size": 15}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_sorting/radix_sort.c#16-42", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_sorting/radix_sort.c", "language": "Java"}, "method": {"name": "countingSortDigit", "qualified_name": "codes.c.chapter_sorting.radix_sort.c#countingSortDigit", "start_line": 16, "end_line": 42, "signature": "countingSortDigit(int nums[], int size, int exp)", "original_code": "void countingSortDigit(int nums[], int size, int exp) {\n    // \u5341\u8fdb\u5236\u7684\u4f4d\u8303\u56f4\u4e3a 0~9 \uff0c\u56e0\u6b64\u9700\u8981\u957f\u5ea6\u4e3a 10 \u7684\u6876\u6570\u7ec4\n    int *counter = (int *)malloc((sizeof(int) * 10));\n    // \u7edf\u8ba1 0~9 \u5404\u6570\u5b57\u7684\u51fa\u73b0\u6b21\u6570\n    for (int i = 0; i < size; i++) {\n        // \u83b7\u53d6 nums[i] \u7b2c k \u4f4d\uff0c\u8bb0\u4e3a d\n        int d = digit(nums[i], exp);\n        // \u7edf\u8ba1\u6570\u5b57 d \u7684\u51fa\u73b0\u6b21\u6570\n        counter[d]++;\n    }\n    // \u6c42\u524d\u7f00\u548c\uff0c\u5c06\u201c\u51fa\u73b0\u4e2a\u6570\u201d\u8f6c\u6362\u4e3a\u201c\u6570\u7ec4\u7d22\u5f15\u201d\n    for (int i = 1; i < 10; i++) {\n        counter[i] += counter[i - 1];\n    }\n    // \u5012\u5e8f\u904d\u5386\uff0c\u6839\u636e\u6876\u5185\u7edf\u8ba1\u7ed3\u679c\uff0c\u5c06\u5404\u5143\u7d20\u586b\u5165 res\n    int *res = (int *)malloc(sizeof(int) * size);\n    for (int i = size - 1; i >= 0; i--) {\n        int d = digit(nums[i], exp);\n        int j = counter[d] - 1; // \u83b7\u53d6 d \u5728\u6570\u7ec4\u4e2d\u7684\u7d22\u5f15 j\n        res[j] = nums[i];       // \u5c06\u5f53\u524d\u5143\u7d20\u586b\u5165\u7d22\u5f15 j\n        counter[d]--;           // \u5c06 d \u7684\u6570\u91cf\u51cf 1\n    }\n    // \u4f7f\u7528\u7ed3\u679c\u8986\u76d6\u539f\u6570\u7ec4 nums\n    for (int i = 0; i < size; i++) {\n        nums[i] = res[i];\n    }\n}", "doc_comment": "/* \u8ba1\u6570\u6392\u5e8f\uff08\u6839\u636e nums \u7b2c k \u4f4d\u6392\u5e8f\uff09 */"}, "code_tokens": ["void", "countingSortDigit", "(", ",", ",", ")", "{", "// \u5341\u8fdb\u5236\u7684\u4f4d\u8303\u56f4\u4e3a 0~9 \uff0c\u56e0\u6b64\u9700\u8981\u957f\u5ea6\u4e3a 10 \u7684\u6876\u6570\u7ec4", "// \u7edf\u8ba1 0~9 \u5404\u6570\u5b57\u7684\u51fa\u73b0\u6b21\u6570", "// \u6c42\u524d\u7f00\u548c\uff0c\u5c06\u201c\u51fa\u73b0\u4e2a\u6570\u201d\u8f6c\u6362\u4e3a\u201c\u6570\u7ec4\u7d22\u5f15\u201d", "// \u5012\u5e8f\u904d\u5386\uff0c\u6839\u636e\u6876\u5185\u7edf\u8ba1\u7ed3\u679c\uff0c\u5c06\u5404\u5143\u7d20\u586b\u5165 res", "// \u4f7f\u7528\u7ed3\u679c\u8986\u76d6\u539f\u6570\u7ec4 nums", "}", "nums", "size", "exp", ";", "for", "(", ";", ")", "for", "(", ";", ")", ";", "for", "(", ";", ")", "for", "(", ";", ")", "int", "[", "]", "int", "int", "int", "*", "counter", "=", ";", "i", "<", "size", "i", "++", "{", "// \u83b7\u53d6 nums[i] \u7b2c k \u4f4d\uff0c\u8bb0\u4e3a d", "// \u7edf\u8ba1\u6570\u5b57 d \u7684\u51fa\u73b0\u6b21\u6570", "}", ";", "i", "<", "10", "i", "++", "{", "}", "int", "*", "res", "=", ";", "i", ">=", "0", "i", "--", "{", "// \u83b7\u53d6 d \u5728\u6570\u7ec4\u4e2d\u7684\u7d22\u5f15 j", "// \u5c06\u5f53\u524d\u5143\u7d20\u586b\u5165\u7d22\u5f15 j", "// \u5c06 d \u7684\u6570\u91cf\u51cf 1", "}", ";", "i", "<", "size", "i", "++", "{", "}", "(", ")", "int", "i", "=", "0", ";", ";", "int", "i", "=", "1", ";", "(", ")", "int", "i", "=", ";", ";", ";", ";", "int", "i", "=", "0", ";", "int", "*", "malloc", "int", "d", "=", "++", "+=", "int", "*", "malloc", "size", "-", "1", "int", "d", "=", "int", "j", "=", "=", "--", "=", "(", ")", "digit", "counter", "[", "d", "]", "counter", "[", "i", "]", "counter", "[", "]", "(", ")", "digit", "-", "1", "res", "[", "j", "]", "nums", "[", "i", "]", "counter", "[", "d", "]", "nums", "[", "i", "]", "res", "[", "i", "]", "(", ")", "(", ",", "exp", ")", "i", "-", "1", "*", "size", "(", ",", "exp", ")", "counter", "[", "d", "]", "*", "10", "nums", "[", "i", "]", "sizeof", "nums", "[", "i", "]", "sizeof", "(", ")", "(", ")", "int", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 315, "ast_depth": 15, "n_identifiers": 12, "vocab_size": 44}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_sorting/radix_sort.c#45-60", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_sorting/radix_sort.c", "language": "Java"}, "method": {"name": "radixSort", "qualified_name": "codes.c.chapter_sorting.radix_sort.c#radixSort", "start_line": 45, "end_line": 60, "signature": "radixSort(int nums[], int size)", "original_code": "void radixSort(int nums[], int size) {\n    // \u83b7\u53d6\u6570\u7ec4\u7684\u6700\u5927\u5143\u7d20\uff0c\u7528\u4e8e\u5224\u65ad\u6700\u5927\u4f4d\u6570\n    int max = INT32_MIN;\n    for (size_t i = 0; i < size - 1; i++) {\n        if (nums[i] > max) {\n            max = nums[i];\n        }\n    }\n    // \u6309\u7167\u4ece\u4f4e\u4f4d\u5230\u9ad8\u4f4d\u7684\u987a\u5e8f\u904d\u5386\n    for (int exp = 1; max >= exp; exp *= 10)\n        // \u5bf9\u6570\u7ec4\u5143\u7d20\u7684\u7b2c k \u4f4d\u6267\u884c\u8ba1\u6570\u6392\u5e8f\n        // k = 1 -> exp = 1\n        // k = 2 -> exp = 10\n        // \u5373 exp = 10^(k-1)\n        countingSortDigit(nums, size, exp);\n}", "doc_comment": "/* \u57fa\u6570\u6392\u5e8f */"}, "code_tokens": ["void", "radixSort", "(", ",", ")", "{", "// \u83b7\u53d6\u6570\u7ec4\u7684\u6700\u5927\u5143\u7d20\uff0c\u7528\u4e8e\u5224\u65ad\u6700\u5927\u4f4d\u6570", "// \u6309\u7167\u4ece\u4f4e\u4f4d\u5230\u9ad8\u4f4d\u7684\u987a\u5e8f\u904d\u5386", "}", "nums", "size", ";", "for", "(", ";", ")", "for", "(", ";", ")", "// \u5bf9\u6570\u7ec4\u5143\u7d20\u7684\u7b2c k \u4f4d\u6267\u884c\u8ba1\u6570\u6392\u5e8f", "// k = 1 -> exp = 1", "// k = 2 -> exp = 10", "// \u5373 exp = 10^(k-1)", "int", "[", "]", "int", "int", "max", "=", "INT32_MIN", "size_t", ";", "i", "<", "i", "++", "{", "}", ";", "max", ">=", "exp", "exp", "*=", "10", ";", "i", "=", "0", "size", "-", "1", "if", "int", "exp", "=", "1", "countingSortDigit", "(", ")", "{", "}", "(", "nums", ",", "size", ",", "exp", ")", ">", "max", ";", "nums", "[", "i", "]", "max", "=", "nums", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 120, "ast_depth": 11, "n_identifiers": 8, "vocab_size": 37}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_sorting/radix_sort.c#63-71", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_sorting/radix_sort.c", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.c.chapter_sorting.radix_sort.c#main", "start_line": 63, "end_line": 71, "signature": "main()", "original_code": "int main() {\n    // \u57fa\u6570\u6392\u5e8f\n    int nums[] = {10546151, 35663510, 42865989, 34862445, 81883077,\n                  88906420, 72429244, 30524779, 82060337, 63832996};\n    int size = sizeof(nums) / sizeof(int);\n    radixSort(nums, size);\n    printf(\"\u57fa\u6570\u6392\u5e8f\u5b8c\u6210\u540e nums = \");\n    printArray(nums, size);\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "// \u57fa\u6570\u6392\u5e8f", "}", ";", ";", ";", ";", ";", "int", "nums", "=", "int", "size", "=", "radixSort", "printf", "printArray", "[", "]", "{", "10546151", ",", "35663510", ",", "42865989", ",", "34862445", ",", "81883077", ",", "88906420", ",", "72429244", ",", "30524779", ",", "82060337", ",", "63832996", "}", "/", "(", "nums", ",", "size", ")", "(", ")", "(", "nums", ",", "size", ")", "sizeof", "sizeof", "\"", "\u57fa\u6570\u6392\u5e8f\u5b8c\u6210\u540e nums = ", "\"", "(", "nums", ")", "(", ")", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 98, "ast_depth": 11, "n_identifiers": 7, "vocab_size": 31}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_stack_and_queue/linkedlist_deque.c#26-28", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_stack_and_queue/linkedlist_deque.c", "language": "Java"}, "method": {"name": "delDoublyListNode", "qualified_name": "codes.c.chapter_stack_and_queue.linkedlist_deque.c#delDoublyListNode", "start_line": 26, "end_line": 28, "signature": "delDoublyListNode(DoublyListNode *node)", "original_code": "void delDoublyListNode(DoublyListNode *node) {\n    free(node);\n}", "doc_comment": "/* \u6790\u6784\u51fd\u6570 */"}, "code_tokens": ["void", "delDoublyListNode", "(", ")", "{", "}", "DoublyListNode", "node", ";", "*", "free", "(", "node", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 23, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 11}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_stack_and_queue/linkedlist_deque.c#46-55", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_stack_and_queue/linkedlist_deque.c", "language": "Java"}, "method": {"name": "delLinkedListdeque", "qualified_name": "codes.c.chapter_stack_and_queue.linkedlist_deque.c#delLinkedListdeque", "start_line": 46, "end_line": 55, "signature": "delLinkedListdeque(LinkedListDeque *deque)", "original_code": "void delLinkedListdeque(LinkedListDeque *deque) {\n    // \u91ca\u653e\u6240\u6709\u8282\u70b9\n    for (int i = 0; i < deque->queSize && deque->front != NULL; i++) {\n        DoublyListNode *tmp = deque->front;\n        deque->front = deque->front->next;\n        free(tmp);\n    }\n    // \u91ca\u653e deque \u7ed3\u6784\u4f53\n    free(deque);\n}", "doc_comment": "/* \u6790\u6784\u51fd\u6570 */"}, "code_tokens": ["void", "delLinkedListdeque", "(", ")", "{", "// \u91ca\u653e\u6240\u6709\u8282\u70b9", "// \u91ca\u653e deque \u7ed3\u6784\u4f53", "}", "LinkedListDeque", "deque", "for", "(", ";", ")", ";", "*", ";", "i", "<", "i", "++", "{", "}", "free", "int", "i", "=", "0", "deque", "->", ";", ";", ";", "(", "deque", ")", "queSize", "&&", "DoublyListNode", "*", "deque", "->", "free", "deque", "->", "tmp", "=", "front", "=", "(", "tmp", ")", "front", "!=", "NULL", "deque", "->", "front", "deque", "->", "front", "->", "next"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 95, "ast_depth": 11, "n_identifiers": 10, "vocab_size": 29}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_stack_and_queue/linkedlist_deque.c#58-60", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_stack_and_queue/linkedlist_deque.c", "language": "Java"}, "method": {"name": "size", "qualified_name": "codes.c.chapter_stack_and_queue.linkedlist_deque.c#size", "start_line": 58, "end_line": 60, "signature": "size(LinkedListDeque *deque)", "original_code": "int size(LinkedListDeque *deque) {\n    return deque->queSize;\n}", "doc_comment": "/* \u83b7\u53d6\u961f\u5217\u7684\u957f\u5ea6 */"}, "code_tokens": ["size", "int", "(", ")", "{", "}", "LinkedListDeque", "deque", "return", ";", "*", "deque", "->", "queSize"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 23, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 13}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_stack_and_queue/linkedlist_deque.c#63-65", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_stack_and_queue/linkedlist_deque.c", "language": "Java"}, "method": {"name": "empty", "qualified_name": "codes.c.chapter_stack_and_queue.linkedlist_deque.c#empty", "start_line": 63, "end_line": 65, "signature": "empty(LinkedListDeque *deque)", "original_code": "bool empty(LinkedListDeque *deque) {\n    return (size(deque) == 0);\n}", "doc_comment": "/* \u5224\u65ad\u961f\u5217\u662f\u5426\u4e3a\u7a7a */"}, "code_tokens": ["bool", "empty", "(", ")", "{", "}", "LinkedListDeque", "deque", "return", ";", "*", "(", ")", "==", "0", "size", "(", "deque", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 30, "ast_depth": 9, "n_identifiers": 3, "vocab_size": 14}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_stack_and_queue/linkedlist_deque.c#68-89", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_stack_and_queue/linkedlist_deque.c", "language": "Java"}, "method": {"name": "push", "qualified_name": "codes.c.chapter_stack_and_queue.linkedlist_deque.c#push", "start_line": 68, "end_line": 89, "signature": "push(LinkedListDeque *deque, int num, bool isFront)", "original_code": "void push(LinkedListDeque *deque, int num, bool isFront) {\n    DoublyListNode *node = newDoublyListNode(num);\n    // \u82e5\u94fe\u8868\u4e3a\u7a7a\uff0c\u5219\u4ee4 front \u548c rear \u90fd\u6307\u5411node\n    if (empty(deque)) {\n        deque->front = deque->rear = node;\n    }\n    // \u961f\u9996\u5165\u961f\u64cd\u4f5c\n    else if (isFront) {\n        // \u5c06 node \u6dfb\u52a0\u81f3\u94fe\u8868\u5934\u90e8\n        deque->front->prev = node;\n        node->next = deque->front;\n        deque->front = node; // \u66f4\u65b0\u5934\u8282\u70b9\n    }\n    // \u961f\u5c3e\u5165\u961f\u64cd\u4f5c\n    else {\n        // \u5c06 node \u6dfb\u52a0\u81f3\u94fe\u8868\u5c3e\u90e8\n        deque->rear->next = node;\n        node->prev = deque->rear;\n        deque->rear = node;\n    }\n    deque->queSize++; // \u66f4\u65b0\u961f\u5217\u957f\u5ea6\n}", "doc_comment": "/* \u5165\u961f */"}, "code_tokens": ["void", "push", "(", ",", ",", ")", "{", "// \u82e5\u94fe\u8868\u4e3a\u7a7a\uff0c\u5219\u4ee4 front \u548c rear \u90fd\u6307\u5411node", "// \u66f4\u65b0\u961f\u5217\u957f\u5ea6", "}", "LinkedListDeque", "deque", "num", "bool", "isFront", ";", "if", "// \u961f\u9996\u5165\u961f\u64cd\u4f5c", "else", ";", "*", "int", "DoublyListNode", "*", "(", ")", "{", "}", "if", "// \u961f\u5c3e\u5165\u961f\u64cd\u4f5c", "else", "deque", "->", "node", "=", "empty", ";", "(", "isFront", ")", "{", "// \u5c06 node \u6dfb\u52a0\u81f3\u94fe\u8868\u5934\u90e8", "// \u66f4\u65b0\u5934\u8282\u70b9", "}", "{", "// \u5c06 node \u6dfb\u52a0\u81f3\u94fe\u8868\u5c3e\u90e8", "}", "queSize", "++", "newDoublyListNode", "(", "deque", ")", "deque", "->", ";", ";", ";", ";", ";", ";", "(", "num", ")", "front", "=", "deque", "->", "node", "->", "deque", "->", "deque", "->", "node", "->", "deque", "->", "deque", "->", "front", "->", "next", "=", "front", "=", "node", "rear", "->", "prev", "=", "rear", "=", "node", "rear", "=", "node", "prev", "=", "node", "deque", "->", "front", "next", "=", "node", "deque", "->", "rear"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 162, "ast_depth": 11, "n_identifiers": 13, "vocab_size": 36}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_stack_and_queue/linkedlist_deque.c#92-94", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_stack_and_queue/linkedlist_deque.c", "language": "Java"}, "method": {"name": "pushFirst", "qualified_name": "codes.c.chapter_stack_and_queue.linkedlist_deque.c#pushFirst", "start_line": 92, "end_line": 94, "signature": "pushFirst(LinkedListDeque *deque, int num)", "original_code": "void pushFirst(LinkedListDeque *deque, int num) {\n    push(deque, num, true);\n}", "doc_comment": "/* \u961f\u9996\u5165\u961f */"}, "code_tokens": ["void", "pushFirst", "(", ",", ")", "{", "}", "LinkedListDeque", "deque", "num", ";", "*", "int", "push", "(", "deque", ",", "num", ",", "true", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 32, "ast_depth": 7, "n_identifiers": 4, "vocab_size": 15}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_stack_and_queue/linkedlist_deque.c#97-99", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_stack_and_queue/linkedlist_deque.c", "language": "Java"}, "method": {"name": "pushLast", "qualified_name": "codes.c.chapter_stack_and_queue.linkedlist_deque.c#pushLast", "start_line": 97, "end_line": 99, "signature": "pushLast(LinkedListDeque *deque, int num)", "original_code": "void pushLast(LinkedListDeque *deque, int num) {\n    push(deque, num, false);\n}", "doc_comment": "/* \u961f\u5c3e\u5165\u961f */"}, "code_tokens": ["void", "pushLast", "(", ",", ")", "{", "}", "LinkedListDeque", "deque", "num", ";", "*", "int", "push", "(", "deque", ",", "num", ",", "false", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 32, "ast_depth": 7, "n_identifiers": 4, "vocab_size": 15}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_stack_and_queue/linkedlist_deque.c#102-105", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_stack_and_queue/linkedlist_deque.c", "language": "Java"}, "method": {"name": "peekFirst", "qualified_name": "codes.c.chapter_stack_and_queue.linkedlist_deque.c#peekFirst", "start_line": 102, "end_line": 105, "signature": "peekFirst(LinkedListDeque *deque)", "original_code": "int peekFirst(LinkedListDeque *deque) {\n    assert(size(deque) && deque->front);\n    return deque->front->val;\n}", "doc_comment": "/* \u8bbf\u95ee\u961f\u9996\u5143\u7d20 */"}, "code_tokens": ["peekFirst", "int", "(", ")", "{", "}", "LinkedListDeque", "deque", "assert", ";", "return", ";", "*", "(", ")", "deque", "->", "&&", "front", "->", "val", "size", "deque", "->", "front", "(", "deque", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 44, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 17}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_stack_and_queue/linkedlist_deque.c#108-111", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_stack_and_queue/linkedlist_deque.c", "language": "Java"}, "method": {"name": "peekLast", "qualified_name": "codes.c.chapter_stack_and_queue.linkedlist_deque.c#peekLast", "start_line": 108, "end_line": 111, "signature": "peekLast(LinkedListDeque *deque)", "original_code": "int peekLast(LinkedListDeque *deque) {\n    assert(size(deque) && deque->rear);\n    return deque->rear->val;\n}", "doc_comment": "/* \u8bbf\u95ee\u961f\u5c3e\u5143\u7d20 */"}, "code_tokens": ["peekLast", "int", "(", ")", "{", "}", "LinkedListDeque", "deque", "assert", ";", "return", ";", "*", "(", ")", "deque", "->", "&&", "rear", "->", "val", "size", "deque", "->", "rear", "(", "deque", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 44, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 17}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_stack_and_queue/linkedlist_deque.c#114-142", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_stack_and_queue/linkedlist_deque.c", "language": "Java"}, "method": {"name": "pop", "qualified_name": "codes.c.chapter_stack_and_queue.linkedlist_deque.c#pop", "start_line": 114, "end_line": 142, "signature": "pop(LinkedListDeque *deque, bool isFront)", "original_code": "int pop(LinkedListDeque *deque, bool isFront) {\n    if (empty(deque))\n        return -1;\n    int val;\n    // \u961f\u9996\u51fa\u961f\u64cd\u4f5c\n    if (isFront) {\n        val = peekFirst(deque); // \u6682\u5b58\u5934\u8282\u70b9\u503c\n        DoublyListNode *fNext = deque->front->next;\n        if (fNext) {\n            fNext->prev = NULL;\n            deque->front->next = NULL;\n            delDoublyListNode(deque->front);\n        }\n        deque->front = fNext; // \u66f4\u65b0\u5934\u8282\u70b9\n    }\n    // \u961f\u5c3e\u51fa\u961f\u64cd\u4f5c\n    else {\n        val = peekLast(deque); // \u6682\u5b58\u5c3e\u8282\u70b9\u503c\n        DoublyListNode *rPrev = deque->rear->prev;\n        if (rPrev) {\n            rPrev->next = NULL;\n            deque->rear->prev = NULL;\n            delDoublyListNode(deque->rear);\n        }\n        deque->rear = rPrev; // \u66f4\u65b0\u5c3e\u8282\u70b9\n    }\n    deque->queSize--; // \u66f4\u65b0\u961f\u5217\u957f\u5ea6\n    return val;\n}", "doc_comment": "/* \u51fa\u961f */"}, "code_tokens": ["pop", "int", "(", ",", ")", "{", "// \u961f\u9996\u51fa\u961f\u64cd\u4f5c", "// \u66f4\u65b0\u961f\u5217\u957f\u5ea6", "}", "LinkedListDeque", "deque", "bool", "isFront", "if", ";", "if", "// \u961f\u5c3e\u51fa\u961f\u64cd\u4f5c", "else", ";", "return", "val", ";", "*", "(", ")", "return", ";", "int", "val", "(", "isFront", ")", "{", "// \u6682\u5b58\u5934\u8282\u70b9\u503c", "// \u66f4\u65b0\u5934\u8282\u70b9", "}", "{", "// \u6682\u5b58\u5c3e\u8282\u70b9\u503c", "// \u66f4\u65b0\u5c3e\u8282\u70b9", "}", "deque", "->", "empty", "-", "1", ";", ";", "if", ";", ";", ";", "if", ";", "queSize", "--", "(", "deque", ")", "val", "=", "DoublyListNode", "*", "(", "fNext", ")", "{", "}", "deque", "->", "val", "=", "DoublyListNode", "*", "(", "rPrev", ")", "{", "}", "deque", "->", "peekFirst", "fNext", "=", ";", ";", ";", "front", "=", "fNext", "peekLast", "rPrev", "=", ";", ";", ";", "rear", "=", "rPrev", "(", "deque", ")", "deque", "->", "fNext", "->", "deque", "->", "delDoublyListNode", "(", "deque", ")", "deque", "->", "rPrev", "->", "deque", "->", "delDoublyListNode", "front", "->", "next", "prev", "=", "NULL", "front", "->", "(", ")", "rear", "->", "prev", "next", "=", "NULL", "rear", "->", "(", ")", "next", "=", "NULL", "deque", "->", "front", "prev", "=", "NULL", "deque", "->", "rear"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 227, "ast_depth": 12, "n_identifiers": 17, "vocab_size": 42}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_stack_and_queue/linkedlist_deque.c#145-147", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_stack_and_queue/linkedlist_deque.c", "language": "Java"}, "method": {"name": "popFirst", "qualified_name": "codes.c.chapter_stack_and_queue.linkedlist_deque.c#popFirst", "start_line": 145, "end_line": 147, "signature": "popFirst(LinkedListDeque *deque)", "original_code": "int popFirst(LinkedListDeque *deque) {\n    return pop(deque, true);\n}", "doc_comment": "/* \u961f\u9996\u51fa\u961f */"}, "code_tokens": ["popFirst", "int", "(", ")", "{", "}", "LinkedListDeque", "deque", "return", ";", "*", "pop", "(", "deque", ",", "true", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 27, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 14}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_stack_and_queue/linkedlist_deque.c#150-152", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_stack_and_queue/linkedlist_deque.c", "language": "Java"}, "method": {"name": "popLast", "qualified_name": "codes.c.chapter_stack_and_queue.linkedlist_deque.c#popLast", "start_line": 150, "end_line": 152, "signature": "popLast(LinkedListDeque *deque)", "original_code": "int popLast(LinkedListDeque *deque) {\n    return pop(deque, false);\n}", "doc_comment": "/* \u961f\u5c3e\u51fa\u961f */"}, "code_tokens": ["popLast", "int", "(", ")", "{", "}", "LinkedListDeque", "deque", "return", ";", "*", "pop", "(", "deque", ",", "false", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 27, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 14}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_stack_and_queue/linkedlist_deque.c#155-166", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_stack_and_queue/linkedlist_deque.c", "language": "Java"}, "method": {"name": "printLinkedListDeque", "qualified_name": "codes.c.chapter_stack_and_queue.linkedlist_deque.c#printLinkedListDeque", "start_line": 155, "end_line": 166, "signature": "printLinkedListDeque(LinkedListDeque *deque)", "original_code": "void printLinkedListDeque(LinkedListDeque *deque) {\n    int *arr = malloc(sizeof(int) * deque->queSize);\n    // \u62f7\u8d1d\u94fe\u8868\u4e2d\u7684\u6570\u636e\u5230\u6570\u7ec4\n    int i;\n    DoublyListNode *node;\n    for (i = 0, node = deque->front; i < deque->queSize; i++) {\n        arr[i] = node->val;\n        node = node->next;\n    }\n    printArray(arr, deque->queSize);\n    free(arr);\n}", "doc_comment": "/* \u6253\u5370\u961f\u5217 */"}, "code_tokens": ["void", "printLinkedListDeque", "(", ")", "{", "// \u62f7\u8d1d\u94fe\u8868\u4e2d\u7684\u6570\u636e\u5230\u6570\u7ec4", "}", "LinkedListDeque", "deque", ";", ";", ";", "for", "(", ",", ";", ";", ")", ";", ";", "*", "int", "*", "arr", "=", "int", "i", "DoublyListNode", "*", "node", "i", "=", "0", "node", "=", "i", "<", "i", "++", "{", "}", "printArray", "free", "malloc", "deque", "->", "front", "deque", "->", "queSize", ";", ";", "(", "arr", ",", ")", "(", "arr", ")", "(", ")", "=", "node", "=", "deque", "->", "queSize", "*", "arr", "[", "i", "]", "node", "->", "val", "node", "->", "next", "sizeof", "deque", "->", "queSize", "(", ")", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 130, "ast_depth": 13, "n_identifiers": 14, "vocab_size": 33}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_stack_and_queue/linkedlist_deque.c#169-212", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_stack_and_queue/linkedlist_deque.c", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.c.chapter_stack_and_queue.linkedlist_deque.c#main", "start_line": 169, "end_line": 212, "signature": "main()", "original_code": "int main() {\n    /* \u521d\u59cb\u5316\u53cc\u5411\u961f\u5217 */\n    LinkedListDeque *deque = newLinkedListDeque();\n    pushLast(deque, 3);\n    pushLast(deque, 2);\n    pushLast(deque, 5);\n    printf(\"\u53cc\u5411\u961f\u5217 deque = \");\n    printLinkedListDeque(deque);\n\n    /* \u8bbf\u95ee\u5143\u7d20 */\n    int peekFirstNum = peekFirst(deque);\n    printf(\"\u961f\u9996\u5143\u7d20 peekFirst = %d\\r\\n\", peekFirstNum);\n    int peekLastNum = peekLast(deque);\n    printf(\"\u961f\u9996\u5143\u7d20 peekLast = %d\\r\\n\", peekLastNum);\n\n    /* \u5143\u7d20\u5165\u961f */\n    pushLast(deque, 4);\n    printf(\"\u5143\u7d20 4 \u961f\u5c3e\u5165\u961f\u540e deque =\");\n    printLinkedListDeque(deque);\n    pushFirst(deque, 1);\n    printf(\"\u5143\u7d20 1 \u961f\u9996\u5165\u961f\u540e deque =\");\n    printLinkedListDeque(deque);\n\n    /* \u5143\u7d20\u51fa\u961f */\n    int popLastNum = popLast(deque);\n    printf(\"\u961f\u5c3e\u51fa\u961f\u5143\u7d20 popLast = %d \uff0c\u961f\u5c3e\u51fa\u961f\u540e deque = \", popLastNum);\n    printLinkedListDeque(deque);\n    int popFirstNum = popFirst(deque);\n    printf(\"\u961f\u9996\u51fa\u961f\u5143\u7d20 popFirst = %d \uff0c\u961f\u9996\u51fa\u961f\u540e deque = \", popFirstNum);\n    printLinkedListDeque(deque);\n\n    /* \u83b7\u53d6\u961f\u5217\u7684\u957f\u5ea6 */\n    int dequeSize = size(deque);\n    printf(\"\u53cc\u5411\u961f\u5217\u957f\u5ea6 size = %d\\r\\n\", dequeSize);\n\n    /* \u5224\u65ad\u961f\u5217\u662f\u5426\u4e3a\u7a7a */\n    bool isEmpty = empty(deque);\n    printf(\"\u53cc\u5411\u961f\u5217\u662f\u5426\u4e3a\u7a7a = %s\\r\\n\", isEmpty ? \"true\" : \"false\");\n\n    // \u91ca\u653e\u5185\u5b58\n    delLinkedListdeque(deque);\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "/* \u521d\u59cb\u5316\u53cc\u5411\u961f\u5217 */", "/* \u8bbf\u95ee\u5143\u7d20 */", "/* \u5143\u7d20\u5165\u961f */", "/* \u5143\u7d20\u51fa\u961f */", "/* \u83b7\u53d6\u961f\u5217\u7684\u957f\u5ea6 */", "/* \u5224\u65ad\u961f\u5217\u662f\u5426\u4e3a\u7a7a */", "// \u91ca\u653e\u5185\u5b58", "}", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "bool", ";", ";", ";", "return", "0", ";", "LinkedListDeque", "*", "pushLast", "pushLast", "pushLast", "printf", "printLinkedListDeque", "int", "peekFirstNum", "=", "printf", "int", "peekLastNum", "=", "printf", "pushLast", "printf", "printLinkedListDeque", "pushFirst", "printf", "printLinkedListDeque", "int", "popLastNum", "=", "printf", "printLinkedListDeque", "int", "popFirstNum", "=", "printf", "printLinkedListDeque", "int", "dequeSize", "=", "printf", "isEmpty", "=", "printf", "delLinkedListdeque", "deque", "=", "(", "deque", ",", "3", ")", "(", "deque", ",", "2", ")", "(", "deque", ",", "5", ")", "(", ")", "(", "deque", ")", "peekFirst", "(", ",", "peekFirstNum", ")", "peekLast", "(", ",", "peekLastNum", ")", "(", "deque", ",", "4", ")", "(", ")", "(", "deque", ")", "(", "deque", ",", "1", ")", "(", ")", "(", "deque", ")", "popLast", "(", ",", "popLastNum", ")", "(", "deque", ")", "popFirst", "(", ",", "popFirstNum", ")", "(", "deque", ")", "size", "(", ",", "dequeSize", ")", "empty", "(", ",", ")", "(", "deque", ")", "newLinkedListDeque", "\"", "\u53cc\u5411\u961f\u5217 deque = ", "\"", "(", "deque", ")", "\"", "\u961f\u9996\u5143\u7d20 peekFirst = %d", "\\r", "\\n", "\"", "(", "deque", ")", "\"", "\u961f\u9996\u5143\u7d20 peekLast = %d", "\\r", "\\n", "\"", "\"", "\u5143\u7d20 4 \u961f\u5c3e\u5165\u961f\u540e deque =", "\"", "\"", "\u5143\u7d20 1 \u961f\u9996\u5165\u961f\u540e deque =", "\"", "(", "deque", ")", "\"", "\u961f\u5c3e\u51fa\u961f\u5143\u7d20 popLast = %d \uff0c\u961f\u5c3e\u51fa\u961f\u540e deque = ", "\"", "(", "deque", ")", "\"", "\u961f\u9996\u51fa\u961f\u5143\u7d20 popFirst = %d \uff0c\u961f\u9996\u51fa\u961f\u540e deque = ", "\"", "(", "deque", ")", "\"", "\u53cc\u5411\u961f\u5217\u957f\u5ea6 size = %d", "\\r", "\\n", "\"", "(", "deque", ")", "\"", "\u53cc\u5411\u961f\u5217\u662f\u5426\u4e3a\u7a7a = %s", "\\r", "\\n", "\"", "isEmpty", "?", ":", "(", ")", "\"", "true", "\"", "\"", "false", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 340, "ast_depth": 9, "n_identifiers": 21, "vocab_size": 61}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/c/chapter_tree/binary_tree.c#10-43", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/c/chapter_tree/binary_tree.c", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.c.chapter_tree.binary_tree.c#main", "start_line": 10, "end_line": 43, "signature": "main()", "original_code": "int main() {\n    /* \u521d\u59cb\u5316\u4e8c\u53c9\u6811 */\n    // \u521d\u59cb\u5316\u8282\u70b9\n    TreeNode *n1 = newTreeNode(1);\n    TreeNode *n2 = newTreeNode(2);\n    TreeNode *n3 = newTreeNode(3);\n    TreeNode *n4 = newTreeNode(4);\n    TreeNode *n5 = newTreeNode(5);\n    // \u6784\u5efa\u8282\u70b9\u4e4b\u95f4\u7684\u5f15\u7528\uff08\u6307\u9488\uff09\n    n1->left = n2;\n    n1->right = n3;\n    n2->left = n4;\n    n2->right = n5;\n    printf(\"\u521d\u59cb\u5316\u4e8c\u53c9\u6811\\n\");\n    printTree(n1);\n\n    /* \u63d2\u5165\u4e0e\u5220\u9664\u8282\u70b9 */\n    TreeNode *P = newTreeNode(0);\n    // \u5728 n1 -> n2 \u4e2d\u95f4\u63d2\u5165\u8282\u70b9 P\n    n1->left = P;\n    P->left = n2;\n    printf(\"\u63d2\u5165\u8282\u70b9 P \u540e\\n\");\n    printTree(n1);\n\n    // \u5220\u9664\u8282\u70b9 P\n    n1->left = n2;\n    // \u91ca\u653e\u5185\u5b58\n    free(P);\n    printf(\"\u5220\u9664\u8282\u70b9 P \u540e\\n\");\n    printTree(n1);\n\n    freeMemoryTree(n1);\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "/* \u521d\u59cb\u5316\u4e8c\u53c9\u6811 */", "// \u521d\u59cb\u5316\u8282\u70b9", "// \u6784\u5efa\u8282\u70b9\u4e4b\u95f4\u7684\u5f15\u7528\uff08\u6307\u9488\uff09", "/* \u63d2\u5165\u4e0e\u5220\u9664\u8282\u70b9 */", "// \u5728 n1 -> n2 \u4e2d\u95f4\u63d2\u5165\u8282\u70b9 P", "// \u5220\u9664\u8282\u70b9 P", "// \u91ca\u653e\u5185\u5b58", "}", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "return", "0", ";", "TreeNode", "*", "TreeNode", "*", "TreeNode", "*", "TreeNode", "*", "TreeNode", "*", "n1", "->", "n1", "->", "n2", "->", "n2", "->", "printf", "printTree", "TreeNode", "*", "n1", "->", "P", "->", "printf", "printTree", "n1", "->", "free", "printf", "printTree", "freeMemoryTree", "n1", "=", "n2", "=", "n3", "=", "n4", "=", "n5", "=", "left", "=", "n2", "right", "=", "n3", "left", "=", "n4", "right", "=", "n5", "(", ")", "(", "n1", ")", "P", "=", "left", "=", "P", "left", "=", "n2", "(", ")", "(", "n1", ")", "left", "=", "n2", "(", "P", ")", "(", ")", "(", "n1", ")", "(", "n1", ")", "newTreeNode", "newTreeNode", "newTreeNode", "newTreeNode", "newTreeNode", "\"", "\u521d\u59cb\u5316\u4e8c\u53c9\u6811", "\\n", "\"", "newTreeNode", "\"", "\u63d2\u5165\u8282\u70b9 P \u540e", "\\n", "\"", "\"", "\u5220\u9664\u8282\u70b9 P \u540e", "\\n", "\"", "(", "1", ")", "(", "2", ")", "(", "3", ")", "(", "4", ")", "(", "5", ")", "(", "0", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 245, "ast_depth": 9, "n_identifiers": 15, "vocab_size": 43}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_array_and_linkedlist/array.cpp#10-16", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_array_and_linkedlist/array.cpp", "language": "Java"}, "method": {"name": "randomAccess", "qualified_name": "codes.cpp.chapter_array_and_linkedlist.array.cpp#randomAccess", "start_line": 10, "end_line": 16, "signature": "randomAccess(int *nums, int size)", "original_code": "int randomAccess(int *nums, int size) {\n    // \u5728\u533a\u95f4 [0, size) \u4e2d\u968f\u673a\u62bd\u53d6\u4e00\u4e2a\u6570\u5b57\n    int randomIndex = rand() % size;\n    // \u83b7\u53d6\u5e76\u8fd4\u56de\u968f\u673a\u5143\u7d20\n    int randomNum = nums[randomIndex];\n    return randomNum;\n}", "doc_comment": "/* \u968f\u673a\u8bbf\u95ee\u5143\u7d20 */"}, "code_tokens": ["randomAccess", "int", "(", ",", ")", "{", "// \u5728\u533a\u95f4 [0, size) \u4e2d\u968f\u673a\u62bd\u53d6\u4e00\u4e2a\u6570\u5b57", "// \u83b7\u53d6\u5e76\u8fd4\u56de\u968f\u673a\u5143\u7d20", "}", "nums", "size", ";", ";", "return", "randomNum", ";", "int", "*", "int", "int", "randomIndex", "=", "int", "randomNum", "=", "%", "size", "nums", "[", "randomIndex", "]", "rand", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 55, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 21}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_array_and_linkedlist/array.cpp#19-30", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_array_and_linkedlist/array.cpp", "language": "Java"}, "method": {"name": "extend", "qualified_name": "codes.cpp.chapter_array_and_linkedlist.array.cpp#extend", "start_line": 19, "end_line": 30, "signature": "extend(int *nums, int size, int enlarge)", "original_code": "int *extend(int *nums, int size, int enlarge) {\n    // \u521d\u59cb\u5316\u4e00\u4e2a\u6269\u5c55\u957f\u5ea6\u540e\u7684\u6570\u7ec4\n    int *res = new int[size + enlarge];\n    // \u5c06\u539f\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u5143\u7d20\u590d\u5236\u5230\u65b0\u6570\u7ec4\n    for (int i = 0; i < size; i++) {\n        res[i] = nums[i];\n    }\n    // \u91ca\u653e\u5185\u5b58\n    delete[] nums;\n    // \u8fd4\u56de\u6269\u5c55\u540e\u7684\u65b0\u6570\u7ec4\n    return res;\n}", "doc_comment": "/* \u6269\u5c55\u6570\u7ec4\u957f\u5ea6 */"}, "code_tokens": ["extend", "int", "*", "(", ",", ",", ")", "{", "// \u521d\u59cb\u5316\u4e00\u4e2a\u6269\u5c55\u957f\u5ea6\u540e\u7684\u6570\u7ec4", "// \u5c06\u539f\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u5143\u7d20\u590d\u5236\u5230\u65b0\u6570\u7ec4", "// \u91ca\u653e\u5185\u5b58", "// \u8fd4\u56de\u6269\u5c55\u540e\u7684\u65b0\u6570\u7ec4", "}", "nums", "size", "enlarge", ";", "for", "(", ";", ")", ";", "return", "res", ";", "int", "*", "int", "int", "int", "*", "res", "=", ";", "i", "<", "size", "i", "++", "{", "}", "delete", "nums", "new", "int", "i", "=", "0", ";", "[", "]", "int", "[", "]", "=", "size", "+", "enlarge", "res", "[", "i", "]", "nums", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 103, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 29}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_array_and_linkedlist/array.cpp#33-40", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_array_and_linkedlist/array.cpp", "language": "Java"}, "method": {"name": "insert", "qualified_name": "codes.cpp.chapter_array_and_linkedlist.array.cpp#insert", "start_line": 33, "end_line": 40, "signature": "insert(int *nums, int size, int num, int index)", "original_code": "void insert(int *nums, int size, int num, int index) {\n    // \u628a\u7d22\u5f15 index \u4ee5\u53ca\u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u540e\u79fb\u52a8\u4e00\u4f4d\n    for (int i = size - 1; i > index; i--) {\n        nums[i] = nums[i - 1];\n    }\n    // \u5c06 num \u8d4b\u7ed9 index \u5904\u7684\u5143\u7d20\n    nums[index] = num;\n}", "doc_comment": "/* \u5728\u6570\u7ec4\u7684\u7d22\u5f15 index \u5904\u63d2\u5165\u5143\u7d20 num */"}, "code_tokens": ["void", "insert", "(", ",", ",", ",", ")", "{", "// \u628a\u7d22\u5f15 index \u4ee5\u53ca\u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u540e\u79fb\u52a8\u4e00\u4f4d", "// \u5c06 num \u8d4b\u7ed9 index \u5904\u7684\u5143\u7d20", "}", "nums", "size", "num", "index", "for", "(", ";", ")", ";", "int", "*", "int", "int", "int", ";", "i", ">", "index", "i", "--", "{", "}", "=", "num", "int", "i", "=", ";", "nums", "[", "index", "]", "size", "-", "1", "=", "nums", "[", "i", "]", "nums", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 86, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 25}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_array_and_linkedlist/array.cpp#43-48", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_array_and_linkedlist/array.cpp", "language": "Java"}, "method": {"name": "remove", "qualified_name": "codes.cpp.chapter_array_and_linkedlist.array.cpp#remove", "start_line": 43, "end_line": 48, "signature": "remove(int *nums, int size, int index)", "original_code": "void remove(int *nums, int size, int index) {\n    // \u628a\u7d22\u5f15 index \u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u524d\u79fb\u52a8\u4e00\u4f4d\n    for (int i = index; i < size - 1; i++) {\n        nums[i] = nums[i + 1];\n    }\n}", "doc_comment": "/* \u5220\u9664\u7d22\u5f15 index \u5904\u7684\u5143\u7d20 */"}, "code_tokens": ["void", "remove", "(", ",", ",", ")", "{", "// \u628a\u7d22\u5f15 index \u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u524d\u79fb\u52a8\u4e00\u4f4d", "}", "nums", "size", "index", "for", "(", ";", ")", "int", "*", "int", "int", ";", "i", "<", "i", "++", "{", "}", "int", "i", "=", "index", "size", "-", "1", ";", "=", "nums", "[", "i", "]", "nums", "[", "]", "i", "+", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 70, "ast_depth": 10, "n_identifiers": 5, "vocab_size": 24}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_array_and_linkedlist/array.cpp#51-57", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_array_and_linkedlist/array.cpp", "language": "Java"}, "method": {"name": "traverse", "qualified_name": "codes.cpp.chapter_array_and_linkedlist.array.cpp#traverse", "start_line": 51, "end_line": 57, "signature": "traverse(int *nums, int size)", "original_code": "void traverse(int *nums, int size) {\n    int count = 0;\n    // \u901a\u8fc7\u7d22\u5f15\u904d\u5386\u6570\u7ec4\n    for (int i = 0; i < size; i++) {\n        count += nums[i];\n    }\n}", "doc_comment": "/* \u904d\u5386\u6570\u7ec4 */"}, "code_tokens": ["void", "traverse", "(", ",", ")", "{", "// \u901a\u8fc7\u7d22\u5f15\u904d\u5386\u6570\u7ec4", "}", "nums", "size", ";", "for", "(", ";", ")", "int", "*", "int", "int", "count", "=", "0", ";", "i", "<", "size", "i", "++", "{", "}", "int", "i", "=", "0", ";", "count", "+=", "nums", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 63, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 23}}
