{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/go/chapter_computational_complexity/time_complexity.go#120-130", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/go/chapter_computational_complexity/time_complexity.go", "language": "Java"}, "method": {"name": "factorialRecur", "qualified_name": "codes.go.chapter_computational_complexity.time_complexity.go#factorialRecur", "start_line": 120, "end_line": 130, "signature": "factorialRecur(n int)", "original_code": "func factorialRecur(n int) int {\n\tif n == 0 {\n\t\treturn 1\n\t}\n\tcount := 0\n\t// \u4ece 1 \u4e2a\u5206\u88c2\u51fa n \u4e2a\n\tfor i := 0; i < n; i++ {\n\t\tcount += factorialRecur(n - 1)\n\t}\n\treturn count\n}", "doc_comment": "/* \u9636\u4e58\u9636\uff08\u9012\u5f52\u5b9e\u73b0\uff09 */"}, "code_tokens": ["func", "factorialRecur", "(", ")", "int", "{", "}", "n", "int", "if", "{", "}", ";", ";", "", "{", "}", "return", "count", "", "n", "==", "0", "return", "1", "", "count", "=", "0", "i", "<", "n", "i", "++", "", ":", "=", "0", "// \u4ece 1 \u4e2a\u5206\u88c2\u51fa n \u4e2a", "for", "i", ":", "count", "+=", "factorialRecur", "(", ")", "n", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 74, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 25}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/java/chapter_computational_complexity/time_complexity.java#11-17", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/java/chapter_computational_complexity/time_complexity.java", "language": "Java"}, "method": {"name": "constant", "qualified_name": "codes.java.chapter_computational_complexity.time_complexity#constant", "start_line": 11, "end_line": 17, "signature": "constant(int n)", "original_code": "static int constant(int n) {\n        int count = 0;\n        int size = 100000;\n        for (int i = 0; i < size; i++)\n            count++;\n        return count;\n    }", "doc_comment": "/* \u5e38\u6570\u9636 */"}, "code_tokens": ["constant", "static", "int", "(", ")", "{", "}", "n", ";", ";", "for", "(", ";", ")", "return", "count", ";", "int", "int", "count", "=", "0", "int", "size", "=", "100000", ";", "i", "<", "size", "i", "++", ";", "int", "i", "=", "0", "count", "++"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 62, "ast_depth": 7, "n_identifiers": 5, "vocab_size": 19}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/java/chapter_computational_complexity/time_complexity.java#20-25", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/java/chapter_computational_complexity/time_complexity.java", "language": "Java"}, "method": {"name": "linear", "qualified_name": "codes.java.chapter_computational_complexity.time_complexity#linear", "start_line": 20, "end_line": 25, "signature": "linear(int n)", "original_code": "static int linear(int n) {\n        int count = 0;\n        for (int i = 0; i < n; i++)\n            count++;\n        return count;\n    }", "doc_comment": "/* \u7ebf\u6027\u9636 */"}, "code_tokens": ["linear", "static", "int", "(", ")", "{", "}", "n", ";", "for", "(", ";", ")", "return", "count", ";", "int", "int", "count", "=", "0", ";", "i", "<", "n", "i", "++", ";", "int", "i", "=", "0", "count", "++"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 54, "ast_depth": 7, "n_identifiers": 4, "vocab_size": 17}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/java/chapter_computational_complexity/time_complexity.java#28-35", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/java/chapter_computational_complexity/time_complexity.java", "language": "Java"}, "method": {"name": "arrayTraversal", "qualified_name": "codes.java.chapter_computational_complexity.time_complexity#arrayTraversal", "start_line": 28, "end_line": 35, "signature": "arrayTraversal(int[] nums)", "original_code": "static int arrayTraversal(int[] nums) {\n        int count = 0;\n        // \u5faa\u73af\u6b21\u6570\u4e0e\u6570\u7ec4\u957f\u5ea6\u6210\u6b63\u6bd4\n        for (int num : nums) {\n            count++;\n        }\n        return count;\n    }", "doc_comment": "/* \u7ebf\u6027\u9636\uff08\u904d\u5386\u6570\u7ec4\uff09 */"}, "code_tokens": ["arrayTraversal", "static", "int", "(", ")", "{", "// \u5faa\u73af\u6b21\u6570\u4e0e\u6570\u7ec4\u957f\u5ea6\u6210\u6b63\u6bd4", "}", "nums", ";", "for", "(", "num", ":", "nums", ")", "return", "count", ";", "int", "count", "=", "0", "int", "{", "}", "int", "[", "]", ";", "count", "++"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 51, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 20}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/java/chapter_computational_complexity/time_complexity.java#38-47", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/java/chapter_computational_complexity/time_complexity.java", "language": "Java"}, "method": {"name": "quadratic", "qualified_name": "codes.java.chapter_computational_complexity.time_complexity#quadratic", "start_line": 38, "end_line": 47, "signature": "quadratic(int n)", "original_code": "static int quadratic(int n) {\n        int count = 0;\n        // \u5faa\u73af\u6b21\u6570\u4e0e\u6570\u7ec4\u957f\u5ea6\u6210\u5e73\u65b9\u5173\u7cfb\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                count++;\n            }\n        }\n        return count;\n    }", "doc_comment": "/* \u5e73\u65b9\u9636 */"}, "code_tokens": ["quadratic", "static", "int", "(", ")", "{", "// \u5faa\u73af\u6b21\u6570\u4e0e\u6570\u7ec4\u957f\u5ea6\u6210\u5e73\u65b9\u5173\u7cfb", "}", "n", ";", "for", "(", ";", ")", "return", "count", ";", "int", "int", "count", "=", "0", ";", "i", "<", "n", "i", "++", "{", "}", "int", "i", "=", "0", "for", "(", ";", ")", ";", "j", "<", "n", "j", "++", "{", "}", "int", "j", "=", "0", ";", "count", "++"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 81, "ast_depth": 10, "n_identifiers": 5, "vocab_size": 19}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/java/chapter_computational_complexity/time_complexity.java#50-66", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/java/chapter_computational_complexity/time_complexity.java", "language": "Java"}, "method": {"name": "bubbleSort", "qualified_name": "codes.java.chapter_computational_complexity.time_complexity#bubbleSort", "start_line": 50, "end_line": 66, "signature": "bubbleSort(int[] nums)", "original_code": "static int bubbleSort(int[] nums) {\n        int count = 0; // \u8ba1\u6570\u5668\n        // \u5916\u5faa\u73af\uff1a\u672a\u6392\u5e8f\u533a\u95f4\u4e3a [0, i]\n        for (int i = nums.length - 1; i > 0; i--) {\n            // \u5185\u5faa\u73af\uff1a\u5c06\u672a\u6392\u5e8f\u533a\u95f4 [0, i] \u4e2d\u7684\u6700\u5927\u5143\u7d20\u4ea4\u6362\u81f3\u8be5\u533a\u95f4\u7684\u6700\u53f3\u7aef\n            for (int j = 0; j < i; j++) {\n                if (nums[j] > nums[j + 1]) {\n                    // \u4ea4\u6362 nums[j] \u4e0e nums[j + 1]\n                    int tmp = nums[j];\n                    nums[j] = nums[j + 1];\n                    nums[j + 1] = tmp;\n                    count += 3; // \u5143\u7d20\u4ea4\u6362\u5305\u542b 3 \u4e2a\u5355\u5143\u64cd\u4f5c\n                }\n            }\n        }\n        return count;\n    }", "doc_comment": "/* \u5e73\u65b9\u9636\uff08\u5192\u6ce1\u6392\u5e8f\uff09 */"}, "code_tokens": ["bubbleSort", "static", "int", "(", ")", "{", "// \u8ba1\u6570\u5668", "// \u5916\u5faa\u73af\uff1a\u672a\u6392\u5e8f\u533a\u95f4\u4e3a [0, i]", "}", "nums", ";", "for", "(", ";", ")", "return", "count", ";", "int", "count", "=", "0", ";", "i", ">", "0", "i", "--", "{", "// \u5185\u5faa\u73af\uff1a\u5c06\u672a\u6392\u5e8f\u533a\u95f4 [0, i] \u4e2d\u7684\u6700\u5927\u5143\u7d20\u4ea4\u6362\u81f3\u8be5\u533a\u95f4\u7684\u6700\u53f3\u7aef", "}", "int", "[", "]", "int", "i", "=", "for", "(", ";", ")", "-", "1", ";", "j", "<", "i", "j", "++", "{", "}", "nums", ".", "length", "int", "j", "=", "0", "if", "(", ")", "{", "// \u4ea4\u6362 nums[j] \u4e0e nums[j + 1]", "// \u5143\u7d20\u4ea4\u6362\u5305\u542b 3 \u4e2a\u5355\u5143\u64cd\u4f5c", "}", ">", ";", ";", ";", ";", "nums", "[", "j", "]", "nums", "[", "]", "int", "tmp", "=", "=", "=", "tmp", "count", "+=", "3", "j", "+", "1", "nums", "[", "j", "]", "nums", "[", "j", "]", "nums", "[", "]", "nums", "[", "]", "j", "+", "1", "j", "+", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 161, "ast_depth": 14, "n_identifiers": 7, "vocab_size": 36}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/java/chapter_computational_complexity/time_complexity.java#69-80", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/java/chapter_computational_complexity/time_complexity.java", "language": "Java"}, "method": {"name": "exponential", "qualified_name": "codes.java.chapter_computational_complexity.time_complexity#exponential", "start_line": 69, "end_line": 80, "signature": "exponential(int n)", "original_code": "static int exponential(int n) {\n        int count = 0, base = 1;\n        // \u7ec6\u80de\u6bcf\u8f6e\u4e00\u5206\u4e3a\u4e8c\uff0c\u5f62\u6210\u6570\u5217 1, 2, 4, 8, ..., 2^(n-1)\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < base; j++) {\n                count++;\n            }\n            base *= 2;\n        }\n        // count = 1 + 2 + 4 + 8 + .. + 2^(n-1) = 2^n - 1\n        return count;\n    }", "doc_comment": "/* \u6307\u6570\u9636\uff08\u5faa\u73af\u5b9e\u73b0\uff09 */"}, "code_tokens": ["exponential", "static", "int", "(", ")", "{", "// \u7ec6\u80de\u6bcf\u8f6e\u4e00\u5206\u4e3a\u4e8c\uff0c\u5f62\u6210\u6570\u5217 1, 2, 4, 8, ..., 2^(n-1)", "// count = 1 + 2 + 4 + 8 + .. + 2^(n-1) = 2^n - 1", "}", "n", ",", ";", "for", "(", ";", ")", "return", "count", ";", "int", "int", "count", "=", "0", "base", "=", "1", ";", "i", "<", "n", "i", "++", "{", "}", "int", "i", "=", "0", "for", "(", ";", ")", ";", ";", "j", "<", "base", "j", "++", "{", "}", "base", "*=", "2", "int", "j", "=", "0", ";", "count", "++"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 93, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 25}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/java/chapter_computational_complexity/time_complexity.java#83-87", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/java/chapter_computational_complexity/time_complexity.java", "language": "Java"}, "method": {"name": "expRecur", "qualified_name": "codes.java.chapter_computational_complexity.time_complexity#expRecur", "start_line": 83, "end_line": 87, "signature": "expRecur(int n)", "original_code": "static int expRecur(int n) {\n        if (n == 1)\n            return 1;\n        return expRecur(n - 1) + expRecur(n - 1) + 1;\n    }", "doc_comment": "/* \u6307\u6570\u9636\uff08\u9012\u5f52\u5b9e\u73b0\uff09 */"}, "code_tokens": ["expRecur", "static", "int", "(", ")", "{", "}", "n", "if", "return", ";", "int", "(", ")", "return", "1", ";", "+", "1", "n", "==", "1", "+", "expRecur", "expRecur", "(", ")", "(", ")", "n", "-", "1", "n", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 56, "ast_depth": 10, "n_identifiers": 2, "vocab_size": 15}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/java/chapter_computational_complexity/time_complexity.java#90-97", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/java/chapter_computational_complexity/time_complexity.java", "language": "Java"}, "method": {"name": "logarithmic", "qualified_name": "codes.java.chapter_computational_complexity.time_complexity#logarithmic", "start_line": 90, "end_line": 97, "signature": "logarithmic(float n)", "original_code": "static int logarithmic(float n) {\n        int count = 0;\n        while (n > 1) {\n            n = n / 2;\n            count++;\n        }\n        return count;\n    }", "doc_comment": "/* \u5bf9\u6570\u9636\uff08\u5faa\u73af\u5b9e\u73b0\uff09 */"}, "code_tokens": ["logarithmic", "static", "int", "(", ")", "{", "}", "n", ";", "while", "return", "count", ";", "float", "int", "count", "=", "0", "(", ")", "{", "}", "n", ">", "1", ";", ";", "n", "=", "count", "++", "n", "/", "2"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 55, "ast_depth": 9, "n_identifiers": 3, "vocab_size": 20}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/java/chapter_computational_complexity/time_complexity.java#100-104", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/java/chapter_computational_complexity/time_complexity.java", "language": "Java"}, "method": {"name": "logRecur", "qualified_name": "codes.java.chapter_computational_complexity.time_complexity#logRecur", "start_line": 100, "end_line": 104, "signature": "logRecur(float n)", "original_code": "static int logRecur(float n) {\n        if (n <= 1)\n            return 0;\n        return logRecur(n / 2) + 1;\n    }", "doc_comment": "/* \u5bf9\u6570\u9636\uff08\u9012\u5f52\u5b9e\u73b0\uff09 */"}, "code_tokens": ["logRecur", "static", "int", "(", ")", "{", "}", "n", "if", "return", ";", "float", "(", ")", "return", "0", ";", "+", "1", "n", "<=", "1", "logRecur", "(", ")", "n", "/", "2"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 45, "ast_depth": 9, "n_identifiers": 2, "vocab_size": 18}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/java/chapter_computational_complexity/time_complexity.java#107-115", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/java/chapter_computational_complexity/time_complexity.java", "language": "Java"}, "method": {"name": "linearLogRecur", "qualified_name": "codes.java.chapter_computational_complexity.time_complexity#linearLogRecur", "start_line": 107, "end_line": 115, "signature": "linearLogRecur(float n)", "original_code": "static int linearLogRecur(float n) {\n        if (n <= 1)\n            return 1;\n        int count = linearLogRecur(n / 2) + linearLogRecur(n / 2);\n        for (int i = 0; i < n; i++) {\n            count++;\n        }\n        return count;\n    }", "doc_comment": "/* \u7ebf\u6027\u5bf9\u6570\u9636 */"}, "code_tokens": ["linearLogRecur", "static", "int", "(", ")", "{", "}", "n", "if", ";", "for", "(", ";", ")", "return", "count", ";", "float", "(", ")", "return", "1", ";", "int", "count", "=", ";", "i", "<", "n", "i", "++", "{", "}", "n", "<=", "1", "+", "int", "i", "=", "0", ";", "linearLogRecur", "linearLogRecur", "count", "++", "(", ")", "(", ")", "n", "/", "2", "n", "/", "2"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 89, "ast_depth": 10, "n_identifiers": 4, "vocab_size": 24}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/java/chapter_computational_complexity/time_complexity.java#118-127", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/java/chapter_computational_complexity/time_complexity.java", "language": "Java"}, "method": {"name": "factorialRecur", "qualified_name": "codes.java.chapter_computational_complexity.time_complexity#factorialRecur", "start_line": 118, "end_line": 127, "signature": "factorialRecur(int n)", "original_code": "static int factorialRecur(int n) {\n        if (n == 0)\n            return 1;\n        int count = 0;\n        // \u4ece 1 \u4e2a\u5206\u88c2\u51fa n \u4e2a\n        for (int i = 0; i < n; i++) {\n            count += factorialRecur(n - 1);\n        }\n        return count;\n    }", "doc_comment": "/* \u9636\u4e58\u9636\uff08\u9012\u5f52\u5b9e\u73b0\uff09 */"}, "code_tokens": ["factorialRecur", "static", "int", "(", ")", "{", "// \u4ece 1 \u4e2a\u5206\u88c2\u51fa n \u4e2a", "}", "n", "if", ";", "for", "(", ";", ")", "return", "count", ";", "int", "(", ")", "return", "1", ";", "int", "count", "=", "0", ";", "i", "<", "n", "i", "++", "{", "}", "n", "==", "0", "int", "i", "=", "0", ";", "count", "+=", "factorialRecur", "(", ")", "n", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 80, "ast_depth": 11, "n_identifiers": 4, "vocab_size": 23}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/java/chapter_computational_complexity/time_complexity.java#130-166", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/java/chapter_computational_complexity/time_complexity.java", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.java.chapter_computational_complexity.time_complexity#main", "start_line": 130, "end_line": 166, "signature": "main(String[] args)", "original_code": "public static void main(String[] args) {\n        // \u53ef\u4ee5\u4fee\u6539 n \u8fd0\u884c\uff0c\u4f53\u4f1a\u4e00\u4e0b\u5404\u79cd\u590d\u6742\u5ea6\u7684\u64cd\u4f5c\u6570\u91cf\u53d8\u5316\u8d8b\u52bf\n        int n = 8;\n        System.out.println(\"\u8f93\u5165\u6570\u636e\u5927\u5c0f n = \" + n);\n\n        int count = constant(n);\n        System.out.println(\"\u5e38\u6570\u9636\u7684\u64cd\u4f5c\u6570\u91cf = \" + count);\n\n        count = linear(n);\n        System.out.println(\"\u7ebf\u6027\u9636\u7684\u64cd\u4f5c\u6570\u91cf = \" + count);\n        count = arrayTraversal(new int[n]);\n        System.out.println(\"\u7ebf\u6027\u9636\uff08\u904d\u5386\u6570\u7ec4\uff09\u7684\u64cd\u4f5c\u6570\u91cf = \" + count);\n\n        count = quadratic(n);\n        System.out.println(\"\u5e73\u65b9\u9636\u7684\u64cd\u4f5c\u6570\u91cf = \" + count);\n        int[] nums = new int[n];\n        for (int i = 0; i < n; i++)\n            nums[i] = n - i; // [n,n-1,...,2,1]\n        count = bubbleSort(nums);\n        System.out.println(\"\u5e73\u65b9\u9636\uff08\u5192\u6ce1\u6392\u5e8f\uff09\u7684\u64cd\u4f5c\u6570\u91cf = \" + count);\n\n        count = exponential(n);\n        System.out.println(\"\u6307\u6570\u9636\uff08\u5faa\u73af\u5b9e\u73b0\uff09\u7684\u64cd\u4f5c\u6570\u91cf = \" + count);\n        count = expRecur(n);\n        System.out.println(\"\u6307\u6570\u9636\uff08\u9012\u5f52\u5b9e\u73b0\uff09\u7684\u64cd\u4f5c\u6570\u91cf = \" + count);\n\n        count = logarithmic((float) n);\n        System.out.println(\"\u5bf9\u6570\u9636\uff08\u5faa\u73af\u5b9e\u73b0\uff09\u7684\u64cd\u4f5c\u6570\u91cf = \" + count);\n        count = logRecur((float) n);\n        System.out.println(\"\u5bf9\u6570\u9636\uff08\u9012\u5f52\u5b9e\u73b0\uff09\u7684\u64cd\u4f5c\u6570\u91cf = \" + count);\n\n        count = linearLogRecur((float) n);\n        System.out.println(\"\u7ebf\u6027\u5bf9\u6570\u9636\uff08\u9012\u5f52\u5b9e\u73b0\uff09\u7684\u64cd\u4f5c\u6570\u91cf = \" + count);\n\n        count = factorialRecur(n);\n        System.out.println(\"\u9636\u4e58\u9636\uff08\u9012\u5f52\u5b9e\u73b0\uff09\u7684\u64cd\u4f5c\u6570\u91cf = \" + count);\n    }", "doc_comment": "/* Driver Code */"}, "code_tokens": ["void", "main", "public", "static", "(", ")", "{", "// \u53ef\u4ee5\u4fee\u6539 n \u8fd0\u884c\uff0c\u4f53\u4f1a\u4e00\u4e0b\u5404\u79cd\u590d\u6742\u5ea6\u7684\u64cd\u4f5c\u6570\u91cf\u53d8\u5316\u8d8b\u52bf", "// [n,n-1,...,2,1]", "}", "args", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "for", "(", ";", ")", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "String", "int", "n", "=", "8", ".", "println", "int", "count", "=", ".", "println", "count", "=", ".", "println", "count", "=", ".", "println", "count", "=", ".", "println", "nums", "=", ";", "i", "<", "n", "i", "++", ";", "count", "=", ".", "println", "count", "=", ".", "println", "count", "=", ".", "println", "count", "=", ".", "println", "count", "=", ".", "println", "count", "=", ".", "println", "count", "=", ".", "println", "[", "]", "System", ".", "out", "(", ")", "constant", "System", ".", "out", "(", ")", "linear", "System", ".", "out", "(", ")", "arrayTraversal", "System", ".", "out", "(", ")", "quadratic", "System", ".", "out", "(", ")", "int", "[", "]", "new", "int", "i", "=", "0", "=", "bubbleSort", "System", ".", "out", "(", ")", "exponential", "System", ".", "out", "(", ")", "expRecur", "System", ".", "out", "(", ")", "logarithmic", "System", ".", "out", "(", ")", "logRecur", "System", ".", "out", "(", ")", "linearLogRecur", "System", ".", "out", "(", ")", "factorialRecur", "System", ".", "out", "(", ")", "+", "n", "(", "n", ")", "+", "count", "(", "n", ")", "+", "count", "(", ")", "+", "count", "(", "n", ")", "+", "count", "int", "[", "n", "]", "nums", "[", "i", "]", "n", "-", "i", "(", "nums", ")", "+", "count", "(", "n", ")", "+", "count", "(", "n", ")", "+", "count", "(", ")", "+", "count", "(", ")", "+", "count", "(", ")", "+", "count", "(", "n", ")", "+", "count", "\"", "\u8f93\u5165\u6570\u636e\u5927\u5c0f n = ", "\"", "\"", "\u5e38\u6570\u9636\u7684\u64cd\u4f5c\u6570\u91cf = ", "\"", "\"", "\u7ebf\u6027\u9636\u7684\u64cd\u4f5c\u6570\u91cf = ", "\"", "new", "\"", "\u7ebf\u6027\u9636\uff08\u904d\u5386\u6570\u7ec4\uff09\u7684\u64cd\u4f5c\u6570\u91cf = ", "\"", "\"", "\u5e73\u65b9\u9636\u7684\u64cd\u4f5c\u6570\u91cf = ", "\"", "\"", "\u5e73\u65b9\u9636\uff08\u5192\u6ce1\u6392\u5e8f\uff09\u7684\u64cd\u4f5c\u6570\u91cf = ", "\"", "\"", "\u6307\u6570\u9636\uff08\u5faa\u73af\u5b9e\u73b0\uff09\u7684\u64cd\u4f5c\u6570\u91cf = ", "\"", "\"", "\u6307\u6570\u9636\uff08\u9012\u5f52\u5b9e\u73b0\uff09\u7684\u64cd\u4f5c\u6570\u91cf = ", "\"", "(", ")", "n", "\"", "\u5bf9\u6570\u9636\uff08\u5faa\u73af\u5b9e\u73b0\uff09\u7684\u64cd\u4f5c\u6570\u91cf = ", "\"", "(", ")", "n", "\"", "\u5bf9\u6570\u9636\uff08\u9012\u5f52\u5b9e\u73b0\uff09\u7684\u64cd\u4f5c\u6570\u91cf = ", "\"", "(", ")", "n", "\"", "\u7ebf\u6027\u5bf9\u6570\u9636\uff08\u9012\u5f52\u5b9e\u73b0\uff09\u7684\u64cd\u4f5c\u6570\u91cf = ", "\"", "\"", "\u9636\u4e58\u9636\uff08\u9012\u5f52\u5b9e\u73b0\uff09\u7684\u64cd\u4f5c\u6570\u91cf = ", "\"", "int", "[", "n", "]", "float", "float", "float"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 455, "ast_depth": 10, "n_identifiers": 20, "vocab_size": 58}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/rust/chapter_computational_complexity/time_complexity.rs#8-16", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/rust/chapter_computational_complexity/time_complexity.rs", "language": "Java"}, "method": {"name": "constant", "qualified_name": "codes.rust.chapter_computational_complexity.time_complexity.rs#constant", "start_line": 8, "end_line": 16, "signature": "constant(n: i32)", "original_code": "fn constant(n: i32) -> i32 {\n    _ = n;\n    let mut count = 0;\n    let size = 100_000;\n    for _ in 0..size {\n        count += 1;\n    }\n    count\n}", "doc_comment": "/* \u5e38\u6570\u9636 */"}, "code_tokens": ["fn", "constant", "(", ")", "->", "i32", "{", "}", "n", "i32", ";", "let", ";", "let", ";", "for", "_", "", "", "{", "}", "count", "", ":", "_", "=", "n", "mut", "count", "=", "0", "size", "=", "100_000", "in", "0.", ".", "size", ";", "count", "+=", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 65, "ast_depth": 7, "n_identifiers": 8, "vocab_size": 26}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/rust/chapter_computational_complexity/time_complexity.rs#19-25", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/rust/chapter_computational_complexity/time_complexity.rs", "language": "Java"}, "method": {"name": "linear", "qualified_name": "codes.rust.chapter_computational_complexity.time_complexity.rs#linear", "start_line": 19, "end_line": 25, "signature": "linear(n: i32)", "original_code": "fn linear(n: i32) -> i32 {\n    let mut count = 0;\n    for _ in 0..n {\n        count += 1;\n    }\n    count\n}", "doc_comment": "/* \u7ebf\u6027\u9636 */"}, "code_tokens": ["fn", "linear", "(", ")", "->", "i32", "{", "}", "n", "i32", "let", ";", "for", "_", "", "", "{", "}", "count", "", ":", "mut", "count", "=", "0", "in", "0.", ".", "n", ";", "count", "+=", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 52, "ast_depth": 7, "n_identifiers": 6, "vocab_size": 24}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/rust/chapter_computational_complexity/time_complexity.rs#28-35", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/rust/chapter_computational_complexity/time_complexity.rs", "language": "Java"}, "method": {"name": "array_traversal", "qualified_name": "codes.rust.chapter_computational_complexity.time_complexity.rs#array_traversal", "start_line": 28, "end_line": 35, "signature": "array_traversal(nums: &[i32]) -> i32", "original_code": "fn array_traversal(nums: &[i32]) -> i32 {\n    let mut count = 0;\n    // \u5faa\u73af\u6b21\u6570\u4e0e\u6570\u7ec4\u957f\u5ea6\u6210\u6b63\u6bd4\n    for _ in nums {\n        count += 1;\n    }\n    count\n}", "doc_comment": "/* \u7ebf\u6027\u9636\uff08\u904d\u5386\u6570\u7ec4\uff09 */"}, "code_tokens": ["fn", "array_traversal", "(", "", "{", "// \u5faa\u73af\u6b21\u6570\u4e0e\u6570\u7ec4\u957f\u5ea6\u6210\u6b63\u6bd4", "}", "i32", "let", ";", "for", "_", "in", "", "{", "}", "count", "", "nums", ")", "->", "mut", "count", "=", "0", "nums", ";", ":", "&", "[", "]", "count", "+=", "1", "i32"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 55, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 26}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/rust/chapter_computational_complexity/time_complexity.rs#38-47", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/rust/chapter_computational_complexity/time_complexity.rs", "language": "Java"}, "method": {"name": "quadratic", "qualified_name": "codes.rust.chapter_computational_complexity.time_complexity.rs#quadratic", "start_line": 38, "end_line": 47, "signature": "quadratic(n: i32)", "original_code": "fn quadratic(n: i32) -> i32 {\n    let mut count = 0;\n    // \u5faa\u73af\u6b21\u6570\u4e0e\u6570\u7ec4\u957f\u5ea6\u6210\u5e73\u65b9\u5173\u7cfb\n    for _ in 0..n {\n        for _ in 0..n {\n            count += 1;\n        }\n    }\n    count\n}", "doc_comment": "/* \u5e73\u65b9\u9636 */"}, "code_tokens": ["fn", "quadratic", "(", ")", "->", "i32", "{", "// \u5faa\u73af\u6b21\u6570\u4e0e\u6570\u7ec4\u957f\u5ea6\u6210\u5e73\u65b9\u5173\u7cfb", "}", "n", "i32", "let", ";", "for", "_", "", "", "{", "}", "count", "", ":", "mut", "count", "=", "0", "in", "0.", ".", "n", "for", "_", "in", "{", "}", "0.", ".", "n", ";", "count", "+=", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 64, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 25}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/rust/chapter_computational_complexity/time_complexity.rs#50-66", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/rust/chapter_computational_complexity/time_complexity.rs", "language": "Java"}, "method": {"name": "bubble_sort", "qualified_name": "codes.rust.chapter_computational_complexity.time_complexity.rs#bubble_sort", "start_line": 50, "end_line": 66, "signature": "bubble_sort(nums: &mut [i32])", "original_code": "fn bubble_sort(nums: &mut [i32]) -> i32 {\n    let mut count = 0; // \u8ba1\u6570\u5668\n    // \u5916\u5faa\u73af\uff1a\u672a\u6392\u5e8f\u533a\u95f4\u4e3a [0, i]\n    for i in (1..nums.len()).rev() {\n        // \u5185\u5faa\u73af\uff1a\u5c06\u672a\u6392\u5e8f\u533a\u95f4 [0, i] \u4e2d\u7684\u6700\u5927\u5143\u7d20\u4ea4\u6362\u81f3\u8be5\u533a\u95f4\u7684\u6700\u53f3\u7aef \n        for j in 0..i {\n            if nums[j] > nums[j + 1] {\n                // \u4ea4\u6362 nums[j] \u4e0e nums[j + 1]\n                let tmp = nums[j];\n                nums[j] = nums[j + 1];\n                nums[j + 1] = tmp;\n                count += 3; // \u5143\u7d20\u4ea4\u6362\u5305\u542b 3 \u4e2a\u5355\u5143\u64cd\u4f5c\n            }\n        }\n    }\n    count\n}", "doc_comment": "/* \u5e73\u65b9\u9636\uff08\u5192\u6ce1\u6392\u5e8f\uff09 */"}, "code_tokens": ["fn", "bubble_sort", "(", ")", "->", "i32", "{", "// \u8ba1\u6570\u5668", "// \u5916\u5faa\u73af\uff1a\u672a\u6392\u5e8f\u533a\u95f4\u4e3a [0, i]", "}", "nums", "mut", "let", ";", "for", "i", "", "{", "// \u5185\u5faa\u73af\uff1a\u5c06\u672a\u6392\u5e8f\u533a\u95f4 [0, i] \u4e2d\u7684\u6700\u5927\u5143\u7d20\u4ea4\u6362\u81f3\u8be5\u533a\u95f4\u7684\u6700\u53f3\u7aef ", "}", "count", "", ":", "&", "[", "]", "mut", "count", "=", "0", ".", "rev", "for", "j", "in", "{", "}", "i32", "in", "(", ")", "0.", ".", "i", "if", "{", "// \u4ea4\u6362 nums[j] \u4e0e nums[j + 1]", "// \u5143\u7d20\u4ea4\u6362\u5305\u542b 3 \u4e2a\u5355\u5143\u64cd\u4f5c", "}", "(", ")", ">", "let", ";", ";", ";", ";", ".", "len", "nums", "[", "j", "]", "nums", "[", "]", "tmp", "=", "=", "=", "tmp", "count", "+=", "3", "1.", ".", "nums", "(", ")", "j", "+", "1", "nums", "[", "j", "]", "nums", "[", "j", "]", "nums", "[", "]", "nums", "[", "]", "j", "+", "1", "j", "+", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 148, "ast_depth": 11, "n_identifiers": 11, "vocab_size": 41}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/rust/chapter_computational_complexity/time_complexity.rs#69-81", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/rust/chapter_computational_complexity/time_complexity.rs", "language": "Java"}, "method": {"name": "exponential", "qualified_name": "codes.rust.chapter_computational_complexity.time_complexity.rs#exponential", "start_line": 69, "end_line": 81, "signature": "exponential(n: i32)", "original_code": "fn exponential(n: i32) -> i32 {\n    let mut count = 0;\n    let mut base = 1;\n    // \u7ec6\u80de\u6bcf\u8f6e\u4e00\u5206\u4e3a\u4e8c\uff0c\u5f62\u6210\u6570\u5217 1, 2, 4, 8, ..., 2^(n-1)\n    for _ in 0..n {\n        for _ in 0..base {\n            count += 1\n        }\n        base *= 2;\n    }\n    // count = 1 + 2 + 4 + 8 + .. + 2^(n-1) = 2^n - 1\n    count\n}", "doc_comment": "/* \u6307\u6570\u9636\uff08\u5faa\u73af\u5b9e\u73b0\uff09 */"}, "code_tokens": ["fn", "exponential", "(", ")", "->", "i32", "{", "// \u7ec6\u80de\u6bcf\u8f6e\u4e00\u5206\u4e3a\u4e8c\uff0c\u5f62\u6210\u6570\u5217 1, 2, 4, 8, ..., 2^(n-1)", "// count = 1 + 2 + 4 + 8 + .. + 2^(n-1) = 2^n - 1", "}", "n", "i32", "let", ";", "let", ";", "for", "_", "", "", "{", "}", "count", "", ":", "mut", "count", "=", "0", "mut", "base", "=", "1", "in", "0.", ".", "n", "for", "_", "in", "{", "}", ";", "0.", ".", "base", "", "base", "*=", "2", "count", "+=", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 80, "ast_depth": 8, "n_identifiers": 7, "vocab_size": 29}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/rust/chapter_computational_complexity/time_complexity.rs#84-89", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/rust/chapter_computational_complexity/time_complexity.rs", "language": "Java"}, "method": {"name": "exp_recur", "qualified_name": "codes.rust.chapter_computational_complexity.time_complexity.rs#exp_recur", "start_line": 84, "end_line": 89, "signature": "exp_recur(n: i32)", "original_code": "fn exp_recur(n: i32) -> i32 {\n    if n == 1 {\n        return 1;\n    }\n    exp_recur(n - 1) + exp_recur(n - 1) + 1\n}", "doc_comment": "/* \u6307\u6570\u9636\uff08\u9012\u5f52\u5b9e\u73b0\uff09 */"}, "code_tokens": ["fn", "exp_recur", "(", ")", "->", "i32", "{", "}", "n", "i32", "if", ":", "n", "==", "1", "{", "}", "+", "1", "return", "1", ";", "+", "exp_recur", "exp_recur", "(", ")", "(", ")", "n", "-", "1", "n", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 54, "ast_depth": 10, "n_identifiers": 3, "vocab_size": 17}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/rust/chapter_computational_complexity/time_complexity.rs#92-99", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/rust/chapter_computational_complexity/time_complexity.rs", "language": "Java"}, "method": {"name": "logarithmic", "qualified_name": "codes.rust.chapter_computational_complexity.time_complexity.rs#logarithmic", "start_line": 92, "end_line": 99, "signature": "logarithmic(mut n: f32)", "original_code": "fn logarithmic(mut n: f32) -> i32 {\n    let mut count = 0;\n    while n > 1.0 {\n        n = n / 2.0;\n        count += 1;\n    }\n    count\n}", "doc_comment": "/* \u5bf9\u6570\u9636\uff08\u5faa\u73af\u5b9e\u73b0\uff09 */"}, "code_tokens": ["fn", "logarithmic", "(", ")", "->", "i32", "{", "}", "mut", "f32", "let", ";", "while", "", "{", "}", "count", "", "n", ":", "mut", "count", "=", "0", "n", ">", "1.0", ";", ";", "n", "=", "count", "+=", "1", "n", "/", "2.0"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 57, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 25}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/rust/chapter_computational_complexity/time_complexity.rs#102-107", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/rust/chapter_computational_complexity/time_complexity.rs", "language": "Java"}, "method": {"name": "log_recur", "qualified_name": "codes.rust.chapter_computational_complexity.time_complexity.rs#log_recur", "start_line": 102, "end_line": 107, "signature": "log_recur(n: f32)", "original_code": "fn log_recur(n: f32) -> i32 {\n    if n <= 1.0 {\n        return 0;\n    }\n    log_recur(n / 2.0) + 1\n}", "doc_comment": "/* \u5bf9\u6570\u9636\uff08\u9012\u5f52\u5b9e\u73b0\uff09 */"}, "code_tokens": ["fn", "log_recur", "(", ")", "->", "i32", "{", "}", "n", "f32", "if", ":", "n", "<=", "1.0", "{", "}", "+", "1", "return", "0", ";", "log_recur", "(", ")", "n", "/", "2.0"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 43, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 21}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/rust/chapter_computational_complexity/time_complexity.rs#110-117", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/rust/chapter_computational_complexity/time_complexity.rs", "language": "Java"}, "method": {"name": "linear_log_recur", "qualified_name": "codes.rust.chapter_computational_complexity.time_complexity.rs#linear_log_recur", "start_line": 110, "end_line": 117, "signature": "linear_log_recur(n: f32)", "original_code": "fn linear_log_recur(n: f32) -> i32 {\n    if n <= 1.0 {\n        return 1;\n    }\n    let mut count = linear_log_recur(n / 2.0) + linear_log_recur(n / 2.0);\n    for _ in 0 ..n as i32 {\n        count += 1;\n    }", "doc_comment": "/* \u7ebf\u6027\u5bf9\u6570\u9636 */"}, "code_tokens": ["fn", "linear_log_recur", "(", ")", "->", "i32", "{", "}", "n", "f32", "if", "{", "}", "let", ";", "for", "_", "", ";", ":", "n", "<=", "1.0", "return", "1", ";", "mut", "count", "=", "in", "+=", "1", "+", "0", ".", "count", "linear_log_recur", "linear_log_recur", ".", "n", "as", "i32", "{", "(", ")", "(", ")", "n", "/", "2.0", "n", "/", "2.0"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 81, "ast_depth": 10, "n_identifiers": 8, "vocab_size": 32}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/rust/chapter_computational_complexity/time_complexity.rs#135-169", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/rust/chapter_computational_complexity/time_complexity.rs", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.rust.chapter_computational_complexity.time_complexity.rs#main", "start_line": 135, "end_line": 169, "signature": "main()", "original_code": "fn main() {\n    // \u53ef\u4ee5\u4fee\u6539 n \u8fd0\u884c\uff0c\u4f53\u4f1a\u4e00\u4e0b\u5404\u79cd\u590d\u6742\u5ea6\u7684\u64cd\u4f5c\u6570\u91cf\u53d8\u5316\u8d8b\u52bf\n    let n: i32 = 8;\n    println!(\"\u8f93\u5165\u6570\u636e\u5927\u5c0f n = {}\", n);\n\n    let mut count = constant(n);\n    println!(\"\u5e38\u6570\u9636\u7684\u64cd\u4f5c\u6570\u91cf = {}\", count);\n\n    count = linear(n);\n    println!(\"\u7ebf\u6027\u9636\u7684\u64cd\u4f5c\u6570\u91cf = {}\", count);\n    count = array_traversal(&vec![0; n as usize]);\n    println!(\"\u7ebf\u6027\u9636\uff08\u904d\u5386\u6570\u7ec4\uff09\u7684\u64cd\u4f5c\u6570\u91cf = {}\", count);\n\n    count = quadratic(n);\n    println!(\"\u5e73\u65b9\u9636\u7684\u64cd\u4f5c\u6570\u91cf = {}\", count);\n    let mut nums = (1..=n).rev().collect::<Vec<_>>(); // [n,n-1,...,2,1]\n    count = bubble_sort(&mut nums);\n    println!(\"\u5e73\u65b9\u9636\uff08\u5192\u6ce1\u6392\u5e8f\uff09\u7684\u64cd\u4f5c\u6570\u91cf = {}\", count);\n\n    count = exponential(n);\n    println!(\"\u6307\u6570\u9636\uff08\u5faa\u73af\u5b9e\u73b0\uff09\u7684\u64cd\u4f5c\u6570\u91cf = {}\", count);\n    count = exp_recur(n);\n    println!(\"\u6307\u6570\u9636\uff08\u9012\u5f52\u5b9e\u73b0\uff09\u7684\u64cd\u4f5c\u6570\u91cf = {}\", count);\n\n    count = logarithmic(n as f32);\n    println!(\"\u5bf9\u6570\u9636\uff08\u5faa\u73af\u5b9e\u73b0\uff09\u7684\u64cd\u4f5c\u6570\u91cf = {}\", count);\n    count = log_recur(n as f32);\n    println!(\"\u5bf9\u6570\u9636\uff08\u9012\u5f52\u5b9e\u73b0\uff09\u7684\u64cd\u4f5c\u6570\u91cf = {}\", count);\n\n    count = linear_log_recur(n as f32);\n    println!(\"\u7ebf\u6027\u5bf9\u6570\u9636\uff08\u9012\u5f52\u5b9e\u73b0\uff09\u7684\u64cd\u4f5c\u6570\u91cf = {}\", count);\n\n    count = factorial_recur(n);\n    println!(\"\u9636\u4e58\u9636\uff08\u9012\u5f52\u5b9e\u73b0\uff09\u7684\u64cd\u4f5c\u6570\u91cf = {}\", count);\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["fn", "main", "(", ")", "{", "// \u53ef\u4ee5\u4fee\u6539 n \u8fd0\u884c\uff0c\u4f53\u4f1a\u4e00\u4e0b\u5404\u79cd\u590d\u6742\u5ea6\u7684\u64cd\u4f5c\u6570\u91cf\u53d8\u5316\u8d8b\u52bf", "// [n,n-1,...,2,1]", "}", "let", ";", ";", "let", ";", ";", ";", ";", ";", "n", ";", ";", ";", ";", "let", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "n", ":", "i32", "=", "8", "println", "mut", "count", "=", "println", "count", "=", "println", "count", "=", "!", "[", "0", "as", "usize", "]", ")", "println", "count", "=", "println", "mut", "nums", "=", "::", "(", ")", "count", "=", "println", "count", "=", "println", "count", "=", "println", "count", "=", "println", "count", "=", "println", "count", "=", "println", "count", "=", "println", "!", "(", ",", "n", ")", "constant", "!", "(", ",", "count", ")", "linear", "!", "(", ",", "count", ")", "array_traversal", "&", "vec", "!", "(", ",", "count", ")", "quadratic", "!", "(", ",", "count", ")", ".", "collect", "<", ">", "bubble_sort", "!", "(", ",", "count", ")", "exponential", "!", "(", ",", "count", ")", "exp_recur", "!", "(", ",", "count", ")", "logarithmic", "!", "(", ",", "count", ")", "log_recur", "!", "(", ",", "count", ")", "linear_log_recur", "!", "(", ",", "count", ")", "factorial_recur", "!", "(", ",", "count", ")", "\"", "\u8f93\u5165\u6570\u636e\u5927\u5c0f n = {}", "\"", "(", "n", ")", "\"", "\u5e38\u6570\u9636\u7684\u64cd\u4f5c\u6570\u91cf = {}", "\"", "(", "n", ")", "\"", "\u7ebf\u6027\u9636\u7684\u64cd\u4f5c\u6570\u91cf = {}", "\"", "(", "\"", "\u7ebf\u6027\u9636\uff08\u904d\u5386\u6570\u7ec4\uff09\u7684\u64cd\u4f5c\u6570\u91cf = {}", "\"", "(", "n", ")", "\"", "\u5e73\u65b9\u9636\u7684\u64cd\u4f5c\u6570\u91cf = {}", "\"", ".", "rev", "Vec", "(", ")", "\"", "\u5e73\u65b9\u9636\uff08\u5192\u6ce1\u6392\u5e8f\uff09\u7684\u64cd\u4f5c\u6570\u91cf = {}", "\"", "(", "n", ")", "\"", "\u6307\u6570\u9636\uff08\u5faa\u73af\u5b9e\u73b0\uff09\u7684\u64cd\u4f5c\u6570\u91cf = {}", "\"", "(", "n", ")", "\"", "\u6307\u6570\u9636\uff08\u9012\u5f52\u5b9e\u73b0\uff09\u7684\u64cd\u4f5c\u6570\u91cf = {}", "\"", "(", "f32", ")", "\"", "\u5bf9\u6570\u9636\uff08\u5faa\u73af\u5b9e\u73b0\uff09\u7684\u64cd\u4f5c\u6570\u91cf = {}", "\"", "(", "f32", ")", "\"", "\u5bf9\u6570\u9636\uff08\u9012\u5f52\u5b9e\u73b0\uff09\u7684\u64cd\u4f5c\u6570\u91cf = {}", "\"", "(", "f32", ")", "\"", "\u7ebf\u6027\u5bf9\u6570\u9636\uff08\u9012\u5f52\u5b9e\u73b0\uff09\u7684\u64cd\u4f5c\u6570\u91cf = {}", "\"", "(", "n", ")", "\"", "\u9636\u4e58\u9636\uff08\u9012\u5f52\u5b9e\u73b0\uff09\u7684\u64cd\u4f5c\u6570\u91cf = {}", "\"", "(", ")", "(", ")", "<", "_", ">", "&", "mut", "nums", "n", "as", "n", "as", "n", "as", "1.", ".", "n", "="], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 390, "ast_depth": 11, "n_identifiers": 24, "vocab_size": 62}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/zig/chapter_computational_complexity/time_complexity.zig#8-17", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/zig/chapter_computational_complexity/time_complexity.zig", "language": "Java"}, "method": {"name": "constant", "qualified_name": "codes.zig.chapter_computational_complexity.time_complexity.zig#constant", "start_line": 8, "end_line": 17, "signature": "constant(n: i32)", "original_code": "fn constant(n: i32) i32 {\n    _ = n;\n    var count: i32 = 0;\n    const size: i32 = 100_000;\n    var i: i32 = 0;\n    while(i<size) : (i += 1) {\n        count += 1;\n    }\n    return count;\n}", "doc_comment": "// \u5e38\u6570\u9636"}, "code_tokens": ["fn", "constant", "(", ")", "i32", "{", "}", "n", "i32", ";", "var", ";", "const", ";", "var", ";", "while", "return", "count", ";", ":", "_", "=", "n", "count", "=", "0", "size", ":", "i32", "=", "100_000", "i", ":", "i32", "=", "0", "(", ")", ":", "{", "}", ":", "i32", "i", "<", "size", "(", ")", ";", "i", "+=", "1", "count", "+=", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 84, "ast_depth": 8, "n_identifiers": 7, "vocab_size": 24}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/zig/chapter_computational_complexity/time_complexity.zig#20-27", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/zig/chapter_computational_complexity/time_complexity.zig", "language": "Java"}, "method": {"name": "linear", "qualified_name": "codes.zig.chapter_computational_complexity.time_complexity.zig#linear", "start_line": 20, "end_line": 27, "signature": "linear(n: i32)", "original_code": "fn linear(n: i32) i32 {\n    var count: i32 = 0;\n    var i: i32 = 0;\n    while (i < n) : (i += 1) {\n        count += 1;\n    }\n    return count;\n}", "doc_comment": "// \u7ebf\u6027\u9636"}, "code_tokens": ["fn", "linear", "(", ")", "i32", "{", "}", "n", "i32", "var", ";", "var", ";", "while", "return", "count", ";", ":", "count", "=", "0", "i", ":", "i32", "=", "0", "(", ")", ":", "{", "}", ":", "i32", "i", "<", "n", "(", ")", ";", "i", "+=", "1", "count", "+=", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 68, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 20}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/zig/chapter_computational_complexity/time_complexity.zig#30-178", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/zig/chapter_computational_complexity/time_complexity.zig", "language": "Java"}, "method": {"name": "arrayTraversal", "qualified_name": "codes.zig.chapter_computational_complexity.time_complexity.zig#arrayTraversal", "start_line": 30, "end_line": 178, "signature": "arrayTraversal(nums: []i32)", "original_code": "fn arrayTraversal(nums: []i32) i32 {\n    var count: i32 = 0;\n    // \u5faa\u73af\u6b21\u6570\u4e0e\u6570\u7ec4\u957f\u5ea6\u6210\u6b63\u6bd4\n    for (nums) |_| {\n        count += 1;\n    }\n    return count;\n}\n\n// \u5e73\u65b9\u9636\nfn quadratic(n: i32) i32 {\n    var count: i32 = 0;\n    var i: i32 = 0;\n    // \u5faa\u73af\u6b21\u6570\u4e0e\u6570\u7ec4\u957f\u5ea6\u6210\u5e73\u65b9\u5173\u7cfb\n    while (i < n) : (i += 1) {\n        var j: i32 = 0;\n        while (j < n) : (j += 1) {\n            count += 1;\n        }\n    }\n    return count;\n}\n\n// \u5e73\u65b9\u9636\uff08\u5192\u6ce1\u6392\u5e8f\uff09\nfn bubbleSort(nums: []i32) i32 {\n    var count: i32 = 0;  // \u8ba1\u6570\u5668 \n    // \u5916\u5faa\u73af\uff1a\u672a\u6392\u5e8f\u533a\u95f4\u4e3a [0, i]\n    var i: i32 = @as(i32, @intCast(nums.len)) - 1;\n    while (i > 0) : (i -= 1) {\n        var j: usize = 0;\n        // \u5185\u5faa\u73af\uff1a\u5c06\u672a\u6392\u5e8f\u533a\u95f4 [0, i] \u4e2d\u7684\u6700\u5927\u5143\u7d20\u4ea4\u6362\u81f3\u8be5\u533a\u95f4\u7684\u6700\u53f3\u7aef \n        while (j < i) : (j += 1) {\n            if (nums[j] > nums[j + 1]) {\n                // \u4ea4\u6362 nums[j] \u4e0e nums[j + 1]\n                var tmp = nums[j];\n                nums[j] = nums[j + 1];\n                nums[j + 1] = tmp;\n                count += 3;  // \u5143\u7d20\u4ea4\u6362\u5305\u542b 3 \u4e2a\u5355\u5143\u64cd\u4f5c\n            }\n        }\n    }\n    return count;\n}\n\n// \u6307\u6570\u9636\uff08\u5faa\u73af\u5b9e\u73b0\uff09\nfn exponential(n: i32) i32 {\n    var count: i32 = 0;\n    var bas: i32 = 1;\n    var i: i32 = 0;\n    // \u7ec6\u80de\u6bcf\u8f6e\u4e00\u5206\u4e3a\u4e8c\uff0c\u5f62\u6210\u6570\u5217 1, 2, 4, 8, ..., 2^(n-1)\n    while (i < n) : (i += 1) {\n        var j: i32 = 0;\n        while (j < bas) : (j += 1) {\n            count += 1;\n        }\n        bas *= 2;\n    }\n    // count = 1 + 2 + 4 + 8 + .. + 2^(n-1) = 2^n - 1\n    return count;\n}\n\n// \u6307\u6570\u9636\uff08\u9012\u5f52\u5b9e\u73b0\uff09\nfn expRecur(n: i32) i32 {\n    if (n == 1) return 1;\n    return expRecur(n - 1) + expRecur(n - 1) + 1;\n}\n\n// \u5bf9\u6570\u9636\uff08\u5faa\u73af\u5b9e\u73b0\uff09\nfn logarithmic(n: f32) i32 {\n    var count: i32 = 0;\n    var n_var = n;\n    while (n_var > 1)\n    {\n        n_var = n_var / 2;\n        count +=1;\n    }\n    return count;\n}\n\n// \u5bf9\u6570\u9636\uff08\u9012\u5f52\u5b9e\u73b0\uff09\nfn logRecur(n: f32) i32 {\n    if (n <= 1) return 0;\n    return logRecur(n / 2) + 1;\n}\n\n// \u7ebf\u6027\u5bf9\u6570\u9636\nfn linearLogRecur(n: f32) i32 {\n    if (n <= 1) return 1;\n    var count: i32 = linearLogRecur(n / 2) + linearLogRecur(n / 2);\n    var i: f32 = 0;\n    while (i < n) : (i += 1) {\n        count += 1;\n    }\n    return count;\n}\n\n// \u9636\u4e58\u9636\uff08\u9012\u5f52\u5b9e\u73b0\uff09\nfn factorialRecur(n: i32) i32 {\n    if (n == 0) return 1;\n    var count: i32 = 0;\n    var i: i32 = 0;\n    // \u4ece 1 \u4e2a\u5206\u88c2\u51fa n \u4e2a\n    while (i < n) : (i += 1) {\n        count += factorialRecur(n - 1);\n    }\n    return count;\n}\n\n// Driver Code\npub fn main() !void {\n    // \u53ef\u4ee5\u4fee\u6539 n \u8fd0\u884c\uff0c\u4f53\u4f1a\u4e00\u4e0b\u5404\u79cd\u590d\u6742\u5ea6\u7684\u64cd\u4f5c\u6570\u91cf\u53d8\u5316\u8d8b\u52bf\n    const n: i32 = 8;\n    std.debug.print(\"\u8f93\u5165\u6570\u636e\u5927\u5c0f n = {}\\n\", .{n});\n\n    var count = constant(n);\n    std.debug.print(\"\u5e38\u6570\u9636\u7684\u64cd\u4f5c\u6570\u91cf = {}\\n\", .{count});\n\n    count = linear(n);\n    std.debug.print(\"\u7ebf\u6027\u9636\u7684\u64cd\u4f5c\u6570\u91cf = {}\\n\", .{count});\n    var nums = [_]i32{0}**n;\n    count = arrayTraversal(&nums);\n    std.debug.print(\"\u7ebf\u6027\u9636\uff08\u904d\u5386\u6570\u7ec4\uff09\u7684\u64cd\u4f5c\u6570\u91cf = {}\\n\", .{count});\n\n    count = quadratic(n);\n    std.debug.print(\"\u5e73\u65b9\u9636\u7684\u64cd\u4f5c\u6570\u91cf = {}\\n\", .{count});\n    for (&nums, 0..) |*num, i| {\n        num.* = n - @as(i32, @intCast(i));  // [n,n-1,...,2,1]\n    }\n    count = bubbleSort(&nums);\n    std.debug.print(\"\u5e73\u65b9\u9636\uff08\u5192\u6ce1\u6392\u5e8f\uff09\u7684\u64cd\u4f5c\u6570\u91cf = {}\\n\", .{count});\n\n    count = exponential(n);\n    std.debug.print(\"\u6307\u6570\u9636\uff08\u5faa\u73af\u5b9e\u73b0\uff09\u7684\u64cd\u4f5c\u6570\u91cf = {}\\n\", .{count});\n    count = expRecur(n);\n    std.debug.print(\"\u6307\u6570\u9636\uff08\u9012\u5f52\u5b9e\u73b0\uff09\u7684\u64cd\u4f5c\u6570\u91cf = {}\\n\", .{count});\n\n    count = logarithmic(@as(f32, n));\n    std.debug.print(\"\u5bf9\u6570\u9636\uff08\u5faa\u73af\u5b9e\u73b0\uff09\u7684\u64cd\u4f5c\u6570\u91cf = {}\\n\", .{count});\n    count = logRecur(@as(f32, n));\n    std.debug.print(\"\u5bf9\u6570\u9636\uff08\u9012\u5f52\u5b9e\u73b0\uff09\u7684\u64cd\u4f5c\u6570\u91cf = {}\\n\", .{count});\n\n    count = linearLogRecur(@as(f32, n));\n    std.debug.print(\"\u7ebf\u6027\u5bf9\u6570\u9636\uff08\u9012\u5f52\u5b9e\u73b0\uff09\u7684\u64cd\u4f5c\u6570\u91cf = {}\\n\", .{count});\n\n    count = factorialRecur(n);\n    std.debug.print(\"\u9636\u4e58\u9636\uff08\u9012\u5f52\u5b9e\u73b0\uff09\u7684\u64cd\u4f5c\u6570\u91cf = {}\\n\", .{count});\n\n    _ = try std.io.getStdIn().reader().readByte();\n}", "doc_comment": "// \u7ebf\u6027\u9636\uff08\u904d\u5386\u6570\u7ec4\uff09"}, "code_tokens": ["fn", "arrayTraversal", "(", ")", "i32", "{", "// \u5faa\u73af\u6b21\u6570\u4e0e\u6570\u7ec4\u957f\u5ea6\u6210\u6b63\u6bd4", "// \u5bf9\u6570\u9636\uff08\u9012\u5f52\u5b9e\u73b0\uff09", "// \u7ebf\u6027\u5bf9\u6570\u9636", "// \u9636\u4e58\u9636\uff08\u9012\u5f52\u5b9e\u73b0\uff09", "// Driver Code", "", "i32", "var", ";", "for", "(", ";", "count", ";", "// \u5e73\u65b9\u9636", "// \u5e73\u65b9\u9636\uff08\u5192\u6ce1\u6392\u5e8f\uff09", "// \u8ba1\u6570\u5668 ", "// \u5916\u5faa\u73af\uff1a\u672a\u6392\u5e8f\u533a\u95f4\u4e3a [0, i]", ")", "fn", "", "i32", "{", "}", "fn", "", "i32", "{", "}", "fn", "", "i32", "{", "// \u4ece 1 \u4e2a\u5206\u88c2\u51fa n \u4e2a", "}", "pub", "", "", "!", "void", "{", "// \u53ef\u4ee5\u4fee\u6539 n \u8fd0\u884c\uff0c\u4f53\u4f1a\u4e00\u4e0b\u5404\u79cd\u590d\u6742\u5ea6\u7684\u64cd\u4f5c\u6570\u91cf\u53d8\u5316\u8d8b\u52bf", "}", "nums", "count", "=", "0", "|", "}", "return", "}", "fn", "i32", "{", "var", "count", ":", ";", "var", "i", ":", ";", "// \u5faa\u73af\u6b21\u6570\u4e0e\u6570\u7ec4\u957f\u5ea6\u6210\u5e73\u65b9\u5173\u7cfb", "while", ":", "{", "var", "j", ":", ";", "while", ":", "{", ";", "}", "}", "return", "count", ";", "}", "fn", "i32", "{", "var", "count", ":", ";", "var", "i", ":", "i32", "=", ";", "}", "// \u5bf9\u6570\u9636\uff08\u5faa\u73af\u5b9e\u73b0\uff09", "fn", "logarithmic", "(", "n", ":", "f32", "i32", "{", "}", "logRecur", "(", ")", "if", "return", ";", "linearLogRecur", "(", ")", "if", "var", ";", "var", ";", "while", "return", "count", ";", "factorialRecur", "(", ")", "if", "var", ";", "var", ";", "while", "return", "count", ";", "fn", "main", "const", ";", ";", "var", ";", ";", ";", ";", "var", ";", ";", ";", ";", ";", "for", "(", "nums", ",", ",", ",", "count", ";", ";", ";", ":", "[", "]", ":", "i32", "nums", "|", "_", "{", "count", "+=", "1", "quadratic", "i32", "=", "0", "i32", "=", "0", "(", ")", "(", ")", "i32", "=", "0", "(", ")", "(", ")", "count", "+=", "1", "bubbleSort", "i32", "=", "0", "{", "var", "count", ":", "i32", "=", "0", ";", "var", "bas", ":", "i32", "=", "1", ";", "var", "i", ":", "i32", "=", "0", ";", "// \u7ec6\u80de\u6bcf\u8f6e\u4e00\u5206\u4e3a\u4e8c\uff0c\u5f62\u6210\u6570\u5217 1, 2, 4, 8, ..., 2^(n-1)", "while", "(", "i", "<", "n", ")", ":", "(", "i", "+=", "1", ")", "{", "var", "j", ":", "i32", "=", "0", ";", "while", "(", "j", "<", "bas", ")", ":", "(", "j", "+=", "1", ")", "{", "count", "+=", "1", ";", "}", "bas", "*=", "2", ";", "}", "// count = 1 + 2 + 4 + 8 + .. + 2^(n-1) = 2^n - 1", "return", "count", ";", "}", "// \u6307\u6570\u9636\uff08\u9012\u5f52\u5b9e\u73b0\uff09", "fn", "expRecur", "(", "n", ":", "i32", ")", "i32", "{", "if", "(", "n", "==", "1", ")", "return", "1", ";", "return", "+", "1", "var", ";", "var", ";", "while", "return", "count", ";", "n", "f32", "(", ")", "return", "0", ";", "+", "1", "n", "f32", "(", ")", "return", "1", ";", "count", "=", "i", ":", "f32", "=", "0", "(", ")", ":", "{", "}", "n", "i32", "(", ")", "return", "1", ";", "count", "=", "0", "i", ":", "i32", "=", "0", "(", ")", ":", "{", "}", "(", ")", "n", ":", "i32", "=", "8", ".", "print", "count", "=", ".", "print", "count", "=", ".", "print", "nums", "=", "*", "*", "n", "count", "=", ".", "print", "count", "=", ".", "print", "&", "0.", "*", "num", "i", "|", ".", "{", "}", ")", "count", "=", ";", ";", ";", ";", ";", ";", ";", ";", "_", "=", "try", ".", "readByte", ")", "(", "i32", ")", "i", "<", "n", "i", "+=", "1", "j", "<", "n", "j", "+=", "1", "(", "nums", ")", "i32", "+", "count", "=", "0", "n_var", "=", "n", "(", ")", "{", "}", ":", "n", "<=", "1", "logRecur", ":", "n", "<=", "1", ":", "i32", "+", "i", "<", "n", "(", ")", ";", ":", "n", "==", "0", ":", "i32", "i", "<", "n", "(", ")", ";", "std", ".", "debug", "(", ",", "n", ")", "constant", "std", ".", "debug", "(", ",", "count", ")", "linear", "std", ".", "debug", "(", ",", "count", ")", "i32", "{", "0", "}", "arrayTraversal", "std", ".", "debug", "(", ",", "count", ")", "quadratic", "std", ".", "debug", "(", ",", "count", ")", ".", ")", "|", "{", "num", "=", "exponential", ".", "print", "count", "=", ".", "print", "count", "=", "count", "=", "count", "=", "count", "=", ".", "print", ".", "reader", "(", ")", "n", ":", ":", "[", "]", "i32", "@", "as", "expRecur", "expRecur", ":", "i32", "n_var", ">", "1", ";", ";", "(", ")", "linearLogRecur", "linearLogRecur", "i", "+=", "1", "count", "+=", "1", "i", "+=", "1", "count", "+=", "\"", "\u8f93\u5165\u6570\u636e\u5927\u5c0f n = {}", "\\n", "\"", ".", "{", "}", "(", "n", ")", "\"", "\u5e38\u6570\u9636\u7684\u64cd\u4f5c\u6570\u91cf = {}", "\\n", "\"", ".", "{", "}", "(", "n", ")", "\"", "\u7ebf\u6027\u9636\u7684\u64cd\u4f5c\u6570\u91cf = {}", "\\n", "\"", ".", "{", "}", "", "[", "_", "]", "(", "nums", ")", "\"", "\u7ebf\u6027\u9636\uff08\u904d\u5386\u6570\u7ec4\uff09\u7684\u64cd\u4f5c\u6570\u91cf = {}", "\\n", "\"", ".", "{", "}", "(", "n", ")", "\"", "\u5e73\u65b9\u9636\u7684\u64cd\u4f5c\u6570\u91cf = {}", "\\n", "\"", ".", "{", "}", ".", "*", "n", "-", "(", "n", ")", "std", ".", "debug", "(", ",", "count", ")", "expRecur", "std", ".", "debug", "(", ",", "count", ")", "logarithmic", "logRecur", "linearLogRecur", "factorialRecur", "std", ".", "debug", "(", ",", "count", ")", ".", "getStdIn", "(", ")", "(", ")", "(", ")", "(", ")", "n_var", "=", "count", "+=", "1", "n", "/", "2", "(", ")", "(", ")", "factorialRecur", "&", "(", "\"", "\u5e73\u65b9\u9636\uff08\u5192\u6ce1\u6392\u5e8f\uff09\u7684\u64cd\u4f5c\u6570\u91cf = {}", "\\n", "\"", "\"", "\u6307\u6570\u9636\uff08\u5faa\u73af\u5b9e\u73b0\uff09\u7684\u64cd\u4f5c\u6570\u91cf = {}", "\\n", "\"", ".", "{", "}", "(", "n", ")", "\"", "\u6307\u6570\u9636\uff08\u9012\u5f52\u5b9e\u73b0\uff09\u7684\u64cd\u4f5c\u6570\u91cf = {}", "\\n", "\"", ".", "{", "}", "(", ",", "count", ")", "(", ",", "count", ")", "(", ",", "count", ")", "(", "n", ")", "\"", "\u9636\u4e58\u9636\uff08\u9012\u5f52\u5b9e\u73b0\uff09\u7684\u64cd\u4f5c\u6570\u91cf = {}", "\\n", "\"", ".", "{", "}", "std", ".", "io", "(", ")", "i32", ")", "-", "1", ";", "while", ":", "{", "}", "return", "count", ";", "}", "// \u6307\u6570\u9636\uff08\u5faa\u73af\u5b9e\u73b0\uff09", "fn", "exponential", "(", "n", ":", "i32", "n", "-", "1", "n", "-", "1", "n_var", "/", "2", "n", "/", "2", "n", "/", "2", "(", ")", "(", "\"", "\u5bf9\u6570\u9636\uff08\u5faa\u73af\u5b9e\u73b0\uff09\u7684\u64cd\u4f5c\u6570\u91cf = {}", "\\n", "\"", ".", "{", "}", "(", "\"", "\u5bf9\u6570\u9636\uff08\u9012\u5f52\u5b9e\u73b0\uff09\u7684\u64cd\u4f5c\u6570\u91cf = {}", "\\n", "\"", ".", "{", "}", "(", "\"", "\u7ebf\u6027\u5bf9\u6570\u9636\uff08\u9012\u5f52\u5b9e\u73b0\uff09\u7684\u64cd\u4f5c\u6570\u91cf = {}", "\\n", "\"", ".", "{", "}", ",", "@", "intCast", "(", ")", "(", ")", "var", "j", ":", ";", "// \u5185\u5faa\u73af\uff1a\u5c06\u672a\u6392\u5e8f\u533a\u95f4 [0, i] \u4e2d\u7684\u6700\u5927\u5143\u7d20\u4ea4\u6362\u81f3\u8be5\u533a\u95f4\u7684\u6700\u53f3\u7aef ", "while", ":", "{", "}", "n", "-", "1", "@", "as", ";", ".", "print", "(", ")", "i", ">", "0", "i", "-=", "1", "usize", "=", "0", "(", ")", "(", ")", "{", "// \u4ea4\u6362 nums[j] \u4e0e nums[j + 1]", "// \u5143\u7d20\u4ea4\u6362\u5305\u542b 3 \u4e2a\u5355\u5143\u64cd\u4f5c", "}", "(", ")", "std", ".", "debug", "@", "as", ")", ";", ".", "print", "@", "as", ")", ";", ".", "print", "@", "as", ")", ";", ".", "print", "nums", ".", "len", "j", "<", "i", "j", "+=", "1", "if", "var", ";", ";", ";", "count", "+=", "3", ";", "i32", ")", ";", "// [n,n-1,...,2,1]", "}", "count", "=", "(", "f32", ")", "std", ".", "debug", "(", "f32", ")", "std", ".", "debug", "(", "f32", ")", "std", ".", "debug", "(", ")", "tmp", "=", "=", "=", "tmp", ",", "@", "intCast", "bubbleSort", "&", "nums", ",", "n", ",", "n", ",", "n", ">", "nums", "[", "j", "]", "nums", "[", "j", "]", "nums", "[", "]", "nums", "[", "]", "(", "i", ")", "(", "nums", "[", "j", "]", "nums", "[", "]", "j", "+", "1", "j", "+", "1", "j", "+", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 1313, "ast_depth": 18, "n_identifiers": 40, "vocab_size": 113}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:docs/chapter_hashing/hash_map.md#449-451", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "docs/chapter_hashing/hash_map.md", "language": "Java"}, "method": {"name": "keys", "qualified_name": "docs.chapter_hashing.hash_map.md#keys", "start_line": 449, "end_line": 451, "signature": "keys()", "original_code": "in map.keys() {\n        println!(\"{key}\"); \n    }", "doc_comment": ""}, "code_tokens": ["in", "keys", "map", ".", "(", ")", "{", "}", ";", "println", "!", "(", ")", "\"", "{key}", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 26, "ast_depth": 8, "n_identifiers": 3, "vocab_size": 13}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:docs/chapter_hashing/hash_map.md#454-456", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "docs/chapter_hashing/hash_map.md", "language": "Java"}, "method": {"name": "values", "qualified_name": "docs.chapter_hashing.hash_map.md#values", "start_line": 454, "end_line": 456, "signature": "values()", "original_code": "in map.values() {\n        println!(\"{value}\");\n    }", "doc_comment": ""}, "code_tokens": ["in", "values", "map", ".", "(", ")", "{", "}", ";", "println", "!", "(", ")", "\"", "{value}", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 26, "ast_depth": 8, "n_identifiers": 3, "vocab_size": 13}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/c/chapter_array_and_linkedlist/my_list.c#19-19", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/my_list.c", "language": "Java"}, "method": {"name": "extendCapacity", "qualified_name": "codes.c.chapter_array_and_linkedlist.my_list.c#extendCapacity", "start_line": 19, "end_line": 19, "signature": "extendCapacity(MyList *nums)", "original_code": "void extendCapacity(MyList *nums);", "doc_comment": ""}, "code_tokens": ["void", "extendCapacity", ";", "(", ")", "MyList", "nums", "*"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 13, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 8}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/c/chapter_array_and_linkedlist/my_list.c#32-35", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/my_list.c", "language": "Java"}, "method": {"name": "delMyList", "qualified_name": "codes.c.chapter_array_and_linkedlist.my_list.c#delMyList", "start_line": 32, "end_line": 35, "signature": "delMyList(MyList *nums)", "original_code": "void delMyList(MyList *nums) {\n    free(nums->arr);\n    free(nums);\n}", "doc_comment": "/* \u6790\u6784\u51fd\u6570 */"}, "code_tokens": ["void", "delMyList", "(", ")", "{", "}", "MyList", "nums", ";", ";", "*", "free", "free", "(", ")", "(", "nums", ")", "nums", "->", "arr"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 34, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 13}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/c/chapter_array_and_linkedlist/my_list.c#38-40", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/my_list.c", "language": "Java"}, "method": {"name": "size", "qualified_name": "codes.c.chapter_array_and_linkedlist.my_list.c#size", "start_line": 38, "end_line": 40, "signature": "size(MyList *nums)", "original_code": "int size(MyList *nums) {\n    return nums->size;\n}", "doc_comment": "/* \u83b7\u53d6\u5217\u8868\u957f\u5ea6 */"}, "code_tokens": ["size", "int", "(", ")", "{", "}", "MyList", "nums", "return", ";", "*", "nums", "->", "size"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 23, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 12}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/c/chapter_array_and_linkedlist/my_list.c#43-45", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/my_list.c", "language": "Java"}, "method": {"name": "capacity", "qualified_name": "codes.c.chapter_array_and_linkedlist.my_list.c#capacity", "start_line": 43, "end_line": 45, "signature": "capacity(MyList *nums)", "original_code": "int capacity(MyList *nums) {\n    return nums->capacity;\n}", "doc_comment": "/* \u83b7\u53d6\u5217\u8868\u5bb9\u91cf */"}, "code_tokens": ["capacity", "int", "(", ")", "{", "}", "MyList", "nums", "return", ";", "*", "nums", "->", "capacity"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 23, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 12}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/c/chapter_array_and_linkedlist/my_list.c#48-51", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/my_list.c", "language": "Java"}, "method": {"name": "get", "qualified_name": "codes.c.chapter_array_and_linkedlist.my_list.c#get", "start_line": 48, "end_line": 51, "signature": "get(MyList *nums, int index)", "original_code": "int get(MyList *nums, int index) {\n    assert(index >= 0 && index < nums->size);\n    return nums->arr[index];\n}", "doc_comment": "/* \u8bbf\u95ee\u5143\u7d20 */"}, "code_tokens": ["get", "int", "(", ",", ")", "{", "}", "MyList", "nums", "index", "assert", ";", "return", ";", "*", "int", "(", ")", "nums", "->", "&&", "arr", "[", "index", "]", "index", ">=", "0", "index", "<", "nums", "->", "size"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 51, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 23}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/c/chapter_array_and_linkedlist/my_list.c#54-57", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/my_list.c", "language": "Java"}, "method": {"name": "set", "qualified_name": "codes.c.chapter_array_and_linkedlist.my_list.c#set", "start_line": 54, "end_line": 57, "signature": "set(MyList *nums, int index, int num)", "original_code": "void set(MyList *nums, int index, int num) {\n    assert(index >= 0 && index < nums->size);\n    nums->arr[index] = num;\n}", "doc_comment": "/* \u66f4\u65b0\u5143\u7d20 */"}, "code_tokens": ["void", "set", "(", ",", ",", ")", "{", "}", "MyList", "nums", "index", "num", "assert", ";", ";", "*", "int", "int", "(", ")", "nums", "->", "&&", "=", "num", "index", ">=", "0", "index", "<", "arr", "[", "index", "]", "nums", "->", "size"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 57, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 25}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/c/chapter_array_and_linkedlist/my_list.c#60-66", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/my_list.c", "language": "Java"}, "method": {"name": "add", "qualified_name": "codes.c.chapter_array_and_linkedlist.my_list.c#add", "start_line": 60, "end_line": 66, "signature": "add(MyList *nums, int num)", "original_code": "void add(MyList *nums, int num) {\n    if (size(nums) == capacity(nums)) {\n        extendCapacity(nums); // \u6269\u5bb9\n    }\n    nums->arr[size(nums)] = num;\n    nums->size++;\n}", "doc_comment": "/* \u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 */"}, "code_tokens": ["void", "add", "(", ",", ")", "{", "}", "MyList", "nums", "num", "if", ";", ";", "*", "int", "(", ")", "{", "// \u6269\u5bb9", "}", "nums", "->", "nums", "->", "==", ";", "=", "num", "size", "++", "size", "capacity", "extendCapacity", "arr", "[", "]", "(", "nums", ")", "(", "nums", ")", "(", "nums", ")", "size", "(", "nums", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 77, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 25}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/c/chapter_array_and_linkedlist/my_list.c#69-80", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/my_list.c", "language": "Java"}, "method": {"name": "insert", "qualified_name": "codes.c.chapter_array_and_linkedlist.my_list.c#insert", "start_line": 69, "end_line": 80, "signature": "insert(MyList *nums, int index, int num)", "original_code": "void insert(MyList *nums, int index, int num) {\n    assert(index >= 0 && index < size(nums));\n    // \u5143\u7d20\u6570\u91cf\u8d85\u51fa\u5bb9\u91cf\u65f6\uff0c\u89e6\u53d1\u6269\u5bb9\u673a\u5236\n    if (size(nums) == capacity(nums)) {\n        extendCapacity(nums); // \u6269\u5bb9\n    }\n    for (int i = size(nums); i > index; --i) {\n        nums->arr[i] = nums->arr[i - 1];\n    }\n    nums->arr[index] = num;\n    nums->size++;\n}", "doc_comment": "/* \u4e2d\u95f4\u63d2\u5165\u5143\u7d20 */"}, "code_tokens": ["void", "insert", "(", ",", ",", ")", "{", "// \u5143\u7d20\u6570\u91cf\u8d85\u51fa\u5bb9\u91cf\u65f6\uff0c\u89e6\u53d1\u6269\u5bb9\u673a\u5236", "}", "MyList", "nums", "index", "num", "assert", ";", "if", "for", "(", ";", ")", ";", ";", "*", "int", "int", "(", ")", "(", ")", "{", "// \u6269\u5bb9", "}", ";", "i", ">", "index", "--", "i", "{", "}", "nums", "->", "nums", "->", "&&", "==", ";", "int", "i", "=", ";", "=", "num", "size", "++", "index", ">=", "0", "index", "<", "size", "capacity", "extendCapacity", "size", "nums", "->", "arr", "[", "index", "]", "size", "(", "nums", ")", "(", "nums", ")", "(", "nums", ")", "(", "nums", ")", "=", "(", "nums", ")", "arr", "[", "i", "]", "nums", "->", "arr", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 150, "ast_depth": 12, "n_identifiers": 9, "vocab_size": 38}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/c/chapter_array_and_linkedlist/my_list.c#84-92", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/my_list.c", "language": "Java"}, "method": {"name": "removeNum", "qualified_name": "codes.c.chapter_array_and_linkedlist.my_list.c#removeNum", "start_line": 84, "end_line": 92, "signature": "removeNum(MyList *nums, int index)", "original_code": "int removeNum(MyList *nums, int index) {\n    assert(index >= 0 && index < size(nums));\n    int num = nums->arr[index];\n    for (int i = index; i < size(nums) - 1; i++) {\n        nums->arr[i] = nums->arr[i + 1];\n    }\n    nums->size--;\n    return num;\n}", "doc_comment": "// \u6ce8\u610f\uff1astdio.h \u5360\u7528\u4e86 remove \u5173\u952e\u8bcd"}, "code_tokens": ["removeNum", "int", "(", ",", ")", "{", "}", "MyList", "nums", "index", "assert", ";", ";", "for", "(", ";", ")", ";", "return", "num", ";", "*", "int", "(", ")", "int", "num", "=", ";", "i", "<", "i", "++", "{", "}", "nums", "->", "&&", "nums", "->", "int", "i", "=", "index", "-", "1", ";", "size", "--", "index", ">=", "0", "index", "<", "arr", "[", "index", "]", "size", "nums", "->", "size", "(", "nums", ")", "=", "(", "nums", ")", "arr", "[", "i", "]", "nums", "->", "arr", "[", "]", "i", "+", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 123, "ast_depth": 12, "n_identifiers": 7, "vocab_size": 32}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/c/chapter_array_and_linkedlist/my_list.c#95-111", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/my_list.c", "language": "Java"}, "method": {"name": "extendCapacity", "qualified_name": "codes.c.chapter_array_and_linkedlist.my_list.c#extendCapacity", "start_line": 95, "end_line": 111, "signature": "extendCapacity(MyList *nums)", "original_code": "void extendCapacity(MyList *nums) {\n    // \u5148\u5206\u914d\u7a7a\u95f4\n    int newCapacity = capacity(nums) * nums->extendRatio;\n    int *extend = (int *)malloc(sizeof(int) * newCapacity);\n    int *temp = nums->arr;\n\n    // \u62f7\u8d1d\u65e7\u6570\u636e\u5230\u65b0\u6570\u636e\n    for (int i = 0; i < size(nums); i++)\n        extend[i] = nums->arr[i];\n\n    // \u91ca\u653e\u65e7\u6570\u636e\n    free(temp);\n\n    // \u66f4\u65b0\u65b0\u6570\u636e\n    nums->arr = extend;\n    nums->capacity = newCapacity;\n}", "doc_comment": "/* \u5217\u8868\u6269\u5bb9 */"}, "code_tokens": ["void", "extendCapacity", "(", ")", "{", "// \u5148\u5206\u914d\u7a7a\u95f4", "// \u62f7\u8d1d\u65e7\u6570\u636e\u5230\u65b0\u6570\u636e", "// \u91ca\u653e\u65e7\u6570\u636e", "// \u66f4\u65b0\u65b0\u6570\u636e", "}", "MyList", "nums", ";", ";", ";", "for", "(", ";", ")", ";", ";", ";", "*", "int", "newCapacity", "=", "int", "*", "extend", "=", "int", "*", "temp", "=", ";", "i", "<", "i", "++", ";", "free", "nums", "->", "nums", "->", "*", "(", ")", "nums", "->", "arr", "int", "i", "=", "0", "size", "=", "(", "temp", ")", "arr", "=", "extend", "capacity", "=", "newCapacity", "capacity", "nums", "->", "extendRatio", "int", "*", "malloc", "(", "nums", ")", "extend", "[", "i", "]", "nums", "->", "(", "nums", ")", "(", ")", "arr", "[", "i", "]", "*", "newCapacity", "sizeof", "(", ")", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 151, "ast_depth": 14, "n_identifiers": 13, "vocab_size": 34}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/c/chapter_array_and_linkedlist/my_list.c#114-116", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/my_list.c", "language": "Java"}, "method": {"name": "toArray", "qualified_name": "codes.c.chapter_array_and_linkedlist.my_list.c#toArray", "start_line": 114, "end_line": 116, "signature": "toArray(MyList *nums)", "original_code": "int *toArray(MyList *nums) {\n    return nums->arr;\n}", "doc_comment": "/* \u5c06\u5217\u8868\u8f6c\u6362\u4e3a Array \u7528\u4e8e\u6253\u5370 */"}, "code_tokens": ["toArray", "int", "*", "(", ")", "{", "}", "MyList", "nums", "return", ";", "*", "nums", "->", "arr"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 25, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 13}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/c/chapter_array_and_linkedlist/my_list.c#119-165", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/c/chapter_array_and_linkedlist/my_list.c", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.c.chapter_array_and_linkedlist.my_list.c#main", "start_line": 119, "end_line": 165, "signature": "main()", "original_code": "int main() {\n    /* \u521d\u59cb\u5316\u5217\u8868 */\n    MyList *nums = newMyList();\n    /* \u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 */\n    add(nums, 1);\n    add(nums, 3);\n    add(nums, 2);\n    add(nums, 5);\n    add(nums, 4);\n    printf(\"\u5217\u8868 nums = \");\n    printArray(toArray(nums), size(nums));\n    printf(\"\u5bb9\u91cf = %d \uff0c\u957f\u5ea6 = %d\\n\", capacity(nums), size(nums));\n\n    /* \u4e2d\u95f4\u63d2\u5165\u5143\u7d20 */\n    insert(nums, 3, 6);\n    printf(\"\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = \");\n    printArray(toArray(nums), size(nums));\n\n    /* \u5220\u9664\u5143\u7d20 */\n    removeNum(nums, 3);\n    printf(\"\u5220\u9664\u7d22\u5f15 3 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = \");\n    printArray(toArray(nums), size(nums));\n\n    /* \u8bbf\u95ee\u5143\u7d20 */\n    int num = get(nums, 1);\n    printf(\"\u8bbf\u95ee\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 num = %d\\n\", num);\n\n    /* \u66f4\u65b0\u5143\u7d20 */\n    set(nums, 1, 0);\n    printf(\"\u5c06\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\u66f4\u65b0\u4e3a 0 \uff0c\u5f97\u5230 nums = \");\n    printArray(toArray(nums), size(nums));\n\n    /* \u6d4b\u8bd5\u6269\u5bb9\u673a\u5236 */\n    for (int i = 0; i < 10; i++) {\n        // \u5728 i = 5 \u65f6\uff0c\u5217\u8868\u957f\u5ea6\u5c06\u8d85\u51fa\u5217\u8868\u5bb9\u91cf\uff0c\u6b64\u65f6\u89e6\u53d1\u6269\u5bb9\u673a\u5236\n        add(nums, i);\n    }\n\n    printf(\"\u6269\u5bb9\u540e\u7684\u5217\u8868 nums = \");\n    printArray(toArray(nums), size(nums));\n    printf(\"\u5bb9\u91cf = %d \uff0c\u957f\u5ea6 = %d\\n\", capacity(nums), size(nums));\n\n    /* \u91ca\u653e\u5206\u914d\u5185\u5b58 */\n    delMyList(nums);\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "/* \u521d\u59cb\u5316\u5217\u8868 */", "/* \u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 */", "/* \u4e2d\u95f4\u63d2\u5165\u5143\u7d20 */", "/* \u5220\u9664\u5143\u7d20 */", "/* \u8bbf\u95ee\u5143\u7d20 */", "/* \u66f4\u65b0\u5143\u7d20 */", "/* \u6d4b\u8bd5\u6269\u5bb9\u673a\u5236 */", "/* \u91ca\u653e\u5206\u914d\u5185\u5b58 */", "}", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "for", "(", ";", ")", ";", ";", ";", ";", "return", "0", ";", "MyList", "*", "add", "add", "add", "add", "add", "printf", "printArray", "printf", "insert", "printf", "printArray", "removeNum", "printf", "printArray", "int", "num", "=", "printf", "set", "printf", "printArray", ";", "i", "<", "10", "i", "++", "{", "// \u5728 i = 5 \u65f6\uff0c\u5217\u8868\u957f\u5ea6\u5c06\u8d85\u51fa\u5217\u8868\u5bb9\u91cf\uff0c\u6b64\u65f6\u89e6\u53d1\u6269\u5bb9\u673a\u5236", "}", "printf", "printArray", "printf", "delMyList", "nums", "=", "(", "nums", ",", "1", ")", "(", "nums", ",", "3", ")", "(", "nums", ",", "2", ")", "(", "nums", ",", "5", ")", "(", "nums", ",", "4", ")", "(", ")", "(", ",", ")", "(", ",", ",", ")", "(", "nums", ",", "3", ",", "6", ")", "(", ")", "(", ",", ")", "(", "nums", ",", "3", ")", "(", ")", "(", ",", ")", "get", "(", ",", "num", ")", "(", "nums", ",", "1", ",", "0", ")", "(", ")", "(", ",", ")", "int", "i", "=", "0", ";", "(", ")", "(", ",", ")", "(", ",", ",", ")", "(", "nums", ")", "newMyList", "\"", "\u5217\u8868 nums = ", "\"", "toArray", "size", "\"", "\u5bb9\u91cf = %d \uff0c\u957f\u5ea6 = %d", "\\n", "\"", "capacity", "size", "\"", "\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = ", "\"", "toArray", "size", "\"", "\u5220\u9664\u7d22\u5f15 3 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = ", "\"", "toArray", "size", "(", "nums", ",", "1", ")", "\"", "\u8bbf\u95ee\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 num = %d", "\\n", "\"", "\"", "\u5c06\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\u66f4\u65b0\u4e3a 0 \uff0c\u5f97\u5230 nums = ", "\"", "toArray", "size", "add", "\"", "\u6269\u5bb9\u540e\u7684\u5217\u8868 nums = ", "\"", "toArray", "size", "\"", "\u5bb9\u91cf = %d \uff0c\u957f\u5ea6 = %d", "\\n", "\"", "capacity", "size", "(", ")", "(", "nums", ")", "(", "nums", ")", "(", "nums", ")", "(", "nums", ")", "(", "nums", ")", "(", "nums", ")", "(", "nums", ")", "(", "nums", ")", "(", "nums", ")", "(", "nums", ")", "(", "nums", ",", "i", ")", "(", "nums", ")", "(", "nums", ")", "(", "nums", ")", "(", "nums", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 398, "ast_depth": 9, "n_identifiers": 17, "vocab_size": 56}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/cpp/chapter_array_and_linkedlist/list.cpp#10-73", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/cpp/chapter_array_and_linkedlist/list.cpp", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.cpp.chapter_array_and_linkedlist.list.cpp#main", "start_line": 10, "end_line": 73, "signature": "main()", "original_code": "int main() {\n    /* \u521d\u59cb\u5316\u5217\u8868 */\n    vector<int> nums = {1, 3, 2, 5, 4};\n    cout << \"\u5217\u8868 nums = \";\n    printVector(nums);\n\n    /* \u8bbf\u95ee\u5143\u7d20 */\n    int x = nums[1];\n    cout << \"\u8bbf\u95ee\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 x = \" << x << endl;\n\n    /* \u66f4\u65b0\u5143\u7d20 */\n    nums[1] = 0;\n    cout << \"\u5c06\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\u66f4\u65b0\u4e3a 0 \uff0c\u5f97\u5230 nums = \";\n    printVector(nums);\n\n    /* \u6e05\u7a7a\u5217\u8868 */\n    nums.clear();\n    cout << \"\u6e05\u7a7a\u5217\u8868\u540e nums = \";\n    printVector(nums);\n\n    /* \u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 */\n    nums.push_back(1);\n    nums.push_back(3);\n    nums.push_back(2);\n    nums.push_back(5);\n    nums.push_back(4);\n    cout << \"\u6dfb\u52a0\u5143\u7d20\u540e nums = \";\n    printVector(nums);\n\n    /* \u4e2d\u95f4\u63d2\u5165\u5143\u7d20 */\n    nums.insert(nums.begin() + 3, 6);\n    cout << \"\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = \";\n    printVector(nums);\n\n    /* \u5220\u9664\u5143\u7d20 */\n    nums.erase(nums.begin() + 3);\n    cout << \"\u5220\u9664\u7d22\u5f15 3 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = \";\n    printVector(nums);\n\n    /* \u901a\u8fc7\u7d22\u5f15\u904d\u5386\u5217\u8868 */\n    int count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        count++;\n    }\n\n    /* \u76f4\u63a5\u904d\u5386\u5217\u8868\u5143\u7d20 */\n    count = 0;\n    for (int n : nums) {\n        count++;\n    }\n\n    /* \u62fc\u63a5\u4e24\u4e2a\u5217\u8868 */\n    vector<int> nums1 = {6, 8, 7, 10, 9};\n    nums.insert(nums.end(), nums1.begin(), nums1.end());\n    cout << \"\u5c06\u5217\u8868 nums1 \u62fc\u63a5\u5230 nums \u4e4b\u540e\uff0c\u5f97\u5230 nums = \";\n    printVector(nums);\n\n    /* \u6392\u5e8f\u5217\u8868 */\n    sort(nums.begin(), nums.end());\n    cout << \"\u6392\u5e8f\u5217\u8868\u540e nums = \";\n    printVector(nums);\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "/* \u521d\u59cb\u5316\u5217\u8868 */", "/* \u8bbf\u95ee\u5143\u7d20 */", "/* \u66f4\u65b0\u5143\u7d20 */", "/* \u6e05\u7a7a\u5217\u8868 */", "/* \u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 */", "/* \u4e2d\u95f4\u63d2\u5165\u5143\u7d20 */", "/* \u5220\u9664\u5143\u7d20 */", "/* \u901a\u8fc7\u7d22\u5f15\u904d\u5386\u5217\u8868 */", "/* \u76f4\u63a5\u904d\u5386\u5217\u8868\u5143\u7d20 */", "/* \u62fc\u63a5\u4e24\u4e2a\u5217\u8868 */", "/* \u6392\u5e8f\u5217\u8868 */", "}", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "for", "(", ";", ")", ";", "for", "(", "n", ":", "nums", ")", ";", ";", ";", ";", ";", ";", ";", "return", "0", ";", "vector", "nums", "=", "cout", "<<", "printVector", "int", "x", "=", "<<", "endl", "=", "0", "cout", "<<", "printVector", "nums", ".", "clear", "cout", "<<", "printVector", "nums", ".", "push_back", "nums", ".", "push_back", "nums", ".", "push_back", "nums", ".", "push_back", "nums", ".", "push_back", "cout", "<<", "printVector", "nums", ".", "insert", "cout", "<<", "printVector", "nums", ".", "erase", "cout", "<<", "printVector", "int", "count", "=", "0", ";", "i", "<", "i", "++", "{", "}", "count", "=", "0", "int", "{", "}", "vector", "nums1", "=", "nums", ".", "insert", "cout", "<<", "printVector", "sort", "cout", "<<", "printVector", "<", ">", "{", "1", ",", "3", ",", "2", ",", "5", ",", "4", "}", "\"", "\u5217\u8868 nums = ", "\"", "(", "nums", ")", "nums", "[", "1", "]", "<<", "x", "nums", "[", "1", "]", "\"", "\u5c06\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\u66f4\u65b0\u4e3a 0 \uff0c\u5f97\u5230 nums = ", "\"", "(", "nums", ")", "(", ")", "\"", "\u6e05\u7a7a\u5217\u8868\u540e nums = ", "\"", "(", "nums", ")", "(", "1", ")", "(", "3", ")", "(", "2", ")", "(", "5", ")", "(", "4", ")", "\"", "\u6dfb\u52a0\u5143\u7d20\u540e nums = ", "\"", "(", "nums", ")", "(", ",", "6", ")", "\"", "\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = ", "\"", "(", "nums", ")", "(", ")", "\"", "\u5220\u9664\u7d22\u5f15 3 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = ", "\"", "(", "nums", ")", "int", "i", "=", "0", "nums", ".", "size", ";", ";", "<", ">", "{", "6", ",", "8", ",", "7", ",", "10", ",", "9", "}", "(", ",", ",", ")", "\"", "\u5c06\u5217\u8868 nums1 \u62fc\u63a5\u5230 nums \u4e4b\u540e\uff0c\u5f97\u5230 nums = ", "\"", "(", "nums", ")", "(", ",", ")", "\"", "\u6392\u5e8f\u5217\u8868\u540e nums = ", "\"", "(", "nums", ")", "int", "cout", "<<", "+", "3", "+", "3", "(", ")", "count", "++", "count", "++", "int", "nums", ".", "end", "nums1", ".", "begin", "nums1", ".", "end", "nums", ".", "begin", "nums", ".", "end", "\"", "\u8bbf\u95ee\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 x = ", "\"", "nums", ".", "begin", "nums", ".", "begin", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 465, "ast_depth": 10, "n_identifiers": 18, "vocab_size": 70}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/cpp/chapter_array_and_linkedlist/my_list.cpp#29-31", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/cpp/chapter_array_and_linkedlist/my_list.cpp", "language": "Java"}, "method": {"name": "size", "qualified_name": "codes.cpp.chapter_array_and_linkedlist.my_list.cpp#size", "start_line": 29, "end_line": 31, "signature": "size()", "original_code": "int size() {\n        return arrSize;\n    }", "doc_comment": "/* \u83b7\u53d6\u5217\u8868\u957f\u5ea6\uff08\u5373\u5f53\u524d\u5143\u7d20\u6570\u91cf\uff09*/"}, "code_tokens": ["size", "int", "(", ")", "{", "}", "return", "arrSize", ";"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 15, "ast_depth": 5, "n_identifiers": 2, "vocab_size": 9}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/cpp/chapter_array_and_linkedlist/my_list.cpp#34-36", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/cpp/chapter_array_and_linkedlist/my_list.cpp", "language": "Java"}, "method": {"name": "capacity", "qualified_name": "codes.cpp.chapter_array_and_linkedlist.my_list.cpp#capacity", "start_line": 34, "end_line": 36, "signature": "capacity()", "original_code": "int capacity() {\n        return arrCapacity;\n    }", "doc_comment": "/* \u83b7\u53d6\u5217\u8868\u5bb9\u91cf */"}, "code_tokens": ["capacity", "int", "(", ")", "{", "}", "return", "arrCapacity", ";"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 15, "ast_depth": 5, "n_identifiers": 2, "vocab_size": 9}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/cpp/chapter_array_and_linkedlist/my_list.cpp#39-44", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/cpp/chapter_array_and_linkedlist/my_list.cpp", "language": "Java"}, "method": {"name": "get", "qualified_name": "codes.cpp.chapter_array_and_linkedlist.my_list.cpp#get", "start_line": 39, "end_line": 44, "signature": "get(int index)", "original_code": "int get(int index) {\n        // \u7d22\u5f15\u5982\u679c\u8d8a\u754c\u5219\u629b\u51fa\u5f02\u5e38\uff0c\u4e0b\u540c\n        if (index < 0 || index >= size())\n            throw out_of_range(\"\u7d22\u5f15\u8d8a\u754c\");\n        return arr[index];\n    }", "doc_comment": "/* \u8bbf\u95ee\u5143\u7d20 */"}, "code_tokens": ["get", "int", "(", ")", "{", "// \u7d22\u5f15\u5982\u679c\u8d8a\u754c\u5219\u629b\u51fa\u5f02\u5e38\uff0c\u4e0b\u540c", "}", "index", "if", "return", ";", "int", "(", ")", "throw", ";", "arr", "[", "index", "]", "||", "out_of_range", "index", "<", "0", "index", ">=", "(", ")", "size", "\"", "\u7d22\u5f15\u8d8a\u754c", "\"", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 55, "ast_depth": 10, "n_identifiers": 5, "vocab_size": 23}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/cpp/chapter_array_and_linkedlist/my_list.cpp#47-51", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/cpp/chapter_array_and_linkedlist/my_list.cpp", "language": "Java"}, "method": {"name": "set", "qualified_name": "codes.cpp.chapter_array_and_linkedlist.my_list.cpp#set", "start_line": 47, "end_line": 51, "signature": "set(int index, int num)", "original_code": "void set(int index, int num) {\n        if (index < 0 || index >= size())\n            throw out_of_range(\"\u7d22\u5f15\u8d8a\u754c\");\n        arr[index] = num;\n    }", "doc_comment": "/* \u66f4\u65b0\u5143\u7d20 */"}, "code_tokens": ["void", "set", "(", ",", ")", "{", "}", "index", "num", "if", ";", "int", "int", "(", ")", "throw", ";", "=", "num", "||", "out_of_range", "arr", "[", "index", "]", "index", "<", "0", "index", ">=", "(", ")", "size", "\"", "\u7d22\u5f15\u8d8a\u754c", "\"", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 60, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 25}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/cpp/chapter_array_and_linkedlist/my_list.cpp#54-61", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/cpp/chapter_array_and_linkedlist/my_list.cpp", "language": "Java"}, "method": {"name": "add", "qualified_name": "codes.cpp.chapter_array_and_linkedlist.my_list.cpp#add", "start_line": 54, "end_line": 61, "signature": "add(int num)", "original_code": "void add(int num) {\n        // \u5143\u7d20\u6570\u91cf\u8d85\u51fa\u5bb9\u91cf\u65f6\uff0c\u89e6\u53d1\u6269\u5bb9\u673a\u5236\n        if (size() == capacity())\n            extendCapacity();\n        arr[size()] = num;\n        // \u66f4\u65b0\u5143\u7d20\u6570\u91cf\n        arrSize++;\n    }", "doc_comment": "/* \u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 */"}, "code_tokens": ["void", "add", "(", ")", "{", "// \u5143\u7d20\u6570\u91cf\u8d85\u51fa\u5bb9\u91cf\u65f6\uff0c\u89e6\u53d1\u6269\u5bb9\u673a\u5236", "// \u66f4\u65b0\u5143\u7d20\u6570\u91cf", "}", "num", "if", ";", ";", "int", "(", ")", ";", "=", "num", "arrSize", "++", "==", "extendCapacity", "arr", "[", "]", "size", "capacity", "(", ")", "size", "(", ")", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 59, "ast_depth": 9, "n_identifiers": 7, "vocab_size": 22}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/cpp/chapter_array_and_linkedlist/my_list.cpp#64-77", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/cpp/chapter_array_and_linkedlist/my_list.cpp", "language": "Java"}, "method": {"name": "insert", "qualified_name": "codes.cpp.chapter_array_and_linkedlist.my_list.cpp#insert", "start_line": 64, "end_line": 77, "signature": "insert(int index, int num)", "original_code": "void insert(int index, int num) {\n        if (index < 0 || index >= size())\n            throw out_of_range(\"\u7d22\u5f15\u8d8a\u754c\");\n        // \u5143\u7d20\u6570\u91cf\u8d85\u51fa\u5bb9\u91cf\u65f6\uff0c\u89e6\u53d1\u6269\u5bb9\u673a\u5236\n        if (size() == capacity())\n            extendCapacity();\n        // \u5c06\u7d22\u5f15 index \u4ee5\u53ca\u4e4b\u540e\u7684\u5143\u7d20\u90fd\u5411\u540e\u79fb\u52a8\u4e00\u4f4d\n        for (int j = size() - 1; j >= index; j--) {\n            arr[j + 1] = arr[j];\n        }\n        arr[index] = num;\n        // \u66f4\u65b0\u5143\u7d20\u6570\u91cf\n        arrSize++;\n    }", "doc_comment": "/* \u4e2d\u95f4\u63d2\u5165\u5143\u7d20 */"}, "code_tokens": ["void", "insert", "(", ",", ")", "{", "// \u5143\u7d20\u6570\u91cf\u8d85\u51fa\u5bb9\u91cf\u65f6\uff0c\u89e6\u53d1\u6269\u5bb9\u673a\u5236", "// \u5c06\u7d22\u5f15 index \u4ee5\u53ca\u4e4b\u540e\u7684\u5143\u7d20\u90fd\u5411\u540e\u79fb\u52a8\u4e00\u4f4d", "// \u66f4\u65b0\u5143\u7d20\u6570\u91cf", "}", "index", "num", "if", "if", "for", "(", ";", ")", ";", ";", "int", "int", "(", ")", "throw", ";", "(", ")", ";", ";", "j", ">=", "index", "j", "--", "{", "}", "=", "num", "arrSize", "++", "||", "out_of_range", "==", "extendCapacity", "int", "j", "=", ";", "arr", "[", "index", "]", "index", "<", "0", "index", ">=", "(", ")", "size", "capacity", "(", ")", "-", "1", "=", "size", "\"", "\u7d22\u5f15\u8d8a\u754c", "\"", "(", ")", "(", ")", "size", "arr", "[", "]", "arr", "[", "j", "]", "(", ")", "(", ")", "j", "+", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 139, "ast_depth": 10, "n_identifiers": 10, "vocab_size": 39}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/cpp/chapter_array_and_linkedlist/my_list.cpp#80-92", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/cpp/chapter_array_and_linkedlist/my_list.cpp", "language": "Java"}, "method": {"name": "remove", "qualified_name": "codes.cpp.chapter_array_and_linkedlist.my_list.cpp#remove", "start_line": 80, "end_line": 92, "signature": "remove(int index)", "original_code": "int remove(int index) {\n        if (index < 0 || index >= size())\n            throw out_of_range(\"\u7d22\u5f15\u8d8a\u754c\");\n        int num = arr[index];\n        // \u7d22\u5f15 i \u4e4b\u540e\u7684\u5143\u7d20\u90fd\u5411\u524d\u79fb\u52a8\u4e00\u4f4d\n        for (int j = index; j < size() - 1; j++) {\n            arr[j] = arr[j + 1];\n        }\n        // \u66f4\u65b0\u5143\u7d20\u6570\u91cf\n        arrSize--;\n        // \u8fd4\u56de\u88ab\u5220\u9664\u5143\u7d20\n        return num;\n    }", "doc_comment": "/* \u5220\u9664\u5143\u7d20 */"}, "code_tokens": ["remove", "int", "(", ")", "{", "// \u7d22\u5f15 i \u4e4b\u540e\u7684\u5143\u7d20\u90fd\u5411\u524d\u79fb\u52a8\u4e00\u4f4d", "// \u66f4\u65b0\u5143\u7d20\u6570\u91cf", "// \u8fd4\u56de\u88ab\u5220\u9664\u5143\u7d20", "}", "index", "if", ";", "for", "(", ";", ")", ";", "return", "num", ";", "int", "(", ")", "throw", ";", "int", "num", "=", ";", "j", "<", "j", "++", "{", "}", "arrSize", "--", "||", "out_of_range", "arr", "[", "index", "]", "int", "j", "=", "index", "-", "1", ";", "index", "<", "0", "index", ">=", "(", ")", "size", "=", "size", "\"", "\u7d22\u5f15\u8d8a\u754c", "\"", "(", ")", "arr", "[", "j", "]", "arr", "[", "]", "(", ")", "j", "+", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 117, "ast_depth": 10, "n_identifiers": 8, "vocab_size": 35}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/cpp/chapter_array_and_linkedlist/my_list.cpp#95-107", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/cpp/chapter_array_and_linkedlist/my_list.cpp", "language": "Java"}, "method": {"name": "extendCapacity", "qualified_name": "codes.cpp.chapter_array_and_linkedlist.my_list.cpp#extendCapacity", "start_line": 95, "end_line": 107, "signature": "extendCapacity()", "original_code": "void extendCapacity() {\n        // \u65b0\u5efa\u4e00\u4e2a\u957f\u5ea6\u4e3a\u539f\u6570\u7ec4 extendRatio \u500d\u7684\u65b0\u6570\u7ec4\n        int newCapacity = capacity() * extendRatio;\n        int *tmp = arr;\n        arr = new int[newCapacity];\n        // \u5c06\u539f\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u5143\u7d20\u590d\u5236\u5230\u65b0\u6570\u7ec4\n        for (int i = 0; i < size(); i++) {\n            arr[i] = tmp[i];\n        }\n        // \u91ca\u653e\u5185\u5b58\n        delete[] tmp;\n        arrCapacity = newCapacity;\n    }", "doc_comment": "/* \u5217\u8868\u6269\u5bb9 */"}, "code_tokens": ["void", "extendCapacity", "(", ")", "{", "// \u65b0\u5efa\u4e00\u4e2a\u957f\u5ea6\u4e3a\u539f\u6570\u7ec4 extendRatio \u500d\u7684\u65b0\u6570\u7ec4", "// \u5c06\u539f\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u5143\u7d20\u590d\u5236\u5230\u65b0\u6570\u7ec4", "// \u91ca\u653e\u5185\u5b58", "}", ";", ";", ";", "for", "(", ";", ")", ";", ";", "int", "newCapacity", "=", "int", "*", "tmp", "=", "arr", "arr", "=", ";", "i", "<", "i", "++", "{", "}", "delete", "tmp", "arrCapacity", "=", "newCapacity", "*", "extendRatio", "new", "int", "i", "=", "0", "size", ";", "[", "]", "capacity", "int", "[", "newCapacity", "]", "(", ")", "=", "(", ")", "arr", "[", "i", "]", "tmp", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 107, "ast_depth": 9, "n_identifiers": 9, "vocab_size": 29}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/cpp/chapter_array_and_linkedlist/my_list.cpp#110-117", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/cpp/chapter_array_and_linkedlist/my_list.cpp", "language": "Java"}, "method": {"name": "toVector", "qualified_name": "codes.cpp.chapter_array_and_linkedlist.my_list.cpp#toVector", "start_line": 110, "end_line": 117, "signature": "toVector()", "original_code": "vector<int> toVector() {\n        // \u4ec5\u8f6c\u6362\u6709\u6548\u957f\u5ea6\u8303\u56f4\u5185\u7684\u5217\u8868\u5143\u7d20\n        vector<int> vec(size());\n        for (int i = 0; i < size(); i++) {\n            vec[i] = arr[i];\n        }\n        return vec;\n    }", "doc_comment": "/* \u5c06\u5217\u8868\u8f6c\u6362\u4e3a Vector \u7528\u4e8e\u6253\u5370 */"}, "code_tokens": ["toVector", "vector", "(", ")", "{", "// \u4ec5\u8f6c\u6362\u6709\u6548\u957f\u5ea6\u8303\u56f4\u5185\u7684\u5217\u8868\u5143\u7d20", "}", "<", ">", "", ";", "for", "(", ";", ")", "return", "vec", ";", "int", "vector", "vec", "(", ")", ";", "i", "<", "i", "++", "{", "}", "<", ">", "size", "int", "i", "=", "0", "size", ";", "int", "(", ")", "(", ")", "=", "vec", "[", "i", "]", "arr", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 83, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 23}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/cpp/chapter_array_and_linkedlist/my_list.cpp#121-171", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/cpp/chapter_array_and_linkedlist/my_list.cpp", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.cpp.chapter_array_and_linkedlist.my_list.cpp#main", "start_line": 121, "end_line": 171, "signature": "main()", "original_code": "int main() {\n    /* \u521d\u59cb\u5316\u5217\u8868 */\n    MyList *nums = new MyList();\n    /* \u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 */\n    nums->add(1);\n    nums->add(3);\n    nums->add(2);\n    nums->add(5);\n    nums->add(4);\n    cout << \"\u5217\u8868 nums = \";\n    vector<int> vec = nums->toVector();\n    printVector(vec);\n    cout << \"\u5bb9\u91cf = \" << nums->capacity() << \" \uff0c\u957f\u5ea6 = \" << nums->size() << endl;\n\n    /* \u4e2d\u95f4\u63d2\u5165\u5143\u7d20 */\n    nums->insert(3, 6);\n    cout << \"\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = \";\n    vec = nums->toVector();\n    printVector(vec);\n\n    /* \u5220\u9664\u5143\u7d20 */\n    nums->remove(3);\n    cout << \"\u5220\u9664\u7d22\u5f15 3 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = \";\n    vec = nums->toVector();\n    printVector(vec);\n\n    /* \u8bbf\u95ee\u5143\u7d20 */\n    int num = nums->get(1);\n    cout << \"\u8bbf\u95ee\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 num = \" << num << endl;\n\n    /* \u66f4\u65b0\u5143\u7d20 */\n    nums->set(1, 0);\n    cout << \"\u5c06\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\u66f4\u65b0\u4e3a 0 \uff0c\u5f97\u5230 nums = \";\n    vec = nums->toVector();\n    printVector(vec);\n\n    /* \u6d4b\u8bd5\u6269\u5bb9\u673a\u5236 */\n    for (int i = 0; i < 10; i++) {\n        // \u5728 i = 5 \u65f6\uff0c\u5217\u8868\u957f\u5ea6\u5c06\u8d85\u51fa\u5217\u8868\u5bb9\u91cf\uff0c\u6b64\u65f6\u89e6\u53d1\u6269\u5bb9\u673a\u5236\n        nums->add(i);\n    }\n    cout << \"\u6269\u5bb9\u540e\u7684\u5217\u8868 nums = \";\n    vec = nums->toVector();\n    printVector(vec);\n    cout << \"\u5bb9\u91cf = \" << nums->capacity() << \" \uff0c\u957f\u5ea6 = \" << nums->size() << endl;\n\n    // \u91ca\u653e\u5185\u5b58\n    delete nums;\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "/* \u521d\u59cb\u5316\u5217\u8868 */", "/* \u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 */", "/* \u4e2d\u95f4\u63d2\u5165\u5143\u7d20 */", "/* \u5220\u9664\u5143\u7d20 */", "/* \u8bbf\u95ee\u5143\u7d20 */", "/* \u66f4\u65b0\u5143\u7d20 */", "/* \u6d4b\u8bd5\u6269\u5bb9\u673a\u5236 */", "// \u91ca\u653e\u5185\u5b58", "}", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "for", "(", ";", ")", ";", ";", ";", ";", "delete", ";", "return", "0", ";", "MyList", "*", "nums", "->", "nums", "->", "nums", "->", "nums", "->", "nums", "->", "cout", "<<", "vector", "vec", "=", "printVector", "<<", "nums", "->", "cout", "<<", "vec", "=", "printVector", "nums", "->", "cout", "<<", "vec", "=", "printVector", "int", "num", "=", "<<", "endl", "nums", "->", "cout", "<<", "vec", "=", "printVector", ";", "i", "<", "10", "i", "++", "{", "// \u5728 i = 5 \u65f6\uff0c\u5217\u8868\u957f\u5ea6\u5c06\u8d85\u51fa\u5217\u8868\u5bb9\u91cf\uff0c\u6b64\u65f6\u89e6\u53d1\u6269\u5bb9\u673a\u5236", "}", "cout", "<<", "vec", "=", "printVector", "<<", "nums", "nums", "=", "add", "add", "add", "add", "add", "\"", "\u5217\u8868 nums = ", "\"", "<", ">", "nums", "->", "(", "vec", ")", "cout", "<<", "nums", "->", "insert", "\"", "\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = ", "\"", "nums", "->", "(", "vec", ")", "remove", "\"", "\u5220\u9664\u7d22\u5f15 3 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = ", "\"", "nums", "->", "(", "vec", ")", "nums", "->", "<<", "num", "set", "\"", "\u5c06\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\u66f4\u65b0\u4e3a 0 \uff0c\u5f97\u5230 nums = ", "\"", "nums", "->", "(", "vec", ")", "int", "i", "=", "0", ";", "\"", "\u6269\u5bb9\u540e\u7684\u5217\u8868 nums = ", "\"", "nums", "->", "(", "vec", ")", "cout", "<<", "nums", "->", "new", "MyList", "(", "1", ")", "(", "3", ")", "(", "2", ")", "(", "5", ")", "(", "4", ")", "int", "toVector", "\"", "\u5bb9\u91cf = ", "\"", "<<", "(", "3", ",", "6", ")", "toVector", "(", "3", ")", "toVector", "get", "cout", "<<", "(", "1", ",", "0", ")", "toVector", "nums", "->", "toVector", "\"", "\u5bb9\u91cf = ", "\"", "<<", "(", ")", "(", ")", "<<", "nums", "->", "(", ")", "(", ")", "(", "1", ")", "\"", "\u8bbf\u95ee\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 num = ", "\"", "(", ")", "add", "(", ")", "<<", "nums", "->", "capacity", "\"", " \uff0c\u957f\u5ea6 = ", "\"", "<<", "endl", "(", "i", ")", "capacity", "\"", " \uff0c\u957f\u5ea6 = ", "\"", "<<", "endl", "(", ")", "size", "(", ")", "size", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 433, "ast_depth": 12, "n_identifiers": 17, "vocab_size": 62}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/csharp/chapter_array_and_linkedlist/list.cs#11-66", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/csharp/chapter_array_and_linkedlist/list.cs", "language": "Java"}, "method": {"name": "Test", "qualified_name": "codes.csharp.chapter_array_and_linkedlist.list.cs#Test", "start_line": 11, "end_line": 66, "signature": "Test()", "original_code": "public void Test() {\n\n        /* \u521d\u59cb\u5316\u5217\u8868 */\n        int[] numbers = new int[] { 1, 3, 2, 5, 4 };\n        List<int> nums = numbers.ToList();\n        Console.WriteLine(\"\u5217\u8868 nums = \" + string.Join(\",\", nums));\n\n        /* \u8bbf\u95ee\u5143\u7d20 */\n        int num = nums[1];\n        Console.WriteLine(\"\u8bbf\u95ee\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 num = \" + num);\n\n        /* \u66f4\u65b0\u5143\u7d20 */\n        nums[1] = 0;\n        Console.WriteLine(\"\u5c06\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\u66f4\u65b0\u4e3a 0 \uff0c\u5f97\u5230 nums = \" + string.Join(\",\", nums));\n\n        /* \u6e05\u7a7a\u5217\u8868 */\n        nums.Clear();\n        Console.WriteLine(\"\u6e05\u7a7a\u5217\u8868\u540e nums = \" + string.Join(\",\", nums));\n\n        /* \u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 */\n        nums.Add(1);\n        nums.Add(3);\n        nums.Add(2);\n        nums.Add(5);\n        nums.Add(4);\n        Console.WriteLine(\"\u6dfb\u52a0\u5143\u7d20\u540e nums = \" + string.Join(\",\", nums));\n\n        /* \u4e2d\u95f4\u63d2\u5165\u5143\u7d20 */\n        nums.Insert(3, 6);\n        Console.WriteLine(\"\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = \" + string.Join(\",\", nums));\n\n        /* \u5220\u9664\u5143\u7d20 */\n        nums.RemoveAt(3);\n        Console.WriteLine(\"\u5220\u9664\u7d22\u5f15 3 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = \" + string.Join(\",\", nums));\n\n        /* \u901a\u8fc7\u7d22\u5f15\u904d\u5386\u5217\u8868 */\n        int count = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            count++;\n        }\n\n        /* \u76f4\u63a5\u904d\u5386\u5217\u8868\u5143\u7d20 */\n        count = 0;\n        foreach (int n in nums) {\n            count++;\n        }\n\n        /* \u62fc\u63a5\u4e24\u4e2a\u5217\u8868 */\n        List<int> nums1 = new() { 6, 8, 7, 10, 9 };\n        nums.AddRange(nums1);\n        Console.WriteLine(\"\u5c06\u5217\u8868 nums1 \u62fc\u63a5\u5230 nums \u4e4b\u540e\uff0c\u5f97\u5230 nums = \" + string.Join(\",\", nums));\n\n        /* \u6392\u5e8f\u5217\u8868 */\n        nums.Sort(); // \u6392\u5e8f\u540e\uff0c\u5217\u8868\u5143\u7d20\u4ece\u5c0f\u5230\u5927\u6392\u5217\n        Console.WriteLine(\"\u6392\u5e8f\u5217\u8868\u540e nums = \" + string.Join(\",\", nums));\n    }", "doc_comment": ""}, "code_tokens": ["void", "Test", "public", "(", ")", "{", "/* \u521d\u59cb\u5316\u5217\u8868 */", "/* \u8bbf\u95ee\u5143\u7d20 */", "/* \u66f4\u65b0\u5143\u7d20 */", "/* \u6e05\u7a7a\u5217\u8868 */", "/* \u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 */", "/* \u4e2d\u95f4\u63d2\u5165\u5143\u7d20 */", "/* \u5220\u9664\u5143\u7d20 */", "/* \u901a\u8fc7\u7d22\u5f15\u904d\u5386\u5217\u8868 */", "/* \u76f4\u63a5\u904d\u5386\u5217\u8868\u5143\u7d20 */", "/* \u62fc\u63a5\u4e24\u4e2a\u5217\u8868 */", "/* \u6392\u5e8f\u5217\u8868 */", "// \u6392\u5e8f\u540e\uff0c\u5217\u8868\u5143\u7d20\u4ece\u5c0f\u5230\u5927\u6392\u5217", "}", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "for", "(", ";", ")", ";", "", "{", "}", ";", ";", ";", ";", ";", "numbers", "=", "List", "nums", "=", "Console", ".", "WriteLine", "int", "num", "=", "Console", ".", "WriteLine", "=", "0", "Console", ".", "WriteLine", "nums", ".", "Clear", "Console", ".", "WriteLine", "nums", ".", "Add", "nums", ".", "Add", "nums", ".", "Add", "nums", ".", "Add", "nums", ".", "Add", "Console", ".", "WriteLine", "nums", ".", "Insert", "Console", ".", "WriteLine", "nums", ".", "RemoveAt", "Console", ".", "WriteLine", "int", "count", "=", "0", ";", "i", "<", "i", "++", "{", "}", "count", "=", "0", "foreach", ";", "List", "nums1", "=", "nums", ".", "AddRange", "Console", ".", "WriteLine", "nums", ".", "Sort", "Console", ".", "WriteLine", "int", "[", "]", "new", "<", ">", "numbers", ".", "ToList", "(", ")", "nums", "[", "1", "]", "(", ")", "nums", "[", "1", "]", "(", ")", "(", ")", "(", ")", "(", "1", ")", "(", "3", ")", "(", "2", ")", "(", "5", ")", "(", "4", ")", "(", ")", "(", "3", ",", "6", ")", "(", ")", "(", "3", ")", "(", ")", "int", "i", "=", "0", "nums", ".", "Count", ";", "(", "nums", ")", "count", "++", "<", ">", "new", "(", "nums1", ")", "(", ")", "(", ")", "(", ")", "int", "[", "]", "{", "1", ",", "3", ",", "2", ",", "5", ",", "4", "}", "int", "(", ")", "+", "+", "num", "+", "+", "+", "+", "+", "count", "++", "n", "in", "int", "", "(", ")", "{", "}", "+", "+", "\"", "\u5217\u8868 nums = ", "\"", "string", ".", "Join", "\"", "\u8bbf\u95ee\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 num = ", "\"", "\"", "\u5c06\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\u66f4\u65b0\u4e3a 0 \uff0c\u5f97\u5230 nums = ", "\"", "string", ".", "Join", "\"", "\u6e05\u7a7a\u5217\u8868\u540e nums = ", "\"", "string", ".", "Join", "\"", "\u6dfb\u52a0\u5143\u7d20\u540e nums = ", "\"", "string", ".", "Join", "\"", "\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = ", "\"", "string", ".", "Join", "\"", "\u5220\u9664\u7d22\u5f15 3 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = ", "\"", "string", ".", "Join", "int", "6", ",", "8", ",", "7", ",", "10", ",", "9", "\"", "\u5c06\u5217\u8868 nums1 \u62fc\u63a5\u5230 nums \u4e4b\u540e\uff0c\u5f97\u5230 nums = ", "\"", "string", ".", "Join", "\"", "\u6392\u5e8f\u5217\u8868\u540e nums = ", "\"", "string", ".", "Join", "(", ",", "nums", ")", "(", ",", "nums", ")", "(", ",", "nums", ")", "(", ",", "nums", ")", "(", ",", "nums", ")", "(", ",", "nums", ")", "(", ",", "nums", ")", "(", ",", "nums", ")", "\"", ",", "\"", "\"", ",", "\"", "\"", ",", "\"", "\"", ",", "\"", "\"", ",", "\"", "\"", ",", "\"", "\"", ",", "\"", "\"", ",", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 533, "ast_depth": 11, "n_identifiers": 22, "vocab_size": 76}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/csharp/chapter_array_and_linkedlist/my_list.cs#22-24", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/csharp/chapter_array_and_linkedlist/my_list.cs", "language": "Java"}, "method": {"name": "Size", "qualified_name": "codes.csharp.chapter_array_and_linkedlist.my_list.cs#Size", "start_line": 22, "end_line": 24, "signature": "Size()", "original_code": "public int Size() {\n        return arrSize;\n    }", "doc_comment": "/* \u83b7\u53d6\u5217\u8868\u957f\u5ea6\uff08\u5373\u5f53\u524d\u5143\u7d20\u6570\u91cf\uff09*/"}, "code_tokens": ["Size", "public", "int", "(", ")", "{", "}", "return", "arrSize", ";"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 17, "ast_depth": 5, "n_identifiers": 2, "vocab_size": 10}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/csharp/chapter_array_and_linkedlist/my_list.cs#27-29", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/csharp/chapter_array_and_linkedlist/my_list.cs", "language": "Java"}, "method": {"name": "Capacity", "qualified_name": "codes.csharp.chapter_array_and_linkedlist.my_list.cs#Capacity", "start_line": 27, "end_line": 29, "signature": "Capacity()", "original_code": "public int Capacity() {\n        return arrCapacity;\n    }", "doc_comment": "/* \u83b7\u53d6\u5217\u8868\u5bb9\u91cf */"}, "code_tokens": ["Capacity", "public", "int", "(", ")", "{", "}", "return", "arrCapacity", ";"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 17, "ast_depth": 5, "n_identifiers": 2, "vocab_size": 10}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/csharp/chapter_array_and_linkedlist/my_list.cs#32-37", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/csharp/chapter_array_and_linkedlist/my_list.cs", "language": "Java"}, "method": {"name": "Get", "qualified_name": "codes.csharp.chapter_array_and_linkedlist.my_list.cs#Get", "start_line": 32, "end_line": 37, "signature": "Get(int index)", "original_code": "public int Get(int index) {\n        // \u7d22\u5f15\u5982\u679c\u8d8a\u754c\u5219\u629b\u51fa\u5f02\u5e38\uff0c\u4e0b\u540c\n        if (index < 0 || index >= arrSize)\n            throw new IndexOutOfRangeException(\"\u7d22\u5f15\u8d8a\u754c\");\n        return arr[index];\n    }", "doc_comment": "/* \u8bbf\u95ee\u5143\u7d20 */"}, "code_tokens": ["Get", "public", "int", "(", ")", "{", "// \u7d22\u5f15\u5982\u679c\u8d8a\u754c\u5219\u629b\u51fa\u5f02\u5e38\uff0c\u4e0b\u540c", "}", "index", "if", "return", ";", "int", "(", ")", "throw", ";", "arr", "[", "index", "]", "||", "new", "IndexOutOfRangeException", "index", "<", "0", "index", ">=", "arrSize", "(", ")", "\"", "\u7d22\u5f15\u8d8a\u754c", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 54, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 25}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/csharp/chapter_array_and_linkedlist/my_list.cs#40-44", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/csharp/chapter_array_and_linkedlist/my_list.cs", "language": "Java"}, "method": {"name": "Set", "qualified_name": "codes.csharp.chapter_array_and_linkedlist.my_list.cs#Set", "start_line": 40, "end_line": 44, "signature": "Set(int index, int num)", "original_code": "public void Set(int index, int num) {\n        if (index < 0 || index >= arrSize)\n            throw new IndexOutOfRangeException(\"\u7d22\u5f15\u8d8a\u754c\");\n        arr[index] = num;\n    }", "doc_comment": "/* \u66f4\u65b0\u5143\u7d20 */"}, "code_tokens": ["void", "Set", "public", "(", ",", ")", "{", "}", "index", "num", "if", ";", "int", "int", "(", ")", "throw", ";", "=", "num", "||", "new", "IndexOutOfRangeException", "arr", "[", "index", "]", "index", "<", "0", "index", ">=", "arrSize", "(", ")", "\"", "\u7d22\u5f15\u8d8a\u754c", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 59, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 27}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/csharp/chapter_array_and_linkedlist/my_list.cs#47-54", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/csharp/chapter_array_and_linkedlist/my_list.cs", "language": "Java"}, "method": {"name": "Add", "qualified_name": "codes.csharp.chapter_array_and_linkedlist.my_list.cs#Add", "start_line": 47, "end_line": 54, "signature": "Add(int num)", "original_code": "public void Add(int num) {\n        // \u5143\u7d20\u6570\u91cf\u8d85\u51fa\u5bb9\u91cf\u65f6\uff0c\u89e6\u53d1\u6269\u5bb9\u673a\u5236\n        if (arrSize == arrCapacity)\n            ExtendCapacity();\n        arr[arrSize] = num;\n        // \u66f4\u65b0\u5143\u7d20\u6570\u91cf\n        arrSize++;\n    }", "doc_comment": "/* \u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 */"}, "code_tokens": ["void", "Add", "public", "(", ")", "{", "// \u5143\u7d20\u6570\u91cf\u8d85\u51fa\u5bb9\u91cf\u65f6\uff0c\u89e6\u53d1\u6269\u5bb9\u673a\u5236", "// \u66f4\u65b0\u5143\u7d20\u6570\u91cf", "}", "num", "if", ";", ";", "int", "(", ")", ";", "=", "num", "arrSize", "++", "arrSize", "==", "arrCapacity", "ExtendCapacity", "arr", "[", "arrSize", "]", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 49, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 22}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/csharp/chapter_array_and_linkedlist/my_list.cs#57-70", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/csharp/chapter_array_and_linkedlist/my_list.cs", "language": "Java"}, "method": {"name": "Insert", "qualified_name": "codes.csharp.chapter_array_and_linkedlist.my_list.cs#Insert", "start_line": 57, "end_line": 70, "signature": "Insert(int index, int num)", "original_code": "public void Insert(int index, int num) {\n        if (index < 0 || index >= arrSize)\n            throw new IndexOutOfRangeException(\"\u7d22\u5f15\u8d8a\u754c\");\n        // \u5143\u7d20\u6570\u91cf\u8d85\u51fa\u5bb9\u91cf\u65f6\uff0c\u89e6\u53d1\u6269\u5bb9\u673a\u5236\n        if (arrSize == arrCapacity)\n            ExtendCapacity();\n        // \u5c06\u7d22\u5f15 index \u4ee5\u53ca\u4e4b\u540e\u7684\u5143\u7d20\u90fd\u5411\u540e\u79fb\u52a8\u4e00\u4f4d\n        for (int j = arrSize - 1; j >= index; j--) {\n            arr[j + 1] = arr[j];\n        }\n        arr[index] = num;\n        // \u66f4\u65b0\u5143\u7d20\u6570\u91cf\n        arrSize++;\n    }", "doc_comment": "/* \u4e2d\u95f4\u63d2\u5165\u5143\u7d20 */"}, "code_tokens": ["void", "Insert", "public", "(", ",", ")", "{", "// \u5143\u7d20\u6570\u91cf\u8d85\u51fa\u5bb9\u91cf\u65f6\uff0c\u89e6\u53d1\u6269\u5bb9\u673a\u5236", "// \u5c06\u7d22\u5f15 index \u4ee5\u53ca\u4e4b\u540e\u7684\u5143\u7d20\u90fd\u5411\u540e\u79fb\u52a8\u4e00\u4f4d", "// \u66f4\u65b0\u5143\u7d20\u6570\u91cf", "}", "index", "num", "if", "if", "for", "(", ";", ")", ";", ";", "int", "int", "(", ")", "throw", ";", "(", ")", ";", ";", "j", ">=", "index", "j", "--", "{", "}", "=", "num", "arrSize", "++", "||", "new", "IndexOutOfRangeException", "arrSize", "==", "arrCapacity", "ExtendCapacity", "int", "j", "=", ";", "arr", "[", "index", "]", "index", "<", "0", "index", ">=", "arrSize", "(", ")", "(", ")", "arrSize", "-", "1", "=", "\"", "\u7d22\u5f15\u8d8a\u754c", "\"", "arr", "[", "]", "arr", "[", "j", "]", "j", "+", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 126, "ast_depth": 10, "n_identifiers": 8, "vocab_size": 40}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/csharp/chapter_array_and_linkedlist/my_list.cs#73-85", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/csharp/chapter_array_and_linkedlist/my_list.cs", "language": "Java"}, "method": {"name": "Remove", "qualified_name": "codes.csharp.chapter_array_and_linkedlist.my_list.cs#Remove", "start_line": 73, "end_line": 85, "signature": "Remove(int index)", "original_code": "public int Remove(int index) {\n        if (index < 0 || index >= arrSize)\n            throw new IndexOutOfRangeException(\"\u7d22\u5f15\u8d8a\u754c\");\n        int num = arr[index];\n        // \u5c06\u7d22\u5f15 index \u4e4b\u540e\u7684\u5143\u7d20\u90fd\u5411\u524d\u79fb\u52a8\u4e00\u4f4d\n        for (int j = index; j < arrSize - 1; j++) {\n            arr[j] = arr[j + 1];\n        }\n        // \u66f4\u65b0\u5143\u7d20\u6570\u91cf\n        arrSize--;\n        // \u8fd4\u56de\u88ab\u5220\u9664\u5143\u7d20\n        return num;\n    }", "doc_comment": "/* \u5220\u9664\u5143\u7d20 */"}, "code_tokens": ["Remove", "public", "int", "(", ")", "{", "// \u5c06\u7d22\u5f15 index \u4e4b\u540e\u7684\u5143\u7d20\u90fd\u5411\u524d\u79fb\u52a8\u4e00\u4f4d", "// \u66f4\u65b0\u5143\u7d20\u6570\u91cf", "// \u8fd4\u56de\u88ab\u5220\u9664\u5143\u7d20", "}", "index", "if", ";", "for", "(", ";", ")", ";", "return", "num", ";", "int", "(", ")", "throw", ";", "int", "num", "=", ";", "j", "<", "j", "++", "{", "}", "arrSize", "--", "||", "new", "IndexOutOfRangeException", "arr", "[", "index", "]", "int", "j", "=", "index", "arrSize", "-", "1", ";", "index", "<", "0", "index", ">=", "arrSize", "(", ")", "=", "\"", "\u7d22\u5f15\u8d8a\u754c", "\"", "arr", "[", "j", "]", "arr", "[", "]", "j", "+", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 112, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 36}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/csharp/chapter_array_and_linkedlist/my_list.cs#88-93", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/csharp/chapter_array_and_linkedlist/my_list.cs", "language": "Java"}, "method": {"name": "ExtendCapacity", "qualified_name": "codes.csharp.chapter_array_and_linkedlist.my_list.cs#ExtendCapacity", "start_line": 88, "end_line": 93, "signature": "ExtendCapacity()", "original_code": "public void ExtendCapacity() {\n        // \u65b0\u5efa\u4e00\u4e2a\u957f\u5ea6\u4e3a arrCapacity * extendRatio \u7684\u6570\u7ec4\uff0c\u5e76\u5c06\u539f\u6570\u7ec4\u62f7\u8d1d\u5230\u65b0\u6570\u7ec4\n        Array.Resize(ref arr, arrCapacity * extendRatio);\n        // \u66f4\u65b0\u5217\u8868\u5bb9\u91cf\n        arrCapacity = arr.Length;\n    }", "doc_comment": "/* \u5217\u8868\u6269\u5bb9 */"}, "code_tokens": ["void", "ExtendCapacity", "public", "(", ")", "{", "// \u65b0\u5efa\u4e00\u4e2a\u957f\u5ea6\u4e3a arrCapacity * extendRatio \u7684\u6570\u7ec4\uff0c\u5e76\u5c06\u539f\u6570\u7ec4\u62f7\u8d1d\u5230\u65b0\u6570\u7ec4", "// \u66f4\u65b0\u5217\u8868\u5bb9\u91cf", "}", ";", ";", "Array", ".", "Resize", "arrCapacity", "=", "(", "arr", ",", ")", "arr", ".", "Length", "ref", "arrCapacity", "*", "extendRatio"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 40, "ast_depth": 8, "n_identifiers": 7, "vocab_size": 21}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/csharp/chapter_array_and_linkedlist/my_list.cs#96-103", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/csharp/chapter_array_and_linkedlist/my_list.cs", "language": "Java"}, "method": {"name": "ToArray", "qualified_name": "codes.csharp.chapter_array_and_linkedlist.my_list.cs#ToArray", "start_line": 96, "end_line": 103, "signature": "ToArray()", "original_code": "public int[] ToArray() {\n        // \u4ec5\u8f6c\u6362\u6709\u6548\u957f\u5ea6\u8303\u56f4\u5185\u7684\u5217\u8868\u5143\u7d20\n        int[] arr = new int[arrSize];\n        for (int i = 0; i < arrSize; i++) {\n            arr[i] = Get(i);\n        }\n        return arr;\n    }", "doc_comment": "/* \u5c06\u5217\u8868\u8f6c\u6362\u4e3a\u6570\u7ec4 */"}, "code_tokens": ["ToArray", "public", "(", ")", "{", "// \u4ec5\u8f6c\u6362\u6709\u6548\u957f\u5ea6\u8303\u56f4\u5185\u7684\u5217\u8868\u5143\u7d20", "}", "int", "[", "]", ";", "for", "(", ";", ")", "return", "arr", ";", "arr", "=", ";", "i", "<", "arrSize", "i", "++", "{", "}", "int", "[", "]", "new", "int", "i", "=", "0", ";", "int", "[", "arrSize", "]", "=", "arr", "[", "i", "]", "Get", "(", "i", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 79, "ast_depth": 10, "n_identifiers": 5, "vocab_size": 22}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/csharp/chapter_array_and_linkedlist/my_list.cs#108-143", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/csharp/chapter_array_and_linkedlist/my_list.cs", "language": "Java"}, "method": {"name": "Test", "qualified_name": "codes.csharp.chapter_array_and_linkedlist.my_list.cs#Test", "start_line": 108, "end_line": 143, "signature": "Test()", "original_code": "public void Test() {\n        /* \u521d\u59cb\u5316\u5217\u8868 */\n        MyList nums = new();\n        /* \u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 */\n        nums.Add(1);\n        nums.Add(3);\n        nums.Add(2);\n        nums.Add(5);\n        nums.Add(4);\n        Console.WriteLine(\"\u5217\u8868 nums = \" + string.Join(\",\", nums.ToArray()) +\n                           \" \uff0c\u5bb9\u91cf = \" + nums.Capacity() + \" \uff0c\u957f\u5ea6 = \" + nums.Size());\n\n        /* \u4e2d\u95f4\u63d2\u5165\u5143\u7d20 */\n        nums.Insert(3, 6);\n        Console.WriteLine(\"\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = \" + string.Join(\",\", nums.ToArray()));\n\n        /* \u5220\u9664\u5143\u7d20 */\n        nums.Remove(3);\n        Console.WriteLine(\"\u5220\u9664\u7d22\u5f15 3 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = \" + string.Join(\",\", nums.ToArray()));\n\n        /* \u8bbf\u95ee\u5143\u7d20 */\n        int num = nums.Get(1);\n        Console.WriteLine(\"\u8bbf\u95ee\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 num = \" + num);\n\n        /* \u66f4\u65b0\u5143\u7d20 */\n        nums.Set(1, 0);\n        Console.WriteLine(\"\u5c06\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\u66f4\u65b0\u4e3a 0 \uff0c\u5f97\u5230 nums = \" + string.Join(\",\", nums.ToArray()));\n\n        /* \u6d4b\u8bd5\u6269\u5bb9\u673a\u5236 */\n        for (int i = 0; i < 10; i++) {\n            // \u5728 i = 5 \u65f6\uff0c\u5217\u8868\u957f\u5ea6\u5c06\u8d85\u51fa\u5217\u8868\u5bb9\u91cf\uff0c\u6b64\u65f6\u89e6\u53d1\u6269\u5bb9\u673a\u5236\n            nums.Add(i);\n        }\n        Console.WriteLine(\"\u6269\u5bb9\u540e\u7684\u5217\u8868 nums = \" + string.Join(\",\", nums.ToArray()) +\n                           \" \uff0c\u5bb9\u91cf = \" + nums.Capacity() + \" \uff0c\u957f\u5ea6 = \" + nums.Size());\n    }", "doc_comment": ""}, "code_tokens": ["void", "Test", "public", "(", ")", "{", "/* \u521d\u59cb\u5316\u5217\u8868 */", "/* \u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 */", "/* \u4e2d\u95f4\u63d2\u5165\u5143\u7d20 */", "/* \u5220\u9664\u5143\u7d20 */", "/* \u8bbf\u95ee\u5143\u7d20 */", "/* \u66f4\u65b0\u5143\u7d20 */", "/* \u6d4b\u8bd5\u6269\u5bb9\u673a\u5236 */", "}", "MyList", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "for", "(", ";", ")", ";", "nums", "=", "nums", ".", "Add", "nums", ".", "Add", "nums", ".", "Add", "nums", ".", "Add", "nums", ".", "Add", "Console", ".", "WriteLine", "nums", ".", "Insert", "Console", ".", "WriteLine", "nums", ".", "Remove", "Console", ".", "WriteLine", "int", "num", "=", "Console", ".", "WriteLine", "nums", ".", "Set", "Console", ".", "WriteLine", ";", "i", "<", "10", "i", "++", "{", "// \u5728 i = 5 \u65f6\uff0c\u5217\u8868\u957f\u5ea6\u5c06\u8d85\u51fa\u5217\u8868\u5bb9\u91cf\uff0c\u6b64\u65f6\u89e6\u53d1\u6269\u5bb9\u673a\u5236", "}", "Console", ".", "WriteLine", "new", "(", "1", ")", "(", "3", ")", "(", "2", ")", "(", "5", ")", "(", "4", ")", "(", ")", "(", "3", ",", "6", ")", "(", ")", "(", "3", ")", "(", ")", "nums", ".", "Get", "(", ")", "(", "1", ",", "0", ")", "(", ")", "int", "i", "=", "0", ";", "(", ")", "", "(", ")", "+", "+", "+", "(", "1", ")", "+", "num", "+", "nums", ".", "Add", "+", "+", "nums", ".", "Size", "\"", "\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = ", "\"", "string", ".", "Join", "\"", "\u5220\u9664\u7d22\u5f15 3 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = ", "\"", "string", ".", "Join", "\"", "\u8bbf\u95ee\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 num = ", "\"", "\"", "\u5c06\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\u66f4\u65b0\u4e3a 0 \uff0c\u5f97\u5230 nums = ", "\"", "string", ".", "Join", "(", "i", ")", "+", "nums", ".", "Size", "+", "\"", " \uff0c\u957f\u5ea6 = ", "\"", "(", ")", "(", ",", ")", "(", ",", ")", "(", ",", ")", "+", "\"", " \uff0c\u957f\u5ea6 = ", "\"", "(", ")", "+", "nums", ".", "Capacity", "\"", ",", "\"", "nums", ".", "ToArray", "\"", ",", "\"", "nums", ".", "ToArray", "\"", ",", "\"", "nums", ".", "ToArray", "+", "nums", ".", "Capacity", "+", "\"", " \uff0c\u5bb9\u91cf = ", "\"", "(", ")", "(", ")", "(", ")", "(", ")", "+", "\"", " \uff0c\u5bb9\u91cf = ", "\"", "(", ")", "\"", "\u5217\u8868 nums = ", "\"", "string", ".", "Join", "\"", "\u6269\u5bb9\u540e\u7684\u5217\u8868 nums = ", "\"", "string", ".", "Join", "(", ",", ")", "(", ",", ")", "\"", ",", "\"", "nums", ".", "ToArray", "\"", ",", "\"", "nums", ".", "ToArray", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 411, "ast_depth": 16, "n_identifiers": 16, "vocab_size": 59}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/dart/chapter_array_and_linkedlist/list.dart#8-60", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/dart/chapter_array_and_linkedlist/list.dart", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.dart.chapter_array_and_linkedlist.list.dart#main", "start_line": 8, "end_line": 60, "signature": "main()", "original_code": "void main() {\n  /* \u521d\u59cb\u5316\u5217\u8868 */\n  List<int> nums = [1, 3, 2, 5, 4];\n  print('\u5217\u8868 nums = $nums');\n\n  /* \u8bbf\u95ee\u5143\u7d20 */\n  int num = nums[1];\n  print('\u8bbf\u95ee\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 num = $num');\n\n  /* \u66f4\u65b0\u5143\u7d20 */\n  nums[1] = 0;\n  print('\u5c06\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\u66f4\u65b0\u4e3a 0 \uff0c\u5f97\u5230 nums = $nums');\n\n  /* \u6e05\u7a7a\u5217\u8868 */\n  nums.clear();\n  print('\u6e05\u7a7a\u5217\u8868\u540e nums = $nums');\n\n  /* \u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 */\n  nums.add(1);\n  nums.add(3);\n  nums.add(2);\n  nums.add(5);\n  nums.add(4);\n  print('\u6dfb\u52a0\u5143\u7d20\u540e nums = $nums');\n\n  /* \u4e2d\u95f4\u63d2\u5165\u5143\u7d20 */\n  nums.insert(3, 6);\n  print('\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = $nums');\n\n  /* \u5220\u9664\u5143\u7d20 */\n  nums.removeAt(3);\n  print('\u5220\u9664\u7d22\u5f15 3 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = $nums');\n\n  /* \u901a\u8fc7\u7d22\u5f15\u904d\u5386\u5217\u8868 */\n  int count = 0;\n  for (var i = 0; i < nums.length; i++) {\n    count++;\n  }\n  /* \u76f4\u63a5\u904d\u5386\u5217\u8868\u5143\u7d20 */\n  count = 0;\n  for (var n in nums) {\n    count++;\n  }\n\n  /* \u62fc\u63a5\u4e24\u4e2a\u5217\u8868 */\n  List<int> nums1 = [6, 8, 7, 10, 9];\n  nums.addAll(nums1);\n  print('\u5c06\u5217\u8868 nums1 \u62fc\u63a5\u5230 nums \u4e4b\u540e\uff0c\u5f97\u5230 nums = $nums');\n\n  /* \u6392\u5e8f\u5217\u8868 */\n  nums.sort();\n  print('\u6392\u5e8f\u5217\u8868\u540e nums = $nums');\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["void", "main", "(", ")", "{", "/* \u521d\u59cb\u5316\u5217\u8868 */", "/* \u8bbf\u95ee\u5143\u7d20 */", "/* \u66f4\u65b0\u5143\u7d20 */", "/* \u6e05\u7a7a\u5217\u8868 */", "/* \u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 */", "/* \u4e2d\u95f4\u63d2\u5165\u5143\u7d20 */", "/* \u5220\u9664\u5143\u7d20 */", "/* \u901a\u8fc7\u7d22\u5f15\u904d\u5386\u5217\u8868 */", "/* \u76f4\u63a5\u904d\u5386\u5217\u8868\u5143\u7d20 */", "}", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "for", "(", ";", ")", ";", "for", "(", "/* \u62fc\u63a5\u4e24\u4e2a\u5217\u8868 */", "9", ";", ";", "List", "nums", "=", "1", ",", "3", ",", "2", ",", "5", ",", "4", "]", "print", "int", "num", "=", "print", "=", "0", "print", "nums", ".", "clear", "print", "nums", ".", "add", "nums", ".", "add", "nums", ".", "add", "nums", ".", "add", "nums", ".", "add", "print", "nums", ".", "insert", "print", "nums", ".", "removeAt", "print", "int", "count", "=", "0", "var", ";", "i", "<", "i", "++", "{", "}", "count", "=", "0", "var", ";", "}", ",", "8", ",", "7", ",", "10", ",", "]", ";", ";", ";", "/* \u6392\u5e8f\u5217\u8868 */", "print", "<", ">", "[", "(", "'\u5217\u8868 nums = $nums'", ")", "nums", "[", "1", "]", "(", "'\u8bbf\u95ee\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 num = $num'", ")", "nums", "[", "1", "]", "(", "'\u5c06\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\u66f4\u65b0\u4e3a 0 \uff0c\u5f97\u5230 nums = $nums'", ")", "(", ")", "(", "'\u6e05\u7a7a\u5217\u8868\u540e nums = $nums'", ")", "(", "1", ")", "(", "3", ")", "(", "2", ")", "(", "5", ")", "(", "4", ")", "(", "'\u6dfb\u52a0\u5143\u7d20\u540e nums = $nums'", ")", "(", "3", ",", "6", ")", "(", "'\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = $nums'", ")", "(", "3", ")", "(", "'\u5220\u9664\u7d22\u5f15 3 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = $nums'", ")", "i", "=", "0", "nums", ".", "length", ";", "n", "in", "nums", ")", "{", "count", "++", "List", "nums1", "=", "6", "nums", ".", "addAll", "print", "nums", ".", "sort", "(", "'\u6392\u5e8f\u5217\u8868\u540e nums = $nums'", ")", "int", "count", "++", "<", ">", "[", "(", "nums1", ")", "(", "'\u5c06\u5217\u8868 nums1 \u62fc\u63a5\u5230 nums \u4e4b\u540e\uff0c\u5f97\u5230 nums = $nums'", ")", "(", ")", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 323, "ast_depth": 9, "n_identifiers": 16, "vocab_size": 65}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/dart/chapter_array_and_linkedlist/my_list.dart#20-20", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/dart/chapter_array_and_linkedlist/my_list.dart", "language": "Java"}, "method": {"name": "size", "qualified_name": "codes.dart.chapter_array_and_linkedlist.my_list.dart#size", "start_line": 20, "end_line": 20, "signature": "size()", "original_code": "int size() => _size;", "doc_comment": "/* \u83b7\u53d6\u5217\u8868\u957f\u5ea6\uff08\u5373\u5f53\u524d\u5143\u7d20\u6570\u91cf\uff09*/"}, "code_tokens": ["size", ";", "int", "(", ")", "=", ">", "_size"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 13, "ast_depth": 4, "n_identifiers": 2, "vocab_size": 8}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/dart/chapter_array_and_linkedlist/my_list.dart#23-23", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/dart/chapter_array_and_linkedlist/my_list.dart", "language": "Java"}, "method": {"name": "capacity", "qualified_name": "codes.dart.chapter_array_and_linkedlist.my_list.dart#capacity", "start_line": 23, "end_line": 23, "signature": "capacity()", "original_code": "int capacity() => _capacity;", "doc_comment": "/* \u83b7\u53d6\u5217\u8868\u5bb9\u91cf */"}, "code_tokens": ["capacity", ";", "int", "(", ")", "=", ">", "_capacity"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 13, "ast_depth": 4, "n_identifiers": 2, "vocab_size": 8}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/dart/chapter_array_and_linkedlist/my_list.dart#26-29", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/dart/chapter_array_and_linkedlist/my_list.dart", "language": "Java"}, "method": {"name": "get", "qualified_name": "codes.dart.chapter_array_and_linkedlist.my_list.dart#get", "start_line": 26, "end_line": 29, "signature": "get(int index)", "original_code": "int get(int index) {\n    if (index >= _size) throw RangeError('\u7d22\u5f15\u8d8a\u754c');\n    return _arr[index];\n  }", "doc_comment": "/* \u8bbf\u95ee\u5143\u7d20 */"}, "code_tokens": ["get", "int", "(", ")", "{", "}", "index", "if", "return", ";", "int", "(", ")", "throw", ";", "_arr", "[", "index", "]", "index", ">=", "_size", "RangeError", "(", "'\u7d22\u5f15\u8d8a\u754c'", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 41, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 18}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/dart/chapter_array_and_linkedlist/my_list.dart#32-35", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/dart/chapter_array_and_linkedlist/my_list.dart", "language": "Java"}, "method": {"name": "set", "qualified_name": "codes.dart.chapter_array_and_linkedlist.my_list.dart#set", "start_line": 32, "end_line": 35, "signature": "set(int index, int num)", "original_code": "void set(int index, int num) {\n    if (index >= _size) throw RangeError('\u7d22\u5f15\u8d8a\u754c');\n    _arr[index] = num;\n  }", "doc_comment": "/* \u66f4\u65b0\u5143\u7d20 */"}, "code_tokens": ["void", "set", "(", ",", ")", "{", "}", "index", "num", "if", ";", "int", "int", "(", ")", "throw", ";", "=", "num", "index", ">=", "_size", "RangeError", "_arr", "[", "index", "]", "(", "'\u7d22\u5f15\u8d8a\u754c'", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 47, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 21}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/dart/chapter_array_and_linkedlist/my_list.dart#38-44", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/dart/chapter_array_and_linkedlist/my_list.dart", "language": "Java"}, "method": {"name": "add", "qualified_name": "codes.dart.chapter_array_and_linkedlist.my_list.dart#add", "start_line": 38, "end_line": 44, "signature": "add(int num)", "original_code": "void add(int num) {\n    // \u5143\u7d20\u6570\u91cf\u8d85\u51fa\u5bb9\u91cf\u65f6\uff0c\u89e6\u53d1\u6269\u5bb9\u673a\u5236\n    if (_size == _capacity) extendCapacity();\n    _arr[_size] = num;\n    // \u66f4\u65b0\u5143\u7d20\u6570\u91cf\n    _size++;\n  }", "doc_comment": "/* \u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 */"}, "code_tokens": ["void", "add", "(", ")", "{", "// \u5143\u7d20\u6570\u91cf\u8d85\u51fa\u5bb9\u91cf\u65f6\uff0c\u89e6\u53d1\u6269\u5bb9\u673a\u5236", "// \u66f4\u65b0\u5143\u7d20\u6570\u91cf", "}", "num", "if", ";", ";", "int", "(", ")", ";", "=", "num", "_size", "++", "_size", "==", "_capacity", "extendCapacity", "_arr", "[", "_size", "]", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 47, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 21}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/dart/chapter_array_and_linkedlist/my_list.dart#47-58", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/dart/chapter_array_and_linkedlist/my_list.dart", "language": "Java"}, "method": {"name": "insert", "qualified_name": "codes.dart.chapter_array_and_linkedlist.my_list.dart#insert", "start_line": 47, "end_line": 58, "signature": "insert(int index, int num)", "original_code": "void insert(int index, int num) {\n    if (index >= _size) throw RangeError('\u7d22\u5f15\u8d8a\u754c');\n    // \u5143\u7d20\u6570\u91cf\u8d85\u51fa\u5bb9\u91cf\u65f6\uff0c\u89e6\u53d1\u6269\u5bb9\u673a\u5236\n    if (_size == _capacity) extendCapacity();\n    // \u5c06\u7d22\u5f15 index \u4ee5\u53ca\u4e4b\u540e\u7684\u5143\u7d20\u90fd\u5411\u540e\u79fb\u52a8\u4e00\u4f4d\n    for (var j = _size - 1; j >= index; j--) {\n      _arr[j + 1] = _arr[j];\n    }\n    _arr[index] = num;\n    // \u66f4\u65b0\u5143\u7d20\u6570\u91cf\n    _size++;\n  }", "doc_comment": "/* \u4e2d\u95f4\u63d2\u5165\u5143\u7d20 */"}, "code_tokens": ["void", "insert", "(", ",", ")", "{", "// \u5143\u7d20\u6570\u91cf\u8d85\u51fa\u5bb9\u91cf\u65f6\uff0c\u89e6\u53d1\u6269\u5bb9\u673a\u5236", "// \u5c06\u7d22\u5f15 index \u4ee5\u53ca\u4e4b\u540e\u7684\u5143\u7d20\u90fd\u5411\u540e\u79fb\u52a8\u4e00\u4f4d", "// \u66f4\u65b0\u5143\u7d20\u6570\u91cf", "}", "index", "num", "if", "if", "for", "(", ";", ")", ";", ";", "int", "int", "(", ")", "throw", ";", "(", ")", ";", "var", ";", "j", ">=", "index", "j", "--", "{", "}", "=", "num", "_size", "++", "index", ">=", "_size", "RangeError", "_size", "==", "_capacity", "extendCapacity", "j", "=", ";", "_arr", "[", "index", "]", "(", "'\u7d22\u5f15\u8d8a\u754c'", ")", "(", ")", "_size", "-", "1", "=", "_arr", "[", "]", "_arr", "[", "j", "]", "j", "+", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 113, "ast_depth": 10, "n_identifiers": 9, "vocab_size": 35}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/dart/chapter_array_and_linkedlist/my_list.dart#61-72", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/dart/chapter_array_and_linkedlist/my_list.dart", "language": "Java"}, "method": {"name": "remove", "qualified_name": "codes.dart.chapter_array_and_linkedlist.my_list.dart#remove", "start_line": 61, "end_line": 72, "signature": "remove(int index)", "original_code": "int remove(int index) {\n    if (index >= _size) throw RangeError('\u7d22\u5f15\u8d8a\u754c');\n    int num = _arr[index];\n    // \u5c06\u7d22\u5f15 index \u4e4b\u540e\u7684\u5143\u7d20\u90fd\u5411\u524d\u79fb\u52a8\u4e00\u4f4d\n    for (var j = index; j < _size - 1; j++) {\n      _arr[j] = _arr[j + 1];\n    }\n    // \u66f4\u65b0\u5143\u7d20\u6570\u91cf\n    _size--;\n    // \u8fd4\u56de\u88ab\u5220\u9664\u5143\u7d20\n    return num;\n  }", "doc_comment": "/* \u5220\u9664\u5143\u7d20 */"}, "code_tokens": ["remove", "int", "(", ")", "{", "// \u5c06\u7d22\u5f15 index \u4e4b\u540e\u7684\u5143\u7d20\u90fd\u5411\u524d\u79fb\u52a8\u4e00\u4f4d", "// \u66f4\u65b0\u5143\u7d20\u6570\u91cf", "// \u8fd4\u56de\u88ab\u5220\u9664\u5143\u7d20", "}", "index", "if", ";", "for", "(", ";", ")", ";", "return", "num", ";", "int", "(", ")", "throw", ";", "int", "num", "=", "var", ";", "j", "<", "j", "++", "{", "}", "_size", "--", "index", ">=", "_size", "RangeError", "_arr", "[", "index", "]", "j", "=", "index", "_size", "-", "1", ";", "(", "'\u7d22\u5f15\u8d8a\u754c'", ")", "=", "_arr", "[", "j", "]", "_arr", "[", "]", "j", "+", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 99, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 32}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/dart/chapter_array_and_linkedlist/my_list.dart#75-84", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/dart/chapter_array_and_linkedlist/my_list.dart", "language": "Java"}, "method": {"name": "extendCapacity", "qualified_name": "codes.dart.chapter_array_and_linkedlist.my_list.dart#extendCapacity", "start_line": 75, "end_line": 84, "signature": "extendCapacity()", "original_code": "void extendCapacity() {\n    // \u65b0\u5efa\u4e00\u4e2a\u957f\u5ea6\u4e3a\u539f\u6570\u7ec4 _extendRatio \u500d\u7684\u65b0\u6570\u7ec4\n    final _newNums = List.filled(_capacity * _extendRatio, 0);\n    // \u5c06\u539f\u6570\u7ec4\u62f7\u8d1d\u5230\u65b0\u6570\u7ec4\n    List.copyRange(_newNums, 0, _arr);\n    // \u66f4\u65b0 _arr \u7684\u5f15\u7528\n    _arr = _newNums;\n    // \u66f4\u65b0\u5217\u8868\u5bb9\u91cf\n    _capacity = _arr.length;\n  }", "doc_comment": "/* \u5217\u8868\u6269\u5bb9 */"}, "code_tokens": ["void", "extendCapacity", "(", ")", "{", "// \u65b0\u5efa\u4e00\u4e2a\u957f\u5ea6\u4e3a\u539f\u6570\u7ec4 _extendRatio \u500d\u7684\u65b0\u6570\u7ec4", "// \u5c06\u539f\u6570\u7ec4\u62f7\u8d1d\u5230\u65b0\u6570\u7ec4", "// \u66f4\u65b0 _arr \u7684\u5f15\u7528", "// \u66f4\u65b0\u5217\u8868\u5bb9\u91cf", "}", "_newNums", ";", ";", ";", ";", "final", "", "=", "List", ".", "copyRange", "_arr", "=", "_newNums", "_capacity", "=", "List", ".", "filled", "(", "_newNums", ",", "0", ",", "_arr", ")", "_arr", ".", "length", "(", ",", "0", ")", "_capacity", "*", "_extendRatio"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 64, "ast_depth": 9, "n_identifiers": 10, "vocab_size": 26}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/dart/chapter_array_and_linkedlist/my_list.dart#87-93", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/dart/chapter_array_and_linkedlist/my_list.dart", "language": "Java"}, "method": {"name": "toArray", "qualified_name": "codes.dart.chapter_array_and_linkedlist.my_list.dart#toArray", "start_line": 87, "end_line": 93, "signature": "toArray()", "original_code": "List<int> toArray() {\n    List<int> arr = [];\n    for (var i = 0; i < _size; i++) {\n      arr.add(get(i));\n    }\n    return arr;\n  }", "doc_comment": "/* \u5c06\u5217\u8868\u8f6c\u6362\u4e3a\u6570\u7ec4 */"}, "code_tokens": ["toArray", "List", "(", ")", "{", "}", "<", ">", ";", "for", "(", ";", ")", "return", "arr", ";", "int", "List", "arr", "=", "var", ";", "i", "<", "_size", "i", "++", "{", "}", "<", ">", "", "i", "=", "0", ";", "int", "[", "]", "arr", ".", "add", "(", ")", "get", "(", "i", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 75, "ast_depth": 11, "n_identifiers": 6, "vocab_size": 25}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/dart/chapter_array_and_linkedlist/my_list.dart#97-132", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/dart/chapter_array_and_linkedlist/my_list.dart", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.dart.chapter_array_and_linkedlist.my_list.dart#main", "start_line": 97, "end_line": 132, "signature": "main()", "original_code": "void main() {\n  /* \u521d\u59cb\u5316\u5217\u8868 */\n  MyList nums = MyList();\n  /* \u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 */\n  nums.add(1);\n  nums.add(3);\n  nums.add(2);\n  nums.add(5);\n  nums.add(4);\n  print(\n      '\u5217\u8868 nums = ${nums.toArray()} \uff0c\u5bb9\u91cf = ${nums.capacity()} \uff0c\u957f\u5ea6 = ${nums.size()}');\n\n  /* \u4e2d\u95f4\u63d2\u5165\u5143\u7d20 */\n  nums.insert(3, 6);\n  print('\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = ${nums.toArray()}');\n\n  /* \u5220\u9664\u5143\u7d20 */\n  nums.remove(3);\n  print('\u5220\u9664\u7d22\u5f15 3 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = ${nums.toArray()}');\n\n  /* \u8bbf\u95ee\u5143\u7d20 */\n  int num = nums.get(1);\n  print('\u8bbf\u95ee\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 num = $num');\n\n  /* \u66f4\u65b0\u5143\u7d20 */\n  nums.set(1, 0);\n  print('\u5c06\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\u66f4\u65b0\u4e3a 0 \uff0c\u5f97\u5230 nums = ${nums.toArray()}');\n\n  /* \u6d4b\u8bd5\u6269\u5bb9\u673a\u5236 */\n  for (var i = 0; i < 10; i++) {\n    // \u5728 i = 5 \u65f6\uff0c\u5217\u8868\u957f\u5ea6\u5c06\u8d85\u51fa\u5217\u8868\u5bb9\u91cf\uff0c\u6b64\u65f6\u89e6\u53d1\u6269\u5bb9\u673a\u5236\n    nums.add(i);\n  }\n  print(\n      '\u6269\u5bb9\u540e\u7684\u5217\u8868 nums = ${nums.toArray()} \uff0c\u5bb9\u91cf = ${nums.capacity()} \uff0c\u957f\u5ea6 = ${nums.size()}');\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["void", "main", "(", ")", "{", "/* \u521d\u59cb\u5316\u5217\u8868 */", "/* \u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 */", "/* \u4e2d\u95f4\u63d2\u5165\u5143\u7d20 */", "/* \u5220\u9664\u5143\u7d20 */", "/* \u8bbf\u95ee\u5143\u7d20 */", "/* \u66f4\u65b0\u5143\u7d20 */", "/* \u6d4b\u8bd5\u6269\u5bb9\u673a\u5236 */", "}", "MyList", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "for", "(", ";", ")", ";", "nums", "=", "nums", ".", "add", "nums", ".", "add", "nums", ".", "add", "nums", ".", "add", "nums", ".", "add", "print", "nums", ".", "insert", "print", "nums", ".", "remove", "print", "int", "num", "=", "print", "nums", ".", "set", "print", "var", ";", "i", "<", "10", "i", "++", "{", "// \u5728 i = 5 \u65f6\uff0c\u5217\u8868\u957f\u5ea6\u5c06\u8d85\u51fa\u5217\u8868\u5bb9\u91cf\uff0c\u6b64\u65f6\u89e6\u53d1\u6269\u5bb9\u673a\u5236", "}", "print", "MyList", "(", "1", ")", "(", "3", ")", "(", "2", ")", "(", "5", ")", "(", "4", ")", "(", "'\u5217\u8868 nums = ${nums.toArray()} \uff0c\u5bb9\u91cf = ${nums.capacity()} \uff0c\u957f\u5ea6 = ${nums.size()}'", ")", "(", "3", ",", "6", ")", "(", "'\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = ${nums.toArray()}'", ")", "(", "3", ")", "(", "'\u5220\u9664\u7d22\u5f15 3 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = ${nums.toArray()}'", ")", "nums", ".", "get", "(", "'\u8bbf\u95ee\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 num = $num'", ")", "(", "1", ",", "0", ")", "(", "'\u5c06\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\u66f4\u65b0\u4e3a 0 \uff0c\u5f97\u5230 nums = ${nums.toArray()}'", ")", "i", "=", "0", ";", "(", "'\u6269\u5bb9\u540e\u7684\u5217\u8868 nums = ${nums.toArray()} \uff0c\u5bb9\u91cf = ${nums.capacity()} \uff0c\u957f\u5ea6 = ${nums.size()}'", ")", "(", ")", "(", "1", ")", "nums", ".", "add", "(", "i", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 208, "ast_depth": 9, "n_identifiers": 11, "vocab_size": 47}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/go/chapter_array_and_linkedlist/my_list.go#16-109", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/go/chapter_array_and_linkedlist/my_list.go", "language": "Java"}, "method": {"name": "newMyList", "qualified_name": "codes.go.chapter_array_and_linkedlist.my_list.go#newMyList", "start_line": 16, "end_line": 109, "signature": "newMyList()", "original_code": "func newMyList() *myList {\n\treturn &myList{\n\t\tarrCapacity: 10,              // \u5217\u8868\u5bb9\u91cf\n\t\tarr:         make([]int, 10), // \u6570\u7ec4\uff08\u5b58\u50a8\u5217\u8868\u5143\u7d20\uff09\n\t\tarrSize:     0,               // \u5217\u8868\u957f\u5ea6\uff08\u5373\u5f53\u524d\u5143\u7d20\u6570\u91cf\uff09\n\t\textendRatio: 2,               // \u6bcf\u6b21\u5217\u8868\u6269\u5bb9\u7684\u500d\u6570\n\t}\n}\n\n/* \u83b7\u53d6\u5217\u8868\u957f\u5ea6\uff08\u5373\u5f53\u524d\u5143\u7d20\u6570\u91cf\uff09 */\nfunc (l *myList) size() int {\n\treturn l.arrSize\n}\n\n/*  \u83b7\u53d6\u5217\u8868\u5bb9\u91cf */\nfunc (l *myList) capacity() int {\n\treturn l.arrCapacity\n}\n\n/* \u8bbf\u95ee\u5143\u7d20 */\nfunc (l *myList) get(index int) int {\n\t// \u7d22\u5f15\u5982\u679c\u8d8a\u754c\u5219\u629b\u51fa\u5f02\u5e38\uff0c\u4e0b\u540c\n\tif index < 0 || index >= l.arrSize {\n\t\tpanic(\"\u7d22\u5f15\u8d8a\u754c\")\n\t}\n\treturn l.arr[index]\n}\n\n/* \u66f4\u65b0\u5143\u7d20 */\nfunc (l *myList) set(num, index int) {\n\tif index < 0 || index >= l.arrSize {\n\t\tpanic(\"\u7d22\u5f15\u8d8a\u754c\")\n\t}\n\tl.arr[index] = num\n}\n\n/* \u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 */\nfunc (l *myList) add(num int) {\n\t// \u5143\u7d20\u6570\u91cf\u8d85\u51fa\u5bb9\u91cf\u65f6\uff0c\u89e6\u53d1\u6269\u5bb9\u673a\u5236\n\tif l.arrSize == l.arrCapacity {\n\t\tl.extendCapacity()\n\t}\n\tl.arr[l.arrSize] = num\n\t// \u66f4\u65b0\u5143\u7d20\u6570\u91cf\n\tl.arrSize++\n}\n\n/* \u4e2d\u95f4\u63d2\u5165\u5143\u7d20 */\nfunc (l *myList) insert(num, index int) {\n\tif index < 0 || index >= l.arrSize {\n\t\tpanic(\"\u7d22\u5f15\u8d8a\u754c\")\n\t}\n\t// \u5143\u7d20\u6570\u91cf\u8d85\u51fa\u5bb9\u91cf\u65f6\uff0c\u89e6\u53d1\u6269\u5bb9\u673a\u5236\n\tif l.arrSize == l.arrCapacity {\n\t\tl.extendCapacity()\n\t}\n\t// \u5c06\u7d22\u5f15 index \u4ee5\u53ca\u4e4b\u540e\u7684\u5143\u7d20\u90fd\u5411\u540e\u79fb\u52a8\u4e00\u4f4d\n\tfor j := l.arrSize - 1; j >= index; j-- {\n\t\tl.arr[j+1] = l.arr[j]\n\t}\n\tl.arr[index] = num\n\t// \u66f4\u65b0\u5143\u7d20\u6570\u91cf\n\tl.arrSize++\n}\n\n/* \u5220\u9664\u5143\u7d20 */\nfunc (l *myList) remove(index int) int {\n\tif index < 0 || index >= l.arrSize {\n\t\tpanic(\"\u7d22\u5f15\u8d8a\u754c\")\n\t}\n\tnum := l.arr[index]\n\t// \u7d22\u5f15 i \u4e4b\u540e\u7684\u5143\u7d20\u90fd\u5411\u524d\u79fb\u52a8\u4e00\u4f4d\n\tfor j := index; j < l.arrSize-1; j++ {\n\t\tl.arr[j] = l.arr[j+1]\n\t}\n\t// \u66f4\u65b0\u5143\u7d20\u6570\u91cf\n\tl.arrSize--\n\t// \u8fd4\u56de\u88ab\u5220\u9664\u5143\u7d20\n\treturn num\n}\n\n/* \u5217\u8868\u6269\u5bb9 */\nfunc (l *myList) extendCapacity() {\n\t// \u65b0\u5efa\u4e00\u4e2a\u957f\u5ea6\u4e3a\u539f\u6570\u7ec4 extendRatio \u500d\u7684\u65b0\u6570\u7ec4\uff0c\u5e76\u5c06\u539f\u6570\u7ec4\u62f7\u8d1d\u5230\u65b0\u6570\u7ec4\n\tl.arr = append(l.arr, make([]int, l.arrCapacity*(l.extendRatio-1))...)\n\t// \u66f4\u65b0\u5217\u8868\u5bb9\u91cf\n\tl.arrCapacity = len(l.arr)\n}\n\n/* \u8fd4\u56de\u6709\u6548\u957f\u5ea6\u7684\u5217\u8868 */\nfunc (l *myList) toArray() []int {\n\t// \u4ec5\u8f6c\u6362\u6709\u6548\u957f\u5ea6\u8303\u56f4\u5185\u7684\u5217\u8868\u5143\u7d20\n\treturn l.arr[:l.arrSize]\n}", "doc_comment": "/* \u6784\u9020\u51fd\u6570 */"}, "code_tokens": ["func", "newMyList", "(", ")", "*", "myList", "{", "/* \u5220\u9664\u5143\u7d20 */", "/* \u5217\u8868\u6269\u5bb9 */", "/* \u8fd4\u56de\u6709\u6548\u957f\u5ea6\u7684\u5217\u8868 */", "", "return", "myList", "", "{", "/*  \u83b7\u53d6\u5217\u8868\u5bb9\u91cf */", "/* \u8bbf\u95ee\u5143\u7d20 */", "/* \u66f4\u65b0\u5143\u7d20 */", "}", "remove", "int", "{", "// \u66f4\u65b0\u5143\u7d20\u6570\u91cf", "}", "", "", "{", "// \u65b0\u5efa\u4e00\u4e2a\u957f\u5ea6\u4e3a\u539f\u6570\u7ec4 extendRatio \u500d\u7684\u65b0\u6570\u7ec4\uff0c\u5e76\u5c06\u539f\u6570\u7ec4\u62f7\u8d1d\u5230\u65b0\u6570\u7ec4", "}", "", "[", "{", "// \u4ec5\u8f6c\u6362\u6709\u6548\u957f\u5ea6\u8303\u56f4\u5185\u7684\u5217\u8868\u5143\u7d20", "}", "&", "arrCapacity", ":", "// \u5217\u8868\u5bb9\u91cf", "", "int", "{", "}", "", "int", "{", "}", "get", "int", "{", "// \u7d22\u5f15\u5982\u679c\u8d8a\u754c\u5219\u629b\u51fa\u5f02\u5e38\uff0c\u4e0b\u540c", "}", "", ";", ";", "", "{", "}", "", "func", "(", ")", "if", "||", "index", ">=", "{", "}", ";", ";", "", "{", "}", "// \u8fd4\u56de\u88ab\u5220\u9664\u5143\u7d20", "", "return", "num", "", "func", "extendCapacity", "", "func", "toArray", "]", "int", "return", "]", "10", ",", "arr", ":", "(", ")", "size", "return", "func", "capacity", "return", "func", "(", ")", "if", "||", "index", ">=", "return", "func", "set", "j", ">=", "index", "j", "--", "", "=", "// \u66f4\u65b0\u5143\u7d20\u6570\u91cf", "(", ")", "index", "int", "index", "<", "0", "l", ".", "arrSize", "", "num", "=", "j", "<", "j", "++", "", "--", "(", ")", "(", ")", "=", "(", ")", "(", ")", "[", ":", "l", ".", "arrSize", ",", "// \u6570\u7ec4\uff08\u5b58\u50a8\u5217\u8868\u5143\u7d20\uff09", ",", "// \u5217\u8868\u957f\u5ea6\uff08\u5373\u5f53\u524d\u5143\u7d20\u6570\u91cf\uff09", ",", "// \u6bcf\u6b21\u5217\u8868\u6269\u5bb9\u7684\u500d\u6570", "/* \u83b7\u53d6\u5217\u8868\u957f\u5ea6\uff08\u5373\u5f53\u524d\u5143\u7d20\u6570\u91cf\uff09 */", "", "l", "*", "myList", "(", ")", "l", ".", "arrSize", "(", ")", "(", ")", "l", ".", "arrCapacity", "(", ")", "index", "int", "index", "<", "0", "l", ".", "arrSize", "{", "}", "[", "index", "]", "(", ")", "(", "num", ",", "/* \u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 */", "/* \u4e2d\u95f4\u63d2\u5165\u5143\u7d20 */", "", "=", "[", "index", "]", "num", "++", "l", "*", "myList", "panic", ":", "// \u7d22\u5f15 i \u4e4b\u540e\u7684\u5143\u7d20\u90fd\u5411\u524d\u79fb\u52a8\u4e00\u4f4d", "=", "index", "-", "1", "=", "l", ".", "arrSize", "l", "*", "myList", "l", ".", "arr", "=", "l", "*", "myList", "l", ".", "arr", "make", "int", "10", ")", ",", "arrSize", ":", "0", "extendRatio", ":", "2", "}", "}", "func", "l", "*", "myList", "l", "*", "myList", "", "l", ".", "arr", "l", "*", "myList", "index", "int", ")", "{", "if", "}", "}", "add", "{", "// \u5143\u7d20\u6570\u91cf\u8d85\u51fa\u5bb9\u91cf\u65f6\uff0c\u89e6\u53d1\u6269\u5bb9\u673a\u5236", "if", "}", "insert", "=", "[", "]", "[", "j", "]", "l", ".", "arr", "l", ".", "arrSize", "(", ")", "[", "index", "]", "for", "j", ":", "l", ".", "arrSize", "[", "j", "]", "[", "]", ".", "arrCapacity", "len", "(", "[", "]", "panic", "||", "=", "num", "func", "(", ")", "==", "func", "(", "num", ",", ":", "-", "1", "l", ".", "arr", "j", "+", "1", "l", ".", "arr", "\"", "\u7d22\u5f15\u8d8a\u754c", "\"", "l", ".", "arr", "l", ".", "arr", "l", ".", "arr", "j", "+", "1", ".", "// \u66f4\u65b0\u5217\u8868\u5bb9\u91cf", "l", "(", ")", "(", ")", "index", "<", "0", "index", ">=", "[", "index", "]", "(", ")", "num", "int", "l", ".", "arrSize", "}", "=", "// \u66f4\u65b0\u5143\u7d20\u6570\u91cf", "(", ")", "index", "int", ")", "{", "if", "}", "// \u5143\u7d20\u6570\u91cf\u8d85\u51fa\u5bb9\u91cf\u65f6\uff0c\u89e6\u53d1\u6269\u5bb9\u673a\u5236", "if", "==", "j", "l", ".", "arrSize", "append", ".", ".", ")", "l", ".", "arr", "\"", "\u7d22\u5f15\u8d8a\u754c", "\"", "{", "panic", "(", ")", "l", ".", "arr", "l", "*", "myList", ".", "extendCapacity", "(", ")", "[", "]", "num", "++", "l", "*", "myList", "||", "l", ".", "arrSize", "}", "// \u5c06\u7d22\u5f15 index \u4ee5\u53ca\u4e4b\u540e\u7684\u5143\u7d20\u90fd\u5411\u540e\u79fb\u52a8\u4e00\u4f4d", "for", "(", ",", ")", "l", ".", "arrSize", "\"", "\u7d22\u5f15\u8d8a\u754c", "\"", "l", ".", "arrCapacity", "{", "l", "l", ".", "arr", "l", ".", "arrSize", "l", ".", "arrSize", "index", "<", "0", "index", ">=", ".", "extendCapacity", "(", ")", "l", ".", "arr", "int", ",", "*", "{", "panic", "(", ")", "l", ".", "arrCapacity", "{", "l", "make", "l", ".", "arrCapacity", "(", ")", "l", ".", "arrSize", "\"", "\u7d22\u5f15\u8d8a\u754c", "\"", "(", "[", "]", "-", "1", "l", ".", "extendRatio"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 708, "ast_depth": 16, "n_identifiers": 25, "vocab_size": 78}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/java/chapter_array_and_linkedlist/list.java#12-67", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/java/chapter_array_and_linkedlist/list.java", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.java.chapter_array_and_linkedlist.list#main", "start_line": 12, "end_line": 67, "signature": "main(String[] args)", "original_code": "public static void main(String[] args) {\n        /* \u521d\u59cb\u5316\u5217\u8868 */\n        // \u6ce8\u610f\u6570\u7ec4\u7684\u5143\u7d20\u7c7b\u578b\u662f int[] \u7684\u5305\u88c5\u7c7b Integer[]\n        Integer[] numbers = new Integer[] { 1, 3, 2, 5, 4 };\n        List<Integer> nums = new ArrayList<>(Arrays.asList(numbers));\n        System.out.println(\"\u5217\u8868 nums = \" + nums);\n\n        /* \u8bbf\u95ee\u5143\u7d20 */\n        int x = nums.get(1);\n        System.out.println(\"\u8bbf\u95ee\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 x = \" + x);\n\n        /* \u66f4\u65b0\u5143\u7d20 */\n        nums.set(1, 0);\n        System.out.println(\"\u5c06\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\u66f4\u65b0\u4e3a 0 \uff0c\u5f97\u5230 nums = \" + nums);\n\n        /* \u6e05\u7a7a\u5217\u8868 */\n        nums.clear();\n        System.out.println(\"\u6e05\u7a7a\u5217\u8868\u540e nums = \" + nums);\n\n        /* \u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 */\n        nums.add(1);\n        nums.add(3);\n        nums.add(2);\n        nums.add(5);\n        nums.add(4);\n        System.out.println(\"\u6dfb\u52a0\u5143\u7d20\u540e nums = \" + nums);\n\n        /* \u4e2d\u95f4\u63d2\u5165\u5143\u7d20 */\n        nums.add(3, 6);\n        System.out.println(\"\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = \" + nums);\n\n        /* \u5220\u9664\u5143\u7d20 */\n        nums.remove(3);\n        System.out.println(\"\u5220\u9664\u7d22\u5f15 3 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = \" + nums);\n\n        /* \u901a\u8fc7\u7d22\u5f15\u904d\u5386\u5217\u8868 */\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            count++;\n        }\n\n        /* \u76f4\u63a5\u904d\u5386\u5217\u8868\u5143\u7d20 */\n        count = 0;\n        for (int num : nums) {\n            count++;\n        }\n\n        /* \u62fc\u63a5\u4e24\u4e2a\u5217\u8868 */\n        List<Integer> nums1 = new ArrayList<>(Arrays.asList(new Integer[] { 6, 8, 7, 10, 9 }));\n        nums.addAll(nums1);\n        System.out.println(\"\u5c06\u5217\u8868 nums1 \u62fc\u63a5\u5230 nums \u4e4b\u540e\uff0c\u5f97\u5230 nums = \" + nums);\n\n        /* \u6392\u5e8f\u5217\u8868 */\n        Collections.sort(nums);\n        System.out.println(\"\u6392\u5e8f\u5217\u8868\u540e nums = \" + nums);\n    }", "doc_comment": ""}, "code_tokens": ["void", "main", "public", "static", "(", ")", "{", "/* \u521d\u59cb\u5316\u5217\u8868 */", "// \u6ce8\u610f\u6570\u7ec4\u7684\u5143\u7d20\u7c7b\u578b\u662f int[] \u7684\u5305\u88c5\u7c7b Integer[]", "/* \u8bbf\u95ee\u5143\u7d20 */", "/* \u66f4\u65b0\u5143\u7d20 */", "/* \u6e05\u7a7a\u5217\u8868 */", "/* \u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 */", "/* \u4e2d\u95f4\u63d2\u5165\u5143\u7d20 */", "/* \u5220\u9664\u5143\u7d20 */", "/* \u901a\u8fc7\u7d22\u5f15\u904d\u5386\u5217\u8868 */", "/* \u76f4\u63a5\u904d\u5386\u5217\u8868\u5143\u7d20 */", "/* \u62fc\u63a5\u4e24\u4e2a\u5217\u8868 */", "/* \u6392\u5e8f\u5217\u8868 */", "}", "args", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "for", "(", ";", ")", ";", "for", "(", "num", ":", "nums", ")", ";", ";", ";", ";", ";", "String", "Integer", "numbers", "=", "List", "nums", "=", ".", "println", "int", "x", "=", ".", "println", "nums", ".", "set", ".", "println", "nums", ".", "clear", ".", "println", "nums", ".", "add", "nums", ".", "add", "nums", ".", "add", "nums", ".", "add", "nums", ".", "add", ".", "println", "nums", ".", "add", ".", "println", "nums", ".", "remove", ".", "println", "int", "count", "=", "0", ";", "i", "<", "i", "++", "{", "}", "count", "=", "0", "int", "{", "}", "List", "nums1", "=", "nums", ".", "addAll", ".", "println", "Collections", ".", "sort", ".", "println", "[", "]", "[", "]", "new", "Integer", "<", "Integer", ">", "new", "System", ".", "out", "(", ")", "nums", ".", "get", "System", ".", "out", "(", ")", "(", "1", ",", "0", ")", "System", ".", "out", "(", ")", "(", ")", "System", ".", "out", "(", ")", "(", "1", ")", "(", "3", ")", "(", "2", ")", "(", "5", ")", "(", "4", ")", "System", ".", "out", "(", ")", "(", "3", ",", "6", ")", "System", ".", "out", "(", ")", "(", "3", ")", "System", ".", "out", "(", ")", "int", "i", "=", "0", "nums", ".", "size", ";", ";", "<", "Integer", ">", "new", "(", "nums1", ")", "System", ".", "out", "(", ")", "(", "nums", ")", "System", ".", "out", "(", ")", "[", "]", "{", "1", ",", "3", ",", "2", ",", "5", ",", "4", "}", "ArrayList", "(", ")", "+", "nums", "(", "1", ")", "+", "x", "+", "nums", "+", "nums", "+", "nums", "+", "nums", "+", "nums", "(", ")", "count", "++", "count", "++", "ArrayList", "(", ")", "+", "nums", "+", "nums", "<", ">", "Arrays", ".", "asList", "\"", "\u5217\u8868 nums = ", "\"", "\"", "\u8bbf\u95ee\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 x = ", "\"", "\"", "\u5c06\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\u66f4\u65b0\u4e3a 0 \uff0c\u5f97\u5230 nums = ", "\"", "\"", "\u6e05\u7a7a\u5217\u8868\u540e nums = ", "\"", "\"", "\u6dfb\u52a0\u5143\u7d20\u540e nums = ", "\"", "\"", "\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = ", "\"", "\"", "\u5220\u9664\u7d22\u5f15 3 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = ", "\"", "<", ">", "Arrays", ".", "asList", "\"", "\u5c06\u5217\u8868 nums1 \u62fc\u63a5\u5230 nums \u4e4b\u540e\uff0c\u5f97\u5230 nums = ", "\"", "\"", "\u6392\u5e8f\u5217\u8868\u540e nums = ", "\"", "(", "numbers", ")", "(", ")", "new", "Integer", "[", "]", "{", "6", ",", "8", ",", "7", ",", "10", ",", "9", "}"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 499, "ast_depth": 12, "n_identifiers": 23, "vocab_size": 81}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/java/chapter_array_and_linkedlist/my_list.java#24-26", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/java/chapter_array_and_linkedlist/my_list.java", "language": "Java"}, "method": {"name": "size", "qualified_name": "codes.java.chapter_array_and_linkedlist.my_list#size", "start_line": 24, "end_line": 26, "signature": "size()", "original_code": "public int size() {\n        return size;\n    }", "doc_comment": "/* \u83b7\u53d6\u5217\u8868\u957f\u5ea6\uff08\u5373\u5f53\u524d\u5143\u7d20\u6570\u91cf\uff09 */"}, "code_tokens": ["size", "public", "int", "(", ")", "{", "}", "return", "size", ";"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 17, "ast_depth": 5, "n_identifiers": 1, "vocab_size": 9}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/java/chapter_array_and_linkedlist/my_list.java#29-31", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/java/chapter_array_and_linkedlist/my_list.java", "language": "Java"}, "method": {"name": "capacity", "qualified_name": "codes.java.chapter_array_and_linkedlist.my_list#capacity", "start_line": 29, "end_line": 31, "signature": "capacity()", "original_code": "public int capacity() {\n        return capacity;\n    }", "doc_comment": "/* \u83b7\u53d6\u5217\u8868\u5bb9\u91cf */"}, "code_tokens": ["capacity", "public", "int", "(", ")", "{", "}", "return", "capacity", ";"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 17, "ast_depth": 5, "n_identifiers": 1, "vocab_size": 9}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/java/chapter_array_and_linkedlist/my_list.java#34-39", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/java/chapter_array_and_linkedlist/my_list.java", "language": "Java"}, "method": {"name": "get", "qualified_name": "codes.java.chapter_array_and_linkedlist.my_list#get", "start_line": 34, "end_line": 39, "signature": "get(int index)", "original_code": "public int get(int index) {\n        // \u7d22\u5f15\u5982\u679c\u8d8a\u754c\u5219\u629b\u51fa\u5f02\u5e38\uff0c\u4e0b\u540c\n        if (index < 0 || index >= size)\n            throw new IndexOutOfBoundsException(\"\u7d22\u5f15\u8d8a\u754c\");\n        return arr[index];\n    }", "doc_comment": "/* \u8bbf\u95ee\u5143\u7d20 */"}, "code_tokens": ["get", "public", "int", "(", ")", "{", "// \u7d22\u5f15\u5982\u679c\u8d8a\u754c\u5219\u629b\u51fa\u5f02\u5e38\uff0c\u4e0b\u540c", "}", "index", "if", "return", ";", "int", "(", ")", "throw", ";", "arr", "[", "index", "]", "||", "new", "IndexOutOfBoundsException", "index", "<", "0", "index", ">=", "size", "(", ")", "\"", "\u7d22\u5f15\u8d8a\u754c", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 54, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 25}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/java/chapter_array_and_linkedlist/my_list.java#42-46", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/java/chapter_array_and_linkedlist/my_list.java", "language": "Java"}, "method": {"name": "set", "qualified_name": "codes.java.chapter_array_and_linkedlist.my_list#set", "start_line": 42, "end_line": 46, "signature": "set(int index, int num)", "original_code": "public void set(int index, int num) {\n        if (index < 0 || index >= size)\n            throw new IndexOutOfBoundsException(\"\u7d22\u5f15\u8d8a\u754c\");\n        arr[index] = num;\n    }", "doc_comment": "/* \u66f4\u65b0\u5143\u7d20 */"}, "code_tokens": ["void", "set", "public", "(", ",", ")", "{", "}", "index", "num", "if", ";", "int", "int", "(", ")", "throw", ";", "=", "num", "||", "new", "IndexOutOfBoundsException", "arr", "[", "index", "]", "index", "<", "0", "index", ">=", "size", "(", ")", "\"", "\u7d22\u5f15\u8d8a\u754c", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 59, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 27}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/java/chapter_array_and_linkedlist/my_list.java#49-56", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/java/chapter_array_and_linkedlist/my_list.java", "language": "Java"}, "method": {"name": "add", "qualified_name": "codes.java.chapter_array_and_linkedlist.my_list#add", "start_line": 49, "end_line": 56, "signature": "add(int num)", "original_code": "public void add(int num) {\n        // \u5143\u7d20\u6570\u91cf\u8d85\u51fa\u5bb9\u91cf\u65f6\uff0c\u89e6\u53d1\u6269\u5bb9\u673a\u5236\n        if (size == capacity())\n            extendCapacity();\n        arr[size] = num;\n        // \u66f4\u65b0\u5143\u7d20\u6570\u91cf\n        size++;\n    }", "doc_comment": "/* \u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 */"}, "code_tokens": ["void", "add", "public", "(", ")", "{", "// \u5143\u7d20\u6570\u91cf\u8d85\u51fa\u5bb9\u91cf\u65f6\uff0c\u89e6\u53d1\u6269\u5bb9\u673a\u5236", "// \u66f4\u65b0\u5143\u7d20\u6570\u91cf", "}", "num", "if", ";", ";", "int", "(", ")", ";", "=", "num", "size", "++", "size", "==", "extendCapacity", "arr", "[", "size", "]", "capacity", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 53, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 22}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/java/chapter_array_and_linkedlist/my_list.java#59-72", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/java/chapter_array_and_linkedlist/my_list.java", "language": "Java"}, "method": {"name": "insert", "qualified_name": "codes.java.chapter_array_and_linkedlist.my_list#insert", "start_line": 59, "end_line": 72, "signature": "insert(int index, int num)", "original_code": "public void insert(int index, int num) {\n        if (index < 0 || index >= size)\n            throw new IndexOutOfBoundsException(\"\u7d22\u5f15\u8d8a\u754c\");\n        // \u5143\u7d20\u6570\u91cf\u8d85\u51fa\u5bb9\u91cf\u65f6\uff0c\u89e6\u53d1\u6269\u5bb9\u673a\u5236\n        if (size == capacity())\n            extendCapacity();\n        // \u5c06\u7d22\u5f15 index \u4ee5\u53ca\u4e4b\u540e\u7684\u5143\u7d20\u90fd\u5411\u540e\u79fb\u52a8\u4e00\u4f4d\n        for (int j = size - 1; j >= index; j--) {\n            arr[j + 1] = arr[j];\n        }\n        arr[index] = num;\n        // \u66f4\u65b0\u5143\u7d20\u6570\u91cf\n        size++;\n    }", "doc_comment": "/* \u4e2d\u95f4\u63d2\u5165\u5143\u7d20 */"}, "code_tokens": ["void", "insert", "public", "(", ",", ")", "{", "// \u5143\u7d20\u6570\u91cf\u8d85\u51fa\u5bb9\u91cf\u65f6\uff0c\u89e6\u53d1\u6269\u5bb9\u673a\u5236", "// \u5c06\u7d22\u5f15 index \u4ee5\u53ca\u4e4b\u540e\u7684\u5143\u7d20\u90fd\u5411\u540e\u79fb\u52a8\u4e00\u4f4d", "// \u66f4\u65b0\u5143\u7d20\u6570\u91cf", "}", "index", "num", "if", "if", "for", "(", ";", ")", ";", ";", "int", "int", "(", ")", "throw", ";", "(", ")", ";", ";", "j", ">=", "index", "j", "--", "{", "}", "=", "num", "size", "++", "||", "new", "IndexOutOfBoundsException", "size", "==", "extendCapacity", "int", "j", "=", ";", "arr", "[", "index", "]", "index", "<", "0", "index", ">=", "size", "(", ")", "capacity", "(", ")", "size", "-", "1", "=", "\"", "\u7d22\u5f15\u8d8a\u754c", "\"", "(", ")", "arr", "[", "]", "arr", "[", "j", "]", "j", "+", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 130, "ast_depth": 10, "n_identifiers": 8, "vocab_size": 40}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/java/chapter_array_and_linkedlist/my_list.java#75-87", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/java/chapter_array_and_linkedlist/my_list.java", "language": "Java"}, "method": {"name": "remove", "qualified_name": "codes.java.chapter_array_and_linkedlist.my_list#remove", "start_line": 75, "end_line": 87, "signature": "remove(int index)", "original_code": "public int remove(int index) {\n        if (index < 0 || index >= size)\n            throw new IndexOutOfBoundsException(\"\u7d22\u5f15\u8d8a\u754c\");\n        int num = arr[index];\n        // \u5c06\u7d22\u5f15 index \u4e4b\u540e\u7684\u5143\u7d20\u90fd\u5411\u524d\u79fb\u52a8\u4e00\u4f4d\n        for (int j = index; j < size - 1; j++) {\n            arr[j] = arr[j + 1];\n        }\n        // \u66f4\u65b0\u5143\u7d20\u6570\u91cf\n        size--;\n        // \u8fd4\u56de\u88ab\u5220\u9664\u5143\u7d20\n        return num;\n    }", "doc_comment": "/* \u5220\u9664\u5143\u7d20 */"}, "code_tokens": ["remove", "public", "int", "(", ")", "{", "// \u5c06\u7d22\u5f15 index \u4e4b\u540e\u7684\u5143\u7d20\u90fd\u5411\u524d\u79fb\u52a8\u4e00\u4f4d", "// \u66f4\u65b0\u5143\u7d20\u6570\u91cf", "// \u8fd4\u56de\u88ab\u5220\u9664\u5143\u7d20", "}", "index", "if", ";", "for", "(", ";", ")", ";", "return", "num", ";", "int", "(", ")", "throw", ";", "int", "num", "=", ";", "j", "<", "j", "++", "{", "}", "size", "--", "||", "new", "IndexOutOfBoundsException", "arr", "[", "index", "]", "int", "j", "=", "index", "size", "-", "1", ";", "index", "<", "0", "index", ">=", "size", "(", ")", "=", "\"", "\u7d22\u5f15\u8d8a\u754c", "\"", "arr", "[", "j", "]", "arr", "[", "]", "j", "+", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 112, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 36}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/java/chapter_array_and_linkedlist/my_list.java#90-95", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/java/chapter_array_and_linkedlist/my_list.java", "language": "Java"}, "method": {"name": "extendCapacity", "qualified_name": "codes.java.chapter_array_and_linkedlist.my_list#extendCapacity", "start_line": 90, "end_line": 95, "signature": "extendCapacity()", "original_code": "public void extendCapacity() {\n        // \u65b0\u5efa\u4e00\u4e2a\u957f\u5ea6\u4e3a\u539f\u6570\u7ec4 extendRatio \u500d\u7684\u65b0\u6570\u7ec4\uff0c\u5e76\u5c06\u539f\u6570\u7ec4\u62f7\u8d1d\u5230\u65b0\u6570\u7ec4\n        arr = Arrays.copyOf(arr, capacity() * extendRatio);\n        // \u66f4\u65b0\u5217\u8868\u5bb9\u91cf\n        capacity = arr.length;\n    }", "doc_comment": "/* \u5217\u8868\u6269\u5bb9 */"}, "code_tokens": ["void", "extendCapacity", "public", "(", ")", "{", "// \u65b0\u5efa\u4e00\u4e2a\u957f\u5ea6\u4e3a\u539f\u6570\u7ec4 extendRatio \u500d\u7684\u65b0\u6570\u7ec4\uff0c\u5e76\u5c06\u539f\u6570\u7ec4\u62f7\u8d1d\u5230\u65b0\u6570\u7ec4", "// \u66f4\u65b0\u5217\u8868\u5bb9\u91cf", "}", ";", ";", "arr", "=", "capacity", "=", "Arrays", ".", "copyOf", "arr", ".", "length", "(", "arr", ",", ")", "*", "extendRatio", "capacity", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 45, "ast_depth": 11, "n_identifiers": 7, "vocab_size": 20}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/java/chapter_array_and_linkedlist/my_list.java#98-106", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/java/chapter_array_and_linkedlist/my_list.java", "language": "Java"}, "method": {"name": "toArray", "qualified_name": "codes.java.chapter_array_and_linkedlist.my_list#toArray", "start_line": 98, "end_line": 106, "signature": "toArray()", "original_code": "public int[] toArray() {\n        int size = size();\n        // \u4ec5\u8f6c\u6362\u6709\u6548\u957f\u5ea6\u8303\u56f4\u5185\u7684\u5217\u8868\u5143\u7d20\n        int[] arr = new int[size];\n        for (int i = 0; i < size; i++) {\n            arr[i] = get(i);\n        }\n        return arr;\n    }", "doc_comment": "/* \u5c06\u5217\u8868\u8f6c\u6362\u4e3a\u6570\u7ec4 */"}, "code_tokens": ["toArray", "public", "(", ")", "{", "// \u4ec5\u8f6c\u6362\u6709\u6548\u957f\u5ea6\u8303\u56f4\u5185\u7684\u5217\u8868\u5143\u7d20", "}", "int", "[", "]", ";", ";", "for", "(", ";", ")", "return", "arr", ";", "int", "size", "=", "arr", "=", ";", "i", "<", "size", "i", "++", "{", "}", "size", "int", "[", "]", "new", "int", "i", "=", "0", ";", "(", ")", "int", "[", "size", "]", "=", "arr", "[", "i", "]", "get", "(", "i", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 91, "ast_depth": 10, "n_identifiers": 5, "vocab_size": 22}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/java/chapter_array_and_linkedlist/my_list.java#111-146", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/java/chapter_array_and_linkedlist/my_list.java", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.java.chapter_array_and_linkedlist.my_list#main", "start_line": 111, "end_line": 146, "signature": "main(String[] args)", "original_code": "public static void main(String[] args) {\n        /* \u521d\u59cb\u5316\u5217\u8868 */\n        MyList nums = new MyList();\n        /* \u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 */\n        nums.add(1);\n        nums.add(3);\n        nums.add(2);\n        nums.add(5);\n        nums.add(4);\n        System.out.println(\"\u5217\u8868 nums = \" + Arrays.toString(nums.toArray()) +\n                \" \uff0c\u5bb9\u91cf = \" + nums.capacity() + \" \uff0c\u957f\u5ea6 = \" + nums.size());\n\n        /* \u4e2d\u95f4\u63d2\u5165\u5143\u7d20 */\n        nums.insert(3, 6);\n        System.out.println(\"\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = \" + Arrays.toString(nums.toArray()));\n\n        /* \u5220\u9664\u5143\u7d20 */\n        nums.remove(3);\n        System.out.println(\"\u5220\u9664\u7d22\u5f15 3 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = \" + Arrays.toString(nums.toArray()));\n\n        /* \u8bbf\u95ee\u5143\u7d20 */\n        int num = nums.get(1);\n        System.out.println(\"\u8bbf\u95ee\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 num = \" + num);\n\n        /* \u66f4\u65b0\u5143\u7d20 */\n        nums.set(1, 0);\n        System.out.println(\"\u5c06\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\u66f4\u65b0\u4e3a 0 \uff0c\u5f97\u5230 nums = \" + Arrays.toString(nums.toArray()));\n\n        /* \u6d4b\u8bd5\u6269\u5bb9\u673a\u5236 */\n        for (int i = 0; i < 10; i++) {\n            // \u5728 i = 5 \u65f6\uff0c\u5217\u8868\u957f\u5ea6\u5c06\u8d85\u51fa\u5217\u8868\u5bb9\u91cf\uff0c\u6b64\u65f6\u89e6\u53d1\u6269\u5bb9\u673a\u5236\n            nums.add(i);\n        }\n        System.out.println(\"\u6269\u5bb9\u540e\u7684\u5217\u8868 nums = \" + Arrays.toString(nums.toArray()) +\n                \" \uff0c\u5bb9\u91cf = \" + nums.capacity() + \" \uff0c\u957f\u5ea6 = \" + nums.size());\n    }", "doc_comment": "/* Driver Code */"}, "code_tokens": ["void", "main", "public", "static", "(", ")", "{", "/* \u521d\u59cb\u5316\u5217\u8868 */", "/* \u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 */", "/* \u4e2d\u95f4\u63d2\u5165\u5143\u7d20 */", "/* \u5220\u9664\u5143\u7d20 */", "/* \u8bbf\u95ee\u5143\u7d20 */", "/* \u66f4\u65b0\u5143\u7d20 */", "/* \u6d4b\u8bd5\u6269\u5bb9\u673a\u5236 */", "}", "args", "MyList", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "for", "(", ";", ")", ";", "String", "nums", "=", "nums", ".", "add", "nums", ".", "add", "nums", ".", "add", "nums", ".", "add", "nums", ".", "add", ".", "println", "nums", ".", "insert", ".", "println", "nums", ".", "remove", ".", "println", "int", "num", "=", ".", "println", "nums", ".", "set", ".", "println", ";", "i", "<", "10", "i", "++", "{", "// \u5728 i = 5 \u65f6\uff0c\u5217\u8868\u957f\u5ea6\u5c06\u8d85\u51fa\u5217\u8868\u5bb9\u91cf\uff0c\u6b64\u65f6\u89e6\u53d1\u6269\u5bb9\u673a\u5236", "}", ".", "println", "[", "]", "new", "MyList", "(", "1", ")", "(", "3", ")", "(", "2", ")", "(", "5", ")", "(", "4", ")", "System", ".", "out", "(", ")", "(", "3", ",", "6", ")", "System", ".", "out", "(", ")", "(", "3", ")", "System", ".", "out", "(", ")", "nums", ".", "get", "System", ".", "out", "(", ")", "(", "1", ",", "0", ")", "System", ".", "out", "(", ")", "int", "i", "=", "0", ";", "System", ".", "out", "(", ")", "(", ")", "+", "+", "+", "(", "1", ")", "+", "num", "+", "nums", ".", "add", "+", "+", "nums", ".", "size", "\"", "\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = ", "\"", "Arrays", ".", "toString", "\"", "\u5220\u9664\u7d22\u5f15 3 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = ", "\"", "Arrays", ".", "toString", "\"", "\u8bbf\u95ee\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 num = ", "\"", "\"", "\u5c06\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\u66f4\u65b0\u4e3a 0 \uff0c\u5f97\u5230 nums = ", "\"", "Arrays", ".", "toString", "(", "i", ")", "+", "nums", ".", "size", "+", "\"", " \uff0c\u957f\u5ea6 = ", "\"", "(", ")", "(", ")", "(", ")", "(", ")", "+", "\"", " \uff0c\u957f\u5ea6 = ", "\"", "(", ")", "+", "nums", ".", "capacity", "nums", ".", "toArray", "nums", ".", "toArray", "nums", ".", "toArray", "+", "nums", ".", "capacity", "+", "\"", " \uff0c\u5bb9\u91cf = ", "\"", "(", ")", "(", ")", "(", ")", "(", ")", "+", "\"", " \uff0c\u5bb9\u91cf = ", "\"", "(", ")", "\"", "\u5217\u8868 nums = ", "\"", "Arrays", ".", "toString", "\"", "\u6269\u5bb9\u540e\u7684\u5217\u8868 nums = ", "\"", "Arrays", ".", "toString", "(", ")", "(", ")", "nums", ".", "toArray", "nums", ".", "toArray", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 411, "ast_depth": 16, "n_identifiers": 18, "vocab_size": 64}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/rust/chapter_array_and_linkedlist/list.rs#10-75", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/rust/chapter_array_and_linkedlist/list.rs", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.rust.chapter_array_and_linkedlist.list.rs#main", "start_line": 10, "end_line": 75, "signature": "main()", "original_code": "fn main() {\n    //  \u521d\u59cb\u5316\u5217\u8868\n    let mut nums: Vec<i32> = vec![ 1, 3, 2, 5, 4 ];\n    print!(\"\u5217\u8868 nums = \");\n    print_util::print_array(&nums);\n\n    //  \u8bbf\u95ee\u5143\u7d20\n    let num = nums[1];\n    println!(\"\\n\u8bbf\u95ee\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 num = {num}\");\n\n    //  \u66f4\u65b0\u5143\u7d20\n    nums[1] = 0;\n    print!(\"\u5c06\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\u66f4\u65b0\u4e3a 0 \uff0c\u5f97\u5230 nums = \");\n    print_util::print_array(&nums);\n\n    //  \u6e05\u7a7a\u5217\u8868\n    nums.clear();\n    print!(\"\\n\u6e05\u7a7a\u5217\u8868\u540e nums = \");\n    print_util::print_array(&nums);\n\n    //  \u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20\n    nums.push(1);\n    nums.push(3);\n    nums.push(2);\n    nums.push(5);\n    nums.push(4);\n    print!(\"\\n\u6dfb\u52a0\u5143\u7d20\u540e nums = \");\n    print_util::print_array(&nums);\n\n    //  \u4e2d\u95f4\u63d2\u5165\u5143\u7d20\n    nums.insert(3, 6);\n    print!(\"\\n\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = \");\n    print_util::print_array(&nums);\n\n    //  \u5220\u9664\u5143\u7d20\n    nums.remove(3);\n    print!(\"\\n\u5220\u9664\u7d22\u5f15 3 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = \");\n    print_util::print_array(&nums);\n\n    //  \u901a\u8fc7\u7d22\u5f15\u904d\u5386\u5217\u8868\n    let mut _count = 0;\n    for _ in 0..nums.len() {\n    _count += 1;\n    }\n\n    // \u76f4\u63a5\u904d\u5386\u5217\u8868\u5143\u7d20\n    _count = 0;\n    for _n in &nums {\n    _count += 1;\n    } \n    // \u6216\u8005\n    // nums.iter().for_each(|_| _count += 1);\n    // let _count = nums.iter().fold(0, |_count, _| _count + 1);\n\n    //  \u62fc\u63a5\u4e24\u4e2a\u5217\u8868\n    let mut nums1 = vec![ 6, 8, 7, 10, 9 ];\n    nums.append(&mut nums1);  // append\uff08\u79fb\u52a8\uff09 \u4e4b\u540e nums1 \u4e3a\u7a7a\uff01\n    // nums.extend(&nums1);   // extend\uff08\u501f\u7528\uff09 nums1 \u80fd\u7ee7\u7eed\u4f7f\u7528 \n    print!(\"\\n\u5c06\u5217\u8868 nums1 \u62fc\u63a5\u5230 nums \u4e4b\u540e\uff0c\u5f97\u5230 nums = \");\n    print_util::print_array(&nums);\n\n    //  \u6392\u5e8f\u5217\u8868\n    nums.sort();\n    print!(\"\\n\u6392\u5e8f\u5217\u8868\u540e nums = \");\n    print_util::print_array(&nums);\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["fn", "main", "(", ")", "{", "//  \u521d\u59cb\u5316\u5217\u8868", "//  \u8bbf\u95ee\u5143\u7d20", "//  \u66f4\u65b0\u5143\u7d20", "//  \u6e05\u7a7a\u5217\u8868", "//  \u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20", "//  \u4e2d\u95f4\u63d2\u5165\u5143\u7d20", "//  \u5220\u9664\u5143\u7d20", "//  \u901a\u8fc7\u7d22\u5f15\u904d\u5386\u5217\u8868", "// \u76f4\u63a5\u904d\u5386\u5217\u8868\u5143\u7d20", "// \u6216\u8005", "// nums.iter().for_each(|_| _count += 1);", "// let _count = nums.iter().fold(0, |_count, _| _count + 1);", "//  \u62fc\u63a5\u4e24\u4e2a\u5217\u8868", "// append\uff08\u79fb\u52a8\uff09 \u4e4b\u540e nums1 \u4e3a\u7a7a\uff01", "// nums.extend(&nums1);   // extend\uff08\u501f\u7528\uff09 nums1 \u80fd\u7ee7\u7eed\u4f7f\u7528 ", "//  \u6392\u5e8f\u5217\u8868", "}", "let", "", "nums", ":", ";", ";", "let", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "let", ";", "for", "_", "", "", "{", "}", ";", "for", "_n", "", "{", "}", "let", ";", ";", ";", ";", ";", ";", ";", "mut", ";", "print", "&", "nums", ")", "num", "=", "println", "=", "0", "print", "&", "nums", ")", "nums", ".", "clear", "print", "&", "nums", ")", "nums", ".", "push", "nums", ".", "push", "nums", ".", "push", "nums", ".", "push", "nums", ".", "push", "print", "&", "nums", ")", "nums", ".", "insert", "print", "&", "nums", ")", "nums", ".", "remove", "print", "&", "nums", ")", "mut", "_count", "=", "0", "in", ".", "len", ";", "_count", "=", "0", "in", "&", "nums", ";", "mut", "nums1", "=", "nums", ".", "append", "print", "&", "nums", ")", "nums", ".", "sort", "print", "&", "nums", ")", "Vec", "=", "vec", "!", "[", "1", ",", "3", ",", "2", ",", "5", ",", "4", "]", "!", "(", ")", "print_util", "::", "print_array", "(", "nums", "[", "1", "]", "!", "(", ")", "nums", "[", "1", "]", "!", "(", ")", "print_util", "::", "print_array", "(", "(", ")", "!", "(", ")", "print_util", "::", "print_array", "(", "(", "1", ")", "(", "3", ")", "(", "2", ")", "(", "5", ")", "(", "4", ")", "!", "(", ")", "print_util", "::", "print_array", "(", "(", "3", ",", "6", ")", "!", "(", ")", "print_util", "::", "print_array", "(", "(", "3", ")", "!", "(", ")", "print_util", "::", "print_array", "(", "0.", ".", "nums", "(", ")", "_count", "+=", "1", "_count", "+=", "1", "vec", "[", "9", "]", "(", ")", "!", "(", ")", "print_util", "::", "print_array", "(", "(", ")", "!", "(", ")", "print_util", "::", "print_array", "(", "<", "i32", ">", "\"", "\u5217\u8868 nums = ", "\"", "\"", "\\n", "\u8bbf\u95ee\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 num = {num}", "\"", "\"", "\u5c06\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\u66f4\u65b0\u4e3a 0 \uff0c\u5f97\u5230 nums = ", "\"", "\"", "\\n", "\u6e05\u7a7a\u5217\u8868\u540e nums = ", "\"", "\"", "\\n", "\u6dfb\u52a0\u5143\u7d20\u540e nums = ", "\"", "\"", "\\n", "\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = ", "\"", "\"", "\\n", "\u5220\u9664\u7d22\u5f15 3 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = ", "\"", "!", "6", ",", "8", ",", "7", ",", "10", ",", "&", "mut", "nums1", "\"", "\\n", "\u5c06\u5217\u8868 nums1 \u62fc\u63a5\u5230 nums \u4e4b\u540e\uff0c\u5f97\u5230 nums = ", "\"", "\"", "\\n", "\u6392\u5e8f\u5217\u8868\u540e nums = ", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 496, "ast_depth": 8, "n_identifiers": 20, "vocab_size": 83}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/swift/chapter_array_and_linkedlist/my_list.swift#20-22", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/swift/chapter_array_and_linkedlist/my_list.swift", "language": "Java"}, "method": {"name": "size", "qualified_name": "codes.swift.chapter_array_and_linkedlist.my_list.swift#size", "start_line": 20, "end_line": 22, "signature": "size()", "original_code": "func size() -> Int {\n        _size\n    }", "doc_comment": "/* \u83b7\u53d6\u5217\u8868\u957f\u5ea6\uff08\u5373\u5f53\u524d\u5143\u7d20\u6570\u91cf\uff09*/"}, "code_tokens": ["func", "size", "(", ")", "->", "Int", "{", "}", "_size"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 15, "ast_depth": 5, "n_identifiers": 3, "vocab_size": 9}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/swift/chapter_array_and_linkedlist/my_list.swift#25-27", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/swift/chapter_array_and_linkedlist/my_list.swift", "language": "Java"}, "method": {"name": "capacity", "qualified_name": "codes.swift.chapter_array_and_linkedlist.my_list.swift#capacity", "start_line": 25, "end_line": 27, "signature": "capacity()", "original_code": "func capacity() -> Int {\n        _capacity\n    }", "doc_comment": "/* \u83b7\u53d6\u5217\u8868\u5bb9\u91cf */"}, "code_tokens": ["func", "capacity", "(", ")", "->", "Int", "{", "}", "_capacity"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 15, "ast_depth": 5, "n_identifiers": 3, "vocab_size": 9}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/swift/chapter_array_and_linkedlist/my_list.swift#30-36", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/swift/chapter_array_and_linkedlist/my_list.swift", "language": "Java"}, "method": {"name": "get", "qualified_name": "codes.swift.chapter_array_and_linkedlist.my_list.swift#get", "start_line": 30, "end_line": 36, "signature": "get(index: Int)", "original_code": "func get(index: Int) -> Int {\n        // \u7d22\u5f15\u5982\u679c\u8d8a\u754c\u5219\u629b\u51fa\u9519\u8bef\uff0c\u4e0b\u540c\n        if index < 0 || index >= _size {\n            fatalError(\"\u7d22\u5f15\u8d8a\u754c\")\n        }\n        return arr[index]\n    }", "doc_comment": "/* \u8bbf\u95ee\u5143\u7d20 */"}, "code_tokens": ["func", "get", "(", ")", "->", "Int", "{", "// \u7d22\u5f15\u5982\u679c\u8d8a\u754c\u5219\u629b\u51fa\u9519\u8bef\uff0c\u4e0b\u540c", "}", "index", "Int", "if", "return", ":", "||", "{", "}", "arr", "[", "index", "]", "index", "<", "0", "index", ">=", "_size", "", "fatalError", "(", ")", "\"", "\u7d22\u5f15\u8d8a\u754c", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 51, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 25}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/swift/chapter_array_and_linkedlist/my_list.swift#39-44", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/swift/chapter_array_and_linkedlist/my_list.swift", "language": "Java"}, "method": {"name": "set", "qualified_name": "codes.swift.chapter_array_and_linkedlist.my_list.swift#set", "start_line": 39, "end_line": 44, "signature": "set(index: Int, num: Int)", "original_code": "func set(index: Int, num: Int) {\n        if index < 0 || index >= _size {\n            fatalError(\"\u7d22\u5f15\u8d8a\u754c\")\n        }\n        arr[index] = num\n    }", "doc_comment": "/* \u66f4\u65b0\u5143\u7d20 */"}, "code_tokens": ["func", "set", "(", ",", ")", "{", "}", "index", "Int", "num", "Int", "if", ":", ":", "||", "{", "}", "=", "num", "index", "<", "0", "index", ">=", "_size", "", "arr", "[", "index", "]", "fatalError", "(", ")", "\"", "\u7d22\u5f15\u8d8a\u754c", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 55, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 25}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/swift/chapter_array_and_linkedlist/my_list.swift#47-55", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/swift/chapter_array_and_linkedlist/my_list.swift", "language": "Java"}, "method": {"name": "add", "qualified_name": "codes.swift.chapter_array_and_linkedlist.my_list.swift#add", "start_line": 47, "end_line": 55, "signature": "add(num: Int)", "original_code": "func add(num: Int) {\n        // \u5143\u7d20\u6570\u91cf\u8d85\u51fa\u5bb9\u91cf\u65f6\uff0c\u89e6\u53d1\u6269\u5bb9\u673a\u5236\n        if _size == _capacity {\n            extendCapacity()\n        }\n        arr[_size] = num\n        // \u66f4\u65b0\u5143\u7d20\u6570\u91cf\n        _size += 1\n    }", "doc_comment": "/* \u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 */"}, "code_tokens": ["func", "add", "(", ")", "{", "// \u5143\u7d20\u6570\u91cf\u8d85\u51fa\u5bb9\u91cf\u65f6\uff0c\u89e6\u53d1\u6269\u5bb9\u673a\u5236", "}", "num", "Int", "if", ":", "_size", "==", "_capacity", "{", "}", "=", "// \u66f4\u65b0\u5143\u7d20\u6570\u91cf", "", "arr", "[", "_size", "]", "num", "_size", "+=", "1", "extendCapacity", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 46, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 23}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/swift/chapter_array_and_linkedlist/my_list.swift#58-147", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/swift/chapter_array_and_linkedlist/my_list.swift", "language": "Java"}, "method": {"name": "insert", "qualified_name": "codes.swift.chapter_array_and_linkedlist.my_list.swift#insert", "start_line": 58, "end_line": 147, "signature": "insert(index: Int, num: Int)", "original_code": "func insert(index: Int, num: Int) {\n        if index < 0 || index >= _size {\n            fatalError(\"\u7d22\u5f15\u8d8a\u754c\")\n        }\n        // \u5143\u7d20\u6570\u91cf\u8d85\u51fa\u5bb9\u91cf\u65f6\uff0c\u89e6\u53d1\u6269\u5bb9\u673a\u5236\n        if _size == _capacity {\n            extendCapacity()\n        }\n        // \u5c06\u7d22\u5f15 index \u4ee5\u53ca\u4e4b\u540e\u7684\u5143\u7d20\u90fd\u5411\u540e\u79fb\u52a8\u4e00\u4f4d\n        for j in sequence(first: _size - 1, next: { $0 >= index + 1 ? $0 - 1 : nil }) {\n            arr[j + 1] = arr[j]\n        }\n        arr[index] = num\n        // \u66f4\u65b0\u5143\u7d20\u6570\u91cf\n        _size += 1\n    }\n\n    /* \u5220\u9664\u5143\u7d20 */\n    @discardableResult\n    func remove(index: Int) -> Int {\n        if index < 0 || index >= _size {\n            fatalError(\"\u7d22\u5f15\u8d8a\u754c\")\n        }\n        let num = arr[index]\n        // \u5c06\u7d22\u5f15 index \u4e4b\u540e\u7684\u5143\u7d20\u90fd\u5411\u524d\u79fb\u52a8\u4e00\u4f4d\n        for j in index ..< (_size - 1) {\n            arr[j] = arr[j + 1]\n        }\n        // \u66f4\u65b0\u5143\u7d20\u6570\u91cf\n        _size -= 1\n        // \u8fd4\u56de\u88ab\u5220\u9664\u5143\u7d20\n        return num\n    }\n\n    /* \u5217\u8868\u6269\u5bb9 */\n    func extendCapacity() {\n        // \u65b0\u5efa\u4e00\u4e2a\u957f\u5ea6\u4e3a\u539f\u6570\u7ec4 extendRatio \u500d\u7684\u65b0\u6570\u7ec4\uff0c\u5e76\u5c06\u539f\u6570\u7ec4\u62f7\u8d1d\u5230\u65b0\u6570\u7ec4\n        arr = arr + Array(repeating: 0, count: _capacity * (extendRatio - 1))\n        // \u66f4\u65b0\u5217\u8868\u5bb9\u91cf\n        _capacity = arr.count\n    }\n\n    /* \u5c06\u5217\u8868\u8f6c\u6362\u4e3a\u6570\u7ec4 */\n    func toArray() -> [Int] {\n        var arr = Array(repeating: 0, count: _size)\n        for i in 0 ..< _size {\n            arr[i] = get(index: i)\n        }\n        return arr\n    }\n}\n\n@main\nenum _MyList {\n    /* Driver Code */\n    static func main() {\n        /* \u521d\u59cb\u5316\u5217\u8868 */\n        let nums = MyList()\n        /* \u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 */\n        nums.add(num: 1)\n        nums.add(num: 3)\n        nums.add(num: 2)\n        nums.add(num: 5)\n        nums.add(num: 4)\n        print(\"\u5217\u8868 nums = \\(nums.toArray()) \uff0c\u5bb9\u91cf = \\(nums.capacity()) \uff0c\u957f\u5ea6 = \\(nums.size())\")\n\n        /* \u4e2d\u95f4\u63d2\u5165\u5143\u7d20 */\n        nums.insert(index: 3, num: 6)\n        print(\"\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = \\(nums.toArray())\")\n\n        /* \u5220\u9664\u5143\u7d20 */\n        nums.remove(index: 3)\n        print(\"\u5220\u9664\u7d22\u5f15 3 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = \\(nums.toArray())\")\n\n        /* \u8bbf\u95ee\u5143\u7d20 */\n        let num = nums.get(index: 1)\n        print(\"\u8bbf\u95ee\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 num = \\(num)\")\n\n        /* \u66f4\u65b0\u5143\u7d20 */\n        nums.set(index: 1, num: 0)\n        print(\"\u5c06\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\u66f4\u65b0\u4e3a 0 \uff0c\u5f97\u5230 nums = \\(nums.toArray())\")\n\n        /* \u6d4b\u8bd5\u6269\u5bb9\u673a\u5236 */\n        for i in 0 ..< 10 {\n            // \u5728 i = 5 \u65f6\uff0c\u5217\u8868\u957f\u5ea6\u5c06\u8d85\u51fa\u5217\u8868\u5bb9\u91cf\uff0c\u6b64\u65f6\u89e6\u53d1\u6269\u5bb9\u673a\u5236\n            nums.add(num: i)\n        }\n        print(\"\u6269\u5bb9\u540e\u7684\u5217\u8868 nums = \\(nums.toArray()) \uff0c\u5bb9\u91cf = \\(nums.capacity()) \uff0c\u957f\u5ea6 = \\(nums.size())\")\n    }\n}", "doc_comment": "/* \u4e2d\u95f4\u63d2\u5165\u5143\u7d20 */"}, "code_tokens": ["func", "insert", "(", ",", ")", "{", "// \u5143\u7d20\u6570\u91cf\u8d85\u51fa\u5bb9\u91cf\u65f6\uff0c\u89e6\u53d1\u6269\u5bb9\u673a\u5236", "// \u5c06\u7d22\u5f15 index \u4ee5\u53ca\u4e4b\u540e\u7684\u5143\u7d20\u90fd\u5411\u540e\u79fb\u52a8\u4e00\u4f4d", "/* \u5220\u9664\u5143\u7d20 */", "", "index", "Int", "num", "Int", "if", "{", "}", "if", "", "{", "}", "for", "j", "in", "", "(", "next", ":", "{", "}", "func", "", "", ":", ":", "||", "", "_size", "==", "_capacity", "", "sequence", ",", "}", ")", "remove", "->", "index", "<", "0", "index", ">=", "_size", "fatalError", "extendCapacity", "first", "_size", "-", "1", "?", ":", "nil", "{", "}", "=", "// \u66f4\u65b0\u5143\u7d20\u6570\u91cf", "@", "discardableResult", "(", ")", "Int", "{", "/* \u5c06\u5217\u8868\u8f6c\u6362\u4e3a\u6570\u7ec4 */", "", "(", ")", "(", ")", ":", "$0", ">=", "$0", "-", "1", "", "arr", "[", "index", "]", "num", "_size", "+=", "1", "index", "Int", "if", "{", "}", "let", "// \u66f4\u65b0\u5143\u7d20\u6570\u91cf", "", "// \u8fd4\u56de\u88ab\u5220\u9664\u5143\u7d20", "", "return", "/* \u5217\u8868\u6269\u5bb9 */", "", "{", "// \u65b0\u5efa\u4e00\u4e2a\u957f\u5ea6\u4e3a\u539f\u6570\u7ec4 extendRatio \u500d\u7684\u65b0\u6570\u7ec4\uff0c\u5e76\u5c06\u539f\u6570\u7ec4\u62f7\u8d1d\u5230\u65b0\u6570\u7ec4", "}", "func", "", "", "\"", "\u7d22\u5f15\u8d8a\u754c", "\"", "index", "+", "1", "=", ":", "||", "", "num", "=", "_size", "-=", "1", "num", "}", "func", "extendCapacity", "// \u66f4\u65b0\u5217\u8868\u5bb9\u91cf", "", "_capacity", "=", "toArray", "->", "arr", "[", "]", "arr", "[", "j", "]", "index", "<", "0", "index", ">=", "_size", "fatalError", "// \u5c06\u7d22\u5f15 index \u4e4b\u540e\u7684\u5143\u7d20\u90fd\u5411\u524d\u79fb\u52a8\u4e00\u4f4d", ".", "<", "{", "}", "(", ")", "arr", "=", "arr", ".", "count", "(", ")", "{", "/* Driver Code */", "}", "j", "+", "1", "(", ")", "arr", "[", "index", "]", "for", "j", "in", "index", ".", "(", ")", "=", "arr", "+", "", "[", "Int", "]", "var", "", "return", "_MyList", "{", "func", "", "{", "/* \u521d\u59cb\u5316\u5217\u8868 */", "}", "\"", "\u7d22\u5f15\u8d8a\u754c", "\"", "_size", "-", "1", "arr", "[", "j", "]", "arr", "[", "]", "Array", "arr", "=", "arr", "}", "}", "enum", "static", "main", "(", ")", "let", "", "", "", "/* \u8bbf\u95ee\u5143\u7d20 */", "", "let", "", "", ")", "j", "+", "1", "(", ")", ".", "<", "_size", "{", "}", "@", "main", "nums", "=", "/* \u4e2d\u95f4\u63d2\u5165\u5143\u7d20 */", ".", "insert", "/* \u5220\u9664\u5143\u7d20 */", ".", "remove", "print", "num", "=", "/* \u66f4\u65b0\u5143\u7d20 */", ".", "set", "/* \u6d4b\u8bd5\u6269\u5bb9\u673a\u5236 */", ".", "repeating", "*", "Array", "for", "i", "in", "0", ".", "=", ".", "add", "print", "nums", "(", "index", ",", "num", ")", "print", "nums", "(", "index", ")", "(", ")", "nums", ".", "get", "print", "nums", "(", "index", ",", "num", ")", "print", "for", "i", "in", "0", ".", "<", "// \u5728 i = 5 \u65f6\uff0c\u5217\u8868\u957f\u5ea6\u5c06\u8d85\u51fa\u5217\u8868\u5bb9\u91cf\uff0c\u6b64\u65f6\u89e6\u53d1\u6269\u5bb9\u673a\u5236", "(", "num", ":", "i", ")", "}", "print", "(", "\"", "\u6269\u5bb9\u540e\u7684\u5217\u8868 nums = ", "\\(", "nums.toArray()) \uff0c\u5bb9\u91cf = ", "\\(", "nums.capacity()) \uff0c\u957f\u5ea6 = ", "\\(", "nums.size())", "\"", ":", "0", ",", "count", ":", "_capacity", "(", ")", "(", "repeating", ",", "count", ")", "arr", "[", "i", "]", "get", ".", "add", "nums", "(", "num", ")", "(", ")", ":", "3", ":", "6", "(", ")", ":", "3", "\"", "\u5220\u9664\u7d22\u5f15 3 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = ", "\\(", "nums.toArray())", "\"", "(", "index", ")", "(", ")", ":", "1", ":", "0", "(", ")", "10", "{", "nums", ".", "add", "extendRatio", "-", "1", ":", "0", ":", "_size", "(", "index", ")", ".", "add", "nums", "(", "num", ")", ":", "4", "\"", "\u5217\u8868 nums = ", "\\(", "nums.toArray()) \uff0c\u5bb9\u91cf = ", "\\(", "nums.capacity()) \uff0c\u957f\u5ea6 = ", "\\(", "nums.size())", "\"", "\"", "\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = ", "\\(", "nums.toArray())", "\"", ":", "1", "\"", "\u8bbf\u95ee\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 num = ", "\\(", "num)", "\"", "\"", "\u5c06\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\u66f4\u65b0\u4e3a 0 \uff0c\u5f97\u5230 nums = ", "\\(", "nums.toArray())", "\"", ":", "i", ".", "add", "nums", "(", "num", ")", ":", "5", "/* \u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 */", ".", "add", "nums", "(", "num", ")", ":", "2", "MyList", "nums", "(", "num", ")", ":", "3", "(", ")", ":", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 654, "ast_depth": 20, "n_identifiers": 33, "vocab_size": 103}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/zig/chapter_array_and_linkedlist/list.zig#9-9", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/zig/chapter_array_and_linkedlist/list.zig", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.zig.chapter_array_and_linkedlist.list.zig#main", "start_line": 9, "end_line": 9, "signature": "main()", "original_code": "pub fn main()", "doc_comment": "// Driver Code"}, "code_tokens": ["pub", "main", "", "fn", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 10, "ast_depth": 4, "n_identifiers": 2, "vocab_size": 6}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/zig/chapter_array_and_linkedlist/my_list.zig#9-28", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/zig/chapter_array_and_linkedlist/my_list.zig", "language": "Java"}, "method": {"name": "MyList", "qualified_name": "codes.zig.chapter_array_and_linkedlist.my_list.zig#MyList", "start_line": 9, "end_line": 28, "signature": "MyList(comptime T: type)", "original_code": "pub fn MyList(comptime T: type) type {\n    return struct {\n        const Self = @This();\n        \n        arr: []T = undefined,                        // \u6570\u7ec4\uff08\u5b58\u50a8\u5217\u8868\u5143\u7d20\uff09\n        arrCapacity: usize = 10,                     // \u5217\u8868\u5bb9\u91cf\n        numSize: usize = 0,                           // \u5217\u8868\u957f\u5ea6\uff08\u5373\u5f53\u524d\u5143\u7d20\u6570\u91cf\uff09\n        extendRatio: usize = 2,                       // \u6bcf\u6b21\u5217\u8868\u6269\u5bb9\u7684\u500d\u6570\n        mem_arena: ?std.heap.ArenaAllocator = null,\n        mem_allocator: std.mem.Allocator = undefined, // \u5185\u5b58\u5206\u914d\u5668\n\n        // \u6784\u9020\u51fd\u6570\uff08\u5206\u914d\u5185\u5b58+\u521d\u59cb\u5316\u5217\u8868\uff09\n        pub fn init(self: *Self, allocator: std.mem.Allocator) !void {\n            if (self.mem_arena == null) {\n                self.mem_arena = std.heap.ArenaAllocator.init(allocator);\n                self.mem_allocator = self.mem_arena.?.allocator();\n            }\n            self.arr = try self.mem_allocator.alloc(T, self.arrCapacity);\n            @memset(self.arr, @as(T, 0));\n        }", "doc_comment": "// \u5217\u8868\u7c7b\u7b80\u6613\u5b9e\u73b0"}, "code_tokens": ["pub", "MyList", "fn", "(", ")", "type", "{", ";", "}", "comptime", "type", "return", "struct", "", "{", "}", ";", "@", "memset", "(", ")", "T", ":", "const", ";", ",", "// \u6570\u7ec4\uff08\u5b58\u50a8\u5217\u8868\u5143\u7d20\uff09", ",", "// \u5217\u8868\u5bb9\u91cf", ",", "// \u5217\u8868\u957f\u5ea6\uff08\u5373\u5f53\u524d\u5143\u7d20\u6570\u91cf\uff09", ",", "// \u6bcf\u6b21\u5217\u8868\u6269\u5bb9\u7684\u500d\u6570", ",", ",", "// \u5185\u5b58\u5206\u914d\u5668", "// \u6784\u9020\u51fd\u6570\uff08\u5206\u914d\u5185\u5b58+\u521d\u59cb\u5316\u5217\u8868\uff09", "", "fn", "", ";", ";", "=", "self", ".", "arr", ",", "@", "as", "Self", "=", "arr", "T", "=", "undefined", "arrCapacity", "=", "10", "numSize", "=", "0", "extendRatio", "=", "2", "mem_arena", ":", "?", "std", ".", "heap", ".", "ArenaAllocator", "=", "null", "mem_allocator", "=", "undefined", "pub", "init", "(", ")", "self", ".", "mem_allocator", "=", "self", ".", "arr", "try", ".", "alloc", "(", "0", ")", "@", "This", ":", "[", "]", ":", "usize", ":", "usize", ":", "usize", ":", "std", ".", "mem", ".", "Allocator", ",", "allocator", ":", ".", "Allocator", "!", "(", ")", "self", ".", "mem_allocator", "(", "T", ",", ")", "T", ",", "(", ")", "self", "*", "Self", "std", ".", "mem", "void", "{", "if", "{", "=", ".", "allocator", "self", ".", "arrCapacity", ":", "(", ")", "self", ".", "mem_arena", ".", "init", "self", ".", "mem_arena", "?", ".", "==", "null", ".", "ArenaAllocator", "(", "allocator", ")", "self", ".", "mem_arena", "std", ".", "heap"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 245, "ast_depth": 12, "n_identifiers": 27, "vocab_size": 60}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/zig/chapter_array_and_linkedlist/my_list.zig#31-34", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/zig/chapter_array_and_linkedlist/my_list.zig", "language": "Java"}, "method": {"name": "deinit", "qualified_name": "codes.zig.chapter_array_and_linkedlist.my_list.zig#deinit", "start_line": 31, "end_line": 34, "signature": "deinit(self: *Self)", "original_code": "pub fn deinit(self: *Self) void {\n            if (self.mem_arena == null) return;\n            self.mem_arena.?.deinit();\n        }", "doc_comment": "// \u6790\u6784\u51fd\u6570\uff08\u91ca\u653e\u5185\u5b58\uff09"}, "code_tokens": ["pub", "deinit", "fn", "(", ")", "void", "{", ";", "}", "self", "Self", "if", ":", "*", "(", ")", "return", ";", ".", "deinit", "(", ")", "==", "null", "self", ".", "mem_arena", "?", ".", "self", ".", "mem_arena"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 50, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 20}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/zig/chapter_array_and_linkedlist/my_list.zig#37-39", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/zig/chapter_array_and_linkedlist/my_list.zig", "language": "Java"}, "method": {"name": "size", "qualified_name": "codes.zig.chapter_array_and_linkedlist.my_list.zig#size", "start_line": 37, "end_line": 39, "signature": "size(self: *Self)", "original_code": "pub fn size(self: *Self) usize {\n            return self.numSize;\n        }", "doc_comment": "// \u83b7\u53d6\u5217\u8868\u957f\u5ea6\uff08\u5373\u5f53\u524d\u5143\u7d20\u6570\u91cf\uff09"}, "code_tokens": ["pub", "size", "fn", "(", ")", "usize", "{", "}", "self", "Self", "return", ";", ":", "*", "self", ".", "numSize"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 27, "ast_depth": 6, "n_identifiers": 6, "vocab_size": 16}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/zig/chapter_array_and_linkedlist/my_list.zig#42-44", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/zig/chapter_array_and_linkedlist/my_list.zig", "language": "Java"}, "method": {"name": "capacity", "qualified_name": "codes.zig.chapter_array_and_linkedlist.my_list.zig#capacity", "start_line": 42, "end_line": 44, "signature": "capacity(self: *Self)", "original_code": "pub fn capacity(self: *Self) usize {\n            return self.arrCapacity;\n        }", "doc_comment": "// \u83b7\u53d6\u5217\u8868\u5bb9\u91cf"}, "code_tokens": ["pub", "capacity", "fn", "(", ")", "usize", "{", "}", "self", "Self", "return", ";", ":", "*", "self", ".", "arrCapacity"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 27, "ast_depth": 6, "n_identifiers": 6, "vocab_size": 16}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/zig/chapter_array_and_linkedlist/my_list.zig#47-51", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/zig/chapter_array_and_linkedlist/my_list.zig", "language": "Java"}, "method": {"name": "get", "qualified_name": "codes.zig.chapter_array_and_linkedlist.my_list.zig#get", "start_line": 47, "end_line": 51, "signature": "get(self: *Self, index: usize)", "original_code": "pub fn get(self: *Self, index: usize) T {\n            // \u7d22\u5f15\u5982\u679c\u8d8a\u754c\u5219\u629b\u51fa\u5f02\u5e38\uff0c\u4e0b\u540c\n            if (index < 0 or index >= self.size()) @panic(\"\u7d22\u5f15\u8d8a\u754c\");\n            return self.arr[index];\n        }", "doc_comment": "// \u8bbf\u95ee\u5143\u7d20"}, "code_tokens": ["pub", "get", "fn", "(", ",", ")", "T", "{", "// \u7d22\u5f15\u5982\u679c\u8d8a\u754c\u5219\u629b\u51fa\u5f02\u5e38\uff0c\u4e0b\u540c", "}", "self", "Self", "index", "usize", "if", ";", "return", ";", ":", "*", ":", "(", ")", "[", "index", "]", ">=", "@", "panic", "self", ".", "arr", "index", "<", "index", "self", ".", "size", "(", ")", "0", "or", "(", ")", "\"", "\u7d22\u5f15\u8d8a\u754c", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 71, "ast_depth": 9, "n_identifiers": 11, "vocab_size": 32}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/zig/chapter_array_and_linkedlist/my_list.zig#54-58", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/zig/chapter_array_and_linkedlist/my_list.zig", "language": "Java"}, "method": {"name": "set", "qualified_name": "codes.zig.chapter_array_and_linkedlist.my_list.zig#set", "start_line": 54, "end_line": 58, "signature": "set(self: *Self, index: usize, num: T)", "original_code": "pub fn set(self: *Self, index: usize, num: T) void {\n            // \u7d22\u5f15\u5982\u679c\u8d8a\u754c\u5219\u629b\u51fa\u5f02\u5e38\uff0c\u4e0b\u540c\n            if (index < 0 or index >= self.size()) @panic(\"\u7d22\u5f15\u8d8a\u754c\");\n            self.arr[index] = num;\n        }", "doc_comment": "// \u66f4\u65b0\u5143\u7d20"}, "code_tokens": ["pub", "set", "fn", "(", ",", ",", ")", "void", "{", "// \u7d22\u5f15\u5982\u679c\u8d8a\u754c\u5219\u629b\u51fa\u5f02\u5e38\uff0c\u4e0b\u540c", "}", "self", "Self", "index", "usize", "num", "T", "if", ";", ";", ":", "*", ":", ":", "(", ")", "=", "num", ">=", "@", "panic", "[", "index", "]", "index", "<", "index", "self", ".", "size", "(", ")", "self", ".", "arr", "0", "or", "(", ")", "\"", "\u7d22\u5f15\u8d8a\u754c", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 79, "ast_depth": 9, "n_identifiers": 13, "vocab_size": 34}}
