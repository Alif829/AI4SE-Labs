{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/c/chapter_hashing/hash_map_chaining.c#36-36", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/c/chapter_hashing/hash_map_chaining.c", "language": "Java"}, "method": {"name": "extend", "qualified_name": "codes.c.chapter_hashing.hash_map_chaining.c#extend", "start_line": 36, "end_line": 36, "signature": "extend(hashMapChaining *hashmap)", "original_code": "void extend(hashMapChaining *hashmap);", "doc_comment": "// \u51fd\u6570\u58f0\u660e"}, "code_tokens": ["void", "extend", ";", "(", ")", "hashMapChaining", "hashmap", "*"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 13, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 8}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/c/chapter_hashing/hash_map_chaining.c#57-70", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/c/chapter_hashing/hash_map_chaining.c", "language": "Java"}, "method": {"name": "delHashMapChaining", "qualified_name": "codes.c.chapter_hashing.hash_map_chaining.c#delHashMapChaining", "start_line": 57, "end_line": 70, "signature": "delHashMapChaining(hashMapChaining *hashmap)", "original_code": "void delHashMapChaining(hashMapChaining *hashmap) {\n    for (int i = 0; i < hashmap->capacity; i++) {\n        Pair *pair = &hashmap->buckets[i];\n        Node *node = pair->node;\n        while (node != NULL) {\n            Node *temp = node;\n            node = node->next;\n            free(temp->val);\n            free(temp);\n        }\n    }\n    free(hashmap->buckets);\n    free(hashmap);\n}", "doc_comment": "/* \u9500\u6bc1\u54c8\u5e0c\u8868 */"}, "code_tokens": ["void", "delHashMapChaining", "(", ")", "{", "}", "hashMapChaining", "hashmap", "for", "(", ";", ")", ";", ";", "*", ";", "i", "<", "i", "++", "{", "}", "free", "free", "int", "i", "=", "0", "hashmap", "->", "capacity", ";", ";", "while", "(", ")", "(", "hashmap", ")", "&", "Node", "*", "(", ")", "{", "}", "hashmap", "->", "buckets", "Pair", "*", "pair", "=", "hashmap", "->", "node", "=", "node", "!=", "NULL", ";", ";", ";", ";", "buckets", "[", "i", "]", "pair", "->", "node", "Node", "*", "node", "=", "free", "free", "temp", "=", "node", "node", "->", "next", "(", ")", "(", "temp", ")", "temp", "->", "val"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 139, "ast_depth": 12, "n_identifiers": 14, "vocab_size": 34}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/c/chapter_hashing/hash_map_chaining.c#73-75", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/c/chapter_hashing/hash_map_chaining.c", "language": "Java"}, "method": {"name": "hashFunc", "qualified_name": "codes.c.chapter_hashing.hash_map_chaining.c#hashFunc", "start_line": 73, "end_line": 75, "signature": "hashFunc(hashMapChaining *hashmap, const int key)", "original_code": "int hashFunc(hashMapChaining *hashmap, const int key) {\n    return key % hashmap->capacity;\n}", "doc_comment": "/* \u54c8\u5e0c\u51fd\u6570 */"}, "code_tokens": ["hashFunc", "int", "(", ",", ")", "{", "}", "hashMapChaining", "hashmap", "const", "int", "key", "return", ";", "*", "key", "%", "hashmap", "->", "capacity"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 32, "ast_depth": 7, "n_identifiers": 5, "vocab_size": 17}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/c/chapter_hashing/hash_map_chaining.c#78-80", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/c/chapter_hashing/hash_map_chaining.c", "language": "Java"}, "method": {"name": "loadFactor", "qualified_name": "codes.c.chapter_hashing.hash_map_chaining.c#loadFactor", "start_line": 78, "end_line": 80, "signature": "loadFactor(hashMapChaining *hashmap)", "original_code": "double loadFactor(hashMapChaining *hashmap) {\n    return (double)hashmap->size / (double)hashmap->capacity;\n}", "doc_comment": "/* \u8d1f\u8f7d\u56e0\u5b50 */"}, "code_tokens": ["loadFactor", "double", "(", ")", "{", "}", "hashMapChaining", "hashmap", "return", ";", "*", "(", ")", "double", "hashmap", "->", "size", "/", "(", ")", "double", "hashmap", "->", "capacity"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 39, "ast_depth": 10, "n_identifiers": 4, "vocab_size": 15}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/c/chapter_hashing/hash_map_chaining.c#83-93", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/c/chapter_hashing/hash_map_chaining.c", "language": "Java"}, "method": {"name": "char", "qualified_name": "codes.c.chapter_hashing.hash_map_chaining.c#char", "start_line": 83, "end_line": 93, "signature": "char(hashMapChaining *hashmap, const int key)", "original_code": "const char *get(hashMapChaining *hashmap, const int key) {\n    int index = hashFunc(hashmap, key);\n    Pair *pair = &hashmap->buckets[index];\n    Node *node = pair->node;\n    while (node != NULL) {\n        if (node->key == key) {\n            return node->val;\n        }\n    }\n    return NULL;\n}", "doc_comment": "/* \u67e5\u8be2\u64cd\u4f5c */"}, "code_tokens": ["const", "char", "*", "get", "(", ",", ")", "{", "}", "hashMapChaining", "hashmap", "const", "int", "key", ";", ";", ";", "while", "return", "NULL", ";", "*", "int", "index", "=", "&", "Node", "*", "(", ")", "{", "}", "hashFunc", "Pair", "*", "pair", "=", "hashmap", "->", "node", "=", "node", "!=", "NULL", "if", "(", "hashmap", ",", "key", ")", "buckets", "[", "index", "]", "pair", "->", "node", "(", ")", "{", "}", "node", "->", "return", ";", "key", "==", "key", "node", "->", "val"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 107, "ast_depth": 10, "n_identifiers": 14, "vocab_size": 33}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/c/chapter_hashing/hash_map_chaining.c#96-134", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/c/chapter_hashing/hash_map_chaining.c", "language": "Java"}, "method": {"name": "put", "qualified_name": "codes.c.chapter_hashing.hash_map_chaining.c#put", "start_line": 96, "end_line": 134, "signature": "put(hashMapChaining *hashmap, const int key, char *val)", "original_code": "void put(hashMapChaining *hashmap, const int key, char *val) {\n    if (loadFactor(hashmap) > hashmap->loadThres) {\n        extend(hashmap);\n    }\n    int index = hashFunc(hashmap, key);\n\n    // \u5148\u4e3a\u65b0\u8282\u70b9\u5206\u914d\u7a7a\u95f4\u518d\u8d4b\u503c\n    Node *newNode = (Node *)malloc(sizeof(Node));\n    memset(newNode, 0, sizeof(Node));\n    newNode->key = key;\n    newNode->val = (char *)malloc(strlen(val) + 1);\n    strcpy(newNode->val, val);\n    newNode->val[strlen(val)] = '\\0';\n\n    Pair *pair = &hashmap->buckets[index];\n    Node *node = pair->node;\n    if (node == NULL) {\n        hashmap->buckets[index].node = newNode;\n        hashmap->size++;\n        return;\n    }\n    while (node != NULL) {\n        if (node->key == key) {\n            // \u91ca\u653e\u5148\u524d\u5206\u914d\u7684\u5185\u5b58\n            free(node->val);\n            // \u66f4\u65b0\u8282\u70b9\u7684\u503c\n            node->val = (char *)malloc(strlen(val) + 1);\n            strcpy(node->val, val);\n            node->val[strlen(val)] = '\\0';\n            return;\n        }\n        if (node->next == NULL) {\n            break;\n        }\n        node = node->next;\n    }\n    node->next = newNode;\n    hashmap->size++;\n}", "doc_comment": "/* \u6dfb\u52a0\u64cd\u4f5c */"}, "code_tokens": ["void", "put", "(", ",", ",", ")", "{", "// \u5148\u4e3a\u65b0\u8282\u70b9\u5206\u914d\u7a7a\u95f4\u518d\u8d4b\u503c", "}", "hashMapChaining", "hashmap", "const", "int", "key", "val", "if", ";", ";", ";", ";", ";", ";", ";", ";", ";", "if", "while", ";", ";", "*", "char", "*", "(", ")", "{", "}", "int", "index", "=", "Node", "*", "memset", "newNode", "->", "newNode", "->", "strcpy", "newNode", "->", "&", "Node", "*", "(", ")", "{", "}", "(", ")", "{", "}", "node", "->", "hashmap", "->", ">", ";", "hashFunc", "newNode", "=", "(", "newNode", ",", "0", ",", ")", "key", "=", "key", "val", "=", "(", ",", "val", ")", "=", "'\\0'", "Pair", "*", "pair", "=", "hashmap", "->", "node", "=", "node", "==", "NULL", ";", ";", "return", ";", "node", "!=", "NULL", "if", "if", ";", "next", "=", "newNode", "size", "++", "loadFactor", "hashmap", "->", "loadThres", "extend", "(", "hashmap", ",", "key", ")", "(", "", "sizeof", "(", ")", "newNode", "->", "val", "val", "[", "]", "buckets", "[", "index", "]", "pair", "->", "node", "hashmap", "->", "hashmap", "->", "(", ")", "{", "// \u91ca\u653e\u5148\u524d\u5206\u914d\u7684\u5185\u5b58", "// \u66f4\u65b0\u8282\u70b9\u7684\u503c", "}", "(", ")", "{", "}", "node", "=", "(", "hashmap", ")", "(", "hashmap", ")", "Node", "*", "(", "Node", ")", "char", "*", "malloc", "strlen", "=", "newNode", "size", "++", "node", "->", ";", ";", ";", ";", "return", ";", "node", "->", "break", ";", "node", "->", "next", ")", "malloc", "(", ")", "(", "val", ")", ".", "node", "key", "==", "key", "free", "node", "->", "strcpy", "node", "->", "next", "==", "NULL", "(", ")", "+", "1", "buckets", "[", "index", "]", "(", ")", "val", "=", "(", ",", "val", ")", "=", "'\\0'", "sizeof", "strlen", "node", "->", "val", "(", ")", "node", "->", "val", "val", "[", "]", "(", "Node", ")", "(", "val", ")", "char", "*", "malloc", "strlen", "(", ")", "(", "val", ")", "+", "1", "strlen", "(", "val", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 401, "ast_depth": 17, "n_identifiers": 25, "vocab_size": 58}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/c/chapter_hashing/hash_map_chaining.c#137-161", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/c/chapter_hashing/hash_map_chaining.c", "language": "Java"}, "method": {"name": "removeItem", "qualified_name": "codes.c.chapter_hashing.hash_map_chaining.c#removeItem", "start_line": 137, "end_line": 161, "signature": "removeItem(hashMapChaining *hashmap, int key)", "original_code": "void removeItem(hashMapChaining *hashmap, int key) {\n    int index = hashFunc(hashmap, key);\n    Pair *pair = &hashmap->buckets[index];\n    Node *node = pair->node;\n    // \u4fdd\u5b58\u540e\u7ee7\u7684\u8282\u70b9\n    Node *prev = NULL;\n    while (node != NULL) {\n        if (node->key == key) {\n            // \u5982\u679c\u8981\u5220\u9664\u7684\u8282\u70b9\u662f\u6876\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\n            if (prev == NULL) {\n                pair->node = node->next;\n            } else {\n                prev->next = node->next;\n            }\n            // \u91ca\u653e\u5185\u5b58\n            free(node->val);\n            free(node);\n            hashmap->size--;\n            return;\n        }\n        prev = node;\n        node = node->next;\n    }\n    return;\n}", "doc_comment": "/* \u5220\u9664\u64cd\u4f5c */"}, "code_tokens": ["void", "removeItem", "(", ",", ")", "{", "// \u4fdd\u5b58\u540e\u7ee7\u7684\u8282\u70b9", "}", "hashMapChaining", "hashmap", "key", ";", ";", ";", ";", "while", "return", ";", "*", "int", "int", "index", "=", "&", "Node", "*", "Node", "*", "(", ")", "{", "}", "hashFunc", "Pair", "*", "pair", "=", "hashmap", "->", "node", "=", "prev", "=", "NULL", "node", "!=", "NULL", "if", ";", ";", "(", "hashmap", ",", "key", ")", "buckets", "[", "index", "]", "pair", "->", "node", "(", ")", "{", "// \u5982\u679c\u8981\u5220\u9664\u7684\u8282\u70b9\u662f\u6876\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9", "// \u91ca\u653e\u5185\u5b58", "}", "prev", "=", "node", "node", "=", "node", "->", "if", "else", ";", ";", ";", "return", ";", "node", "->", "next", "key", "==", "key", "(", ")", "{", "}", "{", "}", "free", "free", "hashmap", "->", "prev", "==", "NULL", ";", ";", "(", ")", "(", "node", ")", "size", "--", "pair", "->", "prev", "->", "node", "->", "val", "node", "=", "next", "=", "node", "->", "next", "node", "->", "next"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 192, "ast_depth": 14, "n_identifiers": 16, "vocab_size": 41}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/c/chapter_hashing/hash_map_chaining.c#164-195", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/c/chapter_hashing/hash_map_chaining.c", "language": "Java"}, "method": {"name": "extend", "qualified_name": "codes.c.chapter_hashing.hash_map_chaining.c#extend", "start_line": 164, "end_line": 195, "signature": "extend(hashMapChaining *hashmap)", "original_code": "void extend(hashMapChaining *hashmap) {\n    // \u6682\u5b58\u539f\u54c8\u5e0c\u8868\n    Pair *oldBuckets = hashmap->buckets;\n    int oldCapacity = hashmap->capacity;\n\n    // \u521b\u5efa\u65b0\u7684\u54c8\u5e0c\u8868\uff0c\u91cd\u65b0\u5206\u914d\u4e00\u6bb5\u7a7a\u95f4\n    hashmap->capacity *= hashmap->extendRatio;\n    hashmap->buckets = (Pair *)malloc(sizeof(Pair) * hashmap->capacity);\n    memset(hashmap->buckets, 0, sizeof(Pair) * hashmap->capacity);\n    hashmap->size = 0;\n\n    // \u5c06\u539f\u54c8\u5e0c\u8868\u4e2d\u7684\u952e\u503c\u5bf9\u91cd\u65b0\u54c8\u5e0c\u5230\u65b0\u7684\u54c8\u5e0c\u8868\u4e2d\n    for (int i = 0; i < oldCapacity; i++) {\n        Node *node = oldBuckets[i].node;\n        while (node != NULL) {\n            put(hashmap, node->key, node->val);\n            node = node->next;\n        }\n    }\n\n    // \u91ca\u653e\u539f\u54c8\u5e0c\u8868\u7684\u5185\u5b58\n    for (int i = 0; i < oldCapacity; i++) {\n        Node *node = oldBuckets[i].node;\n        while (node != NULL) {\n            Node *temp = node;\n            node = node->next;\n            free(temp->val);\n            free(temp);\n        }\n    }\n    free(oldBuckets);\n}", "doc_comment": "/* \u6269\u5bb9\u54c8\u5e0c\u8868 */"}, "code_tokens": ["void", "extend", "(", ")", "{", "// \u6682\u5b58\u539f\u54c8\u5e0c\u8868", "// \u521b\u5efa\u65b0\u7684\u54c8\u5e0c\u8868\uff0c\u91cd\u65b0\u5206\u914d\u4e00\u6bb5\u7a7a\u95f4", "// \u5c06\u539f\u54c8\u5e0c\u8868\u4e2d\u7684\u952e\u503c\u5bf9\u91cd\u65b0\u54c8\u5e0c\u5230\u65b0\u7684\u54c8\u5e0c\u8868\u4e2d", "// \u91ca\u653e\u539f\u54c8\u5e0c\u8868\u7684\u5185\u5b58", "}", "hashMapChaining", "hashmap", ";", ";", ";", ";", ";", ";", "for", "(", ";", ")", "for", "(", ";", ")", ";", "*", "Pair", "*", "int", "oldCapacity", "=", "hashmap", "->", "hashmap", "->", "memset", "hashmap", "->", ";", "i", "<", "oldCapacity", "i", "++", "{", "}", ";", "i", "<", "oldCapacity", "i", "++", "{", "}", "free", "oldBuckets", "=", "hashmap", "->", "capacity", "capacity", "*=", "buckets", "=", "(", ",", "0", ",", ")", "size", "=", "0", "int", "i", "=", "0", ";", "while", "int", "i", "=", "0", ";", "while", "(", "oldBuckets", ")", "hashmap", "->", "buckets", "hashmap", "->", "extendRatio", "(", "", "hashmap", "->", "buckets", "*", "Node", "*", "(", ")", "{", "}", "Node", "*", "(", ")", "{", "}", "Pair", "*", "sizeof", "hashmap", "->", "capacity", "node", "=", "node", "!=", "NULL", ";", ";", "node", "=", "node", "!=", "NULL", ";", ";", ";", ";", ")", "malloc", "(", "Pair", ")", ".", "node", "put", "node", "=", ".", "node", "Node", "*", "node", "=", "free", "free", "(", ")", "oldBuckets", "[", "i", "]", "(", "hashmap", ",", ",", ")", "node", "->", "next", "oldBuckets", "[", "i", "]", "temp", "=", "node", "node", "->", "next", "(", ")", "(", "temp", ")", "*", "node", "->", "key", "node", "->", "val", "temp", "->", "val", "sizeof", "hashmap", "->", "capacity", "(", "Pair", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 296, "ast_depth": 14, "n_identifiers": 22, "vocab_size": 49}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/c/chapter_hashing/hash_map_chaining.c#198-212", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/c/chapter_hashing/hash_map_chaining.c", "language": "Java"}, "method": {"name": "print", "qualified_name": "codes.c.chapter_hashing.hash_map_chaining.c#print", "start_line": 198, "end_line": 212, "signature": "print(hashMapChaining *hashmap)", "original_code": "void print(hashMapChaining *hashmap) {\n    for (int i = 0; i < hashmap->capacity; i++) {\n        printf(\"[\");\n        Pair *pair = &hashmap->buckets[i];\n        Node *node = pair->node;\n        while (node != NULL) {\n            if (node->val != NULL) {\n                printf(\"%d->%s, \", node->key, node->val);\n            }\n            node = node->next;\n        }\n        printf(\"]\\n\");\n    }\n    return;\n}", "doc_comment": "/* \u6253\u5370\u54c8\u5e0c\u8868 */"}, "code_tokens": ["void", "print", "(", ")", "{", "}", "hashMapChaining", "hashmap", "for", "(", ";", ")", "return", ";", "*", ";", "i", "<", "i", "++", "{", "}", "int", "i", "=", "0", "hashmap", "->", "capacity", ";", ";", ";", "while", ";", "printf", "&", "Node", "*", "(", ")", "{", "}", "printf", "(", ")", "Pair", "*", "pair", "=", "hashmap", "->", "node", "=", "node", "!=", "NULL", "if", ";", "(", ")", "\"", "[", "\"", "buckets", "[", "i", "]", "pair", "->", "node", "(", ")", "{", "}", "node", "=", "\"", "]", "\\n", "\"", "node", "->", ";", "node", "->", "next", "val", "!=", "NULL", "printf", "(", ",", ",", ")", "\"", "%d->%s, ", "\"", "node", "->", "key", "node", "->", "val"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 154, "ast_depth": 14, "n_identifiers": 14, "vocab_size": 40}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/c/chapter_hashing/hash_map_chaining.c#215-242", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/c/chapter_hashing/hash_map_chaining.c", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.c.chapter_hashing.hash_map_chaining.c#main", "start_line": 215, "end_line": 242, "signature": "main()", "original_code": "int main() {\n    /* \u521d\u59cb\u5316\u54c8\u5e0c\u8868 */\n    hashMapChaining *map = newHashMapChaining();\n\n    /* \u6dfb\u52a0\u64cd\u4f5c */\n    // \u5728\u54c8\u5e0c\u8868\u4e2d\u6dfb\u52a0\u952e\u503c\u5bf9 (key, value)\n    put(map, 12836, \"\u5c0f\u54c8\");\n    put(map, 15937, \"\u5c0f\u5570\");\n    put(map, 16750, \"\u5c0f\u7b97\");\n    put(map, 13276, \"\u5c0f\u6cd5\");\n    put(map, 10583, \"\u5c0f\u9e2d\");\n    printf(\"\\n\u6dfb\u52a0\u5b8c\u6210\u540e\uff0c\u54c8\u5e0c\u8868\u4e3a\\nKey -> Value\\n\");\n    print(map);\n\n    /* \u67e5\u8be2\u64cd\u4f5c */\n    // \u5411\u54c8\u5e0c\u8868\u8f93\u5165\u952e key \uff0c\u5f97\u5230\u503c value\n    const char *name = get(map, 13276);\n    printf(\"\\n\u8f93\u5165\u5b66\u53f7 13276 \uff0c\u67e5\u8be2\u5230\u59d3\u540d %s\\n\", name);\n\n    /* \u5220\u9664\u64cd\u4f5c */\n    // \u5728\u54c8\u5e0c\u8868\u4e2d\u5220\u9664\u952e\u503c\u5bf9 (key, value)\n    removeItem(map, 12836);\n    printf(\"\\n\u5220\u9664 12836 \u540e\uff0c\u54c8\u5e0c\u8868\u4e3a\\nKey -> Value\\n\");\n    print(map);\n\n    delHashMapChaining(map);\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "/* \u521d\u59cb\u5316\u54c8\u5e0c\u8868 */", "/* \u6dfb\u52a0\u64cd\u4f5c */", "// \u5728\u54c8\u5e0c\u8868\u4e2d\u6dfb\u52a0\u952e\u503c\u5bf9 (key, value)", "/* \u67e5\u8be2\u64cd\u4f5c */", "// \u5411\u54c8\u5e0c\u8868\u8f93\u5165\u952e key \uff0c\u5f97\u5230\u503c value", "/* \u5220\u9664\u64cd\u4f5c */", "// \u5728\u54c8\u5e0c\u8868\u4e2d\u5220\u9664\u952e\u503c\u5bf9 (key, value)", "}", ";", ";", ";", ";", ";", ";", ";", ";", "const", ";", ";", ";", ";", ";", ";", "return", "0", ";", "hashMapChaining", "*", "put", "put", "put", "put", "put", "printf", "print", "char", "=", "printf", "removeItem", "printf", "print", "delHashMapChaining", "map", "=", "(", "map", ",", "12836", ",", ")", "(", "map", ",", "15937", ",", ")", "(", "map", ",", "16750", ",", ")", "(", "map", ",", "13276", ",", ")", "(", "map", ",", "10583", ",", ")", "(", ")", "(", "map", ")", "*", "name", "get", "(", ",", "name", ")", "(", "map", ",", "12836", ")", "(", ")", "(", "map", ")", "(", "map", ")", "newHashMapChaining", "\"", "\u5c0f\u54c8", "\"", "\"", "\u5c0f\u5570", "\"", "\"", "\u5c0f\u7b97", "\"", "\"", "\u5c0f\u6cd5", "\"", "\"", "\u5c0f\u9e2d", "\"", "\"", "\\n", "\u6dfb\u52a0\u5b8c\u6210\u540e\uff0c\u54c8\u5e0c\u8868\u4e3a", "\\n", "Key -> Value", "\\n", "\"", "(", "map", ",", "13276", ")", "\"", "\\n", "\u8f93\u5165\u5b66\u53f7 13276 \uff0c\u67e5\u8be2\u5230\u59d3\u540d %s", "\\n", "\"", "\"", "\\n", "\u5220\u9664 12836 \u540e\uff0c\u54c8\u5e0c\u8868\u4e3a", "\\n", "Key -> Value", "\\n", "\"", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 206, "ast_depth": 9, "n_identifiers": 12, "vocab_size": 47}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/cpp/chapter_hashing/hash_map_chaining.cpp#45-51", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/cpp/chapter_hashing/hash_map_chaining.cpp", "language": "Java"}, "method": {"name": "get", "qualified_name": "codes.cpp.chapter_hashing.hash_map_chaining.cpp#get", "start_line": 45, "end_line": 51, "signature": "get(int key)", "original_code": "string get(int key) {\n        int index = hashFunc(key);\n        // \u904d\u5386\u6876\uff0c\u82e5\u627e\u5230 key \u5219\u8fd4\u56de\u5bf9\u5e94 val\n        for (Pair *pair : buckets[index]) {\n            if (pair->key == key) {\n                return pair->val;\n            }", "doc_comment": "/* \u67e5\u8be2\u64cd\u4f5c */"}, "code_tokens": ["string", "get", "(", ")", "{", "// \u904d\u5386\u6876\uff0c\u82e5\u627e\u5230 key \u5219\u8fd4\u56de\u5bf9\u5e94 val", "}", "key", ";", "for", "(", ";", "int", "int", "index", "=", ":", ")", "{", "if", "{", "return", "pair", "->", "val", "hashFunc", "Pair", "*", "pair", "buckets", "[", "index", "]", "(", ")", "(", "key", ")", "pair", "->", "key", "==", "key"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 62, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 26}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/cpp/chapter_hashing/hash_map_chaining.cpp#58-90", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/cpp/chapter_hashing/hash_map_chaining.cpp", "language": "Java"}, "method": {"name": "put", "qualified_name": "codes.cpp.chapter_hashing.hash_map_chaining.cpp#put", "start_line": 58, "end_line": 90, "signature": "put(int key, string val)", "original_code": "void put(int key, string val) {\n        // \u5f53\u8d1f\u8f7d\u56e0\u5b50\u8d85\u8fc7\u9608\u503c\u65f6\uff0c\u6267\u884c\u6269\u5bb9\n        if (loadFactor() > loadThres) {\n            extend();\n        }\n        int index = hashFunc(key);\n        // \u904d\u5386\u6876\uff0c\u82e5\u9047\u5230\u6307\u5b9a key \uff0c\u5219\u66f4\u65b0\u5bf9\u5e94 val \u5e76\u8fd4\u56de\n        for (Pair *pair : buckets[index]) {\n            if (pair->key == key) {\n                pair->val = val;\n                return;\n            }\n        }\n        // \u82e5\u65e0\u8be5 key \uff0c\u5219\u5c06\u952e\u503c\u5bf9\u6dfb\u52a0\u81f3\u5c3e\u90e8\n        buckets[index].push_back(new Pair(key, val));\n        size++;\n    }\n\n    /* \u5220\u9664\u64cd\u4f5c */\n    void remove(int key) {\n        int index = hashFunc(key);\n        auto &bucket = buckets[index];\n        // \u904d\u5386\u6876\uff0c\u4ece\u4e2d\u5220\u9664\u952e\u503c\u5bf9\n        for (int i = 0; i < bucket.size(); i++) {\n            if (bucket[i]->key == key) {\n                Pair *tmp = bucket[i];\n                bucket.erase(bucket.begin() + i); // \u4ece\u4e2d\u5220\u9664\u952e\u503c\u5bf9\n                delete tmp;                       // \u91ca\u653e\u5185\u5b58\n                size--;\n                return;\n            }\n        }\n    }", "doc_comment": "/* \u6dfb\u52a0\u64cd\u4f5c */"}, "code_tokens": ["void", "put", "(", ",", ")", "{", "// \u5f53\u8d1f\u8f7d\u56e0\u5b50\u8d85\u8fc7\u9608\u503c\u65f6\uff0c\u6267\u884c\u6269\u5bb9", "// \u904d\u5386\u6876\uff0c\u82e5\u9047\u5230\u6307\u5b9a key \uff0c\u5219\u66f4\u65b0\u5bf9\u5e94 val \u5e76\u8fd4\u56de", "}", "key", "string", "val", "if", ";", "for", "(", ";", "return", ";", "// \u82e5\u65e0\u8be5 key \uff0c\u5219\u5c06\u952e\u503c\u5bf9\u6dfb\u52a0\u81f3\u5c3e\u90e8", "/* \u5220\u9664\u64cd\u4f5c */", ")", "int", "(", ")", "{", "}", "int", "index", "=", ":", ")", "{", "if", "{", "pair", "->", "}", "}", ";", "}", "void", "remove", "{", ";", ";", "// \u904d\u5386\u6876\uff0c\u4ece\u4e2d\u5220\u9664\u952e\u503c\u5bf9", "for", "++", "{", "}", ">", "loadThres", ";", "hashFunc", "Pair", "*", "pair", "buckets", "[", "index", "]", "(", ")", "val", "=", "val", "++", "(", ")", "int", "index", "=", "auto", "&", "(", ")", "i", "if", "loadFactor", "extend", "(", "key", ")", "pair", "->", ".", "push_back", ";", "size", "key", "hashFunc", "bucket", "=", "int", "i", "=", "0", ";", "i", "<", "bucket", ".", "size", "(", ";", "(", ")", "{", "// \u4ece\u4e2d\u5220\u9664\u952e\u503c\u5bf9", "// \u91ca\u653e\u5185\u5b58", "}", "(", ")", "(", ")", "key", "==", "key", "buckets", "[", "index", "]", "(", ")", "int", "(", "key", ")", "buckets", "[", "index", "]", "==", "key", ";", ";", "delete", ";", ";", "return", ";", "new", "Pair", "bucket", "[", "i", "]", "->", "key", "Pair", "*", "bucket", ".", "erase", "tmp", "size", "--", "(", "key", ",", "val", ")", "tmp", "=", "(", ")", "bucket", "[", "i", "]", "+", "i", "bucket", ".", "begin", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 255, "ast_depth": 14, "n_identifiers": 21, "vocab_size": 56}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/cpp/chapter_hashing/hash_map_chaining.cpp#93-150", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/cpp/chapter_hashing/hash_map_chaining.cpp", "language": "Java"}, "method": {"name": "extend", "qualified_name": "codes.cpp.chapter_hashing.hash_map_chaining.cpp#extend", "start_line": 93, "end_line": 150, "signature": "extend()", "original_code": "void extend() {\n        // \u6682\u5b58\u539f\u54c8\u5e0c\u8868\n        vector<vector<Pair *>> bucketsTmp = buckets;\n        // \u521d\u59cb\u5316\u6269\u5bb9\u540e\u7684\u65b0\u54c8\u5e0c\u8868\n        capacity *= extendRatio;\n        buckets.clear();\n        buckets.resize(capacity);\n        size = 0;\n        // \u5c06\u952e\u503c\u5bf9\u4ece\u539f\u54c8\u5e0c\u8868\u642c\u8fd0\u81f3\u65b0\u54c8\u5e0c\u8868\n        for (auto &bucket : bucketsTmp) {\n            for (Pair *pair : bucket) {\n                put(pair->key, pair->val);\n                // \u91ca\u653e\u5185\u5b58\n                delete pair;\n            }\n        }\n    }\n\n    /* \u6253\u5370\u54c8\u5e0c\u8868 */\n    void print() {\n        for (auto &bucket : buckets) {\n            cout << \"[\";\n            for (Pair *pair : bucket) {\n                cout << pair->key << \" -> \" << pair->val << \", \";\n            }\n            cout << \"]\\n\";\n        }\n    }\n};\n\n/* Driver Code */\nint main() {\n    /* \u521d\u59cb\u5316\u54c8\u5e0c\u8868 */\n    HashMapChaining map = HashMapChaining();\n\n    /* \u6dfb\u52a0\u64cd\u4f5c */\n    // \u5728\u54c8\u5e0c\u8868\u4e2d\u6dfb\u52a0\u952e\u503c\u5bf9 (key, value)\n    map.put(12836, \"\u5c0f\u54c8\");\n    map.put(15937, \"\u5c0f\u5570\");\n    map.put(16750, \"\u5c0f\u7b97\");\n    map.put(13276, \"\u5c0f\u6cd5\");\n    map.put(10583, \"\u5c0f\u9e2d\");\n    cout << \"\\n\u6dfb\u52a0\u5b8c\u6210\u540e\uff0c\u54c8\u5e0c\u8868\u4e3a\\nKey -> Value\" << endl;\n    map.print();\n\n    /* \u67e5\u8be2\u64cd\u4f5c */\n    // \u5411\u54c8\u5e0c\u8868\u8f93\u5165\u952e key \uff0c\u5f97\u5230\u503c value\n    string name = map.get(13276);\n    cout << \"\\n\u8f93\u5165\u5b66\u53f7 13276 \uff0c\u67e5\u8be2\u5230\u59d3\u540d \" << name << endl;\n\n    /* \u5220\u9664\u64cd\u4f5c */\n    // \u5728\u54c8\u5e0c\u8868\u4e2d\u5220\u9664\u952e\u503c\u5bf9 (key, value)\n    map.remove(12836);\n    cout << \"\\n\u5220\u9664 12836 \u540e\uff0c\u54c8\u5e0c\u8868\u4e3a\\nKey -> Value\" << endl;\n    map.print();\n\n    return 0;\n}", "doc_comment": "/* \u6269\u5bb9\u54c8\u5e0c\u8868 */"}, "code_tokens": ["void", "extend", "(", ")", "{", "// \u6682\u5b58\u539f\u54c8\u5e0c\u8868", "// \u521d\u59cb\u5316\u6269\u5bb9\u540e\u7684\u65b0\u54c8\u5e0c\u8868", "// \u5c06\u952e\u503c\u5bf9\u4ece\u539f\u54c8\u5e0c\u8868\u642c\u8fd0\u81f3\u65b0\u54c8\u5e0c\u8868", "", ";", ";", ";", ";", ";", "for", "(", ":", "bucketsTmp", ")", "{", "}", "<", "capacity", "*=", "extendRatio", "buckets", ".", "clear", "buckets", ".", "resize", "size", "=", "0", "auto", "&", "bucket", "for", "(", ";", "// \u91ca\u653e\u5185\u5b58", "pair", ";", "/* \u6253\u5370\u54c8\u5e0c\u8868 */", "/* Driver Code */", "/* \u521d\u59cb\u5316\u54c8\u5e0c\u8868 */", "/* \u6dfb\u52a0\u64cd\u4f5c */", "// \u5728\u54c8\u5e0c\u8868\u4e2d\u6dfb\u52a0\u952e\u503c\u5bf9 (key, value)", "/* \u67e5\u8be2\u64cd\u4f5c */", "// \u5411\u54c8\u5e0c\u8868\u8f93\u5165\u952e key \uff0c\u5f97\u5230\u503c value", "/* \u5220\u9664\u64cd\u4f5c */", "// \u5728\u54c8\u5e0c\u8868\u4e2d\u5220\u9664\u952e\u503c\u5bf9 (key, value)", "0", ";", "vector", "<", "vector", "Pair", "*", "(", ")", "(", "capacity", ")", ":", "bucket", ")", "{", "put", "delete", "}", "}", "}", "void", "{", "for", ";", "for", "{", ";", "}", ";", "}", "}", "}", ";", "{", "HashMapChaining", ";", ";", ";", ";", ";", ";", ";", ";", "string", ";", ";", ";", ";", ";", "return", ">>", "bucketsTmp", "=", "buckets", "Pair", "*", "pair", "(", ",", ")", "print", "<<", "(", ")", "cout", "<<", "cout", "<<", "int", "main", "map", "=", "map", ".", "put", "map", ".", "put", "map", ".", "put", "map", ".", "put", "map", ".", "put", "<<", "endl", "map", ".", "print", "name", "=", "<<", "endl", "map", ".", "remove", "<<", "endl", "map", ".", "print", "pair", "->", "key", "pair", "->", "val", "(", ")", "(", "auto", "&", "bucket", ")", "cout", "\"", "[", "\"", "Pair", "*", "pair", ":", "bucket", "pair", "->", "\"", "]", "\\n", "\"", "(", ")", "HashMapChaining", "(", "12836", ",", ")", "(", "15937", ",", ")", "(", "16750", ",", ")", "(", "13276", ",", ")", "(", "10583", ",", ")", "cout", "<<", "(", ")", "map", ".", "get", "<<", "name", "(", "12836", ")", "cout", "<<", "(", ")", ":", "buckets", "{", "<<", "(", ")", "\"", "\u5c0f\u54c8", "\"", "\"", "\u5c0f\u5570", "\"", "\"", "\u5c0f\u7b97", "\"", "\"", "\u5c0f\u6cd5", "\"", "\"", "\u5c0f\u9e2d", "\"", "\"", "\\n", "\u6dfb\u52a0\u5b8c\u6210\u540e\uff0c\u54c8\u5e0c\u8868\u4e3a", "\\n", "Key -> Value", "\"", "(", "13276", ")", "cout", "<<", "\"", "\\n", "\u5220\u9664 12836 \u540e\uff0c\u54c8\u5e0c\u8868\u4e3a", "\\n", "Key -> Value", "\"", "key", "<<", "pair", "->", "\"", "\\n", "\u8f93\u5165\u5b66\u53f7 13276 \uff0c\u67e5\u8be2\u5230\u59d3\u540d ", "\"", "\"", " -> ", "\"", "val", "<<", "\"", ", ", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 376, "ast_depth": 13, "n_identifiers": 25, "vocab_size": 82}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/cpp/chapter_hashing/hash_map_open_addressing.cpp#35-37", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/cpp/chapter_hashing/hash_map_open_addressing.cpp", "language": "Java"}, "method": {"name": "hashFunc", "qualified_name": "codes.cpp.chapter_hashing.hash_map_open_addressing.cpp#hashFunc", "start_line": 35, "end_line": 37, "signature": "hashFunc(int key)", "original_code": "int hashFunc(int key) {\n        return key % capacity;\n    }", "doc_comment": "/* \u54c8\u5e0c\u51fd\u6570 */"}, "code_tokens": ["hashFunc", "int", "(", ")", "{", "}", "key", "return", ";", "int", "key", "%", "capacity"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 11}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/cpp/chapter_hashing/hash_map_open_addressing.cpp#40-42", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/cpp/chapter_hashing/hash_map_open_addressing.cpp", "language": "Java"}, "method": {"name": "loadFactor", "qualified_name": "codes.cpp.chapter_hashing.hash_map_open_addressing.cpp#loadFactor", "start_line": 40, "end_line": 42, "signature": "loadFactor()", "original_code": "double loadFactor() {\n        return (double)size / capacity;\n    }", "doc_comment": "/* \u8d1f\u8f7d\u56e0\u5b50 */"}, "code_tokens": ["loadFactor", "double", "(", ")", "{", "}", "return", ";", "/", "capacity", "(", ")", "size", "double"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 23, "ast_depth": 8, "n_identifiers": 3, "vocab_size": 11}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/cpp/chapter_hashing/hash_map_open_addressing.cpp#45-69", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/cpp/chapter_hashing/hash_map_open_addressing.cpp", "language": "Java"}, "method": {"name": "findBucket", "qualified_name": "codes.cpp.chapter_hashing.hash_map_open_addressing.cpp#findBucket", "start_line": 45, "end_line": 69, "signature": "findBucket(int key)", "original_code": "int findBucket(int key) {\n        int index = hashFunc(key);\n        int firstTombstone = -1;\n        // \u7ebf\u6027\u63a2\u6d4b\uff0c\u5f53\u9047\u5230\u7a7a\u6876\u65f6\u8df3\u51fa\n        while (buckets[index] != nullptr) {\n            // \u82e5\u9047\u5230 key \uff0c\u8fd4\u56de\u5bf9\u5e94\u6876\u7d22\u5f15\n            if (buckets[index]->key == key) {\n                // \u82e5\u4e4b\u524d\u9047\u5230\u4e86\u5220\u9664\u6807\u8bb0\uff0c\u5219\u5c06\u952e\u503c\u5bf9\u79fb\u52a8\u81f3\u8be5\u7d22\u5f15\n                if (firstTombstone != -1) {\n                    buckets[firstTombstone] = buckets[index];\n                    buckets[index] = TOMBSTONE;\n                    return firstTombstone; // \u8fd4\u56de\u79fb\u52a8\u540e\u7684\u6876\u7d22\u5f15\n                }\n                return index; // \u8fd4\u56de\u6876\u7d22\u5f15\n            }\n            // \u8bb0\u5f55\u9047\u5230\u7684\u9996\u4e2a\u5220\u9664\u6807\u8bb0\n            if (firstTombstone == -1 && buckets[index] == TOMBSTONE) {\n                firstTombstone = index;\n            }\n            // \u8ba1\u7b97\u6876\u7d22\u5f15\uff0c\u8d8a\u8fc7\u5c3e\u90e8\u8fd4\u56de\u5934\u90e8\n            index = (index + 1) % capacity;\n        }\n        // \u82e5 key \u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de\u6dfb\u52a0\u70b9\u7684\u7d22\u5f15\n        return firstTombstone == -1 ? index : firstTombstone;\n    }", "doc_comment": "/* \u641c\u7d22 key \u5bf9\u5e94\u7684\u6876\u7d22\u5f15 */"}, "code_tokens": ["findBucket", "int", "(", ")", "{", "// \u7ebf\u6027\u63a2\u6d4b\uff0c\u5f53\u9047\u5230\u7a7a\u6876\u65f6\u8df3\u51fa", "// \u82e5 key \u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de\u6dfb\u52a0\u70b9\u7684\u7d22\u5f15", "}", "key", ";", ";", "while", "return", ";", "int", "int", "index", "=", "int", "firstTombstone", "=", "(", ")", "{", "// \u82e5\u9047\u5230 key \uff0c\u8fd4\u56de\u5bf9\u5e94\u6876\u7d22\u5f15", "// \u8bb0\u5f55\u9047\u5230\u7684\u9996\u4e2a\u5220\u9664\u6807\u8bb0", "// \u8ba1\u7b97\u6876\u7d22\u5f15\uff0c\u8d8a\u8fc7\u5c3e\u90e8\u8fd4\u56de\u5934\u90e8", "}", "?", "index", ":", "firstTombstone", "hashFunc", "-", "1", "!=", "nullptr", "if", "if", ";", "firstTombstone", "==", "(", "key", ")", "buckets", "[", "index", "]", "(", ")", "{", "// \u82e5\u4e4b\u524d\u9047\u5230\u4e86\u5220\u9664\u6807\u8bb0\uff0c\u5219\u5c06\u952e\u503c\u5bf9\u79fb\u52a8\u81f3\u8be5\u7d22\u5f15", "// \u8fd4\u56de\u6876\u7d22\u5f15", "}", "(", ")", "{", "}", "index", "=", "-", "1", "==", "key", "if", "return", "index", ";", "&&", ";", "%", "capacity", "buckets", "[", "index", "]", "->", "key", "(", ")", "{", "// \u8fd4\u56de\u79fb\u52a8\u540e\u7684\u6876\u7d22\u5f15", "}", "firstTombstone", "==", "==", "TOMBSTONE", "firstTombstone", "=", "index", "(", ")", "firstTombstone", "!=", ";", ";", "return", "firstTombstone", ";", "-", "1", "buckets", "[", "index", "]", "index", "+", "1", "-", "1", "=", "=", "TOMBSTONE", "buckets", "[", "firstTombstone", "]", "buckets", "[", "index", "]", "buckets", "[", "index", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 186, "ast_depth": 13, "n_identifiers": 9, "vocab_size": 39}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/cpp/chapter_hashing/hash_map_open_addressing.cpp#72-81", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/cpp/chapter_hashing/hash_map_open_addressing.cpp", "language": "Java"}, "method": {"name": "get", "qualified_name": "codes.cpp.chapter_hashing.hash_map_open_addressing.cpp#get", "start_line": 72, "end_line": 81, "signature": "get(int key)", "original_code": "string get(int key) {\n        // \u641c\u7d22 key \u5bf9\u5e94\u7684\u6876\u7d22\u5f15\n        int index = findBucket(key);\n        // \u82e5\u627e\u5230\u952e\u503c\u5bf9\uff0c\u5219\u8fd4\u56de\u5bf9\u5e94 val\n        if (buckets[index] != nullptr && buckets[index] != TOMBSTONE) {\n            return buckets[index]->val;\n        }\n        // \u82e5\u952e\u503c\u5bf9\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\n        return \"\";\n    }", "doc_comment": "/* \u67e5\u8be2\u64cd\u4f5c */"}, "code_tokens": ["string", "get", "(", ")", "{", "// \u641c\u7d22 key \u5bf9\u5e94\u7684\u6876\u7d22\u5f15", "// \u82e5\u627e\u5230\u952e\u503c\u5bf9\uff0c\u5219\u8fd4\u56de\u5bf9\u5e94 val", "// \u82e5\u952e\u503c\u5bf9\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32", "}", "key", ";", "if", "return", ";", "int", "int", "index", "=", "(", ")", "{", "}", "\"", "\"", "findBucket", "&&", "return", ";", "(", "key", ")", "!=", "nullptr", "!=", "TOMBSTONE", "buckets", "[", "index", "]", "->", "val", "buckets", "[", "index", "]", "buckets", "[", "index", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 73, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 27}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/cpp/chapter_hashing/hash_map_open_addressing.cpp#84-99", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/cpp/chapter_hashing/hash_map_open_addressing.cpp", "language": "Java"}, "method": {"name": "put", "qualified_name": "codes.cpp.chapter_hashing.hash_map_open_addressing.cpp#put", "start_line": 84, "end_line": 99, "signature": "put(int key, string val)", "original_code": "void put(int key, string val) {\n        // \u5f53\u8d1f\u8f7d\u56e0\u5b50\u8d85\u8fc7\u9608\u503c\u65f6\uff0c\u6267\u884c\u6269\u5bb9\n        if (loadFactor() > loadThres) {\n            extend();\n        }\n        // \u641c\u7d22 key \u5bf9\u5e94\u7684\u6876\u7d22\u5f15\n        int index = findBucket(key);\n        // \u82e5\u627e\u5230\u952e\u503c\u5bf9\uff0c\u5219\u8986\u76d6 val \u5e76\u8fd4\u56de\n        if (buckets[index] != nullptr && buckets[index] != TOMBSTONE) {\n            buckets[index]->val = val;\n            return;\n        }\n        // \u82e5\u952e\u503c\u5bf9\u4e0d\u5b58\u5728\uff0c\u5219\u6dfb\u52a0\u8be5\u952e\u503c\u5bf9\n        buckets[index] = new Pair(key, val);\n        size++;\n    }", "doc_comment": "/* \u6dfb\u52a0\u64cd\u4f5c */"}, "code_tokens": ["void", "put", "(", ",", ")", "{", "// \u5f53\u8d1f\u8f7d\u56e0\u5b50\u8d85\u8fc7\u9608\u503c\u65f6\uff0c\u6267\u884c\u6269\u5bb9", "// \u641c\u7d22 key \u5bf9\u5e94\u7684\u6876\u7d22\u5f15", "// \u82e5\u627e\u5230\u952e\u503c\u5bf9\uff0c\u5219\u8986\u76d6 val \u5e76\u8fd4\u56de", "// \u82e5\u952e\u503c\u5bf9\u4e0d\u5b58\u5728\uff0c\u5219\u6dfb\u52a0\u8be5\u952e\u503c\u5bf9", "}", "key", "string", "val", "if", ";", "if", ";", ";", "int", "(", ")", "{", "}", "int", "index", "=", "(", ")", "{", "}", "=", "size", "++", ">", "loadThres", ";", "findBucket", "&&", ";", "return", ";", "buckets", "[", "index", "]", "new", "Pair", "loadFactor", "extend", "(", "key", ")", "!=", "nullptr", "!=", "TOMBSTONE", "=", "val", "(", "key", ",", "val", ")", "(", ")", "(", ")", "buckets", "[", "index", "]", "buckets", "[", "index", "]", "buckets", "[", "index", "]", "->", "val"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 123, "ast_depth": 9, "n_identifiers": 12, "vocab_size": 37}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/cpp/chapter_hashing/hash_map_open_addressing.cpp#102-111", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/cpp/chapter_hashing/hash_map_open_addressing.cpp", "language": "Java"}, "method": {"name": "remove", "qualified_name": "codes.cpp.chapter_hashing.hash_map_open_addressing.cpp#remove", "start_line": 102, "end_line": 111, "signature": "remove(int key)", "original_code": "void remove(int key) {\n        // \u641c\u7d22 key \u5bf9\u5e94\u7684\u6876\u7d22\u5f15\n        int index = findBucket(key);\n        // \u82e5\u627e\u5230\u952e\u503c\u5bf9\uff0c\u5219\u7528\u5220\u9664\u6807\u8bb0\u8986\u76d6\u5b83\n        if (buckets[index] != nullptr && buckets[index] != TOMBSTONE) {\n            delete buckets[index];\n            buckets[index] = TOMBSTONE;\n            size--;\n        }\n    }", "doc_comment": "/* \u5220\u9664\u64cd\u4f5c */"}, "code_tokens": ["void", "remove", "(", ")", "{", "// \u641c\u7d22 key \u5bf9\u5e94\u7684\u6876\u7d22\u5f15", "// \u82e5\u627e\u5230\u952e\u503c\u5bf9\uff0c\u5219\u7528\u5220\u9664\u6807\u8bb0\u8986\u76d6\u5b83", "}", "key", ";", "if", "int", "int", "index", "=", "(", ")", "{", "}", "findBucket", "&&", "delete", ";", ";", ";", "(", "key", ")", "!=", "nullptr", "!=", "TOMBSTONE", "buckets", "=", "TOMBSTONE", "size", "--", "buckets", "[", "index", "]", "buckets", "[", "index", "]", "[", "]", "buckets", "[", "index", "]", "index"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 80, "ast_depth": 10, "n_identifiers": 8, "vocab_size": 25}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/cpp/chapter_hashing/hash_map_open_addressing.cpp#114-128", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/cpp/chapter_hashing/hash_map_open_addressing.cpp", "language": "Java"}, "method": {"name": "extend", "qualified_name": "codes.cpp.chapter_hashing.hash_map_open_addressing.cpp#extend", "start_line": 114, "end_line": 128, "signature": "extend()", "original_code": "void extend() {\n        // \u6682\u5b58\u539f\u54c8\u5e0c\u8868\n        vector<Pair *> bucketsTmp = buckets;\n        // \u521d\u59cb\u5316\u6269\u5bb9\u540e\u7684\u65b0\u54c8\u5e0c\u8868\n        capacity *= extendRatio;\n        buckets = vector<Pair *>(capacity, nullptr);\n        size = 0;\n        // \u5c06\u952e\u503c\u5bf9\u4ece\u539f\u54c8\u5e0c\u8868\u642c\u8fd0\u81f3\u65b0\u54c8\u5e0c\u8868\n        for (Pair *pair : bucketsTmp) {\n            if (pair != nullptr && pair != TOMBSTONE) {\n                put(pair->key, pair->val);\n                delete pair;\n            }\n        }\n    }", "doc_comment": "/* \u6269\u5bb9\u54c8\u5e0c\u8868 */"}, "code_tokens": ["void", "extend", "(", ")", "{", "// \u6682\u5b58\u539f\u54c8\u5e0c\u8868", "// \u521d\u59cb\u5316\u6269\u5bb9\u540e\u7684\u65b0\u54c8\u5e0c\u8868", "// \u5c06\u952e\u503c\u5bf9\u4ece\u539f\u54c8\u5e0c\u8868\u642c\u8fd0\u81f3\u65b0\u54c8\u5e0c\u8868", "}", ";", ";", ";", ";", "for", "(", ":", "bucketsTmp", ")", "{", "}", ">", "capacity", "*=", "extendRatio", "buckets", "=", "*", ">", "size", "=", "0", "Pair", "*", "pair", "if", "vector", "<", "Pair", "*", "bucketsTmp", "=", "buckets", "vector", "<", "Pair", "(", "capacity", ",", "nullptr", ")", "(", ")", "{", "}", "&&", ";", "delete", ";", "pair", "!=", "nullptr", "pair", "!=", "TOMBSTONE", "put", "pair", "(", ",", ")", "pair", "->", "key", "pair", "->", "val"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 109, "ast_depth": 11, "n_identifiers": 14, "vocab_size": 37}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/cpp/chapter_hashing/hash_map_open_addressing.cpp#131-141", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/cpp/chapter_hashing/hash_map_open_addressing.cpp", "language": "Java"}, "method": {"name": "print", "qualified_name": "codes.cpp.chapter_hashing.hash_map_open_addressing.cpp#print", "start_line": 131, "end_line": 141, "signature": "print()", "original_code": "void print() {\n        for (Pair *pair : buckets) {\n            if (pair == nullptr) {\n                cout << \"nullptr\" << endl;\n            } else if (pair == TOMBSTONE) {\n                cout << \"TOMBSTONE\" << endl;\n            } else {\n                cout << pair->key << \" -> \" << pair->val << endl;\n            }\n        }\n    }", "doc_comment": "/* \u6253\u5370\u54c8\u5e0c\u8868 */"}, "code_tokens": ["void", "print", "(", ")", "{", "}", "for", "(", ":", "buckets", ")", "{", "}", "Pair", "*", "pair", "if", "else", "(", ")", "{", "}", "if", "else", "pair", "==", "nullptr", ";", "(", ")", "{", "}", "{", "}", "<<", "endl", "pair", "==", "TOMBSTONE", ";", ";", "cout", "<<", "<<", "endl", "cout", "<<", "\"", "nullptr", "\"", "cout", "<<", "pair", "->", "\"", "TOMBSTONE", "\"", "<<", "key", "<<", "pair", "->", "\"", " -> ", "\"", "val", "<<", "endl"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 100, "ast_depth": 14, "n_identifiers": 10, "vocab_size": 26}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/cpp/chapter_hashing/hash_map_open_addressing.cpp#145-171", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/cpp/chapter_hashing/hash_map_open_addressing.cpp", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.cpp.chapter_hashing.hash_map_open_addressing.cpp#main", "start_line": 145, "end_line": 171, "signature": "main()", "original_code": "int main() {\n    // \u521d\u59cb\u5316\u54c8\u5e0c\u8868\n    HashMapOpenAddressing hashmap;\n\n    // \u6dfb\u52a0\u64cd\u4f5c\n    // \u5728\u54c8\u5e0c\u8868\u4e2d\u6dfb\u52a0\u952e\u503c\u5bf9 (key, val)\n    hashmap.put(12836, \"\u5c0f\u54c8\");\n    hashmap.put(15937, \"\u5c0f\u5570\");\n    hashmap.put(16750, \"\u5c0f\u7b97\");\n    hashmap.put(13276, \"\u5c0f\u6cd5\");\n    hashmap.put(10583, \"\u5c0f\u9e2d\");\n    cout << \"\\n\u6dfb\u52a0\u5b8c\u6210\u540e\uff0c\u54c8\u5e0c\u8868\u4e3a\\nKey -> Value\" << endl;\n    hashmap.print();\n\n    // \u67e5\u8be2\u64cd\u4f5c\n    // \u5411\u54c8\u5e0c\u8868\u8f93\u5165\u952e key \uff0c\u5f97\u5230\u503c val\n    string name = hashmap.get(13276);\n    cout << \"\\n\u8f93\u5165\u5b66\u53f7 13276 \uff0c\u67e5\u8be2\u5230\u59d3\u540d \" << name << endl;\n\n    // \u5220\u9664\u64cd\u4f5c\n    // \u5728\u54c8\u5e0c\u8868\u4e2d\u5220\u9664\u952e\u503c\u5bf9 (key, val)\n    hashmap.remove(16750);\n    cout << \"\\n\u5220\u9664 16750 \u540e\uff0c\u54c8\u5e0c\u8868\u4e3a\\nKey -> Value\" << endl;\n    hashmap.print();\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "// \u521d\u59cb\u5316\u54c8\u5e0c\u8868", "// \u6dfb\u52a0\u64cd\u4f5c", "// \u5728\u54c8\u5e0c\u8868\u4e2d\u6dfb\u52a0\u952e\u503c\u5bf9 (key, val)", "// \u67e5\u8be2\u64cd\u4f5c", "// \u5411\u54c8\u5e0c\u8868\u8f93\u5165\u952e key \uff0c\u5f97\u5230\u503c val", "// \u5220\u9664\u64cd\u4f5c", "// \u5728\u54c8\u5e0c\u8868\u4e2d\u5220\u9664\u952e\u503c\u5bf9 (key, val)", "}", "HashMapOpenAddressing", ";", ";", ";", ";", ";", ";", ";", ";", "string", ";", ";", ";", ";", ";", "return", "0", ";", "hashmap", "hashmap", ".", "put", "hashmap", ".", "put", "hashmap", ".", "put", "hashmap", ".", "put", "hashmap", ".", "put", "<<", "endl", "hashmap", ".", "print", "name", "=", "<<", "endl", "hashmap", ".", "remove", "<<", "endl", "hashmap", ".", "print", "(", "12836", ",", ")", "(", "15937", ",", ")", "(", "16750", ",", ")", "(", "13276", ",", ")", "(", "10583", ",", ")", "cout", "<<", "(", ")", "hashmap", ".", "get", "<<", "name", "(", "16750", ")", "cout", "<<", "(", ")", "\"", "\u5c0f\u54c8", "\"", "\"", "\u5c0f\u5570", "\"", "\"", "\u5c0f\u7b97", "\"", "\"", "\u5c0f\u6cd5", "\"", "\"", "\u5c0f\u9e2d", "\"", "\"", "\\n", "\u6dfb\u52a0\u5b8c\u6210\u540e\uff0c\u54c8\u5e0c\u8868\u4e3a", "\\n", "Key -> Value", "\"", "(", "13276", ")", "cout", "<<", "\"", "\\n", "\u5220\u9664 16750 \u540e\uff0c\u54c8\u5e0c\u8868\u4e3a", "\\n", "Key -> Value", "\"", "\"", "\\n", "\u8f93\u5165\u5b66\u53f7 13276 \uff0c\u67e5\u8be2\u5230\u59d3\u540d ", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 190, "ast_depth": 9, "n_identifiers": 9, "vocab_size": 46}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/csharp/chapter_hashing/hash_map_chaining.cs#30-32", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/csharp/chapter_hashing/hash_map_chaining.cs", "language": "Java"}, "method": {"name": "hashFunc", "qualified_name": "codes.csharp.chapter_hashing.hash_map_chaining.cs#hashFunc", "start_line": 30, "end_line": 32, "signature": "hashFunc(int key)", "original_code": "private int hashFunc(int key) {\n        return key % capacity;\n    }", "doc_comment": "/* \u54c8\u5e0c\u51fd\u6570 */"}, "code_tokens": ["hashFunc", "private", "int", "(", ")", "{", "}", "key", "return", ";", "int", "key", "%", "capacity"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 24, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 12}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/csharp/chapter_hashing/hash_map_chaining.cs#35-37", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/csharp/chapter_hashing/hash_map_chaining.cs", "language": "Java"}, "method": {"name": "loadFactor", "qualified_name": "codes.csharp.chapter_hashing.hash_map_chaining.cs#loadFactor", "start_line": 35, "end_line": 37, "signature": "loadFactor()", "original_code": "private double loadFactor() {\n        return (double)size / capacity;\n    }", "doc_comment": "/* \u8d1f\u8f7d\u56e0\u5b50 */"}, "code_tokens": ["loadFactor", "private", "double", "(", ")", "{", "}", "return", ";", "/", "capacity", "(", ")", "size", "double"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 25, "ast_depth": 8, "n_identifiers": 3, "vocab_size": 12}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/csharp/chapter_hashing/hash_map_chaining.cs#40-50", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/csharp/chapter_hashing/hash_map_chaining.cs", "language": "Java"}, "method": {"name": "get", "qualified_name": "codes.csharp.chapter_hashing.hash_map_chaining.cs#get", "start_line": 40, "end_line": 50, "signature": "get(int key)", "original_code": "public string get(int key) {\n        int index = hashFunc(key);\n        // \u904d\u5386\u6876\uff0c\u82e5\u627e\u5230 key \u5219\u8fd4\u56de\u5bf9\u5e94 val\n        foreach (Pair pair in buckets[index]) {\n            if (pair.key == key) {\n                return pair.val;\n            }\n        }\n        // \u82e5\u672a\u627e\u5230 key \u5219\u8fd4\u56de null\n        return null;\n    }", "doc_comment": "/* \u67e5\u8be2\u64cd\u4f5c */"}, "code_tokens": ["string", "get", "public", "(", ")", "{", "// \u904d\u5386\u6876\uff0c\u82e5\u627e\u5230 key \u5219\u8fd4\u56de\u5bf9\u5e94 val", "// \u82e5\u672a\u627e\u5230 key \u5219\u8fd4\u56de null", "}", "key", ";", "", "{", "}", "return", "null", ";", "int", "int", "index", "=", "foreach", "if", "hashFunc", "(", ")", "(", ")", "{", "}", "(", "key", ")", "Pair", "pair", "in", "buckets", "[", "index", "]", "==", "key", "return", ";", "pair", ".", "key", "pair", ".", "val"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 76, "ast_depth": 9, "n_identifiers": 9, "vocab_size": 29}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/csharp/chapter_hashing/hash_map_chaining.cs#53-69", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/csharp/chapter_hashing/hash_map_chaining.cs", "language": "Java"}, "method": {"name": "put", "qualified_name": "codes.csharp.chapter_hashing.hash_map_chaining.cs#put", "start_line": 53, "end_line": 69, "signature": "put(int key, string val)", "original_code": "public void put(int key, string val) {\n        // \u5f53\u8d1f\u8f7d\u56e0\u5b50\u8d85\u8fc7\u9608\u503c\u65f6\uff0c\u6267\u884c\u6269\u5bb9\n        if (loadFactor() > loadThres) {\n            extend();\n        }\n        int index = hashFunc(key);\n        // \u904d\u5386\u6876\uff0c\u82e5\u9047\u5230\u6307\u5b9a key \uff0c\u5219\u66f4\u65b0\u5bf9\u5e94 val \u5e76\u8fd4\u56de\n        foreach (Pair pair in buckets[index]) {\n            if (pair.key == key) {\n                pair.val = val;\n                return;\n            }\n        }\n        // \u82e5\u65e0\u8be5 key \uff0c\u5219\u5c06\u952e\u503c\u5bf9\u6dfb\u52a0\u81f3\u5c3e\u90e8\n        buckets[index].Add(new Pair(key, val));\n        size++;\n    }", "doc_comment": "/* \u6dfb\u52a0\u64cd\u4f5c */"}, "code_tokens": ["void", "put", "public", "(", ",", ")", "{", "// \u5f53\u8d1f\u8f7d\u56e0\u5b50\u8d85\u8fc7\u9608\u503c\u65f6\uff0c\u6267\u884c\u6269\u5bb9", "// \u904d\u5386\u6876\uff0c\u82e5\u9047\u5230\u6307\u5b9a key \uff0c\u5219\u66f4\u65b0\u5bf9\u5e94 val \u5e76\u8fd4\u56de", "// \u82e5\u65e0\u8be5 key \uff0c\u5219\u5c06\u952e\u503c\u5bf9\u6dfb\u52a0\u81f3\u5c3e\u90e8", "}", "key", "string", "val", "if", ";", "", "{", "}", ";", ";", "int", "(", ")", "{", "}", "int", "index", "=", "foreach", "if", ".", "Add", "size", "++", ">", "loadThres", ";", "hashFunc", "(", ")", "(", ")", "{", "}", "buckets", "[", "index", "]", "(", ")", "loadFactor", "extend", "(", "key", ")", "Pair", "pair", "in", "buckets", "[", "index", "]", "==", "key", ";", "return", ";", "new", "Pair", "(", ")", "(", ")", "pair", ".", "key", "=", "val", "(", "key", ",", "val", ")", "pair", ".", "val"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 132, "ast_depth": 10, "n_identifiers": 14, "vocab_size": 39}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/csharp/chapter_hashing/hash_map_chaining.cs#72-82", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/csharp/chapter_hashing/hash_map_chaining.cs", "language": "Java"}, "method": {"name": "remove", "qualified_name": "codes.csharp.chapter_hashing.hash_map_chaining.cs#remove", "start_line": 72, "end_line": 82, "signature": "remove(int key)", "original_code": "public void remove(int key) {\n        int index = hashFunc(key);\n        // \u904d\u5386\u6876\uff0c\u4ece\u4e2d\u5220\u9664\u952e\u503c\u5bf9\n        foreach (Pair pair in buckets[index].ToList()) {\n            if (pair.key == key) {\n                buckets[index].Remove(pair);\n                size--;\n                break;\n            }\n        }\n    }", "doc_comment": "/* \u5220\u9664\u64cd\u4f5c */"}, "code_tokens": ["void", "remove", "public", "(", ")", "{", "// \u904d\u5386\u6876\uff0c\u4ece\u4e2d\u5220\u9664\u952e\u503c\u5bf9", "}", "key", ";", "", "{", "}", "int", "int", "index", "=", "foreach", "if", "hashFunc", "(", ")", "(", ")", "{", "}", "(", "key", ")", "Pair", "pair", "in", ".", "ToList", "==", "key", ";", ";", "break", ";", "buckets", "[", "index", "]", "(", ")", "pair", ".", "key", ".", "Remove", "size", "--", "buckets", "[", "index", "]", "(", "pair", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 92, "ast_depth": 10, "n_identifiers": 11, "vocab_size": 30}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/csharp/chapter_hashing/hash_map_chaining.cs#85-101", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/csharp/chapter_hashing/hash_map_chaining.cs", "language": "Java"}, "method": {"name": "extend", "qualified_name": "codes.csharp.chapter_hashing.hash_map_chaining.cs#extend", "start_line": 85, "end_line": 101, "signature": "extend()", "original_code": "private void extend() {\n        // \u6682\u5b58\u539f\u54c8\u5e0c\u8868\n        List<List<Pair>> bucketsTmp = buckets;\n        // \u521d\u59cb\u5316\u6269\u5bb9\u540e\u7684\u65b0\u54c8\u5e0c\u8868\n        capacity *= extendRatio;\n        buckets = new List<List<Pair>>(capacity);\n        for (int i = 0; i < capacity; i++) {\n            buckets.Add(new List<Pair>());\n        }\n        size = 0;\n        // \u5c06\u952e\u503c\u5bf9\u4ece\u539f\u54c8\u5e0c\u8868\u642c\u8fd0\u81f3\u65b0\u54c8\u5e0c\u8868\n        foreach (List<Pair> bucket in bucketsTmp) {\n            foreach (Pair pair in bucket) {\n                put(pair.key, pair.val);\n            }\n        }\n    }", "doc_comment": "/* \u6269\u5bb9\u54c8\u5e0c\u8868 */"}, "code_tokens": ["void", "extend", "private", "(", ")", "{", "// \u6682\u5b58\u539f\u54c8\u5e0c\u8868", "// \u521d\u59cb\u5316\u6269\u5bb9\u540e\u7684\u65b0\u54c8\u5e0c\u8868", "// \u5c06\u952e\u503c\u5bf9\u4ece\u539f\u54c8\u5e0c\u8868\u642c\u8fd0\u81f3\u65b0\u54c8\u5e0c\u8868", "}", ";", ";", ";", "for", "(", ";", ")", ";", "", "{", "}", "List", "bucketsTmp", "=", "buckets", "capacity", "*=", "extendRatio", "buckets", "=", ";", "i", "<", "capacity", "i", "++", "{", "}", "size", "=", "0", "foreach", "", "{", "}", "<", ">", "new", "int", "i", "=", "0", ";", "(", ")", "foreach", ";", "List", "List", "(", "capacity", ")", "buckets", ".", "Add", ">", "bucketsTmp", "(", "bucket", ")", "put", "<", "Pair", ">", "<", ">", "(", ")", "List", "<", "Pair", "bucket", "in", "Pair", "pair", "in", "(", ",", ")", "List", "new", "pair", ".", "key", "pair", ".", "val", "<", "Pair", ">", "List", "(", ")", "<", "Pair", ">"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 160, "ast_depth": 12, "n_identifiers": 17, "vocab_size": 39}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/csharp/chapter_hashing/hash_map_chaining.cs#104-114", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/csharp/chapter_hashing/hash_map_chaining.cs", "language": "Java"}, "method": {"name": "print", "qualified_name": "codes.csharp.chapter_hashing.hash_map_chaining.cs#print", "start_line": 104, "end_line": 114, "signature": "print()", "original_code": "public void print() {\n        foreach (List<Pair> bucket in buckets) {\n            List<string> res = new List<string>();\n            foreach (Pair pair in bucket) {\n                res.Add(pair.key + \" -> \" + pair.val);\n            }\n            foreach (string kv in res) {\n                Console.WriteLine(kv);\n            }\n        }\n    }", "doc_comment": "/* \u6253\u5370\u54c8\u5e0c\u8868 */"}, "code_tokens": ["void", "print", "public", "(", ")", "{", "}", "", "{", "}", "foreach", ";", "", "{", "}", "", "{", "}", "(", ")", "List", "res", "=", "foreach", ";", "foreach", ";", ">", "buckets", "<", "string", ">", "new", "(", "bucket", ")", "res", ".", "Add", "(", "res", ")", "Console", ".", "WriteLine", "List", "<", "Pair", "bucket", "in", "List", "(", ")", "Pair", "pair", "in", "(", ")", "string", "kv", "in", "(", "kv", ")", "<", "string", ">", "+", "+", "pair", ".", "val", "pair", ".", "key", "\"", " -> ", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 119, "ast_depth": 12, "n_identifiers": 15, "vocab_size": 32}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/csharp/chapter_hashing/hash_map_chaining.cs#119-143", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/csharp/chapter_hashing/hash_map_chaining.cs", "language": "Java"}, "method": {"name": "Test", "qualified_name": "codes.csharp.chapter_hashing.hash_map_chaining.cs#Test", "start_line": 119, "end_line": 143, "signature": "Test()", "original_code": "public void Test() {\n        /* \u521d\u59cb\u5316\u54c8\u5e0c\u8868 */\n        HashMapChaining map = new HashMapChaining();\n\n        /* \u6dfb\u52a0\u64cd\u4f5c */\n        // \u5728\u54c8\u5e0c\u8868\u4e2d\u6dfb\u52a0\u952e\u503c\u5bf9 (key, value)\n        map.put(12836, \"\u5c0f\u54c8\");\n        map.put(15937, \"\u5c0f\u5570\");\n        map.put(16750, \"\u5c0f\u7b97\");\n        map.put(13276, \"\u5c0f\u6cd5\");\n        map.put(10583, \"\u5c0f\u9e2d\");\n        Console.WriteLine(\"\\n\u6dfb\u52a0\u5b8c\u6210\u540e\uff0c\u54c8\u5e0c\u8868\u4e3a\\nKey -> Value\");\n        map.print();\n\n        /* \u67e5\u8be2\u64cd\u4f5c */\n        // \u5411\u54c8\u5e0c\u8868\u8f93\u5165\u952e key \uff0c\u5f97\u5230\u503c value\n        string name = map.get(13276);\n        Console.WriteLine(\"\\n\u8f93\u5165\u5b66\u53f7 13276 \uff0c\u67e5\u8be2\u5230\u59d3\u540d \" + name);\n\n        /* \u5220\u9664\u64cd\u4f5c */\n        // \u5728\u54c8\u5e0c\u8868\u4e2d\u5220\u9664\u952e\u503c\u5bf9 (key, value)\n        map.remove(12836);\n        Console.WriteLine(\"\\n\u5220\u9664 12836 \u540e\uff0c\u54c8\u5e0c\u8868\u4e3a\\nKey -> Value\");\n        map.print();\n    }", "doc_comment": ""}, "code_tokens": ["void", "Test", "public", "(", ")", "{", "/* \u521d\u59cb\u5316\u54c8\u5e0c\u8868 */", "/* \u6dfb\u52a0\u64cd\u4f5c */", "// \u5728\u54c8\u5e0c\u8868\u4e2d\u6dfb\u52a0\u952e\u503c\u5bf9 (key, value)", "/* \u67e5\u8be2\u64cd\u4f5c */", "// \u5411\u54c8\u5e0c\u8868\u8f93\u5165\u952e key \uff0c\u5f97\u5230\u503c value", "/* \u5220\u9664\u64cd\u4f5c */", "// \u5728\u54c8\u5e0c\u8868\u4e2d\u5220\u9664\u952e\u503c\u5bf9 (key, value)", "}", "HashMapChaining", ";", ";", ";", ";", ";", ";", ";", ";", "string", ";", ";", ";", ";", ";", "map", "=", "map", ".", "put", "map", ".", "put", "map", ".", "put", "map", ".", "put", "map", ".", "put", "Console", ".", "WriteLine", "map", ".", "print", "name", "=", "Console", ".", "WriteLine", "map", ".", "remove", "Console", ".", "WriteLine", "map", ".", "print", "new", "HashMapChaining", "(", "12836", ",", ")", "(", "15937", ",", ")", "(", "16750", ",", ")", "(", "13276", ",", ")", "(", "10583", ",", ")", "(", ")", "(", ")", "map", ".", "get", "(", ")", "(", "12836", ")", "(", ")", "(", ")", "(", ")", "\"", "\u5c0f\u54c8", "\"", "\"", "\u5c0f\u5570", "\"", "\"", "\u5c0f\u7b97", "\"", "\"", "\u5c0f\u6cd5", "\"", "\"", "\u5c0f\u9e2d", "\"", "\"", "\\n", "\u6dfb\u52a0\u5b8c\u6210\u540e\uff0c\u54c8\u5e0c\u8868\u4e3a", "\\n", "Key -> Value", "\"", "(", "13276", ")", "+", "name", "\"", "\\n", "\u5220\u9664 12836 \u540e\uff0c\u54c8\u5e0c\u8868\u4e3a", "\\n", "Key -> Value", "\"", "\"", "\\n", "\u8f93\u5165\u5b66\u53f7 13276 \uff0c\u67e5\u8be2\u5230\u59d3\u540d ", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 197, "ast_depth": 9, "n_identifiers": 9, "vocab_size": 46}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/csharp/chapter_hashing/hash_map_open_addressing.cs#25-27", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/csharp/chapter_hashing/hash_map_open_addressing.cs", "language": "Java"}, "method": {"name": "hashFunc", "qualified_name": "codes.csharp.chapter_hashing.hash_map_open_addressing.cs#hashFunc", "start_line": 25, "end_line": 27, "signature": "hashFunc(int key)", "original_code": "private int hashFunc(int key) {\n        return key % capacity;\n    }", "doc_comment": "/* \u54c8\u5e0c\u51fd\u6570 */"}, "code_tokens": ["hashFunc", "private", "int", "(", ")", "{", "}", "key", "return", ";", "int", "key", "%", "capacity"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 24, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 12}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/csharp/chapter_hashing/hash_map_open_addressing.cs#30-32", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/csharp/chapter_hashing/hash_map_open_addressing.cs", "language": "Java"}, "method": {"name": "loadFactor", "qualified_name": "codes.csharp.chapter_hashing.hash_map_open_addressing.cs#loadFactor", "start_line": 30, "end_line": 32, "signature": "loadFactor()", "original_code": "private double loadFactor() {\n        return (double)size / capacity;\n    }", "doc_comment": "/* \u8d1f\u8f7d\u56e0\u5b50 */"}, "code_tokens": ["loadFactor", "private", "double", "(", ")", "{", "}", "return", ";", "/", "capacity", "(", ")", "size", "double"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 25, "ast_depth": 8, "n_identifiers": 3, "vocab_size": 12}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/csharp/chapter_hashing/hash_map_open_addressing.cs#35-59", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/csharp/chapter_hashing/hash_map_open_addressing.cs", "language": "Java"}, "method": {"name": "findBucket", "qualified_name": "codes.csharp.chapter_hashing.hash_map_open_addressing.cs#findBucket", "start_line": 35, "end_line": 59, "signature": "findBucket(int key)", "original_code": "private int findBucket(int key) {\n        int index = hashFunc(key);\n        int firstTombstone = -1;\n        // \u7ebf\u6027\u63a2\u6d4b\uff0c\u5f53\u9047\u5230\u7a7a\u6876\u65f6\u8df3\u51fa\n        while (buckets[index] != null) {\n            // \u82e5\u9047\u5230 key \uff0c\u8fd4\u56de\u5bf9\u5e94\u6876\u7d22\u5f15\n            if (buckets[index].key == key) {\n                // \u82e5\u4e4b\u524d\u9047\u5230\u4e86\u5220\u9664\u6807\u8bb0\uff0c\u5219\u5c06\u952e\u503c\u5bf9\u79fb\u52a8\u81f3\u8be5\u7d22\u5f15\n                if (firstTombstone != -1) {\n                    buckets[firstTombstone] = buckets[index];\n                    buckets[index] = TOMBSTONE;\n                    return firstTombstone; // \u8fd4\u56de\u79fb\u52a8\u540e\u7684\u6876\u7d22\u5f15\n                }\n                return index; // \u8fd4\u56de\u6876\u7d22\u5f15\n            }\n            // \u8bb0\u5f55\u9047\u5230\u7684\u9996\u4e2a\u5220\u9664\u6807\u8bb0\n            if (firstTombstone == -1 && buckets[index] == TOMBSTONE) {\n                firstTombstone = index;\n            }\n            // \u8ba1\u7b97\u6876\u7d22\u5f15\uff0c\u8d8a\u8fc7\u5c3e\u90e8\u8fd4\u56de\u5934\u90e8\n            index = (index + 1) % capacity;\n        }\n        // \u82e5 key \u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de\u6dfb\u52a0\u70b9\u7684\u7d22\u5f15\n        return firstTombstone == -1 ? index : firstTombstone;\n    }", "doc_comment": "/* \u641c\u7d22 key \u5bf9\u5e94\u7684\u6876\u7d22\u5f15 */"}, "code_tokens": ["findBucket", "private", "int", "(", ")", "{", "// \u7ebf\u6027\u63a2\u6d4b\uff0c\u5f53\u9047\u5230\u7a7a\u6876\u65f6\u8df3\u51fa", "// \u82e5 key \u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de\u6dfb\u52a0\u70b9\u7684\u7d22\u5f15", "}", "key", ";", ";", "while", "return", ";", "int", "int", "index", "=", "int", "firstTombstone", "=", "(", ")", "{", "// \u82e5\u9047\u5230 key \uff0c\u8fd4\u56de\u5bf9\u5e94\u6876\u7d22\u5f15", "// \u8bb0\u5f55\u9047\u5230\u7684\u9996\u4e2a\u5220\u9664\u6807\u8bb0", "// \u8ba1\u7b97\u6876\u7d22\u5f15\uff0c\u8d8a\u8fc7\u5c3e\u90e8\u8fd4\u56de\u5934\u90e8", "}", "?", "index", ":", "firstTombstone", "hashFunc", "-", "1", "!=", "null", "if", "if", ";", "firstTombstone", "==", "(", "key", ")", "buckets", "[", "index", "]", "(", ")", "{", "// \u82e5\u4e4b\u524d\u9047\u5230\u4e86\u5220\u9664\u6807\u8bb0\uff0c\u5219\u5c06\u952e\u503c\u5bf9\u79fb\u52a8\u81f3\u8be5\u7d22\u5f15", "// \u8fd4\u56de\u6876\u7d22\u5f15", "}", "(", ")", "{", "}", "index", "=", "-", "1", "==", "key", "if", "return", "index", ";", "&&", ";", "%", "capacity", ".", "key", "(", ")", "{", "// \u8fd4\u56de\u79fb\u52a8\u540e\u7684\u6876\u7d22\u5f15", "}", "firstTombstone", "==", "==", "TOMBSTONE", "firstTombstone", "=", "index", "(", ")", "buckets", "[", "index", "]", "firstTombstone", "!=", ";", ";", "return", "firstTombstone", ";", "-", "1", "buckets", "[", "index", "]", "index", "+", "1", "-", "1", "=", "=", "TOMBSTONE", "buckets", "[", "firstTombstone", "]", "buckets", "[", "index", "]", "buckets", "[", "index", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 188, "ast_depth": 13, "n_identifiers": 8, "vocab_size": 40}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/csharp/chapter_hashing/hash_map_open_addressing.cs#62-71", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/csharp/chapter_hashing/hash_map_open_addressing.cs", "language": "Java"}, "method": {"name": "get", "qualified_name": "codes.csharp.chapter_hashing.hash_map_open_addressing.cs#get", "start_line": 62, "end_line": 71, "signature": "get(int key)", "original_code": "public string get(int key) {\n        // \u641c\u7d22 key \u5bf9\u5e94\u7684\u6876\u7d22\u5f15\n        int index = findBucket(key);\n        // \u82e5\u627e\u5230\u952e\u503c\u5bf9\uff0c\u5219\u8fd4\u56de\u5bf9\u5e94 val\n        if (buckets[index] != null && buckets[index] != TOMBSTONE) {\n            return buckets[index].val;\n        }\n        // \u82e5\u952e\u503c\u5bf9\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de null\n        return null;\n    }", "doc_comment": "/* \u67e5\u8be2\u64cd\u4f5c */"}, "code_tokens": ["string", "get", "public", "(", ")", "{", "// \u641c\u7d22 key \u5bf9\u5e94\u7684\u6876\u7d22\u5f15", "// \u82e5\u627e\u5230\u952e\u503c\u5bf9\uff0c\u5219\u8fd4\u56de\u5bf9\u5e94 val", "// \u82e5\u952e\u503c\u5bf9\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de null", "}", "key", ";", "if", "return", "null", ";", "int", "int", "index", "=", "(", ")", "{", "}", "findBucket", "&&", "return", ";", "(", "key", ")", "!=", "null", "!=", "TOMBSTONE", ".", "val", "buckets", "[", "index", "]", "buckets", "[", "index", "]", "buckets", "[", "index", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 73, "ast_depth": 9, "n_identifiers": 7, "vocab_size": 27}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/csharp/chapter_hashing/hash_map_open_addressing.cs#74-89", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/csharp/chapter_hashing/hash_map_open_addressing.cs", "language": "Java"}, "method": {"name": "put", "qualified_name": "codes.csharp.chapter_hashing.hash_map_open_addressing.cs#put", "start_line": 74, "end_line": 89, "signature": "put(int key, string val)", "original_code": "public void put(int key, string val) {\n        // \u5f53\u8d1f\u8f7d\u56e0\u5b50\u8d85\u8fc7\u9608\u503c\u65f6\uff0c\u6267\u884c\u6269\u5bb9\n        if (loadFactor() > loadThres) {\n            extend();\n        }\n        // \u641c\u7d22 key \u5bf9\u5e94\u7684\u6876\u7d22\u5f15\n        int index = findBucket(key);\n        // \u82e5\u627e\u5230\u952e\u503c\u5bf9\uff0c\u5219\u8986\u76d6 val \u5e76\u8fd4\u56de\n        if (buckets[index] != null && buckets[index] != TOMBSTONE) {\n            buckets[index].val = val;\n            return;\n        }\n        // \u82e5\u952e\u503c\u5bf9\u4e0d\u5b58\u5728\uff0c\u5219\u6dfb\u52a0\u8be5\u952e\u503c\u5bf9\n        buckets[index] = new Pair(key, val);\n        size++;\n    }", "doc_comment": "/* \u6dfb\u52a0\u64cd\u4f5c */"}, "code_tokens": ["void", "put", "public", "(", ",", ")", "{", "// \u5f53\u8d1f\u8f7d\u56e0\u5b50\u8d85\u8fc7\u9608\u503c\u65f6\uff0c\u6267\u884c\u6269\u5bb9", "// \u641c\u7d22 key \u5bf9\u5e94\u7684\u6876\u7d22\u5f15", "// \u82e5\u627e\u5230\u952e\u503c\u5bf9\uff0c\u5219\u8986\u76d6 val \u5e76\u8fd4\u56de", "// \u82e5\u952e\u503c\u5bf9\u4e0d\u5b58\u5728\uff0c\u5219\u6dfb\u52a0\u8be5\u952e\u503c\u5bf9", "}", "key", "string", "val", "if", ";", "if", ";", ";", "int", "(", ")", "{", "}", "int", "index", "=", "(", ")", "{", "}", "=", "size", "++", ">", "loadThres", ";", "findBucket", "&&", ";", "return", ";", "buckets", "[", "index", "]", "new", "Pair", "loadFactor", "extend", "(", "key", ")", "!=", "null", "!=", "TOMBSTONE", "=", "val", "(", "key", ",", "val", ")", "(", ")", "(", ")", "buckets", "[", "index", "]", "buckets", "[", "index", "]", ".", "val", "buckets", "[", "index", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 125, "ast_depth": 10, "n_identifiers": 11, "vocab_size": 38}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/csharp/chapter_hashing/hash_map_open_addressing.cs#92-100", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/csharp/chapter_hashing/hash_map_open_addressing.cs", "language": "Java"}, "method": {"name": "remove", "qualified_name": "codes.csharp.chapter_hashing.hash_map_open_addressing.cs#remove", "start_line": 92, "end_line": 100, "signature": "remove(int key)", "original_code": "public void remove(int key) {\n        // \u641c\u7d22 key \u5bf9\u5e94\u7684\u6876\u7d22\u5f15\n        int index = findBucket(key);\n        // \u82e5\u627e\u5230\u952e\u503c\u5bf9\uff0c\u5219\u7528\u5220\u9664\u6807\u8bb0\u8986\u76d6\u5b83\n        if (buckets[index] != null && buckets[index] != TOMBSTONE) {\n            buckets[index] = TOMBSTONE;\n            size--;\n        }\n    }", "doc_comment": "/* \u5220\u9664\u64cd\u4f5c */"}, "code_tokens": ["void", "remove", "public", "(", ")", "{", "// \u641c\u7d22 key \u5bf9\u5e94\u7684\u6876\u7d22\u5f15", "// \u82e5\u627e\u5230\u952e\u503c\u5bf9\uff0c\u5219\u7528\u5220\u9664\u6807\u8bb0\u8986\u76d6\u5b83", "}", "key", ";", "if", "int", "int", "index", "=", "(", ")", "{", "}", "findBucket", "&&", ";", ";", "(", "key", ")", "!=", "null", "!=", "TOMBSTONE", "=", "TOMBSTONE", "size", "--", "buckets", "[", "index", "]", "buckets", "[", "index", "]", "buckets", "[", "index", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 72, "ast_depth": 9, "n_identifiers": 7, "vocab_size": 25}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/csharp/chapter_hashing/hash_map_open_addressing.cs#103-116", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/csharp/chapter_hashing/hash_map_open_addressing.cs", "language": "Java"}, "method": {"name": "extend", "qualified_name": "codes.csharp.chapter_hashing.hash_map_open_addressing.cs#extend", "start_line": 103, "end_line": 116, "signature": "extend()", "original_code": "private void extend() {\n        // \u6682\u5b58\u539f\u54c8\u5e0c\u8868\n        Pair[] bucketsTmp = buckets;\n        // \u521d\u59cb\u5316\u6269\u5bb9\u540e\u7684\u65b0\u54c8\u5e0c\u8868\n        capacity *= extendRatio;\n        buckets = new Pair[capacity];\n        size = 0;\n        // \u5c06\u952e\u503c\u5bf9\u4ece\u539f\u54c8\u5e0c\u8868\u642c\u8fd0\u81f3\u65b0\u54c8\u5e0c\u8868\n        foreach (Pair pair in bucketsTmp) {\n            if (pair != null && pair != TOMBSTONE) {\n                put(pair.key, pair.val);\n            }\n        }\n    }", "doc_comment": "/* \u6269\u5bb9\u54c8\u5e0c\u8868 */"}, "code_tokens": ["void", "extend", "private", "(", ")", "{", "// \u6682\u5b58\u539f\u54c8\u5e0c\u8868", "// \u521d\u59cb\u5316\u6269\u5bb9\u540e\u7684\u65b0\u54c8\u5e0c\u8868", "// \u5c06\u952e\u503c\u5bf9\u4ece\u539f\u54c8\u5e0c\u8868\u642c\u8fd0\u81f3\u65b0\u54c8\u5e0c\u8868", "}", ";", ";", ";", ";", "", "{", "}", "Pair", "bucketsTmp", "=", "buckets", "capacity", "*=", "extendRatio", "buckets", "=", "size", "=", "0", "foreach", "if", "[", "]", "new", "Pair", "(", "bucketsTmp", ")", "(", ")", "{", "}", "[", "capacity", "]", "Pair", "pair", "in", "&&", ";", "pair", "!=", "null", "pair", "!=", "TOMBSTONE", "put", "(", ",", ")", "pair", ".", "key", "pair", ".", "val"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 99, "ast_depth": 11, "n_identifiers": 13, "vocab_size": 37}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/csharp/chapter_hashing/hash_map_open_addressing.cs#119-129", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/csharp/chapter_hashing/hash_map_open_addressing.cs", "language": "Java"}, "method": {"name": "print", "qualified_name": "codes.csharp.chapter_hashing.hash_map_open_addressing.cs#print", "start_line": 119, "end_line": 129, "signature": "print()", "original_code": "public void print() {\n        foreach (Pair pair in buckets) {\n            if (pair == null) {\n                Console.WriteLine(\"null\");\n            } else if (pair == TOMBSTONE) {\n                Console.WriteLine(\"TOMBSTONE\");\n            } else {\n                Console.WriteLine(pair.key + \" -> \" + pair.val);\n            }\n        }\n    }", "doc_comment": "/* \u6253\u5370\u54c8\u5e0c\u8868 */"}, "code_tokens": ["void", "print", "public", "(", ")", "{", "}", "", "{", "}", "foreach", "if", "else", "(", "buckets", ")", "(", ")", "{", "}", "if", "else", "Pair", "pair", "in", "pair", "==", "null", ";", "(", ")", "{", "}", "{", "}", "Console", ".", "WriteLine", "pair", "==", "TOMBSTONE", ";", ";", "(", ")", "Console", ".", "WriteLine", "Console", ".", "WriteLine", "\"", "null", "\"", "(", ")", "(", ")", "\"", "TOMBSTONE", "\"", "+", "+", "pair", ".", "val", "pair", ".", "key", "\"", " -> ", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 107, "ast_depth": 14, "n_identifiers": 10, "vocab_size": 27}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/csharp/chapter_hashing/hash_map_open_addressing.cs#134-158", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/csharp/chapter_hashing/hash_map_open_addressing.cs", "language": "Java"}, "method": {"name": "Test", "qualified_name": "codes.csharp.chapter_hashing.hash_map_open_addressing.cs#Test", "start_line": 134, "end_line": 158, "signature": "Test()", "original_code": "public void Test() {\n        /* \u521d\u59cb\u5316\u54c8\u5e0c\u8868 */\n        HashMapOpenAddressing map = new HashMapOpenAddressing();\n\n        /* \u6dfb\u52a0\u64cd\u4f5c */\n        // \u5728\u54c8\u5e0c\u8868\u4e2d\u6dfb\u52a0\u952e\u503c\u5bf9 (key, value)\n        map.put(12836, \"\u5c0f\u54c8\");\n        map.put(15937, \"\u5c0f\u5570\");\n        map.put(16750, \"\u5c0f\u7b97\");\n        map.put(13276, \"\u5c0f\u6cd5\");\n        map.put(10583, \"\u5c0f\u9e2d\");\n        Console.WriteLine(\"\\n\u6dfb\u52a0\u5b8c\u6210\u540e\uff0c\u54c8\u5e0c\u8868\u4e3a\\nKey -> Value\");\n        map.print();\n\n        /* \u67e5\u8be2\u64cd\u4f5c */\n        // \u5411\u54c8\u5e0c\u8868\u8f93\u5165\u952e key \uff0c\u5f97\u5230\u503c value\n        string name = map.get(13276);\n        Console.WriteLine(\"\\n\u8f93\u5165\u5b66\u53f7 13276 \uff0c\u67e5\u8be2\u5230\u59d3\u540d \" + name);\n\n        /* \u5220\u9664\u64cd\u4f5c */\n        // \u5728\u54c8\u5e0c\u8868\u4e2d\u5220\u9664\u952e\u503c\u5bf9 (key, value)\n        map.remove(16750);\n        Console.WriteLine(\"\\n\u5220\u9664 16750 \u540e\uff0c\u54c8\u5e0c\u8868\u4e3a\\nKey -> Value\");\n        map.print();\n    }", "doc_comment": ""}, "code_tokens": ["void", "Test", "public", "(", ")", "{", "/* \u521d\u59cb\u5316\u54c8\u5e0c\u8868 */", "/* \u6dfb\u52a0\u64cd\u4f5c */", "// \u5728\u54c8\u5e0c\u8868\u4e2d\u6dfb\u52a0\u952e\u503c\u5bf9 (key, value)", "/* \u67e5\u8be2\u64cd\u4f5c */", "// \u5411\u54c8\u5e0c\u8868\u8f93\u5165\u952e key \uff0c\u5f97\u5230\u503c value", "/* \u5220\u9664\u64cd\u4f5c */", "// \u5728\u54c8\u5e0c\u8868\u4e2d\u5220\u9664\u952e\u503c\u5bf9 (key, value)", "}", "HashMapOpenAddressing", ";", ";", ";", ";", ";", ";", ";", ";", "string", ";", ";", ";", ";", ";", "map", "=", "map", ".", "put", "map", ".", "put", "map", ".", "put", "map", ".", "put", "map", ".", "put", "Console", ".", "WriteLine", "map", ".", "print", "name", "=", "Console", ".", "WriteLine", "map", ".", "remove", "Console", ".", "WriteLine", "map", ".", "print", "new", "HashMapOpenAddressing", "(", "12836", ",", ")", "(", "15937", ",", ")", "(", "16750", ",", ")", "(", "13276", ",", ")", "(", "10583", ",", ")", "(", ")", "(", ")", "map", ".", "get", "(", ")", "(", "16750", ")", "(", ")", "(", ")", "(", ")", "\"", "\u5c0f\u54c8", "\"", "\"", "\u5c0f\u5570", "\"", "\"", "\u5c0f\u7b97", "\"", "\"", "\u5c0f\u6cd5", "\"", "\"", "\u5c0f\u9e2d", "\"", "\"", "\\n", "\u6dfb\u52a0\u5b8c\u6210\u540e\uff0c\u54c8\u5e0c\u8868\u4e3a", "\\n", "Key -> Value", "\"", "(", "13276", ")", "+", "name", "\"", "\\n", "\u5220\u9664 16750 \u540e\uff0c\u54c8\u5e0c\u8868\u4e3a", "\\n", "Key -> Value", "\"", "\"", "\\n", "\u8f93\u5165\u5b66\u53f7 13276 \uff0c\u67e5\u8be2\u5230\u59d3\u540d ", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 197, "ast_depth": 9, "n_identifiers": 9, "vocab_size": 46}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/dart/chapter_hashing/hash_map_chaining.dart#32-34", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/dart/chapter_hashing/hash_map_chaining.dart", "language": "Java"}, "method": {"name": "hashFunc", "qualified_name": "codes.dart.chapter_hashing.hash_map_chaining.dart#hashFunc", "start_line": 32, "end_line": 34, "signature": "hashFunc(int key)", "original_code": "int hashFunc(int key) {\n    return key % capacity;\n  }", "doc_comment": "/* \u54c8\u5e0c\u51fd\u6570 */"}, "code_tokens": ["hashFunc", "int", "(", ")", "{", "}", "key", "return", ";", "int", "key", "%", "capacity"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 11}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/dart/chapter_hashing/hash_map_chaining.dart#37-39", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/dart/chapter_hashing/hash_map_chaining.dart", "language": "Java"}, "method": {"name": "loadFactor", "qualified_name": "codes.dart.chapter_hashing.hash_map_chaining.dart#loadFactor", "start_line": 37, "end_line": 39, "signature": "loadFactor()", "original_code": "double loadFactor() {\n    return size / capacity;\n  }", "doc_comment": "/* \u8d1f\u8f7d\u56e0\u5b50 */"}, "code_tokens": ["loadFactor", "double", "(", ")", "{", "}", "return", ";", "size", "/", "capacity"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 18, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 11}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/dart/chapter_hashing/hash_map_chaining.dart#42-49", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/dart/chapter_hashing/hash_map_chaining.dart", "language": "Java"}, "method": {"name": "get", "qualified_name": "codes.dart.chapter_hashing.hash_map_chaining.dart#get", "start_line": 42, "end_line": 49, "signature": "get(int key)", "original_code": "String? get(int key) {\n    int index = hashFunc(key);\n    List<Pair> bucket = buckets[index];\n    // \u904d\u5386\u6876\uff0c\u82e5\u627e\u5230 key \u5219\u8fd4\u56de\u5bf9\u5e94 val\n    for (Pair pair in bucket) {\n      if (pair.key == key) {\n        return pair.val;\n      }", "doc_comment": "/* \u67e5\u8be2\u64cd\u4f5c */"}, "code_tokens": ["String", "?", "{", "// \u904d\u5386\u6876\uff0c\u82e5\u627e\u5230 key \u5219\u8fd4\u56de\u5bf9\u5e94 val", "}", "get", ";", ";", "for", "(", "(", "key", ")", "int", "index", "=", "List", "bucket", "=", "Pair", ";", "hashFunc", "<", "Pair", ">", "buckets", "[", "index", "]", "pair", "in", "bucket", ")", "{", "if", "(", "pair", ".", "key", "==", "key", ")", "{", "return", "pair", ".", "val", "int", "(", "key", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 72, "ast_depth": 7, "n_identifiers": 10, "vocab_size": 30}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/go/chapter_hashing/hash_map_chaining.go#23-134", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/go/chapter_hashing/hash_map_chaining.go", "language": "Java"}, "method": {"name": "newHashMapChaining", "qualified_name": "codes.go.chapter_hashing.hash_map_chaining.go#newHashMapChaining", "start_line": 23, "end_line": 134, "signature": "newHashMapChaining()", "original_code": "func newHashMapChaining() *hashMapChaining {\n\tbuckets := make([][]pair, 4)\n\tfor i := 0; i < 4; i++ {\n\t\tbuckets[i] = make([]pair, 0)\n\t}\n\treturn &hashMapChaining{\n\t\tsize:        0,\n\t\tcapacity:    4,\n\t\tloadThres:   2.0 / 3.0,\n\t\textendRatio: 2,\n\t\tbuckets:     buckets,\n\t}\n}\n\n/* \u54c8\u5e0c\u51fd\u6570 */\nfunc (m *hashMapChaining) hashFunc(key int) int {\n\treturn key % m.capacity\n}\n\n/* \u8d1f\u8f7d\u56e0\u5b50 */\nfunc (m *hashMapChaining) loadFactor() float64 {\n\treturn float64(m.size / m.capacity)\n}\n\n/* \u67e5\u8be2\u64cd\u4f5c */\nfunc (m *hashMapChaining) get(key int) string {\n\tidx := m.hashFunc(key)\n\tbucket := m.buckets[idx]\n\t// \u904d\u5386\u6876\uff0c\u82e5\u627e\u5230 key \u5219\u8fd4\u56de\u5bf9\u5e94 val\n\tfor _, p := range bucket {\n\t\tif p.key == key {\n\t\t\treturn p.val\n\t\t}\n\t}\n\t// \u82e5\u672a\u627e\u5230 key \u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\n\treturn \"\"\n}\n\n/* \u6dfb\u52a0\u64cd\u4f5c */\nfunc (m *hashMapChaining) put(key int, val string) {\n\t// \u5f53\u8d1f\u8f7d\u56e0\u5b50\u8d85\u8fc7\u9608\u503c\u65f6\uff0c\u6267\u884c\u6269\u5bb9\n\tif m.loadFactor() > m.loadThres {\n\t\tm.extend()\n\t}\n\tidx := m.hashFunc(key)\n\t// \u904d\u5386\u6876\uff0c\u82e5\u9047\u5230\u6307\u5b9a key \uff0c\u5219\u66f4\u65b0\u5bf9\u5e94 val \u5e76\u8fd4\u56de\n\tfor _, p := range m.buckets[idx] {\n\t\tif p.key == key {\n\t\t\tp.val = val\n\t\t\treturn\n\t\t}\n\t}\n\t// \u82e5\u65e0\u8be5 key \uff0c\u5219\u5c06\u952e\u503c\u5bf9\u6dfb\u52a0\u81f3\u5c3e\u90e8\n\tp := pair{\n\t\tkey: key,\n\t\tval: val,\n\t}\n\tm.buckets[idx] = append(m.buckets[idx], p)\n\tm.size += 1\n}\n\n/* \u5220\u9664\u64cd\u4f5c */\nfunc (m *hashMapChaining) remove(key int) {\n\tidx := m.hashFunc(key)\n\t// \u904d\u5386\u6876\uff0c\u4ece\u4e2d\u5220\u9664\u952e\u503c\u5bf9\n\tfor i, p := range m.buckets[idx] {\n\t\tif p.key == key {\n\t\t\t// \u5207\u7247\u5220\u9664\n\t\t\tm.buckets[idx] = append(m.buckets[idx][:i], m.buckets[idx][i+1:]...)\n\t\t\tm.size -= 1\n\t\t\tbreak\n\t\t}\n\t}\n}\n\n/* \u6269\u5bb9\u54c8\u5e0c\u8868 */\nfunc (m *hashMapChaining) extend() {\n\t// \u6682\u5b58\u539f\u54c8\u5e0c\u8868\n\ttmpBuckets := make([][]pair, len(m.buckets))\n\tfor i := 0; i < len(m.buckets); i++ {\n\t\ttmpBuckets[i] = make([]pair, len(m.buckets[i]))\n\t\tcopy(tmpBuckets[i], m.buckets[i])\n\t}\n\t// \u521d\u59cb\u5316\u6269\u5bb9\u540e\u7684\u65b0\u54c8\u5e0c\u8868\n\tm.capacity *= m.extendRatio\n\tm.buckets = make([][]pair, m.capacity)\n\tfor i := 0; i < m.capacity; i++ {\n\t\tm.buckets[i] = make([]pair, 0)\n\t}\n\tm.size = 0\n\t// \u5c06\u952e\u503c\u5bf9\u4ece\u539f\u54c8\u5e0c\u8868\u642c\u8fd0\u81f3\u65b0\u54c8\u5e0c\u8868\n\tfor _, bucket := range tmpBuckets {\n\t\tfor _, p := range bucket {\n\t\t\tm.put(p.key, p.val)\n\t\t}\n\t}\n}\n\n/* \u6253\u5370\u54c8\u5e0c\u8868 */\nfunc (m *hashMapChaining) print() {\n\tvar builder strings.Builder\n\n\tfor _, bucket := range m.buckets {\n\t\tbuilder.WriteString(\"[\")\n\t\tfor _, p := range bucket {\n\t\t\tbuilder.WriteString(strconv.Itoa(p.key) + \" -> \" + p.val + \" \")\n\t\t}\n\t\tbuilder.WriteString(\"]\")\n\t\tfmt.Println(builder.String())\n\t\tbuilder.Reset()\n\t}\n}", "doc_comment": "/* \u6784\u9020\u65b9\u6cd5 */"}, "code_tokens": ["func", "newHashMapChaining", "(", ")", "*", "hashMapChaining", "{", "", ";", ";", "", "{", "", "buckets", "=", "0", "i", "<", "4", "i", "++", "", "{", "/* \u8d1f\u8f7d\u56e0\u5b50 */", "/* \u67e5\u8be2\u64cd\u4f5c */", "/* \u6dfb\u52a0\u64cd\u4f5c */", "", ":", "=", "pair", ",", "4", ")", "for", "i", ":", "&", "hashMapChaining", "size", ":", "hashFunc", "int", "{", "}", "", "float64", "{", "}", "get", "string", "{", "}", "put", "{", "// \u5f53\u8d1f\u8f7d\u56e0\u5b50\u8d85\u8fc7\u9608\u503c\u65f6\uff0c\u6267\u884c\u6269\u5bb9", "/* \u5220\u9664\u64cd\u4f5c */", "", "make", "buckets", "[", "i", "]", "=", "pair", ",", "0", ")", "}", "return", "0", ",", "capacity", ":", "(", ")", "(", ")", "return", "key", "%", "func", "loadFactor", "return", "", "func", "(", ")", "", "bucket", ",", "// \u82e5\u672a\u627e\u5230 key \u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32", "", "return", "", "func", "(", ",", ")", "if", ">", "{", "}", "idx", ",", "// \u82e5\u65e0\u8be5 key \uff0c\u5219\u5c06\u952e\u503c\u5bf9\u6dfb\u52a0\u81f3\u5c3e\u90e8", "", "", "{", "}", "remove", "{", "", "(", "[", "]", "[", "]", "make", "4", ",", "loadThres", ":", "m", "*", "hashMapChaining", "key", "int", "m", ".", "capacity", "(", ")", "(", ")", "float64", "(", ")", "key", "int", "idx", "=", ":", "=", "// \u904d\u5386\u6876\uff0c\u82e5\u627e\u5230 key \u5219\u8fd4\u56de\u5bf9\u5e94 val", "for", "_", "p", "=", "\"", "\"", "(", ")", "key", "int", "val", "string", "m", ".", "loadFactor", "m", ".", "loadThres", "", ":", "=", "// \u904d\u5386\u6876\uff0c\u82e5\u9047\u5230\u6307\u5b9a key \uff0c\u5219\u66f4\u65b0\u5bf9\u5e94 val \u5e76\u8fd4\u56de", "for", "_", "p", "=", "p", "=", "pair", "key", ":", "func", "(", ")", "", "{", "/* \u6253\u5370\u54c8\u5e0c\u8868 */", "}", "(", "[", "]", ",", "extendRatio", ":", "m", "*", "hashMapChaining", "(", ")", "m", "*", "hashMapChaining", ":", "m", ".", "hashFunc", "[", "idx", "]", ":", "range", "bucket", "{", "}", "m", "*", "hashMapChaining", "(", ")", "m", ".", "extend", "m", ".", "hashFunc", ":", "range", "{", "}", ":", "key", ",", "", "(", ")", "key", "int", "idx", "=", "if", "{", "// \u5207\u7247\u5220\u9664", "// \u521d\u59cb\u5316\u6269\u5bb9\u540e\u7684\u65b0\u54c8\u5e0c\u8868", "}", "", "", "{", "}", "2.0", "/", "3.0", "2", ",", "buckets", ":", "/", "(", "key", ")", "m", ".", "buckets", "if", "{", "}", "(", ")", "(", "key", ")", "[", "idx", "]", "if", "{", "}", ",", "val", ":", "val", "}", "m", ".", "buckets", "=", "m", "*", "hashMapChaining", ":", "=", "// \u904d\u5386\u6876\uff0c\u4ece\u4e2d\u5220\u9664\u952e\u503c\u5bf9", "for", "i", ",", "p", ":", "range", "[", "idx", "]", "==", "key", ":", "=", "make", "(", "[", "]", "[", "]", "pair", ",", ")", "for", "{", "}", ";", ";", "", "{", "}", "func", "print", "var", "", ",", "", "", "buckets", "/* \u54c8\u5e0c\u51fd\u6570 */", "", "m", ".", "size", "m", ".", "capacity", "==", "key", "return", "p", ".", "val", "m", ".", "buckets", "==", "key", "=", "return", "[", "]", "+=", "1", "m", ".", "hashFunc", "m", ".", "buckets", "p", ".", "key", "=", "len", ";", ";", "i", "++", ")", "*=", ":", "=", "0", "i", "<", "i", "++", ":", "=", "range", "tmpBuckets", "{", "for", "_", ",", "p", ":", "=", "range", "bucket", "{", "}", "(", ")", "(", ")", "builder", "strings", ".", "Builder", "for", "_", "bucket", "=", ".", "Reset", ",", "}", "}", "func", "p", ".", "key", "p", ".", "key", "p", ".", "val", "val", "idx", ".", "size", "(", "key", ")", "[", "idx", "]", "-=", "/* \u6269\u5bb9\u54c8\u5e0c\u8868 */", "// \u6682\u5b58\u539f\u54c8\u5e0c\u8868", "tmpBuckets", "(", ")", "i", "=", "0", "i", "<", "=", "copy", "m", ".", "capacity", "=", "i", "m", ".", "capacity", "=", "bucket", "", "m", "*", "hashMapChaining", ":", "=", "{", ",", "p", ":", "range", "bucket", "{", "}", ".", "Println", "builder", "(", ")", "append", "m", "m", ".", "buckets", ".", "size", "1", "break", "}", "}", "}", "{", "m", ".", "buckets", ":", "len", "tmpBuckets", "[", "i", "]", "pair", ",", "len", "(", ",", ")", "m", ".", "extendRatio", "m", ".", "buckets", "pair", ",", ")", "for", "[", "i", "]", "pair", ",", "0", ")", "}", "// \u5c06\u952e\u503c\u5bf9\u4ece\u539f\u54c8\u5e0c\u8868\u642c\u8fd0\u81f3\u65b0\u54c8\u5e0c\u8868", "for", "_", ",", "m", ".", "put", "range", "builder", ".", "WriteString", "for", "_", "builder", ".", "WriteString", "builder", ".", "WriteString", "fmt", "(", ")", "(", ",", "p", ")", "append", "m", "func", "extend", "(", ")", "make", "(", ")", "tmpBuckets", "[", "i", "]", "[", "i", "]", "make", "m", ".", "capacity", "m", ".", "buckets", "make", "=", "0", "(", ",", ")", "m", ".", "buckets", "(", ")", "(", ")", "(", ")", "builder", ".", "String", "[", "idx", "]", "(", ",", ")", "(", ")", "(", ")", "m", ".", "buckets", "(", "[", "]", "[", "i", "]", "m", ".", "buckets", "(", "[", "]", "[", "]", "(", "[", "]", "m", ".", "size", "p", ".", "key", "p", ".", "val", "\"", "[", "\"", "+", "\"", "]", "\"", "(", ")", "m", ".", "buckets", "[", "i", "]", "[", "]", "...", "m", "*", "hashMapChaining", "m", ".", "buckets", "+", "\"", " ", "\"", "[", "idx", "]", ":", "[", "idx", "]", "i", "+", "1", ":", "+", "p", ".", "val", "m", ".", "buckets", "m", ".", "buckets", "strconv", ".", "Itoa", "\"", " -> ", "\"", "(", ")", "p", ".", "key"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 976, "ast_depth": 21, "n_identifiers": 44, "vocab_size": 99}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/go/chapter_hashing/hash_map_open_addressing.go#23-142", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/go/chapter_hashing/hash_map_open_addressing.go", "language": "Java"}, "method": {"name": "newHashMapOpenAddressing", "qualified_name": "codes.go.chapter_hashing.hash_map_open_addressing.go#newHashMapOpenAddressing", "start_line": 23, "end_line": 142, "signature": "newHashMapOpenAddressing()", "original_code": "func newHashMapOpenAddressing() *hashMapOpenAddressing {\n\tbuckets := make([]pair, 4)\n\treturn &hashMapOpenAddressing{\n\t\tsize:        0,\n\t\tcapacity:    4,\n\t\tloadThres:   2.0 / 3.0,\n\t\textendRatio: 2,\n\t\tbuckets:     buckets,\n\t\tremoved: pair{\n\t\t\tkey: -1,\n\t\t\tval: \"-1\",\n\t\t},\n\t}\n}\n\n/* \u54c8\u5e0c\u51fd\u6570 */\nfunc (m *hashMapOpenAddressing) hashFunc(key int) int {\n\treturn key % m.capacity\n}\n\n/* \u8d1f\u8f7d\u56e0\u5b50 */\nfunc (m *hashMapOpenAddressing) loadFactor() float64 {\n\treturn float64(m.size) / float64(m.capacity)\n}\n\n/* \u67e5\u8be2\u64cd\u4f5c */\nfunc (m *hashMapOpenAddressing) get(key int) string {\n\tidx := m.hashFunc(key)\n\t// \u7ebf\u6027\u63a2\u6d4b\uff0c\u4ece index \u5f00\u59cb\u5411\u540e\u904d\u5386\n\tfor i := 0; i < m.capacity; i++ {\n\t\t// \u8ba1\u7b97\u6876\u7d22\u5f15\uff0c\u8d8a\u8fc7\u5c3e\u90e8\u8fd4\u56de\u5934\u90e8\n\t\tj := (idx + 1) % m.capacity\n\t\t// \u82e5\u9047\u5230\u7a7a\u6876\uff0c\u8bf4\u660e\u65e0\u6b64 key \uff0c\u5219\u8fd4\u56de null\n\t\tif m.buckets[j] == (pair{}) {\n\t\t\treturn \"\"\n\t\t}\n\t\t// \u82e5\u9047\u5230\u6307\u5b9a key \uff0c\u5219\u8fd4\u56de\u5bf9\u5e94 val\n\t\tif m.buckets[j].key == key && m.buckets[j] != m.removed {\n\t\t\treturn m.buckets[j].val\n\t\t}\n\t}\n\t// \u82e5\u672a\u627e\u5230 key \u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\n\treturn \"\"\n}\n\n/* \u6dfb\u52a0\u64cd\u4f5c */\nfunc (m *hashMapOpenAddressing) put(key int, val string) {\n\t// \u5f53\u8d1f\u8f7d\u56e0\u5b50\u8d85\u8fc7\u9608\u503c\u65f6\uff0c\u6267\u884c\u6269\u5bb9\n\tif m.loadFactor() > m.loadThres {\n\t\tm.extend()\n\t}\n\tidx := m.hashFunc(key)\n\t// \u7ebf\u6027\u63a2\u6d4b\uff0c\u4ece index \u5f00\u59cb\u5411\u540e\u904d\u5386\n\tfor i := 0; i < m.capacity; i++ {\n\t\t// \u8ba1\u7b97\u6876\u7d22\u5f15\uff0c\u8d8a\u8fc7\u5c3e\u90e8\u8fd4\u56de\u5934\u90e8\n\t\tj := (idx + i) % m.capacity\n\t\t// \u82e5\u9047\u5230\u7a7a\u6876\u3001\u6216\u5e26\u6709\u5220\u9664\u6807\u8bb0\u7684\u6876\uff0c\u5219\u5c06\u952e\u503c\u5bf9\u653e\u5165\u8be5\u6876\n\t\tif m.buckets[j] == (pair{}) || m.buckets[j] == m.removed {\n\t\t\tm.buckets[j] = pair{\n\t\t\t\tkey: key,\n\t\t\t\tval: val,\n\t\t\t}\n\t\t\tm.size += 1\n\t\t\treturn\n\t\t}\n\t\t// \u82e5\u9047\u5230\u6307\u5b9a key \uff0c\u5219\u66f4\u65b0\u5bf9\u5e94 val\n\t\tif m.buckets[j].key == key {\n\t\t\tm.buckets[j].val = val\n\t\t}\n\t}\n}\n\n/* \u5220\u9664\u64cd\u4f5c */\nfunc (m *hashMapOpenAddressing) remove(key int) {\n\tidx := m.hashFunc(key)\n\t// \u904d\u5386\u6876\uff0c\u4ece\u4e2d\u5220\u9664\u952e\u503c\u5bf9\n\t// \u7ebf\u6027\u63a2\u6d4b\uff0c\u4ece index \u5f00\u59cb\u5411\u540e\u904d\u5386\n\tfor i := 0; i < m.capacity; i++ {\n\t\t// \u8ba1\u7b97\u6876\u7d22\u5f15\uff0c\u8d8a\u8fc7\u5c3e\u90e8\u8fd4\u56de\u5934\u90e8\n\t\tj := (idx + 1) % m.capacity\n\t\t// \u82e5\u9047\u5230\u7a7a\u6876\uff0c\u8bf4\u660e\u65e0\u6b64 key \uff0c\u5219\u76f4\u63a5\u8fd4\u56de\n\t\tif m.buckets[j] == (pair{}) {\n\t\t\treturn\n\t\t}\n\t\t// \u82e5\u9047\u5230\u6307\u5b9a key \uff0c\u5219\u6807\u8bb0\u5220\u9664\u5e76\u8fd4\u56de\n\t\tif m.buckets[j].key == key {\n\t\t\tm.buckets[j] = m.removed\n\t\t\tm.size -= 1\n\t\t}\n\t}\n}\n\n/* \u6269\u5bb9\u54c8\u5e0c\u8868 */\nfunc (m *hashMapOpenAddressing) extend() {\n\t// \u6682\u5b58\u539f\u54c8\u5e0c\u8868\n\ttmpBuckets := make([]pair, len(m.buckets))\n\tcopy(tmpBuckets, m.buckets)\n\n\t// \u521d\u59cb\u5316\u6269\u5bb9\u540e\u7684\u65b0\u54c8\u5e0c\u8868\n\tm.capacity *= m.extendRatio\n\tm.buckets = make([]pair, m.capacity)\n\tm.size = 0\n\t// \u5c06\u952e\u503c\u5bf9\u4ece\u539f\u54c8\u5e0c\u8868\u642c\u8fd0\u81f3\u65b0\u54c8\u5e0c\u8868\n\tfor _, p := range tmpBuckets {\n\t\tif p != (pair{}) && p != m.removed {\n\t\t\tm.put(p.key, p.val)\n\t\t}\n\t}\n}\n\n/* \u6253\u5370\u54c8\u5e0c\u8868 */\nfunc (m *hashMapOpenAddressing) print() {\n\tfor _, p := range m.buckets {\n\t\tif p != (pair{}) {\n\t\t\tfmt.Println(strconv.Itoa(p.key) + \" -> \" + p.val)\n\t\t} else {\n\t\t\tfmt.Println(\"nil\")\n\t\t}\n\t}\n}", "doc_comment": "/* \u6784\u9020\u65b9\u6cd5 */"}, "code_tokens": ["func", "newHashMapOpenAddressing", "(", ")", "*", "hashMapOpenAddressing", "{", "", "", "{", "", "buckets", "&", "hashMapOpenAddressing", "size", ":", "{", "/* \u8d1f\u8f7d\u56e0\u5b50 */", "/* \u67e5\u8be2\u64cd\u4f5c */", "/* \u6dfb\u52a0\u64cd\u4f5c */", "", ":", "=", "pair", ",", "4", ")", "return", "0", ",", "capacity", ":", "key", ":", "", "float64", "{", "}", "get", "string", "{", "// \u82e5\u672a\u627e\u5230 key \u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32", "}", "put", "{", "// \u5f53\u8d1f\u8f7d\u56e0\u5b50\u8d85\u8fc7\u9608\u503c\u65f6\uff0c\u6267\u884c\u6269\u5bb9", "", "make", "4", ",", "loadThres", ":", ",", "val", ":", "/* \u54c8\u5e0c\u51fd\u6570 */", "func", "loadFactor", "return", "", "func", "(", ")", ";", ";", "", "{", "// \u8ba1\u7b97\u6876\u7d22\u5f15\uff0c\u8d8a\u8fc7\u5c3e\u90e8\u8fd4\u56de\u5934\u90e8", "// \u82e5\u9047\u5230\u6307\u5b9a key \uff0c\u5219\u8fd4\u56de\u5bf9\u5e94 val", "}", "return", "", "func", "(", ",", ")", "if", ">", "{", "}", ";", ";", "", "{", "// \u8ba1\u7b97\u6876\u7d22\u5f15\uff0c\u8d8a\u8fc7\u5c3e\u90e8\u8fd4\u56de\u5934\u90e8", "/* \u5220\u9664\u64cd\u4f5c */", "/* \u6269\u5bb9\u54c8\u5e0c\u8868 */", "", "(", "[", "]", ",", "extendRatio", ":", "-", "1", ",", "}", ",", "}", "}", "hashFunc", "int", "{", "}", "(", ")", "(", ")", "/", "(", ")", "key", "int", "idx", "=", "0", "i", "<", "i", "++", "j", ":", ")", "{", "}", "if", "&&", "!=", "{", "}", "\"", "\"", "(", ")", "key", "int", "val", "string", "m", ".", "loadFactor", "m", ".", "loadThres", "", "idx", "=", "0", "i", "<", "i", "++", "j", ":", ")", "||", "==", "{", "}", "remove", "{", "}", "", "", "{", "// \u6682\u5b58\u539f\u54c8\u5e0c\u8868", "// \u521d\u59cb\u5316\u6269\u5bb9\u540e\u7684\u65b0\u54c8\u5e0c\u8868", "", "2.0", "/", "3.0", "2", ",", "buckets", ":", "\"", "-1", "\"", "func", "(", ")", "return", "key", "%", "m", "*", "hashMapOpenAddressing", "float64", "float64", "m", "*", "hashMapOpenAddressing", ":", "=", "// \u7ebf\u6027\u63a2\u6d4b\uff0c\u4ece index \u5f00\u59cb\u5411\u540e\u904d\u5386", "for", "i", ":", "m", ".", "capacity", "=", "==", "(", "pair", "{", "}", "return", "", "==", "key", "[", "j", "]", "m", ".", "removed", "return", "", "m", "*", "hashMapOpenAddressing", "(", ")", "m", ".", "extend", ":", "=", "// \u7ebf\u6027\u63a2\u6d4b\uff0c\u4ece index \u5f00\u59cb\u5411\u540e\u904d\u5386", "for", "i", ":", "m", ".", "capacity", "=", "==", "(", "pair", "{", "}", "[", "j", "]", "m", ".", "removed", "", "{", "}", "func", "(", ")", ";", ";", "", "{", "// \u8ba1\u7b97\u6876\u7d22\u5f15\uff0c\u8d8a\u8fc7\u5c3e\u90e8\u8fd4\u56de\u5934\u90e8", "// \u82e5\u9047\u5230\u6307\u5b9a key \uff0c\u5219\u6807\u8bb0\u5220\u9664\u5e76\u8fd4\u56de", "}", "func", "extend", ")", "", "{", "}", "buckets", "", "(", ")", "key", "int", "m", ".", "capacity", "(", ")", "(", ")", "m", ".", "hashFunc", "%", "\"", "\"", ".", "key", "m", ".", "buckets", ".", "val", "(", ")", "m", ".", "hashFunc", "%", "m", ".", "buckets", "=", "pair", "key", ":", "{", "}", "(", ")", "key", "int", "idx", "=", "0", "i", "<", "i", "++", "j", ":", ")", "{", "}", "if", "", "{", "}", "(", ")", "(", ")", "tmpBuckets", "=", "copy", "&&", "for", "_", ",", "p", ":", ",", "removed", ":", "pair", "m", "*", "hashMapOpenAddressing", "m", ".", "size", "m", ".", "capacity", "(", "key", ")", "(", ")", "// \u82e5\u9047\u5230\u7a7a\u6876\uff0c\u8bf4\u660e\u65e0\u6b64 key \uff0c\u5219\u8fd4\u56de null", "if", "[", "j", "]", "[", "j", "]", "[", "j", "]", "(", "key", ")", "(", ")", "// \u82e5\u9047\u5230\u7a7a\u6876\u3001\u6216\u5e26\u6709\u5220\u9664\u6807\u8bb0\u7684\u6876\uff0c\u5219\u5c06\u952e\u503c\u5bf9\u653e\u5165\u8be5\u6876", "if", "[", "j", "]", "[", "j", "]", "key", ",", "", "", "m", "*", "hashMapOpenAddressing", ":", "=", "// \u904d\u5386\u6876\uff0c\u4ece\u4e2d\u5220\u9664\u952e\u503c\u5bf9", "// \u7ebf\u6027\u63a2\u6d4b\uff0c\u4ece index \u5f00\u59cb\u5411\u540e\u904d\u5386", "for", "i", ":", "m", ".", "capacity", "=", "==", "(", "pair", "{", "}", "return", "==", "key", "", "m", "*", "hashMapOpenAddressing", ":", "pair", ",", "len", "(", "tmpBuckets", ",", ")", "!=", "p", "!=", "=", "range", "buckets", "{", "}", "idx", "+", "1", "m", ".", "capacity", "m", ".", "buckets", "m", ".", "buckets", "m", ".", "buckets", "idx", "+", "i", "m", ".", "capacity", "m", ".", "buckets", "m", ".", "buckets", ",", "val", ":", "val", "}", "m", ".", "size", "+=", "1", "return", "}", "// \u82e5\u9047\u5230\u6307\u5b9a key \uff0c\u5219\u66f4\u65b0\u5bf9\u5e94 val", "if", "m", ".", "buckets", ".", "key", "==", "key", "=", "val", "m", ".", "hashFunc", "%", ".", "key", "=", "make", "(", ")", "m", ".", "buckets", "*=", ":", "=", "range", "tmpBuckets", "{", "if", "p", "(", "pair", ")", "(", ")", "m", ".", "if", "p", "!=", "(", "pair", "else", "{", "}", "[", "]", ".", "val", "(", "key", ")", "(", ")", "// \u82e5\u9047\u5230\u7a7a\u6876\uff0c\u8bf4\u660e\u65e0\u6b64 key \uff0c\u5219\u76f4\u63a5\u8fd4\u56de", "if", "[", "j", "]", "[", "j", "]", "[", "j", "]", "-=", "1", "(", "[", "]", "m", ".", "buckets", "m", ".", "capacity", "=", "p", "{", "}", ".", "put", "p", ".", "key", ",", "p", ".", "/* \u6253\u5370\u54c8\u5e0c\u8868 */", "hashMapOpenAddressing", "print", "{", "}", ")", "{", "}", "", "j", "[", "j", "]", "idx", "+", "1", "m", ".", "capacity", "m", ".", "buckets", "m", ".", "buckets", "m", ".", "buckets", "m", ".", "removed", "m", ".", "size", "m", ".", "extendRatio", "m", ".", "buckets", "pair", ",", ")", "// \u5c06\u952e\u503c\u5bf9\u4ece\u539f\u54c8\u5e0c\u8868\u642c\u8fd0\u81f3\u65b0\u54c8\u5e0c\u8868", "for", "_", ",", "m", ".", "removed", "{", "m", "val", ")", "}", "}", "}", "func", "(", "m", "*", "(", ")", "", "fmt", ".", "Println", "m", ".", "buckets", "make", "m", ".", "capacity", "=", "0", "fmt", ".", "Println", "(", ")", "(", "[", "]", "m", ".", "size", "(", ")", "\"", "nil", "\"", "+", "+", "p", ".", "val", "strconv", ".", "Itoa", "\"", " -> ", "\"", "(", ")", "p", ".", "key"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 955, "ast_depth": 22, "n_identifiers": 39, "vocab_size": 100}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/java/chapter_hashing/hash_map_chaining.java#33-35", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/java/chapter_hashing/hash_map_chaining.java", "language": "Java"}, "method": {"name": "hashFunc", "qualified_name": "codes.java.chapter_hashing.hash_map_chaining#hashFunc", "start_line": 33, "end_line": 35, "signature": "hashFunc(int key)", "original_code": "int hashFunc(int key) {\n        return key % capacity;\n    }", "doc_comment": "/* \u54c8\u5e0c\u51fd\u6570 */"}, "code_tokens": ["hashFunc", "int", "(", ")", "{", "}", "key", "return", ";", "int", "key", "%", "capacity"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 11}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/java/chapter_hashing/hash_map_chaining.java#38-40", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/java/chapter_hashing/hash_map_chaining.java", "language": "Java"}, "method": {"name": "loadFactor", "qualified_name": "codes.java.chapter_hashing.hash_map_chaining#loadFactor", "start_line": 38, "end_line": 40, "signature": "loadFactor()", "original_code": "double loadFactor() {\n        return (double) size / capacity;\n    }", "doc_comment": "/* \u8d1f\u8f7d\u56e0\u5b50 */"}, "code_tokens": ["loadFactor", "double", "(", ")", "{", "}", "return", ";", "/", "capacity", "(", ")", "size", "double"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 23, "ast_depth": 8, "n_identifiers": 3, "vocab_size": 11}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/java/chapter_hashing/hash_map_chaining.java#43-54", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/java/chapter_hashing/hash_map_chaining.java", "language": "Java"}, "method": {"name": "get", "qualified_name": "codes.java.chapter_hashing.hash_map_chaining#get", "start_line": 43, "end_line": 54, "signature": "get(int key)", "original_code": "String get(int key) {\n        int index = hashFunc(key);\n        List<Pair> bucket = buckets.get(index);\n        // \u904d\u5386\u6876\uff0c\u82e5\u627e\u5230 key \u5219\u8fd4\u56de\u5bf9\u5e94 val\n        for (Pair pair : bucket) {\n            if (pair.key == key) {\n                return pair.val;\n            }\n        }\n        // \u82e5\u672a\u627e\u5230 key \u5219\u8fd4\u56de null\n        return null;\n    }", "doc_comment": "/* \u67e5\u8be2\u64cd\u4f5c */"}, "code_tokens": ["String", "get", "(", ")", "{", "// \u904d\u5386\u6876\uff0c\u82e5\u627e\u5230 key \u5219\u8fd4\u56de\u5bf9\u5e94 val", "// \u82e5\u672a\u627e\u5230 key \u5219\u8fd4\u56de null", "}", "key", ";", ";", "for", "(", "Pair", "pair", ":", "bucket", ")", "return", "null", ";", "int", "int", "index", "=", "List", "bucket", "=", "{", "}", "hashFunc", "<", "Pair", ">", "buckets", ".", "get", "if", "(", "key", ")", "(", "index", ")", "(", ")", "{", "}", "==", "key", "return", ";", "pair", ".", "key", "pair", ".", "val"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 85, "ast_depth": 10, "n_identifiers": 8, "vocab_size": 29}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/java/chapter_hashing/hash_map_chaining.java#57-75", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/java/chapter_hashing/hash_map_chaining.java", "language": "Java"}, "method": {"name": "put", "qualified_name": "codes.java.chapter_hashing.hash_map_chaining#put", "start_line": 57, "end_line": 75, "signature": "put(int key, String val)", "original_code": "void put(int key, String val) {\n        // \u5f53\u8d1f\u8f7d\u56e0\u5b50\u8d85\u8fc7\u9608\u503c\u65f6\uff0c\u6267\u884c\u6269\u5bb9\n        if (loadFactor() > loadThres) {\n            extend();\n        }\n        int index = hashFunc(key);\n        List<Pair> bucket = buckets.get(index);\n        // \u904d\u5386\u6876\uff0c\u82e5\u9047\u5230\u6307\u5b9a key \uff0c\u5219\u66f4\u65b0\u5bf9\u5e94 val \u5e76\u8fd4\u56de\n        for (Pair pair : bucket) {\n            if (pair.key == key) {\n                pair.val = val;\n                return;\n            }\n        }\n        // \u82e5\u65e0\u8be5 key \uff0c\u5219\u5c06\u952e\u503c\u5bf9\u6dfb\u52a0\u81f3\u5c3e\u90e8\n        Pair pair = new Pair(key, val);\n        bucket.add(pair);\n        size++;\n    }", "doc_comment": "/* \u6dfb\u52a0\u64cd\u4f5c */"}, "code_tokens": ["void", "put", "(", ",", ")", "{", "// \u5f53\u8d1f\u8f7d\u56e0\u5b50\u8d85\u8fc7\u9608\u503c\u65f6\uff0c\u6267\u884c\u6269\u5bb9", "// \u904d\u5386\u6876\uff0c\u82e5\u9047\u5230\u6307\u5b9a key \uff0c\u5219\u66f4\u65b0\u5bf9\u5e94 val \u5e76\u8fd4\u56de", "// \u82e5\u65e0\u8be5 key \uff0c\u5219\u5c06\u952e\u503c\u5bf9\u6dfb\u52a0\u81f3\u5c3e\u90e8", "}", "key", "String", "val", "if", ";", ";", "for", "(", "Pair", "pair", ":", "bucket", ")", "Pair", ";", ";", ";", "int", "(", ")", "{", "}", "int", "index", "=", "List", "bucket", "=", "{", "}", "pair", "=", "bucket", ".", "add", "size", "++", ">", "loadThres", ";", "hashFunc", "<", "Pair", ">", "buckets", ".", "get", "if", "new", "Pair", "(", "pair", ")", "loadFactor", "extend", "(", "key", ")", "(", "index", ")", "(", ")", "{", "}", "(", "key", ",", "val", ")", "(", ")", "(", ")", "==", "key", ";", "return", ";", "pair", ".", "key", "=", "val", "pair", ".", "val"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 144, "ast_depth": 11, "n_identifiers": 14, "vocab_size": 39}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/java/chapter_hashing/hash_map_chaining.java#78-89", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/java/chapter_hashing/hash_map_chaining.java", "language": "Java"}, "method": {"name": "remove", "qualified_name": "codes.java.chapter_hashing.hash_map_chaining#remove", "start_line": 78, "end_line": 89, "signature": "remove(int key)", "original_code": "void remove(int key) {\n        int index = hashFunc(key);\n        List<Pair> bucket = buckets.get(index);\n        // \u904d\u5386\u6876\uff0c\u4ece\u4e2d\u5220\u9664\u952e\u503c\u5bf9\n        for (Pair pair : bucket) {\n            if (pair.key == key) {\n                bucket.remove(pair);\n                size--;\n                break;\n            }\n        }\n    }", "doc_comment": "/* \u5220\u9664\u64cd\u4f5c */"}, "code_tokens": ["void", "remove", "(", ")", "{", "// \u904d\u5386\u6876\uff0c\u4ece\u4e2d\u5220\u9664\u952e\u503c\u5bf9", "}", "key", ";", ";", "for", "(", "Pair", "pair", ":", "bucket", ")", "int", "int", "index", "=", "List", "bucket", "=", "{", "}", "hashFunc", "<", "Pair", ">", "buckets", ".", "get", "if", "(", "key", ")", "(", "index", ")", "(", ")", "{", "}", "==", "key", ";", ";", "break", ";", "pair", ".", "key", "bucket", ".", "remove", "size", "--", "(", "pair", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 91, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 29}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/java/chapter_hashing/hash_map_chaining.java#92-108", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/java/chapter_hashing/hash_map_chaining.java", "language": "Java"}, "method": {"name": "extend", "qualified_name": "codes.java.chapter_hashing.hash_map_chaining#extend", "start_line": 92, "end_line": 108, "signature": "extend()", "original_code": "void extend() {\n        // \u6682\u5b58\u539f\u54c8\u5e0c\u8868\n        List<List<Pair>> bucketsTmp = buckets;\n        // \u521d\u59cb\u5316\u6269\u5bb9\u540e\u7684\u65b0\u54c8\u5e0c\u8868\n        capacity *= extendRatio;\n        buckets = new ArrayList<>(capacity);\n        for (int i = 0; i < capacity; i++) {\n            buckets.add(new ArrayList<>());\n        }\n        size = 0;\n        // \u5c06\u952e\u503c\u5bf9\u4ece\u539f\u54c8\u5e0c\u8868\u642c\u8fd0\u81f3\u65b0\u54c8\u5e0c\u8868\n        for (List<Pair> bucket : bucketsTmp) {\n            for (Pair pair : bucket) {\n                put(pair.key, pair.val);\n            }\n        }\n    }", "doc_comment": "/* \u6269\u5bb9\u54c8\u5e0c\u8868 */"}, "code_tokens": ["void", "extend", "(", ")", "{", "// \u6682\u5b58\u539f\u54c8\u5e0c\u8868", "// \u521d\u59cb\u5316\u6269\u5bb9\u540e\u7684\u65b0\u54c8\u5e0c\u8868", "// \u5c06\u952e\u503c\u5bf9\u4ece\u539f\u54c8\u5e0c\u8868\u642c\u8fd0\u81f3\u65b0\u54c8\u5e0c\u8868", "}", ";", ";", ";", "for", "(", ";", ")", ";", "for", "(", "bucket", ":", "bucketsTmp", ")", "List", "bucketsTmp", "=", "buckets", "capacity", "*=", "extendRatio", "buckets", "=", ";", "i", "<", "capacity", "i", "++", "{", "}", "size", "=", "0", "List", "{", "}", "<", ">", "new", "int", "i", "=", "0", ";", "<", "Pair", ">", "for", "(", "Pair", "pair", ":", "bucket", ")", "List", "ArrayList", "(", "capacity", ")", "buckets", ".", "add", "{", "}", "<", "Pair", ">", "<", ">", "(", ")", ";", "new", "put", "ArrayList", "(", ")", "(", ",", ")", "<", ">", "pair", ".", "key", "pair", ".", "val"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 143, "ast_depth": 12, "n_identifiers": 13, "vocab_size": 37}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/java/chapter_hashing/hash_map_chaining.java#111-119", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/java/chapter_hashing/hash_map_chaining.java", "language": "Java"}, "method": {"name": "print", "qualified_name": "codes.java.chapter_hashing.hash_map_chaining#print", "start_line": 111, "end_line": 119, "signature": "print()", "original_code": "void print() {\n        for (List<Pair> bucket : buckets) {\n            List<String> res = new ArrayList<>();\n            for (Pair pair : bucket) {\n                res.add(pair.key + \" -> \" + pair.val);\n            }\n            System.out.println(res);\n        }\n    }", "doc_comment": "/* \u6253\u5370\u54c8\u5e0c\u8868 */"}, "code_tokens": ["void", "print", "(", ")", "{", "}", "for", "(", "bucket", ":", "buckets", ")", "List", "{", "}", "<", "Pair", ">", ";", "for", "(", "Pair", "pair", ":", "bucket", ")", ";", "List", "res", "=", "{", "}", ".", "println", "<", "String", ">", "new", ";", "System", ".", "out", "(", "res", ")", "ArrayList", "(", ")", "res", ".", "add", "<", ">", "(", ")", "+", "+", "pair", ".", "val", "pair", ".", "key", "\"", " -> ", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 96, "ast_depth": 14, "n_identifiers": 11, "vocab_size": 31}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/java/chapter_hashing/hash_map_chaining.java#123-147", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/java/chapter_hashing/hash_map_chaining.java", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.java.chapter_hashing.hash_map_chaining#main", "start_line": 123, "end_line": 147, "signature": "main(String[] args)", "original_code": "public static void main(String[] args) {\n        /* \u521d\u59cb\u5316\u54c8\u5e0c\u8868 */\n        HashMapChaining map = new HashMapChaining();\n\n        /* \u6dfb\u52a0\u64cd\u4f5c */\n        // \u5728\u54c8\u5e0c\u8868\u4e2d\u6dfb\u52a0\u952e\u503c\u5bf9 (key, value)\n        map.put(12836, \"\u5c0f\u54c8\");\n        map.put(15937, \"\u5c0f\u5570\");\n        map.put(16750, \"\u5c0f\u7b97\");\n        map.put(13276, \"\u5c0f\u6cd5\");\n        map.put(10583, \"\u5c0f\u9e2d\");\n        System.out.println(\"\\n\u6dfb\u52a0\u5b8c\u6210\u540e\uff0c\u54c8\u5e0c\u8868\u4e3a\\nKey -> Value\");\n        map.print();\n\n        /* \u67e5\u8be2\u64cd\u4f5c */\n        // \u5411\u54c8\u5e0c\u8868\u8f93\u5165\u952e key \uff0c\u5f97\u5230\u503c value\n        String name = map.get(13276);\n        System.out.println(\"\\n\u8f93\u5165\u5b66\u53f7 13276 \uff0c\u67e5\u8be2\u5230\u59d3\u540d \" + name);\n\n        /* \u5220\u9664\u64cd\u4f5c */\n        // \u5728\u54c8\u5e0c\u8868\u4e2d\u5220\u9664\u952e\u503c\u5bf9 (key, value)\n        map.remove(12836);\n        System.out.println(\"\\n\u5220\u9664 12836 \u540e\uff0c\u54c8\u5e0c\u8868\u4e3a\\nKey -> Value\");\n        map.print();\n    }", "doc_comment": ""}, "code_tokens": ["void", "main", "public", "static", "(", ")", "{", "/* \u521d\u59cb\u5316\u54c8\u5e0c\u8868 */", "/* \u6dfb\u52a0\u64cd\u4f5c */", "// \u5728\u54c8\u5e0c\u8868\u4e2d\u6dfb\u52a0\u952e\u503c\u5bf9 (key, value)", "/* \u67e5\u8be2\u64cd\u4f5c */", "// \u5411\u54c8\u5e0c\u8868\u8f93\u5165\u952e key \uff0c\u5f97\u5230\u503c value", "/* \u5220\u9664\u64cd\u4f5c */", "// \u5728\u54c8\u5e0c\u8868\u4e2d\u5220\u9664\u952e\u503c\u5bf9 (key, value)", "}", "args", "HashMapChaining", ";", ";", ";", ";", ";", ";", ";", ";", "String", ";", ";", ";", ";", ";", "String", "map", "=", "map", ".", "put", "map", ".", "put", "map", ".", "put", "map", ".", "put", "map", ".", "put", ".", "println", "map", ".", "print", "name", "=", ".", "println", "map", ".", "remove", ".", "println", "map", ".", "print", "[", "]", "new", "HashMapChaining", "(", "12836", ",", ")", "(", "15937", ",", ")", "(", "16750", ",", ")", "(", "13276", ",", ")", "(", "10583", ",", ")", "System", ".", "out", "(", ")", "(", ")", "map", ".", "get", "System", ".", "out", "(", ")", "(", "12836", ")", "System", ".", "out", "(", ")", "(", ")", "(", ")", "\"", "\u5c0f\u54c8", "\"", "\"", "\u5c0f\u5570", "\"", "\"", "\u5c0f\u7b97", "\"", "\"", "\u5c0f\u6cd5", "\"", "\"", "\u5c0f\u9e2d", "\"", "\"", "\\n", "\u6dfb\u52a0\u5b8c\u6210\u540e\uff0c\u54c8\u5e0c\u8868\u4e3a", "\\n", "Key -> Value", "\"", "(", "13276", ")", "+", "name", "\"", "\\n", "\u5220\u9664 12836 \u540e\uff0c\u54c8\u5e0c\u8868\u4e3a", "\\n", "Key -> Value", "\"", "\"", "\\n", "\u8f93\u5165\u5b66\u53f7 13276 \uff0c\u67e5\u8be2\u5230\u59d3\u540d ", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 214, "ast_depth": 9, "n_identifiers": 11, "vocab_size": 51}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/java/chapter_hashing/hash_map_open_addressing.java#25-27", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/java/chapter_hashing/hash_map_open_addressing.java", "language": "Java"}, "method": {"name": "hashFunc", "qualified_name": "codes.java.chapter_hashing.hash_map_open_addressing#hashFunc", "start_line": 25, "end_line": 27, "signature": "hashFunc(int key)", "original_code": "private int hashFunc(int key) {\n        return key % capacity;\n    }", "doc_comment": "/* \u54c8\u5e0c\u51fd\u6570 */"}, "code_tokens": ["hashFunc", "private", "int", "(", ")", "{", "}", "key", "return", ";", "int", "key", "%", "capacity"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 24, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 12}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/java/chapter_hashing/hash_map_open_addressing.java#30-32", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/java/chapter_hashing/hash_map_open_addressing.java", "language": "Java"}, "method": {"name": "loadFactor", "qualified_name": "codes.java.chapter_hashing.hash_map_open_addressing#loadFactor", "start_line": 30, "end_line": 32, "signature": "loadFactor()", "original_code": "private double loadFactor() {\n        return (double) size / capacity;\n    }", "doc_comment": "/* \u8d1f\u8f7d\u56e0\u5b50 */"}, "code_tokens": ["loadFactor", "private", "double", "(", ")", "{", "}", "return", ";", "/", "capacity", "(", ")", "size", "double"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 25, "ast_depth": 8, "n_identifiers": 3, "vocab_size": 12}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/java/chapter_hashing/hash_map_open_addressing.java#35-59", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/java/chapter_hashing/hash_map_open_addressing.java", "language": "Java"}, "method": {"name": "findBucket", "qualified_name": "codes.java.chapter_hashing.hash_map_open_addressing#findBucket", "start_line": 35, "end_line": 59, "signature": "findBucket(int key)", "original_code": "private int findBucket(int key) {\n        int index = hashFunc(key);\n        int firstTombstone = -1;\n        // \u7ebf\u6027\u63a2\u6d4b\uff0c\u5f53\u9047\u5230\u7a7a\u6876\u65f6\u8df3\u51fa\n        while (buckets[index] != null) {\n            // \u82e5\u9047\u5230 key \uff0c\u8fd4\u56de\u5bf9\u5e94\u6876\u7d22\u5f15\n            if (buckets[index].key == key) {\n                // \u82e5\u4e4b\u524d\u9047\u5230\u4e86\u5220\u9664\u6807\u8bb0\uff0c\u5219\u5c06\u952e\u503c\u5bf9\u79fb\u52a8\u81f3\u8be5\u7d22\u5f15\n                if (firstTombstone != -1) {\n                    buckets[firstTombstone] = buckets[index];\n                    buckets[index] = TOMBSTONE;\n                    return firstTombstone; // \u8fd4\u56de\u79fb\u52a8\u540e\u7684\u6876\u7d22\u5f15\n                }\n                return index; // \u8fd4\u56de\u6876\u7d22\u5f15\n            }\n            // \u8bb0\u5f55\u9047\u5230\u7684\u9996\u4e2a\u5220\u9664\u6807\u8bb0\n            if (firstTombstone == -1 && buckets[index] == TOMBSTONE) {\n                firstTombstone = index;\n            }\n            // \u8ba1\u7b97\u6876\u7d22\u5f15\uff0c\u8d8a\u8fc7\u5c3e\u90e8\u8fd4\u56de\u5934\u90e8\n            index = (index + 1) % capacity;\n        }\n        // \u82e5 key \u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de\u6dfb\u52a0\u70b9\u7684\u7d22\u5f15\n        return firstTombstone == -1 ? index : firstTombstone;\n    }", "doc_comment": "/* \u641c\u7d22 key \u5bf9\u5e94\u7684\u6876\u7d22\u5f15 */"}, "code_tokens": ["findBucket", "private", "int", "(", ")", "{", "// \u7ebf\u6027\u63a2\u6d4b\uff0c\u5f53\u9047\u5230\u7a7a\u6876\u65f6\u8df3\u51fa", "// \u82e5 key \u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de\u6dfb\u52a0\u70b9\u7684\u7d22\u5f15", "}", "key", ";", ";", "while", "return", ";", "int", "int", "index", "=", "int", "firstTombstone", "=", "(", ")", "{", "// \u82e5\u9047\u5230 key \uff0c\u8fd4\u56de\u5bf9\u5e94\u6876\u7d22\u5f15", "// \u8bb0\u5f55\u9047\u5230\u7684\u9996\u4e2a\u5220\u9664\u6807\u8bb0", "// \u8ba1\u7b97\u6876\u7d22\u5f15\uff0c\u8d8a\u8fc7\u5c3e\u90e8\u8fd4\u56de\u5934\u90e8", "}", "?", "index", ":", "firstTombstone", "hashFunc", "-", "1", "!=", "null", "if", "if", ";", "firstTombstone", "==", "(", "key", ")", "buckets", "[", "index", "]", "(", ")", "{", "// \u82e5\u4e4b\u524d\u9047\u5230\u4e86\u5220\u9664\u6807\u8bb0\uff0c\u5219\u5c06\u952e\u503c\u5bf9\u79fb\u52a8\u81f3\u8be5\u7d22\u5f15", "// \u8fd4\u56de\u6876\u7d22\u5f15", "}", "(", ")", "{", "}", "index", "=", "-", "1", "==", "key", "if", "return", "index", ";", "&&", ";", "%", "capacity", ".", "key", "(", ")", "{", "// \u8fd4\u56de\u79fb\u52a8\u540e\u7684\u6876\u7d22\u5f15", "}", "firstTombstone", "==", "==", "TOMBSTONE", "firstTombstone", "=", "index", "(", ")", "buckets", "[", "index", "]", "firstTombstone", "!=", ";", ";", "return", "firstTombstone", ";", "-", "1", "buckets", "[", "index", "]", "index", "+", "1", "-", "1", "=", "=", "TOMBSTONE", "buckets", "[", "firstTombstone", "]", "buckets", "[", "index", "]", "buckets", "[", "index", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 188, "ast_depth": 13, "n_identifiers": 8, "vocab_size": 40}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/java/chapter_hashing/hash_map_open_addressing.java#62-71", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/java/chapter_hashing/hash_map_open_addressing.java", "language": "Java"}, "method": {"name": "get", "qualified_name": "codes.java.chapter_hashing.hash_map_open_addressing#get", "start_line": 62, "end_line": 71, "signature": "get(int key)", "original_code": "public String get(int key) {\n        // \u641c\u7d22 key \u5bf9\u5e94\u7684\u6876\u7d22\u5f15\n        int index = findBucket(key);\n        // \u82e5\u627e\u5230\u952e\u503c\u5bf9\uff0c\u5219\u8fd4\u56de\u5bf9\u5e94 val\n        if (buckets[index] != null && buckets[index] != TOMBSTONE) {\n            return buckets[index].val;\n        }\n        // \u82e5\u952e\u503c\u5bf9\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de null\n        return null;\n    }", "doc_comment": "/* \u67e5\u8be2\u64cd\u4f5c */"}, "code_tokens": ["String", "get", "public", "(", ")", "{", "// \u641c\u7d22 key \u5bf9\u5e94\u7684\u6876\u7d22\u5f15", "// \u82e5\u627e\u5230\u952e\u503c\u5bf9\uff0c\u5219\u8fd4\u56de\u5bf9\u5e94 val", "// \u82e5\u952e\u503c\u5bf9\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de null", "}", "key", ";", "if", "return", "null", ";", "int", "int", "index", "=", "(", ")", "{", "}", "findBucket", "&&", "return", ";", "(", "key", ")", "!=", "null", "!=", "TOMBSTONE", ".", "val", "buckets", "[", "index", "]", "buckets", "[", "index", "]", "buckets", "[", "index", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 73, "ast_depth": 9, "n_identifiers": 7, "vocab_size": 27}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/java/chapter_hashing/hash_map_open_addressing.java#74-89", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/java/chapter_hashing/hash_map_open_addressing.java", "language": "Java"}, "method": {"name": "put", "qualified_name": "codes.java.chapter_hashing.hash_map_open_addressing#put", "start_line": 74, "end_line": 89, "signature": "put(int key, String val)", "original_code": "public void put(int key, String val) {\n        // \u5f53\u8d1f\u8f7d\u56e0\u5b50\u8d85\u8fc7\u9608\u503c\u65f6\uff0c\u6267\u884c\u6269\u5bb9\n        if (loadFactor() > loadThres) {\n            extend();\n        }\n        // \u641c\u7d22 key \u5bf9\u5e94\u7684\u6876\u7d22\u5f15\n        int index = findBucket(key);\n        // \u82e5\u627e\u5230\u952e\u503c\u5bf9\uff0c\u5219\u8986\u76d6 val \u5e76\u8fd4\u56de\n        if (buckets[index] != null && buckets[index] != TOMBSTONE) {\n            buckets[index].val = val;\n            return;\n        }\n        // \u82e5\u952e\u503c\u5bf9\u4e0d\u5b58\u5728\uff0c\u5219\u6dfb\u52a0\u8be5\u952e\u503c\u5bf9\n        buckets[index] = new Pair(key, val);\n        size++;\n    }", "doc_comment": "/* \u6dfb\u52a0\u64cd\u4f5c */"}, "code_tokens": ["void", "put", "public", "(", ",", ")", "{", "// \u5f53\u8d1f\u8f7d\u56e0\u5b50\u8d85\u8fc7\u9608\u503c\u65f6\uff0c\u6267\u884c\u6269\u5bb9", "// \u641c\u7d22 key \u5bf9\u5e94\u7684\u6876\u7d22\u5f15", "// \u82e5\u627e\u5230\u952e\u503c\u5bf9\uff0c\u5219\u8986\u76d6 val \u5e76\u8fd4\u56de", "// \u82e5\u952e\u503c\u5bf9\u4e0d\u5b58\u5728\uff0c\u5219\u6dfb\u52a0\u8be5\u952e\u503c\u5bf9", "}", "key", "String", "val", "if", ";", "if", ";", ";", "int", "(", ")", "{", "}", "int", "index", "=", "(", ")", "{", "}", "=", "size", "++", ">", "loadThres", ";", "findBucket", "&&", ";", "return", ";", "buckets", "[", "index", "]", "new", "Pair", "loadFactor", "extend", "(", "key", ")", "!=", "null", "!=", "TOMBSTONE", "=", "val", "(", "key", ",", "val", ")", "(", ")", "(", ")", "buckets", "[", "index", "]", "buckets", "[", "index", "]", ".", "val", "buckets", "[", "index", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 125, "ast_depth": 10, "n_identifiers": 11, "vocab_size": 38}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/java/chapter_hashing/hash_map_open_addressing.java#92-100", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/java/chapter_hashing/hash_map_open_addressing.java", "language": "Java"}, "method": {"name": "remove", "qualified_name": "codes.java.chapter_hashing.hash_map_open_addressing#remove", "start_line": 92, "end_line": 100, "signature": "remove(int key)", "original_code": "public void remove(int key) {\n        // \u641c\u7d22 key \u5bf9\u5e94\u7684\u6876\u7d22\u5f15\n        int index = findBucket(key);\n        // \u82e5\u627e\u5230\u952e\u503c\u5bf9\uff0c\u5219\u7528\u5220\u9664\u6807\u8bb0\u8986\u76d6\u5b83\n        if (buckets[index] != null && buckets[index] != TOMBSTONE) {\n            buckets[index] = TOMBSTONE;\n            size--;\n        }\n    }", "doc_comment": "/* \u5220\u9664\u64cd\u4f5c */"}, "code_tokens": ["void", "remove", "public", "(", ")", "{", "// \u641c\u7d22 key \u5bf9\u5e94\u7684\u6876\u7d22\u5f15", "// \u82e5\u627e\u5230\u952e\u503c\u5bf9\uff0c\u5219\u7528\u5220\u9664\u6807\u8bb0\u8986\u76d6\u5b83", "}", "key", ";", "if", "int", "int", "index", "=", "(", ")", "{", "}", "findBucket", "&&", ";", ";", "(", "key", ")", "!=", "null", "!=", "TOMBSTONE", "=", "TOMBSTONE", "size", "--", "buckets", "[", "index", "]", "buckets", "[", "index", "]", "buckets", "[", "index", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 72, "ast_depth": 9, "n_identifiers": 7, "vocab_size": 25}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/java/chapter_hashing/hash_map_open_addressing.java#103-116", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/java/chapter_hashing/hash_map_open_addressing.java", "language": "Java"}, "method": {"name": "extend", "qualified_name": "codes.java.chapter_hashing.hash_map_open_addressing#extend", "start_line": 103, "end_line": 116, "signature": "extend()", "original_code": "private void extend() {\n        // \u6682\u5b58\u539f\u54c8\u5e0c\u8868\n        Pair[] bucketsTmp = buckets;\n        // \u521d\u59cb\u5316\u6269\u5bb9\u540e\u7684\u65b0\u54c8\u5e0c\u8868\n        capacity *= extendRatio;\n        buckets = new Pair[capacity];\n        size = 0;\n        // \u5c06\u952e\u503c\u5bf9\u4ece\u539f\u54c8\u5e0c\u8868\u642c\u8fd0\u81f3\u65b0\u54c8\u5e0c\u8868\n        for (Pair pair : bucketsTmp) {\n            if (pair != null && pair != TOMBSTONE) {\n                put(pair.key, pair.val);\n            }\n        }\n    }", "doc_comment": "/* \u6269\u5bb9\u54c8\u5e0c\u8868 */"}, "code_tokens": ["void", "extend", "private", "(", ")", "{", "// \u6682\u5b58\u539f\u54c8\u5e0c\u8868", "// \u521d\u59cb\u5316\u6269\u5bb9\u540e\u7684\u65b0\u54c8\u5e0c\u8868", "// \u5c06\u952e\u503c\u5bf9\u4ece\u539f\u54c8\u5e0c\u8868\u642c\u8fd0\u81f3\u65b0\u54c8\u5e0c\u8868", "}", ";", ";", ";", ";", "for", "(", "Pair", "pair", ":", "bucketsTmp", ")", "Pair", "bucketsTmp", "=", "buckets", "capacity", "*=", "extendRatio", "buckets", "=", "size", "=", "0", "{", "}", "[", "]", "new", "Pair", "if", "[", "capacity", "]", "(", ")", "{", "}", "&&", ";", "pair", "!=", "null", "pair", "!=", "TOMBSTONE", "put", "(", ",", ")", "pair", ".", "key", "pair", ".", "val"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 95, "ast_depth": 12, "n_identifiers": 11, "vocab_size": 36}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/java/chapter_hashing/hash_map_open_addressing.java#119-129", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/java/chapter_hashing/hash_map_open_addressing.java", "language": "Java"}, "method": {"name": "print", "qualified_name": "codes.java.chapter_hashing.hash_map_open_addressing#print", "start_line": 119, "end_line": 129, "signature": "print()", "original_code": "public void print() {\n        for (Pair pair : buckets) {\n            if (pair == null) {\n                System.out.println(\"null\");\n            } else if (pair == TOMBSTONE) {\n                System.out.println(\"TOMBSTONE\");\n            } else {\n                System.out.println(pair.key + \" -> \" + pair.val);\n            }\n        }\n    }", "doc_comment": "/* \u6253\u5370\u54c8\u5e0c\u8868 */"}, "code_tokens": ["void", "print", "public", "(", ")", "{", "}", "for", "(", "Pair", "pair", ":", "buckets", ")", "{", "}", "if", "else", "(", ")", "{", "}", "if", "else", "pair", "==", "null", ";", "(", ")", "{", "}", "{", "}", ".", "println", "pair", "==", "TOMBSTONE", ";", ";", "System", ".", "out", "(", ")", ".", "println", ".", "println", "\"", "null", "\"", "System", ".", "out", "(", ")", "System", ".", "out", "(", ")", "\"", "TOMBSTONE", "\"", "+", "+", "pair", ".", "val", "pair", ".", "key", "\"", " -> ", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 112, "ast_depth": 15, "n_identifiers": 9, "vocab_size": 27}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/java/chapter_hashing/hash_map_open_addressing.java#133-157", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/java/chapter_hashing/hash_map_open_addressing.java", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.java.chapter_hashing.hash_map_open_addressing#main", "start_line": 133, "end_line": 157, "signature": "main(String[] args)", "original_code": "public static void main(String[] args) {\n        // \u521d\u59cb\u5316\u54c8\u5e0c\u8868\n        HashMapOpenAddressing hashmap = new HashMapOpenAddressing();\n\n        // \u6dfb\u52a0\u64cd\u4f5c\n        // \u5728\u54c8\u5e0c\u8868\u4e2d\u6dfb\u52a0\u952e\u503c\u5bf9 (key, val)\n        hashmap.put(12836, \"\u5c0f\u54c8\");\n        hashmap.put(15937, \"\u5c0f\u5570\");\n        hashmap.put(16750, \"\u5c0f\u7b97\");\n        hashmap.put(13276, \"\u5c0f\u6cd5\");\n        hashmap.put(10583, \"\u5c0f\u9e2d\");\n        System.out.println(\"\\n\u6dfb\u52a0\u5b8c\u6210\u540e\uff0c\u54c8\u5e0c\u8868\u4e3a\\nKey -> Value\");\n        hashmap.print();\n\n        // \u67e5\u8be2\u64cd\u4f5c\n        // \u5411\u54c8\u5e0c\u8868\u8f93\u5165\u952e key \uff0c\u5f97\u5230\u503c val\n        String name = hashmap.get(13276);\n        System.out.println(\"\\n\u8f93\u5165\u5b66\u53f7 13276 \uff0c\u67e5\u8be2\u5230\u59d3\u540d \" + name);\n\n        // \u5220\u9664\u64cd\u4f5c\n        // \u5728\u54c8\u5e0c\u8868\u4e2d\u5220\u9664\u952e\u503c\u5bf9 (key, val)\n        hashmap.remove(16750);\n        System.out.println(\"\\n\u5220\u9664 16750 \u540e\uff0c\u54c8\u5e0c\u8868\u4e3a\\nKey -> Value\");\n        hashmap.print();\n    }", "doc_comment": ""}, "code_tokens": ["void", "main", "public", "static", "(", ")", "{", "// \u521d\u59cb\u5316\u54c8\u5e0c\u8868", "// \u6dfb\u52a0\u64cd\u4f5c", "// \u5728\u54c8\u5e0c\u8868\u4e2d\u6dfb\u52a0\u952e\u503c\u5bf9 (key, val)", "// \u67e5\u8be2\u64cd\u4f5c", "// \u5411\u54c8\u5e0c\u8868\u8f93\u5165\u952e key \uff0c\u5f97\u5230\u503c val", "// \u5220\u9664\u64cd\u4f5c", "// \u5728\u54c8\u5e0c\u8868\u4e2d\u5220\u9664\u952e\u503c\u5bf9 (key, val)", "}", "args", "HashMapOpenAddressing", ";", ";", ";", ";", ";", ";", ";", ";", "String", ";", ";", ";", ";", ";", "String", "hashmap", "=", "hashmap", ".", "put", "hashmap", ".", "put", "hashmap", ".", "put", "hashmap", ".", "put", "hashmap", ".", "put", ".", "println", "hashmap", ".", "print", "name", "=", ".", "println", "hashmap", ".", "remove", ".", "println", "hashmap", ".", "print", "[", "]", "new", "HashMapOpenAddressing", "(", "12836", ",", ")", "(", "15937", ",", ")", "(", "16750", ",", ")", "(", "13276", ",", ")", "(", "10583", ",", ")", "System", ".", "out", "(", ")", "(", ")", "hashmap", ".", "get", "System", ".", "out", "(", ")", "(", "16750", ")", "System", ".", "out", "(", ")", "(", ")", "(", ")", "\"", "\u5c0f\u54c8", "\"", "\"", "\u5c0f\u5570", "\"", "\"", "\u5c0f\u7b97", "\"", "\"", "\u5c0f\u6cd5", "\"", "\"", "\u5c0f\u9e2d", "\"", "\"", "\\n", "\u6dfb\u52a0\u5b8c\u6210\u540e\uff0c\u54c8\u5e0c\u8868\u4e3a", "\\n", "Key -> Value", "\"", "(", "13276", ")", "+", "name", "\"", "\\n", "\u5220\u9664 16750 \u540e\uff0c\u54c8\u5e0c\u8868\u4e3a", "\\n", "Key -> Value", "\"", "\"", "\\n", "\u8f93\u5165\u5b66\u53f7 13276 \uff0c\u67e5\u8be2\u5230\u59d3\u540d ", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 214, "ast_depth": 9, "n_identifiers": 11, "vocab_size": 51}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/swift/chapter_hashing/hash_map_chaining.swift#11-24", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/swift/chapter_hashing/hash_map_chaining.swift", "language": "Java"}, "method": {"name": "init", "qualified_name": "codes.swift.chapter_hashing.hash_map_chaining.swift#init", "start_line": 11, "end_line": 24, "signature": "init()", "original_code": "var size: Int // \u952e\u503c\u5bf9\u6570\u91cf\n    var capacity: Int // \u54c8\u5e0c\u8868\u5bb9\u91cf\n    var loadThres: Double // \u89e6\u53d1\u6269\u5bb9\u7684\u8d1f\u8f7d\u56e0\u5b50\u9608\u503c\n    var extendRatio: Int // \u6269\u5bb9\u500d\u6570\n    var buckets: [[Pair]] // \u6876\u6570\u7ec4\n\n    /* \u6784\u9020\u65b9\u6cd5 */\n    init() {\n        size = 0\n        capacity = 4\n        loadThres = 2.0 / 3.0\n        extendRatio = 2\n        buckets = Array(repeating: [], count: capacity)\n    }", "doc_comment": ""}, "code_tokens": ["// \u6876\u6570\u7ec4", "/* \u6784\u9020\u65b9\u6cd5 */", "var", "// \u952e\u503c\u5bf9\u6570\u91cf", "", "capacity", ":", "loadThres", ":", "extendRatio", ":", "]", "", "{", "}", "size", ":", "Int", "var", "Int", "// \u54c8\u5e0c\u8868\u5bb9\u91cf", "", "Double", "// \u89e6\u53d1\u6269\u5bb9\u7684\u8d1f\u8f7d\u56e0\u5b50\u9608\u503c", "", "Int", "// \u6269\u5bb9\u500d\u6570", "", "buckets", "[", "Pair", "]", "init", "", "var", "var", "var", ":", "[", "(", ")", "size", "=", "0", "loadThres", "=", "capacity", "=", "4", "2.0", "/", "3.0", "extendRatio", "=", "2", "buckets", "=", "Array", "(", "repeating", ",", "count", ")", ":", "[", "]", ":", "capacity"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 102, "ast_depth": 12, "n_identifiers": 12, "vocab_size": 35}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/swift/chapter_hashing/hash_map_chaining.swift#27-29", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/swift/chapter_hashing/hash_map_chaining.swift", "language": "Java"}, "method": {"name": "hashFunc", "qualified_name": "codes.swift.chapter_hashing.hash_map_chaining.swift#hashFunc", "start_line": 27, "end_line": 29, "signature": "hashFunc(key: Int)", "original_code": "func hashFunc(key: Int) -> Int {\n        key % capacity\n    }", "doc_comment": "/* \u54c8\u5e0c\u51fd\u6570 */"}, "code_tokens": ["func", "hashFunc", "(", ")", "->", "Int", "{", "}", "key", "Int", "", ":", "key", "%", "capacity"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 24, "ast_depth": 6, "n_identifiers": 4, "vocab_size": 13}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/swift/chapter_hashing/hash_map_chaining.swift#32-34", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/swift/chapter_hashing/hash_map_chaining.swift", "language": "Java"}, "method": {"name": "loadFactor", "qualified_name": "codes.swift.chapter_hashing.hash_map_chaining.swift#loadFactor", "start_line": 32, "end_line": 34, "signature": "loadFactor()", "original_code": "func loadFactor() -> Double {\n        Double(size / capacity)\n    }", "doc_comment": "/* \u8d1f\u8f7d\u56e0\u5b50 */"}, "code_tokens": ["func", "loadFactor", "(", ")", "->", "Double", "{", "}", "", "Double", "(", ")", "size", "/", "capacity"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 24, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 12}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/swift/chapter_hashing/hash_map_chaining.swift#37-48", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/swift/chapter_hashing/hash_map_chaining.swift", "language": "Java"}, "method": {"name": "get", "qualified_name": "codes.swift.chapter_hashing.hash_map_chaining.swift#get", "start_line": 37, "end_line": 48, "signature": "get(key: Int)", "original_code": "func get(key: Int) -> String? {\n        let index = hashFunc(key: key)\n        let bucket = buckets[index]\n        // \u904d\u5386\u6876\uff0c\u82e5\u627e\u5230 key \u5219\u8fd4\u56de\u5bf9\u5e94 val\n        for pair in bucket {\n            if pair.key == key {\n                return pair.val\n            }\n        }\n        // \u82e5\u672a\u627e\u5230 key \u5219\u8fd4\u56de nil\n        return nil\n    }", "doc_comment": "/* \u67e5\u8be2\u64cd\u4f5c */"}, "code_tokens": ["func", "get", "(", ")", "->", "String", "?", "{", "}", "key", "Int", "let", "", "let", "// \u82e5\u672a\u627e\u5230 key \u5219\u8fd4\u56de nil", "", "return", "nil", "", ":", "index", "=", "bucket", "=", "hashFunc", "// \u904d\u5386\u6876\uff0c\u82e5\u627e\u5230 key \u5219\u8fd4\u56de\u5bf9\u5e94 val", "for", "pair", "in", "bucket", "{", "}", "(", "key", ")", "buckets", "[", "index", "]", "if", "{", "}", "key", ":", "==", "key", "return", "pair", ".", "val", "pair", ".", "key"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 77, "ast_depth": 10, "n_identifiers": 13, "vocab_size": 32}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/swift/chapter_hashing/hash_map_chaining.swift#51-107", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/swift/chapter_hashing/hash_map_chaining.swift", "language": "Java"}, "method": {"name": "put", "qualified_name": "codes.swift.chapter_hashing.hash_map_chaining.swift#put", "start_line": 51, "end_line": 107, "signature": "put(key: Int, val: String)", "original_code": "func put(key: Int, val: String) {\n        // \u5f53\u8d1f\u8f7d\u56e0\u5b50\u8d85\u8fc7\u9608\u503c\u65f6\uff0c\u6267\u884c\u6269\u5bb9\n        if loadFactor() > loadThres {\n            extend()\n        }\n        let index = hashFunc(key: key)\n        let bucket = buckets[index]\n        // \u904d\u5386\u6876\uff0c\u82e5\u9047\u5230\u6307\u5b9a key \uff0c\u5219\u66f4\u65b0\u5bf9\u5e94 val \u5e76\u8fd4\u56de\n        for pair in bucket {\n            if pair.key == key {\n                pair.val = val\n                return\n            }\n        }\n        // \u82e5\u65e0\u8be5 key \uff0c\u5219\u5c06\u952e\u503c\u5bf9\u6dfb\u52a0\u81f3\u5c3e\u90e8\n        let pair = Pair(key: key, val: val)\n        buckets[index].append(pair)\n        size += 1\n    }\n\n    /* \u5220\u9664\u64cd\u4f5c */\n    func remove(key: Int) {\n        let index = hashFunc(key: key)\n        let bucket = buckets[index]\n        // \u904d\u5386\u6876\uff0c\u4ece\u4e2d\u5220\u9664\u952e\u503c\u5bf9\n        for (pairIndex, pair) in bucket.enumerated() {\n            if pair.key == key {\n                buckets[index].remove(at: pairIndex)\n            }\n        }\n        size -= 1\n    }\n\n    /* \u6269\u5bb9\u54c8\u5e0c\u8868 */\n    func extend() {\n        // \u6682\u5b58\u539f\u54c8\u5e0c\u8868\n        let bucketsTmp = buckets\n        // \u521d\u59cb\u5316\u6269\u5bb9\u540e\u7684\u65b0\u54c8\u5e0c\u8868\n        capacity *= extendRatio\n        buckets = Array(repeating: [], count: capacity)\n        size = 0\n        // \u5c06\u952e\u503c\u5bf9\u4ece\u539f\u54c8\u5e0c\u8868\u642c\u8fd0\u81f3\u65b0\u54c8\u5e0c\u8868\n        for bucket in bucketsTmp {\n            for pair in bucket {\n                put(key: pair.key, val: pair.val)\n            }\n        }\n    }\n\n    /* \u6253\u5370\u54c8\u5e0c\u8868 */\n    func print() {\n        for bucket in buckets {\n            let res = bucket.map { \"\\($0.key) -> \\($0.val)\" }\n            Swift.print(res)\n        }\n    }\n}", "doc_comment": "/* \u6dfb\u52a0\u64cd\u4f5c */"}, "code_tokens": ["func", "put", "(", ",", ")", "{", "// \u5f53\u8d1f\u8f7d\u56e0\u5b50\u8d85\u8fc7\u9608\u503c\u65f6\uff0c\u6267\u884c\u6269\u5bb9", "/* \u5220\u9664\u64cd\u4f5c */", "/* \u6269\u5bb9\u54c8\u5e0c\u8868 */", "/* \u6253\u5370\u54c8\u5e0c\u8868 */", "}", "key", "Int", "val", "String", "if", "{", "}", "let", "", "let", "", "{", "}", "func", "", "{", "}", "func", "", "{", "// \u6682\u5b58\u539f\u54c8\u5e0c\u8868", "}", "func", "", "{", "}", ":", ":", ">", "loadThres", "index", "=", "bucket", "=", "", "remove", "(", ")", "let", "", "let", "", "", "extend", "(", ")", "let", "", "{", "}", "print", "(", ")", "for", "bucket", "in", "buckets", "{", "}", "loadFactor", "extend", "hashFunc", "==", "key", "=", "// \u82e5\u65e0\u8be5 key \uff0c\u5219\u5c06\u952e\u503c\u5bf9\u6dfb\u52a0\u81f3\u5c3e\u90e8", "key", "Int", "index", "=", "bucket", "=", "// \u904d\u5386\u6876\uff0c\u4ece\u4e2d\u5220\u9664\u952e\u503c\u5bf9", "size", "-=", "1", "bucketsTmp", "=", "// \u521d\u59cb\u5316\u6269\u5bb9\u540e\u7684\u65b0\u54c8\u5e0c\u8868", "for", "pair", "in", "bucket", "{", "}", "let", "", "", "(", ")", "(", ")", "(", "key", ")", "// \u904d\u5386\u6876\uff0c\u82e5\u9047\u5230\u6307\u5b9a key \uff0c\u5219\u66f4\u65b0\u5bf9\u5e94 val \u5e76\u8fd4\u56de", ".", "key", "pair", ".", "val", "val", "return", "}", "}", "let", "size", "+=", "1", ":", "hashFunc", "in", "{", "}", "buckets", "capacity", "*=", "bucketsTmp", "", "res", "=", "Swift", ".", "print", "key", ":", "buckets", "[", "index", "]", "for", "pair", "in", "bucket", "{", "if", "pair", "pair", "=", ".", "append", "(", "key", ")", "buckets", "[", "index", "]", "for", "bucket", ".", "enumerated", "if", "{", "}", "extendRatio", "// \u5c06\u952e\u503c\u5bf9\u4ece\u539f\u54c8\u5e0c\u8868\u642c\u8fd0\u81f3\u65b0\u54c8\u5e0c\u8868", "for", "bucket", "in", "put", "{", "}", "(", "res", ")", "Pair", "buckets", "[", "index", "]", "(", "pair", ")", "key", ":", "(", "pairIndex", ",", "pair", ")", "(", ")", "==", "key", ".", "remove", "buckets", "=", "size", "=", "0", "(", ")", "bucket", ".", "map", "\"", "\\(", "$0.key) -> ", "\\(", "$0.val)", "\"", "(", "val", ")", "pair", ".", "key", "buckets", "[", "index", "]", "(", "pairIndex", ")", "Array", "key", ":", ",", "val", ":", "pair", ".", "val", "key", ":", "key", ",", "val", ":", "at", ":", "(", "repeating", ",", "count", ")", "pair", ".", "key", ":", "[", "]", ":", "capacity"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 371, "ast_depth": 13, "n_identifiers": 31, "vocab_size": 68}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/swift/chapter_hashing/hash_map_open_addressing.swift#11-26", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/swift/chapter_hashing/hash_map_open_addressing.swift", "language": "Java"}, "method": {"name": "init", "qualified_name": "codes.swift.chapter_hashing.hash_map_open_addressing.swift#init", "start_line": 11, "end_line": 26, "signature": "init()", "original_code": "var size: Int // \u952e\u503c\u5bf9\u6570\u91cf\n    var capacity: Int // \u54c8\u5e0c\u8868\u5bb9\u91cf\n    var loadThres: Double // \u89e6\u53d1\u6269\u5bb9\u7684\u8d1f\u8f7d\u56e0\u5b50\u9608\u503c\n    var extendRatio: Int // \u6269\u5bb9\u500d\u6570\n    var buckets: [Pair?] // \u6876\u6570\u7ec4\n    var removed: Pair // \u5220\u9664\u6807\u8bb0\n\n    /* \u6784\u9020\u65b9\u6cd5 */\n    init() {\n        size = 0\n        capacity = 4\n        loadThres = 2.0 / 3.0\n        extendRatio = 2\n        buckets = Array(repeating: nil, count: capacity)\n        removed = Pair(key: -1, val: \"-1\")\n    }", "doc_comment": ""}, "code_tokens": ["var", "// \u952e\u503c\u5bf9\u6570\u91cf", "", "capacity", ":", "loadThres", ":", "extendRatio", ":", "buckets", ":", "{", "}", "size", ":", "Int", "var", "Int", "// \u54c8\u5e0c\u8868\u5bb9\u91cf", "", "Double", "// \u89e6\u53d1\u6269\u5bb9\u7684\u8d1f\u8f7d\u56e0\u5b50\u9608\u503c", "", "Int", "// \u6269\u5bb9\u500d\u6570", "", "[", "", "", "var", "var", "var", "Pair", "?", "// \u6876\u6570\u7ec4", "removed", ":", "// \u5220\u9664\u6807\u8bb0", "/* \u6784\u9020\u65b9\u6cd5 */", "size", "=", "]", "var", "Pair", "init", "0", "loadThres", "=", "(", ")", "capacity", "=", "4", "2.0", "/", "3.0", "extendRatio", "=", "2", "removed", "=", "buckets", "=", "Pair", "Array", "(", ")", "(", "repeating", ",", "count", ")", ",", "val", ":", "\"", "-1", "\"", ":", "nil", ":", "capacity", "key", "-", "1", ":"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 130, "ast_depth": 14, "n_identifiers": 16, "vocab_size": 45}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/swift/chapter_hashing/hash_map_open_addressing.swift#29-31", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/swift/chapter_hashing/hash_map_open_addressing.swift", "language": "Java"}, "method": {"name": "hashFunc", "qualified_name": "codes.swift.chapter_hashing.hash_map_open_addressing.swift#hashFunc", "start_line": 29, "end_line": 31, "signature": "hashFunc(key: Int)", "original_code": "func hashFunc(key: Int) -> Int {\n        key % capacity\n    }", "doc_comment": "/* \u54c8\u5e0c\u51fd\u6570 */"}, "code_tokens": ["func", "hashFunc", "(", ")", "->", "Int", "{", "}", "key", "Int", "", ":", "key", "%", "capacity"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 24, "ast_depth": 6, "n_identifiers": 4, "vocab_size": 13}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/swift/chapter_hashing/hash_map_open_addressing.swift#34-36", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/swift/chapter_hashing/hash_map_open_addressing.swift", "language": "Java"}, "method": {"name": "loadFactor", "qualified_name": "codes.swift.chapter_hashing.hash_map_open_addressing.swift#loadFactor", "start_line": 34, "end_line": 36, "signature": "loadFactor()", "original_code": "func loadFactor() -> Double {\n        Double(size / capacity)\n    }", "doc_comment": "/* \u8d1f\u8f7d\u56e0\u5b50 */"}, "code_tokens": ["func", "loadFactor", "(", ")", "->", "Double", "{", "}", "", "Double", "(", ")", "size", "/", "capacity"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 24, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 12}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/swift/chapter_hashing/hash_map_open_addressing.swift#39-55", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/swift/chapter_hashing/hash_map_open_addressing.swift", "language": "Java"}, "method": {"name": "get", "qualified_name": "codes.swift.chapter_hashing.hash_map_open_addressing.swift#get", "start_line": 39, "end_line": 55, "signature": "get(key: Int)", "original_code": "func get(key: Int) -> String? {\n        let index = hashFunc(key: key)\n        // \u7ebf\u6027\u63a2\u6d4b\uff0c\u4ece index \u5f00\u59cb\u5411\u540e\u904d\u5386\n        for i in stride(from: 0, to: capacity, by: 1) {\n            // \u8ba1\u7b97\u6876\u7d22\u5f15\uff0c\u8d8a\u8fc7\u5c3e\u90e8\u8fd4\u56de\u5934\u90e8\n            let j = (index + i) % capacity\n            // \u82e5\u9047\u5230\u7a7a\u6876\uff0c\u8bf4\u660e\u65e0\u6b64 key \uff0c\u5219\u8fd4\u56de nil\n            if buckets[j] == nil {\n                return nil\n            }\n            // \u82e5\u9047\u5230\u6307\u5b9a key \uff0c\u5219\u8fd4\u56de\u5bf9\u5e94 val\n            if buckets[j]?.key == key, buckets[j] != removed {\n                return buckets[j]?.val\n            }\n        }\n        return nil\n    }", "doc_comment": "/* \u67e5\u8be2\u64cd\u4f5c */"}, "code_tokens": ["func", "get", "(", ")", "->", "String", "?", "{", "}", "key", "Int", "let", "", "return", "nil", "", ":", "index", "=", "// \u7ebf\u6027\u63a2\u6d4b\uff0c\u4ece index \u5f00\u59cb\u5411\u540e\u904d\u5386", "for", "i", "in", "{", "// \u8ba1\u7b97\u6876\u7d22\u5f15\uff0c\u8d8a\u8fc7\u5c3e\u90e8\u8fd4\u56de\u5934\u90e8", "}", "hashFunc", "stride", "let", "// \u82e5\u9047\u5230\u6307\u5b9a key \uff0c\u5219\u8fd4\u56de\u5bf9\u5e94 val", "if", "?", "{", "}", "(", "key", ")", "(", "from", ",", "to", ",", "by", ")", "j", "=", "{", "nil", "}", "buckets", "[", "j", "]", ".", ",", "!=", "removed", "return", "buckets", "[", "j", "]", "?", "val", "key", ":", ":", "0", ":", "capacity", ":", "1", "==", "nil", "return", "key", "==", "key", "buckets", "[", "j", "]", ".", "%", "(", ")", "capacity", "// \u82e5\u9047\u5230\u7a7a\u6876\uff0c\u8bf4\u660e\u65e0\u6b64 key \uff0c\u5219\u8fd4\u56de nil", "if", "buckets", "[", "j", "]", "index", "+", "i"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 136, "ast_depth": 13, "n_identifiers": 20, "vocab_size": 46}}
{"dataset_split": "train", "example_id": "hello-algo@ff8e7ce:codes/swift/chapter_hashing/hash_map_open_addressing.swift#58-128", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "ff8e7ceec50bc4198c90287e23b384e75d9f6c7f", "license": null}, "file": {"path": "codes/swift/chapter_hashing/hash_map_open_addressing.swift", "language": "Java"}, "method": {"name": "put", "qualified_name": "codes.swift.chapter_hashing.hash_map_open_addressing.swift#put", "start_line": 58, "end_line": 128, "signature": "put(key: Int, val: String)", "original_code": "func put(key: Int, val: String) {\n        // \u5f53\u8d1f\u8f7d\u56e0\u5b50\u8d85\u8fc7\u9608\u503c\u65f6\uff0c\u6267\u884c\u6269\u5bb9\n        if loadFactor() > loadThres {\n            extend()\n        }\n        let index = hashFunc(key: key)\n        // \u7ebf\u6027\u63a2\u6d4b\uff0c\u4ece index \u5f00\u59cb\u5411\u540e\u904d\u5386\n        for i in stride(from: 0, through: capacity, by: 1) {\n            // \u8ba1\u7b97\u6876\u7d22\u5f15\uff0c\u8d8a\u8fc7\u5c3e\u90e8\u8fd4\u56de\u5934\u90e8\n            let j = (index + i) % capacity\n            // \u82e5\u9047\u5230\u7a7a\u6876\u3001\u6216\u5e26\u6709\u5220\u9664\u6807\u8bb0\u7684\u6876\uff0c\u5219\u5c06\u952e\u503c\u5bf9\u653e\u5165\u8be5\u6876\n            if buckets[j] == nil || buckets[j] == removed {\n                buckets[j] = Pair(key: key, val: val)\n                size += 1\n                return\n            }\n            // \u82e5\u9047\u5230\u6307\u5b9a key \uff0c\u5219\u66f4\u65b0\u5bf9\u5e94 val\n            if buckets[j]?.key == key {\n                buckets[j]?.val = val\n                return\n            }\n        }\n    }\n\n    /* \u5220\u9664\u64cd\u4f5c */\n    func remove(key: Int) {\n        let index = hashFunc(key: key)\n        // \u7ebf\u6027\u63a2\u6d4b\uff0c\u4ece index \u5f00\u59cb\u5411\u540e\u904d\u5386\n        for i in stride(from: 0, to: capacity, by: 1) {\n            // \u8ba1\u7b97\u6876\u7d22\u5f15\uff0c\u8d8a\u8fc7\u5c3e\u90e8\u8fd4\u56de\u5934\u90e8\n            let j = (index + i) % capacity\n            // \u82e5\u9047\u5230\u7a7a\u6876\uff0c\u8bf4\u660e\u65e0\u6b64 key \uff0c\u5219\u76f4\u63a5\u8fd4\u56de\n            if buckets[j] == nil {\n                return\n            }\n            // \u82e5\u9047\u5230\u6307\u5b9a key \uff0c\u5219\u6807\u8bb0\u5220\u9664\u5e76\u8fd4\u56de\n            if buckets[j]?.key == key {\n                buckets[j] = removed\n                size -= 1\n                return\n            }\n        }\n    }\n\n    /* \u6269\u5bb9\u54c8\u5e0c\u8868 */\n    func extend() {\n        // \u6682\u5b58\u539f\u54c8\u5e0c\u8868\n        let bucketsTmp = buckets\n        // \u521d\u59cb\u5316\u6269\u5bb9\u540e\u7684\u65b0\u54c8\u5e0c\u8868\n        capacity *= extendRatio\n        buckets = Array(repeating: nil, count: capacity)\n        size = 0\n        // \u5c06\u952e\u503c\u5bf9\u4ece\u539f\u54c8\u5e0c\u8868\u642c\u8fd0\u81f3\u65b0\u54c8\u5e0c\u8868\n        for pair in bucketsTmp {\n            if let pair, pair != removed {\n                put(key: pair.key, val: pair.val)\n            }\n        }\n    }\n\n    /* \u6253\u5370\u54c8\u5e0c\u8868 */\n    func print() {\n        for pair in buckets {\n            if let pair {\n                Swift.print(\"\\(pair.key) -> \\(pair.val)\")\n            } else {\n                Swift.print(\"null\")\n            }\n        }\n    }\n}", "doc_comment": "/* \u6dfb\u52a0\u64cd\u4f5c */"}, "code_tokens": ["func", "put", "(", ",", ")", "{", "// \u5f53\u8d1f\u8f7d\u56e0\u5b50\u8d85\u8fc7\u9608\u503c\u65f6\uff0c\u6267\u884c\u6269\u5bb9", "}", "key", "Int", "val", "String", "if", "{", "}", "let", "/* \u6253\u5370\u54c8\u5e0c\u8868 */", "", "func", "", "{", "}", ":", ":", ">", "loadThres", "index", "=", "print", "(", ")", "for", "pair", "in", "buckets", "{", "}", "loadFactor", "extend", "// \u7ebf\u6027\u63a2\u6d4b\uff0c\u4ece index \u5f00\u59cb\u5411\u540e\u904d\u5386", "for", "i", "in", "{", "// \u8ba1\u7b97\u6876\u7d22\u5f15\uff0c\u8d8a\u8fc7\u5c3e\u90e8\u8fd4\u56de\u5934\u90e8", "/* \u6269\u5bb9\u54c8\u5e0c\u8868 */", ",", "}", "if", "let", "pair", "else", "{", "}", "(", ")", "(", ")", "hashFunc", "stride", "let", "// \u82e5\u9047\u5230\u6307\u5b9a key \uff0c\u5219\u66f4\u65b0\u5bf9\u5e94 val", "if", "?", "{", ",", "capacity", ",", "}", "func", "extend", "(", ")", "{", "// \u6682\u5b58\u539f\u54c8\u5e0c\u8868", "let", "bucketsTmp", "=", "buckets", "// \u521d\u59cb\u5316\u6269\u5bb9\u540e\u7684\u65b0\u54c8\u5e0c\u8868", "capacity", "*=", "extendRatio", "buckets", "=", "Array", "(", "repeating", ":", "nil", "count", ":", "capacity", ")", "// \u5c06\u952e\u503c\u5bf9\u4ece\u539f\u54c8\u5e0c\u8868\u642c\u8fd0\u81f3\u65b0\u54c8\u5e0c\u8868", "for", "pair", "in", "bucketsTmp", "{", "pair", ",", "}", "{", "}", "", "(", "key", ")", "(", "from", ",", "through", ",", "by", ")", "j", "=", "{", "}", "buckets", "[", "j", "]", ".", "key", "==", "key", "?", ":", "0", "to", ":", "by", ":", "1", ")", "{", "// \u8ba1\u7b97\u6876\u7d22\u5f15\uff0c\u8d8a\u8fc7\u5c3e\u90e8\u8fd4\u56de\u5934\u90e8", "}", "size", "=", "0", "if", "let", "{", "}", "", "Swift", ".", "print", "key", ":", ":", "0", ":", "capacity", ":", "1", "||", "=", "return", "buckets", "[", "j", "]", ".", "val", "=", "/* \u5220\u9664\u64cd\u4f5c */", "let", "// \u82e5\u9047\u5230\u6307\u5b9a key \uff0c\u5219\u6807\u8bb0\u5220\u9664\u5e76\u8fd4\u56de", "if", "?", "{", "}", "pair", "!=", "removed", "put", "Swift", ".", "print", "(", ")", "==", "nil", "==", "removed", "buckets", "[", "j", "]", "val", "return", "}", "}", "}", "func", "{", "let", "// \u7ebf\u6027\u63a2\u6d4b\uff0c\u4ece index \u5f00\u59cb\u5411\u540e\u904d\u5386", "for", "i", "in", "stride", "j", "=", "{", "return", "}", "buckets", "[", "j", "]", ".", "key", "==", "key", "=", "return", "(", ")", "(", ")", "\"", "null", "\"", "%", "buckets", "[", "j", "]", "Pair", "size", "+=", "1", "remove", "index", "=", "(", "from", "", "==", "nil", "buckets", "[", "j", "]", "removed", "key", ":", ",", "val", ":", "pair", ".", "val", "\"", "\\(", "pair.key) -> ", "\\(", "pair.val)", "\"", "(", ")", "capacity", "// \u82e5\u9047\u5230\u7a7a\u6876\u3001\u6216\u5e26\u6709\u5220\u9664\u6807\u8bb0\u7684\u6876\uff0c\u5219\u5c06\u952e\u503c\u5bf9\u653e\u5165\u8be5\u6876", "if", "buckets", "[", "j", "]", "(", "val", ")", "(", "Int", ")", "hashFunc", "%", "size", "-=", "1", "pair", ".", "key", "index", "+", "i", "key", ":", "key", ",", "val", ":", "key", ":", "(", "key", ")", "(", ")", "capacity", "// \u82e5\u9047\u5230\u7a7a\u6876\uff0c\u8bf4\u660e\u65e0\u6b64 key \uff0c\u5219\u76f4\u63a5\u8fd4\u56de", "if", "buckets", "[", "j", "]", "key", ":", "index", "+", "i"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 432, "ast_depth": 15, "n_identifiers": 39, "vocab_size": 80}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/csharp/chapter_computational_complexity/time_complexity.cs#10-23", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/csharp/chapter_computational_complexity/time_complexity.cs", "language": "Java"}, "method": {"name": "Algorithm", "qualified_name": "codes.csharp.chapter_computational_complexity.time_complexity.cs#Algorithm", "start_line": 10, "end_line": 23, "signature": "Algorithm(int n)", "original_code": "void Algorithm(int n) {\n        int a = 1;  // +0\uff08\u6280\u5de7 1\uff09\n        a = a + n;  // +0\uff08\u6280\u5de7 1\uff09\n                    // +n\uff08\u6280\u5de7 2\uff09\n        for (int i = 0; i < 5 * n + 1; i++) {\n            Console.WriteLine(0);\n        }\n        // +n*n\uff08\u6280\u5de7 3\uff09\n        for (int i = 0; i < 2 * n; i++) {\n            for (int j = 0; j < n + 1; j++) {\n                Console.WriteLine(0);\n            }\n        }\n    }", "doc_comment": ""}, "code_tokens": ["void", "Algorithm", "(", ")", "{", "// +0\uff08\u6280\u5de7 1\uff09", "// +0\uff08\u6280\u5de7 1\uff09", "// +n\uff08\u6280\u5de7 2\uff09", "// +n*n\uff08\u6280\u5de7 3\uff09", "}", "n", ";", ";", "for", "(", ";", ")", "for", "(", ";", ")", "int", "int", "a", "=", "1", "a", "=", ";", "i", "<", "i", "++", "{", "}", ";", "i", "<", "i", "++", "{", "}", "a", "+", "n", "int", "i", "=", "0", "+", "1", ";", "int", "i", "=", "0", "2", "*", "n", "for", "(", ";", ")", "5", "*", "n", "Console", ".", "WriteLine", ";", "j", "<", "j", "++", "{", "}", "(", "0", ")", "int", "j", "=", "0", "n", "+", "1", ";", "Console", ".", "WriteLine", "(", "0", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 136, "ast_depth": 11, "n_identifiers": 7, "vocab_size": 28}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/csharp/chapter_computational_complexity/time_complexity.cs#26-28", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/csharp/chapter_computational_complexity/time_complexity.cs", "language": "Java"}, "method": {"name": "AlgorithmA", "qualified_name": "codes.csharp.chapter_computational_complexity.time_complexity.cs#AlgorithmA", "start_line": 26, "end_line": 28, "signature": "AlgorithmA(int n)", "original_code": "void AlgorithmA(int n) {\n        Console.WriteLine(0);\n    }", "doc_comment": "// \u7b97\u6cd5 A \u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u5e38\u6570\u9636"}, "code_tokens": ["void", "AlgorithmA", "(", ")", "{", "}", "n", ";", "int", "Console", ".", "WriteLine", "(", "0", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 24, "ast_depth": 7, "n_identifiers": 4, "vocab_size": 13}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/csharp/chapter_computational_complexity/time_complexity.cs#30-34", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/csharp/chapter_computational_complexity/time_complexity.cs", "language": "Java"}, "method": {"name": "AlgorithmB", "qualified_name": "codes.csharp.chapter_computational_complexity.time_complexity.cs#AlgorithmB", "start_line": 30, "end_line": 34, "signature": "AlgorithmB(int n)", "original_code": "void AlgorithmB(int n) {\n        for (int i = 0; i < n; i++) {\n            Console.WriteLine(0);\n        }\n    }", "doc_comment": "// \u7b97\u6cd5 B \u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u7ebf\u6027\u9636"}, "code_tokens": ["void", "AlgorithmB", "(", ")", "{", "}", "n", "for", "(", ";", ")", "int", ";", "i", "<", "n", "i", "++", "{", "}", "int", "i", "=", "0", ";", "Console", ".", "WriteLine", "(", "0", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 47, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 18}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/csharp/chapter_computational_complexity/time_complexity.cs#36-40", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/csharp/chapter_computational_complexity/time_complexity.cs", "language": "Java"}, "method": {"name": "AlgorithmC", "qualified_name": "codes.csharp.chapter_computational_complexity.time_complexity.cs#AlgorithmC", "start_line": 36, "end_line": 40, "signature": "AlgorithmC(int n)", "original_code": "void AlgorithmC(int n) {\n        for (int i = 0; i < 1000000; i++) {\n            Console.WriteLine(0);\n        }\n    }", "doc_comment": "// \u7b97\u6cd5 C \u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u5e38\u6570\u9636"}, "code_tokens": ["void", "AlgorithmC", "(", ")", "{", "}", "n", "for", "(", ";", ")", "int", ";", "i", "<", "1000000", "i", "++", "{", "}", "int", "i", "=", "0", ";", "Console", ".", "WriteLine", "(", "0", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 47, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 19}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/csharp/chapter_computational_complexity/time_complexity.cs#43-49", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/csharp/chapter_computational_complexity/time_complexity.cs", "language": "Java"}, "method": {"name": "Constant", "qualified_name": "codes.csharp.chapter_computational_complexity.time_complexity.cs#Constant", "start_line": 43, "end_line": 49, "signature": "Constant(int n)", "original_code": "static int Constant(int n) {\n        int count = 0;\n        int size = 100000;\n        for (int i = 0; i < size; i++)\n            count++;\n        return count;\n    }", "doc_comment": "/* \u5e38\u6570\u9636 */"}, "code_tokens": ["Constant", "static", "int", "(", ")", "{", "}", "n", ";", ";", "for", "(", ";", ")", "return", "count", ";", "int", "int", "count", "=", "0", "int", "size", "=", "100000", ";", "i", "<", "size", "i", "++", ";", "int", "i", "=", "0", "count", "++"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 62, "ast_depth": 7, "n_identifiers": 5, "vocab_size": 19}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/csharp/chapter_computational_complexity/time_complexity.cs#52-57", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/csharp/chapter_computational_complexity/time_complexity.cs", "language": "Java"}, "method": {"name": "Linear", "qualified_name": "codes.csharp.chapter_computational_complexity.time_complexity.cs#Linear", "start_line": 52, "end_line": 57, "signature": "Linear(int n)", "original_code": "static int Linear(int n) {\n        int count = 0;\n        for (int i = 0; i < n; i++)\n            count++;\n        return count;\n    }", "doc_comment": "/* \u7ebf\u6027\u9636 */"}, "code_tokens": ["Linear", "static", "int", "(", ")", "{", "}", "n", ";", "for", "(", ";", ")", "return", "count", ";", "int", "int", "count", "=", "0", ";", "i", "<", "n", "i", "++", ";", "int", "i", "=", "0", "count", "++"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 54, "ast_depth": 7, "n_identifiers": 4, "vocab_size": 17}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/csharp/chapter_computational_complexity/time_complexity.cs#60-67", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/csharp/chapter_computational_complexity/time_complexity.cs", "language": "Java"}, "method": {"name": "ArrayTraversal", "qualified_name": "codes.csharp.chapter_computational_complexity.time_complexity.cs#ArrayTraversal", "start_line": 60, "end_line": 67, "signature": "ArrayTraversal(int[] nums)", "original_code": "static int ArrayTraversal(int[] nums) {\n        int count = 0;\n        // \u5faa\u73af\u6b21\u6570\u4e0e\u6570\u7ec4\u957f\u5ea6\u6210\u6b63\u6bd4\n        foreach (int num in nums) {\n            count++;\n        }\n        return count;\n    }", "doc_comment": "/* \u7ebf\u6027\u9636\uff08\u904d\u5386\u6570\u7ec4\uff09 */"}, "code_tokens": ["ArrayTraversal", "static", "int", "(", ")", "{", "// \u5faa\u73af\u6b21\u6570\u4e0e\u6570\u7ec4\u957f\u5ea6\u6210\u6b63\u6bd4", "}", "nums", ";", "", "{", "}", "return", "count", ";", "int", "count", "=", "0", "foreach", ";", "int", "[", "]", "(", "nums", ")", "count", "++", "num", "in", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 55, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 21}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/csharp/chapter_computational_complexity/time_complexity.cs#70-79", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/csharp/chapter_computational_complexity/time_complexity.cs", "language": "Java"}, "method": {"name": "Quadratic", "qualified_name": "codes.csharp.chapter_computational_complexity.time_complexity.cs#Quadratic", "start_line": 70, "end_line": 79, "signature": "Quadratic(int n)", "original_code": "static int Quadratic(int n) {\n        int count = 0;\n        // \u5faa\u73af\u6b21\u6570\u4e0e\u6570\u7ec4\u957f\u5ea6\u6210\u5e73\u65b9\u5173\u7cfb\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                count++;\n            }\n        }\n        return count;\n    }", "doc_comment": "/* \u5e73\u65b9\u9636 */"}, "code_tokens": ["Quadratic", "static", "int", "(", ")", "{", "// \u5faa\u73af\u6b21\u6570\u4e0e\u6570\u7ec4\u957f\u5ea6\u6210\u5e73\u65b9\u5173\u7cfb", "}", "n", ";", "for", "(", ";", ")", "return", "count", ";", "int", "int", "count", "=", "0", ";", "i", "<", "n", "i", "++", "{", "}", "int", "i", "=", "0", "for", "(", ";", ")", ";", "j", "<", "n", "j", "++", "{", "}", "int", "j", "=", "0", ";", "count", "++"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 81, "ast_depth": 10, "n_identifiers": 5, "vocab_size": 19}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/csharp/chapter_computational_complexity/time_complexity.cs#82-96", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/csharp/chapter_computational_complexity/time_complexity.cs", "language": "Java"}, "method": {"name": "BubbleSort", "qualified_name": "codes.csharp.chapter_computational_complexity.time_complexity.cs#BubbleSort", "start_line": 82, "end_line": 96, "signature": "BubbleSort(int[] nums)", "original_code": "static int BubbleSort(int[] nums) {\n        int count = 0;  // \u8ba1\u6570\u5668\n        // \u5916\u5faa\u73af\uff1a\u672a\u6392\u5e8f\u533a\u95f4\u4e3a [0, i]\n        for (int i = nums.Length - 1; i > 0; i--) {\n            // \u5185\u5faa\u73af\uff1a\u5c06\u672a\u6392\u5e8f\u533a\u95f4 [0, i] \u4e2d\u7684\u6700\u5927\u5143\u7d20\u4ea4\u6362\u81f3\u8be5\u533a\u95f4\u7684\u6700\u53f3\u7aef \n            for (int j = 0; j < i; j++) {\n                if (nums[j] > nums[j + 1]) {\n                    // \u4ea4\u6362 nums[j] \u4e0e nums[j + 1]\n                    (nums[j + 1], nums[j]) = (nums[j], nums[j + 1]);\n                    count += 3;  // \u5143\u7d20\u4ea4\u6362\u5305\u542b 3 \u4e2a\u5355\u5143\u64cd\u4f5c\n                }\n            }\n        }\n        return count;\n    }", "doc_comment": "/* \u5e73\u65b9\u9636\uff08\u5192\u6ce1\u6392\u5e8f\uff09 */"}, "code_tokens": ["BubbleSort", "static", "int", "(", ")", "{", "// \u8ba1\u6570\u5668", "// \u5916\u5faa\u73af\uff1a\u672a\u6392\u5e8f\u533a\u95f4\u4e3a [0, i]", "}", "nums", ";", "for", "(", ";", ")", "return", "count", ";", "int", "count", "=", "0", ";", "i", ">", "0", "i", "--", "{", "// \u5185\u5faa\u73af\uff1a\u5c06\u672a\u6392\u5e8f\u533a\u95f4 [0, i] \u4e2d\u7684\u6700\u5927\u5143\u7d20\u4ea4\u6362\u81f3\u8be5\u533a\u95f4\u7684\u6700\u53f3\u7aef ", "}", "int", "[", "]", "int", "i", "=", "for", "(", ";", ")", "-", "1", ";", "j", "<", "i", "j", "++", "{", "}", "nums", ".", "Length", "int", "j", "=", "0", "if", "(", ")", "{", "// \u4ea4\u6362 nums[j] \u4e0e nums[j + 1]", "// \u5143\u7d20\u4ea4\u6362\u5305\u542b 3 \u4e2a\u5355\u5143\u64cd\u4f5c", "}", ">", "=", ";", ";", "nums", "[", "j", "]", "nums", "[", "]", "(", ")", "(", ")", "count", "+=", "3", "j", "+", "1", ",", "nums", "[", "j", "]", ",", "nums", "[", "]", "nums", "[", "]", "nums", "[", "j", "]", "j", "+", "1", "j", "+", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 159, "ast_depth": 15, "n_identifiers": 6, "vocab_size": 36}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/csharp/chapter_computational_complexity/time_complexity.cs#99-110", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/csharp/chapter_computational_complexity/time_complexity.cs", "language": "Java"}, "method": {"name": "Exponential", "qualified_name": "codes.csharp.chapter_computational_complexity.time_complexity.cs#Exponential", "start_line": 99, "end_line": 110, "signature": "Exponential(int n)", "original_code": "static int Exponential(int n) {\n        int count = 0, bas = 1;\n        // \u7ec6\u80de\u6bcf\u8f6e\u4e00\u5206\u4e3a\u4e8c\uff0c\u5f62\u6210\u6570\u5217 1, 2, 4, 8, ..., 2^(n-1)\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < bas; j++) {\n                count++;\n            }\n            bas *= 2;\n        }\n        // count = 1 + 2 + 4 + 8 + .. + 2^(n-1) = 2^n - 1\n        return count;\n    }", "doc_comment": "/* \u6307\u6570\u9636\uff08\u5faa\u73af\u5b9e\u73b0\uff09 */"}, "code_tokens": ["Exponential", "static", "int", "(", ")", "{", "// \u7ec6\u80de\u6bcf\u8f6e\u4e00\u5206\u4e3a\u4e8c\uff0c\u5f62\u6210\u6570\u5217 1, 2, 4, 8, ..., 2^(n-1)", "// count = 1 + 2 + 4 + 8 + .. + 2^(n-1) = 2^n - 1", "}", "n", ",", ";", "for", "(", ";", ")", "return", "count", ";", "int", "int", "count", "=", "0", "bas", "=", "1", ";", "i", "<", "n", "i", "++", "{", "}", "int", "i", "=", "0", "for", "(", ";", ")", ";", ";", "j", "<", "bas", "j", "++", "{", "}", "bas", "*=", "2", "int", "j", "=", "0", ";", "count", "++"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 93, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 25}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/csharp/chapter_computational_complexity/time_complexity.cs#113-116", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/csharp/chapter_computational_complexity/time_complexity.cs", "language": "Java"}, "method": {"name": "ExpRecur", "qualified_name": "codes.csharp.chapter_computational_complexity.time_complexity.cs#ExpRecur", "start_line": 113, "end_line": 116, "signature": "ExpRecur(int n)", "original_code": "static int ExpRecur(int n) {\n        if (n == 1) return 1;\n        return ExpRecur(n - 1) + ExpRecur(n - 1) + 1;\n    }", "doc_comment": "/* \u6307\u6570\u9636\uff08\u9012\u5f52\u5b9e\u73b0\uff09 */"}, "code_tokens": ["ExpRecur", "static", "int", "(", ")", "{", "}", "n", "if", "return", ";", "int", "(", ")", "return", "1", ";", "+", "1", "n", "==", "1", "+", "ExpRecur", "ExpRecur", "(", ")", "(", ")", "n", "-", "1", "n", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 56, "ast_depth": 10, "n_identifiers": 2, "vocab_size": 15}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/csharp/chapter_computational_complexity/time_complexity.cs#119-126", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/csharp/chapter_computational_complexity/time_complexity.cs", "language": "Java"}, "method": {"name": "Logarithmic", "qualified_name": "codes.csharp.chapter_computational_complexity.time_complexity.cs#Logarithmic", "start_line": 119, "end_line": 126, "signature": "Logarithmic(float n)", "original_code": "static int Logarithmic(float n) {\n        int count = 0;\n        while (n > 1) {\n            n = n / 2;\n            count++;\n        }\n        return count;\n    }", "doc_comment": "/* \u5bf9\u6570\u9636\uff08\u5faa\u73af\u5b9e\u73b0\uff09 */"}, "code_tokens": ["Logarithmic", "static", "int", "(", ")", "{", "}", "n", ";", "while", "return", "count", ";", "float", "int", "count", "=", "0", "(", ")", "{", "}", "n", ">", "1", ";", ";", "n", "=", "count", "++", "n", "/", "2"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 55, "ast_depth": 9, "n_identifiers": 3, "vocab_size": 20}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/csharp/chapter_computational_complexity/time_complexity.cs#129-132", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/csharp/chapter_computational_complexity/time_complexity.cs", "language": "Java"}, "method": {"name": "LogRecur", "qualified_name": "codes.csharp.chapter_computational_complexity.time_complexity.cs#LogRecur", "start_line": 129, "end_line": 132, "signature": "LogRecur(float n)", "original_code": "static int LogRecur(float n) {\n        if (n <= 1) return 0;\n        return LogRecur(n / 2) + 1;\n    }", "doc_comment": "/* \u5bf9\u6570\u9636\uff08\u9012\u5f52\u5b9e\u73b0\uff09 */"}, "code_tokens": ["LogRecur", "static", "int", "(", ")", "{", "}", "n", "if", "return", ";", "float", "(", ")", "return", "0", ";", "+", "1", "n", "<=", "1", "LogRecur", "(", ")", "n", "/", "2"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 45, "ast_depth": 9, "n_identifiers": 2, "vocab_size": 18}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/csharp/chapter_computational_complexity/time_complexity.cs#135-142", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/csharp/chapter_computational_complexity/time_complexity.cs", "language": "Java"}, "method": {"name": "LinearLogRecur", "qualified_name": "codes.csharp.chapter_computational_complexity.time_complexity.cs#LinearLogRecur", "start_line": 135, "end_line": 142, "signature": "LinearLogRecur(float n)", "original_code": "static int LinearLogRecur(float n) {\n        if (n <= 1) return 1;\n        int count = LinearLogRecur(n / 2) + LinearLogRecur(n / 2);\n        for (int i = 0; i < n; i++) {\n            count++;\n        }\n        return count;\n    }", "doc_comment": "/* \u7ebf\u6027\u5bf9\u6570\u9636 */"}, "code_tokens": ["LinearLogRecur", "static", "int", "(", ")", "{", "}", "n", "if", ";", "for", "(", ";", ")", "return", "count", ";", "float", "(", ")", "return", "1", ";", "int", "count", "=", ";", "i", "<", "n", "i", "++", "{", "}", "n", "<=", "1", "+", "int", "i", "=", "0", ";", "LinearLogRecur", "LinearLogRecur", "count", "++", "(", ")", "(", ")", "n", "/", "2", "n", "/", "2"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 89, "ast_depth": 10, "n_identifiers": 4, "vocab_size": 24}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/csharp/chapter_computational_complexity/time_complexity.cs#145-153", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/csharp/chapter_computational_complexity/time_complexity.cs", "language": "Java"}, "method": {"name": "FactorialRecur", "qualified_name": "codes.csharp.chapter_computational_complexity.time_complexity.cs#FactorialRecur", "start_line": 145, "end_line": 153, "signature": "FactorialRecur(int n)", "original_code": "static int FactorialRecur(int n) {\n        if (n == 0) return 1;\n        int count = 0;\n        // \u4ece 1 \u4e2a\u5206\u88c2\u51fa n \u4e2a\n        for (int i = 0; i < n; i++) {\n            count += FactorialRecur(n - 1);\n        }\n        return count;\n    }", "doc_comment": "/* \u9636\u4e58\u9636\uff08\u9012\u5f52\u5b9e\u73b0\uff09 */"}, "code_tokens": ["FactorialRecur", "static", "int", "(", ")", "{", "// \u4ece 1 \u4e2a\u5206\u88c2\u51fa n \u4e2a", "}", "n", "if", ";", "for", "(", ";", ")", "return", "count", ";", "int", "(", ")", "return", "1", ";", "int", "count", "=", "0", ";", "i", "<", "n", "i", "++", "{", "}", "n", "==", "0", "int", "i", "=", "0", ";", "count", "+=", "FactorialRecur", "(", ")", "n", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 80, "ast_depth": 11, "n_identifiers": 4, "vocab_size": 23}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/csharp/chapter_computational_complexity/time_complexity.cs#156-192", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/csharp/chapter_computational_complexity/time_complexity.cs", "language": "Java"}, "method": {"name": "Test", "qualified_name": "codes.csharp.chapter_computational_complexity.time_complexity.cs#Test", "start_line": 156, "end_line": 192, "signature": "Test()", "original_code": "public void Test() {\n        // \u53ef\u4ee5\u4fee\u6539 n \u8fd0\u884c\uff0c\u4f53\u4f1a\u4e00\u4e0b\u5404\u79cd\u590d\u6742\u5ea6\u7684\u64cd\u4f5c\u6570\u91cf\u53d8\u5316\u8d8b\u52bf\n        int n = 8;\n        Console.WriteLine(\"\u8f93\u5165\u6570\u636e\u5927\u5c0f n = \" + n);\n\n        int count = Constant(n);\n        Console.WriteLine(\"\u5e38\u6570\u9636\u7684\u64cd\u4f5c\u6570\u91cf = \" + count);\n\n        count = Linear(n);\n        Console.WriteLine(\"\u7ebf\u6027\u9636\u7684\u64cd\u4f5c\u6570\u91cf = \" + count);\n        count = ArrayTraversal(new int[n]);\n        Console.WriteLine(\"\u7ebf\u6027\u9636\uff08\u904d\u5386\u6570\u7ec4\uff09\u7684\u64cd\u4f5c\u6570\u91cf = \" + count);\n\n        count = Quadratic(n);\n        Console.WriteLine(\"\u5e73\u65b9\u9636\u7684\u64cd\u4f5c\u6570\u91cf = \" + count);\n        int[] nums = new int[n];\n        for (int i = 0; i < n; i++)\n            nums[i] = n - i;  // [n,n-1,...,2,1]\n        count = BubbleSort(nums);\n        Console.WriteLine(\"\u5e73\u65b9\u9636\uff08\u5192\u6ce1\u6392\u5e8f\uff09\u7684\u64cd\u4f5c\u6570\u91cf = \" + count);\n\n        count = Exponential(n);\n        Console.WriteLine(\"\u6307\u6570\u9636\uff08\u5faa\u73af\u5b9e\u73b0\uff09\u7684\u64cd\u4f5c\u6570\u91cf = \" + count);\n        count = ExpRecur(n);\n        Console.WriteLine(\"\u6307\u6570\u9636\uff08\u9012\u5f52\u5b9e\u73b0\uff09\u7684\u64cd\u4f5c\u6570\u91cf = \" + count);\n\n        count = Logarithmic((float)n);\n        Console.WriteLine(\"\u5bf9\u6570\u9636\uff08\u5faa\u73af\u5b9e\u73b0\uff09\u7684\u64cd\u4f5c\u6570\u91cf = \" + count);\n        count = LogRecur((float)n);\n        Console.WriteLine(\"\u5bf9\u6570\u9636\uff08\u9012\u5f52\u5b9e\u73b0\uff09\u7684\u64cd\u4f5c\u6570\u91cf = \" + count);\n\n        count = LinearLogRecur((float)n);\n        Console.WriteLine(\"\u7ebf\u6027\u5bf9\u6570\u9636\uff08\u9012\u5f52\u5b9e\u73b0\uff09\u7684\u64cd\u4f5c\u6570\u91cf = \" + count);\n\n        count = FactorialRecur(n);\n        Console.WriteLine(\"\u9636\u4e58\u9636\uff08\u9012\u5f52\u5b9e\u73b0\uff09\u7684\u64cd\u4f5c\u6570\u91cf = \" + count);\n    }", "doc_comment": ""}, "code_tokens": ["void", "Test", "public", "(", ")", "{", "// \u53ef\u4ee5\u4fee\u6539 n \u8fd0\u884c\uff0c\u4f53\u4f1a\u4e00\u4e0b\u5404\u79cd\u590d\u6742\u5ea6\u7684\u64cd\u4f5c\u6570\u91cf\u53d8\u5316\u8d8b\u52bf", "// [n,n-1,...,2,1]", "}", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "for", "(", ";", ")", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "int", "n", "=", "8", "Console", ".", "WriteLine", "int", "count", "=", "Console", ".", "WriteLine", "count", "=", "Console", ".", "WriteLine", "count", "=", "Console", ".", "WriteLine", "count", "=", "Console", ".", "WriteLine", "nums", "=", ";", "i", "<", "n", "i", "++", ";", "count", "=", "Console", ".", "WriteLine", "count", "=", "Console", ".", "WriteLine", "count", "=", "Console", ".", "WriteLine", "count", "=", "Console", ".", "WriteLine", "count", "=", "Console", ".", "WriteLine", "count", "=", "Console", ".", "WriteLine", "count", "=", "Console", ".", "WriteLine", "(", ")", "Constant", "(", ")", "Linear", "(", ")", "ArrayTraversal", "(", ")", "Quadratic", "(", ")", "int", "[", "]", "new", "int", "i", "=", "0", "=", "BubbleSort", "(", ")", "Exponential", "(", ")", "ExpRecur", "(", ")", "Logarithmic", "(", ")", "LogRecur", "(", ")", "LinearLogRecur", "(", ")", "FactorialRecur", "(", ")", "+", "n", "(", "n", ")", "+", "count", "(", "n", ")", "+", "count", "(", ")", "+", "count", "(", "n", ")", "+", "count", "int", "[", "n", "]", "nums", "[", "i", "]", "n", "-", "i", "(", "nums", ")", "+", "count", "(", "n", ")", "+", "count", "(", "n", ")", "+", "count", "(", ")", "+", "count", "(", ")", "+", "count", "(", ")", "+", "count", "(", "n", ")", "+", "count", "\"", "\u8f93\u5165\u6570\u636e\u5927\u5c0f n = ", "\"", "\"", "\u5e38\u6570\u9636\u7684\u64cd\u4f5c\u6570\u91cf = ", "\"", "\"", "\u7ebf\u6027\u9636\u7684\u64cd\u4f5c\u6570\u91cf = ", "\"", "new", "\"", "\u7ebf\u6027\u9636\uff08\u904d\u5386\u6570\u7ec4\uff09\u7684\u64cd\u4f5c\u6570\u91cf = ", "\"", "\"", "\u5e73\u65b9\u9636\u7684\u64cd\u4f5c\u6570\u91cf = ", "\"", "\"", "\u5e73\u65b9\u9636\uff08\u5192\u6ce1\u6392\u5e8f\uff09\u7684\u64cd\u4f5c\u6570\u91cf = ", "\"", "\"", "\u6307\u6570\u9636\uff08\u5faa\u73af\u5b9e\u73b0\uff09\u7684\u64cd\u4f5c\u6570\u91cf = ", "\"", "\"", "\u6307\u6570\u9636\uff08\u9012\u5f52\u5b9e\u73b0\uff09\u7684\u64cd\u4f5c\u6570\u91cf = ", "\"", "(", ")", "n", "\"", "\u5bf9\u6570\u9636\uff08\u5faa\u73af\u5b9e\u73b0\uff09\u7684\u64cd\u4f5c\u6570\u91cf = ", "\"", "(", ")", "n", "\"", "\u5bf9\u6570\u9636\uff08\u9012\u5f52\u5b9e\u73b0\uff09\u7684\u64cd\u4f5c\u6570\u91cf = ", "\"", "(", ")", "n", "\"", "\u7ebf\u6027\u5bf9\u6570\u9636\uff08\u9012\u5f52\u5b9e\u73b0\uff09\u7684\u64cd\u4f5c\u6570\u91cf = ", "\"", "\"", "\u9636\u4e58\u9636\uff08\u9012\u5f52\u5b9e\u73b0\uff09\u7684\u64cd\u4f5c\u6570\u91cf = ", "\"", "int", "[", "n", "]", "float", "float", "float"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 411, "ast_depth": 10, "n_identifiers": 18, "vocab_size": 54}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/csharp/chapter_computational_complexity/worst_best_time_complexity.cs#11-24", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/csharp/chapter_computational_complexity/worst_best_time_complexity.cs", "language": "Java"}, "method": {"name": "RandomNumbers", "qualified_name": "codes.csharp.chapter_computational_complexity.worst_best_time_complexity.cs#RandomNumbers", "start_line": 11, "end_line": 24, "signature": "RandomNumbers(int n)", "original_code": "static int[] RandomNumbers(int n) {\n        int[] nums = new int[n];\n        // \u751f\u6210\u6570\u7ec4 nums = { 1, 2, 3, ..., n }\n        for (int i = 0; i < n; i++) {\n            nums[i] = i + 1;\n        }\n\n        // \u968f\u673a\u6253\u4e71\u6570\u7ec4\u5143\u7d20\n        for (int i = 0; i < nums.Length; i++) {\n            int index = new Random().Next(i, nums.Length);\n            (nums[i], nums[index]) = (nums[index], nums[i]);\n        }\n        return nums;\n    }", "doc_comment": "/* \u751f\u6210\u4e00\u4e2a\u6570\u7ec4\uff0c\u5143\u7d20\u4e3a { 1, 2, ..., n }\uff0c\u987a\u5e8f\u88ab\u6253\u4e71 */"}, "code_tokens": ["RandomNumbers", "static", "(", ")", "{", "// \u751f\u6210\u6570\u7ec4 nums = { 1, 2, 3, ..., n }", "// \u968f\u673a\u6253\u4e71\u6570\u7ec4\u5143\u7d20", "}", "int", "[", "]", "n", ";", "for", "(", ";", ")", "for", "(", ";", ")", "return", "nums", ";", "int", "nums", "=", ";", "i", "<", "n", "i", "++", "{", "}", ";", "i", "<", "i", "++", "{", "}", "int", "[", "]", "new", "int", "i", "=", "0", ";", "int", "i", "=", "0", "nums", ".", "Length", ";", "=", ";", "int", "[", "n", "]", "=", "int", "index", "=", "(", ")", "(", ")", "nums", "[", "i", "]", "i", "+", "1", ".", "Next", ",", "nums", "[", "index", "]", ",", "nums", "[", "i", "]", "new", "Random", "(", "i", ",", ")", "nums", "[", "i", "]", "nums", "[", "index", "]", "(", ")", "nums", ".", "Length"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 167, "ast_depth": 11, "n_identifiers": 7, "vocab_size": 30}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/csharp/chapter_computational_complexity/worst_best_time_complexity.cs#27-35", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/csharp/chapter_computational_complexity/worst_best_time_complexity.cs", "language": "Java"}, "method": {"name": "FindOne", "qualified_name": "codes.csharp.chapter_computational_complexity.worst_best_time_complexity.cs#FindOne", "start_line": 27, "end_line": 35, "signature": "FindOne(int[] nums)", "original_code": "static int FindOne(int[] nums) {\n        for (int i = 0; i < nums.Length; i++) {\n            // \u5f53\u5143\u7d20 1 \u5728\u6570\u7ec4\u5934\u90e8\u65f6\uff0c\u8fbe\u5230\u6700\u4f73\u65f6\u95f4\u590d\u6742\u5ea6 O(1)\n            // \u5f53\u5143\u7d20 1 \u5728\u6570\u7ec4\u5c3e\u90e8\u65f6\uff0c\u8fbe\u5230\u6700\u5dee\u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n            if (nums[i] == 1)\n                return i;\n        }\n        return -1;\n    }", "doc_comment": "/* \u67e5\u627e\u6570\u7ec4 nums \u4e2d\u6570\u5b57 1 \u6240\u5728\u7d22\u5f15 */"}, "code_tokens": ["FindOne", "static", "int", "(", ")", "{", "}", "nums", "for", "(", ";", ")", "return", ";", ";", "i", "<", "i", "++", "{", "// \u5f53\u5143\u7d20 1 \u5728\u6570\u7ec4\u5934\u90e8\u65f6\uff0c\u8fbe\u5230\u6700\u4f73\u65f6\u95f4\u590d\u6742\u5ea6 O(1)", "// \u5f53\u5143\u7d20 1 \u5728\u6570\u7ec4\u5c3e\u90e8\u65f6\uff0c\u8fbe\u5230\u6700\u5dee\u65f6\u95f4\u590d\u6742\u5ea6 O(n)", "}", "-", "1", "int", "[", "]", "int", "i", "=", "0", "nums", ".", "Length", "if", "(", ")", "return", "i", ";", "==", "1", "nums", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 72, "ast_depth": 10, "n_identifiers": 4, "vocab_size": 26}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/csharp/chapter_computational_complexity/worst_best_time_complexity.cs#40-48", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/csharp/chapter_computational_complexity/worst_best_time_complexity.cs", "language": "Java"}, "method": {"name": "Test", "qualified_name": "codes.csharp.chapter_computational_complexity.worst_best_time_complexity.cs#Test", "start_line": 40, "end_line": 48, "signature": "Test()", "original_code": "public void Test() {\n        for (int i = 0; i < 10; i++) {\n            int n = 100;\n            int[] nums = RandomNumbers(n);\n            int index = FindOne(nums);\n            Console.WriteLine(\"\\n\u6570\u7ec4 [ 1, 2, ..., n ] \u88ab\u6253\u4e71\u540e = \" + string.Join(\",\", nums));\n            Console.WriteLine(\"\u6570\u5b57 1 \u7684\u7d22\u5f15\u4e3a \" + index);\n        }\n    }", "doc_comment": ""}, "code_tokens": ["void", "Test", "public", "(", ")", "{", "}", "for", "(", ";", ")", ";", "i", "<", "10", "i", "++", "{", "}", "int", "i", "=", "0", ";", ";", ";", ";", ";", "int", "n", "=", "100", "nums", "=", "int", "index", "=", "Console", ".", "WriteLine", "Console", ".", "WriteLine", "int", "[", "]", "RandomNumbers", "FindOne", "(", ")", "(", ")", "(", "n", ")", "(", "nums", ")", "+", "+", "index", "\"", "\\n", "\u6570\u7ec4 [ 1, 2, ..., n ] \u88ab\u6253\u4e71\u540e = ", "\"", "string", ".", "Join", "\"", "\u6570\u5b57 1 \u7684\u7d22\u5f15\u4e3a ", "\"", "(", ",", "nums", ")", "\"", ",", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 118, "ast_depth": 13, "n_identifiers": 11, "vocab_size": 35}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/go/chapter_computational_complexity/time_complexity.go#8-15", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/go/chapter_computational_complexity/time_complexity.go", "language": "Java"}, "method": {"name": "constant", "qualified_name": "codes.go.chapter_computational_complexity.time_complexity.go#constant", "start_line": 8, "end_line": 15, "signature": "constant(n int)", "original_code": "func constant(n int) int {\n\tcount := 0\n\tsize := 100000\n\tfor i := 0; i < size; i++ {\n\t\tcount++\n\t}\n\treturn count\n}", "doc_comment": ""}, "code_tokens": ["func", "constant", "(", ")", "int", "{", "}", "n", "int", "", ";", ";", "", "{", "}", "return", "count", "", "count", "=", "0", "size", "=", "0", "i", "<", "size", "i", "++", ":", ":", "=", "100000", "for", "i", ":", "count", "++"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 58, "ast_depth": 7, "n_identifiers": 6, "vocab_size": 21}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/go/chapter_computational_complexity/time_complexity.go#18-24", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/go/chapter_computational_complexity/time_complexity.go", "language": "Java"}, "method": {"name": "linear", "qualified_name": "codes.go.chapter_computational_complexity.time_complexity.go#linear", "start_line": 18, "end_line": 24, "signature": "linear(n int)", "original_code": "func linear(n int) int {\n\tcount := 0\n\tfor i := 0; i < n; i++ {\n\t\tcount++\n\t}\n\treturn count\n}", "doc_comment": "/* \u7ebf\u6027\u9636 */"}, "code_tokens": ["func", "linear", "(", ")", "int", "{", "}", "n", "int", ";", ";", "", "{", "}", "return", "count", "", "count", "=", "0", "i", "<", "n", "i", "++", ":", "=", "0", "for", "i", ":", "count", "++"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 50, "ast_depth": 7, "n_identifiers": 6, "vocab_size": 19}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/go/chapter_computational_complexity/time_complexity.go#27-34", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/go/chapter_computational_complexity/time_complexity.go", "language": "Java"}, "method": {"name": "arrayTraversal", "qualified_name": "codes.go.chapter_computational_complexity.time_complexity.go#arrayTraversal", "start_line": 27, "end_line": 34, "signature": "arrayTraversal(nums []int)", "original_code": "func arrayTraversal(nums []int) int {\n\tcount := 0\n\t// \u5faa\u73af\u6b21\u6570\u4e0e\u6570\u7ec4\u957f\u5ea6\u6210\u6b63\u6bd4\n\tfor range nums {\n\t\tcount++\n\t}\n\treturn count\n}", "doc_comment": "/* \u7ebf\u6027\u9636\uff08\u904d\u5386\u6570\u7ec4\uff09 */"}, "code_tokens": ["func", "arrayTraversal", "(", ")", "int", "{", "}", "int", "count", ":", "return", "count", "", "nums", "=", "0", "// \u5faa\u73af\u6b21\u6570\u4e0e\u6570\u7ec4\u957f\u5ea6\u6210\u6b63\u6bd4", "for", "range", "nums", "{", "}", "[", "]", "count", "++"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 40, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 20}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/go/chapter_computational_complexity/time_complexity.go#37-46", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/go/chapter_computational_complexity/time_complexity.go", "language": "Java"}, "method": {"name": "quadratic", "qualified_name": "codes.go.chapter_computational_complexity.time_complexity.go#quadratic", "start_line": 37, "end_line": 46, "signature": "quadratic(n int)", "original_code": "func quadratic(n int) int {\n\tcount := 0\n\t// \u5faa\u73af\u6b21\u6570\u4e0e\u6570\u7ec4\u957f\u5ea6\u6210\u5e73\u65b9\u5173\u7cfb\n\tfor i := 0; i < n; i++ {\n\t\tfor j := 0; j < n; j++ {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}", "doc_comment": "/* \u5e73\u65b9\u9636 */"}, "code_tokens": ["func", "quadratic", "(", ")", "int", "{", "}", "n", "int", ";", ";", "", "{", "}", "return", "count", "", "count", "=", "0", "i", "<", "n", "i", "++", "for", "{", "}", ":", "=", "0", "// \u5faa\u73af\u6b21\u6570\u4e0e\u6570\u7ec4\u957f\u5ea6\u6210\u5e73\u65b9\u5173\u7cfb", "for", "i", ":", ";", ";", "j", "++", "j", "=", "0", "j", "<", "n", "count", "++", ":"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 73, "ast_depth": 9, "n_identifiers": 7, "vocab_size": 21}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/go/chapter_computational_complexity/time_complexity.go#49-65", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/go/chapter_computational_complexity/time_complexity.go", "language": "Java"}, "method": {"name": "bubbleSort", "qualified_name": "codes.go.chapter_computational_complexity.time_complexity.go#bubbleSort", "start_line": 49, "end_line": 65, "signature": "bubbleSort(nums []int)", "original_code": "func bubbleSort(nums []int) int {\n\tcount := 0 // \u8ba1\u6570\u5668\n\t// \u5916\u5faa\u73af\uff1a\u672a\u6392\u5e8f\u533a\u95f4\u4e3a [0, i]\n\tfor i := len(nums) - 1; i > 0; i-- {\n\t\t// \u5185\u5faa\u73af\uff1a\u5c06\u672a\u6392\u5e8f\u533a\u95f4 [0, i] \u4e2d\u7684\u6700\u5927\u5143\u7d20\u4ea4\u6362\u81f3\u8be5\u533a\u95f4\u7684\u6700\u53f3\u7aef\n\t\tfor j := 0; j < i; j++ {\n\t\t\tif nums[j] > nums[j+1] {\n\t\t\t\t// \u4ea4\u6362 nums[j] \u4e0e nums[j + 1]\n\t\t\t\ttmp := nums[j]\n\t\t\t\tnums[j] = nums[j+1]\n\t\t\t\tnums[j+1] = tmp\n\t\t\t\tcount += 3 // \u5143\u7d20\u4ea4\u6362\u5305\u542b 3 \u4e2a\u5355\u5143\u64cd\u4f5c\n\t\t\t}\n\t\t}\n\t}\n\treturn count\n}", "doc_comment": "/* \u5e73\u65b9\u9636\uff08\u5192\u6ce1\u6392\u5e8f\uff09 */"}, "code_tokens": ["func", "bubbleSort", "(", ")", "int", "{", "}", "int", ";", ";", "", "{", "// \u5185\u5faa\u73af\uff1a\u5c06\u672a\u6392\u5e8f\u533a\u95f4 [0, i] \u4e2d\u7684\u6700\u5927\u5143\u7d20\u4ea4\u6362\u81f3\u8be5\u533a\u95f4\u7684\u6700\u53f3\u7aef", "}", "return", "count", "", "nums", "count", "=", "i", ">", "0", "i", "--", "for", "{", "}", "[", "]", ":", "=", "0", "// \u8ba1\u6570\u5668", "// \u5916\u5faa\u73af\uff1a\u672a\u6392\u5e8f\u533a\u95f4\u4e3a [0, i]", "for", "i", ":", "-", "1", ";", ";", "j", "++", "if", "{", "// \u4ea4\u6362 nums[j] \u4e0e nums[j + 1]", "}", "len", "j", "=", "0", "j", "<", "i", ">", "// \u5143\u7d20\u4ea4\u6362\u5305\u542b 3 \u4e2a\u5355\u5143\u64cd\u4f5c", "", "(", "nums", ")", ":", "nums", "[", "j", "]", "nums", "[", "]", "tmp", "=", "j", "+", "1", ":", "=", "[", "j", "]", "=", "nums", "[", "j", "]", "nums", "[", "]", "tmp", "count", "+=", "3", "nums", "[", "]", "nums", "j", "+", "1", "j", "+", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 150, "ast_depth": 14, "n_identifiers": 9, "vocab_size": 37}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/go/chapter_computational_complexity/time_complexity.go#68-79", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/go/chapter_computational_complexity/time_complexity.go", "language": "Java"}, "method": {"name": "exponential", "qualified_name": "codes.go.chapter_computational_complexity.time_complexity.go#exponential", "start_line": 68, "end_line": 79, "signature": "exponential(n int)", "original_code": "func exponential(n int) int {\n\tcount, base := 0, 1\n\t// \u7ec6\u80de\u6bcf\u8f6e\u4e00\u5206\u4e3a\u4e8c\uff0c\u5f62\u6210\u6570\u5217 1, 2, 4, 8, ..., 2^(n-1)\n\tfor i := 0; i < n; i++ {\n\t\tfor j := 0; j < base; j++ {\n\t\t\tcount++\n\t\t}\n\t\tbase *= 2\n\t}\n\t// count = 1 + 2 + 4 + 8 + .. + 2^(n-1) = 2^n - 1\n\treturn count\n}", "doc_comment": "/* \u6307\u6570\u9636\uff08\u5faa\u73af\u5b9e\u73b0\uff09*/"}, "code_tokens": ["func", "exponential", "(", ")", "int", "{", "// count = 1 + 2 + 4 + 8 + .. + 2^(n-1) = 2^n - 1", "}", "n", "int", "count", ",", ";", ";", "", "{", "}", "return", "count", "", ",", "base", "=", "0", "1", "// \u7ec6\u80de\u6bcf\u8f6e\u4e00\u5206\u4e3a\u4e8c\uff0c\u5f62\u6210\u6570\u5217 1, 2, 4, 8, ..., 2^(n-1)", "for", "i", "=", "0", "i", "<", "n", "i", "++", "for", ":", ":", ";", ";", "j", "++", "{", "}", "base", "*=", "2", "j", "=", "0", "j", "<", "base", ":", "count", "++"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 86, "ast_depth": 9, "n_identifiers": 7, "vocab_size": 27}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/go/chapter_computational_complexity/time_complexity.go#82-87", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/go/chapter_computational_complexity/time_complexity.go", "language": "Java"}, "method": {"name": "expRecur", "qualified_name": "codes.go.chapter_computational_complexity.time_complexity.go#expRecur", "start_line": 82, "end_line": 87, "signature": "expRecur(n int)", "original_code": "func expRecur(n int) int {\n\tif n == 1 {\n\t\treturn 1\n\t}\n\treturn expRecur(n-1) + expRecur(n-1) + 1\n}", "doc_comment": "/* \u6307\u6570\u9636\uff08\u9012\u5f52\u5b9e\u73b0\uff09*/"}, "code_tokens": ["func", "expRecur", "(", ")", "int", "{", "}", "n", "int", "if", "return", "n", "==", "1", "{", "}", "+", "1", "return", "1", "", "+", "expRecur", "expRecur", "(", ")", "(", ")", "n", "-", "1", "n", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 52, "ast_depth": 10, "n_identifiers": 3, "vocab_size": 15}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/go/chapter_computational_complexity/time_complexity.go#90-97", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/go/chapter_computational_complexity/time_complexity.go", "language": "Java"}, "method": {"name": "logarithmic", "qualified_name": "codes.go.chapter_computational_complexity.time_complexity.go#logarithmic", "start_line": 90, "end_line": 97, "signature": "logarithmic(n float64)", "original_code": "func logarithmic(n float64) int {\n\tcount := 0\n\tfor n > 1 {\n\t\tn = n / 2\n\t\tcount++\n\t}\n\treturn count\n}", "doc_comment": "/* \u5bf9\u6570\u9636\uff08\u5faa\u73af\u5b9e\u73b0\uff09*/"}, "code_tokens": ["func", "logarithmic", "(", ")", "int", "{", "}", "n", "float64", "count", ":", "return", "count", "", "=", "{", "}", "0", ">", "1", "", "for", "n", "n", "=", "n", "/", "2", "count", "++"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 47, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 21}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/go/chapter_computational_complexity/time_complexity.go#100-105", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/go/chapter_computational_complexity/time_complexity.go", "language": "Java"}, "method": {"name": "logRecur", "qualified_name": "codes.go.chapter_computational_complexity.time_complexity.go#logRecur", "start_line": 100, "end_line": 105, "signature": "logRecur(n float64)", "original_code": "func logRecur(n float64) int {\n\tif n <= 1 {\n\t\treturn 0\n\t}\n\treturn logRecur(n/2) + 1\n}", "doc_comment": "/* \u5bf9\u6570\u9636\uff08\u9012\u5f52\u5b9e\u73b0\uff09*/"}, "code_tokens": ["func", "logRecur", "(", ")", "int", "{", "}", "n", "float64", "if", "return", "n", "<=", "1", "{", "}", "+", "1", "return", "0", "", "logRecur", "(", ")", "n", "/", "2"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 41, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 18}}
{"dataset_split": "train", "example_id": "hello-algo@e03022d:codes/go/chapter_computational_complexity/time_complexity.go#108-117", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e03022d5fb15b998e569755e1847bf0954acae94", "license": null}, "file": {"path": "codes/go/chapter_computational_complexity/time_complexity.go", "language": "Java"}, "method": {"name": "linearLogRecur", "qualified_name": "codes.go.chapter_computational_complexity.time_complexity.go#linearLogRecur", "start_line": 108, "end_line": 117, "signature": "linearLogRecur(n float64)", "original_code": "func linearLogRecur(n float64) int {\n\tif n <= 1 {\n\t\treturn 1\n\t}\n\tcount := linearLogRecur(n / 2) + linearLogRecur(n / 2)\n\tfor i := 0.0; i < n; i++ {\n\t\tcount++\n\t}\n\treturn count\n}", "doc_comment": "/* \u7ebf\u6027\u5bf9\u6570\u9636 */"}, "code_tokens": ["func", "linearLogRecur", "(", ")", "int", "{", "}", "n", "float64", "if", "{", "}", ";", ";", "", "{", "}", "return", "count", "", "n", "<=", "1", "return", "1", "", "count", "=", "0.0", "i", "<", "n", "i", "++", ":", "=", "for", "i", ":", "count", "++", "+", "linearLogRecur", "linearLogRecur", "(", ")", "(", ")", "n", "/", "2", "n", "/", "2"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 82, "ast_depth": 11, "n_identifiers": 7, "vocab_size": 26}}
