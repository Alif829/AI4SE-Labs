{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_array_and_linkedlist/array.cpp#60-66", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_array_and_linkedlist/array.cpp", "language": "Java"}, "method": {"name": "find", "qualified_name": "codes.cpp.chapter_array_and_linkedlist.array.cpp#find", "start_line": 60, "end_line": 66, "signature": "find(int *nums, int size, int target)", "original_code": "int find(int *nums, int size, int target) {\n    for (int i = 0; i < size; i++) {\n        if (nums[i] == target)\n            return i;\n    }\n    return -1;\n}", "doc_comment": "/* \u5728\u6570\u7ec4\u4e2d\u67e5\u627e\u6307\u5b9a\u5143\u7d20 */"}, "code_tokens": ["find", "int", "(", ",", ",", ")", "{", "}", "nums", "size", "target", "for", "(", ";", ")", "return", ";", "int", "*", "int", "int", ";", "i", "<", "size", "i", "++", "{", "}", "-", "1", "int", "i", "=", "0", "if", "(", ")", "return", "i", ";", "==", "target", "nums", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 73, "ast_depth": 10, "n_identifiers": 5, "vocab_size": 25}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_array_and_linkedlist/array.cpp#69-113", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_array_and_linkedlist/array.cpp", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.cpp.chapter_array_and_linkedlist.array.cpp#main", "start_line": 69, "end_line": 113, "signature": "main()", "original_code": "int main() {\n    /* \u521d\u59cb\u5316\u6570\u7ec4 */\n    int size = 5;\n    int *arr = new int[size];\n    cout << \"\u6570\u7ec4 arr = \";\n    printArray(arr, size);\n\n    int *nums = new int[size]{1, 3, 2, 5, 4};\n    cout << \"\u6570\u7ec4 nums = \";\n    printArray(nums, size);\n\n    /* \u968f\u673a\u8bbf\u95ee */\n    int randomNum = randomAccess(nums, size);\n    cout << \"\u5728 nums \u4e2d\u83b7\u53d6\u968f\u673a\u5143\u7d20 \" << randomNum << endl;\n\n    /* \u957f\u5ea6\u6269\u5c55 */\n    int enlarge = 3;\n    nums = extend(nums, size, enlarge);\n    size += enlarge;\n    cout << \"\u5c06\u6570\u7ec4\u957f\u5ea6\u6269\u5c55\u81f3 8 \uff0c\u5f97\u5230 nums = \";\n    printArray(nums, size);\n\n    /* \u63d2\u5165\u5143\u7d20 */\n    insert(nums, size, 6, 3);\n    cout << \"\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = \";\n    printArray(nums, size);\n\n    /* \u5220\u9664\u5143\u7d20 */\n    remove(nums, size, 2);\n    cout << \"\u5220\u9664\u7d22\u5f15 2 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = \";\n    printArray(nums, size);\n\n    /* \u904d\u5386\u6570\u7ec4 */\n    traverse(nums, size);\n\n    /* \u67e5\u627e\u5143\u7d20 */\n    int index = find(nums, size, 3);\n    cout << \"\u5728 nums \u4e2d\u67e5\u627e\u5143\u7d20 3 \uff0c\u5f97\u5230\u7d22\u5f15 = \" << index << endl;\n\n    // \u91ca\u653e\u5185\u5b58\n    delete[] arr;\n    delete[] nums;\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "/* \u521d\u59cb\u5316\u6570\u7ec4 */", "/* \u968f\u673a\u8bbf\u95ee */", "/* \u957f\u5ea6\u6269\u5c55 */", "/* \u63d2\u5165\u5143\u7d20 */", "/* \u5220\u9664\u5143\u7d20 */", "/* \u904d\u5386\u6570\u7ec4 */", "/* \u67e5\u627e\u5143\u7d20 */", "// \u91ca\u653e\u5185\u5b58", "}", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "return", "0", ";", "int", "size", "=", "5", "int", "*", "arr", "=", "cout", "<<", "printArray", "int", "*", "nums", "=", "cout", "<<", "printArray", "int", "randomNum", "=", "<<", "endl", "int", "enlarge", "=", "3", "nums", "=", "size", "+=", "enlarge", "cout", "<<", "printArray", "insert", "cout", "<<", "printArray", "remove", "cout", "<<", "printArray", "traverse", "int", "index", "=", "<<", "endl", "delete", "arr", "delete", "nums", "new", "\"", "\u6570\u7ec4 arr = ", "\"", "(", "arr", ",", "size", ")", "{", "1", ",", "3", ",", "2", ",", "5", ",", "4", "}", "\"", "\u6570\u7ec4 nums = ", "\"", "(", "nums", ",", "size", ")", "randomAccess", "<<", "randomNum", "extend", "\"", "\u5c06\u6570\u7ec4\u957f\u5ea6\u6269\u5c55\u81f3 8 \uff0c\u5f97\u5230 nums = ", "\"", "(", "nums", ",", "size", ")", "(", "nums", ",", "size", ",", "6", ",", "3", ")", "\"", "\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = ", "\"", "(", "nums", ",", "size", ")", "(", "nums", ",", "size", ",", "2", ")", "\"", "\u5220\u9664\u7d22\u5f15 2 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = ", "\"", "(", "nums", ",", "size", ")", "(", "nums", ",", "size", ")", "find", "<<", "index", "[", "]", "[", "]", "int", "[", "size", "]", "new", "(", "nums", ",", "size", ")", "cout", "<<", "(", "nums", ",", "size", ",", "enlarge", ")", "(", "nums", ",", "size", ",", "3", ")", "cout", "<<", "int", "[", "size", "]", "\"", "\u5728 nums \u4e2d\u83b7\u53d6\u968f\u673a\u5143\u7d20 ", "\"", "\"", "\u5728 nums \u4e2d\u67e5\u627e\u5143\u7d20 3 \uff0c\u5f97\u5230\u7d22\u5f15 = ", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 318, "ast_depth": 9, "n_identifiers": 16, "vocab_size": 55}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_array_and_linkedlist/linked_list.cpp#17-26", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_array_and_linkedlist/linked_list.cpp", "language": "Java"}, "method": {"name": "remove", "qualified_name": "codes.cpp.chapter_array_and_linkedlist.linked_list.cpp#remove", "start_line": 17, "end_line": 26, "signature": "remove(ListNode *n0)", "original_code": "void remove(ListNode *n0) {\n    if (n0->next == nullptr)\n        return;\n    // n0 -> P -> n1\n    ListNode *P = n0->next;\n    ListNode *n1 = P->next;\n    n0->next = n1;\n    // \u91ca\u653e\u5185\u5b58\n    delete P;\n}", "doc_comment": "/* \u5220\u9664\u94fe\u8868\u7684\u8282\u70b9 n0 \u4e4b\u540e\u7684\u9996\u4e2a\u8282\u70b9 */"}, "code_tokens": ["void", "remove", "(", ")", "{", "// n0 -> P -> n1", "// \u91ca\u653e\u5185\u5b58", "}", "ListNode", "n0", "if", ";", ";", ";", "delete", ";", "*", "(", ")", "return", ";", "ListNode", "*", "ListNode", "*", "n0", "->", "P", "n0", "->", "P", "=", "n1", "=", "next", "=", "n1", "next", "==", "nullptr", "n0", "->", "next", "P", "->", "next"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 70, "ast_depth": 8, "n_identifiers": 7, "vocab_size": 22}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_array_and_linkedlist/linked_list.cpp#39-48", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_array_and_linkedlist/linked_list.cpp", "language": "Java"}, "method": {"name": "find", "qualified_name": "codes.cpp.chapter_array_and_linkedlist.linked_list.cpp#find", "start_line": 39, "end_line": 48, "signature": "find(ListNode *head, int target)", "original_code": "int find(ListNode *head, int target) {\n    int index = 0;\n    while (head != nullptr) {\n        if (head->val == target)\n            return index;\n        head = head->next;\n        index++;\n    }\n    return -1;\n}", "doc_comment": "/* \u5728\u94fe\u8868\u4e2d\u67e5\u627e\u503c\u4e3a target \u7684\u9996\u4e2a\u8282\u70b9 */"}, "code_tokens": ["find", "int", "(", ",", ")", "{", "}", "ListNode", "head", "target", ";", "while", "return", ";", "*", "int", "int", "index", "=", "0", "(", ")", "{", "}", "-", "1", "head", "!=", "nullptr", "if", ";", ";", "(", ")", "return", "index", ";", "head", "=", "index", "++", "head", "->", "head", "->", "next", "val", "==", "target"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 77, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 27}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_array_and_linkedlist/linked_list.cpp#51-89", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_array_and_linkedlist/linked_list.cpp", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.cpp.chapter_array_and_linkedlist.linked_list.cpp#main", "start_line": 51, "end_line": 89, "signature": "main()", "original_code": "int main() {\n    /* \u521d\u59cb\u5316\u94fe\u8868 */\n    // \u521d\u59cb\u5316\u5404\u4e2a\u8282\u70b9\n    ListNode *n0 = new ListNode(1);\n    ListNode *n1 = new ListNode(3);\n    ListNode *n2 = new ListNode(2);\n    ListNode *n3 = new ListNode(5);\n    ListNode *n4 = new ListNode(4);\n    // \u6784\u5efa\u8282\u70b9\u4e4b\u95f4\u7684\u5f15\u7528\n    n0->next = n1;\n    n1->next = n2;\n    n2->next = n3;\n    n3->next = n4;\n    cout << \"\u521d\u59cb\u5316\u7684\u94fe\u8868\u4e3a\" << endl;\n    printLinkedList(n0);\n\n    /* \u63d2\u5165\u8282\u70b9 */\n    insert(n0, new ListNode(0));\n    cout << \"\u63d2\u5165\u8282\u70b9\u540e\u7684\u94fe\u8868\u4e3a\" << endl;\n    printLinkedList(n0);\n\n    /* \u5220\u9664\u8282\u70b9 */\n    remove(n0);\n    cout << \"\u5220\u9664\u8282\u70b9\u540e\u7684\u94fe\u8868\u4e3a\" << endl;\n    printLinkedList(n0);\n\n    /* \u8bbf\u95ee\u8282\u70b9 */\n    ListNode *node = access(n0, 3);\n    cout << \"\u94fe\u8868\u4e2d\u7d22\u5f15 3 \u5904\u7684\u8282\u70b9\u7684\u503c = \" << node->val << endl;\n\n    /* \u67e5\u627e\u8282\u70b9 */\n    int index = find(n0, 2);\n    cout << \"\u94fe\u8868\u4e2d\u503c\u4e3a 2 \u7684\u8282\u70b9\u7684\u7d22\u5f15 = \" << index << endl;\n\n    // \u91ca\u653e\u5185\u5b58\n    freeMemoryLinkedList(n0);\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "/* \u521d\u59cb\u5316\u94fe\u8868 */", "// \u521d\u59cb\u5316\u5404\u4e2a\u8282\u70b9", "// \u6784\u5efa\u8282\u70b9\u4e4b\u95f4\u7684\u5f15\u7528", "/* \u63d2\u5165\u8282\u70b9 */", "/* \u5220\u9664\u8282\u70b9 */", "/* \u8bbf\u95ee\u8282\u70b9 */", "/* \u67e5\u627e\u8282\u70b9 */", "// \u91ca\u653e\u5185\u5b58", "}", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "return", "0", ";", "ListNode", "*", "ListNode", "*", "ListNode", "*", "ListNode", "*", "ListNode", "*", "n0", "->", "n1", "->", "n2", "->", "n3", "->", "<<", "endl", "printLinkedList", "insert", "<<", "endl", "printLinkedList", "remove", "<<", "endl", "printLinkedList", "ListNode", "*", "<<", "int", "index", "=", "<<", "endl", "freeMemoryLinkedList", "n0", "=", "n1", "=", "n2", "=", "n3", "=", "n4", "=", "next", "=", "n1", "next", "=", "n2", "next", "=", "n3", "next", "=", "n4", "cout", "<<", "(", "n0", ")", "(", "n0", ",", ")", "cout", "<<", "(", "n0", ")", "(", "n0", ")", "cout", "<<", "(", "n0", ")", "node", "=", "cout", "<<", "node", "->", "find", "<<", "index", "(", "n0", ")", "new", "ListNode", "new", "ListNode", "new", "ListNode", "new", "ListNode", "new", "ListNode", "\"", "\u521d\u59cb\u5316\u7684\u94fe\u8868\u4e3a", "\"", "new", "ListNode", "\"", "\u63d2\u5165\u8282\u70b9\u540e\u7684\u94fe\u8868\u4e3a", "\"", "\"", "\u5220\u9664\u8282\u70b9\u540e\u7684\u94fe\u8868\u4e3a", "\"", "access", "\"", "\u94fe\u8868\u4e2d\u7d22\u5f15 3 \u5904\u7684\u8282\u70b9\u7684\u503c = ", "\"", "val", "<<", "endl", "(", "n0", ",", "2", ")", "cout", "<<", "(", "1", ")", "(", "3", ")", "(", "2", ")", "(", "5", ")", "(", "4", ")", "(", "0", ")", "(", "n0", ",", "3", ")", "\"", "\u94fe\u8868\u4e2d\u503c\u4e3a 2 \u7684\u8282\u70b9\u7684\u7d22\u5f15 = ", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 290, "ast_depth": 9, "n_identifiers": 19, "vocab_size": 52}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_array_and_linkedlist/list.cpp#10-72", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_array_and_linkedlist/list.cpp", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.cpp.chapter_array_and_linkedlist.list.cpp#main", "start_line": 10, "end_line": 72, "signature": "main()", "original_code": "int main() {\n    /* \u521d\u59cb\u5316\u5217\u8868 */\n    vector<int> nums = {1, 3, 2, 5, 4};\n    cout << \"\u5217\u8868 nums = \";\n    printVector(nums);\n\n    /* \u8bbf\u95ee\u5143\u7d20 */\n    int num = nums[1];\n    cout << \"\u8bbf\u95ee\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 num = \" << num << endl;\n\n    /* \u66f4\u65b0\u5143\u7d20 */\n    nums[1] = 0;\n    cout << \"\u5c06\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\u66f4\u65b0\u4e3a 0 \uff0c\u5f97\u5230 nums = \";\n    printVector(nums);\n\n    /* \u6e05\u7a7a\u5217\u8868 */\n    nums.clear();\n    cout << \"\u6e05\u7a7a\u5217\u8868\u540e nums = \";\n    printVector(nums);\n\n    /* \u5728\u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 */\n    nums.push_back(1);\n    nums.push_back(3);\n    nums.push_back(2);\n    nums.push_back(5);\n    nums.push_back(4);\n    cout << \"\u6dfb\u52a0\u5143\u7d20\u540e nums = \";\n    printVector(nums);\n\n    /* \u5728\u4e2d\u95f4\u63d2\u5165\u5143\u7d20 */\n    nums.insert(nums.begin() + 3, 6);\n    cout << \"\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = \";\n    printVector(nums);\n\n    /* \u5220\u9664\u5143\u7d20 */\n    nums.erase(nums.begin() + 3);\n    cout << \"\u5220\u9664\u7d22\u5f15 3 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = \";\n    printVector(nums);\n\n    /* \u901a\u8fc7\u7d22\u5f15\u904d\u5386\u5217\u8868 */\n    int count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        count += nums[i];\n    }\n    /* \u76f4\u63a5\u904d\u5386\u5217\u8868\u5143\u7d20 */\n    count = 0;\n    for (int x : nums) {\n        count += x;\n    }\n\n    /* \u62fc\u63a5\u4e24\u4e2a\u5217\u8868 */\n    vector<int> nums1 = {6, 8, 7, 10, 9};\n    nums.insert(nums.end(), nums1.begin(), nums1.end());\n    cout << \"\u5c06\u5217\u8868 nums1 \u62fc\u63a5\u5230 nums \u4e4b\u540e\uff0c\u5f97\u5230 nums = \";\n    printVector(nums);\n\n    /* \u6392\u5e8f\u5217\u8868 */\n    sort(nums.begin(), nums.end());\n    cout << \"\u6392\u5e8f\u5217\u8868\u540e nums = \";\n    printVector(nums);\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "/* \u521d\u59cb\u5316\u5217\u8868 */", "/* \u8bbf\u95ee\u5143\u7d20 */", "/* \u66f4\u65b0\u5143\u7d20 */", "/* \u6e05\u7a7a\u5217\u8868 */", "/* \u5728\u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 */", "/* \u5728\u4e2d\u95f4\u63d2\u5165\u5143\u7d20 */", "/* \u5220\u9664\u5143\u7d20 */", "/* \u901a\u8fc7\u7d22\u5f15\u904d\u5386\u5217\u8868 */", "/* \u76f4\u63a5\u904d\u5386\u5217\u8868\u5143\u7d20 */", "/* \u62fc\u63a5\u4e24\u4e2a\u5217\u8868 */", "/* \u6392\u5e8f\u5217\u8868 */", "}", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "for", "(", ";", ")", ";", "for", "(", "x", ":", "nums", ")", ";", ";", ";", ";", ";", ";", ";", "return", "0", ";", "vector", "nums", "=", "cout", "<<", "printVector", "int", "num", "=", "<<", "endl", "=", "0", "cout", "<<", "printVector", "nums", ".", "clear", "cout", "<<", "printVector", "nums", ".", "push_back", "nums", ".", "push_back", "nums", ".", "push_back", "nums", ".", "push_back", "nums", ".", "push_back", "cout", "<<", "printVector", "nums", ".", "insert", "cout", "<<", "printVector", "nums", ".", "erase", "cout", "<<", "printVector", "int", "count", "=", "0", ";", "i", "<", "i", "++", "{", "}", "count", "=", "0", "int", "{", "}", "vector", "nums1", "=", "nums", ".", "insert", "cout", "<<", "printVector", "sort", "cout", "<<", "printVector", "<", ">", "{", "1", ",", "3", ",", "2", ",", "5", ",", "4", "}", "\"", "\u5217\u8868 nums = ", "\"", "(", "nums", ")", "nums", "[", "1", "]", "<<", "num", "nums", "[", "1", "]", "\"", "\u5c06\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\u66f4\u65b0\u4e3a 0 \uff0c\u5f97\u5230 nums = ", "\"", "(", "nums", ")", "(", ")", "\"", "\u6e05\u7a7a\u5217\u8868\u540e nums = ", "\"", "(", "nums", ")", "(", "1", ")", "(", "3", ")", "(", "2", ")", "(", "5", ")", "(", "4", ")", "\"", "\u6dfb\u52a0\u5143\u7d20\u540e nums = ", "\"", "(", "nums", ")", "(", ",", "6", ")", "\"", "\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = ", "\"", "(", "nums", ")", "(", ")", "\"", "\u5220\u9664\u7d22\u5f15 3 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = ", "\"", "(", "nums", ")", "int", "i", "=", "0", "nums", ".", "size", ";", ";", "<", ">", "{", "6", ",", "8", ",", "7", ",", "10", ",", "9", "}", "(", ",", ",", ")", "\"", "\u5c06\u5217\u8868 nums1 \u62fc\u63a5\u5230 nums \u4e4b\u540e\uff0c\u5f97\u5230 nums = ", "\"", "(", "nums", ")", "(", ",", ")", "\"", "\u6392\u5e8f\u5217\u8868\u540e nums = ", "\"", "(", "nums", ")", "int", "cout", "<<", "+", "3", "+", "3", "(", ")", "count", "+=", "count", "+=", "x", "int", "nums", ".", "end", "nums1", ".", "begin", "nums1", ".", "end", "nums", ".", "begin", "nums", ".", "end", "\"", "\u8bbf\u95ee\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 num = ", "\"", "nums", ".", "begin", "nums", ".", "begin", "nums", "[", "i", "]", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 471, "ast_depth": 10, "n_identifiers": 18, "vocab_size": 71}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_array_and_linkedlist/my_list.cpp#29-31", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_array_and_linkedlist/my_list.cpp", "language": "Java"}, "method": {"name": "size", "qualified_name": "codes.cpp.chapter_array_and_linkedlist.my_list.cpp#size", "start_line": 29, "end_line": 31, "signature": "size()", "original_code": "int size() {\n        return arrSize;\n    }", "doc_comment": "/* \u83b7\u53d6\u5217\u8868\u957f\u5ea6\uff08\u5f53\u524d\u5143\u7d20\u6570\u91cf\uff09*/"}, "code_tokens": ["size", "int", "(", ")", "{", "}", "return", "arrSize", ";"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 15, "ast_depth": 5, "n_identifiers": 2, "vocab_size": 9}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_array_and_linkedlist/my_list.cpp#34-36", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_array_and_linkedlist/my_list.cpp", "language": "Java"}, "method": {"name": "capacity", "qualified_name": "codes.cpp.chapter_array_and_linkedlist.my_list.cpp#capacity", "start_line": 34, "end_line": 36, "signature": "capacity()", "original_code": "int capacity() {\n        return arrCapacity;\n    }", "doc_comment": "/* \u83b7\u53d6\u5217\u8868\u5bb9\u91cf */"}, "code_tokens": ["capacity", "int", "(", ")", "{", "}", "return", "arrCapacity", ";"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 15, "ast_depth": 5, "n_identifiers": 2, "vocab_size": 9}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_array_and_linkedlist/my_list.cpp#39-44", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_array_and_linkedlist/my_list.cpp", "language": "Java"}, "method": {"name": "get", "qualified_name": "codes.cpp.chapter_array_and_linkedlist.my_list.cpp#get", "start_line": 39, "end_line": 44, "signature": "get(int index)", "original_code": "int get(int index) {\n        // \u7d22\u5f15\u5982\u679c\u8d8a\u754c\u5219\u629b\u51fa\u5f02\u5e38\uff0c\u4e0b\u540c\n        if (index < 0 || index >= size())\n            throw out_of_range(\"\u7d22\u5f15\u8d8a\u754c\");\n        return arr[index];\n    }", "doc_comment": "/* \u8bbf\u95ee\u5143\u7d20 */"}, "code_tokens": ["get", "int", "(", ")", "{", "// \u7d22\u5f15\u5982\u679c\u8d8a\u754c\u5219\u629b\u51fa\u5f02\u5e38\uff0c\u4e0b\u540c", "}", "index", "if", "return", ";", "int", "(", ")", "throw", ";", "arr", "[", "index", "]", "||", "out_of_range", "index", "<", "0", "index", ">=", "(", ")", "size", "\"", "\u7d22\u5f15\u8d8a\u754c", "\"", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 55, "ast_depth": 10, "n_identifiers": 5, "vocab_size": 23}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_array_and_linkedlist/my_list.cpp#47-51", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_array_and_linkedlist/my_list.cpp", "language": "Java"}, "method": {"name": "set", "qualified_name": "codes.cpp.chapter_array_and_linkedlist.my_list.cpp#set", "start_line": 47, "end_line": 51, "signature": "set(int index, int num)", "original_code": "void set(int index, int num) {\n        if (index < 0 || index >= size())\n            throw out_of_range(\"\u7d22\u5f15\u8d8a\u754c\");\n        arr[index] = num;\n    }", "doc_comment": "/* \u66f4\u65b0\u5143\u7d20 */"}, "code_tokens": ["void", "set", "(", ",", ")", "{", "}", "index", "num", "if", ";", "int", "int", "(", ")", "throw", ";", "=", "num", "||", "out_of_range", "arr", "[", "index", "]", "index", "<", "0", "index", ">=", "(", ")", "size", "\"", "\u7d22\u5f15\u8d8a\u754c", "\"", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 60, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 25}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_array_and_linkedlist/my_list.cpp#54-61", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_array_and_linkedlist/my_list.cpp", "language": "Java"}, "method": {"name": "add", "qualified_name": "codes.cpp.chapter_array_and_linkedlist.my_list.cpp#add", "start_line": 54, "end_line": 61, "signature": "add(int num)", "original_code": "void add(int num) {\n        // \u5143\u7d20\u6570\u91cf\u8d85\u51fa\u5bb9\u91cf\u65f6\uff0c\u89e6\u53d1\u6269\u5bb9\u673a\u5236\n        if (size() == capacity())\n            extendCapacity();\n        arr[size()] = num;\n        // \u66f4\u65b0\u5143\u7d20\u6570\u91cf\n        arrSize++;\n    }", "doc_comment": "/* \u5728\u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 */"}, "code_tokens": ["void", "add", "(", ")", "{", "// \u5143\u7d20\u6570\u91cf\u8d85\u51fa\u5bb9\u91cf\u65f6\uff0c\u89e6\u53d1\u6269\u5bb9\u673a\u5236", "// \u66f4\u65b0\u5143\u7d20\u6570\u91cf", "}", "num", "if", ";", ";", "int", "(", ")", ";", "=", "num", "arrSize", "++", "==", "extendCapacity", "arr", "[", "]", "size", "capacity", "(", ")", "size", "(", ")", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 59, "ast_depth": 9, "n_identifiers": 7, "vocab_size": 22}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_array_and_linkedlist/my_list.cpp#64-77", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_array_and_linkedlist/my_list.cpp", "language": "Java"}, "method": {"name": "insert", "qualified_name": "codes.cpp.chapter_array_and_linkedlist.my_list.cpp#insert", "start_line": 64, "end_line": 77, "signature": "insert(int index, int num)", "original_code": "void insert(int index, int num) {\n        if (index < 0 || index >= size())\n            throw out_of_range(\"\u7d22\u5f15\u8d8a\u754c\");\n        // \u5143\u7d20\u6570\u91cf\u8d85\u51fa\u5bb9\u91cf\u65f6\uff0c\u89e6\u53d1\u6269\u5bb9\u673a\u5236\n        if (size() == capacity())\n            extendCapacity();\n        // \u5c06\u7d22\u5f15 index \u4ee5\u53ca\u4e4b\u540e\u7684\u5143\u7d20\u90fd\u5411\u540e\u79fb\u52a8\u4e00\u4f4d\n        for (int j = size() - 1; j >= index; j--) {\n            arr[j + 1] = arr[j];\n        }\n        arr[index] = num;\n        // \u66f4\u65b0\u5143\u7d20\u6570\u91cf\n        arrSize++;\n    }", "doc_comment": "/* \u5728\u4e2d\u95f4\u63d2\u5165\u5143\u7d20 */"}, "code_tokens": ["void", "insert", "(", ",", ")", "{", "// \u5143\u7d20\u6570\u91cf\u8d85\u51fa\u5bb9\u91cf\u65f6\uff0c\u89e6\u53d1\u6269\u5bb9\u673a\u5236", "// \u5c06\u7d22\u5f15 index \u4ee5\u53ca\u4e4b\u540e\u7684\u5143\u7d20\u90fd\u5411\u540e\u79fb\u52a8\u4e00\u4f4d", "// \u66f4\u65b0\u5143\u7d20\u6570\u91cf", "}", "index", "num", "if", "if", "for", "(", ";", ")", ";", ";", "int", "int", "(", ")", "throw", ";", "(", ")", ";", ";", "j", ">=", "index", "j", "--", "{", "}", "=", "num", "arrSize", "++", "||", "out_of_range", "==", "extendCapacity", "int", "j", "=", ";", "arr", "[", "index", "]", "index", "<", "0", "index", ">=", "(", ")", "size", "capacity", "(", ")", "-", "1", "=", "size", "\"", "\u7d22\u5f15\u8d8a\u754c", "\"", "(", ")", "(", ")", "size", "arr", "[", "]", "arr", "[", "j", "]", "(", ")", "(", ")", "j", "+", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 139, "ast_depth": 10, "n_identifiers": 10, "vocab_size": 39}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_array_and_linkedlist/my_list.cpp#80-92", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_array_and_linkedlist/my_list.cpp", "language": "Java"}, "method": {"name": "remove", "qualified_name": "codes.cpp.chapter_array_and_linkedlist.my_list.cpp#remove", "start_line": 80, "end_line": 92, "signature": "remove(int index)", "original_code": "int remove(int index) {\n        if (index < 0 || index >= size())\n            throw out_of_range(\"\u7d22\u5f15\u8d8a\u754c\");\n        int num = arr[index];\n        // \u7d22\u5f15 i \u4e4b\u540e\u7684\u5143\u7d20\u90fd\u5411\u524d\u79fb\u52a8\u4e00\u4f4d\n        for (int j = index; j < size() - 1; j++) {\n            arr[j] = arr[j + 1];\n        }\n        // \u66f4\u65b0\u5143\u7d20\u6570\u91cf\n        arrSize--;\n        // \u8fd4\u56de\u88ab\u5220\u9664\u5143\u7d20\n        return num;\n    }", "doc_comment": "/* \u5220\u9664\u5143\u7d20 */"}, "code_tokens": ["remove", "int", "(", ")", "{", "// \u7d22\u5f15 i \u4e4b\u540e\u7684\u5143\u7d20\u90fd\u5411\u524d\u79fb\u52a8\u4e00\u4f4d", "// \u66f4\u65b0\u5143\u7d20\u6570\u91cf", "// \u8fd4\u56de\u88ab\u5220\u9664\u5143\u7d20", "}", "index", "if", ";", "for", "(", ";", ")", ";", "return", "num", ";", "int", "(", ")", "throw", ";", "int", "num", "=", ";", "j", "<", "j", "++", "{", "}", "arrSize", "--", "||", "out_of_range", "arr", "[", "index", "]", "int", "j", "=", "index", "-", "1", ";", "index", "<", "0", "index", ">=", "(", ")", "size", "=", "size", "\"", "\u7d22\u5f15\u8d8a\u754c", "\"", "(", ")", "arr", "[", "j", "]", "arr", "[", "]", "(", ")", "j", "+", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 117, "ast_depth": 10, "n_identifiers": 8, "vocab_size": 35}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_array_and_linkedlist/my_list.cpp#95-107", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_array_and_linkedlist/my_list.cpp", "language": "Java"}, "method": {"name": "extendCapacity", "qualified_name": "codes.cpp.chapter_array_and_linkedlist.my_list.cpp#extendCapacity", "start_line": 95, "end_line": 107, "signature": "extendCapacity()", "original_code": "void extendCapacity() {\n        // \u65b0\u5efa\u4e00\u4e2a\u957f\u5ea6\u4e3a\u539f\u6570\u7ec4 extendRatio \u500d\u7684\u65b0\u6570\u7ec4\n        int newCapacity = capacity() * extendRatio;\n        int *tmp = arr;\n        arr = new int[newCapacity];\n        // \u5c06\u539f\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u5143\u7d20\u590d\u5236\u5230\u65b0\u6570\u7ec4\n        for (int i = 0; i < size(); i++) {\n            arr[i] = tmp[i];\n        }\n        // \u91ca\u653e\u5185\u5b58\n        delete[] tmp;\n        arrCapacity = newCapacity;\n    }", "doc_comment": "/* \u5217\u8868\u6269\u5bb9 */"}, "code_tokens": ["void", "extendCapacity", "(", ")", "{", "// \u65b0\u5efa\u4e00\u4e2a\u957f\u5ea6\u4e3a\u539f\u6570\u7ec4 extendRatio \u500d\u7684\u65b0\u6570\u7ec4", "// \u5c06\u539f\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u5143\u7d20\u590d\u5236\u5230\u65b0\u6570\u7ec4", "// \u91ca\u653e\u5185\u5b58", "}", ";", ";", ";", "for", "(", ";", ")", ";", ";", "int", "newCapacity", "=", "int", "*", "tmp", "=", "arr", "arr", "=", ";", "i", "<", "i", "++", "{", "}", "delete", "tmp", "arrCapacity", "=", "newCapacity", "*", "extendRatio", "new", "int", "i", "=", "0", "size", ";", "[", "]", "capacity", "int", "[", "newCapacity", "]", "(", ")", "=", "(", ")", "arr", "[", "i", "]", "tmp", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 107, "ast_depth": 9, "n_identifiers": 9, "vocab_size": 29}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_array_and_linkedlist/my_list.cpp#110-117", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_array_and_linkedlist/my_list.cpp", "language": "Java"}, "method": {"name": "toVector", "qualified_name": "codes.cpp.chapter_array_and_linkedlist.my_list.cpp#toVector", "start_line": 110, "end_line": 117, "signature": "toVector()", "original_code": "vector<int> toVector() {\n        // \u4ec5\u8f6c\u6362\u6709\u6548\u957f\u5ea6\u8303\u56f4\u5185\u7684\u5217\u8868\u5143\u7d20\n        vector<int> vec(size());\n        for (int i = 0; i < size(); i++) {\n            vec[i] = arr[i];\n        }\n        return vec;\n    }", "doc_comment": "/* \u5c06\u5217\u8868\u8f6c\u6362\u4e3a Vector \u7528\u4e8e\u6253\u5370 */"}, "code_tokens": ["toVector", "vector", "(", ")", "{", "// \u4ec5\u8f6c\u6362\u6709\u6548\u957f\u5ea6\u8303\u56f4\u5185\u7684\u5217\u8868\u5143\u7d20", "}", "<", ">", "", ";", "for", "(", ";", ")", "return", "vec", ";", "int", "vector", "vec", "(", ")", ";", "i", "<", "i", "++", "{", "}", "<", ">", "size", "int", "i", "=", "0", "size", ";", "int", "(", ")", "(", ")", "=", "vec", "[", "i", "]", "arr", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 83, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 23}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_array_and_linkedlist/my_list.cpp#121-171", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_array_and_linkedlist/my_list.cpp", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.cpp.chapter_array_and_linkedlist.my_list.cpp#main", "start_line": 121, "end_line": 171, "signature": "main()", "original_code": "int main() {\n    /* \u521d\u59cb\u5316\u5217\u8868 */\n    MyList *nums = new MyList();\n    /* \u5728\u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 */\n    nums->add(1);\n    nums->add(3);\n    nums->add(2);\n    nums->add(5);\n    nums->add(4);\n    cout << \"\u5217\u8868 nums = \";\n    vector<int> vec = nums->toVector();\n    printVector(vec);\n    cout << \"\u5bb9\u91cf = \" << nums->capacity() << \" \uff0c\u957f\u5ea6 = \" << nums->size() << endl;\n\n    /* \u5728\u4e2d\u95f4\u63d2\u5165\u5143\u7d20 */\n    nums->insert(3, 6);\n    cout << \"\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = \";\n    vec = nums->toVector();\n    printVector(vec);\n\n    /* \u5220\u9664\u5143\u7d20 */\n    nums->remove(3);\n    cout << \"\u5220\u9664\u7d22\u5f15 3 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = \";\n    vec = nums->toVector();\n    printVector(vec);\n\n    /* \u8bbf\u95ee\u5143\u7d20 */\n    int num = nums->get(1);\n    cout << \"\u8bbf\u95ee\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 num = \" << num << endl;\n\n    /* \u66f4\u65b0\u5143\u7d20 */\n    nums->set(1, 0);\n    cout << \"\u5c06\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\u66f4\u65b0\u4e3a 0 \uff0c\u5f97\u5230 nums = \";\n    vec = nums->toVector();\n    printVector(vec);\n\n    /* \u6d4b\u8bd5\u6269\u5bb9\u673a\u5236 */\n    for (int i = 0; i < 10; i++) {\n        // \u5728 i = 5 \u65f6\uff0c\u5217\u8868\u957f\u5ea6\u5c06\u8d85\u51fa\u5217\u8868\u5bb9\u91cf\uff0c\u6b64\u65f6\u89e6\u53d1\u6269\u5bb9\u673a\u5236\n        nums->add(i);\n    }\n    cout << \"\u6269\u5bb9\u540e\u7684\u5217\u8868 nums = \";\n    vec = nums->toVector();\n    printVector(vec);\n    cout << \"\u5bb9\u91cf = \" << nums->capacity() << \" \uff0c\u957f\u5ea6 = \" << nums->size() << endl;\n\n    // \u91ca\u653e\u5185\u5b58\n    delete nums;\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "/* \u521d\u59cb\u5316\u5217\u8868 */", "/* \u5728\u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 */", "/* \u5728\u4e2d\u95f4\u63d2\u5165\u5143\u7d20 */", "/* \u5220\u9664\u5143\u7d20 */", "/* \u8bbf\u95ee\u5143\u7d20 */", "/* \u66f4\u65b0\u5143\u7d20 */", "/* \u6d4b\u8bd5\u6269\u5bb9\u673a\u5236 */", "// \u91ca\u653e\u5185\u5b58", "}", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "for", "(", ";", ")", ";", ";", ";", ";", "delete", ";", "return", "0", ";", "MyList", "*", "nums", "->", "nums", "->", "nums", "->", "nums", "->", "nums", "->", "cout", "<<", "vector", "vec", "=", "printVector", "<<", "nums", "->", "cout", "<<", "vec", "=", "printVector", "nums", "->", "cout", "<<", "vec", "=", "printVector", "int", "num", "=", "<<", "endl", "nums", "->", "cout", "<<", "vec", "=", "printVector", ";", "i", "<", "10", "i", "++", "{", "// \u5728 i = 5 \u65f6\uff0c\u5217\u8868\u957f\u5ea6\u5c06\u8d85\u51fa\u5217\u8868\u5bb9\u91cf\uff0c\u6b64\u65f6\u89e6\u53d1\u6269\u5bb9\u673a\u5236", "}", "cout", "<<", "vec", "=", "printVector", "<<", "nums", "nums", "=", "add", "add", "add", "add", "add", "\"", "\u5217\u8868 nums = ", "\"", "<", ">", "nums", "->", "(", "vec", ")", "cout", "<<", "nums", "->", "insert", "\"", "\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = ", "\"", "nums", "->", "(", "vec", ")", "remove", "\"", "\u5220\u9664\u7d22\u5f15 3 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = ", "\"", "nums", "->", "(", "vec", ")", "nums", "->", "<<", "num", "set", "\"", "\u5c06\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\u66f4\u65b0\u4e3a 0 \uff0c\u5f97\u5230 nums = ", "\"", "nums", "->", "(", "vec", ")", "int", "i", "=", "0", ";", "\"", "\u6269\u5bb9\u540e\u7684\u5217\u8868 nums = ", "\"", "nums", "->", "(", "vec", ")", "cout", "<<", "nums", "->", "new", "MyList", "(", "1", ")", "(", "3", ")", "(", "2", ")", "(", "5", ")", "(", "4", ")", "int", "toVector", "\"", "\u5bb9\u91cf = ", "\"", "<<", "(", "3", ",", "6", ")", "toVector", "(", "3", ")", "toVector", "get", "cout", "<<", "(", "1", ",", "0", ")", "toVector", "nums", "->", "toVector", "\"", "\u5bb9\u91cf = ", "\"", "<<", "(", ")", "(", ")", "<<", "nums", "->", "(", ")", "(", ")", "(", "1", ")", "\"", "\u8bbf\u95ee\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 num = ", "\"", "(", ")", "add", "(", ")", "<<", "nums", "->", "capacity", "\"", " \uff0c\u957f\u5ea6 = ", "\"", "<<", "endl", "(", "i", ")", "capacity", "\"", " \uff0c\u957f\u5ea6 = ", "\"", "<<", "endl", "(", ")", "size", "(", ")", "size", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 433, "ast_depth": 12, "n_identifiers": 17, "vocab_size": 62}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_backtracking/n_queens.cpp#10-34", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_backtracking/n_queens.cpp", "language": "Java"}, "method": {"name": "backtrack", "qualified_name": "codes.cpp.chapter_backtracking.n_queens.cpp#backtrack", "start_line": 10, "end_line": 34, "signature": "backtrack(int row, int n, vector<vector<string>> &state, vector<vector<vector<string>>> &res, vector<bool> &cols,\n               vector<bool> &diags1, vector<bool> &diags2)", "original_code": "void backtrack(int row, int n, vector<vector<string>> &state, vector<vector<vector<string>>> &res, vector<bool> &cols,\n               vector<bool> &diags1, vector<bool> &diags2) {\n    // \u5f53\u653e\u7f6e\u5b8c\u6240\u6709\u884c\u65f6\uff0c\u8bb0\u5f55\u89e3\n    if (row == n) {\n        res.push_back(state);\n        return;\n    }\n    // \u904d\u5386\u6240\u6709\u5217\n    for (int col = 0; col < n; col++) {\n        // \u8ba1\u7b97\u8be5\u683c\u5b50\u5bf9\u5e94\u7684\u4e3b\u5bf9\u89d2\u7ebf\u548c\u526f\u5bf9\u89d2\u7ebf\n        int diag1 = row - col + n - 1;\n        int diag2 = row + col;\n        // \u526a\u679d\uff1a\u4e0d\u5141\u8bb8\u8be5\u683c\u5b50\u6240\u5728\u5217\u3001\u4e3b\u5bf9\u89d2\u7ebf\u3001\u526f\u5bf9\u89d2\u7ebf\u4e0a\u5b58\u5728\u7687\u540e\n        if (!cols[col] && !diags1[diag1] && !diags2[diag2]) {\n            // \u5c1d\u8bd5\uff1a\u5c06\u7687\u540e\u653e\u7f6e\u5728\u8be5\u683c\u5b50\n            state[row][col] = \"Q\";\n            cols[col] = diags1[diag1] = diags2[diag2] = true;\n            // \u653e\u7f6e\u4e0b\u4e00\u884c\n            backtrack(row + 1, n, state, res, cols, diags1, diags2);\n            // \u56de\u9000\uff1a\u5c06\u8be5\u683c\u5b50\u6062\u590d\u4e3a\u7a7a\u4f4d\n            state[row][col] = \"#\";\n            cols[col] = diags1[diag1] = diags2[diag2] = false;\n        }\n    }\n}", "doc_comment": "/* \u56de\u6eaf\u7b97\u6cd5\uff1aN \u7687\u540e */"}, "code_tokens": ["void", "backtrack", "(", ",", ",", ",", ",", ",", ",", ")", "{", "// \u5f53\u653e\u7f6e\u5b8c\u6240\u6709\u884c\u65f6\uff0c\u8bb0\u5f55\u89e3", "// \u904d\u5386\u6240\u6709\u5217", "}", "row", "n", "state", "res", "cols", "diags1", "diags2", "if", "for", "(", ";", ")", "int", "int", "vector", "&", "vector", "&", "vector", "&", "vector", "&", "vector", "&", "(", ")", "{", "}", ";", "col", "<", "n", "col", "++", "{", "// \u8ba1\u7b97\u8be5\u683c\u5b50\u5bf9\u5e94\u7684\u4e3b\u5bf9\u89d2\u7ebf\u548c\u526f\u5bf9\u89d2\u7ebf", "// \u526a\u679d\uff1a\u4e0d\u5141\u8bb8\u8be5\u683c\u5b50\u6240\u5728\u5217\u3001\u4e3b\u5bf9\u89d2\u7ebf\u3001\u526f\u5bf9\u89d2\u7ebf\u4e0a\u5b58\u5728\u7687\u540e", "}", "<", ">", "<", ">", "<", "bool", ">", "<", "bool", ">", "<", "bool", ">", "row", "==", "n", ";", "return", ";", "int", "col", "=", "0", ";", ";", "if", "vector", "vector", "res", ".", "push_back", "int", "diag1", "=", "int", "diag2", "=", "(", ")", "{", "// \u5c1d\u8bd5\uff1a\u5c06\u7687\u540e\u653e\u7f6e\u5728\u8be5\u683c\u5b50", "// \u653e\u7f6e\u4e0b\u4e00\u884c", "// \u56de\u9000\uff1a\u5c06\u8be5\u683c\u5b50\u6062\u590d\u4e3a\u7a7a\u4f4d", "}", "<", "string", ">", "<", ">", "(", "state", ")", "-", "1", "row", "+", "col", "&&", ";", ";", ";", ";", ";", "vector", "+", "n", "&&", "!", "=", "=", "backtrack", "=", "=", "<", "string", ">", "row", "-", "col", "!", "!", "diags2", "[", "diag2", "]", "[", "col", "]", "\"", "Q", "\"", "cols", "[", "col", "]", "=", "(", ",", "n", ",", "state", ",", "res", ",", "cols", ",", "diags1", ",", "diags2", ")", "[", "col", "]", "\"", "#", "\"", "cols", "[", "col", "]", "=", "cols", "[", "col", "]", "diags1", "[", "diag1", "]", "state", "[", "row", "]", "diags1", "[", "diag1", "]", "=", "true", "row", "+", "1", "state", "[", "row", "]", "diags1", "[", "diag1", "]", "=", "false", "diags2", "[", "diag2", "]", "diags2", "[", "diag2", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 310, "ast_depth": 13, "n_identifiers": 12, "vocab_size": 53}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_backtracking/n_queens.cpp#37-48", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_backtracking/n_queens.cpp", "language": "Java"}, "method": {"name": "nQueens", "qualified_name": "codes.cpp.chapter_backtracking.n_queens.cpp#nQueens", "start_line": 37, "end_line": 48, "signature": "nQueens(int n)", "original_code": "vector<vector<vector<string>>> nQueens(int n) {\n    // \u521d\u59cb\u5316 n*n \u5927\u5c0f\u7684\u68cb\u76d8\uff0c\u5176\u4e2d 'Q' \u4ee3\u8868\u7687\u540e\uff0c'#' \u4ee3\u8868\u7a7a\u4f4d\n    vector<vector<string>> state(n, vector<string>(n, \"#\"));\n    vector<bool> cols(n, false);           // \u8bb0\u5f55\u5217\u662f\u5426\u6709\u7687\u540e\n    vector<bool> diags1(2 * n - 1, false); // \u8bb0\u5f55\u4e3b\u5bf9\u89d2\u7ebf\u4e0a\u662f\u5426\u6709\u7687\u540e\n    vector<bool> diags2(2 * n - 1, false); // \u8bb0\u5f55\u526f\u5bf9\u89d2\u7ebf\u4e0a\u662f\u5426\u6709\u7687\u540e\n    vector<vector<vector<string>>> res;\n\n    backtrack(0, n, state, res, cols, diags1, diags2);\n\n    return res;\n}", "doc_comment": "/* \u6c42\u89e3 N \u7687\u540e */"}, "code_tokens": ["nQueens", "vector", "(", ")", "{", "// \u521d\u59cb\u5316 n*n \u5927\u5c0f\u7684\u68cb\u76d8\uff0c\u5176\u4e2d 'Q' \u4ee3\u8868\u7687\u540e\uff0c'#' \u4ee3\u8868\u7a7a\u4f4d", "// \u8bb0\u5f55\u5217\u662f\u5426\u6709\u7687\u540e", "// \u8bb0\u5f55\u4e3b\u5bf9\u89d2\u7ebf\u4e0a\u662f\u5426\u6709\u7687\u540e", "// \u8bb0\u5f55\u526f\u5bf9\u89d2\u7ebf\u4e0a\u662f\u5426\u6709\u7687\u540e", "}", "<", ">", "n", ";", ";", ";", ";", ";", ";", "return", "res", ";", "vector", "int", "<", ">", ">", ">", "vector", "res", "backtrack", "<", ">", "vector", "<", "vector", "string", ">>", "vector", "<", "bool", "cols", "vector", "<", "bool", "diags1", "vector", "<", "bool", "diags2", "<", ">", "(", "0", ",", "n", ",", "state", ",", "res", ",", "cols", ",", "diags1", ",", "diags2", ")", "vector", "state", "(", "n", ",", "false", ")", "(", ",", "false", ")", "(", ",", "false", ")", "vector", "<", "string", ">", "(", "n", ",", ")", "-", "1", "-", "1", "<", ">", ">", "2", "*", "n", "2", "*", "n", "vector", "vector", "<", "string", "(", ")", "<", "string", ">", "n", ",", "\"", "#", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 171, "ast_depth": 12, "n_identifiers": 11, "vocab_size": 34}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_backtracking/n_queens.cpp#51-65", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_backtracking/n_queens.cpp", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.cpp.chapter_backtracking.n_queens.cpp#main", "start_line": 51, "end_line": 65, "signature": "main()", "original_code": "int main() {\n    int n = 4;\n    vector<vector<vector<string>>> res = nQueens(n);\n\n    cout << \"\u8f93\u5165\u68cb\u76d8\u957f\u5bbd\u4e3a \" << n << endl;\n    cout << \"\u7687\u540e\u653e\u7f6e\u65b9\u6848\u5171\u6709 \" << res.size() << \" \u79cd\" << endl;\n    for (const vector<vector<string>> &state : res) {\n        cout << \"--------------------\" << endl;\n        for (const vector<string> &row : state) {\n            printVector(row);\n        }\n    }\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "}", ";", ";", ";", ";", "for", "(", "const", "vector", ":", "res", ")", "return", "0", ";", "int", "n", "=", "4", "vector", "res", "=", "<<", "endl", "<<", "endl", "<", "vector", "<", "string", ">>", "&", "state", "{", "}", "<", ">", "nQueens", "<<", "n", "<<", ";", "for", "(", "const", "vector", ":", "state", ")", "vector", "(", "n", ")", "cout", "<<", "<<", "\"", " \u79cd", "\"", "<<", "endl", "<", "string", ">", "&", "row", "{", "}", "<", ">", "\"", "\u8f93\u5165\u68cb\u76d8\u957f\u5bbd\u4e3a ", "\"", "cout", "<<", "res", ".", "size", "cout", "<<", ";", "vector", "\"", "\u7687\u540e\u653e\u7f6e\u65b9\u6848\u5171\u6709 ", "\"", "(", ")", "\"", "--------------------", "\"", "printVector", "<", "string", ">", "(", "row", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 148, "ast_depth": 11, "n_identifiers": 12, "vocab_size": 36}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_computational_complexity/iteration.cpp#10-17", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_computational_complexity/iteration.cpp", "language": "Java"}, "method": {"name": "forLoop", "qualified_name": "codes.cpp.chapter_computational_complexity.iteration.cpp#forLoop", "start_line": 10, "end_line": 17, "signature": "forLoop(int n)", "original_code": "int forLoop(int n) {\n    int res = 0;\n    // \u5faa\u73af\u6c42\u548c 1, 2, ..., n-1, n\n    for (int i = 1; i <= n; ++i) {\n        res += i;\n    }\n    return res;\n}", "doc_comment": "/* for \u5faa\u73af */"}, "code_tokens": ["forLoop", "int", "(", ")", "{", "// \u5faa\u73af\u6c42\u548c 1, 2, ..., n-1, n", "}", "n", ";", "for", "(", ";", ")", "return", "res", ";", "int", "int", "res", "=", "0", ";", "i", "<=", "n", "++", "i", "{", "}", "int", "i", "=", "1", ";", "res", "+=", "i"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 57, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 19}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_computational_complexity/iteration.cpp#20-29", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_computational_complexity/iteration.cpp", "language": "Java"}, "method": {"name": "whileLoop", "qualified_name": "codes.cpp.chapter_computational_complexity.iteration.cpp#whileLoop", "start_line": 20, "end_line": 29, "signature": "whileLoop(int n)", "original_code": "int whileLoop(int n) {\n    int res = 0;\n    int i = 1; // \u521d\u59cb\u5316\u6761\u4ef6\u53d8\u91cf\n    // \u5faa\u73af\u6c42\u548c 1, 2, ..., n-1, n\n    while (i <= n) {\n        res += i;\n        i++; // \u66f4\u65b0\u6761\u4ef6\u53d8\u91cf\n    }\n    return res;\n}", "doc_comment": "/* while \u5faa\u73af */"}, "code_tokens": ["whileLoop", "int", "(", ")", "{", "// \u521d\u59cb\u5316\u6761\u4ef6\u53d8\u91cf", "// \u5faa\u73af\u6c42\u548c 1, 2, ..., n-1, n", "}", "n", ";", ";", "while", "return", "res", ";", "int", "int", "res", "=", "0", "int", "i", "=", "1", "(", ")", "{", "// \u66f4\u65b0\u6761\u4ef6\u53d8\u91cf", "}", "i", "<=", "n", ";", ";", "res", "+=", "i", "i", "++"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 61, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 21}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_computational_complexity/iteration.cpp#32-43", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_computational_complexity/iteration.cpp", "language": "Java"}, "method": {"name": "whileLoopII", "qualified_name": "codes.cpp.chapter_computational_complexity.iteration.cpp#whileLoopII", "start_line": 32, "end_line": 43, "signature": "whileLoopII(int n)", "original_code": "int whileLoopII(int n) {\n    int res = 0;\n    int i = 1; // \u521d\u59cb\u5316\u6761\u4ef6\u53d8\u91cf\n    // \u5faa\u73af\u6c42\u548c 1, 4, 10, ...\n    while (i <= n) {\n        res += i;\n        // \u66f4\u65b0\u6761\u4ef6\u53d8\u91cf\n        i++;\n        i *= 2;\n    }\n    return res;\n}", "doc_comment": "/* while \u5faa\u73af\uff08\u4e24\u6b21\u66f4\u65b0\uff09 */"}, "code_tokens": ["whileLoopII", "int", "(", ")", "{", "// \u521d\u59cb\u5316\u6761\u4ef6\u53d8\u91cf", "// \u5faa\u73af\u6c42\u548c 1, 4, 10, ...", "}", "n", ";", ";", "while", "return", "res", ";", "int", "int", "res", "=", "0", "int", "i", "=", "1", "(", ")", "{", "// \u66f4\u65b0\u6761\u4ef6\u53d8\u91cf", "}", "i", "<=", "n", ";", ";", ";", "res", "+=", "i", "i", "++", "i", "*=", "2"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 67, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 23}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_computational_complexity/iteration.cpp#46-56", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_computational_complexity/iteration.cpp", "language": "Java"}, "method": {"name": "nestedForLoop", "qualified_name": "codes.cpp.chapter_computational_complexity.iteration.cpp#nestedForLoop", "start_line": 46, "end_line": 56, "signature": "nestedForLoop(int n)", "original_code": "string nestedForLoop(int n) {\n    ostringstream res;\n    // \u5faa\u73af i = 1, 2, ..., n-1, n\n    for (int i = 1; i <= n; ++i) {\n        // \u5faa\u73af j = 1, 2, ..., n-1, n\n        for (int j = 1; j <= n; ++j) {\n            res << \"(\" << i << \", \" << j << \"), \";\n        }\n    }\n    return res.str();\n}", "doc_comment": "/* \u53cc\u5c42 for \u5faa\u73af */"}, "code_tokens": ["string", "nestedForLoop", "(", ")", "{", "// \u5faa\u73af i = 1, 2, ..., n-1, n", "}", "n", "ostringstream", ";", "for", "(", ";", ")", "return", ";", "int", "res", ";", "i", "<=", "n", "++", "i", "{", "// \u5faa\u73af j = 1, 2, ..., n-1, n", "}", "res", ".", "str", "int", "i", "=", "1", "for", "(", ";", ")", "(", ")", ";", "j", "<=", "n", "++", "j", "{", "}", "int", "j", "=", "1", ";", "<<", "<<", "j", "\"", "), ", "\"", "<<", "<<", "i", "\"", ", ", "\"", "res", "<<", "\"", "(", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 104, "ast_depth": 15, "n_identifiers": 6, "vocab_size": 27}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_computational_complexity/iteration.cpp#59-76", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_computational_complexity/iteration.cpp", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.cpp.chapter_computational_complexity.iteration.cpp#main", "start_line": 59, "end_line": 76, "signature": "main()", "original_code": "int main() {\n    int n = 5;\n    int res;\n\n    res = forLoop(n);\n    cout << \"\\nfor \u5faa\u73af\u7684\u6c42\u548c\u7ed3\u679c res = \" << res << endl;\n\n    res = whileLoop(n);\n    cout << \"\\nwhile \u5faa\u73af\u7684\u6c42\u548c\u7ed3\u679c res = \" << res << endl;\n\n    res = whileLoopII(n);\n    cout << \"\\nwhile \u5faa\u73af\uff08\u4e24\u6b21\u66f4\u65b0\uff09\u6c42\u548c\u7ed3\u679c res = \" << res << endl;\n\n    string resStr = nestedForLoop(n);\n    cout << \"\\n\u53cc\u5c42 for \u5faa\u73af\u7684\u904d\u5386\u7ed3\u679c \" << resStr << endl;\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "}", ";", ";", ";", ";", ";", ";", ";", ";", "string", ";", ";", "return", "0", ";", "int", "n", "=", "5", "int", "res", "res", "=", "<<", "endl", "res", "=", "<<", "endl", "res", "=", "<<", "endl", "resStr", "=", "<<", "endl", "forLoop", "<<", "res", "whileLoop", "<<", "res", "whileLoopII", "<<", "res", "nestedForLoop", "<<", "resStr", "(", "n", ")", "cout", "<<", "(", "n", ")", "cout", "<<", "(", "n", ")", "cout", "<<", "(", "n", ")", "cout", "<<", "\"", "\\n", "for \u5faa\u73af\u7684\u6c42\u548c\u7ed3\u679c res = ", "\"", "\"", "\\n", "while \u5faa\u73af\u7684\u6c42\u548c\u7ed3\u679c res = ", "\"", "\"", "\\n", "while \u5faa\u73af\uff08\u4e24\u6b21\u66f4\u65b0\uff09\u6c42\u548c\u7ed3\u679c res = ", "\"", "\"", "\\n", "\u53cc\u5c42 for \u5faa\u73af\u7684\u904d\u5386\u7ed3\u679c ", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 138, "ast_depth": 9, "n_identifiers": 10, "vocab_size": 28}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_divide_and_conquer/hanota.cpp#10-16", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_divide_and_conquer/hanota.cpp", "language": "Java"}, "method": {"name": "move", "qualified_name": "codes.cpp.chapter_divide_and_conquer.hanota.cpp#move", "start_line": 10, "end_line": 16, "signature": "move(vector<int> &src, vector<int> &tar)", "original_code": "void move(vector<int> &src, vector<int> &tar) {\n    // \u4ece src \u9876\u90e8\u62ff\u51fa\u4e00\u4e2a\u5706\u76d8\n    int pan = src.back();\n    src.pop_back();\n    // \u5c06\u5706\u76d8\u653e\u5165 tar \u9876\u90e8\n    tar.push_back(pan);\n}", "doc_comment": "/* \u79fb\u52a8\u4e00\u4e2a\u5706\u76d8 */"}, "code_tokens": ["void", "move", "(", ",", ")", "{", "// \u4ece src \u9876\u90e8\u62ff\u51fa\u4e00\u4e2a\u5706\u76d8", "// \u5c06\u5706\u76d8\u653e\u5165 tar \u9876\u90e8", "}", "src", "tar", ";", ";", ";", "vector", "&", "vector", "&", "int", "pan", "=", "src", ".", "pop_back", "tar", ".", "push_back", "<", ">", "<", ">", "src", ".", "back", "(", ")", "(", "pan", ")", "int", "int", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 68, "ast_depth": 8, "n_identifiers": 7, "vocab_size": 23}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_divide_and_conquer/hanota.cpp#19-31", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_divide_and_conquer/hanota.cpp", "language": "Java"}, "method": {"name": "dfs", "qualified_name": "codes.cpp.chapter_divide_and_conquer.hanota.cpp#dfs", "start_line": 19, "end_line": 31, "signature": "dfs(int i, vector<int> &src, vector<int> &buf, vector<int> &tar)", "original_code": "void dfs(int i, vector<int> &src, vector<int> &buf, vector<int> &tar) {\n    // \u82e5 src \u53ea\u5269\u4e0b\u4e00\u4e2a\u5706\u76d8\uff0c\u5219\u76f4\u63a5\u5c06\u5176\u79fb\u5230 tar\n    if (i == 1) {\n        move(src, tar);\n        return;\n    }\n    // \u5b50\u95ee\u9898 f(i-1) \uff1a\u5c06 src \u9876\u90e8 i-1 \u4e2a\u5706\u76d8\u501f\u52a9 tar \u79fb\u5230 buf\n    dfs(i - 1, src, tar, buf);\n    // \u5b50\u95ee\u9898 f(1) \uff1a\u5c06 src \u5269\u4f59\u4e00\u4e2a\u5706\u76d8\u79fb\u5230 tar\n    move(src, tar);\n    // \u5b50\u95ee\u9898 f(i-1) \uff1a\u5c06 buf \u9876\u90e8 i-1 \u4e2a\u5706\u76d8\u501f\u52a9 src \u79fb\u5230 tar\n    dfs(i - 1, buf, src, tar);\n}", "doc_comment": "/* \u6c42\u89e3\u6c49\u8bfa\u5854\u95ee\u9898 f(i) */"}, "code_tokens": ["void", "dfs", "(", ",", ",", ",", ")", "{", "// \u82e5 src \u53ea\u5269\u4e0b\u4e00\u4e2a\u5706\u76d8\uff0c\u5219\u76f4\u63a5\u5c06\u5176\u79fb\u5230 tar", "// \u5b50\u95ee\u9898 f(i-1) \uff1a\u5c06 src \u9876\u90e8 i-1 \u4e2a\u5706\u76d8\u501f\u52a9 tar \u79fb\u5230 buf", "// \u5b50\u95ee\u9898 f(1) \uff1a\u5c06 src \u5269\u4f59\u4e00\u4e2a\u5706\u76d8\u79fb\u5230 tar", "// \u5b50\u95ee\u9898 f(i-1) \uff1a\u5c06 buf \u9876\u90e8 i-1 \u4e2a\u5706\u76d8\u501f\u52a9 src \u79fb\u5230 tar", "}", "i", "src", "buf", "tar", "if", ";", ";", ";", "int", "vector", "&", "vector", "&", "vector", "&", "(", ")", "{", "}", "dfs", "move", "dfs", "<", ">", "<", ">", "<", ">", "i", "==", "1", ";", "return", ";", "(", ",", "src", ",", "tar", ",", "buf", ")", "(", "src", ",", "tar", ")", "(", ",", "buf", ",", "src", ",", "tar", ")", "int", "int", "int", "move", "i", "-", "1", "i", "-", "1", "(", "src", ",", "tar", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 123, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 27}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_divide_and_conquer/hanota.cpp#34-38", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_divide_and_conquer/hanota.cpp", "language": "Java"}, "method": {"name": "solveHanota", "qualified_name": "codes.cpp.chapter_divide_and_conquer.hanota.cpp#solveHanota", "start_line": 34, "end_line": 38, "signature": "solveHanota(vector<int> &A, vector<int> &B, vector<int> &C)", "original_code": "void solveHanota(vector<int> &A, vector<int> &B, vector<int> &C) {\n    int n = A.size();\n    // \u5c06 A \u9876\u90e8 n \u4e2a\u5706\u76d8\u501f\u52a9 B \u79fb\u5230 C\n    dfs(n, A, B, C);\n}", "doc_comment": "/* \u6c42\u89e3\u6c49\u8bfa\u5854\u95ee\u9898 */"}, "code_tokens": ["void", "solveHanota", "(", ",", ",", ")", "{", "// \u5c06 A \u9876\u90e8 n \u4e2a\u5706\u76d8\u501f\u52a9 B \u79fb\u5230 C", "}", "A", "B", "C", ";", ";", "vector", "&", "vector", "&", "vector", "&", "int", "n", "=", "dfs", "<", ">", "<", ">", "<", ">", "A", ".", "size", "(", "n", ",", "A", ",", "B", ",", "C", ")", "int", "int", "int", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 74, "ast_depth": 8, "n_identifiers": 7, "vocab_size": 22}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_divide_and_conquer/hanota.cpp#41-66", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_divide_and_conquer/hanota.cpp", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.cpp.chapter_divide_and_conquer.hanota.cpp#main", "start_line": 41, "end_line": 66, "signature": "main()", "original_code": "int main() {\n    // \u5217\u8868\u5c3e\u90e8\u662f\u67f1\u5b50\u9876\u90e8\n    vector<int> A = {5, 4, 3, 2, 1};\n    vector<int> B = {};\n    vector<int> C = {};\n\n    cout << \"\u521d\u59cb\u72b6\u6001\u4e0b\uff1a\\n\";\n    cout << \"A =\";\n    printVector(A);\n    cout << \"B =\";\n    printVector(B);\n    cout << \"C =\";\n    printVector(C);\n\n    solveHanota(A, B, C);\n\n    cout << \"\u5706\u76d8\u79fb\u52a8\u5b8c\u6210\u540e\uff1a\\n\";\n    cout << \"A =\";\n    printVector(A);\n    cout << \"B =\";\n    printVector(B);\n    cout << \"C =\";\n    printVector(C);\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "// \u5217\u8868\u5c3e\u90e8\u662f\u67f1\u5b50\u9876\u90e8", "}", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "return", "0", ";", "vector", "A", "=", "vector", "B", "=", "vector", "C", "=", "cout", "<<", "cout", "<<", "printVector", "cout", "<<", "printVector", "cout", "<<", "printVector", "solveHanota", "cout", "<<", "cout", "<<", "printVector", "cout", "<<", "printVector", "cout", "<<", "printVector", "<", ">", "{", "5", ",", "4", ",", "3", ",", "2", ",", "1", "}", "<", ">", "{", "}", "<", ">", "{", "}", "\"", "\u521d\u59cb\u72b6\u6001\u4e0b\uff1a", "\\n", "\"", "\"", "A =", "\"", "(", "A", ")", "\"", "B =", "\"", "(", "B", ")", "\"", "C =", "\"", "(", "C", ")", "(", "A", ",", "B", ",", "C", ")", "\"", "\u5706\u76d8\u79fb\u52a8\u5b8c\u6210\u540e\uff1a", "\\n", "\"", "\"", "A =", "\"", "(", "A", ")", "\"", "B =", "\"", "(", "B", ")", "\"", "C =", "\"", "(", "C", ")", "int", "int", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 204, "ast_depth": 8, "n_identifiers": 7, "vocab_size": 34}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_dynamic_programming/climbing_stairs_backtrack.cpp#11-24", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_dynamic_programming/climbing_stairs_backtrack.cpp", "language": "Java"}, "method": {"name": "backtrack", "qualified_name": "codes.cpp.chapter_dynamic_programming.climbing_stairs_backtrack.cpp#backtrack", "start_line": 11, "end_line": 24, "signature": "backtrack(vector<int> &choices, int state, int n, vector<int> &res)", "original_code": "void backtrack(vector<int> &choices, int state, int n, vector<int> &res) {\n    // \u5f53\u722c\u5230\u7b2c n \u9636\u65f6\uff0c\u65b9\u6848\u6570\u91cf\u52a0 1\n    if (state == n)\n        res[0]++;\n    // \u904d\u5386\u6240\u6709\u9009\u62e9\n    for (auto &choice : choices) {\n        // \u526a\u679d\uff1a\u4e0d\u5141\u8bb8\u8d8a\u8fc7\u7b2c n \u9636\n        if (state + choice > n)\n            continue;\n        // \u5c1d\u8bd5\uff1a\u505a\u51fa\u9009\u62e9\uff0c\u66f4\u65b0\u72b6\u6001\n        backtrack(choices, state + choice, n, res);\n        // \u56de\u9000\n    }\n}", "doc_comment": "/* \u56de\u6eaf */"}, "code_tokens": ["void", "backtrack", "(", ",", ",", ",", ")", "{", "// \u5f53\u722c\u5230\u7b2c n \u9636\u65f6\uff0c\u65b9\u6848\u6570\u91cf\u52a0 1", "// \u904d\u5386\u6240\u6709\u9009\u62e9", "}", "choices", "state", "n", "res", "if", "for", "(", ":", "choices", ")", "{", "// \u526a\u679d\uff1a\u4e0d\u5141\u8bb8\u8d8a\u8fc7\u7b2c n \u9636", "// \u5c1d\u8bd5\uff1a\u505a\u51fa\u9009\u62e9\uff0c\u66f4\u65b0\u72b6\u6001", "// \u56de\u9000", "}", "vector", "&", "int", "int", "vector", "&", "(", ")", ";", "auto", "&", "choice", "if", ";", "<", ">", "<", ">", "state", "==", "n", "++", "(", ")", "continue", ";", "backtrack", "int", "int", "res", "[", "0", "]", ">", "n", "(", "choices", ",", ",", "n", ",", "res", ")", "state", "+", "choice", "state", "+", "choice"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 111, "ast_depth": 9, "n_identifiers": 7, "vocab_size": 34}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_dynamic_programming/climbing_stairs_backtrack.cpp#27-33", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_dynamic_programming/climbing_stairs_backtrack.cpp", "language": "Java"}, "method": {"name": "climbingStairsBacktrack", "qualified_name": "codes.cpp.chapter_dynamic_programming.climbing_stairs_backtrack.cpp#climbingStairsBacktrack", "start_line": 27, "end_line": 33, "signature": "climbingStairsBacktrack(int n)", "original_code": "int climbingStairsBacktrack(int n) {\n    vector<int> choices = {1, 2}; // \u53ef\u9009\u62e9\u5411\u4e0a\u722c 1 \u9636\u6216 2 \u9636\n    int state = 0;                // \u4ece\u7b2c 0 \u9636\u5f00\u59cb\u722c\n    vector<int> res = {0};        // \u4f7f\u7528 res[0] \u8bb0\u5f55\u65b9\u6848\u6570\u91cf\n    backtrack(choices, state, n, res);\n    return res[0];\n}", "doc_comment": "/* \u722c\u697c\u68af\uff1a\u56de\u6eaf */"}, "code_tokens": ["climbingStairsBacktrack", "int", "(", ")", "{", "// \u53ef\u9009\u62e9\u5411\u4e0a\u722c 1 \u9636\u6216 2 \u9636", "// \u4ece\u7b2c 0 \u9636\u5f00\u59cb\u722c", "// \u4f7f\u7528 res[0] \u8bb0\u5f55\u65b9\u6848\u6570\u91cf", "}", "n", ";", ";", ";", ";", "return", ";", "int", "vector", "choices", "=", "int", "state", "=", "0", "vector", "res", "=", "backtrack", "res", "[", "0", "]", "<", ">", "{", "1", ",", "2", "}", "<", ">", "{", "0", "}", "(", "choices", ",", "state", ",", "n", ",", "res", ")", "int", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 82, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 26}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_dynamic_programming/climbing_stairs_backtrack.cpp#36-43", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_dynamic_programming/climbing_stairs_backtrack.cpp", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.cpp.chapter_dynamic_programming.climbing_stairs_backtrack.cpp#main", "start_line": 36, "end_line": 43, "signature": "main()", "original_code": "int main() {\n    int n = 9;\n\n    int res = climbingStairsBacktrack(n);\n    cout << \"\u722c \" << n << \" \u9636\u697c\u68af\u5171\u6709 \" << res << \" \u79cd\u65b9\u6848\" << endl;\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "}", ";", ";", ";", "return", "0", ";", "int", "n", "=", "9", "int", "res", "=", "<<", "endl", "climbingStairsBacktrack", "<<", "(", "n", ")", "<<", "res", "\"", " \u79cd\u65b9\u6848", "\"", "<<", "<<", "n", "\"", " \u9636\u697c\u68af\u5171\u6709 ", "\"", "cout", "<<", "\"", "\u722c ", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 66, "ast_depth": 12, "n_identifiers": 6, "vocab_size": 21}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_dynamic_programming/coin_change.cpp#10-32", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_dynamic_programming/coin_change.cpp", "language": "Java"}, "method": {"name": "coinChangeDP", "qualified_name": "codes.cpp.chapter_dynamic_programming.coin_change.cpp#coinChangeDP", "start_line": 10, "end_line": 32, "signature": "coinChangeDP(vector<int> &coins, int amt)", "original_code": "int coinChangeDP(vector<int> &coins, int amt) {\n    int n = coins.size();\n    int MAX = amt + 1;\n    // \u521d\u59cb\u5316 dp \u8868\n    vector<vector<int>> dp(n + 1, vector<int>(amt + 1, 0));\n    // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c\u9996\u5217\n    for (int a = 1; a <= amt; a++) {\n        dp[0][a] = MAX;\n    }\n    // \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\u548c\u5217\n    for (int i = 1; i <= n; i++) {\n        for (int a = 1; a <= amt; a++) {\n            if (coins[i - 1] > a) {\n                // \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i\n                dp[i][a] = dp[i - 1][a];\n            } else {\n                // \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5c0f\u503c\n                dp[i][a] = min(dp[i - 1][a], dp[i][a - coins[i - 1]] + 1);\n            }\n        }\n    }\n    return dp[n][amt] != MAX ? dp[n][amt] : -1;\n}", "doc_comment": "/* \u96f6\u94b1\u5151\u6362\uff1a\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["coinChangeDP", "int", "(", ",", ")", "{", "// \u521d\u59cb\u5316 dp \u8868", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c\u9996\u5217", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\u548c\u5217", "}", "coins", "amt", ";", ";", "", ";", "for", "(", ";", ")", "for", "(", ";", ")", "return", ";", "vector", "&", "int", "int", "n", "=", "int", "MAX", "=", "vector", "dp", "(", ")", ";", "a", "<=", "amt", "a", "++", "{", "}", ";", "i", "<=", "n", "i", "++", "{", "}", "?", ":", "<", ">", "coins", ".", "size", "amt", "+", "1", "<", ">", ",", "(", ")", "int", "a", "=", "1", ";", "int", "i", "=", "1", "for", "(", ";", ")", "!=", "MAX", "[", "amt", "]", "-", "1", "int", "(", ")", "vector", "n", "+", "1", "vector", "amt", "+", "1", ",", "0", "=", "MAX", ";", "a", "<=", "amt", "a", "++", "{", "}", "[", "amt", "]", "dp", "[", "n", "]", "<", ">", "<", ">", "[", "a", "]", "int", "a", "=", "1", "if", "else", "dp", "[", "n", "]", "int", "int", "dp", "[", "0", "]", "(", ")", "{", "// \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i", "}", "{", "// \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5c0f\u503c", "}", ">", "a", ";", ";", "coins", "[", "]", "=", "=", "i", "-", "1", "[", "a", "]", "[", "a", "]", "[", "a", "]", "min", "dp", "[", "i", "]", "dp", "[", "]", "dp", "[", "i", "]", "(", ",", ")", "i", "-", "1", "[", "a", "]", "+", "1", "dp", "[", "]", "[", "]", "i", "-", "1", "dp", "[", "i", "]", "a", "-", "coins", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 315, "ast_depth": 19, "n_identifiers": 10, "vocab_size": 44}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_dynamic_programming/coin_change.cpp#35-54", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_dynamic_programming/coin_change.cpp", "language": "Java"}, "method": {"name": "coinChangeDPComp", "qualified_name": "codes.cpp.chapter_dynamic_programming.coin_change.cpp#coinChangeDPComp", "start_line": 35, "end_line": 54, "signature": "coinChangeDPComp(vector<int> &coins, int amt)", "original_code": "int coinChangeDPComp(vector<int> &coins, int amt) {\n    int n = coins.size();\n    int MAX = amt + 1;\n    // \u521d\u59cb\u5316 dp \u8868\n    vector<int> dp(amt + 1, MAX);\n    dp[0] = 0;\n    // \u72b6\u6001\u8f6c\u79fb\n    for (int i = 1; i <= n; i++) {\n        for (int a = 1; a <= amt; a++) {\n            if (coins[i - 1] > a) {\n                // \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i\n                dp[a] = dp[a];\n            } else {\n                // \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5c0f\u503c\n                dp[a] = min(dp[a], dp[a - coins[i - 1]] + 1);\n            }\n        }\n    }\n    return dp[amt] != MAX ? dp[amt] : -1;\n}", "doc_comment": "/* \u96f6\u94b1\u5151\u6362\uff1a\u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["coinChangeDPComp", "int", "(", ",", ")", "{", "// \u521d\u59cb\u5316 dp \u8868", "// \u72b6\u6001\u8f6c\u79fb", "}", "coins", "amt", ";", ";", "", ";", ";", "for", "(", ";", ")", "return", ";", "vector", "&", "int", "int", "n", "=", "int", "MAX", "=", "vector", "dp", "(", ")", "=", "0", ";", "i", "<=", "n", "i", "++", "{", "}", "?", ":", "<", ">", "coins", ".", "size", "amt", "+", "1", "<", ">", "amt", "+", "1", ",", "MAX", "dp", "[", "0", "]", "int", "i", "=", "1", "for", "(", ";", ")", "!=", "MAX", "dp", "[", "amt", "]", "-", "1", "int", "(", ")", "int", ";", "a", "<=", "amt", "a", "++", "{", "}", "dp", "[", "amt", "]", "int", "a", "=", "1", "if", "else", "(", ")", "{", "// \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i", "}", "{", "// \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5c0f\u503c", "}", ">", "a", ";", ";", "coins", "[", "]", "=", "=", "i", "-", "1", "dp", "[", "a", "]", "dp", "[", "a", "]", "dp", "[", "a", "]", "min", "(", ",", ")", "dp", "[", "a", "]", "+", "1", "dp", "[", "]", "a", "-", "coins", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 232, "ast_depth": 19, "n_identifiers": 10, "vocab_size": 43}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_dynamic_programming/coin_change.cpp#57-70", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_dynamic_programming/coin_change.cpp", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.cpp.chapter_dynamic_programming.coin_change.cpp#main", "start_line": 57, "end_line": 70, "signature": "main()", "original_code": "int main() {\n    vector<int> coins = {1, 2, 5};\n    int amt = 4;\n\n    // \u52a8\u6001\u89c4\u5212\n    int res = coinChangeDP(coins, amt);\n    cout << \"\u51d1\u5230\u76ee\u6807\u91d1\u989d\u6240\u9700\u7684\u6700\u5c11\u786c\u5e01\u6570\u91cf\u4e3a \" << res << endl;\n\n    // \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212\n    res = coinChangeDPComp(coins, amt);\n    cout << \"\u51d1\u5230\u76ee\u6807\u91d1\u989d\u6240\u9700\u7684\u6700\u5c11\u786c\u5e01\u6570\u91cf\u4e3a \" << res << endl;\n\n    return 0;\n}", "doc_comment": "/* Driver code */"}, "code_tokens": ["main", "int", "(", ")", "{", "// \u52a8\u6001\u89c4\u5212", "// \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212", "}", ";", ";", ";", ";", ";", ";", "return", "0", ";", "vector", "coins", "=", "int", "amt", "=", "4", "int", "res", "=", "<<", "endl", "res", "=", "<<", "endl", "<", ">", "{", "1", ",", "2", ",", "5", "}", "coinChangeDP", "<<", "res", "coinChangeDPComp", "<<", "res", "int", "(", "coins", ",", "amt", ")", "cout", "<<", "(", "coins", ",", "amt", ")", "cout", "<<", "\"", "\u51d1\u5230\u76ee\u6807\u91d1\u989d\u6240\u9700\u7684\u6700\u5c11\u786c\u5e01\u6570\u91cf\u4e3a ", "\"", "\"", "\u51d1\u5230\u76ee\u6807\u91d1\u989d\u6240\u9700\u7684\u6700\u5c11\u786c\u5e01\u6570\u91cf\u4e3a ", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 103, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 30}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_dynamic_programming/edit_distance.cpp#10-29", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_dynamic_programming/edit_distance.cpp", "language": "Java"}, "method": {"name": "editDistanceDFS", "qualified_name": "codes.cpp.chapter_dynamic_programming.edit_distance.cpp#editDistanceDFS", "start_line": 10, "end_line": 29, "signature": "editDistanceDFS(string s, string t, int i, int j)", "original_code": "int editDistanceDFS(string s, string t, int i, int j) {\n    // \u82e5 s \u548c t \u90fd\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de 0\n    if (i == 0 && j == 0)\n        return 0;\n    // \u82e5 s \u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de t \u957f\u5ea6\n    if (i == 0)\n        return j;\n    // \u82e5 t \u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de s \u957f\u5ea6\n    if (j == 0)\n        return i;\n    // \u82e5\u4e24\u5b57\u7b26\u76f8\u7b49\uff0c\u5219\u76f4\u63a5\u8df3\u8fc7\u6b64\u4e24\u5b57\u7b26\n    if (s[i - 1] == t[j - 1])\n        return editDistanceDFS(s, t, i - 1, j - 1);\n    // \u6700\u5c11\u7f16\u8f91\u6b65\u6570 = \u63d2\u5165\u3001\u5220\u9664\u3001\u66ff\u6362\u8fd9\u4e09\u79cd\u64cd\u4f5c\u7684\u6700\u5c11\u7f16\u8f91\u6b65\u6570 + 1\n    int insert = editDistanceDFS(s, t, i, j - 1);\n    int del = editDistanceDFS(s, t, i - 1, j);\n    int replace = editDistanceDFS(s, t, i - 1, j - 1);\n    // \u8fd4\u56de\u6700\u5c11\u7f16\u8f91\u6b65\u6570\n    return min(min(insert, del), replace) + 1;\n}", "doc_comment": "/* \u7f16\u8f91\u8ddd\u79bb\uff1a\u66b4\u529b\u641c\u7d22 */"}, "code_tokens": ["editDistanceDFS", "int", "(", ",", ",", ",", ")", "{", "// \u82e5 s \u548c t \u90fd\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de 0", "// \u82e5 s \u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de t \u957f\u5ea6", "// \u82e5 t \u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de s \u957f\u5ea6", "// \u82e5\u4e24\u5b57\u7b26\u76f8\u7b49\uff0c\u5219\u76f4\u63a5\u8df3\u8fc7\u6b64\u4e24\u5b57\u7b26", "// \u6700\u5c11\u7f16\u8f91\u6b65\u6570 = \u63d2\u5165\u3001\u5220\u9664\u3001\u66ff\u6362\u8fd9\u4e09\u79cd\u64cd\u4f5c\u7684\u6700\u5c11\u7f16\u8f91\u6b65\u6570 + 1", "// \u8fd4\u56de\u6700\u5c11\u7f16\u8f91\u6b65\u6570", "}", "string", "s", "string", "t", "i", "j", "if", "if", "if", "if", ";", ";", ";", "return", ";", "int", "int", "(", ")", "return", "0", ";", "(", ")", "return", "j", ";", "(", ")", "return", "i", ";", "(", ")", "return", ";", "int", "insert", "=", "int", "del", "=", "int", "replace", "=", "+", "1", "&&", "i", "==", "0", "j", "==", "0", "==", "editDistanceDFS", "editDistanceDFS", "editDistanceDFS", "editDistanceDFS", "min", "i", "==", "0", "j", "==", "0", "s", "[", "]", "t", "[", "]", "(", "s", ",", "t", ",", ",", ")", "(", "s", ",", "t", ",", "i", ",", ")", "(", "s", ",", "t", ",", ",", "j", ")", "(", "s", ",", "t", ",", ",", ")", "(", ",", "replace", ")", "i", "-", "1", "j", "-", "1", "i", "-", "1", "j", "-", "1", "j", "-", "1", "i", "-", "1", "i", "-", "1", "j", "-", "1", "min", "(", "insert", ",", "del", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 213, "ast_depth": 10, "n_identifiers": 9, "vocab_size": 34}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_dynamic_programming/edit_distance.cpp#32-55", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_dynamic_programming/edit_distance.cpp", "language": "Java"}, "method": {"name": "editDistanceDFSMem", "qualified_name": "codes.cpp.chapter_dynamic_programming.edit_distance.cpp#editDistanceDFSMem", "start_line": 32, "end_line": 55, "signature": "editDistanceDFSMem(string s, string t, vector<vector<int>> &mem, int i, int j)", "original_code": "int editDistanceDFSMem(string s, string t, vector<vector<int>> &mem, int i, int j) {\n    // \u82e5 s \u548c t \u90fd\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de 0\n    if (i == 0 && j == 0)\n        return 0;\n    // \u82e5 s \u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de t \u957f\u5ea6\n    if (i == 0)\n        return j;\n    // \u82e5 t \u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de s \u957f\u5ea6\n    if (j == 0)\n        return i;\n    // \u82e5\u5df2\u6709\u8bb0\u5f55\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u4e4b\n    if (mem[i][j] != -1)\n        return mem[i][j];\n    // \u82e5\u4e24\u5b57\u7b26\u76f8\u7b49\uff0c\u5219\u76f4\u63a5\u8df3\u8fc7\u6b64\u4e24\u5b57\u7b26\n    if (s[i - 1] == t[j - 1])\n        return editDistanceDFSMem(s, t, mem, i - 1, j - 1);\n    // \u6700\u5c11\u7f16\u8f91\u6b65\u6570 = \u63d2\u5165\u3001\u5220\u9664\u3001\u66ff\u6362\u8fd9\u4e09\u79cd\u64cd\u4f5c\u7684\u6700\u5c11\u7f16\u8f91\u6b65\u6570 + 1\n    int insert = editDistanceDFSMem(s, t, mem, i, j - 1);\n    int del = editDistanceDFSMem(s, t, mem, i - 1, j);\n    int replace = editDistanceDFSMem(s, t, mem, i - 1, j - 1);\n    // \u8bb0\u5f55\u5e76\u8fd4\u56de\u6700\u5c11\u7f16\u8f91\u6b65\u6570\n    mem[i][j] = min(min(insert, del), replace) + 1;\n    return mem[i][j];\n}", "doc_comment": "/* \u7f16\u8f91\u8ddd\u79bb\uff1a\u8bb0\u5fc6\u5316\u641c\u7d22 */"}, "code_tokens": ["editDistanceDFSMem", "int", "(", ",", ",", ",", ",", ")", "{", "// \u82e5 s \u548c t \u90fd\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de 0", "// \u82e5 s \u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de t \u957f\u5ea6", "// \u82e5 t \u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de s \u957f\u5ea6", "// \u82e5\u5df2\u6709\u8bb0\u5f55\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u4e4b", "// \u82e5\u4e24\u5b57\u7b26\u76f8\u7b49\uff0c\u5219\u76f4\u63a5\u8df3\u8fc7\u6b64\u4e24\u5b57\u7b26", "// \u6700\u5c11\u7f16\u8f91\u6b65\u6570 = \u63d2\u5165\u3001\u5220\u9664\u3001\u66ff\u6362\u8fd9\u4e09\u79cd\u64cd\u4f5c\u7684\u6700\u5c11\u7f16\u8f91\u6b65\u6570 + 1", "// \u8bb0\u5f55\u5e76\u8fd4\u56de\u6700\u5c11\u7f16\u8f91\u6b65\u6570", "}", "string", "s", "string", "t", "mem", "i", "j", "if", "if", "if", "if", "if", ";", ";", ";", ";", "return", ";", "vector", "&", "int", "int", "(", ")", "return", "0", ";", "(", ")", "return", "j", ";", "(", ")", "return", "i", ";", "(", ")", "return", ";", "(", ")", "return", ";", "int", "insert", "=", "int", "del", "=", "int", "replace", "=", "=", "[", "j", "]", "<", ">", "&&", "i", "==", "0", "j", "==", "0", "!=", "[", "j", "]", "==", "editDistanceDFSMem", "editDistanceDFSMem", "editDistanceDFSMem", "editDistanceDFSMem", "[", "j", "]", "+", "1", "mem", "[", "i", "]", "vector", "i", "==", "0", "j", "==", "0", "[", "j", "]", "-", "1", "mem", "[", "i", "]", "s", "[", "]", "t", "[", "]", "(", "s", ",", "t", ",", "mem", ",", ",", ")", "(", "s", ",", "t", ",", "mem", ",", "i", ",", ")", "(", "s", ",", "t", ",", "mem", ",", ",", "j", ")", "(", "s", ",", "t", ",", "mem", ",", ",", ")", "mem", "[", "i", "]", "min", "<", ">", "mem", "[", "i", "]", "i", "-", "1", "j", "-", "1", "i", "-", "1", "j", "-", "1", "j", "-", "1", "i", "-", "1", "i", "-", "1", "j", "-", "1", "(", ",", "replace", ")", "int", "min", "(", "insert", ",", "del", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 292, "ast_depth": 11, "n_identifiers": 10, "vocab_size": 41}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_dynamic_programming/edit_distance.cpp#58-81", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_dynamic_programming/edit_distance.cpp", "language": "Java"}, "method": {"name": "editDistanceDP", "qualified_name": "codes.cpp.chapter_dynamic_programming.edit_distance.cpp#editDistanceDP", "start_line": 58, "end_line": 81, "signature": "editDistanceDP(string s, string t)", "original_code": "int editDistanceDP(string s, string t) {\n    int n = s.length(), m = t.length();\n    vector<vector<int>> dp(n + 1, vector<int>(m + 1, 0));\n    // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c\u9996\u5217\n    for (int i = 1; i <= n; i++) {\n        dp[i][0] = i;\n    }\n    for (int j = 1; j <= m; j++) {\n        dp[0][j] = j;\n    }\n    // \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\u548c\u5217\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= m; j++) {\n            if (s[i - 1] == t[j - 1]) {\n                // \u82e5\u4e24\u5b57\u7b26\u76f8\u7b49\uff0c\u5219\u76f4\u63a5\u8df3\u8fc7\u6b64\u4e24\u5b57\u7b26\n                dp[i][j] = dp[i - 1][j - 1];\n            } else {\n                // \u6700\u5c11\u7f16\u8f91\u6b65\u6570 = \u63d2\u5165\u3001\u5220\u9664\u3001\u66ff\u6362\u8fd9\u4e09\u79cd\u64cd\u4f5c\u7684\u6700\u5c11\u7f16\u8f91\u6b65\u6570 + 1\n                dp[i][j] = min(min(dp[i][j - 1], dp[i - 1][j]), dp[i - 1][j - 1]) + 1;\n            }\n        }\n    }\n    return dp[n][m];\n}", "doc_comment": "/* \u7f16\u8f91\u8ddd\u79bb\uff1a\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["editDistanceDP", "int", "(", ",", ")", "{", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c\u9996\u5217", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\u548c\u5217", "}", "string", "s", "string", "t", ",", ";", "", ";", "for", "(", ";", ")", "for", "(", ";", ")", "for", "(", ";", ")", "return", ";", "int", "n", "=", "m", "=", "vector", "dp", "(", ")", ";", "i", "<=", "n", "i", "++", "{", "}", ";", "j", "<=", "m", "j", "++", "{", "}", ";", "i", "<=", "n", "i", "++", "{", "}", "[", "m", "]", "s", ".", "length", "t", ".", "length", "<", ">", ",", "(", ")", "int", "i", "=", "1", ";", "int", "j", "=", "1", ";", "int", "i", "=", "1", "for", "(", ";", ")", "dp", "[", "n", "]", "(", ")", "(", ")", "vector", "n", "+", "1", "vector", "m", "+", "1", ",", "0", "=", "i", "=", "j", ";", "j", "<=", "m", "j", "++", "{", "}", "<", ">", "<", ">", "[", "0", "]", "[", "j", "]", "int", "j", "=", "1", "if", "else", "int", "int", "dp", "[", "i", "]", "dp", "[", "0", "]", "(", ")", "{", "// \u82e5\u4e24\u5b57\u7b26\u76f8\u7b49\uff0c\u5219\u76f4\u63a5\u8df3\u8fc7\u6b64\u4e24\u5b57\u7b26", "}", "{", "// \u6700\u5c11\u7f16\u8f91\u6b65\u6570 = \u63d2\u5165\u3001\u5220\u9664\u3001\u66ff\u6362\u8fd9\u4e09\u79cd\u64cd\u4f5c\u7684\u6700\u5c11\u7f16\u8f91\u6b65\u6570 + 1", "}", "==", ";", ";", "s", "[", "]", "t", "[", "]", "=", "=", "i", "-", "1", "j", "-", "1", "[", "j", "]", "[", "]", "[", "j", "]", "+", "1", "dp", "[", "i", "]", "dp", "[", "]", "j", "-", "1", "dp", "[", "i", "]", "min", "i", "-", "1", "(", ",", ")", "min", "[", "]", "(", ",", ")", "dp", "[", "]", "j", "-", "1", "[", "]", "[", "j", "]", "i", "-", "1", "dp", "[", "i", "]", "j", "-", "1", "dp", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 348, "ast_depth": 20, "n_identifiers": 10, "vocab_size": 41}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_dynamic_programming/edit_distance.cpp#84-110", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_dynamic_programming/edit_distance.cpp", "language": "Java"}, "method": {"name": "editDistanceDPComp", "qualified_name": "codes.cpp.chapter_dynamic_programming.edit_distance.cpp#editDistanceDPComp", "start_line": 84, "end_line": 110, "signature": "editDistanceDPComp(string s, string t)", "original_code": "int editDistanceDPComp(string s, string t) {\n    int n = s.length(), m = t.length();\n    vector<int> dp(m + 1, 0);\n    // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c\n    for (int j = 1; j <= m; j++) {\n        dp[j] = j;\n    }\n    // \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\n    for (int i = 1; i <= n; i++) {\n        // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u5217\n        int leftup = dp[0]; // \u6682\u5b58 dp[i-1, j-1]\n        dp[0] = i;\n        // \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u5217\n        for (int j = 1; j <= m; j++) {\n            int temp = dp[j];\n            if (s[i - 1] == t[j - 1]) {\n                // \u82e5\u4e24\u5b57\u7b26\u76f8\u7b49\uff0c\u5219\u76f4\u63a5\u8df3\u8fc7\u6b64\u4e24\u5b57\u7b26\n                dp[j] = leftup;\n            } else {\n                // \u6700\u5c11\u7f16\u8f91\u6b65\u6570 = \u63d2\u5165\u3001\u5220\u9664\u3001\u66ff\u6362\u8fd9\u4e09\u79cd\u64cd\u4f5c\u7684\u6700\u5c11\u7f16\u8f91\u6b65\u6570 + 1\n                dp[j] = min(min(dp[j - 1], dp[j]), leftup) + 1;\n            }\n            leftup = temp; // \u66f4\u65b0\u4e3a\u4e0b\u4e00\u8f6e\u7684 dp[i-1, j-1]\n        }\n    }\n    return dp[m];\n}", "doc_comment": "/* \u7f16\u8f91\u8ddd\u79bb\uff1a\u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["editDistanceDPComp", "int", "(", ",", ")", "{", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c", "}", "string", "s", "string", "t", ",", ";", "", ";", "for", "(", ";", ")", "for", "(", ";", ")", "return", ";", "int", "n", "=", "m", "=", "vector", "dp", "(", ")", ";", "j", "<=", "m", "j", "++", "{", "}", ";", "i", "<=", "n", "i", "++", "{", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u5217", "// \u6682\u5b58 dp[i-1, j-1]", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u5217", "}", "dp", "[", "m", "]", "s", ".", "length", "t", ".", "length", "<", ">", "m", "+", "1", ",", "0", "int", "j", "=", "1", ";", "int", "i", "=", "1", ";", ";", "for", "(", ";", ")", "(", ")", "(", ")", "int", "=", "j", "int", "leftup", "=", "=", "i", ";", "j", "<=", "m", "j", "++", "{", "// \u66f4\u65b0\u4e3a\u4e0b\u4e00\u8f6e\u7684 dp[i-1, j-1]", "}", "dp", "[", "j", "]", "dp", "[", "0", "]", "dp", "[", "0", "]", "int", "j", "=", "1", ";", "if", "else", ";", "int", "temp", "=", "(", ")", "{", "// \u82e5\u4e24\u5b57\u7b26\u76f8\u7b49\uff0c\u5219\u76f4\u63a5\u8df3\u8fc7\u6b64\u4e24\u5b57\u7b26", "}", "{", "// \u6700\u5c11\u7f16\u8f91\u6b65\u6570 = \u63d2\u5165\u3001\u5220\u9664\u3001\u66ff\u6362\u8fd9\u4e09\u79cd\u64cd\u4f5c\u7684\u6700\u5c11\u7f16\u8f91\u6b65\u6570 + 1", "}", "leftup", "=", "temp", "dp", "[", "j", "]", "==", ";", ";", "s", "[", "]", "t", "[", "]", "=", "leftup", "=", "i", "-", "1", "j", "-", "1", "dp", "[", "j", "]", "dp", "[", "j", "]", "+", "1", "min", "(", ",", "leftup", ")", "min", "(", ",", ")", "dp", "[", "]", "dp", "[", "j", "]", "j", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 279, "ast_depth": 19, "n_identifiers": 12, "vocab_size": 47}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_dynamic_programming/edit_distance.cpp#113-136", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_dynamic_programming/edit_distance.cpp", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.cpp.chapter_dynamic_programming.edit_distance.cpp#main", "start_line": 113, "end_line": 136, "signature": "main()", "original_code": "int main() {\n    string s = \"bag\";\n    string t = \"pack\";\n    int n = s.length(), m = t.length();\n\n    // \u66b4\u529b\u641c\u7d22\n    int res = editDistanceDFS(s, t, n, m);\n    cout << \"\u5c06 \" << s << \" \u66f4\u6539\u4e3a \" << t << \" \u6700\u5c11\u9700\u8981\u7f16\u8f91 \" << res << \" \u6b65\\n\";\n\n    // \u8bb0\u5fc6\u5316\u641c\u7d22\n    vector<vector<int>> mem(n + 1, vector<int>(m + 1, -1));\n    res = editDistanceDFSMem(s, t, mem, n, m);\n    cout << \"\u5c06 \" << s << \" \u66f4\u6539\u4e3a \" << t << \" \u6700\u5c11\u9700\u8981\u7f16\u8f91 \" << res << \" \u6b65\\n\";\n\n    // \u52a8\u6001\u89c4\u5212\n    res = editDistanceDP(s, t);\n    cout << \"\u5c06 \" << s << \" \u66f4\u6539\u4e3a \" << t << \" \u6700\u5c11\u9700\u8981\u7f16\u8f91 \" << res << \" \u6b65\\n\";\n\n    // \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212\n    res = editDistanceDPComp(s, t);\n    cout << \"\u5c06 \" << s << \" \u66f4\u6539\u4e3a \" << t << \" \u6700\u5c11\u9700\u8981\u7f16\u8f91 \" << res << \" \u6b65\\n\";\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "// \u66b4\u529b\u641c\u7d22", "// \u8bb0\u5fc6\u5316\u641c\u7d22", "// \u52a8\u6001\u89c4\u5212", "// \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212", "}", "string", ";", "string", ";", ",", ";", ";", ";", "", ";", ";", ";", ";", ";", ";", ";", "return", "0", ";", "s", "=", "t", "=", "int", "n", "=", "m", "=", "int", "res", "=", "<<", "vector", "mem", "(", ")", "res", "=", "<<", "res", "=", "<<", "res", "=", "<<", "\"", "bag", "\"", "\"", "pack", "\"", "s", ".", "length", "t", ".", "length", "editDistanceDFS", "<<", "res", "\"", " \u6b65", "\\n", "\"", "<", ">", ",", "(", ")", "editDistanceDFSMem", "<<", "res", "\"", " \u6b65", "\\n", "\"", "editDistanceDP", "<<", "res", "\"", " \u6b65", "\\n", "\"", "editDistanceDPComp", "<<", "res", "\"", " \u6b65", "\\n", "\"", "(", ")", "(", ")", "(", "s", ",", "t", ",", "n", ",", "m", ")", "<<", "vector", "n", "+", "1", "vector", "-", "1", "(", "s", ",", "t", ",", "mem", ",", "n", ",", "m", ")", "<<", "(", "s", ",", "t", ")", "<<", "(", "s", ",", "t", ")", "<<", "<<", "t", "\"", " \u6700\u5c11\u9700\u8981\u7f16\u8f91 ", "\"", "<", ">", "<", ">", "m", "+", "1", ",", "<<", "t", "\"", " \u6700\u5c11\u9700\u8981\u7f16\u8f91 ", "\"", "<<", "t", "\"", " \u6700\u5c11\u9700\u8981\u7f16\u8f91 ", "\"", "<<", "t", "\"", " \u6700\u5c11\u9700\u8981\u7f16\u8f91 ", "\"", "<<", "int", "int", "<<", "<<", "<<", "<<", "s", "\"", " \u66f4\u6539\u4e3a ", "\"", "<<", "s", "\"", " \u66f4\u6539\u4e3a ", "\"", "<<", "s", "\"", " \u66f4\u6539\u4e3a ", "\"", "<<", "s", "\"", " \u66f4\u6539\u4e3a ", "\"", "cout", "<<", "cout", "<<", "cout", "<<", "cout", "<<", "\"", "\u5c06 ", "\"", "\"", "\u5c06 ", "\"", "\"", "\u5c06 ", "\"", "\"", "\u5c06 ", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 322, "ast_depth": 13, "n_identifiers": 13, "vocab_size": 45}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_dynamic_programming/knapsack.cpp#8-22", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_dynamic_programming/knapsack.cpp", "language": "Java"}, "method": {"name": "knapsackDFS", "qualified_name": "codes.cpp.chapter_dynamic_programming.knapsack.cpp#knapsackDFS", "start_line": 8, "end_line": 22, "signature": "knapsackDFS(vector<int> &wgt, vector<int> &val, int i, int c)", "original_code": "int knapsackDFS(vector<int> &wgt, vector<int> &val, int i, int c) {\n    // \u82e5\u5df2\u9009\u5b8c\u6240\u6709\u7269\u54c1\u6216\u80cc\u5305\u65e0\u5269\u4f59\u5bb9\u91cf\uff0c\u5219\u8fd4\u56de\u4ef7\u503c 0\n    if (i == 0 || c == 0) {\n        return 0;\n    }\n    // \u82e5\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\uff0c\u5219\u53ea\u80fd\u9009\u62e9\u4e0d\u653e\u5165\u80cc\u5305\n    if (wgt[i - 1] > c) {\n        return knapsackDFS(wgt, val, i - 1, c);\n    }\n    // \u8ba1\u7b97\u4e0d\u653e\u5165\u548c\u653e\u5165\u7269\u54c1 i \u7684\u6700\u5927\u4ef7\u503c\n    int no = knapsackDFS(wgt, val, i - 1, c);\n    int yes = knapsackDFS(wgt, val, i - 1, c - wgt[i - 1]) + val[i - 1];\n    // \u8fd4\u56de\u4e24\u79cd\u65b9\u6848\u4e2d\u4ef7\u503c\u66f4\u5927\u7684\u90a3\u4e00\u4e2a\n    return max(no, yes);\n}", "doc_comment": "/* 0-1 \u80cc\u5305\uff1a\u66b4\u529b\u641c\u7d22 */"}, "code_tokens": ["knapsackDFS", "int", "(", ",", ",", ",", ")", "{", "// \u82e5\u5df2\u9009\u5b8c\u6240\u6709\u7269\u54c1\u6216\u80cc\u5305\u65e0\u5269\u4f59\u5bb9\u91cf\uff0c\u5219\u8fd4\u56de\u4ef7\u503c 0", "// \u82e5\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\uff0c\u5219\u53ea\u80fd\u9009\u62e9\u4e0d\u653e\u5165\u80cc\u5305", "// \u8ba1\u7b97\u4e0d\u653e\u5165\u548c\u653e\u5165\u7269\u54c1 i \u7684\u6700\u5927\u4ef7\u503c", "// \u8fd4\u56de\u4e24\u79cd\u65b9\u6848\u4e2d\u4ef7\u503c\u66f4\u5927\u7684\u90a3\u4e00\u4e2a", "}", "wgt", "val", "i", "c", "if", "if", ";", ";", "return", ";", "vector", "&", "vector", "&", "int", "int", "(", ")", "{", "}", "(", ")", "{", "}", "int", "no", "=", "int", "yes", "=", "max", "<", ">", "<", ">", "||", "return", "0", ";", ">", "c", "return", ";", "knapsackDFS", "+", "(", "no", ",", "yes", ")", "int", "int", "i", "==", "0", "c", "==", "0", "wgt", "[", "]", "knapsackDFS", "(", "wgt", ",", "val", ",", ",", "c", ")", "knapsackDFS", "val", "[", "]", "i", "-", "1", "(", "wgt", ",", "val", ",", ",", "c", ")", "i", "-", "1", "(", "wgt", ",", "val", ",", ",", ")", "i", "-", "1", "i", "-", "1", "i", "-", "1", "c", "-", "wgt", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 182, "ast_depth": 12, "n_identifiers": 8, "vocab_size": 34}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_dynamic_programming/knapsack.cpp#25-44", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_dynamic_programming/knapsack.cpp", "language": "Java"}, "method": {"name": "knapsackDFSMem", "qualified_name": "codes.cpp.chapter_dynamic_programming.knapsack.cpp#knapsackDFSMem", "start_line": 25, "end_line": 44, "signature": "knapsackDFSMem(vector<int> &wgt, vector<int> &val, vector<vector<int>> &mem, int i, int c)", "original_code": "int knapsackDFSMem(vector<int> &wgt, vector<int> &val, vector<vector<int>> &mem, int i, int c) {\n    // \u82e5\u5df2\u9009\u5b8c\u6240\u6709\u7269\u54c1\u6216\u80cc\u5305\u65e0\u5269\u4f59\u5bb9\u91cf\uff0c\u5219\u8fd4\u56de\u4ef7\u503c 0\n    if (i == 0 || c == 0) {\n        return 0;\n    }\n    // \u82e5\u5df2\u6709\u8bb0\u5f55\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\n    if (mem[i][c] != -1) {\n        return mem[i][c];\n    }\n    // \u82e5\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\uff0c\u5219\u53ea\u80fd\u9009\u62e9\u4e0d\u653e\u5165\u80cc\u5305\n    if (wgt[i - 1] > c) {\n        return knapsackDFSMem(wgt, val, mem, i - 1, c);\n    }\n    // \u8ba1\u7b97\u4e0d\u653e\u5165\u548c\u653e\u5165\u7269\u54c1 i \u7684\u6700\u5927\u4ef7\u503c\n    int no = knapsackDFSMem(wgt, val, mem, i - 1, c);\n    int yes = knapsackDFSMem(wgt, val, mem, i - 1, c - wgt[i - 1]) + val[i - 1];\n    // \u8bb0\u5f55\u5e76\u8fd4\u56de\u4e24\u79cd\u65b9\u6848\u4e2d\u4ef7\u503c\u66f4\u5927\u7684\u90a3\u4e00\u4e2a\n    mem[i][c] = max(no, yes);\n    return mem[i][c];\n}", "doc_comment": "/* 0-1 \u80cc\u5305\uff1a\u8bb0\u5fc6\u5316\u641c\u7d22 */"}, "code_tokens": ["knapsackDFSMem", "int", "(", ",", ",", ",", ",", ")", "{", "// \u82e5\u5df2\u9009\u5b8c\u6240\u6709\u7269\u54c1\u6216\u80cc\u5305\u65e0\u5269\u4f59\u5bb9\u91cf\uff0c\u5219\u8fd4\u56de\u4ef7\u503c 0", "// \u82e5\u5df2\u6709\u8bb0\u5f55\uff0c\u5219\u76f4\u63a5\u8fd4\u56de", "// \u82e5\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\uff0c\u5219\u53ea\u80fd\u9009\u62e9\u4e0d\u653e\u5165\u80cc\u5305", "// \u8ba1\u7b97\u4e0d\u653e\u5165\u548c\u653e\u5165\u7269\u54c1 i \u7684\u6700\u5927\u4ef7\u503c", "// \u8bb0\u5f55\u5e76\u8fd4\u56de\u4e24\u79cd\u65b9\u6848\u4e2d\u4ef7\u503c\u66f4\u5927\u7684\u90a3\u4e00\u4e2a", "}", "wgt", "val", "mem", "i", "c", "if", "if", "if", ";", ";", ";", "return", ";", "vector", "&", "vector", "&", "vector", "&", "int", "int", "(", ")", "{", "}", "(", ")", "{", "}", "(", ")", "{", "}", "int", "no", "=", "int", "yes", "=", "=", "[", "c", "]", "<", ">", "<", ">", "<", ">", "||", "return", "0", ";", "!=", "return", ";", ">", "c", "return", ";", "knapsackDFSMem", "+", "[", "c", "]", "max", "mem", "[", "i", "]", "int", "int", "vector", "i", "==", "0", "c", "==", "0", "[", "c", "]", "-", "1", "[", "c", "]", "wgt", "[", "]", "knapsackDFSMem", "(", "wgt", ",", "val", ",", "mem", ",", ",", "c", ")", "knapsackDFSMem", "val", "[", "]", "mem", "[", "i", "]", "(", "no", ",", "yes", ")", "<", ">", "mem", "[", "i", "]", "mem", "[", "i", "]", "i", "-", "1", "(", "wgt", ",", "val", ",", "mem", ",", ",", "c", ")", "i", "-", "1", "(", "wgt", ",", "val", ",", "mem", ",", ",", ")", "i", "-", "1", "int", "i", "-", "1", "i", "-", "1", "c", "-", "wgt", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 262, "ast_depth": 12, "n_identifiers": 9, "vocab_size": 37}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_dynamic_programming/knapsack.cpp#47-64", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_dynamic_programming/knapsack.cpp", "language": "Java"}, "method": {"name": "knapsackDP", "qualified_name": "codes.cpp.chapter_dynamic_programming.knapsack.cpp#knapsackDP", "start_line": 47, "end_line": 64, "signature": "knapsackDP(vector<int> &wgt, vector<int> &val, int cap)", "original_code": "int knapsackDP(vector<int> &wgt, vector<int> &val, int cap) {\n    int n = wgt.size();\n    // \u521d\u59cb\u5316 dp \u8868\n    vector<vector<int>> dp(n + 1, vector<int>(cap + 1, 0));\n    // \u72b6\u6001\u8f6c\u79fb\n    for (int i = 1; i <= n; i++) {\n        for (int c = 1; c <= cap; c++) {\n            if (wgt[i - 1] > c) {\n                // \u82e5\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\uff0c\u5219\u4e0d\u9009\u7269\u54c1 i\n                dp[i][c] = dp[i - 1][c];\n            } else {\n                // \u4e0d\u9009\u548c\u9009\u7269\u54c1 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5927\u503c\n                dp[i][c] = max(dp[i - 1][c], dp[i - 1][c - wgt[i - 1]] + val[i - 1]);\n            }\n        }\n    }\n    return dp[n][cap];\n}", "doc_comment": "/* 0-1 \u80cc\u5305\uff1a\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["knapsackDP", "int", "(", ",", ",", ")", "{", "// \u521d\u59cb\u5316 dp \u8868", "// \u72b6\u6001\u8f6c\u79fb", "}", "wgt", "val", "cap", ";", "", ";", "for", "(", ";", ")", "return", ";", "vector", "&", "vector", "&", "int", "int", "n", "=", "vector", "dp", "(", ")", ";", "i", "<=", "n", "i", "++", "{", "}", "[", "cap", "]", "<", ">", "<", ">", "wgt", ".", "size", "<", ">", ",", "(", ")", "int", "i", "=", "1", "for", "(", ";", ")", "dp", "[", "n", "]", "int", "int", "(", ")", "vector", "n", "+", "1", "vector", "cap", "+", "1", ",", "0", ";", "c", "<=", "cap", "c", "++", "{", "}", "<", ">", "<", ">", "int", "c", "=", "1", "if", "else", "int", "int", "(", ")", "{", "// \u82e5\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\uff0c\u5219\u4e0d\u9009\u7269\u54c1 i", "}", "{", "// \u4e0d\u9009\u548c\u9009\u7269\u54c1 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5927\u503c", "}", ">", "c", ";", ";", "wgt", "[", "]", "=", "=", "i", "-", "1", "[", "c", "]", "[", "c", "]", "[", "c", "]", "max", "dp", "[", "i", "]", "dp", "[", "]", "dp", "[", "i", "]", "(", ",", ")", "i", "-", "1", "[", "c", "]", "+", "dp", "[", "]", "[", "]", "val", "[", "]", "i", "-", "1", "dp", "[", "]", "c", "-", "i", "-", "1", "i", "-", "1", "wgt", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 270, "ast_depth": 19, "n_identifiers": 10, "vocab_size": 40}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_dynamic_programming/knapsack.cpp#67-82", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_dynamic_programming/knapsack.cpp", "language": "Java"}, "method": {"name": "knapsackDPComp", "qualified_name": "codes.cpp.chapter_dynamic_programming.knapsack.cpp#knapsackDPComp", "start_line": 67, "end_line": 82, "signature": "knapsackDPComp(vector<int> &wgt, vector<int> &val, int cap)", "original_code": "int knapsackDPComp(vector<int> &wgt, vector<int> &val, int cap) {\n    int n = wgt.size();\n    // \u521d\u59cb\u5316 dp \u8868\n    vector<int> dp(cap + 1, 0);\n    // \u72b6\u6001\u8f6c\u79fb\n    for (int i = 1; i <= n; i++) {\n        // \u5012\u5e8f\u904d\u5386\n        for (int c = cap; c >= 1; c--) {\n            if (wgt[i - 1] <= c) {\n                // \u4e0d\u9009\u548c\u9009\u7269\u54c1 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5927\u503c\n                dp[c] = max(dp[c], dp[c - wgt[i - 1]] + val[i - 1]);\n            }\n        }\n    }\n    return dp[cap];\n}", "doc_comment": "/* 0-1 \u80cc\u5305\uff1a\u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["knapsackDPComp", "int", "(", ",", ",", ")", "{", "// \u521d\u59cb\u5316 dp \u8868", "// \u72b6\u6001\u8f6c\u79fb", "}", "wgt", "val", "cap", ";", "", ";", "for", "(", ";", ")", "return", ";", "vector", "&", "vector", "&", "int", "int", "n", "=", "vector", "dp", "(", ")", ";", "i", "<=", "n", "i", "++", "{", "// \u5012\u5e8f\u904d\u5386", "}", "dp", "[", "cap", "]", "<", ">", "<", ">", "wgt", ".", "size", "<", ">", "cap", "+", "1", ",", "0", "int", "i", "=", "1", "for", "(", ";", ")", "int", "int", "(", ")", "int", ";", "c", ">=", "1", "c", "--", "{", "}", "int", "c", "=", "cap", "if", "(", ")", "{", "// \u4e0d\u9009\u548c\u9009\u7269\u54c1 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5927\u503c", "}", "<=", "c", ";", "wgt", "[", "]", "=", "i", "-", "1", "dp", "[", "c", "]", "max", "(", ",", ")", "dp", "[", "c", "]", "+", "dp", "[", "]", "val", "[", "]", "c", "-", "i", "-", "1", "wgt", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 198, "ast_depth": 19, "n_identifiers": 10, "vocab_size": 41}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_dynamic_programming/knapsack.cpp#85-109", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_dynamic_programming/knapsack.cpp", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.cpp.chapter_dynamic_programming.knapsack.cpp#main", "start_line": 85, "end_line": 109, "signature": "main()", "original_code": "int main() {\n    vector<int> wgt = {10, 20, 30, 40, 50};\n    vector<int> val = {50, 120, 150, 210, 240};\n    int cap = 50;\n    int n = wgt.size();\n\n    // \u66b4\u529b\u641c\u7d22\n    int res = knapsackDFS(wgt, val, n, cap);\n    cout << \"\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\u7684\u6700\u5927\u7269\u54c1\u4ef7\u503c\u4e3a \" << res << endl;\n\n    // \u8bb0\u5fc6\u5316\u641c\u7d22\n    vector<vector<int>> mem(n + 1, vector<int>(cap + 1, -1));\n    res = knapsackDFSMem(wgt, val, mem, n, cap);\n    cout << \"\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\u7684\u6700\u5927\u7269\u54c1\u4ef7\u503c\u4e3a \" << res << endl;\n\n    // \u52a8\u6001\u89c4\u5212\n    res = knapsackDP(wgt, val, cap);\n    cout << \"\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\u7684\u6700\u5927\u7269\u54c1\u4ef7\u503c\u4e3a \" << res << endl;\n\n    // \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212\n    res = knapsackDPComp(wgt, val, cap);\n    cout << \"\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\u7684\u6700\u5927\u7269\u54c1\u4ef7\u503c\u4e3a \" << res << endl;\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "// \u66b4\u529b\u641c\u7d22", "// \u8bb0\u5fc6\u5316\u641c\u7d22", "// \u52a8\u6001\u89c4\u5212", "// \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212", "}", ";", ";", ";", ";", ";", ";", "", ";", ";", ";", ";", ";", ";", ";", "return", "0", ";", "vector", "wgt", "=", "vector", "val", "=", "int", "cap", "=", "50", "int", "n", "=", "int", "res", "=", "<<", "endl", "vector", "mem", "(", ")", "res", "=", "<<", "endl", "res", "=", "<<", "endl", "res", "=", "<<", "endl", "<", ">", "{", "10", ",", "20", ",", "30", ",", "40", ",", "50", "}", "<", ">", "{", "50", ",", "120", ",", "150", ",", "210", ",", "240", "}", "wgt", ".", "size", "knapsackDFS", "<<", "res", "<", ">", ",", "(", ")", "knapsackDFSMem", "<<", "res", "knapsackDP", "<<", "res", "knapsackDPComp", "<<", "res", "int", "int", "(", ")", "(", "wgt", ",", "val", ",", "n", ",", "cap", ")", "cout", "<<", "vector", "n", "+", "1", "vector", "-", "1", "(", "wgt", ",", "val", ",", "mem", ",", "n", ",", "cap", ")", "cout", "<<", "(", "wgt", ",", "val", ",", "cap", ")", "cout", "<<", "(", "wgt", ",", "val", ",", "cap", ")", "cout", "<<", "\"", "\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\u7684\u6700\u5927\u7269\u54c1\u4ef7\u503c\u4e3a ", "\"", "<", ">", "<", ">", "cap", "+", "1", ",", "\"", "\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\u7684\u6700\u5927\u7269\u54c1\u4ef7\u503c\u4e3a ", "\"", "\"", "\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\u7684\u6700\u5927\u7269\u54c1\u4ef7\u503c\u4e3a ", "\"", "\"", "\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\u7684\u6700\u5927\u7269\u54c1\u4ef7\u503c\u4e3a ", "\"", "int", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 263, "ast_depth": 10, "n_identifiers": 14, "vocab_size": 48}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_dynamic_programming/min_path_sum.cpp#10-24", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_dynamic_programming/min_path_sum.cpp", "language": "Java"}, "method": {"name": "minPathSumDFS", "qualified_name": "codes.cpp.chapter_dynamic_programming.min_path_sum.cpp#minPathSumDFS", "start_line": 10, "end_line": 24, "signature": "minPathSumDFS(vector<vector<int>> &grid, int i, int j)", "original_code": "int minPathSumDFS(vector<vector<int>> &grid, int i, int j) {\n    // \u82e5\u4e3a\u5de6\u4e0a\u89d2\u5355\u5143\u683c\uff0c\u5219\u7ec8\u6b62\u641c\u7d22\n    if (i == 0 && j == 0) {\n        return grid[0][0];\n    }\n    // \u82e5\u884c\u5217\u7d22\u5f15\u8d8a\u754c\uff0c\u5219\u8fd4\u56de +\u221e \u4ee3\u4ef7\n    if (i < 0 || j < 0) {\n        return INT_MAX;\n    }\n    // \u8ba1\u7b97\u4ece\u5de6\u4e0a\u89d2\u5230 (i-1, j) \u548c (i, j-1) \u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7\n    int up = minPathSumDFS(grid, i - 1, j);\n    int left = minPathSumDFS(grid, i, j - 1);\n    // \u8fd4\u56de\u4ece\u5de6\u4e0a\u89d2\u5230 (i, j) \u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7\n    return min(left, up) != INT_MAX ? min(left, up) + grid[i][j] : INT_MAX;\n}", "doc_comment": "/* \u6700\u5c0f\u8def\u5f84\u548c\uff1a\u66b4\u529b\u641c\u7d22 */"}, "code_tokens": ["minPathSumDFS", "int", "(", ",", ",", ")", "{", "// \u82e5\u4e3a\u5de6\u4e0a\u89d2\u5355\u5143\u683c\uff0c\u5219\u7ec8\u6b62\u641c\u7d22", "// \u82e5\u884c\u5217\u7d22\u5f15\u8d8a\u754c\uff0c\u5219\u8fd4\u56de +\u221e \u4ee3\u4ef7", "// \u8ba1\u7b97\u4ece\u5de6\u4e0a\u89d2\u5230 (i-1, j) \u548c (i, j-1) \u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7", "// \u8fd4\u56de\u4ece\u5de6\u4e0a\u89d2\u5230 (i, j) \u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7", "}", "grid", "i", "j", "if", "if", ";", ";", "return", ";", "vector", "&", "int", "int", "(", ")", "{", "}", "(", ")", "{", "}", "int", "up", "=", "int", "left", "=", "?", ":", "INT_MAX", "<", ">", "&&", "return", ";", "||", "return", "INT_MAX", ";", "minPathSumDFS", "minPathSumDFS", "!=", "INT_MAX", "+", "vector", "i", "==", "0", "j", "==", "0", "[", "0", "]", "i", "<", "0", "j", "<", "0", "(", "grid", ",", ",", "j", ")", "(", "grid", ",", "i", ",", ")", "min", "min", "[", "j", "]", "<", ">", "grid", "[", "0", "]", "i", "-", "1", "j", "-", "1", "(", "left", ",", "up", ")", "(", "left", ",", "up", ")", "grid", "[", "i", "]", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 170, "ast_depth": 10, "n_identifiers": 8, "vocab_size": 38}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_dynamic_programming/min_path_sum.cpp#27-46", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_dynamic_programming/min_path_sum.cpp", "language": "Java"}, "method": {"name": "minPathSumDFSMem", "qualified_name": "codes.cpp.chapter_dynamic_programming.min_path_sum.cpp#minPathSumDFSMem", "start_line": 27, "end_line": 46, "signature": "minPathSumDFSMem(vector<vector<int>> &grid, vector<vector<int>> &mem, int i, int j)", "original_code": "int minPathSumDFSMem(vector<vector<int>> &grid, vector<vector<int>> &mem, int i, int j) {\n    // \u82e5\u4e3a\u5de6\u4e0a\u89d2\u5355\u5143\u683c\uff0c\u5219\u7ec8\u6b62\u641c\u7d22\n    if (i == 0 && j == 0) {\n        return grid[0][0];\n    }\n    // \u82e5\u884c\u5217\u7d22\u5f15\u8d8a\u754c\uff0c\u5219\u8fd4\u56de +\u221e \u4ee3\u4ef7\n    if (i < 0 || j < 0) {\n        return INT_MAX;\n    }\n    // \u82e5\u5df2\u6709\u8bb0\u5f55\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\n    if (mem[i][j] != -1) {\n        return mem[i][j];\n    }\n    // \u5de6\u8fb9\u548c\u4e0a\u8fb9\u5355\u5143\u683c\u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7\n    int up = minPathSumDFSMem(grid, mem, i - 1, j);\n    int left = minPathSumDFSMem(grid, mem, i, j - 1);\n    // \u8bb0\u5f55\u5e76\u8fd4\u56de\u5de6\u4e0a\u89d2\u5230 (i, j) \u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7\n    mem[i][j] = min(left, up) != INT_MAX ? min(left, up) + grid[i][j] : INT_MAX;\n    return mem[i][j];\n}", "doc_comment": "/* \u6700\u5c0f\u8def\u5f84\u548c\uff1a\u8bb0\u5fc6\u5316\u641c\u7d22 */"}, "code_tokens": ["minPathSumDFSMem", "int", "(", ",", ",", ",", ")", "{", "// \u82e5\u4e3a\u5de6\u4e0a\u89d2\u5355\u5143\u683c\uff0c\u5219\u7ec8\u6b62\u641c\u7d22", "// \u82e5\u884c\u5217\u7d22\u5f15\u8d8a\u754c\uff0c\u5219\u8fd4\u56de +\u221e \u4ee3\u4ef7", "// \u82e5\u5df2\u6709\u8bb0\u5f55\uff0c\u5219\u76f4\u63a5\u8fd4\u56de", "// \u5de6\u8fb9\u548c\u4e0a\u8fb9\u5355\u5143\u683c\u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7", "// \u8bb0\u5f55\u5e76\u8fd4\u56de\u5de6\u4e0a\u89d2\u5230 (i, j) \u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7", "}", "grid", "mem", "i", "j", "if", "if", "if", ";", ";", ";", "return", ";", "vector", "&", "vector", "&", "int", "int", "(", ")", "{", "}", "(", ")", "{", "}", "(", ")", "{", "}", "int", "up", "=", "int", "left", "=", "=", "[", "j", "]", "<", ">", "<", ">", "&&", "return", ";", "||", "return", "INT_MAX", ";", "!=", "return", ";", "minPathSumDFSMem", "minPathSumDFSMem", "[", "j", "]", "?", ":", "INT_MAX", "mem", "[", "i", "]", "vector", "vector", "i", "==", "0", "j", "==", "0", "[", "0", "]", "i", "<", "0", "j", "<", "0", "[", "j", "]", "-", "1", "[", "j", "]", "(", "grid", ",", "mem", ",", ",", "j", ")", "(", "grid", ",", "mem", ",", "i", ",", ")", "mem", "[", "i", "]", "!=", "INT_MAX", "+", "<", ">", "<", ">", "grid", "[", "0", "]", "mem", "[", "i", "]", "mem", "[", "i", "]", "i", "-", "1", "j", "-", "1", "min", "min", "[", "j", "]", "int", "int", "(", "left", ",", "up", ")", "(", "left", ",", "up", ")", "grid", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 248, "ast_depth": 10, "n_identifiers": 9, "vocab_size": 40}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_dynamic_programming/min_path_sum.cpp#49-69", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_dynamic_programming/min_path_sum.cpp", "language": "Java"}, "method": {"name": "minPathSumDP", "qualified_name": "codes.cpp.chapter_dynamic_programming.min_path_sum.cpp#minPathSumDP", "start_line": 49, "end_line": 69, "signature": "minPathSumDP(vector<vector<int>> &grid)", "original_code": "int minPathSumDP(vector<vector<int>> &grid) {\n    int n = grid.size(), m = grid[0].size();\n    // \u521d\u59cb\u5316 dp \u8868\n    vector<vector<int>> dp(n, vector<int>(m));\n    dp[0][0] = grid[0][0];\n    // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c\n    for (int j = 1; j < m; j++) {\n        dp[0][j] = dp[0][j - 1] + grid[0][j];\n    }\n    // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u5217\n    for (int i = 1; i < n; i++) {\n        dp[i][0] = dp[i - 1][0] + grid[i][0];\n    }\n    // \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\u548c\u5217\n    for (int i = 1; i < n; i++) {\n        for (int j = 1; j < m; j++) {\n            dp[i][j] = min(dp[i][j - 1], dp[i - 1][j]) + grid[i][j];\n        }\n    }\n    return dp[n - 1][m - 1];\n}", "doc_comment": "/* \u6700\u5c0f\u8def\u5f84\u548c\uff1a\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["minPathSumDP", "int", "(", ")", "{", "// \u521d\u59cb\u5316 dp \u8868", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u5217", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\u548c\u5217", "}", "grid", ",", ";", "", ";", ";", "for", "(", ";", ")", "for", "(", ";", ")", "for", "(", ";", ")", "return", ";", "vector", "&", "int", "n", "=", "m", "=", "vector", "dp", "(", ")", "=", ";", "j", "<", "m", "j", "++", "{", "}", ";", "i", "<", "n", "i", "++", "{", "}", ";", "i", "<", "n", "i", "++", "{", "}", "[", "]", "<", ">", "grid", ".", "size", ".", "size", "<", ">", "n", ">", "[", "0", "]", "[", "0", "]", "int", "j", "=", "1", ";", "int", "i", "=", "1", ";", "int", "i", "=", "1", "for", "(", ";", ")", "dp", "[", "]", "m", "-", "1", "vector", "(", ")", "grid", "[", "0", "]", "(", ")", "vector", ",", "vector", "<", "int", "(", "m", ")", "dp", "[", "0", "]", "grid", "[", "0", "]", "=", "=", ";", "j", "<", "m", "j", "++", "{", "}", "n", "-", "1", "<", ">", "<", ">", "[", "j", "]", "+", "[", "0", "]", "+", "int", "j", "=", "1", ";", "int", "int", "dp", "[", "0", "]", "[", "]", "[", "j", "]", "dp", "[", "i", "]", "[", "0", "]", "[", "0", "]", "=", "dp", "[", "0", "]", "j", "-", "1", "grid", "[", "0", "]", "dp", "[", "]", "grid", "[", "i", "]", "[", "j", "]", "+", "i", "-", "1", "dp", "[", "i", "]", "min", "[", "j", "]", "(", ",", ")", "grid", "[", "i", "]", "[", "]", "[", "j", "]", "dp", "[", "i", "]", "j", "-", "1", "dp", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 351, "ast_depth": 16, "n_identifiers": 10, "vocab_size": 36}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_dynamic_programming/min_path_sum.cpp#72-91", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_dynamic_programming/min_path_sum.cpp", "language": "Java"}, "method": {"name": "minPathSumDPComp", "qualified_name": "codes.cpp.chapter_dynamic_programming.min_path_sum.cpp#minPathSumDPComp", "start_line": 72, "end_line": 91, "signature": "minPathSumDPComp(vector<vector<int>> &grid)", "original_code": "int minPathSumDPComp(vector<vector<int>> &grid) {\n    int n = grid.size(), m = grid[0].size();\n    // \u521d\u59cb\u5316 dp \u8868\n    vector<int> dp(m);\n    // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c\n    dp[0] = grid[0][0];\n    for (int j = 1; j < m; j++) {\n        dp[j] = dp[j - 1] + grid[0][j];\n    }\n    // \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\n    for (int i = 1; i < n; i++) {\n        // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u5217\n        dp[0] = dp[0] + grid[i][0];\n        // \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u5217\n        for (int j = 1; j < m; j++) {\n            dp[j] = min(dp[j - 1], dp[j]) + grid[i][j];\n        }\n    }\n    return dp[m - 1];\n}", "doc_comment": "/* \u6700\u5c0f\u8def\u5f84\u548c\uff1a\u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["minPathSumDPComp", "int", "(", ")", "{", "// \u521d\u59cb\u5316 dp \u8868", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c", "}", "grid", ",", ";", "", ";", ";", "for", "(", ";", ")", "for", "(", ";", ")", "return", ";", "vector", "&", "int", "n", "=", "m", "=", "vector", "dp", "(", "m", ")", "=", ";", "j", "<", "m", "j", "++", "{", "}", ";", "i", "<", "n", "i", "++", "{", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u5217", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u5217", "}", "dp", "[", "]", "<", ">", "grid", ".", "size", ".", "size", "<", ">", "dp", "[", "0", "]", "[", "0", "]", "int", "j", "=", "1", ";", "int", "i", "=", "1", ";", "for", "(", ";", ")", "m", "-", "1", "vector", "(", ")", "grid", "[", "0", "]", "(", ")", "int", "grid", "[", "0", "]", "=", "=", ";", "j", "<", "m", "j", "++", "{", "}", "<", ">", "dp", "[", "j", "]", "+", "dp", "[", "0", "]", "+", "int", "j", "=", "1", ";", "int", "dp", "[", "]", "[", "j", "]", "dp", "[", "0", "]", "[", "0", "]", "=", "j", "-", "1", "grid", "[", "0", "]", "grid", "[", "i", "]", "dp", "[", "j", "]", "+", "min", "[", "j", "]", "(", ",", ")", "grid", "[", "i", "]", "dp", "[", "]", "dp", "[", "j", "]", "j", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 268, "ast_depth": 15, "n_identifiers": 9, "vocab_size": 37}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_dynamic_programming/min_path_sum.cpp#94-116", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_dynamic_programming/min_path_sum.cpp", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.cpp.chapter_dynamic_programming.min_path_sum.cpp#main", "start_line": 94, "end_line": 116, "signature": "main()", "original_code": "int main() {\n    vector<vector<int>> grid = {{1, 3, 1, 5}, {2, 2, 4, 2}, {5, 3, 2, 1}, {4, 3, 5, 2}};\n    int n = grid.size(), m = grid[0].size();\n\n    // \u66b4\u529b\u641c\u7d22\n    int res = minPathSumDFS(grid, n - 1, m - 1);\n    cout << \"\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a \" << res << endl;\n\n    // \u8bb0\u5fc6\u5316\u641c\u7d22\n    vector<vector<int>> mem(n, vector<int>(m, -1));\n    res = minPathSumDFSMem(grid, mem, n - 1, m - 1);\n    cout << \"\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a \" << res << endl;\n\n    // \u52a8\u6001\u89c4\u5212\n    res = minPathSumDP(grid);\n    cout << \"\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a \" << res << endl;\n\n    // \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212\n    res = minPathSumDPComp(grid);\n    cout << \"\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a \" << res << endl;\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "// \u66b4\u529b\u641c\u7d22", "// \u8bb0\u5fc6\u5316\u641c\u7d22", "// \u52a8\u6001\u89c4\u5212", "// \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212", "}", ";", ",", ";", ";", ";", "", ";", ";", ";", ";", ";", ";", ";", "return", "0", ";", "vector", "grid", "=", "int", "n", "=", "m", "=", "int", "res", "=", "<<", "endl", "vector", "mem", "(", ")", "res", "=", "<<", "endl", "res", "=", "<<", "endl", "res", "=", "<<", "endl", "<", ">", "{", ",", ",", ",", "}", "grid", ".", "size", ".", "size", "minPathSumDFS", "<<", "res", "<", ">", "n", ">", "minPathSumDFSMem", "<<", "res", "minPathSumDP", "<<", "res", "minPathSumDPComp", "<<", "res", "vector", "{", "1", ",", "3", ",", "1", ",", "5", "}", "{", "2", ",", "2", ",", "4", ",", "2", "}", "{", "5", ",", "3", ",", "2", ",", "1", "}", "{", "4", ",", "3", ",", "5", ",", "2", "}", "(", ")", "grid", "[", "0", "]", "(", ")", "(", "grid", ",", ",", ")", "cout", "<<", "vector", ",", "vector", "<", "int", "(", ")", "(", "grid", ",", "mem", ",", ",", ")", "cout", "<<", "(", "grid", ")", "cout", "<<", "(", "grid", ")", "cout", "<<", "<", ">", "n", "-", "1", "m", "-", "1", "\"", "\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a ", "\"", "<", ">", "m", "-", "1", "n", "-", "1", "m", "-", "1", "\"", "\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a ", "\"", "\"", "\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a ", "\"", "\"", "\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a ", "\"", "int", "int", ","], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 277, "ast_depth": 10, "n_identifiers": 14, "vocab_size": 43}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_graph/graph_adjacency_list.cpp#36-38", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_graph/graph_adjacency_list.cpp", "language": "Java"}, "method": {"name": "size", "qualified_name": "codes.cpp.chapter_graph.graph_adjacency_list.cpp#size", "start_line": 36, "end_line": 38, "signature": "size()", "original_code": "int size() {\n        return adjList.size();\n    }", "doc_comment": "/* \u83b7\u53d6\u9876\u70b9\u6570\u91cf */"}, "code_tokens": ["size", "int", "(", ")", "{", "}", "return", ";", "adjList", ".", "size", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 21, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 10}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_graph/graph_adjacency_list.cpp#41-47", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_graph/graph_adjacency_list.cpp", "language": "Java"}, "method": {"name": "addEdge", "qualified_name": "codes.cpp.chapter_graph.graph_adjacency_list.cpp#addEdge", "start_line": 41, "end_line": 47, "signature": "addEdge(Vertex *vet1, Vertex *vet2)", "original_code": "void addEdge(Vertex *vet1, Vertex *vet2) {\n        if (!adjList.count(vet1) || !adjList.count(vet2) || vet1 == vet2)\n            throw invalid_argument(\"\u4e0d\u5b58\u5728\u9876\u70b9\");\n        // \u6dfb\u52a0\u8fb9 vet1 - vet2\n        adjList[vet1].push_back(vet2);\n        adjList[vet2].push_back(vet1);\n    }", "doc_comment": "/* \u6dfb\u52a0\u8fb9 */"}, "code_tokens": ["void", "addEdge", "(", ",", ")", "{", "// \u6dfb\u52a0\u8fb9 vet1 - vet2", "}", "Vertex", "vet1", "Vertex", "vet2", "if", ";", ";", "*", "*", "(", ")", "throw", ";", ".", "push_back", ".", "push_back", "||", "invalid_argument", "adjList", "[", "vet1", "]", "(", "vet2", ")", "adjList", "[", "vet2", "]", "(", "vet1", ")", "||", "vet1", "==", "vet2", "(", ")", "!", "!", "\"", "\u4e0d\u5b58\u5728\u9876\u70b9", "\"", "adjList", ".", "count", "adjList", ".", "count", "(", "vet1", ")", "(", "vet2", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 95, "ast_depth": 11, "n_identifiers": 7, "vocab_size": 27}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_graph/graph_adjacency_list.cpp#50-56", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_graph/graph_adjacency_list.cpp", "language": "Java"}, "method": {"name": "removeEdge", "qualified_name": "codes.cpp.chapter_graph.graph_adjacency_list.cpp#removeEdge", "start_line": 50, "end_line": 56, "signature": "removeEdge(Vertex *vet1, Vertex *vet2)", "original_code": "void removeEdge(Vertex *vet1, Vertex *vet2) {\n        if (!adjList.count(vet1) || !adjList.count(vet2) || vet1 == vet2)\n            throw invalid_argument(\"\u4e0d\u5b58\u5728\u9876\u70b9\");\n        // \u5220\u9664\u8fb9 vet1 - vet2\n        remove(adjList[vet1], vet2);\n        remove(adjList[vet2], vet1);\n    }", "doc_comment": "/* \u5220\u9664\u8fb9 */"}, "code_tokens": ["void", "removeEdge", "(", ",", ")", "{", "// \u5220\u9664\u8fb9 vet1 - vet2", "}", "Vertex", "vet1", "Vertex", "vet2", "if", ";", ";", "*", "*", "(", ")", "throw", ";", "remove", "remove", "||", "invalid_argument", "(", ",", "vet2", ")", "(", ",", "vet1", ")", "||", "vet1", "==", "vet2", "(", ")", "adjList", "[", "vet1", "]", "adjList", "[", "vet2", "]", "!", "!", "\"", "\u4e0d\u5b58\u5728\u9876\u70b9", "\"", "adjList", ".", "count", "adjList", ".", "count", "(", "vet1", ")", "(", "vet2", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 95, "ast_depth": 11, "n_identifiers": 7, "vocab_size": 27}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_graph/graph_adjacency_list.cpp#59-64", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_graph/graph_adjacency_list.cpp", "language": "Java"}, "method": {"name": "addVertex", "qualified_name": "codes.cpp.chapter_graph.graph_adjacency_list.cpp#addVertex", "start_line": 59, "end_line": 64, "signature": "addVertex(Vertex *vet)", "original_code": "void addVertex(Vertex *vet) {\n        if (adjList.count(vet))\n            return;\n        // \u5728\u90bb\u63a5\u8868\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u65b0\u94fe\u8868\n        adjList[vet] = vector<Vertex *>();\n    }", "doc_comment": "/* \u6dfb\u52a0\u9876\u70b9 */"}, "code_tokens": ["void", "addVertex", "(", ")", "{", "// \u5728\u90bb\u63a5\u8868\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u65b0\u94fe\u8868", "}", "Vertex", "vet", "if", ";", "*", "(", ")", "return", ";", "=", "*", ">", "adjList", ".", "count", "adjList", "[", "vet", "]", "vector", "<", "Vertex", "(", ")", "(", "vet", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 51, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 22}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_graph/graph_adjacency_matrix.cpp#29-31", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_graph/graph_adjacency_matrix.cpp", "language": "Java"}, "method": {"name": "size", "qualified_name": "codes.cpp.chapter_graph.graph_adjacency_matrix.cpp#size", "start_line": 29, "end_line": 31, "signature": "size()", "original_code": "int size() const {\n        return vertices.size();\n    }", "doc_comment": "/* \u83b7\u53d6\u9876\u70b9\u6570\u91cf */"}, "code_tokens": ["size", "int", "(", ")", "const", "{", "}", "return", ";", "vertices", ".", "size", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 23, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 11}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_graph/graph_adjacency_matrix.cpp#34-44", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_graph/graph_adjacency_matrix.cpp", "language": "Java"}, "method": {"name": "addVertex", "qualified_name": "codes.cpp.chapter_graph.graph_adjacency_matrix.cpp#addVertex", "start_line": 34, "end_line": 44, "signature": "addVertex(int val)", "original_code": "void addVertex(int val) {\n        int n = size();\n        // \u5411\u9876\u70b9\u5217\u8868\u4e2d\u6dfb\u52a0\u65b0\u9876\u70b9\u7684\u503c\n        vertices.push_back(val);\n        // \u5728\u90bb\u63a5\u77e9\u9635\u4e2d\u6dfb\u52a0\u4e00\u884c\n        adjMat.emplace_back(vector<int>(n, 0));\n        // \u5728\u90bb\u63a5\u77e9\u9635\u4e2d\u6dfb\u52a0\u4e00\u5217\n        for (vector<int> &row : adjMat) {\n            row.push_back(0);\n        }\n    }", "doc_comment": "/* \u6dfb\u52a0\u9876\u70b9 */"}, "code_tokens": ["void", "addVertex", "(", ")", "{", "// \u5411\u9876\u70b9\u5217\u8868\u4e2d\u6dfb\u52a0\u65b0\u9876\u70b9\u7684\u503c", "// \u5728\u90bb\u63a5\u77e9\u9635\u4e2d\u6dfb\u52a0\u4e00\u884c", "// \u5728\u90bb\u63a5\u77e9\u9635\u4e2d\u6dfb\u52a0\u4e00\u5217", "}", "val", ";", ";", ";", "for", "(", "row", ":", "adjMat", ")", "int", "int", "n", "=", "vertices", ".", "push_back", "adjMat", ".", "emplace_back", "vector", "&", "{", "}", "size", "(", "val", ")", "(", ")", "<", ">", ";", "(", ")", "(", "0", ")", "int", "row", ".", "push_back", "vector", "n", ",", "(", "0", ")", "<", ">", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 92, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 29}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_graph/graph_adjacency_matrix.cpp#47-59", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_graph/graph_adjacency_matrix.cpp", "language": "Java"}, "method": {"name": "removeVertex", "qualified_name": "codes.cpp.chapter_graph.graph_adjacency_matrix.cpp#removeVertex", "start_line": 47, "end_line": 59, "signature": "removeVertex(int index)", "original_code": "void removeVertex(int index) {\n        if (index >= size()) {\n            throw out_of_range(\"\u9876\u70b9\u4e0d\u5b58\u5728\");\n        }\n        // \u5728\u9876\u70b9\u5217\u8868\u4e2d\u79fb\u9664\u7d22\u5f15 index \u7684\u9876\u70b9\n        vertices.erase(vertices.begin() + index);\n        // \u5728\u90bb\u63a5\u77e9\u9635\u4e2d\u5220\u9664\u7d22\u5f15 index \u7684\u884c\n        adjMat.erase(adjMat.begin() + index);\n        // \u5728\u90bb\u63a5\u77e9\u9635\u4e2d\u5220\u9664\u7d22\u5f15 index \u7684\u5217\n        for (vector<int> &row : adjMat) {\n            row.erase(row.begin() + index);\n        }\n    }", "doc_comment": "/* \u5220\u9664\u9876\u70b9 */"}, "code_tokens": ["void", "removeVertex", "(", ")", "{", "// \u5728\u9876\u70b9\u5217\u8868\u4e2d\u79fb\u9664\u7d22\u5f15 index \u7684\u9876\u70b9", "// \u5728\u90bb\u63a5\u77e9\u9635\u4e2d\u5220\u9664\u7d22\u5f15 index \u7684\u884c", "// \u5728\u90bb\u63a5\u77e9\u9635\u4e2d\u5220\u9664\u7d22\u5f15 index \u7684\u5217", "}", "index", "if", ";", ";", "for", "(", "row", ":", "adjMat", ")", "int", "(", ")", "{", "}", "vertices", ".", "erase", "adjMat", ".", "erase", "vector", "&", "{", "}", "index", ">=", "throw", ";", "(", ")", "(", ")", "<", ">", ";", "size", "out_of_range", "+", "index", "+", "index", "int", "row", ".", "erase", "(", ")", "(", ")", "vertices", ".", "begin", "adjMat", ".", "begin", "(", ")", "\"", "\u9876\u70b9\u4e0d\u5b58\u5728", "\"", "(", ")", "(", ")", "+", "index", "row", ".", "begin", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 121, "ast_depth": 12, "n_identifiers": 9, "vocab_size": 32}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_graph/graph_adjacency_matrix.cpp#63-71", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_graph/graph_adjacency_matrix.cpp", "language": "Java"}, "method": {"name": "addEdge", "qualified_name": "codes.cpp.chapter_graph.graph_adjacency_matrix.cpp#addEdge", "start_line": 63, "end_line": 71, "signature": "addEdge(int i, int j)", "original_code": "void addEdge(int i, int j) {\n        // \u7d22\u5f15\u8d8a\u754c\u4e0e\u76f8\u7b49\u5904\u7406\n        if (i < 0 || j < 0 || i >= size() || j >= size() || i == j) {\n            throw out_of_range(\"\u9876\u70b9\u4e0d\u5b58\u5728\");\n        }\n        // \u5728\u65e0\u5411\u56fe\u4e2d\uff0c\u90bb\u63a5\u77e9\u9635\u5173\u4e8e\u4e3b\u5bf9\u89d2\u7ebf\u5bf9\u79f0\uff0c\u5373\u6ee1\u8db3 (i, j) == (j, i)\n        adjMat[i][j] = 1;\n        adjMat[j][i] = 1;\n    }", "doc_comment": "// \u53c2\u6570 i, j \u5bf9\u5e94 vertices \u5143\u7d20\u7d22\u5f15"}, "code_tokens": ["void", "addEdge", "(", ",", ")", "{", "// \u7d22\u5f15\u8d8a\u754c\u4e0e\u76f8\u7b49\u5904\u7406", "// \u5728\u65e0\u5411\u56fe\u4e2d\uff0c\u90bb\u63a5\u77e9\u9635\u5173\u4e8e\u4e3b\u5bf9\u89d2\u7ebf\u5bf9\u79f0\uff0c\u5373\u6ee1\u8db3 (i, j) == (j, i)", "}", "i", "j", "if", ";", ";", "int", "int", "(", ")", "{", "}", "=", "1", "=", "1", "||", "throw", ";", "[", "j", "]", "[", "i", "]", "||", "i", "==", "j", "out_of_range", "adjMat", "[", "i", "]", "adjMat", "[", "j", "]", "||", "j", ">=", "(", ")", "||", "i", ">=", "size", "\"", "\u9876\u70b9\u4e0d\u5b58\u5728", "\"", "i", "<", "0", "j", "<", "0", "size", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 105, "ast_depth": 12, "n_identifiers": 6, "vocab_size": 29}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_graph/graph_adjacency_matrix.cpp#75-82", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_graph/graph_adjacency_matrix.cpp", "language": "Java"}, "method": {"name": "removeEdge", "qualified_name": "codes.cpp.chapter_graph.graph_adjacency_matrix.cpp#removeEdge", "start_line": 75, "end_line": 82, "signature": "removeEdge(int i, int j)", "original_code": "void removeEdge(int i, int j) {\n        // \u7d22\u5f15\u8d8a\u754c\u4e0e\u76f8\u7b49\u5904\u7406\n        if (i < 0 || j < 0 || i >= size() || j >= size() || i == j) {\n            throw out_of_range(\"\u9876\u70b9\u4e0d\u5b58\u5728\");\n        }\n        adjMat[i][j] = 0;\n        adjMat[j][i] = 0;\n    }", "doc_comment": "// \u53c2\u6570 i, j \u5bf9\u5e94 vertices \u5143\u7d20\u7d22\u5f15"}, "code_tokens": ["void", "removeEdge", "(", ",", ")", "{", "// \u7d22\u5f15\u8d8a\u754c\u4e0e\u76f8\u7b49\u5904\u7406", "}", "i", "j", "if", ";", ";", "int", "int", "(", ")", "{", "}", "=", "0", "=", "0", "||", "throw", ";", "[", "j", "]", "[", "i", "]", "||", "i", "==", "j", "out_of_range", "adjMat", "[", "i", "]", "adjMat", "[", "j", "]", "||", "j", ">=", "(", ")", "||", "i", ">=", "size", "\"", "\u9876\u70b9\u4e0d\u5b58\u5728", "\"", "i", "<", "0", "j", "<", "0", "size", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 104, "ast_depth": 12, "n_identifiers": 6, "vocab_size": 27}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_graph/graph_adjacency_matrix.cpp#85-90", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_graph/graph_adjacency_matrix.cpp", "language": "Java"}, "method": {"name": "print", "qualified_name": "codes.cpp.chapter_graph.graph_adjacency_matrix.cpp#print", "start_line": 85, "end_line": 90, "signature": "print()", "original_code": "void print() {\n        cout << \"\u9876\u70b9\u5217\u8868 = \";\n        printVector(vertices);\n        cout << \"\u90bb\u63a5\u77e9\u9635 =\" << endl;\n        printVectorMatrix(adjMat);\n    }", "doc_comment": "/* \u6253\u5370\u90bb\u63a5\u77e9\u9635 */"}, "code_tokens": ["void", "print", "(", ")", "{", "}", ";", ";", ";", ";", "cout", "<<", "printVector", "<<", "endl", "printVectorMatrix", "\"", "\u9876\u70b9\u5217\u8868 = ", "\"", "(", "vertices", ")", "cout", "<<", "(", "adjMat", ")", "\"", "\u90bb\u63a5\u77e9\u9635 =", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 47, "ast_depth": 8, "n_identifiers": 7, "vocab_size": 17}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_graph/graph_adjacency_matrix.cpp#94-127", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_graph/graph_adjacency_matrix.cpp", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.cpp.chapter_graph.graph_adjacency_matrix.cpp#main", "start_line": 94, "end_line": 127, "signature": "main()", "original_code": "int main() {\n    /* \u521d\u59cb\u5316\u65e0\u5411\u56fe */\n    // \u8bf7\u6ce8\u610f\uff0cedges \u5143\u7d20\u4ee3\u8868\u9876\u70b9\u7d22\u5f15\uff0c\u5373\u5bf9\u5e94 vertices \u5143\u7d20\u7d22\u5f15\n    vector<int> vertices = {1, 3, 2, 5, 4};\n    vector<vector<int>> edges = {{0, 1}, {0, 3}, {1, 2}, {2, 3}, {2, 4}, {3, 4}};\n    GraphAdjMat graph(vertices, edges);\n    cout << \"\\n\u521d\u59cb\u5316\u540e\uff0c\u56fe\u4e3a\" << endl;\n    graph.print();\n\n    /* \u6dfb\u52a0\u8fb9 */\n    // \u9876\u70b9 1, 2 \u7684\u7d22\u5f15\u5206\u522b\u4e3a 0, 2\n    graph.addEdge(0, 2);\n    cout << \"\\n\u6dfb\u52a0\u8fb9 1-2 \u540e\uff0c\u56fe\u4e3a\" << endl;\n    graph.print();\n\n    /* \u5220\u9664\u8fb9 */\n    // \u9876\u70b9 1, 3 \u7684\u7d22\u5f15\u5206\u522b\u4e3a 0, 1\n    graph.removeEdge(0, 1);\n    cout << \"\\n\u5220\u9664\u8fb9 1-3 \u540e\uff0c\u56fe\u4e3a\" << endl;\n    graph.print();\n\n    /* \u6dfb\u52a0\u9876\u70b9 */\n    graph.addVertex(6);\n    cout << \"\\n\u6dfb\u52a0\u9876\u70b9 6 \u540e\uff0c\u56fe\u4e3a\" << endl;\n    graph.print();\n\n    /* \u5220\u9664\u9876\u70b9 */\n    // \u9876\u70b9 3 \u7684\u7d22\u5f15\u4e3a 1\n    graph.removeVertex(1);\n    cout << \"\\n\u5220\u9664\u9876\u70b9 3 \u540e\uff0c\u56fe\u4e3a\" << endl;\n    graph.print();\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "/* \u521d\u59cb\u5316\u65e0\u5411\u56fe */", "// \u8bf7\u6ce8\u610f\uff0cedges \u5143\u7d20\u4ee3\u8868\u9876\u70b9\u7d22\u5f15\uff0c\u5373\u5bf9\u5e94 vertices \u5143\u7d20\u7d22\u5f15", ";", "/* \u6dfb\u52a0\u8fb9 */", "// \u9876\u70b9 1, 2 \u7684\u7d22\u5f15\u5206\u522b\u4e3a 0, 2", "/* \u5220\u9664\u8fb9 */", "// \u9876\u70b9 1, 3 \u7684\u7d22\u5f15\u5206\u522b\u4e3a 0, 1", "/* \u6dfb\u52a0\u9876\u70b9 */", "/* \u5220\u9664\u9876\u70b9 */", "// \u9876\u70b9 3 \u7684\u7d22\u5f15\u4e3a 1", "}", ";", ";", "GraphAdjMat", "", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "return", "0", ";", "vector", "vertices", "=", "vector", "edges", "=", "graph", "(", "vertices", ",", "edges", ")", "<<", "endl", "graph", ".", "print", "graph", ".", "addEdge", "<<", "endl", "graph", ".", "print", "graph", ".", "removeEdge", "<<", "endl", "graph", ".", "print", "graph", ".", "addVertex", "<<", "endl", "graph", ".", "print", "graph", ".", "removeVertex", "<<", "endl", "graph", ".", "print", "<", ">", "{", "1", ",", "3", ",", "2", ",", "5", ",", "4", "}", "<", ">", "{", ",", ",", ",", ",", ",", "}", "cout", "<<", "(", ")", "(", "0", ",", "2", ")", "cout", "<<", "(", ")", "(", "0", ",", "1", ")", "cout", "<<", "(", ")", "(", "6", ")", "cout", "<<", "(", ")", "(", "1", ")", "cout", "<<", "(", ")", "int", "vector", "{", "0", ",", "1", "}", "{", "0", ",", "3", "}", "{", "1", ",", "2", "}", "{", "2", ",", "3", "}", "{", "2", ",", "4", "}", "{", "3", ",", "4", "}", "\"", "\\n", "\u521d\u59cb\u5316\u540e\uff0c\u56fe\u4e3a", "\"", "\"", "\\n", "\u6dfb\u52a0\u8fb9 1-2 \u540e\uff0c\u56fe\u4e3a", "\"", "\"", "\\n", "\u5220\u9664\u8fb9 1-3 \u540e\uff0c\u56fe\u4e3a", "\"", "\"", "\\n", "\u6dfb\u52a0\u9876\u70b9 6 \u540e\uff0c\u56fe\u4e3a", "\"", "\"", "\\n", "\u5220\u9664\u9876\u70b9 3 \u540e\uff0c\u56fe\u4e3a", "\"", "<", ">", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 276, "ast_depth": 10, "n_identifiers": 11, "vocab_size": 50}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_hashing/array_hash_map.cpp#40-43", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_hashing/array_hash_map.cpp", "language": "Java"}, "method": {"name": "hashFunc", "qualified_name": "codes.cpp.chapter_hashing.array_hash_map.cpp#hashFunc", "start_line": 40, "end_line": 43, "signature": "hashFunc(int key)", "original_code": "int hashFunc(int key) {\n        int index = key % 100;\n        return index;\n    }", "doc_comment": "/* \u54c8\u5e0c\u51fd\u6570 */"}, "code_tokens": ["hashFunc", "int", "(", ")", "{", "}", "key", ";", "return", "index", ";", "int", "int", "index", "=", "key", "%", "100"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 30, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 13}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_hashing/array_hash_map.cpp#46-52", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_hashing/array_hash_map.cpp", "language": "Java"}, "method": {"name": "get", "qualified_name": "codes.cpp.chapter_hashing.array_hash_map.cpp#get", "start_line": 46, "end_line": 52, "signature": "get(int key)", "original_code": "string get(int key) {\n        int index = hashFunc(key);\n        Pair *pair = buckets[index];\n        if (pair == nullptr)\n            return \"\";\n        return pair->val;\n    }", "doc_comment": "/* \u67e5\u8be2\u64cd\u4f5c */"}, "code_tokens": ["string", "get", "(", ")", "{", "}", "key", ";", ";", "if", "return", ";", "int", "int", "index", "=", "Pair", "*", "(", ")", "return", ";", "pair", "->", "val", "hashFunc", "pair", "=", "pair", "==", "nullptr", "\"", "\"", "(", "key", ")", "buckets", "[", "index", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 62, "ast_depth": 8, "n_identifiers": 9, "vocab_size": 25}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_hashing/array_hash_map.cpp#55-59", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_hashing/array_hash_map.cpp", "language": "Java"}, "method": {"name": "put", "qualified_name": "codes.cpp.chapter_hashing.array_hash_map.cpp#put", "start_line": 55, "end_line": 59, "signature": "put(int key, string val)", "original_code": "void put(int key, string val) {\n        Pair *pair = new Pair(key, val);\n        int index = hashFunc(key);\n        buckets[index] = pair;\n    }", "doc_comment": "/* \u6dfb\u52a0\u64cd\u4f5c */"}, "code_tokens": ["void", "put", "(", ",", ")", "{", "}", "key", "string", "val", ";", ";", ";", "int", "Pair", "*", "int", "index", "=", "=", "pair", "pair", "=", "hashFunc", "buckets", "[", "index", "]", "new", "Pair", "(", "key", ")", "(", "key", ",", "val", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 58, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 22}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_hashing/array_hash_map.cpp#62-67", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_hashing/array_hash_map.cpp", "language": "Java"}, "method": {"name": "remove", "qualified_name": "codes.cpp.chapter_hashing.array_hash_map.cpp#remove", "start_line": 62, "end_line": 67, "signature": "remove(int key)", "original_code": "void remove(int key) {\n        int index = hashFunc(key);\n        // \u91ca\u653e\u5185\u5b58\u5e76\u7f6e\u4e3a nullptr\n        delete buckets[index];\n        buckets[index] = nullptr;\n    }", "doc_comment": "/* \u5220\u9664\u64cd\u4f5c */"}, "code_tokens": ["void", "remove", "(", ")", "{", "// \u91ca\u653e\u5185\u5b58\u5e76\u7f6e\u4e3a nullptr", "}", "key", ";", "delete", ";", ";", "int", "int", "index", "=", "buckets", "=", "nullptr", "hashFunc", "[", "]", "buckets", "[", "index", "]", "(", "key", ")", "index"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 48, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 18}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_hashing/array_hash_map.cpp#70-78", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_hashing/array_hash_map.cpp", "language": "Java"}, "method": {"name": "pairSet", "qualified_name": "codes.cpp.chapter_hashing.array_hash_map.cpp#pairSet", "start_line": 70, "end_line": 78, "signature": "pairSet()", "original_code": "vector<Pair *> pairSet() {\n        vector<Pair *> pairSet;\n        for (Pair *pair : buckets) {\n            if (pair != nullptr) {\n                pairSet.push_back(pair);\n            }\n        }\n        return pairSet;\n    }", "doc_comment": "/* \u83b7\u53d6\u6240\u6709\u952e\u503c\u5bf9 */"}, "code_tokens": ["", "{", "}", ">", ";", "for", "(", ":", "buckets", ")", "{", "}", "return", "pairSet", ";", "vector", "<", "Pair", "*", "pairSet", ">", "pairSet", "Pair", "*", "pair", "if", "(", ")", "vector", "<", "Pair", "*", "(", ")", "{", "}", "pair", "!=", "nullptr", ";", "pairSet", ".", "push_back", "(", "pair", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 69, "ast_depth": 9, "n_identifiers": 7, "vocab_size": 22}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_hashing/array_hash_map.cpp#81-89", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_hashing/array_hash_map.cpp", "language": "Java"}, "method": {"name": "keySet", "qualified_name": "codes.cpp.chapter_hashing.array_hash_map.cpp#keySet", "start_line": 81, "end_line": 89, "signature": "keySet()", "original_code": "vector<int> keySet() {\n        vector<int> keySet;\n        for (Pair *pair : buckets) {\n            if (pair != nullptr) {\n                keySet.push_back(pair->key);\n            }\n        }\n        return keySet;\n    }", "doc_comment": "/* \u83b7\u53d6\u6240\u6709\u952e */"}, "code_tokens": ["keySet", "vector", "(", ")", "{", "}", "<", ">", ";", "for", "(", ":", "buckets", ")", "{", "}", "return", "keySet", ";", "int", "vector", "keySet", "Pair", "*", "pair", "if", "<", ">", "(", ")", "{", "}", "int", "pair", "!=", "nullptr", ";", "keySet", ".", "push_back", "(", ")", "pair", "->", "key"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 69, "ast_depth": 11, "n_identifiers": 7, "vocab_size": 24}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_hashing/array_hash_map.cpp#92-100", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_hashing/array_hash_map.cpp", "language": "Java"}, "method": {"name": "valueSet", "qualified_name": "codes.cpp.chapter_hashing.array_hash_map.cpp#valueSet", "start_line": 92, "end_line": 100, "signature": "valueSet()", "original_code": "vector<string> valueSet() {\n        vector<string> valueSet;\n        for (Pair *pair : buckets) {\n            if (pair != nullptr) {\n                valueSet.push_back(pair->val);\n            }\n        }\n        return valueSet;\n    }", "doc_comment": "/* \u83b7\u53d6\u6240\u6709\u503c */"}, "code_tokens": ["valueSet", "vector", "(", ")", "{", "}", "<", "string", ">", ";", "for", "(", ":", "buckets", ")", "{", "}", "return", "valueSet", ";", "vector", "valueSet", "Pair", "*", "pair", "if", "<", "string", ">", "(", ")", "{", "}", "pair", "!=", "nullptr", ";", "valueSet", ".", "push_back", "(", ")", "pair", "->", "val"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 67, "ast_depth": 11, "n_identifiers": 7, "vocab_size": 24}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_heap/my_heap.cpp#16-18", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_heap/my_heap.cpp", "language": "Java"}, "method": {"name": "left", "qualified_name": "codes.cpp.chapter_heap.my_heap.cpp#left", "start_line": 16, "end_line": 18, "signature": "left(int i)", "original_code": "int left(int i) {\n        return 2 * i + 1;\n    }", "doc_comment": "/* \u83b7\u53d6\u5de6\u5b50\u8282\u70b9\u7d22\u5f15 */"}, "code_tokens": ["left", "int", "(", ")", "{", "}", "i", "return", ";", "int", "+", "1", "2", "*", "i"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 25, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 13}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_heap/my_heap.cpp#21-23", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_heap/my_heap.cpp", "language": "Java"}, "method": {"name": "right", "qualified_name": "codes.cpp.chapter_heap.my_heap.cpp#right", "start_line": 21, "end_line": 23, "signature": "right(int i)", "original_code": "int right(int i) {\n        return 2 * i + 2;\n    }", "doc_comment": "/* \u83b7\u53d6\u53f3\u5b50\u8282\u70b9\u7d22\u5f15 */"}, "code_tokens": ["right", "int", "(", ")", "{", "}", "i", "return", ";", "int", "+", "2", "2", "*", "i"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 25, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 12}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_heap/my_heap.cpp#26-28", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_heap/my_heap.cpp", "language": "Java"}, "method": {"name": "parent", "qualified_name": "codes.cpp.chapter_heap.my_heap.cpp#parent", "start_line": 26, "end_line": 28, "signature": "parent(int i)", "original_code": "int parent(int i) {\n        return (i - 1) / 2; // \u5411\u4e0b\u6574\u9664\n    }", "doc_comment": "/* \u83b7\u53d6\u7236\u8282\u70b9\u7d22\u5f15 */"}, "code_tokens": ["parent", "int", "(", ")", "{", "// \u5411\u4e0b\u6574\u9664", "}", "i", "return", ";", "int", "/", "2", "(", ")", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 29, "ast_depth": 8, "n_identifiers": 2, "vocab_size": 14}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_heap/my_heap.cpp#31-43", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_heap/my_heap.cpp", "language": "Java"}, "method": {"name": "siftUp", "qualified_name": "codes.cpp.chapter_heap.my_heap.cpp#siftUp", "start_line": 31, "end_line": 43, "signature": "siftUp(int i)", "original_code": "void siftUp(int i) {\n        while (true) {\n            // \u83b7\u53d6\u8282\u70b9 i \u7684\u7236\u8282\u70b9\n            int p = parent(i);\n            // \u5f53\u201c\u8d8a\u8fc7\u6839\u8282\u70b9\u201d\u6216\u201c\u8282\u70b9\u65e0\u987b\u4fee\u590d\u201d\u65f6\uff0c\u7ed3\u675f\u5806\u5316\n            if (p < 0 || maxHeap[i] <= maxHeap[p])\n                break;\n            // \u4ea4\u6362\u4e24\u8282\u70b9\n            swap(maxHeap[i], maxHeap[p]);\n            // \u5faa\u73af\u5411\u4e0a\u5806\u5316\n            i = p;\n        }\n    }", "doc_comment": "/* \u4ece\u8282\u70b9 i \u5f00\u59cb\uff0c\u4ece\u5e95\u81f3\u9876\u5806\u5316 */"}, "code_tokens": ["void", "siftUp", "(", ")", "{", "}", "i", "while", "int", "(", "true", ")", "{", "// \u83b7\u53d6\u8282\u70b9 i \u7684\u7236\u8282\u70b9", "// \u5f53\u201c\u8d8a\u8fc7\u6839\u8282\u70b9\u201d\u6216\u201c\u8282\u70b9\u65e0\u987b\u4fee\u590d\u201d\u65f6\uff0c\u7ed3\u675f\u5806\u5316", "// \u4ea4\u6362\u4e24\u8282\u70b9", "// \u5faa\u73af\u5411\u4e0a\u5806\u5316", "}", ";", "if", ";", ";", "int", "p", "=", "(", ")", "break", ";", "swap", "i", "=", "p", "parent", "||", "(", ",", ")", "(", "i", ")", "p", "<", "0", "<=", "maxHeap", "[", "i", "]", "maxHeap", "[", "p", "]", "maxHeap", "[", "i", "]", "maxHeap", "[", "p", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 90, "ast_depth": 11, "n_identifiers": 6, "vocab_size": 29}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_heap/my_heap.cpp#46-61", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_heap/my_heap.cpp", "language": "Java"}, "method": {"name": "siftDown", "qualified_name": "codes.cpp.chapter_heap.my_heap.cpp#siftDown", "start_line": 46, "end_line": 61, "signature": "siftDown(int i)", "original_code": "void siftDown(int i) {\n        while (true) {\n            // \u5224\u65ad\u8282\u70b9 i, l, r \u4e2d\u503c\u6700\u5927\u7684\u8282\u70b9\uff0c\u8bb0\u4e3a ma\n            int l = left(i), r = right(i), ma = i;\n            if (l < size() && maxHeap[l] > maxHeap[ma])\n                ma = l;\n            if (r < size() && maxHeap[r] > maxHeap[ma])\n                ma = r;\n            // \u82e5\u8282\u70b9 i \u6700\u5927\u6216\u7d22\u5f15 l, r \u8d8a\u754c\uff0c\u5219\u65e0\u987b\u7ee7\u7eed\u5806\u5316\uff0c\u8df3\u51fa\n            if (ma == i)\n                break;\n            swap(maxHeap[i], maxHeap[ma]);\n            // \u5faa\u73af\u5411\u4e0b\u5806\u5316\n            i = ma;\n        }\n    }", "doc_comment": "/* \u4ece\u8282\u70b9 i \u5f00\u59cb\uff0c\u4ece\u9876\u81f3\u5e95\u5806\u5316 */"}, "code_tokens": ["void", "siftDown", "(", ")", "{", "}", "i", "while", "int", "(", "true", ")", "{", "// \u5224\u65ad\u8282\u70b9 i, l, r \u4e2d\u503c\u6700\u5927\u7684\u8282\u70b9\uff0c\u8bb0\u4e3a ma", "// \u82e5\u8282\u70b9 i \u6700\u5927\u6216\u7d22\u5f15 l, r \u8d8a\u754c\uff0c\u5219\u65e0\u987b\u7ee7\u7eed\u5806\u5316\uff0c\u8df3\u51fa", "// \u5faa\u73af\u5411\u4e0b\u5806\u5316", "}", ",", ",", ";", "if", "if", "if", ";", ";", "int", "l", "=", "r", "=", "ma", "=", "i", "(", ")", ";", "(", ")", ";", "(", ")", "break", ";", "swap", "i", "=", "ma", "left", "right", "&&", "ma", "=", "l", "&&", "ma", "=", "r", "ma", "==", "i", "(", ",", ")", "(", "i", ")", "(", "i", ")", "l", "<", ">", "r", "<", ">", "maxHeap", "[", "i", "]", "maxHeap", "[", "ma", "]", "size", "maxHeap", "[", "l", "]", "maxHeap", "[", "ma", "]", "size", "maxHeap", "[", "r", "]", "maxHeap", "[", "ma", "]", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 156, "ast_depth": 12, "n_identifiers": 10, "vocab_size": 32}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_heap/my_heap.cpp#75-77", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_heap/my_heap.cpp", "language": "Java"}, "method": {"name": "size", "qualified_name": "codes.cpp.chapter_heap.my_heap.cpp#size", "start_line": 75, "end_line": 77, "signature": "size()", "original_code": "int size() {\n        return maxHeap.size();\n    }", "doc_comment": "/* \u83b7\u53d6\u5806\u5927\u5c0f */"}, "code_tokens": ["size", "int", "(", ")", "{", "}", "return", ";", "maxHeap", ".", "size", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 21, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 10}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_heap/my_heap.cpp#80-82", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_heap/my_heap.cpp", "language": "Java"}, "method": {"name": "isEmpty", "qualified_name": "codes.cpp.chapter_heap.my_heap.cpp#isEmpty", "start_line": 80, "end_line": 82, "signature": "isEmpty()", "original_code": "bool isEmpty() {\n        return size() == 0;\n    }", "doc_comment": "/* \u5224\u65ad\u5806\u662f\u5426\u4e3a\u7a7a */"}, "code_tokens": ["bool", "isEmpty", "(", ")", "{", "}", "return", ";", "==", "0", "size", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 21, "ast_depth": 8, "n_identifiers": 2, "vocab_size": 11}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_heap/my_heap.cpp#85-87", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_heap/my_heap.cpp", "language": "Java"}, "method": {"name": "peek", "qualified_name": "codes.cpp.chapter_heap.my_heap.cpp#peek", "start_line": 85, "end_line": 87, "signature": "peek()", "original_code": "int peek() {\n        return maxHeap[0];\n    }", "doc_comment": "/* \u8bbf\u95ee\u5806\u9876\u5143\u7d20 */"}, "code_tokens": ["peek", "int", "(", ")", "{", "}", "return", ";", "maxHeap", "[", "0", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 19, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 12}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_heap/my_heap.cpp#90-95", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_heap/my_heap.cpp", "language": "Java"}, "method": {"name": "push", "qualified_name": "codes.cpp.chapter_heap.my_heap.cpp#push", "start_line": 90, "end_line": 95, "signature": "push(int val)", "original_code": "void push(int val) {\n        // \u6dfb\u52a0\u8282\u70b9\n        maxHeap.push_back(val);\n        // \u4ece\u5e95\u81f3\u9876\u5806\u5316\n        siftUp(size() - 1);\n    }", "doc_comment": "/* \u5143\u7d20\u5165\u5806 */"}, "code_tokens": ["void", "push", "(", ")", "{", "// \u6dfb\u52a0\u8282\u70b9", "// \u4ece\u5e95\u81f3\u9876\u5806\u5316", "}", "val", ";", ";", "int", "maxHeap", ".", "push_back", "siftUp", "(", "val", ")", "(", ")", "-", "1", "size", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 41, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 18}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_heap/my_heap.cpp#98-109", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_heap/my_heap.cpp", "language": "Java"}, "method": {"name": "pop", "qualified_name": "codes.cpp.chapter_heap.my_heap.cpp#pop", "start_line": 98, "end_line": 109, "signature": "pop()", "original_code": "void pop() {\n        // \u5224\u7a7a\u5904\u7406\n        if (isEmpty()) {\n            throw out_of_range(\"\u5806\u4e3a\u7a7a\");\n        }\n        // \u4ea4\u6362\u6839\u8282\u70b9\u4e0e\u6700\u53f3\u53f6\u8282\u70b9\uff08\u4ea4\u6362\u9996\u5143\u7d20\u4e0e\u5c3e\u5143\u7d20\uff09\n        swap(maxHeap[0], maxHeap[size() - 1]);\n        // \u5220\u9664\u8282\u70b9\n        maxHeap.pop_back();\n        // \u4ece\u9876\u81f3\u5e95\u5806\u5316\n        siftDown(0);\n    }", "doc_comment": "/* \u5143\u7d20\u51fa\u5806 */"}, "code_tokens": ["void", "pop", "(", ")", "{", "// \u5224\u7a7a\u5904\u7406", "// \u4ea4\u6362\u6839\u8282\u70b9\u4e0e\u6700\u53f3\u53f6\u8282\u70b9\uff08\u4ea4\u6362\u9996\u5143\u7d20\u4e0e\u5c3e\u5143\u7d20\uff09", "// \u5220\u9664\u8282\u70b9", "// \u4ece\u9876\u81f3\u5e95\u5806\u5316", "}", "if", ";", ";", ";", "(", ")", "{", "}", "swap", "maxHeap", ".", "pop_back", "siftDown", "isEmpty", "throw", ";", "(", ",", ")", "(", ")", "(", "0", ")", "(", ")", "out_of_range", "maxHeap", "[", "0", "]", "maxHeap", "[", "]", "(", ")", "-", "1", "\"", "\u5806\u4e3a\u7a7a", "\"", "size", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 81, "ast_depth": 11, "n_identifiers": 8, "vocab_size": 29}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_heap/my_heap.cpp#112-119", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_heap/my_heap.cpp", "language": "Java"}, "method": {"name": "print", "qualified_name": "codes.cpp.chapter_heap.my_heap.cpp#print", "start_line": 112, "end_line": 119, "signature": "print()", "original_code": "void print() {\n        cout << \"\u5806\u7684\u6570\u7ec4\u8868\u793a\uff1a\";\n        printVector(maxHeap);\n        cout << \"\u5806\u7684\u6811\u72b6\u8868\u793a\uff1a\" << endl;\n        TreeNode *root = vectorToTree(maxHeap);\n        printTree(root);\n        freeMemoryTree(root);\n    }", "doc_comment": "/* \u6253\u5370\u5806\uff08\u4e8c\u53c9\u6811\uff09*/"}, "code_tokens": ["void", "print", "(", ")", "{", "}", ";", ";", ";", ";", ";", ";", "cout", "<<", "printVector", "<<", "endl", "TreeNode", "*", "printTree", "freeMemoryTree", "\"", "\u5806\u7684\u6570\u7ec4\u8868\u793a\uff1a", "\"", "(", "maxHeap", ")", "cout", "<<", "root", "=", "(", "root", ")", "(", "root", ")", "\"", "\u5806\u7684\u6811\u72b6\u8868\u793a\uff1a", "\"", "vectorToTree", "(", "maxHeap", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 69, "ast_depth": 9, "n_identifiers": 10, "vocab_size": 22}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_heap/my_heap.cpp#123-155", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_heap/my_heap.cpp", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.cpp.chapter_heap.my_heap.cpp#main", "start_line": 123, "end_line": 155, "signature": "main()", "original_code": "int main() {\n    /* \u521d\u59cb\u5316\u5927\u9876\u5806 */\n    vector<int> vec{9, 8, 6, 6, 7, 5, 2, 1, 4, 3, 6, 2};\n    MaxHeap maxHeap(vec);\n    cout << \"\\n\u8f93\u5165\u5217\u8868\u5e76\u5efa\u5806\u540e\" << endl;\n    maxHeap.print();\n\n    /* \u83b7\u53d6\u5806\u9876\u5143\u7d20 */\n    int peek = maxHeap.peek();\n    cout << \"\\n\u5806\u9876\u5143\u7d20\u4e3a \" << peek << endl;\n\n    /* \u5143\u7d20\u5165\u5806 */\n    int val = 7;\n    maxHeap.push(val);\n    cout << \"\\n\u5143\u7d20 \" << val << \" \u5165\u5806\u540e\" << endl;\n    maxHeap.print();\n\n    /* \u5806\u9876\u5143\u7d20\u51fa\u5806 */\n    peek = maxHeap.peek();\n    maxHeap.pop();\n    cout << \"\\n\u5806\u9876\u5143\u7d20 \" << peek << \" \u51fa\u5806\u540e\" << endl;\n    maxHeap.print();\n\n    /* \u83b7\u53d6\u5806\u5927\u5c0f */\n    int size = maxHeap.size();\n    cout << \"\\n\u5806\u5143\u7d20\u6570\u91cf\u4e3a \" << size << endl;\n\n    /* \u5224\u65ad\u5806\u662f\u5426\u4e3a\u7a7a */\n    bool isEmpty = maxHeap.isEmpty();\n    cout << \"\\n\u5806\u662f\u5426\u4e3a\u7a7a \" << isEmpty << endl;\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "/* \u521d\u59cb\u5316\u5927\u9876\u5806 */", ";", "/* \u83b7\u53d6\u5806\u9876\u5143\u7d20 */", "/* \u5143\u7d20\u5165\u5806 */", "/* \u5806\u9876\u5143\u7d20\u51fa\u5806 */", "/* \u83b7\u53d6\u5806\u5927\u5c0f */", "/* \u5224\u65ad\u5806\u662f\u5426\u4e3a\u7a7a */", "}", "", "{", "}", "MaxHeap", "", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "bool", ";", ";", "return", "0", ";", "vector", "vec", "9", ",", "8", ",", "6", ",", "6", ",", "7", ",", "5", ",", "2", ",", "1", ",", "4", ",", "3", ",", "6", ",", "2", "maxHeap", "(", "vec", ")", "<<", "endl", "maxHeap", ".", "print", "int", "peek", "=", "<<", "endl", "int", "val", "=", "7", "maxHeap", ".", "push", "<<", "endl", "maxHeap", ".", "print", "peek", "=", "maxHeap", ".", "pop", "<<", "endl", "maxHeap", ".", "print", "int", "size", "=", "<<", "endl", "isEmpty", "=", "<<", "endl", "<", ">", "cout", "<<", "(", ")", "maxHeap", ".", "peek", "<<", "peek", "(", "val", ")", "<<", "(", ")", "maxHeap", ".", "peek", "(", ")", "<<", "(", ")", "maxHeap", ".", "size", "<<", "size", "maxHeap", ".", "isEmpty", "<<", "isEmpty", "int", "\"", "\\n", "\u8f93\u5165\u5217\u8868\u5e76\u5efa\u5806\u540e", "\"", "(", ")", "cout", "<<", "<<", "val", "\"", " \u5165\u5806\u540e", "\"", "(", ")", "<<", "peek", "\"", " \u51fa\u5806\u540e", "\"", "(", ")", "cout", "<<", "(", ")", "cout", "<<", "\"", "\\n", "\u5806\u9876\u5143\u7d20\u4e3a ", "\"", "cout", "<<", "cout", "<<", "\"", "\\n", "\u5806\u5143\u7d20\u6570\u91cf\u4e3a ", "\"", "\"", "\\n", "\u5806\u662f\u5426\u4e3a\u7a7a ", "\"", "\"", "\\n", "\u5143\u7d20 ", "\"", "\"", "\\n", "\u5806\u9876\u5143\u7d20 ", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 283, "ast_depth": 10, "n_identifiers": 12, "vocab_size": 55}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_searching/binary_search.cpp#10-25", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_searching/binary_search.cpp", "language": "Java"}, "method": {"name": "binarySearch", "qualified_name": "codes.cpp.chapter_searching.binary_search.cpp#binarySearch", "start_line": 10, "end_line": 25, "signature": "binarySearch(vector<int> &nums, int target)", "original_code": "int binarySearch(vector<int> &nums, int target) {\n    // \u521d\u59cb\u5316\u53cc\u95ed\u533a\u95f4 [0, n-1] \uff0c\u5373 i, j \u5206\u522b\u6307\u5411\u6570\u7ec4\u9996\u5143\u7d20\u3001\u5c3e\u5143\u7d20\n    int i = 0, j = nums.size() - 1;\n    // \u5faa\u73af\uff0c\u5f53\u641c\u7d22\u533a\u95f4\u4e3a\u7a7a\u65f6\u8df3\u51fa\uff08\u5f53 i > j \u65f6\u4e3a\u7a7a\uff09\n    while (i <= j) {\n        int m = i + (j - i) / 2; // \u8ba1\u7b97\u4e2d\u70b9\u7d22\u5f15 m\n        if (nums[m] < target)    // \u6b64\u60c5\u51b5\u8bf4\u660e target \u5728\u533a\u95f4 [m+1, j] \u4e2d\n            i = m + 1;\n        else if (nums[m] > target) // \u6b64\u60c5\u51b5\u8bf4\u660e target \u5728\u533a\u95f4 [i, m-1] \u4e2d\n            j = m - 1;\n        else // \u627e\u5230\u76ee\u6807\u5143\u7d20\uff0c\u8fd4\u56de\u5176\u7d22\u5f15\n            return m;\n    }\n    // \u672a\u627e\u5230\u76ee\u6807\u5143\u7d20\uff0c\u8fd4\u56de -1\n    return -1;\n}", "doc_comment": "/* \u4e8c\u5206\u67e5\u627e\uff08\u53cc\u95ed\u533a\u95f4\uff09 */"}, "code_tokens": ["binarySearch", "int", "(", ",", ")", "{", "// \u521d\u59cb\u5316\u53cc\u95ed\u533a\u95f4 [0, n-1] \uff0c\u5373 i, j \u5206\u522b\u6307\u5411\u6570\u7ec4\u9996\u5143\u7d20\u3001\u5c3e\u5143\u7d20", "// \u5faa\u73af\uff0c\u5f53\u641c\u7d22\u533a\u95f4\u4e3a\u7a7a\u65f6\u8df3\u51fa\uff08\u5f53 i > j \u65f6\u4e3a\u7a7a\uff09", "// \u672a\u627e\u5230\u76ee\u6807\u5143\u7d20\uff0c\u8fd4\u56de -1", "}", "nums", "target", ",", ";", "while", "return", ";", "vector", "&", "int", "int", "i", "=", "0", "j", "=", "(", ")", "{", "// \u8ba1\u7b97\u4e2d\u70b9\u7d22\u5f15 m", "}", "-", "1", "<", ">", "-", "1", "i", "<=", "j", ";", "if", "// \u6b64\u60c5\u51b5\u8bf4\u660e target \u5728\u533a\u95f4 [m+1, j] \u4e2d", "else", "int", "nums", ".", "size", "int", "m", "=", "(", ")", ";", "if", "// \u6b64\u60c5\u51b5\u8bf4\u660e target \u5728\u533a\u95f4 [i, m-1] \u4e2d", "else", "// \u627e\u5230\u76ee\u6807\u5143\u7d20\uff0c\u8fd4\u56de\u5176\u7d22\u5f15", "(", ")", "i", "+", "<", "target", "i", "=", "(", ")", ";", "return", "m", ";", "/", "2", "nums", "[", "m", "]", "m", "+", "1", ">", "target", "j", "=", "(", ")", "nums", "[", "m", "]", "m", "-", "1", "j", "-", "i"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 144, "ast_depth": 12, "n_identifiers": 7, "vocab_size": 40}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_searching/binary_search.cpp#28-43", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_searching/binary_search.cpp", "language": "Java"}, "method": {"name": "binarySearchLCRO", "qualified_name": "codes.cpp.chapter_searching.binary_search.cpp#binarySearchLCRO", "start_line": 28, "end_line": 43, "signature": "binarySearchLCRO(vector<int> &nums, int target)", "original_code": "int binarySearchLCRO(vector<int> &nums, int target) {\n    // \u521d\u59cb\u5316\u5de6\u95ed\u53f3\u5f00\u533a\u95f4 [0, n) \uff0c\u5373 i, j \u5206\u522b\u6307\u5411\u6570\u7ec4\u9996\u5143\u7d20\u3001\u5c3e\u5143\u7d20+1\n    int i = 0, j = nums.size();\n    // \u5faa\u73af\uff0c\u5f53\u641c\u7d22\u533a\u95f4\u4e3a\u7a7a\u65f6\u8df3\u51fa\uff08\u5f53 i = j \u65f6\u4e3a\u7a7a\uff09\n    while (i < j) {\n        int m = i + (j - i) / 2; // \u8ba1\u7b97\u4e2d\u70b9\u7d22\u5f15 m\n        if (nums[m] < target)    // \u6b64\u60c5\u51b5\u8bf4\u660e target \u5728\u533a\u95f4 [m+1, j) \u4e2d\n            i = m + 1;\n        else if (nums[m] > target) // \u6b64\u60c5\u51b5\u8bf4\u660e target \u5728\u533a\u95f4 [i, m) \u4e2d\n            j = m;\n        else // \u627e\u5230\u76ee\u6807\u5143\u7d20\uff0c\u8fd4\u56de\u5176\u7d22\u5f15\n            return m;\n    }\n    // \u672a\u627e\u5230\u76ee\u6807\u5143\u7d20\uff0c\u8fd4\u56de -1\n    return -1;\n}", "doc_comment": "/* \u4e8c\u5206\u67e5\u627e\uff08\u5de6\u95ed\u53f3\u5f00\u533a\u95f4\uff09 */"}, "code_tokens": ["binarySearchLCRO", "int", "(", ",", ")", "{", "// \u521d\u59cb\u5316\u5de6\u95ed\u53f3\u5f00\u533a\u95f4 [0, n) \uff0c\u5373 i, j \u5206\u522b\u6307\u5411\u6570\u7ec4\u9996\u5143\u7d20\u3001\u5c3e\u5143\u7d20+1", "// \u5faa\u73af\uff0c\u5f53\u641c\u7d22\u533a\u95f4\u4e3a\u7a7a\u65f6\u8df3\u51fa\uff08\u5f53 i = j \u65f6\u4e3a\u7a7a\uff09", "// \u672a\u627e\u5230\u76ee\u6807\u5143\u7d20\uff0c\u8fd4\u56de -1", "}", "nums", "target", ",", ";", "while", "return", ";", "vector", "&", "int", "int", "i", "=", "0", "j", "=", "(", ")", "{", "// \u8ba1\u7b97\u4e2d\u70b9\u7d22\u5f15 m", "}", "-", "1", "<", ">", "nums", ".", "size", "i", "<", "j", ";", "if", "// \u6b64\u60c5\u51b5\u8bf4\u660e target \u5728\u533a\u95f4 [m+1, j) \u4e2d", "else", "int", "(", ")", "int", "m", "=", "(", ")", ";", "if", "// \u6b64\u60c5\u51b5\u8bf4\u660e target \u5728\u533a\u95f4 [i, m) \u4e2d", "else", "// \u627e\u5230\u76ee\u6807\u5143\u7d20\uff0c\u8fd4\u56de\u5176\u7d22\u5f15", "i", "+", "<", "target", "i", "=", "(", ")", ";", "return", "m", ";", "/", "2", "nums", "[", "m", "]", "m", "+", "1", ">", "target", "j", "=", "m", "(", ")", "nums", "[", "m", "]", "j", "-", "i"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 138, "ast_depth": 12, "n_identifiers": 7, "vocab_size": 39}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_searching/binary_search.cpp#46-59", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_searching/binary_search.cpp", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.cpp.chapter_searching.binary_search.cpp#main", "start_line": 46, "end_line": 59, "signature": "main()", "original_code": "int main() {\n    int target = 6;\n    vector<int> nums = {1, 3, 6, 8, 12, 15, 23, 26, 31, 35};\n\n    /* \u4e8c\u5206\u67e5\u627e\uff08\u53cc\u95ed\u533a\u95f4\uff09 */\n    int index = binarySearch(nums, target);\n    cout << \"\u76ee\u6807\u5143\u7d20 6 \u7684\u7d22\u5f15 = \" << index << endl;\n\n    /* \u4e8c\u5206\u67e5\u627e\uff08\u5de6\u95ed\u53f3\u5f00\u533a\u95f4\uff09 */\n    index = binarySearchLCRO(nums, target);\n    cout << \"\u76ee\u6807\u5143\u7d20 6 \u7684\u7d22\u5f15 = \" << index << endl;\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "/* \u4e8c\u5206\u67e5\u627e\uff08\u53cc\u95ed\u533a\u95f4\uff09 */", "/* \u4e8c\u5206\u67e5\u627e\uff08\u5de6\u95ed\u53f3\u5f00\u533a\u95f4\uff09 */", "}", ";", ";", ";", ";", ";", ";", "return", "0", ";", "int", "target", "=", "6", "vector", "nums", "=", "int", "index", "=", "<<", "endl", "index", "=", "<<", "endl", "<", ">", "{", "1", ",", "3", ",", "6", ",", "8", ",", "12", ",", "15", ",", "23", ",", "26", ",", "31", ",", "35", "}", "binarySearch", "<<", "index", "binarySearchLCRO", "<<", "index", "int", "(", "nums", ",", "target", ")", "cout", "<<", "(", "nums", ",", "target", ")", "cout", "<<", "\"", "\u76ee\u6807\u5143\u7d20 6 \u7684\u7d22\u5f15 = ", "\"", "\"", "\u76ee\u6807\u5143\u7d20 6 \u7684\u7d22\u5f15 = ", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 117, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 36}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_searching/two_sum.cpp#10-20", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_searching/two_sum.cpp", "language": "Java"}, "method": {"name": "twoSumBruteForce", "qualified_name": "codes.cpp.chapter_searching.two_sum.cpp#twoSumBruteForce", "start_line": 10, "end_line": 20, "signature": "twoSumBruteForce(vector<int> &nums, int target)", "original_code": "vector<int> twoSumBruteForce(vector<int> &nums, int target) {\n    int size = nums.size();\n    // \u4e24\u5c42\u5faa\u73af\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n^2)\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (nums[i] + nums[j] == target)\n                return {i, j};\n        }\n    }\n    return {};\n}", "doc_comment": "/* \u65b9\u6cd5\u4e00\uff1a\u66b4\u529b\u679a\u4e3e */"}, "code_tokens": ["twoSumBruteForce", "vector", "(", ",", ")", "{", "// \u4e24\u5c42\u5faa\u73af\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n^2)", ";", "}", "<", ">", "nums", "target", ";", "for", "(", ";", ")", "return", "", "{", "}", "int", "vector", "&", "int", "int", "size", "=", ";", "i", "<", "i", "++", "{", "}", "<", ">", "nums", ".", "size", "int", "i", "=", "0", "size", "-", "1", "for", "(", ";", ")", "int", "(", ")", ";", "j", "<", "size", "j", "++", "{", "}", "int", "j", "=", "if", "i", "+", "1", "(", ")", "return", "j", ";", "==", "target", "{", "i", ",", "}", "+", "nums", "[", "i", "]", "nums", "[", "j", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 136, "ast_depth": 13, "n_identifiers": 6, "vocab_size": 32}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_searching/two_sum.cpp#23-35", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_searching/two_sum.cpp", "language": "Java"}, "method": {"name": "twoSumHashTable", "qualified_name": "codes.cpp.chapter_searching.two_sum.cpp#twoSumHashTable", "start_line": 23, "end_line": 35, "signature": "twoSumHashTable(vector<int> &nums, int target)", "original_code": "vector<int> twoSumHashTable(vector<int> &nums, int target) {\n    int size = nums.size();\n    // \u8f85\u52a9\u54c8\u5e0c\u8868\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\n    unordered_map<int, int> dic;\n    // \u5355\u5c42\u5faa\u73af\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\n    for (int i = 0; i < size; i++) {\n        if (dic.find(target - nums[i]) != dic.end()) {\n            return {dic[target - nums[i]], i};\n        }\n        dic.emplace(nums[i], i);\n    }\n    return {};\n}", "doc_comment": "/* \u65b9\u6cd5\u4e8c\uff1a\u8f85\u52a9\u54c8\u5e0c\u8868 */"}, "code_tokens": ["twoSumHashTable", "vector", "(", ",", ")", "{", "// \u8f85\u52a9\u54c8\u5e0c\u8868\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(n)", "// \u5355\u5c42\u5faa\u73af\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)", ";", "}", "<", ">", "nums", "target", ";", ";", "for", "(", ";", ")", "return", "", "{", "}", "int", "vector", "&", "int", "int", "size", "=", "unordered_map", "dic", ";", "i", "<", "size", "i", "++", "{", "}", "<", ">", "nums", ".", "size", "<", ",", ">", "int", "i", "=", "0", "if", ";", "int", "(", ")", "int", "int", "(", ")", "{", "}", "dic", ".", "emplace", "!=", "return", "i", ";", "(", ",", "i", ")", "dic", ".", "find", "dic", ".", "end", "{", ",", "}", "nums", "[", "i", "]", "(", ")", "(", ")", "dic", "[", "]", "target", "-", "target", "-", "nums", "[", "i", "]", "nums", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 161, "ast_depth": 13, "n_identifiers": 9, "vocab_size": 35}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_searching/two_sum.cpp#38-54", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_searching/two_sum.cpp", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.cpp.chapter_searching.two_sum.cpp#main", "start_line": 38, "end_line": 54, "signature": "main()", "original_code": "int main() {\n    // ======= Test Case =======\n    vector<int> nums = {2, 7, 11, 15};\n    int target = 13;\n\n    // ====== Driver Code ======\n    // \u65b9\u6cd5\u4e00\n    vector<int> res = twoSumBruteForce(nums, target);\n    cout << \"\u65b9\u6cd5\u4e00 res = \";\n    printVector(res);\n    // \u65b9\u6cd5\u4e8c\n    res = twoSumHashTable(nums, target);\n    cout << \"\u65b9\u6cd5\u4e8c res = \";\n    printVector(res);\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "// ======= Test Case =======", "// ====== Driver Code ======", "// \u65b9\u6cd5\u4e00", "// \u65b9\u6cd5\u4e8c", "}", ";", ";", ";", ";", ";", ";", ";", ";", "return", "0", ";", "vector", "nums", "=", "int", "target", "=", "13", "vector", "res", "=", "cout", "<<", "printVector", "res", "=", "cout", "<<", "printVector", "<", ">", "{", "2", ",", "7", ",", "11", ",", "15", "}", "<", ">", "twoSumBruteForce", "\"", "\u65b9\u6cd5\u4e00 res = ", "\"", "(", "res", ")", "twoSumHashTable", "\"", "\u65b9\u6cd5\u4e8c res = ", "\"", "(", "res", ")", "int", "int", "(", "nums", ",", "target", ")", "(", "nums", ",", "target", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 116, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 34}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_sorting/bucket_sort.cpp#10-33", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_sorting/bucket_sort.cpp", "language": "Java"}, "method": {"name": "bucketSort", "qualified_name": "codes.cpp.chapter_sorting.bucket_sort.cpp#bucketSort", "start_line": 10, "end_line": 33, "signature": "bucketSort(vector<float> &nums)", "original_code": "void bucketSort(vector<float> &nums) {\n    // \u521d\u59cb\u5316 k = n/2 \u4e2a\u6876\uff0c\u9884\u671f\u5411\u6bcf\u4e2a\u6876\u5206\u914d 2 \u4e2a\u5143\u7d20\n    int k = nums.size() / 2;\n    vector<vector<float>> buckets(k);\n    // 1. \u5c06\u6570\u7ec4\u5143\u7d20\u5206\u914d\u5230\u5404\u4e2a\u6876\u4e2d\n    for (float num : nums) {\n        // \u8f93\u5165\u6570\u636e\u8303\u56f4\u4e3a [0, 1)\uff0c\u4f7f\u7528 num * k \u6620\u5c04\u5230\u7d22\u5f15\u8303\u56f4 [0, k-1]\n        int i = num * k;\n        // \u5c06 num \u6dfb\u52a0\u8fdb\u6876 bucket_idx\n        buckets[i].push_back(num);\n    }\n    // 2. \u5bf9\u5404\u4e2a\u6876\u6267\u884c\u6392\u5e8f\n    for (vector<float> &bucket : buckets) {\n        // \u4f7f\u7528\u5185\u7f6e\u6392\u5e8f\u51fd\u6570\uff0c\u4e5f\u53ef\u4ee5\u66ff\u6362\u6210\u5176\u4ed6\u6392\u5e8f\u7b97\u6cd5\n        sort(bucket.begin(), bucket.end());\n    }\n    // 3. \u904d\u5386\u6876\u5408\u5e76\u7ed3\u679c\n    int i = 0;\n    for (vector<float> &bucket : buckets) {\n        for (float num : bucket) {\n            nums[i++] = num;\n        }\n    }\n}", "doc_comment": "/* \u6876\u6392\u5e8f */"}, "code_tokens": ["void", "bucketSort", "(", ")", "{", "// \u521d\u59cb\u5316 k = n/2 \u4e2a\u6876\uff0c\u9884\u671f\u5411\u6bcf\u4e2a\u6876\u5206\u914d 2 \u4e2a\u5143\u7d20", "// 1. \u5c06\u6570\u7ec4\u5143\u7d20\u5206\u914d\u5230\u5404\u4e2a\u6876\u4e2d", "// 2. \u5bf9\u5404\u4e2a\u6876\u6267\u884c\u6392\u5e8f", "// 3. \u904d\u5386\u6876\u5408\u5e76\u7ed3\u679c", "}", "nums", ";", "", ";", "for", "(", "num", ":", "nums", ")", "for", "(", "bucket", ":", "buckets", ")", ";", "for", "(", "bucket", ":", "buckets", ")", "vector", "&", "int", "k", "=", "vector", "buckets", "(", "k", ")", "float", "{", "// \u8f93\u5165\u6570\u636e\u8303\u56f4\u4e3a [0, 1)\uff0c\u4f7f\u7528 num * k \u6620\u5c04\u5230\u7d22\u5f15\u8303\u56f4 [0, k-1]", "// \u5c06 num \u6dfb\u52a0\u8fdb\u6876 bucket_idx", "}", "vector", "&", "{", "// \u4f7f\u7528\u5185\u7f6e\u6392\u5e8f\u51fd\u6570\uff0c\u4e5f\u53ef\u4ee5\u66ff\u6362\u6210\u5176\u4ed6\u6392\u5e8f\u7b97\u6cd5", "}", "int", "i", "=", "0", "vector", "&", "{", "}", "<", ">", "/", "2", "<", ">", ";", ";", "<", ">", ";", "<", ">", "for", "(", "num", ":", "bucket", ")", "float", "nums", ".", "size", "vector", "int", "i", "=", ".", "push_back", "float", "sort", "float", "float", "{", "}", "(", ")", "<", ">", "num", "*", "k", "buckets", "[", "i", "]", "(", "num", ")", "(", ",", ")", ";", "float", "bucket", ".", "begin", "bucket", ".", "end", "=", "num", "(", ")", "(", ")", "nums", "[", "]", "i", "++"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 196, "ast_depth": 12, "n_identifiers": 12, "vocab_size": 44}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_sorting/bucket_sort.cpp#36-44", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_sorting/bucket_sort.cpp", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.cpp.chapter_sorting.bucket_sort.cpp#main", "start_line": 36, "end_line": 44, "signature": "main()", "original_code": "int main() {\n    // \u8bbe\u8f93\u5165\u6570\u636e\u4e3a\u6d6e\u70b9\u6570\uff0c\u8303\u56f4\u4e3a [0, 1)\n    vector<float> nums = {0.49f, 0.96f, 0.82f, 0.09f, 0.57f, 0.43f, 0.91f, 0.75f, 0.15f, 0.37f};\n    bucketSort(nums);\n    cout << \"\u6876\u6392\u5e8f\u5b8c\u6210\u540e nums = \";\n    printVector(nums);\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "// \u8bbe\u8f93\u5165\u6570\u636e\u4e3a\u6d6e\u70b9\u6570\uff0c\u8303\u56f4\u4e3a [0, 1)", "}", ";", ";", ";", ";", "return", "0", ";", "vector", "nums", "=", "bucketSort", "cout", "<<", "printVector", "<", ">", "{", "0.49f", ",", "0.96f", ",", "0.82f", ",", "0.09f", ",", "0.57f", ",", "0.43f", ",", "0.91f", ",", "0.75f", ",", "0.15f", ",", "0.37f", "}", "(", "nums", ")", "\"", "\u6876\u6392\u5e8f\u5b8c\u6210\u540e nums = ", "\"", "(", "nums", ")", "float"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 75, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 33}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_sorting/heap_sort.cpp#10-29", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_sorting/heap_sort.cpp", "language": "Java"}, "method": {"name": "siftDown", "qualified_name": "codes.cpp.chapter_sorting.heap_sort.cpp#siftDown", "start_line": 10, "end_line": 29, "signature": "siftDown(vector<int> &nums, int n, int i)", "original_code": "void siftDown(vector<int> &nums, int n, int i) {\n    while (true) {\n        // \u5224\u65ad\u8282\u70b9 i, l, r \u4e2d\u503c\u6700\u5927\u7684\u8282\u70b9\uff0c\u8bb0\u4e3a ma\n        int l = 2 * i + 1;\n        int r = 2 * i + 2;\n        int ma = i;\n        if (l < n && nums[l] > nums[ma])\n            ma = l;\n        if (r < n && nums[r] > nums[ma])\n            ma = r;\n        // \u82e5\u8282\u70b9 i \u6700\u5927\u6216\u7d22\u5f15 l, r \u8d8a\u754c\uff0c\u5219\u65e0\u987b\u7ee7\u7eed\u5806\u5316\uff0c\u8df3\u51fa\n        if (ma == i) {\n            break;\n        }\n        // \u4ea4\u6362\u4e24\u8282\u70b9\n        swap(nums[i], nums[ma]);\n        // \u5faa\u73af\u5411\u4e0b\u5806\u5316\n        i = ma;\n    }\n}", "doc_comment": "/* \u5806\u7684\u957f\u5ea6\u4e3a n \uff0c\u4ece\u8282\u70b9 i \u5f00\u59cb\uff0c\u4ece\u9876\u81f3\u5e95\u5806\u5316 */"}, "code_tokens": ["void", "siftDown", "(", ",", ",", ")", "{", "}", "nums", "n", "i", "while", "vector", "&", "int", "int", "(", "true", ")", "{", "// \u5224\u65ad\u8282\u70b9 i, l, r \u4e2d\u503c\u6700\u5927\u7684\u8282\u70b9\uff0c\u8bb0\u4e3a ma", "// \u82e5\u8282\u70b9 i \u6700\u5927\u6216\u7d22\u5f15 l, r \u8d8a\u754c\uff0c\u5219\u65e0\u987b\u7ee7\u7eed\u5806\u5316\uff0c\u8df3\u51fa", "// \u4ea4\u6362\u4e24\u8282\u70b9", "// \u5faa\u73af\u5411\u4e0b\u5806\u5316", "}", "<", ">", ";", ";", ";", "if", "if", "if", ";", ";", "int", "int", "l", "=", "int", "r", "=", "int", "ma", "=", "i", "(", ")", ";", "(", ")", ";", "(", ")", "{", "}", "swap", "i", "=", "ma", "+", "1", "+", "2", "&&", "ma", "=", "l", "&&", "ma", "=", "r", "ma", "==", "i", "break", ";", "(", ",", ")", "2", "*", "i", "2", "*", "i", "l", "<", "n", ">", "r", "<", "n", ">", "nums", "[", "i", "]", "nums", "[", "ma", "]", "nums", "[", "l", "]", "nums", "[", "ma", "]", "nums", "[", "r", "]", "nums", "[", "ma", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 177, "ast_depth": 11, "n_identifiers": 8, "vocab_size": 37}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_sorting/heap_sort.cpp#32-44", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_sorting/heap_sort.cpp", "language": "Java"}, "method": {"name": "heapSort", "qualified_name": "codes.cpp.chapter_sorting.heap_sort.cpp#heapSort", "start_line": 32, "end_line": 44, "signature": "heapSort(vector<int> &nums)", "original_code": "void heapSort(vector<int> &nums) {\n    // \u5efa\u5806\u64cd\u4f5c\uff1a\u5806\u5316\u9664\u53f6\u8282\u70b9\u4ee5\u5916\u7684\u5176\u4ed6\u6240\u6709\u8282\u70b9\n    for (int i = nums.size() / 2 - 1; i >= 0; --i) {\n        siftDown(nums, nums.size(), i);\n    }\n    // \u4ece\u5806\u4e2d\u63d0\u53d6\u6700\u5927\u5143\u7d20\uff0c\u5faa\u73af n-1 \u8f6e\n    for (int i = nums.size() - 1; i > 0; --i) {\n        // \u4ea4\u6362\u6839\u8282\u70b9\u4e0e\u6700\u53f3\u53f6\u8282\u70b9\uff08\u4ea4\u6362\u9996\u5143\u7d20\u4e0e\u5c3e\u5143\u7d20\uff09\n        swap(nums[0], nums[i]);\n        // \u4ee5\u6839\u8282\u70b9\u4e3a\u8d77\u70b9\uff0c\u4ece\u9876\u81f3\u5e95\u8fdb\u884c\u5806\u5316\n        siftDown(nums, i, 0);\n    }\n}", "doc_comment": "/* \u5806\u6392\u5e8f */"}, "code_tokens": ["void", "heapSort", "(", ")", "{", "// \u5efa\u5806\u64cd\u4f5c\uff1a\u5806\u5316\u9664\u53f6\u8282\u70b9\u4ee5\u5916\u7684\u5176\u4ed6\u6240\u6709\u8282\u70b9", "// \u4ece\u5806\u4e2d\u63d0\u53d6\u6700\u5927\u5143\u7d20\uff0c\u5faa\u73af n-1 \u8f6e", "}", "nums", "for", "(", ";", ")", "for", "(", ";", ")", "vector", "&", ";", "i", ">=", "0", "--", "i", "{", "}", ";", "i", ">", "0", "--", "i", "{", "// \u4ea4\u6362\u6839\u8282\u70b9\u4e0e\u6700\u53f3\u53f6\u8282\u70b9\uff08\u4ea4\u6362\u9996\u5143\u7d20\u4e0e\u5c3e\u5143\u7d20\uff09", "// \u4ee5\u6839\u8282\u70b9\u4e3a\u8d77\u70b9\uff0c\u4ece\u9876\u81f3\u5e95\u8fdb\u884c\u5806\u5316", "}", "<", ">", "int", "i", "=", ";", "int", "i", "=", ";", ";", "int", "-", "1", "siftDown", "-", "1", "swap", "siftDown", "/", "2", "(", "nums", ",", ",", "i", ")", "nums", ".", "size", "(", ",", ")", "(", "nums", ",", "i", ",", "0", ")", "nums", ".", "size", "nums", ".", "size", "(", ")", "nums", "[", "0", "]", "nums", "[", "i", "]", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 140, "ast_depth": 11, "n_identifiers": 6, "vocab_size": 34}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_sorting/heap_sort.cpp#47-54", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_sorting/heap_sort.cpp", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.cpp.chapter_sorting.heap_sort.cpp#main", "start_line": 47, "end_line": 54, "signature": "main()", "original_code": "int main() {\n    vector<int> nums = {4, 1, 3, 1, 5, 2};\n    heapSort(nums);\n    cout << \"\u5806\u6392\u5e8f\u5b8c\u6210\u540e nums = \";\n    printVector(nums);\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "}", ";", ";", ";", ";", "return", "0", ";", "vector", "nums", "=", "heapSort", "cout", "<<", "printVector", "<", ">", "{", "4", ",", "1", ",", "3", ",", "1", ",", "5", ",", "2", "}", "(", "nums", ")", "\"", "\u5806\u6392\u5e8f\u5b8c\u6210\u540e nums = ", "\"", "(", "nums", ")", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 66, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 26}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_sorting/quick_sort.cpp#11-17", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_sorting/quick_sort.cpp", "language": "Java"}, "method": {"name": "swap", "qualified_name": "codes.cpp.chapter_sorting.quick_sort.cpp#swap", "start_line": 11, "end_line": 17, "signature": "swap(vector<int> &nums, int i, int j)", "original_code": "private:\n    /* \u5143\u7d20\u4ea4\u6362 */\n    static void swap(vector<int> &nums, int i, int j) {\n        int tmp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = tmp;\n    }", "doc_comment": ""}, "code_tokens": ["void", "swap", "private", "/* \u5143\u7d20\u4ea4\u6362 */", "static", "(", ",", ",", ")", "{", "}", ":", "nums", "i", "j", ";", ";", ";", "vector", "&", "int", "int", "int", "tmp", "=", "=", "=", "tmp", "<", ">", "nums", "[", "i", "]", "nums", "[", "i", "]", "nums", "[", "j", "]", "nums", "[", "j", "]", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 73, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 24}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_sorting/quick_sort.cpp#20-32", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_sorting/quick_sort.cpp", "language": "Java"}, "method": {"name": "partition", "qualified_name": "codes.cpp.chapter_sorting.quick_sort.cpp#partition", "start_line": 20, "end_line": 32, "signature": "partition(vector<int> &nums, int left, int right)", "original_code": "static int partition(vector<int> &nums, int left, int right) {\n        // \u4ee5 nums[left] \u4e3a\u57fa\u51c6\u6570\n        int i = left, j = right;\n        while (i < j) {\n            while (i < j && nums[j] >= nums[left])\n                j--; // \u4ece\u53f3\u5411\u5de6\u627e\u9996\u4e2a\u5c0f\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20\n            while (i < j && nums[i] <= nums[left])\n                i++;          // \u4ece\u5de6\u5411\u53f3\u627e\u9996\u4e2a\u5927\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20\n            swap(nums, i, j); // \u4ea4\u6362\u8fd9\u4e24\u4e2a\u5143\u7d20\n        }\n        swap(nums, i, left); // \u5c06\u57fa\u51c6\u6570\u4ea4\u6362\u81f3\u4e24\u5b50\u6570\u7ec4\u7684\u5206\u754c\u7ebf\n        return i;            // \u8fd4\u56de\u57fa\u51c6\u6570\u7684\u7d22\u5f15\n    }", "doc_comment": "/* \u54e8\u5175\u5212\u5206 */"}, "code_tokens": ["partition", "static", "int", "(", ",", ",", ")", "{", "// \u4ee5 nums[left] \u4e3a\u57fa\u51c6\u6570", "// \u5c06\u57fa\u51c6\u6570\u4ea4\u6362\u81f3\u4e24\u5b50\u6570\u7ec4\u7684\u5206\u754c\u7ebf", "// \u8fd4\u56de\u57fa\u51c6\u6570\u7684\u7d22\u5f15", "}", "nums", "left", "right", ",", ";", "while", ";", "return", "i", ";", "vector", "&", "int", "int", "int", "i", "=", "left", "j", "=", "right", "(", ")", "{", "// \u4ece\u53f3\u5411\u5de6\u627e\u9996\u4e2a\u5c0f\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20", "// \u4ece\u5de6\u5411\u53f3\u627e\u9996\u4e2a\u5927\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20", "// \u4ea4\u6362\u8fd9\u4e24\u4e2a\u5143\u7d20", "}", "swap", "<", ">", "i", "<", "j", "while", "while", ";", "(", "nums", ",", "i", ",", "left", ")", "int", "(", ")", ";", "(", ")", ";", "swap", "&&", "j", "--", "&&", "i", "++", "(", "nums", ",", "i", ",", "j", ")", "i", "<", "j", ">=", "i", "<", "j", "<=", "nums", "[", "j", "]", "nums", "[", "left", "]", "nums", "[", "i", "]", "nums", "[", "left", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 149, "ast_depth": 11, "n_identifiers": 7, "vocab_size": 35}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_sorting/quick_sort.cpp#34-45", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_sorting/quick_sort.cpp", "language": "Java"}, "method": {"name": "quickSort", "qualified_name": "codes.cpp.chapter_sorting.quick_sort.cpp#quickSort", "start_line": 34, "end_line": 45, "signature": "quickSort(vector<int> &nums, int left, int right)", "original_code": "public:\n    /* \u5feb\u901f\u6392\u5e8f */\n    static void quickSort(vector<int> &nums, int left, int right) {\n        // \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52\n        if (left >= right)\n            return;\n        // \u54e8\u5175\u5212\u5206\n        int pivot = partition(nums, left, right);\n        // \u9012\u5f52\u5de6\u5b50\u6570\u7ec4\u3001\u53f3\u5b50\u6570\u7ec4\n        quickSort(nums, left, pivot - 1);\n        quickSort(nums, pivot + 1, right);\n    }", "doc_comment": ""}, "code_tokens": ["void", "quickSort", "public", "/* \u5feb\u901f\u6392\u5e8f */", "static", "(", ",", ",", ")", "{", "// \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52", "// \u54e8\u5175\u5212\u5206", "// \u9012\u5f52\u5de6\u5b50\u6570\u7ec4\u3001\u53f3\u5b50\u6570\u7ec4", "}", ":", "nums", "left", "right", "if", ";", ";", ";", "vector", "&", "int", "int", "(", ")", "return", ";", "int", "pivot", "=", "quickSort", "quickSort", "<", ">", "left", ">=", "right", "partition", "(", "nums", ",", "left", ",", ")", "(", "nums", ",", ",", "right", ")", "int", "(", "nums", ",", "left", ",", "right", ")", "pivot", "-", "1", "pivot", "+", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 99, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 32}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_sorting/quick_sort.cpp#50-56", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_sorting/quick_sort.cpp", "language": "Java"}, "method": {"name": "swap", "qualified_name": "codes.cpp.chapter_sorting.quick_sort.cpp#swap", "start_line": 50, "end_line": 56, "signature": "swap(vector<int> &nums, int i, int j)", "original_code": "private:\n    /* \u5143\u7d20\u4ea4\u6362 */\n    static void swap(vector<int> &nums, int i, int j) {\n        int tmp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = tmp;\n    }", "doc_comment": ""}, "code_tokens": ["void", "swap", "private", "/* \u5143\u7d20\u4ea4\u6362 */", "static", "(", ",", ",", ")", "{", "}", ":", "nums", "i", "j", ";", ";", ";", "vector", "&", "int", "int", "int", "tmp", "=", "=", "=", "tmp", "<", ">", "nums", "[", "i", "]", "nums", "[", "i", "]", "nums", "[", "j", "]", "nums", "[", "j", "]", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 73, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 24}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_sorting/quick_sort.cpp#59-68", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_sorting/quick_sort.cpp", "language": "Java"}, "method": {"name": "medianThree", "qualified_name": "codes.cpp.chapter_sorting.quick_sort.cpp#medianThree", "start_line": 59, "end_line": 68, "signature": "medianThree(vector<int> &nums, int left, int mid, int right)", "original_code": "static int medianThree(vector<int> &nums, int left, int mid, int right) {\n        // \u6b64\u5904\u4f7f\u7528\u5f02\u6216\u8fd0\u7b97\u6765\u7b80\u5316\u4ee3\u7801\n        // \u5f02\u6216\u89c4\u5219\u4e3a 0 ^ 0 = 1 ^ 1 = 0, 0 ^ 1 = 1 ^ 0 = 1\n        if ((nums[left] < nums[mid]) ^ (nums[left] < nums[right]))\n            return left;\n        else if ((nums[mid] < nums[left]) ^ (nums[mid] < nums[right]))\n            return mid;\n        else\n            return right;\n    }", "doc_comment": "/* \u9009\u53d6\u4e09\u4e2a\u5143\u7d20\u7684\u4e2d\u4f4d\u6570 */"}, "code_tokens": ["medianThree", "static", "int", "(", ",", ",", ",", ")", "{", "// \u6b64\u5904\u4f7f\u7528\u5f02\u6216\u8fd0\u7b97\u6765\u7b80\u5316\u4ee3\u7801", "// \u5f02\u6216\u89c4\u5219\u4e3a 0 ^ 0 = 1 ^ 1 = 0, 0 ^ 1 = 1 ^ 0 = 1", "}", "nums", "left", "mid", "right", "if", "else", "vector", "&", "int", "int", "int", "(", ")", "return", "left", ";", "if", "else", "<", ">", "^", "(", ")", "return", "mid", ";", "return", "right", ";", "int", "(", ")", "(", ")", "^", "<", "<", "(", ")", "(", ")", "nums", "[", "left", "]", "nums", "[", "mid", "]", "nums", "[", "left", "]", "nums", "[", "right", "]", "<", "<", "nums", "[", "mid", "]", "nums", "[", "left", "]", "nums", "[", "mid", "]", "nums", "[", "right", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 129, "ast_depth": 11, "n_identifiers": 5, "vocab_size": 25}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_sorting/quick_sort.cpp#71-87", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_sorting/quick_sort.cpp", "language": "Java"}, "method": {"name": "partition", "qualified_name": "codes.cpp.chapter_sorting.quick_sort.cpp#partition", "start_line": 71, "end_line": 87, "signature": "partition(vector<int> &nums, int left, int right)", "original_code": "static int partition(vector<int> &nums, int left, int right) {\n        // \u9009\u53d6\u4e09\u4e2a\u5019\u9009\u5143\u7d20\u7684\u4e2d\u4f4d\u6570\n        int med = medianThree(nums, left, (left + right) / 2, right);\n        // \u5c06\u4e2d\u4f4d\u6570\u4ea4\u6362\u81f3\u6570\u7ec4\u6700\u5de6\u7aef\n        swap(nums, left, med);\n        // \u4ee5 nums[left] \u4e3a\u57fa\u51c6\u6570\n        int i = left, j = right;\n        while (i < j) {\n            while (i < j && nums[j] >= nums[left])\n                j--; // \u4ece\u53f3\u5411\u5de6\u627e\u9996\u4e2a\u5c0f\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20\n            while (i < j && nums[i] <= nums[left])\n                i++;          // \u4ece\u5de6\u5411\u53f3\u627e\u9996\u4e2a\u5927\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20\n            swap(nums, i, j); // \u4ea4\u6362\u8fd9\u4e24\u4e2a\u5143\u7d20\n        }\n        swap(nums, i, left); // \u5c06\u57fa\u51c6\u6570\u4ea4\u6362\u81f3\u4e24\u5b50\u6570\u7ec4\u7684\u5206\u754c\u7ebf\n        return i;            // \u8fd4\u56de\u57fa\u51c6\u6570\u7684\u7d22\u5f15\n    }", "doc_comment": "/* \u54e8\u5175\u5212\u5206\uff08\u4e09\u6570\u53d6\u4e2d\u503c\uff09 */"}, "code_tokens": ["partition", "static", "int", "(", ",", ",", ")", "{", "// \u9009\u53d6\u4e09\u4e2a\u5019\u9009\u5143\u7d20\u7684\u4e2d\u4f4d\u6570", "// \u5c06\u4e2d\u4f4d\u6570\u4ea4\u6362\u81f3\u6570\u7ec4\u6700\u5de6\u7aef", "// \u4ee5 nums[left] \u4e3a\u57fa\u51c6\u6570", "// \u5c06\u57fa\u51c6\u6570\u4ea4\u6362\u81f3\u4e24\u5b50\u6570\u7ec4\u7684\u5206\u754c\u7ebf", "// \u8fd4\u56de\u57fa\u51c6\u6570\u7684\u7d22\u5f15", "}", "nums", "left", "right", ";", ";", ",", ";", "while", ";", "return", "i", ";", "vector", "&", "int", "int", "int", "med", "=", "swap", "int", "i", "=", "left", "j", "=", "right", "(", ")", "{", "// \u4ece\u53f3\u5411\u5de6\u627e\u9996\u4e2a\u5c0f\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20", "// \u4ece\u5de6\u5411\u53f3\u627e\u9996\u4e2a\u5927\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20", "// \u4ea4\u6362\u8fd9\u4e24\u4e2a\u5143\u7d20", "}", "swap", "<", ">", "medianThree", "(", "nums", ",", "left", ",", "med", ")", "i", "<", "j", "while", "while", ";", "(", "nums", ",", "i", ",", "left", ")", "int", "(", "nums", ",", "left", ",", ",", "right", ")", "(", ")", ";", "(", ")", ";", "swap", "/", "2", "&&", "j", "--", "&&", "i", "++", "(", "nums", ",", "i", ",", "j", ")", "(", ")", "i", "<", "j", ">=", "i", "<", "j", "<=", "left", "+", "right", "nums", "[", "j", "]", "nums", "[", "left", "]", "nums", "[", "i", "]", "nums", "[", "left", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 191, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 42}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_sorting/quick_sort.cpp#89-100", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_sorting/quick_sort.cpp", "language": "Java"}, "method": {"name": "quickSort", "qualified_name": "codes.cpp.chapter_sorting.quick_sort.cpp#quickSort", "start_line": 89, "end_line": 100, "signature": "quickSort(vector<int> &nums, int left, int right)", "original_code": "public:\n    /* \u5feb\u901f\u6392\u5e8f */\n    static void quickSort(vector<int> &nums, int left, int right) {\n        // \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52\n        if (left >= right)\n            return;\n        // \u54e8\u5175\u5212\u5206\n        int pivot = partition(nums, left, right);\n        // \u9012\u5f52\u5de6\u5b50\u6570\u7ec4\u3001\u53f3\u5b50\u6570\u7ec4\n        quickSort(nums, left, pivot - 1);\n        quickSort(nums, pivot + 1, right);\n    }", "doc_comment": ""}, "code_tokens": ["void", "quickSort", "public", "/* \u5feb\u901f\u6392\u5e8f */", "static", "(", ",", ",", ")", "{", "// \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52", "// \u54e8\u5175\u5212\u5206", "// \u9012\u5f52\u5de6\u5b50\u6570\u7ec4\u3001\u53f3\u5b50\u6570\u7ec4", "}", ":", "nums", "left", "right", "if", ";", ";", ";", "vector", "&", "int", "int", "(", ")", "return", ";", "int", "pivot", "=", "quickSort", "quickSort", "<", ">", "left", ">=", "right", "partition", "(", "nums", ",", "left", ",", ")", "(", "nums", ",", ",", "right", ")", "int", "(", "nums", ",", "left", ",", "right", ")", "pivot", "-", "1", "pivot", "+", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 99, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 32}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_sorting/quick_sort.cpp#105-111", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_sorting/quick_sort.cpp", "language": "Java"}, "method": {"name": "swap", "qualified_name": "codes.cpp.chapter_sorting.quick_sort.cpp#swap", "start_line": 105, "end_line": 111, "signature": "swap(vector<int> &nums, int i, int j)", "original_code": "private:\n    /* \u5143\u7d20\u4ea4\u6362 */\n    static void swap(vector<int> &nums, int i, int j) {\n        int tmp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = tmp;\n    }", "doc_comment": ""}, "code_tokens": ["void", "swap", "private", "/* \u5143\u7d20\u4ea4\u6362 */", "static", "(", ",", ",", ")", "{", "}", ":", "nums", "i", "j", ";", ";", ";", "vector", "&", "int", "int", "int", "tmp", "=", "=", "=", "tmp", "<", ">", "nums", "[", "i", "]", "nums", "[", "i", "]", "nums", "[", "j", "]", "nums", "[", "j", "]", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 73, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 24}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_sorting/quick_sort.cpp#114-126", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_sorting/quick_sort.cpp", "language": "Java"}, "method": {"name": "partition", "qualified_name": "codes.cpp.chapter_sorting.quick_sort.cpp#partition", "start_line": 114, "end_line": 126, "signature": "partition(vector<int> &nums, int left, int right)", "original_code": "static int partition(vector<int> &nums, int left, int right) {\n        // \u4ee5 nums[left] \u4e3a\u57fa\u51c6\u6570\n        int i = left, j = right;\n        while (i < j) {\n            while (i < j && nums[j] >= nums[left])\n                j--; // \u4ece\u53f3\u5411\u5de6\u627e\u9996\u4e2a\u5c0f\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20\n            while (i < j && nums[i] <= nums[left])\n                i++;          // \u4ece\u5de6\u5411\u53f3\u627e\u9996\u4e2a\u5927\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20\n            swap(nums, i, j); // \u4ea4\u6362\u8fd9\u4e24\u4e2a\u5143\u7d20\n        }\n        swap(nums, i, left); // \u5c06\u57fa\u51c6\u6570\u4ea4\u6362\u81f3\u4e24\u5b50\u6570\u7ec4\u7684\u5206\u754c\u7ebf\n        return i;            // \u8fd4\u56de\u57fa\u51c6\u6570\u7684\u7d22\u5f15\n    }", "doc_comment": "/* \u54e8\u5175\u5212\u5206 */"}, "code_tokens": ["partition", "static", "int", "(", ",", ",", ")", "{", "// \u4ee5 nums[left] \u4e3a\u57fa\u51c6\u6570", "// \u5c06\u57fa\u51c6\u6570\u4ea4\u6362\u81f3\u4e24\u5b50\u6570\u7ec4\u7684\u5206\u754c\u7ebf", "// \u8fd4\u56de\u57fa\u51c6\u6570\u7684\u7d22\u5f15", "}", "nums", "left", "right", ",", ";", "while", ";", "return", "i", ";", "vector", "&", "int", "int", "int", "i", "=", "left", "j", "=", "right", "(", ")", "{", "// \u4ece\u53f3\u5411\u5de6\u627e\u9996\u4e2a\u5c0f\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20", "// \u4ece\u5de6\u5411\u53f3\u627e\u9996\u4e2a\u5927\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20", "// \u4ea4\u6362\u8fd9\u4e24\u4e2a\u5143\u7d20", "}", "swap", "<", ">", "i", "<", "j", "while", "while", ";", "(", "nums", ",", "i", ",", "left", ")", "int", "(", ")", ";", "(", ")", ";", "swap", "&&", "j", "--", "&&", "i", "++", "(", "nums", ",", "i", ",", "j", ")", "i", "<", "j", ">=", "i", "<", "j", "<=", "nums", "[", "j", "]", "nums", "[", "left", "]", "nums", "[", "i", "]", "nums", "[", "left", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 149, "ast_depth": 11, "n_identifiers": 7, "vocab_size": 35}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_sorting/quick_sort.cpp#128-144", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_sorting/quick_sort.cpp", "language": "Java"}, "method": {"name": "quickSort", "qualified_name": "codes.cpp.chapter_sorting.quick_sort.cpp#quickSort", "start_line": 128, "end_line": 144, "signature": "quickSort(vector<int> &nums, int left, int right)", "original_code": "public:\n    /* \u5feb\u901f\u6392\u5e8f\uff08\u5c3e\u9012\u5f52\u4f18\u5316\uff09 */\n    static void quickSort(vector<int> &nums, int left, int right) {\n        // \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\n        while (left < right) {\n            // \u54e8\u5175\u5212\u5206\u64cd\u4f5c\n            int pivot = partition(nums, left, right);\n            // \u5bf9\u4e24\u4e2a\u5b50\u6570\u7ec4\u4e2d\u8f83\u77ed\u7684\u90a3\u4e2a\u6267\u884c\u5feb\u901f\u6392\u5e8f\n            if (pivot - left < right - pivot) {\n                quickSort(nums, left, pivot - 1); // \u9012\u5f52\u6392\u5e8f\u5de6\u5b50\u6570\u7ec4\n                left = pivot + 1;                 // \u5269\u4f59\u672a\u6392\u5e8f\u533a\u95f4\u4e3a [pivot + 1, right]\n            } else {\n                quickSort(nums, pivot + 1, right); // \u9012\u5f52\u6392\u5e8f\u53f3\u5b50\u6570\u7ec4\n                right = pivot - 1;                 // \u5269\u4f59\u672a\u6392\u5e8f\u533a\u95f4\u4e3a [left, pivot - 1]\n            }\n        }\n    }", "doc_comment": ""}, "code_tokens": ["void", "quickSort", "public", "/* \u5feb\u901f\u6392\u5e8f\uff08\u5c3e\u9012\u5f52\u4f18\u5316\uff09 */", "static", "(", ",", ",", ")", "{", "// \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62", "}", ":", "nums", "left", "right", "while", "vector", "&", "int", "int", "(", ")", "{", "// \u54e8\u5175\u5212\u5206\u64cd\u4f5c", "// \u5bf9\u4e24\u4e2a\u5b50\u6570\u7ec4\u4e2d\u8f83\u77ed\u7684\u90a3\u4e2a\u6267\u884c\u5feb\u901f\u6392\u5e8f", "}", "<", ">", "left", "<", "right", ";", "if", "else", "int", "int", "pivot", "=", "(", ")", "{", "// \u9012\u5f52\u6392\u5e8f\u5de6\u5b50\u6570\u7ec4", "// \u5269\u4f59\u672a\u6392\u5e8f\u533a\u95f4\u4e3a [pivot + 1, right]", "}", "{", "// \u9012\u5f52\u6392\u5e8f\u53f3\u5b50\u6570\u7ec4", "// \u5269\u4f59\u672a\u6392\u5e8f\u533a\u95f4\u4e3a [left, pivot - 1]", "}", "partition", "<", ";", ";", ";", ";", "(", "nums", ",", "left", ",", "right", ")", "pivot", "-", "left", "right", "-", "pivot", "quickSort", "left", "=", "quickSort", "right", "=", "(", "nums", ",", "left", ",", ")", "pivot", "+", "1", "(", "nums", ",", ",", "right", ")", "pivot", "-", "1", "pivot", "-", "1", "pivot", "+", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 143, "ast_depth": 12, "n_identifiers": 6, "vocab_size": 36}}
