{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/zig/chapter_array_and_linkedlist/my_list.zig#61-61", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/zig/chapter_array_and_linkedlist/my_list.zig", "language": "Java"}, "method": {"name": "add", "qualified_name": "codes.zig.chapter_array_and_linkedlist.my_list.zig#add", "start_line": 61, "end_line": 61, "signature": "add(self: *Self, num: T)", "original_code": "pub fn add(self: *Self, num: T)", "doc_comment": "// \u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20"}, "code_tokens": ["pub", "add", "", "fn", "(", ",", ")", "self", "Self", "num", "T", ":", "*", ":"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 4, "vocab_size": 13}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/zig/chapter_array_and_linkedlist/my_list.zig#70-70", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/zig/chapter_array_and_linkedlist/my_list.zig", "language": "Java"}, "method": {"name": "insert", "qualified_name": "codes.zig.chapter_array_and_linkedlist.my_list.zig#insert", "start_line": 70, "end_line": 70, "signature": "insert(self: *Self, index: usize, num: T)", "original_code": "pub fn insert(self: *Self, index: usize, num: T)", "doc_comment": "// \u4e2d\u95f4\u63d2\u5165\u5143\u7d20"}, "code_tokens": ["pub", "insert", "", "fn", "(", ",", ",", ")", "self", "Self", "index", "usize", "num", "T", ":", "*", ":", ":"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 28, "ast_depth": 6, "n_identifiers": 5, "vocab_size": 15}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/zig/chapter_array_and_linkedlist/my_list.zig#85-97", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/zig/chapter_array_and_linkedlist/my_list.zig", "language": "Java"}, "method": {"name": "remove", "qualified_name": "codes.zig.chapter_array_and_linkedlist.my_list.zig#remove", "start_line": 85, "end_line": 97, "signature": "remove(self: *Self, index: usize)", "original_code": "pub fn remove(self: *Self, index: usize) T {\n            if (index < 0 or index >= self.size()) @panic(\"\u7d22\u5f15\u8d8a\u754c\");\n            var num = self.arr[index];\n            // \u7d22\u5f15 i \u4e4b\u540e\u7684\u5143\u7d20\u90fd\u5411\u524d\u79fb\u52a8\u4e00\u4f4d\n            var j = index;\n            while (j < self.size() - 1) : (j += 1) {\n                self.arr[j] = self.arr[j + 1];\n            }\n            // \u66f4\u65b0\u5143\u7d20\u6570\u91cf\n            self.numSize -= 1;\n            // \u8fd4\u56de\u88ab\u5220\u9664\u5143\u7d20\n            return num;\n        }", "doc_comment": "// \u5220\u9664\u5143\u7d20"}, "code_tokens": ["pub", "remove", "fn", "(", ",", ")", "T", "{", "// \u7d22\u5f15 i \u4e4b\u540e\u7684\u5143\u7d20\u90fd\u5411\u524d\u79fb\u52a8\u4e00\u4f4d", "// \u66f4\u65b0\u5143\u7d20\u6570\u91cf", "// \u8fd4\u56de\u88ab\u5220\u9664\u5143\u7d20", "}", "self", "Self", "index", "usize", "if", "var", ";", "while", ";", "return", "num", ";", ":", "*", ":", "(", ")", "var", ";", "j", "=", "index", "(", ")", ":", "{", "}", "-=", "1", ">=", ";", "num", "=", "j", "<", "(", ")", ";", "self", ".", "numSize", "index", "<", "index", "self", ".", "size", "@", "panic", "[", "index", "]", "-", "1", "j", "+=", "1", "=", "0", "or", "(", ")", "(", ")", "self", ".", "arr", "self", ".", "size", "[", "j", "]", "[", "]", "\"", "\u7d22\u5f15\u8d8a\u754c", "\"", "(", ")", "self", ".", "arr", "self", ".", "arr", "j", "+", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 150, "ast_depth": 10, "n_identifiers": 14, "vocab_size": 45}}
{"dataset_split": "train", "example_id": "hello-algo@fb55298:codes/zig/chapter_array_and_linkedlist/my_list.zig#100-100", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "fb552987f5fbfc772cee1758b1ab990306f2f26f", "license": null}, "file": {"path": "codes/zig/chapter_array_and_linkedlist/my_list.zig", "language": "Java"}, "method": {"name": "extendCapacity", "qualified_name": "codes.zig.chapter_array_and_linkedlist.my_list.zig#extendCapacity", "start_line": 100, "end_line": 100, "signature": "extendCapacity(self: *Self)", "original_code": "pub fn extendCapacity(self: *Self)", "doc_comment": "// \u5217\u8868\u6269\u5bb9"}, "code_tokens": ["pub", "extendCapacity", "", "fn", "(", ")", "self", "Self", ":", "*"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 16, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 10}}
{"dataset_split": "train", "example_id": "hello-algo@a8c624f:codes/c/chapter_dynamic_programming/min_path_sum.c#10-12", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "a8c624fa5a2d3dd3eb49ff5c85ba670984e5aae8", "license": null}, "file": {"path": "codes/c/chapter_dynamic_programming/min_path_sum.c", "language": "Java"}, "method": {"name": "min", "qualified_name": "codes.c.chapter_dynamic_programming.min_path_sum.c#min", "start_line": 10, "end_line": 12, "signature": "min(int a, int b)", "original_code": "int min(int a, int b) {\n    return a < b ? a : b;\n}", "doc_comment": "/* \u6c42\u6700\u5c0f\u503c */"}, "code_tokens": ["min", "int", "(", ",", ")", "{", "}", "a", "b", "return", ";", "int", "int", "?", "a", ":", "b", "a", "<", "b"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 32, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 14}}
{"dataset_split": "train", "example_id": "hello-algo@a8c624f:codes/c/chapter_dynamic_programming/min_path_sum.c#15-29", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "a8c624fa5a2d3dd3eb49ff5c85ba670984e5aae8", "license": null}, "file": {"path": "codes/c/chapter_dynamic_programming/min_path_sum.c", "language": "Java"}, "method": {"name": "minPathSumDFS", "qualified_name": "codes.c.chapter_dynamic_programming.min_path_sum.c#minPathSumDFS", "start_line": 15, "end_line": 29, "signature": "minPathSumDFS(int gridCols, int grid[][gridCols], int i, int j)", "original_code": "int minPathSumDFS(int gridCols, int grid[][gridCols], int i, int j) {\n    // \u82e5\u4e3a\u5de6\u4e0a\u89d2\u5355\u5143\u683c\uff0c\u5219\u7ec8\u6b62\u641c\u7d22\n    if (i == 0 && j == 0) {\n        return grid[0][0];\n    }\n    // \u82e5\u884c\u5217\u7d22\u5f15\u8d8a\u754c\uff0c\u5219\u8fd4\u56de +\u221e \u4ee3\u4ef7\n    if (i < 0 || j < 0) {\n        return INT_MAX;\n    }\n    // \u8ba1\u7b97\u4ece\u5de6\u4e0a\u89d2\u5230 (i-1, j) \u548c (i, j-1) \u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7\n    int up = minPathSumDFS(gridCols, grid, i - 1, j);\n    int left = minPathSumDFS(gridCols, grid, i, j - 1);\n    // \u8fd4\u56de\u4ece\u5de6\u4e0a\u89d2\u5230 (i, j) \u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7\n    return min(left, up) != INT_MAX ? min(left, up) + grid[i][j] : INT_MAX;\n}", "doc_comment": "/* \u6700\u5c0f\u8def\u5f84\u548c\uff1a\u66b4\u529b\u641c\u7d22 */"}, "code_tokens": ["minPathSumDFS", "int", "(", ",", ",", ",", ")", "{", "// \u82e5\u4e3a\u5de6\u4e0a\u89d2\u5355\u5143\u683c\uff0c\u5219\u7ec8\u6b62\u641c\u7d22", "// \u82e5\u884c\u5217\u7d22\u5f15\u8d8a\u754c\uff0c\u5219\u8fd4\u56de +\u221e \u4ee3\u4ef7", "// \u8ba1\u7b97\u4ece\u5de6\u4e0a\u89d2\u5230 (i-1, j) \u548c (i, j-1) \u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7", "// \u8fd4\u56de\u4ece\u5de6\u4e0a\u89d2\u5230 (i, j) \u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7", "}", "gridCols", "grid", "i", "j", "if", "if", ";", ";", "return", ";", "int", "int", "[", "]", "[", "]", "int", "int", "(", ")", "{", "}", "(", ")", "{", "}", "int", "up", "=", "int", "left", "=", "?", ":", "INT_MAX", "gridCols", "&&", "return", ";", "||", "return", "INT_MAX", ";", "minPathSumDFS", "minPathSumDFS", "!=", "INT_MAX", "+", "i", "==", "0", "j", "==", "0", "[", "0", "]", "i", "<", "0", "j", "<", "0", "(", "gridCols", ",", "grid", ",", ",", "j", ")", "(", "gridCols", ",", "grid", ",", "i", ",", ")", "min", "min", "[", "j", "]", "grid", "[", "0", "]", "i", "-", "1", "j", "-", "1", "(", "left", ",", "up", ")", "(", "left", ",", "up", ")", "grid", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 174, "ast_depth": 9, "n_identifiers": 9, "vocab_size": 36}}
{"dataset_split": "train", "example_id": "hello-algo@a8c624f:codes/c/chapter_dynamic_programming/min_path_sum.c#32-51", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "a8c624fa5a2d3dd3eb49ff5c85ba670984e5aae8", "license": null}, "file": {"path": "codes/c/chapter_dynamic_programming/min_path_sum.c", "language": "Java"}, "method": {"name": "minPathSumDFSMem", "qualified_name": "codes.c.chapter_dynamic_programming.min_path_sum.c#minPathSumDFSMem", "start_line": 32, "end_line": 51, "signature": "minPathSumDFSMem(int gridCols, int grid[][gridCols], int mem[][gridCols], int i, int j)", "original_code": "int minPathSumDFSMem(int gridCols, int grid[][gridCols], int mem[][gridCols], int i, int j) {\n    // \u82e5\u4e3a\u5de6\u4e0a\u89d2\u5355\u5143\u683c\uff0c\u5219\u7ec8\u6b62\u641c\u7d22\n    if (i == 0 && j == 0) {\n        return grid[0][0];\n    }\n    // \u82e5\u884c\u5217\u7d22\u5f15\u8d8a\u754c\uff0c\u5219\u8fd4\u56de +\u221e \u4ee3\u4ef7\n    if (i < 0 || j < 0) {\n        return INT_MAX;\n    }\n    // \u82e5\u5df2\u6709\u8bb0\u5f55\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\n    if (mem[i][j] != -1) {\n        return mem[i][j];\n    }\n    // \u5de6\u8fb9\u548c\u4e0a\u8fb9\u5355\u5143\u683c\u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7\n    int up = minPathSumDFSMem(gridCols, grid, mem, i - 1, j);\n    int left = minPathSumDFSMem(gridCols, grid, mem, i, j - 1);\n    // \u8bb0\u5f55\u5e76\u8fd4\u56de\u5de6\u4e0a\u89d2\u5230 (i, j) \u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7\n    mem[i][j] = min(left, up) != INT_MAX ? min(left, up) + grid[i][j] : INT_MAX;\n    return mem[i][j];\n}", "doc_comment": "/* \u6700\u5c0f\u8def\u5f84\u548c\uff1a\u8bb0\u5fc6\u5316\u641c\u7d22 */"}, "code_tokens": ["minPathSumDFSMem", "int", "(", ",", ",", ",", ",", ")", "{", "// \u82e5\u4e3a\u5de6\u4e0a\u89d2\u5355\u5143\u683c\uff0c\u5219\u7ec8\u6b62\u641c\u7d22", "// \u82e5\u884c\u5217\u7d22\u5f15\u8d8a\u754c\uff0c\u5219\u8fd4\u56de +\u221e \u4ee3\u4ef7", "// \u82e5\u5df2\u6709\u8bb0\u5f55\uff0c\u5219\u76f4\u63a5\u8fd4\u56de", "// \u5de6\u8fb9\u548c\u4e0a\u8fb9\u5355\u5143\u683c\u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7", "// \u8bb0\u5f55\u5e76\u8fd4\u56de\u5de6\u4e0a\u89d2\u5230 (i, j) \u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7", "}", "gridCols", "grid", "mem", "i", "j", "if", "if", "if", ";", ";", ";", "return", ";", "int", "int", "[", "]", "[", "]", "int", "[", "]", "[", "]", "int", "int", "(", ")", "{", "}", "(", ")", "{", "}", "(", ")", "{", "}", "int", "up", "=", "int", "left", "=", "=", "[", "j", "]", "gridCols", "gridCols", "&&", "return", ";", "||", "return", "INT_MAX", ";", "!=", "return", ";", "minPathSumDFSMem", "minPathSumDFSMem", "[", "j", "]", "?", ":", "INT_MAX", "mem", "[", "i", "]", "i", "==", "0", "j", "==", "0", "[", "0", "]", "i", "<", "0", "j", "<", "0", "[", "j", "]", "-", "1", "[", "j", "]", "(", "gridCols", ",", "grid", ",", "mem", ",", ",", "j", ")", "(", "gridCols", ",", "grid", ",", "mem", ",", "i", ",", ")", "mem", "[", "i", "]", "!=", "INT_MAX", "+", "grid", "[", "0", "]", "mem", "[", "i", "]", "mem", "[", "i", "]", "i", "-", "1", "j", "-", "1", "min", "min", "[", "j", "]", "(", "left", ",", "up", ")", "(", "left", ",", "up", ")", "grid", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 247, "ast_depth": 10, "n_identifiers": 10, "vocab_size": 38}}
{"dataset_split": "train", "example_id": "hello-algo@a8c624f:codes/c/chapter_dynamic_programming/min_path_sum.c#54-73", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "a8c624fa5a2d3dd3eb49ff5c85ba670984e5aae8", "license": null}, "file": {"path": "codes/c/chapter_dynamic_programming/min_path_sum.c", "language": "Java"}, "method": {"name": "minPathSumDP", "qualified_name": "codes.c.chapter_dynamic_programming.min_path_sum.c#minPathSumDP", "start_line": 54, "end_line": 73, "signature": "minPathSumDP(int gridCols, int grid[][gridCols], int n, int m)", "original_code": "int minPathSumDP(int gridCols, int grid[][gridCols], int n, int m) {\n    // \u521d\u59cb\u5316 dp \u8868\n    int dp[n][m];\n    dp[0][0] = grid[0][0];\n    // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c\n    for (int j = 1; j < m; j++) {\n        dp[0][j] = dp[0][j - 1] + grid[0][j];\n    }\n    // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u5217\n    for (int i = 1; i < n; i++) {\n        dp[i][0] = dp[i - 1][0] + grid[i][0];\n    }\n    // \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\u5217\n    for (int i = 1; i < n; i++) {\n        for (int j = 1; j < m; j++) {\n            dp[i][j] = min(dp[i][j - 1], dp[i - 1][j]) + grid[i][j];\n        }\n    }\n    return dp[n - 1][m - 1];\n}", "doc_comment": "/* \u6700\u5c0f\u8def\u5f84\u548c\uff1a\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["minPathSumDP", "int", "(", ",", ",", ",", ")", "{", "// \u521d\u59cb\u5316 dp \u8868", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u5217", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\u5217", "}", "gridCols", "grid", "n", "m", ";", ";", "for", "(", ";", ")", "for", "(", ";", ")", "for", "(", ";", ")", "return", ";", "int", "int", "[", "]", "[", "]", "int", "int", "int", "dp", "=", ";", "j", "<", "m", "j", "++", "{", "}", ";", "i", "<", "n", "i", "++", "{", "}", ";", "i", "<", "n", "i", "++", "{", "}", "[", "]", "gridCols", "[", "]", "[", "]", "[", "0", "]", "[", "0", "]", "int", "j", "=", "1", ";", "int", "i", "=", "1", ";", "int", "i", "=", "1", "for", "(", ";", ")", "dp", "[", "]", "m", "-", "1", "n", "m", "dp", "[", "0", "]", "grid", "[", "0", "]", "=", "=", ";", "j", "<", "m", "j", "++", "{", "}", "n", "-", "1", "[", "j", "]", "+", "[", "0", "]", "+", "int", "j", "=", "1", ";", "dp", "[", "0", "]", "[", "]", "[", "j", "]", "dp", "[", "i", "]", "[", "0", "]", "[", "0", "]", "=", "dp", "[", "0", "]", "j", "-", "1", "grid", "[", "0", "]", "dp", "[", "]", "grid", "[", "i", "]", "[", "j", "]", "+", "i", "-", "1", "dp", "[", "i", "]", "min", "[", "j", "]", "(", ",", ")", "grid", "[", "i", "]", "[", "]", "[", "j", "]", "dp", "[", "i", "]", "j", "-", "1", "dp", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 314, "ast_depth": 16, "n_identifiers": 9, "vocab_size": 31}}
{"dataset_split": "train", "example_id": "hello-algo@a8c624f:codes/c/chapter_dynamic_programming/min_path_sum.c#76-94", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "a8c624fa5a2d3dd3eb49ff5c85ba670984e5aae8", "license": null}, "file": {"path": "codes/c/chapter_dynamic_programming/min_path_sum.c", "language": "Java"}, "method": {"name": "minPathSumDPComp", "qualified_name": "codes.c.chapter_dynamic_programming.min_path_sum.c#minPathSumDPComp", "start_line": 76, "end_line": 94, "signature": "minPathSumDPComp(int gridCols, int grid[][gridCols], int n, int m)", "original_code": "int minPathSumDPComp(int gridCols, int grid[][gridCols], int n, int m) {\n    // \u521d\u59cb\u5316 dp \u8868\n    int dp[m];\n    // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c\n    dp[0] = grid[0][0];\n    for (int j = 1; j < m; j++) {\n        dp[j] = dp[j - 1] + grid[0][j];\n    }\n    // \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\n    for (int i = 1; i < n; i++) {\n        // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u5217\n        dp[0] = dp[0] + grid[i][0];\n        // \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u5217\n        for (int j = 1; j < m; j++) {\n            dp[j] = min(dp[j - 1], dp[j]) + grid[i][j];\n        }\n    }\n    return dp[m - 1];\n}", "doc_comment": "/* \u6700\u5c0f\u8def\u5f84\u548c\uff1a\u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["minPathSumDPComp", "int", "(", ",", ",", ",", ")", "{", "// \u521d\u59cb\u5316 dp \u8868", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c", "}", "gridCols", "grid", "n", "m", ";", ";", "for", "(", ";", ")", "for", "(", ";", ")", "return", ";", "int", "int", "[", "]", "[", "]", "int", "int", "int", "dp", "=", ";", "j", "<", "m", "j", "++", "{", "}", ";", "i", "<", "n", "i", "++", "{", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u5217", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u5217", "}", "dp", "[", "]", "gridCols", "[", "]", "dp", "[", "0", "]", "[", "0", "]", "int", "j", "=", "1", ";", "int", "i", "=", "1", ";", "for", "(", ";", ")", "m", "-", "1", "m", "grid", "[", "0", "]", "=", "=", ";", "j", "<", "m", "j", "++", "{", "}", "dp", "[", "j", "]", "+", "dp", "[", "0", "]", "+", "int", "j", "=", "1", ";", "dp", "[", "]", "[", "j", "]", "dp", "[", "0", "]", "[", "0", "]", "=", "j", "-", "1", "grid", "[", "0", "]", "grid", "[", "i", "]", "dp", "[", "j", "]", "+", "min", "[", "j", "]", "(", ",", ")", "grid", "[", "i", "]", "dp", "[", "]", "dp", "[", "j", "]", "j", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 243, "ast_depth": 15, "n_identifiers": 9, "vocab_size": 32}}
{"dataset_split": "train", "example_id": "hello-algo@a8c624f:codes/c/chapter_dynamic_programming/min_path_sum.c#97-120", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "a8c624fa5a2d3dd3eb49ff5c85ba670984e5aae8", "license": null}, "file": {"path": "codes/c/chapter_dynamic_programming/min_path_sum.c", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.c.chapter_dynamic_programming.min_path_sum.c#main", "start_line": 97, "end_line": 120, "signature": "main()", "original_code": "int main() {\n    int grid[][4] = {{1, 3, 1, 5}, {2, 2, 4, 2}, {5, 3, 2, 1}, {4, 3, 5, 2}};\n    int n = sizeof(grid) / sizeof(grid[0]), m = sizeof(grid[0]) / sizeof(grid[0][0]);\n\n    // \u66b4\u529b\u641c\u7d22\n    int res = minPathSumDFS(m, grid, n - 1, m - 1);\n    printf(\"\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a %d\\n\", res);\n\n    // \u8bb0\u5fc6\u5316\u641c\u7d22\n    int mem[n][m];\n    memset(mem, -1, sizeof(mem));\n    res = minPathSumDFSMem(m, grid, mem, n - 1, m - 1);\n    printf(\"\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a %d\\n\", res);\n\n    // \u52a8\u6001\u89c4\u5212\n    res = minPathSumDP(m, grid, n, m);\n    printf(\"\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a %d\\n\", res);\n\n    // \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212\n    res = minPathSumDPComp(m, grid, n, m);\n    printf(\"\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a %d\\n\", res);\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "// \u66b4\u529b\u641c\u7d22", "// \u8bb0\u5fc6\u5316\u641c\u7d22", "// \u52a8\u6001\u89c4\u5212", "// \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212", "}", ";", ",", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "return", "0", ";", "int", "grid", "=", "int", "n", "=", "m", "=", "int", "res", "=", "printf", "int", "mem", "memset", "res", "=", "printf", "res", "=", "printf", "res", "=", "printf", "[", "]", "[", "]", "{", ",", ",", ",", "}", "/", "/", "minPathSumDFS", "(", ",", "res", ")", "[", "]", "[", "]", "(", "mem", ",", ",", ")", "minPathSumDFSMem", "(", ",", "res", ")", "minPathSumDP", "(", ",", "res", ")", "minPathSumDPComp", "(", ",", "res", ")", "4", "{", "1", ",", "3", ",", "1", ",", "5", "}", "{", "2", ",", "2", ",", "4", ",", "2", "}", "{", "5", ",", "3", ",", "2", ",", "1", "}", "{", "4", ",", "3", ",", "5", ",", "2", "}", "sizeof", "sizeof", "sizeof", "sizeof", "(", "m", ",", "grid", ",", ",", ")", "\"", "\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a %d", "\\n", "\"", "n", "m", "-", "1", "sizeof", "(", "m", ",", "grid", ",", "mem", ",", ",", ")", "\"", "\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a %d", "\\n", "\"", "(", "m", ",", "grid", ",", "n", ",", "m", ")", "\"", "\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a %d", "\\n", "\"", "(", "m", ",", "grid", ",", "n", ",", "m", ")", "\"", "\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a %d", "\\n", "\"", "(", "grid", ")", "(", ")", "(", ")", "(", ")", "n", "-", "1", "m", "-", "1", "(", "mem", ")", "n", "-", "1", "m", "-", "1", "grid", "[", "0", "]", "grid", "[", "0", "]", "[", "0", "]", "grid", "[", "0", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 308, "ast_depth": 11, "n_identifiers": 13, "vocab_size": 39}}
{"dataset_split": "train", "example_id": "hello-algo@a8c624f:codes/cpp/chapter_dynamic_programming/min_path_sum.cpp#10-24", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "a8c624fa5a2d3dd3eb49ff5c85ba670984e5aae8", "license": null}, "file": {"path": "codes/cpp/chapter_dynamic_programming/min_path_sum.cpp", "language": "Java"}, "method": {"name": "minPathSumDFS", "qualified_name": "codes.cpp.chapter_dynamic_programming.min_path_sum.cpp#minPathSumDFS", "start_line": 10, "end_line": 24, "signature": "minPathSumDFS(vector<vector<int>> &grid, int i, int j)", "original_code": "int minPathSumDFS(vector<vector<int>> &grid, int i, int j) {\n    // \u82e5\u4e3a\u5de6\u4e0a\u89d2\u5355\u5143\u683c\uff0c\u5219\u7ec8\u6b62\u641c\u7d22\n    if (i == 0 && j == 0) {\n        return grid[0][0];\n    }\n    // \u82e5\u884c\u5217\u7d22\u5f15\u8d8a\u754c\uff0c\u5219\u8fd4\u56de +\u221e \u4ee3\u4ef7\n    if (i < 0 || j < 0) {\n        return INT_MAX;\n    }\n    // \u8ba1\u7b97\u4ece\u5de6\u4e0a\u89d2\u5230 (i-1, j) \u548c (i, j-1) \u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7\n    int up = minPathSumDFS(grid, i - 1, j);\n    int left = minPathSumDFS(grid, i, j - 1);\n    // \u8fd4\u56de\u4ece\u5de6\u4e0a\u89d2\u5230 (i, j) \u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7\n    return min(left, up) != INT_MAX ? min(left, up) + grid[i][j] : INT_MAX;\n}", "doc_comment": "/* \u6700\u5c0f\u8def\u5f84\u548c\uff1a\u66b4\u529b\u641c\u7d22 */"}, "code_tokens": ["minPathSumDFS", "int", "(", ",", ",", ")", "{", "// \u82e5\u4e3a\u5de6\u4e0a\u89d2\u5355\u5143\u683c\uff0c\u5219\u7ec8\u6b62\u641c\u7d22", "// \u82e5\u884c\u5217\u7d22\u5f15\u8d8a\u754c\uff0c\u5219\u8fd4\u56de +\u221e \u4ee3\u4ef7", "// \u8ba1\u7b97\u4ece\u5de6\u4e0a\u89d2\u5230 (i-1, j) \u548c (i, j-1) \u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7", "// \u8fd4\u56de\u4ece\u5de6\u4e0a\u89d2\u5230 (i, j) \u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7", "}", "grid", "i", "j", "if", "if", ";", ";", "return", ";", "vector", "&", "int", "int", "(", ")", "{", "}", "(", ")", "{", "}", "int", "up", "=", "int", "left", "=", "?", ":", "INT_MAX", "<", ">", "&&", "return", ";", "||", "return", "INT_MAX", ";", "minPathSumDFS", "minPathSumDFS", "!=", "INT_MAX", "+", "vector", "i", "==", "0", "j", "==", "0", "[", "0", "]", "i", "<", "0", "j", "<", "0", "(", "grid", ",", ",", "j", ")", "(", "grid", ",", "i", ",", ")", "min", "min", "[", "j", "]", "<", ">", "grid", "[", "0", "]", "i", "-", "1", "j", "-", "1", "(", "left", ",", "up", ")", "(", "left", ",", "up", ")", "grid", "[", "i", "]", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 170, "ast_depth": 10, "n_identifiers": 8, "vocab_size": 38}}
{"dataset_split": "train", "example_id": "hello-algo@a8c624f:codes/cpp/chapter_dynamic_programming/min_path_sum.cpp#27-46", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "a8c624fa5a2d3dd3eb49ff5c85ba670984e5aae8", "license": null}, "file": {"path": "codes/cpp/chapter_dynamic_programming/min_path_sum.cpp", "language": "Java"}, "method": {"name": "minPathSumDFSMem", "qualified_name": "codes.cpp.chapter_dynamic_programming.min_path_sum.cpp#minPathSumDFSMem", "start_line": 27, "end_line": 46, "signature": "minPathSumDFSMem(vector<vector<int>> &grid, vector<vector<int>> &mem, int i, int j)", "original_code": "int minPathSumDFSMem(vector<vector<int>> &grid, vector<vector<int>> &mem, int i, int j) {\n    // \u82e5\u4e3a\u5de6\u4e0a\u89d2\u5355\u5143\u683c\uff0c\u5219\u7ec8\u6b62\u641c\u7d22\n    if (i == 0 && j == 0) {\n        return grid[0][0];\n    }\n    // \u82e5\u884c\u5217\u7d22\u5f15\u8d8a\u754c\uff0c\u5219\u8fd4\u56de +\u221e \u4ee3\u4ef7\n    if (i < 0 || j < 0) {\n        return INT_MAX;\n    }\n    // \u82e5\u5df2\u6709\u8bb0\u5f55\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\n    if (mem[i][j] != -1) {\n        return mem[i][j];\n    }\n    // \u5de6\u8fb9\u548c\u4e0a\u8fb9\u5355\u5143\u683c\u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7\n    int up = minPathSumDFSMem(grid, mem, i - 1, j);\n    int left = minPathSumDFSMem(grid, mem, i, j - 1);\n    // \u8bb0\u5f55\u5e76\u8fd4\u56de\u5de6\u4e0a\u89d2\u5230 (i, j) \u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7\n    mem[i][j] = min(left, up) != INT_MAX ? min(left, up) + grid[i][j] : INT_MAX;\n    return mem[i][j];\n}", "doc_comment": "/* \u6700\u5c0f\u8def\u5f84\u548c\uff1a\u8bb0\u5fc6\u5316\u641c\u7d22 */"}, "code_tokens": ["minPathSumDFSMem", "int", "(", ",", ",", ",", ")", "{", "// \u82e5\u4e3a\u5de6\u4e0a\u89d2\u5355\u5143\u683c\uff0c\u5219\u7ec8\u6b62\u641c\u7d22", "// \u82e5\u884c\u5217\u7d22\u5f15\u8d8a\u754c\uff0c\u5219\u8fd4\u56de +\u221e \u4ee3\u4ef7", "// \u82e5\u5df2\u6709\u8bb0\u5f55\uff0c\u5219\u76f4\u63a5\u8fd4\u56de", "// \u5de6\u8fb9\u548c\u4e0a\u8fb9\u5355\u5143\u683c\u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7", "// \u8bb0\u5f55\u5e76\u8fd4\u56de\u5de6\u4e0a\u89d2\u5230 (i, j) \u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7", "}", "grid", "mem", "i", "j", "if", "if", "if", ";", ";", ";", "return", ";", "vector", "&", "vector", "&", "int", "int", "(", ")", "{", "}", "(", ")", "{", "}", "(", ")", "{", "}", "int", "up", "=", "int", "left", "=", "=", "[", "j", "]", "<", ">", "<", ">", "&&", "return", ";", "||", "return", "INT_MAX", ";", "!=", "return", ";", "minPathSumDFSMem", "minPathSumDFSMem", "[", "j", "]", "?", ":", "INT_MAX", "mem", "[", "i", "]", "vector", "vector", "i", "==", "0", "j", "==", "0", "[", "0", "]", "i", "<", "0", "j", "<", "0", "[", "j", "]", "-", "1", "[", "j", "]", "(", "grid", ",", "mem", ",", ",", "j", ")", "(", "grid", ",", "mem", ",", "i", ",", ")", "mem", "[", "i", "]", "!=", "INT_MAX", "+", "<", ">", "<", ">", "grid", "[", "0", "]", "mem", "[", "i", "]", "mem", "[", "i", "]", "i", "-", "1", "j", "-", "1", "min", "min", "[", "j", "]", "int", "int", "(", "left", ",", "up", ")", "(", "left", ",", "up", ")", "grid", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 248, "ast_depth": 10, "n_identifiers": 9, "vocab_size": 40}}
{"dataset_split": "train", "example_id": "hello-algo@a8c624f:codes/cpp/chapter_dynamic_programming/min_path_sum.cpp#49-69", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "a8c624fa5a2d3dd3eb49ff5c85ba670984e5aae8", "license": null}, "file": {"path": "codes/cpp/chapter_dynamic_programming/min_path_sum.cpp", "language": "Java"}, "method": {"name": "minPathSumDP", "qualified_name": "codes.cpp.chapter_dynamic_programming.min_path_sum.cpp#minPathSumDP", "start_line": 49, "end_line": 69, "signature": "minPathSumDP(vector<vector<int>> &grid)", "original_code": "int minPathSumDP(vector<vector<int>> &grid) {\n    int n = grid.size(), m = grid[0].size();\n    // \u521d\u59cb\u5316 dp \u8868\n    vector<vector<int>> dp(n, vector<int>(m));\n    dp[0][0] = grid[0][0];\n    // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c\n    for (int j = 1; j < m; j++) {\n        dp[0][j] = dp[0][j - 1] + grid[0][j];\n    }\n    // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u5217\n    for (int i = 1; i < n; i++) {\n        dp[i][0] = dp[i - 1][0] + grid[i][0];\n    }\n    // \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\u5217\n    for (int i = 1; i < n; i++) {\n        for (int j = 1; j < m; j++) {\n            dp[i][j] = min(dp[i][j - 1], dp[i - 1][j]) + grid[i][j];\n        }\n    }\n    return dp[n - 1][m - 1];\n}", "doc_comment": "/* \u6700\u5c0f\u8def\u5f84\u548c\uff1a\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["minPathSumDP", "int", "(", ")", "{", "// \u521d\u59cb\u5316 dp \u8868", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u5217", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\u5217", "}", "grid", ",", ";", "", ";", ";", "for", "(", ";", ")", "for", "(", ";", ")", "for", "(", ";", ")", "return", ";", "vector", "&", "int", "n", "=", "m", "=", "vector", "dp", "(", ")", "=", ";", "j", "<", "m", "j", "++", "{", "}", ";", "i", "<", "n", "i", "++", "{", "}", ";", "i", "<", "n", "i", "++", "{", "}", "[", "]", "<", ">", "grid", ".", "size", ".", "size", "<", ">", "n", ">", "[", "0", "]", "[", "0", "]", "int", "j", "=", "1", ";", "int", "i", "=", "1", ";", "int", "i", "=", "1", "for", "(", ";", ")", "dp", "[", "]", "m", "-", "1", "vector", "(", ")", "grid", "[", "0", "]", "(", ")", "vector", ",", "vector", "<", "int", "(", "m", ")", "dp", "[", "0", "]", "grid", "[", "0", "]", "=", "=", ";", "j", "<", "m", "j", "++", "{", "}", "n", "-", "1", "<", ">", "<", ">", "[", "j", "]", "+", "[", "0", "]", "+", "int", "j", "=", "1", ";", "int", "int", "dp", "[", "0", "]", "[", "]", "[", "j", "]", "dp", "[", "i", "]", "[", "0", "]", "[", "0", "]", "=", "dp", "[", "0", "]", "j", "-", "1", "grid", "[", "0", "]", "dp", "[", "]", "grid", "[", "i", "]", "[", "j", "]", "+", "i", "-", "1", "dp", "[", "i", "]", "min", "[", "j", "]", "(", ",", ")", "grid", "[", "i", "]", "[", "]", "[", "j", "]", "dp", "[", "i", "]", "j", "-", "1", "dp", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 351, "ast_depth": 16, "n_identifiers": 10, "vocab_size": 36}}
{"dataset_split": "train", "example_id": "hello-algo@a8c624f:codes/cpp/chapter_dynamic_programming/min_path_sum.cpp#72-91", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "a8c624fa5a2d3dd3eb49ff5c85ba670984e5aae8", "license": null}, "file": {"path": "codes/cpp/chapter_dynamic_programming/min_path_sum.cpp", "language": "Java"}, "method": {"name": "minPathSumDPComp", "qualified_name": "codes.cpp.chapter_dynamic_programming.min_path_sum.cpp#minPathSumDPComp", "start_line": 72, "end_line": 91, "signature": "minPathSumDPComp(vector<vector<int>> &grid)", "original_code": "int minPathSumDPComp(vector<vector<int>> &grid) {\n    int n = grid.size(), m = grid[0].size();\n    // \u521d\u59cb\u5316 dp \u8868\n    vector<int> dp(m);\n    // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c\n    dp[0] = grid[0][0];\n    for (int j = 1; j < m; j++) {\n        dp[j] = dp[j - 1] + grid[0][j];\n    }\n    // \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\n    for (int i = 1; i < n; i++) {\n        // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u5217\n        dp[0] = dp[0] + grid[i][0];\n        // \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u5217\n        for (int j = 1; j < m; j++) {\n            dp[j] = min(dp[j - 1], dp[j]) + grid[i][j];\n        }\n    }\n    return dp[m - 1];\n}", "doc_comment": "/* \u6700\u5c0f\u8def\u5f84\u548c\uff1a\u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["minPathSumDPComp", "int", "(", ")", "{", "// \u521d\u59cb\u5316 dp \u8868", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c", "}", "grid", ",", ";", "", ";", ";", "for", "(", ";", ")", "for", "(", ";", ")", "return", ";", "vector", "&", "int", "n", "=", "m", "=", "vector", "dp", "(", "m", ")", "=", ";", "j", "<", "m", "j", "++", "{", "}", ";", "i", "<", "n", "i", "++", "{", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u5217", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u5217", "}", "dp", "[", "]", "<", ">", "grid", ".", "size", ".", "size", "<", ">", "dp", "[", "0", "]", "[", "0", "]", "int", "j", "=", "1", ";", "int", "i", "=", "1", ";", "for", "(", ";", ")", "m", "-", "1", "vector", "(", ")", "grid", "[", "0", "]", "(", ")", "int", "grid", "[", "0", "]", "=", "=", ";", "j", "<", "m", "j", "++", "{", "}", "<", ">", "dp", "[", "j", "]", "+", "dp", "[", "0", "]", "+", "int", "j", "=", "1", ";", "int", "dp", "[", "]", "[", "j", "]", "dp", "[", "0", "]", "[", "0", "]", "=", "j", "-", "1", "grid", "[", "0", "]", "grid", "[", "i", "]", "dp", "[", "j", "]", "+", "min", "[", "j", "]", "(", ",", ")", "grid", "[", "i", "]", "dp", "[", "]", "dp", "[", "j", "]", "j", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 268, "ast_depth": 15, "n_identifiers": 9, "vocab_size": 37}}
{"dataset_split": "train", "example_id": "hello-algo@a8c624f:codes/cpp/chapter_dynamic_programming/min_path_sum.cpp#94-116", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "a8c624fa5a2d3dd3eb49ff5c85ba670984e5aae8", "license": null}, "file": {"path": "codes/cpp/chapter_dynamic_programming/min_path_sum.cpp", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.cpp.chapter_dynamic_programming.min_path_sum.cpp#main", "start_line": 94, "end_line": 116, "signature": "main()", "original_code": "int main() {\n    vector<vector<int>> grid = {{1, 3, 1, 5}, {2, 2, 4, 2}, {5, 3, 2, 1}, {4, 3, 5, 2}};\n    int n = grid.size(), m = grid[0].size();\n\n    // \u66b4\u529b\u641c\u7d22\n    int res = minPathSumDFS(grid, n - 1, m - 1);\n    cout << \"\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a \" << res << endl;\n\n    // \u8bb0\u5fc6\u5316\u641c\u7d22\n    vector<vector<int>> mem(n, vector<int>(m, -1));\n    res = minPathSumDFSMem(grid, mem, n - 1, m - 1);\n    cout << \"\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a \" << res << endl;\n\n    // \u52a8\u6001\u89c4\u5212\n    res = minPathSumDP(grid);\n    cout << \"\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a \" << res << endl;\n\n    // \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212\n    res = minPathSumDPComp(grid);\n    cout << \"\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a \" << res << endl;\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "// \u66b4\u529b\u641c\u7d22", "// \u8bb0\u5fc6\u5316\u641c\u7d22", "// \u52a8\u6001\u89c4\u5212", "// \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212", "}", ";", ",", ";", ";", ";", "", ";", ";", ";", ";", ";", ";", ";", "return", "0", ";", "vector", "grid", "=", "int", "n", "=", "m", "=", "int", "res", "=", "<<", "endl", "vector", "mem", "(", ")", "res", "=", "<<", "endl", "res", "=", "<<", "endl", "res", "=", "<<", "endl", "<", ">", "{", ",", ",", ",", "}", "grid", ".", "size", ".", "size", "minPathSumDFS", "<<", "res", "<", ">", "n", ">", "minPathSumDFSMem", "<<", "res", "minPathSumDP", "<<", "res", "minPathSumDPComp", "<<", "res", "vector", "{", "1", ",", "3", ",", "1", ",", "5", "}", "{", "2", ",", "2", ",", "4", ",", "2", "}", "{", "5", ",", "3", ",", "2", ",", "1", "}", "{", "4", ",", "3", ",", "5", ",", "2", "}", "(", ")", "grid", "[", "0", "]", "(", ")", "(", "grid", ",", ",", ")", "cout", "<<", "vector", ",", "vector", "<", "int", "(", ")", "(", "grid", ",", "mem", ",", ",", ")", "cout", "<<", "(", "grid", ")", "cout", "<<", "(", "grid", ")", "cout", "<<", "<", ">", "n", "-", "1", "m", "-", "1", "\"", "\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a ", "\"", "<", ">", "m", "-", "1", "n", "-", "1", "m", "-", "1", "\"", "\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a ", "\"", "\"", "\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a ", "\"", "\"", "\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a ", "\"", "int", "int", ","], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 277, "ast_depth": 10, "n_identifiers": 14, "vocab_size": 43}}
{"dataset_split": "train", "example_id": "hello-algo@a8c624f:codes/csharp/chapter_dynamic_programming/min_path_sum.cs#11-25", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "a8c624fa5a2d3dd3eb49ff5c85ba670984e5aae8", "license": null}, "file": {"path": "codes/csharp/chapter_dynamic_programming/min_path_sum.cs", "language": "Java"}, "method": {"name": "MinPathSumDFS", "qualified_name": "codes.csharp.chapter_dynamic_programming.min_path_sum.cs#MinPathSumDFS", "start_line": 11, "end_line": 25, "signature": "MinPathSumDFS(int[][] grid, int i, int j)", "original_code": "public int MinPathSumDFS(int[][] grid, int i, int j) {\n        // \u82e5\u4e3a\u5de6\u4e0a\u89d2\u5355\u5143\u683c\uff0c\u5219\u7ec8\u6b62\u641c\u7d22\n        if (i == 0 && j == 0) {\n            return grid[0][0];\n        }\n        // \u82e5\u884c\u5217\u7d22\u5f15\u8d8a\u754c\uff0c\u5219\u8fd4\u56de +\u221e \u4ee3\u4ef7\n        if (i < 0 || j < 0) {\n            return int.MaxValue;\n        }\n        // \u8ba1\u7b97\u4ece\u5de6\u4e0a\u89d2\u5230 (i-1, j) \u548c (i, j-1) \u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7\n        int up = MinPathSumDFS(grid, i - 1, j);\n        int left = MinPathSumDFS(grid, i, j - 1);\n        // \u8fd4\u56de\u4ece\u5de6\u4e0a\u89d2\u5230 (i, j) \u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7\n        return Math.Min(left, up) + grid[i][j];\n    }", "doc_comment": "/* \u6700\u5c0f\u8def\u5f84\u548c\uff1a\u66b4\u529b\u641c\u7d22 */"}, "code_tokens": ["MinPathSumDFS", "public", "int", "(", ",", ",", ")", "{", "// \u82e5\u4e3a\u5de6\u4e0a\u89d2\u5355\u5143\u683c\uff0c\u5219\u7ec8\u6b62\u641c\u7d22", "// \u82e5\u884c\u5217\u7d22\u5f15\u8d8a\u754c\uff0c\u5219\u8fd4\u56de +\u221e \u4ee3\u4ef7", "// \u8ba1\u7b97\u4ece\u5de6\u4e0a\u89d2\u5230 (i-1, j) \u548c (i, j-1) \u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7", "// \u8fd4\u56de\u4ece\u5de6\u4e0a\u89d2\u5230 (i, j) \u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7", "}", "grid", "i", "j", "if", "if", ";", ";", "return", ";", "int", "int", "(", ")", "{", "}", "(", ")", "{", "}", "int", "up", "=", "int", "left", "=", "+", "int", "[", "]", "[", "]", "&&", "return", ";", "||", "return", "MaxValue", ";", "MinPathSumDFS", "MinPathSumDFS", "Math", ".", "Min", "[", "j", "]", "i", "==", "0", "j", "==", "0", "[", "0", "]", "i", "<", "0", "j", "<", "0", ".", "(", "grid", ",", ",", "j", ")", "(", "grid", ",", "i", ",", ")", "(", "left", ",", "up", ")", "grid", "[", "i", "]", "grid", "[", "0", "]", "int", "i", "-", "1", "j", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 157, "ast_depth": 9, "n_identifiers": 9, "vocab_size": 35}}
{"dataset_split": "train", "example_id": "hello-algo@a8c624f:codes/csharp/chapter_dynamic_programming/min_path_sum.cs#28-47", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "a8c624fa5a2d3dd3eb49ff5c85ba670984e5aae8", "license": null}, "file": {"path": "codes/csharp/chapter_dynamic_programming/min_path_sum.cs", "language": "Java"}, "method": {"name": "MinPathSumDFSMem", "qualified_name": "codes.csharp.chapter_dynamic_programming.min_path_sum.cs#MinPathSumDFSMem", "start_line": 28, "end_line": 47, "signature": "MinPathSumDFSMem(int[][] grid, int[][] mem, int i, int j)", "original_code": "public int MinPathSumDFSMem(int[][] grid, int[][] mem, int i, int j) {\n        // \u82e5\u4e3a\u5de6\u4e0a\u89d2\u5355\u5143\u683c\uff0c\u5219\u7ec8\u6b62\u641c\u7d22\n        if (i == 0 && j == 0) {\n            return grid[0][0];\n        }\n        // \u82e5\u884c\u5217\u7d22\u5f15\u8d8a\u754c\uff0c\u5219\u8fd4\u56de +\u221e \u4ee3\u4ef7\n        if (i < 0 || j < 0) {\n            return int.MaxValue;\n        }\n        // \u82e5\u5df2\u6709\u8bb0\u5f55\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\n        if (mem[i][j] != -1) {\n            return mem[i][j];\n        }\n        // \u5de6\u8fb9\u548c\u4e0a\u8fb9\u5355\u5143\u683c\u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7\n        int up = MinPathSumDFSMem(grid, mem, i - 1, j);\n        int left = MinPathSumDFSMem(grid, mem, i, j - 1);\n        // \u8bb0\u5f55\u5e76\u8fd4\u56de\u5de6\u4e0a\u89d2\u5230 (i, j) \u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7\n        mem[i][j] = Math.Min(left, up) + grid[i][j];\n        return mem[i][j];\n    }", "doc_comment": "/* \u6700\u5c0f\u8def\u5f84\u548c\uff1a\u8bb0\u5fc6\u5316\u641c\u7d22 */"}, "code_tokens": ["MinPathSumDFSMem", "public", "int", "(", ",", ",", ",", ")", "{", "// \u82e5\u4e3a\u5de6\u4e0a\u89d2\u5355\u5143\u683c\uff0c\u5219\u7ec8\u6b62\u641c\u7d22", "// \u82e5\u884c\u5217\u7d22\u5f15\u8d8a\u754c\uff0c\u5219\u8fd4\u56de +\u221e \u4ee3\u4ef7", "// \u82e5\u5df2\u6709\u8bb0\u5f55\uff0c\u5219\u76f4\u63a5\u8fd4\u56de", "// \u5de6\u8fb9\u548c\u4e0a\u8fb9\u5355\u5143\u683c\u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7", "// \u8bb0\u5f55\u5e76\u8fd4\u56de\u5de6\u4e0a\u89d2\u5230 (i, j) \u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7", "}", "grid", "mem", "i", "j", "if", "if", "if", ";", ";", ";", "return", ";", "int", "int", "(", ")", "{", "}", "(", ")", "{", "}", "(", ")", "{", "}", "int", "up", "=", "int", "left", "=", "=", "[", "j", "]", "int", "[", "]", "[", "]", "int", "[", "]", "[", "]", "&&", "return", ";", "||", "return", "MaxValue", ";", "!=", "return", ";", "MinPathSumDFSMem", "MinPathSumDFSMem", "[", "j", "]", "+", "mem", "[", "i", "]", "i", "==", "0", "j", "==", "0", "[", "0", "]", "i", "<", "0", "j", "<", "0", ".", "[", "j", "]", "-", "1", "[", "j", "]", "(", "grid", ",", "mem", ",", ",", "j", ")", "(", "grid", ",", "mem", ",", "i", ",", ")", "mem", "[", "i", "]", "Math", ".", "Min", "[", "j", "]", "grid", "[", "0", "]", "int", "mem", "[", "i", "]", "mem", "[", "i", "]", "i", "-", "1", "j", "-", "1", "(", "left", ",", "up", ")", "grid", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 229, "ast_depth": 9, "n_identifiers": 10, "vocab_size": 38}}
{"dataset_split": "train", "example_id": "hello-algo@a8c624f:codes/csharp/chapter_dynamic_programming/min_path_sum.cs#50-70", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "a8c624fa5a2d3dd3eb49ff5c85ba670984e5aae8", "license": null}, "file": {"path": "codes/csharp/chapter_dynamic_programming/min_path_sum.cs", "language": "Java"}, "method": {"name": "MinPathSumDP", "qualified_name": "codes.csharp.chapter_dynamic_programming.min_path_sum.cs#MinPathSumDP", "start_line": 50, "end_line": 70, "signature": "MinPathSumDP(int[][] grid)", "original_code": "public int MinPathSumDP(int[][] grid) {\n        int n = grid.Length, m = grid[0].Length;\n        // \u521d\u59cb\u5316 dp \u8868\n        int[,] dp = new int[n, m];\n        dp[0, 0] = grid[0][0];\n        // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c\n        for (int j = 1; j < m; j++) {\n            dp[0, j] = dp[0, j - 1] + grid[0][j];\n        }\n        // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u5217\n        for (int i = 1; i < n; i++) {\n            dp[i, 0] = dp[i - 1, 0] + grid[i][0];\n        }\n        // \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\u5217\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < m; j++) {\n                dp[i, j] = Math.Min(dp[i, j - 1], dp[i - 1, j]) + grid[i][j];\n            }\n        }\n        return dp[n - 1, m - 1];\n    }", "doc_comment": "/* \u6700\u5c0f\u8def\u5f84\u548c\uff1a\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["MinPathSumDP", "public", "int", "(", ")", "{", "// \u521d\u59cb\u5316 dp \u8868", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u5217", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\u5217", "}", "grid", ",", ";", ";", ";", "for", "(", ";", ")", "for", "(", ";", ")", "for", "(", ";", ")", "return", ";", "int", "n", "=", "m", "=", "dp", "=", "=", ";", "j", "<", "m", "j", "++", "{", "}", ";", "i", "<", "n", "i", "++", "{", "}", ";", "i", "<", "n", "i", "++", "{", "}", "dp", "[", "]", "int", "[", "]", "[", "]", "grid", ".", "Length", ".", "Length", "int", "[", "]", "new", "dp", "[", "0", "]", "[", "0", "]", "int", "j", "=", "1", ";", "int", "i", "=", "1", ";", "int", "i", "=", "1", "for", "(", ";", ")", "-", "1", "grid", "[", "0", "]", ",", "int", "[", "m", "]", "0", ",", "grid", "[", "0", "]", "=", "=", ";", "j", "<", "m", "j", "++", "{", "}", "n", "-", "1", ",", "m", "n", ",", "dp", "[", "j", "]", "+", "dp", "[", "0", "]", "+", "int", "j", "=", "1", ";", "0", ",", "dp", "[", "]", "[", "j", "]", "i", ",", "dp", "[", "]", "[", "0", "]", "=", "0", ",", "j", "-", "1", "grid", "[", "0", "]", "i", "-", "1", ",", "0", "grid", "[", "i", "]", "dp", "[", "j", "]", "+", "i", ",", "Math", ".", "Min", "[", "j", "]", "(", ",", ")", "grid", "[", "i", "]", "dp", "[", "]", "dp", "[", "j", "]", "i", ",", "j", "-", "1", ",", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 325, "ast_depth": 16, "n_identifiers": 10, "vocab_size": 35}}
{"dataset_split": "train", "example_id": "hello-algo@a8c624f:codes/csharp/chapter_dynamic_programming/min_path_sum.cs#73-92", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "a8c624fa5a2d3dd3eb49ff5c85ba670984e5aae8", "license": null}, "file": {"path": "codes/csharp/chapter_dynamic_programming/min_path_sum.cs", "language": "Java"}, "method": {"name": "MinPathSumDPComp", "qualified_name": "codes.csharp.chapter_dynamic_programming.min_path_sum.cs#MinPathSumDPComp", "start_line": 73, "end_line": 92, "signature": "MinPathSumDPComp(int[][] grid)", "original_code": "public int MinPathSumDPComp(int[][] grid) {\n        int n = grid.Length, m = grid[0].Length;\n        // \u521d\u59cb\u5316 dp \u8868\n        int[] dp = new int[m];\n        dp[0] = grid[0][0];\n        // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c\n        for (int j = 1; j < m; j++) {\n            dp[j] = dp[j - 1] + grid[0][j];\n        }\n        // \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\n        for (int i = 1; i < n; i++) {\n            // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u5217\n            dp[0] = dp[0] + grid[i][0];\n            // \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u5217\n            for (int j = 1; j < m; j++) {\n                dp[j] = Math.Min(dp[j - 1], dp[j]) + grid[i][j];\n            }\n        }\n        return dp[m - 1];\n    }", "doc_comment": "/* \u6700\u5c0f\u8def\u5f84\u548c\uff1a\u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["MinPathSumDPComp", "public", "int", "(", ")", "{", "// \u521d\u59cb\u5316 dp \u8868", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c", "}", "grid", ",", ";", ";", ";", "for", "(", ";", ")", "for", "(", ";", ")", "return", ";", "int", "n", "=", "m", "=", "dp", "=", "=", ";", "j", "<", "m", "j", "++", "{", "}", ";", "i", "<", "n", "i", "++", "{", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u5217", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u5217", "}", "dp", "[", "]", "int", "[", "]", "[", "]", "grid", ".", "Length", ".", "Length", "int", "[", "]", "new", "dp", "[", "0", "]", "[", "0", "]", "int", "j", "=", "1", ";", "int", "i", "=", "1", ";", "for", "(", ";", ")", "m", "-", "1", "grid", "[", "0", "]", "int", "[", "m", "]", "grid", "[", "0", "]", "=", "=", ";", "j", "<", "m", "j", "++", "{", "}", "dp", "[", "j", "]", "+", "dp", "[", "0", "]", "+", "int", "j", "=", "1", ";", "dp", "[", "]", "[", "j", "]", "dp", "[", "0", "]", "[", "0", "]", "=", "j", "-", "1", "grid", "[", "0", "]", "grid", "[", "i", "]", "dp", "[", "j", "]", "+", "Math", ".", "Min", "[", "j", "]", "(", ",", ")", "grid", "[", "i", "]", "dp", "[", "]", "dp", "[", "j", "]", "j", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 262, "ast_depth": 15, "n_identifiers": 10, "vocab_size": 36}}
{"dataset_split": "train", "example_id": "hello-algo@a8c624f:codes/csharp/chapter_dynamic_programming/min_path_sum.cs#95-126", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "a8c624fa5a2d3dd3eb49ff5c85ba670984e5aae8", "license": null}, "file": {"path": "codes/csharp/chapter_dynamic_programming/min_path_sum.cs", "language": "Java"}, "method": {"name": "Test", "qualified_name": "codes.csharp.chapter_dynamic_programming.min_path_sum.cs#Test", "start_line": 95, "end_line": 126, "signature": "Test()", "original_code": "public void Test() {\n        int[][] grid =\n        {\n            new int[4] { 1, 3, 1, 5 },\n            new int[4] { 2, 2, 4, 2 },\n            new int[4] { 5, 3, 2, 1 },\n            new int[4] { 4, 3, 5, 2 }\n        };\n\n        int n = grid.Length, m = grid[0].Length;\n\n        // \u66b4\u529b\u641c\u7d22\n        int res = MinPathSumDFS(grid, n - 1, m - 1);\n        Console.WriteLine(\"\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u505a\u5c0f\u8def\u5f84\u548c\u4e3a \" + res);\n\n        // \u8bb0\u5fc6\u5316\u641c\u7d22\n        int[][] mem = new int[n][];\n        for (int i = 0; i < n; i++) {\n            mem[i] = new int[m];\n            Array.Fill(mem[i], -1);\n        }\n        res = MinPathSumDFSMem(grid, mem, n - 1, m - 1);\n        Console.WriteLine(\"\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u505a\u5c0f\u8def\u5f84\u548c\u4e3a \" + res);\n\n        // \u52a8\u6001\u89c4\u5212\n        res = MinPathSumDP(grid);\n        Console.WriteLine(\"\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u505a\u5c0f\u8def\u5f84\u548c\u4e3a \" + res);\n\n        // \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212\n        res = MinPathSumDPComp(grid);\n        Console.WriteLine(\"\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u505a\u5c0f\u8def\u5f84\u548c\u4e3a \" + res);\n    }", "doc_comment": ""}, "code_tokens": ["void", "Test", "public", "(", ")", "{", "// \u66b4\u529b\u641c\u7d22", "// \u8bb0\u5fc6\u5316\u641c\u7d22", "// \u52a8\u6001\u89c4\u5212", "// \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212", "}", ";", ",", ";", ";", ";", ";", "for", "(", ";", ")", ";", ";", ";", ";", ";", ";", "grid", "=", "int", "n", "=", "m", "=", "int", "res", "=", "Console", ".", "WriteLine", "mem", "=", ";", "i", "<", "n", "i", "++", "{", "}", "res", "=", "Console", ".", "WriteLine", "res", "=", "Console", ".", "WriteLine", "res", "=", "Console", ".", "WriteLine", "int", "[", "]", "[", "]", "{", ",", ",", ",", "}", "grid", ".", "Length", ".", "Length", "MinPathSumDFS", "(", ")", "int", "[", "]", "[", "]", "new", "int", "i", "=", "0", ";", ";", "MinPathSumDFSMem", "(", ")", "MinPathSumDP", "(", ")", "MinPathSumDPComp", "(", ")", "{", "1", ",", "3", ",", "1", ",", "5", "}", "{", "2", ",", "2", ",", "4", ",", "2", "}", "{", "5", ",", "3", ",", "2", ",", "1", "}", "{", "4", ",", "3", ",", "5", ",", "2", "}", "grid", "[", "0", "]", "(", "grid", ",", ",", ")", "+", "res", "int", "[", "n", "]", "[", "]", "=", "Array", ".", "Fill", "(", "grid", ",", "mem", ",", ",", ")", "+", "res", "(", "grid", ")", "+", "res", "(", "grid", ")", "+", "res", "new", "new", "new", "new", "n", "-", "1", "m", "-", "1", "\"", "\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u505a\u5c0f\u8def\u5f84\u548c\u4e3a ", "\"", "mem", "[", "i", "]", "new", "(", ",", ")", "n", "-", "1", "m", "-", "1", "\"", "\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u505a\u5c0f\u8def\u5f84\u548c\u4e3a ", "\"", "\"", "\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u505a\u5c0f\u8def\u5f84\u548c\u4e3a ", "\"", "\"", "\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u505a\u5c0f\u8def\u5f84\u548c\u4e3a ", "\"", "int", "[", "4", "]", "int", "[", "4", "]", "int", "[", "4", "]", "int", "[", "4", "]", "int", "[", "m", "]", "mem", "[", "i", "]", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 348, "ast_depth": 10, "n_identifiers": 16, "vocab_size": 47}}
{"dataset_split": "train", "example_id": "hello-algo@a8c624f:codes/dart/chapter_dynamic_programming/min_path_sum.dart#10-25", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "a8c624fa5a2d3dd3eb49ff5c85ba670984e5aae8", "license": null}, "file": {"path": "codes/dart/chapter_dynamic_programming/min_path_sum.dart", "language": "Java"}, "method": {"name": "minPathSumDFS", "qualified_name": "codes.dart.chapter_dynamic_programming.min_path_sum.dart#minPathSumDFS", "start_line": 10, "end_line": 25, "signature": "minPathSumDFS(List<List<int>> grid, int i, int j)", "original_code": "int minPathSumDFS(List<List<int>> grid, int i, int j) {\n  // \u82e5\u4e3a\u5de6\u4e0a\u89d2\u5355\u5143\u683c\uff0c\u5219\u7ec8\u6b62\u641c\u7d22\n  if (i == 0 && j == 0) {\n    return grid[0][0];\n  }\n  // \u82e5\u884c\u5217\u7d22\u5f15\u8d8a\u754c\uff0c\u5219\u8fd4\u56de +\u221e \u4ee3\u4ef7\n  if (i < 0 || j < 0) {\n    // \u5728 Dart \u4e2d\uff0cint \u7c7b\u578b\u662f\u56fa\u5b9a\u8303\u56f4\u7684\u6574\u6570\uff0c\u4e0d\u5b58\u5728\u8868\u793a\u201c\u65e0\u7a77\u5927\u201d\u7684\u503c\n    return BigInt.from(2).pow(31).toInt();\n  }\n  // \u8ba1\u7b97\u4ece\u5de6\u4e0a\u89d2\u5230 (i-1, j) \u548c (i, j-1) \u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7\n  int up = minPathSumDFS(grid, i - 1, j);\n  int left = minPathSumDFS(grid, i, j - 1);\n  // \u8fd4\u56de\u4ece\u5de6\u4e0a\u89d2\u5230 (i, j) \u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7\n  return min(left, up) + grid[i][j];\n}", "doc_comment": "/* \u6700\u5c0f\u8def\u5f84\u548c\uff1a\u66b4\u529b\u641c\u7d22 */"}, "code_tokens": ["minPathSumDFS", "int", "(", ",", ",", ")", "{", "// \u82e5\u4e3a\u5de6\u4e0a\u89d2\u5355\u5143\u683c\uff0c\u5219\u7ec8\u6b62\u641c\u7d22", "// \u82e5\u884c\u5217\u7d22\u5f15\u8d8a\u754c\uff0c\u5219\u8fd4\u56de +\u221e \u4ee3\u4ef7", "// \u8ba1\u7b97\u4ece\u5de6\u4e0a\u89d2\u5230 (i-1, j) \u548c (i, j-1) \u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7", "// \u8fd4\u56de\u4ece\u5de6\u4e0a\u89d2\u5230 (i, j) \u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7", "}", "grid", "i", "j", "if", "if", ";", ";", "return", ";", "List", "int", "int", "(", ")", "{", "}", "(", ")", "{", "// \u5728 Dart \u4e2d\uff0cint \u7c7b\u578b\u662f\u56fa\u5b9a\u8303\u56f4\u7684\u6574\u6570\uff0c\u4e0d\u5b58\u5728\u8868\u793a\u201c\u65e0\u7a77\u5927\u201d\u7684\u503c", "}", "int", "up", "=", "int", "left", "=", "+", "<", ">", "&&", "return", ";", "||", "return", ";", "minPathSumDFS", "minPathSumDFS", "min", "[", "j", "]", "List", "i", "==", "0", "j", "==", "0", "[", "0", "]", "i", "<", "0", "j", "<", "0", ".", "toInt", "(", "grid", ",", ",", "j", ")", "(", "grid", ",", "i", ",", ")", "(", "left", ",", "up", ")", "grid", "[", "i", "]", "<", ">", "grid", "[", "0", "]", ".", "pow", "(", ")", "i", "-", "1", "j", "-", "1", "int", "BigInt", ".", "from", "(", "31", ")", "(", "2", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 174, "ast_depth": 11, "n_identifiers": 11, "vocab_size": 41}}
{"dataset_split": "train", "example_id": "hello-algo@a8c624f:codes/dart/chapter_dynamic_programming/min_path_sum.dart#28-48", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "a8c624fa5a2d3dd3eb49ff5c85ba670984e5aae8", "license": null}, "file": {"path": "codes/dart/chapter_dynamic_programming/min_path_sum.dart", "language": "Java"}, "method": {"name": "minPathSumDFSMem", "qualified_name": "codes.dart.chapter_dynamic_programming.min_path_sum.dart#minPathSumDFSMem", "start_line": 28, "end_line": 48, "signature": "minPathSumDFSMem(List<List<int>> grid, List<List<int>> mem, int i, int j)", "original_code": "int minPathSumDFSMem(List<List<int>> grid, List<List<int>> mem, int i, int j) {\n  // \u82e5\u4e3a\u5de6\u4e0a\u89d2\u5355\u5143\u683c\uff0c\u5219\u7ec8\u6b62\u641c\u7d22\n  if (i == 0 && j == 0) {\n    return grid[0][0];\n  }\n  // \u82e5\u884c\u5217\u7d22\u5f15\u8d8a\u754c\uff0c\u5219\u8fd4\u56de +\u221e \u4ee3\u4ef7\n  if (i < 0 || j < 0) {\n    // \u5728 Dart \u4e2d\uff0cint \u7c7b\u578b\u662f\u56fa\u5b9a\u8303\u56f4\u7684\u6574\u6570\uff0c\u4e0d\u5b58\u5728\u8868\u793a\u201c\u65e0\u7a77\u5927\u201d\u7684\u503c\n    return BigInt.from(2).pow(31).toInt();\n  }\n  // \u82e5\u5df2\u6709\u8bb0\u5f55\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\n  if (mem[i][j] != -1) {\n    return mem[i][j];\n  }\n  // \u5de6\u8fb9\u548c\u4e0a\u8fb9\u5355\u5143\u683c\u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7\n  int up = minPathSumDFSMem(grid, mem, i - 1, j);\n  int left = minPathSumDFSMem(grid, mem, i, j - 1);\n  // \u8bb0\u5f55\u5e76\u8fd4\u56de\u5de6\u4e0a\u89d2\u5230 (i, j) \u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7\n  mem[i][j] = min(left, up) + grid[i][j];\n  return mem[i][j];\n}", "doc_comment": "/* \u6700\u5c0f\u8def\u5f84\u548c\uff1a\u8bb0\u5fc6\u5316\u641c\u7d22 */"}, "code_tokens": ["minPathSumDFSMem", "int", "(", ",", ",", ",", ")", "{", "// \u82e5\u4e3a\u5de6\u4e0a\u89d2\u5355\u5143\u683c\uff0c\u5219\u7ec8\u6b62\u641c\u7d22", "// \u82e5\u884c\u5217\u7d22\u5f15\u8d8a\u754c\uff0c\u5219\u8fd4\u56de +\u221e \u4ee3\u4ef7", "// \u82e5\u5df2\u6709\u8bb0\u5f55\uff0c\u5219\u76f4\u63a5\u8fd4\u56de", "// \u5de6\u8fb9\u548c\u4e0a\u8fb9\u5355\u5143\u683c\u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7", "// \u8bb0\u5f55\u5e76\u8fd4\u56de\u5de6\u4e0a\u89d2\u5230 (i, j) \u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7", "}", "grid", "mem", "i", "j", "if", "if", "if", ";", ";", ";", "return", ";", "List", "List", "int", "int", "(", ")", "{", "}", "(", ")", "{", "// \u5728 Dart \u4e2d\uff0cint \u7c7b\u578b\u662f\u56fa\u5b9a\u8303\u56f4\u7684\u6574\u6570\uff0c\u4e0d\u5b58\u5728\u8868\u793a\u201c\u65e0\u7a77\u5927\u201d\u7684\u503c", "}", "(", ")", "{", "}", "int", "up", "=", "int", "left", "=", "=", "[", "j", "]", "<", ">", "<", ">", "&&", "return", ";", "||", "return", ";", "!=", "return", ";", "minPathSumDFSMem", "minPathSumDFSMem", "[", "j", "]", "+", "mem", "[", "i", "]", "List", "List", "i", "==", "0", "j", "==", "0", "[", "0", "]", "i", "<", "0", "j", "<", "0", ".", "toInt", "[", "j", "]", "-", "1", "[", "j", "]", "(", "grid", ",", "mem", ",", ",", "j", ")", "(", "grid", ",", "mem", ",", "i", ",", ")", "mem", "[", "i", "]", "min", "[", "j", "]", "<", ">", "<", ">", "grid", "[", "0", "]", ".", "pow", "(", ")", "mem", "[", "i", "]", "mem", "[", "i", "]", "i", "-", "1", "j", "-", "1", "(", "left", ",", "up", ")", "grid", "[", "i", "]", "int", "int", "BigInt", ".", "from", "(", "31", ")", "(", "2", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 250, "ast_depth": 11, "n_identifiers": 12, "vocab_size": 44}}
{"dataset_split": "train", "example_id": "hello-algo@a8c624f:codes/dart/chapter_dynamic_programming/min_path_sum.dart#51-71", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "a8c624fa5a2d3dd3eb49ff5c85ba670984e5aae8", "license": null}, "file": {"path": "codes/dart/chapter_dynamic_programming/min_path_sum.dart", "language": "Java"}, "method": {"name": "minPathSumDP", "qualified_name": "codes.dart.chapter_dynamic_programming.min_path_sum.dart#minPathSumDP", "start_line": 51, "end_line": 71, "signature": "minPathSumDP(List<List<int>> grid)", "original_code": "int minPathSumDP(List<List<int>> grid) {\n  int n = grid.length, m = grid[0].length;\n  // \u521d\u59cb\u5316 dp \u8868\n  List<List<int>> dp = List.generate(n, (i) => List.filled(m, 0));\n  dp[0][0] = grid[0][0];\n  // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c\n  for (int j = 1; j < m; j++) {\n    dp[0][j] = dp[0][j - 1] + grid[0][j];\n  }\n  // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u5217\n  for (int i = 1; i < n; i++) {\n    dp[i][0] = dp[i - 1][0] + grid[i][0];\n  }\n  // \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\u5217\n  for (int i = 1; i < n; i++) {\n    for (int j = 1; j < m; j++) {\n      dp[i][j] = min(dp[i][j - 1], dp[i - 1][j]) + grid[i][j];\n    }\n  }\n  return dp[n - 1][m - 1];\n}", "doc_comment": "/* \u6700\u5c0f\u8def\u5f84\u548c\uff1a\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["minPathSumDP", "int", "(", ")", "{", "// \u521d\u59cb\u5316 dp \u8868", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u5217", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\u5217", "}", "grid", ",", ";", ";", ";", "for", "(", ";", ")", "for", "(", ";", ")", "for", "(", ";", ")", "return", ";", "List", "int", "n", "=", "m", "=", "List", "dp", "=", "=", ";", "j", "<", "m", "j", "++", "{", "}", ";", "i", "<", "n", "i", "++", "{", "}", ";", "i", "<", "n", "i", "++", "{", "}", "[", "]", "<", ">", "grid", ".", "length", ".", "length", "<", ">", "List", ".", "generate", "[", "0", "]", "[", "0", "]", "int", "j", "=", "1", ";", "int", "i", "=", "1", ";", "int", "i", "=", "1", "for", "(", ";", ")", "dp", "[", "]", "m", "-", "1", "List", "grid", "[", "0", "]", "List", "(", "n", ",", ")", "dp", "[", "0", "]", "grid", "[", "0", "]", "=", "=", ";", "j", "<", "m", "j", "++", "{", "}", "n", "-", "1", "<", ">", "<", ">", "=", ">", "List", ".", "filled", "[", "j", "]", "+", "[", "0", "]", "+", "int", "j", "=", "1", ";", "int", "int", "(", "i", ")", "(", "m", ",", "0", ")", "dp", "[", "0", "]", "[", "]", "[", "j", "]", "dp", "[", "i", "]", "[", "0", "]", "[", "0", "]", "=", "dp", "[", "0", "]", "j", "-", "1", "grid", "[", "0", "]", "dp", "[", "]", "grid", "[", "i", "]", "[", "j", "]", "+", "i", "-", "1", "dp", "[", "i", "]", "min", "[", "j", "]", "(", ",", ")", "grid", "[", "i", "]", "[", "]", "[", "j", "]", "dp", "[", "i", "]", "j", "-", "1", "dp", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 353, "ast_depth": 16, "n_identifiers": 12, "vocab_size": 36}}
{"dataset_split": "train", "example_id": "hello-algo@a8c624f:codes/dart/chapter_dynamic_programming/min_path_sum.dart#74-92", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "a8c624fa5a2d3dd3eb49ff5c85ba670984e5aae8", "license": null}, "file": {"path": "codes/dart/chapter_dynamic_programming/min_path_sum.dart", "language": "Java"}, "method": {"name": "minPathSumDPComp", "qualified_name": "codes.dart.chapter_dynamic_programming.min_path_sum.dart#minPathSumDPComp", "start_line": 74, "end_line": 92, "signature": "minPathSumDPComp(List<List<int>> grid)", "original_code": "int minPathSumDPComp(List<List<int>> grid) {\n  int n = grid.length, m = grid[0].length;\n  // \u521d\u59cb\u5316 dp \u8868\n  List<int> dp = List.filled(m, 0);\n  dp[0] = grid[0][0];\n  for (int j = 1; j < m; j++) {\n    dp[j] = dp[j - 1] + grid[0][j];\n  }\n  // \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\n  for (int i = 1; i < n; i++) {\n    // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u5217\n    dp[0] = dp[0] + grid[i][0];\n    // \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u5217\n    for (int j = 1; j < m; j++) {\n      dp[j] = min(dp[j - 1], dp[j]) + grid[i][j];\n    }\n  }\n  return dp[m - 1];\n}", "doc_comment": "/* \u6700\u5c0f\u8def\u5f84\u548c\uff1a\u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["minPathSumDPComp", "int", "(", ")", "{", "// \u521d\u59cb\u5316 dp \u8868", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c", "}", "grid", ",", ";", ";", ";", "for", "(", ";", ")", "for", "(", ";", ")", "return", ";", "List", "int", "n", "=", "m", "=", "List", "dp", "=", "=", ";", "j", "<", "m", "j", "++", "{", "}", ";", "i", "<", "n", "i", "++", "{", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u5217", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u5217", "}", "dp", "[", "]", "<", ">", "grid", ".", "length", ".", "length", "<", ">", "List", ".", "filled", "dp", "[", "0", "]", "[", "0", "]", "int", "j", "=", "1", ";", "int", "i", "=", "1", ";", "for", "(", ";", ")", "m", "-", "1", "List", "grid", "[", "0", "]", "int", "(", "m", ",", "0", ")", "grid", "[", "0", "]", "=", "=", ";", "j", "<", "m", "j", "++", "{", "}", "<", ">", "dp", "[", "j", "]", "+", "dp", "[", "0", "]", "+", "int", "j", "=", "1", ";", "int", "dp", "[", "]", "[", "j", "]", "dp", "[", "0", "]", "[", "0", "]", "=", "j", "-", "1", "grid", "[", "0", "]", "grid", "[", "i", "]", "dp", "[", "j", "]", "+", "min", "[", "j", "]", "(", ",", ")", "grid", "[", "i", "]", "dp", "[", "]", "dp", "[", "j", "]", "j", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 264, "ast_depth": 15, "n_identifiers": 11, "vocab_size": 35}}
{"dataset_split": "train", "example_id": "hello-algo@a8c624f:codes/dart/chapter_dynamic_programming/min_path_sum.dart#95-120", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "a8c624fa5a2d3dd3eb49ff5c85ba670984e5aae8", "license": null}, "file": {"path": "codes/dart/chapter_dynamic_programming/min_path_sum.dart", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.dart.chapter_dynamic_programming.min_path_sum.dart#main", "start_line": 95, "end_line": 120, "signature": "main()", "original_code": "void main() {\n  List<List<int>> grid = [\n    [1, 3, 1, 5],\n    [2, 2, 4, 2],\n    [5, 3, 2, 1],\n    [4, 3, 5, 2],\n  ];\n  int n = grid.length, m = grid[0].length;\n\n// \u66b4\u529b\u641c\u7d22\n  int res = minPathSumDFS(grid, n - 1, m - 1);\n  print(\"\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u505a\u5c0f\u8def\u5f84\u548c\u4e3a $res\");\n\n// \u8bb0\u5fc6\u5316\u641c\u7d22\n  List<List<int>> mem = List.generate(n, (i) => List.filled(m, -1));\n  res = minPathSumDFSMem(grid, mem, n - 1, m - 1);\n  print(\"\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u505a\u5c0f\u8def\u5f84\u548c\u4e3a $res\");\n\n// \u52a8\u6001\u89c4\u5212\n  res = minPathSumDP(grid);\n  print(\"\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u505a\u5c0f\u8def\u5f84\u548c\u4e3a $res\");\n\n// \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212\n  res = minPathSumDPComp(grid);\n  print(\"\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u505a\u5c0f\u8def\u5f84\u548c\u4e3a $res\");\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["void", "main", "(", ")", "{", "// \u66b4\u529b\u641c\u7d22", "// \u8bb0\u5fc6\u5316\u641c\u7d22", "// \u52a8\u6001\u89c4\u5212", "// \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212", "}", ";", ",", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "List", "grid", "=", "1", ",", "3", ",", "1", ",", "5", "]", ",", "[", "2", ",", "2", ",", "4", ",", "2", "]", ",", "[", "5", ",", "3", ",", "2", ",", "1", "]", ",", "[", "4", ",", "3", ",", "5", ",", "2", "]", ",", "]", "int", "n", "=", "m", "=", "int", "res", "=", "print", "List", "mem", "=", "res", "=", "print", "res", "=", "print", "res", "=", "print", "<", ">", "[", "[", "grid", ".", "length", ".", "length", "minPathSumDFS", "(", ")", "<", ">", "List", ".", "generate", "minPathSumDFSMem", "(", ")", "minPathSumDP", "(", ")", "minPathSumDPComp", "(", ")", "List", "grid", "[", "0", "]", "(", "grid", ",", ",", ")", "\"", "\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u505a\u5c0f\u8def\u5f84\u548c\u4e3a $res", "\"", "List", "(", "n", ",", ")", "(", "grid", ",", "mem", ",", ",", ")", "\"", "\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u505a\u5c0f\u8def\u5f84\u548c\u4e3a $res", "\"", "(", "grid", ")", "\"", "\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u505a\u5c0f\u8def\u5f84\u548c\u4e3a $res", "\"", "(", "grid", ")", "\"", "\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u505a\u5c0f\u8def\u5f84\u548c\u4e3a $res", "\"", "<", ">", "n", "-", "1", "m", "-", "1", "<", ">", "=", ">", "List", ".", "filled", "n", "-", "1", "m", "-", "1", "int", "int", "(", "i", ")", "(", "m", ",", ")", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 255, "ast_depth": 11, "n_identifiers": 16, "vocab_size": 43}}
{"dataset_split": "train", "example_id": "hello-algo@a8c624f:codes/go/chapter_dynamic_programming/min_path_sum.go#10-18", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "a8c624fa5a2d3dd3eb49ff5c85ba670984e5aae8", "license": null}, "file": {"path": "codes/go/chapter_dynamic_programming/min_path_sum.go", "language": "Java"}, "method": {"name": "minPathSumDFS", "qualified_name": "codes.go.chapter_dynamic_programming.min_path_sum.go#minPathSumDFS", "start_line": 10, "end_line": 18, "signature": "minPathSumDFS(grid [][]int, i, j int)", "original_code": "func minPathSumDFS(grid [][]int, i, j int) int {\n\t// \u82e5\u4e3a\u5de6\u4e0a\u89d2\u5355\u5143\u683c\uff0c\u5219\u7ec8\u6b62\u641c\u7d22\n\tif i == 0 && j == 0 {\n\t\treturn grid[0][0]\n\t}\n\t// \u82e5\u884c\u5217\u7d22\u5f15\u8d8a\u754c\uff0c\u5219\u8fd4\u56de +\u221e \u4ee3\u4ef7\n\tif i < 0 || j < 0 {\n\t\treturn math.MaxInt\n\t}", "doc_comment": "/* \u6700\u5c0f\u8def\u5f84\u548c\uff1a\u66b4\u529b\u641c\u7d22 */"}, "code_tokens": ["func", "minPathSumDFS", "(", ",", ",", ")", "int", "{", "// \u82e5\u4e3a\u5de6\u4e0a\u89d2\u5355\u5143\u683c\uff0c\u5219\u7ec8\u6b62\u641c\u7d22", "// \u82e5\u884c\u5217\u7d22\u5f15\u8d8a\u754c\uff0c\u5219\u8fd4\u56de +\u221e \u4ee3\u4ef7", "}", "int", "i", "", "j", "int", "if", "{", "}", "if", "{", "return", "grid", "&&", "return", "", "||", "math", ".", "MaxInt", "[", "]", "[", "]", "i", "==", "0", "j", "==", "0", "[", "0", "]", "i", "<", "0", "j", "<", "0", "grid", "[", "0", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 76, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 26}}
{"dataset_split": "train", "example_id": "hello-algo@a8c624f:codes/go/chapter_dynamic_programming/min_path_sum.go#75-94", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "a8c624fa5a2d3dd3eb49ff5c85ba670984e5aae8", "license": null}, "file": {"path": "codes/go/chapter_dynamic_programming/min_path_sum.go", "language": "Java"}, "method": {"name": "minPathSumDPComp", "qualified_name": "codes.go.chapter_dynamic_programming.min_path_sum.go#minPathSumDPComp", "start_line": 75, "end_line": 94, "signature": "minPathSumDPComp(grid [][]int)", "original_code": "func minPathSumDPComp(grid [][]int) int {\n\tn, m := len(grid), len(grid[0])\n\t// \u521d\u59cb\u5316 dp \u8868\n\tdp := make([]int, m)\n\t// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c\n\tdp[0] = grid[0][0]\n\tfor j := 1; j < m; j++ {\n\t\tdp[j] = dp[j-1] + grid[0][j]\n\t}\n\t// \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\u5217\n\tfor i := 1; i < n; i++ {\n\t\t// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u5217\n\t\tdp[0] = dp[0] + grid[i][0]\n\t\t// \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u5217\n\t\tfor j := 1; j < m; j++ {\n\t\t\tdp[j] = int(math.Min(float64(dp[j-1]), float64(dp[j]))) + grid[i][j]\n\t\t}\n\t}\n\treturn dp[m-1]\n}", "doc_comment": "/* \u6700\u5c0f\u8def\u5f84\u548c\uff1a\u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["func", "minPathSumDPComp", "(", ")", "int", "{", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\u5217", "}", "int", "n", ",", "", "// \u521d\u59cb\u5316 dp \u8868", "", ";", ";", "", "{", "}", "for", ";", ";", "", "{", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u5217", "}", "return", "", "grid", ",", "m", "=", "len", "(", ")", "dp", "=", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c", "j", "<", "m", "j", "++", "", "i", "=", "1", "i", "<", "n", "i", "++", ";", ";", "", "{", "}", "dp", "[", "]", "[", "]", "[", "]", ":", "len", "grid", "[", "0", "]", ":", "int", ",", "m", ")", "=", "=", ":", "=", "j", "<", "m", "j", "++", "", "m", "-", "1", "(", "grid", ")", "make", "dp", "[", "0", "]", "=", "1", "dp", "[", "j", "]", "+", "dp", "[", "0", "]", "+", "=", "(", "[", "]", "[", "0", "]", "for", "j", ":", "dp", "[", "]", "[", "j", "]", "dp", "[", "0", "]", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u5217", "=", "1", "dp", "[", "j", "]", "+", "grid", "[", "0", "]", "j", "-", "1", "grid", "[", "0", "]", "[", "0", "]", "for", "j", ":", "int", "(", ")", "[", "j", "]", "grid", "[", "i", "]", "math", ".", "Min", "grid", "[", "i", "]", "(", ",", ")", "float64", "float64", "(", ")", "(", ")", "dp", "[", "]", "dp", "[", "j", "]", "j", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 277, "ast_depth": 16, "n_identifiers": 13, "vocab_size": 39}}
{"dataset_split": "train", "example_id": "hello-algo@a8c624f:codes/java/chapter_dynamic_programming/min_path_sum.java#13-27", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "a8c624fa5a2d3dd3eb49ff5c85ba670984e5aae8", "license": null}, "file": {"path": "codes/java/chapter_dynamic_programming/min_path_sum.java", "language": "Java"}, "method": {"name": "minPathSumDFS", "qualified_name": "codes.java.chapter_dynamic_programming.min_path_sum#minPathSumDFS", "start_line": 13, "end_line": 27, "signature": "minPathSumDFS(int[][] grid, int i, int j)", "original_code": "static int minPathSumDFS(int[][] grid, int i, int j) {\n        // \u82e5\u4e3a\u5de6\u4e0a\u89d2\u5355\u5143\u683c\uff0c\u5219\u7ec8\u6b62\u641c\u7d22\n        if (i == 0 && j == 0) {\n            return grid[0][0];\n        }\n        // \u82e5\u884c\u5217\u7d22\u5f15\u8d8a\u754c\uff0c\u5219\u8fd4\u56de +\u221e \u4ee3\u4ef7\n        if (i < 0 || j < 0) {\n            return Integer.MAX_VALUE;\n        }\n        // \u8ba1\u7b97\u4ece\u5de6\u4e0a\u89d2\u5230 (i-1, j) \u548c (i, j-1) \u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7\n        int up = minPathSumDFS(grid, i - 1, j);\n        int left = minPathSumDFS(grid, i, j - 1);\n        // \u8fd4\u56de\u4ece\u5de6\u4e0a\u89d2\u5230 (i, j) \u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7\n        return Math.min(left, up) + grid[i][j];\n    }", "doc_comment": "/* \u6700\u5c0f\u8def\u5f84\u548c\uff1a\u66b4\u529b\u641c\u7d22 */"}, "code_tokens": ["minPathSumDFS", "static", "int", "(", ",", ",", ")", "{", "// \u82e5\u4e3a\u5de6\u4e0a\u89d2\u5355\u5143\u683c\uff0c\u5219\u7ec8\u6b62\u641c\u7d22", "// \u82e5\u884c\u5217\u7d22\u5f15\u8d8a\u754c\uff0c\u5219\u8fd4\u56de +\u221e \u4ee3\u4ef7", "// \u8ba1\u7b97\u4ece\u5de6\u4e0a\u89d2\u5230 (i-1, j) \u548c (i, j-1) \u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7", "// \u8fd4\u56de\u4ece\u5de6\u4e0a\u89d2\u5230 (i, j) \u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7", "}", "grid", "i", "j", "if", "if", ";", ";", "return", ";", "int", "int", "(", ")", "{", "}", "(", ")", "{", "}", "int", "up", "=", "int", "left", "=", "+", "int", "[", "]", "[", "]", "&&", "return", ";", "||", "return", ";", "minPathSumDFS", "minPathSumDFS", "Math", ".", "min", "[", "j", "]", "i", "==", "0", "j", "==", "0", "[", "0", "]", "i", "<", "0", "j", "<", "0", "Integer", ".", "MAX_VALUE", "(", "grid", ",", ",", "j", ")", "(", "grid", ",", "i", ",", ")", "(", "left", ",", "up", ")", "grid", "[", "i", "]", "grid", "[", "0", "]", "i", "-", "1", "j", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 156, "ast_depth": 9, "n_identifiers": 10, "vocab_size": 36}}
{"dataset_split": "train", "example_id": "hello-algo@a8c624f:codes/java/chapter_dynamic_programming/min_path_sum.java#30-49", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "a8c624fa5a2d3dd3eb49ff5c85ba670984e5aae8", "license": null}, "file": {"path": "codes/java/chapter_dynamic_programming/min_path_sum.java", "language": "Java"}, "method": {"name": "minPathSumDFSMem", "qualified_name": "codes.java.chapter_dynamic_programming.min_path_sum#minPathSumDFSMem", "start_line": 30, "end_line": 49, "signature": "minPathSumDFSMem(int[][] grid, int[][] mem, int i, int j)", "original_code": "static int minPathSumDFSMem(int[][] grid, int[][] mem, int i, int j) {\n        // \u82e5\u4e3a\u5de6\u4e0a\u89d2\u5355\u5143\u683c\uff0c\u5219\u7ec8\u6b62\u641c\u7d22\n        if (i == 0 && j == 0) {\n            return grid[0][0];\n        }\n        // \u82e5\u884c\u5217\u7d22\u5f15\u8d8a\u754c\uff0c\u5219\u8fd4\u56de +\u221e \u4ee3\u4ef7\n        if (i < 0 || j < 0) {\n            return Integer.MAX_VALUE;\n        }\n        // \u82e5\u5df2\u6709\u8bb0\u5f55\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\n        if (mem[i][j] != -1) {\n            return mem[i][j];\n        }\n        // \u5de6\u8fb9\u548c\u4e0a\u8fb9\u5355\u5143\u683c\u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7\n        int up = minPathSumDFSMem(grid, mem, i - 1, j);\n        int left = minPathSumDFSMem(grid, mem, i, j - 1);\n        // \u8bb0\u5f55\u5e76\u8fd4\u56de\u5de6\u4e0a\u89d2\u5230 (i, j) \u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7\n        mem[i][j] = Math.min(left, up) + grid[i][j];\n        return mem[i][j];\n    }", "doc_comment": "/* \u6700\u5c0f\u8def\u5f84\u548c\uff1a\u8bb0\u5fc6\u5316\u641c\u7d22 */"}, "code_tokens": ["minPathSumDFSMem", "static", "int", "(", ",", ",", ",", ")", "{", "// \u82e5\u4e3a\u5de6\u4e0a\u89d2\u5355\u5143\u683c\uff0c\u5219\u7ec8\u6b62\u641c\u7d22", "// \u82e5\u884c\u5217\u7d22\u5f15\u8d8a\u754c\uff0c\u5219\u8fd4\u56de +\u221e \u4ee3\u4ef7", "// \u82e5\u5df2\u6709\u8bb0\u5f55\uff0c\u5219\u76f4\u63a5\u8fd4\u56de", "// \u5de6\u8fb9\u548c\u4e0a\u8fb9\u5355\u5143\u683c\u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7", "// \u8bb0\u5f55\u5e76\u8fd4\u56de\u5de6\u4e0a\u89d2\u5230 (i, j) \u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7", "}", "grid", "mem", "i", "j", "if", "if", "if", ";", ";", ";", "return", ";", "int", "int", "(", ")", "{", "}", "(", ")", "{", "}", "(", ")", "{", "}", "int", "up", "=", "int", "left", "=", "=", "[", "j", "]", "int", "[", "]", "[", "]", "int", "[", "]", "[", "]", "&&", "return", ";", "||", "return", ";", "!=", "return", ";", "minPathSumDFSMem", "minPathSumDFSMem", "[", "j", "]", "+", "mem", "[", "i", "]", "i", "==", "0", "j", "==", "0", "[", "0", "]", "i", "<", "0", "j", "<", "0", "Integer", ".", "MAX_VALUE", "[", "j", "]", "-", "1", "[", "j", "]", "(", "grid", ",", "mem", ",", ",", "j", ")", "(", "grid", ",", "mem", ",", "i", ",", ")", "mem", "[", "i", "]", "Math", ".", "min", "[", "j", "]", "grid", "[", "0", "]", "mem", "[", "i", "]", "mem", "[", "i", "]", "i", "-", "1", "j", "-", "1", "(", "left", ",", "up", ")", "grid", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 228, "ast_depth": 9, "n_identifiers": 11, "vocab_size": 39}}
{"dataset_split": "train", "example_id": "hello-algo@a8c624f:codes/java/chapter_dynamic_programming/min_path_sum.java#52-72", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "a8c624fa5a2d3dd3eb49ff5c85ba670984e5aae8", "license": null}, "file": {"path": "codes/java/chapter_dynamic_programming/min_path_sum.java", "language": "Java"}, "method": {"name": "minPathSumDP", "qualified_name": "codes.java.chapter_dynamic_programming.min_path_sum#minPathSumDP", "start_line": 52, "end_line": 72, "signature": "minPathSumDP(int[][] grid)", "original_code": "static int minPathSumDP(int[][] grid) {\n        int n = grid.length, m = grid[0].length;\n        // \u521d\u59cb\u5316 dp \u8868\n        int[][] dp = new int[n][m];\n        dp[0][0] = grid[0][0];\n        // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c\n        for (int j = 1; j < m; j++) {\n            dp[0][j] = dp[0][j - 1] + grid[0][j];\n        }\n        // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u5217\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + grid[i][0];\n        }\n        // \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\u5217\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < m; j++) {\n                dp[i][j] = Math.min(dp[i][j - 1], dp[i - 1][j]) + grid[i][j];\n            }\n        }\n        return dp[n - 1][m - 1];\n    }", "doc_comment": "/* \u6700\u5c0f\u8def\u5f84\u548c\uff1a\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["minPathSumDP", "static", "int", "(", ")", "{", "// \u521d\u59cb\u5316 dp \u8868", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u5217", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\u5217", "}", "grid", ",", ";", ";", ";", "for", "(", ";", ")", "for", "(", ";", ")", "for", "(", ";", ")", "return", ";", "int", "n", "=", "m", "=", "dp", "=", "=", ";", "j", "<", "m", "j", "++", "{", "}", ";", "i", "<", "n", "i", "++", "{", "}", ";", "i", "<", "n", "i", "++", "{", "}", "[", "]", "int", "[", "]", "[", "]", "grid", ".", "length", ".", "length", "int", "[", "]", "[", "]", "new", "[", "0", "]", "[", "0", "]", "int", "j", "=", "1", ";", "int", "i", "=", "1", ";", "int", "i", "=", "1", "for", "(", ";", ")", "dp", "[", "]", "m", "-", "1", "grid", "[", "0", "]", "int", "[", "n", "]", "[", "m", "]", "dp", "[", "0", "]", "grid", "[", "0", "]", "=", "=", ";", "j", "<", "m", "j", "++", "{", "}", "n", "-", "1", "[", "j", "]", "+", "[", "0", "]", "+", "int", "j", "=", "1", ";", "dp", "[", "0", "]", "[", "]", "[", "j", "]", "dp", "[", "i", "]", "[", "0", "]", "[", "0", "]", "=", "dp", "[", "0", "]", "j", "-", "1", "grid", "[", "0", "]", "dp", "[", "]", "grid", "[", "i", "]", "[", "j", "]", "+", "i", "-", "1", "dp", "[", "i", "]", "Math", ".", "min", "[", "j", "]", "(", ",", ")", "grid", "[", "i", "]", "[", "]", "[", "j", "]", "dp", "[", "i", "]", "j", "-", "1", "dp", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 335, "ast_depth": 16, "n_identifiers": 10, "vocab_size": 35}}
{"dataset_split": "train", "example_id": "hello-algo@a8c624f:codes/java/chapter_dynamic_programming/min_path_sum.java#75-94", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "a8c624fa5a2d3dd3eb49ff5c85ba670984e5aae8", "license": null}, "file": {"path": "codes/java/chapter_dynamic_programming/min_path_sum.java", "language": "Java"}, "method": {"name": "minPathSumDPComp", "qualified_name": "codes.java.chapter_dynamic_programming.min_path_sum#minPathSumDPComp", "start_line": 75, "end_line": 94, "signature": "minPathSumDPComp(int[][] grid)", "original_code": "static int minPathSumDPComp(int[][] grid) {\n        int n = grid.length, m = grid[0].length;\n        // \u521d\u59cb\u5316 dp \u8868\n        int[] dp = new int[m];\n        // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c\n        dp[0] = grid[0][0];\n        for (int j = 1; j < m; j++) {\n            dp[j] = dp[j - 1] + grid[0][j];\n        }\n        // \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\n        for (int i = 1; i < n; i++) {\n            // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u5217\n            dp[0] = dp[0] + grid[i][0];\n            // \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u5217\n            for (int j = 1; j < m; j++) {\n                dp[j] = Math.min(dp[j - 1], dp[j]) + grid[i][j];\n            }\n        }\n        return dp[m - 1];\n    }", "doc_comment": "/* \u6700\u5c0f\u8def\u5f84\u548c\uff1a\u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["minPathSumDPComp", "static", "int", "(", ")", "{", "// \u521d\u59cb\u5316 dp \u8868", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c", "}", "grid", ",", ";", ";", ";", "for", "(", ";", ")", "for", "(", ";", ")", "return", ";", "int", "n", "=", "m", "=", "dp", "=", "=", ";", "j", "<", "m", "j", "++", "{", "}", ";", "i", "<", "n", "i", "++", "{", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u5217", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u5217", "}", "dp", "[", "]", "int", "[", "]", "[", "]", "grid", ".", "length", ".", "length", "int", "[", "]", "new", "dp", "[", "0", "]", "[", "0", "]", "int", "j", "=", "1", ";", "int", "i", "=", "1", ";", "for", "(", ";", ")", "m", "-", "1", "grid", "[", "0", "]", "int", "[", "m", "]", "grid", "[", "0", "]", "=", "=", ";", "j", "<", "m", "j", "++", "{", "}", "dp", "[", "j", "]", "+", "dp", "[", "0", "]", "+", "int", "j", "=", "1", ";", "dp", "[", "]", "[", "j", "]", "dp", "[", "0", "]", "[", "0", "]", "=", "j", "-", "1", "grid", "[", "0", "]", "grid", "[", "i", "]", "dp", "[", "j", "]", "+", "Math", ".", "min", "[", "j", "]", "(", ",", ")", "grid", "[", "i", "]", "dp", "[", "]", "dp", "[", "j", "]", "j", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 262, "ast_depth": 15, "n_identifiers": 10, "vocab_size": 36}}
{"dataset_split": "train", "example_id": "hello-algo@a8c624f:codes/java/chapter_dynamic_programming/min_path_sum.java#96-124", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "a8c624fa5a2d3dd3eb49ff5c85ba670984e5aae8", "license": null}, "file": {"path": "codes/java/chapter_dynamic_programming/min_path_sum.java", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.java.chapter_dynamic_programming.min_path_sum#main", "start_line": 96, "end_line": 124, "signature": "main(String[] args)", "original_code": "public static void main(String[] args) {\n        int[][] grid = {\n                { 1, 3, 1, 5 },\n                { 2, 2, 4, 2 },\n                { 5, 3, 2, 1 },\n                { 4, 3, 5, 2 }\n        };\n        int n = grid.length, m = grid[0].length;\n\n        // \u66b4\u529b\u641c\u7d22\n        int res = minPathSumDFS(grid, n - 1, m - 1);\n        System.out.println(\"\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a \" + res);\n\n        // \u8bb0\u5fc6\u5316\u641c\u7d22\n        int[][] mem = new int[n][m];\n        for (int[] row : mem) {\n            Arrays.fill(row, -1);\n        }\n        res = minPathSumDFSMem(grid, mem, n - 1, m - 1);\n        System.out.println(\"\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a \" + res);\n\n        // \u52a8\u6001\u89c4\u5212\n        res = minPathSumDP(grid);\n        System.out.println(\"\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a \" + res);\n\n        // \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212\n        res = minPathSumDPComp(grid);\n        System.out.println(\"\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a \" + res);\n    }", "doc_comment": ""}, "code_tokens": ["void", "main", "public", "static", "(", ")", "{", "// \u66b4\u529b\u641c\u7d22", "// \u8bb0\u5fc6\u5316\u641c\u7d22", "// \u52a8\u6001\u89c4\u5212", "// \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212", "}", "args", ";", ",", ";", ";", ";", ";", "for", "(", "row", ":", "mem", ")", ";", ";", ";", ";", ";", ";", "String", "grid", "=", "int", "n", "=", "m", "=", "int", "res", "=", ".", "println", "mem", "=", "{", "}", "res", "=", ".", "println", "res", "=", ".", "println", "res", "=", ".", "println", "[", "]", "int", "[", "]", "[", "]", "{", ",", ",", ",", "}", "grid", ".", "length", ".", "length", "minPathSumDFS", "System", ".", "out", "(", ")", "int", "[", "]", "[", "]", "new", "int", "[", "]", ";", "minPathSumDFSMem", "System", ".", "out", "(", ")", "minPathSumDP", "System", ".", "out", "(", ")", "minPathSumDPComp", "System", ".", "out", "(", ")", "{", "1", ",", "3", ",", "1", ",", "5", "}", "{", "2", ",", "2", ",", "4", ",", "2", "}", "{", "5", ",", "3", ",", "2", ",", "1", "}", "{", "4", ",", "3", ",", "5", ",", "2", "}", "grid", "[", "0", "]", "(", "grid", ",", ",", ")", "+", "res", "int", "[", "n", "]", "[", "m", "]", "Arrays", ".", "fill", "(", "grid", ",", "mem", ",", ",", ")", "+", "res", "(", "grid", ")", "+", "res", "(", "grid", ")", "+", "res", "n", "-", "1", "m", "-", "1", "\"", "\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a ", "\"", "(", "row", ",", ")", "n", "-", "1", "m", "-", "1", "\"", "\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a ", "\"", "\"", "\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a ", "\"", "\"", "\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a ", "\"", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 305, "ast_depth": 10, "n_identifiers": 18, "vocab_size": 50}}
{"dataset_split": "train", "example_id": "hello-algo@a8c624f:codes/javascript/chapter_dynamic_programming/min_path_sum.js#8-22", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "a8c624fa5a2d3dd3eb49ff5c85ba670984e5aae8", "license": null}, "file": {"path": "codes/javascript/chapter_dynamic_programming/min_path_sum.js", "language": "Java"}, "method": {"name": "minPathSumDFS", "qualified_name": "codes.javascript.chapter_dynamic_programming.min_path_sum.js#minPathSumDFS", "start_line": 8, "end_line": 22, "signature": "minPathSumDFS(grid, i, j)", "original_code": "function minPathSumDFS(grid, i, j) {\r\n    // \u82e5\u4e3a\u5de6\u4e0a\u89d2\u5355\u5143\u683c\uff0c\u5219\u7ec8\u6b62\u641c\u7d22\r\n    if (i === 0 && j === 0) {\r\n        return grid[0][0];\r\n    }\r\n    // \u82e5\u884c\u5217\u7d22\u5f15\u8d8a\u754c\uff0c\u5219\u8fd4\u56de +\u221e \u4ee3\u4ef7\r\n    if (i < 0 || j < 0) {\r\n        return Infinity;\r\n    }\r\n    // \u8ba1\u7b97\u4ece\u5de6\u4e0a\u89d2\u5230 (i-1, j) \u548c (i, j-1) \u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7\r\n    const up = minPathSumDFS(grid, i - 1, j);\r\n    const left = minPathSumDFS(grid, i, j - 1);\r\n    // \u8fd4\u56de\u4ece\u5de6\u4e0a\u89d2\u5230 (i, j) \u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7\r\n    return Math.min(left, up) + grid[i][j];\r\n}", "doc_comment": "/* \u6700\u5c0f\u8def\u5f84\u548c\uff1a\u66b4\u529b\u641c\u7d22 */"}, "code_tokens": ["function", "minPathSumDFS", "(", ",", ")", "{", "// \u82e5\u4e3a\u5de6\u4e0a\u89d2\u5355\u5143\u683c\uff0c\u5219\u7ec8\u6b62\u641c\u7d22\r", "// \u82e5\u884c\u5217\u7d22\u5f15\u8d8a\u754c\uff0c\u5219\u8fd4\u56de +\u221e \u4ee3\u4ef7\r", "// \u8ba1\u7b97\u4ece\u5de6\u4e0a\u89d2\u5230 (i-1, j) \u548c (i, j-1) \u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7\r", "// \u8fd4\u56de\u4ece\u5de6\u4e0a\u89d2\u5230 (i, j) \u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7\r", "}", "grid", "i", "j", "", "if", "if", "const", ";", "const", ";", "return", ";", ",", "(", ")", "{", "}", "(", ")", "{", "}", "up", "=", "left", "=", "+", "&&", "return", ";", "||", "return", "Infinity", ";", "minPathSumDFS", "minPathSumDFS", "Math", ".", "min", "[", "j", "]", "i", "==", "0", "j", "==", "0", "[", "0", "]", "i", "<", "0", "j", "<", "0", "(", "grid", ",", ",", "j", ")", "(", "grid", ",", "i", ",", ")", "(", "left", ",", "up", ")", "grid", "[", "i", "]", "=", "=", "grid", "[", "0", "]", "i", "-", "1", "j", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 141, "ast_depth": 9, "n_identifiers": 10, "vocab_size": 36}}
{"dataset_split": "train", "example_id": "hello-algo@a8c624f:codes/javascript/chapter_dynamic_programming/min_path_sum.js#47-70", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "a8c624fa5a2d3dd3eb49ff5c85ba670984e5aae8", "license": null}, "file": {"path": "codes/javascript/chapter_dynamic_programming/min_path_sum.js", "language": "Java"}, "method": {"name": "minPathSumDP", "qualified_name": "codes.javascript.chapter_dynamic_programming.min_path_sum.js#minPathSumDP", "start_line": 47, "end_line": 70, "signature": "minPathSumDP(grid)", "original_code": "function minPathSumDP(grid) {\r\n    const n = grid.length,\r\n        m = grid[0].length;\r\n    // \u521d\u59cb\u5316 dp \u8868\r\n    const dp = Array.from({ length: n }, () =>\r\n        Array.from({ length: m }, () => 0)\r\n    );\r\n    dp[0][0] = grid[0][0];\r\n    // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c\r\n    for (let j = 1; j < m; j++) {\r\n        dp[0][j] = dp[0][j - 1] + grid[0][j];\r\n    }\r\n    // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u5217\r\n    for (let i = 1; i < n; i++) {\r\n        dp[i][0] = dp[i - 1][0] + grid[i][0];\r\n    }\r\n    // \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\u5217\r\n    for (let i = 1; i < n; i++) {\r\n        for (let j = 1; j < m; j++) {\r\n            dp[i][j] = Math.min(dp[i][j - 1], dp[i - 1][j]) + grid[i][j];\r\n        }\r\n    }\r\n    return dp[n - 1][m - 1];\r\n}", "doc_comment": "/* \u6700\u5c0f\u8def\u5f84\u548c\uff1a\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["function", "minPathSumDP", "(", ")", "{", "// \u521d\u59cb\u5316 dp \u8868\r", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c\r", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u5217\r", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\u5217\r", "}", "grid", "const", ",", ";", "const", ";", ";", "for", "(", ";", ")", "for", "(", ";", ")", "for", "(", ";", ")", "return", ";", "n", "=", "m", "=", "dp", "=", "=", "let", ";", "j", "<", "m", "j", "++", "{", "}", "let", ";", "i", "<", "n", "i", "++", "{", "}", "let", ";", "i", "<", "n", "i", "++", "{", "}", "[", "]", "grid", ".", "length", ".", "length", "Array", ".", "from", "[", "0", "]", "[", "0", "]", "j", "=", "1", ";", "i", "=", "1", ";", "i", "=", "1", "for", "(", ";", ")", "dp", "[", "]", "m", "-", "1", "grid", "[", "0", "]", "(", ")", "dp", "[", "0", "]", "grid", "[", "0", "]", "=", "=", "let", ";", "j", "<", "m", "j", "++", "{", "}", "n", "-", "1", "{", "length", ":", "n", ">", "[", "j", "]", "+", "[", "0", "]", "+", "j", "=", "1", ";", "}", ",", "=", "Array", ".", "from", "dp", "[", "0", "]", "[", "]", "[", "j", "]", "dp", "[", "i", "]", "[", "0", "]", "[", "0", "]", "=", "(", ")", "(", ")", "dp", "[", "0", "]", "j", "-", "1", "grid", "[", "0", "]", "dp", "[", "]", "grid", "[", "i", "]", "[", "j", "]", "+", "{", "length", ":", "m", ">", "0", "i", "-", "1", "dp", "[", "i", "]", "Math", ".", "min", "[", "j", "]", "}", ",", "=", "(", ",", ")", "grid", "[", "i", "]", "(", ")", "[", "]", "[", "j", "]", "dp", "[", "i", "]", "j", "-", "1", "dp", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 343, "ast_depth": 16, "n_identifiers": 12, "vocab_size": 39}}
{"dataset_split": "train", "example_id": "hello-algo@a8c624f:codes/javascript/chapter_dynamic_programming/min_path_sum.js#73-93", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "a8c624fa5a2d3dd3eb49ff5c85ba670984e5aae8", "license": null}, "file": {"path": "codes/javascript/chapter_dynamic_programming/min_path_sum.js", "language": "Java"}, "method": {"name": "minPathSumDPComp", "qualified_name": "codes.javascript.chapter_dynamic_programming.min_path_sum.js#minPathSumDPComp", "start_line": 73, "end_line": 93, "signature": "minPathSumDPComp(grid)", "original_code": "function minPathSumDPComp(grid) {\r\n    const n = grid.length,\r\n        m = grid[0].length;\r\n    // \u521d\u59cb\u5316 dp \u8868\r\n    const dp = new Array(m);\r\n    // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c\r\n    dp[0] = grid[0][0];\r\n    for (let j = 1; j < m; j++) {\r\n        dp[j] = dp[j - 1] + grid[0][j];\r\n    }\r\n    // \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\r\n    for (let i = 1; i < n; i++) {\r\n        // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u5217\r\n        dp[0] = dp[0] + grid[i][0];\r\n        // \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u5217\r\n        for (let j = 1; j < m; j++) {\r\n            dp[j] = Math.min(dp[j - 1], dp[j]) + grid[i][j];\r\n        }\r\n    }\r\n    return dp[m - 1];\r\n}", "doc_comment": "/* \u6700\u5c0f\u8def\u5f84\u548c\uff1a\u72b6\u6001\u538b\u7f29\u540e\u7684\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["function", "minPathSumDPComp", "(", ")", "{", "// \u521d\u59cb\u5316 dp \u8868\r", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c\r", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\r", "}", "grid", "const", ",", ";", "const", ";", ";", "for", "(", ";", ")", "for", "(", ";", ")", "return", ";", "n", "=", "m", "=", "dp", "=", "=", "let", ";", "j", "<", "m", "j", "++", "{", "}", "let", ";", "i", "<", "n", "i", "++", "{", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u5217\r", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u5217\r", "}", "dp", "[", "]", "grid", ".", "length", ".", "length", "new", "Array", "dp", "[", "0", "]", "[", "0", "]", "j", "=", "1", ";", "i", "=", "1", ";", "for", "(", ";", ")", "m", "-", "1", "grid", "[", "0", "]", "(", "m", ")", "grid", "[", "0", "]", "=", "=", "let", ";", "j", "<", "m", "j", "++", "{", "}", "dp", "[", "j", "]", "+", "dp", "[", "0", "]", "+", "j", "=", "1", ";", "dp", "[", "]", "[", "j", "]", "dp", "[", "0", "]", "[", "0", "]", "=", "j", "-", "1", "grid", "[", "0", "]", "grid", "[", "i", "]", "dp", "[", "j", "]", "+", "Math", ".", "min", "[", "j", "]", "(", ",", ")", "grid", "[", "i", "]", "dp", "[", "]", "dp", "[", "j", "]", "j", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 241, "ast_depth": 15, "n_identifiers": 10, "vocab_size": 38}}
{"dataset_split": "train", "example_id": "hello-algo@a8c624f:codes/rust/chapter_dynamic_programming/min_path_sum.rs#92-119", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "a8c624fa5a2d3dd3eb49ff5c85ba670984e5aae8", "license": null}, "file": {"path": "codes/rust/chapter_dynamic_programming/min_path_sum.rs", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.rust.chapter_dynamic_programming.min_path_sum.rs#main", "start_line": 92, "end_line": 119, "signature": "main()", "original_code": "pub fn main() {\n    let grid = vec![\n        vec![ 1, 3, 1, 5 ],\n        vec![ 2, 2, 4, 2 ],\n        vec![ 5, 3, 2, 1 ],\n        vec![ 4, 3, 5, 2 ]];\n    let (n, m) = (grid.len(), grid[0].len());\n\n    // \u66b4\u529b\u641c\u7d22\n    let res = min_path_sum_dfs(&grid, n as i32 - 1, m as i32 - 1);\n    println!(\"\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a {res}\");\n\n    // \u8bb0\u5fc6\u5316\u641c\u7d22\n    let mut mem = vec![vec![0; m]; n];\n    for row in mem.iter_mut() {\n        row.fill(-1);\n    }\n    let res = min_path_sum_dfs_mem(&grid, &mut mem, n as i32 - 1, m as i32 - 1);\n    println!(\"\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a {res}\");\n\n    // \u52a8\u6001\u89c4\u5212\n    let res = min_path_sum_dp(&grid);\n    println!(\"\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a {res}\");\n\n    // \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212\n    let res = min_path_sum_dp_comp(&grid);\n    println!(\"\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a {res}\");\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["pub", "main", "fn", "(", ")", "{", "// \u66b4\u529b\u641c\u7d22", "// \u8bb0\u5fc6\u5316\u641c\u7d22", "// \u52a8\u6001\u89c4\u5212", "// \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212", "}", "let", ",", ",", ",", ";", "=", ";", "let", ",", "", "as", "", ",", "m", "as", "i32", "-", "1", ";", ";", "let", ";", "n", ";", "for", "row", "in", "", "{", "}", "let", ",", ",", "", "as", "", ",", "m", "as", "i32", "-", "1", ";", ";", "let", ";", ";", "let", ";", ";", "grid", "=", "vec", "!", "[", "vec", "!", "[", "2", ",", "2", ",", "4", ",", "2", "]", "vec", "!", "[", "5", ",", "3", ",", "2", ",", "1", "]", "vec", "!", "[", "4", ",", "3", ",", "5", ",", "2", "]", "]", "let", "(", ")", "res", "=", "n", "i32", "-", "1", ")", "println", "mut", "mem", "=", "vec", "!", "[", "]", "mem", ".", "iter_mut", "(", ")", ";", "res", "=", "&", "mut", "mem", "n", "i32", "-", "1", ")", "println", "res", "=", "println", "res", "=", "println", "vec", "[", "5", "]", "(", "n", ",", "m", ")", ",", ".", "len", "min_path_sum_dfs", "&", "grid", "!", "(", ")", "vec", "[", "m", "]", "row", ".", "fill", "min_path_sum_dfs_mem", "&", "grid", "!", "(", ")", "min_path_sum_dp", "!", "(", ")", "min_path_sum_dp_comp", "!", "(", ")", "!", "1", ",", "3", ",", "1", ",", "grid", ".", "len", "grid", "[", "0", "]", "(", ")", "(", "\"", "\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a {res}", "\"", "!", "0", ";", "(", ")", "(", "\"", "\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a {res}", "\"", "(", "grid", ")", "\"", "\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a {res}", "\"", "(", "grid", ")", "\"", "\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a {res}", "\"", "(", ")", "-", "1", "&", "&"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 329, "ast_depth": 9, "n_identifiers": 20, "vocab_size": 50}}
{"dataset_split": "train", "example_id": "hello-algo@a8c624f:codes/swift/chapter_dynamic_programming/min_path_sum.swift#8-16", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "a8c624fa5a2d3dd3eb49ff5c85ba670984e5aae8", "license": null}, "file": {"path": "codes/swift/chapter_dynamic_programming/min_path_sum.swift", "language": "Java"}, "method": {"name": "minPathSumDFS", "qualified_name": "codes.swift.chapter_dynamic_programming.min_path_sum.swift#minPathSumDFS", "start_line": 8, "end_line": 16, "signature": "minPathSumDFS(grid: [[Int]], i: Int, j: Int)", "original_code": "func minPathSumDFS(grid: [[Int]], i: Int, j: Int) -> Int {\n    // \u82e5\u4e3a\u5de6\u4e0a\u89d2\u5355\u5143\u683c\uff0c\u5219\u7ec8\u6b62\u641c\u7d22\n    if i == 0, j == 0 {\n        return grid[0][0]\n    }\n    // \u82e5\u884c\u5217\u7d22\u5f15\u8d8a\u754c\uff0c\u5219\u8fd4\u56de +\u221e \u4ee3\u4ef7\n    if i < 0 || j < 0 {\n        return .max\n    }", "doc_comment": "/* \u6700\u5c0f\u8def\u5f84\u548c\uff1a\u66b4\u529b\u641c\u7d22 */"}, "code_tokens": ["func", "minPathSumDFS", "(", ",", ",", ")", "->", "Int", "{", "// \u82e5\u4e3a\u5de6\u4e0a\u89d2\u5355\u5143\u683c\uff0c\u5219\u7ec8\u6b62\u641c\u7d22", "// \u82e5\u884c\u5217\u7d22\u5f15\u8d8a\u754c\uff0c\u5219\u8fd4\u56de +\u221e \u4ee3\u4ef7", "}", "grid", "Int", "]", "]", "i", "Int", "j", "Int", "if", ",", "{", "}", "if", "{", "return", "max", "", ":", "[", "[", ":", ":", "i", "==", "0", "j", "==", "0", "return", "", "||", ".", "[", "0", "]", "i", "<", "0", "j", "<", "0", "grid", "[", "0", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 82, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 26}}
{"dataset_split": "train", "example_id": "hello-algo@a8c624f:codes/swift/chapter_dynamic_programming/min_path_sum.swift#96-123", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "a8c624fa5a2d3dd3eb49ff5c85ba670984e5aae8", "license": null}, "file": {"path": "codes/swift/chapter_dynamic_programming/min_path_sum.swift", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.swift.chapter_dynamic_programming.min_path_sum.swift#main", "start_line": 96, "end_line": 123, "signature": "main()", "original_code": "static func main() {\n        let grid = [\n            [1, 3, 1, 5],\n            [2, 2, 4, 2],\n            [5, 3, 2, 1],\n            [4, 3, 5, 2],\n        ]\n        let n = grid.count\n        let m = grid[0].count\n\n        // \u66b4\u529b\u641c\u7d22\n        var res = minPathSumDFS(grid: grid, i: n - 1, j: m - 1)\n        print(\"\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u505a\u5c0f\u8def\u5f84\u548c\u4e3a \\(res)\")\n\n        // \u8bb0\u5fc6\u5316\u641c\u7d22\n        var mem = Array(repeating: Array(repeating: -1, count: m), count: n)\n        res = minPathSumDFSMem(grid: grid, mem: &mem, i: n - 1, j: m - 1)\n        print(\"\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u505a\u5c0f\u8def\u5f84\u548c\u4e3a \\(res)\")\n\n        // \u52a8\u6001\u89c4\u5212\n        res = minPathSumDP(grid: grid)\n        print(\"\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u505a\u5c0f\u8def\u5f84\u548c\u4e3a \\(res)\")\n\n        // \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212\n        res = minPathSumDPComp(grid: grid)\n        print(\"\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u505a\u5c0f\u8def\u5f84\u548c\u4e3a \\(res)\")\n    }\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["func", "main", "static", "(", ")", "{", "}", "let", ",", "// \u66b4\u529b\u641c\u7d22", "", "var", "", "// \u8bb0\u5fc6\u5316\u641c\u7d22", "", "var", "", "", "// \u52a8\u6001\u89c4\u5212", "", "", "// \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212", "", "", "}", "grid", "=", "1", "3", ",", "1", ",", "5", "]", ",", "[", "2", ",", "2", ",", "4", ",", "2", "]", ",", "[", "5", ",", "3", ",", "2", ",", "1", "]", ",", "[", "4", ",", "3", ",", "5", ",", "2", "]", ",", "]", "let", "n", "=", "res", "=", "print", "mem", "=", "res", "=", "print", "res", "=", "print", "res", "=", "print", "[", "[", "let", "m", "=", "minPathSumDFS", "(", ")", "Array", "minPathSumDFSMem", "(", ")", "minPathSumDP", "(", ")", "minPathSumDPComp", "(", ")", "grid", ".", "count", ".", "count", "(", ")", "\"", "\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u505a\u5c0f\u8def\u5f84\u548c\u4e3a ", "\\(", "res)", "\"", "(", "n", ")", "(", ")", "\"", "\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u505a\u5c0f\u8def\u5f84\u548c\u4e3a ", "\\(", "res)", "\"", "(", "grid", ")", "\"", "\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u505a\u5c0f\u8def\u5f84\u548c\u4e3a ", "\\(", "res)", "\"", "(", "grid", ")", "\"", "\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u505a\u5c0f\u8def\u5f84\u548c\u4e3a ", "\\(", "res)", "\"", "grid", "[", "0", "]", "grid", ":", "grid", ",", "i", ":", ",", "j", ":", "m", "-", "1", "repeating", ":", ",", "count", ":", "grid", ":", "grid", ",", "mem", ":", "&", "mem", ",", "i", ":", ",", "j", ":", "m", "-", "1", "grid", ":", "grid", ":", "n", "-", "1", "Array", "n", "-", "1", "(", ",", "count", ")", "repeating", "-", "1", ":", "m", ":"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 263, "ast_depth": 13, "n_identifiers": 17, "vocab_size": 47}}
{"dataset_split": "train", "example_id": "hello-algo@5392afd:codes/c/chapter_backtracking/preorder_traversal_i_compact.c#12-15", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5392afd44b76a0c08c061ab5fb4b02d34d7704b0", "license": null}, "file": {"path": "codes/c/chapter_backtracking/preorder_traversal_i_compact.c", "language": "Java"}, "method": {"name": "printFunc", "qualified_name": "codes.c.chapter_backtracking.preorder_traversal_i_compact.c#printFunc", "start_line": 12, "end_line": 15, "signature": "printFunc(vector *v, void *p)", "original_code": "void printFunc(vector *v, void *p) {\n    TreeNode *node = p;\n    printf(\"%d \", node->val);\n}", "doc_comment": "// \u6253\u5370\u5411\u91cf\u4e2d\u7684\u5143\u7d20"}, "code_tokens": ["void", "printFunc", "(", ",", ")", "{", "}", "vector", "v", "void", "p", ";", ";", "*", "*", "TreeNode", "*", "printf", "node", "=", "p", "(", ",", ")", "\"", "%d ", "\"", "node", "->", "val"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 46, "ast_depth": 8, "n_identifiers": 7, "vocab_size": 20}}
{"dataset_split": "train", "example_id": "hello-algo@5392afd:codes/c/chapter_backtracking/preorder_traversal_i_compact.c#18-28", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5392afd44b76a0c08c061ab5fb4b02d34d7704b0", "license": null}, "file": {"path": "codes/c/chapter_backtracking/preorder_traversal_i_compact.c", "language": "Java"}, "method": {"name": "preOrder", "qualified_name": "codes.c.chapter_backtracking.preorder_traversal_i_compact.c#preOrder", "start_line": 18, "end_line": 28, "signature": "preOrder(TreeNode *root)", "original_code": "void preOrder(TreeNode *root) {\n    if (root == NULL) {\n        return;\n    }\n    if (root->val == 7) {\n        // \u8bb0\u5f55\u89e3\n        vectorPushback(res, root, sizeof(int));\n    }\n    preOrder(root->left);\n    preOrder(root->right);\n}", "doc_comment": "/* \u524d\u5e8f\u904d\u5386\uff1a\u4f8b\u9898\u4e00 */"}, "code_tokens": ["void", "preOrder", "(", ")", "{", "}", "TreeNode", "root", "if", "if", ";", ";", "*", "(", ")", "{", "}", "(", ")", "{", "// \u8bb0\u5f55\u89e3", "}", "preOrder", "preOrder", "root", "==", "NULL", "return", ";", "root", "->", ";", "(", ")", "(", ")", "val", "==", "7", "vectorPushback", "root", "->", "left", "root", "->", "right", "(", "res", ",", "root", ",", ")", "sizeof", "(", ")", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 87, "ast_depth": 13, "n_identifiers": 9, "vocab_size": 25}}
{"dataset_split": "train", "example_id": "hello-algo@5392afd:codes/c/chapter_backtracking/preorder_traversal_i_compact.c#31-44", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5392afd44b76a0c08c061ab5fb4b02d34d7704b0", "license": null}, "file": {"path": "codes/c/chapter_backtracking/preorder_traversal_i_compact.c", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.c.chapter_backtracking.preorder_traversal_i_compact.c#main", "start_line": 31, "end_line": 44, "signature": "main()", "original_code": "int main() {\n    int arr[] = {1, 7, 3, 4, 5, 6, 7};\n    res = newVector();\n    TreeNode *root = arrToTree(arr, sizeof(arr) / sizeof(arr[0]));\n    printf(\"\\n\u521d\u59cb\u5316\u4e8c\u53c9\u6811\\r\\n\");\n    printTree(root);\n\n    // \u524d\u5e8f\u904d\u5386\n    preOrder(root);\n\n    printf(\"\\n\u8f93\u51fa\u6240\u6709\u503c\u4e3a 7 \u7684\u8282\u70b9\\r\\n\");\n    printVector(res, printFunc);\n    delVector(res);\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "// \u524d\u5e8f\u904d\u5386", "}", ";", ";", ";", ";", ";", ";", ";", ";", ";", "int", "arr", "=", "res", "=", "TreeNode", "*", "printf", "printTree", "preOrder", "printf", "printVector", "delVector", "[", "]", "{", "1", ",", "7", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", "}", "newVector", "root", "=", "(", ")", "(", "root", ")", "(", "root", ")", "(", ")", "(", "res", ",", "printFunc", ")", "(", "res", ")", "(", ")", "arrToTree", "\"", "\\n", "\u521d\u59cb\u5316\u4e8c\u53c9\u6811", "\\r", "\\n", "\"", "\"", "\\n", "\u8f93\u51fa\u6240\u6709\u503c\u4e3a 7 \u7684\u8282\u70b9", "\\r", "\\n", "\"", "(", "arr", ",", ")", "/", "sizeof", "sizeof", "(", "arr", ")", "(", ")", "arr", "[", "0", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 143, "ast_depth": 13, "n_identifiers": 14, "vocab_size": 39}}
{"dataset_split": "train", "example_id": "hello-algo@5392afd:codes/c/chapter_hashing/hash_map_chaining.c#53-65", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5392afd44b76a0c08c061ab5fb4b02d34d7704b0", "license": null}, "file": {"path": "codes/c/chapter_hashing/hash_map_chaining.c", "language": "Java"}, "method": {"name": "freeHashMapChaining", "qualified_name": "codes.c.chapter_hashing.hash_map_chaining.c#freeHashMapChaining", "start_line": 53, "end_line": 65, "signature": "freeHashMapChaining(hashMapChaining *hashMap)", "original_code": "void freeHashMapChaining(hashMapChaining *hashMap) {\n    for (int i = 0; i < hashMap->capacity; i++) {\n        Node *cur = hashMap->buckets[i];\n        while (cur) {\n            Node *temp = cur;\n            cur = cur->next;\n            free(temp->pair);\n            free(temp);\n        }\n    }\n    free(hashMap->buckets);\n    free(hashMap);\n}", "doc_comment": "/* \u6790\u6784\u65b9\u6cd5 */"}, "code_tokens": ["void", "freeHashMapChaining", "(", ")", "{", "}", "hashMapChaining", "hashMap", "for", "(", ";", ")", ";", ";", "*", ";", "i", "<", "i", "++", "{", "}", "free", "free", "int", "i", "=", "0", "hashMap", "->", "capacity", ";", "while", "(", ")", "(", "hashMap", ")", "Node", "*", "(", "cur", ")", "{", "}", "hashMap", "->", "buckets", "cur", "=", ";", ";", ";", ";", "hashMap", "->", "Node", "*", "cur", "=", "free", "free", "buckets", "[", "i", "]", "temp", "=", "cur", "cur", "->", "next", "(", ")", "(", "temp", ")", "temp", "->", "pair"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 122, "ast_depth": 12, "n_identifiers": 11, "vocab_size": 29}}
{"dataset_split": "train", "example_id": "hello-algo@5392afd:codes/c/chapter_hashing/hash_map_chaining.c#68-70", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5392afd44b76a0c08c061ab5fb4b02d34d7704b0", "license": null}, "file": {"path": "codes/c/chapter_hashing/hash_map_chaining.c", "language": "Java"}, "method": {"name": "hashFunc", "qualified_name": "codes.c.chapter_hashing.hash_map_chaining.c#hashFunc", "start_line": 68, "end_line": 70, "signature": "hashFunc(hashMapChaining *hashMap, int key)", "original_code": "int hashFunc(hashMapChaining *hashMap, int key) {\n    return key % hashMap->capacity;\n}", "doc_comment": "/* \u54c8\u5e0c\u51fd\u6570 */"}, "code_tokens": ["hashFunc", "int", "(", ",", ")", "{", "}", "hashMapChaining", "hashMap", "key", "return", ";", "*", "int", "key", "%", "hashMap", "->", "capacity"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 31, "ast_depth": 7, "n_identifiers": 4, "vocab_size": 16}}
{"dataset_split": "train", "example_id": "hello-algo@5392afd:codes/c/chapter_hashing/hash_map_chaining.c#73-75", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5392afd44b76a0c08c061ab5fb4b02d34d7704b0", "license": null}, "file": {"path": "codes/c/chapter_hashing/hash_map_chaining.c", "language": "Java"}, "method": {"name": "loadFactor", "qualified_name": "codes.c.chapter_hashing.hash_map_chaining.c#loadFactor", "start_line": 73, "end_line": 75, "signature": "loadFactor(hashMapChaining *hashMap)", "original_code": "double loadFactor(hashMapChaining *hashMap) {\n    return (double)hashMap->size / (double)hashMap->capacity;\n}", "doc_comment": "/* \u8d1f\u8f7d\u56e0\u5b50 */"}, "code_tokens": ["loadFactor", "double", "(", ")", "{", "}", "hashMapChaining", "hashMap", "return", ";", "*", "(", ")", "double", "hashMap", "->", "size", "/", "(", ")", "double", "hashMap", "->", "capacity"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 39, "ast_depth": 10, "n_identifiers": 4, "vocab_size": 15}}
{"dataset_split": "train", "example_id": "hello-algo@5392afd:codes/c/chapter_hashing/hash_map_chaining.c#78-89", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5392afd44b76a0c08c061ab5fb4b02d34d7704b0", "license": null}, "file": {"path": "codes/c/chapter_hashing/hash_map_chaining.c", "language": "Java"}, "method": {"name": "get", "qualified_name": "codes.c.chapter_hashing.hash_map_chaining.c#get", "start_line": 78, "end_line": 89, "signature": "get(hashMapChaining *hashMap, int key)", "original_code": "char *get(hashMapChaining *hashMap, int key) {\n    int index = hashFunc(hashMap, key);\n    // \u904d\u5386\u6876\uff0c\u82e5\u627e\u5230 key \u5219\u8fd4\u56de\u5bf9\u5e94 val\n    Node *cur = hashMap->buckets[index];\n    while (cur) {\n        if (cur->pair->key == key) {\n            return cur->pair->val;\n        }\n        cur = cur->next;\n    }\n    return \"\"; // \u82e5\u672a\u627e\u5230 key \u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\n}", "doc_comment": "/* \u67e5\u8be2\u64cd\u4f5c */"}, "code_tokens": ["get", "char", "*", "(", ",", ")", "{", "// \u904d\u5386\u6876\uff0c\u82e5\u627e\u5230 key \u5219\u8fd4\u56de\u5bf9\u5e94 val", "// \u82e5\u672a\u627e\u5230 key \u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32", "}", "hashMapChaining", "hashMap", "key", ";", ";", "while", "return", ";", "*", "int", "int", "index", "=", "Node", "*", "(", "cur", ")", "{", "}", "\"", "\"", "hashFunc", "cur", "=", "if", ";", "(", "hashMap", ",", "key", ")", "hashMap", "->", "(", ")", "{", "}", "cur", "=", "buckets", "[", "index", "]", "cur", "->", "return", ";", "cur", "->", "next", "pair", "->", "cur", "->", "key", "==", "key", "pair", "->", "val"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 108, "ast_depth": 11, "n_identifiers": 11, "vocab_size": 32}}
{"dataset_split": "train", "example_id": "hello-algo@5392afd:codes/c/chapter_hashing/hash_map_chaining.c#92-92", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5392afd44b76a0c08c061ab5fb4b02d34d7704b0", "license": null}, "file": {"path": "codes/c/chapter_hashing/hash_map_chaining.c", "language": "Java"}, "method": {"name": "put", "qualified_name": "codes.c.chapter_hashing.hash_map_chaining.c#put", "start_line": 92, "end_line": 92, "signature": "put(hashMapChaining *hashMap, int key, const char *val)", "original_code": "void put(hashMapChaining *hashMap, int key, const char *val);", "doc_comment": "/* \u6dfb\u52a0\u64cd\u4f5c */"}, "code_tokens": ["void", "put", ";", "(", ",", ",", ")", "hashMapChaining", "hashMap", "key", "const", "char", "*", "val", "*", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 25, "ast_depth": 6, "n_identifiers": 5, "vocab_size": 14}}
{"dataset_split": "train", "example_id": "hello-algo@5392afd:codes/c/chapter_hashing/hash_map_chaining.c#95-120", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5392afd44b76a0c08c061ab5fb4b02d34d7704b0", "license": null}, "file": {"path": "codes/c/chapter_hashing/hash_map_chaining.c", "language": "Java"}, "method": {"name": "extend", "qualified_name": "codes.c.chapter_hashing.hash_map_chaining.c#extend", "start_line": 95, "end_line": 120, "signature": "extend(hashMapChaining *hashMap)", "original_code": "void extend(hashMapChaining *hashMap) {\n    // \u6682\u5b58\u539f\u54c8\u5e0c\u8868\n    int oldCapacity = hashMap->capacity;\n    Node **oldBuckets = hashMap->buckets;\n    // \u521d\u59cb\u5316\u6269\u5bb9\u540e\u7684\u65b0\u54c8\u5e0c\u8868\n    hashMap->capacity *= hashMap->extendRatio;\n    hashMap->buckets = (Node **)malloc(hashMap->capacity * sizeof(Node *));\n    for (int i = 0; i < hashMap->capacity; i++) {\n        hashMap->buckets[i] = NULL;\n    }\n    hashMap->size = 0;\n    // \u5c06\u952e\u503c\u5bf9\u4ece\u539f\u54c8\u5e0c\u8868\u642c\u8fd0\u81f3\u65b0\u54c8\u5e0c\u8868\n    for (int i = 0; i < oldCapacity; i++) {\n        Node *cur = oldBuckets[i];\n        while (cur) {\n            put(hashMap, cur->pair->key, cur->pair->val);\n            Node *temp = cur;\n            cur = cur->next;\n            // \u91ca\u653e\u5185\u5b58\n            free(temp->pair);\n            free(temp);\n        }\n    }\n\n    free(oldBuckets);\n}", "doc_comment": "/* \u6269\u5bb9\u54c8\u5e0c\u8868 */"}, "code_tokens": ["void", "extend", "(", ")", "{", "// \u6682\u5b58\u539f\u54c8\u5e0c\u8868", "// \u521d\u59cb\u5316\u6269\u5bb9\u540e\u7684\u65b0\u54c8\u5e0c\u8868", "// \u5c06\u952e\u503c\u5bf9\u4ece\u539f\u54c8\u5e0c\u8868\u642c\u8fd0\u81f3\u65b0\u54c8\u5e0c\u8868", "}", "hashMapChaining", "hashMap", ";", ";", ";", ";", "for", "(", ";", ")", ";", "for", "(", ";", ")", ";", "*", "int", "oldCapacity", "=", "Node", "*", "hashMap", "->", "hashMap", "->", ";", "i", "<", "i", "++", "{", "}", "hashMap", "->", ";", "i", "<", "oldCapacity", "i", "++", "{", "}", "free", "hashMap", "->", "capacity", "*", "oldBuckets", "=", "capacity", "*=", "buckets", "=", "int", "i", "=", "0", "hashMap", "->", "capacity", ";", "size", "=", "0", "int", "i", "=", "0", ";", "while", "(", "oldBuckets", ")", "hashMap", "->", "buckets", "hashMap", "->", "extendRatio", "(", "", "hashMap", "->", "Node", "*", "(", "cur", ")", "{", "// \u91ca\u653e\u5185\u5b58", "}", "Node", "*", "=", "NULL", "cur", "=", ";", ";", ";", ";", ";", "*", ")", "malloc", "buckets", "[", "i", "]", "oldBuckets", "[", "i", "]", "put", "Node", "*", "cur", "=", "free", "free", "(", ")", "(", "hashMap", ",", ",", ")", "temp", "=", "cur", "cur", "->", "next", "(", ")", "(", "temp", ")", "hashMap", "->", "cur", "->", "cur", "->", "temp", "->", "pair", "capacity", "*", "pair", "->", "key", "pair", "->", "val", "sizeof", "(", ")", "Node", "*", ""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 255, "ast_depth": 16, "n_identifiers": 22, "vocab_size": 46}}
{"dataset_split": "train", "example_id": "hello-algo@5392afd:codes/c/chapter_hashing/hash_map_chaining.c#123-147", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5392afd44b76a0c08c061ab5fb4b02d34d7704b0", "license": null}, "file": {"path": "codes/c/chapter_hashing/hash_map_chaining.c", "language": "Java"}, "method": {"name": "put", "qualified_name": "codes.c.chapter_hashing.hash_map_chaining.c#put", "start_line": 123, "end_line": 147, "signature": "put(hashMapChaining *hashMap, int key, const char *val)", "original_code": "void put(hashMapChaining *hashMap, int key, const char *val) {\n    // \u5f53\u8d1f\u8f7d\u56e0\u5b50\u8d85\u8fc7\u9608\u503c\u65f6\uff0c\u6267\u884c\u6269\u5bb9\n    if (loadFactor(hashMap) > hashMap->loadThres) {\n        extend(hashMap);\n    }\n    int index = hashFunc(hashMap, key);\n    // \u904d\u5386\u6876\uff0c\u82e5\u9047\u5230\u6307\u5b9a key \uff0c\u5219\u66f4\u65b0\u5bf9\u5e94 val \u5e76\u8fd4\u56de\n    Node *cur = hashMap->buckets[index];\n    while (cur) {\n        if (cur->pair->key == key) {\n            strcpy(cur->pair->val, val); // \u82e5\u9047\u5230\u6307\u5b9a key \uff0c\u5219\u66f4\u65b0\u5bf9\u5e94 val \u5e76\u8fd4\u56de\n            return;\n        }\n        cur = cur->next;\n    }\n    // \u82e5\u65e0\u8be5 key \uff0c\u5219\u5c06\u952e\u503c\u5bf9\u6dfb\u52a0\u81f3\u5c3e\u90e8\n    Pair *newPair = (Pair *)malloc(sizeof(Pair));\n    newPair->key = key;\n    strcpy(newPair->val, val);\n    Node *newNode = (Node *)malloc(sizeof(Node));\n    newNode->pair = newPair;\n    newNode->next = hashMap->buckets[index];\n    hashMap->buckets[index] = newNode;\n    hashMap->size++;\n}", "doc_comment": "/* \u6dfb\u52a0\u64cd\u4f5c */"}, "code_tokens": ["void", "put", "(", ",", ",", ")", "{", "// \u5f53\u8d1f\u8f7d\u56e0\u5b50\u8d85\u8fc7\u9608\u503c\u65f6\uff0c\u6267\u884c\u6269\u5bb9", "// \u904d\u5386\u6876\uff0c\u82e5\u9047\u5230\u6307\u5b9a key \uff0c\u5219\u66f4\u65b0\u5bf9\u5e94 val \u5e76\u8fd4\u56de", "// \u82e5\u65e0\u8be5 key \uff0c\u5219\u5c06\u952e\u503c\u5bf9\u6dfb\u52a0\u81f3\u5c3e\u90e8", "}", "hashMapChaining", "hashMap", "key", "const", "char", "*", "val", "if", ";", ";", "while", ";", ";", ";", ";", ";", ";", ";", ";", "*", "int", "(", ")", "{", "}", "int", "index", "=", "Node", "*", "(", "cur", ")", "{", "}", "Pair", "*", "newPair", "->", "strcpy", "Node", "*", "newNode", "->", "newNode", "->", "hashMap", "->", "hashMap", "->", ">", ";", "hashFunc", "cur", "=", "if", ";", "newPair", "=", "key", "=", "key", "(", ",", "val", ")", "newNode", "=", "pair", "=", "newPair", "next", "=", "=", "newNode", "size", "++", "loadFactor", "hashMap", "->", "loadThres", "extend", "(", "hashMap", ",", "key", ")", "hashMap", "->", "(", ")", "{", "// \u82e5\u9047\u5230\u6307\u5b9a key \uff0c\u5219\u66f4\u65b0\u5bf9\u5e94 val \u5e76\u8fd4\u56de", "}", "cur", "=", "(", "", "newPair", "->", "val", "(", "", "hashMap", "->", "buckets", "[", "index", "]", "(", "hashMap", ")", "(", "hashMap", ")", "buckets", "[", "index", "]", "cur", "->", ";", "return", ";", "cur", "->", "next", "Pair", "*", "Node", "*", "buckets", "[", "index", "]", "pair", "->", "strcpy", ")", "malloc", ")", "malloc", "key", "==", "key", "(", ",", "val", ")", "(", ")", "(", ")", "cur", "->", "sizeof", "sizeof", "pair", "->", "val", "(", "Pair", ")", "(", "Node", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 267, "ast_depth": 13, "n_identifiers": 22, "vocab_size": 48}}
{"dataset_split": "train", "example_id": "hello-algo@5392afd:codes/c/chapter_hashing/hash_map_chaining.c#150-171", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5392afd44b76a0c08c061ab5fb4b02d34d7704b0", "license": null}, "file": {"path": "codes/c/chapter_hashing/hash_map_chaining.c", "language": "Java"}, "method": {"name": "removeKey", "qualified_name": "codes.c.chapter_hashing.hash_map_chaining.c#removeKey", "start_line": 150, "end_line": 171, "signature": "removeKey(hashMapChaining *hashMap, int key)", "original_code": "void removeKey(hashMapChaining *hashMap, int key) {\n    int index = hashFunc(hashMap, key);\n    Node *cur = hashMap->buckets[index];\n    Node *pre = NULL;\n    while (cur) {\n        if (cur->pair->key == key) {\n            // \u4ece\u4e2d\u5220\u9664\u952e\u503c\u5bf9\n            if (pre) {\n                pre->next = cur->next;\n            } else {\n                hashMap->buckets[index] = cur->next;\n            }\n            // \u91ca\u653e\u5185\u5b58\n            free(cur->pair);\n            free(cur);\n            hashMap->size--;\n            return;\n        }\n        pre = cur;\n        cur = cur->next;\n    }\n}", "doc_comment": "/* \u5220\u9664\u64cd\u4f5c */"}, "code_tokens": ["void", "removeKey", "(", ",", ")", "{", "}", "hashMapChaining", "hashMap", "key", ";", ";", ";", "while", "*", "int", "int", "index", "=", "Node", "*", "Node", "*", "(", "cur", ")", "{", "}", "hashFunc", "cur", "=", "pre", "=", "NULL", "if", ";", ";", "(", "hashMap", ",", "key", ")", "hashMap", "->", "(", ")", "{", "// \u4ece\u4e2d\u5220\u9664\u952e\u503c\u5bf9", "// \u91ca\u653e\u5185\u5b58", "}", "pre", "=", "cur", "cur", "=", "buckets", "[", "index", "]", "cur", "->", "if", "else", ";", ";", ";", "return", ";", "cur", "->", "next", "pair", "->", "(", "pre", ")", "{", "}", "{", "}", "free", "free", "hashMap", "->", "key", "==", "key", ";", ";", "(", ")", "(", "cur", ")", "size", "--", "pre", "->", "hashMap", "->", "cur", "->", "pair", "next", "=", "=", "cur", "->", "next", "buckets", "[", "index", "]", "cur", "->", "next"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 175, "ast_depth": 14, "n_identifiers": 14, "vocab_size": 36}}
{"dataset_split": "train", "example_id": "hello-algo@5392afd:codes/c/chapter_hashing/hash_map_chaining.c#174-184", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5392afd44b76a0c08c061ab5fb4b02d34d7704b0", "license": null}, "file": {"path": "codes/c/chapter_hashing/hash_map_chaining.c", "language": "Java"}, "method": {"name": "print", "qualified_name": "codes.c.chapter_hashing.hash_map_chaining.c#print", "start_line": 174, "end_line": 184, "signature": "print(hashMapChaining *hashMap)", "original_code": "void print(hashMapChaining *hashMap) {\n    for (int i = 0; i < hashMap->capacity; i++) {\n        Node *cur = hashMap->buckets[i];\n        printf(\"[\");\n        while (cur) {\n            printf(\"%d -> %s, \", cur->pair->key, cur->pair->val);\n            cur = cur->next;\n        }\n        printf(\"]\\n\");\n    }\n}", "doc_comment": "/* \u6253\u5370\u54c8\u5e0c\u8868 */"}, "code_tokens": ["void", "print", "(", ")", "{", "}", "hashMapChaining", "hashMap", "for", "(", ";", ")", "*", ";", "i", "<", "i", "++", "{", "}", "int", "i", "=", "0", "hashMap", "->", "capacity", ";", ";", "while", ";", "Node", "*", "printf", "(", "cur", ")", "{", "}", "printf", "cur", "=", "(", ")", ";", ";", "(", ")", "hashMap", "->", "\"", "[", "\"", "printf", "cur", "=", "\"", "]", "\\n", "\"", "buckets", "[", "i", "]", "(", ",", ",", ")", "cur", "->", "next", "\"", "%d -> %s, ", "\"", "cur", "->", "cur", "->", "pair", "->", "key", "pair", "->", "val"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 125, "ast_depth": 13, "n_identifiers": 12, "vocab_size": 34}}
{"dataset_split": "train", "example_id": "hello-algo@5392afd:codes/c/chapter_hashing/hash_map_chaining.c#187-216", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5392afd44b76a0c08c061ab5fb4b02d34d7704b0", "license": null}, "file": {"path": "codes/c/chapter_hashing/hash_map_chaining.c", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.c.chapter_hashing.hash_map_chaining.c#main", "start_line": 187, "end_line": 216, "signature": "main()", "original_code": "int main() {\n    /* \u521d\u59cb\u5316\u54c8\u5e0c\u8868 */\n    hashMapChaining *hashMap = initHashMapChaining();\n\n    /* \u6dfb\u52a0\u64cd\u4f5c */\n    // \u5728\u54c8\u5e0c\u8868\u4e2d\u6dfb\u52a0\u952e\u503c\u5bf9 (key, value)\n    put(hashMap, 12836, \"\u5c0f\u54c8\");\n    put(hashMap, 15937, \"\u5c0f\u5570\");\n    put(hashMap, 16750, \"\u5c0f\u7b97\");\n    put(hashMap, 13276, \"\u5c0f\u6cd5\");\n    put(hashMap, 10583, \"\u5c0f\u9e2d\");\n    printf(\"\\n\u6dfb\u52a0\u5b8c\u6210\u540e\uff0c\u54c8\u5e0c\u8868\u4e3a\\nKey -> Value\\n\");\n    print(hashMap);\n\n    /* \u67e5\u8be2\u64cd\u4f5c */\n    // \u5411\u54c8\u5e0c\u8868\u8f93\u5165\u952e key \uff0c\u5f97\u5230\u503c value\n    char *name = get(hashMap, 13276);\n    printf(\"\\n\u8f93\u5165\u5b66\u53f7 13276 \uff0c\u67e5\u8be2\u5230\u59d3\u540d %s\\n\", name);\n\n    /* \u5220\u9664\u64cd\u4f5c */\n    // \u5728\u54c8\u5e0c\u8868\u4e2d\u5220\u9664\u952e\u503c\u5bf9 (key, value)\n    removeKey(hashMap, 12836);\n    printf(\"\\n\u5220\u9664\u5b66\u53f7 12836 \u540e\uff0c\u54c8\u5e0c\u8868\u4e3a\\nKey -> Value\\n\");\n    print(hashMap);\n\n    /* \u91ca\u653e\u54c8\u5e0c\u8868\u7a7a\u95f4 */\n    freeHashMapChaining(hashMap);\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "/* \u521d\u59cb\u5316\u54c8\u5e0c\u8868 */", "/* \u6dfb\u52a0\u64cd\u4f5c */", "// \u5728\u54c8\u5e0c\u8868\u4e2d\u6dfb\u52a0\u952e\u503c\u5bf9 (key, value)", "/* \u67e5\u8be2\u64cd\u4f5c */", "// \u5411\u54c8\u5e0c\u8868\u8f93\u5165\u952e key \uff0c\u5f97\u5230\u503c value", "/* \u5220\u9664\u64cd\u4f5c */", "// \u5728\u54c8\u5e0c\u8868\u4e2d\u5220\u9664\u952e\u503c\u5bf9 (key, value)", "/* \u91ca\u653e\u54c8\u5e0c\u8868\u7a7a\u95f4 */", "}", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "return", "0", ";", "hashMapChaining", "*", "put", "put", "put", "put", "put", "printf", "print", "char", "*", "name", "=", "printf", "removeKey", "printf", "print", "freeHashMapChaining", "hashMap", "=", "(", "hashMap", ",", "12836", ",", ")", "(", "hashMap", ",", "15937", ",", ")", "(", "hashMap", ",", "16750", ",", ")", "(", "hashMap", ",", "13276", ",", ")", "(", "hashMap", ",", "10583", ",", ")", "(", ")", "(", "hashMap", ")", "get", "(", ",", "name", ")", "(", "hashMap", ",", "12836", ")", "(", ")", "(", "hashMap", ")", "(", "hashMap", ")", "initHashMapChaining", "\"", "\u5c0f\u54c8", "\"", "\"", "\u5c0f\u5570", "\"", "\"", "\u5c0f\u7b97", "\"", "\"", "\u5c0f\u6cd5", "\"", "\"", "\u5c0f\u9e2d", "\"", "\"", "\\n", "\u6dfb\u52a0\u5b8c\u6210\u540e\uff0c\u54c8\u5e0c\u8868\u4e3a", "\\n", "Key -> Value", "\\n", "\"", "(", "hashMap", ",", "13276", ")", "\"", "\\n", "\u8f93\u5165\u5b66\u53f7 13276 \uff0c\u67e5\u8be2\u5230\u59d3\u540d %s", "\\n", "\"", "\"", "\\n", "\u5220\u9664\u5b66\u53f7 12836 \u540e\uff0c\u54c8\u5e0c\u8868\u4e3a", "\\n", "Key -> Value", "\\n", "\"", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 207, "ast_depth": 9, "n_identifiers": 11, "vocab_size": 47}}
{"dataset_split": "train", "example_id": "hello-algo@5392afd:codes/cpp/chapter_backtracking/permutations_i.cpp#10-31", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5392afd44b76a0c08c061ab5fb4b02d34d7704b0", "license": null}, "file": {"path": "codes/cpp/chapter_backtracking/permutations_i.cpp", "language": "Java"}, "method": {"name": "backtrack", "qualified_name": "codes.cpp.chapter_backtracking.permutations_i.cpp#backtrack", "start_line": 10, "end_line": 31, "signature": "backtrack(vector<int> &state, const vector<int> &choices, vector<bool> &selected, vector<vector<int>> &res)", "original_code": "void backtrack(vector<int> &state, const vector<int> &choices, vector<bool> &selected, vector<vector<int>> &res) {\n    // \u5f53\u72b6\u6001\u957f\u5ea6\u7b49\u4e8e\u5143\u7d20\u6570\u91cf\u65f6\uff0c\u8bb0\u5f55\u89e3\n    if (state.size() == choices.size()) {\n        res.push_back(state);\n        return;\n    }\n    // \u904d\u5386\u6240\u6709\u9009\u62e9\n    for (int i = 0; i < choices.size(); i++) {\n        int choice = choices[i];\n        // \u526a\u679d\uff1a\u4e0d\u5141\u8bb8\u91cd\u590d\u9009\u62e9\u5143\u7d20\n        if (!selected[i]) {\n            // \u5c1d\u8bd5\uff1a\u505a\u51fa\u9009\u62e9\uff0c\u66f4\u65b0\u72b6\u6001\n            selected[i] = true;\n            state.push_back(choice);\n            // \u8fdb\u884c\u4e0b\u4e00\u8f6e\u9009\u62e9\n            backtrack(state, choices, selected, res);\n            // \u56de\u9000\uff1a\u64a4\u9500\u9009\u62e9\uff0c\u6062\u590d\u5230\u4e4b\u524d\u7684\u72b6\u6001\n            selected[i] = false;\n            state.pop_back();\n        }\n    }\n}", "doc_comment": "/* \u56de\u6eaf\u7b97\u6cd5\uff1a\u5168\u6392\u5217 I */"}, "code_tokens": ["void", "backtrack", "(", ",", ",", ",", ")", "{", "// \u5f53\u72b6\u6001\u957f\u5ea6\u7b49\u4e8e\u5143\u7d20\u6570\u91cf\u65f6\uff0c\u8bb0\u5f55\u89e3", "// \u904d\u5386\u6240\u6709\u9009\u62e9", "}", "state", "const", "choices", "selected", "res", "if", "for", "(", ";", ")", "vector", "&", "vector", "<", "int", ">", "&", "vector", "&", "vector", "&", "(", ")", "{", "}", ";", "i", "<", "i", "++", "{", "// \u526a\u679d\uff1a\u4e0d\u5141\u8bb8\u91cd\u590d\u9009\u62e9\u5143\u7d20", "}", "<", ">", "<", "bool", ">", "<", ">", "==", ";", "return", ";", "int", "i", "=", "0", "choices", ".", "size", ";", "if", "int", "vector", "state", ".", "size", "choices", ".", "size", "res", ".", "push_back", "(", ")", "int", "choice", "=", "(", ")", "{", "// \u5c1d\u8bd5\uff1a\u505a\u51fa\u9009\u62e9\uff0c\u66f4\u65b0\u72b6\u6001", "// \u8fdb\u884c\u4e0b\u4e00\u8f6e\u9009\u62e9", "// \u56de\u9000\uff1a\u64a4\u9500\u9009\u62e9\uff0c\u6062\u590d\u5230\u4e4b\u524d\u7684\u72b6\u6001", "}", "<", ">", "(", ")", "(", ")", "(", "state", ")", "choices", "[", "i", "]", "!", ";", ";", ";", ";", ";", "int", "selected", "[", "i", "]", "=", "true", "state", ".", "push_back", "backtrack", "=", "false", "state", ".", "pop_back", "selected", "[", "i", "]", "(", "choice", ")", "(", "state", ",", "choices", ",", "selected", ",", "res", ")", "selected", "[", "i", "]", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 211, "ast_depth": 11, "n_identifiers": 11, "vocab_size": 43}}
{"dataset_split": "train", "example_id": "hello-algo@5392afd:codes/cpp/chapter_backtracking/permutations_i.cpp#34-40", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5392afd44b76a0c08c061ab5fb4b02d34d7704b0", "license": null}, "file": {"path": "codes/cpp/chapter_backtracking/permutations_i.cpp", "language": "Java"}, "method": {"name": "permutationsI", "qualified_name": "codes.cpp.chapter_backtracking.permutations_i.cpp#permutationsI", "start_line": 34, "end_line": 40, "signature": "permutationsI(vector<int> nums)", "original_code": "vector<vector<int>> permutationsI(vector<int> nums) {\n    vector<int> state;\n    vector<bool> selected(nums.size(), false);\n    vector<vector<int>> res;\n    backtrack(state, nums, selected, res);\n    return res;\n}", "doc_comment": "/* \u5168\u6392\u5217 I */"}, "code_tokens": ["permutationsI", "vector", "(", ")", "{", "}", "<", ">", "nums", ";", ";", ";", ";", "return", "res", ";", "vector", "vector", "vector", "state", ">", "vector", "res", "backtrack", "<", ">", "<", ">", "<", ">", "vector", "<", "bool", "selected", "<", ">", "(", "state", ",", "nums", ",", "selected", ",", "res", ")", "int", "int", "int", "(", ",", "false", ")", "vector", "nums", ".", "size", "<", ">", "(", ")", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 97, "ast_depth": 10, "n_identifiers": 9, "vocab_size": 21}}
{"dataset_split": "train", "example_id": "hello-algo@5392afd:codes/cpp/chapter_backtracking/permutations_i.cpp#43-54", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5392afd44b76a0c08c061ab5fb4b02d34d7704b0", "license": null}, "file": {"path": "codes/cpp/chapter_backtracking/permutations_i.cpp", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.cpp.chapter_backtracking.permutations_i.cpp#main", "start_line": 43, "end_line": 54, "signature": "main()", "original_code": "int main() {\n    vector<int> nums = {1, 2, 3};\n\n    vector<vector<int>> res = permutationsI(nums);\n\n    cout << \"\u8f93\u5165\u6570\u7ec4 nums = \";\n    printVector(nums);\n    cout << \"\u6240\u6709\u6392\u5217 res = \";\n    printVectorMatrix(res);\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "}", ";", ";", ";", ";", ";", ";", "return", "0", ";", "vector", "nums", "=", "vector", "res", "=", "cout", "<<", "printVector", "cout", "<<", "printVectorMatrix", "<", ">", "{", "1", ",", "2", ",", "3", "}", "<", ">", "permutationsI", "\"", "\u8f93\u5165\u6570\u7ec4 nums = ", "\"", "(", "nums", ")", "\"", "\u6240\u6709\u6392\u5217 res = ", "\"", "(", "res", ")", "int", "vector", "(", "nums", ")", "<", ">", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 92, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 27}}
{"dataset_split": "train", "example_id": "hello-algo@5392afd:codes/csharp/chapter_backtracking/permutations_i.cs#11-32", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5392afd44b76a0c08c061ab5fb4b02d34d7704b0", "license": null}, "file": {"path": "codes/csharp/chapter_backtracking/permutations_i.cs", "language": "Java"}, "method": {"name": "Backtrack", "qualified_name": "codes.csharp.chapter_backtracking.permutations_i.cs#Backtrack", "start_line": 11, "end_line": 32, "signature": "Backtrack(List<int> state, int[] choices, bool[] selected, List<List<int>> res)", "original_code": "static void Backtrack(List<int> state, int[] choices, bool[] selected, List<List<int>> res) {\n        // \u5f53\u72b6\u6001\u957f\u5ea6\u7b49\u4e8e\u5143\u7d20\u6570\u91cf\u65f6\uff0c\u8bb0\u5f55\u89e3\n        if (state.Count == choices.Length) {\n            res.Add(new List<int>(state));\n            return;\n        }\n        // \u904d\u5386\u6240\u6709\u9009\u62e9\n        for (int i = 0; i < choices.Length; i++) {\n            int choice = choices[i];\n            // \u526a\u679d\uff1a\u4e0d\u5141\u8bb8\u91cd\u590d\u9009\u62e9\u5143\u7d20\n            if (!selected[i]) {\n                // \u5c1d\u8bd5\uff1a\u505a\u51fa\u9009\u62e9\uff0c\u66f4\u65b0\u72b6\u6001\n                selected[i] = true;\n                state.Add(choice);\n                // \u8fdb\u884c\u4e0b\u4e00\u8f6e\u9009\u62e9\n                Backtrack(state, choices, selected, res);\n                // \u56de\u9000\uff1a\u64a4\u9500\u9009\u62e9\uff0c\u6062\u590d\u5230\u4e4b\u524d\u7684\u72b6\u6001\n                selected[i] = false;\n                state.RemoveAt(state.Count - 1);\n            }\n        }\n    }", "doc_comment": "/* \u56de\u6eaf\u7b97\u6cd5\uff1a\u5168\u6392\u5217 I */"}, "code_tokens": ["void", "Backtrack", "static", "(", ",", ",", ",", ")", "{", "// \u5f53\u72b6\u6001\u957f\u5ea6\u7b49\u4e8e\u5143\u7d20\u6570\u91cf\u65f6\uff0c\u8bb0\u5f55\u89e3", "// \u904d\u5386\u6240\u6709\u9009\u62e9", "}", "state", "choices", "selected", "res", "if", "for", "(", ";", ")", "List", "bool", "List", "(", ")", "{", "}", ";", "i", "<", "i", "++", "{", "// \u526a\u679d\uff1a\u4e0d\u5141\u8bb8\u91cd\u590d\u9009\u62e9\u5143\u7d20", "}", "<", ">", "int", "[", "]", "[", "]", "<", ">", "==", ";", "return", ";", "int", "i", "=", "0", "choices", ".", "Length", ";", "if", "int", "List", "state", ".", "Count", "choices", ".", "Length", "res", ".", "Add", "int", "choice", "=", "(", ")", "{", "// \u5c1d\u8bd5\uff1a\u505a\u51fa\u9009\u62e9\uff0c\u66f4\u65b0\u72b6\u6001", "// \u8fdb\u884c\u4e0b\u4e00\u8f6e\u9009\u62e9", "// \u56de\u9000\uff1a\u64a4\u9500\u9009\u62e9\uff0c\u6062\u590d\u5230\u4e4b\u524d\u7684\u72b6\u6001", "}", "<", ">", "(", ")", "choices", "[", "i", "]", "!", ";", ";", ";", ";", ";", "int", "new", "selected", "[", "i", "]", "=", "true", "state", ".", "Add", "Backtrack", "=", "false", "state", ".", "RemoveAt", "List", "(", "state", ")", "selected", "[", "i", "]", "(", "choice", ")", "(", "state", ",", "choices", ",", "selected", ",", "res", ")", "selected", "[", "i", "]", "(", ")", "<", ">", "-", "1", "int", "state", ".", "Count"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 215, "ast_depth": 13, "n_identifiers": 11, "vocab_size": 46}}
{"dataset_split": "train", "example_id": "hello-algo@5392afd:codes/csharp/chapter_backtracking/permutations_i.cs#35-39", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5392afd44b76a0c08c061ab5fb4b02d34d7704b0", "license": null}, "file": {"path": "codes/csharp/chapter_backtracking/permutations_i.cs", "language": "Java"}, "method": {"name": "PermutationsI", "qualified_name": "codes.csharp.chapter_backtracking.permutations_i.cs#PermutationsI", "start_line": 35, "end_line": 39, "signature": "PermutationsI(int[] nums)", "original_code": "static List<List<int>> PermutationsI(int[] nums) {\n        List<List<int>> res = new();\n        Backtrack(new List<int>(), nums, new bool[nums.Length], res);\n        return res;\n    }", "doc_comment": "/* \u5168\u6392\u5217 I */"}, "code_tokens": ["PermutationsI", "static", "List", "(", ")", "{", "}", "<", ">", "nums", ";", ";", "return", "res", ";", "List", "List", "res", "=", "Backtrack", "<", ">", "int", "[", "]", "<", ">", "new", "(", ",", "nums", ",", ",", "res", ")", "int", "List", "", "(", ")", "new", "new", "bool", "<", ">", "List", "(", ")", "[", "]", "int", "<", ">", "nums", ".", "Length", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 93, "ast_depth": 11, "n_identifiers": 5, "vocab_size": 24}}
{"dataset_split": "train", "example_id": "hello-algo@5392afd:codes/csharp/chapter_backtracking/permutations_i.cs#42-52", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5392afd44b76a0c08c061ab5fb4b02d34d7704b0", "license": null}, "file": {"path": "codes/csharp/chapter_backtracking/permutations_i.cs", "language": "Java"}, "method": {"name": "Test", "qualified_name": "codes.csharp.chapter_backtracking.permutations_i.cs#Test", "start_line": 42, "end_line": 52, "signature": "Test()", "original_code": "public void Test() {\n        int[] nums = { 1, 2, 3 };\n\n        List<List<int>> res = PermutationsI(nums);\n\n        Console.WriteLine(\"\u8f93\u5165\u6570\u7ec4 nums = \" + string.Join(\", \", nums));\n        Console.WriteLine(\"\u6240\u6709\u6392\u5217 res = \");\n        foreach (List<int> permutation in res) {\n            PrintUtil.PrintList(permutation);\n        }\n    }", "doc_comment": ""}, "code_tokens": ["void", "Test", "public", "(", ")", "{", "}", ";", ";", ";", ";", "", "{", "}", "nums", "=", "List", "res", "=", "Console", ".", "WriteLine", "Console", ".", "WriteLine", "foreach", ";", "int", "[", "]", "{", "1", ",", "2", ",", "3", "}", "<", ">", "PermutationsI", "(", ")", "(", ")", "(", "res", ")", "PrintUtil", ".", "PrintList", "List", "(", "nums", ")", "+", "\"", "\u6240\u6709\u6392\u5217 res = ", "\"", "permutation", "in", "(", "permutation", ")", "<", ">", "\"", "\u8f93\u5165\u6570\u7ec4 nums = ", "\"", "string", ".", "Join", "List", "int", "(", ",", "nums", ")", "<", ">", "\"", ", ", "\"", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 126, "ast_depth": 11, "n_identifiers": 13, "vocab_size": 38}}
{"dataset_split": "train", "example_id": "hello-algo@5392afd:codes/dart/chapter_backtracking/permutations_i.dart#8-34", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5392afd44b76a0c08c061ab5fb4b02d34d7704b0", "license": null}, "file": {"path": "codes/dart/chapter_backtracking/permutations_i.dart", "language": "Java"}, "method": {"name": "backtrack", "qualified_name": "codes.dart.chapter_backtracking.permutations_i.dart#backtrack", "start_line": 8, "end_line": 34, "signature": "backtrack(\n  List<int> state,\n  List<int> choices,\n  List<bool> selected,\n  List<List<int>> res,\n)", "original_code": "void backtrack(\n  List<int> state,\n  List<int> choices,\n  List<bool> selected,\n  List<List<int>> res,\n) {\n  // \u5f53\u72b6\u6001\u957f\u5ea6\u7b49\u4e8e\u5143\u7d20\u6570\u91cf\u65f6\uff0c\u8bb0\u5f55\u89e3\n  if (state.length == choices.length) {\n    res.add(List.from(state));\n    return;\n  }\n  // \u904d\u5386\u6240\u6709\u9009\u62e9\n  for (int i = 0; i < choices.length; i++) {\n    int choice = choices[i];\n    // \u526a\u679d\uff1a\u4e0d\u5141\u8bb8\u91cd\u590d\u9009\u62e9\u5143\u7d20\n    if (!selected[i]) {\n      // \u5c1d\u8bd5\uff1a\u505a\u51fa\u9009\u62e9\uff0c\u66f4\u65b0\u72b6\u6001\n      selected[i] = true;\n      state.add(choice);\n      // \u8fdb\u884c\u4e0b\u4e00\u8f6e\u9009\u62e9\n      backtrack(state, choices, selected, res);\n      // \u56de\u9000\uff1a\u64a4\u9500\u9009\u62e9\uff0c\u6062\u590d\u5230\u4e4b\u524d\u7684\u72b6\u6001\n      selected[i] = false;\n      state.removeLast();\n    }\n  }\n}", "doc_comment": "/* \u56de\u6eaf\u7b97\u6cd5\uff1a\u5168\u6392\u5217 I */"}, "code_tokens": ["void", "backtrack", "(", ",", ",", ",", ")", "{", "// \u5f53\u72b6\u6001\u957f\u5ea6\u7b49\u4e8e\u5143\u7d20\u6570\u91cf\u65f6\uff0c\u8bb0\u5f55\u89e3", "// \u904d\u5386\u6240\u6709\u9009\u62e9", "}", "state", "choices", "selected", "res", ",", "if", "for", "(", ";", ")", "List", "List", "List", "List", "(", ")", "{", "}", ";", "i", "<", "i", "++", "{", "// \u526a\u679d\uff1a\u4e0d\u5141\u8bb8\u91cd\u590d\u9009\u62e9\u5143\u7d20", "}", "<", ">", "<", ">", "<", "bool", ">", "<", ">", "==", ";", "return", ";", "int", "i", "=", "0", "choices", ".", "length", ";", "if", "int", "int", "List", "state", ".", "length", "choices", ".", "length", "res", ".", "add", "int", "choice", "=", "(", ")", "{", "// \u5c1d\u8bd5\uff1a\u505a\u51fa\u9009\u62e9\uff0c\u66f4\u65b0\u72b6\u6001", "// \u8fdb\u884c\u4e0b\u4e00\u8f6e\u9009\u62e9", "// \u56de\u9000\uff1a\u64a4\u9500\u9009\u62e9\uff0c\u6062\u590d\u5230\u4e4b\u524d\u7684\u72b6\u6001", "}", "<", ">", "(", ")", "choices", "[", "i", "]", "!", ";", ";", ";", ";", ";", "int", "List", ".", "from", "selected", "[", "i", "]", "=", "true", "state", ".", "add", "backtrack", "=", "false", "state", ".", "removeLast", "(", "state", ")", "selected", "[", "i", "]", "(", "choice", ")", "(", "state", ",", "choices", ",", "selected", ",", "res", ")", "selected", "[", "i", "]", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 205, "ast_depth": 11, "n_identifiers": 12, "vocab_size": 42}}
{"dataset_split": "train", "example_id": "hello-algo@5392afd:codes/dart/chapter_backtracking/permutations_i.dart#37-41", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5392afd44b76a0c08c061ab5fb4b02d34d7704b0", "license": null}, "file": {"path": "codes/dart/chapter_backtracking/permutations_i.dart", "language": "Java"}, "method": {"name": "permutationsI", "qualified_name": "codes.dart.chapter_backtracking.permutations_i.dart#permutationsI", "start_line": 37, "end_line": 41, "signature": "permutationsI(List<int> nums)", "original_code": "List<List<int>> permutationsI(List<int> nums) {\n  List<List<int>> res = [];\n  backtrack([], nums, List.filled(nums.length, false), res);\n  return res;\n}", "doc_comment": "/* \u5168\u6392\u5217 I */"}, "code_tokens": ["permutationsI", "List", "(", ")", "{", "}", "<", ">", "nums", ";", ",", "", ";", "return", "res", ";", "List", "List", "List", "res", "=", "backtrack", ",", "nums", "List", ".", "filled", "(", "false", ")", ",", "res", ")", "<", ">", "<", ">", "<", ">", "", "(", "[", "]", ",", "int", "int", "List", "[", "]", "nums", ".", "length", "<", ">", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 92, "ast_depth": 10, "n_identifiers": 5, "vocab_size": 23}}
{"dataset_split": "train", "example_id": "hello-algo@5392afd:codes/dart/chapter_backtracking/permutations_i.dart#44-51", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5392afd44b76a0c08c061ab5fb4b02d34d7704b0", "license": null}, "file": {"path": "codes/dart/chapter_backtracking/permutations_i.dart", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.dart.chapter_backtracking.permutations_i.dart#main", "start_line": 44, "end_line": 51, "signature": "main()", "original_code": "void main() {\n  List<int> nums = [1, 2, 3];\n\n  List<List<int>> res = permutationsI(nums);\n\n  print(\"\u8f93\u5165\u6570\u7ec4 nums = $nums\");\n  print(\"\u6240\u6709\u6392\u5217 res = $res\");\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["void", "main", "(", ")", "{", "}", ";", ";", ";", ";", "List", "nums", "=", "1", ",", "2", ",", "3", "]", "List", "res", "=", "print", "print", "<", ">", "[", "<", ">", "permutationsI", "(", ")", "(", ")", "int", "List", "(", "nums", ")", "\"", "\u8f93\u5165\u6570\u7ec4 nums = $nums", "\"", "\"", "\u6240\u6709\u6392\u5217 res = $res", "\"", "<", ">", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 76, "ast_depth": 10, "n_identifiers": 5, "vocab_size": 25}}
{"dataset_split": "train", "example_id": "hello-algo@5392afd:codes/go/chapter_backtracking/permutations_i.go#8-29", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5392afd44b76a0c08c061ab5fb4b02d34d7704b0", "license": null}, "file": {"path": "codes/go/chapter_backtracking/permutations_i.go", "language": "Java"}, "method": {"name": "backtrackI", "qualified_name": "codes.go.chapter_backtracking.permutations_i.go#backtrackI", "start_line": 8, "end_line": 29, "signature": "backtrackI(state *[]int, choices *[]int, selected *[]bool, res *[][]int)", "original_code": "func backtrackI(state *[]int, choices *[]int, selected *[]bool, res *[][]int) {\n\t// \u5f53\u72b6\u6001\u957f\u5ea6\u7b49\u4e8e\u5143\u7d20\u6570\u91cf\u65f6\uff0c\u8bb0\u5f55\u89e3\n\tif len(*state) == len(*choices) {\n\t\tnewState := append([]int{}, *state...)\n\t\t*res = append(*res, newState)\n\t}\n\t// \u904d\u5386\u6240\u6709\u9009\u62e9\n\tfor i := 0; i < len(*choices); i++ {\n\t\tchoice := (*choices)[i]\n\t\t// \u526a\u679d\uff1a\u4e0d\u5141\u8bb8\u91cd\u590d\u9009\u62e9\u5143\u7d20\n\t\tif !(*selected)[i] {\n\t\t\t// \u5c1d\u8bd5\uff1a\u505a\u51fa\u9009\u62e9\uff0c\u66f4\u65b0\u72b6\u6001\n\t\t\t(*selected)[i] = true\n\t\t\t*state = append(*state, choice)\n\t\t\t// \u8fdb\u884c\u4e0b\u4e00\u8f6e\u9009\u62e9\n\t\t\tbacktrackI(state, choices, selected, res)\n\t\t\t// \u56de\u9000\uff1a\u64a4\u9500\u9009\u62e9\uff0c\u6062\u590d\u5230\u4e4b\u524d\u7684\u72b6\u6001\n\t\t\t(*selected)[i] = false\n\t\t\t*state = (*state)[:len(*state)-1]\n\t\t}\n\t}\n}", "doc_comment": ""}, "code_tokens": ["func", "backtrackI", "(", ",", ",", ",", ")", "{", "// \u5f53\u72b6\u6001\u957f\u5ea6\u7b49\u4e8e\u5143\u7d20\u6570\u91cf\u65f6\uff0c\u8bb0\u5f55\u89e3", "// \u904d\u5386\u6240\u6709\u9009\u62e9", "}", "int", "int", "bool", "int", "if", "{", "}", "for", ";", ";", "", "{", "}", "state", "choices", "selected", "res", "==", "", "i", "=", "0", "i", "<", "i", "++", ")", "[", "i", "]", "{", "// \u5c1d\u8bd5\uff1a\u505a\u51fa\u9009\u62e9\uff0c\u66f4\u65b0\u72b6\u6001", "}", "*", "[", "]", "*", "[", "]", "*", "[", "]", "*", "[", "]", "[", "]", "len", "len", "*", ":", "len", "choice", "=", "", "(", "state", ")", "(", "choices", ")", "newState", "*", "state", "...", ")", "res", "=", "(", "choices", ")", ":", "// \u526a\u679d\uff1a\u4e0d\u5141\u8bb8\u91cd\u590d\u9009\u62e9\u5143\u7d20", "*", "selected", "*", "*", "*", ":", "=", "int", "{", "}", ",", "append", "*", "[", "i", "]", "if", "!", "(", "=", ")", "[", "i", "]", "=", "false", "state", "=", "append", "(", "res", ",", "newState", ")", "(", "choices", ")", "[", "i", "]", "true", "*", "[", "]", "(", "[", "]", "*", "*", "(", "selected", ")", "state", "=", "// \u8fdb\u884c\u4e0b\u4e00\u8f6e\u9009\u62e9", "(", "state", ")", ":", "-", "1", "*", "// \u56de\u9000\uff1a\u64a4\u9500\u9009\u62e9\uff0c\u6062\u590d\u5230\u4e4b\u524d\u7684\u72b6\u6001", "*", "selected", "*", "len", "append", "backtrackI", "(", "(", "state", ")", "(", "state", ",", "choice", ")", "(", "state", ",", "choices", ",", "selected", ",", "res", ")", "*", "*"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 261, "ast_depth": 15, "n_identifiers": 13, "vocab_size": 43}}
{"dataset_split": "train", "example_id": "hello-algo@5392afd:codes/go/chapter_backtracking/permutations_i.go#32-38", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5392afd44b76a0c08c061ab5fb4b02d34d7704b0", "license": null}, "file": {"path": "codes/go/chapter_backtracking/permutations_i.go", "language": "Java"}, "method": {"name": "permutationsI", "qualified_name": "codes.go.chapter_backtracking.permutations_i.go#permutationsI", "start_line": 32, "end_line": 38, "signature": "permutationsI(nums []int)", "original_code": "func permutationsI(nums []int) [][]int {\n\tres := make([][]int, 0)\n\tstate := make([]int, 0)\n\tselected := make([]bool, len(nums))\n\tbacktrackI(&state, &nums, &selected, &res)\n\treturn res\n}", "doc_comment": "/* \u5168\u6392\u5217 I */"}, "code_tokens": ["func", "permutationsI", "(", ")", "[", "]", "[", "]", "int", "{", "}", "int", ":", "=", "res", "nums", "res", "=", "state", ",", ",", "", ")", "return", "[", "]", ":", "int", ",", "0", ")", "make", "int", "0", ")", "selected", ":", "=", "bool", "len", "(", "nums", ")", "backtrackI", "make", "(", "[", "]", "make", "(", ")", "(", "[", "]", "[", "]", "(", "[", "]", "&", "&", "res", "&", "selected", ",", "state", "&", "nums", ",", ","], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 109, "ast_depth": 12, "n_identifiers": 10, "vocab_size": 24}}
{"dataset_split": "train", "example_id": "hello-algo@5392afd:codes/java/chapter_backtracking/permutations_i.java#13-34", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5392afd44b76a0c08c061ab5fb4b02d34d7704b0", "license": null}, "file": {"path": "codes/java/chapter_backtracking/permutations_i.java", "language": "Java"}, "method": {"name": "backtrack", "qualified_name": "codes.java.chapter_backtracking.permutations_i#backtrack", "start_line": 13, "end_line": 34, "signature": "backtrack(List<Integer> state, int[] choices, boolean[] selected, List<List<Integer>> res)", "original_code": "public static void backtrack(List<Integer> state, int[] choices, boolean[] selected, List<List<Integer>> res) {\n        // \u5f53\u72b6\u6001\u957f\u5ea6\u7b49\u4e8e\u5143\u7d20\u6570\u91cf\u65f6\uff0c\u8bb0\u5f55\u89e3\n        if (state.size() == choices.length) {\n            res.add(new ArrayList<Integer>(state));\n            return;\n        }\n        // \u904d\u5386\u6240\u6709\u9009\u62e9\n        for (int i = 0; i < choices.length; i++) {\n            int choice = choices[i];\n            // \u526a\u679d\uff1a\u4e0d\u5141\u8bb8\u91cd\u590d\u9009\u62e9\u5143\u7d20\n            if (!selected[i]) {\n                // \u5c1d\u8bd5\uff1a\u505a\u51fa\u9009\u62e9\uff0c\u66f4\u65b0\u72b6\u6001\n                selected[i] = true;\n                state.add(choice);\n                // \u8fdb\u884c\u4e0b\u4e00\u8f6e\u9009\u62e9\n                backtrack(state, choices, selected, res);\n                // \u56de\u9000\uff1a\u64a4\u9500\u9009\u62e9\uff0c\u6062\u590d\u5230\u4e4b\u524d\u7684\u72b6\u6001\n                selected[i] = false;\n                state.remove(state.size() - 1);\n            }\n        }\n    }", "doc_comment": "/* \u56de\u6eaf\u7b97\u6cd5\uff1a\u5168\u6392\u5217 I */"}, "code_tokens": ["void", "backtrack", "public", "static", "(", ",", ",", ",", ")", "{", "// \u5f53\u72b6\u6001\u957f\u5ea6\u7b49\u4e8e\u5143\u7d20\u6570\u91cf\u65f6\uff0c\u8bb0\u5f55\u89e3", "// \u904d\u5386\u6240\u6709\u9009\u62e9", "}", "state", "choices", "selected", "res", "if", "for", "(", ";", ")", "List", "boolean", "List", "(", ")", "{", "}", ";", "i", "<", "i", "++", "{", "// \u526a\u679d\uff1a\u4e0d\u5141\u8bb8\u91cd\u590d\u9009\u62e9\u5143\u7d20", "}", "<", "Integer", ">", "int", "[", "]", "[", "]", "<", ">", "==", ";", "return", ";", "int", "i", "=", "0", "choices", ".", "length", ";", "if", "List", "state", ".", "size", "choices", ".", "length", "res", ".", "add", "int", "choice", "=", "(", ")", "{", "// \u5c1d\u8bd5\uff1a\u505a\u51fa\u9009\u62e9\uff0c\u66f4\u65b0\u72b6\u6001", "// \u8fdb\u884c\u4e0b\u4e00\u8f6e\u9009\u62e9", "// \u56de\u9000\uff1a\u64a4\u9500\u9009\u62e9\uff0c\u6062\u590d\u5230\u4e4b\u524d\u7684\u72b6\u6001", "}", "<", "Integer", ">", "(", ")", "(", ")", "choices", "[", "i", "]", "!", ";", ";", ";", ";", ";", "new", "selected", "[", "i", "]", "=", "true", "state", ".", "add", "backtrack", "=", "false", "state", ".", "remove", "ArrayList", "(", "state", ")", "selected", "[", "i", "]", "(", "choice", ")", "(", "state", ",", "choices", ",", "selected", ",", "res", ")", "selected", "[", "i", "]", "(", ")", "<", "Integer", ">", "-", "1", "state", ".", "size", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 219, "ast_depth": 14, "n_identifiers": 11, "vocab_size": 49}}
{"dataset_split": "train", "example_id": "hello-algo@5392afd:codes/java/chapter_backtracking/permutations_i.java#37-41", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5392afd44b76a0c08c061ab5fb4b02d34d7704b0", "license": null}, "file": {"path": "codes/java/chapter_backtracking/permutations_i.java", "language": "Java"}, "method": {"name": "permutationsI", "qualified_name": "codes.java.chapter_backtracking.permutations_i#permutationsI", "start_line": 37, "end_line": 41, "signature": "permutationsI(int[] nums)", "original_code": "static List<List<Integer>> permutationsI(int[] nums) {\n        List<List<Integer>> res = new ArrayList<List<Integer>>();\n        backtrack(new ArrayList<Integer>(), nums, new boolean[nums.length], res);\n        return res;\n    }", "doc_comment": "/* \u5168\u6392\u5217 I */"}, "code_tokens": ["permutationsI", "static", "List", "(", ")", "{", "}", "<", ">", "nums", ";", ";", "return", "res", ";", "List", "List", "res", "=", "backtrack", "<", "Integer", ">", "int", "[", "]", "<", ">", "new", "(", ",", "nums", ",", ",", "res", ")", "List", "ArrayList", "(", ")", "new", "new", "boolean", "<", "Integer", ">", "<", ">", "ArrayList", "(", ")", "[", "]", "List", "<", "Integer", ">", "nums", ".", "length", "<", "Integer", ">"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 99, "ast_depth": 11, "n_identifiers": 5, "vocab_size": 25}}
{"dataset_split": "train", "example_id": "hello-algo@5392afd:codes/java/chapter_backtracking/permutations_i.java#43-50", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5392afd44b76a0c08c061ab5fb4b02d34d7704b0", "license": null}, "file": {"path": "codes/java/chapter_backtracking/permutations_i.java", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.java.chapter_backtracking.permutations_i#main", "start_line": 43, "end_line": 50, "signature": "main(String[] args)", "original_code": "public static void main(String[] args) {\n        int[] nums = { 1, 2, 3 };\n\n        List<List<Integer>> res = permutationsI(nums);\n\n        System.out.println(\"\u8f93\u5165\u6570\u7ec4 nums = \" + Arrays.toString(nums));\n        System.out.println(\"\u6240\u6709\u6392\u5217 res = \" + res);\n    }", "doc_comment": ""}, "code_tokens": ["void", "main", "public", "static", "(", ")", "{", "}", "args", ";", ";", ";", ";", "String", "nums", "=", "List", "res", "=", ".", "println", ".", "println", "[", "]", "int", "[", "]", "{", "1", ",", "2", ",", "3", "}", "<", ">", "permutationsI", "System", ".", "out", "(", ")", "System", ".", "out", "(", ")", "List", "(", "nums", ")", "+", "+", "res", "<", "Integer", ">", "\"", "\u8f93\u5165\u6570\u7ec4 nums = ", "\"", "Arrays", ".", "toString", "\"", "\u6240\u6709\u6392\u5217 res = ", "\"", "(", "nums", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 106, "ast_depth": 10, "n_identifiers": 10, "vocab_size": 36}}
{"dataset_split": "train", "example_id": "hello-algo@5392afd:codes/javascript/chapter_backtracking/permutations_i.js#31-35", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5392afd44b76a0c08c061ab5fb4b02d34d7704b0", "license": null}, "file": {"path": "codes/javascript/chapter_backtracking/permutations_i.js", "language": "Java"}, "method": {"name": "permutationsI", "qualified_name": "codes.javascript.chapter_backtracking.permutations_i.js#permutationsI", "start_line": 31, "end_line": 35, "signature": "permutationsI(nums)", "original_code": "function permutationsI(nums) {\n    const res = [];\n    backtrack([], nums, Array(nums.length).fill(false), res);\n    return res;\n}", "doc_comment": "/* \u5168\u6392\u5217 I */"}, "code_tokens": ["function", "permutationsI", "(", ")", "{", "}", "nums", "const", ";", ",", "", ";", "return", "res", ";", "res", "=", "backtrack", ",", "nums", "Array", ".", "fill", ",", "res", ")", "", "(", "[", "]", "(", ")", "(", "false", ")", "[", "]", "nums", ".", "length"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 64, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 22}}
{"dataset_split": "train", "example_id": "hello-algo@5392afd:codes/rust/chapter_backtracking/permutations_i.rs#8-29", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5392afd44b76a0c08c061ab5fb4b02d34d7704b0", "license": null}, "file": {"path": "codes/rust/chapter_backtracking/permutations_i.rs", "language": "Java"}, "method": {"name": "backtrack", "qualified_name": "codes.rust.chapter_backtracking.permutations_i.rs#backtrack", "start_line": 8, "end_line": 29, "signature": "backtrack(mut state: Vec<i32>, choices: &[i32], selected: &mut [bool], res: &mut Vec<Vec<i32>>)", "original_code": "fn backtrack(mut state: Vec<i32>, choices: &[i32], selected: &mut [bool], res: &mut Vec<Vec<i32>>) {\n    // \u5f53\u72b6\u6001\u957f\u5ea6\u7b49\u4e8e\u5143\u7d20\u6570\u91cf\u65f6\uff0c\u8bb0\u5f55\u89e3\n    if state.len() == choices.len() {\n        res.push(state);\n        return;\n    }\n    // \u904d\u5386\u6240\u6709\u9009\u62e9\n    for i in 0..choices.len() {\n        let choice = choices[i];\n        // \u526a\u679d\uff1a\u4e0d\u5141\u8bb8\u91cd\u590d\u9009\u62e9\u5143\u7d20\n        if !selected[i] {\n            // \u5c1d\u8bd5\uff1a\u505a\u51fa\u9009\u62e9\uff0c\u66f4\u65b0\u72b6\u6001\n            selected[i] = true;\n            state.push(choice);\n            // \u8fdb\u884c\u4e0b\u4e00\u8f6e\u9009\u62e9\n            backtrack(state.clone(), choices, selected, res);\n            // \u56de\u9000\uff1a\u64a4\u9500\u9009\u62e9\uff0c\u6062\u590d\u5230\u4e4b\u524d\u7684\u72b6\u6001\n            selected[i] = false;\n            state.remove(state.len() - 1);\n        }\n    }\n}", "doc_comment": "/* \u56de\u6eaf\u7b97\u6cd5\uff1a\u5168\u6392\u5217 I */"}, "code_tokens": ["fn", "backtrack", "(", ",", ",", ")", "{", "// \u5f53\u72b6\u6001\u957f\u5ea6\u7b49\u4e8e\u5143\u7d20\u6570\u91cf\u65f6\uff0c\u8bb0\u5f55\u89e3", "// \u904d\u5386\u6240\u6709\u9009\u62e9", "}", "mut", "state", ":", "Vec", "<", "i32", ">", ",", "selected", "mut", "res", "i32", ">>", "if", "{", "}", "for", "i", "", "", "{", "// \u526a\u679d\uff1a\u4e0d\u5141\u8bb8\u91cd\u590d\u9009\u62e9\u5143\u7d20", "}", "choices", ":", "&", "[", "]", ":", "&", "mut", "Vec", "<", "Vec", "<", "==", ";", "return", ";", "in", ".", "len", "let", ";", "if", "", "{", "// \u5c1d\u8bd5\uff1a\u505a\u51fa\u9009\u62e9\uff0c\u66f4\u65b0\u72b6\u6001", "// \u8fdb\u884c\u4e0b\u4e00\u8f6e\u9009\u62e9", "// \u56de\u9000\uff1a\u64a4\u9500\u9009\u62e9\uff0c\u6062\u590d\u5230\u4e4b\u524d\u7684\u72b6\u6001", "}", ":", "&", "[", "]", "bool", "state", ".", "len", "choices", ".", "len", "res", ".", "push", "0.", ".", "choices", "(", ")", "choice", "=", "!", ";", ";", ";", ";", ";", "i32", "(", ")", "(", ")", "(", "state", ")", "choices", "[", "i", "]", "selected", "[", "i", "]", "=", "true", "state", ".", "push", "backtrack", "=", "false", "state", ".", "remove", "selected", "[", "i", "]", "(", "choice", ")", "(", ",", "choices", ",", "selected", ",", "res", ")", "selected", "[", "i", "]", "(", ")", "state", ".", "clone", "-", "1", "(", ")", "state", ".", "len", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 212, "ast_depth": 12, "n_identifiers": 16, "vocab_size": 50}}
{"dataset_split": "train", "example_id": "hello-algo@5392afd:codes/rust/chapter_backtracking/permutations_i.rs#32-36", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5392afd44b76a0c08c061ab5fb4b02d34d7704b0", "license": null}, "file": {"path": "codes/rust/chapter_backtracking/permutations_i.rs", "language": "Java"}, "method": {"name": "permutations_i", "qualified_name": "codes.rust.chapter_backtracking.permutations_i.rs#permutations_i", "start_line": 32, "end_line": 36, "signature": "permutations_i(nums: &mut [i32])", "original_code": "fn permutations_i(nums: &mut [i32]) -> Vec<Vec<i32>> {\n    let mut res = Vec::new(); // \u72b6\u6001\uff08\u5b50\u96c6\uff09\n    backtrack(Vec::new(), nums, &mut vec![false; nums.len()], &mut res);\n    res\n}", "doc_comment": "/* \u5168\u6392\u5217 I */"}, "code_tokens": ["fn", "permutations_i", "(", ")", "->", "Vec", "<", "Vec", "<", "i32", ">>", "{", "// \u72b6\u6001\uff08\u5b50\u96c6\uff09", "}", "nums", "mut", "let", ";", ";", ";", "res", "", ":", "&", "[", "]", "mut", "res", "=", "backtrack", ",", "nums", ",", "&", "mut", "[", "false", "nums", ".", "len", "]", ",", "&", "mut", "res", ")", "i32", "(", ")", "(", ")", "vec", "!", "(", ")", "Vec", "::", "new", "Vec", "::", "new", "("], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 89, "ast_depth": 8, "n_identifiers": 10, "vocab_size": 32}}
{"dataset_split": "train", "example_id": "hello-algo@5392afd:codes/rust/chapter_backtracking/permutations_i.rs#39-46", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5392afd44b76a0c08c061ab5fb4b02d34d7704b0", "license": null}, "file": {"path": "codes/rust/chapter_backtracking/permutations_i.rs", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.rust.chapter_backtracking.permutations_i.rs#main", "start_line": 39, "end_line": 46, "signature": "main()", "original_code": "pub fn main() {\n    let mut nums = [ 1, 2, 3 ];\n\n    let res = permutations_i(&mut nums);\n\n    println!(\"\u8f93\u5165\u6570\u7ec4 nums = {:?}\", &nums);\n    println!(\"\u6240\u6709\u6392\u5217 res = {:?}\", &res);\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["pub", "main", "fn", "(", ")", "{", "}", "let", ";", "let", ";", ";", ";", "mut", "nums", "=", "1", ",", "2", ",", "3", "]", "res", "=", "println", "println", "[", "permutations_i", "!", "(", ")", "!", "(", ")", "(", ")", "&", "nums", "&", "res", "&", "mut", "nums", "\"", "\u8f93\u5165\u6570\u7ec4 nums = {:?}", "\"", ",", "\"", "\u6240\u6709\u6392\u5217 res = {:?}", "\"", ","], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 80, "ast_depth": 9, "n_identifiers": 7, "vocab_size": 26}}
{"dataset_split": "train", "example_id": "hello-algo@5392afd:codes/swift/chapter_backtracking/permutations_i.swift#8-50", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5392afd44b76a0c08c061ab5fb4b02d34d7704b0", "license": null}, "file": {"path": "codes/swift/chapter_backtracking/permutations_i.swift", "language": "Java"}, "method": {"name": "backtrack", "qualified_name": "codes.swift.chapter_backtracking.permutations_i.swift#backtrack", "start_line": 8, "end_line": 50, "signature": "backtrack(state: inout [Int], choices: [Int], selected: inout [Bool], res: inout [[Int]])", "original_code": "func backtrack(state: inout [Int], choices: [Int], selected: inout [Bool], res: inout [[Int]]) {\n    // \u5f53\u72b6\u6001\u957f\u5ea6\u7b49\u4e8e\u5143\u7d20\u6570\u91cf\u65f6\uff0c\u8bb0\u5f55\u89e3\n    if state.count == choices.count {\n        res.append(state)\n        return\n    }\n    // \u904d\u5386\u6240\u6709\u9009\u62e9\n    for (i, choice) in choices.enumerated() {\n        // \u526a\u679d\uff1a\u4e0d\u5141\u8bb8\u91cd\u590d\u9009\u62e9\u5143\u7d20\n        if !selected[i] {\n            // \u5c1d\u8bd5\uff1a\u505a\u51fa\u9009\u62e9\uff0c\u66f4\u65b0\u72b6\u6001\n            selected[i] = true\n            state.append(choice)\n            // \u8fdb\u884c\u4e0b\u4e00\u8f6e\u9009\u62e9\n            backtrack(state: &state, choices: choices, selected: &selected, res: &res)\n            // \u56de\u9000\uff1a\u64a4\u9500\u9009\u62e9\uff0c\u6062\u590d\u5230\u4e4b\u524d\u7684\u72b6\u6001\n            selected[i] = false\n            state.removeLast()\n        }\n    }\n}\n\n/* \u5168\u6392\u5217 I */\nfunc permutationsI(nums: [Int]) -> [[Int]] {\n    var state: [Int] = []\n    var selected = Array(repeating: false, count: nums.count)\n    var res: [[Int]] = []\n    backtrack(state: &state, choices: nums, selected: &selected, res: &res)\n    return res\n}\n\n@main\nenum PermutationsI {\n    /* Driver Code */\n    static func main() {\n        let nums = [1, 2, 3]\n\n        let res = permutationsI(nums: nums)\n\n        print(\"\u8f93\u5165\u6570\u7ec4 nums = \\(nums)\")\n        print(\"\u6240\u6709\u6392\u5217 res = \\(res)\")\n    }\n}", "doc_comment": "/* \u56de\u6eaf\u7b97\u6cd5\uff1a\u5168\u6392\u5217 I */"}, "code_tokens": ["func", "backtrack", "(", ",", ",", ")", "{", "// \u5f53\u72b6\u6001\u957f\u5ea6\u7b49\u4e8e\u5143\u7d20\u6570\u91cf\u65f6\uff0c\u8bb0\u5f55\u89e3", "}", "state", "inout", "selected", ":", "inout", "[", "Bool", "]", "res", "Int", "]", "]", "if", "==", "{", "// \u904d\u5386\u6240\u6709\u9009\u62e9", "}", ":", "[", "]", "choices", ",", ":", "inout", "[", "[", "state", ".", "count", "choices", ".", "count", "return", "}", "for", "(", "i", ",", ",", "2", ",", "Int", ":", "[", "]", "res", ".", "append", "choice", ")", "in", "{", "// \u526a\u679d\uff1a\u4e0d\u5141\u8bb8\u91cd\u590d\u9009\u62e9\u5143\u7d20", "if", "}", "}", "}", "/* \u5168\u6392\u5217 I */", "func", ")", "->", "[", "[", "Int", "]", "]", "{", "var", "}", "PermutationsI", "{", "/* Driver Code */", "static", "func", "main", "{", "let", "nums", "=", "1", "3", "]", "let", "res", "=", "Int", "(", "state", ")", "choices", ".", "enumerated", "!", "// \u5c1d\u8bd5\uff1a\u505a\u51fa\u9009\u62e9\uff0c\u66f4\u65b0\u72b6\u6001", "permutationsI", "[", "Int", "]", "selected", "=", "enum", "(", ")", "[", "print", "(", ")", "{", "=", "// \u8fdb\u884c\u4e0b\u4e00\u8f6e\u9009\u62e9", "(", "nums", ":", "var", "=", "[", "]", "=", "res", "@", "main", "permutationsI", "print", "(", ")", "selected", "[", "i", "]", "selected", "[", "i", "]", "true", "=", "state", ":", "[", "]", "[", "]", "return", "(", "nums", ")", "(", ")", "\"", "\u6240\u6709\u6392\u5217 res = ", "\\(", "res)", "\"", "state", ".", "append", "// \u56de\u9000\uff1a\u64a4\u9500\u9009\u62e9\uff0c\u6062\u590d\u5230\u4e4b\u524d\u7684\u72b6\u6001", "[", "i", "]", "false", "state", ".", "removeLast", "Int", "Array", "var", "res", ":", "", "[", "Int", "]", "", "backtrack", "nums", ":", "\"", "\u8f93\u5165\u6570\u7ec4 nums = ", "\\(", "nums)", "\"", "(", "choice", ")", "backtrack", "selected", "(", ")", "(", ")", "[", "]", "(", ",", "choices", ",", "selected", ",", "res", ")", "(", ",", "choices", ",", "selected", ",", "res", ")", "repeating", ",", "count", ":", "nums", ".", "count", "state", "&", "state", ":", "nums", ":", "&", "selected", ":", "&", "res", "state", "&", "state", ":", "choices", ":", "&", "selected", ":", "&", "res", ":", "false", ":", ":"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 346, "ast_depth": 15, "n_identifiers": 26, "vocab_size": 65}}
{"dataset_split": "train", "example_id": "hello-algo@5392afd:codes/typescript/chapter_backtracking/permutations_i.ts#8-33", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5392afd44b76a0c08c061ab5fb4b02d34d7704b0", "license": null}, "file": {"path": "codes/typescript/chapter_backtracking/permutations_i.ts", "language": "Java"}, "method": {"name": "backtrack", "qualified_name": "codes.typescript.chapter_backtracking.permutations_i.ts#backtrack", "start_line": 8, "end_line": 33, "signature": "backtrack(\n    state: number[],\n    choices: number[],\n    selected: boolean[],\n    res: number[][]\n)", "original_code": "function backtrack(\n    state: number[],\n    choices: number[],\n    selected: boolean[],\n    res: number[][]\n): void {\n    // \u5f53\u72b6\u6001\u957f\u5ea6\u7b49\u4e8e\u5143\u7d20\u6570\u91cf\u65f6\uff0c\u8bb0\u5f55\u89e3\n    if (state.length === choices.length) {\n        res.push([...state]);\n        return;\n    }\n    // \u904d\u5386\u6240\u6709\u9009\u62e9\n    choices.forEach((choice, i) => {\n        // \u526a\u679d\uff1a\u4e0d\u5141\u8bb8\u91cd\u590d\u9009\u62e9\u5143\u7d20\n        if (!selected[i]) {\n            // \u5c1d\u8bd5\uff1a\u505a\u51fa\u9009\u62e9\uff0c\u66f4\u65b0\u72b6\u6001\n            selected[i] = true;\n            state.push(choice);\n            // \u8fdb\u884c\u4e0b\u4e00\u8f6e\u9009\u62e9\n            backtrack(state, choices, selected, res);\n            // \u56de\u9000\uff1a\u64a4\u9500\u9009\u62e9\uff0c\u6062\u590d\u5230\u4e4b\u524d\u7684\u72b6\u6001\n            selected[i] = false;\n            state.pop();\n        }\n    });\n}", "doc_comment": "/* \u56de\u6eaf\u7b97\u6cd5\uff1a\u5168\u6392\u5217 I */"}, "code_tokens": ["function", "backtrack", "(", ",", ",", ")", ":", "void", "{", "// \u5f53\u72b6\u6001\u957f\u5ea6\u7b49\u4e8e\u5143\u7d20\u6570\u91cf\u65f6\uff0c\u8bb0\u5f55\u89e3", "// \u904d\u5386\u6240\u6709\u9009\u62e9", ";", "}", "state", "number", "choices", "number", "selected", ":", "res", ":", "number", "[", "]", "[", "]", "if", "choices", ".", "forEach", "(", "=", ">", "{", "// \u526a\u679d\uff1a\u4e0d\u5141\u8bb8\u91cd\u590d\u9009\u62e9\u5143\u7d20", "}", ")", ":", "[", "]", ":", "[", "]", "boolean", ",", "(", ")", "{", "}", "(", "choice", ",", "i", ")", "if", "[", "]", "==", ";", "return", ";", "(", ")", "{", "// \u5c1d\u8bd5\uff1a\u505a\u51fa\u9009\u62e9\uff0c\u66f4\u65b0\u72b6\u6001", "// \u8fdb\u884c\u4e0b\u4e00\u8f6e\u9009\u62e9", "// \u56de\u9000\uff1a\u64a4\u9500\u9009\u62e9\uff0c\u6062\u590d\u5230\u4e4b\u524d\u7684\u72b6\u6001", "}", "state", ".", "length", "=", "choices", ".", "length", "res", ".", "push", "!", ";", ";", ";", ";", ";", "(", "state", ")", "selected", "[", "i", "]", "=", "true", "state", ".", "push", "backtrack", "=", "false", "state", ".", "pop", "[", "...", "]", "selected", "[", "i", "]", "(", "choice", ")", "(", "state", ",", "choices", ",", "selected", ",", "res", ")", "selected", "[", "i", "]", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 181, "ast_depth": 10, "n_identifiers": 12, "vocab_size": 40}}
{"dataset_split": "train", "example_id": "hello-algo@5392afd:codes/typescript/chapter_backtracking/permutations_i.ts#36-40", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "5392afd44b76a0c08c061ab5fb4b02d34d7704b0", "license": null}, "file": {"path": "codes/typescript/chapter_backtracking/permutations_i.ts", "language": "Java"}, "method": {"name": "permutationsI", "qualified_name": "codes.typescript.chapter_backtracking.permutations_i.ts#permutationsI", "start_line": 36, "end_line": 40, "signature": "permutationsI(nums: number[])", "original_code": "function permutationsI(nums: number[]): number[][] {\n    const res: number[][] = [];\n    backtrack([], nums, Array(nums.length).fill(false), res);\n    return res;\n}", "doc_comment": "/* \u5168\u6392\u5217 I */"}, "code_tokens": ["function", "permutationsI", "(", ")", ":", "number", "[", "]", "[", "]", "{", "}", "nums", "number", ";", ",", "", ";", "return", "res", ";", ":", "[", "]", "const", "", "backtrack", ",", "nums", "Array", ".", "fill", ",", "res", ")", "res", ":", "number", "=", "[", "]", "(", "[", "]", "(", ")", "(", "false", ")", "[", "]", "[", "]", "nums", ".", "length"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 85, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 24}}
{"dataset_split": "train", "example_id": "hello-algo@7822bf9:codes/c/chapter_heap/my_heap.c#20-20", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "7822bf9cd4816577b1de02baad51db40642ce893", "license": null}, "file": {"path": "codes/c/chapter_heap/my_heap.c", "language": "Java"}, "method": {"name": "siftDown", "qualified_name": "codes.c.chapter_heap.my_heap.c#siftDown", "start_line": 20, "end_line": 20, "signature": "siftDown(MaxHeap *h, int i)", "original_code": "void siftDown(MaxHeap *h, int i);", "doc_comment": "// \u51fd\u6570\u58f0\u660e"}, "code_tokens": ["void", "siftDown", ";", "(", ",", ")", "MaxHeap", "h", "i", "*", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 18, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 11}}
{"dataset_split": "train", "example_id": "hello-algo@7822bf9:codes/c/chapter_heap/my_heap.c#21-21", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "7822bf9cd4816577b1de02baad51db40642ce893", "license": null}, "file": {"path": "codes/c/chapter_heap/my_heap.c", "language": "Java"}, "method": {"name": "siftUp", "qualified_name": "codes.c.chapter_heap.my_heap.c#siftUp", "start_line": 21, "end_line": 21, "signature": "siftUp(MaxHeap *h, int i)", "original_code": "void siftUp(MaxHeap *h, int i);", "doc_comment": ""}, "code_tokens": ["void", "siftUp", ";", "(", ",", ")", "MaxHeap", "h", "i", "*", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 18, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 11}}
{"dataset_split": "train", "example_id": "hello-algo@7822bf9:codes/c/chapter_heap/my_heap.c#22-22", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "7822bf9cd4816577b1de02baad51db40642ce893", "license": null}, "file": {"path": "codes/c/chapter_heap/my_heap.c", "language": "Java"}, "method": {"name": "parent", "qualified_name": "codes.c.chapter_heap.my_heap.c#parent", "start_line": 22, "end_line": 22, "signature": "parent(MaxHeap *h, int i)", "original_code": "int parent(MaxHeap *h, int i);", "doc_comment": ""}, "code_tokens": ["parent", ";", "int", "(", ",", ")", "MaxHeap", "h", "i", "*", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 19, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 10}}
{"dataset_split": "train", "example_id": "hello-algo@7822bf9:codes/c/chapter_heap/my_heap.c#38-41", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "7822bf9cd4816577b1de02baad51db40642ce893", "license": null}, "file": {"path": "codes/c/chapter_heap/my_heap.c", "language": "Java"}, "method": {"name": "freeMaxHeap", "qualified_name": "codes.c.chapter_heap.my_heap.c#freeMaxHeap", "start_line": 38, "end_line": 41, "signature": "freeMaxHeap(MaxHeap *h)", "original_code": "void freeMaxHeap(MaxHeap *h) {\n    // \u91ca\u653e\u5185\u5b58\n    free(h);\n}", "doc_comment": "/* \u6790\u6784\u51fd\u6570 */"}, "code_tokens": ["void", "freeMaxHeap", "(", ")", "{", "// \u91ca\u653e\u5185\u5b58", "}", "MaxHeap", "h", ";", "*", "free", "(", "h", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 24, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 12}}
{"dataset_split": "train", "example_id": "hello-algo@7822bf9:codes/c/chapter_heap/my_heap.c#44-46", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "7822bf9cd4816577b1de02baad51db40642ce893", "license": null}, "file": {"path": "codes/c/chapter_heap/my_heap.c", "language": "Java"}, "method": {"name": "left", "qualified_name": "codes.c.chapter_heap.my_heap.c#left", "start_line": 44, "end_line": 46, "signature": "left(MaxHeap *h, int i)", "original_code": "int left(MaxHeap *h, int i) {\n    return 2 * i + 1;\n}", "doc_comment": "/* \u83b7\u53d6\u5de6\u5b50\u8282\u70b9\u7d22\u5f15 */"}, "code_tokens": ["left", "int", "(", ",", ")", "{", "}", "MaxHeap", "h", "i", "return", ";", "*", "int", "+", "1", "2", "*", "i"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 31, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 16}}
{"dataset_split": "train", "example_id": "hello-algo@7822bf9:codes/c/chapter_heap/my_heap.c#49-51", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "7822bf9cd4816577b1de02baad51db40642ce893", "license": null}, "file": {"path": "codes/c/chapter_heap/my_heap.c", "language": "Java"}, "method": {"name": "right", "qualified_name": "codes.c.chapter_heap.my_heap.c#right", "start_line": 49, "end_line": 51, "signature": "right(MaxHeap *h, int i)", "original_code": "int right(MaxHeap *h, int i) {\n    return 2 * i + 2;\n}", "doc_comment": "/* \u83b7\u53d6\u53f3\u5b50\u8282\u70b9\u7d22\u5f15 */"}, "code_tokens": ["right", "int", "(", ",", ")", "{", "}", "MaxHeap", "h", "i", "return", ";", "*", "int", "+", "2", "2", "*", "i"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 31, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 15}}
{"dataset_split": "train", "example_id": "hello-algo@7822bf9:codes/c/chapter_heap/my_heap.c#54-56", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "7822bf9cd4816577b1de02baad51db40642ce893", "license": null}, "file": {"path": "codes/c/chapter_heap/my_heap.c", "language": "Java"}, "method": {"name": "parent", "qualified_name": "codes.c.chapter_heap.my_heap.c#parent", "start_line": 54, "end_line": 56, "signature": "parent(MaxHeap *h, int i)", "original_code": "int parent(MaxHeap *h, int i) {\n    return (i - 1) / 2;\n}", "doc_comment": "/* \u83b7\u53d6\u7236\u8282\u70b9\u7d22\u5f15 */"}, "code_tokens": ["parent", "int", "(", ",", ")", "{", "}", "MaxHeap", "h", "i", "return", ";", "*", "int", "/", "2", "(", ")", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 34, "ast_depth": 8, "n_identifiers": 3, "vocab_size": 17}}
{"dataset_split": "train", "example_id": "hello-algo@7822bf9:codes/c/chapter_heap/my_heap.c#59-63", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "7822bf9cd4816577b1de02baad51db40642ce893", "license": null}, "file": {"path": "codes/c/chapter_heap/my_heap.c", "language": "Java"}, "method": {"name": "swap", "qualified_name": "codes.c.chapter_heap.my_heap.c#swap", "start_line": 59, "end_line": 63, "signature": "swap(MaxHeap *h, int i, int j)", "original_code": "void swap(MaxHeap *h, int i, int j) {\n    int temp = h->data[i];\n    h->data[i] = h->data[j];\n    h->data[j] = temp;\n}", "doc_comment": "/* \u4ea4\u6362\u5143\u7d20 */"}, "code_tokens": ["void", "swap", "(", ",", ",", ")", "{", "}", "MaxHeap", "h", "i", "j", ";", ";", ";", "*", "int", "int", "int", "temp", "=", "h", "->", "h", "->", "h", "->", "=", "=", "temp", "data", "[", "i", "]", "data", "[", "i", "]", "h", "->", "data", "[", "j", "]", "data", "[", "j", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 73, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 20}}
{"dataset_split": "train", "example_id": "hello-algo@7822bf9:codes/c/chapter_heap/my_heap.c#66-68", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "7822bf9cd4816577b1de02baad51db40642ce893", "license": null}, "file": {"path": "codes/c/chapter_heap/my_heap.c", "language": "Java"}, "method": {"name": "size", "qualified_name": "codes.c.chapter_heap.my_heap.c#size", "start_line": 66, "end_line": 68, "signature": "size(MaxHeap *h)", "original_code": "int size(MaxHeap *h) {\n    return h->size;\n}", "doc_comment": "/* \u83b7\u53d6\u5806\u5927\u5c0f */"}, "code_tokens": ["size", "int", "(", ")", "{", "}", "MaxHeap", "h", "return", ";", "*", "h", "->", "size"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 23, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 12}}
{"dataset_split": "train", "example_id": "hello-algo@7822bf9:codes/c/chapter_heap/my_heap.c#71-73", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "7822bf9cd4816577b1de02baad51db40642ce893", "license": null}, "file": {"path": "codes/c/chapter_heap/my_heap.c", "language": "Java"}, "method": {"name": "isEmpty", "qualified_name": "codes.c.chapter_heap.my_heap.c#isEmpty", "start_line": 71, "end_line": 73, "signature": "isEmpty(MaxHeap *h)", "original_code": "int isEmpty(MaxHeap *h) {\n    return h->size == 0;\n}", "doc_comment": "/* \u5224\u65ad\u5806\u662f\u5426\u4e3a\u7a7a */"}, "code_tokens": ["isEmpty", "int", "(", ")", "{", "}", "MaxHeap", "h", "return", ";", "*", "h", "->", "size", "==", "0"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 26, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 15}}
{"dataset_split": "train", "example_id": "hello-algo@7822bf9:codes/c/chapter_heap/my_heap.c#76-78", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "7822bf9cd4816577b1de02baad51db40642ce893", "license": null}, "file": {"path": "codes/c/chapter_heap/my_heap.c", "language": "Java"}, "method": {"name": "peek", "qualified_name": "codes.c.chapter_heap.my_heap.c#peek", "start_line": 76, "end_line": 78, "signature": "peek(MaxHeap *h)", "original_code": "int peek(MaxHeap *h) {\n    return h->data[0];\n}", "doc_comment": "/* \u8bbf\u95ee\u5806\u9876\u5143\u7d20 */"}, "code_tokens": ["peek", "int", "(", ")", "{", "}", "MaxHeap", "h", "return", ";", "*", "h", "->", "data", "[", "0", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 27, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 16}}
{"dataset_split": "train", "example_id": "hello-algo@7822bf9:codes/c/chapter_heap/my_heap.c#81-93", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "7822bf9cd4816577b1de02baad51db40642ce893", "license": null}, "file": {"path": "codes/c/chapter_heap/my_heap.c", "language": "Java"}, "method": {"name": "push", "qualified_name": "codes.c.chapter_heap.my_heap.c#push", "start_line": 81, "end_line": 93, "signature": "push(MaxHeap *h, int val)", "original_code": "void push(MaxHeap *h, int val) {\n    // \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4e0d\u5e94\u8be5\u6dfb\u52a0\u8fd9\u4e48\u591a\u8282\u70b9\n    if (h->size == MAX_SIZE) {\n        printf(\"heap is full!\");\n        return;\n    }\n    // \u6dfb\u52a0\u8282\u70b9\n    h->data[h->size] = val;\n    h->size++;\n\n    // \u4ece\u5e95\u81f3\u9876\u5806\u5316\n    siftUp(h, h->size - 1);\n}", "doc_comment": "/* \u5143\u7d20\u5165\u5806 */"}, "code_tokens": ["void", "push", "(", ",", ")", "{", "// \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4e0d\u5e94\u8be5\u6dfb\u52a0\u8fd9\u4e48\u591a\u8282\u70b9", "// \u6dfb\u52a0\u8282\u70b9", "// \u4ece\u5e95\u81f3\u9876\u5806\u5316", "}", "MaxHeap", "h", "val", "if", ";", ";", ";", "*", "int", "(", ")", "{", "}", "h", "->", "h", "->", "siftUp", "h", "->", ";", "return", ";", "=", "val", "size", "++", "(", "h", ",", ")", "size", "==", "MAX_SIZE", "printf", "data", "[", "]", "h", "->", "(", ")", "h", "->", "size", "size", "-", "1", "\"", "heap is full!", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 92, "ast_depth": 10, "n_identifiers": 8, "vocab_size": 33}}
{"dataset_split": "train", "example_id": "hello-algo@7822bf9:codes/c/chapter_heap/my_heap.c#96-112", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "7822bf9cd4816577b1de02baad51db40642ce893", "license": null}, "file": {"path": "codes/c/chapter_heap/my_heap.c", "language": "Java"}, "method": {"name": "pop", "qualified_name": "codes.c.chapter_heap.my_heap.c#pop", "start_line": 96, "end_line": 112, "signature": "pop(MaxHeap *h)", "original_code": "int pop(MaxHeap *h) {\n    // \u5224\u7a7a\u5904\u7406\n    if (isEmpty(h)) {\n        printf(\"heap is empty!\");\n        return INT_MAX;\n    }\n    // \u4ea4\u6362\u6839\u8282\u70b9\u4e0e\u6700\u53f3\u53f6\u8282\u70b9\uff08\u5373\u4ea4\u6362\u9996\u5143\u7d20\u4e0e\u5c3e\u5143\u7d20\uff09\n    swap(h, 0, size(h) - 1);\n    // \u5220\u9664\u8282\u70b9\n    int val = h->data[h->size - 1];\n    h->size--;\n    // \u4ece\u9876\u81f3\u5e95\u5806\u5316\n    siftDown(h, 0);\n\n    // \u8fd4\u56de\u5806\u9876\u5143\u7d20\n    return val;\n}", "doc_comment": "/* \u5143\u7d20\u51fa\u5806 */"}, "code_tokens": ["pop", "int", "(", ")", "{", "// \u5224\u7a7a\u5904\u7406", "// \u4ea4\u6362\u6839\u8282\u70b9\u4e0e\u6700\u53f3\u53f6\u8282\u70b9\uff08\u5373\u4ea4\u6362\u9996\u5143\u7d20\u4e0e\u5c3e\u5143\u7d20\uff09", "// \u5220\u9664\u8282\u70b9", "// \u4ece\u9876\u81f3\u5e95\u5806\u5316", "// \u8fd4\u56de\u5806\u9876\u5143\u7d20", "}", "MaxHeap", "h", "if", ";", ";", ";", ";", "return", "val", ";", "*", "(", ")", "{", "}", "swap", "int", "val", "=", "h", "->", "siftDown", "isEmpty", ";", "return", "INT_MAX", ";", "(", "h", ",", "0", ",", ")", "h", "->", "size", "--", "(", "h", ",", "0", ")", "(", "h", ")", "printf", "-", "1", "data", "[", "]", "(", ")", "size", "h", "->", "\"", "heap is empty!", "\"", "(", "h", ")", "size", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 113, "ast_depth": 10, "n_identifiers": 10, "vocab_size": 36}}
{"dataset_split": "train", "example_id": "hello-algo@7822bf9:codes/c/chapter_heap/my_heap.c#115-136", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "7822bf9cd4816577b1de02baad51db40642ce893", "license": null}, "file": {"path": "codes/c/chapter_heap/my_heap.c", "language": "Java"}, "method": {"name": "siftDown", "qualified_name": "codes.c.chapter_heap.my_heap.c#siftDown", "start_line": 115, "end_line": 136, "signature": "siftDown(MaxHeap *h, int i)", "original_code": "void siftDown(MaxHeap *h, int i) {\n    while (true) {\n        // \u5224\u65ad\u8282\u70b9 i, l, r \u4e2d\u503c\u6700\u5927\u7684\u8282\u70b9\uff0c\u8bb0\u4e3a max\n        int l = left(h, i);\n        int r = right(h, i);\n        int max = i;\n        if (l < size(h) && h->data[l] > h->data[max]) {\n            max = l;\n        }\n        if (r < size(h) && h->data[r] > h->data[max]) {\n            max = r;\n        }\n        // \u82e5\u8282\u70b9 i \u6700\u5927\u6216\u7d22\u5f15 l, r \u8d8a\u754c\uff0c\u5219\u65e0\u987b\u7ee7\u7eed\u5806\u5316\uff0c\u8df3\u51fa\n        if (max == i) {\n            break;\n        }\n        // \u4ea4\u6362\u4e24\u8282\u70b9\n        swap(h, i, max);\n        // \u5faa\u73af\u5411\u4e0b\u5806\u5316\n        i = max;\n    }\n}", "doc_comment": "/* \u4ece\u8282\u70b9 i \u5f00\u59cb\uff0c\u4ece\u9876\u81f3\u5e95\u5806\u5316 */"}, "code_tokens": ["void", "siftDown", "(", ",", ")", "{", "}", "MaxHeap", "h", "i", "while", "*", "int", "(", "true", ")", "{", "// \u5224\u65ad\u8282\u70b9 i, l, r \u4e2d\u503c\u6700\u5927\u7684\u8282\u70b9\uff0c\u8bb0\u4e3a max", "// \u82e5\u8282\u70b9 i \u6700\u5927\u6216\u7d22\u5f15 l, r \u8d8a\u754c\uff0c\u5219\u65e0\u987b\u7ee7\u7eed\u5806\u5316\uff0c\u8df3\u51fa", "// \u4ea4\u6362\u4e24\u8282\u70b9", "// \u5faa\u73af\u5411\u4e0b\u5806\u5316", "}", ";", ";", ";", "if", "if", "if", ";", ";", "int", "l", "=", "int", "r", "=", "int", "max", "=", "i", "(", ")", "{", "}", "(", ")", "{", "}", "(", ")", "{", "}", "swap", "i", "=", "max", "left", "right", "&&", ";", "&&", ";", "max", "==", "i", "break", ";", "(", "h", ",", "i", ",", "max", ")", "(", "h", ",", "i", ")", "(", "h", ",", "i", ")", "l", "<", "h", "->", "max", "=", "l", "r", "<", "h", "->", "max", "=", "r", "size", ">", "size", ">", "(", "h", ")", "data", "[", "l", "]", "h", "->", "(", "h", ")", "data", "[", "r", "]", "h", "->", "data", "[", "max", "]", "data", "[", "max", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 190, "ast_depth": 13, "n_identifiers": 11, "vocab_size": 37}}
{"dataset_split": "train", "example_id": "hello-algo@7822bf9:codes/c/chapter_heap/my_heap.c#139-152", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "7822bf9cd4816577b1de02baad51db40642ce893", "license": null}, "file": {"path": "codes/c/chapter_heap/my_heap.c", "language": "Java"}, "method": {"name": "siftUp", "qualified_name": "codes.c.chapter_heap.my_heap.c#siftUp", "start_line": 139, "end_line": 152, "signature": "siftUp(MaxHeap *h, int i)", "original_code": "void siftUp(MaxHeap *h, int i) {\n    while (true) {\n        // \u83b7\u53d6\u8282\u70b9 i \u7684\u7236\u8282\u70b9\n        int p = parent(h, i);\n        // \u5f53\u201c\u8d8a\u8fc7\u6839\u8282\u70b9\u201d\u6216\u201c\u8282\u70b9\u65e0\u987b\u4fee\u590d\u201d\u65f6\uff0c\u7ed3\u675f\u5806\u5316\n        if (p < 0 || h->data[i] <= h->data[p]) {\n            break;\n        }\n        // \u4ea4\u6362\u4e24\u8282\u70b9\n        swap(h, i, p);\n        // \u5faa\u73af\u5411\u4e0a\u5806\u5316\n        i = p;\n    }\n}", "doc_comment": "/* \u4ece\u8282\u70b9 i \u5f00\u59cb\uff0c\u4ece\u5e95\u81f3\u9876\u5806\u5316 */"}, "code_tokens": ["void", "siftUp", "(", ",", ")", "{", "}", "MaxHeap", "h", "i", "while", "*", "int", "(", "true", ")", "{", "// \u83b7\u53d6\u8282\u70b9 i \u7684\u7236\u8282\u70b9", "// \u5f53\u201c\u8d8a\u8fc7\u6839\u8282\u70b9\u201d\u6216\u201c\u8282\u70b9\u65e0\u987b\u4fee\u590d\u201d\u65f6\uff0c\u7ed3\u675f\u5806\u5316", "// \u4ea4\u6362\u4e24\u8282\u70b9", "// \u5faa\u73af\u5411\u4e0a\u5806\u5316", "}", ";", "if", ";", ";", "int", "p", "=", "(", ")", "{", "}", "swap", "i", "=", "p", "parent", "||", "break", ";", "(", "h", ",", "i", ",", "p", ")", "(", "h", ",", "i", ")", "p", "<", "0", "h", "->", "<=", "data", "[", "i", "]", "h", "->", "data", "[", "p", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 101, "ast_depth": 13, "n_identifiers": 7, "vocab_size": 33}}
{"dataset_split": "train", "example_id": "hello-algo@7822bf9:codes/c/chapter_heap/my_heap_test.c#10-41", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "7822bf9cd4816577b1de02baad51db40642ce893", "license": null}, "file": {"path": "codes/c/chapter_heap/my_heap_test.c", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.c.chapter_heap.my_heap_test.c#main", "start_line": 10, "end_line": 41, "signature": "main()", "original_code": "int main() {\n    /* \u521d\u59cb\u5316\u5806 */\n    // \u521d\u59cb\u5316\u5927\u9876\u5806\n    int nums[] = {9, 8, 6, 6, 7, 5, 2, 1, 4, 3, 6, 2};\n    MaxHeap *heap = newMaxHeap(nums, sizeof(nums) / sizeof(int));\n    printf(\"\u8f93\u5165\u6570\u7ec4\u5e76\u5efa\u5806\u540e\\n\");\n    printHeap(heap->data, heap->size);\n\n    /* \u83b7\u53d6\u5806\u9876\u5143\u7d20 */\n    printf(\"\\n\u5806\u9876\u5143\u7d20\u4e3a %d\\n\", peek(heap));\n\n    /* \u5143\u7d20\u5165\u5806 */\n    push(heap, 7);\n    printf(\"\\n\u5143\u7d20 7 \u5165\u5806\u540e\\n\");\n    printHeap(heap->data, heap->size);\n\n    /* \u5806\u9876\u5143\u7d20\u51fa\u5806 */\n    int top = pop(heap);\n    printf(\"\\n\u5806\u9876\u5143\u7d20 %d \u51fa\u5806\u540e\\n\", top);\n    printHeap(heap->data, heap->size);\n\n    /* \u83b7\u53d6\u5806\u5927\u5c0f */\n    printf(\"\\n\u5806\u5143\u7d20\u6570\u91cf\u4e3a %d\\n\", size(heap));\n\n    /* \u5224\u65ad\u5806\u662f\u5426\u4e3a\u7a7a */\n    printf(\"\\n\u5806\u662f\u5426\u4e3a\u7a7a %d\\n\", isEmpty(heap));\n\n    // \u91ca\u653e\u5185\u5b58\n    freeMaxHeap(heap);\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "/* \u521d\u59cb\u5316\u5806 */", "// \u521d\u59cb\u5316\u5927\u9876\u5806", "/* \u83b7\u53d6\u5806\u9876\u5143\u7d20 */", "/* \u5143\u7d20\u5165\u5806 */", "/* \u5806\u9876\u5143\u7d20\u51fa\u5806 */", "/* \u83b7\u53d6\u5806\u5927\u5c0f */", "/* \u5224\u65ad\u5806\u662f\u5426\u4e3a\u7a7a */", "// \u91ca\u653e\u5185\u5b58", "}", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "return", "0", ";", "int", "nums", "=", "MaxHeap", "*", "printf", "printHeap", "printf", "push", "printf", "printHeap", "int", "top", "=", "printf", "printHeap", "printf", "printf", "freeMaxHeap", "[", "]", "{", "9", ",", "8", ",", "6", ",", "6", ",", "7", ",", "5", ",", "2", ",", "1", ",", "4", ",", "3", ",", "6", ",", "2", "}", "heap", "=", "(", ")", "(", ",", ")", "(", ",", ")", "(", "heap", ",", "7", ")", "(", ")", "(", ",", ")", "pop", "(", ",", "top", ")", "(", ",", ")", "(", ",", ")", "(", ",", ")", "(", "heap", ")", "newMaxHeap", "\"", "\u8f93\u5165\u6570\u7ec4\u5e76\u5efa\u5806\u540e", "\\n", "\"", "heap", "->", "data", "heap", "->", "size", "\"", "\\n", "\u5806\u9876\u5143\u7d20\u4e3a %d", "\\n", "\"", "peek", "\"", "\\n", "\u5143\u7d20 7 \u5165\u5806\u540e", "\\n", "\"", "heap", "->", "data", "heap", "->", "size", "(", "heap", ")", "\"", "\\n", "\u5806\u9876\u5143\u7d20 %d \u51fa\u5806\u540e", "\\n", "\"", "heap", "->", "data", "heap", "->", "size", "\"", "\\n", "\u5806\u5143\u7d20\u6570\u91cf\u4e3a %d", "\\n", "\"", "size", "\"", "\\n", "\u5806\u662f\u5426\u4e3a\u7a7a %d", "\\n", "\"", "isEmpty", "(", "nums", ",", ")", "(", "heap", ")", "(", "heap", ")", "(", "heap", ")", "/", "sizeof", "sizeof", "(", "nums", ")", "(", ")", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 269, "ast_depth": 14, "n_identifiers": 16, "vocab_size": 56}}
{"dataset_split": "train", "example_id": "hello-algo@7822bf9:codes/c/chapter_heap/top_k.c#16-19", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "7822bf9cd4816577b1de02baad51db40642ce893", "license": null}, "file": {"path": "codes/c/chapter_heap/top_k.c", "language": "Java"}, "method": {"name": "popMinHeap", "qualified_name": "codes.c.chapter_heap.top_k.c#popMinHeap", "start_line": 16, "end_line": 19, "signature": "popMinHeap(MaxHeap *maxHeap)", "original_code": "int popMinHeap(MaxHeap *maxHeap) {\n    // \u5143\u7d20\u53d6\u53cd\n    return -pop(maxHeap);\n}", "doc_comment": "/* \u5143\u7d20\u51fa\u5806 */"}, "code_tokens": ["popMinHeap", "int", "(", ")", "{", "// \u5143\u7d20\u53d6\u53cd", "}", "MaxHeap", "maxHeap", "return", ";", "*", "-", "pop", "(", "maxHeap", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 28, "ast_depth": 8, "n_identifiers": 3, "vocab_size": 14}}
{"dataset_split": "train", "example_id": "hello-algo@7822bf9:codes/c/chapter_heap/top_k.c#22-25", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "7822bf9cd4816577b1de02baad51db40642ce893", "license": null}, "file": {"path": "codes/c/chapter_heap/top_k.c", "language": "Java"}, "method": {"name": "peekMinHeap", "qualified_name": "codes.c.chapter_heap.top_k.c#peekMinHeap", "start_line": 22, "end_line": 25, "signature": "peekMinHeap(MaxHeap *maxHeap)", "original_code": "int peekMinHeap(MaxHeap *maxHeap) {\n    // \u5143\u7d20\u53d6\u53cd\n    return -peek(maxHeap);\n}", "doc_comment": "/* \u8bbf\u95ee\u5806\u9876\u5143\u7d20 */"}, "code_tokens": ["peekMinHeap", "int", "(", ")", "{", "// \u5143\u7d20\u53d6\u53cd", "}", "MaxHeap", "maxHeap", "return", ";", "*", "-", "peek", "(", "maxHeap", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 28, "ast_depth": 8, "n_identifiers": 3, "vocab_size": 14}}
{"dataset_split": "train", "example_id": "hello-algo@7822bf9:codes/c/chapter_heap/top_k.c#28-35", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "7822bf9cd4816577b1de02baad51db40642ce893", "license": null}, "file": {"path": "codes/c/chapter_heap/top_k.c", "language": "Java"}, "method": {"name": "getMinHeap", "qualified_name": "codes.c.chapter_heap.top_k.c#getMinHeap", "start_line": 28, "end_line": 35, "signature": "getMinHeap(MaxHeap *maxHeap)", "original_code": "int *getMinHeap(MaxHeap *maxHeap) {\n    // \u5c06\u5806\u4e2d\u6240\u6709\u5143\u7d20\u53d6\u53cd\u5e76\u5b58\u5165 res \u6570\u7ec4\n    int *res = (int *)malloc(maxHeap->size * sizeof(int));\n    for (int i = 0; i < maxHeap->size; i++) {\n        res[i] = -maxHeap->data[i];\n    }\n    return res;\n}", "doc_comment": "/* \u53d6\u51fa\u5806\u4e2d\u5143\u7d20 */"}, "code_tokens": ["getMinHeap", "int", "*", "(", ")", "{", "// \u5c06\u5806\u4e2d\u6240\u6709\u5143\u7d20\u53d6\u53cd\u5e76\u5b58\u5165 res \u6570\u7ec4", "}", "MaxHeap", "maxHeap", ";", "for", "(", ";", ")", "return", "res", ";", "*", "int", "*", "res", "=", ";", "i", "<", "i", "++", "{", "}", "(", ")", "int", "i", "=", "0", "maxHeap", "->", "size", ";", "int", "*", "malloc", "=", "(", ")", "res", "[", "i", "]", "-", "maxHeap", "->", "maxHeap", "->", "size", "*", "data", "[", "i", "]", "sizeof", "(", ")", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 103, "ast_depth": 15, "n_identifiers": 8, "vocab_size": 27}}
{"dataset_split": "train", "example_id": "hello-algo@7822bf9:codes/c/chapter_heap/top_k.c#38-59", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "7822bf9cd4816577b1de02baad51db40642ce893", "license": null}, "file": {"path": "codes/c/chapter_heap/top_k.c", "language": "Java"}, "method": {"name": "topKHeap", "qualified_name": "codes.c.chapter_heap.top_k.c#topKHeap", "start_line": 38, "end_line": 59, "signature": "topKHeap(int *nums, int sizeNums, int k)", "original_code": "int *topKHeap(int *nums, int sizeNums, int k) {\n    // \u521d\u59cb\u5316\u5c0f\u9876\u5806\n    // \u8bf7\u6ce8\u610f\uff1a\u6211\u4eec\u5c06\u5806\u4e2d\u6240\u6709\u5143\u7d20\u53d6\u53cd\uff0c\u4ece\u800c\u7528\u5927\u9876\u5806\u6765\u6a21\u62df\u5c0f\u9876\u5806\n    int empty[0];\n    MaxHeap *maxHeap = newMaxHeap(empty, 0);\n    // \u5c06\u6570\u7ec4\u7684\u524d k \u4e2a\u5143\u7d20\u5165\u5806\n    for (int i = 0; i < k; i++) {\n        pushMinHeap(maxHeap, nums[i]);\n    }\n    // \u4ece\u7b2c k+1 \u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u4fdd\u6301\u5806\u7684\u957f\u5ea6\u4e3a k\n    for (int i = k; i < sizeNums; i++) {\n        // \u82e5\u5f53\u524d\u5143\u7d20\u5927\u4e8e\u5806\u9876\u5143\u7d20\uff0c\u5219\u5c06\u5806\u9876\u5143\u7d20\u51fa\u5806\u3001\u5f53\u524d\u5143\u7d20\u5165\u5806\n        if (nums[i] > peekMinHeap(maxHeap)) {\n            popMinHeap(maxHeap);\n            pushMinHeap(maxHeap, nums[i]);\n        }\n    }\n    int *res = getMinHeap(maxHeap);\n    // \u91ca\u653e\u5185\u5b58\n    freeMaxHeap(maxHeap);\n    return res;\n}", "doc_comment": "// \u57fa\u4e8e\u5806\u67e5\u627e\u6570\u7ec4\u4e2d\u6700\u5927\u7684 k \u4e2a\u5143\u7d20\u7684\u51fd\u6570"}, "code_tokens": ["topKHeap", "int", "*", "(", ",", ",", ")", "{", "// \u521d\u59cb\u5316\u5c0f\u9876\u5806", "// \u8bf7\u6ce8\u610f\uff1a\u6211\u4eec\u5c06\u5806\u4e2d\u6240\u6709\u5143\u7d20\u53d6\u53cd\uff0c\u4ece\u800c\u7528\u5927\u9876\u5806\u6765\u6a21\u62df\u5c0f\u9876\u5806", "// \u5c06\u6570\u7ec4\u7684\u524d k \u4e2a\u5143\u7d20\u5165\u5806", "// \u4ece\u7b2c k+1 \u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u4fdd\u6301\u5806\u7684\u957f\u5ea6\u4e3a k", "// \u91ca\u653e\u5185\u5b58", "}", "nums", "sizeNums", "k", ";", ";", "for", "(", ";", ")", "for", "(", ";", ")", ";", ";", "return", "res", ";", "int", "*", "int", "int", "int", "empty", "MaxHeap", "*", ";", "i", "<", "k", "i", "++", "{", "}", ";", "i", "<", "sizeNums", "i", "++", "{", "// \u82e5\u5f53\u524d\u5143\u7d20\u5927\u4e8e\u5806\u9876\u5143\u7d20\uff0c\u5219\u5c06\u5806\u9876\u5143\u7d20\u51fa\u5806\u3001\u5f53\u524d\u5143\u7d20\u5165\u5806", "}", "int", "*", "res", "=", "freeMaxHeap", "[", "]", "maxHeap", "=", "int", "i", "=", "0", ";", "int", "i", "=", "k", "if", "getMinHeap", "(", "maxHeap", ")", "0", "newMaxHeap", "pushMinHeap", "(", ")", "{", "}", "(", "maxHeap", ")", "(", "empty", ",", "0", ")", "(", "maxHeap", ",", ")", ">", ";", ";", "nums", "[", "i", "]", "nums", "[", "i", "]", "peekMinHeap", "popMinHeap", "pushMinHeap", "(", "maxHeap", ")", "(", "maxHeap", ")", "(", "maxHeap", ",", ")", "nums", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 192, "ast_depth": 12, "n_identifiers": 15, "vocab_size": 39}}
{"dataset_split": "train", "example_id": "hello-algo@7822bf9:codes/c/chapter_heap/top_k.c#62-73", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "7822bf9cd4816577b1de02baad51db40642ce893", "license": null}, "file": {"path": "codes/c/chapter_heap/top_k.c", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.c.chapter_heap.top_k.c#main", "start_line": 62, "end_line": 73, "signature": "main()", "original_code": "int main() {\n    int nums[] = {1, 7, 6, 3, 2};\n    int k = 3;\n    int sizeNums = sizeof(nums) / sizeof(nums[0]);\n\n    int *res = topKHeap(nums, sizeNums, k);\n    printf(\"\u6700\u5927\u7684 %d \u4e2a\u5143\u7d20\u4e3a: \", k);\n    printArray(res, k);\n\n    free(res);\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "}", ";", ";", ";", ";", ";", ";", ";", "return", "0", ";", "int", "nums", "=", "int", "k", "=", "3", "int", "sizeNums", "=", "int", "*", "res", "=", "printf", "printArray", "free", "[", "]", "{", "1", ",", "7", ",", "6", ",", "3", ",", "2", "}", "/", "topKHeap", "(", ",", "k", ")", "(", "res", ",", "k", ")", "(", "res", ")", "sizeof", "sizeof", "(", "nums", ",", "sizeNums", ",", "k", ")", "\"", "\u6700\u5927\u7684 %d \u4e2a\u5143\u7d20\u4e3a: ", "\"", "(", "nums", ")", "(", ")", "nums", "[", "0", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 120, "ast_depth": 10, "n_identifiers": 10, "vocab_size": 31}}
{"dataset_split": "train", "example_id": "hello-algo@7822bf9:codes/cpp/chapter_heap/top_k.cpp#10-26", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "7822bf9cd4816577b1de02baad51db40642ce893", "license": null}, "file": {"path": "codes/cpp/chapter_heap/top_k.cpp", "language": "Java"}, "method": {"name": "topKHeap", "qualified_name": "codes.cpp.chapter_heap.top_k.cpp#topKHeap", "start_line": 10, "end_line": 26, "signature": "topKHeap(vector<int> &nums, int k)", "original_code": "priority_queue<int, vector<int>, greater<int>> topKHeap(vector<int> &nums, int k) {\n    // \u521d\u59cb\u5316\u5c0f\u9876\u5806\n    priority_queue<int, vector<int>, greater<int>> heap;\n    // \u5c06\u6570\u7ec4\u7684\u524d k \u4e2a\u5143\u7d20\u5165\u5806\n    for (int i = 0; i < k; i++) {\n        heap.push(nums[i]);\n    }\n    // \u4ece\u7b2c k+1 \u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u4fdd\u6301\u5806\u7684\u957f\u5ea6\u4e3a k\n    for (int i = k; i < nums.size(); i++) {\n        // \u82e5\u5f53\u524d\u5143\u7d20\u5927\u4e8e\u5806\u9876\u5143\u7d20\uff0c\u5219\u5c06\u5806\u9876\u5143\u7d20\u51fa\u5806\u3001\u5f53\u524d\u5143\u7d20\u5165\u5806\n        if (nums[i] > heap.top()) {\n            heap.pop();\n            heap.push(nums[i]);\n        }\n    }\n    return heap;\n}", "doc_comment": "/* \u57fa\u4e8e\u5806\u67e5\u627e\u6570\u7ec4\u4e2d\u6700\u5927\u7684 k \u4e2a\u5143\u7d20 */"}, "code_tokens": ["topKHeap", "priority_queue", "(", ",", ")", "{", "// \u521d\u59cb\u5316\u5c0f\u9876\u5806", "// \u5c06\u6570\u7ec4\u7684\u524d k \u4e2a\u5143\u7d20\u5165\u5806", "// \u4ece\u7b2c k+1 \u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u4fdd\u6301\u5806\u7684\u957f\u5ea6\u4e3a k", "}", "<", ",", ",", ">", "nums", "k", ";", "for", "(", ";", ")", "for", "(", ";", ")", "return", "heap", ";", "int", "vector", "greater", "vector", "&", "int", "priority_queue", "heap", ";", "i", "<", "k", "i", "++", "{", "}", ";", "i", "<", "i", "++", "{", "// \u82e5\u5f53\u524d\u5143\u7d20\u5927\u4e8e\u5806\u9876\u5143\u7d20\uff0c\u5219\u5c06\u5806\u9876\u5143\u7d20\u51fa\u5806\u3001\u5f53\u524d\u5143\u7d20\u5165\u5806", "}", "<", ">", "<", ">", "<", ">", "<", ",", ",", ">", "int", "i", "=", "0", ";", "int", "i", "=", "k", "nums", ".", "size", "if", "int", "int", "int", "int", "vector", "greater", "heap", ".", "push", "(", ")", "(", ")", "{", "}", "<", ">", "<", ">", "(", ")", ">", ";", ";", "int", "int", "nums", "[", "i", "]", "nums", "[", "i", "]", "heap", ".", "top", "heap", ".", "pop", "heap", ".", "push", "(", ")", "(", ")", "(", ")", "nums", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 194, "ast_depth": 12, "n_identifiers": 9, "vocab_size": 35}}
{"dataset_split": "train", "example_id": "hello-algo@7822bf9:codes/cpp/chapter_heap/top_k.cpp#29-38", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "7822bf9cd4816577b1de02baad51db40642ce893", "license": null}, "file": {"path": "codes/cpp/chapter_heap/top_k.cpp", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.cpp.chapter_heap.top_k.cpp#main", "start_line": 29, "end_line": 38, "signature": "main()", "original_code": "int main() {\n    vector<int> nums = {1, 7, 6, 3, 2};\n    int k = 3;\n\n    priority_queue<int, vector<int>, greater<int>> res = topKHeap(nums, k);\n    cout << \"\u6700\u5927\u7684 \" << k << \" \u4e2a\u5143\u7d20\u4e3a: \";\n    printHeap(res);\n\n    return 0;\n}", "doc_comment": "// Driver Code"}, "code_tokens": ["main", "int", "(", ")", "{", "}", ";", ";", ";", ";", ";", "return", "0", ";", "vector", "nums", "=", "int", "k", "=", "3", "priority_queue", "res", "=", "<<", "printHeap", "<", ">", "{", "1", ",", "7", ",", "6", ",", "3", ",", "2", "}", "<", ",", ",", ">", "topKHeap", "<<", "k", "\"", " \u4e2a\u5143\u7d20\u4e3a: ", "\"", "(", "res", ")", "int", "int", "vector", "greater", "(", "nums", ",", "k", ")", "cout", "<<", "<", ">", "<", ">", "\"", "\u6700\u5927\u7684 ", "\"", "int", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 109, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 31}}
{"dataset_split": "train", "example_id": "hello-algo@7822bf9:codes/csharp/chapter_heap/top_k.cs#11-27", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "7822bf9cd4816577b1de02baad51db40642ce893", "license": null}, "file": {"path": "codes/csharp/chapter_heap/top_k.cs", "language": "Java"}, "method": {"name": "TopKHeap", "qualified_name": "codes.csharp.chapter_heap.top_k.cs#TopKHeap", "start_line": 11, "end_line": 27, "signature": "TopKHeap(int[] nums, int k)", "original_code": "public static PriorityQueue<int, int> TopKHeap(int[] nums, int k) {\n        // \u521d\u59cb\u5316\u5c0f\u9876\u5806\n        PriorityQueue<int, int> heap = new();\n        // \u5c06\u6570\u7ec4\u7684\u524d k \u4e2a\u5143\u7d20\u5165\u5806\n        for (int i = 0; i < k; i++) {\n            heap.Enqueue(nums[i], nums[i]);\n        }\n        // \u4ece\u7b2c k+1 \u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u4fdd\u6301\u5806\u7684\u957f\u5ea6\u4e3a k\n        for (int i = k; i < nums.Length; i++) {\n            // \u82e5\u5f53\u524d\u5143\u7d20\u5927\u4e8e\u5806\u9876\u5143\u7d20\uff0c\u5219\u5c06\u5806\u9876\u5143\u7d20\u51fa\u5806\u3001\u5f53\u524d\u5143\u7d20\u5165\u5806\n            if (nums[i] > heap.Peek()) {\n                heap.Dequeue();\n                heap.Enqueue(nums[i], nums[i]);\n            }\n        }\n        return heap;\n    }", "doc_comment": "/* \u57fa\u4e8e\u5806\u67e5\u627e\u6570\u7ec4\u4e2d\u6700\u5927\u7684 k \u4e2a\u5143\u7d20 */"}, "code_tokens": ["TopKHeap", "public", "static", "PriorityQueue", "(", ",", ")", "{", "// \u521d\u59cb\u5316\u5c0f\u9876\u5806", "// \u5c06\u6570\u7ec4\u7684\u524d k \u4e2a\u5143\u7d20\u5165\u5806", "// \u4ece\u7b2c k+1 \u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u4fdd\u6301\u5806\u7684\u957f\u5ea6\u4e3a k", "}", "<", ",", ">", "nums", "k", ";", "for", "(", ";", ")", "for", "(", ";", ")", "return", "heap", ";", "int", "int", "int", "PriorityQueue", "heap", "=", ";", "i", "<", "k", "i", "++", "{", "}", ";", "i", "<", "i", "++", "{", "// \u82e5\u5f53\u524d\u5143\u7d20\u5927\u4e8e\u5806\u9876\u5143\u7d20\uff0c\u5219\u5c06\u5806\u9876\u5143\u7d20\u51fa\u5806\u3001\u5f53\u524d\u5143\u7d20\u5165\u5806", "}", "int", "[", "]", "<", ",", ">", "new", "int", "i", "=", "0", ";", "int", "i", "=", "k", "nums", ".", "Length", "if", "int", "int", "", "(", ")", "heap", ".", "Enqueue", "(", ")", "{", "}", "(", ",", ")", ">", ";", ";", "nums", "[", "i", "]", "nums", "[", "i", "]", "nums", "[", "i", "]", "heap", ".", "Peek", "heap", ".", "Dequeue", "heap", ".", "Enqueue", "(", ")", "(", ")", "(", ",", ")", "nums", "[", "i", "]", "nums", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 185, "ast_depth": 12, "n_identifiers": 9, "vocab_size": 36}}
{"dataset_split": "train", "example_id": "hello-algo@7822bf9:codes/csharp/chapter_heap/top_k.cs#30-36", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "7822bf9cd4816577b1de02baad51db40642ce893", "license": null}, "file": {"path": "codes/csharp/chapter_heap/top_k.cs", "language": "Java"}, "method": {"name": "Test", "qualified_name": "codes.csharp.chapter_heap.top_k.cs#Test", "start_line": 30, "end_line": 36, "signature": "Test()", "original_code": "public void Test() {\n        int[] nums = { 1, 7, 6, 3, 2 };\n        int k = 3;\n        PriorityQueue<int, int> res = TopKHeap(nums, k);\n        Console.WriteLine(\"\u6700\u5927\u7684 \" + k + \" \u4e2a\u5143\u7d20\u4e3a\");\n        PrintUtil.PrintHeap(res);\n    }", "doc_comment": ""}, "code_tokens": ["void", "Test", "public", "(", ")", "{", "}", ";", ";", ";", ";", ";", "nums", "=", "int", "k", "=", "3", "PriorityQueue", "res", "=", "Console", ".", "WriteLine", "PrintUtil", ".", "PrintHeap", "int", "[", "]", "{", "1", ",", "7", ",", "6", ",", "3", ",", "2", "}", "<", ",", ">", "TopKHeap", "(", ")", "(", "res", ")", "int", "int", "(", "nums", ",", "k", ")", "+", "+", "k", "\"", " \u4e2a\u5143\u7d20\u4e3a", "\"", "\"", "\u6700\u5927\u7684 ", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 98, "ast_depth": 10, "n_identifiers": 9, "vocab_size": 34}}
{"dataset_split": "train", "example_id": "hello-algo@7822bf9:codes/dart/chapter_heap/top_k.dart#10-22", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "7822bf9cd4816577b1de02baad51db40642ce893", "license": null}, "file": {"path": "codes/dart/chapter_heap/top_k.dart", "language": "Java"}, "method": {"name": "topKHeap", "qualified_name": "codes.dart.chapter_heap.top_k.dart#topKHeap", "start_line": 10, "end_line": 22, "signature": "topKHeap(List<int> nums, int k)", "original_code": "MinHeap topKHeap(List<int> nums, int k) {\n  // \u521d\u59cb\u5316\u5c0f\u9876\u5806\uff0c\u5c06\u6570\u7ec4\u7684\u524d k \u4e2a\u5143\u7d20\u5165\u5806\n  MinHeap heap = MinHeap(nums.sublist(0, k));\n  // \u4ece\u7b2c k+1 \u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u4fdd\u6301\u5806\u7684\u957f\u5ea6\u4e3a k\n  for (int i = k; i < nums.length; i++) {\n    // \u82e5\u5f53\u524d\u5143\u7d20\u5927\u4e8e\u5806\u9876\u5143\u7d20\uff0c\u5219\u5c06\u5806\u9876\u5143\u7d20\u51fa\u5806\u3001\u5f53\u524d\u5143\u7d20\u5165\u5806\n    if (nums[i] > heap.peek()) {\n      heap.pop();\n      heap.push(nums[i]);\n    }\n  }\n  return heap;\n}", "doc_comment": "/* \u57fa\u4e8e\u5806\u67e5\u627e\u6570\u7ec4\u4e2d\u6700\u5927\u7684 k \u4e2a\u5143\u7d20 */"}, "code_tokens": ["MinHeap", "topKHeap", "(", ",", ")", "{", "// \u521d\u59cb\u5316\u5c0f\u9876\u5806\uff0c\u5c06\u6570\u7ec4\u7684\u524d k \u4e2a\u5143\u7d20\u5165\u5806", "// \u4ece\u7b2c k+1 \u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u4fdd\u6301\u5806\u7684\u957f\u5ea6\u4e3a k", "}", "nums", "k", "MinHeap", ";", "for", "(", ";", ")", "return", "heap", ";", "List", "int", "heap", "=", ";", "i", "<", "i", "++", "{", "// \u82e5\u5f53\u524d\u5143\u7d20\u5927\u4e8e\u5806\u9876\u5143\u7d20\uff0c\u5219\u5c06\u5806\u9876\u5143\u7d20\u51fa\u5806\u3001\u5f53\u524d\u5143\u7d20\u5165\u5806", "}", "<", ">", "MinHeap", "int", "i", "=", "k", "nums", ".", "length", "if", "int", "(", ")", "(", ")", "{", "}", "nums", ".", "sublist", ">", ";", ";", "(", "0", ",", "k", ")", "nums", "[", "i", "]", "heap", ".", "peek", "heap", ".", "pop", "heap", ".", "push", "(", ")", "(", ")", "(", ")", "nums", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 123, "ast_depth": 12, "n_identifiers": 11, "vocab_size": 33}}
{"dataset_split": "train", "example_id": "hello-algo@7822bf9:codes/dart/chapter_heap/top_k.dart#25-32", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "7822bf9cd4816577b1de02baad51db40642ce893", "license": null}, "file": {"path": "codes/dart/chapter_heap/top_k.dart", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.dart.chapter_heap.top_k.dart#main", "start_line": 25, "end_line": 32, "signature": "main()", "original_code": "void main() {\n  List<int> nums = [1, 7, 6, 3, 2];\n  int k = 3;\n\n  MinHeap res = topKHeap(nums, k);\n  print(\"\u6700\u5927\u7684 $k \u4e2a\u5143\u7d20\u4e3a\");\n  res.print();\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["void", "main", "(", ")", "{", "}", ";", ";", "MinHeap", ";", ";", ";", "List", "nums", "=", "1", ",", "7", ",", "6", ",", "3", ",", "2", "]", "int", "k", "=", "3", "res", "=", "print", "res", ".", "print", "<", ">", "[", "topKHeap", "(", ")", "(", ")", "int", "(", "nums", ",", "k", ")", "\"", "\u6700\u5927\u7684 $k \u4e2a\u5143\u7d20\u4e3a", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 77, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 29}}
{"dataset_split": "train", "example_id": "hello-algo@7822bf9:codes/dart/chapter_heap/top_k.dart#36-46", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "7822bf9cd4816577b1de02baad51db40642ce893", "license": null}, "file": {"path": "codes/dart/chapter_heap/top_k.dart", "language": "Java"}, "method": {"name": "MinHeap", "qualified_name": "codes.dart.chapter_heap.top_k.dart#MinHeap", "start_line": 36, "end_line": 46, "signature": "MinHeap(List<int> nums)", "original_code": "<int> _minHeap;\n\n  /* \u6784\u9020\u65b9\u6cd5\uff0c\u6839\u636e\u8f93\u5165\u5217\u8868\u5efa\u5806 */\n  MinHeap(List<int> nums) {\n    // \u5c06\u5217\u8868\u5143\u7d20\u539f\u5c01\u4e0d\u52a8\u6dfb\u52a0\u8fdb\u5806\n    _minHeap = nums;\n    // \u5806\u5316\u9664\u53f6\u8282\u70b9\u4ee5\u5916\u7684\u5176\u4ed6\u6240\u6709\u8282\u70b9\n    for (int i = _parent(size() - 1); i >= 0; i--) {\n      siftDown(i);\n    }\n  }", "doc_comment": ""}, "code_tokens": ["_minHeap", "/* \u6784\u9020\u65b9\u6cd5\uff0c\u6839\u636e\u8f93\u5165\u5217\u8868\u5efa\u5806 */", "MinHeap", "<", ">", ";", "(", ")", "{", "// \u5c06\u5217\u8868\u5143\u7d20\u539f\u5c01\u4e0d\u52a8\u6dfb\u52a0\u8fdb\u5806", "// \u5806\u5316\u9664\u53f6\u8282\u70b9\u4ee5\u5916\u7684\u5176\u4ed6\u6240\u6709\u8282\u70b9", "}", "int", "nums", ";", "for", "(", ";", ")", "List", "_minHeap", "=", "nums", ";", "i", ">=", "0", "i", "--", "{", "}", "<", ">", "int", "i", "=", ";", "int", "_parent", "siftDown", "(", ")", "(", "i", ")", "-", "1", "size", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 78, "ast_depth": 12, "n_identifiers": 7, "vocab_size": 26}}
