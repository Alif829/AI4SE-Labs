{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_sorting/quick_sort.cpp#148-168", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_sorting/quick_sort.cpp", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.cpp.chapter_sorting.quick_sort.cpp#main", "start_line": 148, "end_line": 168, "signature": "main()", "original_code": "int main() {\n    /* \u5feb\u901f\u6392\u5e8f */\n    vector<int> nums{2, 4, 1, 0, 3, 5};\n    QuickSort::quickSort(nums, 0, nums.size() - 1);\n    cout << \"\u5feb\u901f\u6392\u5e8f\u5b8c\u6210\u540e nums = \";\n    printVector(nums);\n\n    /* \u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u51c6\u6570\u4f18\u5316\uff09 */\n    vector<int> nums1 = {2, 4, 1, 0, 3, 5};\n    QuickSortMedian::quickSort(nums1, 0, nums1.size() - 1);\n    cout << \"\u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u51c6\u6570\u4f18\u5316\uff09\u5b8c\u6210\u540e nums = \";\n    printVector(nums);\n\n    /* \u5feb\u901f\u6392\u5e8f\uff08\u5c3e\u9012\u5f52\u4f18\u5316\uff09 */\n    vector<int> nums2 = {2, 4, 1, 0, 3, 5};\n    QuickSortTailCall::quickSort(nums2, 0, nums2.size() - 1);\n    cout << \"\u5feb\u901f\u6392\u5e8f\uff08\u5c3e\u9012\u5f52\u4f18\u5316\uff09\u5b8c\u6210\u540e nums = \";\n    printVector(nums);\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "/* \u5feb\u901f\u6392\u5e8f */", ";", "/* \u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u51c6\u6570\u4f18\u5316\uff09 */", "/* \u5feb\u901f\u6392\u5e8f\uff08\u5c3e\u9012\u5f52\u4f18\u5316\uff09 */", "}", "", "{", "}", "", ";", ";", ";", ";", "", ";", ";", ";", ";", "", ";", ";", ";", "return", "0", ";", "vector", "nums", "2", ",", "4", ",", "1", ",", "0", ",", "3", ",", "5", "QuickSort", "::", "quickSort", "(", ")", "cout", "<<", "printVector", "vector", "nums1", "=", "QuickSortMedian", "::", "quickSort", "(", ")", "cout", "<<", "printVector", "vector", "nums2", "=", "QuickSortTailCall", "::", "quickSort", "(", ")", "cout", "<<", "printVector", "<", ">", "-", "1", "\"", "\u5feb\u901f\u6392\u5e8f\u5b8c\u6210\u540e nums = ", "\"", "(", "nums", ")", "<", ">", "{", "2", ",", "4", ",", "1", ",", "0", ",", "3", ",", "5", "}", "-", "1", "\"", "\u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u51c6\u6570\u4f18\u5316\uff09\u5b8c\u6210\u540e nums = ", "\"", "(", "nums", ")", "<", ">", "{", "2", ",", "4", ",", "1", ",", "0", ",", "3", ",", "5", "}", "-", "1", "\"", "\u5feb\u901f\u6392\u5e8f\uff08\u5c3e\u9012\u5f52\u4f18\u5316\uff09\u5b8c\u6210\u540e nums = ", "\"", "(", "nums", ")", "int", "nums", ".", "size", "int", "nums1", ".", "size", "int", "nums2", ".", "size", ",", "nums", "(", ")", ",", "nums1", "(", ")", ",", "nums2", "(", ")", "0", ",", "0", ",", "0", ","], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 229, "ast_depth": 10, "n_identifiers": 11, "vocab_size": 41}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_sorting/radix_sort.cpp#10-13", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_sorting/radix_sort.cpp", "language": "Java"}, "method": {"name": "digit", "qualified_name": "codes.cpp.chapter_sorting.radix_sort.cpp#digit", "start_line": 10, "end_line": 13, "signature": "digit(int num, int exp)", "original_code": "int digit(int num, int exp) {\n    // \u4f20\u5165 exp \u800c\u975e k \u53ef\u4ee5\u907f\u514d\u5728\u6b64\u91cd\u590d\u6267\u884c\u6602\u8d35\u7684\u6b21\u65b9\u8ba1\u7b97\n    return (num / exp) % 10;\n}", "doc_comment": "/* \u83b7\u53d6\u5143\u7d20 num \u7684\u7b2c k \u4f4d\uff0c\u5176\u4e2d exp = 10^(k-1) */"}, "code_tokens": ["digit", "int", "(", ",", ")", "{", "// \u4f20\u5165 exp \u800c\u975e k \u53ef\u4ee5\u907f\u514d\u5728\u6b64\u91cd\u590d\u6267\u884c\u6602\u8d35\u7684\u6b21\u65b9\u8ba1\u7b97", "}", "num", "exp", "return", ";", "int", "int", "%", "10", "(", ")", "num", "/", "exp"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 34, "ast_depth": 8, "n_identifiers": 3, "vocab_size": 15}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_sorting/radix_sort.cpp#16-40", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_sorting/radix_sort.cpp", "language": "Java"}, "method": {"name": "countingSortDigit", "qualified_name": "codes.cpp.chapter_sorting.radix_sort.cpp#countingSortDigit", "start_line": 16, "end_line": 40, "signature": "countingSortDigit(vector<int> &nums, int exp)", "original_code": "void countingSortDigit(vector<int> &nums, int exp) {\n    // \u5341\u8fdb\u5236\u7684\u4f4d\u8303\u56f4\u4e3a 0~9 \uff0c\u56e0\u6b64\u9700\u8981\u957f\u5ea6\u4e3a 10 \u7684\u6876\u6570\u7ec4\n    vector<int> counter(10, 0);\n    int n = nums.size();\n    // \u7edf\u8ba1 0~9 \u5404\u6570\u5b57\u7684\u51fa\u73b0\u6b21\u6570\n    for (int i = 0; i < n; i++) {\n        int d = digit(nums[i], exp); // \u83b7\u53d6 nums[i] \u7b2c k \u4f4d\uff0c\u8bb0\u4e3a d\n        counter[d]++;                // \u7edf\u8ba1\u6570\u5b57 d \u7684\u51fa\u73b0\u6b21\u6570\n    }\n    // \u6c42\u524d\u7f00\u548c\uff0c\u5c06\u201c\u51fa\u73b0\u4e2a\u6570\u201d\u8f6c\u6362\u4e3a\u201c\u6570\u7ec4\u7d22\u5f15\u201d\n    for (int i = 1; i < 10; i++) {\n        counter[i] += counter[i - 1];\n    }\n    // \u5012\u5e8f\u904d\u5386\uff0c\u6839\u636e\u6876\u5185\u7edf\u8ba1\u7ed3\u679c\uff0c\u5c06\u5404\u5143\u7d20\u586b\u5165 res\n    vector<int> res(n, 0);\n    for (int i = n - 1; i >= 0; i--) {\n        int d = digit(nums[i], exp);\n        int j = counter[d] - 1; // \u83b7\u53d6 d \u5728\u6570\u7ec4\u4e2d\u7684\u7d22\u5f15 j\n        res[j] = nums[i];       // \u5c06\u5f53\u524d\u5143\u7d20\u586b\u5165\u7d22\u5f15 j\n        counter[d]--;           // \u5c06 d \u7684\u6570\u91cf\u51cf 1\n    }\n    // \u4f7f\u7528\u7ed3\u679c\u8986\u76d6\u539f\u6570\u7ec4 nums\n    for (int i = 0; i < n; i++)\n        nums[i] = res[i];\n}", "doc_comment": "/* \u8ba1\u6570\u6392\u5e8f\uff08\u6839\u636e nums \u7b2c k \u4f4d\u6392\u5e8f\uff09 */"}, "code_tokens": ["void", "countingSortDigit", "(", ",", ")", "{", "// \u5341\u8fdb\u5236\u7684\u4f4d\u8303\u56f4\u4e3a 0~9 \uff0c\u56e0\u6b64\u9700\u8981\u957f\u5ea6\u4e3a 10 \u7684\u6876\u6570\u7ec4", "// \u7edf\u8ba1 0~9 \u5404\u6570\u5b57\u7684\u51fa\u73b0\u6b21\u6570", "// \u6c42\u524d\u7f00\u548c\uff0c\u5c06\u201c\u51fa\u73b0\u4e2a\u6570\u201d\u8f6c\u6362\u4e3a\u201c\u6570\u7ec4\u7d22\u5f15\u201d", "// \u5012\u5e8f\u904d\u5386\uff0c\u6839\u636e\u6876\u5185\u7edf\u8ba1\u7ed3\u679c\uff0c\u5c06\u5404\u5143\u7d20\u586b\u5165 res", "// \u4f7f\u7528\u7ed3\u679c\u8986\u76d6\u539f\u6570\u7ec4 nums", "}", "nums", "exp", "", ";", ";", "for", "(", ";", ")", "for", "(", ";", ")", "", ";", "for", "(", ";", ")", "for", "(", ";", ")", "vector", "&", "int", "vector", "counter", "(", "10", ")", "int", "n", "=", ";", "i", "<", "n", "i", "++", "{", "// \u83b7\u53d6 nums[i] \u7b2c k \u4f4d\uff0c\u8bb0\u4e3a d", "// \u7edf\u8ba1\u6570\u5b57 d \u7684\u51fa\u73b0\u6b21\u6570", "}", ";", "i", "<", "10", "i", "++", "{", "}", "vector", "res", "(", "0", ")", ";", "i", ">=", "0", "i", "--", "{", "// \u83b7\u53d6 d \u5728\u6570\u7ec4\u4e2d\u7684\u7d22\u5f15 j", "// \u5c06\u5f53\u524d\u5143\u7d20\u586b\u5165\u7d22\u5f15 j", "// \u5c06 d \u7684\u6570\u91cf\u51cf 1", "}", ";", "i", "<", "n", "i", "++", ";", "<", ">", "<", ">", ",", "0", "nums", ".", "size", "int", "i", "=", "0", ";", ";", "int", "i", "=", "1", ";", "<", ">", "n", ",", "int", "i", "=", ";", ";", ";", ";", "int", "i", "=", "0", "=", "int", "int", "(", ")", "int", "d", "=", "++", "+=", "int", "n", "-", "1", "int", "d", "=", "int", "j", "=", "=", "--", "nums", "[", "i", "]", "res", "[", "i", "]", "digit", "counter", "[", "d", "]", "counter", "[", "i", "]", "counter", "[", "]", "digit", "-", "1", "res", "[", "j", "]", "nums", "[", "i", "]", "counter", "[", "d", "]", "(", ",", "exp", ")", "i", "-", "1", "(", ",", "exp", ")", "counter", "[", "d", "]", "nums", "[", "i", "]", "nums", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 298, "ast_depth": 11, "n_identifiers": 11, "vocab_size": 47}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_sorting/radix_sort.cpp#43-53", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_sorting/radix_sort.cpp", "language": "Java"}, "method": {"name": "radixSort", "qualified_name": "codes.cpp.chapter_sorting.radix_sort.cpp#radixSort", "start_line": 43, "end_line": 53, "signature": "radixSort(vector<int> &nums)", "original_code": "void radixSort(vector<int> &nums) {\n    // \u83b7\u53d6\u6570\u7ec4\u7684\u6700\u5927\u5143\u7d20\uff0c\u7528\u4e8e\u5224\u65ad\u6700\u5927\u4f4d\u6570\n    int m = *max_element(nums.begin(), nums.end());\n    // \u6309\u7167\u4ece\u4f4e\u4f4d\u5230\u9ad8\u4f4d\u7684\u987a\u5e8f\u904d\u5386\n    for (int exp = 1; exp <= m; exp *= 10)\n        // \u5bf9\u6570\u7ec4\u5143\u7d20\u7684\u7b2c k \u4f4d\u6267\u884c\u8ba1\u6570\u6392\u5e8f\n        // k = 1 -> exp = 1\n        // k = 2 -> exp = 10\n        // \u5373 exp = 10^(k-1)\n        countingSortDigit(nums, exp);\n}", "doc_comment": "/* \u57fa\u6570\u6392\u5e8f */"}, "code_tokens": ["void", "radixSort", "(", ")", "{", "// \u83b7\u53d6\u6570\u7ec4\u7684\u6700\u5927\u5143\u7d20\uff0c\u7528\u4e8e\u5224\u65ad\u6700\u5927\u4f4d\u6570", "// \u6309\u7167\u4ece\u4f4e\u4f4d\u5230\u9ad8\u4f4d\u7684\u987a\u5e8f\u904d\u5386", "}", "nums", ";", "for", "(", ";", ")", "// \u5bf9\u6570\u7ec4\u5143\u7d20\u7684\u7b2c k \u4f4d\u6267\u884c\u8ba1\u6570\u6392\u5e8f", "// k = 1 -> exp = 1", "// k = 2 -> exp = 10", "// \u5373 exp = 10^(k-1)", "vector", "&", "int", "m", "=", ";", "exp", "<=", "m", "exp", "*=", "10", ";", "<", ">", "*", "max_element", "int", "exp", "=", "1", "countingSortDigit", "int", "(", ",", ")", "(", "nums", ",", "exp", ")", "nums", ".", "begin", "nums", ".", "end", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 87, "ast_depth": 10, "n_identifiers": 8, "vocab_size": 34}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_sorting/radix_sort.cpp#56-65", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_sorting/radix_sort.cpp", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.cpp.chapter_sorting.radix_sort.cpp#main", "start_line": 56, "end_line": 65, "signature": "main()", "original_code": "int main() {\n    // \u57fa\u6570\u6392\u5e8f\n    vector<int> nums = {10546151, 35663510, 42865989, 34862445, 81883077,\n                        88906420, 72429244, 30524779, 82060337, 63832996};\n    radixSort(nums);\n    cout << \"\u57fa\u6570\u6392\u5e8f\u5b8c\u6210\u540e nums = \";\n    printVector(nums);\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "// \u57fa\u6570\u6392\u5e8f", "}", ";", ";", ";", ";", "return", "0", ";", "vector", "nums", "=", "radixSort", "cout", "<<", "printVector", "<", ">", "{", "10546151", ",", "35663510", ",", "42865989", ",", "34862445", ",", "81883077", ",", "88906420", ",", "72429244", ",", "30524779", ",", "82060337", ",", "63832996", "}", "(", "nums", ")", "\"", "\u57fa\u6570\u6392\u5e8f\u5b8c\u6210\u540e nums = ", "\"", "(", "nums", ")", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 75, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 32}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_stack_and_queue/linkedlist_deque.cpp#41-43", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_stack_and_queue/linkedlist_deque.cpp", "language": "Java"}, "method": {"name": "size", "qualified_name": "codes.cpp.chapter_stack_and_queue.linkedlist_deque.cpp#size", "start_line": 41, "end_line": 43, "signature": "size()", "original_code": "int size() {\n        return queSize;\n    }", "doc_comment": "/* \u83b7\u53d6\u53cc\u5411\u961f\u5217\u7684\u957f\u5ea6 */"}, "code_tokens": ["size", "int", "(", ")", "{", "}", "return", "queSize", ";"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 15, "ast_depth": 5, "n_identifiers": 2, "vocab_size": 9}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_stack_and_queue/linkedlist_deque.cpp#46-48", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_stack_and_queue/linkedlist_deque.cpp", "language": "Java"}, "method": {"name": "isEmpty", "qualified_name": "codes.cpp.chapter_stack_and_queue.linkedlist_deque.cpp#isEmpty", "start_line": 46, "end_line": 48, "signature": "isEmpty()", "original_code": "bool isEmpty() {\n        return size() == 0;\n    }", "doc_comment": "/* \u5224\u65ad\u53cc\u5411\u961f\u5217\u662f\u5426\u4e3a\u7a7a */"}, "code_tokens": ["bool", "isEmpty", "(", ")", "{", "}", "return", ";", "==", "0", "size", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 21, "ast_depth": 8, "n_identifiers": 2, "vocab_size": 11}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_stack_and_queue/linkedlist_deque.cpp#51-70", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_stack_and_queue/linkedlist_deque.cpp", "language": "Java"}, "method": {"name": "push", "qualified_name": "codes.cpp.chapter_stack_and_queue.linkedlist_deque.cpp#push", "start_line": 51, "end_line": 70, "signature": "push(int num, bool isFront)", "original_code": "void push(int num, bool isFront) {\n        DoublyListNode *node = new DoublyListNode(num);\n        // \u82e5\u94fe\u8868\u4e3a\u7a7a\uff0c\u5219\u4ee4 front \u548c rear \u90fd\u6307\u5411 node\n        if (isEmpty())\n            front = rear = node;\n        // \u961f\u9996\u5165\u961f\u64cd\u4f5c\n        else if (isFront) {\n            // \u5c06 node \u6dfb\u52a0\u81f3\u94fe\u8868\u5934\u90e8\n            front->prev = node;\n            node->next = front;\n            front = node; // \u66f4\u65b0\u5934\u8282\u70b9\n        // \u961f\u5c3e\u5165\u961f\u64cd\u4f5c\n        } else {\n            // \u5c06 node \u6dfb\u52a0\u81f3\u94fe\u8868\u5c3e\u90e8\n            rear->next = node;\n            node->prev = rear;\n            rear = node; // \u66f4\u65b0\u5c3e\u8282\u70b9\n        }\n        queSize++; // \u66f4\u65b0\u961f\u5217\u957f\u5ea6\n    }", "doc_comment": "/* \u5165\u961f\u64cd\u4f5c */"}, "code_tokens": ["void", "push", "(", ",", ")", "{", "// \u82e5\u94fe\u8868\u4e3a\u7a7a\uff0c\u5219\u4ee4 front \u548c rear \u90fd\u6307\u5411 node", "// \u66f4\u65b0\u961f\u5217\u957f\u5ea6", "}", "num", "bool", "isFront", ";", "if", "// \u961f\u9996\u5165\u961f\u64cd\u4f5c", "else", ";", "int", "DoublyListNode", "*", "(", ")", ";", "if", "else", "queSize", "++", "node", "=", "isEmpty", "front", "=", "(", "isFront", ")", "{", "// \u5c06 node \u6dfb\u52a0\u81f3\u94fe\u8868\u5934\u90e8", "// \u66f4\u65b0\u5934\u8282\u70b9", "// \u961f\u5c3e\u5165\u961f\u64cd\u4f5c", "}", "{", "// \u5c06 node \u6dfb\u52a0\u81f3\u94fe\u8868\u5c3e\u90e8", "// \u66f4\u65b0\u5c3e\u8282\u70b9", "}", "new", "DoublyListNode", "(", ")", "rear", "=", "node", ";", ";", ";", ";", ";", ";", "(", "num", ")", "front", "->", "node", "->", "front", "=", "node", "rear", "->", "node", "->", "rear", "=", "node", "prev", "=", "node", "next", "=", "front", "next", "=", "node", "prev", "=", "rear"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 127, "ast_depth": 10, "n_identifiers": 11, "vocab_size": 35}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_stack_and_queue/linkedlist_deque.cpp#73-75", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_stack_and_queue/linkedlist_deque.cpp", "language": "Java"}, "method": {"name": "pushFirst", "qualified_name": "codes.cpp.chapter_stack_and_queue.linkedlist_deque.cpp#pushFirst", "start_line": 73, "end_line": 75, "signature": "pushFirst(int num)", "original_code": "void pushFirst(int num) {\n        push(num, true);\n    }", "doc_comment": "/* \u961f\u9996\u5165\u961f */"}, "code_tokens": ["void", "pushFirst", "(", ")", "{", "}", "num", ";", "int", "push", "(", "num", ",", "true", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 24, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 12}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_stack_and_queue/linkedlist_deque.cpp#78-80", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_stack_and_queue/linkedlist_deque.cpp", "language": "Java"}, "method": {"name": "pushLast", "qualified_name": "codes.cpp.chapter_stack_and_queue.linkedlist_deque.cpp#pushLast", "start_line": 78, "end_line": 80, "signature": "pushLast(int num)", "original_code": "void pushLast(int num) {\n        push(num, false);\n    }", "doc_comment": "/* \u961f\u5c3e\u5165\u961f */"}, "code_tokens": ["void", "pushLast", "(", ")", "{", "}", "num", ";", "int", "push", "(", "num", ",", "false", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 24, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 12}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_stack_and_queue/linkedlist_deque.cpp#83-112", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_stack_and_queue/linkedlist_deque.cpp", "language": "Java"}, "method": {"name": "pop", "qualified_name": "codes.cpp.chapter_stack_and_queue.linkedlist_deque.cpp#pop", "start_line": 83, "end_line": 112, "signature": "pop(bool isFront)", "original_code": "int pop(bool isFront) {\n        if (isEmpty())\n            throw out_of_range(\"\u961f\u5217\u4e3a\u7a7a\");\n        int val;\n        // \u961f\u9996\u51fa\u961f\u64cd\u4f5c\n        if (isFront) {\n            val = front->val; // \u6682\u5b58\u5934\u8282\u70b9\u503c\n            // \u5220\u9664\u5934\u8282\u70b9\n            DoublyListNode *fNext = front->next;\n            if (fNext != nullptr) {\n                fNext->prev = nullptr;\n                front->next = nullptr;\n                delete front;\n            }\n            front = fNext; // \u66f4\u65b0\u5934\u8282\u70b9\n        // \u961f\u5c3e\u51fa\u961f\u64cd\u4f5c\n        } else {\n            val = rear->val; // \u6682\u5b58\u5c3e\u8282\u70b9\u503c\n            // \u5220\u9664\u5c3e\u8282\u70b9\n            DoublyListNode *rPrev = rear->prev;\n            if (rPrev != nullptr) {\n                rPrev->next = nullptr;\n                rear->prev = nullptr;\n                delete rear;\n            }\n            rear = rPrev; // \u66f4\u65b0\u5c3e\u8282\u70b9\n        }\n        queSize--; // \u66f4\u65b0\u961f\u5217\u957f\u5ea6\n        return val;\n    }", "doc_comment": "/* \u51fa\u961f\u64cd\u4f5c */"}, "code_tokens": ["pop", "int", "(", ")", "{", "// \u961f\u9996\u51fa\u961f\u64cd\u4f5c", "// \u66f4\u65b0\u961f\u5217\u957f\u5ea6", "}", "bool", "isFront", "if", ";", "if", "else", ";", "return", "val", ";", "(", ")", "throw", ";", "int", "val", "(", "isFront", ")", "{", "// \u6682\u5b58\u5934\u8282\u70b9\u503c", "// \u5220\u9664\u5934\u8282\u70b9", "// \u66f4\u65b0\u5934\u8282\u70b9", "// \u961f\u5c3e\u51fa\u961f\u64cd\u4f5c", "}", "{", "// \u6682\u5b58\u5c3e\u8282\u70b9\u503c", "// \u5220\u9664\u5c3e\u8282\u70b9", "// \u66f4\u65b0\u5c3e\u8282\u70b9", "}", "queSize", "--", "isEmpty", "out_of_range", ";", ";", "if", ";", ";", ";", "if", ";", "(", ")", "(", ")", "val", "=", "DoublyListNode", "*", "(", ")", "{", "}", "front", "=", "fNext", "val", "=", "DoublyListNode", "*", "(", ")", "{", "}", "rear", "=", "rPrev", "\"", "\u961f\u5217\u4e3a\u7a7a", "\"", "front", "->", "val", "fNext", "=", "fNext", "!=", "nullptr", ";", ";", "delete", ";", "rear", "->", "val", "rPrev", "=", "rPrev", "!=", "nullptr", ";", ";", "delete", ";", "front", "->", "next", "fNext", "->", "front", "->", "front", "rear", "->", "prev", "rPrev", "->", "rear", "->", "rear", "prev", "=", "nullptr", "next", "=", "nullptr", "next", "=", "nullptr", "prev", "=", "nullptr"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 197, "ast_depth": 11, "n_identifiers": 14, "vocab_size": 42}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_stack_and_queue/linkedlist_deque.cpp#115-117", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_stack_and_queue/linkedlist_deque.cpp", "language": "Java"}, "method": {"name": "popFirst", "qualified_name": "codes.cpp.chapter_stack_and_queue.linkedlist_deque.cpp#popFirst", "start_line": 115, "end_line": 117, "signature": "popFirst()", "original_code": "int popFirst() {\n        return pop(true);\n    }", "doc_comment": "/* \u961f\u9996\u51fa\u961f */"}, "code_tokens": ["popFirst", "int", "(", ")", "{", "}", "return", ";", "pop", "(", "true", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 20, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 10}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_stack_and_queue/linkedlist_deque.cpp#120-122", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_stack_and_queue/linkedlist_deque.cpp", "language": "Java"}, "method": {"name": "popLast", "qualified_name": "codes.cpp.chapter_stack_and_queue.linkedlist_deque.cpp#popLast", "start_line": 120, "end_line": 122, "signature": "popLast()", "original_code": "int popLast() {\n        return pop(false);\n    }", "doc_comment": "/* \u961f\u5c3e\u51fa\u961f */"}, "code_tokens": ["popLast", "int", "(", ")", "{", "}", "return", ";", "pop", "(", "false", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 20, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 10}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_stack_and_queue/linkedlist_deque.cpp#125-129", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_stack_and_queue/linkedlist_deque.cpp", "language": "Java"}, "method": {"name": "peekFirst", "qualified_name": "codes.cpp.chapter_stack_and_queue.linkedlist_deque.cpp#peekFirst", "start_line": 125, "end_line": 129, "signature": "peekFirst()", "original_code": "int peekFirst() {\n        if (isEmpty())\n            throw out_of_range(\"\u53cc\u5411\u961f\u5217\u4e3a\u7a7a\");\n        return front->val;\n    }", "doc_comment": "/* \u8bbf\u95ee\u961f\u9996\u5143\u7d20 */"}, "code_tokens": ["peekFirst", "int", "(", ")", "{", "}", "if", "return", ";", "(", ")", "throw", ";", "front", "->", "val", "isEmpty", "out_of_range", "(", ")", "(", ")", "\"", "\u53cc\u5411\u961f\u5217\u4e3a\u7a7a", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 40, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 17}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_stack_and_queue/linkedlist_deque.cpp#132-136", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_stack_and_queue/linkedlist_deque.cpp", "language": "Java"}, "method": {"name": "peekLast", "qualified_name": "codes.cpp.chapter_stack_and_queue.linkedlist_deque.cpp#peekLast", "start_line": 132, "end_line": 136, "signature": "peekLast()", "original_code": "int peekLast() {\n        if (isEmpty())\n            throw out_of_range(\"\u53cc\u5411\u961f\u5217\u4e3a\u7a7a\");\n        return rear->val;\n    }", "doc_comment": "/* \u8bbf\u95ee\u961f\u5c3e\u5143\u7d20 */"}, "code_tokens": ["peekLast", "int", "(", ")", "{", "}", "if", "return", ";", "(", ")", "throw", ";", "rear", "->", "val", "isEmpty", "out_of_range", "(", ")", "(", ")", "\"", "\u53cc\u5411\u961f\u5217\u4e3a\u7a7a", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 40, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 17}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_stack_and_queue/linkedlist_deque.cpp#139-147", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_stack_and_queue/linkedlist_deque.cpp", "language": "Java"}, "method": {"name": "toVector", "qualified_name": "codes.cpp.chapter_stack_and_queue.linkedlist_deque.cpp#toVector", "start_line": 139, "end_line": 147, "signature": "toVector()", "original_code": "vector<int> toVector() {\n        DoublyListNode *node = front;\n        vector<int> res(size());\n        for (int i = 0; i < res.size(); i++) {\n            res[i] = node->val;\n            node = node->next;\n        }\n        return res;\n    }", "doc_comment": "/* \u8fd4\u56de\u6570\u7ec4\u7528\u4e8e\u6253\u5370 */"}, "code_tokens": ["toVector", "vector", "(", ")", "{", "}", "<", ">", ";", "", ";", "for", "(", ";", ")", "return", "res", ";", "int", "DoublyListNode", "*", "vector", "res", "(", ")", ";", "i", "<", "i", "++", "{", "}", "node", "=", "front", "<", ">", "size", "int", "i", "=", "0", "res", ".", "size", ";", ";", "int", "(", ")", "(", ")", "=", "node", "=", "res", "[", "i", "]", "node", "->", "val", "node", "->", "next"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 101, "ast_depth": 9, "n_identifiers": 9, "vocab_size": 29}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_stack_and_queue/linkedlist_deque.cpp#151-194", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_stack_and_queue/linkedlist_deque.cpp", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.cpp.chapter_stack_and_queue.linkedlist_deque.cpp#main", "start_line": 151, "end_line": 194, "signature": "main()", "original_code": "int main() {\n    /* \u521d\u59cb\u5316\u53cc\u5411\u961f\u5217 */\n    LinkedListDeque *deque = new LinkedListDeque();\n    deque->pushLast(3);\n    deque->pushLast(2);\n    deque->pushLast(5);\n    cout << \"\u53cc\u5411\u961f\u5217 deque = \";\n    printVector(deque->toVector());\n\n    /* \u8bbf\u95ee\u5143\u7d20 */\n    int peekFirst = deque->peekFirst();\n    cout << \"\u961f\u9996\u5143\u7d20 peekFirst = \" << peekFirst << endl;\n    int peekLast = deque->peekLast();\n    cout << \"\u961f\u5c3e\u5143\u7d20 peekLast = \" << peekLast << endl;\n\n    /* \u5143\u7d20\u5165\u961f */\n    deque->pushLast(4);\n    cout << \"\u5143\u7d20 4 \u961f\u5c3e\u5165\u961f\u540e deque =\";\n    printVector(deque->toVector());\n    deque->pushFirst(1);\n    cout << \"\u5143\u7d20 1 \u961f\u9996\u5165\u961f\u540e deque = \";\n    printVector(deque->toVector());\n\n    /* \u5143\u7d20\u51fa\u961f */\n    int popLast = deque->popLast();\n    cout << \"\u961f\u5c3e\u51fa\u961f\u5143\u7d20 = \" << popLast << \"\uff0c\u961f\u5c3e\u51fa\u961f\u540e deque = \";\n    printVector(deque->toVector());\n    int popFirst = deque->popFirst();\n    cout << \"\u961f\u9996\u51fa\u961f\u5143\u7d20 = \" << popFirst << \"\uff0c\u961f\u9996\u51fa\u961f\u540e deque = \";\n    printVector(deque->toVector());\n\n    /* \u83b7\u53d6\u53cc\u5411\u961f\u5217\u7684\u957f\u5ea6 */\n    int size = deque->size();\n    cout << \"\u53cc\u5411\u961f\u5217\u957f\u5ea6 size = \" << size << endl;\n\n    /* \u5224\u65ad\u53cc\u5411\u961f\u5217\u662f\u5426\u4e3a\u7a7a */\n    bool isEmpty = deque->isEmpty();\n    cout << \"\u53cc\u5411\u961f\u5217\u662f\u5426\u4e3a\u7a7a = \" << boolalpha << isEmpty << endl;\n\n    // \u91ca\u653e\u5185\u5b58\n    delete deque;\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "/* \u521d\u59cb\u5316\u53cc\u5411\u961f\u5217 */", "/* \u8bbf\u95ee\u5143\u7d20 */", "/* \u5143\u7d20\u5165\u961f */", "/* \u5143\u7d20\u51fa\u961f */", "/* \u83b7\u53d6\u53cc\u5411\u961f\u5217\u7684\u957f\u5ea6 */", "/* \u5224\u65ad\u53cc\u5411\u961f\u5217\u662f\u5426\u4e3a\u7a7a */", "// \u91ca\u653e\u5185\u5b58", "}", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "bool", ";", ";", "delete", ";", "return", "0", ";", "LinkedListDeque", "*", "deque", "->", "deque", "->", "deque", "->", "cout", "<<", "printVector", "int", "peekFirst", "=", "<<", "endl", "int", "peekLast", "=", "<<", "endl", "deque", "->", "cout", "<<", "printVector", "deque", "->", "cout", "<<", "printVector", "int", "popLast", "=", "<<", "printVector", "int", "popFirst", "=", "<<", "printVector", "int", "size", "=", "<<", "endl", "isEmpty", "=", "<<", "endl", "deque", "deque", "=", "pushLast", "pushLast", "pushLast", "\"", "\u53cc\u5411\u961f\u5217 deque = ", "\"", "(", ")", "deque", "->", "<<", "peekFirst", "deque", "->", "<<", "peekLast", "pushLast", "\"", "\u5143\u7d20 4 \u961f\u5c3e\u5165\u961f\u540e deque =", "\"", "(", ")", "pushFirst", "\"", "\u5143\u7d20 1 \u961f\u9996\u5165\u961f\u540e deque = ", "\"", "(", ")", "deque", "->", "<<", "popLast", "\"", "\uff0c\u961f\u5c3e\u51fa\u961f\u540e deque = ", "\"", "(", ")", "deque", "->", "<<", "popFirst", "\"", "\uff0c\u961f\u9996\u51fa\u961f\u540e deque = ", "\"", "(", ")", "deque", "->", "<<", "size", "deque", "->", "<<", "isEmpty", "new", "LinkedListDeque", "(", "3", ")", "(", "2", ")", "(", "5", ")", "deque", "->", "peekFirst", "cout", "<<", "peekLast", "cout", "<<", "(", "4", ")", "deque", "->", "(", "1", ")", "deque", "->", "popLast", "cout", "<<", "deque", "->", "popFirst", "cout", "<<", "deque", "->", "size", "cout", "<<", "isEmpty", "<<", "boolalpha", "(", ")", "toVector", "(", ")", "\"", "\u961f\u9996\u5143\u7d20 peekFirst = ", "\"", "(", ")", "\"", "\u961f\u5c3e\u5143\u7d20 peekLast = ", "\"", "toVector", "toVector", "(", ")", "\"", "\u961f\u5c3e\u51fa\u961f\u5143\u7d20 = ", "\"", "toVector", "(", ")", "\"", "\u961f\u9996\u51fa\u961f\u5143\u7d20 = ", "\"", "toVector", "(", ")", "\"", "\u53cc\u5411\u961f\u5217\u957f\u5ea6 size = ", "\"", "(", ")", "cout", "<<", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "\"", "\u53cc\u5411\u961f\u5217\u662f\u5426\u4e3a\u7a7a = ", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 386, "ast_depth": 10, "n_identifiers": 16, "vocab_size": 55}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/cpp/chapter_tree/binary_tree.cpp#10-43", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/cpp/chapter_tree/binary_tree.cpp", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.cpp.chapter_tree.binary_tree.cpp#main", "start_line": 10, "end_line": 43, "signature": "main()", "original_code": "int main() {\n    /* \u521d\u59cb\u5316\u4e8c\u53c9\u6811 */\n    // \u521d\u59cb\u5316\u8282\u70b9\n    TreeNode *n1 = new TreeNode(1);\n    TreeNode *n2 = new TreeNode(2);\n    TreeNode *n3 = new TreeNode(3);\n    TreeNode *n4 = new TreeNode(4);\n    TreeNode *n5 = new TreeNode(5);\n    // \u6784\u5efa\u8282\u70b9\u4e4b\u95f4\u7684\u5f15\u7528\uff08\u6307\u9488\uff09\n    n1->left = n2;\n    n1->right = n3;\n    n2->left = n4;\n    n2->right = n5;\n    cout << endl << \"\u521d\u59cb\u5316\u4e8c\u53c9\u6811\\n\" << endl;\n    printTree(n1);\n\n    /* \u63d2\u5165\u4e0e\u5220\u9664\u8282\u70b9 */\n    TreeNode *P = new TreeNode(0);\n    // \u5728 n1 -> n2 \u4e2d\u95f4\u63d2\u5165\u8282\u70b9 P\n    n1->left = P;\n    P->left = n2;\n    cout << endl << \"\u63d2\u5165\u8282\u70b9 P \u540e\\n\" << endl;\n    printTree(n1);\n    // \u5220\u9664\u8282\u70b9 P\n    n1->left = n2;\n    delete P; // \u91ca\u653e\u5185\u5b58\n    cout << endl << \"\u5220\u9664\u8282\u70b9 P \u540e\\n\" << endl;\n    printTree(n1);\n\n    // \u91ca\u653e\u5185\u5b58\n    freeMemoryTree(n1);\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "/* \u521d\u59cb\u5316\u4e8c\u53c9\u6811 */", "// \u521d\u59cb\u5316\u8282\u70b9", "// \u6784\u5efa\u8282\u70b9\u4e4b\u95f4\u7684\u5f15\u7528\uff08\u6307\u9488\uff09", "/* \u63d2\u5165\u4e0e\u5220\u9664\u8282\u70b9 */", "// \u5728 n1 -> n2 \u4e2d\u95f4\u63d2\u5165\u8282\u70b9 P", "// \u5220\u9664\u8282\u70b9 P", "// \u91ca\u653e\u5185\u5b58", "// \u91ca\u653e\u5185\u5b58", "}", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "delete", ";", ";", ";", ";", "return", "0", ";", "TreeNode", "*", "TreeNode", "*", "TreeNode", "*", "TreeNode", "*", "TreeNode", "*", "n1", "->", "n1", "->", "n2", "->", "n2", "->", "<<", "endl", "printTree", "TreeNode", "*", "n1", "->", "P", "->", "<<", "endl", "printTree", "n1", "->", "P", "<<", "endl", "printTree", "freeMemoryTree", "n1", "=", "n2", "=", "n3", "=", "n4", "=", "n5", "=", "left", "=", "n2", "right", "=", "n3", "left", "=", "n4", "right", "=", "n5", "<<", "(", "n1", ")", "P", "=", "left", "=", "P", "left", "=", "n2", "<<", "(", "n1", ")", "left", "=", "n2", "<<", "(", "n1", ")", "(", "n1", ")", "new", "TreeNode", "new", "TreeNode", "new", "TreeNode", "new", "TreeNode", "new", "TreeNode", "cout", "<<", "endl", "\"", "\u521d\u59cb\u5316\u4e8c\u53c9\u6811", "\\n", "\"", "new", "TreeNode", "cout", "<<", "endl", "\"", "\u63d2\u5165\u8282\u70b9 P \u540e", "\\n", "\"", "cout", "<<", "endl", "\"", "\u5220\u9664\u8282\u70b9 P \u540e", "\\n", "\"", "(", "1", ")", "(", "2", ")", "(", "3", ")", "(", "4", ")", "(", "5", ")", "(", "0", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 261, "ast_depth": 9, "n_identifiers": 14, "vocab_size": 45}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_array_and_linkedlist/array.cs#9-16", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_array_and_linkedlist/array.cs", "language": "Java"}, "method": {"name": "RandomAccess", "qualified_name": "codes.csharp.chapter_array_and_linkedlist.array.cs#RandomAccess", "start_line": 9, "end_line": 16, "signature": "RandomAccess(int[] nums)", "original_code": "int RandomAccess(int[] nums) {\n        Random random = new();\n        // \u5728\u533a\u95f4 [0, nums.Length) \u4e2d\u968f\u673a\u62bd\u53d6\u4e00\u4e2a\u6570\u5b57\n        int randomIndex = random.Next(nums.Length);\n        // \u83b7\u53d6\u5e76\u8fd4\u56de\u968f\u673a\u5143\u7d20\n        int randomNum = nums[randomIndex];\n        return randomNum;\n    }", "doc_comment": "/* \u968f\u673a\u8bbf\u95ee\u5143\u7d20 */"}, "code_tokens": ["RandomAccess", "int", "(", ")", "{", "// \u5728\u533a\u95f4 [0, nums.Length) \u4e2d\u968f\u673a\u62bd\u53d6\u4e00\u4e2a\u6570\u5b57", "// \u83b7\u53d6\u5e76\u8fd4\u56de\u968f\u673a\u5143\u7d20", "}", "nums", "Random", ";", ";", ";", "return", "randomNum", ";", "random", "=", "int", "randomIndex", "=", "int", "randomNum", "=", "int", "[", "]", "new", "random", ".", "Next", "nums", "[", "randomIndex", "]", "", "(", ")", "(", ")", "nums", ".", "Length"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 68, "ast_depth": 9, "n_identifiers": 7, "vocab_size": 23}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_array_and_linkedlist/array.cs#19-28", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_array_and_linkedlist/array.cs", "language": "Java"}, "method": {"name": "Extend", "qualified_name": "codes.csharp.chapter_array_and_linkedlist.array.cs#Extend", "start_line": 19, "end_line": 28, "signature": "Extend(int[] nums, int enlarge)", "original_code": "int[] Extend(int[] nums, int enlarge) {\n        // \u521d\u59cb\u5316\u4e00\u4e2a\u6269\u5c55\u957f\u5ea6\u540e\u7684\u6570\u7ec4\n        int[] res = new int[nums.Length + enlarge];\n        // \u5c06\u539f\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u5143\u7d20\u590d\u5236\u5230\u65b0\u6570\u7ec4\n        for (int i = 0; i < nums.Length; i++) {\n            res[i] = nums[i];\n        }\n        // \u8fd4\u56de\u6269\u5c55\u540e\u7684\u65b0\u6570\u7ec4\n        return res;\n    }", "doc_comment": "/* \u6269\u5c55\u6570\u7ec4\u957f\u5ea6 */"}, "code_tokens": ["Extend", "(", ",", ")", "{", "// \u521d\u59cb\u5316\u4e00\u4e2a\u6269\u5c55\u957f\u5ea6\u540e\u7684\u6570\u7ec4", "// \u5c06\u539f\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u5143\u7d20\u590d\u5236\u5230\u65b0\u6570\u7ec4", "// \u8fd4\u56de\u6269\u5c55\u540e\u7684\u65b0\u6570\u7ec4", "}", "int", "[", "]", "nums", "enlarge", ";", "for", "(", ";", ")", "return", "res", ";", "int", "res", "=", ";", "i", "<", "i", "++", "{", "}", "int", "[", "]", "int", "[", "]", "new", "int", "i", "=", "0", "nums", ".", "Length", ";", "int", "[", "]", "=", "+", "enlarge", "res", "[", "i", "]", "nums", "[", "i", "]", "nums", ".", "Length"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 100, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 27}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_array_and_linkedlist/array.cs#31-38", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_array_and_linkedlist/array.cs", "language": "Java"}, "method": {"name": "Insert", "qualified_name": "codes.csharp.chapter_array_and_linkedlist.array.cs#Insert", "start_line": 31, "end_line": 38, "signature": "Insert(int[] nums, int num, int index)", "original_code": "void Insert(int[] nums, int num, int index) {\n        // \u628a\u7d22\u5f15 index \u4ee5\u53ca\u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u540e\u79fb\u52a8\u4e00\u4f4d\n        for (int i = nums.Length - 1; i > index; i--) {\n            nums[i] = nums[i - 1];\n        }\n        // \u5c06 num \u8d4b\u7ed9 index \u5904\u7684\u5143\u7d20\n        nums[index] = num;\n    }", "doc_comment": "/* \u5728\u6570\u7ec4\u7684\u7d22\u5f15 index \u5904\u63d2\u5165\u5143\u7d20 num */"}, "code_tokens": ["void", "Insert", "(", ",", ",", ")", "{", "// \u628a\u7d22\u5f15 index \u4ee5\u53ca\u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u540e\u79fb\u52a8\u4e00\u4f4d", "// \u5c06 num \u8d4b\u7ed9 index \u5904\u7684\u5143\u7d20", "}", "nums", "num", "index", "for", "(", ";", ")", ";", "int", "int", ";", "i", ">", "index", "i", "--", "{", "}", "=", "num", "int", "[", "]", "int", "i", "=", ";", "nums", "[", "index", "]", "-", "1", "=", "nums", ".", "Length", "nums", "[", "i", "]", "nums", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 86, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 25}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_array_and_linkedlist/array.cs#41-46", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_array_and_linkedlist/array.cs", "language": "Java"}, "method": {"name": "Remove", "qualified_name": "codes.csharp.chapter_array_and_linkedlist.array.cs#Remove", "start_line": 41, "end_line": 46, "signature": "Remove(int[] nums, int index)", "original_code": "void Remove(int[] nums, int index) {\n        // \u628a\u7d22\u5f15 index \u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u524d\u79fb\u52a8\u4e00\u4f4d\n        for (int i = index; i < nums.Length - 1; i++) {\n            nums[i] = nums[i + 1];\n        }\n    }", "doc_comment": "/* \u5220\u9664\u7d22\u5f15 index \u5904\u7684\u5143\u7d20 */"}, "code_tokens": ["void", "Remove", "(", ",", ")", "{", "// \u628a\u7d22\u5f15 index \u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u524d\u79fb\u52a8\u4e00\u4f4d", "}", "nums", "index", "for", "(", ";", ")", "int", ";", "i", "<", "i", "++", "{", "}", "int", "[", "]", "int", "i", "=", "index", "-", "1", ";", "nums", ".", "Length", "=", "nums", "[", "i", "]", "nums", "[", "]", "i", "+", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 70, "ast_depth": 10, "n_identifiers": 5, "vocab_size": 24}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_array_and_linkedlist/array.cs#49-59", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_array_and_linkedlist/array.cs", "language": "Java"}, "method": {"name": "Traverse", "qualified_name": "codes.csharp.chapter_array_and_linkedlist.array.cs#Traverse", "start_line": 49, "end_line": 59, "signature": "Traverse(int[] nums)", "original_code": "void Traverse(int[] nums) {\n        int count = 0;\n        // \u901a\u8fc7\u7d22\u5f15\u904d\u5386\u6570\u7ec4\n        for (int i = 0; i < nums.Length; i++) {\n            count += nums[i];\n        }\n        // \u76f4\u63a5\u904d\u5386\u6570\u7ec4\u5143\u7d20\n        foreach (int num in nums) {\n            count += num;\n        }\n    }", "doc_comment": "/* \u904d\u5386\u6570\u7ec4 */"}, "code_tokens": ["void", "Traverse", "(", ")", "{", "// \u901a\u8fc7\u7d22\u5f15\u904d\u5386\u6570\u7ec4", "// \u76f4\u63a5\u904d\u5386\u6570\u7ec4\u5143\u7d20", "}", "nums", ";", "for", "(", ";", ")", "", "{", "}", "int", "count", "=", "0", ";", "i", "<", "i", "++", "{", "}", "foreach", ";", "int", "[", "]", "int", "i", "=", "0", "nums", ".", "Length", ";", "(", "nums", ")", "count", "+=", "num", "count", "+=", "num", "in", "nums", "[", "i", "]", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 86, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 27}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_array_and_linkedlist/array.cs#62-68", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_array_and_linkedlist/array.cs", "language": "Java"}, "method": {"name": "Find", "qualified_name": "codes.csharp.chapter_array_and_linkedlist.array.cs#Find", "start_line": 62, "end_line": 68, "signature": "Find(int[] nums, int target)", "original_code": "int Find(int[] nums, int target) {\n        for (int i = 0; i < nums.Length; i++) {\n            if (nums[i] == target)\n                return i;\n        }\n        return -1;\n    }", "doc_comment": "/* \u5728\u6570\u7ec4\u4e2d\u67e5\u627e\u6307\u5b9a\u5143\u7d20 */"}, "code_tokens": ["Find", "int", "(", ",", ")", "{", "}", "nums", "target", "for", "(", ";", ")", "return", ";", "int", ";", "i", "<", "i", "++", "{", "}", "-", "1", "int", "[", "]", "int", "i", "=", "0", "nums", ".", "Length", "if", "(", ")", "return", "i", ";", "==", "target", "nums", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 73, "ast_depth": 10, "n_identifiers": 5, "vocab_size": 25}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_array_and_linkedlist/array.cs#71-73", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_array_and_linkedlist/array.cs", "language": "Java"}, "method": {"name": "ToString", "qualified_name": "codes.csharp.chapter_array_and_linkedlist.array.cs#ToString", "start_line": 71, "end_line": 73, "signature": "ToString(int[] nums)", "original_code": "string ToString(int[] nums) {\n        return string.Join(\",\", nums);\n    }", "doc_comment": "/* \u8f85\u52a9\u51fd\u6570,\u6570\u7ec4\u8f6c\u5b57\u7b26\u4e32 */"}, "code_tokens": ["string", "ToString", "(", ")", "{", "}", "nums", "return", ";", "string", ".", "Join", "int", "[", "]", "(", ",", "nums", ")", "\"", ",", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 34, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 16}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_array_and_linkedlist/array.cs#77-106", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_array_and_linkedlist/array.cs", "language": "Java"}, "method": {"name": "Test", "qualified_name": "codes.csharp.chapter_array_and_linkedlist.array.cs#Test", "start_line": 77, "end_line": 106, "signature": "Test()", "original_code": "public void Test() {\n        // \u521d\u59cb\u5316\u6570\u7ec4\n        int[] arr = new int[5];\n        Console.WriteLine(\"\u6570\u7ec4 arr = \" + ToString(arr));\n        int[] nums = [1, 3, 2, 5, 4];\n        Console.WriteLine(\"\u6570\u7ec4 nums = \" + ToString(nums));\n\n        // \u968f\u673a\u8bbf\u95ee\n        int randomNum = RandomAccess(nums);\n        Console.WriteLine(\"\u5728 nums \u4e2d\u83b7\u53d6\u968f\u673a\u5143\u7d20 \" + randomNum);\n\n        // \u957f\u5ea6\u6269\u5c55\n        nums = Extend(nums, 3);\n        Console.WriteLine(\"\u5c06\u6570\u7ec4\u957f\u5ea6\u6269\u5c55\u81f3 8 \uff0c\u5f97\u5230 nums = \" + ToString(nums));\n\n        // \u63d2\u5165\u5143\u7d20\n        Insert(nums, 6, 3);\n        Console.WriteLine(\"\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = \" + ToString(nums));\n\n        // \u5220\u9664\u5143\u7d20\n        Remove(nums, 2);\n        Console.WriteLine(\"\u5220\u9664\u7d22\u5f15 2 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = \" + ToString(nums));\n\n        // \u904d\u5386\u6570\u7ec4\n        Traverse(nums);\n\n        // \u67e5\u627e\u5143\u7d20 \n        int index = Find(nums, 3);\n        Console.WriteLine(\"\u5728 nums \u4e2d\u67e5\u627e\u5143\u7d20 3 \uff0c\u5f97\u5230\u7d22\u5f15 = \" + index);\n    }", "doc_comment": ""}, "code_tokens": ["void", "Test", "public", "(", ")", "{", "// \u521d\u59cb\u5316\u6570\u7ec4", "// \u968f\u673a\u8bbf\u95ee", "// \u957f\u5ea6\u6269\u5c55", "// \u63d2\u5165\u5143\u7d20", "// \u5220\u9664\u5143\u7d20", "// \u904d\u5386\u6570\u7ec4", "// \u67e5\u627e\u5143\u7d20 ", "}", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "arr", "=", "Console", ".", "WriteLine", "nums", "=", "1", ",", "3", ",", "2", ",", "5", ",", "4", "]", "Console", ".", "WriteLine", "int", "randomNum", "=", "Console", ".", "WriteLine", "nums", "=", "Console", ".", "WriteLine", "Insert", "Console", ".", "WriteLine", "Remove", "Console", ".", "WriteLine", "Traverse", "int", "index", "=", "Console", ".", "WriteLine", "int", "[", "]", "new", "(", ")", "int", "[", "]", "[", "(", ")", "RandomAccess", "(", ")", "Extend", "(", ")", "(", "nums", ",", "6", ",", "3", ")", "(", ")", "(", "nums", ",", "2", ")", "(", ")", "(", "nums", ")", "Find", "(", ")", "int", "[", "5", "]", "+", "+", "(", "nums", ")", "+", "randomNum", "(", "nums", ",", "3", ")", "+", "+", "+", "(", "nums", ",", "3", ")", "+", "index", "\"", "\u6570\u7ec4 arr = ", "\"", "ToString", "\"", "\u6570\u7ec4 nums = ", "\"", "ToString", "\"", "\u5728 nums \u4e2d\u83b7\u53d6\u968f\u673a\u5143\u7d20 ", "\"", "\"", "\u5c06\u6570\u7ec4\u957f\u5ea6\u6269\u5c55\u81f3 8 \uff0c\u5f97\u5230 nums = ", "\"", "ToString", "\"", "\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = ", "\"", "ToString", "\"", "\u5220\u9664\u7d22\u5f15 2 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = ", "\"", "ToString", "\"", "\u5728 nums \u4e2d\u67e5\u627e\u5143\u7d20 3 \uff0c\u5f97\u5230\u7d22\u5f15 = ", "\"", "(", "arr", ")", "(", "nums", ")", "(", "nums", ")", "(", "nums", ")", "(", "nums", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 270, "ast_depth": 10, "n_identifiers": 14, "vocab_size": 50}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_array_and_linkedlist/list.cs#11-65", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_array_and_linkedlist/list.cs", "language": "Java"}, "method": {"name": "Test", "qualified_name": "codes.csharp.chapter_array_and_linkedlist.list.cs#Test", "start_line": 11, "end_line": 65, "signature": "Test()", "original_code": "public void Test() {\n\n        /* \u521d\u59cb\u5316\u5217\u8868 */\n        int[] numbers = [1, 3, 2, 5, 4];\n        List<int> nums = [.. numbers];\n        Console.WriteLine(\"\u5217\u8868 nums = \" + string.Join(\",\", nums));\n\n        /* \u8bbf\u95ee\u5143\u7d20 */\n        int num = nums[1];\n        Console.WriteLine(\"\u8bbf\u95ee\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 num = \" + num);\n\n        /* \u66f4\u65b0\u5143\u7d20 */\n        nums[1] = 0;\n        Console.WriteLine(\"\u5c06\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\u66f4\u65b0\u4e3a 0 \uff0c\u5f97\u5230 nums = \" + string.Join(\",\", nums));\n\n        /* \u6e05\u7a7a\u5217\u8868 */\n        nums.Clear();\n        Console.WriteLine(\"\u6e05\u7a7a\u5217\u8868\u540e nums = \" + string.Join(\",\", nums));\n\n        /* \u5728\u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 */\n        nums.Add(1);\n        nums.Add(3);\n        nums.Add(2);\n        nums.Add(5);\n        nums.Add(4);\n        Console.WriteLine(\"\u6dfb\u52a0\u5143\u7d20\u540e nums = \" + string.Join(\",\", nums));\n\n        /* \u5728\u4e2d\u95f4\u63d2\u5165\u5143\u7d20 */\n        nums.Insert(3, 6);\n        Console.WriteLine(\"\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = \" + string.Join(\",\", nums));\n\n        /* \u5220\u9664\u5143\u7d20 */\n        nums.RemoveAt(3);\n        Console.WriteLine(\"\u5220\u9664\u7d22\u5f15 3 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = \" + string.Join(\",\", nums));\n\n        /* \u901a\u8fc7\u7d22\u5f15\u904d\u5386\u5217\u8868 */\n        int count = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            count += nums[i];\n        }\n        /* \u76f4\u63a5\u904d\u5386\u5217\u8868\u5143\u7d20 */\n        count = 0;\n        foreach (int x in nums) {\n            count += x;\n        }\n\n        /* \u62fc\u63a5\u4e24\u4e2a\u5217\u8868 */\n        List<int> nums1 = [6, 8, 7, 10, 9];\n        nums.AddRange(nums1);\n        Console.WriteLine(\"\u5c06\u5217\u8868 nums1 \u62fc\u63a5\u5230 nums \u4e4b\u540e\uff0c\u5f97\u5230 nums = \" + string.Join(\",\", nums));\n\n        /* \u6392\u5e8f\u5217\u8868 */\n        nums.Sort(); // \u6392\u5e8f\u540e\uff0c\u5217\u8868\u5143\u7d20\u4ece\u5c0f\u5230\u5927\u6392\u5217\n        Console.WriteLine(\"\u6392\u5e8f\u5217\u8868\u540e nums = \" + string.Join(\",\", nums));\n    }", "doc_comment": ""}, "code_tokens": ["void", "Test", "public", "(", ")", "{", "/* \u521d\u59cb\u5316\u5217\u8868 */", "/* \u8bbf\u95ee\u5143\u7d20 */", "/* \u66f4\u65b0\u5143\u7d20 */", "/* \u6e05\u7a7a\u5217\u8868 */", "/* \u5728\u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 */", "/* \u5728\u4e2d\u95f4\u63d2\u5165\u5143\u7d20 */", "/* \u5220\u9664\u5143\u7d20 */", "/* \u901a\u8fc7\u7d22\u5f15\u904d\u5386\u5217\u8868 */", "/* \u76f4\u63a5\u904d\u5386\u5217\u8868\u5143\u7d20 */", "/* \u62fc\u63a5\u4e24\u4e2a\u5217\u8868 */", "/* \u6392\u5e8f\u5217\u8868 */", "// \u6392\u5e8f\u540e\uff0c\u5217\u8868\u5143\u7d20\u4ece\u5c0f\u5230\u5927\u6392\u5217", "}", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "for", "(", ";", ")", ";", "", "{", "}", ";", ";", ";", ";", ";", "numbers", "=", "1", ",", "3", ",", "2", ",", "5", ",", "4", "]", "List", "nums", "=", "numbers", "]", "Console", ".", "WriteLine", "int", "num", "=", "Console", ".", "WriteLine", "=", "0", "Console", ".", "WriteLine", "nums", ".", "Clear", "Console", ".", "WriteLine", "nums", ".", "Add", "nums", ".", "Add", "nums", ".", "Add", "nums", ".", "Add", "nums", ".", "Add", "Console", ".", "WriteLine", "nums", ".", "Insert", "Console", ".", "WriteLine", "nums", ".", "RemoveAt", "Console", ".", "WriteLine", "int", "count", "=", "0", ";", "i", "<", "i", "++", "{", "}", "count", "=", "0", "foreach", ";", "List", "nums1", "=", "6", ",", "8", ",", "7", ",", "10", ",", "9", "]", "nums", ".", "AddRange", "Console", ".", "WriteLine", "nums", ".", "Sort", "Console", ".", "WriteLine", "int", "[", "]", "[", "<", ">", "[", ".", ".", "(", ")", "nums", "[", "1", "]", "(", ")", "nums", "[", "1", "]", "(", ")", "(", ")", "(", ")", "(", "1", ")", "(", "3", ")", "(", "2", ")", "(", "5", ")", "(", "4", ")", "(", ")", "(", "3", ",", "6", ")", "(", ")", "(", "3", ")", "(", ")", "int", "i", "=", "0", "nums", ".", "Count", ";", "(", "nums", ")", "count", "+=", "x", "<", ">", "[", "(", "nums1", ")", "(", ")", "(", ")", "(", ")", "int", "+", "+", "num", "+", "+", "+", "+", "+", "count", "+=", "x", "in", "int", "+", "+", "\"", "\u5217\u8868 nums = ", "\"", "string", ".", "Join", "\"", "\u8bbf\u95ee\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 num = ", "\"", "\"", "\u5c06\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\u66f4\u65b0\u4e3a 0 \uff0c\u5f97\u5230 nums = ", "\"", "string", ".", "Join", "\"", "\u6e05\u7a7a\u5217\u8868\u540e nums = ", "\"", "string", ".", "Join", "\"", "\u6dfb\u52a0\u5143\u7d20\u540e nums = ", "\"", "string", ".", "Join", "\"", "\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = ", "\"", "string", ".", "Join", "\"", "\u5220\u9664\u7d22\u5f15 3 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = ", "\"", "string", ".", "Join", "nums", "[", "i", "]", "int", "\"", "\u5c06\u5217\u8868 nums1 \u62fc\u63a5\u5230 nums \u4e4b\u540e\uff0c\u5f97\u5230 nums = ", "\"", "string", ".", "Join", "\"", "\u6392\u5e8f\u5217\u8868\u540e nums = ", "\"", "string", ".", "Join", "(", ",", "nums", ")", "(", ",", "nums", ")", "(", ",", "nums", ")", "(", ",", "nums", ")", "(", ",", "nums", ")", "(", ",", "nums", ")", "(", ",", "nums", ")", "(", ",", "nums", ")", "\"", ",", "\"", "\"", ",", "\"", "\"", ",", "\"", "\"", ",", "\"", "\"", ",", "\"", "\"", ",", "\"", "\"", ",", "\"", "\"", ",", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 526, "ast_depth": 11, "n_identifiers": 21, "vocab_size": 75}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_array_and_linkedlist/my_list.cs#22-24", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_array_and_linkedlist/my_list.cs", "language": "Java"}, "method": {"name": "Size", "qualified_name": "codes.csharp.chapter_array_and_linkedlist.my_list.cs#Size", "start_line": 22, "end_line": 24, "signature": "Size()", "original_code": "public int Size() {\n        return arrSize;\n    }", "doc_comment": "/* \u83b7\u53d6\u5217\u8868\u957f\u5ea6\uff08\u5f53\u524d\u5143\u7d20\u6570\u91cf\uff09*/"}, "code_tokens": ["Size", "public", "int", "(", ")", "{", "}", "return", "arrSize", ";"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 17, "ast_depth": 5, "n_identifiers": 2, "vocab_size": 10}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_array_and_linkedlist/my_list.cs#27-29", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_array_and_linkedlist/my_list.cs", "language": "Java"}, "method": {"name": "Capacity", "qualified_name": "codes.csharp.chapter_array_and_linkedlist.my_list.cs#Capacity", "start_line": 27, "end_line": 29, "signature": "Capacity()", "original_code": "public int Capacity() {\n        return arrCapacity;\n    }", "doc_comment": "/* \u83b7\u53d6\u5217\u8868\u5bb9\u91cf */"}, "code_tokens": ["Capacity", "public", "int", "(", ")", "{", "}", "return", "arrCapacity", ";"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 17, "ast_depth": 5, "n_identifiers": 2, "vocab_size": 10}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_array_and_linkedlist/my_list.cs#32-37", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_array_and_linkedlist/my_list.cs", "language": "Java"}, "method": {"name": "Get", "qualified_name": "codes.csharp.chapter_array_and_linkedlist.my_list.cs#Get", "start_line": 32, "end_line": 37, "signature": "Get(int index)", "original_code": "public int Get(int index) {\n        // \u7d22\u5f15\u5982\u679c\u8d8a\u754c\u5219\u629b\u51fa\u5f02\u5e38\uff0c\u4e0b\u540c\n        if (index < 0 || index >= arrSize)\n            throw new IndexOutOfRangeException(\"\u7d22\u5f15\u8d8a\u754c\");\n        return arr[index];\n    }", "doc_comment": "/* \u8bbf\u95ee\u5143\u7d20 */"}, "code_tokens": ["Get", "public", "int", "(", ")", "{", "// \u7d22\u5f15\u5982\u679c\u8d8a\u754c\u5219\u629b\u51fa\u5f02\u5e38\uff0c\u4e0b\u540c", "}", "index", "if", "return", ";", "int", "(", ")", "throw", ";", "arr", "[", "index", "]", "||", "new", "IndexOutOfRangeException", "index", "<", "0", "index", ">=", "arrSize", "(", ")", "\"", "\u7d22\u5f15\u8d8a\u754c", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 54, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 25}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_array_and_linkedlist/my_list.cs#40-44", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_array_and_linkedlist/my_list.cs", "language": "Java"}, "method": {"name": "Set", "qualified_name": "codes.csharp.chapter_array_and_linkedlist.my_list.cs#Set", "start_line": 40, "end_line": 44, "signature": "Set(int index, int num)", "original_code": "public void Set(int index, int num) {\n        if (index < 0 || index >= arrSize)\n            throw new IndexOutOfRangeException(\"\u7d22\u5f15\u8d8a\u754c\");\n        arr[index] = num;\n    }", "doc_comment": "/* \u66f4\u65b0\u5143\u7d20 */"}, "code_tokens": ["void", "Set", "public", "(", ",", ")", "{", "}", "index", "num", "if", ";", "int", "int", "(", ")", "throw", ";", "=", "num", "||", "new", "IndexOutOfRangeException", "arr", "[", "index", "]", "index", "<", "0", "index", ">=", "arrSize", "(", ")", "\"", "\u7d22\u5f15\u8d8a\u754c", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 59, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 27}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_array_and_linkedlist/my_list.cs#47-54", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_array_and_linkedlist/my_list.cs", "language": "Java"}, "method": {"name": "Add", "qualified_name": "codes.csharp.chapter_array_and_linkedlist.my_list.cs#Add", "start_line": 47, "end_line": 54, "signature": "Add(int num)", "original_code": "public void Add(int num) {\n        // \u5143\u7d20\u6570\u91cf\u8d85\u51fa\u5bb9\u91cf\u65f6\uff0c\u89e6\u53d1\u6269\u5bb9\u673a\u5236\n        if (arrSize == arrCapacity)\n            ExtendCapacity();\n        arr[arrSize] = num;\n        // \u66f4\u65b0\u5143\u7d20\u6570\u91cf\n        arrSize++;\n    }", "doc_comment": "/* \u5728\u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 */"}, "code_tokens": ["void", "Add", "public", "(", ")", "{", "// \u5143\u7d20\u6570\u91cf\u8d85\u51fa\u5bb9\u91cf\u65f6\uff0c\u89e6\u53d1\u6269\u5bb9\u673a\u5236", "// \u66f4\u65b0\u5143\u7d20\u6570\u91cf", "}", "num", "if", ";", ";", "int", "(", ")", ";", "=", "num", "arrSize", "++", "arrSize", "==", "arrCapacity", "ExtendCapacity", "arr", "[", "arrSize", "]", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 49, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 22}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_array_and_linkedlist/my_list.cs#57-70", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_array_and_linkedlist/my_list.cs", "language": "Java"}, "method": {"name": "Insert", "qualified_name": "codes.csharp.chapter_array_and_linkedlist.my_list.cs#Insert", "start_line": 57, "end_line": 70, "signature": "Insert(int index, int num)", "original_code": "public void Insert(int index, int num) {\n        if (index < 0 || index >= arrSize)\n            throw new IndexOutOfRangeException(\"\u7d22\u5f15\u8d8a\u754c\");\n        // \u5143\u7d20\u6570\u91cf\u8d85\u51fa\u5bb9\u91cf\u65f6\uff0c\u89e6\u53d1\u6269\u5bb9\u673a\u5236\n        if (arrSize == arrCapacity)\n            ExtendCapacity();\n        // \u5c06\u7d22\u5f15 index \u4ee5\u53ca\u4e4b\u540e\u7684\u5143\u7d20\u90fd\u5411\u540e\u79fb\u52a8\u4e00\u4f4d\n        for (int j = arrSize - 1; j >= index; j--) {\n            arr[j + 1] = arr[j];\n        }\n        arr[index] = num;\n        // \u66f4\u65b0\u5143\u7d20\u6570\u91cf\n        arrSize++;\n    }", "doc_comment": "/* \u5728\u4e2d\u95f4\u63d2\u5165\u5143\u7d20 */"}, "code_tokens": ["void", "Insert", "public", "(", ",", ")", "{", "// \u5143\u7d20\u6570\u91cf\u8d85\u51fa\u5bb9\u91cf\u65f6\uff0c\u89e6\u53d1\u6269\u5bb9\u673a\u5236", "// \u5c06\u7d22\u5f15 index \u4ee5\u53ca\u4e4b\u540e\u7684\u5143\u7d20\u90fd\u5411\u540e\u79fb\u52a8\u4e00\u4f4d", "// \u66f4\u65b0\u5143\u7d20\u6570\u91cf", "}", "index", "num", "if", "if", "for", "(", ";", ")", ";", ";", "int", "int", "(", ")", "throw", ";", "(", ")", ";", ";", "j", ">=", "index", "j", "--", "{", "}", "=", "num", "arrSize", "++", "||", "new", "IndexOutOfRangeException", "arrSize", "==", "arrCapacity", "ExtendCapacity", "int", "j", "=", ";", "arr", "[", "index", "]", "index", "<", "0", "index", ">=", "arrSize", "(", ")", "(", ")", "arrSize", "-", "1", "=", "\"", "\u7d22\u5f15\u8d8a\u754c", "\"", "arr", "[", "]", "arr", "[", "j", "]", "j", "+", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 126, "ast_depth": 10, "n_identifiers": 8, "vocab_size": 40}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_array_and_linkedlist/my_list.cs#73-85", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_array_and_linkedlist/my_list.cs", "language": "Java"}, "method": {"name": "Remove", "qualified_name": "codes.csharp.chapter_array_and_linkedlist.my_list.cs#Remove", "start_line": 73, "end_line": 85, "signature": "Remove(int index)", "original_code": "public int Remove(int index) {\n        if (index < 0 || index >= arrSize)\n            throw new IndexOutOfRangeException(\"\u7d22\u5f15\u8d8a\u754c\");\n        int num = arr[index];\n        // \u5c06\u7d22\u5f15 index \u4e4b\u540e\u7684\u5143\u7d20\u90fd\u5411\u524d\u79fb\u52a8\u4e00\u4f4d\n        for (int j = index; j < arrSize - 1; j++) {\n            arr[j] = arr[j + 1];\n        }\n        // \u66f4\u65b0\u5143\u7d20\u6570\u91cf\n        arrSize--;\n        // \u8fd4\u56de\u88ab\u5220\u9664\u5143\u7d20\n        return num;\n    }", "doc_comment": "/* \u5220\u9664\u5143\u7d20 */"}, "code_tokens": ["Remove", "public", "int", "(", ")", "{", "// \u5c06\u7d22\u5f15 index \u4e4b\u540e\u7684\u5143\u7d20\u90fd\u5411\u524d\u79fb\u52a8\u4e00\u4f4d", "// \u66f4\u65b0\u5143\u7d20\u6570\u91cf", "// \u8fd4\u56de\u88ab\u5220\u9664\u5143\u7d20", "}", "index", "if", ";", "for", "(", ";", ")", ";", "return", "num", ";", "int", "(", ")", "throw", ";", "int", "num", "=", ";", "j", "<", "j", "++", "{", "}", "arrSize", "--", "||", "new", "IndexOutOfRangeException", "arr", "[", "index", "]", "int", "j", "=", "index", "arrSize", "-", "1", ";", "index", "<", "0", "index", ">=", "arrSize", "(", ")", "=", "\"", "\u7d22\u5f15\u8d8a\u754c", "\"", "arr", "[", "j", "]", "arr", "[", "]", "j", "+", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 112, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 36}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_array_and_linkedlist/my_list.cs#88-93", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_array_and_linkedlist/my_list.cs", "language": "Java"}, "method": {"name": "ExtendCapacity", "qualified_name": "codes.csharp.chapter_array_and_linkedlist.my_list.cs#ExtendCapacity", "start_line": 88, "end_line": 93, "signature": "ExtendCapacity()", "original_code": "public void ExtendCapacity() {\n        // \u65b0\u5efa\u4e00\u4e2a\u957f\u5ea6\u4e3a arrCapacity * extendRatio \u7684\u6570\u7ec4\uff0c\u5e76\u5c06\u539f\u6570\u7ec4\u62f7\u8d1d\u5230\u65b0\u6570\u7ec4\n        Array.Resize(ref arr, arrCapacity * extendRatio);\n        // \u66f4\u65b0\u5217\u8868\u5bb9\u91cf\n        arrCapacity = arr.Length;\n    }", "doc_comment": "/* \u5217\u8868\u6269\u5bb9 */"}, "code_tokens": ["void", "ExtendCapacity", "public", "(", ")", "{", "// \u65b0\u5efa\u4e00\u4e2a\u957f\u5ea6\u4e3a arrCapacity * extendRatio \u7684\u6570\u7ec4\uff0c\u5e76\u5c06\u539f\u6570\u7ec4\u62f7\u8d1d\u5230\u65b0\u6570\u7ec4", "// \u66f4\u65b0\u5217\u8868\u5bb9\u91cf", "}", ";", ";", "Array", ".", "Resize", "arrCapacity", "=", "(", "arr", ",", ")", "arr", ".", "Length", "ref", "arrCapacity", "*", "extendRatio"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 40, "ast_depth": 8, "n_identifiers": 7, "vocab_size": 21}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_array_and_linkedlist/my_list.cs#96-103", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_array_and_linkedlist/my_list.cs", "language": "Java"}, "method": {"name": "ToArray", "qualified_name": "codes.csharp.chapter_array_and_linkedlist.my_list.cs#ToArray", "start_line": 96, "end_line": 103, "signature": "ToArray()", "original_code": "public int[] ToArray() {\n        // \u4ec5\u8f6c\u6362\u6709\u6548\u957f\u5ea6\u8303\u56f4\u5185\u7684\u5217\u8868\u5143\u7d20\n        int[] arr = new int[arrSize];\n        for (int i = 0; i < arrSize; i++) {\n            arr[i] = Get(i);\n        }\n        return arr;\n    }", "doc_comment": "/* \u5c06\u5217\u8868\u8f6c\u6362\u4e3a\u6570\u7ec4 */"}, "code_tokens": ["ToArray", "public", "(", ")", "{", "// \u4ec5\u8f6c\u6362\u6709\u6548\u957f\u5ea6\u8303\u56f4\u5185\u7684\u5217\u8868\u5143\u7d20", "}", "int", "[", "]", ";", "for", "(", ";", ")", "return", "arr", ";", "arr", "=", ";", "i", "<", "arrSize", "i", "++", "{", "}", "int", "[", "]", "new", "int", "i", "=", "0", ";", "int", "[", "arrSize", "]", "=", "arr", "[", "i", "]", "Get", "(", "i", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 79, "ast_depth": 10, "n_identifiers": 5, "vocab_size": 22}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_array_and_linkedlist/my_list.cs#108-143", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_array_and_linkedlist/my_list.cs", "language": "Java"}, "method": {"name": "Test", "qualified_name": "codes.csharp.chapter_array_and_linkedlist.my_list.cs#Test", "start_line": 108, "end_line": 143, "signature": "Test()", "original_code": "public void Test() {\n        /* \u521d\u59cb\u5316\u5217\u8868 */\n        MyList nums = new();\n        /* \u5728\u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 */\n        nums.Add(1);\n        nums.Add(3);\n        nums.Add(2);\n        nums.Add(5);\n        nums.Add(4);\n        Console.WriteLine(\"\u5217\u8868 nums = \" + string.Join(\",\", nums.ToArray()) +\n                           \" \uff0c\u5bb9\u91cf = \" + nums.Capacity() + \" \uff0c\u957f\u5ea6 = \" + nums.Size());\n\n        /* \u5728\u4e2d\u95f4\u63d2\u5165\u5143\u7d20 */\n        nums.Insert(3, 6);\n        Console.WriteLine(\"\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = \" + string.Join(\",\", nums.ToArray()));\n\n        /* \u5220\u9664\u5143\u7d20 */\n        nums.Remove(3);\n        Console.WriteLine(\"\u5220\u9664\u7d22\u5f15 3 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = \" + string.Join(\",\", nums.ToArray()));\n\n        /* \u8bbf\u95ee\u5143\u7d20 */\n        int num = nums.Get(1);\n        Console.WriteLine(\"\u8bbf\u95ee\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 num = \" + num);\n\n        /* \u66f4\u65b0\u5143\u7d20 */\n        nums.Set(1, 0);\n        Console.WriteLine(\"\u5c06\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\u66f4\u65b0\u4e3a 0 \uff0c\u5f97\u5230 nums = \" + string.Join(\",\", nums.ToArray()));\n\n        /* \u6d4b\u8bd5\u6269\u5bb9\u673a\u5236 */\n        for (int i = 0; i < 10; i++) {\n            // \u5728 i = 5 \u65f6\uff0c\u5217\u8868\u957f\u5ea6\u5c06\u8d85\u51fa\u5217\u8868\u5bb9\u91cf\uff0c\u6b64\u65f6\u89e6\u53d1\u6269\u5bb9\u673a\u5236\n            nums.Add(i);\n        }\n        Console.WriteLine(\"\u6269\u5bb9\u540e\u7684\u5217\u8868 nums = \" + string.Join(\",\", nums.ToArray()) +\n                           \" \uff0c\u5bb9\u91cf = \" + nums.Capacity() + \" \uff0c\u957f\u5ea6 = \" + nums.Size());\n    }", "doc_comment": ""}, "code_tokens": ["void", "Test", "public", "(", ")", "{", "/* \u521d\u59cb\u5316\u5217\u8868 */", "/* \u5728\u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 */", "/* \u5728\u4e2d\u95f4\u63d2\u5165\u5143\u7d20 */", "/* \u5220\u9664\u5143\u7d20 */", "/* \u8bbf\u95ee\u5143\u7d20 */", "/* \u66f4\u65b0\u5143\u7d20 */", "/* \u6d4b\u8bd5\u6269\u5bb9\u673a\u5236 */", "}", "MyList", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "for", "(", ";", ")", ";", "nums", "=", "nums", ".", "Add", "nums", ".", "Add", "nums", ".", "Add", "nums", ".", "Add", "nums", ".", "Add", "Console", ".", "WriteLine", "nums", ".", "Insert", "Console", ".", "WriteLine", "nums", ".", "Remove", "Console", ".", "WriteLine", "int", "num", "=", "Console", ".", "WriteLine", "nums", ".", "Set", "Console", ".", "WriteLine", ";", "i", "<", "10", "i", "++", "{", "// \u5728 i = 5 \u65f6\uff0c\u5217\u8868\u957f\u5ea6\u5c06\u8d85\u51fa\u5217\u8868\u5bb9\u91cf\uff0c\u6b64\u65f6\u89e6\u53d1\u6269\u5bb9\u673a\u5236", "}", "Console", ".", "WriteLine", "new", "(", "1", ")", "(", "3", ")", "(", "2", ")", "(", "5", ")", "(", "4", ")", "(", ")", "(", "3", ",", "6", ")", "(", ")", "(", "3", ")", "(", ")", "nums", ".", "Get", "(", ")", "(", "1", ",", "0", ")", "(", ")", "int", "i", "=", "0", ";", "(", ")", "", "(", ")", "+", "+", "+", "(", "1", ")", "+", "num", "+", "nums", ".", "Add", "+", "+", "nums", ".", "Size", "\"", "\u5728\u7d22\u5f15 3 \u5904\u63d2\u5165\u6570\u5b57 6 \uff0c\u5f97\u5230 nums = ", "\"", "string", ".", "Join", "\"", "\u5220\u9664\u7d22\u5f15 3 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 nums = ", "\"", "string", ".", "Join", "\"", "\u8bbf\u95ee\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\uff0c\u5f97\u5230 num = ", "\"", "\"", "\u5c06\u7d22\u5f15 1 \u5904\u7684\u5143\u7d20\u66f4\u65b0\u4e3a 0 \uff0c\u5f97\u5230 nums = ", "\"", "string", ".", "Join", "(", "i", ")", "+", "nums", ".", "Size", "+", "\"", " \uff0c\u957f\u5ea6 = ", "\"", "(", ")", "(", ",", ")", "(", ",", ")", "(", ",", ")", "+", "\"", " \uff0c\u957f\u5ea6 = ", "\"", "(", ")", "+", "nums", ".", "Capacity", "\"", ",", "\"", "nums", ".", "ToArray", "\"", ",", "\"", "nums", ".", "ToArray", "\"", ",", "\"", "nums", ".", "ToArray", "+", "nums", ".", "Capacity", "+", "\"", " \uff0c\u5bb9\u91cf = ", "\"", "(", ")", "(", ")", "(", ")", "(", ")", "+", "\"", " \uff0c\u5bb9\u91cf = ", "\"", "(", ")", "\"", "\u5217\u8868 nums = ", "\"", "string", ".", "Join", "\"", "\u6269\u5bb9\u540e\u7684\u5217\u8868 nums = ", "\"", "string", ".", "Join", "(", ",", ")", "(", ",", ")", "\"", ",", "\"", "nums", ".", "ToArray", "\"", ",", "\"", "nums", ".", "ToArray", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 411, "ast_depth": 16, "n_identifiers": 16, "vocab_size": 59}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_backtracking/n_queens.cs#11-21", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_backtracking/n_queens.cs", "language": "Java"}, "method": {"name": "Backtrack", "qualified_name": "codes.csharp.chapter_backtracking.n_queens.cs#Backtrack", "start_line": 11, "end_line": 21, "signature": "Backtrack(int row, int n, List<List<string>> state, List<List<List<string>>> res,\n            bool[] cols, bool[] diags1, bool[] diags2)", "original_code": "void Backtrack(int row, int n, List<List<string>> state, List<List<List<string>>> res,\n            bool[] cols, bool[] diags1, bool[] diags2) {\n        // \u5f53\u653e\u7f6e\u5b8c\u6240\u6709\u884c\u65f6\uff0c\u8bb0\u5f55\u89e3\n        if (row == n) {\n            List<List<string>> copyState = [];\n            foreach (List<string> sRow in state) {\n                copyState.Add(new List<string>(sRow));\n            }\n            res.Add(copyState);\n            return;\n        }", "doc_comment": "/* \u56de\u6eaf\u7b97\u6cd5\uff1aN \u7687\u540e */"}, "code_tokens": ["void", "Backtrack", "(", ",", ",", ",", ",", ",", ",", ")", "{", "// \u5f53\u653e\u7f6e\u5b8c\u6240\u6709\u884c\u65f6\uff0c\u8bb0\u5f55\u89e3", "}", "row", "n", "state", "res", "cols", "diags1", "diags2", "if", ";", "return", ";", "int", "int", "List", "List", "bool", "bool", "bool", "(", ")", "{", "}", "res", ".", "Add", "<", ">", "<", ">", "[", "]", "[", "]", "[", "]", "row", "==", "n", ";", "(", "copyState", ")", "List", "List", "List", "copyState", "=", "<", "string", ">", "<", ">", "<", ">", ";", "{", "", "List", "List", "", "foreach", "copyState", ".", "Add", "<", "string", ">", "<", "string", ">", "[", "]", "(", ")", "(", ")", ">", "state", "new", "List", "<", "string", "sRow", "in", "List", "(", "sRow", ")", "<", "string", ">"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 162, "ast_depth": 14, "n_identifiers": 15, "vocab_size": 36}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_backtracking/n_queens.cs#42-60", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_backtracking/n_queens.cs", "language": "Java"}, "method": {"name": "NQueens", "qualified_name": "codes.csharp.chapter_backtracking.n_queens.cs#NQueens", "start_line": 42, "end_line": 60, "signature": "NQueens(int n)", "original_code": "List<List<List<string>>> NQueens(int n) {\n        // \u521d\u59cb\u5316 n*n \u5927\u5c0f\u7684\u68cb\u76d8\uff0c\u5176\u4e2d 'Q' \u4ee3\u8868\u7687\u540e\uff0c'#' \u4ee3\u8868\u7a7a\u4f4d\n        List<List<string>> state = [];\n        for (int i = 0; i < n; i++) {\n            List<string> row = [];\n            for (int j = 0; j < n; j++) {\n                row.Add(\"#\");\n            }\n            state.Add(row);\n        }\n        bool[] cols = new bool[n]; // \u8bb0\u5f55\u5217\u662f\u5426\u6709\u7687\u540e\n        bool[] diags1 = new bool[2 * n - 1]; // \u8bb0\u5f55\u4e3b\u5bf9\u89d2\u7ebf\u4e0a\u662f\u5426\u6709\u7687\u540e\n        bool[] diags2 = new bool[2 * n - 1]; // \u8bb0\u5f55\u526f\u5bf9\u89d2\u7ebf\u4e0a\u662f\u5426\u6709\u7687\u540e\n        List<List<List<string>>> res = [];\n\n        Backtrack(0, n, state, res, cols, diags1, diags2);\n\n        return res;\n    }", "doc_comment": "/* \u6c42\u89e3 N \u7687\u540e */"}, "code_tokens": ["NQueens", "List", "(", ")", "{", "// \u521d\u59cb\u5316 n*n \u5927\u5c0f\u7684\u68cb\u76d8\uff0c\u5176\u4e2d 'Q' \u4ee3\u8868\u7687\u540e\uff0c'#' \u4ee3\u8868\u7a7a\u4f4d", "// \u8bb0\u5f55\u5217\u662f\u5426\u6709\u7687\u540e", "// \u8bb0\u5f55\u4e3b\u5bf9\u89d2\u7ebf\u4e0a\u662f\u5426\u6709\u7687\u540e", "// \u8bb0\u5f55\u526f\u5bf9\u89d2\u7ebf\u4e0a\u662f\u5426\u6709\u7687\u540e", "}", "<", ">", "n", ";", "for", "(", ";", ")", ";", ";", ";", ";", ";", "return", "res", ";", "List", "int", "List", "state", "=", ";", "i", "<", "n", "i", "++", "{", "}", "bool", "cols", "=", "bool", "diags1", "=", "bool", "diags2", "=", "List", "res", "=", "Backtrack", "<", ">", "<", ">", "", "int", "i", "=", "0", ";", "for", "(", ";", ")", ";", "[", "]", "new", "bool", "[", "]", "new", "bool", "[", "]", "new", "bool", "<", ">", "", "(", "0", ",", "n", ",", "state", ",", "res", ",", "cols", ",", "diags1", ",", "diags2", ")", "List", "List", "[", "]", "List", "row", "=", ";", "j", "<", "n", "j", "++", "{", "}", "state", ".", "Add", "[", "n", "]", "[", "]", "[", "]", "List", "[", "]", "<", "string", ">", "<", "string", ">", "<", "string", ">", "", "int", "j", "=", "0", ";", "(", "row", ")", "-", "1", "-", "1", "<", ">", "[", "]", "row", ".", "Add", "2", "*", "n", "2", "*", "n", "List", "(", ")", "<", "string", ">", "\"", "#", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 255, "ast_depth": 12, "n_identifiers": 12, "vocab_size": 44}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_backtracking/n_queens.cs#63-75", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_backtracking/n_queens.cs", "language": "Java"}, "method": {"name": "Test", "qualified_name": "codes.csharp.chapter_backtracking.n_queens.cs#Test", "start_line": 63, "end_line": 75, "signature": "Test()", "original_code": "public void Test() {\n        int n = 4;\n        List<List<List<string>>> res = NQueens(n);\n\n        Console.WriteLine(\"\u8f93\u5165\u68cb\u76d8\u957f\u5bbd\u4e3a \" + n);\n        Console.WriteLine(\"\u7687\u540e\u653e\u7f6e\u65b9\u6848\u5171\u6709 \" + res.Count + \" \u79cd\");\n        foreach (List<List<string>> state in res) {\n            Console.WriteLine(\"--------------------\");\n            foreach (List<string> row in state) {\n                PrintUtil.PrintList(row);\n            }\n        }\n    }", "doc_comment": ""}, "code_tokens": ["void", "Test", "public", "(", ")", "{", "}", ";", ";", ";", ";", "", "{", "}", "int", "n", "=", "4", "List", "res", "=", "Console", ".", "WriteLine", "Console", ".", "WriteLine", "foreach", ";", "", "{", "}", "<", ">", "NQueens", "(", ")", "(", ")", "(", ")", "Console", ".", "WriteLine", "foreach", ";", "List", "(", "n", ")", "+", "n", "+", "<", "(", ")", "(", ")", "PrintUtil", ".", "PrintList", "<", ">", "\"", "\u8f93\u5165\u68cb\u76d8\u957f\u5bbd\u4e3a ", "\"", "+", "\"", " \u79cd", "\"", "List", "<", "List", "string", ">>", "res", "\"", "--------------------", "\"", ">", "state", "(", "row", ")", "List", "\"", "\u7687\u540e\u653e\u7f6e\u65b9\u6848\u5171\u6709 ", "\"", "res", ".", "Count", "state", "in", "List", "<", "string", "row", "in", "<", "string", ">"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 154, "ast_depth": 11, "n_identifiers": 15, "vocab_size": 36}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_divide_and_conquer/hanota.cs#11-17", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_divide_and_conquer/hanota.cs", "language": "Java"}, "method": {"name": "Move", "qualified_name": "codes.csharp.chapter_divide_and_conquer.hanota.cs#Move", "start_line": 11, "end_line": 17, "signature": "Move(List<int> src, List<int> tar)", "original_code": "void Move(List<int> src, List<int> tar) {\n        // \u4ece src \u9876\u90e8\u62ff\u51fa\u4e00\u4e2a\u5706\u76d8\n        int pan = src[^1];\n        src.RemoveAt(src.Count - 1);\n        // \u5c06\u5706\u76d8\u653e\u5165 tar \u9876\u90e8\n        tar.Add(pan);\n    }", "doc_comment": "/* \u79fb\u52a8\u4e00\u4e2a\u5706\u76d8 */"}, "code_tokens": ["void", "Move", "(", ",", ")", "{", "// \u4ece src \u9876\u90e8\u62ff\u51fa\u4e00\u4e2a\u5706\u76d8", "// \u5c06\u5706\u76d8\u653e\u5165 tar \u9876\u90e8", "}", "src", "tar", ";", ";", "List", "List", "int", "pan", "=", "tar", ".", "Add", "<", ">", "<", ">", ";", "src", ".", "RemoveAt", "(", "pan", ")", "int", "int", "src", "(", ")", "[", "]", "-", "1", "^", "1", "src", ".", "Count"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 72, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 27}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_divide_and_conquer/hanota.cs#20-32", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_divide_and_conquer/hanota.cs", "language": "Java"}, "method": {"name": "DFS", "qualified_name": "codes.csharp.chapter_divide_and_conquer.hanota.cs#DFS", "start_line": 20, "end_line": 32, "signature": "DFS(int i, List<int> src, List<int> buf, List<int> tar)", "original_code": "void DFS(int i, List<int> src, List<int> buf, List<int> tar) {\n        // \u82e5 src \u53ea\u5269\u4e0b\u4e00\u4e2a\u5706\u76d8\uff0c\u5219\u76f4\u63a5\u5c06\u5176\u79fb\u5230 tar\n        if (i == 1) {\n            Move(src, tar);\n            return;\n        }\n        // \u5b50\u95ee\u9898 f(i-1) \uff1a\u5c06 src \u9876\u90e8 i-1 \u4e2a\u5706\u76d8\u501f\u52a9 tar \u79fb\u5230 buf\n        DFS(i - 1, src, tar, buf);\n        // \u5b50\u95ee\u9898 f(1) \uff1a\u5c06 src \u5269\u4f59\u4e00\u4e2a\u5706\u76d8\u79fb\u5230 tar\n        Move(src, tar);\n        // \u5b50\u95ee\u9898 f(i-1) \uff1a\u5c06 buf \u9876\u90e8 i-1 \u4e2a\u5706\u76d8\u501f\u52a9 src \u79fb\u5230 tar\n        DFS(i - 1, buf, src, tar);\n    }", "doc_comment": "/* \u6c42\u89e3\u6c49\u8bfa\u5854\u95ee\u9898 f(i) */"}, "code_tokens": ["void", "DFS", "(", ",", ",", ",", ")", "{", "// \u82e5 src \u53ea\u5269\u4e0b\u4e00\u4e2a\u5706\u76d8\uff0c\u5219\u76f4\u63a5\u5c06\u5176\u79fb\u5230 tar", "// \u5b50\u95ee\u9898 f(i-1) \uff1a\u5c06 src \u9876\u90e8 i-1 \u4e2a\u5706\u76d8\u501f\u52a9 tar \u79fb\u5230 buf", "// \u5b50\u95ee\u9898 f(1) \uff1a\u5c06 src \u5269\u4f59\u4e00\u4e2a\u5706\u76d8\u79fb\u5230 tar", "// \u5b50\u95ee\u9898 f(i-1) \uff1a\u5c06 buf \u9876\u90e8 i-1 \u4e2a\u5706\u76d8\u501f\u52a9 src \u79fb\u5230 tar", "}", "i", "src", "buf", "tar", "if", ";", ";", ";", "int", "List", "List", "List", "(", ")", "{", "}", "DFS", "Move", "DFS", "<", ">", "<", ">", "<", ">", "i", "==", "1", ";", "return", ";", "(", ",", "src", ",", "tar", ",", "buf", ")", "(", "src", ",", "tar", ")", "(", ",", "buf", ",", "src", ",", "tar", ")", "int", "int", "int", "Move", "i", "-", "1", "i", "-", "1", "(", "src", ",", "tar", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 117, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 26}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_divide_and_conquer/hanota.cs#35-39", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_divide_and_conquer/hanota.cs", "language": "Java"}, "method": {"name": "SolveHanota", "qualified_name": "codes.csharp.chapter_divide_and_conquer.hanota.cs#SolveHanota", "start_line": 35, "end_line": 39, "signature": "SolveHanota(List<int> A, List<int> B, List<int> C)", "original_code": "void SolveHanota(List<int> A, List<int> B, List<int> C) {\n        int n = A.Count;\n        // \u5c06 A \u9876\u90e8 n \u4e2a\u5706\u76d8\u501f\u52a9 B \u79fb\u5230 C\n        DFS(n, A, B, C);\n    }", "doc_comment": "/* \u6c42\u89e3\u6c49\u8bfa\u5854\u95ee\u9898 */"}, "code_tokens": ["void", "SolveHanota", "(", ",", ",", ")", "{", "// \u5c06 A \u9876\u90e8 n \u4e2a\u5706\u76d8\u501f\u52a9 B \u79fb\u5230 C", "}", "A", "B", "C", ";", ";", "List", "List", "List", "int", "n", "=", "DFS", "<", ">", "<", ">", "<", ">", "A", ".", "Count", "(", "n", ",", "A", ",", "B", ",", "C", ")", "int", "int", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 65, "ast_depth": 8, "n_identifiers": 7, "vocab_size": 21}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_divide_and_conquer/hanota.cs#42-58", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_divide_and_conquer/hanota.cs", "language": "Java"}, "method": {"name": "Test", "qualified_name": "codes.csharp.chapter_divide_and_conquer.hanota.cs#Test", "start_line": 42, "end_line": 58, "signature": "Test()", "original_code": "public void Test() {\n        // \u5217\u8868\u5c3e\u90e8\u662f\u67f1\u5b50\u9876\u90e8\n        List<int> A = [5, 4, 3, 2, 1];\n        List<int> B = [];\n        List<int> C = [];\n        Console.WriteLine(\"\u521d\u59cb\u72b6\u6001\u4e0b\uff1a\");\n        Console.WriteLine(\"A = \" + string.Join(\", \", A));\n        Console.WriteLine(\"B = \" + string.Join(\", \", B));\n        Console.WriteLine(\"C = \" + string.Join(\", \", C));\n\n        SolveHanota(A, B, C);\n\n        Console.WriteLine(\"\u5706\u76d8\u79fb\u52a8\u5b8c\u6210\u540e\uff1a\");\n        Console.WriteLine(\"A = \" + string.Join(\", \", A));\n        Console.WriteLine(\"B = \" + string.Join(\", \", B));\n        Console.WriteLine(\"C = \" + string.Join(\", \", C));\n    }", "doc_comment": ""}, "code_tokens": ["void", "Test", "public", "(", ")", "{", "// \u5217\u8868\u5c3e\u90e8\u662f\u67f1\u5b50\u9876\u90e8", "}", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "List", "A", "=", "5", ",", "4", ",", "3", ",", "2", ",", "1", "]", "List", "B", "=", "List", "C", "=", "Console", ".", "WriteLine", "Console", ".", "WriteLine", "Console", ".", "WriteLine", "Console", ".", "WriteLine", "SolveHanota", "Console", ".", "WriteLine", "Console", ".", "WriteLine", "Console", ".", "WriteLine", "Console", ".", "WriteLine", "<", ">", "[", "<", ">", "", "<", ">", "", "(", ")", "(", ")", "(", ")", "(", ")", "(", "A", ",", "B", ",", "C", ")", "(", ")", "(", ")", "(", ")", "(", ")", "int", "int", "[", "]", "int", "[", "]", "\"", "\u521d\u59cb\u72b6\u6001\u4e0b\uff1a", "\"", "+", "+", "+", "\"", "\u5706\u76d8\u79fb\u52a8\u5b8c\u6210\u540e\uff1a", "\"", "+", "+", "+", "\"", "A = ", "\"", "string", ".", "Join", "\"", "B = ", "\"", "string", ".", "Join", "\"", "C = ", "\"", "string", ".", "Join", "\"", "A = ", "\"", "string", ".", "Join", "\"", "B = ", "\"", "string", ".", "Join", "\"", "C = ", "\"", "string", ".", "Join", "(", ",", "A", ")", "(", ",", "B", ")", "(", ",", "C", ")", "(", ",", "A", ")", "(", ",", "B", ")", "(", ",", "C", ")", "\"", ", ", "\"", "\"", ", ", "\"", "\"", ", ", "\"", "\"", ", ", "\"", "\"", ", ", "\"", "\"", ", ", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 280, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 40}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_dynamic_programming/climbing_stairs_backtrack.cs#11-24", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_dynamic_programming/climbing_stairs_backtrack.cs", "language": "Java"}, "method": {"name": "Backtrack", "qualified_name": "codes.csharp.chapter_dynamic_programming.climbing_stairs_backtrack.cs#Backtrack", "start_line": 11, "end_line": 24, "signature": "Backtrack(List<int> choices, int state, int n, List<int> res)", "original_code": "void Backtrack(List<int> choices, int state, int n, List<int> res) {\n        // \u5f53\u722c\u5230\u7b2c n \u9636\u65f6\uff0c\u65b9\u6848\u6570\u91cf\u52a0 1\n        if (state == n)\n            res[0]++;\n        // \u904d\u5386\u6240\u6709\u9009\u62e9\n        foreach (int choice in choices) {\n            // \u526a\u679d\uff1a\u4e0d\u5141\u8bb8\u8d8a\u8fc7\u7b2c n \u9636\n            if (state + choice > n)\n                continue;\n            // \u5c1d\u8bd5\uff1a\u505a\u51fa\u9009\u62e9\uff0c\u66f4\u65b0\u72b6\u6001\n            Backtrack(choices, state + choice, n, res);\n            // \u56de\u9000\n        }\n    }", "doc_comment": "/* \u56de\u6eaf */"}, "code_tokens": ["void", "Backtrack", "(", ",", ",", ",", ")", "{", "// \u5f53\u722c\u5230\u7b2c n \u9636\u65f6\uff0c\u65b9\u6848\u6570\u91cf\u52a0 1", "// \u904d\u5386\u6240\u6709\u9009\u62e9", "}", "choices", "state", "n", "res", "if", "", "{", "// \u526a\u679d\uff1a\u4e0d\u5141\u8bb8\u8d8a\u8fc7\u7b2c n \u9636", "// \u5c1d\u8bd5\uff1a\u505a\u51fa\u9009\u62e9\uff0c\u66f4\u65b0\u72b6\u6001", "// \u56de\u9000", "}", "List", "int", "int", "List", "(", ")", ";", "foreach", "if", ";", "<", ">", "<", ">", "state", "==", "n", "++", "(", "choices", ")", "(", ")", "continue", ";", "Backtrack", "int", "int", "res", "[", "0", "]", "choice", "in", ">", "n", "(", "choices", ",", ",", "n", ",", "res", ")", "int", "state", "+", "choice", "state", "+", "choice"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 110, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 33}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_dynamic_programming/climbing_stairs_backtrack.cs#27-33", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_dynamic_programming/climbing_stairs_backtrack.cs", "language": "Java"}, "method": {"name": "ClimbingStairsBacktrack", "qualified_name": "codes.csharp.chapter_dynamic_programming.climbing_stairs_backtrack.cs#ClimbingStairsBacktrack", "start_line": 27, "end_line": 33, "signature": "ClimbingStairsBacktrack(int n)", "original_code": "int ClimbingStairsBacktrack(int n) {\n        List<int> choices = [1, 2]; // \u53ef\u9009\u62e9\u5411\u4e0a\u722c 1 \u9636\u6216 2 \u9636\n        int state = 0; // \u4ece\u7b2c 0 \u9636\u5f00\u59cb\u722c\n        List<int> res = [0]; // \u4f7f\u7528 res[0] \u8bb0\u5f55\u65b9\u6848\u6570\u91cf\n        Backtrack(choices, state, n, res);\n        return res[0];\n    }", "doc_comment": "/* \u722c\u697c\u68af\uff1a\u56de\u6eaf */"}, "code_tokens": ["ClimbingStairsBacktrack", "int", "(", ")", "{", "// \u53ef\u9009\u62e9\u5411\u4e0a\u722c 1 \u9636\u6216 2 \u9636", "// \u4ece\u7b2c 0 \u9636\u5f00\u59cb\u722c", "// \u4f7f\u7528 res[0] \u8bb0\u5f55\u65b9\u6848\u6570\u91cf", "}", "n", ";", ";", ";", ";", "return", ";", "int", "List", "choices", "=", "1", ",", "2", "]", "int", "state", "=", "0", "List", "res", "=", "Backtrack", "res", "[", "0", "]", "<", ">", "[", "<", ">", "", "[", "0", "]", "(", "choices", ",", "state", ",", "n", ",", "res", ")", "int", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 84, "ast_depth": 8, "n_identifiers": 7, "vocab_size": 27}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_dynamic_programming/climbing_stairs_backtrack.cs#36-40", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_dynamic_programming/climbing_stairs_backtrack.cs", "language": "Java"}, "method": {"name": "Test", "qualified_name": "codes.csharp.chapter_dynamic_programming.climbing_stairs_backtrack.cs#Test", "start_line": 36, "end_line": 40, "signature": "Test()", "original_code": "public void Test() {\n        int n = 9;\n        int res = ClimbingStairsBacktrack(n);\n        Console.WriteLine($\"\u722c {n} \u9636\u697c\u68af\u5171\u6709 {res} \u79cd\u65b9\u6848\");\n    }", "doc_comment": ""}, "code_tokens": ["void", "Test", "public", "(", ")", "{", "}", ";", ";", ";", "int", "n", "=", "9", "int", "res", "=", "Console", ".", "WriteLine", "ClimbingStairsBacktrack", "(", ")", "(", "n", ")", "$", "\"", "\u722c {n} \u9636\u697c\u68af\u5171\u6709 {res} \u79cd\u65b9\u6848", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 48, "ast_depth": 8, "n_identifiers": 7, "vocab_size": 20}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_dynamic_programming/coin_change.cs#11-33", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_dynamic_programming/coin_change.cs", "language": "Java"}, "method": {"name": "CoinChangeDP", "qualified_name": "codes.csharp.chapter_dynamic_programming.coin_change.cs#CoinChangeDP", "start_line": 11, "end_line": 33, "signature": "CoinChangeDP(int[] coins, int amt)", "original_code": "int CoinChangeDP(int[] coins, int amt) {\n        int n = coins.Length;\n        int MAX = amt + 1;\n        // \u521d\u59cb\u5316 dp \u8868\n        int[,] dp = new int[n + 1, amt + 1];\n        // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c\u9996\u5217\n        for (int a = 1; a <= amt; a++) {\n            dp[0, a] = MAX;\n        }\n        // \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\u548c\u5217\n        for (int i = 1; i <= n; i++) {\n            for (int a = 1; a <= amt; a++) {\n                if (coins[i - 1] > a) {\n                    // \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i\n                    dp[i, a] = dp[i - 1, a];\n                } else {\n                    // \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5c0f\u503c\n                    dp[i, a] = Math.Min(dp[i - 1, a], dp[i, a - coins[i - 1]] + 1);\n                }\n            }\n        }\n        return dp[n, amt] != MAX ? dp[n, amt] : -1;\n    }", "doc_comment": "/* \u96f6\u94b1\u5151\u6362\uff1a\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["CoinChangeDP", "int", "(", ",", ")", "{", "// \u521d\u59cb\u5316 dp \u8868", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c\u9996\u5217", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\u548c\u5217", "}", "coins", "amt", ";", ";", ";", "for", "(", ";", ")", "for", "(", ";", ")", "return", ";", "int", "int", "n", "=", "int", "MAX", "=", "dp", "=", ";", "a", "<=", "amt", "a", "++", "{", "}", ";", "i", "<=", "n", "i", "++", "{", "}", "?", ":", "int", "[", "]", "coins", ".", "Length", "amt", "+", "1", "int", "[", "]", "new", "int", "a", "=", "1", ";", "int", "i", "=", "1", "for", "(", ";", ")", "!=", "MAX", "dp", "[", "amt", "]", "-", "1", ",", "int", "[", "]", "=", "MAX", ";", "a", "<=", "amt", "a", "++", "{", "}", "dp", "[", "amt", "]", "n", ",", ",", "amt", "+", "1", "dp", "[", "a", "]", "int", "a", "=", "1", "if", "else", "n", ",", "n", "+", "1", "0", ",", "(", ")", "{", "// \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i", "}", "{", "// \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5c0f\u503c", "}", ">", "a", ";", ";", "coins", "[", "]", "=", "=", "i", "-", "1", "dp", "[", "a", "]", "dp", "[", "]", "dp", "[", "a", "]", "Math", ".", "Min", "i", ",", "i", "-", "1", ",", "a", "i", ",", "(", ",", ")", "dp", "[", "a", "]", "+", "1", ",", "dp", "[", "]", "i", "-", "1", "i", ",", "a", "-", "coins", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 289, "ast_depth": 19, "n_identifiers": 11, "vocab_size": 42}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_dynamic_programming/coin_change.cs#36-56", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_dynamic_programming/coin_change.cs", "language": "Java"}, "method": {"name": "CoinChangeDPComp", "qualified_name": "codes.csharp.chapter_dynamic_programming.coin_change.cs#CoinChangeDPComp", "start_line": 36, "end_line": 56, "signature": "CoinChangeDPComp(int[] coins, int amt)", "original_code": "int CoinChangeDPComp(int[] coins, int amt) {\n        int n = coins.Length;\n        int MAX = amt + 1;\n        // \u521d\u59cb\u5316 dp \u8868\n        int[] dp = new int[amt + 1];\n        Array.Fill(dp, MAX);\n        dp[0] = 0;\n        // \u72b6\u6001\u8f6c\u79fb\n        for (int i = 1; i <= n; i++) {\n            for (int a = 1; a <= amt; a++) {\n                if (coins[i - 1] > a) {\n                    // \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i\n                    dp[a] = dp[a];\n                } else {\n                    // \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5c0f\u503c\n                    dp[a] = Math.Min(dp[a], dp[a - coins[i - 1]] + 1);\n                }\n            }\n        }\n        return dp[amt] != MAX ? dp[amt] : -1;\n    }", "doc_comment": "/* \u96f6\u94b1\u5151\u6362\uff1a\u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["CoinChangeDPComp", "int", "(", ",", ")", "{", "// \u521d\u59cb\u5316 dp \u8868", "// \u72b6\u6001\u8f6c\u79fb", "}", "coins", "amt", ";", ";", ";", ";", ";", "for", "(", ";", ")", "return", ";", "int", "int", "n", "=", "int", "MAX", "=", "dp", "=", "Array", ".", "Fill", "=", "0", ";", "i", "<=", "n", "i", "++", "{", "}", "?", ":", "int", "[", "]", "coins", ".", "Length", "amt", "+", "1", "int", "[", "]", "new", "(", "dp", ",", "MAX", ")", "dp", "[", "0", "]", "int", "i", "=", "1", "for", "(", ";", ")", "!=", "MAX", "dp", "[", "amt", "]", "-", "1", "int", "[", "]", ";", "a", "<=", "amt", "a", "++", "{", "}", "dp", "[", "amt", "]", "amt", "+", "1", "int", "a", "=", "1", "if", "else", "(", ")", "{", "// \u82e5\u8d85\u8fc7\u76ee\u6807\u91d1\u989d\uff0c\u5219\u4e0d\u9009\u786c\u5e01 i", "}", "{", "// \u4e0d\u9009\u548c\u9009\u786c\u5e01 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5c0f\u503c", "}", ">", "a", ";", ";", "coins", "[", "]", "=", "=", "i", "-", "1", "dp", "[", "a", "]", "dp", "[", "a", "]", "dp", "[", "a", "]", "Math", ".", "Min", "(", ",", ")", "dp", "[", "a", "]", "+", "1", "dp", "[", "]", "a", "-", "coins", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 239, "ast_depth": 19, "n_identifiers": 13, "vocab_size": 43}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_dynamic_programming/coin_change.cs#59-70", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_dynamic_programming/coin_change.cs", "language": "Java"}, "method": {"name": "Test", "qualified_name": "codes.csharp.chapter_dynamic_programming.coin_change.cs#Test", "start_line": 59, "end_line": 70, "signature": "Test()", "original_code": "public void Test() {\n        int[] coins = [1, 2, 5];\n        int amt = 4;\n\n        // \u52a8\u6001\u89c4\u5212\n        int res = CoinChangeDP(coins, amt);\n        Console.WriteLine(\"\u51d1\u5230\u76ee\u6807\u91d1\u989d\u6240\u9700\u7684\u6700\u5c11\u786c\u5e01\u6570\u91cf\u4e3a \" + res);\n\n        // \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212\n        res = CoinChangeDPComp(coins, amt);\n        Console.WriteLine(\"\u51d1\u5230\u76ee\u6807\u91d1\u989d\u6240\u9700\u7684\u6700\u5c11\u786c\u5e01\u6570\u91cf\u4e3a \" + res);\n    }", "doc_comment": ""}, "code_tokens": ["void", "Test", "public", "(", ")", "{", "// \u52a8\u6001\u89c4\u5212", "// \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212", "}", ";", ";", ";", ";", ";", ";", "coins", "=", "1", ",", "2", ",", "5", "]", "int", "amt", "=", "4", "int", "res", "=", "Console", ".", "WriteLine", "res", "=", "Console", ".", "WriteLine", "int", "[", "]", "[", "CoinChangeDP", "(", ")", "CoinChangeDPComp", "(", ")", "(", "coins", ",", "amt", ")", "+", "res", "(", "coins", ",", "amt", ")", "+", "res", "\"", "\u51d1\u5230\u76ee\u6807\u91d1\u989d\u6240\u9700\u7684\u6700\u5c11\u786c\u5e01\u6570\u91cf\u4e3a ", "\"", "\"", "\u51d1\u5230\u76ee\u6807\u91d1\u989d\u6240\u9700\u7684\u6700\u5c11\u786c\u5e01\u6570\u91cf\u4e3a ", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 102, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 30}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_dynamic_programming/edit_distance.cs#11-30", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_dynamic_programming/edit_distance.cs", "language": "Java"}, "method": {"name": "EditDistanceDFS", "qualified_name": "codes.csharp.chapter_dynamic_programming.edit_distance.cs#EditDistanceDFS", "start_line": 11, "end_line": 30, "signature": "EditDistanceDFS(string s, string t, int i, int j)", "original_code": "int EditDistanceDFS(string s, string t, int i, int j) {\n        // \u82e5 s \u548c t \u90fd\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de 0\n        if (i == 0 && j == 0)\n            return 0;\n        // \u82e5 s \u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de t \u957f\u5ea6\n        if (i == 0)\n            return j;\n        // \u82e5 t \u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de s \u957f\u5ea6\n        if (j == 0)\n            return i;\n        // \u82e5\u4e24\u5b57\u7b26\u76f8\u7b49\uff0c\u5219\u76f4\u63a5\u8df3\u8fc7\u6b64\u4e24\u5b57\u7b26\n        if (s[i - 1] == t[j - 1])\n            return EditDistanceDFS(s, t, i - 1, j - 1);\n        // \u6700\u5c11\u7f16\u8f91\u6b65\u6570 = \u63d2\u5165\u3001\u5220\u9664\u3001\u66ff\u6362\u8fd9\u4e09\u79cd\u64cd\u4f5c\u7684\u6700\u5c11\u7f16\u8f91\u6b65\u6570 + 1\n        int insert = EditDistanceDFS(s, t, i, j - 1);\n        int delete = EditDistanceDFS(s, t, i - 1, j);\n        int replace = EditDistanceDFS(s, t, i - 1, j - 1);\n        // \u8fd4\u56de\u6700\u5c11\u7f16\u8f91\u6b65\u6570\n        return Math.Min(Math.Min(insert, delete), replace) + 1;\n    }", "doc_comment": "/* \u7f16\u8f91\u8ddd\u79bb\uff1a\u66b4\u529b\u641c\u7d22 */"}, "code_tokens": ["EditDistanceDFS", "int", "(", ",", ",", ",", ")", "{", "// \u82e5 s \u548c t \u90fd\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de 0", "// \u82e5 s \u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de t \u957f\u5ea6", "// \u82e5 t \u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de s \u957f\u5ea6", "// \u82e5\u4e24\u5b57\u7b26\u76f8\u7b49\uff0c\u5219\u76f4\u63a5\u8df3\u8fc7\u6b64\u4e24\u5b57\u7b26", "// \u6700\u5c11\u7f16\u8f91\u6b65\u6570 = \u63d2\u5165\u3001\u5220\u9664\u3001\u66ff\u6362\u8fd9\u4e09\u79cd\u64cd\u4f5c\u7684\u6700\u5c11\u7f16\u8f91\u6b65\u6570 + 1", "// \u8fd4\u56de\u6700\u5c11\u7f16\u8f91\u6b65\u6570", "}", "string", "s", "string", "t", "i", "j", "if", "if", "if", "if", ";", ";", ";", "return", ";", "int", "int", "(", ")", "return", "0", ";", "(", ")", "return", "j", ";", "(", ")", "return", "i", ";", "(", ")", "return", ";", "int", "insert", "=", "int", "delete", "=", "int", "replace", "=", "+", "1", "&&", "i", "==", "0", "j", "==", "0", "==", "EditDistanceDFS", "EditDistanceDFS", "EditDistanceDFS", "EditDistanceDFS", "Math", ".", "Min", "i", "==", "0", "j", "==", "0", "s", "[", "]", "t", "[", "]", "(", "s", ",", "t", ",", ",", ")", "(", "s", ",", "t", ",", "i", ",", ")", "(", "s", ",", "t", ",", ",", "j", ")", "(", "s", ",", "t", ",", ",", ")", "(", ",", "replace", ")", "i", "-", "1", "j", "-", "1", "i", "-", "1", "j", "-", "1", "j", "-", "1", "i", "-", "1", "i", "-", "1", "j", "-", "1", "Math", ".", "Min", "(", "insert", ",", "delete", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 217, "ast_depth": 10, "n_identifiers": 10, "vocab_size": 36}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_dynamic_programming/edit_distance.cs#33-56", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_dynamic_programming/edit_distance.cs", "language": "Java"}, "method": {"name": "EditDistanceDFSMem", "qualified_name": "codes.csharp.chapter_dynamic_programming.edit_distance.cs#EditDistanceDFSMem", "start_line": 33, "end_line": 56, "signature": "EditDistanceDFSMem(string s, string t, int[][] mem, int i, int j)", "original_code": "int EditDistanceDFSMem(string s, string t, int[][] mem, int i, int j) {\n        // \u82e5 s \u548c t \u90fd\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de 0\n        if (i == 0 && j == 0)\n            return 0;\n        // \u82e5 s \u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de t \u957f\u5ea6\n        if (i == 0)\n            return j;\n        // \u82e5 t \u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de s \u957f\u5ea6\n        if (j == 0)\n            return i;\n        // \u82e5\u5df2\u6709\u8bb0\u5f55\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u4e4b\n        if (mem[i][j] != -1)\n            return mem[i][j];\n        // \u82e5\u4e24\u5b57\u7b26\u76f8\u7b49\uff0c\u5219\u76f4\u63a5\u8df3\u8fc7\u6b64\u4e24\u5b57\u7b26\n        if (s[i - 1] == t[j - 1])\n            return EditDistanceDFSMem(s, t, mem, i - 1, j - 1);\n        // \u6700\u5c11\u7f16\u8f91\u6b65\u6570 = \u63d2\u5165\u3001\u5220\u9664\u3001\u66ff\u6362\u8fd9\u4e09\u79cd\u64cd\u4f5c\u7684\u6700\u5c11\u7f16\u8f91\u6b65\u6570 + 1\n        int insert = EditDistanceDFSMem(s, t, mem, i, j - 1);\n        int delete = EditDistanceDFSMem(s, t, mem, i - 1, j);\n        int replace = EditDistanceDFSMem(s, t, mem, i - 1, j - 1);\n        // \u8bb0\u5f55\u5e76\u8fd4\u56de\u6700\u5c11\u7f16\u8f91\u6b65\u6570\n        mem[i][j] = Math.Min(Math.Min(insert, delete), replace) + 1;\n        return mem[i][j];\n    }", "doc_comment": "/* \u7f16\u8f91\u8ddd\u79bb\uff1a\u8bb0\u5fc6\u5316\u641c\u7d22 */"}, "code_tokens": ["EditDistanceDFSMem", "int", "(", ",", ",", ",", ",", ")", "{", "// \u82e5 s \u548c t \u90fd\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de 0", "// \u82e5 s \u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de t \u957f\u5ea6", "// \u82e5 t \u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de s \u957f\u5ea6", "// \u82e5\u5df2\u6709\u8bb0\u5f55\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u4e4b", "// \u82e5\u4e24\u5b57\u7b26\u76f8\u7b49\uff0c\u5219\u76f4\u63a5\u8df3\u8fc7\u6b64\u4e24\u5b57\u7b26", "// \u6700\u5c11\u7f16\u8f91\u6b65\u6570 = \u63d2\u5165\u3001\u5220\u9664\u3001\u66ff\u6362\u8fd9\u4e09\u79cd\u64cd\u4f5c\u7684\u6700\u5c11\u7f16\u8f91\u6b65\u6570 + 1", "// \u8bb0\u5f55\u5e76\u8fd4\u56de\u6700\u5c11\u7f16\u8f91\u6b65\u6570", "}", "string", "s", "string", "t", "mem", "i", "j", "if", "if", "if", "if", "if", ";", ";", ";", ";", "return", ";", "int", "int", "(", ")", "return", "0", ";", "(", ")", "return", "j", ";", "(", ")", "return", "i", ";", "(", ")", "return", ";", "(", ")", "return", ";", "int", "insert", "=", "int", "delete", "=", "int", "replace", "=", "=", "[", "j", "]", "int", "[", "]", "[", "]", "&&", "i", "==", "0", "j", "==", "0", "!=", "[", "j", "]", "==", "EditDistanceDFSMem", "EditDistanceDFSMem", "EditDistanceDFSMem", "EditDistanceDFSMem", "[", "j", "]", "+", "1", "mem", "[", "i", "]", "i", "==", "0", "j", "==", "0", "[", "j", "]", "-", "1", "mem", "[", "i", "]", "s", "[", "]", "t", "[", "]", "(", "s", ",", "t", ",", "mem", ",", ",", ")", "(", "s", ",", "t", ",", "mem", ",", "i", ",", ")", "(", "s", ",", "t", ",", "mem", ",", ",", "j", ")", "(", "s", ",", "t", ",", "mem", ",", ",", ")", "mem", "[", "i", "]", "Math", ".", "Min", "mem", "[", "i", "]", "i", "-", "1", "j", "-", "1", "i", "-", "1", "j", "-", "1", "j", "-", "1", "i", "-", "1", "i", "-", "1", "j", "-", "1", "(", ",", "replace", ")", "Math", ".", "Min", "(", "insert", ",", "delete", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 290, "ast_depth": 11, "n_identifiers": 11, "vocab_size": 39}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_dynamic_programming/edit_distance.cs#59-82", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_dynamic_programming/edit_distance.cs", "language": "Java"}, "method": {"name": "EditDistanceDP", "qualified_name": "codes.csharp.chapter_dynamic_programming.edit_distance.cs#EditDistanceDP", "start_line": 59, "end_line": 82, "signature": "EditDistanceDP(string s, string t)", "original_code": "int EditDistanceDP(string s, string t) {\n        int n = s.Length, m = t.Length;\n        int[,] dp = new int[n + 1, m + 1];\n        // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c\u9996\u5217\n        for (int i = 1; i <= n; i++) {\n            dp[i, 0] = i;\n        }\n        for (int j = 1; j <= m; j++) {\n            dp[0, j] = j;\n        }\n        // \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\u548c\u5217\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= m; j++) {\n                if (s[i - 1] == t[j - 1]) {\n                    // \u82e5\u4e24\u5b57\u7b26\u76f8\u7b49\uff0c\u5219\u76f4\u63a5\u8df3\u8fc7\u6b64\u4e24\u5b57\u7b26\n                    dp[i, j] = dp[i - 1, j - 1];\n                } else {\n                    // \u6700\u5c11\u7f16\u8f91\u6b65\u6570 = \u63d2\u5165\u3001\u5220\u9664\u3001\u66ff\u6362\u8fd9\u4e09\u79cd\u64cd\u4f5c\u7684\u6700\u5c11\u7f16\u8f91\u6b65\u6570 + 1\n                    dp[i, j] = Math.Min(Math.Min(dp[i, j - 1], dp[i - 1, j]), dp[i - 1, j - 1]) + 1;\n                }\n            }\n        }\n        return dp[n, m];\n    }", "doc_comment": "/* \u7f16\u8f91\u8ddd\u79bb\uff1a\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["EditDistanceDP", "int", "(", ",", ")", "{", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c\u9996\u5217", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\u548c\u5217", "}", "string", "s", "string", "t", ",", ";", ";", "for", "(", ";", ")", "for", "(", ";", ")", "for", "(", ";", ")", "return", ";", "int", "n", "=", "m", "=", "dp", "=", ";", "i", "<=", "n", "i", "++", "{", "}", ";", "j", "<=", "m", "j", "++", "{", "}", ";", "i", "<=", "n", "i", "++", "{", "}", "dp", "[", "m", "]", "s", ".", "Length", "t", ".", "Length", "int", "[", "]", "new", "int", "i", "=", "1", ";", "int", "j", "=", "1", ";", "int", "i", "=", "1", "for", "(", ";", ")", "n", ",", ",", "int", "[", "]", "=", "i", "=", "j", ";", "j", "<=", "m", "j", "++", "{", "}", ",", "m", "+", "1", "dp", "[", "0", "]", "dp", "[", "j", "]", "int", "j", "=", "1", "if", "else", "n", "+", "1", "i", ",", "0", ",", "(", ")", "{", "// \u82e5\u4e24\u5b57\u7b26\u76f8\u7b49\uff0c\u5219\u76f4\u63a5\u8df3\u8fc7\u6b64\u4e24\u5b57\u7b26", "}", "{", "// \u6700\u5c11\u7f16\u8f91\u6b65\u6570 = \u63d2\u5165\u3001\u5220\u9664\u3001\u66ff\u6362\u8fd9\u4e09\u79cd\u64cd\u4f5c\u7684\u6700\u5c11\u7f16\u8f91\u6b65\u6570 + 1", "}", "==", ";", ";", "s", "[", "]", "t", "[", "]", "=", "=", "i", "-", "1", "j", "-", "1", "dp", "[", "j", "]", "dp", "[", "]", "dp", "[", "j", "]", "+", "1", "i", ",", "-", "1", "i", ",", "Math", ".", "Min", "i", "-", "1", ",", "j", "(", ",", ")", "Math", ".", "Min", "dp", "[", "]", "(", ",", ")", ",", "j", "-", "1", "dp", "[", "]", "dp", "[", "j", "]", "i", "-", "1", "i", ",", "j", "-", "1", ",", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 323, "ast_depth": 20, "n_identifiers": 11, "vocab_size": 39}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_dynamic_programming/edit_distance.cs#85-111", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_dynamic_programming/edit_distance.cs", "language": "Java"}, "method": {"name": "EditDistanceDPComp", "qualified_name": "codes.csharp.chapter_dynamic_programming.edit_distance.cs#EditDistanceDPComp", "start_line": 85, "end_line": 111, "signature": "EditDistanceDPComp(string s, string t)", "original_code": "int EditDistanceDPComp(string s, string t) {\n        int n = s.Length, m = t.Length;\n        int[] dp = new int[m + 1];\n        // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c\n        for (int j = 1; j <= m; j++) {\n            dp[j] = j;\n        }\n        // \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\n        for (int i = 1; i <= n; i++) {\n            // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u5217\n            int leftup = dp[0]; // \u6682\u5b58 dp[i-1, j-1]\n            dp[0] = i;\n            // \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u5217\n            for (int j = 1; j <= m; j++) {\n                int temp = dp[j];\n                if (s[i - 1] == t[j - 1]) {\n                    // \u82e5\u4e24\u5b57\u7b26\u76f8\u7b49\uff0c\u5219\u76f4\u63a5\u8df3\u8fc7\u6b64\u4e24\u5b57\u7b26\n                    dp[j] = leftup;\n                } else {\n                    // \u6700\u5c11\u7f16\u8f91\u6b65\u6570 = \u63d2\u5165\u3001\u5220\u9664\u3001\u66ff\u6362\u8fd9\u4e09\u79cd\u64cd\u4f5c\u7684\u6700\u5c11\u7f16\u8f91\u6b65\u6570 + 1\n                    dp[j] = Math.Min(Math.Min(dp[j - 1], dp[j]), leftup) + 1;\n                }\n                leftup = temp; // \u66f4\u65b0\u4e3a\u4e0b\u4e00\u8f6e\u7684 dp[i-1, j-1]\n            }\n        }\n        return dp[m];\n    }", "doc_comment": "/* \u7f16\u8f91\u8ddd\u79bb\uff1a\u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["EditDistanceDPComp", "int", "(", ",", ")", "{", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c", "}", "string", "s", "string", "t", ",", ";", ";", "for", "(", ";", ")", "for", "(", ";", ")", "return", ";", "int", "n", "=", "m", "=", "dp", "=", ";", "j", "<=", "m", "j", "++", "{", "}", ";", "i", "<=", "n", "i", "++", "{", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u5217", "// \u6682\u5b58 dp[i-1, j-1]", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u5217", "}", "dp", "[", "m", "]", "s", ".", "Length", "t", ".", "Length", "int", "[", "]", "new", "int", "j", "=", "1", ";", "int", "i", "=", "1", ";", ";", "for", "(", ";", ")", "int", "[", "]", "=", "j", "int", "leftup", "=", "=", "i", ";", "j", "<=", "m", "j", "++", "{", "// \u66f4\u65b0\u4e3a\u4e0b\u4e00\u8f6e\u7684 dp[i-1, j-1]", "}", "m", "+", "1", "dp", "[", "j", "]", "dp", "[", "0", "]", "dp", "[", "0", "]", "int", "j", "=", "1", ";", "if", "else", ";", "int", "temp", "=", "(", ")", "{", "// \u82e5\u4e24\u5b57\u7b26\u76f8\u7b49\uff0c\u5219\u76f4\u63a5\u8df3\u8fc7\u6b64\u4e24\u5b57\u7b26", "}", "{", "// \u6700\u5c11\u7f16\u8f91\u6b65\u6570 = \u63d2\u5165\u3001\u5220\u9664\u3001\u66ff\u6362\u8fd9\u4e09\u79cd\u64cd\u4f5c\u7684\u6700\u5c11\u7f16\u8f91\u6b65\u6570 + 1", "}", "leftup", "=", "temp", "dp", "[", "j", "]", "==", ";", ";", "s", "[", "]", "t", "[", "]", "=", "leftup", "=", "i", "-", "1", "j", "-", "1", "dp", "[", "j", "]", "dp", "[", "j", "]", "+", "1", "Math", ".", "Min", "(", ",", "leftup", ")", "Math", ".", "Min", "(", ",", ")", "dp", "[", "]", "dp", "[", "j", "]", "j", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 276, "ast_depth": 19, "n_identifiers": 13, "vocab_size": 45}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_dynamic_programming/edit_distance.cs#114-140", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_dynamic_programming/edit_distance.cs", "language": "Java"}, "method": {"name": "Test", "qualified_name": "codes.csharp.chapter_dynamic_programming.edit_distance.cs#Test", "start_line": 114, "end_line": 140, "signature": "Test()", "original_code": "public void Test() {\n        string s = \"bag\";\n        string t = \"pack\";\n        int n = s.Length, m = t.Length;\n\n        // \u66b4\u529b\u641c\u7d22\n        int res = EditDistanceDFS(s, t, n, m);\n        Console.WriteLine(\"\u5c06 \" + s + \" \u66f4\u6539\u4e3a \" + t + \" \u6700\u5c11\u9700\u8981\u7f16\u8f91 \" + res + \" \u6b65\");\n\n        // \u8bb0\u5fc6\u5316\u641c\u7d22\n        int[][] mem = new int[n + 1][];\n        for (int i = 0; i <= n; i++) {\n            mem[i] = new int[m + 1];\n            Array.Fill(mem[i], -1);\n        }\n\n        res = EditDistanceDFSMem(s, t, mem, n, m);\n        Console.WriteLine(\"\u5c06 \" + s + \" \u66f4\u6539\u4e3a \" + t + \" \u6700\u5c11\u9700\u8981\u7f16\u8f91 \" + res + \" \u6b65\");\n\n        // \u52a8\u6001\u89c4\u5212\n        res = EditDistanceDP(s, t);\n        Console.WriteLine(\"\u5c06 \" + s + \" \u66f4\u6539\u4e3a \" + t + \" \u6700\u5c11\u9700\u8981\u7f16\u8f91 \" + res + \" \u6b65\");\n\n        // \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212\n        res = EditDistanceDPComp(s, t);\n        Console.WriteLine(\"\u5c06 \" + s + \" \u66f4\u6539\u4e3a \" + t + \" \u6700\u5c11\u9700\u8981\u7f16\u8f91 \" + res + \" \u6b65\");\n    }", "doc_comment": ""}, "code_tokens": ["void", "Test", "public", "(", ")", "{", "// \u66b4\u529b\u641c\u7d22", "// \u8bb0\u5fc6\u5316\u641c\u7d22", "// \u52a8\u6001\u89c4\u5212", "// \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212", "}", "string", ";", "string", ";", ",", ";", ";", ";", ";", "for", "(", ";", ")", ";", ";", ";", ";", ";", ";", "s", "=", "t", "=", "int", "n", "=", "m", "=", "int", "res", "=", "Console", ".", "WriteLine", "mem", "=", ";", "i", "<=", "n", "i", "++", "{", "}", "res", "=", "Console", ".", "WriteLine", "res", "=", "Console", ".", "WriteLine", "res", "=", "Console", ".", "WriteLine", "\"", "bag", "\"", "\"", "pack", "\"", "s", ".", "Length", "t", ".", "Length", "EditDistanceDFS", "(", ")", "int", "[", "]", "[", "]", "new", "int", "i", "=", "0", ";", ";", "EditDistanceDFSMem", "(", ")", "EditDistanceDP", "(", ")", "EditDistanceDPComp", "(", ")", "(", "s", ",", "t", ",", "n", ",", "m", ")", "+", "int", "[", "]", "[", "]", "=", "Array", ".", "Fill", "(", "s", ",", "t", ",", "mem", ",", "n", ",", "m", ")", "+", "(", "s", ",", "t", ")", "+", "(", "s", ",", "t", ")", "+", "+", "res", "\"", " \u6b65", "\"", "n", "+", "1", "mem", "[", "i", "]", "new", "(", ",", ")", "+", "res", "\"", " \u6b65", "\"", "+", "res", "\"", " \u6b65", "\"", "+", "res", "\"", " \u6b65", "\"", "+", "int", "[", "]", "mem", "[", "i", "]", "-", "1", "+", "+", "+", "+", "t", "\"", " \u6700\u5c11\u9700\u8981\u7f16\u8f91 ", "\"", "m", "+", "1", "+", "t", "\"", " \u6700\u5c11\u9700\u8981\u7f16\u8f91 ", "\"", "+", "t", "\"", " \u6700\u5c11\u9700\u8981\u7f16\u8f91 ", "\"", "+", "t", "\"", " \u6700\u5c11\u9700\u8981\u7f16\u8f91 ", "\"", "+", "+", "+", "+", "+", "s", "\"", " \u66f4\u6539\u4e3a ", "\"", "+", "s", "\"", " \u66f4\u6539\u4e3a ", "\"", "+", "s", "\"", " \u66f4\u6539\u4e3a ", "\"", "+", "s", "\"", " \u66f4\u6539\u4e3a ", "\"", "\"", "\u5c06 ", "\"", "\"", "\u5c06 ", "\"", "\"", "\u5c06 ", "\"", "\"", "\u5c06 ", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 367, "ast_depth": 14, "n_identifiers": 17, "vocab_size": 50}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_dynamic_programming/knapsack.cs#11-25", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_dynamic_programming/knapsack.cs", "language": "Java"}, "method": {"name": "KnapsackDFS", "qualified_name": "codes.csharp.chapter_dynamic_programming.knapsack.cs#KnapsackDFS", "start_line": 11, "end_line": 25, "signature": "KnapsackDFS(int[] weight, int[] val, int i, int c)", "original_code": "int KnapsackDFS(int[] weight, int[] val, int i, int c) {\n        // \u82e5\u5df2\u9009\u5b8c\u6240\u6709\u7269\u54c1\u6216\u80cc\u5305\u65e0\u5269\u4f59\u5bb9\u91cf\uff0c\u5219\u8fd4\u56de\u4ef7\u503c 0\n        if (i == 0 || c == 0) {\n            return 0;\n        }\n        // \u82e5\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\uff0c\u5219\u53ea\u80fd\u9009\u62e9\u4e0d\u653e\u5165\u80cc\u5305\n        if (weight[i - 1] > c) {\n            return KnapsackDFS(weight, val, i - 1, c);\n        }\n        // \u8ba1\u7b97\u4e0d\u653e\u5165\u548c\u653e\u5165\u7269\u54c1 i \u7684\u6700\u5927\u4ef7\u503c\n        int no = KnapsackDFS(weight, val, i - 1, c);\n        int yes = KnapsackDFS(weight, val, i - 1, c - weight[i - 1]) + val[i - 1];\n        // \u8fd4\u56de\u4e24\u79cd\u65b9\u6848\u4e2d\u4ef7\u503c\u66f4\u5927\u7684\u90a3\u4e00\u4e2a\n        return Math.Max(no, yes);\n    }", "doc_comment": "/* 0-1 \u80cc\u5305\uff1a\u66b4\u529b\u641c\u7d22 */"}, "code_tokens": ["KnapsackDFS", "int", "(", ",", ",", ",", ")", "{", "// \u82e5\u5df2\u9009\u5b8c\u6240\u6709\u7269\u54c1\u6216\u80cc\u5305\u65e0\u5269\u4f59\u5bb9\u91cf\uff0c\u5219\u8fd4\u56de\u4ef7\u503c 0", "// \u82e5\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\uff0c\u5219\u53ea\u80fd\u9009\u62e9\u4e0d\u653e\u5165\u80cc\u5305", "// \u8ba1\u7b97\u4e0d\u653e\u5165\u548c\u653e\u5165\u7269\u54c1 i \u7684\u6700\u5927\u4ef7\u503c", "// \u8fd4\u56de\u4e24\u79cd\u65b9\u6848\u4e2d\u4ef7\u503c\u66f4\u5927\u7684\u90a3\u4e00\u4e2a", "}", "weight", "val", "i", "c", "if", "if", ";", ";", "return", ";", "int", "int", "(", ")", "{", "}", "(", ")", "{", "}", "int", "no", "=", "int", "yes", "=", "Math", ".", "Max", "int", "[", "]", "int", "[", "]", "||", "return", "0", ";", ">", "c", "return", ";", "KnapsackDFS", "+", "(", "no", ",", "yes", ")", "i", "==", "0", "c", "==", "0", "weight", "[", "]", "KnapsackDFS", "(", "weight", ",", "val", ",", ",", "c", ")", "KnapsackDFS", "val", "[", "]", "i", "-", "1", "(", "weight", ",", "val", ",", ",", "c", ")", "i", "-", "1", "(", "weight", ",", "val", ",", ",", ")", "i", "-", "1", "i", "-", "1", "i", "-", "1", "c", "-", "weight", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 178, "ast_depth": 12, "n_identifiers": 9, "vocab_size": 33}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_dynamic_programming/knapsack.cs#28-47", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_dynamic_programming/knapsack.cs", "language": "Java"}, "method": {"name": "KnapsackDFSMem", "qualified_name": "codes.csharp.chapter_dynamic_programming.knapsack.cs#KnapsackDFSMem", "start_line": 28, "end_line": 47, "signature": "KnapsackDFSMem(int[] weight, int[] val, int[][] mem, int i, int c)", "original_code": "int KnapsackDFSMem(int[] weight, int[] val, int[][] mem, int i, int c) {\n        // \u82e5\u5df2\u9009\u5b8c\u6240\u6709\u7269\u54c1\u6216\u80cc\u5305\u65e0\u5269\u4f59\u5bb9\u91cf\uff0c\u5219\u8fd4\u56de\u4ef7\u503c 0\n        if (i == 0 || c == 0) {\n            return 0;\n        }\n        // \u82e5\u5df2\u6709\u8bb0\u5f55\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\n        if (mem[i][c] != -1) {\n            return mem[i][c];\n        }\n        // \u82e5\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\uff0c\u5219\u53ea\u80fd\u9009\u62e9\u4e0d\u653e\u5165\u80cc\u5305\n        if (weight[i - 1] > c) {\n            return KnapsackDFSMem(weight, val, mem, i - 1, c);\n        }\n        // \u8ba1\u7b97\u4e0d\u653e\u5165\u548c\u653e\u5165\u7269\u54c1 i \u7684\u6700\u5927\u4ef7\u503c\n        int no = KnapsackDFSMem(weight, val, mem, i - 1, c);\n        int yes = KnapsackDFSMem(weight, val, mem, i - 1, c - weight[i - 1]) + val[i - 1];\n        // \u8bb0\u5f55\u5e76\u8fd4\u56de\u4e24\u79cd\u65b9\u6848\u4e2d\u4ef7\u503c\u66f4\u5927\u7684\u90a3\u4e00\u4e2a\n        mem[i][c] = Math.Max(no, yes);\n        return mem[i][c];\n    }", "doc_comment": "/* 0-1 \u80cc\u5305\uff1a\u8bb0\u5fc6\u5316\u641c\u7d22 */"}, "code_tokens": ["KnapsackDFSMem", "int", "(", ",", ",", ",", ",", ")", "{", "// \u82e5\u5df2\u9009\u5b8c\u6240\u6709\u7269\u54c1\u6216\u80cc\u5305\u65e0\u5269\u4f59\u5bb9\u91cf\uff0c\u5219\u8fd4\u56de\u4ef7\u503c 0", "// \u82e5\u5df2\u6709\u8bb0\u5f55\uff0c\u5219\u76f4\u63a5\u8fd4\u56de", "// \u82e5\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\uff0c\u5219\u53ea\u80fd\u9009\u62e9\u4e0d\u653e\u5165\u80cc\u5305", "// \u8ba1\u7b97\u4e0d\u653e\u5165\u548c\u653e\u5165\u7269\u54c1 i \u7684\u6700\u5927\u4ef7\u503c", "// \u8bb0\u5f55\u5e76\u8fd4\u56de\u4e24\u79cd\u65b9\u6848\u4e2d\u4ef7\u503c\u66f4\u5927\u7684\u90a3\u4e00\u4e2a", "}", "weight", "val", "mem", "i", "c", "if", "if", "if", ";", ";", ";", "return", ";", "int", "int", "(", ")", "{", "}", "(", ")", "{", "}", "(", ")", "{", "}", "int", "no", "=", "int", "yes", "=", "=", "[", "c", "]", "int", "[", "]", "int", "[", "]", "int", "[", "]", "[", "]", "||", "return", "0", ";", "!=", "return", ";", ">", "c", "return", ";", "KnapsackDFSMem", "+", "[", "c", "]", "Math", ".", "Max", "mem", "[", "i", "]", "i", "==", "0", "c", "==", "0", "[", "c", "]", "-", "1", "[", "c", "]", "weight", "[", "]", "KnapsackDFSMem", "(", "weight", ",", "val", ",", "mem", ",", ",", "c", ")", "KnapsackDFSMem", "val", "[", "]", "mem", "[", "i", "]", "(", "no", ",", "yes", ")", "mem", "[", "i", "]", "mem", "[", "i", "]", "i", "-", "1", "(", "weight", ",", "val", ",", "mem", ",", ",", "c", ")", "i", "-", "1", "(", "weight", ",", "val", ",", "mem", ",", ",", ")", "i", "-", "1", "i", "-", "1", "i", "-", "1", "c", "-", "weight", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 252, "ast_depth": 12, "n_identifiers": 10, "vocab_size": 36}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_dynamic_programming/knapsack.cs#50-67", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_dynamic_programming/knapsack.cs", "language": "Java"}, "method": {"name": "KnapsackDP", "qualified_name": "codes.csharp.chapter_dynamic_programming.knapsack.cs#KnapsackDP", "start_line": 50, "end_line": 67, "signature": "KnapsackDP(int[] weight, int[] val, int cap)", "original_code": "int KnapsackDP(int[] weight, int[] val, int cap) {\n        int n = weight.Length;\n        // \u521d\u59cb\u5316 dp \u8868\n        int[,] dp = new int[n + 1, cap + 1];\n        // \u72b6\u6001\u8f6c\u79fb\n        for (int i = 1; i <= n; i++) {\n            for (int c = 1; c <= cap; c++) {\n                if (weight[i - 1] > c) {\n                    // \u82e5\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\uff0c\u5219\u4e0d\u9009\u7269\u54c1 i\n                    dp[i, c] = dp[i - 1, c];\n                } else {\n                    // \u4e0d\u9009\u548c\u9009\u7269\u54c1 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5927\u503c\n                    dp[i, c] = Math.Max(dp[i - 1, c - weight[i - 1]] + val[i - 1], dp[i - 1, c]);\n                }\n            }\n        }\n        return dp[n, cap];\n    }", "doc_comment": "/* 0-1 \u80cc\u5305\uff1a\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["KnapsackDP", "int", "(", ",", ",", ")", "{", "// \u521d\u59cb\u5316 dp \u8868", "// \u72b6\u6001\u8f6c\u79fb", "}", "weight", "val", "cap", ";", ";", "for", "(", ";", ")", "return", ";", "int", "int", "n", "=", "dp", "=", ";", "i", "<=", "n", "i", "++", "{", "}", "dp", "[", "cap", "]", "int", "[", "]", "int", "[", "]", "weight", ".", "Length", "int", "[", "]", "new", "int", "i", "=", "1", "for", "(", ";", ")", "n", ",", ",", "int", "[", "]", ";", "c", "<=", "cap", "c", "++", "{", "}", ",", "cap", "+", "1", "int", "c", "=", "1", "if", "else", "n", "+", "1", "(", ")", "{", "// \u82e5\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\uff0c\u5219\u4e0d\u9009\u7269\u54c1 i", "}", "{", "// \u4e0d\u9009\u548c\u9009\u7269\u54c1 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5927\u503c", "}", ">", "c", ";", ";", "weight", "[", "]", "=", "=", "i", "-", "1", "dp", "[", "c", "]", "dp", "[", "]", "dp", "[", "c", "]", "Math", ".", "Max", "i", ",", "i", "-", "1", ",", "c", "i", ",", "(", ",", ")", "+", "dp", "[", "c", "]", "dp", "[", "]", "val", "[", "]", ",", ",", "c", "-", "i", "-", "1", "i", "-", "1", "i", "-", "1", "weight", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 243, "ast_depth": 19, "n_identifiers": 11, "vocab_size": 37}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_dynamic_programming/knapsack.cs#70-88", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_dynamic_programming/knapsack.cs", "language": "Java"}, "method": {"name": "KnapsackDPComp", "qualified_name": "codes.csharp.chapter_dynamic_programming.knapsack.cs#KnapsackDPComp", "start_line": 70, "end_line": 88, "signature": "KnapsackDPComp(int[] weight, int[] val, int cap)", "original_code": "int KnapsackDPComp(int[] weight, int[] val, int cap) {\n        int n = weight.Length;\n        // \u521d\u59cb\u5316 dp \u8868\n        int[] dp = new int[cap + 1];\n        // \u72b6\u6001\u8f6c\u79fb\n        for (int i = 1; i <= n; i++) {\n            // \u5012\u5e8f\u904d\u5386\n            for (int c = cap; c > 0; c--) {\n                if (weight[i - 1] > c) {\n                    // \u82e5\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\uff0c\u5219\u4e0d\u9009\u7269\u54c1 i\n                    dp[c] = dp[c];\n                } else {\n                    // \u4e0d\u9009\u548c\u9009\u7269\u54c1 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5927\u503c\n                    dp[c] = Math.Max(dp[c], dp[c - weight[i - 1]] + val[i - 1]);\n                }\n            }\n        }\n        return dp[cap];\n    }", "doc_comment": "/* 0-1 \u80cc\u5305\uff1a\u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["KnapsackDPComp", "int", "(", ",", ",", ")", "{", "// \u521d\u59cb\u5316 dp \u8868", "// \u72b6\u6001\u8f6c\u79fb", "}", "weight", "val", "cap", ";", ";", "for", "(", ";", ")", "return", ";", "int", "int", "n", "=", "dp", "=", ";", "i", "<=", "n", "i", "++", "{", "// \u5012\u5e8f\u904d\u5386", "}", "dp", "[", "cap", "]", "int", "[", "]", "int", "[", "]", "weight", ".", "Length", "int", "[", "]", "new", "int", "i", "=", "1", "for", "(", ";", ")", "int", "[", "]", ";", "c", ">", "0", "c", "--", "{", "}", "cap", "+", "1", "int", "c", "=", "cap", "if", "else", "(", ")", "{", "// \u82e5\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\uff0c\u5219\u4e0d\u9009\u7269\u54c1 i", "}", "{", "// \u4e0d\u9009\u548c\u9009\u7269\u54c1 i \u8fd9\u4e24\u79cd\u65b9\u6848\u7684\u8f83\u5927\u503c", "}", ">", "c", ";", ";", "weight", "[", "]", "=", "=", "i", "-", "1", "dp", "[", "c", "]", "dp", "[", "c", "]", "dp", "[", "c", "]", "Math", ".", "Max", "(", ",", ")", "dp", "[", "c", "]", "+", "dp", "[", "]", "val", "[", "]", "c", "-", "i", "-", "1", "weight", "[", "]", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 209, "ast_depth": 19, "n_identifiers": 11, "vocab_size": 40}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_dynamic_programming/knapsack.cs#91-117", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_dynamic_programming/knapsack.cs", "language": "Java"}, "method": {"name": "Test", "qualified_name": "codes.csharp.chapter_dynamic_programming.knapsack.cs#Test", "start_line": 91, "end_line": 117, "signature": "Test()", "original_code": "public void Test() {\n        int[] weight = [10, 20, 30, 40, 50];\n        int[] val = [50, 120, 150, 210, 240];\n        int cap = 50;\n        int n = weight.Length;\n\n        // \u66b4\u529b\u641c\u7d22\n        int res = KnapsackDFS(weight, val, n, cap);\n        Console.WriteLine(\"\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\u7684\u6700\u5927\u7269\u54c1\u4ef7\u503c\u4e3a \" + res);\n\n        // \u8bb0\u5fc6\u5316\u641c\u7d22\n        int[][] mem = new int[n + 1][];\n        for (int i = 0; i <= n; i++) {\n            mem[i] = new int[cap + 1];\n            Array.Fill(mem[i], -1);\n        }\n        res = KnapsackDFSMem(weight, val, mem, n, cap);\n        Console.WriteLine(\"\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\u7684\u6700\u5927\u7269\u54c1\u4ef7\u503c\u4e3a \" + res);\n\n        // \u52a8\u6001\u89c4\u5212\n        res = KnapsackDP(weight, val, cap);\n        Console.WriteLine(\"\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\u7684\u6700\u5927\u7269\u54c1\u4ef7\u503c\u4e3a \" + res);\n\n        // \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212\n        res = KnapsackDPComp(weight, val, cap);\n        Console.WriteLine(\"\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\u7684\u6700\u5927\u7269\u54c1\u4ef7\u503c\u4e3a \" + res);\n    }", "doc_comment": ""}, "code_tokens": ["void", "Test", "public", "(", ")", "{", "// \u66b4\u529b\u641c\u7d22", "// \u8bb0\u5fc6\u5316\u641c\u7d22", "// \u52a8\u6001\u89c4\u5212", "// \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212", "}", ";", ";", ";", ";", ";", ";", ";", "for", "(", ";", ")", ";", ";", ";", ";", ";", ";", "weight", "=", "10", ",", "20", ",", "30", ",", "40", ",", "50", "]", "val", "=", "50", ",", "120", ",", "150", ",", "210", ",", "240", "]", "int", "cap", "=", "50", "int", "n", "=", "int", "res", "=", "Console", ".", "WriteLine", "mem", "=", ";", "i", "<=", "n", "i", "++", "{", "}", "res", "=", "Console", ".", "WriteLine", "res", "=", "Console", ".", "WriteLine", "res", "=", "Console", ".", "WriteLine", "int", "[", "]", "[", "int", "[", "]", "[", "weight", ".", "Length", "KnapsackDFS", "(", ")", "int", "[", "]", "[", "]", "new", "int", "i", "=", "0", ";", ";", "KnapsackDFSMem", "(", ")", "KnapsackDP", "(", ")", "KnapsackDPComp", "(", ")", "(", "weight", ",", "val", ",", "n", ",", "cap", ")", "+", "res", "int", "[", "]", "[", "]", "=", "Array", ".", "Fill", "(", "weight", ",", "val", ",", "mem", ",", "n", ",", "cap", ")", "+", "res", "(", "weight", ",", "val", ",", "cap", ")", "+", "res", "(", "weight", ",", "val", ",", "cap", ")", "+", "res", "\"", "\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\u7684\u6700\u5927\u7269\u54c1\u4ef7\u503c\u4e3a ", "\"", "n", "+", "1", "mem", "[", "i", "]", "new", "(", ",", ")", "\"", "\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\u7684\u6700\u5927\u7269\u54c1\u4ef7\u503c\u4e3a ", "\"", "\"", "\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\u7684\u6700\u5927\u7269\u54c1\u4ef7\u503c\u4e3a ", "\"", "\"", "\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\u7684\u6700\u5927\u7269\u54c1\u4ef7\u503c\u4e3a ", "\"", "int", "[", "]", "mem", "[", "i", "]", "-", "1", "cap", "+", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 303, "ast_depth": 11, "n_identifiers": 17, "vocab_size": 53}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_dynamic_programming/min_path_sum.cs#11-25", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_dynamic_programming/min_path_sum.cs", "language": "Java"}, "method": {"name": "MinPathSumDFS", "qualified_name": "codes.csharp.chapter_dynamic_programming.min_path_sum.cs#MinPathSumDFS", "start_line": 11, "end_line": 25, "signature": "MinPathSumDFS(int[][] grid, int i, int j)", "original_code": "int MinPathSumDFS(int[][] grid, int i, int j) {\n        // \u82e5\u4e3a\u5de6\u4e0a\u89d2\u5355\u5143\u683c\uff0c\u5219\u7ec8\u6b62\u641c\u7d22\n        if (i == 0 && j == 0) {\n            return grid[0][0];\n        }\n        // \u82e5\u884c\u5217\u7d22\u5f15\u8d8a\u754c\uff0c\u5219\u8fd4\u56de +\u221e \u4ee3\u4ef7\n        if (i < 0 || j < 0) {\n            return int.MaxValue;\n        }\n        // \u8ba1\u7b97\u4ece\u5de6\u4e0a\u89d2\u5230 (i-1, j) \u548c (i, j-1) \u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7\n        int up = MinPathSumDFS(grid, i - 1, j);\n        int left = MinPathSumDFS(grid, i, j - 1);\n        // \u8fd4\u56de\u4ece\u5de6\u4e0a\u89d2\u5230 (i, j) \u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7\n        return Math.Min(left, up) + grid[i][j];\n    }", "doc_comment": "/* \u6700\u5c0f\u8def\u5f84\u548c\uff1a\u66b4\u529b\u641c\u7d22 */"}, "code_tokens": ["MinPathSumDFS", "int", "(", ",", ",", ")", "{", "// \u82e5\u4e3a\u5de6\u4e0a\u89d2\u5355\u5143\u683c\uff0c\u5219\u7ec8\u6b62\u641c\u7d22", "// \u82e5\u884c\u5217\u7d22\u5f15\u8d8a\u754c\uff0c\u5219\u8fd4\u56de +\u221e \u4ee3\u4ef7", "// \u8ba1\u7b97\u4ece\u5de6\u4e0a\u89d2\u5230 (i-1, j) \u548c (i, j-1) \u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7", "// \u8fd4\u56de\u4ece\u5de6\u4e0a\u89d2\u5230 (i, j) \u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7", "}", "grid", "i", "j", "if", "if", ";", ";", "return", ";", "int", "int", "(", ")", "{", "}", "(", ")", "{", "}", "int", "up", "=", "int", "left", "=", "+", "int", "[", "]", "[", "]", "&&", "return", ";", "||", "return", "MaxValue", ";", "MinPathSumDFS", "MinPathSumDFS", "Math", ".", "Min", "[", "j", "]", "i", "==", "0", "j", "==", "0", "[", "0", "]", "i", "<", "0", "j", "<", "0", ".", "(", "grid", ",", ",", "j", ")", "(", "grid", ",", "i", ",", ")", "(", "left", ",", "up", ")", "grid", "[", "i", "]", "grid", "[", "0", "]", "int", "i", "-", "1", "j", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 155, "ast_depth": 9, "n_identifiers": 9, "vocab_size": 34}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_dynamic_programming/min_path_sum.cs#28-47", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_dynamic_programming/min_path_sum.cs", "language": "Java"}, "method": {"name": "MinPathSumDFSMem", "qualified_name": "codes.csharp.chapter_dynamic_programming.min_path_sum.cs#MinPathSumDFSMem", "start_line": 28, "end_line": 47, "signature": "MinPathSumDFSMem(int[][] grid, int[][] mem, int i, int j)", "original_code": "int MinPathSumDFSMem(int[][] grid, int[][] mem, int i, int j) {\n        // \u82e5\u4e3a\u5de6\u4e0a\u89d2\u5355\u5143\u683c\uff0c\u5219\u7ec8\u6b62\u641c\u7d22\n        if (i == 0 && j == 0) {\n            return grid[0][0];\n        }\n        // \u82e5\u884c\u5217\u7d22\u5f15\u8d8a\u754c\uff0c\u5219\u8fd4\u56de +\u221e \u4ee3\u4ef7\n        if (i < 0 || j < 0) {\n            return int.MaxValue;\n        }\n        // \u82e5\u5df2\u6709\u8bb0\u5f55\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\n        if (mem[i][j] != -1) {\n            return mem[i][j];\n        }\n        // \u5de6\u8fb9\u548c\u4e0a\u8fb9\u5355\u5143\u683c\u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7\n        int up = MinPathSumDFSMem(grid, mem, i - 1, j);\n        int left = MinPathSumDFSMem(grid, mem, i, j - 1);\n        // \u8bb0\u5f55\u5e76\u8fd4\u56de\u5de6\u4e0a\u89d2\u5230 (i, j) \u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7\n        mem[i][j] = Math.Min(left, up) + grid[i][j];\n        return mem[i][j];\n    }", "doc_comment": "/* \u6700\u5c0f\u8def\u5f84\u548c\uff1a\u8bb0\u5fc6\u5316\u641c\u7d22 */"}, "code_tokens": ["MinPathSumDFSMem", "int", "(", ",", ",", ",", ")", "{", "// \u82e5\u4e3a\u5de6\u4e0a\u89d2\u5355\u5143\u683c\uff0c\u5219\u7ec8\u6b62\u641c\u7d22", "// \u82e5\u884c\u5217\u7d22\u5f15\u8d8a\u754c\uff0c\u5219\u8fd4\u56de +\u221e \u4ee3\u4ef7", "// \u82e5\u5df2\u6709\u8bb0\u5f55\uff0c\u5219\u76f4\u63a5\u8fd4\u56de", "// \u5de6\u8fb9\u548c\u4e0a\u8fb9\u5355\u5143\u683c\u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7", "// \u8bb0\u5f55\u5e76\u8fd4\u56de\u5de6\u4e0a\u89d2\u5230 (i, j) \u7684\u6700\u5c0f\u8def\u5f84\u4ee3\u4ef7", "}", "grid", "mem", "i", "j", "if", "if", "if", ";", ";", ";", "return", ";", "int", "int", "(", ")", "{", "}", "(", ")", "{", "}", "(", ")", "{", "}", "int", "up", "=", "int", "left", "=", "=", "[", "j", "]", "int", "[", "]", "[", "]", "int", "[", "]", "[", "]", "&&", "return", ";", "||", "return", "MaxValue", ";", "!=", "return", ";", "MinPathSumDFSMem", "MinPathSumDFSMem", "[", "j", "]", "+", "mem", "[", "i", "]", "i", "==", "0", "j", "==", "0", "[", "0", "]", "i", "<", "0", "j", "<", "0", ".", "[", "j", "]", "-", "1", "[", "j", "]", "(", "grid", ",", "mem", ",", ",", "j", ")", "(", "grid", ",", "mem", ",", "i", ",", ")", "mem", "[", "i", "]", "Math", ".", "Min", "[", "j", "]", "grid", "[", "0", "]", "int", "mem", "[", "i", "]", "mem", "[", "i", "]", "i", "-", "1", "j", "-", "1", "(", "left", ",", "up", ")", "grid", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 227, "ast_depth": 9, "n_identifiers": 10, "vocab_size": 37}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_dynamic_programming/min_path_sum.cs#50-70", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_dynamic_programming/min_path_sum.cs", "language": "Java"}, "method": {"name": "MinPathSumDP", "qualified_name": "codes.csharp.chapter_dynamic_programming.min_path_sum.cs#MinPathSumDP", "start_line": 50, "end_line": 70, "signature": "MinPathSumDP(int[][] grid)", "original_code": "int MinPathSumDP(int[][] grid) {\n        int n = grid.Length, m = grid[0].Length;\n        // \u521d\u59cb\u5316 dp \u8868\n        int[,] dp = new int[n, m];\n        dp[0, 0] = grid[0][0];\n        // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c\n        for (int j = 1; j < m; j++) {\n            dp[0, j] = dp[0, j - 1] + grid[0][j];\n        }\n        // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u5217\n        for (int i = 1; i < n; i++) {\n            dp[i, 0] = dp[i - 1, 0] + grid[i][0];\n        }\n        // \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\u548c\u5217\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < m; j++) {\n                dp[i, j] = Math.Min(dp[i, j - 1], dp[i - 1, j]) + grid[i][j];\n            }\n        }\n        return dp[n - 1, m - 1];\n    }", "doc_comment": "/* \u6700\u5c0f\u8def\u5f84\u548c\uff1a\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["MinPathSumDP", "int", "(", ")", "{", "// \u521d\u59cb\u5316 dp \u8868", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u5217", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\u548c\u5217", "}", "grid", ",", ";", ";", ";", "for", "(", ";", ")", "for", "(", ";", ")", "for", "(", ";", ")", "return", ";", "int", "n", "=", "m", "=", "dp", "=", "=", ";", "j", "<", "m", "j", "++", "{", "}", ";", "i", "<", "n", "i", "++", "{", "}", ";", "i", "<", "n", "i", "++", "{", "}", "dp", "[", "]", "int", "[", "]", "[", "]", "grid", ".", "Length", ".", "Length", "int", "[", "]", "new", "dp", "[", "0", "]", "[", "0", "]", "int", "j", "=", "1", ";", "int", "i", "=", "1", ";", "int", "i", "=", "1", "for", "(", ";", ")", "-", "1", "grid", "[", "0", "]", ",", "int", "[", "m", "]", "0", ",", "grid", "[", "0", "]", "=", "=", ";", "j", "<", "m", "j", "++", "{", "}", "n", "-", "1", ",", "m", "n", ",", "dp", "[", "j", "]", "+", "dp", "[", "0", "]", "+", "int", "j", "=", "1", ";", "0", ",", "dp", "[", "]", "[", "j", "]", "i", ",", "dp", "[", "]", "[", "0", "]", "=", "0", ",", "j", "-", "1", "grid", "[", "0", "]", "i", "-", "1", ",", "0", "grid", "[", "i", "]", "dp", "[", "j", "]", "+", "i", ",", "Math", ".", "Min", "[", "j", "]", "(", ",", ")", "grid", "[", "i", "]", "dp", "[", "]", "dp", "[", "j", "]", "i", ",", "j", "-", "1", ",", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 323, "ast_depth": 16, "n_identifiers": 10, "vocab_size": 34}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_dynamic_programming/min_path_sum.cs#73-92", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_dynamic_programming/min_path_sum.cs", "language": "Java"}, "method": {"name": "MinPathSumDPComp", "qualified_name": "codes.csharp.chapter_dynamic_programming.min_path_sum.cs#MinPathSumDPComp", "start_line": 73, "end_line": 92, "signature": "MinPathSumDPComp(int[][] grid)", "original_code": "int MinPathSumDPComp(int[][] grid) {\n        int n = grid.Length, m = grid[0].Length;\n        // \u521d\u59cb\u5316 dp \u8868\n        int[] dp = new int[m];\n        dp[0] = grid[0][0];\n        // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c\n        for (int j = 1; j < m; j++) {\n            dp[j] = dp[j - 1] + grid[0][j];\n        }\n        // \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c\n        for (int i = 1; i < n; i++) {\n            // \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u5217\n            dp[0] = dp[0] + grid[i][0];\n            // \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u5217\n            for (int j = 1; j < m; j++) {\n                dp[j] = Math.Min(dp[j - 1], dp[j]) + grid[i][j];\n            }\n        }\n        return dp[m - 1];\n    }", "doc_comment": "/* \u6700\u5c0f\u8def\u5f84\u548c\uff1a\u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212 */"}, "code_tokens": ["MinPathSumDPComp", "int", "(", ")", "{", "// \u521d\u59cb\u5316 dp \u8868", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u884c", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u884c", "}", "grid", ",", ";", ";", ";", "for", "(", ";", ")", "for", "(", ";", ")", "return", ";", "int", "n", "=", "m", "=", "dp", "=", "=", ";", "j", "<", "m", "j", "++", "{", "}", ";", "i", "<", "n", "i", "++", "{", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u9996\u5217", "// \u72b6\u6001\u8f6c\u79fb\uff1a\u5176\u4f59\u5217", "}", "dp", "[", "]", "int", "[", "]", "[", "]", "grid", ".", "Length", ".", "Length", "int", "[", "]", "new", "dp", "[", "0", "]", "[", "0", "]", "int", "j", "=", "1", ";", "int", "i", "=", "1", ";", "for", "(", ";", ")", "m", "-", "1", "grid", "[", "0", "]", "int", "[", "m", "]", "grid", "[", "0", "]", "=", "=", ";", "j", "<", "m", "j", "++", "{", "}", "dp", "[", "j", "]", "+", "dp", "[", "0", "]", "+", "int", "j", "=", "1", ";", "dp", "[", "]", "[", "j", "]", "dp", "[", "0", "]", "[", "0", "]", "=", "j", "-", "1", "grid", "[", "0", "]", "grid", "[", "i", "]", "dp", "[", "j", "]", "+", "Math", ".", "Min", "[", "j", "]", "(", ",", ")", "grid", "[", "i", "]", "dp", "[", "]", "dp", "[", "j", "]", "j", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 260, "ast_depth": 15, "n_identifiers": 10, "vocab_size": 35}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_dynamic_programming/min_path_sum.cs#95-126", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_dynamic_programming/min_path_sum.cs", "language": "Java"}, "method": {"name": "Test", "qualified_name": "codes.csharp.chapter_dynamic_programming.min_path_sum.cs#Test", "start_line": 95, "end_line": 126, "signature": "Test()", "original_code": "public void Test() {\n        int[][] grid =\n        [\n            [1, 3, 1, 5],\n            [2, 2, 4, 2],\n            [5, 3, 2, 1],\n            [4, 3, 5, 2]\n        ];\n\n        int n = grid.Length, m = grid[0].Length;\n\n        // \u66b4\u529b\u641c\u7d22\n        int res = MinPathSumDFS(grid, n - 1, m - 1);\n        Console.WriteLine(\"\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u505a\u5c0f\u8def\u5f84\u548c\u4e3a \" + res);\n\n        // \u8bb0\u5fc6\u5316\u641c\u7d22\n        int[][] mem = new int[n][];\n        for (int i = 0; i < n; i++) {\n            mem[i] = new int[m];\n            Array.Fill(mem[i], -1);\n        }\n        res = MinPathSumDFSMem(grid, mem, n - 1, m - 1);\n        Console.WriteLine(\"\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u505a\u5c0f\u8def\u5f84\u548c\u4e3a \" + res);\n\n        // \u52a8\u6001\u89c4\u5212\n        res = MinPathSumDP(grid);\n        Console.WriteLine(\"\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u505a\u5c0f\u8def\u5f84\u548c\u4e3a \" + res);\n\n        // \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212\n        res = MinPathSumDPComp(grid);\n        Console.WriteLine(\"\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u505a\u5c0f\u8def\u5f84\u548c\u4e3a \" + res);\n    }", "doc_comment": ""}, "code_tokens": ["void", "Test", "public", "(", ")", "{", "// \u66b4\u529b\u641c\u7d22", "// \u8bb0\u5fc6\u5316\u641c\u7d22", "// \u52a8\u6001\u89c4\u5212", "// \u7a7a\u95f4\u4f18\u5316\u540e\u7684\u52a8\u6001\u89c4\u5212", "}", ";", ",", ";", ";", ";", ";", "for", "(", ";", ")", ";", ";", ";", ";", ";", ";", "grid", "=", "1", ",", "3", ",", "1", ",", "5", "]", ",", "[", "2", ",", "2", ",", "4", ",", "2", "]", ",", "[", "5", ",", "3", ",", "2", ",", "1", "]", ",", "[", "4", ",", "3", ",", "5", ",", "2", "]", "]", "int", "n", "=", "m", "=", "int", "res", "=", "Console", ".", "WriteLine", "mem", "=", ";", "i", "<", "n", "i", "++", "{", "}", "res", "=", "Console", ".", "WriteLine", "res", "=", "Console", ".", "WriteLine", "res", "=", "Console", ".", "WriteLine", "int", "[", "]", "[", "]", "[", "[", "grid", ".", "Length", ".", "Length", "MinPathSumDFS", "(", ")", "int", "[", "]", "[", "]", "new", "int", "i", "=", "0", ";", ";", "MinPathSumDFSMem", "(", ")", "MinPathSumDP", "(", ")", "MinPathSumDPComp", "(", ")", "grid", "[", "0", "]", "(", "grid", ",", ",", ")", "+", "res", "int", "[", "n", "]", "[", "]", "=", "Array", ".", "Fill", "(", "grid", ",", "mem", ",", ",", ")", "+", "res", "(", "grid", ")", "+", "res", "(", "grid", ")", "+", "res", "n", "-", "1", "m", "-", "1", "\"", "\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u505a\u5c0f\u8def\u5f84\u548c\u4e3a ", "\"", "mem", "[", "i", "]", "new", "(", ",", ")", "n", "-", "1", "m", "-", "1", "\"", "\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u505a\u5c0f\u8def\u5f84\u548c\u4e3a ", "\"", "\"", "\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u505a\u5c0f\u8def\u5f84\u548c\u4e3a ", "\"", "\"", "\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u505a\u5c0f\u8def\u5f84\u548c\u4e3a ", "\"", "int", "[", "m", "]", "mem", "[", "i", "]", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 309, "ast_depth": 10, "n_identifiers": 16, "vocab_size": 47}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_graph/graph_adjacency_list.cs#26-28", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_graph/graph_adjacency_list.cs", "language": "Java"}, "method": {"name": "Size", "qualified_name": "codes.csharp.chapter_graph.graph_adjacency_list.cs#Size", "start_line": 26, "end_line": 28, "signature": "Size()", "original_code": "int Size() {\n        return adjList.Count;\n    }", "doc_comment": "/* \u83b7\u53d6\u9876\u70b9\u6570\u91cf */"}, "code_tokens": ["Size", "int", "(", ")", "{", "}", "return", ";", "adjList", ".", "Count"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 18, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 11}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_graph/graph_adjacency_list.cs#31-37", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_graph/graph_adjacency_list.cs", "language": "Java"}, "method": {"name": "AddEdge", "qualified_name": "codes.csharp.chapter_graph.graph_adjacency_list.cs#AddEdge", "start_line": 31, "end_line": 37, "signature": "AddEdge(Vertex vet1, Vertex vet2)", "original_code": "public void AddEdge(Vertex vet1, Vertex vet2) {\n        if (!adjList.ContainsKey(vet1) || !adjList.ContainsKey(vet2) || vet1 == vet2)\n            throw new InvalidOperationException();\n        // \u6dfb\u52a0\u8fb9 vet1 - vet2\n        adjList[vet1].Add(vet2);\n        adjList[vet2].Add(vet1);\n    }", "doc_comment": "/* \u6dfb\u52a0\u8fb9 */"}, "code_tokens": ["void", "AddEdge", "public", "(", ",", ")", "{", "// \u6dfb\u52a0\u8fb9 vet1 - vet2", "}", "Vertex", "vet1", "Vertex", "vet2", "if", ";", ";", "(", ")", "throw", ";", ".", "Add", ".", "Add", "||", "new", "InvalidOperationException", "adjList", "[", "vet1", "]", "(", "vet2", ")", "adjList", "[", "vet2", "]", "(", "vet1", ")", "||", "vet1", "==", "vet2", "(", ")", "!", "!", "adjList", ".", "ContainsKey", "adjList", ".", "ContainsKey", "(", "vet1", ")", "(", "vet2", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 90, "ast_depth": 11, "n_identifiers": 6, "vocab_size": 26}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_graph/graph_adjacency_list.cs#40-46", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_graph/graph_adjacency_list.cs", "language": "Java"}, "method": {"name": "RemoveEdge", "qualified_name": "codes.csharp.chapter_graph.graph_adjacency_list.cs#RemoveEdge", "start_line": 40, "end_line": 46, "signature": "RemoveEdge(Vertex vet1, Vertex vet2)", "original_code": "public void RemoveEdge(Vertex vet1, Vertex vet2) {\n        if (!adjList.ContainsKey(vet1) || !adjList.ContainsKey(vet2) || vet1 == vet2)\n            throw new InvalidOperationException();\n        // \u5220\u9664\u8fb9 vet1 - vet2\n        adjList[vet1].Remove(vet2);\n        adjList[vet2].Remove(vet1);\n    }", "doc_comment": "/* \u5220\u9664\u8fb9 */"}, "code_tokens": ["void", "RemoveEdge", "public", "(", ",", ")", "{", "// \u5220\u9664\u8fb9 vet1 - vet2", "}", "Vertex", "vet1", "Vertex", "vet2", "if", ";", ";", "(", ")", "throw", ";", ".", "Remove", ".", "Remove", "||", "new", "InvalidOperationException", "adjList", "[", "vet1", "]", "(", "vet2", ")", "adjList", "[", "vet2", "]", "(", "vet1", ")", "||", "vet1", "==", "vet2", "(", ")", "!", "!", "adjList", ".", "ContainsKey", "adjList", ".", "ContainsKey", "(", "vet1", ")", "(", "vet2", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 90, "ast_depth": 11, "n_identifiers": 6, "vocab_size": 26}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_graph/graph_adjacency_list.cs#49-54", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_graph/graph_adjacency_list.cs", "language": "Java"}, "method": {"name": "AddVertex", "qualified_name": "codes.csharp.chapter_graph.graph_adjacency_list.cs#AddVertex", "start_line": 49, "end_line": 54, "signature": "AddVertex(Vertex vet)", "original_code": "public void AddVertex(Vertex vet) {\n        if (adjList.ContainsKey(vet))\n            return;\n        // \u5728\u90bb\u63a5\u8868\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u65b0\u94fe\u8868\n        adjList.Add(vet, []);\n    }", "doc_comment": "/* \u6dfb\u52a0\u9876\u70b9 */"}, "code_tokens": ["void", "AddVertex", "public", "(", ")", "{", "// \u5728\u90bb\u63a5\u8868\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u65b0\u94fe\u8868", "}", "Vertex", "vet", "if", ";", "(", ")", "return", ";", "adjList", ".", "Add", "adjList", ".", "ContainsKey", "(", "vet", ")", "(", "vet", ")", ",", "", "[", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 49, "ast_depth": 10, "n_identifiers": 5, "vocab_size": 21}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_graph/graph_adjacency_list.cs#57-66", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_graph/graph_adjacency_list.cs", "language": "Java"}, "method": {"name": "RemoveVertex", "qualified_name": "codes.csharp.chapter_graph.graph_adjacency_list.cs#RemoveVertex", "start_line": 57, "end_line": 66, "signature": "RemoveVertex(Vertex vet)", "original_code": "public void RemoveVertex(Vertex vet) {\n        if (!adjList.ContainsKey(vet))\n            throw new InvalidOperationException();\n        // \u5728\u90bb\u63a5\u8868\u4e2d\u5220\u9664\u9876\u70b9 vet \u5bf9\u5e94\u7684\u94fe\u8868\n        adjList.Remove(vet);\n        // \u904d\u5386\u5176\u4ed6\u9876\u70b9\u7684\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u5305\u542b vet \u7684\u8fb9\n        foreach (List<Vertex> list in adjList.Values) {\n            list.Remove(vet);\n        }\n    }", "doc_comment": "/* \u5220\u9664\u9876\u70b9 */"}, "code_tokens": ["void", "RemoveVertex", "public", "(", ")", "{", "// \u5728\u90bb\u63a5\u8868\u4e2d\u5220\u9664\u9876\u70b9 vet \u5bf9\u5e94\u7684\u94fe\u8868", "// \u904d\u5386\u5176\u4ed6\u9876\u70b9\u7684\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u5305\u542b vet \u7684\u8fb9", "}", "Vertex", "vet", "if", ";", "", "{", "}", "(", ")", "throw", ";", "adjList", ".", "Remove", "foreach", ";", "!", "new", "InvalidOperationException", "(", "vet", ")", "(", ")", "list", ".", "Remove", "adjList", ".", "ContainsKey", "(", ")", ">", "(", "vet", ")", "(", "vet", ")", "List", "<", "Vertex", "list", "in", "adjList", ".", "Values"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 84, "ast_depth": 9, "n_identifiers": 11, "vocab_size": 29}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_graph/graph_adjacency_list.cs#69-77", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_graph/graph_adjacency_list.cs", "language": "Java"}, "method": {"name": "Print", "qualified_name": "codes.csharp.chapter_graph.graph_adjacency_list.cs#Print", "start_line": 69, "end_line": 77, "signature": "Print()", "original_code": "public void Print() {\n        Console.WriteLine(\"\u90bb\u63a5\u8868 =\");\n        foreach (KeyValuePair<Vertex, List<Vertex>> pair in adjList) {\n            List<int> tmp = [];\n            foreach (Vertex vertex in pair.Value)\n                tmp.Add(vertex.val);\n            Console.WriteLine(pair.Key.val + \": [\" + string.Join(\", \", tmp) + \"],\");\n        }\n    }", "doc_comment": "/* \u6253\u5370\u90bb\u63a5\u8868 */"}, "code_tokens": ["void", "Print", "public", "(", ")", "{", "}", ";", "", "{", "}", "Console", ".", "WriteLine", "foreach", ";", ";", "(", ")", "(", ",", ")", "List", "tmp", "=", "Console", ".", "WriteLine", "\"", "\u90bb\u63a5\u8868 =", "\"", "KeyValuePair", "<", "Vertex", "List", "<", "<", ">", ";", "tmp", ".", "Add", "(", ")", "Vertex", ">>", "adjList", "int", "", "foreach", "(", ")", "+", "pair", "in", "[", "]", "(", ")", "vertex", ".", "val", "+", "\"", "],", "\"", "Vertex", "vertex", "in", "pair", ".", "Value", "+", "string", ".", "Join", ".", "val", "\"", ": [", "\"", "(", ",", "tmp", ")", "pair", ".", "Key", "\"", ", ", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 136, "ast_depth": 13, "n_identifiers": 18, "vocab_size": 41}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_graph/graph_adjacency_list.cs#82-121", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_graph/graph_adjacency_list.cs", "language": "Java"}, "method": {"name": "Test", "qualified_name": "codes.csharp.chapter_graph.graph_adjacency_list.cs#Test", "start_line": 82, "end_line": 121, "signature": "Test()", "original_code": "public void Test() {\n        /* \u521d\u59cb\u5316\u65e0\u5411\u56fe */\n        Vertex[] v = Vertex.ValsToVets([1, 3, 2, 5, 4]);\n        Vertex[][] edges =\n        [\n            [v[0], v[1]],\n            [v[0], v[3]],\n            [v[1], v[2]],\n            [v[2], v[3]],\n            [v[2], v[4]],\n            [v[3], v[4]] \n        ];\n        GraphAdjList graph = new(edges);\n        Console.WriteLine(\"\\n\u521d\u59cb\u5316\u540e\uff0c\u56fe\u4e3a\");\n        graph.Print();\n\n        /* \u6dfb\u52a0\u8fb9 */\n        // \u9876\u70b9 1, 2 \u5373 v[0], v[2]\n        graph.AddEdge(v[0], v[2]);\n        Console.WriteLine(\"\\n\u6dfb\u52a0\u8fb9 1-2 \u540e\uff0c\u56fe\u4e3a\");\n        graph.Print();\n\n        /* \u5220\u9664\u8fb9 */\n        // \u9876\u70b9 1, 3 \u5373 v[0], v[1]\n        graph.RemoveEdge(v[0], v[1]);\n        Console.WriteLine(\"\\n\u5220\u9664\u8fb9 1-3 \u540e\uff0c\u56fe\u4e3a\");\n        graph.Print();\n\n        /* \u6dfb\u52a0\u9876\u70b9 */\n        Vertex v5 = new(6);\n        graph.AddVertex(v5);\n        Console.WriteLine(\"\\n\u6dfb\u52a0\u9876\u70b9 6 \u540e\uff0c\u56fe\u4e3a\");\n        graph.Print();\n\n        /* \u5220\u9664\u9876\u70b9 */\n        // \u9876\u70b9 3 \u5373 v[1]\n        graph.RemoveVertex(v[1]);\n        Console.WriteLine(\"\\n\u5220\u9664\u9876\u70b9 3 \u540e\uff0c\u56fe\u4e3a\");\n        graph.Print();\n    }", "doc_comment": ""}, "code_tokens": ["void", "Test", "public", "(", ")", "{", "/* \u521d\u59cb\u5316\u65e0\u5411\u56fe */", "/* \u6dfb\u52a0\u8fb9 */", "// \u9876\u70b9 1, 2 \u5373 v[0], v[2]", "/* \u5220\u9664\u8fb9 */", "// \u9876\u70b9 1, 3 \u5373 v[0], v[1]", "/* \u6dfb\u52a0\u9876\u70b9 */", "/* \u5220\u9664\u9876\u70b9 */", "// \u9876\u70b9 3 \u5373 v[1]", "}", ";", ",", ",", ",", ",", ",", ",", ",", ",", ",", ",", ",", ";", "GraphAdjList", ";", ";", ";", ";", ";", ";", ";", ";", ";", "Vertex", ";", ";", ";", ";", ";", ";", ";", "Vertex", "v", "=", "Vertex", "edges", "=", "v", "]", "[", "v", "v", "]", "[", "v", "v", "]", "[", "v", "v", "]", "[", "v", "v", "]", "[", "v", "v", "]", "]", "graph", "=", "Console", ".", "WriteLine", "graph", ".", "Print", "graph", ".", "AddEdge", "Console", ".", "WriteLine", "graph", ".", "Print", "graph", ".", "RemoveEdge", "Console", ".", "WriteLine", "graph", ".", "Print", "v5", "=", "graph", ".", "AddVertex", "Console", ".", "WriteLine", "graph", ".", "Print", "graph", ".", "RemoveVertex", "Console", ".", "WriteLine", "graph", ".", "Print", "[", "]", "Vertex", ".", "ValsToVets", "[", "]", "[", "]", "[", "[", "v", "[", "0", "]", "[", "]", "[", "]", "[", "]", "[", "]", "[", "]", "[", "]", "[", "]", "[", "]", "[", "]", "[", "]", "[", "]", "new", "(", "edges", ")", "(", ")", "(", ")", "(", ",", ")", "(", ")", "(", ")", "(", ",", ")", "(", ")", "(", ")", "new", "(", "6", ")", "(", "v5", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", "1", ",", "3", ",", "2", ",", "5", ",", "4", ")", "1", "0", "3", "1", "2", "2", "3", "2", "4", "3", "4", "\"", "\\n", "\u521d\u59cb\u5316\u540e\uff0c\u56fe\u4e3a", "\"", "v", "[", "0", "]", "v", "[", "2", "]", "\"", "\\n", "\u6dfb\u52a0\u8fb9 1-2 \u540e\uff0c\u56fe\u4e3a", "\"", "v", "[", "0", "]", "v", "[", "1", "]", "\"", "\\n", "\u5220\u9664\u8fb9 1-3 \u540e\uff0c\u56fe\u4e3a", "\"", "\"", "\\n", "\u6dfb\u52a0\u9876\u70b9 6 \u540e\uff0c\u56fe\u4e3a", "\"", "v", "[", "1", "]", "\"", "\\n", "\u5220\u9664\u9876\u70b9 3 \u540e\uff0c\u56fe\u4e3a", "\"", "[", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 384, "ast_depth": 9, "n_identifiers": 14, "vocab_size": 50}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_graph/graph_adjacency_matrix.cs#30-32", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_graph/graph_adjacency_matrix.cs", "language": "Java"}, "method": {"name": "Size", "qualified_name": "codes.csharp.chapter_graph.graph_adjacency_matrix.cs#Size", "start_line": 30, "end_line": 32, "signature": "Size()", "original_code": "int Size() {\n        return vertices.Count;\n    }", "doc_comment": "/* \u83b7\u53d6\u9876\u70b9\u6570\u91cf */"}, "code_tokens": ["Size", "int", "(", ")", "{", "}", "return", ";", "vertices", ".", "Count"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 18, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 11}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_graph/graph_adjacency_matrix.cs#35-49", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_graph/graph_adjacency_matrix.cs", "language": "Java"}, "method": {"name": "AddVertex", "qualified_name": "codes.csharp.chapter_graph.graph_adjacency_matrix.cs#AddVertex", "start_line": 35, "end_line": 49, "signature": "AddVertex(int val)", "original_code": "public void AddVertex(int val) {\n        int n = Size();\n        // \u5411\u9876\u70b9\u5217\u8868\u4e2d\u6dfb\u52a0\u65b0\u9876\u70b9\u7684\u503c\n        vertices.Add(val);\n        // \u5728\u90bb\u63a5\u77e9\u9635\u4e2d\u6dfb\u52a0\u4e00\u884c\n        List<int> newRow = new(n);\n        for (int j = 0; j < n; j++) {\n            newRow.Add(0);\n        }\n        adjMat.Add(newRow);\n        // \u5728\u90bb\u63a5\u77e9\u9635\u4e2d\u6dfb\u52a0\u4e00\u5217\n        foreach (List<int> row in adjMat) {\n            row.Add(0);\n        }\n    }", "doc_comment": "/* \u6dfb\u52a0\u9876\u70b9 */"}, "code_tokens": ["void", "AddVertex", "public", "(", ")", "{", "// \u5411\u9876\u70b9\u5217\u8868\u4e2d\u6dfb\u52a0\u65b0\u9876\u70b9\u7684\u503c", "// \u5728\u90bb\u63a5\u77e9\u9635\u4e2d\u6dfb\u52a0\u4e00\u884c", "// \u5728\u90bb\u63a5\u77e9\u9635\u4e2d\u6dfb\u52a0\u4e00\u5217", "}", "val", ";", ";", ";", "for", "(", ";", ")", ";", "", "{", "}", "int", "int", "n", "=", "vertices", ".", "Add", "List", "newRow", "=", ";", "j", "<", "n", "j", "++", "{", "}", "adjMat", ".", "Add", "foreach", ";", "Size", "(", "val", ")", "<", ">", "new", "(", "n", ")", "int", "j", "=", "0", ";", "(", "newRow", ")", "(", "adjMat", ")", "row", ".", "Add", "(", ")", "int", "newRow", ".", "Add", "row", "in", "(", "0", ")", "(", "0", ")", "List", "<", ">", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 133, "ast_depth": 11, "n_identifiers": 12, "vocab_size": 33}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_graph/graph_adjacency_matrix.cs#52-63", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_graph/graph_adjacency_matrix.cs", "language": "Java"}, "method": {"name": "RemoveVertex", "qualified_name": "codes.csharp.chapter_graph.graph_adjacency_matrix.cs#RemoveVertex", "start_line": 52, "end_line": 63, "signature": "RemoveVertex(int index)", "original_code": "public void RemoveVertex(int index) {\n        if (index >= Size())\n            throw new IndexOutOfRangeException();\n        // \u5728\u9876\u70b9\u5217\u8868\u4e2d\u79fb\u9664\u7d22\u5f15 index \u7684\u9876\u70b9\n        vertices.RemoveAt(index);\n        // \u5728\u90bb\u63a5\u77e9\u9635\u4e2d\u5220\u9664\u7d22\u5f15 index \u7684\u884c\n        adjMat.RemoveAt(index);\n        // \u5728\u90bb\u63a5\u77e9\u9635\u4e2d\u5220\u9664\u7d22\u5f15 index \u7684\u5217\n        foreach (List<int> row in adjMat) {\n            row.RemoveAt(index);\n        }\n    }", "doc_comment": "/* \u5220\u9664\u9876\u70b9 */"}, "code_tokens": ["void", "RemoveVertex", "public", "(", ")", "{", "// \u5728\u9876\u70b9\u5217\u8868\u4e2d\u79fb\u9664\u7d22\u5f15 index \u7684\u9876\u70b9", "// \u5728\u90bb\u63a5\u77e9\u9635\u4e2d\u5220\u9664\u7d22\u5f15 index \u7684\u884c", "// \u5728\u90bb\u63a5\u77e9\u9635\u4e2d\u5220\u9664\u7d22\u5f15 index \u7684\u5217", "}", "index", "if", ";", ";", "", "{", "}", "int", "(", ")", "throw", ";", "vertices", ".", "RemoveAt", "adjMat", ".", "RemoveAt", "foreach", ";", "index", ">=", "new", "IndexOutOfRangeException", "(", "index", ")", "(", "index", ")", "(", "adjMat", ")", "row", ".", "RemoveAt", "Size", "(", ")", "row", "in", "(", "index", ")", "(", ")", "List", "<", ">", "int"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 92, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 30}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_graph/graph_adjacency_matrix.cs#67-74", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_graph/graph_adjacency_matrix.cs", "language": "Java"}, "method": {"name": "AddEdge", "qualified_name": "codes.csharp.chapter_graph.graph_adjacency_matrix.cs#AddEdge", "start_line": 67, "end_line": 74, "signature": "AddEdge(int i, int j)", "original_code": "public void AddEdge(int i, int j) {\n        // \u7d22\u5f15\u8d8a\u754c\u4e0e\u76f8\u7b49\u5904\u7406\n        if (i < 0 || j < 0 || i >= Size() || j >= Size() || i == j)\n            throw new IndexOutOfRangeException();\n        // \u5728\u65e0\u5411\u56fe\u4e2d\uff0c\u90bb\u63a5\u77e9\u9635\u5173\u4e8e\u4e3b\u5bf9\u89d2\u7ebf\u5bf9\u79f0\uff0c\u5373\u6ee1\u8db3 (i, j) == (j, i)\n        adjMat[i][j] = 1;\n        adjMat[j][i] = 1;\n    }", "doc_comment": "// \u53c2\u6570 i, j \u5bf9\u5e94 vertices \u5143\u7d20\u7d22\u5f15"}, "code_tokens": ["void", "AddEdge", "public", "(", ",", ")", "{", "// \u7d22\u5f15\u8d8a\u754c\u4e0e\u76f8\u7b49\u5904\u7406", "// \u5728\u65e0\u5411\u56fe\u4e2d\uff0c\u90bb\u63a5\u77e9\u9635\u5173\u4e8e\u4e3b\u5bf9\u89d2\u7ebf\u5bf9\u79f0\uff0c\u5373\u6ee1\u8db3 (i, j) == (j, i)", "}", "i", "j", "if", ";", ";", "int", "int", "(", ")", "throw", ";", "=", "1", "=", "1", "||", "new", "IndexOutOfRangeException", "[", "j", "]", "[", "i", "]", "||", "i", "==", "j", "(", ")", "adjMat", "[", "i", "]", "adjMat", "[", "j", "]", "||", "j", ">=", "||", "i", ">=", "Size", "i", "<", "0", "j", "<", "0", "Size", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 101, "ast_depth": 12, "n_identifiers": 5, "vocab_size": 29}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_graph/graph_adjacency_matrix.cs#78-84", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_graph/graph_adjacency_matrix.cs", "language": "Java"}, "method": {"name": "RemoveEdge", "qualified_name": "codes.csharp.chapter_graph.graph_adjacency_matrix.cs#RemoveEdge", "start_line": 78, "end_line": 84, "signature": "RemoveEdge(int i, int j)", "original_code": "public void RemoveEdge(int i, int j) {\n        // \u7d22\u5f15\u8d8a\u754c\u4e0e\u76f8\u7b49\u5904\u7406\n        if (i < 0 || j < 0 || i >= Size() || j >= Size() || i == j)\n            throw new IndexOutOfRangeException();\n        adjMat[i][j] = 0;\n        adjMat[j][i] = 0;\n    }", "doc_comment": "// \u53c2\u6570 i, j \u5bf9\u5e94 vertices \u5143\u7d20\u7d22\u5f15"}, "code_tokens": ["void", "RemoveEdge", "public", "(", ",", ")", "{", "// \u7d22\u5f15\u8d8a\u754c\u4e0e\u76f8\u7b49\u5904\u7406", "}", "i", "j", "if", ";", ";", "int", "int", "(", ")", "throw", ";", "=", "0", "=", "0", "||", "new", "IndexOutOfRangeException", "[", "j", "]", "[", "i", "]", "||", "i", "==", "j", "(", ")", "adjMat", "[", "i", "]", "adjMat", "[", "j", "]", "||", "j", ">=", "||", "i", ">=", "Size", "i", "<", "0", "j", "<", "0", "Size", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 100, "ast_depth": 12, "n_identifiers": 5, "vocab_size": 27}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_graph/graph_adjacency_matrix.cs#87-92", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_graph/graph_adjacency_matrix.cs", "language": "Java"}, "method": {"name": "Print", "qualified_name": "codes.csharp.chapter_graph.graph_adjacency_matrix.cs#Print", "start_line": 87, "end_line": 92, "signature": "Print()", "original_code": "public void Print() {\n        Console.Write(\"\u9876\u70b9\u5217\u8868 = \");\n        PrintUtil.PrintList(vertices);\n        Console.WriteLine(\"\u90bb\u63a5\u77e9\u9635 =\");\n        PrintUtil.PrintMatrix(adjMat);\n    }", "doc_comment": "/* \u6253\u5370\u90bb\u63a5\u77e9\u9635 */"}, "code_tokens": ["void", "Print", "public", "(", ")", "{", "}", ";", ";", ";", ";", "Console", ".", "Write", "PrintUtil", ".", "PrintList", "Console", ".", "WriteLine", "PrintUtil", ".", "PrintMatrix", "(", ")", "(", "vertices", ")", "(", ")", "(", "adjMat", ")", "\"", "\u9876\u70b9\u5217\u8868 = ", "\"", "\"", "\u90bb\u63a5\u77e9\u9635 =", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 58, "ast_depth": 8, "n_identifiers": 9, "vocab_size": 20}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_graph/graph_adjacency_matrix.cs#97-136", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_graph/graph_adjacency_matrix.cs", "language": "Java"}, "method": {"name": "Test", "qualified_name": "codes.csharp.chapter_graph.graph_adjacency_matrix.cs#Test", "start_line": 97, "end_line": 136, "signature": "Test()", "original_code": "public void Test() {\n        /* \u521d\u59cb\u5316\u65e0\u5411\u56fe */\n        // \u8bf7\u6ce8\u610f\uff0cedges \u5143\u7d20\u4ee3\u8868\u9876\u70b9\u7d22\u5f15\uff0c\u5373\u5bf9\u5e94 vertices \u5143\u7d20\u7d22\u5f15\n        int[] vertices = [1, 3, 2, 5, 4];\n        int[][] edges = \n        [\n            [0, 1],\n            [0, 3],\n            [1, 2],\n            [2, 3],\n            [2, 4],\n            [3, 4]\n        ];\n        GraphAdjMat graph = new(vertices, edges);\n        Console.WriteLine(\"\\n\u521d\u59cb\u5316\u540e\uff0c\u56fe\u4e3a\");\n        graph.Print();\n\n        /* \u6dfb\u52a0\u8fb9 */\n        // \u9876\u70b9 1, 2 \u7684\u7d22\u5f15\u5206\u522b\u4e3a 0, 2\n        graph.AddEdge(0, 2);\n        Console.WriteLine(\"\\n\u6dfb\u52a0\u8fb9 1-2 \u540e\uff0c\u56fe\u4e3a\");\n        graph.Print();\n\n        /* \u5220\u9664\u8fb9 */\n        // \u9876\u70b9 1, 3 \u7684\u7d22\u5f15\u5206\u522b\u4e3a 0, 1\n        graph.RemoveEdge(0, 1);\n        Console.WriteLine(\"\\n\u5220\u9664\u8fb9 1-3 \u540e\uff0c\u56fe\u4e3a\");\n        graph.Print();\n\n        /* \u6dfb\u52a0\u9876\u70b9 */\n        graph.AddVertex(6);\n        Console.WriteLine(\"\\n\u6dfb\u52a0\u9876\u70b9 6 \u540e\uff0c\u56fe\u4e3a\");\n        graph.Print();\n\n        /* \u5220\u9664\u9876\u70b9 */\n        // \u9876\u70b9 3 \u7684\u7d22\u5f15\u4e3a 1\n        graph.RemoveVertex(1);\n        Console.WriteLine(\"\\n\u5220\u9664\u9876\u70b9 3 \u540e\uff0c\u56fe\u4e3a\");\n        graph.Print();\n    }", "doc_comment": ""}, "code_tokens": ["void", "Test", "public", "(", ")", "{", "/* \u521d\u59cb\u5316\u65e0\u5411\u56fe */", "// \u8bf7\u6ce8\u610f\uff0cedges \u5143\u7d20\u4ee3\u8868\u9876\u70b9\u7d22\u5f15\uff0c\u5373\u5bf9\u5e94 vertices \u5143\u7d20\u7d22\u5f15", "/* \u6dfb\u52a0\u8fb9 */", "// \u9876\u70b9 1, 2 \u7684\u7d22\u5f15\u5206\u522b\u4e3a 0, 2", "/* \u5220\u9664\u8fb9 */", "// \u9876\u70b9 1, 3 \u7684\u7d22\u5f15\u5206\u522b\u4e3a 0, 1", "/* \u6dfb\u52a0\u9876\u70b9 */", "/* \u5220\u9664\u9876\u70b9 */", "// \u9876\u70b9 3 \u7684\u7d22\u5f15\u4e3a 1", "}", ";", ";", "GraphAdjMat", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "vertices", "=", "1", ",", "3", ",", "2", ",", "5", ",", "4", "]", "edges", "=", "0", ",", "1", "]", ",", "[", "0", ",", "3", "]", ",", "[", "1", ",", "2", "]", ",", "[", "2", ",", "3", "]", ",", "[", "2", ",", "4", "]", ",", "[", "3", ",", "4", "]", "]", "graph", "=", "Console", ".", "WriteLine", "graph", ".", "Print", "graph", ".", "AddEdge", "Console", ".", "WriteLine", "graph", ".", "Print", "graph", ".", "RemoveEdge", "Console", ".", "WriteLine", "graph", ".", "Print", "graph", ".", "AddVertex", "Console", ".", "WriteLine", "graph", ".", "Print", "graph", ".", "RemoveVertex", "Console", ".", "WriteLine", "graph", ".", "Print", "int", "[", "]", "[", "int", "[", "]", "[", "]", "[", "[", "new", "(", ")", "(", ")", "(", "0", ",", "2", ")", "(", ")", "(", ")", "(", "0", ",", "1", ")", "(", ")", "(", ")", "(", "6", ")", "(", ")", "(", ")", "(", "1", ")", "(", ")", "(", ")", "", "(", "vertices", ",", "edges", ")", "\"", "\\n", "\u521d\u59cb\u5316\u540e\uff0c\u56fe\u4e3a", "\"", "\"", "\\n", "\u6dfb\u52a0\u8fb9 1-2 \u540e\uff0c\u56fe\u4e3a", "\"", "\"", "\\n", "\u5220\u9664\u8fb9 1-3 \u540e\uff0c\u56fe\u4e3a", "\"", "\"", "\\n", "\u6dfb\u52a0\u9876\u70b9 6 \u540e\uff0c\u56fe\u4e3a", "\"", "\"", "\\n", "\u5220\u9664\u9876\u70b9 3 \u540e\uff0c\u56fe\u4e3a", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 272, "ast_depth": 8, "n_identifiers": 11, "vocab_size": 50}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_graph/graph_bfs.cs#12-35", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_graph/graph_bfs.cs", "language": "Java"}, "method": {"name": "GraphBFS", "qualified_name": "codes.csharp.chapter_graph.graph_bfs.cs#GraphBFS", "start_line": 12, "end_line": 35, "signature": "GraphBFS(GraphAdjList graph, Vertex startVet)", "original_code": "List<Vertex> GraphBFS(GraphAdjList graph, Vertex startVet) {\n        // \u9876\u70b9\u904d\u5386\u5e8f\u5217\n        List<Vertex> res = [];\n        // \u54c8\u5e0c\u8868\uff0c\u7528\u4e8e\u8bb0\u5f55\u5df2\u88ab\u8bbf\u95ee\u8fc7\u7684\u9876\u70b9\n        HashSet<Vertex> visited = [startVet];\n        // \u961f\u5217\u7528\u4e8e\u5b9e\u73b0 BFS\n        Queue<Vertex> que = new();\n        que.Enqueue(startVet);\n        // \u4ee5\u9876\u70b9 vet \u4e3a\u8d77\u70b9\uff0c\u5faa\u73af\u76f4\u81f3\u8bbf\u95ee\u5b8c\u6240\u6709\u9876\u70b9\n        while (que.Count > 0) {\n            Vertex vet = que.Dequeue(); // \u961f\u9996\u9876\u70b9\u51fa\u961f\n            res.Add(vet);               // \u8bb0\u5f55\u8bbf\u95ee\u9876\u70b9\n            foreach (Vertex adjVet in graph.adjList[vet]) {\n                if (visited.Contains(adjVet)) {\n                    continue;          // \u8df3\u8fc7\u5df2\u88ab\u8bbf\u95ee\u7684\u9876\u70b9\n                }\n                que.Enqueue(adjVet);   // \u53ea\u5165\u961f\u672a\u8bbf\u95ee\u7684\u9876\u70b9\n                visited.Add(adjVet);   // \u6807\u8bb0\u8be5\u9876\u70b9\u5df2\u88ab\u8bbf\u95ee\n            }\n        }\n\n        // \u8fd4\u56de\u9876\u70b9\u904d\u5386\u5e8f\u5217\n        return res;\n    }", "doc_comment": "// \u4f7f\u7528\u90bb\u63a5\u8868\u6765\u8868\u793a\u56fe\uff0c\u4ee5\u4fbf\u83b7\u53d6\u6307\u5b9a\u9876\u70b9\u7684\u6240\u6709\u90bb\u63a5\u9876\u70b9"}, "code_tokens": ["GraphBFS", "List", "(", ",", ")", "{", "// \u9876\u70b9\u904d\u5386\u5e8f\u5217", "// \u54c8\u5e0c\u8868\uff0c\u7528\u4e8e\u8bb0\u5f55\u5df2\u88ab\u8bbf\u95ee\u8fc7\u7684\u9876\u70b9", "// \u961f\u5217\u7528\u4e8e\u5b9e\u73b0 BFS", "// \u4ee5\u9876\u70b9 vet \u4e3a\u8d77\u70b9\uff0c\u5faa\u73af\u76f4\u81f3\u8bbf\u95ee\u5b8c\u6240\u6709\u9876\u70b9", "// \u8fd4\u56de\u9876\u70b9\u904d\u5386\u5e8f\u5217", "}", "<", "Vertex", ">", "GraphAdjList", "graph", "Vertex", "startVet", ";", ";", ";", ";", "while", "return", "res", ";", "List", "res", "=", "HashSet", "visited", "=", "Queue", "que", "=", "que", ".", "Enqueue", "(", ")", "{", "// \u961f\u9996\u9876\u70b9\u51fa\u961f", "// \u8bb0\u5f55\u8bbf\u95ee\u9876\u70b9", "}", "<", "Vertex", ">", "", "<", "Vertex", ">", "", "[", "startVet", "]", "<", "Vertex", ">", "new", "(", "startVet", ")", ">", "0", "Vertex", ";", ";", "", "{", "// \u53ea\u5165\u961f\u672a\u8bbf\u95ee\u7684\u9876\u70b9", "// \u6807\u8bb0\u8be5\u9876\u70b9\u5df2\u88ab\u8bbf\u95ee", "}", "[", "]", "", "(", ")", "que", ".", "Count", "vet", "=", "res", ".", "Add", "foreach", "if", ";", ";", "que", ".", "Dequeue", "(", "vet", ")", "(", ")", "(", ")", "{", "// \u8df3\u8fc7\u5df2\u88ab\u8bbf\u95ee\u7684\u9876\u70b9", "}", "que", ".", "Enqueue", "visited", ".", "Add", "(", ")", "Vertex", "adjVet", "in", "[", "vet", "]", "visited", ".", "Contains", "continue", ";", "(", "adjVet", ")", "(", "adjVet", ")", "graph", ".", "adjList", "(", "adjVet", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 196, "ast_depth": 11, "n_identifiers": 17, "vocab_size": 50}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_graph/graph_bfs.cs#38-57", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_graph/graph_bfs.cs", "language": "Java"}, "method": {"name": "Test", "qualified_name": "codes.csharp.chapter_graph.graph_bfs.cs#Test", "start_line": 38, "end_line": 57, "signature": "Test()", "original_code": "public void Test() {\n        /* \u521d\u59cb\u5316\u65e0\u5411\u56fe */\n        Vertex[] v = Vertex.ValsToVets([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\n        Vertex[][] edges =\n        [\n            [v[0], v[1]], [v[0], v[3]], [v[1], v[2]],\n            [v[1], v[4]], [v[2], v[5]], [v[3], v[4]],\n            [v[3], v[6]], [v[4], v[5]], [v[4], v[7]],\n            [v[5], v[8]], [v[6], v[7]], [v[7], v[8]]\n        ];\n\n        GraphAdjList graph = new(edges);\n        Console.WriteLine(\"\\n\u521d\u59cb\u5316\u540e\uff0c\u56fe\u4e3a\");\n        graph.Print();\n\n        /* \u5e7f\u5ea6\u4f18\u5148\u904d\u5386 BFS */\n        List<Vertex> res = GraphBFS(graph, v[0]);\n        Console.WriteLine(\"\\n\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\uff08BFS\uff09\u9876\u70b9\u5e8f\u5217\u4e3a\");\n        Console.WriteLine(string.Join(\" \", Vertex.VetsToVals(res)));\n    }", "doc_comment": ""}, "code_tokens": ["void", "Test", "public", "(", ")", "{", "/* \u521d\u59cb\u5316\u65e0\u5411\u56fe */", "/* \u5e7f\u5ea6\u4f18\u5148\u904d\u5386 BFS */", "}", ";", ",", ",", ",", ",", ",", ",", ",", ",", ",", ",", ",", ",", ",", ",", ",", ",", ",", ",", ",", ",", ",", ",", ",", ";", "GraphAdjList", ";", ";", ";", ";", ";", ";", "Vertex", "v", "=", "Vertex", "edges", "=", "v", "]", "[", "v", "v", "]", "[", "v", "v", "]", "[", "v", "v", "]", "[", "v", "v", "]", "[", "v", "v", "]", "[", "v", "v", "]", "[", "v", "v", "]", "[", "v", "v", "]", "[", "v", "v", "]", "[", "v", "v", "]", "[", "v", "v", "]", "]", "graph", "=", "Console", ".", "WriteLine", "graph", ".", "Print", "List", "res", "=", "Console", ".", "WriteLine", "Console", ".", "WriteLine", "[", "]", "Vertex", ".", "ValsToVets", "[", "]", "[", "]", "[", "[", "v", "[", "0", "]", "[", "]", "[", "]", "[", "]", "[", "]", "[", "]", "[", "]", "[", "]", "[", "]", "[", "]", "[", "]", "[", "]", "[", "]", "[", "]", "[", "]", "[", "]", "[", "]", "[", "]", "[", "]", "[", "]", "[", "]", "[", "]", "[", "]", "[", "]", "new", "(", "edges", ")", "(", ")", "(", ")", "<", "Vertex", ">", "GraphBFS", "(", ")", "(", ")", "(", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ")", "1", "0", "3", "1", "2", "1", "4", "2", "5", "3", "4", "3", "6", "4", "5", "4", "7", "5", "8", "6", "7", "7", "8", "\"", "\\n", "\u521d\u59cb\u5316\u540e\uff0c\u56fe\u4e3a", "\"", "(", "graph", ",", ")", "\"", "\\n", "\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\uff08BFS\uff09\u9876\u70b9\u5e8f\u5217\u4e3a", "\"", "string", ".", "Join", "[", "]", "v", "[", "0", "]", "(", ",", ")", "\"", " ", "\"", "Vertex", ".", "VetsToVals", "(", "res", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 406, "ast_depth": 11, "n_identifiers": 14, "vocab_size": 48}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_graph/graph_dfs.cs#11-22", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_graph/graph_dfs.cs", "language": "Java"}, "method": {"name": "DFS", "qualified_name": "codes.csharp.chapter_graph.graph_dfs.cs#DFS", "start_line": 11, "end_line": 22, "signature": "DFS(GraphAdjList graph, HashSet<Vertex> visited, List<Vertex> res, Vertex vet)", "original_code": "void DFS(GraphAdjList graph, HashSet<Vertex> visited, List<Vertex> res, Vertex vet) {\n        res.Add(vet);     // \u8bb0\u5f55\u8bbf\u95ee\u9876\u70b9\n        visited.Add(vet); // \u6807\u8bb0\u8be5\u9876\u70b9\u5df2\u88ab\u8bbf\u95ee\n        // \u904d\u5386\u8be5\u9876\u70b9\u7684\u6240\u6709\u90bb\u63a5\u9876\u70b9\n        foreach (Vertex adjVet in graph.adjList[vet]) {\n            if (visited.Contains(adjVet)) {\n                continue; // \u8df3\u8fc7\u5df2\u88ab\u8bbf\u95ee\u7684\u9876\u70b9                             \n            }\n            // \u9012\u5f52\u8bbf\u95ee\u90bb\u63a5\u9876\u70b9\n            DFS(graph, visited, res, adjVet);\n        }\n    }", "doc_comment": "/* \u6df1\u5ea6\u4f18\u5148\u904d\u5386 DFS \u8f85\u52a9\u51fd\u6570 */"}, "code_tokens": ["void", "DFS", "(", ",", ",", ",", ")", "{", "// \u8bb0\u5f55\u8bbf\u95ee\u9876\u70b9", "// \u6807\u8bb0\u8be5\u9876\u70b9\u5df2\u88ab\u8bbf\u95ee", "// \u904d\u5386\u8be5\u9876\u70b9\u7684\u6240\u6709\u90bb\u63a5\u9876\u70b9", "}", "GraphAdjList", "graph", "visited", "res", "Vertex", "vet", ";", ";", "", "{", "// \u9012\u5f52\u8bbf\u95ee\u90bb\u63a5\u9876\u70b9", "}", "HashSet", "List", "res", ".", "Add", "visited", ".", "Add", "foreach", "if", ";", "<", "Vertex", ">", "<", "Vertex", ">", "(", "vet", ")", "(", "vet", ")", "(", ")", "(", ")", "{", "// \u8df3\u8fc7\u5df2\u88ab\u8bbf\u95ee\u7684\u9876\u70b9                             ", "}", "DFS", "Vertex", "adjVet", "in", "[", "vet", "]", "visited", ".", "Contains", "continue", ";", "(", "graph", ",", "visited", ",", "res", ",", "adjVet", ")", "graph", ".", "adjList", "(", "adjVet", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 115, "ast_depth": 9, "n_identifiers": 11, "vocab_size": 35}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_graph/graph_dfs.cs#26-33", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_graph/graph_dfs.cs", "language": "Java"}, "method": {"name": "GraphDFS", "qualified_name": "codes.csharp.chapter_graph.graph_dfs.cs#GraphDFS", "start_line": 26, "end_line": 33, "signature": "GraphDFS(GraphAdjList graph, Vertex startVet)", "original_code": "List<Vertex> GraphDFS(GraphAdjList graph, Vertex startVet) {\n        // \u9876\u70b9\u904d\u5386\u5e8f\u5217\n        List<Vertex> res = [];\n        // \u54c8\u5e0c\u8868\uff0c\u7528\u4e8e\u8bb0\u5f55\u5df2\u88ab\u8bbf\u95ee\u8fc7\u7684\u9876\u70b9\n        HashSet<Vertex> visited = [];\n        DFS(graph, visited, res, startVet);\n        return res;\n    }", "doc_comment": "// \u4f7f\u7528\u90bb\u63a5\u8868\u6765\u8868\u793a\u56fe\uff0c\u4ee5\u4fbf\u83b7\u53d6\u6307\u5b9a\u9876\u70b9\u7684\u6240\u6709\u90bb\u63a5\u9876\u70b9"}, "code_tokens": ["GraphDFS", "List", "(", ",", ")", "{", "// \u9876\u70b9\u904d\u5386\u5e8f\u5217", "// \u54c8\u5e0c\u8868\uff0c\u7528\u4e8e\u8bb0\u5f55\u5df2\u88ab\u8bbf\u95ee\u8fc7\u7684\u9876\u70b9", "}", "<", "Vertex", ">", "GraphAdjList", "graph", "Vertex", "startVet", ";", ";", ";", "return", "res", ";", "List", "res", "=", "HashSet", "visited", "=", "DFS", "<", "Vertex", ">", "", "<", "Vertex", ">", "", "(", "graph", ",", "visited", ",", "res", ",", "startVet", ")", "[", "]", "[", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 76, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 25}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_graph/graph_dfs.cs#36-53", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_graph/graph_dfs.cs", "language": "Java"}, "method": {"name": "Test", "qualified_name": "codes.csharp.chapter_graph.graph_dfs.cs#Test", "start_line": 36, "end_line": 53, "signature": "Test()", "original_code": "public void Test() {\n        /* \u521d\u59cb\u5316\u65e0\u5411\u56fe */\n        Vertex[] v = Vertex.ValsToVets([0, 1, 2, 3, 4, 5, 6]);\n        Vertex[][] edges =\n        [\n            [v[0], v[1]], [v[0], v[3]], [v[1], v[2]],\n            [v[2], v[5]], [v[4], v[5]], [v[5], v[6]],\n        ];\n\n        GraphAdjList graph = new(edges);\n        Console.WriteLine(\"\\n\u521d\u59cb\u5316\u540e\uff0c\u56fe\u4e3a\");\n        graph.Print();\n\n        /* \u6df1\u5ea6\u4f18\u5148\u904d\u5386 DFS */\n        List<Vertex> res = GraphDFS(graph, v[0]);\n        Console.WriteLine(\"\\n\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff08DFS\uff09\u9876\u70b9\u5e8f\u5217\u4e3a\");\n        Console.WriteLine(string.Join(\" \", Vertex.VetsToVals(res)));\n    }", "doc_comment": ""}, "code_tokens": ["void", "Test", "public", "(", ")", "{", "/* \u521d\u59cb\u5316\u65e0\u5411\u56fe */", "/* \u6df1\u5ea6\u4f18\u5148\u904d\u5386 DFS */", "}", ";", ",", ",", ",", ",", ",", ",", ",", ",", ",", ",", ",", ";", "GraphAdjList", ";", ";", ";", ";", ";", ";", "Vertex", "v", "=", "Vertex", "edges", "=", "v", "]", "[", "v", "v", "]", "[", "v", "v", "]", "[", "v", "v", "]", "[", "v", "v", "]", "[", "v", "v", "]", ",", "]", "graph", "=", "Console", ".", "WriteLine", "graph", ".", "Print", "List", "res", "=", "Console", ".", "WriteLine", "Console", ".", "WriteLine", "[", "]", "Vertex", ".", "ValsToVets", "[", "]", "[", "]", "[", "[", "v", "[", "0", "]", "[", "]", "[", "]", "[", "]", "[", "]", "[", "]", "[", "]", "[", "]", "[", "]", "[", "]", "[", "]", "[", "]", "new", "(", "edges", ")", "(", ")", "(", ")", "<", "Vertex", ">", "GraphDFS", "(", ")", "(", ")", "(", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ")", "1", "0", "3", "1", "2", "2", "5", "4", "5", "5", "6", "\"", "\\n", "\u521d\u59cb\u5316\u540e\uff0c\u56fe\u4e3a", "\"", "(", "graph", ",", ")", "\"", "\\n", "\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff08DFS\uff09\u9876\u70b9\u5e8f\u5217\u4e3a", "\"", "string", ".", "Join", "[", "]", "v", "[", "0", "]", "(", ",", ")", "\"", " ", "\"", "Vertex", ".", "VetsToVals", "(", "res", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 281, "ast_depth": 11, "n_identifiers": 14, "vocab_size": 45}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_hashing/array_hash_map.cs#27-30", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_hashing/array_hash_map.cs", "language": "Java"}, "method": {"name": "HashFunc", "qualified_name": "codes.csharp.chapter_hashing.array_hash_map.cs#HashFunc", "start_line": 27, "end_line": 30, "signature": "HashFunc(int key)", "original_code": "int HashFunc(int key) {\n        int index = key % 100;\n        return index;\n    }", "doc_comment": "/* \u54c8\u5e0c\u51fd\u6570 */"}, "code_tokens": ["HashFunc", "int", "(", ")", "{", "}", "key", ";", "return", "index", ";", "int", "int", "index", "=", "key", "%", "100"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 30, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 13}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_hashing/array_hash_map.cs#33-38", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_hashing/array_hash_map.cs", "language": "Java"}, "method": {"name": "Get", "qualified_name": "codes.csharp.chapter_hashing.array_hash_map.cs#Get", "start_line": 33, "end_line": 38, "signature": "Get(int key)", "original_code": "public string? Get(int key) {\n        int index = HashFunc(key);\n        Pair? pair = buckets[index];\n        if (pair == null) return null;\n        return pair.val;\n    }", "doc_comment": "/* \u67e5\u8be2\u64cd\u4f5c */"}, "code_tokens": ["string", "Get", "public", "?", "(", ")", "{", "}", "key", ";", "Pair", ";", "if", "return", ";", "int", "int", "index", "=", "?", "(", ")", "return", "null", ";", "pair", ".", "val", "HashFunc", "pair", "=", "pair", "==", "null", "(", "key", ")", "buckets", "[", "index", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 64, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 25}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_hashing/array_hash_map.cs#41-45", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_hashing/array_hash_map.cs", "language": "Java"}, "method": {"name": "Put", "qualified_name": "codes.csharp.chapter_hashing.array_hash_map.cs#Put", "start_line": 41, "end_line": 45, "signature": "Put(int key, string val)", "original_code": "public void Put(int key, string val) {\n        Pair pair = new(key, val);\n        int index = HashFunc(key);\n        buckets[index] = pair;\n    }", "doc_comment": "/* \u6dfb\u52a0\u64cd\u4f5c */"}, "code_tokens": ["void", "Put", "public", "(", ",", ")", "{", "}", "key", "string", "val", "Pair", ";", ";", ";", "int", "pair", "=", "int", "index", "=", "=", "pair", "new", "HashFunc", "buckets", "[", "index", "]", "", "(", "key", ",", "val", ")", "(", "key", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 59, "ast_depth": 8, "n_identifiers": 7, "vocab_size": 23}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_hashing/array_hash_map.cs#48-52", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_hashing/array_hash_map.cs", "language": "Java"}, "method": {"name": "Remove", "qualified_name": "codes.csharp.chapter_hashing.array_hash_map.cs#Remove", "start_line": 48, "end_line": 52, "signature": "Remove(int key)", "original_code": "public void Remove(int key) {\n        int index = HashFunc(key);\n        // \u7f6e\u4e3a null \uff0c\u4ee3\u8868\u5220\u9664\n        buckets[index] = null;\n    }", "doc_comment": "/* \u5220\u9664\u64cd\u4f5c */"}, "code_tokens": ["void", "Remove", "public", "(", ")", "{", "// \u7f6e\u4e3a null \uff0c\u4ee3\u8868\u5220\u9664", "}", "key", ";", ";", "int", "int", "index", "=", "=", "null", "HashFunc", "buckets", "[", "index", "]", "(", "key", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 40, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 18}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_hashing/array_hash_map.cs#55-60", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_hashing/array_hash_map.cs", "language": "Java"}, "method": {"name": "PairSet", "qualified_name": "codes.csharp.chapter_hashing.array_hash_map.cs#PairSet", "start_line": 55, "end_line": 60, "signature": "PairSet()", "original_code": "public List<Pair> PairSet() {\n        List<Pair> pairSet = [];\n        foreach (Pair? pair in buckets) {\n            if (pair != null)\n                pairSet.Add(pair);\n        }", "doc_comment": "/* \u83b7\u53d6\u6240\u6709\u952e\u503c\u5bf9 */"}, "code_tokens": ["PairSet", "public", "List", "(", ")", "{", "}", "<", "Pair", ">", ";", "foreach", ";", "List", "pairSet", "=", "(", "Pair", "?", "<", "Pair", ">", "", "pair", "in", "buckets", ")", "{", "if", "pairSet", ".", "Add", "[", "]", "(", ")", "(", "pair", ")", "pair", "!=", "null"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 63, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 26}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_hashing/array_hash_map.cs#65-70", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_hashing/array_hash_map.cs", "language": "Java"}, "method": {"name": "KeySet", "qualified_name": "codes.csharp.chapter_hashing.array_hash_map.cs#KeySet", "start_line": 65, "end_line": 70, "signature": "KeySet()", "original_code": "public List<int> KeySet() {\n        List<int> keySet = [];\n        foreach (Pair? pair in buckets) {\n            if (pair != null)\n                keySet.Add(pair.key);\n        }", "doc_comment": "/* \u83b7\u53d6\u6240\u6709\u952e */"}, "code_tokens": ["KeySet", "public", "List", "(", ")", "{", "}", "<", ">", ";", "foreach", ";", "int", "List", "keySet", "=", "(", "Pair", "?", "<", ">", "", "pair", "in", "buckets", ")", "{", "if", "keySet", ".", "Add", "int", "[", "]", "(", ")", "(", ")", "pair", "!=", "null", "pair", ".", "key"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 68, "ast_depth": 9, "n_identifiers": 9, "vocab_size": 28}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_hashing/array_hash_map.cs#75-80", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_hashing/array_hash_map.cs", "language": "Java"}, "method": {"name": "ValueSet", "qualified_name": "codes.csharp.chapter_hashing.array_hash_map.cs#ValueSet", "start_line": 75, "end_line": 80, "signature": "ValueSet()", "original_code": "public List<string> ValueSet() {\n        List<string> valueSet = [];\n        foreach (Pair? pair in buckets) {\n            if (pair != null)\n                valueSet.Add(pair.val);\n        }", "doc_comment": "/* \u83b7\u53d6\u6240\u6709\u503c */"}, "code_tokens": ["ValueSet", "public", "List", "(", ")", "{", "}", "<", "string", ">", ";", "foreach", ";", "List", "valueSet", "=", "(", "Pair", "?", "<", "string", ">", "", "pair", "in", "buckets", ")", "{", "if", "valueSet", ".", "Add", "[", "]", "(", ")", "(", ")", "pair", "!=", "null", "pair", ".", "val"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 66, "ast_depth": 9, "n_identifiers": 9, "vocab_size": 28}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_hashing/array_hash_map.cs#85-89", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_hashing/array_hash_map.cs", "language": "Java"}, "method": {"name": "Print", "qualified_name": "codes.csharp.chapter_hashing.array_hash_map.cs#Print", "start_line": 85, "end_line": 89, "signature": "Print()", "original_code": "public void Print() {\n        foreach (Pair kv in PairSet()) {\n            Console.WriteLine(kv.key + \" -> \" + kv.val);\n        }\n    }", "doc_comment": "/* \u6253\u5370\u54c8\u5e0c\u8868 */"}, "code_tokens": ["void", "Print", "public", "(", ")", "{", "}", "", "{", "}", "foreach", ";", "(", ")", "Console", ".", "WriteLine", "Pair", "kv", "in", "PairSet", "(", ")", "(", ")", "+", "+", "kv", ".", "val", "kv", ".", "key", "\"", " -> ", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 56, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 22}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_hashing/array_hash_map.cs#95-133", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_hashing/array_hash_map.cs", "language": "Java"}, "method": {"name": "Test", "qualified_name": "codes.csharp.chapter_hashing.array_hash_map.cs#Test", "start_line": 95, "end_line": 133, "signature": "Test()", "original_code": "public void Test() {\n        /* \u521d\u59cb\u5316\u54c8\u5e0c\u8868 */\n        ArrayHashMap map = new();\n\n        /* \u6dfb\u52a0\u64cd\u4f5c */\n        // \u5728\u54c8\u5e0c\u8868\u4e2d\u6dfb\u52a0\u952e\u503c\u5bf9 (key, value)\n        map.Put(12836, \"\u5c0f\u54c8\");\n        map.Put(15937, \"\u5c0f\u5570\");\n        map.Put(16750, \"\u5c0f\u7b97\");\n        map.Put(13276, \"\u5c0f\u6cd5\");\n        map.Put(10583, \"\u5c0f\u9e2d\");\n        Console.WriteLine(\"\\n\u6dfb\u52a0\u5b8c\u6210\u540e\uff0c\u54c8\u5e0c\u8868\u4e3a\\nKey -> Value\");\n        map.Print();\n\n        /* \u67e5\u8be2\u64cd\u4f5c */\n        // \u5411\u54c8\u5e0c\u8868\u8f93\u5165\u952e key \uff0c\u5f97\u5230\u503c value\n        string? name = map.Get(15937);\n        Console.WriteLine(\"\\n\u8f93\u5165\u5b66\u53f7 15937 \uff0c\u67e5\u8be2\u5230\u59d3\u540d \" + name);\n\n        /* \u5220\u9664\u64cd\u4f5c */\n        // \u5728\u54c8\u5e0c\u8868\u4e2d\u5220\u9664\u952e\u503c\u5bf9 (key, value)\n        map.Remove(10583);\n        Console.WriteLine(\"\\n\u5220\u9664 10583 \u540e\uff0c\u54c8\u5e0c\u8868\u4e3a\\nKey -> Value\");\n        map.Print();\n\n        /* \u904d\u5386\u54c8\u5e0c\u8868 */\n        Console.WriteLine(\"\\n\u904d\u5386\u952e\u503c\u5bf9 Key->Value\");\n        foreach (Pair kv in map.PairSet()) {\n            Console.WriteLine(kv.key + \" -> \" + kv.val);\n        }\n        Console.WriteLine(\"\\n\u5355\u72ec\u904d\u5386\u952e Key\");\n        foreach (int key in map.KeySet()) {\n            Console.WriteLine(key);\n        }\n        Console.WriteLine(\"\\n\u5355\u72ec\u904d\u5386\u503c Value\");\n        foreach (string val in map.ValueSet()) {\n            Console.WriteLine(val);\n        }\n    }", "doc_comment": ""}, "code_tokens": ["void", "Test", "public", "(", ")", "{", "/* \u521d\u59cb\u5316\u54c8\u5e0c\u8868 */", "/* \u6dfb\u52a0\u64cd\u4f5c */", "// \u5728\u54c8\u5e0c\u8868\u4e2d\u6dfb\u52a0\u952e\u503c\u5bf9 (key, value)", "/* \u67e5\u8be2\u64cd\u4f5c */", "// \u5411\u54c8\u5e0c\u8868\u8f93\u5165\u952e key \uff0c\u5f97\u5230\u503c value", "/* \u5220\u9664\u64cd\u4f5c */", "// \u5728\u54c8\u5e0c\u8868\u4e2d\u5220\u9664\u952e\u503c\u5bf9 (key, value)", "/* \u904d\u5386\u54c8\u5e0c\u8868 */", "}", "ArrayHashMap", ";", ";", ";", ";", ";", ";", ";", ";", "string", ";", ";", ";", ";", ";", ";", "", "{", "}", ";", "", "{", "}", ";", "", "{", "}", "map", "=", "map", ".", "Put", "map", ".", "Put", "map", ".", "Put", "map", ".", "Put", "map", ".", "Put", "Console", ".", "WriteLine", "map", ".", "Print", "?", "Console", ".", "WriteLine", "map", ".", "Remove", "Console", ".", "WriteLine", "map", ".", "Print", "Console", ".", "WriteLine", "foreach", ";", "Console", ".", "WriteLine", "foreach", ";", "Console", ".", "WriteLine", "foreach", ";", "new", "(", "12836", ",", ")", "(", "15937", ",", ")", "(", "16750", ",", ")", "(", "13276", ",", ")", "(", "10583", ",", ")", "(", ")", "(", ")", "name", "=", "(", ")", "(", "10583", ")", "(", ")", "(", ")", "(", ")", "(", ")", "Console", ".", "WriteLine", "(", ")", "(", ")", "Console", ".", "WriteLine", "(", ")", "(", ")", "Console", ".", "WriteLine", "", "(", ")", "\"", "\u5c0f\u54c8", "\"", "\"", "\u5c0f\u5570", "\"", "\"", "\u5c0f\u7b97", "\"", "\"", "\u5c0f\u6cd5", "\"", "\"", "\u5c0f\u9e2d", "\"", "\"", "\\n", "\u6dfb\u52a0\u5b8c\u6210\u540e\uff0c\u54c8\u5e0c\u8868\u4e3a", "\\n", "Key -> Value", "\"", "map", ".", "Get", "+", "name", "\"", "\\n", "\u5220\u9664 10583 \u540e\uff0c\u54c8\u5e0c\u8868\u4e3a", "\\n", "Key -> Value", "\"", "\"", "\\n", "\u904d\u5386\u952e\u503c\u5bf9 Key->Value", "\"", "Pair", "kv", "in", "map", ".", "PairSet", "(", ")", "\"", "\\n", "\u5355\u72ec\u904d\u5386\u952e Key", "\"", "key", "in", "map", ".", "KeySet", "(", "key", ")", "\"", "\\n", "\u5355\u72ec\u904d\u5386\u503c Value", "\"", "string", "val", "in", "map", ".", "ValueSet", "(", "val", ")", "(", "15937", ")", "\"", "\\n", "\u8f93\u5165\u5b66\u53f7 15937 \uff0c\u67e5\u8be2\u5230\u59d3\u540d ", "\"", "(", ")", "+", "int", "(", ")", "(", ")", "+", "kv", ".", "val", "kv", ".", "key", "\"", " -> ", "\""], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 352, "ast_depth": 11, "n_identifiers": 18, "vocab_size": 63}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_heap/my_heap.cs#31-33", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_heap/my_heap.cs", "language": "Java"}, "method": {"name": "Left", "qualified_name": "codes.csharp.chapter_heap.my_heap.cs#Left", "start_line": 31, "end_line": 33, "signature": "Left(int i)", "original_code": "int Left(int i) {\n        return 2 * i + 1;\n    }", "doc_comment": "/* \u83b7\u53d6\u5de6\u5b50\u8282\u70b9\u7d22\u5f15 */"}, "code_tokens": ["Left", "int", "(", ")", "{", "}", "i", "return", ";", "int", "+", "1", "2", "*", "i"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 25, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 13}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_heap/my_heap.cs#36-38", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_heap/my_heap.cs", "language": "Java"}, "method": {"name": "Right", "qualified_name": "codes.csharp.chapter_heap.my_heap.cs#Right", "start_line": 36, "end_line": 38, "signature": "Right(int i)", "original_code": "int Right(int i) {\n        return 2 * i + 2;\n    }", "doc_comment": "/* \u83b7\u53d6\u53f3\u5b50\u8282\u70b9\u7d22\u5f15 */"}, "code_tokens": ["Right", "int", "(", ")", "{", "}", "i", "return", ";", "int", "+", "2", "2", "*", "i"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 25, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 12}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_heap/my_heap.cs#41-43", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_heap/my_heap.cs", "language": "Java"}, "method": {"name": "Parent", "qualified_name": "codes.csharp.chapter_heap.my_heap.cs#Parent", "start_line": 41, "end_line": 43, "signature": "Parent(int i)", "original_code": "int Parent(int i) {\n        return (i - 1) / 2; // \u5411\u4e0b\u6574\u9664\n    }", "doc_comment": "/* \u83b7\u53d6\u7236\u8282\u70b9\u7d22\u5f15 */"}, "code_tokens": ["Parent", "int", "(", ")", "{", "// \u5411\u4e0b\u6574\u9664", "}", "i", "return", ";", "int", "/", "2", "(", ")", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 29, "ast_depth": 8, "n_identifiers": 2, "vocab_size": 14}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_heap/my_heap.cs#46-48", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_heap/my_heap.cs", "language": "Java"}, "method": {"name": "Peek", "qualified_name": "codes.csharp.chapter_heap.my_heap.cs#Peek", "start_line": 46, "end_line": 48, "signature": "Peek()", "original_code": "public int Peek() {\n        return maxHeap[0];\n    }", "doc_comment": "/* \u8bbf\u95ee\u5806\u9876\u5143\u7d20 */"}, "code_tokens": ["Peek", "public", "int", "(", ")", "{", "}", "return", ";", "maxHeap", "[", "0", "]"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 21, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 13}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_heap/my_heap.cs#51-56", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_heap/my_heap.cs", "language": "Java"}, "method": {"name": "Push", "qualified_name": "codes.csharp.chapter_heap.my_heap.cs#Push", "start_line": 51, "end_line": 56, "signature": "Push(int val)", "original_code": "public void Push(int val) {\n        // \u6dfb\u52a0\u8282\u70b9\n        maxHeap.Add(val);\n        // \u4ece\u5e95\u81f3\u9876\u5806\u5316\n        SiftUp(Size() - 1);\n    }", "doc_comment": "/* \u5143\u7d20\u5165\u5806 */"}, "code_tokens": ["void", "Push", "public", "(", ")", "{", "// \u6dfb\u52a0\u8282\u70b9", "// \u4ece\u5e95\u81f3\u9876\u5806\u5316", "}", "val", ";", ";", "int", "maxHeap", ".", "Add", "SiftUp", "(", "val", ")", "(", ")", "-", "1", "Size", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 43, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 19}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_heap/my_heap.cs#59-61", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_heap/my_heap.cs", "language": "Java"}, "method": {"name": "Size", "qualified_name": "codes.csharp.chapter_heap.my_heap.cs#Size", "start_line": 59, "end_line": 61, "signature": "Size()", "original_code": "public int Size() {\n        return maxHeap.Count;\n    }", "doc_comment": "/* \u83b7\u53d6\u5806\u5927\u5c0f */"}, "code_tokens": ["Size", "public", "int", "(", ")", "{", "}", "return", ";", "maxHeap", ".", "Count"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 20, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 12}}
{"dataset_split": "train", "example_id": "hello-algo@e720aa2:codes/csharp/chapter_heap/my_heap.cs#64-66", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e720aa2d24cd203c5b4e55891a02e97547d2ce42", "license": null}, "file": {"path": "codes/csharp/chapter_heap/my_heap.cs", "language": "Java"}, "method": {"name": "IsEmpty", "qualified_name": "codes.csharp.chapter_heap.my_heap.cs#IsEmpty", "start_line": 64, "end_line": 66, "signature": "IsEmpty()", "original_code": "public bool IsEmpty() {\n        return Size() == 0;\n    }", "doc_comment": "/* \u5224\u65ad\u5806\u662f\u5426\u4e3a\u7a7a */"}, "code_tokens": ["bool", "IsEmpty", "public", "(", ")", "{", "}", "return", ";", "==", "0", "Size", "(", ")"], "metrics": {"cyclomatic_complexity": 0, "n_ast_nodes": 23, "ast_depth": 8, "n_identifiers": 2, "vocab_size": 12}}
