{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributors.java#223-226", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributors.java", "language": "Java"}, "method": {"name": "asBinderOptionsSet", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentContributors#asBinderOptionsSet", "start_line": 223, "end_line": 226, "signature": "asBinderOptionsSet(BinderOption... options)", "original_code": "private Set<BinderOption> asBinderOptionsSet(BinderOption... options) {\n\t\treturn ObjectUtils.isEmpty(options) ? EnumSet.noneOf(BinderOption.class)\n\t\t\t\t: EnumSet.copyOf(Arrays.asList(options));\n\t}", "doc_comment": ""}, "code_tokens": ["asBinderOptionsSet", "private", "Set", "(", ")", "{", "}", "<", "BinderOption", ">", "BinderOption", "...", "return", ";", "options", "?", ":", "ObjectUtils", ".", "isEmpty", "EnumSet", ".", "noneOf", "EnumSet", ".", "copyOf", "(", "options", ")", "(", ")", "(", ")", "BinderOption", ".", "class", "Arrays", ".", "asList", "(", "options", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 62, "ast_depth": 10, "n_identifiers": 9, "vocab_size": 25, "n_whitespaces": 18, "n_words": 19, "nloc": 4, "token_counts": 42}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributors.java#228-237", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributors.java", "language": "Java"}, "method": {"name": "getBinder", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentContributors#getBinder", "start_line": 228, "end_line": 237, "signature": "getBinder(@Nullable ConfigDataActivationContext activationContext,\n\t\t\tPredicate<ConfigDataEnvironmentContributor> filter, Set<BinderOption> options)", "original_code": "private Binder getBinder(@Nullable ConfigDataActivationContext activationContext,\n\t\t\tPredicate<ConfigDataEnvironmentContributor> filter, Set<BinderOption> options) {\n\t\tboolean failOnInactiveSource = options.contains(BinderOption.FAIL_ON_BIND_TO_INACTIVE_SOURCE);\n\t\tIterable<ConfigurationPropertySource> sources = () -> getBinderSources(\n\t\t\t\tfilter.and((contributor) -> failOnInactiveSource || contributor.isActive(activationContext)));\n\t\tPlaceholdersResolver placeholdersResolver = new ConfigDataEnvironmentContributorPlaceholdersResolver(this.root,\n\t\t\t\tactivationContext, null, failOnInactiveSource, this.conversionService);\n\t\tBindHandler bindHandler = !failOnInactiveSource ? null : new InactiveSourceChecker(activationContext);\n\t\treturn new Binder(sources, placeholdersResolver, null, null, bindHandler);\n\t}", "doc_comment": ""}, "code_tokens": ["Binder", "getBinder", "private", "(", ",", ",", ")", "{", "}", "ConfigDataActivationContext", "activationContext", "filter", "options", "boolean", ";", ";", "PlaceholdersResolver", ";", "BindHandler", ";", "return", ";", "Predicate", "Set", "failOnInactiveSource", "=", "Iterable", "sources", "=", "placeholdersResolver", "=", "bindHandler", "=", "new", "Binder", "@", "Nullable", "<", "ConfigDataEnvironmentContributor", ">", "<", "BinderOption", ">", "options", ".", "contains", "<", "ConfigurationPropertySource", ">", "->", "new", "ConfigDataEnvironmentContributorPlaceholdersResolver", "?", "null", ":", "(", "sources", ",", "placeholdersResolver", ",", "null", ",", "null", ",", "bindHandler", ")", "(", ")", "(", ")", "getBinderSources", "(", ",", "activationContext", ",", "null", ",", "failOnInactiveSource", ",", ")", "!", "failOnInactiveSource", "new", "InactiveSourceChecker", "BinderOption", ".", "FAIL_ON_BIND_TO_INACTIVE_SOURCE", "(", ")", "this", ".", "root", "this", ".", "conversionService", "(", "activationContext", ")", "filter", ".", "and", "(", ")", "->", "(", "contributor", ")", "failOnInactiveSource", "||", "contributor", ".", "isActive", "(", "activationContext", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 164, "ast_depth": 15, "n_identifiers": 18, "vocab_size": 51, "n_whitespaces": 72, "n_words": 55, "nloc": 10, "token_counts": 115}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributors.java#239-245", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributors.java", "language": "Java"}, "method": {"name": "getBinderSources", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentContributors#getBinderSources", "start_line": 239, "end_line": 245, "signature": "getBinderSources(Predicate<ConfigDataEnvironmentContributor> filter)", "original_code": "private Iterator<ConfigurationPropertySource> getBinderSources(Predicate<ConfigDataEnvironmentContributor> filter) {\n\t\treturn this.root.stream()\n\t\t\t.filter(this::hasConfigurationPropertySource)\n\t\t\t.filter(filter)\n\t\t\t.map(ConfigDataEnvironmentContributor::getConfigurationPropertySource)\n\t\t\t.iterator();\n\t}", "doc_comment": ""}, "code_tokens": ["getBinderSources", "private", "Iterator", "(", ")", "{", "}", "<", "ConfigurationPropertySource", ">", "filter", "return", ";", "Predicate", ".", "iterator", "<", "ConfigDataEnvironmentContributor", ">", ".", "map", "(", ")", ".", "filter", "(", ")", ".", "filter", "(", "filter", ")", "ConfigDataEnvironmentContributor", "::", "getConfigurationPropertySource", ".", "stream", "(", ")", "this", ".", "root", "(", ")", "this", "::", "hasConfigurationPropertySource"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 71, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 24, "n_whitespaces": 26, "n_words": 20, "nloc": 7, "token_counts": 47}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributors.java#247-249", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributors.java", "language": "Java"}, "method": {"name": "hasConfigurationPropertySource", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentContributors#hasConfigurationPropertySource", "start_line": 247, "end_line": 249, "signature": "hasConfigurationPropertySource(ConfigDataEnvironmentContributor contributor)", "original_code": "private boolean hasConfigurationPropertySource(ConfigDataEnvironmentContributor contributor) {\n\t\treturn contributor.getConfigurationPropertySource() != null;\n\t}", "doc_comment": ""}, "code_tokens": ["boolean", "hasConfigurationPropertySource", "private", "(", ")", "{", "}", "ConfigDataEnvironmentContributor", "contributor", "return", ";", "!=", "null", "contributor", ".", "getConfigurationPropertySource", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 8, "n_identifiers": 3, "vocab_size": 15, "n_whitespaces": 12, "n_words": 9, "nloc": 3, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributors.java#251-254", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributors.java", "language": "Java"}, "method": {"name": "iterator", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentContributors#iterator", "start_line": 251, "end_line": 254, "signature": "iterator()", "original_code": "@Override\n\tpublic Iterator<ConfigDataEnvironmentContributor> iterator() {\n\t\treturn this.root.iterator();\n\t}", "doc_comment": ""}, "code_tokens": ["iterator", "public", "Iterator", "(", ")", "{", "}", "@", "Override", "<", "ConfigDataEnvironmentContributor", ">", "return", ";", ".", "iterator", "this", ".", "root", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 33, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 17, "n_whitespaces": 11, "n_words": 9, "nloc": 4, "token_counts": 21}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributors.java#267-270", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributors.java", "language": "Java"}, "method": {"name": "getBootstrapContext", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentContributors#getBootstrapContext", "start_line": 267, "end_line": 270, "signature": "getBootstrapContext()", "original_code": "@Override\n\t\tpublic ConfigurableBootstrapContext getBootstrapContext() {\n\t\t\treturn this.contributors.getBootstrapContext();\n\t\t}", "doc_comment": ""}, "code_tokens": ["ConfigurableBootstrapContext", "getBootstrapContext", "public", "(", ")", "{", "}", "@", "Override", "return", ";", ".", "getBootstrapContext", "this", ".", "contributors", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 8, "nloc": 4, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributors.java#294-302", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributors.java", "language": "Java"}, "method": {"name": "getBinder", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentContributors#getBinder", "start_line": 294, "end_line": 302, "signature": "getBinder()", "original_code": "@Override\n\t\tpublic Binder getBinder() {\n\t\t\tBinder binder = this.binder;\n\t\t\tif (binder == null) {\n\t\t\t\tbinder = this.contributors.getBinder(this.activationContext);\n\t\t\t\tthis.binder = binder;\n\t\t\t}\n\t\t\treturn binder;\n\t\t}", "doc_comment": ""}, "code_tokens": ["Binder", "getBinder", "public", "(", ")", "{", "}", "@", "Override", "Binder", ";", "if", "return", "binder", ";", "binder", "=", "(", ")", "{", "}", "this", ".", "binder", "binder", "==", "null", ";", ";", "binder", "=", "=", "binder", ".", "getBinder", "this", ".", "binder", "this", ".", "contributors", "(", ")", "this", ".", "activationContext"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 69, "ast_depth": 11, "n_identifiers": 5, "vocab_size": 20, "n_whitespaces": 47, "n_words": 22, "nloc": 9, "token_counts": 46}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributors.java#304-307", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributors.java", "language": "Java"}, "method": {"name": "getParent", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentContributors#getParent", "start_line": 304, "end_line": 307, "signature": "getParent()", "original_code": "@Override\n\t\tpublic @Nullable ConfigDataResource getParent() {\n\t\t\treturn this.contributor.getResource();\n\t\t}", "doc_comment": ""}, "code_tokens": ["ConfigDataResource", "getParent", "public", "(", ")", "{", "}", "@", "Override", "@", "Nullable", "return", ";", ".", "getResource", "this", ".", "contributor", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 31, "ast_depth": 7, "n_identifiers": 5, "vocab_size": 16, "n_whitespaces": 15, "n_words": 9, "nloc": 4, "token_counts": 20}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributors.java#309-312", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributors.java", "language": "Java"}, "method": {"name": "getBootstrapContext", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentContributors#getBootstrapContext", "start_line": 309, "end_line": 312, "signature": "getBootstrapContext()", "original_code": "@Override\n\t\tpublic ConfigurableBootstrapContext getBootstrapContext() {\n\t\t\treturn this.contributors.getBootstrapContext();\n\t\t}", "doc_comment": ""}, "code_tokens": ["ConfigurableBootstrapContext", "getBootstrapContext", "public", "(", ")", "{", "}", "@", "Override", "return", ";", ".", "getBootstrapContext", "this", ".", "contributors", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 8, "nloc": 4, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributors.java#324-333", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributors.java", "language": "Java"}, "method": {"name": "onSuccess", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentContributors#onSuccess", "start_line": 324, "end_line": 333, "signature": "onSuccess(ConfigurationPropertyName name, Bindable<?> target, BindContext context,\n\t\t\t\tObject result)", "original_code": "@Override\n\t\tpublic Object onSuccess(ConfigurationPropertyName name, Bindable<?> target, BindContext context,\n\t\t\t\tObject result) {\n\t\t\tfor (ConfigDataEnvironmentContributor contributor : ConfigDataEnvironmentContributors.this) {\n\t\t\t\tif (!contributor.isActive(this.activationContext)) {\n\t\t\t\t\tInactiveConfigDataAccessException.throwIfPropertyFound(contributor, name);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t}", "doc_comment": ""}, "code_tokens": ["Object", "onSuccess", "public", "(", ",", ",", ",", ")", "{", "}", "@", "Override", "ConfigurationPropertyName", "name", "target", "BindContext", "context", "Object", "result", "for", "(", "ConfigDataEnvironmentContributor", "contributor", ":", ")", "return", "result", ";", "Bindable", "ConfigDataEnvironmentContributors", ".", "this", "{", "}", "<", ">", "if", "?", "(", ")", "{", "}", "!", ";", "contributor", ".", "isActive", "InactiveConfigDataAccessException", ".", "throwIfPropertyFound", "(", ")", "(", "contributor", ",", "name", ")", "this", ".", "activationContext"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 87, "ast_depth": 12, "n_identifiers": 12, "vocab_size": 35, "n_whitespaces": 57, "n_words": 28, "nloc": 10, "token_counts": 60}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessor.java#83-86", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "getOrder", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentPostProcessor#getOrder", "start_line": 83, "end_line": 86, "signature": "getOrder()", "original_code": "@Override\n\tpublic int getOrder() {\n\t\treturn ORDER;\n\t}", "doc_comment": ""}, "code_tokens": ["getOrder", "public", "int", "(", ")", "{", "}", "@", "Override", "return", "ORDER", ";"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 20, "ast_depth": 5, "n_identifiers": 3, "vocab_size": 12, "n_whitespaces": 11, "n_words": 6, "nloc": 4, "token_counts": 12}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessor.java#88-91", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "postProcessEnvironment", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentPostProcessor#postProcessEnvironment", "start_line": 88, "end_line": 91, "signature": "postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application)", "original_code": "@Override\n\tpublic void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {\n\t\tpostProcessEnvironment(environment, application.getResourceLoader(), application.getAdditionalProfiles());\n\t}", "doc_comment": ""}, "code_tokens": ["void", "postProcessEnvironment", "public", "(", ",", ")", "{", "}", "@", "Override", "ConfigurableEnvironment", "environment", "SpringApplication", "application", ";", "postProcessEnvironment", "(", "environment", ",", ",", ")", "application", ".", "getResourceLoader", "application", ".", "getAdditionalProfiles", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 46, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 18, "n_whitespaces": 15, "n_words": 14, "nloc": 4, "token_counts": 31}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessor.java#93-98", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "postProcessEnvironment", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentPostProcessor#postProcessEnvironment", "start_line": 93, "end_line": 98, "signature": "postProcessEnvironment(ConfigurableEnvironment environment, @Nullable ResourceLoader resourceLoader,\n\t\t\tCollection<String> additionalProfiles)", "original_code": "void postProcessEnvironment(ConfigurableEnvironment environment, @Nullable ResourceLoader resourceLoader,\n\t\t\tCollection<String> additionalProfiles) {\n\t\tthis.logger.trace(\"Post-processing environment to add config data\");\n\t\tresourceLoader = (resourceLoader != null) ? resourceLoader : new DefaultResourceLoader();\n\t\tgetConfigDataEnvironment(environment, resourceLoader, additionalProfiles).processAndApply();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "postProcessEnvironment", "(", ",", ",", ")", "{", "}", "ConfigurableEnvironment", "environment", "ResourceLoader", "resourceLoader", "additionalProfiles", ";", ";", ";", "Collection", ".", "trace", "resourceLoader", "=", ".", "processAndApply", "@", "Nullable", "<", "String", ">", "this", ".", "logger", "(", ")", "?", "resourceLoader", ":", "getConfigDataEnvironment", "(", ")", "\"", "Post-processing environment to add config data", "\"", "(", ")", "new", "DefaultResourceLoader", "(", "environment", ",", "resourceLoader", ",", "additionalProfiles", ")", "resourceLoader", "!=", "null", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 86, "ast_depth": 9, "n_identifiers": 9, "vocab_size": 34, "n_whitespaces": 38, "n_words": 31, "nloc": 6, "token_counts": 58}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessor.java#100-104", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "getConfigDataEnvironment", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentPostProcessor#getConfigDataEnvironment", "start_line": 100, "end_line": 104, "signature": "getConfigDataEnvironment(ConfigurableEnvironment environment, ResourceLoader resourceLoader,\n\t\t\tCollection<String> additionalProfiles)", "original_code": "ConfigDataEnvironment getConfigDataEnvironment(ConfigurableEnvironment environment, ResourceLoader resourceLoader,\n\t\t\tCollection<String> additionalProfiles) {\n\t\treturn new ConfigDataEnvironment(this.logFactory, this.bootstrapContext, environment, resourceLoader,\n\t\t\t\tadditionalProfiles, this.environmentUpdateListener);\n\t}", "doc_comment": ""}, "code_tokens": ["ConfigDataEnvironment", "getConfigDataEnvironment", "(", ",", ",", ")", "{", "}", "ConfigurableEnvironment", "environment", "ResourceLoader", "resourceLoader", "additionalProfiles", "return", ";", "Collection", "new", "ConfigDataEnvironment", "<", "String", ">", "(", ",", ",", "environment", ",", "resourceLoader", ",", "additionalProfiles", ",", ")", "this", ".", "logFactory", "this", ".", "bootstrapContext", "this", ".", "environmentUpdateListener"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 55, "ast_depth": 8, "n_identifiers": 7, "vocab_size": 24, "n_whitespaces": 26, "n_words": 21, "nloc": 5, "token_counts": 40}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessor.java#112-114", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "applyTo", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentPostProcessor#applyTo", "start_line": 112, "end_line": 114, "signature": "applyTo(ConfigurableEnvironment environment)", "original_code": "public static void applyTo(ConfigurableEnvironment environment) {\n\t\tapplyTo(environment, null, null, Collections.emptyList());\n\t}", "doc_comment": "/**\n\t * Apply {@link ConfigData} post-processing to an existing {@link Environment}. This\n\t * method can be useful when working with an {@link Environment} that has been created\n\t * directly and not necessarily as part of a {@link SpringApplication}.\n\t * @param environment the environment to apply {@link ConfigData} to\n\t */"}, "code_tokens": ["void", "applyTo", "public", "static", "(", ")", "{", "}", "ConfigurableEnvironment", "environment", ";", "applyTo", "(", "environment", ",", "null", ",", "null", ",", ")", "Collections", ".", "emptyList", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 36, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 16, "n_whitespaces": 13, "n_words": 12, "nloc": 3, "token_counts": 25}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessor.java#126-129", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "applyTo", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentPostProcessor#applyTo", "start_line": 126, "end_line": 129, "signature": "applyTo(ConfigurableEnvironment environment, ResourceLoader resourceLoader,\n\t\t\t@Nullable ConfigurableBootstrapContext bootstrapContext, String... additionalProfiles)", "original_code": "public static void applyTo(ConfigurableEnvironment environment, ResourceLoader resourceLoader,\n\t\t\t@Nullable ConfigurableBootstrapContext bootstrapContext, String... additionalProfiles) {\n\t\tapplyTo(environment, resourceLoader, bootstrapContext, Arrays.asList(additionalProfiles));\n\t}", "doc_comment": "/**\n\t * Apply {@link ConfigData} post-processing to an existing {@link Environment}. This\n\t * method can be useful when working with an {@link Environment} that has been created\n\t * directly and not necessarily as part of a {@link SpringApplication}.\n\t * @param environment the environment to apply {@link ConfigData} to\n\t * @param resourceLoader the resource loader to use\n\t * @param bootstrapContext the bootstrap context to use or {@code null} to use a\n\t * throw-away context\n\t * @param additionalProfiles any additional profiles that should be applied\n\t */"}, "code_tokens": ["void", "applyTo", "public", "static", "(", ",", ",", ",", ")", "{", "}", "ConfigurableEnvironment", "environment", "ResourceLoader", "resourceLoader", "ConfigurableBootstrapContext", "bootstrapContext", "String", "...", ";", "additionalProfiles", "applyTo", "@", "Nullable", "(", "environment", ",", "resourceLoader", ",", "bootstrapContext", ",", ")", "Arrays", ".", "asList", "(", "additionalProfiles", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 55, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 24, "n_whitespaces": 23, "n_words": 20, "nloc": 4, "token_counts": 38}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessor.java#141-148", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "applyTo", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentPostProcessor#applyTo", "start_line": 141, "end_line": 148, "signature": "applyTo(ConfigurableEnvironment environment, @Nullable ResourceLoader resourceLoader,\n\t\t\t@Nullable ConfigurableBootstrapContext bootstrapContext, Collection<String> additionalProfiles)", "original_code": "public static void applyTo(ConfigurableEnvironment environment, @Nullable ResourceLoader resourceLoader,\n\t\t\t@Nullable ConfigurableBootstrapContext bootstrapContext, Collection<String> additionalProfiles) {\n\t\tDeferredLogFactory logFactory = Supplier::get;\n\t\tbootstrapContext = (bootstrapContext != null) ? bootstrapContext : new DefaultBootstrapContext();\n\t\tConfigDataEnvironmentPostProcessor postProcessor = new ConfigDataEnvironmentPostProcessor(logFactory,\n\t\t\t\tbootstrapContext);\n\t\tpostProcessor.postProcessEnvironment(environment, resourceLoader, additionalProfiles);\n\t}", "doc_comment": "/**\n\t * Apply {@link ConfigData} post-processing to an existing {@link Environment}. This\n\t * method can be useful when working with an {@link Environment} that has been created\n\t * directly and not necessarily as part of a {@link SpringApplication}.\n\t * @param environment the environment to apply {@link ConfigData} to\n\t * @param resourceLoader the resource loader to use\n\t * @param bootstrapContext the bootstrap context to use or {@code null} to use a\n\t * throw-away context\n\t * @param additionalProfiles any additional profiles that should be applied\n\t */"}, "code_tokens": ["void", "applyTo", "public", "static", "(", ",", ",", ",", ")", "{", "}", "ConfigurableEnvironment", "environment", "ResourceLoader", "resourceLoader", "ConfigurableBootstrapContext", "bootstrapContext", "additionalProfiles", "DeferredLogFactory", ";", ";", "ConfigDataEnvironmentPostProcessor", ";", ";", "Collection", "logFactory", "=", "bootstrapContext", "=", "postProcessor", "=", "postProcessor", ".", "postProcessEnvironment", "@", "Nullable", "@", "Nullable", "<", "String", ">", "Supplier", "::", "get", "?", "bootstrapContext", ":", "new", "ConfigDataEnvironmentPostProcessor", "(", "environment", ",", "resourceLoader", ",", "additionalProfiles", ")", "(", ")", "new", "DefaultBootstrapContext", "(", "logFactory", ",", "bootstrapContext", ")", "bootstrapContext", "!=", "null", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 102, "ast_depth": 9, "n_identifiers": 11, "vocab_size": 39, "n_whitespaces": 53, "n_words": 36, "nloc": 8, "token_counts": 70}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessor.java#163-171", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "applyTo", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentPostProcessor#applyTo", "start_line": 163, "end_line": 171, "signature": "applyTo(ConfigurableEnvironment environment, @Nullable ResourceLoader resourceLoader,\n\t\t\t@Nullable ConfigurableBootstrapContext bootstrapContext, Collection<String> additionalProfiles,\n\t\t\tConfigDataEnvironmentUpdateListener environmentUpdateListener)", "original_code": "public static void applyTo(ConfigurableEnvironment environment, @Nullable ResourceLoader resourceLoader,\n\t\t\t@Nullable ConfigurableBootstrapContext bootstrapContext, Collection<String> additionalProfiles,\n\t\t\tConfigDataEnvironmentUpdateListener environmentUpdateListener) {\n\t\tDeferredLogFactory logFactory = Supplier::get;\n\t\tbootstrapContext = (bootstrapContext != null) ? bootstrapContext : new DefaultBootstrapContext();\n\t\tConfigDataEnvironmentPostProcessor postProcessor = new ConfigDataEnvironmentPostProcessor(logFactory,\n\t\t\t\tbootstrapContext, environmentUpdateListener);\n\t\tpostProcessor.postProcessEnvironment(environment, resourceLoader, additionalProfiles);\n\t}", "doc_comment": "/**\n\t * Apply {@link ConfigData} post-processing to an existing {@link Environment}. This\n\t * method can be useful when working with an {@link Environment} that has been created\n\t * directly and not necessarily as part of a {@link SpringApplication}.\n\t * @param environment the environment to apply {@link ConfigData} to\n\t * @param resourceLoader the resource loader to use\n\t * @param bootstrapContext the bootstrap context to use or {@code null} to use a\n\t * throw-away context\n\t * @param additionalProfiles any additional profiles that should be applied\n\t * @param environmentUpdateListener optional\n\t * {@link ConfigDataEnvironmentUpdateListener} that can be used to track\n\t * {@link Environment} updates.\n\t */"}, "code_tokens": ["void", "applyTo", "public", "static", "(", ",", ",", ",", ",", ")", "{", "}", "ConfigurableEnvironment", "environment", "ResourceLoader", "resourceLoader", "ConfigurableBootstrapContext", "bootstrapContext", "additionalProfiles", "ConfigDataEnvironmentUpdateListener", "environmentUpdateListener", "DeferredLogFactory", ";", ";", "ConfigDataEnvironmentPostProcessor", ";", ";", "Collection", "logFactory", "=", "bootstrapContext", "=", "postProcessor", "=", "postProcessor", ".", "postProcessEnvironment", "@", "Nullable", "@", "Nullable", "<", "String", ">", "Supplier", "::", "get", "?", "bootstrapContext", ":", "new", "ConfigDataEnvironmentPostProcessor", "(", "environment", ",", "resourceLoader", ",", "additionalProfiles", ")", "(", ")", "new", "DefaultBootstrapContext", "(", "logFactory", ",", "bootstrapContext", ",", "environmentUpdateListener", ")", "bootstrapContext", "!=", "null", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 108, "ast_depth": 9, "n_identifiers": 12, "vocab_size": 41, "n_whitespaces": 59, "n_words": 39, "nloc": 9, "token_counts": 75}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLoader.java#54-56", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLoader.java", "language": "Java"}, "method": {"name": "isLoadable", "qualified_name": "org.springframework.boot.context.config.ConfigDataLoader#isLoadable", "start_line": 54, "end_line": 56, "signature": "isLoadable(ConfigDataLoaderContext context, R resource)", "original_code": "default boolean isLoadable(ConfigDataLoaderContext context, R resource) {\n\t\treturn true;\n\t}", "doc_comment": "/**\n\t * Returns if the specified resource can be loaded by this instance.\n\t * @param context the loader context\n\t * @param resource the resource to check.\n\t * @return if the resource is supported by this loader\n\t */"}, "code_tokens": ["boolean", "isLoadable", "default", "(", ",", ")", "{", "}", "ConfigDataLoaderContext", "context", "R", "resource", "return", "true", ";"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 23, "ast_depth": 5, "n_identifiers": 3, "vocab_size": 15, "n_whitespaces": 12, "n_words": 9, "nloc": 3, "token_counts": 15}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLoader.java#66-67", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLoader.java", "language": "Java"}, "method": {"name": "load", "qualified_name": "org.springframework.boot.context.config.ConfigDataLoader#load", "start_line": 66, "end_line": 67, "signature": "load(ConfigDataLoaderContext context, R resource)", "original_code": "@Nullable ConfigData load(ConfigDataLoaderContext context, R resource)\n\t\t\tthrows IOException, ConfigDataResourceNotFoundException;", "doc_comment": "/**\n\t * Load {@link ConfigData} for the given resource.\n\t * @param context the loader context\n\t * @param resource the resource to load\n\t * @return the loaded config data or {@code null} if the location should be skipped\n\t * @throws IOException on IO error\n\t * @throws ConfigDataResourceNotFoundException if the resource cannot be found\n\t */"}, "code_tokens": ["ConfigData", "load", ";", "(", ",", ")", "throws", "IOException", ",", "ConfigDataResourceNotFoundException", "@", "Nullable", "ConfigDataLoaderContext", "context", "R", "resource"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 24, "ast_depth": 5, "n_identifiers": 4, "vocab_size": 15, "n_whitespaces": 11, "n_words": 10, "nloc": 2, "token_counts": 16}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLoaderContext.java#35-35", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLoaderContext.java", "language": "Java"}, "method": {"name": "getBootstrapContext", "qualified_name": "org.springframework.boot.context.config.ConfigDataLoaderContext#getBootstrapContext", "start_line": 35, "end_line": 35, "signature": "getBootstrapContext()", "original_code": "ConfigurableBootstrapContext getBootstrapContext();", "doc_comment": "/**\n\t * Provides access to the {@link ConfigurableBootstrapContext} shared across all\n\t * {@link EnvironmentPostProcessor EnvironmentPostProcessors}.\n\t * @return the bootstrap context\n\t */"}, "code_tokens": ["ConfigurableBootstrapContext", "getBootstrapContext", ";", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 8, "ast_depth": 4, "n_identifiers": 1, "vocab_size": 5, "n_whitespaces": 1, "n_words": 2, "nloc": 1, "token_counts": 5}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLoaders.java#73-80", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLoaders.java", "language": "Java"}, "method": {"name": "getResourceTypes", "qualified_name": "org.springframework.boot.context.config.ConfigDataLoaders#getResourceTypes", "start_line": 73, "end_line": 80, "signature": "getResourceTypes(List<ConfigDataLoader> loaders)", "original_code": "@SuppressWarnings(\"rawtypes\")\n\tprivate List<Class<?>> getResourceTypes(List<ConfigDataLoader> loaders) {\n\t\tList<Class<?>> resourceTypes = new ArrayList<>(loaders.size());\n\t\tfor (ConfigDataLoader<?> loader : loaders) {\n\t\t\tresourceTypes.add(getResourceType(loader));\n\t\t}\n\t\treturn Collections.unmodifiableList(resourceTypes);\n\t}", "doc_comment": ""}, "code_tokens": ["getResourceTypes", "private", "List", "(", ")", "{", "}", "@", "SuppressWarnings", "<", ">", "loaders", ";", "for", "(", "loader", ":", "loaders", ")", "return", ";", "(", ")", "Class", "List", "List", "resourceTypes", "=", "ConfigDataLoader", "{", "}", "Collections", ".", "unmodifiableList", "\"", "rawtypes", "\"", "<", ">", "<", "ConfigDataLoader", ">", "<", ">", "new", "<", ">", ";", "(", "resourceTypes", ")", "?", "Class", "ArrayList", "(", ")", "?", "resourceTypes", ".", "add", "<", ">", "<", ">", "loaders", ".", "size", "(", ")", "?", "(", ")", "getResourceType", "(", "loader", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 118, "ast_depth": 11, "n_identifiers": 10, "vocab_size": 32, "n_whitespaces": 34, "n_words": 28, "nloc": 8, "token_counts": 76}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLoaders.java#82-86", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLoaders.java", "language": "Java"}, "method": {"name": "getResourceType", "qualified_name": "org.springframework.boot.context.config.ConfigDataLoaders#getResourceType", "start_line": 82, "end_line": 86, "signature": "getResourceType(ConfigDataLoader<?> loader)", "original_code": "private Class<?> getResourceType(ConfigDataLoader<?> loader) {\n\t\tClass<?> generic = ResolvableType.forClass(loader.getClass()).as(ConfigDataLoader.class).resolveGeneric();\n\t\tAssert.state(generic != null, \"'generic' must not be null\");\n\t\treturn generic;\n\t}", "doc_comment": ""}, "code_tokens": ["getResourceType", "private", "Class", "(", ")", "{", "}", "<", ">", "loader", ";", ";", "return", "generic", ";", "?", "ConfigDataLoader", "Class", "generic", "=", "Assert", ".", "state", "<", ">", "<", ">", ".", "resolveGeneric", "(", ",", ")", "?", "?", ".", "as", "(", ")", "generic", "!=", "null", "\"", "'generic' must not be null", "\"", "ResolvableType", ".", "forClass", "(", ")", "(", ")", "ConfigDataLoader", ".", "class", "loader", ".", "getClass", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 91, "ast_depth": 12, "n_identifiers": 10, "vocab_size": 30, "n_whitespaces": 26, "n_words": 26, "nloc": 5, "token_counts": 59}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLoaders.java#96-101", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLoaders.java", "language": "Java"}, "method": {"name": "load", "qualified_name": "org.springframework.boot.context.config.ConfigDataLoaders#load", "start_line": 96, "end_line": 101, "signature": "load(ConfigDataLoaderContext context, R resource)", "original_code": "<R extends ConfigDataResource> @Nullable ConfigData load(ConfigDataLoaderContext context, R resource)\n\t\t\tthrows IOException {\n\t\tConfigDataLoader<R> loader = getLoader(context, resource);\n\t\tthis.logger.trace(LogMessage.of(() -> \"Loading \" + resource + \" using loader \" + loader.getClass().getName()));\n\t\treturn loader.load(context, resource);\n\t}", "doc_comment": "/**\n\t * Load {@link ConfigData} using the first appropriate {@link ConfigDataLoader}.\n\t * @param <R> the resource type\n\t * @param context the loader context\n\t * @param resource the resource to load\n\t * @return the loaded {@link ConfigData}\n\t * @throws IOException on IO error\n\t */"}, "code_tokens": ["ConfigData", "load", "<", ">", "@", "Nullable", "(", ",", ")", "throws", "IOException", "{", "}", "R", "ConfigDataLoaderContext", "context", "R", "resource", ";", ";", "return", ";", "extends", "ConfigDataResource", "ConfigDataLoader", "loader", "=", ".", "trace", "loader", ".", "load", "<", "R", ">", "getLoader", "this", ".", "logger", "(", ")", "(", "context", ",", "resource", ")", "(", "context", ",", "resource", ")", "LogMessage", ".", "of", "(", ")", "->", "(", ")", "+", "+", ".", "getName", "+", "resource", "\"", " using loader ", "\"", "loader", ".", "getClass", "(", ")", "\"", "Loading ", "\"", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 115, "ast_depth": 14, "n_identifiers": 12, "vocab_size": 38, "n_whitespaces": 43, "n_words": 35, "nloc": 6, "token_counts": 78}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLoaders.java#103-120", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLoaders.java", "language": "Java"}, "method": {"name": "getLoader", "qualified_name": "org.springframework.boot.context.config.ConfigDataLoaders#getLoader", "start_line": 103, "end_line": 120, "signature": "getLoader(ConfigDataLoaderContext context, R resource)", "original_code": "@SuppressWarnings(\"unchecked\")\n\tprivate <R extends ConfigDataResource> ConfigDataLoader<R> getLoader(ConfigDataLoaderContext context, R resource) {\n\t\tConfigDataLoader<R> result = null;\n\t\tfor (int i = 0; i < this.loaders.size(); i++) {\n\t\t\tConfigDataLoader<R> candidate = this.loaders.get(i);\n\t\t\tif (this.resourceTypes.get(i).isInstance(resource)) {\n\t\t\t\tif (candidate.isLoadable(context, resource)) {\n\t\t\t\t\tif (result != null) {\n\t\t\t\t\t\tthrow new IllegalStateException(\"Multiple loaders found for resource '\" + resource + \"' [\"\n\t\t\t\t\t\t\t\t+ candidate.getClass().getName() + \",\" + result.getClass().getName() + \"]\");\n\t\t\t\t\t}\n\t\t\t\t\tresult = candidate;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tAssert.state(result != null, () -> \"No loader found for resource '\" + resource + \"'\");\n\t\treturn result;\n\t}", "doc_comment": ""}, "code_tokens": ["getLoader", "private", "<", ">", "ConfigDataLoader", "(", ",", ")", "{", "}", "@", "SuppressWarnings", "R", "<", "R", ">", "ConfigDataLoaderContext", "context", "R", "resource", ";", "for", "(", ";", ")", ";", "return", "result", ";", "(", ")", "extends", "ConfigDataResource", "ConfigDataLoader", "result", "=", "null", ";", "i", "<", "i", "++", "{", "}", "Assert", ".", "state", "\"", "unchecked", "\"", "<", "R", ">", "int", "i", "=", "0", ".", "size", ";", "if", "(", ",", ")", "this", ".", "loaders", "(", ")", "ConfigDataLoader", "candidate", "=", "(", ")", "{", "}", "result", "!=", "null", "->", "<", "R", ">", ".", "get", ".", "isInstance", "if", "(", ")", "+", "this", ".", "loaders", "(", "i", ")", ".", "get", "(", "resource", ")", "(", ")", "{", "}", "+", "resource", "\"", "'", "\"", "this", ".", "resourceTypes", "(", "i", ")", "candidate", ".", "isLoadable", "if", ";", "\"", "No loader found for resource '", "\"", "(", "context", ",", "resource", ")", "(", ")", "{", "}", "result", "=", "candidate", "result", "!=", "null", "throw", ";", "new", "IllegalStateException", "(", ")", "+", "+", "\"", "]", "\"", "+", ".", "getName", "+", "\"", ",", "\"", "result", ".", "getClass", "(", ")", "+", ".", "getName", "(", ")", "+", "resource", "\"", "' [", "\"", "candidate", ".", "getClass", "(", ")", "\"", "Multiple loaders found for resource '", "\"", "(", ")"], "metrics": {"cyclomatic_complexity": 5, "n_ast_nodes": 270, "ast_depth": 22, "n_identifiers": 17, "vocab_size": 55, "n_whitespaces": 144, "n_words": 77, "nloc": 18, "token_counts": 183}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLocationResolver.java#63-63", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLocationResolver.java", "language": "Java"}, "method": {"name": "isResolvable", "qualified_name": "org.springframework.boot.context.config.ConfigDataLocationResolver#isResolvable", "start_line": 63, "end_line": 63, "signature": "isResolvable(ConfigDataLocationResolverContext context, ConfigDataLocation location)", "original_code": "boolean isResolvable(ConfigDataLocationResolverContext context, ConfigDataLocation location);", "doc_comment": "/**\n\t * Returns if the specified location address can be resolved by this resolver.\n\t * @param context the location resolver context\n\t * @param location the location to check.\n\t * @return if the location is supported by this resolver\n\t */"}, "code_tokens": ["boolean", "isResolvable", ";", "(", ",", ")", "ConfigDataLocationResolverContext", "context", "ConfigDataLocation", "location"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 15, "ast_depth": 5, "n_identifiers": 3, "vocab_size": 10, "n_whitespaces": 4, "n_words": 6, "nloc": 1, "token_counts": 10}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLocationResolver.java#75-76", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLocationResolver.java", "language": "Java"}, "method": {"name": "resolve", "qualified_name": "org.springframework.boot.context.config.ConfigDataLocationResolver#resolve", "start_line": 75, "end_line": 76, "signature": "resolve(ConfigDataLocationResolverContext context, ConfigDataLocation location)", "original_code": "List<R> resolve(ConfigDataLocationResolverContext context, ConfigDataLocation location)\n\t\t\tthrows ConfigDataLocationNotFoundException, ConfigDataResourceNotFoundException;", "doc_comment": "/**\n\t * Resolve a {@link ConfigDataLocation} into one or more {@link ConfigDataResource}\n\t * instances.\n\t * @param context the location resolver context\n\t * @param location the location that should be resolved\n\t * @return a list of {@link ConfigDataResource resources} in ascending priority order.\n\t * @throws ConfigDataLocationNotFoundException on a non-optional location that cannot\n\t * be found\n\t * @throws ConfigDataResourceNotFoundException if a resolved resource cannot be found\n\t */"}, "code_tokens": ["resolve", ";", "List", "(", ",", ")", "throws", "ConfigDataLocationNotFoundException", ",", "ConfigDataResourceNotFoundException", "<", "R", ">", "ConfigDataLocationResolverContext", "context", "ConfigDataLocation", "location"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 25, "ast_depth": 5, "n_identifiers": 3, "vocab_size": 16, "n_whitespaces": 10, "n_words": 10, "nloc": 2, "token_counts": 17}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLocationResolver.java#90-93", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLocationResolver.java", "language": "Java"}, "method": {"name": "resolveProfileSpecific", "qualified_name": "org.springframework.boot.context.config.ConfigDataLocationResolver#resolveProfileSpecific", "start_line": 90, "end_line": 93, "signature": "resolveProfileSpecific(ConfigDataLocationResolverContext context, ConfigDataLocation location,\n\t\t\tProfiles profiles)", "original_code": "default List<R> resolveProfileSpecific(ConfigDataLocationResolverContext context, ConfigDataLocation location,\n\t\t\tProfiles profiles) throws ConfigDataLocationNotFoundException {\n\t\treturn Collections.emptyList();\n\t}", "doc_comment": "/**\n\t * Resolve a {@link ConfigDataLocation} into one or more {@link ConfigDataResource}\n\t * instances based on available profiles. This method is called once profiles have\n\t * been deduced from the contributed values. By default this method returns an empty\n\t * list.\n\t * @param context the location resolver context\n\t * @param location the location that should be resolved\n\t * @param profiles profile information\n\t * @return a list of resolved locations in ascending priority order.\n\t * @throws ConfigDataLocationNotFoundException on a non-optional location that cannot\n\t * be found\n\t */"}, "code_tokens": ["resolveProfileSpecific", "default", "List", "(", ",", ",", ")", "throws", "ConfigDataLocationNotFoundException", "{", "}", "<", "R", ">", "ConfigDataLocationResolverContext", "context", "ConfigDataLocation", "location", "Profiles", "profiles", "return", ";", "Collections", ".", "emptyList", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 41, "ast_depth": 7, "n_identifiers": 6, "vocab_size": 24, "n_whitespaces": 19, "n_words": 15, "nloc": 4, "token_counts": 27}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLocationResolverContext.java#39-39", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLocationResolverContext.java", "language": "Java"}, "method": {"name": "getBinder", "qualified_name": "org.springframework.boot.context.config.ConfigDataLocationResolverContext#getBinder", "start_line": 39, "end_line": 39, "signature": "getBinder()", "original_code": "Binder getBinder();", "doc_comment": "/**\n\t * Provides access to a binder that can be used to obtain previously contributed\n\t * values.\n\t * @return a binder instance\n\t */"}, "code_tokens": ["Binder", "getBinder", ";", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 8, "ast_depth": 4, "n_identifiers": 1, "vocab_size": 5, "n_whitespaces": 1, "n_words": 2, "nloc": 1, "token_counts": 5}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLocationResolverContext.java#46-46", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLocationResolverContext.java", "language": "Java"}, "method": {"name": "getParent", "qualified_name": "org.springframework.boot.context.config.ConfigDataLocationResolverContext#getParent", "start_line": 46, "end_line": 46, "signature": "getParent()", "original_code": "@Nullable ConfigDataResource getParent();", "doc_comment": "/**\n\t * Provides access to the parent {@link ConfigDataResource} that triggered the resolve\n\t * or {@code null} if there is no available parent.\n\t * @return the parent location\n\t */"}, "code_tokens": ["ConfigDataResource", "getParent", ";", "(", ")", "@", "Nullable"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 12, "ast_depth": 5, "n_identifiers": 2, "vocab_size": 7, "n_whitespaces": 2, "n_words": 3, "nloc": 1, "token_counts": 7}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLocationResolverContext.java#53-53", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLocationResolverContext.java", "language": "Java"}, "method": {"name": "getBootstrapContext", "qualified_name": "org.springframework.boot.context.config.ConfigDataLocationResolverContext#getBootstrapContext", "start_line": 53, "end_line": 53, "signature": "getBootstrapContext()", "original_code": "ConfigurableBootstrapContext getBootstrapContext();", "doc_comment": "/**\n\t * Provides access to the {@link ConfigurableBootstrapContext} shared across all\n\t * {@link EnvironmentPostProcessor EnvironmentPostProcessors}.\n\t * @return the bootstrap context\n\t */"}, "code_tokens": ["ConfigurableBootstrapContext", "getBootstrapContext", ";", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 8, "ast_depth": 4, "n_identifiers": 1, "vocab_size": 5, "n_whitespaces": 1, "n_words": 2, "nloc": 1, "token_counts": 5}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLocationResolvers.java#70-86", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLocationResolvers.java", "language": "Java"}, "method": {"name": "reorder", "qualified_name": "org.springframework.boot.context.config.ConfigDataLocationResolvers#reorder", "start_line": 70, "end_line": 86, "signature": "reorder(List<ConfigDataLocationResolver> resolvers)", "original_code": "@SuppressWarnings(\"rawtypes\")\n\tprivate List<ConfigDataLocationResolver<?>> reorder(List<ConfigDataLocationResolver> resolvers) {\n\t\tList<ConfigDataLocationResolver<?>> reordered = new ArrayList<>(resolvers.size());\n\t\tConfigDataLocationResolver<?> standardConfigDataLocationResolver = null;\n\t\tfor (ConfigDataLocationResolver<?> resolver : resolvers) {\n\t\t\tif (resolver instanceof StandardConfigDataLocationResolver) {\n\t\t\t\tstandardConfigDataLocationResolver = resolver;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treordered.add(resolver);\n\t\t\t}\n\t\t}\n\t\tif (standardConfigDataLocationResolver != null) {\n\t\t\treordered.add(standardConfigDataLocationResolver);\n\t\t}\n\t\treturn Collections.unmodifiableList(reordered);\n\t}", "doc_comment": ""}, "code_tokens": ["reorder", "private", "List", "(", ")", "{", "}", "@", "SuppressWarnings", "<", ">", "resolvers", ";", ";", "for", "(", "resolver", ":", "resolvers", ")", "if", "return", ";", "(", ")", "ConfigDataLocationResolver", "List", "List", "reordered", "=", "ConfigDataLocationResolver", "standardConfigDataLocationResolver", "=", "null", "ConfigDataLocationResolver", "{", "}", "(", ")", "{", "}", "Collections", ".", "unmodifiableList", "\"", "rawtypes", "\"", "<", ">", "<", "ConfigDataLocationResolver", ">", "<", ">", "new", "<", ">", "<", ">", "if", "else", "standardConfigDataLocationResolver", "!=", "null", ";", "(", "reordered", ")", "?", "ConfigDataLocationResolver", "ArrayList", "(", ")", "?", "?", "(", ")", "{", "}", "{", "}", "reordered", ".", "add", "<", ">", "<", ">", "resolvers", ".", "size", "resolver", "instanceof", "StandardConfigDataLocationResolver", ";", ";", "(", "standardConfigDataLocationResolver", ")", "?", "(", ")", "standardConfigDataLocationResolver", "=", "resolver", "reordered", ".", "add", "(", "resolver", ")"], "metrics": {"cyclomatic_complexity": 4, "n_ast_nodes": 170, "ast_depth": 11, "n_identifiers": 10, "vocab_size": 37, "n_whitespaces": 83, "n_words": 43, "nloc": 17, "token_counts": 111}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLocationResolvers.java#88-99", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLocationResolvers.java", "language": "Java"}, "method": {"name": "resolve", "qualified_name": "org.springframework.boot.context.config.ConfigDataLocationResolvers#resolve", "start_line": 88, "end_line": 99, "signature": "resolve(ConfigDataLocationResolverContext context,\n\t\t\t@Nullable ConfigDataLocation location, @Nullable Profiles profiles)", "original_code": "List<ConfigDataResolutionResult> resolve(ConfigDataLocationResolverContext context,\n\t\t\t@Nullable ConfigDataLocation location, @Nullable Profiles profiles) {\n\t\tif (location == null) {\n\t\t\treturn Collections.emptyList();\n\t\t}\n\t\tfor (ConfigDataLocationResolver<?> resolver : getResolvers()) {\n\t\t\tif (resolver.isResolvable(context, location)) {\n\t\t\t\treturn resolve(resolver, context, location, profiles);\n\t\t\t}\n\t\t}\n\t\tthrow new UnsupportedConfigDataLocationException(location);\n\t}", "doc_comment": ""}, "code_tokens": ["resolve", "List", "(", ",", ",", ")", "{", "}", "<", "ConfigDataResolutionResult", ">", "ConfigDataLocationResolverContext", "context", "ConfigDataLocation", "location", "Profiles", "profiles", "if", "for", "(", "resolver", ":", ")", "throw", ";", "(", ")", "{", "}", "ConfigDataLocationResolver", "getResolvers", "{", "}", "new", "UnsupportedConfigDataLocationException", "@", "Nullable", "@", "Nullable", "location", "==", "null", "return", ";", "<", ">", "(", ")", "if", "(", "location", ")", "Collections", ".", "emptyList", "?", "(", ")", "{", "}", "(", ")", "resolver", ".", "isResolvable", "return", ";", "(", "context", ",", "location", ")", "resolve", "(", "resolver", ",", "context", ",", "location", ",", "profiles", ")"], "metrics": {"cyclomatic_complexity": 4, "n_ast_nodes": 120, "ast_depth": 11, "n_identifiers": 10, "vocab_size": 36, "n_whitespaces": 65, "n_words": 36, "nloc": 12, "token_counts": 82}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLocationResolvers.java#101-110", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLocationResolvers.java", "language": "Java"}, "method": {"name": "resolve", "qualified_name": "org.springframework.boot.context.config.ConfigDataLocationResolvers#resolve", "start_line": 101, "end_line": 110, "signature": "resolve(ConfigDataLocationResolver<?> resolver,\n\t\t\tConfigDataLocationResolverContext context, ConfigDataLocation location, @Nullable Profiles profiles)", "original_code": "private List<ConfigDataResolutionResult> resolve(ConfigDataLocationResolver<?> resolver,\n\t\t\tConfigDataLocationResolverContext context, ConfigDataLocation location, @Nullable Profiles profiles) {\n\t\tList<ConfigDataResolutionResult> resolved = resolve(location, false, () -> resolver.resolve(context, location));\n\t\tif (profiles == null) {\n\t\t\treturn resolved;\n\t\t}\n\t\tList<ConfigDataResolutionResult> profileSpecific = resolve(location, true,\n\t\t\t\t() -> resolver.resolveProfileSpecific(context, location, profiles));\n\t\treturn merge(resolved, profileSpecific);\n\t}", "doc_comment": ""}, "code_tokens": ["resolve", "private", "List", "(", ",", ",", ",", ")", "{", "}", "<", "ConfigDataResolutionResult", ">", "resolver", "ConfigDataLocationResolverContext", "context", "ConfigDataLocation", "location", "Profiles", "profiles", ";", "if", ";", "return", ";", "ConfigDataLocationResolver", "List", "resolved", "=", "(", ")", "{", "}", "List", "profileSpecific", "=", "merge", "<", ">", "@", "Nullable", "<", "ConfigDataResolutionResult", ">", "resolve", "profiles", "==", "null", "return", "resolved", ";", "<", "ConfigDataResolutionResult", ">", "resolve", "(", "resolved", ",", "profileSpecific", ")", "?", "(", "location", ",", "false", ",", ")", "(", "location", ",", "true", ",", ")", "->", "->", "(", ")", "resolver", ".", "resolve", "(", ")", "resolver", ".", "resolveProfileSpecific", "(", "context", ",", "location", ")", "(", "context", ",", "location", ",", "profiles", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 141, "ast_depth": 11, "n_identifiers": 10, "vocab_size": 36, "n_whitespaces": 63, "n_words": 43, "nloc": 10, "token_counts": 97}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLocationResolvers.java#112-120", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLocationResolvers.java", "language": "Java"}, "method": {"name": "resolve", "qualified_name": "org.springframework.boot.context.config.ConfigDataLocationResolvers#resolve", "start_line": 112, "end_line": 120, "signature": "resolve(ConfigDataLocation location, boolean profileSpecific,\n\t\t\tSupplier<List<? extends ConfigDataResource>> resolveAction)", "original_code": "private List<ConfigDataResolutionResult> resolve(ConfigDataLocation location, boolean profileSpecific,\n\t\t\tSupplier<List<? extends ConfigDataResource>> resolveAction) {\n\t\tList<ConfigDataResource> resources = nonNullList(resolveAction.get());\n\t\tList<ConfigDataResolutionResult> resolved = new ArrayList<>(resources.size());\n\t\tfor (ConfigDataResource resource : resources) {\n\t\t\tresolved.add(new ConfigDataResolutionResult(location, resource, profileSpecific));\n\t\t}\n\t\treturn resolved;\n\t}", "doc_comment": ""}, "code_tokens": ["resolve", "private", "List", "(", ",", ",", ")", "{", "}", "<", "ConfigDataResolutionResult", ">", "ConfigDataLocation", "location", "boolean", "profileSpecific", "resolveAction", ";", ";", "for", "(", "ConfigDataResource", "resource", ":", "resources", ")", "return", "resolved", ";", "Supplier", "List", "resources", "=", "List", "resolved", "=", "{", "}", "<", ">", "<", "ConfigDataResource", ">", "nonNullList", "<", "ConfigDataResolutionResult", ">", "new", ";", "List", "(", ")", "ArrayList", "(", ")", "resolved", ".", "add", "<", ">", "resolveAction", ".", "get", "<", ">", "resources", ".", "size", "(", ")", "?", "extends", "ConfigDataResource", "(", ")", "(", ")", "new", "ConfigDataResolutionResult", "(", "location", ",", "resource", ",", "profileSpecific", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 127, "ast_depth": 11, "n_identifiers": 11, "vocab_size": 35, "n_whitespaces": 50, "n_words": 39, "nloc": 9, "token_counts": 86}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLocationResolvers.java#122-125", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLocationResolvers.java", "language": "Java"}, "method": {"name": "nonNullList", "qualified_name": "org.springframework.boot.context.config.ConfigDataLocationResolvers#nonNullList", "start_line": 122, "end_line": 125, "signature": "nonNullList(@Nullable List<? extends T> list)", "original_code": "@SuppressWarnings(\"unchecked\")\n\tprivate <T> List<T> nonNullList(@Nullable List<? extends T> list) {\n\t\treturn (list != null) ? (List<T>) list : Collections.emptyList();\n\t}", "doc_comment": ""}, "code_tokens": ["nonNullList", "private", "<", ">", "List", "(", ")", "{", "}", "@", "SuppressWarnings", "T", "<", "T", ">", "list", "return", ";", "(", ")", "List", "?", ":", "\"", "unchecked", "\"", "@", "Nullable", "<", ">", "(", ")", "(", ")", "list", "Collections", ".", "emptyList", "?", "extends", "T", "list", "!=", "null", "List", "(", ")", "<", "T", ">"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 77, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 26, "n_whitespaces": 23, "n_words": 20, "nloc": 4, "token_counts": 50}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLocationResolvers.java#127-132", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLocationResolvers.java", "language": "Java"}, "method": {"name": "merge", "qualified_name": "org.springframework.boot.context.config.ConfigDataLocationResolvers#merge", "start_line": 127, "end_line": 132, "signature": "merge(List<T> list1, List<T> list2)", "original_code": "private <T> List<T> merge(List<T> list1, List<T> list2) {\n\t\tList<T> merged = new ArrayList<>(list1.size() + list2.size());\n\t\tmerged.addAll(list1);\n\t\tmerged.addAll(list2);\n\t\treturn merged;\n\t}", "doc_comment": ""}, "code_tokens": ["merge", "private", "<", ">", "List", "(", ",", ")", "{", "}", "T", "<", "T", ">", "list1", "list2", ";", ";", ";", "return", "merged", ";", "List", "List", "List", "merged", "=", "merged", ".", "addAll", "merged", ".", "addAll", "<", "T", ">", "<", "T", ">", "<", "T", ">", "new", "(", "list1", ")", "(", "list2", ")", "ArrayList", "(", ")", "<", ">", "+", "list1", ".", "size", "list2", ".", "size", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 100, "ast_depth": 11, "n_identifiers": 6, "vocab_size": 23, "n_whitespaces": 28, "n_words": 28, "nloc": 6, "token_counts": 65}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLocationResolvers.java#138-140", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLocationResolvers.java", "language": "Java"}, "method": {"name": "getResolvers", "qualified_name": "org.springframework.boot.context.config.ConfigDataLocationResolvers#getResolvers", "start_line": 138, "end_line": 140, "signature": "getResolvers()", "original_code": "List<ConfigDataLocationResolver<?>> getResolvers() {\n\t\treturn this.resolvers;\n\t}", "doc_comment": "/**\n\t * Return the resolvers managed by this object.\n\t * @return the resolvers\n\t */"}, "code_tokens": ["getResolvers", "List", "(", ")", "{", "}", "<", ">", "return", ";", "ConfigDataLocationResolver", "this", ".", "resolvers", "<", ">", "?"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 8, "n_identifiers": 2, "vocab_size": 15, "n_whitespaces": 8, "n_words": 6, "nloc": 3, "token_counts": 17}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/context/event/ApplicationEnvironmentPreparedEvent.java#57-59", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/event/ApplicationEnvironmentPreparedEvent.java", "language": "Java"}, "method": {"name": "getBootstrapContext", "qualified_name": "org.springframework.boot.context.event.ApplicationEnvironmentPreparedEvent#getBootstrapContext", "start_line": 57, "end_line": 59, "signature": "getBootstrapContext()", "original_code": "public ConfigurableBootstrapContext getBootstrapContext() {\n\t\treturn this.bootstrapContext;\n\t}", "doc_comment": "/**\n\t * Return the bootstrap context.\n\t * @return the bootstrap context\n\t * @since 2.4.0\n\t */"}, "code_tokens": ["ConfigurableBootstrapContext", "getBootstrapContext", "public", "(", ")", "{", "}", "return", ";", "this", ".", "bootstrapContext"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 19, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 12, "n_whitespaces": 9, "n_words": 6, "nloc": 3, "token_counts": 12}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/context/event/ApplicationEnvironmentPreparedEvent.java#65-67", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/event/ApplicationEnvironmentPreparedEvent.java", "language": "Java"}, "method": {"name": "getEnvironment", "qualified_name": "org.springframework.boot.context.event.ApplicationEnvironmentPreparedEvent#getEnvironment", "start_line": 65, "end_line": 67, "signature": "getEnvironment()", "original_code": "public ConfigurableEnvironment getEnvironment() {\n\t\treturn this.environment;\n\t}", "doc_comment": "/**\n\t * Return the environment.\n\t * @return the environment\n\t */"}, "code_tokens": ["ConfigurableEnvironment", "getEnvironment", "public", "(", ")", "{", "}", "return", ";", "this", ".", "environment"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 19, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 12, "n_whitespaces": 9, "n_words": 6, "nloc": 3, "token_counts": 12}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/context/event/ApplicationStartingEvent.java#58-60", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/event/ApplicationStartingEvent.java", "language": "Java"}, "method": {"name": "getBootstrapContext", "qualified_name": "org.springframework.boot.context.event.ApplicationStartingEvent#getBootstrapContext", "start_line": 58, "end_line": 60, "signature": "getBootstrapContext()", "original_code": "public ConfigurableBootstrapContext getBootstrapContext() {\n\t\treturn this.bootstrapContext;\n\t}", "doc_comment": "/**\n\t * Return the bootstrap context.\n\t * @return the bootstrap context\n\t * @since 2.4.0\n\t */"}, "code_tokens": ["ConfigurableBootstrapContext", "getBootstrapContext", "public", "(", ")", "{", "}", "return", ";", "this", ".", "bootstrapContext"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 19, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 12, "n_whitespaces": 9, "n_words": 6, "nloc": 3, "token_counts": 12}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/context/event/EventPublishingRunListener.java#69-72", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/event/EventPublishingRunListener.java", "language": "Java"}, "method": {"name": "getOrder", "qualified_name": "org.springframework.boot.context.event.EventPublishingRunListener#getOrder", "start_line": 69, "end_line": 72, "signature": "getOrder()", "original_code": "@Override\n\tpublic int getOrder() {\n\t\treturn 0;\n\t}", "doc_comment": ""}, "code_tokens": ["getOrder", "public", "int", "(", ")", "{", "}", "@", "Override", "return", "0", ";"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 20, "ast_depth": 5, "n_identifiers": 2, "vocab_size": 12, "n_whitespaces": 11, "n_words": 6, "nloc": 4, "token_counts": 12}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/context/event/EventPublishingRunListener.java#74-77", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/event/EventPublishingRunListener.java", "language": "Java"}, "method": {"name": "starting", "qualified_name": "org.springframework.boot.context.event.EventPublishingRunListener#starting", "start_line": 74, "end_line": 77, "signature": "starting(ConfigurableBootstrapContext bootstrapContext)", "original_code": "@Override\n\tpublic void starting(ConfigurableBootstrapContext bootstrapContext) {\n\t\tmulticastInitialEvent(new ApplicationStartingEvent(bootstrapContext, this.application, this.args));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "starting", "public", "(", ")", "{", "}", "@", "Override", "ConfigurableBootstrapContext", "bootstrapContext", ";", "multicastInitialEvent", "(", ")", "new", "ApplicationStartingEvent", "(", "bootstrapContext", ",", ",", ")", "this", ".", "application", "this", ".", "args"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 42, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 20, "n_whitespaces": 14, "n_words": 14, "nloc": 4, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/context/event/EventPublishingRunListener.java#79-84", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/event/EventPublishingRunListener.java", "language": "Java"}, "method": {"name": "environmentPrepared", "qualified_name": "org.springframework.boot.context.event.EventPublishingRunListener#environmentPrepared", "start_line": 79, "end_line": 84, "signature": "environmentPrepared(ConfigurableBootstrapContext bootstrapContext,\n\t\t\tConfigurableEnvironment environment)", "original_code": "@Override\n\tpublic void environmentPrepared(ConfigurableBootstrapContext bootstrapContext,\n\t\t\tConfigurableEnvironment environment) {\n\t\tmulticastInitialEvent(\n\t\t\t\tnew ApplicationEnvironmentPreparedEvent(bootstrapContext, this.application, this.args, environment));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "environmentPrepared", "public", "(", ",", ")", "{", "}", "@", "Override", "ConfigurableBootstrapContext", "bootstrapContext", "ConfigurableEnvironment", "environment", ";", "multicastInitialEvent", "(", ")", "new", "ApplicationEnvironmentPreparedEvent", "(", "bootstrapContext", ",", ",", ",", "environment", ")", "this", ".", "application", "this", ".", "args"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 48, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 22, "n_whitespaces": 25, "n_words": 17, "nloc": 6, "token_counts": 33}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/context/event/EventPublishingRunListener.java#86-89", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/event/EventPublishingRunListener.java", "language": "Java"}, "method": {"name": "contextPrepared", "qualified_name": "org.springframework.boot.context.event.EventPublishingRunListener#contextPrepared", "start_line": 86, "end_line": 89, "signature": "contextPrepared(ConfigurableApplicationContext context)", "original_code": "@Override\n\tpublic void contextPrepared(ConfigurableApplicationContext context) {\n\t\tmulticastInitialEvent(new ApplicationContextInitializedEvent(this.application, this.args, context));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "contextPrepared", "public", "(", ")", "{", "}", "@", "Override", "ConfigurableApplicationContext", "context", ";", "multicastInitialEvent", "(", ")", "new", "ApplicationContextInitializedEvent", "(", ",", ",", "context", ")", "this", ".", "application", "this", ".", "args"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 42, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 20, "n_whitespaces": 14, "n_words": 14, "nloc": 4, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/context/event/EventPublishingRunListener.java#91-100", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/event/EventPublishingRunListener.java", "language": "Java"}, "method": {"name": "contextLoaded", "qualified_name": "org.springframework.boot.context.event.EventPublishingRunListener#contextLoaded", "start_line": 91, "end_line": 100, "signature": "contextLoaded(ConfigurableApplicationContext context)", "original_code": "@Override\n\tpublic void contextLoaded(ConfigurableApplicationContext context) {\n\t\tfor (ApplicationListener<?> listener : this.application.getListeners()) {\n\t\t\tif (listener instanceof ApplicationContextAware contextAware) {\n\t\t\t\tcontextAware.setApplicationContext(context);\n\t\t\t}\n\t\t\tcontext.addApplicationListener(listener);\n\t\t}\n\t\tmulticastInitialEvent(new ApplicationPreparedEvent(this.application, this.args, context));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "contextLoaded", "public", "(", ")", "{", "}", "@", "Override", "ConfigurableApplicationContext", "context", "for", "(", "listener", ":", ")", ";", "ApplicationListener", ".", "getListeners", "{", "}", "multicastInitialEvent", "<", ">", "this", ".", "application", "(", ")", "if", ";", "(", ")", "?", "(", ")", "{", "}", "context", ".", "addApplicationListener", "new", "ApplicationPreparedEvent", "listener", "instanceof", "ApplicationContextAware", "contextAware", ";", "(", "listener", ")", "(", ",", ",", "context", ")", "contextAware", ".", "setApplicationContext", "this", ".", "application", "this", ".", "args", "(", "context", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 101, "ast_depth": 11, "n_identifiers": 11, "vocab_size": 34, "n_whitespaces": 47, "n_words": 31, "nloc": 10, "token_counts": 69}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/context/event/EventPublishingRunListener.java#102-106", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/event/EventPublishingRunListener.java", "language": "Java"}, "method": {"name": "started", "qualified_name": "org.springframework.boot.context.event.EventPublishingRunListener#started", "start_line": 102, "end_line": 106, "signature": "started(ConfigurableApplicationContext context, @Nullable Duration timeTaken)", "original_code": "@Override\n\tpublic void started(ConfigurableApplicationContext context, @Nullable Duration timeTaken) {\n\t\tcontext.publishEvent(new ApplicationStartedEvent(this.application, this.args, context, timeTaken));\n\t\tAvailabilityChangeEvent.publish(context, LivenessState.CORRECT);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "started", "public", "(", ",", ")", "{", "}", "@", "Override", "ConfigurableApplicationContext", "context", "Duration", "timeTaken", ";", ";", "context", ".", "publishEvent", "AvailabilityChangeEvent", ".", "publish", "@", "Nullable", "(", ")", "(", "context", ",", ")", "new", "ApplicationStartedEvent", "LivenessState", ".", "CORRECT", "(", ",", ",", "context", ",", "timeTaken", ")", "this", ".", "application", "this", ".", "args"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 69, "ast_depth": 10, "n_identifiers": 12, "vocab_size": 27, "n_whitespaces": 22, "n_words": 24, "nloc": 5, "token_counts": 48}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/context/event/EventPublishingRunListener.java#108-112", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/event/EventPublishingRunListener.java", "language": "Java"}, "method": {"name": "ready", "qualified_name": "org.springframework.boot.context.event.EventPublishingRunListener#ready", "start_line": 108, "end_line": 112, "signature": "ready(ConfigurableApplicationContext context, @Nullable Duration timeTaken)", "original_code": "@Override\n\tpublic void ready(ConfigurableApplicationContext context, @Nullable Duration timeTaken) {\n\t\tcontext.publishEvent(new ApplicationReadyEvent(this.application, this.args, context, timeTaken));\n\t\tAvailabilityChangeEvent.publish(context, ReadinessState.ACCEPTING_TRAFFIC);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "ready", "public", "(", ",", ")", "{", "}", "@", "Override", "ConfigurableApplicationContext", "context", "Duration", "timeTaken", ";", ";", "context", ".", "publishEvent", "AvailabilityChangeEvent", ".", "publish", "@", "Nullable", "(", ")", "(", "context", ",", ")", "new", "ApplicationReadyEvent", "ReadinessState", ".", "ACCEPTING_TRAFFIC", "(", ",", ",", "context", ",", "timeTaken", ")", "this", ".", "application", "this", ".", "args"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 69, "ast_depth": 10, "n_identifiers": 12, "vocab_size": 27, "n_whitespaces": 22, "n_words": 24, "nloc": 5, "token_counts": 48}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/context/event/EventPublishingRunListener.java#114-133", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/event/EventPublishingRunListener.java", "language": "Java"}, "method": {"name": "failed", "qualified_name": "org.springframework.boot.context.event.EventPublishingRunListener#failed", "start_line": 114, "end_line": 133, "signature": "failed(@Nullable ConfigurableApplicationContext context, Throwable exception)", "original_code": "@Override\n\tpublic void failed(@Nullable ConfigurableApplicationContext context, Throwable exception) {\n\t\tApplicationFailedEvent event = new ApplicationFailedEvent(this.application, this.args, context, exception);\n\t\tif (context != null && context.isActive()) {\n\t\t\t// Listeners have been registered to the application context so we should\n\t\t\t// use it at this point if we can\n\t\t\tcontext.publishEvent(event);\n\t\t}\n\t\telse {\n\t\t\t// An inactive context may not have a multicaster so we use our multicaster to\n\t\t\t// call all the context's listeners instead\n\t\t\tif (context instanceof AbstractApplicationContext abstractApplicationContext) {\n\t\t\t\tfor (ApplicationListener<?> listener : abstractApplicationContext.getApplicationListeners()) {\n\t\t\t\t\tthis.initialMulticaster.addApplicationListener(listener);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.initialMulticaster.setErrorHandler(new LoggingErrorHandler());\n\t\t\tthis.initialMulticaster.multicastEvent(event);\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "failed", "public", "(", ",", ")", "{", "}", "@", "Override", "ConfigurableApplicationContext", "context", "Throwable", "exception", "ApplicationFailedEvent", ";", "if", "else", "event", "=", "(", ")", "{", "// Listeners have been registered to the application context so we should", "// use it at this point if we can", "}", "{", "// An inactive context may not have a multicaster so we use our multicaster to", "// call all the context's listeners instead", "}", "@", "Nullable", "new", "ApplicationFailedEvent", "&&", ";", "if", ";", ";", "(", ",", ",", "context", ",", "exception", ")", "context", "!=", "null", "context", ".", "isActive", "context", ".", "publishEvent", "(", ")", "{", "}", ".", "setErrorHandler", ".", "multicastEvent", "this", ".", "application", "this", ".", "args", "(", ")", "(", "event", ")", "context", "instanceof", "AbstractApplicationContext", "abstractApplicationContext", "for", "(", "listener", ":", ")", "this", ".", "initialMulticaster", "(", ")", "this", ".", "initialMulticaster", "(", "event", ")", "ApplicationListener", "abstractApplicationContext", ".", "getApplicationListeners", "{", "}", "new", "LoggingErrorHandler", "<", ">", "(", ")", ";", "(", ")", "?", ".", "addApplicationListener", "this", ".", "initialMulticaster", "(", "listener", ")"], "metrics": {"cyclomatic_complexity": 5, "n_ast_nodes": 170, "ast_depth": 13, "n_identifiers": 17, "vocab_size": 51, "n_whitespaces": 142, "n_words": 91, "nloc": 20, "token_counts": 118}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/context/event/EventPublishingRunListener.java#135-138", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/event/EventPublishingRunListener.java", "language": "Java"}, "method": {"name": "multicastInitialEvent", "qualified_name": "org.springframework.boot.context.event.EventPublishingRunListener#multicastInitialEvent", "start_line": 135, "end_line": 138, "signature": "multicastInitialEvent(ApplicationEvent event)", "original_code": "private void multicastInitialEvent(ApplicationEvent event) {\n\t\trefreshApplicationListeners();\n\t\tthis.initialMulticaster.multicastEvent(event);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "multicastInitialEvent", "private", "(", ")", "{", "}", "ApplicationEvent", "event", ";", ";", "refreshApplicationListeners", ".", "multicastEvent", "(", ")", "this", ".", "initialMulticaster", "(", "event", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 35, "ast_depth": 7, "n_identifiers": 5, "vocab_size": 15, "n_whitespaces": 12, "n_words": 10, "nloc": 4, "token_counts": 22}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/context/event/EventPublishingRunListener.java#140-142", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/event/EventPublishingRunListener.java", "language": "Java"}, "method": {"name": "refreshApplicationListeners", "qualified_name": "org.springframework.boot.context.event.EventPublishingRunListener#refreshApplicationListeners", "start_line": 140, "end_line": 142, "signature": "refreshApplicationListeners()", "original_code": "private void refreshApplicationListeners() {\n\t\tthis.application.getListeners().forEach(this.initialMulticaster::addApplicationListener);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "refreshApplicationListeners", "private", "(", ")", "{", "}", ";", ".", "forEach", ".", "getListeners", "(", ")", "this", ".", "application", "(", ")", "::", "addApplicationListener", "this", ".", "initialMulticaster"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 37, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 16, "n_whitespaces": 8, "n_words": 10, "nloc": 3, "token_counts": 24}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/context/event/EventPublishingRunListener.java#148-151", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/event/EventPublishingRunListener.java", "language": "Java"}, "method": {"name": "handleError", "qualified_name": "org.springframework.boot.context.event.EventPublishingRunListener#handleError", "start_line": 148, "end_line": 151, "signature": "handleError(Throwable throwable)", "original_code": "@Override\n\t\tpublic void handleError(Throwable throwable) {\n\t\t\tlogger.warn(\"Error calling ApplicationEventListener\", throwable);\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "handleError", "public", "(", ")", "{", "}", "@", "Override", "Throwable", "throwable", ";", "logger", ".", "warn", "(", ",", "throwable", ")", "\"", "Error calling ApplicationEventListener", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 33, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 18, "n_whitespaces": 17, "n_words": 12, "nloc": 4, "token_counts": 22}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/env/EnvironmentPostProcessor.java#60-60", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/EnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "postProcessEnvironment", "qualified_name": "org.springframework.boot.env.EnvironmentPostProcessor#postProcessEnvironment", "start_line": 60, "end_line": 60, "signature": "postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application)", "original_code": "void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application);", "doc_comment": "/**\n\t * Post-process the given {@code environment}.\n\t * @param environment the environment to post-process\n\t * @param application the application to which the environment belongs\n\t */"}, "code_tokens": ["void", "postProcessEnvironment", ";", "(", ",", ")", "ConfigurableEnvironment", "environment", "SpringApplication", "application"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 15, "ast_depth": 5, "n_identifiers": 3, "vocab_size": 10, "n_whitespaces": 4, "n_words": 6, "nloc": 1, "token_counts": 10}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListener.java#102-105", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListener.java", "language": "Java"}, "method": {"name": "with", "qualified_name": "org.springframework.boot.env.EnvironmentPostProcessorApplicationListener#with", "start_line": 102, "end_line": 105, "signature": "with(\n\t\t\tEnvironmentPostProcessorsFactory postProcessorsFactory)", "original_code": "public static EnvironmentPostProcessorApplicationListener with(\n\t\t\tEnvironmentPostProcessorsFactory postProcessorsFactory) {\n\t\treturn new EnvironmentPostProcessorApplicationListener((classloader) -> postProcessorsFactory);\n\t}", "doc_comment": "/**\n\t * Factory method that creates an {@link EnvironmentPostProcessorApplicationListener}\n\t * with a specific {@link EnvironmentPostProcessorsFactory}.\n\t * @param postProcessorsFactory the environment post processor factory\n\t * @return an {@link EnvironmentPostProcessorApplicationListener} instance\n\t */"}, "code_tokens": ["EnvironmentPostProcessorApplicationListener", "with", "public", "static", "(", ")", "{", "}", "EnvironmentPostProcessorsFactory", "postProcessorsFactory", "return", ";", "new", "EnvironmentPostProcessorApplicationListener", "(", ")", "->", "postProcessorsFactory", "(", "classloader", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 32, "ast_depth": 9, "n_identifiers": 3, "vocab_size": 15, "n_whitespaces": 18, "n_words": 11, "nloc": 4, "token_counts": 21}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListener.java#107-112", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListener.java", "language": "Java"}, "method": {"name": "supportsEventType", "qualified_name": "org.springframework.boot.env.EnvironmentPostProcessorApplicationListener#supportsEventType", "start_line": 107, "end_line": 112, "signature": "supportsEventType(Class<? extends ApplicationEvent> eventType)", "original_code": "@Override\n\tpublic boolean supportsEventType(Class<? extends ApplicationEvent> eventType) {\n\t\treturn ApplicationEnvironmentPreparedEvent.class.isAssignableFrom(eventType)\n\t\t\t\t|| ApplicationPreparedEvent.class.isAssignableFrom(eventType)\n\t\t\t\t|| ApplicationFailedEvent.class.isAssignableFrom(eventType);\n\t}", "doc_comment": ""}, "code_tokens": ["boolean", "supportsEventType", "public", "(", ")", "{", "}", "@", "Override", "eventType", "return", ";", "Class", "||", "<", ">", "||", ".", "isAssignableFrom", "?", "extends", "ApplicationEvent", ".", "isAssignableFrom", ".", "isAssignableFrom", "ApplicationFailedEvent", ".", "class", "(", "eventType", ")", "ApplicationEnvironmentPreparedEvent", ".", "class", "(", "eventType", ")", "ApplicationPreparedEvent", ".", "class", "(", "eventType", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 66, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 25, "n_whitespaces": 26, "n_words": 21, "nloc": 6, "token_counts": 44}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListener.java#114-125", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListener.java", "language": "Java"}, "method": {"name": "onApplicationEvent", "qualified_name": "org.springframework.boot.env.EnvironmentPostProcessorApplicationListener#onApplicationEvent", "start_line": 114, "end_line": 125, "signature": "onApplicationEvent(ApplicationEvent event)", "original_code": "@Override\n\tpublic void onApplicationEvent(ApplicationEvent event) {\n\t\tif (event instanceof ApplicationEnvironmentPreparedEvent environmentPreparedEvent) {\n\t\t\tonApplicationEnvironmentPreparedEvent(environmentPreparedEvent);\n\t\t}\n\t\tif (event instanceof ApplicationPreparedEvent) {\n\t\t\tonApplicationPreparedEvent();\n\t\t}\n\t\tif (event instanceof ApplicationFailedEvent) {\n\t\t\tonApplicationFailedEvent();\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "onApplicationEvent", "public", "(", ")", "{", "}", "@", "Override", "ApplicationEvent", "event", "if", "if", "if", "(", ")", "{", "}", "(", ")", "{", "}", "(", ")", "{", "}", "event", "instanceof", "ApplicationEnvironmentPreparedEvent", "environmentPreparedEvent", ";", "event", "instanceof", "ApplicationPreparedEvent", ";", "event", "instanceof", "ApplicationFailedEvent", ";", "onApplicationEnvironmentPreparedEvent", "onApplicationPreparedEvent", "onApplicationFailedEvent", "(", "environmentPreparedEvent", ")", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 4, "n_ast_nodes": 77, "ast_depth": 9, "n_identifiers": 7, "vocab_size": 21, "n_whitespaces": 51, "n_words": 23, "nloc": 12, "token_counts": 49}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListener.java#127-136", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListener.java", "language": "Java"}, "method": {"name": "onApplicationEnvironmentPreparedEvent", "qualified_name": "org.springframework.boot.env.EnvironmentPostProcessorApplicationListener#onApplicationEnvironmentPreparedEvent", "start_line": 127, "end_line": 136, "signature": "onApplicationEnvironmentPreparedEvent(ApplicationEnvironmentPreparedEvent event)", "original_code": "private void onApplicationEnvironmentPreparedEvent(ApplicationEnvironmentPreparedEvent event) {\n\t\tConfigurableEnvironment environment = event.getEnvironment();\n\t\tSpringApplication application = event.getSpringApplication();\n\t\tList<EnvironmentPostProcessor> postProcessors = getEnvironmentPostProcessors(application.getResourceLoader(),\n\t\t\t\tevent.getBootstrapContext());\n\t\taddAotGeneratedEnvironmentPostProcessorIfNecessary(postProcessors, application);\n\t\tfor (EnvironmentPostProcessor postProcessor : postProcessors) {\n\t\t\tpostProcessor.postProcessEnvironment(environment, application);\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "onApplicationEnvironmentPreparedEvent", "private", "(", ")", "{", "}", "ApplicationEnvironmentPreparedEvent", "event", "ConfigurableEnvironment", ";", "SpringApplication", ";", ";", ";", "for", "(", "EnvironmentPostProcessor", "postProcessor", ":", "postProcessors", ")", "environment", "=", "application", "=", "List", "postProcessors", "=", "addAotGeneratedEnvironmentPostProcessorIfNecessary", "{", "}", "event", ".", "getEnvironment", "event", ".", "getSpringApplication", "<", "EnvironmentPostProcessor", ">", "getEnvironmentPostProcessors", "(", "postProcessors", ",", "application", ")", ";", "(", ")", "(", ")", "(", ",", ")", "postProcessor", ".", "postProcessEnvironment", "application", ".", "getResourceLoader", "event", ".", "getBootstrapContext", "(", "environment", ",", "application", ")", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 105, "ast_depth": 10, "n_identifiers": 13, "vocab_size": 32, "n_whitespaces": 49, "n_words": 32, "nloc": 10, "token_counts": 73}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListener.java#138-140", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListener.java", "language": "Java"}, "method": {"name": "onApplicationPreparedEvent", "qualified_name": "org.springframework.boot.env.EnvironmentPostProcessorApplicationListener#onApplicationPreparedEvent", "start_line": 138, "end_line": 140, "signature": "onApplicationPreparedEvent()", "original_code": "private void onApplicationPreparedEvent() {\n\t\tfinish();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "onApplicationPreparedEvent", "private", "(", ")", "{", "}", ";", "finish", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 19, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 9, "n_whitespaces": 8, "n_words": 4, "nloc": 3, "token_counts": 11}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListener.java#142-144", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListener.java", "language": "Java"}, "method": {"name": "onApplicationFailedEvent", "qualified_name": "org.springframework.boot.env.EnvironmentPostProcessorApplicationListener#onApplicationFailedEvent", "start_line": 142, "end_line": 144, "signature": "onApplicationFailedEvent()", "original_code": "private void onApplicationFailedEvent() {\n\t\tfinish();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "onApplicationFailedEvent", "private", "(", ")", "{", "}", ";", "finish", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 19, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 9, "n_whitespaces": 8, "n_words": 4, "nloc": 3, "token_counts": 11}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListener.java#146-148", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListener.java", "language": "Java"}, "method": {"name": "finish", "qualified_name": "org.springframework.boot.env.EnvironmentPostProcessorApplicationListener#finish", "start_line": 146, "end_line": 148, "signature": "finish()", "original_code": "private void finish() {\n\t\tthis.deferredLogs.switchOverAll();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "finish", "private", "(", ")", "{", "}", ";", ".", "switchOverAll", "this", ".", "deferredLogs", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 24, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 12, "n_whitespaces": 8, "n_words": 6, "nloc": 3, "token_counts": 15}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListener.java#150-155", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListener.java", "language": "Java"}, "method": {"name": "getEnvironmentPostProcessors", "qualified_name": "org.springframework.boot.env.EnvironmentPostProcessorApplicationListener#getEnvironmentPostProcessors", "start_line": 150, "end_line": 155, "signature": "getEnvironmentPostProcessors(@Nullable ResourceLoader resourceLoader,\n\t\t\tConfigurableBootstrapContext bootstrapContext)", "original_code": "List<EnvironmentPostProcessor> getEnvironmentPostProcessors(@Nullable ResourceLoader resourceLoader,\n\t\t\tConfigurableBootstrapContext bootstrapContext) {\n\t\tClassLoader classLoader = (resourceLoader != null) ? resourceLoader.getClassLoader() : null;\n\t\tEnvironmentPostProcessorsFactory postProcessorsFactory = this.postProcessorsFactory.apply(classLoader);\n\t\treturn postProcessorsFactory.getEnvironmentPostProcessors(this.deferredLogs, bootstrapContext);\n\t}", "doc_comment": ""}, "code_tokens": ["getEnvironmentPostProcessors", "List", "(", ",", ")", "{", "}", "<", "EnvironmentPostProcessor", ">", "ResourceLoader", "resourceLoader", "ConfigurableBootstrapContext", "bootstrapContext", "ClassLoader", ";", "EnvironmentPostProcessorsFactory", ";", "return", ";", "classLoader", "=", "postProcessorsFactory", "=", "postProcessorsFactory", ".", "getEnvironmentPostProcessors", "@", "Nullable", "?", ":", "null", ".", "apply", "(", ",", "bootstrapContext", ")", "(", ")", "resourceLoader", ".", "getClassLoader", "this", ".", "postProcessorsFactory", "(", "classLoader", ")", "this", ".", "deferredLogs", "resourceLoader", "!=", "null", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 83, "ast_depth": 9, "n_identifiers": 9, "vocab_size": 32, "n_whitespaces": 34, "n_words": 27, "nloc": 6, "token_counts": 57}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListener.java#157-169", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListener.java", "language": "Java"}, "method": {"name": "addAotGeneratedEnvironmentPostProcessorIfNecessary", "qualified_name": "org.springframework.boot.env.EnvironmentPostProcessorApplicationListener#addAotGeneratedEnvironmentPostProcessorIfNecessary", "start_line": 157, "end_line": 169, "signature": "addAotGeneratedEnvironmentPostProcessorIfNecessary(List<EnvironmentPostProcessor> postProcessors,\n\t\t\tSpringApplication springApplication)", "original_code": "private void addAotGeneratedEnvironmentPostProcessorIfNecessary(List<EnvironmentPostProcessor> postProcessors,\n\t\t\tSpringApplication springApplication) {\n\t\tif (AotDetector.useGeneratedArtifacts()) {\n\t\t\tClassLoader classLoader = (springApplication.getResourceLoader() != null)\n\t\t\t\t\t? springApplication.getResourceLoader().getClassLoader() : null;\n\t\t\tClass<?> mainApplicationClass = springApplication.getMainApplicationClass();\n\t\t\tAssert.state(mainApplicationClass != null, \"mainApplicationClass not found\");\n\t\t\tString postProcessorClassName = mainApplicationClass.getName() + \"__\" + AOT_FEATURE_NAME;\n\t\t\tif (ClassUtils.isPresent(postProcessorClassName, classLoader)) {\n\t\t\t\tpostProcessors.add(0, instantiateEnvironmentPostProcessor(postProcessorClassName, classLoader));\n\t\t\t}\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "addAotGeneratedEnvironmentPostProcessorIfNecessary", "private", "(", ",", ")", "{", "}", "postProcessors", "SpringApplication", "springApplication", "if", "List", "(", ")", "{", "}", "<", "EnvironmentPostProcessor", ">", "AotDetector", ".", "useGeneratedArtifacts", "ClassLoader", ";", ";", ";", "String", ";", "if", "(", ")", "classLoader", "=", "Class", "mainApplicationClass", "=", "Assert", ".", "state", "postProcessorClassName", "=", "(", ")", "{", "}", "?", ":", "null", "<", ">", "springApplication", ".", "getMainApplicationClass", "(", ",", ")", "+", "AOT_FEATURE_NAME", "ClassUtils", ".", "isPresent", ";", "(", ")", ".", "getClassLoader", "?", "(", ")", "mainApplicationClass", "!=", "null", "\"", "mainApplicationClass not found", "\"", "+", "(", "postProcessorClassName", ",", "classLoader", ")", "postProcessors", ".", "add", "!=", "null", "springApplication", ".", "getResourceLoader", "(", ")", "mainApplicationClass", ".", "getName", "\"", "__", "\"", "(", "0", ",", ")", "springApplication", ".", "getResourceLoader", "(", ")", "(", ")", "instantiateEnvironmentPostProcessor", "(", ")", "(", "postProcessorClassName", ",", "classLoader", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 171, "ast_depth": 13, "n_identifiers": 19, "vocab_size": 47, "n_whitespaces": 82, "n_words": 48, "nloc": 13, "token_counts": 117}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListener.java#171-182", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListener.java", "language": "Java"}, "method": {"name": "instantiateEnvironmentPostProcessor", "qualified_name": "org.springframework.boot.env.EnvironmentPostProcessorApplicationListener#instantiateEnvironmentPostProcessor", "start_line": 171, "end_line": 182, "signature": "instantiateEnvironmentPostProcessor(String postProcessorClassName,\n\t\t\t@Nullable ClassLoader classLoader)", "original_code": "private EnvironmentPostProcessor instantiateEnvironmentPostProcessor(String postProcessorClassName,\n\t\t\t@Nullable ClassLoader classLoader) {\n\t\ttry {\n\t\t\tClass<?> initializerClass = ClassUtils.resolveClassName(postProcessorClassName, classLoader);\n\t\t\tAssert.isAssignable(EnvironmentPostProcessor.class, initializerClass);\n\t\t\treturn (EnvironmentPostProcessor) BeanUtils.instantiateClass(initializerClass);\n\t\t}\n\t\tcatch (BeanInstantiationException ex) {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"Failed to instantiate EnvironmentPostProcessor: \" + postProcessorClassName, ex);\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["EnvironmentPostProcessor", "instantiateEnvironmentPostProcessor", "private", "(", ",", ")", "{", "}", "String", "postProcessorClassName", "ClassLoader", "classLoader", "try", "{", "}", "catch", "(", ")", "@", "Nullable", ";", ";", "return", ";", "ex", "{", "}", "Class", "initializerClass", "=", "Assert", ".", "isAssignable", "(", "EnvironmentPostProcessor", ")", "BeanInstantiationException", "throw", ";", "<", ">", "ClassUtils", ".", "resolveClassName", "(", ",", "initializerClass", ")", "BeanUtils", ".", "instantiateClass", "new", "IllegalArgumentException", "?", "(", "postProcessorClassName", ",", "classLoader", ")", "EnvironmentPostProcessor", ".", "class", "(", "initializerClass", ")", "(", ",", "ex", ")", "+", "postProcessorClassName", "\"", "Failed to instantiate EnvironmentPostProcessor: ", "\""], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 109, "ast_depth": 12, "n_identifiers": 12, "vocab_size": 40, "n_whitespaces": 66, "n_words": 37, "nloc": 12, "token_counts": 74}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListener.java#184-187", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListener.java", "language": "Java"}, "method": {"name": "getOrder", "qualified_name": "org.springframework.boot.env.EnvironmentPostProcessorApplicationListener#getOrder", "start_line": 184, "end_line": 187, "signature": "getOrder()", "original_code": "@Override\n\tpublic int getOrder() {\n\t\treturn this.order;\n\t}", "doc_comment": ""}, "code_tokens": ["getOrder", "public", "int", "(", ")", "{", "}", "@", "Override", "return", ";", "this", ".", "order"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 23, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 11, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListener.java#189-191", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListener.java", "language": "Java"}, "method": {"name": "setOrder", "qualified_name": "org.springframework.boot.env.EnvironmentPostProcessorApplicationListener#setOrder", "start_line": 189, "end_line": 191, "signature": "setOrder(int order)", "original_code": "public void setOrder(int order) {\n\t\tthis.order = order;\n\t}", "doc_comment": ""}, "code_tokens": ["void", "setOrder", "public", "(", ")", "{", "}", "order", ";", "int", "=", "order", "this", ".", "order"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 25, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 13, "n_whitespaces": 11, "n_words": 8, "nloc": 3, "token_counts": 15}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListener.java#199-210", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListener.java", "language": "Java"}, "method": {"name": "processAheadOfTime", "qualified_name": "org.springframework.boot.env.EnvironmentPostProcessorApplicationListener#processAheadOfTime", "start_line": 199, "end_line": 210, "signature": "processAheadOfTime(\n\t\t\t\tConfigurableListableBeanFactory beanFactory)", "original_code": "@Override\n\t\tpublic @Nullable BeanFactoryInitializationAotContribution processAheadOfTime(\n\t\t\t\tConfigurableListableBeanFactory beanFactory) {\n\t\t\tEnvironment environment = beanFactory.getBean(ConfigurableApplicationContext.ENVIRONMENT_BEAN_NAME,\n\t\t\t\t\tEnvironment.class);\n\t\t\tString[] activeProfiles = environment.getActiveProfiles();\n\t\t\tString[] defaultProfiles = environment.getDefaultProfiles();\n\t\t\tif (!ObjectUtils.isEmpty(activeProfiles) && !Arrays.equals(activeProfiles, defaultProfiles)) {\n\t\t\t\treturn new EnvironmentAotContribution(activeProfiles);\n\t\t\t}\n\t\t\treturn null;\n\t\t}", "doc_comment": ""}, "code_tokens": ["BeanFactoryInitializationAotContribution", "processAheadOfTime", "public", "(", ")", "{", "}", "@", "Override", "@", "Nullable", "ConfigurableListableBeanFactory", "beanFactory", "Environment", ";", ";", ";", "if", "return", "null", ";", "environment", "=", "String", "activeProfiles", "=", "String", "defaultProfiles", "=", "(", ")", "{", "}", "beanFactory", ".", "getBean", "[", "]", "environment", ".", "getActiveProfiles", "[", "]", "environment", ".", "getDefaultProfiles", "&&", "return", ";", "(", ",", ")", "(", ")", "(", ")", "!", "!", "new", "EnvironmentAotContribution", "ConfigurableApplicationContext", ".", "ENVIRONMENT_BEAN_NAME", "Environment", ".", "class", "ObjectUtils", ".", "isEmpty", "Arrays", ".", "equals", "(", "activeProfiles", ")", "(", "activeProfiles", ")", "(", "activeProfiles", ",", "defaultProfiles", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 123, "ast_depth": 10, "n_identifiers": 16, "vocab_size": 40, "n_whitespaces": 68, "n_words": 37, "nloc": 12, "token_counts": 83}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListener.java#224-240", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListener.java", "language": "Java"}, "method": {"name": "applyTo", "qualified_name": "org.springframework.boot.env.EnvironmentPostProcessorApplicationListener#applyTo", "start_line": 224, "end_line": 240, "signature": "applyTo(GenerationContext generationContext,\n\t\t\t\tBeanFactoryInitializationCode beanFactoryInitializationCode)", "original_code": "@Override\n\t\tpublic void applyTo(GenerationContext generationContext,\n\t\t\t\tBeanFactoryInitializationCode beanFactoryInitializationCode) {\n\t\t\tGeneratedClass generatedClass = generationContext.getGeneratedClasses()\n\t\t\t\t.addForFeature(AOT_FEATURE_NAME, (type) -> {\n\t\t\t\t\ttype.addModifiers(Modifier.PUBLIC);\n\t\t\t\t\ttype.addJavadoc(\"Configure the environment with AOT optimizations.\");\n\t\t\t\t\ttype.addSuperinterface(EnvironmentPostProcessor.class);\n\t\t\t\t});\n\t\t\tgeneratedClass.getMethods().add(\"postProcessEnvironment\", (method) -> {\n\t\t\t\tmethod.addModifiers(Modifier.PUBLIC);\n\t\t\t\tmethod.addAnnotation(Override.class);\n\t\t\t\tmethod.addParameter(ConfigurableEnvironment.class, ENVIRONMENT_VARIABLE);\n\t\t\t\tmethod.addParameter(SpringApplication.class, \"application\");\n\t\t\t\tmethod.addCode(generateActiveProfilesInitializeCode());\n\t\t\t});\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "applyTo", "public", "(", ",", ")", "{", "}", "@", "Override", "GenerationContext", "generationContext", "BeanFactoryInitializationCode", "beanFactoryInitializationCode", "GeneratedClass", ";", ";", "generatedClass", "=", ".", "add", ".", "addForFeature", "generatedClass", ".", "getMethods", "(", ",", ")", "generationContext", ".", "getGeneratedClasses", "(", "AOT_FEATURE_NAME", ",", ")", "(", ")", "\"", "postProcessEnvironment", "\"", "->", "(", ")", "->", "(", "method", ")", "{", "}", "(", "type", ")", "{", "}", ";", ";", ";", ";", ";", ";", ";", ";", "method", ".", "addModifiers", "method", ".", "addAnnotation", "method", ".", "addParameter", "method", ".", "addParameter", "method", ".", "addCode", "type", ".", "addModifiers", "type", ".", "addJavadoc", "type", ".", "addSuperinterface", "(", ")", "(", ")", "(", ",", "ENVIRONMENT_VARIABLE", ")", "(", ",", ")", "(", ")", "(", ")", "(", ")", "(", ")", "Modifier", ".", "PUBLIC", "Override", ".", "class", "ConfigurableEnvironment", ".", "class", "SpringApplication", ".", "class", "\"", "application", "\"", "generateActiveProfilesInitializeCode", "Modifier", ".", "PUBLIC", "\"", "Configure the environment with AOT optimizations.", "\"", "EnvironmentPostProcessor", ".", "class", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 193, "ast_depth": 14, "n_identifiers": 22, "vocab_size": 45, "n_whitespaces": 97, "n_words": 57, "nloc": 17, "token_counts": 133}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListener.java#242-248", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListener.java", "language": "Java"}, "method": {"name": "generateActiveProfilesInitializeCode", "qualified_name": "org.springframework.boot.env.EnvironmentPostProcessorApplicationListener#generateActiveProfilesInitializeCode", "start_line": 242, "end_line": 248, "signature": "generateActiveProfilesInitializeCode()", "original_code": "private CodeBlock generateActiveProfilesInitializeCode() {\n\t\t\tCodeBlock.Builder code = CodeBlock.builder();\n\t\t\tfor (String activeProfile : this.activeProfiles) {\n\t\t\t\tcode.addStatement(\"$L.addActiveProfile($S)\", ENVIRONMENT_VARIABLE, activeProfile);\n\t\t\t}\n\t\t\treturn code.build();\n\t\t}", "doc_comment": ""}, "code_tokens": ["CodeBlock", "generateActiveProfilesInitializeCode", "private", "(", ")", "{", "}", ";", "for", "(", "String", "activeProfile", ":", ")", "return", ";", "CodeBlock", ".", "Builder", "code", "=", "this", ".", "activeProfiles", "{", "}", "code", ".", "build", "CodeBlock", ".", "builder", ";", "(", ")", "(", ")", "code", ".", "addStatement", "(", ",", "ENVIRONMENT_VARIABLE", ",", "activeProfile", ")", "\"", "$L.addActiveProfile($S)", "\""], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 69, "ast_depth": 10, "n_identifiers": 9, "vocab_size": 26, "n_whitespaces": 38, "n_words": 23, "nloc": 7, "token_counts": 49}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/env/EnvironmentPostProcessorsFactory.java#43-44", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/EnvironmentPostProcessorsFactory.java", "language": "Java"}, "method": {"name": "getEnvironmentPostProcessors", "qualified_name": "org.springframework.boot.env.EnvironmentPostProcessorsFactory#getEnvironmentPostProcessors", "start_line": 43, "end_line": 44, "signature": "getEnvironmentPostProcessors(DeferredLogFactory logFactory,\n\t\t\tConfigurableBootstrapContext bootstrapContext)", "original_code": "List<EnvironmentPostProcessor> getEnvironmentPostProcessors(DeferredLogFactory logFactory,\n\t\t\tConfigurableBootstrapContext bootstrapContext);", "doc_comment": "/**\n\t * Create all requested {@link EnvironmentPostProcessor} instances.\n\t * @param logFactory a deferred log factory\n\t * @param bootstrapContext a bootstrap context\n\t * @return the post processor instances\n\t */"}, "code_tokens": ["getEnvironmentPostProcessors", ";", "List", "(", ",", ")", "<", "EnvironmentPostProcessor", ">", "DeferredLogFactory", "logFactory", "ConfigurableBootstrapContext", "bootstrapContext"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 20, "ast_depth": 5, "n_identifiers": 3, "vocab_size": 13, "n_whitespaces": 7, "n_words": 7, "nloc": 2, "token_counts": 13}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/env/EnvironmentPostProcessorsFactory.java#52-55", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/EnvironmentPostProcessorsFactory.java", "language": "Java"}, "method": {"name": "fromSpringFactories", "qualified_name": "org.springframework.boot.env.EnvironmentPostProcessorsFactory#fromSpringFactories", "start_line": 52, "end_line": 55, "signature": "fromSpringFactories(@Nullable ClassLoader classLoader)", "original_code": "static EnvironmentPostProcessorsFactory fromSpringFactories(@Nullable ClassLoader classLoader) {\n\t\treturn new SpringFactoriesEnvironmentPostProcessorsFactory(\n\t\t\t\tSpringFactoriesLoader.forDefaultResourceLocation(classLoader));\n\t}", "doc_comment": "/**\n\t * Return a {@link EnvironmentPostProcessorsFactory} backed by\n\t * {@code spring.factories}.\n\t * @param classLoader the source class loader\n\t * @return an {@link EnvironmentPostProcessorsFactory} instance\n\t */"}, "code_tokens": ["EnvironmentPostProcessorsFactory", "fromSpringFactories", "static", "(", ")", "{", "}", "ClassLoader", "classLoader", "return", ";", "new", "SpringFactoriesEnvironmentPostProcessorsFactory", "@", "Nullable", "(", ")", "SpringFactoriesLoader", ".", "forDefaultResourceLocation", "(", "classLoader", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 36, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 18, "n_whitespaces": 17, "n_words": 12, "nloc": 4, "token_counts": 23}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/env/EnvironmentPostProcessorsFactory.java#63-65", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/EnvironmentPostProcessorsFactory.java", "language": "Java"}, "method": {"name": "of", "qualified_name": "org.springframework.boot.env.EnvironmentPostProcessorsFactory#of", "start_line": 63, "end_line": 65, "signature": "of(Class<?>... classes)", "original_code": "static EnvironmentPostProcessorsFactory of(Class<?>... classes) {\n\t\treturn new ReflectionEnvironmentPostProcessorsFactory(classes);\n\t}", "doc_comment": "/**\n\t * Return a {@link EnvironmentPostProcessorsFactory} that reflectively creates post\n\t * processors from the given classes.\n\t * @param classes the post processor classes\n\t * @return an {@link EnvironmentPostProcessorsFactory} instance\n\t */"}, "code_tokens": ["EnvironmentPostProcessorsFactory", "of", "static", "(", ")", "{", "}", "...", "return", ";", "Class", "classes", "new", "ReflectionEnvironmentPostProcessorsFactory", "<", ">", "(", "classes", ")", "?"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 33, "ast_depth": 8, "n_identifiers": 2, "vocab_size": 17, "n_whitespaces": 11, "n_words": 9, "nloc": 3, "token_counts": 20}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/env/EnvironmentPostProcessorsFactory.java#73-75", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/EnvironmentPostProcessorsFactory.java", "language": "Java"}, "method": {"name": "of", "qualified_name": "org.springframework.boot.env.EnvironmentPostProcessorsFactory#of", "start_line": 73, "end_line": 75, "signature": "of(String... classNames)", "original_code": "static EnvironmentPostProcessorsFactory of(String... classNames) {\n\t\treturn of(null, classNames);\n\t}", "doc_comment": "/**\n\t * Return a {@link EnvironmentPostProcessorsFactory} that reflectively creates post\n\t * processors from the given class names.\n\t * @param classNames the post processor class names\n\t * @return an {@link EnvironmentPostProcessorsFactory} instance\n\t */"}, "code_tokens": ["EnvironmentPostProcessorsFactory", "of", "static", "(", ")", "{", "}", "String", "...", "return", ";", "classNames", "of", "(", "null", ",", "classNames", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 14, "n_whitespaces": 11, "n_words": 9, "nloc": 3, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/env/EnvironmentPostProcessorsFactory.java#85-87", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/EnvironmentPostProcessorsFactory.java", "language": "Java"}, "method": {"name": "of", "qualified_name": "org.springframework.boot.env.EnvironmentPostProcessorsFactory#of", "start_line": 85, "end_line": 87, "signature": "of(@Nullable ClassLoader classLoader, String... classNames)", "original_code": "static EnvironmentPostProcessorsFactory of(@Nullable ClassLoader classLoader, String... classNames) {\n\t\treturn new ReflectionEnvironmentPostProcessorsFactory(classLoader, classNames);\n\t}", "doc_comment": "/**\n\t * Return a {@link EnvironmentPostProcessorsFactory} that reflectively creates post\n\t * processors from the given class names.\n\t * @param classLoader the source class loader\n\t * @param classNames the post processor class names\n\t * @return an {@link EnvironmentPostProcessorsFactory} instance\n\t * @since 2.4.8\n\t */"}, "code_tokens": ["EnvironmentPostProcessorsFactory", "of", "static", "(", ",", ")", "{", "}", "ClassLoader", "classLoader", "String", "...", "return", ";", "classNames", "new", "ReflectionEnvironmentPostProcessorsFactory", "@", "Nullable", "(", "classLoader", ",", "classNames", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 37, "ast_depth": 7, "n_identifiers": 4, "vocab_size": 19, "n_whitespaces": 15, "n_words": 13, "nloc": 3, "token_counts": 24}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/env/ReflectionEnvironmentPostProcessorsFactory.java#62-78", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/ReflectionEnvironmentPostProcessorsFactory.java", "language": "Java"}, "method": {"name": "getEnvironmentPostProcessors", "qualified_name": "org.springframework.boot.env.ReflectionEnvironmentPostProcessorsFactory#getEnvironmentPostProcessors", "start_line": 62, "end_line": 78, "signature": "getEnvironmentPostProcessors(DeferredLogFactory logFactory,\n\t\t\tConfigurableBootstrapContext bootstrapContext)", "original_code": "@Override\n\tpublic List<EnvironmentPostProcessor> getEnvironmentPostProcessors(DeferredLogFactory logFactory,\n\t\t\tConfigurableBootstrapContext bootstrapContext) {\n\t\tInstantiator<EnvironmentPostProcessor> instantiator = new Instantiator<>(EnvironmentPostProcessor.class,\n\t\t\t\t(parameters) -> {\n\t\t\t\t\tparameters.add(DeferredLogFactory.class, logFactory);\n\t\t\t\t\tparameters.add(Log.class, logFactory::getLog);\n\t\t\t\t\tparameters.add(ConfigurableBootstrapContext.class, bootstrapContext);\n\t\t\t\t\tparameters.add(BootstrapContext.class, bootstrapContext);\n\t\t\t\t\tparameters.add(BootstrapRegistry.class, bootstrapContext);\n\t\t\t\t});\n\t\tif (this.classes != null) {\n\t\t\treturn instantiator.instantiateTypes(this.classes);\n\t\t}\n\t\tAssert.state(this.classNames != null, \"'classNames' must not be null\");\n\t\treturn instantiator.instantiate(this.classLoader, this.classNames);\n\t}", "doc_comment": ""}, "code_tokens": ["getEnvironmentPostProcessors", "public", "List", "(", ",", ")", "{", "}", "@", "Override", "<", "EnvironmentPostProcessor", ">", "DeferredLogFactory", "logFactory", "ConfigurableBootstrapContext", "bootstrapContext", ";", "if", ";", "return", ";", "Instantiator", "instantiator", "=", "(", ")", "{", "}", "Assert", ".", "state", "instantiator", ".", "instantiate", "<", "EnvironmentPostProcessor", ">", "new", "!=", "null", "return", ";", "(", ",", ")", "(", ",", ")", "Instantiator", "(", ",", ")", "this", ".", "classes", "instantiator", ".", "instantiateTypes", "!=", "null", "\"", "'classNames' must not be null", "\"", "this", ".", "classLoader", "this", ".", "classNames", "<", ">", "EnvironmentPostProcessor", ".", "class", "->", "(", ")", "this", ".", "classNames", "(", "parameters", ")", "{", "}", "this", ".", "classes", ";", ";", ";", ";", ";", "parameters", ".", "add", "parameters", ".", "add", "parameters", ".", "add", "parameters", ".", "add", "parameters", ".", "add", "(", ",", "logFactory", ")", "(", ",", ")", "(", ",", "bootstrapContext", ")", "(", ",", "bootstrapContext", ")", "(", ",", "bootstrapContext", ")", "DeferredLogFactory", ".", "class", "Log", ".", "class", "logFactory", "::", "getLog", "ConfigurableBootstrapContext", ".", "class", "BootstrapContext", ".", "class", "BootstrapRegistry", ".", "class"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 209, "ast_depth": 14, "n_identifiers": 15, "vocab_size": 46, "n_whitespaces": 97, "n_words": 69, "nloc": 17, "token_counts": 146}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/main/java/org/springframework/boot/env/SpringFactoriesEnvironmentPostProcessorsFactory.java#41-49", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/SpringFactoriesEnvironmentPostProcessorsFactory.java", "language": "Java"}, "method": {"name": "getEnvironmentPostProcessors", "qualified_name": "org.springframework.boot.env.SpringFactoriesEnvironmentPostProcessorsFactory#getEnvironmentPostProcessors", "start_line": 41, "end_line": 49, "signature": "getEnvironmentPostProcessors(DeferredLogFactory logFactory,\n\t\t\tConfigurableBootstrapContext bootstrapContext)", "original_code": "@Override\n\tpublic List<EnvironmentPostProcessor> getEnvironmentPostProcessors(DeferredLogFactory logFactory,\n\t\t\tConfigurableBootstrapContext bootstrapContext) {\n\t\tArgumentResolver argumentResolver = ArgumentResolver.of(DeferredLogFactory.class, logFactory);\n\t\targumentResolver = argumentResolver.and(ConfigurableBootstrapContext.class, bootstrapContext);\n\t\targumentResolver = argumentResolver.and(BootstrapContext.class, bootstrapContext);\n\t\targumentResolver = argumentResolver.and(BootstrapRegistry.class, bootstrapContext);\n\t\treturn this.loader.load(EnvironmentPostProcessor.class, argumentResolver);\n\t}", "doc_comment": ""}, "code_tokens": ["getEnvironmentPostProcessors", "public", "List", "(", ",", ")", "{", "}", "@", "Override", "<", "EnvironmentPostProcessor", ">", "DeferredLogFactory", "logFactory", "ConfigurableBootstrapContext", "bootstrapContext", "ArgumentResolver", ";", ";", ";", ";", "return", ";", "argumentResolver", "=", "argumentResolver", "=", "argumentResolver", "=", "argumentResolver", "=", ".", "load", "ArgumentResolver", ".", "of", "argumentResolver", ".", "and", "argumentResolver", ".", "and", "argumentResolver", ".", "and", "this", ".", "loader", "(", ",", "argumentResolver", ")", "(", ",", "logFactory", ")", "(", ",", "bootstrapContext", ")", "(", ",", "bootstrapContext", ")", "(", ",", "bootstrapContext", ")", "EnvironmentPostProcessor", ".", "class", "DeferredLogFactory", ".", "class", "ConfigurableBootstrapContext", ".", "class", "BootstrapContext", ".", "class", "BootstrapRegistry", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 119, "ast_depth": 9, "n_identifiers": 10, "vocab_size": 31, "n_whitespaces": 43, "n_words": 41, "nloc": 9, "token_counts": 84}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#171-176", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "getEnvironment", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#getEnvironment", "start_line": 171, "end_line": 176, "signature": "getEnvironment()", "original_code": "private Environment getEnvironment() {\n\t\tif (this.context != null) {\n\t\t\treturn this.context.getEnvironment();\n\t\t}\n\t\tthrow new IllegalStateException(\"Could not obtain Environment\");\n\t}", "doc_comment": ""}, "code_tokens": ["Environment", "getEnvironment", "private", "(", ")", "{", "}", "if", "throw", ";", "(", ")", "{", "}", "new", "IllegalStateException", "!=", "null", "return", ";", "(", ")", "this", ".", "context", ".", "getEnvironment", "\"", "Could not obtain Environment", "\"", "this", ".", "context", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 53, "ast_depth": 9, "n_identifiers": 2, "vocab_size": 20, "n_whitespaces": 28, "n_words": 18, "nloc": 6, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#178-182", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "storeAndClearHeadlessProperty", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#storeAndClearHeadlessProperty", "start_line": 178, "end_line": 182, "signature": "storeAndClearHeadlessProperty()", "original_code": "@BeforeEach\n\tvoid storeAndClearHeadlessProperty() {\n\t\tthis.headlessProperty = System.getProperty(\"java.awt.headless\");\n\t\tSystem.clearProperty(\"java.awt.headless\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "storeAndClearHeadlessProperty", "(", ")", "{", "}", "@", "BeforeEach", ";", ";", "=", "System", ".", "clearProperty", "this", ".", "headlessProperty", "System", ".", "getProperty", "(", ")", "(", ")", "\"", "java.awt.headless", "\"", "\"", "java.awt.headless", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 46, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 18, "n_whitespaces": 14, "n_words": 15, "nloc": 5, "token_counts": 30}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#184-192", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "reinstateHeadlessProperty", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#reinstateHeadlessProperty", "start_line": 184, "end_line": 192, "signature": "reinstateHeadlessProperty()", "original_code": "@AfterEach\n\tvoid reinstateHeadlessProperty() {\n\t\tif (this.headlessProperty == null) {\n\t\t\tSystem.clearProperty(\"java.awt.headless\");\n\t\t}\n\t\telse {\n\t\t\tSystem.setProperty(\"java.awt.headless\", this.headlessProperty);\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "reinstateHeadlessProperty", "(", ")", "{", "}", "@", "AfterEach", "if", "else", "(", ")", "{", "}", "{", "}", "==", "null", ";", ";", "this", ".", "headlessProperty", "System", ".", "clearProperty", "System", ".", "setProperty", "(", ")", "(", ",", ")", "\"", "java.awt.headless", "\"", "\"", "java.awt.headless", "\"", "this", ".", "headlessProperty"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 64, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 22, "n_whitespaces": 32, "n_words": 20, "nloc": 9, "token_counts": 43}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#194-201", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "cleanUp", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#cleanUp", "start_line": 194, "end_line": 201, "signature": "cleanUp()", "original_code": "@AfterEach\n\tvoid cleanUp() {\n\t\tif (this.context != null) {\n\t\t\tthis.context.close();\n\t\t}\n\t\tSystem.clearProperty(\"spring.main.banner-mode\");\n\t\tSpringApplicationShutdownHookInstance.reset();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "cleanUp", "(", ")", "{", "}", "@", "AfterEach", "if", ";", ";", "(", ")", "{", "}", "System", ".", "clearProperty", "SpringApplicationShutdownHookInstance", ".", "reset", "!=", "null", ";", "(", ")", "(", ")", "this", ".", "context", ".", "close", "\"", "spring.main.banner-mode", "\"", "this", ".", "context", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 63, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 22, "n_whitespaces": 26, "n_words": 18, "nloc": 8, "token_counts": 41}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#203-207", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "sourcesMustNotBeNull", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#sourcesMustNotBeNull", "start_line": 203, "end_line": 207, "signature": "sourcesMustNotBeNull()", "original_code": "@Test\n\tvoid sourcesMustNotBeNull() {\n\t\tassertThatIllegalArgumentException().isThrownBy(() -> new SpringApplication((Class<?>[]) null).run())\n\t\t\t.withMessageContaining(\"'primarySources' must not be null\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "sourcesMustNotBeNull", "(", ")", "{", "}", "@", "Test", ";", ".", "withMessageContaining", ".", "isThrownBy", "(", ")", "assertThatIllegalArgumentException", "(", ")", "\"", "'primarySources' must not be null", "\"", "(", ")", "->", "(", ")", ".", "run", "new", "SpringApplication", "(", ")", "(", ")", "(", ")", "null", "Class", "[", "]", "<", ">", "?"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 69, "ast_depth": 17, "n_identifiers": 6, "vocab_size": 26, "n_whitespaces": 21, "n_words": 16, "nloc": 5, "token_counts": 43}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#209-213", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "sourcesMustNotBeEmpty", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#sourcesMustNotBeEmpty", "start_line": 209, "end_line": 213, "signature": "sourcesMustNotBeEmpty()", "original_code": "@Test\n\tvoid sourcesMustNotBeEmpty() {\n\t\tassertThatIllegalStateException().isThrownBy(() -> new SpringApplication().run())\n\t\t\t.withMessageContaining(\"No sources defined\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "sourcesMustNotBeEmpty", "(", ")", "{", "}", "@", "Test", ";", ".", "withMessageContaining", ".", "isThrownBy", "(", ")", "assertThatIllegalStateException", "(", ")", "\"", "No sources defined", "\"", "(", ")", "->", "(", ")", ".", "run", "new", "SpringApplication", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 54, "ast_depth": 12, "n_identifiers": 6, "vocab_size": 19, "n_whitespaces": 18, "n_words": 12, "nloc": 5, "token_counts": 34}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#215-222", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "sourcesMustBeAccessible", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#sourcesMustBeAccessible", "start_line": 215, "end_line": 222, "signature": "sourcesMustBeAccessible()", "original_code": "@Test\n\tvoid sourcesMustBeAccessible() {\n\t\tassertThatExceptionOfType(BeanDefinitionStoreException.class)\n\t\t\t.isThrownBy(() -> new SpringApplication(InaccessibleConfiguration.class).run())\n\t\t\t.havingRootCause()\n\t\t\t.isInstanceOf(IllegalArgumentException.class)\n\t\t\t.withMessageContaining(\"No visible constructors\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "sourcesMustBeAccessible", "(", ")", "{", "}", "@", "Test", ";", ".", "withMessageContaining", ".", "isInstanceOf", "(", ")", ".", "havingRootCause", "(", ")", "\"", "No visible constructors", "\"", ".", "isThrownBy", "(", ")", "IllegalArgumentException", ".", "class", "assertThatExceptionOfType", "(", ")", "(", ")", "->", "BeanDefinitionStoreException", ".", "class", "(", ")", ".", "run", "new", "SpringApplication", "(", ")", "(", ")", "InaccessibleConfiguration", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 78, "ast_depth": 15, "n_identifiers": 8, "vocab_size": 25, "n_whitespaces": 30, "n_words": 20, "nloc": 8, "token_counts": 51}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#224-232", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "customBanner", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#customBanner", "start_line": 224, "end_line": 232, "signature": "customBanner(CapturedOutput output)", "original_code": "@Test\n\t@WithResource(name = \"banner.txt\", content = \"Running a Test!\")\n\tvoid customBanner(CapturedOutput output) {\n\t\tSpringApplication application = spy(new SpringApplication(ExampleConfig.class));\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tthis.context = application.run();\n\t\tassertThat(output).startsWith(\"Running a Test!\");\n\n\t}", "doc_comment": ""}, "code_tokens": ["void", "customBanner", "(", ")", "{", "}", "@", "Test", "@", "WithResource", "CapturedOutput", "output", "SpringApplication", ";", ";", ";", ";", "(", ",", ")", "application", "=", "application", ".", "setWebApplicationType", "=", ".", "startsWith", "name", "=", "content", "=", "spy", "(", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "\"", "banner.txt", "\"", "\"", "Running a Test!", "\"", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", "output", ")", "\"", "Running a Test!", "\"", "new", "SpringApplication", "(", ")", "ExampleConfig", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 105, "ast_depth": 11, "n_identifiers": 15, "vocab_size": 34, "n_whitespaces": 37, "n_words": 34, "nloc": 8, "token_counts": 70}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#234-244", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "customBannerWithProperties", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#customBannerWithProperties", "start_line": 234, "end_line": 244, "signature": "customBannerWithProperties(CapturedOutput output)", "original_code": "@Test\n\t@WithResource(name = \"banner.txt\", content = \"\"\"\n\t\t\tRunning a Test!\n\n\t\t\t${test.property}\"\"\")\n\tvoid customBannerWithProperties(CapturedOutput output) {\n\t\tSpringApplication application = spy(new SpringApplication(ExampleConfig.class));\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tthis.context = application.run(\"--test.property=123456\");\n\t\tassertThat(output).containsPattern(\"Running a Test!\\\\s+123456\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "customBannerWithProperties", "(", ")", "{", "}", "@", "Test", "@", "WithResource", "CapturedOutput", "output", "SpringApplication", ";", ";", ";", ";", "(", ",", ")", "application", "=", "application", ".", "setWebApplicationType", "=", ".", "containsPattern", "name", "=", "content", "=", "spy", "(", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "\"", "banner.txt", "\"", "\"\"\"", "\n\t\t\tRunning a Test!\n\n\t\t\t${test.property}", "\"\"\"", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", "output", ")", "\"", "Running a Test!", "\\\\", "s+123456", "\"", "new", "SpringApplication", "\"", "--test.property=123456", "\"", "(", ")", "ExampleConfig", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 111, "ast_depth": 11, "n_identifiers": 15, "vocab_size": 39, "n_whitespaces": 45, "n_words": 41, "nloc": 10, "token_counts": 75}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#246-252", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "logsActiveProfilesWithoutProfileAndSingleDefault", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#logsActiveProfilesWithoutProfileAndSingleDefault", "start_line": 246, "end_line": 252, "signature": "logsActiveProfilesWithoutProfileAndSingleDefault(CapturedOutput output)", "original_code": "@Test\n\tvoid logsActiveProfilesWithoutProfileAndSingleDefault(CapturedOutput output) {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tthis.context = application.run();\n\t\tassertThat(output).contains(\"No active profile set, falling back to 1 default profile: \\\"default\\\"\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "logsActiveProfilesWithoutProfileAndSingleDefault", "(", ")", "{", "}", "@", "Test", "CapturedOutput", "output", "SpringApplication", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "=", ".", "contains", "new", "SpringApplication", "(", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", "output", ")", "\"", "No active profile set, falling back to 1 default profile: ", "\\\"", "default", "\\\"", "\"", "ExampleConfig", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 82, "ast_depth": 9, "n_identifiers": 11, "vocab_size": 30, "n_whitespaces": 35, "n_words": 33, "nloc": 7, "token_counts": 55}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#254-263", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "logsActiveProfilesWithoutProfileAndMultipleDefaults", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#logsActiveProfilesWithoutProfileAndMultipleDefaults", "start_line": 254, "end_line": 263, "signature": "logsActiveProfilesWithoutProfileAndMultipleDefaults(CapturedOutput output)", "original_code": "@Test\n\tvoid logsActiveProfilesWithoutProfileAndMultipleDefaults(CapturedOutput output) {\n\t\tMockEnvironment environment = new MockEnvironment();\n\t\tenvironment.setDefaultProfiles(\"p0\", \"default\");\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tapplication.setEnvironment(environment);\n\t\tthis.context = application.run();\n\t\tassertThat(output).contains(\"No active profile set, falling back to 2 default profiles: \\\"p0\\\", \\\"default\\\"\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "logsActiveProfilesWithoutProfileAndMultipleDefaults", "(", ")", "{", "}", "@", "Test", "CapturedOutput", "output", "MockEnvironment", ";", ";", "SpringApplication", ";", ";", ";", ";", ";", "environment", "=", "environment", ".", "setDefaultProfiles", "application", "=", "application", ".", "setWebApplicationType", "application", ".", "setEnvironment", "=", ".", "contains", "new", "MockEnvironment", "(", ",", ")", "new", "SpringApplication", "(", ")", "(", "environment", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "(", ")", "\"", "p0", "\"", "\"", "default", "\"", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", "output", ")", "\"", "No active profile set, falling back to 2 default profiles: ", "\\\"", "p0", "\\\"", ", ", "\\\"", "default", "\\\"", "\"", "ExampleConfig", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 126, "ast_depth": 9, "n_identifiers": 14, "vocab_size": 37, "n_whitespaces": 50, "n_words": 45, "nloc": 10, "token_counts": 87}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#265-271", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "logsActiveProfilesWithSingleProfile", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#logsActiveProfilesWithSingleProfile", "start_line": 265, "end_line": 271, "signature": "logsActiveProfilesWithSingleProfile(CapturedOutput output)", "original_code": "@Test\n\tvoid logsActiveProfilesWithSingleProfile(CapturedOutput output) {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tthis.context = application.run(\"--spring.profiles.active=myprofiles\");\n\t\tassertThat(output).contains(\"The following 1 profile is active: \\\"myprofiles\\\"\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "logsActiveProfilesWithSingleProfile", "(", ")", "{", "}", "@", "Test", "CapturedOutput", "output", "SpringApplication", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "=", ".", "contains", "new", "SpringApplication", "(", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", "output", ")", "\"", "The following 1 profile is active: ", "\\\"", "myprofiles", "\\\"", "\"", "ExampleConfig", ".", "class", "\"", "--spring.profiles.active=myprofiles", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 86, "ast_depth": 9, "n_identifiers": 11, "vocab_size": 31, "n_whitespaces": 31, "n_words": 33, "nloc": 7, "token_counts": 58}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#273-280", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "logsActiveProfilesWithMultipleProfiles", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#logsActiveProfilesWithMultipleProfiles", "start_line": 273, "end_line": 280, "signature": "logsActiveProfilesWithMultipleProfiles(CapturedOutput output)", "original_code": "@Test\n\tvoid logsActiveProfilesWithMultipleProfiles(CapturedOutput output) {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tapplication.setAdditionalProfiles(\"p1\", \"p2\");\n\t\tapplication.run();\n\t\tassertThat(output).contains(\"The following 2 profiles are active: \\\"p1\\\", \\\"p2\\\"\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "logsActiveProfilesWithMultipleProfiles", "(", ")", "{", "}", "@", "Test", "CapturedOutput", "output", "SpringApplication", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "application", ".", "setAdditionalProfiles", "application", ".", "run", ".", "contains", "new", "SpringApplication", "(", ")", "(", ",", ")", "(", ")", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "\"", "p1", "\"", "\"", "p2", "\"", "(", "output", ")", "\"", "The following 2 profiles are active: ", "\\\"", "p1", "\\\"", ", ", "\\\"", "p2", "\\\"", "\"", "ExampleConfig", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 98, "ast_depth": 9, "n_identifiers": 11, "vocab_size": 32, "n_whitespaces": 34, "n_words": 32, "nloc": 8, "token_counts": 68}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#282-289", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "enableBannerInLogViaProperty", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#enableBannerInLogViaProperty", "start_line": 282, "end_line": 289, "signature": "enableBannerInLogViaProperty(CapturedOutput output)", "original_code": "@Test\n\tvoid enableBannerInLogViaProperty(CapturedOutput output) {\n\t\tSpringApplication application = spy(new SpringApplication(ExampleConfig.class));\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tthis.context = application.run(\"--spring.main.banner-mode=log\");\n\t\tassertThatBannerModeIs(application, Banner.Mode.LOG);\n\t\tassertThat(output).contains(\"o.s.b.SpringApplication\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "enableBannerInLogViaProperty", "(", ")", "{", "}", "@", "Test", "CapturedOutput", "output", "SpringApplication", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "=", "assertThatBannerModeIs", ".", "contains", "spy", "(", ")", "this", ".", "context", "application", ".", "run", "(", "application", ",", ")", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", ".", "LOG", "(", "output", ")", "\"", "o.s.b.SpringApplication", "\"", "new", "SpringApplication", "\"", "--spring.main.banner-mode=log", "\"", "Banner", ".", "Mode", "(", ")", "ExampleConfig", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 104, "ast_depth": 11, "n_identifiers": 16, "vocab_size": 35, "n_whitespaces": 29, "n_words": 37, "nloc": 8, "token_counts": 69}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#291-298", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "triggersConfigFileApplicationListenerBeforeBinding", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#triggersConfigFileApplicationListenerBeforeBinding", "start_line": 291, "end_line": 298, "signature": "triggersConfigFileApplicationListenerBeforeBinding()", "original_code": "@Test\n\t@WithResource(name = \"bindtoapplication.properties\", content = \"spring.main.banner-mode=off\")\n\tvoid triggersConfigFileApplicationListenerBeforeBinding() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tthis.context = application.run(\"--spring.config.name=bindtoapplication\");\n\t\tassertThatBannerModeIs(application, Mode.OFF);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "triggersConfigFileApplicationListenerBeforeBinding", "(", ")", "{", "}", "@", "Test", "@", "WithResource", "SpringApplication", ";", ";", ";", ";", "(", ",", ")", "application", "=", "application", ".", "setWebApplicationType", "=", "assertThatBannerModeIs", "name", "=", "content", "=", "new", "SpringApplication", "(", ")", "this", ".", "context", "application", ".", "run", "(", "application", ",", ")", "\"", "bindtoapplication.properties", "\"", "\"", "spring.main.banner-mode=off", "\"", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "Mode", ".", "OFF", "ExampleConfig", ".", "class", "\"", "--spring.config.name=bindtoapplication", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 96, "ast_depth": 9, "n_identifiers": 14, "vocab_size": 33, "n_whitespaces": 32, "n_words": 35, "nloc": 8, "token_counts": 65}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#300-307", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "bindsSystemPropertyToSpringApplication", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#bindsSystemPropertyToSpringApplication", "start_line": 300, "end_line": 307, "signature": "bindsSystemPropertyToSpringApplication()", "original_code": "@Test\n\tvoid bindsSystemPropertyToSpringApplication() {\n\t\tSystem.setProperty(\"spring.main.banner-mode\", \"off\");\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tthis.context = application.run();\n\t\tassertThatBannerModeIs(application, Mode.OFF);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "bindsSystemPropertyToSpringApplication", "(", ")", "{", "}", "@", "Test", ";", "SpringApplication", ";", ";", ";", ";", "System", ".", "setProperty", "application", "=", "application", ".", "setWebApplicationType", "=", "assertThatBannerModeIs", "(", ",", ")", "new", "SpringApplication", "(", ")", "this", ".", "context", "application", ".", "run", "(", "application", ",", ")", "\"", "spring.main.banner-mode", "\"", "\"", "off", "\"", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "Mode", ".", "OFF", "ExampleConfig", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 89, "ast_depth": 9, "n_identifiers": 13, "vocab_size": 31, "n_whitespaces": 29, "n_words": 28, "nloc": 8, "token_counts": 60}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#309-316", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "bindsYamlStyleBannerModeToSpringApplication", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#bindsYamlStyleBannerModeToSpringApplication", "start_line": 309, "end_line": 316, "signature": "bindsYamlStyleBannerModeToSpringApplication()", "original_code": "@Test\n\tvoid bindsYamlStyleBannerModeToSpringApplication() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setDefaultProperties(Collections.singletonMap(\"spring.main.banner-mode\", false));\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tthis.context = application.run();\n\t\tassertThatBannerModeIs(application, Mode.OFF);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "bindsYamlStyleBannerModeToSpringApplication", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setDefaultProperties", "application", ".", "setWebApplicationType", "=", "assertThatBannerModeIs", "new", "SpringApplication", "(", ")", "(", ")", "this", ".", "context", "application", ".", "run", "(", "application", ",", ")", "(", ")", "Collections", ".", "singletonMap", "WebApplicationType", ".", "NONE", "(", ")", "Mode", ".", "OFF", "ExampleConfig", ".", "class", "(", ",", "false", ")", "\"", "spring.main.banner-mode", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 93, "ast_depth": 10, "n_identifiers": 14, "vocab_size": 32, "n_whitespaces": 29, "n_words": 30, "nloc": 8, "token_counts": 63}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#318-324", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "bindsBooleanAsStringBannerModeToSpringApplication", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#bindsBooleanAsStringBannerModeToSpringApplication", "start_line": 318, "end_line": 324, "signature": "bindsBooleanAsStringBannerModeToSpringApplication()", "original_code": "@Test\n\tvoid bindsBooleanAsStringBannerModeToSpringApplication() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tthis.context = application.run(\"--spring.main.banner-mode=false\");\n\t\tassertThatBannerModeIs(application, Mode.OFF);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "bindsBooleanAsStringBannerModeToSpringApplication", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "=", "assertThatBannerModeIs", "new", "SpringApplication", "(", ")", "this", ".", "context", "application", ".", "run", "(", "application", ",", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "Mode", ".", "OFF", "ExampleConfig", ".", "class", "\"", "--spring.main.banner-mode=false", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 75, "ast_depth": 9, "n_identifiers": 11, "vocab_size": 28, "n_whitespaces": 25, "n_words": 26, "nloc": 7, "token_counts": 50}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#326-332", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "customId", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#customId", "start_line": 326, "end_line": 332, "signature": "customId()", "original_code": "@Test\n\tvoid customId() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tthis.context = application.run(\"--spring.application.name=foo\");\n\t\tassertThat(this.context.getId()).startsWith(\"foo\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "customId", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "=", ".", "startsWith", "new", "SpringApplication", "(", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "\"", "foo", "\"", "ExampleConfig", ".", "class", "\"", "--spring.application.name=foo", "\"", ".", "getId", "this", ".", "context", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 89, "ast_depth": 10, "n_identifiers": 11, "vocab_size": 28, "n_whitespaces": 24, "n_words": 27, "nloc": 7, "token_counts": 59}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#334-341", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "specificApplicationContextFactory", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#specificApplicationContextFactory", "start_line": 334, "end_line": 341, "signature": "specificApplicationContextFactory()", "original_code": "@Test\n\tvoid specificApplicationContextFactory() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication\n\t\t\t.setApplicationContextFactory(ApplicationContextFactory.ofContextClass(StaticApplicationContext.class));\n\t\tthis.context = application.run();\n\t\tassertThat(this.context).isInstanceOf(StaticApplicationContext.class);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "specificApplicationContextFactory", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", "application", "=", "application", ".", "setApplicationContextFactory", "=", ".", "isInstanceOf", "new", "SpringApplication", "(", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "(", ")", "ApplicationContextFactory", ".", "ofContextClass", "(", ")", "(", ")", "StaticApplicationContext", ".", "class", "ExampleConfig", ".", "class", "(", ")", "this", ".", "context", "StaticApplicationContext", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 86, "ast_depth": 10, "n_identifiers": 10, "vocab_size": 25, "n_whitespaces": 28, "n_words": 25, "nloc": 8, "token_counts": 57}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#343-354", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "specificApplicationContextInitializer", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#specificApplicationContextInitializer", "start_line": 343, "end_line": 354, "signature": "specificApplicationContextInitializer()", "original_code": "@Test\n\tvoid specificApplicationContextInitializer() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tfinal AtomicReference<ApplicationContext> reference = new AtomicReference<>();\n\t\tapplication.setInitializers(Collections\n\t\t\t.singletonList((ApplicationContextInitializer<ConfigurableApplicationContext>) reference::set));\n\t\tthis.context = application.run(\"--foo=bar\");\n\t\tassertThat(this.context).isSameAs(reference.get());\n\t\t// Custom initializers do not switch off the defaults\n\t\tassertThat(getEnvironment().getProperty(\"foo\")).isEqualTo(\"bar\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "specificApplicationContextInitializer", "(", ")", "{", "// Custom initializers do not switch off the defaults", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "final", "AtomicReference", "reference", "=", "application", ".", "setInitializers", "=", ".", "isSameAs", ".", "isEqualTo", "new", "SpringApplication", "(", ")", "<", "ApplicationContext", ">", "new", "(", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "AtomicReference", "(", ")", "Collections", ".", "singletonList", "(", ")", "(", ")", "reference", ".", "get", "(", ")", "\"", "bar", "\"", "ExampleConfig", ".", "class", "<", ">", "(", ")", "\"", "--foo=bar", "\"", "this", ".", "context", "(", ")", ".", "getProperty", "(", ")", "getEnvironment", "(", ")", "ApplicationContextInitializer", "reference", "::", "set", "(", ")", "\"", "foo", "\"", "<", "ConfigurableApplicationContext", ">"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 171, "ast_depth": 12, "n_identifiers": 19, "vocab_size": 46, "n_whitespaces": 54, "n_words": 53, "nloc": 12, "token_counts": 113}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#356-363", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "applicationRunningEventListener", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#applicationRunningEventListener", "start_line": 356, "end_line": 363, "signature": "applicationRunningEventListener()", "original_code": "@Test\n\tvoid applicationRunningEventListener() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tAtomicReference<ApplicationReadyEvent> reference = addListener(application, ApplicationReadyEvent.class);\n\t\tthis.context = application.run(\"--foo=bar\");\n\t\tassertThat(application).isSameAs(reference.get().getSpringApplication());\n\t}", "doc_comment": ""}, "code_tokens": ["void", "applicationRunningEventListener", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "AtomicReference", "reference", "=", "=", ".", "isSameAs", "new", "SpringApplication", "(", ")", "<", "ApplicationReadyEvent", ">", "addListener", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", "application", ",", ")", "(", ")", "(", "application", ")", ".", "getSpringApplication", "ExampleConfig", ".", "class", "ApplicationReadyEvent", ".", "class", "\"", "--foo=bar", "\"", "reference", ".", "get", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 111, "ast_depth": 10, "n_identifiers": 14, "vocab_size": 35, "n_whitespaces": 31, "n_words": 32, "nloc": 8, "token_counts": 74}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#365-374", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "contextRefreshedEventListener", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#contextRefreshedEventListener", "start_line": 365, "end_line": 374, "signature": "contextRefreshedEventListener()", "original_code": "@Test\n\tvoid contextRefreshedEventListener() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tAtomicReference<ContextRefreshedEvent> reference = addListener(application, ContextRefreshedEvent.class);\n\t\tthis.context = application.run(\"--foo=bar\");\n\t\tassertThat(this.context).isSameAs(reference.get().getApplicationContext());\n\t\t// Custom initializers do not switch off the defaults\n\t\tassertThat(getEnvironment().getProperty(\"foo\")).isEqualTo(\"bar\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "contextRefreshedEventListener", "(", ")", "{", "// Custom initializers do not switch off the defaults", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "AtomicReference", "reference", "=", "=", ".", "isSameAs", ".", "isEqualTo", "new", "SpringApplication", "(", ")", "<", "ContextRefreshedEvent", ">", "addListener", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", "application", ",", ")", "(", ")", "(", ")", ".", "getApplicationContext", "(", ")", "\"", "bar", "\"", "ExampleConfig", ".", "class", "ContextRefreshedEvent", ".", "class", "\"", "--foo=bar", "\"", "this", ".", "context", "reference", ".", "get", "(", ")", ".", "getProperty", "(", ")", "getEnvironment", "(", ")", "(", ")", "\"", "foo", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 147, "ast_depth": 11, "n_identifiers": 17, "vocab_size": 41, "n_whitespaces": 45, "n_words": 47, "nloc": 10, "token_counts": 98}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#376-397", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "eventsArePublishedInExpectedOrder", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#eventsArePublishedInExpectedOrder", "start_line": 376, "end_line": 397, "signature": "eventsArePublishedInExpectedOrder()", "original_code": "@Test\n\t@SuppressWarnings(\"unchecked\")\n\tvoid eventsArePublishedInExpectedOrder() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tApplicationListener<ApplicationEvent> listener = mock(ApplicationListener.class);\n\t\tapplication.addListeners(listener);\n\t\tthis.context = application.run();\n\t\tInOrder inOrder = Mockito.inOrder(listener);\n\t\tthen(listener).should(inOrder).onApplicationEvent(isA(ApplicationStartingEvent.class));\n\t\tthen(listener).should(inOrder).onApplicationEvent(isA(ApplicationEnvironmentPreparedEvent.class));\n\t\tthen(listener).should(inOrder).onApplicationEvent(isA(ApplicationContextInitializedEvent.class));\n\t\tthen(listener).should(inOrder).onApplicationEvent(isA(ApplicationPreparedEvent.class));\n\t\tthen(listener).should(inOrder).onApplicationEvent(isA(ContextRefreshedEvent.class));\n\t\tthen(listener).should(inOrder).onApplicationEvent(isA(ApplicationStartedEvent.class));\n\t\tthen(listener).should(inOrder)\n\t\t\t.onApplicationEvent(argThat(isAvailabilityChangeEventWithState(LivenessState.CORRECT)));\n\t\tthen(listener).should(inOrder).onApplicationEvent(isA(ApplicationReadyEvent.class));\n\t\tthen(listener).should(inOrder)\n\t\t\t.onApplicationEvent(argThat(isAvailabilityChangeEventWithState(ReadinessState.ACCEPTING_TRAFFIC)));\n\t\tinOrder.verifyNoMoreInteractions();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "eventsArePublishedInExpectedOrder", "(", ")", "{", "}", "@", "Test", "@", "SuppressWarnings", "SpringApplication", ";", ";", ";", ";", ";", "InOrder", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "(", ")", "application", "=", "application", ".", "setWebApplicationType", "ApplicationListener", "listener", "=", "application", ".", "addListeners", "=", "inOrder", "=", ".", "onApplicationEvent", ".", "onApplicationEvent", ".", "onApplicationEvent", ".", "onApplicationEvent", ".", "onApplicationEvent", ".", "onApplicationEvent", ".", "onApplicationEvent", ".", "onApplicationEvent", ".", "onApplicationEvent", "inOrder", ".", "verifyNoMoreInteractions", "\"", "unchecked", "\"", "new", "SpringApplication", "(", ")", "<", "ApplicationEvent", ">", "mock", "(", "listener", ")", "this", ".", "context", "application", ".", "run", "Mockito", ".", "inOrder", ".", "should", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "(", "listener", ")", "then", "(", "inOrder", ")", "isA", "then", "(", "inOrder", ")", "isA", "then", "(", "inOrder", ")", "isA", "then", "(", "inOrder", ")", "isA", "then", "(", "inOrder", ")", "isA", "then", "(", "inOrder", ")", "isA", "then", "(", "inOrder", ")", "argThat", "then", "(", "inOrder", ")", "isA", "then", "(", "inOrder", ")", "argThat", "ExampleConfig", ".", "class", "ApplicationListener", ".", "class", "(", "listener", ")", "(", ")", "(", "listener", ")", "(", ")", "(", "listener", ")", "(", ")", "(", "listener", ")", "(", ")", "(", "listener", ")", "(", ")", "(", "listener", ")", "(", ")", "(", "listener", ")", "(", ")", "(", "listener", ")", "(", ")", "(", "listener", ")", "(", ")", "ApplicationStartingEvent", ".", "class", "ApplicationEnvironmentPreparedEvent", ".", "class", "ApplicationContextInitializedEvent", ".", "class", "ApplicationPreparedEvent", ".", "class", "ContextRefreshedEvent", ".", "class", "ApplicationStartedEvent", ".", "class", "isAvailabilityChangeEventWithState", "ApplicationReadyEvent", ".", "class", "isAvailabilityChangeEventWithState", "(", ")", "(", ")", "LivenessState", ".", "CORRECT", "ReadinessState", ".", "ACCEPTING_TRAFFIC"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 401, "ast_depth": 12, "n_identifiers": 25, "vocab_size": 53, "n_whitespaces": 76, "n_words": 109, "nloc": 22, "token_counts": 267}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#399-406", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "applicationStartedEventHasStartedTime", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#applicationStartedEventHasStartedTime", "start_line": 399, "end_line": 406, "signature": "applicationStartedEventHasStartedTime()", "original_code": "@Test\n\tvoid applicationStartedEventHasStartedTime() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tAtomicReference<ApplicationStartedEvent> reference = addListener(application, ApplicationStartedEvent.class);\n\t\tthis.context = application.run();\n\t\tassertThat(reference.get()).isNotNull().extracting(ApplicationStartedEvent::getTimeTaken).isNotNull();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "applicationStartedEventHasStartedTime", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "AtomicReference", "reference", "=", "=", ".", "isNotNull", "new", "SpringApplication", "(", ")", "<", "ApplicationStartedEvent", ">", "addListener", "this", ".", "context", "application", ".", "run", ".", "extracting", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", "application", ",", ")", "(", ")", ".", "isNotNull", "(", ")", "ExampleConfig", ".", "class", "ApplicationStartedEvent", ".", "class", "assertThat", "(", ")", "ApplicationStartedEvent", "::", "getTimeTaken", "(", ")", "reference", ".", "get", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 116, "ast_depth": 12, "n_identifiers": 16, "vocab_size": 35, "n_whitespaces": 31, "n_words": 32, "nloc": 8, "token_counts": 77}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#408-415", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "applicationReadyEventHasReadyTime", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#applicationReadyEventHasReadyTime", "start_line": 408, "end_line": 415, "signature": "applicationReadyEventHasReadyTime()", "original_code": "@Test\n\tvoid applicationReadyEventHasReadyTime() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tAtomicReference<ApplicationReadyEvent> reference = addListener(application, ApplicationReadyEvent.class);\n\t\tthis.context = application.run();\n\t\tassertThat(reference.get()).isNotNull().extracting(ApplicationReadyEvent::getTimeTaken).isNotNull();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "applicationReadyEventHasReadyTime", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "AtomicReference", "reference", "=", "=", ".", "isNotNull", "new", "SpringApplication", "(", ")", "<", "ApplicationReadyEvent", ">", "addListener", "this", ".", "context", "application", ".", "run", ".", "extracting", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", "application", ",", ")", "(", ")", ".", "isNotNull", "(", ")", "ExampleConfig", ".", "class", "ApplicationReadyEvent", ".", "class", "assertThat", "(", ")", "ApplicationReadyEvent", "::", "getTimeTaken", "(", ")", "reference", ".", "get", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 116, "ast_depth": 12, "n_identifiers": 16, "vocab_size": 35, "n_whitespaces": 31, "n_words": 32, "nloc": 8, "token_counts": 77}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#417-423", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "defaultApplicationContext", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#defaultApplicationContext", "start_line": 417, "end_line": 423, "signature": "defaultApplicationContext()", "original_code": "@Test\n\tvoid defaultApplicationContext() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tthis.context = application.run();\n\t\tassertThat(this.context).isInstanceOf(AnnotationConfigApplicationContext.class);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "defaultApplicationContext", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "=", ".", "isInstanceOf", "new", "SpringApplication", "(", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "AnnotationConfigApplicationContext", ".", "class", "ExampleConfig", ".", "class", "this", ".", "context"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 79, "ast_depth": 9, "n_identifiers": 10, "vocab_size": 25, "n_whitespaces": 24, "n_words": 23, "nloc": 7, "token_counts": 52}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#425-433", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "customEnvironment", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#customEnvironment", "start_line": 425, "end_line": 433, "signature": "customEnvironment()", "original_code": "@Test\n\tvoid customEnvironment() {\n\t\tTestSpringApplication application = new TestSpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tConfigurableEnvironment environment = new StandardEnvironment();\n\t\tapplication.setEnvironment(environment);\n\t\tthis.context = application.run();\n\t\tthen(application.getLoader()).should().setEnvironment(environment);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "customEnvironment", "(", ")", "{", "}", "@", "Test", "TestSpringApplication", ";", ";", "ConfigurableEnvironment", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "environment", "=", "application", ".", "setEnvironment", "=", ".", "setEnvironment", "new", "TestSpringApplication", "(", ")", "new", "StandardEnvironment", "(", "environment", ")", "this", ".", "context", "application", ".", "run", ".", "should", "(", "environment", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "then", "(", ")", "ExampleConfig", ".", "class", "(", ")", "application", ".", "getLoader", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 107, "ast_depth": 11, "n_identifiers": 13, "vocab_size": 29, "n_whitespaces": 34, "n_words": 30, "nloc": 9, "token_counts": 71}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#435-443", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "customResourceLoader", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#customResourceLoader", "start_line": 435, "end_line": 443, "signature": "customResourceLoader()", "original_code": "@Test\n\tvoid customResourceLoader() {\n\t\tTestSpringApplication application = new TestSpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tResourceLoader resourceLoader = new DefaultResourceLoader();\n\t\tapplication.setResourceLoader(resourceLoader);\n\t\tthis.context = application.run();\n\t\tthen(application.getLoader()).should().setResourceLoader(resourceLoader);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "customResourceLoader", "(", ")", "{", "}", "@", "Test", "TestSpringApplication", ";", ";", "ResourceLoader", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "resourceLoader", "=", "application", ".", "setResourceLoader", "=", ".", "setResourceLoader", "new", "TestSpringApplication", "(", ")", "new", "DefaultResourceLoader", "(", "resourceLoader", ")", "this", ".", "context", "application", ".", "run", ".", "should", "(", "resourceLoader", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "then", "(", ")", "ExampleConfig", ".", "class", "(", ")", "application", ".", "getLoader", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 107, "ast_depth": 11, "n_identifiers": 13, "vocab_size": 29, "n_whitespaces": 34, "n_words": 30, "nloc": 9, "token_counts": 71}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#445-451", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "customResourceLoaderFromConstructor", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#customResourceLoaderFromConstructor", "start_line": 445, "end_line": 451, "signature": "customResourceLoaderFromConstructor()", "original_code": "@Test\n\tvoid customResourceLoaderFromConstructor() {\n\t\tResourceLoader resourceLoader = new DefaultResourceLoader();\n\t\tTestSpringApplication application = new TestSpringApplication(resourceLoader, ExampleConfig.class);\n\t\tthis.context = application.run();\n\t\tthen(application.getLoader()).should().setResourceLoader(resourceLoader);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "customResourceLoaderFromConstructor", "(", ")", "{", "}", "@", "Test", "ResourceLoader", ";", "TestSpringApplication", ";", ";", ";", "resourceLoader", "=", "application", "=", "=", ".", "setResourceLoader", "new", "DefaultResourceLoader", "new", "TestSpringApplication", "this", ".", "context", "application", ".", "run", ".", "should", "(", "resourceLoader", ")", "(", ")", "(", "resourceLoader", ",", ")", "(", ")", "then", "(", ")", "ExampleConfig", ".", "class", "(", ")", "application", ".", "getLoader", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 86, "ast_depth": 11, "n_identifiers": 10, "vocab_size": 27, "n_whitespaces": 29, "n_words": 24, "nloc": 7, "token_counts": 57}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#453-462", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "customBeanNameGenerator", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#customBeanNameGenerator", "start_line": 453, "end_line": 462, "signature": "customBeanNameGenerator()", "original_code": "@Test\n\tvoid customBeanNameGenerator() {\n\t\tTestSpringApplication application = new TestSpringApplication(ExampleConfig.class);\n\t\tBeanNameGenerator beanNameGenerator = new DefaultBeanNameGenerator();\n\t\tapplication.setBeanNameGenerator(beanNameGenerator);\n\t\tthis.context = application.run();\n\t\tthen(application.getLoader()).should().setBeanNameGenerator(beanNameGenerator);\n\t\tObject actualGenerator = this.context.getBean(AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR);\n\t\tassertThat(actualGenerator).isSameAs(beanNameGenerator);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "customBeanNameGenerator", "(", ")", "{", "}", "@", "Test", "TestSpringApplication", ";", "BeanNameGenerator", ";", ";", ";", ";", "Object", ";", ";", "application", "=", "beanNameGenerator", "=", "application", ".", "setBeanNameGenerator", "=", ".", "setBeanNameGenerator", "actualGenerator", "=", ".", "isSameAs", "new", "TestSpringApplication", "new", "DefaultBeanNameGenerator", "(", "beanNameGenerator", ")", "this", ".", "context", "application", ".", "run", ".", "should", "(", "beanNameGenerator", ")", ".", "getBean", "assertThat", "(", "beanNameGenerator", ")", "(", ")", "(", ")", "(", ")", "then", "(", ")", "this", ".", "context", "(", ")", "(", "actualGenerator", ")", "ExampleConfig", ".", "class", "(", ")", "AnnotationConfigUtils", ".", "CONFIGURATION_BEAN_NAME_GENERATOR", "application", ".", "getLoader", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 129, "ast_depth": 11, "n_identifiers": 16, "vocab_size": 33, "n_whitespaces": 40, "n_words": 37, "nloc": 10, "token_counts": 86}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#464-472", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "commandLinePropertySource", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#commandLinePropertySource", "start_line": 464, "end_line": 472, "signature": "commandLinePropertySource()", "original_code": "@Test\n\tvoid commandLinePropertySource() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tConfigurableEnvironment environment = new StandardEnvironment();\n\t\tapplication.setEnvironment(environment);\n\t\tthis.context = application.run(\"--foo=bar\");\n\t\tassertThat(environment).has(matchingPropertySource(CommandLinePropertySource.class, \"commandLineArgs\"));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "commandLinePropertySource", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", "ConfigurableEnvironment", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "environment", "=", "application", ".", "setEnvironment", "=", ".", "has", "new", "SpringApplication", "(", ")", "new", "StandardEnvironment", "(", "environment", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "(", "environment", ")", "matchingPropertySource", "ExampleConfig", ".", "class", "\"", "--foo=bar", "\"", "(", ",", ")", "CommandLinePropertySource", ".", "class", "\"", "commandLineArgs", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 112, "ast_depth": 10, "n_identifiers": 13, "vocab_size": 34, "n_whitespaces": 35, "n_words": 33, "nloc": 9, "token_counts": 75}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#474-495", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "commandLinePropertySourceEnhancesEnvironment", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#commandLinePropertySourceEnhancesEnvironment", "start_line": 474, "end_line": 495, "signature": "commandLinePropertySourceEnhancesEnvironment()", "original_code": "@Test\n\tvoid commandLinePropertySourceEnhancesEnvironment() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tConfigurableEnvironment environment = new StandardEnvironment();\n\t\tenvironment.getPropertySources()\n\t\t\t.addFirst(new MapPropertySource(\"commandLineArgs\", Collections.singletonMap(\"foo\", \"original\")));\n\t\tapplication.setEnvironment(environment);\n\t\tthis.context = application.run(\"--foo=bar\", \"--bar=foo\");\n\t\tassertThat(environment).has(matchingPropertySource(CompositePropertySource.class, \"commandLineArgs\"));\n\t\tassertThat(environment.getProperty(\"bar\")).isEqualTo(\"foo\");\n\t\t// New command line properties take precedence\n\t\tassertThat(environment.getProperty(\"foo\")).isEqualTo(\"bar\");\n\t\tCompositePropertySource composite = (CompositePropertySource) environment.getPropertySources()\n\t\t\t.get(\"commandLineArgs\");\n\t\tassertThat(composite.getPropertySources()).hasSize(2);\n\t\tassertThat(composite.getPropertySources()).first()\n\t\t\t.matches((source) -> source.getName().equals(\"springApplicationCommandLineArgs\"),\n\t\t\t\t\t\"is named springApplicationCommandLineArgs\");\n\t\tassertThat(composite.getPropertySources()).element(1)\n\t\t\t.matches((source) -> source.getName().equals(\"commandLineArgs\"), \"is named commandLineArgs\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "commandLinePropertySourceEnhancesEnvironment", "(", ")", "{", "// New command line properties take precedence", "}", "@", "Test", "SpringApplication", ";", ";", "ConfigurableEnvironment", ";", ";", ";", ";", ";", ";", ";", "CompositePropertySource", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "environment", "=", ".", "addFirst", "application", ".", "setEnvironment", "=", ".", "has", ".", "isEqualTo", ".", "isEqualTo", "composite", "=", ".", "hasSize", ".", "matches", ".", "matches", "new", "SpringApplication", "(", ")", "new", "StandardEnvironment", "environment", ".", "getPropertySources", "(", ")", "(", "environment", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "(", "CompositePropertySource", ")", "assertThat", "(", "2", ")", ".", "first", "(", ",", ")", ".", "element", "(", ",", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "new", "MapPropertySource", "(", ",", ")", "(", "environment", ")", "matchingPropertySource", "(", ")", "\"", "foo", "\"", "(", ")", "\"", "bar", "\"", ".", "get", "(", ")", "assertThat", "(", ")", "->", "\"", "is named springApplicationCommandLineArgs", "\"", "assertThat", "(", "1", ")", "->", "\"", "is named commandLineArgs", "\"", "ExampleConfig", ".", "class", "(", ",", ")", "\"", "--foo=bar", "\"", "\"", "--bar=foo", "\"", "(", ",", ")", "environment", ".", "getProperty", "environment", ".", "getProperty", "environment", ".", "getPropertySources", "(", ")", "composite", ".", "getPropertySources", "(", ")", "(", "source", ")", ".", "equals", "(", ")", "(", "source", ")", ".", "equals", "\"", "commandLineArgs", "\"", "Collections", ".", "singletonMap", "CompositePropertySource", ".", "class", "\"", "commandLineArgs", "\"", "(", ")", "(", ")", "(", ")", "\"", "commandLineArgs", "\"", "(", ")", "composite", ".", "getPropertySources", "source", ".", "getName", "(", ")", "composite", ".", "getPropertySources", "source", ".", "getName", "(", ")", "(", ",", ")", "\"", "bar", "\"", "\"", "foo", "\"", "(", ")", "(", ")", "\"", "springApplicationCommandLineArgs", "\"", "(", ")", "(", ")", "\"", "commandLineArgs", "\"", "\"", "foo", "\"", "\"", "original", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 373, "ast_depth": 12, "n_identifiers": 28, "vocab_size": 61, "n_whitespaces": 104, "n_words": 102, "nloc": 22, "token_counts": 256}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#497-506", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "propertiesFileEnhancesEnvironment", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#propertiesFileEnhancesEnvironment", "start_line": 497, "end_line": 506, "signature": "propertiesFileEnhancesEnvironment()", "original_code": "@Test\n\t@WithResource(name = \"application.properties\", content = \"foo=bucket\")\n\tvoid propertiesFileEnhancesEnvironment() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tConfigurableEnvironment environment = new StandardEnvironment();\n\t\tapplication.setEnvironment(environment);\n\t\tthis.context = application.run();\n\t\tassertThat(environment.getProperty(\"foo\")).isEqualTo(\"bucket\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "propertiesFileEnhancesEnvironment", "(", ")", "{", "}", "@", "Test", "@", "WithResource", "SpringApplication", ";", ";", "ConfigurableEnvironment", ";", ";", ";", ";", "(", ",", ")", "application", "=", "application", ".", "setWebApplicationType", "environment", "=", "application", ".", "setEnvironment", "=", ".", "isEqualTo", "name", "=", "content", "=", "new", "SpringApplication", "(", ")", "new", "StandardEnvironment", "(", "environment", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "\"", "application.properties", "\"", "\"", "foo=bucket", "\"", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "(", ")", "\"", "bucket", "\"", "ExampleConfig", ".", "class", "environment", ".", "getProperty", "(", ")", "\"", "foo", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 129, "ast_depth": 11, "n_identifiers": 16, "vocab_size": 38, "n_whitespaces": 41, "n_words": 37, "nloc": 10, "token_counts": 87}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#508-517", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "addProfiles", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#addProfiles", "start_line": 508, "end_line": 517, "signature": "addProfiles()", "original_code": "@Test\n\tvoid addProfiles() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tapplication.setAdditionalProfiles(\"foo\");\n\t\tConfigurableEnvironment environment = new StandardEnvironment();\n\t\tapplication.setEnvironment(environment);\n\t\tthis.context = application.run();\n\t\tassertThat(environment.acceptsProfiles(Profiles.of(\"foo\"))).isTrue();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "addProfiles", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", "ConfigurableEnvironment", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "application", ".", "setAdditionalProfiles", "environment", "=", "application", ".", "setEnvironment", "=", ".", "isTrue", "new", "SpringApplication", "(", ")", "(", ")", "new", "StandardEnvironment", "(", "environment", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "\"", "foo", "\"", "(", ")", "(", ")", "(", ")", "ExampleConfig", ".", "class", "environment", ".", "acceptsProfiles", "(", ")", "Profiles", ".", "of", "(", ")", "\"", "foo", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 124, "ast_depth": 13, "n_identifiers": 16, "vocab_size": 34, "n_whitespaces": 37, "n_words": 34, "nloc": 10, "token_counts": 83}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#519-528", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "additionalProfilesOrderedBeforeActiveProfiles", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#additionalProfilesOrderedBeforeActiveProfiles", "start_line": 519, "end_line": 528, "signature": "additionalProfilesOrderedBeforeActiveProfiles()", "original_code": "@Test\n\tvoid additionalProfilesOrderedBeforeActiveProfiles() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tapplication.setAdditionalProfiles(\"foo\");\n\t\tConfigurableEnvironment environment = new StandardEnvironment();\n\t\tapplication.setEnvironment(environment);\n\t\tthis.context = application.run(\"--spring.profiles.active=bar,spam\");\n\t\tassertThat(environment.getActiveProfiles()).containsExactly(\"foo\", \"bar\", \"spam\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "additionalProfilesOrderedBeforeActiveProfiles", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", "ConfigurableEnvironment", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "application", ".", "setAdditionalProfiles", "environment", "=", "application", ".", "setEnvironment", "=", ".", "containsExactly", "new", "SpringApplication", "(", ")", "(", ")", "new", "StandardEnvironment", "(", "environment", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ",", ",", ")", "(", ")", "WebApplicationType", ".", "NONE", "\"", "foo", "\"", "(", ")", "(", ")", "(", ")", "\"", "foo", "\"", "\"", "bar", "\"", "\"", "spam", "\"", "ExampleConfig", ".", "class", "\"", "--spring.profiles.active=bar,spam", "\"", "environment", ".", "getActiveProfiles", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 131, "ast_depth": 10, "n_identifiers": 14, "vocab_size": 36, "n_whitespaces": 39, "n_words": 39, "nloc": 10, "token_counts": 89}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#530-542", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "addProfilesOrderWithProperties", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#addProfilesOrderWithProperties", "start_line": 530, "end_line": 542, "signature": "addProfilesOrderWithProperties()", "original_code": "@Test\n\t@WithResource(name = \"application.properties\", content = \"my.property=fromapplicationproperties\")\n\t@WithResource(name = \"application-other.properties\", content = \"my.property=fromotherpropertiesfile\")\n\tvoid addProfilesOrderWithProperties() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tapplication.setAdditionalProfiles(\"other\");\n\t\tConfigurableEnvironment environment = new StandardEnvironment();\n\t\tapplication.setEnvironment(environment);\n\t\tthis.context = application.run();\n\t\t// Active profile should win over default\n\t\tassertThat(environment.getProperty(\"my.property\")).isEqualTo(\"fromotherpropertiesfile\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "addProfilesOrderWithProperties", "(", ")", "{", "// Active profile should win over default", "}", "@", "Test", "@", "WithResource", "@", "WithResource", "SpringApplication", ";", ";", ";", "ConfigurableEnvironment", ";", ";", ";", ";", "(", ",", ")", "(", ",", ")", "application", "=", "application", ".", "setWebApplicationType", "application", ".", "setAdditionalProfiles", "environment", "=", "application", ".", "setEnvironment", "=", ".", "isEqualTo", "name", "=", "content", "=", "name", "=", "content", "=", "new", "SpringApplication", "(", ")", "(", ")", "new", "StandardEnvironment", "(", "environment", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "\"", "application.properties", "\"", "\"", "my.property=fromapplicationproperties", "\"", "\"", "application-other.properties", "\"", "\"", "my.property=fromotherpropertiesfile", "\"", "(", ")", "WebApplicationType", ".", "NONE", "\"", "other", "\"", "(", ")", "(", ")", "(", ")", "\"", "fromotherpropertiesfile", "\"", "ExampleConfig", ".", "class", "environment", ".", "getProperty", "(", ")", "\"", "my.property", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 164, "ast_depth": 11, "n_identifiers": 17, "vocab_size": 43, "n_whitespaces": 60, "n_words": 57, "nloc": 13, "token_counts": 112}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#544-553", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "emptyCommandLinePropertySourceNotAdded", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#emptyCommandLinePropertySourceNotAdded", "start_line": 544, "end_line": 553, "signature": "emptyCommandLinePropertySourceNotAdded()", "original_code": "@Test\n\t@WithResource(name = \"application.properties\", content = \"foo=bucket\")\n\tvoid emptyCommandLinePropertySourceNotAdded() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tConfigurableEnvironment environment = new StandardEnvironment();\n\t\tapplication.setEnvironment(environment);\n\t\tthis.context = application.run();\n\t\tassertThat(environment.getProperty(\"foo\")).isEqualTo(\"bucket\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "emptyCommandLinePropertySourceNotAdded", "(", ")", "{", "}", "@", "Test", "@", "WithResource", "SpringApplication", ";", ";", "ConfigurableEnvironment", ";", ";", ";", ";", "(", ",", ")", "application", "=", "application", ".", "setWebApplicationType", "environment", "=", "application", ".", "setEnvironment", "=", ".", "isEqualTo", "name", "=", "content", "=", "new", "SpringApplication", "(", ")", "new", "StandardEnvironment", "(", "environment", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "\"", "application.properties", "\"", "\"", "foo=bucket", "\"", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "(", ")", "\"", "bucket", "\"", "ExampleConfig", ".", "class", "environment", ".", "getProperty", "(", ")", "\"", "foo", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 129, "ast_depth": 11, "n_identifiers": 16, "vocab_size": 38, "n_whitespaces": 41, "n_words": 37, "nloc": 10, "token_counts": 87}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#555-564", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "disableCommandLinePropertySource", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#disableCommandLinePropertySource", "start_line": 555, "end_line": 564, "signature": "disableCommandLinePropertySource()", "original_code": "@Test\n\tvoid disableCommandLinePropertySource() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tapplication.setAddCommandLineProperties(false);\n\t\tConfigurableEnvironment environment = new StandardEnvironment();\n\t\tapplication.setEnvironment(environment);\n\t\tthis.context = application.run(\"--foo=bar\");\n\t\tassertThat(environment).doesNotHave(matchingPropertySource(PropertySource.class, \"commandLineArgs\"));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "disableCommandLinePropertySource", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", "ConfigurableEnvironment", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "application", ".", "setAddCommandLineProperties", "environment", "=", "application", ".", "setEnvironment", "=", ".", "doesNotHave", "new", "SpringApplication", "(", ")", "(", "false", ")", "new", "StandardEnvironment", "(", "environment", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "(", "environment", ")", "matchingPropertySource", "ExampleConfig", ".", "class", "\"", "--foo=bar", "\"", "(", ",", ")", "PropertySource", ".", "class", "\"", "commandLineArgs", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 122, "ast_depth": 10, "n_identifiers": 14, "vocab_size": 36, "n_whitespaces": 38, "n_words": 36, "nloc": 10, "token_counts": 82}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#566-575", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "contextUsesApplicationConversionService", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#contextUsesApplicationConversionService", "start_line": 566, "end_line": 575, "signature": "contextUsesApplicationConversionService()", "original_code": "@Test\n\tvoid contextUsesApplicationConversionService() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tthis.context = application.run();\n\t\tassertThat(this.context.getBeanFactory().getConversionService())\n\t\t\t.isInstanceOf(ApplicationConversionService.class);\n\t\tassertThat(this.context.getEnvironment().getConversionService())\n\t\t\t.isInstanceOf(ApplicationConversionService.class);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "contextUsesApplicationConversionService", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "=", ".", "isInstanceOf", ".", "isInstanceOf", "new", "SpringApplication", "(", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "ApplicationConversionService", ".", "class", "(", ")", "ApplicationConversionService", ".", "class", "ExampleConfig", ".", "class", ".", "getConversionService", ".", "getConversionService", ".", "getBeanFactory", "(", ")", ".", "getEnvironment", "(", ")", "this", ".", "context", "(", ")", "this", ".", "context", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 124, "ast_depth": 11, "n_identifiers": 13, "vocab_size": 28, "n_whitespaces": 35, "n_words": 33, "nloc": 10, "token_counts": 82}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#577-586", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "contextWhenHasAddConversionServiceFalseUsesRegularConversionService", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#contextWhenHasAddConversionServiceFalseUsesRegularConversionService", "start_line": 577, "end_line": 586, "signature": "contextWhenHasAddConversionServiceFalseUsesRegularConversionService()", "original_code": "@Test\n\tvoid contextWhenHasAddConversionServiceFalseUsesRegularConversionService() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tapplication.setAddConversionService(false);\n\t\tthis.context = application.run();\n\t\tassertThat(this.context.getBeanFactory().getConversionService()).isNull();\n\t\tassertThat(this.context.getEnvironment().getConversionService())\n\t\t\t.isNotInstanceOf(ApplicationConversionService.class);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "contextWhenHasAddConversionServiceFalseUsesRegularConversionService", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "application", ".", "setAddConversionService", "=", ".", "isNull", ".", "isNotInstanceOf", "new", "SpringApplication", "(", ")", "(", "false", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "(", ")", "ApplicationConversionService", ".", "class", "ExampleConfig", ".", "class", ".", "getConversionService", ".", "getConversionService", ".", "getBeanFactory", "(", ")", ".", "getEnvironment", "(", ")", "this", ".", "context", "(", ")", "this", ".", "context", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 130, "ast_depth": 11, "n_identifiers": 15, "vocab_size": 31, "n_whitespaces": 34, "n_words": 34, "nloc": 10, "token_counts": 86}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#588-596", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "runCommandLineRunnersAndApplicationRunners", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#runCommandLineRunnersAndApplicationRunners", "start_line": 588, "end_line": 596, "signature": "runCommandLineRunnersAndApplicationRunners()", "original_code": "@Test\n\tvoid runCommandLineRunnersAndApplicationRunners() {\n\t\tSpringApplication application = new SpringApplication(CommandLineRunConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tthis.context = application.run(\"arg\");\n\t\tassertThat(this.context).has(runTestRunnerBean(\"runnerA\"));\n\t\tassertThat(this.context).has(runTestRunnerBean(\"runnerB\"));\n\t\tassertThat(this.context).has(runTestRunnerBean(\"runnerC\"));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runCommandLineRunnersAndApplicationRunners", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "=", ".", "has", ".", "has", ".", "has", "new", "SpringApplication", "(", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "runTestRunnerBean", "(", ")", "runTestRunnerBean", "(", ")", "runTestRunnerBean", "CommandLineRunConfig", ".", "class", "\"", "arg", "\"", "this", ".", "context", "(", ")", "this", ".", "context", "(", ")", "this", ".", "context", "(", ")", "\"", "runnerA", "\"", "\"", "runnerB", "\"", "\"", "runnerC", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 140, "ast_depth": 10, "n_identifiers": 11, "vocab_size": 30, "n_whitespaces": 30, "n_words": 36, "nloc": 9, "token_counts": 92}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#598-609", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "runCommandLineRunnersAndApplicationRunnersWithParentContext", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#runCommandLineRunnersAndApplicationRunnersWithParentContext", "start_line": 598, "end_line": 609, "signature": "runCommandLineRunnersAndApplicationRunnersWithParentContext()", "original_code": "@Test\n\tvoid runCommandLineRunnersAndApplicationRunnersWithParentContext() {\n\t\tSpringApplication application = new SpringApplication(CommandLineRunConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tapplication.addInitializers(new ParentContextApplicationContextInitializer(\n\t\t\t\tnew AnnotationConfigApplicationContext(CommandLineRunParentConfig.class)));\n\t\tthis.context = application.run(\"arg\");\n\t\tassertThat(this.context).has(runTestRunnerBean(\"runnerA\"));\n\t\tassertThat(this.context).has(runTestRunnerBean(\"runnerB\"));\n\t\tassertThat(this.context).has(runTestRunnerBean(\"runnerC\"));\n\t\tassertThat(this.context).doesNotHave(runTestRunnerBean(\"runnerP\"));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runCommandLineRunnersAndApplicationRunnersWithParentContext", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "application", ".", "addInitializers", "=", ".", "has", ".", "has", ".", "has", ".", "doesNotHave", "new", "SpringApplication", "(", ")", "(", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "new", "ParentContextApplicationContextInitializer", "(", ")", "(", ")", "runTestRunnerBean", "(", ")", "runTestRunnerBean", "(", ")", "runTestRunnerBean", "(", ")", "runTestRunnerBean", "CommandLineRunConfig", ".", "class", "(", ")", "\"", "arg", "\"", "this", ".", "context", "(", ")", "this", ".", "context", "(", ")", "this", ".", "context", "(", ")", "this", ".", "context", "(", ")", "new", "AnnotationConfigApplicationContext", "\"", "runnerA", "\"", "\"", "runnerB", "\"", "\"", "runnerC", "\"", "\"", "runnerP", "\"", "(", ")", "CommandLineRunParentConfig", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 191, "ast_depth": 12, "n_identifiers": 13, "vocab_size": 36, "n_whitespaces": 43, "n_words": 50, "nloc": 12, "token_counts": 126}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#611-618", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "runCommandLineRunnersAndApplicationRunnersUsingOrderOnBeanDefinitions", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#runCommandLineRunnersAndApplicationRunnersUsingOrderOnBeanDefinitions", "start_line": 611, "end_line": 618, "signature": "runCommandLineRunnersAndApplicationRunnersUsingOrderOnBeanDefinitions()", "original_code": "@Test\n\tvoid runCommandLineRunnersAndApplicationRunnersUsingOrderOnBeanDefinitions() {\n\t\tSpringApplication application = new SpringApplication(BeanDefinitionOrderRunnerConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tthis.context = application.run(\"arg\");\n\t\tBeanDefinitionOrderRunnerConfig config = this.context.getBean(BeanDefinitionOrderRunnerConfig.class);\n\t\tassertThat(config.runners).containsExactly(\"runnerA\", \"runnerB\", \"runnerC\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runCommandLineRunnersAndApplicationRunnersUsingOrderOnBeanDefinitions", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", "BeanDefinitionOrderRunnerConfig", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "=", "config", "=", ".", "containsExactly", "new", "SpringApplication", "(", ")", "this", ".", "context", "application", ".", "run", ".", "getBean", "assertThat", "(", ",", ",", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "this", ".", "context", "(", ")", "(", ")", "\"", "runnerA", "\"", "\"", "runnerB", "\"", "\"", "runnerC", "\"", "BeanDefinitionOrderRunnerConfig", ".", "class", "\"", "arg", "\"", "BeanDefinitionOrderRunnerConfig", ".", "class", "config", ".", "runners"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 113, "ast_depth": 9, "n_identifiers": 13, "vocab_size": 33, "n_whitespaces": 32, "n_words": 32, "nloc": 8, "token_counts": 77}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#620-648", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "runnersAreCalledAfterStartedIsLoggedAndBeforeApplicationReadyEventIsPublished", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#runnersAreCalledAfterStartedIsLoggedAndBeforeApplicationReadyEventIsPublished", "start_line": 620, "end_line": 648, "signature": "runnersAreCalledAfterStartedIsLoggedAndBeforeApplicationReadyEventIsPublished(CapturedOutput output)", "original_code": "@Test\n\t@SuppressWarnings(\"unchecked\")\n\tvoid runnersAreCalledAfterStartedIsLoggedAndBeforeApplicationReadyEventIsPublished(CapturedOutput output)\n\t\t\tthrows Exception {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tApplicationRunner applicationRunner = mock(ApplicationRunner.class);\n\t\tCommandLineRunner commandLineRunner = mock(CommandLineRunner.class);\n\t\tapplication.addInitializers((context) -> {\n\t\t\tConfigurableListableBeanFactory beanFactory = context.getBeanFactory();\n\t\t\tbeanFactory.registerSingleton(\"commandLineRunner\", (CommandLineRunner) (args) -> {\n\t\t\t\tassertThat(output).contains(\"Started\");\n\t\t\t\tcommandLineRunner.run(args);\n\t\t\t});\n\t\t\tbeanFactory.registerSingleton(\"applicationRunner\", (ApplicationRunner) (args) -> {\n\t\t\t\tassertThat(output).contains(\"Started\");\n\t\t\t\tapplicationRunner.run(args);\n\t\t\t});\n\t\t});\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tApplicationListener<ApplicationReadyEvent> eventListener = mock(ApplicationListener.class);\n\t\tapplication.addListeners(eventListener);\n\t\tthis.context = application.run();\n\t\tInOrder applicationRunnerOrder = Mockito.inOrder(eventListener, applicationRunner);\n\t\tapplicationRunnerOrder.verify(applicationRunner).run(any(ApplicationArguments.class));\n\t\tapplicationRunnerOrder.verify(eventListener).onApplicationEvent(any(ApplicationReadyEvent.class));\n\t\tInOrder commandLineRunnerOrder = Mockito.inOrder(eventListener, commandLineRunner);\n\t\tcommandLineRunnerOrder.verify(commandLineRunner).run();\n\t\tcommandLineRunnerOrder.verify(eventListener).onApplicationEvent(any(ApplicationReadyEvent.class));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runnersAreCalledAfterStartedIsLoggedAndBeforeApplicationReadyEventIsPublished", "(", ")", "throws", "Exception", "{", "}", "@", "Test", "@", "SuppressWarnings", "CapturedOutput", "output", "SpringApplication", ";", "ApplicationRunner", ";", "CommandLineRunner", ";", ";", ";", ";", ";", ";", "InOrder", ";", ";", ";", "InOrder", ";", ";", ";", "(", ")", "application", "=", "applicationRunner", "=", "commandLineRunner", "=", "application", ".", "addInitializers", "application", ".", "setWebApplicationType", "ApplicationListener", "eventListener", "=", "application", ".", "addListeners", "=", "applicationRunnerOrder", "=", ".", "run", ".", "onApplicationEvent", "commandLineRunnerOrder", "=", ".", "run", ".", "onApplicationEvent", "\"", "unchecked", "\"", "new", "SpringApplication", "mock", "mock", "(", ")", "(", ")", "<", "ApplicationReadyEvent", ">", "mock", "(", "eventListener", ")", "this", ".", "context", "application", ".", "run", "Mockito", ".", "inOrder", "applicationRunnerOrder", ".", "verify", "(", ")", "applicationRunnerOrder", ".", "verify", "(", ")", "Mockito", ".", "inOrder", "commandLineRunnerOrder", ".", "verify", "(", ")", "commandLineRunnerOrder", ".", "verify", "(", ")", "(", ")", "(", ")", "(", ")", "->", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "(", "eventListener", ",", "applicationRunner", ")", "(", "applicationRunner", ")", "any", "(", "eventListener", ")", "any", "(", "eventListener", ",", "commandLineRunner", ")", "(", "commandLineRunner", ")", "(", "eventListener", ")", "any", "ExampleConfig", ".", "class", "ApplicationRunner", ".", "class", "CommandLineRunner", ".", "class", "(", "context", ")", "{", "}", "ApplicationListener", ".", "class", "(", ")", "(", ")", "(", ")", "ConfigurableListableBeanFactory", ";", ";", ";", "ApplicationArguments", ".", "class", "ApplicationReadyEvent", ".", "class", "ApplicationReadyEvent", ".", "class", "beanFactory", "=", "beanFactory", ".", "registerSingleton", "beanFactory", ".", "registerSingleton", "context", ".", "getBeanFactory", "(", ",", ")", "(", ",", ")", "(", ")", "\"", "commandLineRunner", "\"", "(", "CommandLineRunner", ")", "\"", "applicationRunner", "\"", "(", "ApplicationRunner", ")", "->", "->", "(", "args", ")", "{", "}", "(", "args", ")", "{", "}", ";", ";", ";", ";", ".", "contains", "commandLineRunner", ".", "run", ".", "contains", "applicationRunner", ".", "run", "assertThat", "(", ")", "(", "args", ")", "assertThat", "(", ")", "(", "args", ")", "(", "output", ")", "\"", "Started", "\"", "(", "output", ")", "\"", "Started", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 398, "ast_depth": 19, "n_identifiers": 29, "vocab_size": 60, "n_whitespaces": 135, "n_words": 110, "nloc": 29, "token_counts": 272}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#650-665", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "applicationRunnerFailureCausesApplicationFailedEventToBePublished", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#applicationRunnerFailureCausesApplicationFailedEventToBePublished", "start_line": 650, "end_line": 665, "signature": "applicationRunnerFailureCausesApplicationFailedEventToBePublished()", "original_code": "@Test\n\tvoid applicationRunnerFailureCausesApplicationFailedEventToBePublished() throws Exception {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tApplicationListener<SpringApplicationEvent> listener = mock(ApplicationListener.class);\n\t\tapplication.addListeners(listener);\n\t\tApplicationRunner runner = mock(ApplicationRunner.class);\n\t\tException failure = new Exception();\n\t\twillThrow(failure).given(runner).run(isA(ApplicationArguments.class));\n\t\tapplication.addInitializers((context) -> context.getBeanFactory().registerSingleton(\"runner\", runner));\n\t\tassertThatIllegalStateException().isThrownBy(application::run).withCause(failure);\n\t\tthen(listener).should().onApplicationEvent(isA(ApplicationStartedEvent.class));\n\t\tthen(listener).should().onApplicationEvent(isA(ApplicationFailedEvent.class));\n\t\tthen(listener).should(never()).onApplicationEvent(isA(ApplicationReadyEvent.class));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "applicationRunnerFailureCausesApplicationFailedEventToBePublished", "(", ")", "throws", "Exception", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", "ApplicationRunner", ";", "Exception", ";", ";", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "ApplicationListener", "listener", "=", "application", ".", "addListeners", "runner", "=", "failure", "=", ".", "run", "application", ".", "addInitializers", ".", "withCause", ".", "onApplicationEvent", ".", "onApplicationEvent", ".", "onApplicationEvent", "new", "SpringApplication", "(", ")", "@", "SuppressWarnings", "<", "SpringApplicationEvent", ">", "mock", "(", "listener", ")", "mock", "new", "Exception", ".", "given", "(", ")", "(", ")", ".", "isThrownBy", "(", "failure", ")", ".", "should", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "(", ")", "(", ")", "willThrow", "(", "runner", ")", "isA", "->", "assertThatIllegalStateException", "(", ")", "then", "(", ")", "isA", "then", "(", ")", "isA", "then", "(", ")", "isA", "ExampleConfig", ".", "class", "\"", "unchecked", "\"", "ApplicationListener", ".", "class", "ApplicationRunner", ".", "class", "(", "failure", ")", "(", ")", "(", "context", ")", ".", "registerSingleton", "(", ")", "application", "::", "run", "(", "listener", ")", "(", ")", "(", "listener", ")", "(", ")", "(", "listener", ")", "never", "(", ")", "ApplicationArguments", ".", "class", "context", ".", "getBeanFactory", "(", ",", "runner", ")", "ApplicationStartedEvent", ".", "class", "ApplicationFailedEvent", ".", "class", "(", ")", "ApplicationReadyEvent", ".", "class", "(", ")", "\"", "runner", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 294, "ast_depth": 11, "n_identifiers": 27, "vocab_size": 56, "n_whitespaces": 64, "n_words": 79, "nloc": 16, "token_counts": 195}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#667-682", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "commandLineRunnerFailureCausesApplicationFailedEventToBePublished", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#commandLineRunnerFailureCausesApplicationFailedEventToBePublished", "start_line": 667, "end_line": 682, "signature": "commandLineRunnerFailureCausesApplicationFailedEventToBePublished()", "original_code": "@Test\n\tvoid commandLineRunnerFailureCausesApplicationFailedEventToBePublished() throws Exception {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tApplicationListener<SpringApplicationEvent> listener = mock(ApplicationListener.class);\n\t\tapplication.addListeners(listener);\n\t\tCommandLineRunner runner = mock(CommandLineRunner.class);\n\t\tException failure = new Exception();\n\t\twillThrow(failure).given(runner).run();\n\t\tapplication.addInitializers((context) -> context.getBeanFactory().registerSingleton(\"runner\", runner));\n\t\tassertThatIllegalStateException().isThrownBy(application::run).withCause(failure);\n\t\tthen(listener).should().onApplicationEvent(isA(ApplicationStartedEvent.class));\n\t\tthen(listener).should().onApplicationEvent(isA(ApplicationFailedEvent.class));\n\t\tthen(listener).should(never()).onApplicationEvent(isA(ApplicationReadyEvent.class));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "commandLineRunnerFailureCausesApplicationFailedEventToBePublished", "(", ")", "throws", "Exception", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", "CommandLineRunner", ";", "Exception", ";", ";", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "ApplicationListener", "listener", "=", "application", ".", "addListeners", "runner", "=", "failure", "=", ".", "run", "application", ".", "addInitializers", ".", "withCause", ".", "onApplicationEvent", ".", "onApplicationEvent", ".", "onApplicationEvent", "new", "SpringApplication", "(", ")", "@", "SuppressWarnings", "<", "SpringApplicationEvent", ">", "mock", "(", "listener", ")", "mock", "new", "Exception", ".", "given", "(", ")", "(", ")", ".", "isThrownBy", "(", "failure", ")", ".", "should", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "(", ")", "(", ")", "willThrow", "(", "runner", ")", "->", "assertThatIllegalStateException", "(", ")", "then", "(", ")", "isA", "then", "(", ")", "isA", "then", "(", ")", "isA", "ExampleConfig", ".", "class", "\"", "unchecked", "\"", "ApplicationListener", ".", "class", "CommandLineRunner", ".", "class", "(", "failure", ")", "(", "context", ")", ".", "registerSingleton", "(", ")", "application", "::", "run", "(", "listener", ")", "(", ")", "(", "listener", ")", "(", ")", "(", "listener", ")", "never", "(", ")", "context", ".", "getBeanFactory", "(", ",", "runner", ")", "ApplicationStartedEvent", ".", "class", "ApplicationFailedEvent", ".", "class", "(", ")", "ApplicationReadyEvent", ".", "class", "(", ")", "\"", "runner", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 285, "ast_depth": 11, "n_identifiers": 27, "vocab_size": 55, "n_whitespaces": 64, "n_words": 76, "nloc": 16, "token_counts": 189}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#684-696", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "failureInReadyEventListenerDoesNotCausePublicationOfFailedEvent", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#failureInReadyEventListenerDoesNotCausePublicationOfFailedEvent", "start_line": 684, "end_line": 696, "signature": "failureInReadyEventListenerDoesNotCausePublicationOfFailedEvent()", "original_code": "@Test\n\tvoid failureInReadyEventListenerDoesNotCausePublicationOfFailedEvent() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tApplicationListener<SpringApplicationEvent> listener = mock(ApplicationListener.class);\n\t\tapplication.addListeners(listener);\n\t\tRuntimeException failure = new RuntimeException();\n\t\twillThrow(failure).given(listener).onApplicationEvent(isA(ApplicationReadyEvent.class));\n\t\tassertThatExceptionOfType(RuntimeException.class).isThrownBy(application::run).isEqualTo(failure);\n\t\tthen(listener).should().onApplicationEvent(isA(ApplicationReadyEvent.class));\n\t\tthen(listener).should(never()).onApplicationEvent(isA(ApplicationFailedEvent.class));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "failureInReadyEventListenerDoesNotCausePublicationOfFailedEvent", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", "RuntimeException", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "ApplicationListener", "listener", "=", "application", ".", "addListeners", "failure", "=", ".", "onApplicationEvent", ".", "isEqualTo", ".", "onApplicationEvent", ".", "onApplicationEvent", "new", "SpringApplication", "(", ")", "@", "SuppressWarnings", "<", "SpringApplicationEvent", ">", "mock", "(", "listener", ")", "new", "RuntimeException", ".", "given", "(", ")", ".", "isThrownBy", "(", "failure", ")", ".", "should", "(", ")", ".", "should", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "(", ")", "willThrow", "(", "listener", ")", "isA", "assertThatExceptionOfType", "(", ")", "then", "(", ")", "isA", "then", "(", ")", "isA", "ExampleConfig", ".", "class", "\"", "unchecked", "\"", "ApplicationListener", ".", "class", "(", "failure", ")", "(", ")", "(", ")", "application", "::", "run", "(", "listener", ")", "(", ")", "(", "listener", ")", "never", "(", ")", "ApplicationReadyEvent", ".", "class", "RuntimeException", ".", "class", "ApplicationReadyEvent", ".", "class", "(", ")", "ApplicationFailedEvent", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 217, "ast_depth": 10, "n_identifiers": 22, "vocab_size": 45, "n_whitespaces": 47, "n_words": 59, "nloc": 13, "token_counts": 143}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#698-714", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "failureInReadyEventListenerCloseApplicationContext", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#failureInReadyEventListenerCloseApplicationContext", "start_line": 698, "end_line": 714, "signature": "failureInReadyEventListenerCloseApplicationContext(CapturedOutput output)", "original_code": "@Test\n\tvoid failureInReadyEventListenerCloseApplicationContext(CapturedOutput output) {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tExitCodeListener exitCodeListener = new ExitCodeListener();\n\t\tapplication.addListeners(exitCodeListener);\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tApplicationListener<SpringApplicationEvent> listener = mock(ApplicationListener.class);\n\t\tapplication.addListeners(listener);\n\t\tExitStatusException failure = new ExitStatusException();\n\t\twillThrow(failure).given(listener).onApplicationEvent(isA(ApplicationReadyEvent.class));\n\t\tassertThatExceptionOfType(RuntimeException.class).isThrownBy(application::run);\n\t\tthen(listener).should().onApplicationEvent(isA(ApplicationReadyEvent.class));\n\t\tthen(listener).should(never()).onApplicationEvent(isA(ApplicationFailedEvent.class));\n\t\tassertThat(exitCodeListener.getExitCode()).isEqualTo(11);\n\t\tassertThat(output).contains(\"Application run failed\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "failureInReadyEventListenerCloseApplicationContext", "(", ")", "{", "}", "@", "Test", "CapturedOutput", "output", "SpringApplication", ";", ";", "ExitCodeListener", ";", ";", ";", ";", "ExitStatusException", ";", ";", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "exitCodeListener", "=", "application", ".", "addListeners", "ApplicationListener", "listener", "=", "application", ".", "addListeners", "failure", "=", ".", "onApplicationEvent", ".", "isThrownBy", ".", "onApplicationEvent", ".", "onApplicationEvent", ".", "isEqualTo", ".", "contains", "new", "SpringApplication", "(", ")", "new", "ExitCodeListener", "(", "exitCodeListener", ")", "@", "SuppressWarnings", "<", "SpringApplicationEvent", ">", "mock", "(", "listener", ")", "new", "ExitStatusException", ".", "given", "(", ")", "assertThatExceptionOfType", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", "assertThat", "(", "11", ")", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "(", ")", "(", ")", "willThrow", "(", "listener", ")", "isA", "(", ")", "application", "::", "run", "then", "(", ")", "isA", "then", "(", ")", "isA", "(", ")", "(", "output", ")", "\"", "Application run failed", "\"", "ExampleConfig", ".", "class", "\"", "unchecked", "\"", "ApplicationListener", ".", "class", "(", "failure", ")", "(", ")", "RuntimeException", ".", "class", "(", "listener", ")", "(", ")", "(", "listener", ")", "never", "(", ")", "exitCodeListener", ".", "getExitCode", "ApplicationReadyEvent", ".", "class", "ApplicationReadyEvent", ".", "class", "(", ")", "ApplicationFailedEvent", ".", "class", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 274, "ast_depth": 10, "n_identifiers": 27, "vocab_size": 55, "n_whitespaces": 66, "n_words": 77, "nloc": 17, "token_counts": 181}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#716-733", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "failureOnTheJvmLogsApplicationRunFailed", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#failureOnTheJvmLogsApplicationRunFailed", "start_line": 716, "end_line": 733, "signature": "failureOnTheJvmLogsApplicationRunFailed(CapturedOutput output)", "original_code": "@Test\n\tvoid failureOnTheJvmLogsApplicationRunFailed(CapturedOutput output) {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tExitCodeListener exitCodeListener = new ExitCodeListener();\n\t\tapplication.addListeners(exitCodeListener);\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tApplicationListener<SpringApplicationEvent> listener = mock(ApplicationListener.class);\n\t\tapplication.addListeners(listener);\n\t\tExitStatusException failure = new ExitStatusException();\n\t\twillThrow(failure).given(listener).onApplicationEvent(isA(ApplicationReadyEvent.class));\n\t\tassertThatExceptionOfType(RuntimeException.class).isThrownBy(application::run);\n\t\tthen(listener).should().onApplicationEvent(isA(ApplicationReadyEvent.class));\n\t\tthen(listener).should(never()).onApplicationEvent(isA(ApplicationFailedEvent.class));\n\t\tassertThat(exitCodeListener.getExitCode()).isEqualTo(11);\n\t\t// Leading space only happens when logging\n\t\tassertThat(output).contains(\" Application run failed\").contains(\"ExitStatusException\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "failureOnTheJvmLogsApplicationRunFailed", "(", ")", "{", "// Leading space only happens when logging", "}", "@", "Test", "CapturedOutput", "output", "SpringApplication", ";", ";", "ExitCodeListener", ";", ";", ";", ";", "ExitStatusException", ";", ";", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "exitCodeListener", "=", "application", ".", "addListeners", "ApplicationListener", "listener", "=", "application", ".", "addListeners", "failure", "=", ".", "onApplicationEvent", ".", "isThrownBy", ".", "onApplicationEvent", ".", "onApplicationEvent", ".", "isEqualTo", ".", "contains", "new", "SpringApplication", "(", ")", "new", "ExitCodeListener", "(", "exitCodeListener", ")", "@", "SuppressWarnings", "<", "SpringApplicationEvent", ">", "mock", "(", "listener", ")", "new", "ExitStatusException", ".", "given", "(", ")", "assertThatExceptionOfType", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", "assertThat", "(", "11", ")", ".", "contains", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "(", ")", "(", ")", "willThrow", "(", "listener", ")", "isA", "(", ")", "application", "::", "run", "then", "(", ")", "isA", "then", "(", ")", "isA", "(", ")", "assertThat", "(", ")", "\"", "ExitStatusException", "\"", "ExampleConfig", ".", "class", "\"", "unchecked", "\"", "ApplicationListener", ".", "class", "(", "failure", ")", "(", ")", "RuntimeException", ".", "class", "(", "listener", ")", "(", ")", "(", "listener", ")", "never", "(", ")", "exitCodeListener", ".", "getExitCode", "(", "output", ")", "\"", " Application run failed", "\"", "ApplicationReadyEvent", ".", "class", "ApplicationReadyEvent", ".", "class", "(", ")", "ApplicationFailedEvent", ".", "class", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 285, "ast_depth": 10, "n_identifiers": 27, "vocab_size": 56, "n_whitespaces": 76, "n_words": 85, "nloc": 18, "token_counts": 189}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#735-761", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "failureInANativeImageWritesFailureToSystemOut", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#failureInANativeImageWritesFailureToSystemOut", "start_line": 735, "end_line": 761, "signature": "failureInANativeImageWritesFailureToSystemOut(CapturedOutput output)", "original_code": "@Test\n\t@ForkedClassPath\n\tvoid failureInANativeImageWritesFailureToSystemOut(CapturedOutput output) {\n\t\tSystem.setProperty(\"org.graalvm.nativeimage.imagecode\", \"true\");\n\t\ttry {\n\t\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\t\tExitCodeListener exitCodeListener = new ExitCodeListener();\n\t\t\tapplication.addListeners(exitCodeListener);\n\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\tApplicationListener<SpringApplicationEvent> listener = mock(ApplicationListener.class);\n\t\t\tapplication.addListeners(listener);\n\t\t\tExitStatusException failure = new ExitStatusException();\n\t\t\twillThrow(failure).given(listener).onApplicationEvent(isA(ApplicationReadyEvent.class));\n\t\t\tassertThatExceptionOfType(RuntimeException.class).isThrownBy(application::run);\n\t\t\tthen(listener).should().onApplicationEvent(isA(ApplicationReadyEvent.class));\n\t\t\tthen(listener).should(never()).onApplicationEvent(isA(ApplicationFailedEvent.class));\n\t\t\tassertThat(exitCodeListener.getExitCode()).isEqualTo(11);\n\t\t\t// Leading space only happens when logging\n\t\t\tassertThat(output).doesNotContain(\" Application run failed\")\n\t\t\t\t.contains(\"Application run failed\")\n\t\t\t\t.contains(\"ExitStatusException\");\n\t\t}\n\t\tfinally {\n\t\t\tSystem.clearProperty(\"org.graalvm.nativeimage.imagecode\");\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "failureInANativeImageWritesFailureToSystemOut", "(", ")", "{", "}", "@", "Test", "@", "ForkedClassPath", "CapturedOutput", "output", ";", "try", "System", ".", "setProperty", "{", "// Leading space only happens when logging", "}", "finally", "(", ",", ")", "SpringApplication", ";", ";", "ExitCodeListener", ";", ";", ";", ";", "ExitStatusException", ";", ";", ";", ";", ";", ";", ";", "{", "}", "\"", "org.graalvm.nativeimage.imagecode", "\"", "\"", "true", "\"", "application", "=", "application", ".", "setWebApplicationType", "exitCodeListener", "=", "application", ".", "addListeners", "ApplicationListener", "listener", "=", "application", ".", "addListeners", "failure", "=", ".", "onApplicationEvent", ".", "isThrownBy", ".", "onApplicationEvent", ".", "onApplicationEvent", ".", "isEqualTo", ".", "contains", ";", "new", "SpringApplication", "(", ")", "new", "ExitCodeListener", "(", "exitCodeListener", ")", "@", "SuppressWarnings", "<", "SpringApplicationEvent", ">", "mock", "(", "listener", ")", "new", "ExitStatusException", ".", "given", "(", ")", "assertThatExceptionOfType", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", "assertThat", "(", "11", ")", ".", "contains", "(", ")", "System", ".", "clearProperty", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "(", ")", "(", ")", "willThrow", "(", "listener", ")", "isA", "(", ")", "application", "::", "run", "then", "(", ")", "isA", "then", "(", ")", "isA", "(", ")", ".", "doesNotContain", "(", ")", "\"", "ExitStatusException", "\"", "(", ")", "ExampleConfig", ".", "class", "\"", "unchecked", "\"", "ApplicationListener", ".", "class", "(", "failure", ")", "(", ")", "RuntimeException", ".", "class", "(", "listener", ")", "(", ")", "(", "listener", ")", "never", "(", ")", "exitCodeListener", ".", "getExitCode", "assertThat", "(", ")", "\"", "Application run failed", "\"", "\"", "org.graalvm.nativeimage.imagecode", "\"", "ApplicationReadyEvent", ".", "class", "ApplicationReadyEvent", ".", "class", "(", ")", "ApplicationFailedEvent", ".", "class", "(", ")", "(", "output", ")", "\"", " Application run failed", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 339, "ast_depth": 12, "n_identifiers": 32, "vocab_size": 67, "n_whitespaces": 127, "n_words": 105, "nloc": 27, "token_counts": 226}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#763-773", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "loadSources", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#loadSources", "start_line": 763, "end_line": 773, "signature": "loadSources()", "original_code": "@Test\n\tvoid loadSources() {\n\t\tClass<?>[] sources = { ExampleConfig.class, TestCommandLineRunner.class };\n\t\tTestSpringApplication application = new TestSpringApplication(sources);\n\t\tapplication.getSources().add(\"a\");\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tapplication.setUseMockLoader(true);\n\t\tthis.context = application.run();\n\t\tSet<Object> allSources = application.getAllSources();\n\t\tassertThat(allSources).contains(ExampleConfig.class, TestCommandLineRunner.class, \"a\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "loadSources", "(", ")", "{", "}", "@", "Test", ";", "TestSpringApplication", ";", ";", ";", ";", ";", ";", ";", "sources", "=", "application", "=", ".", "add", "application", ".", "setWebApplicationType", "application", ".", "setUseMockLoader", "=", "Set", "allSources", "=", ".", "contains", "Class", "[", "]", "{", ",", "}", "new", "TestSpringApplication", "application", ".", "getSources", "(", ")", "(", ")", "(", "true", ")", "this", ".", "context", "application", ".", "run", "<", "Object", ">", "application", ".", "getAllSources", "assertThat", "(", ",", ",", ")", "<", ">", "ExampleConfig", ".", "class", "TestCommandLineRunner", ".", "class", "(", "sources", ")", "(", ")", "\"", "a", "\"", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "(", "allSources", ")", "ExampleConfig", ".", "class", "TestCommandLineRunner", ".", "class", "\"", "a", "\"", "?"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 158, "ast_depth": 9, "n_identifiers": 16, "vocab_size": 43, "n_whitespaces": 47, "n_words": 42, "nloc": 11, "token_counts": 106}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#775-783", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "wildcardSources", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#wildcardSources", "start_line": 775, "end_line": 783, "signature": "wildcardSources()", "original_code": "@Test\n\t@WithSampleBeansXmlResource\n\t@WithResource(name = \"application.properties\", content = \"sample.app.test.prop=*\")\n\tvoid wildcardSources() {\n\t\tTestSpringApplication application = new TestSpringApplication();\n\t\tapplication.getSources().add(\"classpath*:org/springframework/boot/sample-${sample.app.test.prop}.xml\");\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tthis.context = application.run(\"--spring.config.location=classpath:/\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "wildcardSources", "(", ")", "{", "}", "@", "Test", "@", "WithSampleBeansXmlResource", "@", "WithResource", "TestSpringApplication", ";", ";", ";", ";", "(", ",", ")", "application", "=", ".", "add", "application", ".", "setWebApplicationType", "=", "name", "=", "content", "=", "new", "TestSpringApplication", "application", ".", "getSources", "(", ")", "(", ")", "this", ".", "context", "application", ".", "run", "\"", "application.properties", "\"", "\"", "sample.app.test.prop=*", "\"", "(", ")", "(", ")", "\"", "classpath*:org/springframework/boot/sample-${sample.app.test.prop}.xml", "\"", "WebApplicationType", ".", "NONE", "(", ")", "\"", "--spring.config.location=classpath:/", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 101, "ast_depth": 9, "n_identifiers": 14, "vocab_size": 32, "n_whitespaces": 33, "n_words": 42, "nloc": 9, "token_counts": 68}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#785-789", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "run", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#run", "start_line": 785, "end_line": 789, "signature": "run()", "original_code": "@Test\n\tvoid run() {\n\t\tthis.context = SpringApplication.run(ExampleConfig.class);\n\t\tassertThat(this.context).isNotNull();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "run", "(", ")", "{", "}", "@", "Test", ";", ";", "=", ".", "isNotNull", "this", ".", "context", "SpringApplication", ".", "run", "assertThat", "(", ")", "(", ")", "(", ")", "ExampleConfig", ".", "class", "this", ".", "context"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 50, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 18, "n_whitespaces": 14, "n_words": 13, "nloc": 5, "token_counts": 32}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#791-795", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "runComponents", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#runComponents", "start_line": 791, "end_line": 795, "signature": "runComponents()", "original_code": "@Test\n\tvoid runComponents() {\n\t\tthis.context = SpringApplication.run(new Class<?>[] { ExampleConfig.class, Object.class }, new String[0]);\n\t\tassertThat(this.context).isNotNull();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runComponents", "(", ")", "{", "}", "@", "Test", ";", ";", "=", ".", "isNotNull", "this", ".", "context", "SpringApplication", ".", "run", "assertThat", "(", ")", "(", ",", ")", "(", ")", "new", "new", "String", "this", ".", "context", "Class", "[", "]", "{", ",", "}", "[", "0", "]", "<", ">", "ExampleConfig", ".", "class", "Object", ".", "class", "?"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 78, "ast_depth": 12, "n_identifiers": 7, "vocab_size": 30, "n_whitespaces": 21, "n_words": 20, "nloc": 5, "token_counts": 51}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#797-804", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "exit", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#exit", "start_line": 797, "end_line": 804, "signature": "exit()", "original_code": "@Test\n\tvoid exit() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tthis.context = application.run();\n\t\tassertThat(this.context).isNotNull();\n\t\tassertThat(SpringApplication.exit(this.context)).isZero();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "exit", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "=", ".", "isNotNull", ".", "isZero", "new", "SpringApplication", "(", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "(", ")", "ExampleConfig", ".", "class", "this", ".", "context", "SpringApplication", ".", "exit", "(", ")", "this", ".", "context"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 99, "ast_depth": 11, "n_identifiers": 12, "vocab_size": 25, "n_whitespaces": 27, "n_words": 27, "nloc": 8, "token_counts": 65}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#806-816", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "exitWithExplicitCode", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#exitWithExplicitCode", "start_line": 806, "end_line": 816, "signature": "exitWithExplicitCode()", "original_code": "@Test\n\tvoid exitWithExplicitCode() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tExitCodeListener listener = new ExitCodeListener();\n\t\tapplication.addListeners(listener);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tthis.context = application.run();\n\t\tassertThat(this.context).isNotNull();\n\t\tassertThat(SpringApplication.exit(this.context, (ExitCodeGenerator) () -> 2)).isEqualTo(2);\n\t\tassertThat(listener.getExitCode()).isEqualTo(2);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "exitWithExplicitCode", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", "ExitCodeListener", ";", ";", ";", ";", ";", ";", ";", "application", "=", "listener", "=", "application", ".", "addListeners", "application", ".", "setWebApplicationType", "=", ".", "isNotNull", ".", "isEqualTo", ".", "isEqualTo", "new", "SpringApplication", "new", "ExitCodeListener", "(", "listener", ")", "(", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "assertThat", "(", "2", ")", "assertThat", "(", "2", ")", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "(", ")", "(", ")", "ExampleConfig", ".", "class", "this", ".", "context", "SpringApplication", ".", "exit", "listener", ".", "getExitCode", "(", ",", ")", "(", ")", "this", ".", "context", "(", "ExitCodeGenerator", ")", "->", "2", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 154, "ast_depth": 13, "n_identifiers": 16, "vocab_size": 34, "n_whitespaces": 44, "n_words": 42, "nloc": 11, "token_counts": 103}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#818-835", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "exitWithExplicitCodeFromException", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#exitWithExplicitCodeFromException", "start_line": 818, "end_line": 835, "signature": "exitWithExplicitCodeFromException()", "original_code": "@Test\n\tvoid exitWithExplicitCodeFromException() {\n\t\tfinal SpringBootExceptionHandler handler = mock(SpringBootExceptionHandler.class);\n\t\tSpringApplication application = new SpringApplication(ExitCodeCommandLineRunConfig.class) {\n\n\t\t\t@Override\n\t\t\tSpringBootExceptionHandler getSpringBootExceptionHandler() {\n\t\t\t\treturn handler;\n\t\t\t}\n\n\t\t};\n\t\tExitCodeListener listener = new ExitCodeListener();\n\t\tapplication.addListeners(listener);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tassertThatIllegalStateException().isThrownBy(application::run);\n\t\tthen(handler).should().registerExitCode(11);\n\t\tassertThat(listener.getExitCode()).isEqualTo(11);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "exitWithExplicitCodeFromException", "(", ")", "{", "}", "@", "Test", "SpringBootExceptionHandler", ";", "SpringApplication", ";", "ExitCodeListener", ";", ";", ";", ";", ";", ";", "final", "handler", "=", "application", "=", "listener", "=", "application", ".", "addListeners", "application", ".", "setWebApplicationType", ".", "isThrownBy", ".", "registerExitCode", ".", "isEqualTo", "mock", "new", "SpringApplication", "new", "ExitCodeListener", "(", "listener", ")", "(", ")", "assertThatIllegalStateException", "(", ")", ".", "should", "(", "11", ")", "assertThat", "(", "11", ")", "(", ")", "(", ")", "{", "}", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "application", "::", "run", "then", "(", ")", "(", ")", "SpringBootExceptionHandler", ".", "class", "ExitCodeCommandLineRunConfig", ".", "class", "SpringBootExceptionHandler", "getSpringBootExceptionHandler", "(", "handler", ")", "listener", ".", "getExitCode", "(", ")", "{", "}", "(", ")", "@", "Override", "return", "handler", ";"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 161, "ast_depth": 11, "n_identifiers": 21, "vocab_size": 40, "n_whitespaces": 68, "n_words": 45, "nloc": 16, "token_counts": 106}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#823-826", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "getSpringBootExceptionHandler", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#getSpringBootExceptionHandler", "start_line": 823, "end_line": 826, "signature": "getSpringBootExceptionHandler()", "original_code": "@Override\n\t\t\tSpringBootExceptionHandler getSpringBootExceptionHandler() {\n\t\t\t\treturn handler;\n\t\t\t}", "doc_comment": ""}, "code_tokens": ["SpringBootExceptionHandler", "getSpringBootExceptionHandler", "(", ")", "{", "}", "@", "Override", "return", "handler", ";"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 18, "ast_depth": 5, "n_identifiers": 3, "vocab_size": 11, "n_whitespaces": 16, "n_words": 5, "nloc": 4, "token_counts": 11}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#837-854", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "exitWithExplicitCodeFromMappedException", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#exitWithExplicitCodeFromMappedException", "start_line": 837, "end_line": 854, "signature": "exitWithExplicitCodeFromMappedException()", "original_code": "@Test\n\tvoid exitWithExplicitCodeFromMappedException() {\n\t\tfinal SpringBootExceptionHandler handler = mock(SpringBootExceptionHandler.class);\n\t\tSpringApplication application = new SpringApplication(MappedExitCodeCommandLineRunConfig.class) {\n\n\t\t\t@Override\n\t\t\tSpringBootExceptionHandler getSpringBootExceptionHandler() {\n\t\t\t\treturn handler;\n\t\t\t}\n\n\t\t};\n\t\tExitCodeListener listener = new ExitCodeListener();\n\t\tapplication.addListeners(listener);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tassertThatIllegalStateException().isThrownBy(application::run);\n\t\tthen(handler).should().registerExitCode(11);\n\t\tassertThat(listener.getExitCode()).isEqualTo(11);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "exitWithExplicitCodeFromMappedException", "(", ")", "{", "}", "@", "Test", "SpringBootExceptionHandler", ";", "SpringApplication", ";", "ExitCodeListener", ";", ";", ";", ";", ";", ";", "final", "handler", "=", "application", "=", "listener", "=", "application", ".", "addListeners", "application", ".", "setWebApplicationType", ".", "isThrownBy", ".", "registerExitCode", ".", "isEqualTo", "mock", "new", "SpringApplication", "new", "ExitCodeListener", "(", "listener", ")", "(", ")", "assertThatIllegalStateException", "(", ")", ".", "should", "(", "11", ")", "assertThat", "(", "11", ")", "(", ")", "(", ")", "{", "}", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "application", "::", "run", "then", "(", ")", "(", ")", "SpringBootExceptionHandler", ".", "class", "MappedExitCodeCommandLineRunConfig", ".", "class", "SpringBootExceptionHandler", "getSpringBootExceptionHandler", "(", "handler", ")", "listener", ".", "getExitCode", "(", ")", "{", "}", "(", ")", "@", "Override", "return", "handler", ";"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 161, "ast_depth": 11, "n_identifiers": 21, "vocab_size": 40, "n_whitespaces": 68, "n_words": 45, "nloc": 16, "token_counts": 106}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#842-845", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "getSpringBootExceptionHandler", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#getSpringBootExceptionHandler", "start_line": 842, "end_line": 845, "signature": "getSpringBootExceptionHandler()", "original_code": "@Override\n\t\t\tSpringBootExceptionHandler getSpringBootExceptionHandler() {\n\t\t\t\treturn handler;\n\t\t\t}", "doc_comment": ""}, "code_tokens": ["SpringBootExceptionHandler", "getSpringBootExceptionHandler", "(", ")", "{", "}", "@", "Override", "return", "handler", ";"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 18, "ast_depth": 5, "n_identifiers": 3, "vocab_size": 11, "n_whitespaces": 16, "n_words": 5, "nloc": 4, "token_counts": 11}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#856-875", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "exceptionFromRefreshIsHandledGracefully", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#exceptionFromRefreshIsHandledGracefully", "start_line": 856, "end_line": 875, "signature": "exceptionFromRefreshIsHandledGracefully(CapturedOutput output)", "original_code": "@Test\n\tvoid exceptionFromRefreshIsHandledGracefully(CapturedOutput output) {\n\t\tfinal SpringBootExceptionHandler handler = mock(SpringBootExceptionHandler.class);\n\t\tSpringApplication application = new SpringApplication(RefreshFailureConfig.class) {\n\n\t\t\t@Override\n\t\t\tSpringBootExceptionHandler getSpringBootExceptionHandler() {\n\t\t\t\treturn handler;\n\t\t\t}\n\n\t\t};\n\t\tExitCodeListener listener = new ExitCodeListener();\n\t\tapplication.addListeners(listener);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tassertThatExceptionOfType(RuntimeException.class).isThrownBy(application::run);\n\t\tthen(handler).should()\n\t\t\t.registerLoggedException(\n\t\t\t\t\tassertArg((exception) -> assertThat(exception).hasCauseInstanceOf(RefreshFailureException.class)));\n\t\tassertThat(output).doesNotContain(\"NullPointerException\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "exceptionFromRefreshIsHandledGracefully", "(", ")", "{", "}", "@", "Test", "CapturedOutput", "output", "SpringBootExceptionHandler", ";", "SpringApplication", ";", "ExitCodeListener", ";", ";", ";", ";", ";", ";", "final", "handler", "=", "application", "=", "listener", "=", "application", ".", "addListeners", "application", ".", "setWebApplicationType", ".", "isThrownBy", ".", "registerLoggedException", ".", "doesNotContain", "mock", "new", "SpringApplication", "new", "ExitCodeListener", "(", "listener", ")", "(", ")", "assertThatExceptionOfType", "(", ")", ".", "should", "(", ")", "assertThat", "(", ")", "(", ")", "(", ")", "{", "}", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "application", "::", "run", "then", "(", ")", "assertArg", "(", "output", ")", "\"", "NullPointerException", "\"", "SpringBootExceptionHandler", ".", "class", "RefreshFailureConfig", ".", "class", "SpringBootExceptionHandler", "getSpringBootExceptionHandler", "RuntimeException", ".", "class", "(", "handler", ")", "(", ")", "(", ")", "{", "}", "->", "@", "Override", "return", "handler", ";", "(", "exception", ")", ".", "hasCauseInstanceOf", "assertThat", "(", ")", "(", "exception", ")", "RefreshFailureException", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 191, "ast_depth": 13, "n_identifiers": 24, "vocab_size": 48, "n_whitespaces": 81, "n_words": 54, "nloc": 18, "token_counts": 126}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#861-864", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "getSpringBootExceptionHandler", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#getSpringBootExceptionHandler", "start_line": 861, "end_line": 864, "signature": "getSpringBootExceptionHandler()", "original_code": "@Override\n\t\t\tSpringBootExceptionHandler getSpringBootExceptionHandler() {\n\t\t\t\treturn handler;\n\t\t\t}", "doc_comment": ""}, "code_tokens": ["SpringBootExceptionHandler", "getSpringBootExceptionHandler", "(", ")", "{", "}", "@", "Override", "return", "handler", ";"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 18, "ast_depth": 5, "n_identifiers": 3, "vocab_size": 11, "n_whitespaces": 16, "n_words": 5, "nloc": 4, "token_counts": 11}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#877-887", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "defaultCommandLineArgs", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#defaultCommandLineArgs", "start_line": 877, "end_line": 887, "signature": "defaultCommandLineArgs()", "original_code": "@Test\n\tvoid defaultCommandLineArgs() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setDefaultProperties(\n\t\t\t\tStringUtils.splitArrayElementsIntoProperties(new String[] { \"baz=\", \"bar=spam\" }, \"=\"));\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tthis.context = application.run(\"--bar=foo\", \"bucket\", \"crap\");\n\t\tassertThat(this.context).isInstanceOf(AnnotationConfigApplicationContext.class);\n\t\tassertThat(getEnvironment().getProperty(\"bar\")).isEqualTo(\"foo\");\n\t\tassertThat(getEnvironment().getProperty(\"baz\")).isEmpty();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "defaultCommandLineArgs", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setDefaultProperties", "application", ".", "setWebApplicationType", "=", ".", "isInstanceOf", ".", "isEqualTo", ".", "isEmpty", "new", "SpringApplication", "(", ")", "(", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "(", ")", "StringUtils", ".", "splitArrayElementsIntoProperties", "WebApplicationType", ".", "NONE", "(", ",", ",", ")", "(", ")", "AnnotationConfigApplicationContext", ".", "class", "(", ")", "\"", "foo", "\"", "(", ")", "ExampleConfig", ".", "class", "(", ",", ")", "\"", "--bar=foo", "\"", "\"", "bucket", "\"", "\"", "crap", "\"", "this", ".", "context", ".", "getProperty", ".", "getProperty", "new", "String", "\"", "=", "\"", "getEnvironment", "(", ")", "getEnvironment", "(", ")", "[", "]", "{", ",", "}", "(", ")", "\"", "bar", "\"", "(", ")", "\"", "baz", "\"", "\"", "baz=", "\"", "\"", "bar=spam", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 192, "ast_depth": 12, "n_identifiers": 17, "vocab_size": 45, "n_whitespaces": 46, "n_words": 47, "nloc": 11, "token_counts": 130}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#889-902", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "defaultPropertiesShouldBeMerged", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#defaultPropertiesShouldBeMerged", "start_line": 889, "end_line": 902, "signature": "defaultPropertiesShouldBeMerged()", "original_code": "@Test\n\tvoid defaultPropertiesShouldBeMerged() {\n\t\tMockEnvironment environment = new MockEnvironment();\n\t\tenvironment.getPropertySources()\n\t\t\t.addFirst(new MapPropertySource(DefaultPropertiesPropertySource.NAME,\n\t\t\t\t\tCollections.singletonMap(\"bar\", \"foo\")));\n\t\tSpringApplication application = new SpringApplicationBuilder(ExampleConfig.class).environment(environment)\n\t\t\t.properties(\"baz=bing\")\n\t\t\t.web(WebApplicationType.NONE)\n\t\t\t.build();\n\t\tthis.context = application.run();\n\t\tassertThat(getEnvironment().getProperty(\"bar\")).isEqualTo(\"foo\");\n\t\tassertThat(getEnvironment().getProperty(\"baz\")).isEqualTo(\"bing\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "defaultPropertiesShouldBeMerged", "(", ")", "{", "}", "@", "Test", "MockEnvironment", ";", ";", "SpringApplication", ";", ";", ";", ";", "environment", "=", ".", "addFirst", "application", "=", "=", ".", "isEqualTo", ".", "isEqualTo", "new", "MockEnvironment", "environment", ".", "getPropertySources", "(", ")", ".", "build", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "assertThat", "(", ")", "(", ")", "(", ")", "new", "MapPropertySource", ".", "web", "(", ")", "(", ")", "(", ")", "\"", "foo", "\"", "(", ")", "\"", "bing", "\"", "(", ",", ")", ".", "properties", "(", ")", ".", "getProperty", ".", "getProperty", "DefaultPropertiesPropertySource", ".", "NAME", "Collections", ".", "singletonMap", ".", "environment", "(", ")", "WebApplicationType", ".", "NONE", "getEnvironment", "(", ")", "getEnvironment", "(", ")", "(", ",", ")", "new", "SpringApplicationBuilder", "(", "environment", ")", "\"", "baz=bing", "\"", "(", ")", "\"", "bar", "\"", "(", ")", "\"", "baz", "\"", "\"", "bar", "\"", "\"", "foo", "\"", "(", ")", "ExampleConfig", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 196, "ast_depth": 13, "n_identifiers": 21, "vocab_size": 45, "n_whitespaces": 58, "n_words": 49, "nloc": 14, "token_counts": 132}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#904-910", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "commandLineArgsApplyToSpringApplication", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#commandLineArgsApplyToSpringApplication", "start_line": 904, "end_line": 910, "signature": "commandLineArgsApplyToSpringApplication()", "original_code": "@Test\n\tvoid commandLineArgsApplyToSpringApplication() {\n\t\tTestSpringApplication application = new TestSpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tthis.context = application.run(\"--spring.main.banner-mode=OFF\");\n\t\tassertThat(application.getBannerMode()).isEqualTo(Banner.Mode.OFF);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "commandLineArgsApplyToSpringApplication", "(", ")", "{", "}", "@", "Test", "TestSpringApplication", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "=", ".", "isEqualTo", "new", "TestSpringApplication", "(", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", ".", "OFF", "ExampleConfig", ".", "class", "\"", "--spring.main.banner-mode=OFF", "\"", "application", ".", "getBannerMode", "Banner", ".", "Mode", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 89, "ast_depth": 10, "n_identifiers": 14, "vocab_size": 30, "n_whitespaces": 24, "n_words": 29, "nloc": 7, "token_counts": 59}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#912-918", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "registerShutdownHook", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#registerShutdownHook", "start_line": 912, "end_line": 918, "signature": "registerShutdownHook()", "original_code": "@Test\n\tvoid registerShutdownHook() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tthis.context = application.run();\n\t\tassertThat(SpringApplicationShutdownHookInstance.get()).registeredApplicationContext(this.context);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "registerShutdownHook", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "=", ".", "registeredApplicationContext", "new", "SpringApplication", "(", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "this", ".", "context", "ExampleConfig", ".", "class", "SpringApplicationShutdownHookInstance", ".", "get", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 82, "ast_depth": 10, "n_identifiers": 12, "vocab_size": 26, "n_whitespaces": 24, "n_words": 23, "nloc": 7, "token_counts": 54}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#920-927", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "registerShutdownHookOff", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#registerShutdownHookOff", "start_line": 920, "end_line": 927, "signature": "registerShutdownHookOff()", "original_code": "@Test\n\tvoid registerShutdownHookOff() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tapplication.setRegisterShutdownHook(false);\n\t\tthis.context = application.run();\n\t\tassertThat(SpringApplicationShutdownHookInstance.get()).didNotRegisterApplicationContext(this.context);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "registerShutdownHookOff", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "application", ".", "setRegisterShutdownHook", "=", ".", "didNotRegisterApplicationContext", "new", "SpringApplication", "(", ")", "(", "false", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "this", ".", "context", "ExampleConfig", ".", "class", "SpringApplicationShutdownHookInstance", ".", "get", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 92, "ast_depth": 10, "n_identifiers": 13, "vocab_size": 28, "n_whitespaces": 27, "n_words": 26, "nloc": 8, "token_counts": 61}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#929-939", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "registerListener", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#registerListener", "start_line": 929, "end_line": 939, "signature": "registerListener()", "original_code": "@Test\n\tvoid registerListener() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class, ListenerConfig.class);\n\t\tapplication.setApplicationContextFactory(ApplicationContextFactory.ofContextClass(SpyApplicationContext.class));\n\t\tSet<ApplicationEvent> events = new LinkedHashSet<>();\n\t\tapplication.addListeners((ApplicationListener<ApplicationEvent>) events::add);\n\t\tthis.context = application.run();\n\t\tassertThat(events).hasAtLeastOneElementOfType(ApplicationPreparedEvent.class);\n\t\tassertThat(events).hasAtLeastOneElementOfType(ContextRefreshedEvent.class);\n\t\tverifyRegisteredListenerSuccessEvents();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "registerListener", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setApplicationContextFactory", "Set", "events", "=", "application", ".", "addListeners", "=", ".", "hasAtLeastOneElementOfType", ".", "hasAtLeastOneElementOfType", "verifyRegisteredListenerSuccessEvents", "new", "SpringApplication", "(", ")", "<", "ApplicationEvent", ">", "new", "(", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "assertThat", "(", ")", "(", ")", "(", ",", ")", "ApplicationContextFactory", ".", "ofContextClass", "LinkedHashSet", "(", ")", "(", ")", "(", ")", "(", "events", ")", "ApplicationPreparedEvent", ".", "class", "(", "events", ")", "ContextRefreshedEvent", ".", "class", "ExampleConfig", ".", "class", "ListenerConfig", ".", "class", "(", ")", "<", ">", "ApplicationListener", "events", "::", "add", "SpyApplicationContext", ".", "class", "<", "ApplicationEvent", ">"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 156, "ast_depth": 10, "n_identifiers": 14, "vocab_size": 40, "n_whitespaces": 42, "n_words": 43, "nloc": 11, "token_counts": 103}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#941-952", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "registerListenerWithCustomMulticaster", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#registerListenerWithCustomMulticaster", "start_line": 941, "end_line": 952, "signature": "registerListenerWithCustomMulticaster()", "original_code": "@Test\n\tvoid registerListenerWithCustomMulticaster() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class, ListenerConfig.class,\n\t\t\t\tMulticaster.class);\n\t\tapplication.setApplicationContextFactory(ApplicationContextFactory.ofContextClass(SpyApplicationContext.class));\n\t\tSet<ApplicationEvent> events = new LinkedHashSet<>();\n\t\tapplication.addListeners((ApplicationListener<ApplicationEvent>) events::add);\n\t\tthis.context = application.run();\n\t\tassertThat(events).hasAtLeastOneElementOfType(ApplicationPreparedEvent.class);\n\t\tassertThat(events).hasAtLeastOneElementOfType(ContextRefreshedEvent.class);\n\t\tverifyRegisteredListenerSuccessEvents();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "registerListenerWithCustomMulticaster", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setApplicationContextFactory", "Set", "events", "=", "application", ".", "addListeners", "=", ".", "hasAtLeastOneElementOfType", ".", "hasAtLeastOneElementOfType", "verifyRegisteredListenerSuccessEvents", "new", "SpringApplication", "(", ")", "<", "ApplicationEvent", ">", "new", "(", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "assertThat", "(", ")", "(", ")", "(", ",", ",", ")", "ApplicationContextFactory", ".", "ofContextClass", "LinkedHashSet", "(", ")", "(", ")", "(", ")", "(", "events", ")", "ApplicationPreparedEvent", ".", "class", "(", "events", ")", "ContextRefreshedEvent", ".", "class", "ExampleConfig", ".", "class", "ListenerConfig", ".", "class", "Multicaster", ".", "class", "(", ")", "<", ">", "ApplicationListener", "events", "::", "add", "SpyApplicationContext", ".", "class", "<", "ApplicationEvent", ">"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 161, "ast_depth": 10, "n_identifiers": 14, "vocab_size": 41, "n_whitespaces": 47, "n_words": 45, "nloc": 12, "token_counts": 107}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#954-967", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "verifyRegisteredListenerSuccessEvents", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#verifyRegisteredListenerSuccessEvents", "start_line": 954, "end_line": 967, "signature": "verifyRegisteredListenerSuccessEvents()", "original_code": "@SuppressWarnings(\"unchecked\")\n\tprivate void verifyRegisteredListenerSuccessEvents() {\n\t\tApplicationListener<ApplicationEvent> listener = this.context.getBean(\"testApplicationListener\",\n\t\t\t\tApplicationListener.class);\n\t\tInOrder inOrder = Mockito.inOrder(listener);\n\t\tthen(listener).should(inOrder).onApplicationEvent(isA(ContextRefreshedEvent.class));\n\t\tthen(listener).should(inOrder).onApplicationEvent(isA(ApplicationStartedEvent.class));\n\t\tthen(listener).should(inOrder)\n\t\t\t.onApplicationEvent(argThat(isAvailabilityChangeEventWithState(LivenessState.CORRECT)));\n\t\tthen(listener).should(inOrder).onApplicationEvent(isA(ApplicationReadyEvent.class));\n\t\tthen(listener).should(inOrder)\n\t\t\t.onApplicationEvent(argThat(isAvailabilityChangeEventWithState(ReadinessState.ACCEPTING_TRAFFIC)));\n\t\tinOrder.verifyNoMoreInteractions();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "verifyRegisteredListenerSuccessEvents", "private", "(", ")", "{", "}", "@", "SuppressWarnings", ";", "InOrder", ";", ";", ";", ";", ";", ";", ";", "(", ")", "ApplicationListener", "listener", "=", "inOrder", "=", ".", "onApplicationEvent", ".", "onApplicationEvent", ".", "onApplicationEvent", ".", "onApplicationEvent", ".", "onApplicationEvent", "inOrder", ".", "verifyNoMoreInteractions", "\"", "unchecked", "\"", "<", "ApplicationEvent", ">", ".", "getBean", "Mockito", ".", "inOrder", ".", "should", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", "(", ")", "this", ".", "context", "(", ",", ")", "(", "listener", ")", "then", "(", "inOrder", ")", "isA", "then", "(", "inOrder", ")", "isA", "then", "(", "inOrder", ")", "argThat", "then", "(", "inOrder", ")", "isA", "then", "(", "inOrder", ")", "argThat", "\"", "testApplicationListener", "\"", "ApplicationListener", ".", "class", "(", "listener", ")", "(", ")", "(", "listener", ")", "(", ")", "(", "listener", ")", "(", ")", "(", "listener", ")", "(", ")", "(", "listener", ")", "(", ")", "ContextRefreshedEvent", ".", "class", "ApplicationStartedEvent", ".", "class", "isAvailabilityChangeEventWithState", "ApplicationReadyEvent", ".", "class", "isAvailabilityChangeEventWithState", "(", ")", "(", ")", "LivenessState", ".", "CORRECT", "ReadinessState", ".", "ACCEPTING_TRAFFIC"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 235, "ast_depth": 12, "n_identifiers": 18, "vocab_size": 42, "n_whitespaces": 50, "n_words": 63, "nloc": 14, "token_counts": 157}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#969-977", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "applicationListenerFromApplicationIsCalledWhenContextFailsRefreshBeforeListenerRegistration", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#applicationListenerFromApplicationIsCalledWhenContextFailsRefreshBeforeListenerRegistration", "start_line": 969, "end_line": 977, "signature": "applicationListenerFromApplicationIsCalledWhenContextFailsRefreshBeforeListenerRegistration()", "original_code": "@SuppressWarnings(\"unchecked\")\n\t@Test\n\tvoid applicationListenerFromApplicationIsCalledWhenContextFailsRefreshBeforeListenerRegistration() {\n\t\tApplicationListener<ApplicationEvent> listener = mock(ApplicationListener.class);\n\t\tSpringApplication application = new SpringApplication(BrokenBeanFactoryPostProcessing.class);\n\t\tapplication.addListeners(listener);\n\t\tassertThatExceptionOfType(ApplicationContextException.class).isThrownBy(application::run);\n\t\tverifyRegisteredListenerFailedFromApplicationEvents(listener);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "applicationListenerFromApplicationIsCalledWhenContextFailsRefreshBeforeListenerRegistration", "(", ")", "{", "}", "@", "SuppressWarnings", "@", "Test", ";", "SpringApplication", ";", ";", ";", ";", "(", ")", "ApplicationListener", "listener", "=", "application", "=", "application", ".", "addListeners", ".", "isThrownBy", "verifyRegisteredListenerFailedFromApplicationEvents", "\"", "unchecked", "\"", "<", "ApplicationEvent", ">", "mock", "new", "SpringApplication", "(", "listener", ")", "assertThatExceptionOfType", "(", ")", "(", "listener", ")", "(", ")", "(", ")", "(", ")", "application", "::", "run", "ApplicationListener", ".", "class", "BrokenBeanFactoryPostProcessing", ".", "class", "ApplicationContextException", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 99, "ast_depth": 9, "n_identifiers": 11, "vocab_size": 32, "n_whitespaces": 30, "n_words": 28, "nloc": 9, "token_counts": 65}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#979-988", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "applicationListenerFromApplicationIsCalledWhenContextFailsRefreshAfterListenerRegistration", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#applicationListenerFromApplicationIsCalledWhenContextFailsRefreshAfterListenerRegistration", "start_line": 979, "end_line": 988, "signature": "applicationListenerFromApplicationIsCalledWhenContextFailsRefreshAfterListenerRegistration()", "original_code": "@SuppressWarnings(\"unchecked\")\n\t@Test\n\tvoid applicationListenerFromApplicationIsCalledWhenContextFailsRefreshAfterListenerRegistration() {\n\t\tApplicationListener<ApplicationEvent> listener = mock(ApplicationListener.class);\n\t\tSpringApplication application = new SpringApplication(BrokenPostConstructConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tapplication.addListeners(listener);\n\t\tassertThatExceptionOfType(BeanCreationException.class).isThrownBy(application::run);\n\t\tverifyRegisteredListenerFailedFromApplicationEvents(listener);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "applicationListenerFromApplicationIsCalledWhenContextFailsRefreshAfterListenerRegistration", "(", ")", "{", "}", "@", "SuppressWarnings", "@", "Test", ";", "SpringApplication", ";", ";", ";", ";", ";", "(", ")", "ApplicationListener", "listener", "=", "application", "=", "application", ".", "setWebApplicationType", "application", ".", "addListeners", ".", "isThrownBy", "verifyRegisteredListenerFailedFromApplicationEvents", "\"", "unchecked", "\"", "<", "ApplicationEvent", ">", "mock", "new", "SpringApplication", "(", ")", "(", "listener", ")", "assertThatExceptionOfType", "(", ")", "(", "listener", ")", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "application", "::", "run", "ApplicationListener", ".", "class", "BrokenPostConstructConfig", ".", "class", "BeanCreationException", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 112, "ast_depth": 9, "n_identifiers": 14, "vocab_size": 35, "n_whitespaces": 33, "n_words": 32, "nloc": 10, "token_counts": 74}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#990-998", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "verifyRegisteredListenerFailedFromApplicationEvents", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#verifyRegisteredListenerFailedFromApplicationEvents", "start_line": 990, "end_line": 998, "signature": "verifyRegisteredListenerFailedFromApplicationEvents(ApplicationListener<ApplicationEvent> listener)", "original_code": "private void verifyRegisteredListenerFailedFromApplicationEvents(ApplicationListener<ApplicationEvent> listener) {\n\t\tInOrder inOrder = Mockito.inOrder(listener);\n\t\tthen(listener).should(inOrder).onApplicationEvent(isA(ApplicationStartingEvent.class));\n\t\tthen(listener).should(inOrder).onApplicationEvent(isA(ApplicationEnvironmentPreparedEvent.class));\n\t\tthen(listener).should(inOrder).onApplicationEvent(isA(ApplicationContextInitializedEvent.class));\n\t\tthen(listener).should(inOrder).onApplicationEvent(isA(ApplicationPreparedEvent.class));\n\t\tthen(listener).should(inOrder).onApplicationEvent(isA(ApplicationFailedEvent.class));\n\t\tinOrder.verifyNoMoreInteractions();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "verifyRegisteredListenerFailedFromApplicationEvents", "private", "(", ")", "{", "}", "listener", "InOrder", ";", ";", ";", ";", ";", ";", ";", "ApplicationListener", "inOrder", "=", ".", "onApplicationEvent", ".", "onApplicationEvent", ".", "onApplicationEvent", ".", "onApplicationEvent", ".", "onApplicationEvent", "inOrder", ".", "verifyNoMoreInteractions", "<", "ApplicationEvent", ">", "Mockito", ".", "inOrder", ".", "should", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", "(", ")", "(", "listener", ")", "then", "(", "inOrder", ")", "isA", "then", "(", "inOrder", ")", "isA", "then", "(", "inOrder", ")", "isA", "then", "(", "inOrder", ")", "isA", "then", "(", "inOrder", ")", "isA", "(", "listener", ")", "(", ")", "(", "listener", ")", "(", ")", "(", "listener", ")", "(", ")", "(", "listener", ")", "(", ")", "(", "listener", ")", "(", ")", "ApplicationStartingEvent", ".", "class", "ApplicationEnvironmentPreparedEvent", ".", "class", "ApplicationContextInitializedEvent", ".", "class", "ApplicationPreparedEvent", ".", "class", "ApplicationFailedEvent", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 193, "ast_depth": 10, "n_identifiers": 9, "vocab_size": 29, "n_whitespaces": 30, "n_words": 53, "nloc": 9, "token_counts": 128}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1000-1009", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "applicationListenerFromContextIsCalledWhenContextFailsRefreshBeforeListenerRegistration", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#applicationListenerFromContextIsCalledWhenContextFailsRefreshBeforeListenerRegistration", "start_line": 1000, "end_line": 1009, "signature": "applicationListenerFromContextIsCalledWhenContextFailsRefreshBeforeListenerRegistration()", "original_code": "@SuppressWarnings(\"unchecked\")\n\t@Test\n\tvoid applicationListenerFromContextIsCalledWhenContextFailsRefreshBeforeListenerRegistration() {\n\t\tfinal ApplicationListener<ApplicationEvent> listener = mock(ApplicationListener.class);\n\t\tSpringApplication application = new SpringApplication(BrokenBeanFactoryPostProcessing.class);\n\t\tapplication.addInitializers((applicationContext) -> applicationContext.addApplicationListener(listener));\n\t\tassertThatExceptionOfType(ApplicationContextException.class).isThrownBy(application::run);\n\t\tthen(listener).should().onApplicationEvent(isA(ApplicationFailedEvent.class));\n\t\tthen(listener).shouldHaveNoMoreInteractions();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "applicationListenerFromContextIsCalledWhenContextFailsRefreshBeforeListenerRegistration", "(", ")", "{", "}", "@", "SuppressWarnings", "@", "Test", ";", "SpringApplication", ";", ";", ";", ";", ";", "(", ")", "final", "ApplicationListener", "listener", "=", "application", "=", "application", ".", "addInitializers", ".", "isThrownBy", ".", "onApplicationEvent", ".", "shouldHaveNoMoreInteractions", "\"", "unchecked", "\"", "<", "ApplicationEvent", ">", "mock", "new", "SpringApplication", "(", ")", "assertThatExceptionOfType", "(", ")", ".", "should", "(", ")", "then", "(", ")", "(", ")", "(", ")", "->", "(", ")", "application", "::", "run", "then", "(", ")", "isA", "(", "listener", ")", "ApplicationListener", ".", "class", "BrokenBeanFactoryPostProcessing", ".", "class", "(", "applicationContext", ")", "applicationContext", ".", "addApplicationListener", "ApplicationContextException", ".", "class", "(", "listener", ")", "(", ")", "(", "listener", ")", "ApplicationFailedEvent", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 149, "ast_depth": 10, "n_identifiers": 17, "vocab_size": 41, "n_whitespaces": 36, "n_words": 40, "nloc": 10, "token_counts": 98}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1011-1021", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "applicationListenerFromContextIsCalledWhenContextFailsRefreshAfterListenerRegistration", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#applicationListenerFromContextIsCalledWhenContextFailsRefreshAfterListenerRegistration", "start_line": 1011, "end_line": 1021, "signature": "applicationListenerFromContextIsCalledWhenContextFailsRefreshAfterListenerRegistration()", "original_code": "@SuppressWarnings(\"unchecked\")\n\t@Test\n\tvoid applicationListenerFromContextIsCalledWhenContextFailsRefreshAfterListenerRegistration() {\n\t\tApplicationListener<ApplicationEvent> listener = mock(ApplicationListener.class);\n\t\tSpringApplication application = new SpringApplication(BrokenPostConstructConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tapplication.addInitializers((applicationContext) -> applicationContext.addApplicationListener(listener));\n\t\tassertThatExceptionOfType(BeanCreationException.class).isThrownBy(application::run);\n\t\tthen(listener).should().onApplicationEvent(isA(ApplicationFailedEvent.class));\n\t\tthen(listener).shouldHaveNoMoreInteractions();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "applicationListenerFromContextIsCalledWhenContextFailsRefreshAfterListenerRegistration", "(", ")", "{", "}", "@", "SuppressWarnings", "@", "Test", ";", "SpringApplication", ";", ";", ";", ";", ";", ";", "(", ")", "ApplicationListener", "listener", "=", "application", "=", "application", ".", "setWebApplicationType", "application", ".", "addInitializers", ".", "isThrownBy", ".", "onApplicationEvent", ".", "shouldHaveNoMoreInteractions", "\"", "unchecked", "\"", "<", "ApplicationEvent", ">", "mock", "new", "SpringApplication", "(", ")", "(", ")", "assertThatExceptionOfType", "(", ")", ".", "should", "(", ")", "then", "(", ")", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "->", "(", ")", "application", "::", "run", "then", "(", ")", "isA", "(", "listener", ")", "ApplicationListener", ".", "class", "BrokenPostConstructConfig", ".", "class", "(", "applicationContext", ")", "applicationContext", ".", "addApplicationListener", "BeanCreationException", ".", "class", "(", "listener", ")", "(", ")", "(", "listener", ")", "ApplicationFailedEvent", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 160, "ast_depth": 10, "n_identifiers": 20, "vocab_size": 43, "n_whitespaces": 38, "n_words": 43, "nloc": 11, "token_counts": 106}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1023-1029", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "headless", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#headless", "start_line": 1023, "end_line": 1029, "signature": "headless()", "original_code": "@Test\n\tvoid headless() {\n\t\tTestSpringApplication application = new TestSpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tthis.context = application.run();\n\t\tassertThat(System.getProperty(\"java.awt.headless\")).isEqualTo(\"true\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "headless", "(", ")", "{", "}", "@", "Test", "TestSpringApplication", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "=", ".", "isEqualTo", "new", "TestSpringApplication", "(", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "\"", "true", "\"", "ExampleConfig", ".", "class", "System", ".", "getProperty", "(", ")", "\"", "java.awt.headless", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 86, "ast_depth": 11, "n_identifiers": 12, "vocab_size": 29, "n_whitespaces": 24, "n_words": 25, "nloc": 7, "token_counts": 57}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1031-1038", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "headlessFalse", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#headlessFalse", "start_line": 1031, "end_line": 1038, "signature": "headlessFalse()", "original_code": "@Test\n\tvoid headlessFalse() {\n\t\tTestSpringApplication application = new TestSpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tapplication.setHeadless(false);\n\t\tthis.context = application.run();\n\t\tassertThat(System.getProperty(\"java.awt.headless\")).isEqualTo(\"false\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "headlessFalse", "(", ")", "{", "}", "@", "Test", "TestSpringApplication", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "application", ".", "setHeadless", "=", ".", "isEqualTo", "new", "TestSpringApplication", "(", ")", "(", "false", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "\"", "false", "\"", "ExampleConfig", ".", "class", "System", ".", "getProperty", "(", ")", "\"", "java.awt.headless", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 96, "ast_depth": 11, "n_identifiers": 13, "vocab_size": 30, "n_whitespaces": 27, "n_words": 28, "nloc": 8, "token_counts": 64}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1040-1047", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "headlessSystemPropertyTakesPrecedence", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#headlessSystemPropertyTakesPrecedence", "start_line": 1040, "end_line": 1047, "signature": "headlessSystemPropertyTakesPrecedence()", "original_code": "@Test\n\tvoid headlessSystemPropertyTakesPrecedence() {\n\t\tSystem.setProperty(\"java.awt.headless\", \"false\");\n\t\tTestSpringApplication application = new TestSpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tthis.context = application.run();\n\t\tassertThat(System.getProperty(\"java.awt.headless\")).isEqualTo(\"false\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "headlessSystemPropertyTakesPrecedence", "(", ")", "{", "}", "@", "Test", ";", "TestSpringApplication", ";", ";", ";", ";", "System", ".", "setProperty", "application", "=", "application", ".", "setWebApplicationType", "=", ".", "isEqualTo", "(", ",", ")", "new", "TestSpringApplication", "(", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "\"", "java.awt.headless", "\"", "\"", "false", "\"", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "\"", "false", "\"", "ExampleConfig", ".", "class", "System", ".", "getProperty", "(", ")", "\"", "java.awt.headless", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 104, "ast_depth": 11, "n_identifiers": 13, "vocab_size": 31, "n_whitespaces": 28, "n_words": 31, "nloc": 8, "token_counts": 70}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1049-1057", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "getApplicationArgumentsBean", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#getApplicationArgumentsBean", "start_line": 1049, "end_line": 1057, "signature": "getApplicationArgumentsBean()", "original_code": "@Test\n\tvoid getApplicationArgumentsBean() {\n\t\tTestSpringApplication application = new TestSpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tthis.context = application.run(\"--debug\", \"spring\", \"boot\");\n\t\tApplicationArguments args = this.context.getBean(ApplicationArguments.class);\n\t\tassertThat(args.getNonOptionArgs()).containsExactly(\"spring\", \"boot\");\n\t\tassertThat(args.containsOption(\"debug\")).isTrue();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "getApplicationArgumentsBean", "(", ")", "{", "}", "@", "Test", "TestSpringApplication", ";", ";", ";", "ApplicationArguments", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "=", "args", "=", ".", "containsExactly", ".", "isTrue", "new", "TestSpringApplication", "(", ")", "this", ".", "context", "application", ".", "run", ".", "getBean", "assertThat", "(", ",", ")", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ",", ",", ")", "this", ".", "context", "(", ")", "(", ")", "\"", "spring", "\"", "\"", "boot", "\"", "(", ")", "ExampleConfig", ".", "class", "\"", "--debug", "\"", "\"", "spring", "\"", "\"", "boot", "\"", "ApplicationArguments", ".", "class", "args", ".", "getNonOptionArgs", "args", ".", "containsOption", "(", ")", "(", ")", "\"", "debug", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 145, "ast_depth": 11, "n_identifiers": 15, "vocab_size": 36, "n_whitespaces": 36, "n_words": 38, "nloc": 9, "token_counts": 99}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1059-1065", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "nonWebApplicationConfiguredViaAPropertyHasTheCorrectTypeOfContextAndEnvironment", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#nonWebApplicationConfiguredViaAPropertyHasTheCorrectTypeOfContextAndEnvironment", "start_line": 1059, "end_line": 1065, "signature": "nonWebApplicationConfiguredViaAPropertyHasTheCorrectTypeOfContextAndEnvironment()", "original_code": "@Test\n\tvoid nonWebApplicationConfiguredViaAPropertyHasTheCorrectTypeOfContextAndEnvironment() {\n\t\tConfigurableApplicationContext context = new SpringApplication(ExampleConfig.class)\n\t\t\t.run(\"--spring.main.web-application-type=none\");\n\t\tassertThat(context).isNotInstanceOfAny(WebApplicationContext.class, ReactiveWebApplicationContext.class);\n\t\tassertThat(context.getEnvironment()).isNotInstanceOfAny(ConfigurableWebEnvironment.class);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "nonWebApplicationConfiguredViaAPropertyHasTheCorrectTypeOfContextAndEnvironment", "(", ")", "{", "}", "@", "Test", "ConfigurableApplicationContext", ";", ";", ";", "context", "=", ".", "isNotInstanceOfAny", ".", "isNotInstanceOfAny", ".", "run", "assertThat", "(", ",", ")", "assertThat", "(", ")", "new", "SpringApplication", "(", ")", "(", "context", ")", "WebApplicationContext", ".", "class", "ReactiveWebApplicationContext", ".", "class", "(", ")", "ConfigurableWebEnvironment", ".", "class", "(", ")", "\"", "--spring.main.web-application-type=none", "\"", "context", ".", "getEnvironment", "ExampleConfig", ".", "class", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 87, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 27, "n_whitespaces": 24, "n_words": 29, "nloc": 7, "token_counts": 58}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1067-1083", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "failureResultsInSingleStackTrace", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#failureResultsInSingleStackTrace", "start_line": 1067, "end_line": 1083, "signature": "failureResultsInSingleStackTrace(CapturedOutput output)", "original_code": "@Test\n\tvoid failureResultsInSingleStackTrace(CapturedOutput output) throws Exception {\n\t\tThreadGroup group = new ThreadGroup(\"main\");\n\t\tThread thread = new Thread(group, \"main\") {\n\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tSpringApplication application = new SpringApplication(FailingConfig.class);\n\t\t\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\t\t\tapplication.run();\n\t\t\t}\n\n\t\t};\n\t\tthread.start();\n\t\tthread.join(6000);\n\t\tassertThat(output).containsOnlyOnce(\"Caused by: java.lang.RuntimeException: ExpectedError\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "failureResultsInSingleStackTrace", "(", ")", "throws", "Exception", "{", "}", "@", "Test", "CapturedOutput", "output", "ThreadGroup", ";", "Thread", ";", ";", ";", ";", "group", "=", "thread", "=", "thread", ".", "start", "thread", ".", "join", ".", "containsOnlyOnce", "new", "ThreadGroup", "new", "Thread", "(", ")", "(", "6000", ")", "assertThat", "(", ")", "(", ")", "(", "group", ",", ")", "{", "}", "(", "output", ")", "\"", "Caused by: java.lang.RuntimeException: ExpectedError", "\"", "\"", "main", "\"", "\"", "main", "\"", "void", "run", "public", "(", ")", "{", "}", "@", "Override", "SpringApplication", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "application", ".", "run", "new", "SpringApplication", "(", ")", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "FailingConfig", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 146, "ast_depth": 15, "n_identifiers": 15, "vocab_size": 39, "n_whitespaces": 76, "n_words": 48, "nloc": 15, "token_counts": 98}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1072-1077", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "run", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#run", "start_line": 1072, "end_line": 1077, "signature": "run()", "original_code": "@Override\n\t\t\tpublic void run() {\n\t\t\t\tSpringApplication application = new SpringApplication(FailingConfig.class);\n\t\t\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\t\t\tapplication.run();\n\t\t\t}", "doc_comment": ""}, "code_tokens": ["void", "run", "public", "(", ")", "{", "}", "@", "Override", "SpringApplication", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "application", ".", "run", "new", "SpringApplication", "(", ")", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "FailingConfig", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 53, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 20, "n_whitespaces": 30, "n_words": 16, "nloc": 6, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1085-1089", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "beanDefinitionOverridingIsDisabledByDefault", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#beanDefinitionOverridingIsDisabledByDefault", "start_line": 1085, "end_line": 1089, "signature": "beanDefinitionOverridingIsDisabledByDefault()", "original_code": "@Test\n\tvoid beanDefinitionOverridingIsDisabledByDefault() {\n\t\tassertThatExceptionOfType(BeanDefinitionOverrideException.class)\n\t\t\t.isThrownBy(() -> new SpringApplication(ExampleConfig.class, OverrideConfig.class).run());\n\t}", "doc_comment": ""}, "code_tokens": ["void", "beanDefinitionOverridingIsDisabledByDefault", "(", ")", "{", "}", "@", "Test", ";", ".", "isThrownBy", "assertThatExceptionOfType", "(", ")", "(", ")", "->", "BeanDefinitionOverrideException", ".", "class", "(", ")", ".", "run", "new", "SpringApplication", "(", ")", "(", ",", ")", "ExampleConfig", ".", "class", "OverrideConfig", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 57, "ast_depth": 12, "n_identifiers": 5, "vocab_size": 21, "n_whitespaces": 17, "n_words": 14, "nloc": 5, "token_counts": 37}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1091-1096", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "beanDefinitionOverridingCanBeEnabled", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#beanDefinitionOverridingCanBeEnabled", "start_line": 1091, "end_line": 1096, "signature": "beanDefinitionOverridingCanBeEnabled()", "original_code": "@Test\n\tvoid beanDefinitionOverridingCanBeEnabled() {\n\t\tassertThat(new SpringApplication(ExampleConfig.class, OverrideConfig.class)\n\t\t\t.run(\"--spring.main.allow-bean-definition-overriding=true\", \"--spring.main.web-application-type=none\")\n\t\t\t.getBean(\"someBean\")).isEqualTo(\"override\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "beanDefinitionOverridingCanBeEnabled", "(", ")", "{", "}", "@", "Test", ";", ".", "isEqualTo", "assertThat", "(", ")", "(", ")", "\"", "override", "\"", ".", "getBean", ".", "run", "(", ")", "new", "SpringApplication", "(", ",", ")", "\"", "someBean", "\"", "(", ",", ")", "\"", "--spring.main.allow-bean-definition-overriding=true", "\"", "\"", "--spring.main.web-application-type=none", "\"", "ExampleConfig", ".", "class", "OverrideConfig", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 71, "ast_depth": 13, "n_identifiers": 6, "vocab_size": 25, "n_whitespaces": 20, "n_words": 28, "nloc": 6, "token_counts": 48}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1098-1105", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "circularReferencesAreDisabledByDefault", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#circularReferencesAreDisabledByDefault", "start_line": 1098, "end_line": 1105, "signature": "circularReferencesAreDisabledByDefault()", "original_code": "@Test\n\tvoid circularReferencesAreDisabledByDefault() {\n\t\tassertThatExceptionOfType(UnsatisfiedDependencyException.class)\n\t\t\t.isThrownBy(\n\t\t\t\t\t() -> new SpringApplication(ExampleProducerConfiguration.class, ExampleConsumerConfiguration.class)\n\t\t\t\t\t\t.run(\"--spring.main.web-application-type=none\"))\n\t\t\t.withRootCauseInstanceOf(BeanCurrentlyInCreationException.class);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "circularReferencesAreDisabledByDefault", "(", ")", "{", "}", "@", "Test", ";", ".", "withRootCauseInstanceOf", ".", "isThrownBy", "(", ")", "assertThatExceptionOfType", "(", ")", "BeanCurrentlyInCreationException", ".", "class", "(", ")", "->", "UnsatisfiedDependencyException", ".", "class", "(", ")", ".", "run", "new", "SpringApplication", "(", ")", "(", ",", ")", "\"", "--spring.main.web-application-type=none", "\"", "ExampleProducerConfiguration", ".", "class", "ExampleConsumerConfiguration", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 71, "ast_depth": 13, "n_identifiers": 6, "vocab_size": 25, "n_whitespaces": 34, "n_words": 23, "nloc": 8, "token_counts": 47}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1107-1112", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "circularReferencesCanBeEnabled", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#circularReferencesCanBeEnabled", "start_line": 1107, "end_line": 1112, "signature": "circularReferencesCanBeEnabled()", "original_code": "@Test\n\tvoid circularReferencesCanBeEnabled() {\n\t\tassertThatNoException().isThrownBy(\n\t\t\t\t() -> new SpringApplication(ExampleProducerConfiguration.class, ExampleConsumerConfiguration.class)\n\t\t\t\t\t.run(\"--spring.main.web-application-type=none\", \"--spring.main.allow-circular-references=true\"));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "circularReferencesCanBeEnabled", "(", ")", "{", "}", "@", "Test", ";", ".", "isThrownBy", "assertThatNoException", "(", ")", "(", ")", "->", "(", ")", ".", "run", "new", "SpringApplication", "(", ",", ")", "(", ",", ")", "\"", "--spring.main.web-application-type=none", "\"", "\"", "--spring.main.allow-circular-references=true", "\"", "ExampleProducerConfiguration", ".", "class", "ExampleConsumerConfiguration", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 62, "ast_depth": 12, "n_identifiers": 5, "vocab_size": 23, "n_whitespaces": 25, "n_words": 24, "nloc": 6, "token_counts": 41}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1114-1121", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "relaxedBindingShouldWorkBeforeEnvironmentIsPrepared", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#relaxedBindingShouldWorkBeforeEnvironmentIsPrepared", "start_line": 1114, "end_line": 1121, "signature": "relaxedBindingShouldWorkBeforeEnvironmentIsPrepared()", "original_code": "@Test\n\t@WithResource(name = \"custom-config/application.yml\", content = \"hello: world\")\n\tvoid relaxedBindingShouldWorkBeforeEnvironmentIsPrepared() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tthis.context = application.run(\"--spring.config.additionalLocation=classpath:custom-config/\");\n\t\tassertThat(this.context.getEnvironment().getProperty(\"hello\")).isEqualTo(\"world\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "relaxedBindingShouldWorkBeforeEnvironmentIsPrepared", "(", ")", "{", "}", "@", "Test", "@", "WithResource", "SpringApplication", ";", ";", ";", ";", "(", ",", ")", "application", "=", "application", ".", "setWebApplicationType", "=", ".", "isEqualTo", "name", "=", "content", "=", "new", "SpringApplication", "(", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "\"", "custom-config/application.yml", "\"", "\"", "hello: world", "\"", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "\"", "world", "\"", "ExampleConfig", ".", "class", "\"", "--spring.config.additionalLocation=classpath:custom-config/", "\"", ".", "getProperty", ".", "getEnvironment", "(", ")", "this", ".", "context", "(", ")", "\"", "hello", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 120, "ast_depth": 11, "n_identifiers": 15, "vocab_size": 36, "n_whitespaces": 32, "n_words": 40, "nloc": 8, "token_counts": 81}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1123-1127", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "lazyInitializationIsDisabledByDefault", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#lazyInitializationIsDisabledByDefault", "start_line": 1123, "end_line": 1127, "signature": "lazyInitializationIsDisabledByDefault()", "original_code": "@Test\n\tvoid lazyInitializationIsDisabledByDefault() {\n\t\tassertThat(new SpringApplication(LazyInitializationConfig.class).run(\"--spring.main.web-application-type=none\")\n\t\t\t.getBean(AtomicInteger.class)).hasValue(1);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "lazyInitializationIsDisabledByDefault", "(", ")", "{", "}", "@", "Test", ";", ".", "hasValue", "assertThat", "(", "1", ")", "(", ")", ".", "getBean", ".", "run", "(", ")", "new", "SpringApplication", "(", ")", "AtomicInteger", ".", "class", "(", ")", "\"", "--spring.main.web-application-type=none", "\"", "LazyInitializationConfig", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 58, "ast_depth": 13, "n_identifiers": 6, "vocab_size": 22, "n_whitespaces": 14, "n_words": 20, "nloc": 5, "token_counts": 38}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1129-1134", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "lazyInitializationCanBeEnabled", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#lazyInitializationCanBeEnabled", "start_line": 1129, "end_line": 1134, "signature": "lazyInitializationCanBeEnabled()", "original_code": "@Test\n\tvoid lazyInitializationCanBeEnabled() {\n\t\tassertThat(new SpringApplication(LazyInitializationConfig.class)\n\t\t\t.run(\"--spring.main.web-application-type=none\", \"--spring.main.lazy-initialization=true\")\n\t\t\t.getBean(AtomicInteger.class)).hasValue(0);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "lazyInitializationCanBeEnabled", "(", ")", "{", "}", "@", "Test", ";", ".", "hasValue", "assertThat", "(", "0", ")", "(", ")", ".", "getBean", ".", "run", "(", ")", "new", "SpringApplication", "(", ",", ")", "AtomicInteger", ".", "class", "(", ")", "\"", "--spring.main.web-application-type=none", "\"", "\"", "--spring.main.lazy-initialization=true", "\"", "LazyInitializationConfig", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 63, "ast_depth": 13, "n_identifiers": 6, "vocab_size": 24, "n_whitespaces": 19, "n_words": 25, "nloc": 6, "token_counts": 42}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1136-1141", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "lazyInitializationIgnoresBeansThatAreExplicitlyNotLazy", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#lazyInitializationIgnoresBeansThatAreExplicitlyNotLazy", "start_line": 1136, "end_line": 1141, "signature": "lazyInitializationIgnoresBeansThatAreExplicitlyNotLazy()", "original_code": "@Test\n\tvoid lazyInitializationIgnoresBeansThatAreExplicitlyNotLazy() {\n\t\tassertThat(new SpringApplication(NotLazyInitializationConfig.class)\n\t\t\t.run(\"--spring.main.web-application-type=none\", \"--spring.main.lazy-initialization=true\")\n\t\t\t.getBean(AtomicInteger.class)).hasValue(1);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "lazyInitializationIgnoresBeansThatAreExplicitlyNotLazy", "(", ")", "{", "}", "@", "Test", ";", ".", "hasValue", "assertThat", "(", "1", ")", "(", ")", ".", "getBean", ".", "run", "(", ")", "new", "SpringApplication", "(", ",", ")", "AtomicInteger", ".", "class", "(", ")", "\"", "--spring.main.web-application-type=none", "\"", "\"", "--spring.main.lazy-initialization=true", "\"", "NotLazyInitializationConfig", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 63, "ast_depth": 13, "n_identifiers": 6, "vocab_size": 24, "n_whitespaces": 19, "n_words": 25, "nloc": 6, "token_counts": 42}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1143-1148", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "lazyInitializationIgnoresLazyInitializationExcludeFilteredBeans", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#lazyInitializationIgnoresLazyInitializationExcludeFilteredBeans", "start_line": 1143, "end_line": 1148, "signature": "lazyInitializationIgnoresLazyInitializationExcludeFilteredBeans()", "original_code": "@Test\n\tvoid lazyInitializationIgnoresLazyInitializationExcludeFilteredBeans() {\n\t\tassertThat(new SpringApplication(LazyInitializationExcludeFilterConfig.class)\n\t\t\t.run(\"--spring.main.web-application-type=none\", \"--spring.main.lazy-initialization=true\")\n\t\t\t.getBean(AtomicInteger.class)).hasValue(1);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "lazyInitializationIgnoresLazyInitializationExcludeFilteredBeans", "(", ")", "{", "}", "@", "Test", ";", ".", "hasValue", "assertThat", "(", "1", ")", "(", ")", ".", "getBean", ".", "run", "(", ")", "new", "SpringApplication", "(", ",", ")", "AtomicInteger", ".", "class", "(", ")", "\"", "--spring.main.web-application-type=none", "\"", "\"", "--spring.main.lazy-initialization=true", "\"", "LazyInitializationExcludeFilterConfig", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 63, "ast_depth": 13, "n_identifiers": 6, "vocab_size": 24, "n_whitespaces": 19, "n_words": 25, "nloc": 6, "token_counts": 42}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1150-1177", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "customApplicationStartupPublishStartupSteps", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#customApplicationStartupPublishStartupSteps", "start_line": 1150, "end_line": 1177, "signature": "customApplicationStartupPublishStartupSteps()", "original_code": "@Test\n\tvoid customApplicationStartupPublishStartupSteps() {\n\t\tApplicationStartup applicationStartup = mock(ApplicationStartup.class);\n\t\tStartupStep startupStep = mock(StartupStep.class);\n\t\tgiven(applicationStartup.start(anyString())).willReturn(startupStep);\n\t\tgiven(startupStep.tag(anyString(), anyString())).willReturn(startupStep);\n\t\tgiven(startupStep.tag(anyString(), ArgumentMatchers.<Supplier<String>>any())).willReturn(startupStep);\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tapplication.setApplicationStartup(applicationStartup);\n\t\tthis.context = application.run();\n\t\tassertThat(this.context.getBean(ApplicationStartup.class)).isEqualTo(applicationStartup);\n\t\tthen(applicationStartup).should().start(\"spring.boot.application.starting\");\n\t\tthen(applicationStartup).should().start(\"spring.boot.application.environment-prepared\");\n\t\tthen(applicationStartup).should().start(\"spring.boot.application.context-prepared\");\n\t\tthen(applicationStartup).should().start(\"spring.boot.application.context-loaded\");\n\t\tthen(applicationStartup).should().start(\"spring.boot.application.started\");\n\t\tthen(applicationStartup).should().start(\"spring.boot.application.ready\");\n\t\tlong startCount = mockingDetails(applicationStartup).getInvocations()\n\t\t\t.stream()\n\t\t\t.filter((invocation) -> invocation.getMethod().toString().contains(\"start(\"))\n\t\t\t.count();\n\t\tlong endCount = mockingDetails(startupStep).getInvocations()\n\t\t\t.stream()\n\t\t\t.filter((invocation) -> invocation.getMethod().toString().contains(\"end(\"))\n\t\t\t.count();\n\t\tassertThat(startCount).isEqualTo(endCount);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "customApplicationStartupPublishStartupSteps", "(", ")", "{", "}", "@", "Test", "ApplicationStartup", ";", "StartupStep", ";", ";", ";", ";", "SpringApplication", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "applicationStartup", "=", "startupStep", "=", ".", "willReturn", ".", "willReturn", ".", "willReturn", "application", "=", "application", ".", "setWebApplicationType", "application", ".", "setApplicationStartup", "=", ".", "isEqualTo", ".", "start", ".", "start", ".", "start", ".", "start", ".", "start", ".", "start", "long", "startCount", "=", "long", "endCount", "=", ".", "isEqualTo", "mock", "mock", "given", "(", "startupStep", ")", "given", "(", "startupStep", ")", "given", "(", "startupStep", ")", "new", "SpringApplication", "(", ")", "(", "applicationStartup", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", "applicationStartup", ")", ".", "should", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", ".", "count", ".", "count", "assertThat", "(", "endCount", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "then", "(", ")", "\"", "spring.boot.application.starting", "\"", "then", "(", ")", "\"", "spring.boot.application.environment-prepared", "\"", "then", "(", ")", "\"", "spring.boot.application.context-prepared", "\"", "then", "(", ")", "\"", "spring.boot.application.context-loaded", "\"", "then", "(", ")", "\"", "spring.boot.application.started", "\"", "then", "(", ")", "\"", "spring.boot.application.ready", "\"", ".", "filter", "(", ")", ".", "filter", "(", ")", "(", "startCount", ")", "ApplicationStartup", ".", "class", "StartupStep", ".", "class", "applicationStartup", ".", "start", "startupStep", ".", "tag", "startupStep", ".", "tag", "ExampleConfig", ".", "class", ".", "getBean", "(", "applicationStartup", ")", "(", "applicationStartup", ")", "(", "applicationStartup", ")", "(", "applicationStartup", ")", "(", "applicationStartup", ")", "(", "applicationStartup", ")", ".", "stream", "(", ")", ".", "stream", "(", ")", "(", ")", "(", ",", ")", "(", ",", ")", "this", ".", "context", "(", ")", ".", "getInvocations", "(", ")", "->", ".", "getInvocations", "(", ")", "->", "anyString", "anyString", "anyString", "anyString", "ArgumentMatchers", ".", "any", "ApplicationStartup", ".", "class", "mockingDetails", "(", ")", "(", "invocation", ")", ".", "contains", "mockingDetails", "(", ")", "(", "invocation", ")", ".", "contains", "(", ")", "(", ")", "(", ")", "(", ")", "<", ">", "(", ")", "(", "applicationStartup", ")", ".", "toString", "(", ")", "(", "startupStep", ")", ".", "toString", "(", ")", "Supplier", "invocation", ".", "getMethod", "(", ")", "\"", "start(", "\"", "invocation", ".", "getMethod", "(", ")", "\"", "end(", "\"", "<", "String", ">", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 518, "ast_depth": 14, "n_identifiers": 35, "vocab_size": 67, "n_whitespaces": 111, "n_words": 144, "nloc": 28, "token_counts": 345}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1179-1202", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "customApplicationStartupPublishStartupStepsWithFailure", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#customApplicationStartupPublishStartupStepsWithFailure", "start_line": 1179, "end_line": 1202, "signature": "customApplicationStartupPublishStartupStepsWithFailure()", "original_code": "@Test\n\tvoid customApplicationStartupPublishStartupStepsWithFailure() {\n\t\tApplicationStartup applicationStartup = mock(ApplicationStartup.class);\n\t\tStartupStep startupStep = mock(StartupStep.class);\n\t\tgiven(applicationStartup.start(anyString())).willReturn(startupStep);\n\t\tgiven(startupStep.tag(anyString(), anyString())).willReturn(startupStep);\n\t\tgiven(startupStep.tag(anyString(), ArgumentMatchers.<Supplier<String>>any())).willReturn(startupStep);\n\t\tSpringApplication application = new SpringApplication(BrokenPostConstructConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tapplication.setApplicationStartup(applicationStartup);\n\t\tassertThatExceptionOfType(BeanCreationException.class).isThrownBy(application::run);\n\t\tthen(applicationStartup).should().start(\"spring.boot.application.starting\");\n\t\tthen(applicationStartup).should().start(\"spring.boot.application.environment-prepared\");\n\t\tthen(applicationStartup).should().start(\"spring.boot.application.failed\");\n\t\tlong startCount = mockingDetails(applicationStartup).getInvocations()\n\t\t\t.stream()\n\t\t\t.filter((invocation) -> invocation.getMethod().toString().contains(\"start(\"))\n\t\t\t.count();\n\t\tlong endCount = mockingDetails(startupStep).getInvocations()\n\t\t\t.stream()\n\t\t\t.filter((invocation) -> invocation.getMethod().toString().contains(\"end(\"))\n\t\t\t.count();\n\t\tassertThat(startCount).isEqualTo(endCount);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "customApplicationStartupPublishStartupStepsWithFailure", "(", ")", "{", "}", "@", "Test", "ApplicationStartup", ";", "StartupStep", ";", ";", ";", ";", "SpringApplication", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "applicationStartup", "=", "startupStep", "=", ".", "willReturn", ".", "willReturn", ".", "willReturn", "application", "=", "application", ".", "setWebApplicationType", "application", ".", "setApplicationStartup", ".", "isThrownBy", ".", "start", ".", "start", ".", "start", "long", "startCount", "=", "long", "endCount", "=", ".", "isEqualTo", "mock", "mock", "given", "(", "startupStep", ")", "given", "(", "startupStep", ")", "given", "(", "startupStep", ")", "new", "SpringApplication", "(", ")", "(", "applicationStartup", ")", "assertThatExceptionOfType", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", ".", "count", ".", "count", "assertThat", "(", "endCount", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "application", "::", "run", "then", "(", ")", "\"", "spring.boot.application.starting", "\"", "then", "(", ")", "\"", "spring.boot.application.environment-prepared", "\"", "then", "(", ")", "\"", "spring.boot.application.failed", "\"", ".", "filter", "(", ")", ".", "filter", "(", ")", "(", "startCount", ")", "ApplicationStartup", ".", "class", "StartupStep", ".", "class", "applicationStartup", ".", "start", "startupStep", ".", "tag", "startupStep", ".", "tag", "BrokenPostConstructConfig", ".", "class", "BeanCreationException", ".", "class", "(", "applicationStartup", ")", "(", "applicationStartup", ")", "(", "applicationStartup", ")", ".", "stream", "(", ")", ".", "stream", "(", ")", "(", ")", "(", ",", ")", "(", ",", ")", ".", "getInvocations", "(", ")", "->", ".", "getInvocations", "(", ")", "->", "anyString", "anyString", "anyString", "anyString", "ArgumentMatchers", ".", "any", "mockingDetails", "(", ")", "(", "invocation", ")", ".", "contains", "mockingDetails", "(", ")", "(", "invocation", ")", ".", "contains", "(", ")", "(", ")", "(", ")", "(", ")", "<", ">", "(", ")", "(", "applicationStartup", ")", ".", "toString", "(", ")", "(", "startupStep", ")", ".", "toString", "(", ")", "Supplier", "invocation", ".", "getMethod", "(", ")", "\"", "start(", "\"", "invocation", ".", "getMethod", "(", ")", "\"", "end(", "\"", "<", "String", ">", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 424, "ast_depth": 14, "n_identifiers": 35, "vocab_size": 65, "n_whitespaces": 97, "n_words": 112, "nloc": 24, "token_counts": 282}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1204-1218", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "addBootstrapRegistryInitializer", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#addBootstrapRegistryInitializer", "start_line": 1204, "end_line": 1218, "signature": "addBootstrapRegistryInitializer()", "original_code": "@Test\n\tvoid addBootstrapRegistryInitializer() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tapplication.addBootstrapRegistryInitializer(\n\t\t\t\t(bootstrapContext) -> bootstrapContext.register(String.class, InstanceSupplier.of(\"boot\")));\n\t\tTestApplicationListener listener = new TestApplicationListener();\n\t\tapplication.addListeners(listener);\n\t\tapplication.run();\n\t\tApplicationStartingEvent startingEvent = listener.getEvent(ApplicationStartingEvent.class);\n\t\tassertThat(startingEvent.getBootstrapContext().get(String.class)).isEqualTo(\"boot\");\n\t\tApplicationEnvironmentPreparedEvent environmentPreparedEvent = listener\n\t\t\t.getEvent(ApplicationEnvironmentPreparedEvent.class);\n\t\tassertThat(environmentPreparedEvent.getBootstrapContext().get(String.class)).isEqualTo(\"boot\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "addBootstrapRegistryInitializer", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", "TestApplicationListener", ";", ";", ";", "ApplicationStartingEvent", ";", ";", "ApplicationEnvironmentPreparedEvent", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "application", ".", "addBootstrapRegistryInitializer", "listener", "=", "application", ".", "addListeners", "application", ".", "run", "startingEvent", "=", ".", "isEqualTo", "environmentPreparedEvent", "=", ".", "isEqualTo", "new", "SpringApplication", "(", ")", "(", ")", "new", "TestApplicationListener", "(", "listener", ")", "(", ")", "listener", ".", "getEvent", "assertThat", "(", ")", "listener", ".", "getEvent", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "->", "(", ")", "(", ")", "(", ")", "\"", "boot", "\"", "(", ")", "(", ")", "\"", "boot", "\"", "ExampleConfig", ".", "class", "(", "bootstrapContext", ")", "bootstrapContext", ".", "register", "ApplicationStartingEvent", ".", "class", ".", "get", "ApplicationEnvironmentPreparedEvent", ".", "class", ".", "get", "(", ",", ")", "startingEvent", ".", "getBootstrapContext", "(", ")", "environmentPreparedEvent", ".", "getBootstrapContext", "(", ")", "String", ".", "class", "InstanceSupplier", ".", "of", "(", ")", "String", ".", "class", "(", ")", "String", ".", "class", "(", ")", "\"", "boot", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 214, "ast_depth": 13, "n_identifiers": 20, "vocab_size": 41, "n_whitespaces": 62, "n_words": 60, "nloc": 15, "token_counts": 146}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1220-1232", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "addBootstrapRegistryInitializerCanRegisterBeans", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#addBootstrapRegistryInitializerCanRegisterBeans", "start_line": 1220, "end_line": 1232, "signature": "addBootstrapRegistryInitializerCanRegisterBeans()", "original_code": "@Test\n\tvoid addBootstrapRegistryInitializerCanRegisterBeans() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tapplication.addBootstrapRegistryInitializer((bootstrapContext) -> {\n\t\t\tbootstrapContext.register(String.class, InstanceSupplier.of(\"boot\"));\n\t\t\tbootstrapContext.addCloseListener((event) -> event.getApplicationContext()\n\t\t\t\t.getBeanFactory()\n\t\t\t\t.registerSingleton(\"test\", event.getBootstrapContext().get(String.class)));\n\t\t});\n\t\tConfigurableApplicationContext applicationContext = application.run();\n\t\tassertThat(applicationContext.getBean(\"test\")).isEqualTo(\"boot\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "addBootstrapRegistryInitializerCanRegisterBeans", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", "ConfigurableApplicationContext", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "application", ".", "addBootstrapRegistryInitializer", "applicationContext", "=", ".", "isEqualTo", "new", "SpringApplication", "(", ")", "(", ")", "application", ".", "run", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "->", "(", ")", "(", ")", "\"", "boot", "\"", "ExampleConfig", ".", "class", "(", "bootstrapContext", ")", "{", "}", "applicationContext", ".", "getBean", ";", ";", "(", ")", "bootstrapContext", ".", "register", "bootstrapContext", ".", "addCloseListener", "\"", "test", "\"", "(", ",", ")", "(", ")", "String", ".", "class", "InstanceSupplier", ".", "of", "->", "(", ")", "(", "event", ")", ".", "registerSingleton", "\"", "boot", "\"", ".", "getBeanFactory", "(", ",", ")", "event", ".", "getApplicationContext", "(", ")", "\"", "test", "\"", ".", "get", "(", ")", "event", ".", "getBootstrapContext", "(", ")", "(", ")", "String", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 183, "ast_depth": 18, "n_identifiers": 23, "vocab_size": 43, "n_whitespaces": 55, "n_words": 46, "nloc": 13, "token_counts": 125}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1234-1238", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "settingEnvironmentPrefixViaPropertiesThrowsException", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#settingEnvironmentPrefixViaPropertiesThrowsException", "start_line": 1234, "end_line": 1238, "signature": "settingEnvironmentPrefixViaPropertiesThrowsException()", "original_code": "@Test\n\tvoid settingEnvironmentPrefixViaPropertiesThrowsException() {\n\t\tassertThatIllegalStateException()\n\t\t\t.isThrownBy(() -> new SpringApplication().run(\"--spring.main.environment-prefix=my\"));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "settingEnvironmentPrefixViaPropertiesThrowsException", "(", ")", "{", "}", "@", "Test", ";", ".", "isThrownBy", "assertThatIllegalStateException", "(", ")", "(", ")", "->", "(", ")", ".", "run", "new", "SpringApplication", "(", ")", "(", ")", "\"", "--spring.main.environment-prefix=my", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 48, "ast_depth": 11, "n_identifiers": 5, "vocab_size": 18, "n_whitespaces": 16, "n_words": 13, "nloc": 5, "token_counts": 30}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1240-1247", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "bindsEnvironmentPrefixToSpringApplication", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#bindsEnvironmentPrefixToSpringApplication", "start_line": 1240, "end_line": 1247, "signature": "bindsEnvironmentPrefixToSpringApplication()", "original_code": "@Test\n\tvoid bindsEnvironmentPrefixToSpringApplication() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setEnvironmentPrefix(\"my\");\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tthis.context = application.run();\n\t\tassertThat(application.getEnvironmentPrefix()).isEqualTo(\"my\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "bindsEnvironmentPrefixToSpringApplication", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setEnvironmentPrefix", "application", ".", "setWebApplicationType", "=", ".", "isEqualTo", "new", "SpringApplication", "(", ")", "(", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "(", ")", "\"", "my", "\"", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "\"", "my", "\"", "ExampleConfig", ".", "class", "application", ".", "getEnvironmentPrefix", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 95, "ast_depth": 10, "n_identifiers": 12, "vocab_size": 28, "n_whitespaces": 27, "n_words": 25, "nloc": 8, "token_counts": 63}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1249-1259", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "movesConfigClassPropertySourcesToEnd", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#movesConfigClassPropertySourcesToEnd", "start_line": 1249, "end_line": 1259, "signature": "movesConfigClassPropertySourcesToEnd()", "original_code": "@Test\n\t@WithResource(name = \"spring-application-config-property-source.properties\",\n\t\t\tcontent = \"test.name=spring-application-config-property-source\")\n\tvoid movesConfigClassPropertySourcesToEnd() {\n\t\tSpringApplication application = new SpringApplication(PropertySourceConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tapplication.setDefaultProperties(Collections.singletonMap(\"test.name\", \"test\"));\n\t\tthis.context = application.run();\n\t\tassertThat(this.context.getEnvironment().getProperty(\"test.name\"))\n\t\t\t.isEqualTo(\"spring-application-config-property-source\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "movesConfigClassPropertySourcesToEnd", "(", ")", "{", "}", "@", "Test", "@", "WithResource", "SpringApplication", ";", ";", ";", ";", ";", "(", ",", ")", "application", "=", "application", ".", "setWebApplicationType", "application", ".", "setDefaultProperties", "=", ".", "isEqualTo", "name", "=", "content", "=", "new", "SpringApplication", "(", ")", "(", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "\"", "spring-application-config-property-source.properties", "\"", "\"", "test.name=spring-application-config-property-source", "\"", "(", ")", "WebApplicationType", ".", "NONE", "Collections", ".", "singletonMap", "(", ")", "(", ")", "\"", "spring-application-config-property-source", "\"", "PropertySourceConfig", ".", "class", "(", ",", ")", ".", "getProperty", "\"", "test.name", "\"", "\"", "test", "\"", ".", "getEnvironment", "(", ")", "this", ".", "context", "(", ")", "\"", "test.name", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 141, "ast_depth": 11, "n_identifiers": 18, "vocab_size": 39, "n_whitespaces": 42, "n_words": 53, "nloc": 11, "token_counts": 96}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1261-1276", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "deregistersShutdownHookForFailedApplicationContext", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#deregistersShutdownHookForFailedApplicationContext", "start_line": 1261, "end_line": 1276, "signature": "deregistersShutdownHookForFailedApplicationContext()", "original_code": "@Test\n\tvoid deregistersShutdownHookForFailedApplicationContext() {\n\t\tSpringApplication application = new SpringApplication(BrokenPostConstructConfig.class);\n\t\tList<ApplicationEvent> events = new ArrayList<>();\n\t\tapplication.addListeners(events::add);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tassertThatExceptionOfType(BeanCreationException.class).isThrownBy(application::run);\n\t\tassertThat(events).hasAtLeastOneElementOfType(ApplicationFailedEvent.class);\n\t\tApplicationFailedEvent failure = events.stream()\n\t\t\t.filter((event) -> event instanceof ApplicationFailedEvent)\n\t\t\t.map(ApplicationFailedEvent.class::cast)\n\t\t\t.findFirst()\n\t\t\t.get();\n\t\tassertThat(SpringApplicationShutdownHookInstance.get())\n\t\t\t.didNotRegisterApplicationContext(failure.getApplicationContext());\n\t}", "doc_comment": ""}, "code_tokens": ["void", "deregistersShutdownHookForFailedApplicationContext", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", ";", ";", "ApplicationFailedEvent", ";", ";", "application", "=", "List", "events", "=", "application", ".", "addListeners", "application", ".", "setWebApplicationType", ".", "isThrownBy", ".", "hasAtLeastOneElementOfType", "failure", "=", ".", "didNotRegisterApplicationContext", "new", "SpringApplication", "<", "ApplicationEvent", ">", "new", "(", ")", "(", ")", "assertThatExceptionOfType", "(", ")", "assertThat", "(", ")", ".", "get", "assertThat", "(", ")", "(", ")", "ArrayList", "(", ")", "events", "::", "add", "WebApplicationType", ".", "NONE", "(", ")", "application", "::", "run", "(", "events", ")", "ApplicationFailedEvent", ".", "class", ".", "findFirst", "(", ")", "(", ")", "failure", ".", "getApplicationContext", "BrokenPostConstructConfig", ".", "class", "<", ">", "BeanCreationException", ".", "class", ".", "map", "(", ")", "SpringApplicationShutdownHookInstance", ".", "get", "(", ")", ".", "filter", "(", ")", "(", ")", "events", ".", "stream", "(", ")", "::", "cast", "(", ")", "->", "ApplicationFailedEvent", ".", "class", "(", "event", ")", "event", "instanceof", "ApplicationFailedEvent"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 197, "ast_depth": 13, "n_identifiers": 25, "vocab_size": 48, "n_whitespaces": 65, "n_words": 54, "nloc": 16, "token_counts": 131}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1278-1289", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "withRunnableHookRunsWithHook", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#withRunnableHookRunsWithHook", "start_line": 1278, "end_line": 1289, "signature": "withRunnableHookRunsWithHook()", "original_code": "@Test\n\tvoid withRunnableHookRunsWithHook() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tSpringApplicationRunListener runListener = mock(SpringApplicationRunListener.class);\n\t\tSpringApplicationHook hook = (springApplication) -> runListener;\n\t\tSpringApplication.withHook(hook, () -> this.context = application.run());\n\t\tthen(runListener).should().starting(any());\n\t\tthen(runListener).should().contextPrepared(this.context);\n\t\tthen(runListener).should().ready(eq(this.context), any());\n\t\tassertThat(this.context.isRunning()).isTrue();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "withRunnableHookRunsWithHook", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", "SpringApplicationRunListener", ";", "SpringApplicationHook", ";", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "runListener", "=", "hook", "=", "SpringApplication", ".", "withHook", ".", "starting", ".", "contextPrepared", ".", "ready", ".", "isTrue", "new", "SpringApplication", "(", ")", "mock", "->", "runListener", "(", "hook", ",", ")", ".", "should", "(", ")", ".", "should", "(", ")", ".", "should", "(", ",", ")", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", "springApplication", ")", "->", "then", "(", ")", "any", "then", "(", ")", "this", ".", "context", "then", "(", ")", "eq", "any", "(", ")", "ExampleConfig", ".", "class", "SpringApplicationRunListener", ".", "class", "(", ")", "=", "(", "runListener", ")", "(", ")", "(", "runListener", ")", "(", "runListener", ")", "(", ")", "(", ")", ".", "isRunning", "this", ".", "context", "application", ".", "run", "this", ".", "context", "this", ".", "context", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 207, "ast_depth": 11, "n_identifiers": 24, "vocab_size": 41, "n_whitespaces": 51, "n_words": 53, "nloc": 12, "token_counts": 137}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1291-1302", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "withCallableHookRunsWithHook", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#withCallableHookRunsWithHook", "start_line": 1291, "end_line": 1302, "signature": "withCallableHookRunsWithHook()", "original_code": "@Test\n\tvoid withCallableHookRunsWithHook() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tSpringApplicationRunListener runListener = mock(SpringApplicationRunListener.class);\n\t\tSpringApplicationHook hook = (springApplication) -> runListener;\n\t\tthis.context = SpringApplication.withHook(hook, () -> application.run());\n\t\tthen(runListener).should().starting(any());\n\t\tthen(runListener).should().contextPrepared(this.context);\n\t\tthen(runListener).should().ready(eq(this.context), any());\n\t\tassertThat(this.context.isRunning()).isTrue();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "withCallableHookRunsWithHook", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", "SpringApplicationRunListener", ";", "SpringApplicationHook", ";", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "runListener", "=", "hook", "=", "=", ".", "starting", ".", "contextPrepared", ".", "ready", ".", "isTrue", "new", "SpringApplication", "(", ")", "mock", "->", "runListener", "this", ".", "context", "SpringApplication", ".", "withHook", ".", "should", "(", ")", ".", "should", "(", ")", ".", "should", "(", ",", ")", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", "springApplication", ")", "(", "hook", ",", ")", "then", "(", ")", "any", "then", "(", ")", "this", ".", "context", "then", "(", ")", "eq", "any", "(", ")", "ExampleConfig", ".", "class", "SpringApplicationRunListener", ".", "class", "->", "(", "runListener", ")", "(", ")", "(", "runListener", ")", "(", "runListener", ")", "(", ")", "(", ")", ".", "isRunning", "(", ")", "application", ".", "run", "this", ".", "context", "this", ".", "context", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 207, "ast_depth": 11, "n_identifiers": 24, "vocab_size": 41, "n_whitespaces": 51, "n_words": 53, "nloc": 12, "token_counts": 137}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1304-1332", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "withHookWhenHookThrowsAbandonedRunExceptionAbandonsRun", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#withHookWhenHookThrowsAbandonedRunExceptionAbandonsRun", "start_line": 1304, "end_line": 1332, "signature": "withHookWhenHookThrowsAbandonedRunExceptionAbandonsRun()", "original_code": "@Test\n\t@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n\tvoid withHookWhenHookThrowsAbandonedRunExceptionAbandonsRun() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tApplicationListener listener = mock(ApplicationListener.class);\n\t\tapplication.addListeners(listener);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tSpringApplicationRunListener runListener = spy(new SpringApplicationRunListener() {\n\n\t\t\t@Override\n\t\t\tpublic void contextLoaded(ConfigurableApplicationContext context) {\n\t\t\t\tthrow new SpringApplication.AbandonedRunException(context);\n\t\t\t}\n\n\t\t});\n\t\tSpringApplicationHook hook = (springApplication) -> runListener;\n\t\tassertThatExceptionOfType(SpringApplication.AbandonedRunException.class)\n\t\t\t.isThrownBy(() -> SpringApplication.withHook(hook, () -> application.run()))\n\t\t\t.satisfies((ex) -> assertThat(ex.getApplicationContext().isRunning()).isFalse());\n\t\tthen(runListener).should().starting(any());\n\t\tthen(runListener).should().contextPrepared(any());\n\t\tthen(runListener).should(never()).ready(any(), any());\n\t\tthen(runListener).should(never()).failed(any(), any());\n\t\tthen(listener).should().onApplicationEvent(any(ApplicationStartingEvent.class));\n\t\tthen(listener).should().onApplicationEvent(any(ApplicationEnvironmentPreparedEvent.class));\n\t\tthen(listener).should().onApplicationEvent(any(ApplicationPreparedEvent.class));\n\t\tthen(listener).should(never()).onApplicationEvent(any(ApplicationReadyEvent.class));\n\t\tthen(listener).should(never()).onApplicationEvent(any(ApplicationFailedEvent.class));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "withHookWhenHookThrowsAbandonedRunExceptionAbandonsRun", "(", ")", "{", "}", "@", "Test", "@", "SuppressWarnings", "SpringApplication", ";", "ApplicationListener", ";", ";", ";", "SpringApplicationRunListener", ";", "SpringApplicationHook", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "(", ")", "application", "=", "listener", "=", "application", ".", "addListeners", "application", ".", "setWebApplicationType", "runListener", "=", "hook", "=", ".", "satisfies", ".", "starting", ".", "contextPrepared", ".", "ready", ".", "failed", ".", "onApplicationEvent", ".", "onApplicationEvent", ".", "onApplicationEvent", ".", "onApplicationEvent", ".", "onApplicationEvent", "{", ",", "}", "new", "SpringApplication", "mock", "(", "listener", ")", "(", ")", "spy", "->", "runListener", ".", "isThrownBy", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", ".", "should", "(", ",", ")", ".", "should", "(", ",", ")", ".", "should", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", "\"", "rawtypes", "\"", "\"", "unchecked", "\"", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", "springApplication", ")", "assertThatExceptionOfType", "(", ")", "->", "then", "(", ")", "any", "then", "(", ")", "any", "then", "(", ")", "any", "any", "then", "(", ")", "any", "any", "then", "(", ")", "any", "then", "(", ")", "any", "then", "(", ")", "any", "then", "(", ")", "any", "then", "(", ")", "any", "ExampleConfig", ".", "class", "ApplicationListener", ".", "class", "new", "SpringApplicationRunListener", "(", ")", "->", "(", "ex", ")", ".", "isFalse", "(", "runListener", ")", "(", ")", "(", "runListener", ")", "(", ")", "(", "runListener", ")", "never", "(", ")", "(", ")", "(", "runListener", ")", "never", "(", ")", "(", ")", "(", "listener", ")", "(", ")", "(", "listener", ")", "(", ")", "(", "listener", ")", "(", ")", "(", "listener", ")", "never", "(", ")", "(", "listener", ")", "never", "(", ")", "(", ")", "{", "}", ".", "class", "(", ")", "SpringApplication", ".", "withHook", "assertThat", "(", ")", "(", ")", "(", ")", "ApplicationStartingEvent", ".", "class", "ApplicationEnvironmentPreparedEvent", ".", "class", "ApplicationPreparedEvent", ".", "class", "(", ")", "ApplicationReadyEvent", ".", "class", "(", ")", "ApplicationFailedEvent", ".", "class", "void", "contextLoaded", "SpringApplication", ".", "AbandonedRunException", "(", "hook", ",", ")", "(", ")", "public", "(", ")", "{", "}", "->", ".", "isRunning", "@", "Override", "ConfigurableApplicationContext", "context", "throw", ";", "(", ")", "application", ".", "run", "ex", ".", "getApplicationContext", "(", ")", "new", "(", ")", "(", ")", "SpringApplication", ".", "AbandonedRunException", "(", "context", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 508, "ast_depth": 15, "n_identifiers": 37, "vocab_size": 66, "n_whitespaces": 121, "n_words": 122, "nloc": 27, "token_counts": 334}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1313-1316", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "contextLoaded", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#contextLoaded", "start_line": 1313, "end_line": 1316, "signature": "contextLoaded(ConfigurableApplicationContext context)", "original_code": "@Override\n\t\t\tpublic void contextLoaded(ConfigurableApplicationContext context) {\n\t\t\t\tthrow new SpringApplication.AbandonedRunException(context);\n\t\t\t}", "doc_comment": ""}, "code_tokens": ["void", "contextLoaded", "public", "(", ")", "{", "}", "@", "Override", "ConfigurableApplicationContext", "context", "throw", ";", "new", "SpringApplication", ".", "AbandonedRunException", "(", "context", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 31, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 17, "n_whitespaces": 19, "n_words": 11, "nloc": 4, "token_counts": 20}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1334-1348", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "shouldUseAotInitializer", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#shouldUseAotInitializer", "start_line": 1334, "end_line": 1348, "signature": "shouldUseAotInitializer()", "original_code": "@Test\n\t// gh-32555\n\tvoid shouldUseAotInitializer() {\n\t\tSpringApplication application = new SpringApplication(ExampleAotProcessedMainClass.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tapplication.setMainApplicationClass(ExampleAotProcessedMainClass.class);\n\t\tSystem.setProperty(AotDetector.AOT_ENABLED, \"true\");\n\t\ttry {\n\t\t\tApplicationContext context = application.run();\n\t\t\tassertThat(context.getBean(\"test\")).isEqualTo(\"test\");\n\t\t}\n\t\tfinally {\n\t\t\tSystem.clearProperty(AotDetector.AOT_ENABLED);\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["// gh-32555", "void", "shouldUseAotInitializer", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", "try", "application", "=", "application", ".", "setWebApplicationType", "application", ".", "setMainApplicationClass", "System", ".", "setProperty", "{", "}", "finally", "new", "SpringApplication", "(", ")", "(", ")", "(", ",", ")", "ApplicationContext", ";", ";", "{", "}", "(", ")", "WebApplicationType", ".", "NONE", "ExampleAotProcessedMainClass", ".", "class", "AotDetector", ".", "AOT_ENABLED", "\"", "true", "\"", "context", "=", ".", "isEqualTo", ";", "ExampleAotProcessedMainClass", ".", "class", "application", ".", "run", "assertThat", "(", ")", "System", ".", "clearProperty", "(", ")", "(", ")", "\"", "test", "\"", "(", ")", "context", ".", "getBean", "AotDetector", ".", "AOT_ENABLED", "(", ")", "\"", "test", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 139, "ast_depth": 13, "n_identifiers": 17, "vocab_size": 38, "n_whitespaces": 55, "n_words": 40, "nloc": 15, "token_counts": 94}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1350-1363", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "shouldReportFriendlyErrorIfAotInitializerNotFound", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#shouldReportFriendlyErrorIfAotInitializerNotFound", "start_line": 1350, "end_line": 1363, "signature": "shouldReportFriendlyErrorIfAotInitializerNotFound()", "original_code": "@Test\n\tvoid shouldReportFriendlyErrorIfAotInitializerNotFound() {\n\t\tSpringApplication application = new SpringApplication(TestSpringApplication.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tapplication.setMainApplicationClass(TestSpringApplication.class);\n\t\tSystem.setProperty(AotDetector.AOT_ENABLED, \"true\");\n\t\ttry {\n\t\t\tassertThatExceptionOfType(AotInitializerNotFoundException.class).isThrownBy(application::run)\n\t\t\t\t.withMessageMatching(\"^.+AOT initializer .+ could not be found$\");\n\t\t}\n\t\tfinally {\n\t\t\tSystem.clearProperty(AotDetector.AOT_ENABLED);\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "shouldReportFriendlyErrorIfAotInitializerNotFound", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", "try", "application", "=", "application", ".", "setWebApplicationType", "application", ".", "setMainApplicationClass", "System", ".", "setProperty", "{", "}", "finally", "new", "SpringApplication", "(", ")", "(", ")", "(", ",", ")", ";", "{", "}", "(", ")", "WebApplicationType", ".", "NONE", "TestSpringApplication", ".", "class", "AotDetector", ".", "AOT_ENABLED", "\"", "true", "\"", ".", "withMessageMatching", ";", "TestSpringApplication", ".", "class", ".", "isThrownBy", "(", ")", "System", ".", "clearProperty", "assertThatExceptionOfType", "(", ")", "\"", "^.+AOT initializer .+ could not be found$", "\"", "(", ")", "(", ")", "application", "::", "run", "AotDetector", ".", "AOT_ENABLED", "AotInitializerNotFoundException", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 128, "ast_depth": 12, "n_identifiers": 16, "vocab_size": 37, "n_whitespaces": 56, "n_words": 41, "nloc": 14, "token_counts": 86}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1365-1374", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "fromRunsWithAdditionalSources", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#fromRunsWithAdditionalSources", "start_line": 1365, "end_line": 1374, "signature": "fromRunsWithAdditionalSources()", "original_code": "@Test\n\tvoid fromRunsWithAdditionalSources() {\n\t\tassertThat(ExampleAdditionalConfig.local.get()).isNull();\n\t\tthis.context = SpringApplication.from(ExampleFromMainMethod::main)\n\t\t\t.with(ExampleAdditionalConfig.class)\n\t\t\t.run()\n\t\t\t.getApplicationContext();\n\t\tassertThat(ExampleAdditionalConfig.local.get()).isNotNull();\n\t\tExampleAdditionalConfig.local.remove();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "fromRunsWithAdditionalSources", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ";", ".", "isNull", "=", ".", "isNotNull", ".", "remove", "assertThat", "(", ")", "this", ".", "context", ".", "getApplicationContext", "assertThat", "(", ")", "ExampleAdditionalConfig", ".", "local", "(", ")", "(", ")", ".", "run", "(", ")", "(", ")", ".", "get", ".", "with", "(", ")", ".", "get", "ExampleAdditionalConfig", ".", "local", "(", ")", "SpringApplication", ".", "from", "(", ")", "ExampleAdditionalConfig", ".", "local", "(", ")", "(", ")", "ExampleAdditionalConfig", ".", "class", "ExampleFromMainMethod", "::", "main"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 113, "ast_depth": 12, "n_identifiers": 17, "vocab_size": 29, "n_whitespaces": 32, "n_words": 27, "nloc": 10, "token_counts": 74}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1376-1383", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "fromReturnsApplicationContext", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#fromReturnsApplicationContext", "start_line": 1376, "end_line": 1383, "signature": "fromReturnsApplicationContext()", "original_code": "@Test\n\tvoid fromReturnsApplicationContext() {\n\t\tthis.context = SpringApplication.from(ExampleFromMainMethod::main)\n\t\t\t.with(ExampleAdditionalConfig.class)\n\t\t\t.run()\n\t\t\t.getApplicationContext();\n\t\tassertThat(this.context).isNotNull();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "fromReturnsApplicationContext", "(", ")", "{", "}", "@", "Test", ";", ";", "=", ".", "isNotNull", "this", ".", "context", ".", "getApplicationContext", "assertThat", "(", ")", ".", "run", "(", ")", "(", ")", ".", "with", "(", ")", "this", ".", "context", "SpringApplication", ".", "from", "(", ")", "(", ")", "ExampleAdditionalConfig", ".", "class", "ExampleFromMainMethod", "::", "main"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 72, "ast_depth": 12, "n_identifiers": 12, "vocab_size": 25, "n_whitespaces": 26, "n_words": 18, "nloc": 8, "token_counts": 47}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1385-1392", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "fromWithMultipleApplicationsOnlyAppliesAdditionalSourcesOnce", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#fromWithMultipleApplicationsOnlyAppliesAdditionalSourcesOnce", "start_line": 1385, "end_line": 1392, "signature": "fromWithMultipleApplicationsOnlyAppliesAdditionalSourcesOnce()", "original_code": "@Test\n\tvoid fromWithMultipleApplicationsOnlyAppliesAdditionalSourcesOnce() {\n\t\tthis.context = SpringApplication.from(MultipleApplicationsMainMethod::main)\n\t\t\t.with(SingleUseAdditionalConfig.class)\n\t\t\t.run()\n\t\t\t.getApplicationContext();\n\t\tassertThatNoException().isThrownBy(() -> this.context.getBean(SingleUseAdditionalConfig.class));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "fromWithMultipleApplicationsOnlyAppliesAdditionalSourcesOnce", "(", ")", "{", "}", "@", "Test", ";", ";", "=", ".", "isThrownBy", "this", ".", "context", ".", "getApplicationContext", "assertThatNoException", "(", ")", ".", "run", "(", ")", "(", ")", "->", ".", "with", "(", ")", "(", ")", ".", "getBean", "SpringApplication", ".", "from", "(", ")", "this", ".", "context", "(", ")", "(", ")", "SingleUseAdditionalConfig", ".", "class", "SingleUseAdditionalConfig", ".", "class", "MultipleApplicationsMainMethod", "::", "main"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 87, "ast_depth": 12, "n_identifiers": 13, "vocab_size": 27, "n_whitespaces": 28, "n_words": 21, "nloc": 8, "token_counts": 57}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1394-1403", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "fromAppliesProfiles", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#fromAppliesProfiles", "start_line": 1394, "end_line": 1403, "signature": "fromAppliesProfiles()", "original_code": "@Test\n\tvoid fromAppliesProfiles() {\n\t\tthis.context = SpringApplication.from(ExampleFromMainMethod::main)\n\t\t\t.with(ProfileConfig.class)\n\t\t\t.withAdditionalProfiles(\"custom\")\n\t\t\t.run()\n\t\t\t.getApplicationContext();\n\t\tassertThat(this.context).isNotNull();\n\t\tassertThat(this.context.getBeanProvider(Example.class).getIfAvailable()).isNotNull();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "fromAppliesProfiles", "(", ")", "{", "}", "@", "Test", ";", ";", ";", "=", ".", "isNotNull", ".", "isNotNull", "this", ".", "context", ".", "getApplicationContext", "assertThat", "(", ")", "assertThat", "(", ")", ".", "run", "(", ")", "(", ")", "(", ")", ".", "withAdditionalProfiles", "(", ")", "this", ".", "context", ".", "getIfAvailable", ".", "with", "(", ")", ".", "getBeanProvider", "(", ")", "SpringApplication", ".", "from", "(", ")", "\"", "custom", "\"", "this", ".", "context", "(", ")", "(", ")", "ProfileConfig", ".", "class", "Example", ".", "class", "ExampleFromMainMethod", "::", "main"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 115, "ast_depth": 13, "n_identifiers": 15, "vocab_size": 31, "n_whitespaces": 33, "n_words": 28, "nloc": 10, "token_counts": 76}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1405-1414", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "shouldStartDaemonThreadIfKeepAliveIsEnabled", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#shouldStartDaemonThreadIfKeepAliveIsEnabled", "start_line": 1405, "end_line": 1414, "signature": "shouldStartDaemonThreadIfKeepAliveIsEnabled()", "original_code": "@Test\n\tvoid shouldStartDaemonThreadIfKeepAliveIsEnabled() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tthis.context = application.run(\"--spring.main.keep-alive=true\");\n\t\tSet<Thread> threads = getCurrentThreads();\n\t\tassertThat(threads).filteredOn((thread) -> thread.getName().equals(\"keep-alive\"))\n\t\t\t.singleElement()\n\t\t\t.satisfies((thread) -> assertThat(thread.isDaemon()).isFalse());\n\t}", "doc_comment": ""}, "code_tokens": ["void", "shouldStartDaemonThreadIfKeepAliveIsEnabled", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "=", "Set", "threads", "=", ".", "satisfies", "new", "SpringApplication", "(", ")", "this", ".", "context", "application", ".", "run", "<", "Thread", ">", "getCurrentThreads", ".", "singleElement", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", ".", "filteredOn", "(", ")", "->", "ExampleConfig", ".", "class", "\"", "--spring.main.keep-alive=true", "\"", "assertThat", "(", ")", "(", "thread", ")", ".", "isFalse", "(", "threads", ")", "->", "assertThat", "(", ")", "(", "thread", ")", ".", "equals", "(", ")", "thread", ".", "getName", "(", ")", "thread", ".", "isDaemon", "(", ")", "\"", "keep-alive", "\"", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 151, "ast_depth": 13, "n_identifiers": 19, "vocab_size": 41, "n_whitespaces": 42, "n_words": 42, "nloc": 10, "token_counts": 100}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1416-1429", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "shouldStopKeepAliveThreadIfContextIsClosed", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#shouldStopKeepAliveThreadIfContextIsClosed", "start_line": 1416, "end_line": 1429, "signature": "shouldStopKeepAliveThreadIfContextIsClosed()", "original_code": "@Test\n\tvoid shouldStopKeepAliveThreadIfContextIsClosed() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tapplication.setKeepAlive(true);\n\t\tthis.context = application.run();\n\t\tassertThat(getCurrentThreads()).filteredOn((thread) -> thread.getName().equals(\"keep-alive\")).isNotEmpty();\n\t\tthis.context.close();\n\t\tAwaitility.await()\n\t\t\t.atMost(Duration.ofSeconds(30))\n\t\t\t.untilAsserted(\n\t\t\t\t\t() -> assertThat(getCurrentThreads()).filteredOn((thread) -> thread.getName().equals(\"keep-alive\"))\n\t\t\t\t\t\t.isEmpty());\n\t}", "doc_comment": ""}, "code_tokens": ["void", "shouldStopKeepAliveThreadIfContextIsClosed", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "application", ".", "setKeepAlive", "=", ".", "isNotEmpty", ".", "close", ".", "untilAsserted", "new", "SpringApplication", "(", ")", "(", "true", ")", "this", ".", "context", "application", ".", "run", ".", "filteredOn", "(", ")", "this", ".", "context", "(", ")", ".", "atMost", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "assertThat", "(", ")", "Awaitility", ".", "await", "(", ")", "->", "ExampleConfig", ".", "class", "(", ")", "->", "(", ")", "Duration", ".", "ofSeconds", "(", ")", ".", "isEmpty", "getCurrentThreads", "(", "thread", ")", ".", "equals", "(", "30", ")", ".", "filteredOn", "(", ")", "(", ")", "thread", ".", "getName", "(", ")", "assertThat", "(", ")", "(", ")", "\"", "keep-alive", "\"", "(", ")", "->", "getCurrentThreads", "(", "thread", ")", ".", "equals", "(", ")", "thread", ".", "getName", "(", ")", "(", ")", "\"", "keep-alive", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 206, "ast_depth": 15, "n_identifiers": 24, "vocab_size": 43, "n_whitespaces": 60, "n_words": 50, "nloc": 14, "token_counts": 137}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1431-1435", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "isAvailabilityChangeEventWithState", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#isAvailabilityChangeEventWithState", "start_line": 1431, "end_line": 1435, "signature": "isAvailabilityChangeEventWithState(\n\t\t\tS state)", "original_code": "private <S extends AvailabilityState> ArgumentMatcher<ApplicationEvent> isAvailabilityChangeEventWithState(\n\t\t\tS state) {\n\t\treturn (argument) -> (argument instanceof AvailabilityChangeEvent<?> availabilityChangeEvent)\n\t\t\t\t&& availabilityChangeEvent.getState().equals(state);\n\t}", "doc_comment": ""}, "code_tokens": ["isAvailabilityChangeEventWithState", "private", "<", ">", "ArgumentMatcher", "(", ")", "{", "}", "S", "<", "ApplicationEvent", ">", "S", "state", "return", ";", "extends", "AvailabilityState", "->", "(", "argument", ")", "&&", "(", ")", ".", "equals", "argument", "instanceof", "availabilityChangeEvent", "availabilityChangeEvent", ".", "getState", "(", "state", ")", "AvailabilityChangeEvent", "(", ")", "<", ">", "?"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 67, "ast_depth": 12, "n_identifiers": 6, "vocab_size": 26, "n_whitespaces": 28, "n_words": 19, "nloc": 5, "token_counts": 43}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1437-1442", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "addListener", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#addListener", "start_line": 1437, "end_line": 1442, "signature": "addListener(SpringApplication application,\n\t\t\tClass<E> eventType)", "original_code": "private <E extends ApplicationEvent> AtomicReference<E> addListener(SpringApplication application,\n\t\t\tClass<E> eventType) {\n\t\tAtomicReference<E> reference = new AtomicReference<>();\n\t\tapplication.addListeners(new TestEventListener<>(eventType, reference));\n\t\treturn reference;\n\t}", "doc_comment": ""}, "code_tokens": ["addListener", "private", "<", ">", "AtomicReference", "(", ",", ")", "{", "}", "E", "<", "E", ">", "SpringApplication", "application", "eventType", ";", ";", "return", "reference", ";", "extends", "ApplicationEvent", "Class", "AtomicReference", "reference", "=", "application", ".", "addListeners", "<", "E", ">", "<", "E", ">", "new", "(", ")", "AtomicReference", "(", ")", "new", "<", ">", "TestEventListener", "(", "eventType", ",", "reference", ")", "<", ">"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 84, "ast_depth": 10, "n_identifiers": 5, "vocab_size": 25, "n_whitespaces": 30, "n_words": 25, "nloc": 6, "token_counts": 54}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1444-1460", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "matchingPropertySource", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#matchingPropertySource", "start_line": 1444, "end_line": 1460, "signature": "matchingPropertySource(final Class<?> propertySourceClass,\n\t\t\tfinal String name)", "original_code": "private Condition<ConfigurableEnvironment> matchingPropertySource(final Class<?> propertySourceClass,\n\t\t\tfinal String name) {\n\n\t\treturn new Condition<>(\"has property source\") {\n\n\t\t\t@Override\n\t\t\tpublic boolean matches(ConfigurableEnvironment value) {\n\t\t\t\tfor (PropertySource<?> source : value.getPropertySources()) {\n\t\t\t\t\tif (propertySourceClass.isInstance(source) && (name == null || name.equals(source.getName()))) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t};\n\t}", "doc_comment": ""}, "code_tokens": ["matchingPropertySource", "private", "Condition", "(", ",", ")", "{", "}", "<", "ConfigurableEnvironment", ">", "propertySourceClass", "String", "name", "return", ";", "final", "Class", "final", "new", "<", ">", "Condition", "(", ")", "{", "}", "?", "<", ">", "\"", "has property source", "\"", "boolean", "matches", "public", "(", ")", "{", "}", "@", "Override", "ConfigurableEnvironment", "value", "for", "(", "source", ":", ")", "return", "false", ";", "PropertySource", "value", ".", "getPropertySources", "{", "}", "<", ">", "(", ")", "if", "?", "(", ")", "{", "}", "&&", "return", "true", ";", "propertySourceClass", ".", "isInstance", "(", ")", "(", "source", ")", "||", "name", "==", "null", "name", ".", "equals", "(", ")", "source", ".", "getName", "(", ")"], "metrics": {"cyclomatic_complexity": 5, "n_ast_nodes": 143, "ast_depth": 20, "n_identifiers": 11, "vocab_size": 44, "n_whitespaces": 92, "n_words": 41, "nloc": 14, "token_counts": 94}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1449-1457", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "matches", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#matches", "start_line": 1449, "end_line": 1457, "signature": "matches(ConfigurableEnvironment value)", "original_code": "@Override\n\t\t\tpublic boolean matches(ConfigurableEnvironment value) {\n\t\t\t\tfor (PropertySource<?> source : value.getPropertySources()) {\n\t\t\t\t\tif (propertySourceClass.isInstance(source) && (name == null || name.equals(source.getName()))) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}", "doc_comment": ""}, "code_tokens": ["boolean", "matches", "public", "(", ")", "{", "}", "@", "Override", "ConfigurableEnvironment", "value", "for", "(", "source", ":", ")", "return", "false", ";", "PropertySource", "value", ".", "getPropertySources", "{", "}", "<", ">", "(", ")", "if", "?", "(", ")", "{", "}", "&&", "return", "true", ";", "propertySourceClass", ".", "isInstance", "(", ")", "(", "source", ")", "||", "name", "==", "null", "name", ".", "equals", "(", ")", "source", ".", "getName", "(", ")"], "metrics": {"cyclomatic_complexity": 5, "n_ast_nodes": 90, "ast_depth": 15, "n_identifiers": 10, "vocab_size": 34, "n_whitespaces": 61, "n_words": 25, "nloc": 9, "token_counts": 61}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1462-1471", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "runTestRunnerBean", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#runTestRunnerBean", "start_line": 1462, "end_line": 1471, "signature": "runTestRunnerBean(String name)", "original_code": "private Condition<ConfigurableApplicationContext> runTestRunnerBean(String name) {\n\t\treturn new Condition<>(\"run testrunner bean\") {\n\n\t\t\t@Override\n\t\t\tpublic boolean matches(ConfigurableApplicationContext value) {\n\t\t\t\treturn value.getBean(name, AbstractTestRunner.class).hasRun();\n\t\t\t}\n\n\t\t};\n\t}", "doc_comment": ""}, "code_tokens": ["runTestRunnerBean", "private", "Condition", "(", ")", "{", "}", "<", "ConfigurableApplicationContext", ">", "String", "name", "return", ";", "new", "Condition", "(", ")", "{", "}", "<", ">", "\"", "run testrunner bean", "\"", "boolean", "matches", "public", "(", ")", "{", "}", "@", "Override", "ConfigurableApplicationContext", "value", "return", ";", ".", "hasRun", "value", ".", "getBean", "(", ")", "(", "name", ",", ")", "AbstractTestRunner", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 79, "ast_depth": 14, "n_identifiers": 7, "vocab_size": 29, "n_whitespaces": 42, "n_words": 25, "nloc": 8, "token_counts": 52}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1465-1468", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "matches", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#matches", "start_line": 1465, "end_line": 1468, "signature": "matches(ConfigurableApplicationContext value)", "original_code": "@Override\n\t\t\tpublic boolean matches(ConfigurableApplicationContext value) {\n\t\t\t\treturn value.getBean(name, AbstractTestRunner.class).hasRun();\n\t\t\t}", "doc_comment": ""}, "code_tokens": ["boolean", "matches", "public", "(", ")", "{", "}", "@", "Override", "ConfigurableApplicationContext", "value", "return", ";", ".", "hasRun", "value", ".", "getBean", "(", ")", "(", "name", ",", ")", "AbstractTestRunner", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 40, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 20, "n_whitespaces": 19, "n_words": 13, "nloc": 4, "token_counts": 27}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1473-1475", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "getCurrentThreads", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#getCurrentThreads", "start_line": 1473, "end_line": 1475, "signature": "getCurrentThreads()", "original_code": "private Set<Thread> getCurrentThreads() {\n\t\treturn Thread.getAllStackTraces().keySet();\n\t}", "doc_comment": ""}, "code_tokens": ["getCurrentThreads", "private", "Set", "(", ")", "{", "}", "<", "Thread", ">", "return", ";", ".", "keySet", "Thread", ".", "getAllStackTraces", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 33, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 15, "n_whitespaces": 9, "n_words": 8, "nloc": 3, "token_counts": 21}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1477-1480", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "assertThatBannerModeIs", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#assertThatBannerModeIs", "start_line": 1477, "end_line": 1480, "signature": "assertThatBannerModeIs(SpringApplication application, Mode mode)", "original_code": "private void assertThatBannerModeIs(SpringApplication application, Mode mode) {\n\t\tObject properties = ReflectionTestUtils.getField(application, \"properties\");\n\t\tassertThat(properties).hasFieldOrPropertyWithValue(\"bannerMode\", mode);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "assertThatBannerModeIs", "private", "(", ",", ")", "{", "}", "SpringApplication", "application", "Mode", "mode", "Object", ";", ";", "properties", "=", ".", "hasFieldOrPropertyWithValue", "ReflectionTestUtils", ".", "getField", "assertThat", "(", ",", "mode", ")", "(", "application", ",", ")", "(", "properties", ")", "\"", "bannerMode", "\"", "\"", "properties", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 58, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 23, "n_whitespaces": 19, "n_words": 18, "nloc": 4, "token_counts": 40}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1493-1496", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "supportsEventType", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#supportsEventType", "start_line": 1493, "end_line": 1496, "signature": "supportsEventType(Class<? extends ApplicationEvent> eventType)", "original_code": "@Override\n\t\tpublic boolean supportsEventType(Class<? extends ApplicationEvent> eventType) {\n\t\t\treturn this.eventType.isAssignableFrom(eventType);\n\t\t}", "doc_comment": ""}, "code_tokens": ["boolean", "supportsEventType", "public", "(", ")", "{", "}", "@", "Override", "eventType", "return", ";", "Class", ".", "isAssignableFrom", "<", ">", "this", ".", "eventType", "(", "eventType", ")", "?", "extends", "ApplicationEvent"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 40, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 21, "n_whitespaces": 17, "n_words": 13, "nloc": 4, "token_counts": 26}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1498-1502", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "onApplicationEvent", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#onApplicationEvent", "start_line": 1498, "end_line": 1502, "signature": "onApplicationEvent(ApplicationEvent event)", "original_code": "@Override\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tpublic void onApplicationEvent(ApplicationEvent event) {\n\t\t\tthis.reference.set((E) event);\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "onApplicationEvent", "public", "(", ")", "{", "}", "@", "Override", "@", "SuppressWarnings", "ApplicationEvent", "event", ";", "(", ")", ".", "set", "\"", "unchecked", "\"", "this", ".", "reference", "(", ")", "(", "E", ")", "event"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 45, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 20, "n_whitespaces": 18, "n_words": 13, "nloc": 5, "token_counts": 30}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1512-1515", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "testMessage", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#testMessage", "start_line": 1512, "end_line": 1515, "signature": "testMessage()", "original_code": "@Bean\n\t\tString testMessage() {\n\t\t\treturn \"test\";\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "testMessage", "(", ")", "{", "}", "@", "Bean", "return", ";", "\"", "test", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 21, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 12, "n_whitespaces": 13, "n_words": 5, "nloc": 4, "token_counts": 13}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1523-1526", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "registerShutdownHook", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#registerShutdownHook", "start_line": 1523, "end_line": 1526, "signature": "registerShutdownHook()", "original_code": "@Override\n\t\tpublic void registerShutdownHook() {\n\t\t\tthis.applicationContext.registerShutdownHook();\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "registerShutdownHook", "public", "(", ")", "{", "}", "@", "Override", ";", ".", "registerShutdownHook", "this", ".", "applicationContext", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 27, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 13, "n_whitespaces": 13, "n_words": 7, "nloc": 4, "token_counts": 17}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1528-1530", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "getApplicationContext", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#getApplicationContext", "start_line": 1528, "end_line": 1530, "signature": "getApplicationContext()", "original_code": "ConfigurableApplicationContext getApplicationContext() {\n\t\t\treturn this.applicationContext;\n\t\t}", "doc_comment": ""}, "code_tokens": ["ConfigurableApplicationContext", "getApplicationContext", "(", ")", "{", "}", "return", ";", "this", ".", "applicationContext"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 17, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 11, "n_whitespaces": 10, "n_words": 5, "nloc": 3, "token_counts": 11}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1532-1536", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "close", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#close", "start_line": 1532, "end_line": 1536, "signature": "close()", "original_code": "@Override\n\t\tpublic void close() {\n\t\t\tthis.applicationContext.close();\n\t\t\tsuper.close();\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "close", "public", "(", ")", "{", "}", "@", "Override", ";", ";", ".", "close", "super", ".", "close", "this", ".", "applicationContext", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 36, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 17, "n_words": 9, "nloc": 5, "token_counts": 23}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1554-1556", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "setUseMockLoader", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#setUseMockLoader", "start_line": 1554, "end_line": 1556, "signature": "setUseMockLoader(boolean useMockLoader)", "original_code": "void setUseMockLoader(boolean useMockLoader) {\n\t\t\tthis.useMockLoader = useMockLoader;\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "setUseMockLoader", "(", ")", "{", "}", "boolean", "useMockLoader", ";", "=", "useMockLoader", "this", ".", "useMockLoader"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 12, "n_whitespaces": 12, "n_words": 7, "nloc": 3, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1558-1567", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "createBeanDefinitionLoader", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#createBeanDefinitionLoader", "start_line": 1558, "end_line": 1567, "signature": "createBeanDefinitionLoader(BeanDefinitionRegistry registry, Object[] sources)", "original_code": "@Override\n\t\tprotected BeanDefinitionLoader createBeanDefinitionLoader(BeanDefinitionRegistry registry, Object[] sources) {\n\t\t\tif (this.useMockLoader) {\n\t\t\t\tthis.loader = mock(BeanDefinitionLoader.class);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.loader = spy(super.createBeanDefinitionLoader(registry, sources));\n\t\t\t}\n\t\t\treturn this.loader;\n\t\t}", "doc_comment": ""}, "code_tokens": ["BeanDefinitionLoader", "createBeanDefinitionLoader", "protected", "(", ",", ")", "{", "}", "@", "Override", "BeanDefinitionRegistry", "registry", "sources", "if", "else", "return", ";", "Object", "(", ")", "{", "}", "{", "}", "this", ".", "loader", "[", "]", "this", ".", "useMockLoader", ";", ";", "=", "=", "this", ".", "loader", "mock", "this", ".", "loader", "spy", "(", ")", "(", ")", "BeanDefinitionLoader", ".", "class", "super", ".", "createBeanDefinitionLoader", "(", "registry", ",", "sources", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 89, "ast_depth": 12, "n_identifiers": 8, "vocab_size": 29, "n_whitespaces": 51, "n_words": 27, "nloc": 10, "token_counts": 59}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1569-1571", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "getLoader", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#getLoader", "start_line": 1569, "end_line": 1571, "signature": "getLoader()", "original_code": "BeanDefinitionLoader getLoader() {\n\t\t\treturn this.loader;\n\t\t}", "doc_comment": ""}, "code_tokens": ["BeanDefinitionLoader", "getLoader", "(", ")", "{", "}", "return", ";", "this", ".", "loader"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 17, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 11, "n_whitespaces": 10, "n_words": 5, "nloc": 3, "token_counts": 11}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1573-1575", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "getBannerMode", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#getBannerMode", "start_line": 1573, "end_line": 1575, "signature": "getBannerMode()", "original_code": "Banner.Mode getBannerMode() {\n\t\t\treturn this.properties.getBannerMode(new MockEnvironment());\n\t\t}", "doc_comment": ""}, "code_tokens": ["getBannerMode", "Banner", ".", "Mode", "(", ")", "{", "}", "return", ";", ".", "getBannerMode", "this", ".", "properties", "(", ")", "new", "MockEnvironment", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 32, "ast_depth": 9, "n_identifiers": 2, "vocab_size": 14, "n_whitespaces": 11, "n_words": 9, "nloc": 3, "token_counts": 21}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1582-1585", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "someBean", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#someBean", "start_line": 1582, "end_line": 1585, "signature": "someBean()", "original_code": "@Bean\n\t\tString someBean() {\n\t\t\treturn \"test\";\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "someBean", "(", ")", "{", "}", "@", "Bean", "return", ";", "\"", "test", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 21, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 12, "n_whitespaces": 13, "n_words": 5, "nloc": 4, "token_counts": 13}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1592-1595", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "someBean", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#someBean", "start_line": 1592, "end_line": 1595, "signature": "someBean()", "original_code": "@Bean\n\t\tString someBean() {\n\t\t\treturn \"override\";\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "someBean", "(", ")", "{", "}", "@", "Bean", "return", ";", "\"", "override", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 21, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 12, "n_whitespaces": 13, "n_words": 5, "nloc": 4, "token_counts": 13}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1602-1605", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "thing", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#thing", "start_line": 1602, "end_line": 1605, "signature": "thing()", "original_code": "@Bean\n\t\tThing thing() {\n\t\t\treturn new Thing();\n\t\t}", "doc_comment": ""}, "code_tokens": ["Thing", "thing", "(", ")", "{", "}", "@", "Bean", "return", ";", "new", "Thing", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 23, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 11, "n_whitespaces": 14, "n_words": 6, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1609-1612", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "boom", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#boom", "start_line": 1609, "end_line": 1612, "signature": "boom()", "original_code": "@PostConstruct\n\t\t\tvoid boom() {\n\t\t\t\tthrow new IllegalStateException();\n\t\t\t}", "doc_comment": ""}, "code_tokens": ["void", "boom", "(", ")", "{", "}", "@", "PostConstruct", "throw", ";", "new", "IllegalStateException", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 23, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 12, "n_whitespaces": 17, "n_words": 6, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1621-1626", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "brokenBeanFactoryPostProcessor", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#brokenBeanFactoryPostProcessor", "start_line": 1621, "end_line": 1626, "signature": "brokenBeanFactoryPostProcessor()", "original_code": "@Bean\n\t\tstatic BeanFactoryPostProcessor brokenBeanFactoryPostProcessor() {\n\t\t\treturn (beanFactory) -> {\n\t\t\t\tthrow new ApplicationContextException(\"broken\");\n\t\t\t};\n\t\t}", "doc_comment": ""}, "code_tokens": ["BeanFactoryPostProcessor", "brokenBeanFactoryPostProcessor", "static", "(", ")", "{", "}", "@", "Bean", "return", ";", "->", "(", "beanFactory", ")", "{", "}", "throw", ";", "new", "ApplicationContextException", "(", ")", "\"", "broken", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 40, "ast_depth": 11, "n_identifiers": 3, "vocab_size": 18, "n_whitespaces": 27, "n_words": 10, "nloc": 6, "token_counts": 26}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1633-1636", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "testApplicationListener", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#testApplicationListener", "start_line": 1633, "end_line": 1636, "signature": "testApplicationListener()", "original_code": "@Bean\n\t\tApplicationListener<?> testApplicationListener() {\n\t\t\treturn mock(ApplicationListener.class);\n\t\t}", "doc_comment": ""}, "code_tokens": ["testApplicationListener", "ApplicationListener", "(", ")", "{", "}", "@", "Bean", "<", ">", "return", ";", "?", "mock", "(", ")", "ApplicationListener", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 32, "ast_depth": 8, "n_identifiers": 3, "vocab_size": 16, "n_whitespaces": 13, "n_words": 7, "nloc": 4, "token_counts": 19}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1643-1646", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "applicationEventMulticaster", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#applicationEventMulticaster", "start_line": 1643, "end_line": 1646, "signature": "applicationEventMulticaster()", "original_code": "@Bean(name = AbstractApplicationContext.APPLICATION_EVENT_MULTICASTER_BEAN_NAME)\n\t\tApplicationEventMulticaster applicationEventMulticaster() {\n\t\t\treturn spy(new SimpleApplicationEventMulticaster());\n\t\t}", "doc_comment": ""}, "code_tokens": ["ApplicationEventMulticaster", "applicationEventMulticaster", "(", ")", "{", "}", "@", "Bean", "return", ";", "(", ")", "spy", "name", "=", "(", ")", "AbstractApplicationContext", ".", "APPLICATION_EVENT_MULTICASTER_BEAN_NAME", "new", "SimpleApplicationEventMulticaster", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 38, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 18, "n_whitespaces": 16, "n_words": 10, "nloc": 4, "token_counts": 24}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1653-1656", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "fail", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#fail", "start_line": 1653, "end_line": 1656, "signature": "fail()", "original_code": "@Bean\n\t\tObject fail() {\n\t\t\tthrow new RuntimeException(\"ExpectedError\");\n\t\t}", "doc_comment": ""}, "code_tokens": ["Object", "fail", "(", ")", "{", "}", "@", "Bean", "throw", ";", "new", "RuntimeException", "(", ")", "\"", "ExpectedError", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 27, "ast_depth": 8, "n_identifiers": 2, "vocab_size": 14, "n_whitespaces": 14, "n_words": 7, "nloc": 4, "token_counts": 17}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1663-1666", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "runnerC", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#runnerC", "start_line": 1663, "end_line": 1666, "signature": "runnerC()", "original_code": "@Bean\n\t\tTestCommandLineRunner runnerC() {\n\t\t\treturn new TestCommandLineRunner(\"runnerC\", Ordered.LOWEST_PRECEDENCE, \"runnerB\", \"runnerA\");\n\t\t}", "doc_comment": ""}, "code_tokens": ["TestCommandLineRunner", "runnerC", "(", ")", "{", "}", "@", "Bean", "return", ";", "new", "TestCommandLineRunner", "(", ",", ",", ",", ")", "\"", "runnerC", "\"", "Ordered", ".", "LOWEST_PRECEDENCE", "\"", "runnerB", "\"", "\"", "runnerA", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 42, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 18, "n_whitespaces": 17, "n_words": 11, "nloc": 4, "token_counts": 29}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1668-1671", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "runnerB", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#runnerB", "start_line": 1668, "end_line": 1671, "signature": "runnerB()", "original_code": "@Bean\n\t\tTestApplicationRunner runnerB() {\n\t\t\treturn new TestApplicationRunner(\"runnerB\", Ordered.LOWEST_PRECEDENCE - 1, \"runnerA\");\n\t\t}", "doc_comment": ""}, "code_tokens": ["TestApplicationRunner", "runnerB", "(", ")", "{", "}", "@", "Bean", "return", ";", "new", "TestApplicationRunner", "(", ",", ",", ")", "\"", "runnerB", "\"", "-", "1", "\"", "runnerA", "\"", "Ordered", ".", "LOWEST_PRECEDENCE"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 40, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 19, "n_whitespaces": 18, "n_words": 11, "nloc": 4, "token_counts": 27}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1673-1676", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "runnerA", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#runnerA", "start_line": 1673, "end_line": 1676, "signature": "runnerA()", "original_code": "@Bean\n\t\tTestCommandLineRunner runnerA() {\n\t\t\treturn new TestCommandLineRunner(\"runnerA\", Ordered.HIGHEST_PRECEDENCE);\n\t\t}", "doc_comment": ""}, "code_tokens": ["TestCommandLineRunner", "runnerA", "(", ")", "{", "}", "@", "Bean", "return", ";", "new", "TestCommandLineRunner", "(", ",", ")", "\"", "runnerA", "\"", "Ordered", ".", "HIGHEST_PRECEDENCE"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 32, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 16, "n_whitespaces": 15, "n_words": 9, "nloc": 4, "token_counts": 21}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1683-1686", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "runnerP", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#runnerP", "start_line": 1683, "end_line": 1686, "signature": "runnerP()", "original_code": "@Bean\n\t\tTestCommandLineRunner runnerP() {\n\t\t\treturn new TestCommandLineRunner(\"runnerP\", Ordered.LOWEST_PRECEDENCE);\n\t\t}", "doc_comment": ""}, "code_tokens": ["TestCommandLineRunner", "runnerP", "(", ")", "{", "}", "@", "Bean", "return", ";", "new", "TestCommandLineRunner", "(", ",", ")", "\"", "runnerP", "\"", "Ordered", ".", "LOWEST_PRECEDENCE"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 32, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 16, "n_whitespaces": 15, "n_words": 9, "nloc": 4, "token_counts": 21}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1695-1699", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "runnerC", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#runnerC", "start_line": 1695, "end_line": 1699, "signature": "runnerC()", "original_code": "@Bean\n\t\t@Order\n\t\tCommandLineRunner runnerC() {\n\t\t\treturn (args) -> this.runners.add(\"runnerC\");\n\t\t}", "doc_comment": ""}, "code_tokens": ["CommandLineRunner", "runnerC", "(", ")", "{", "}", "@", "Bean", "@", "Order", "return", ";", "->", "(", "args", ")", ".", "add", "this", ".", "runners", "(", ")", "\"", "runnerC", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 40, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 18, "n_whitespaces": 18, "n_words": 10, "nloc": 5, "token_counts": 26}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1701-1705", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "runnerB", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#runnerB", "start_line": 1701, "end_line": 1705, "signature": "runnerB()", "original_code": "@Bean\n\t\t@Order(Ordered.LOWEST_PRECEDENCE - 1)\n\t\tApplicationRunner runnerB() {\n\t\t\treturn (args) -> this.runners.add(\"runnerB\");\n\t\t}", "doc_comment": ""}, "code_tokens": ["ApplicationRunner", "runnerB", "(", ")", "{", "}", "@", "Bean", "@", "Order", "return", ";", "(", ")", "->", "-", "1", "(", "args", ")", ".", "add", "Ordered", ".", "LOWEST_PRECEDENCE", "this", ".", "runners", "(", ")", "\"", "runnerB", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 50, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 22, "n_whitespaces": 20, "n_words": 13, "nloc": 5, "token_counts": 33}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1707-1711", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "runnerA", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#runnerA", "start_line": 1707, "end_line": 1711, "signature": "runnerA()", "original_code": "@Bean\n\t\t@Order(Ordered.HIGHEST_PRECEDENCE)\n\t\tCommandLineRunner runnerA() {\n\t\t\treturn (args) -> this.runners.add(\"runnerA\");\n\t\t}", "doc_comment": ""}, "code_tokens": ["CommandLineRunner", "runnerA", "(", ")", "{", "}", "@", "Bean", "@", "Order", "return", ";", "(", ")", "->", "Ordered", ".", "HIGHEST_PRECEDENCE", "(", "args", ")", ".", "add", "this", ".", "runners", "(", ")", "\"", "runnerA", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 47, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 20, "n_whitespaces": 18, "n_words": 12, "nloc": 5, "token_counts": 31}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1718-1723", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "runner", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#runner", "start_line": 1718, "end_line": 1723, "signature": "runner()", "original_code": "@Bean\n\t\tCommandLineRunner runner() {\n\t\t\treturn (args) -> {\n\t\t\t\tthrow new IllegalStateException(new ExitStatusException());\n\t\t\t};\n\t\t}", "doc_comment": ""}, "code_tokens": ["CommandLineRunner", "runner", "(", ")", "{", "}", "@", "Bean", "return", ";", "->", "(", "args", ")", "{", "}", "throw", ";", "new", "IllegalStateException", "(", ")", "new", "ExitStatusException", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 41, "ast_depth": 12, "n_identifiers": 3, "vocab_size": 16, "n_whitespaces": 27, "n_words": 10, "nloc": 6, "token_counts": 26}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1730-1735", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "runner", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#runner", "start_line": 1730, "end_line": 1735, "signature": "runner()", "original_code": "@Bean\n\t\tCommandLineRunner runner() {\n\t\t\treturn (args) -> {\n\t\t\t\tthrow new IllegalStateException();\n\t\t\t};\n\t\t}", "doc_comment": ""}, "code_tokens": ["CommandLineRunner", "runner", "(", ")", "{", "}", "@", "Bean", "return", ";", "->", "(", "args", ")", "{", "}", "throw", ";", "new", "IllegalStateException", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 35, "ast_depth": 10, "n_identifiers": 3, "vocab_size": 15, "n_whitespaces": 26, "n_words": 8, "nloc": 6, "token_counts": 22}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1737-1745", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "exceptionMapper", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#exceptionMapper", "start_line": 1737, "end_line": 1745, "signature": "exceptionMapper()", "original_code": "@Bean\n\t\tExitCodeExceptionMapper exceptionMapper() {\n\t\t\treturn (exception) -> {\n\t\t\t\tif (exception instanceof IllegalStateException) {\n\t\t\t\t\treturn 11;\n\t\t\t\t}\n\t\t\t\treturn 0;\n\t\t\t};\n\t\t}", "doc_comment": ""}, "code_tokens": ["ExitCodeExceptionMapper", "exceptionMapper", "(", ")", "{", "}", "@", "Bean", "return", ";", "->", "(", "exception", ")", "{", "}", "if", "return", "0", ";", "(", ")", "{", "}", "exception", "instanceof", "IllegalStateException", "return", "11", ";"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 46, "ast_depth": 10, "n_identifiers": 3, "vocab_size": 17, "n_whitespaces": 46, "n_words": 13, "nloc": 9, "token_counts": 30}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1752-1755", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "fail", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#fail", "start_line": 1752, "end_line": 1755, "signature": "fail()", "original_code": "@PostConstruct\n\t\tvoid fail() {\n\t\t\tthrow new RefreshFailureException();\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "fail", "(", ")", "{", "}", "@", "PostConstruct", "throw", ";", "new", "RefreshFailureException", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 23, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 12, "n_whitespaces": 14, "n_words": 6, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1762-1765", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "counter", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#counter", "start_line": 1762, "end_line": 1765, "signature": "counter()", "original_code": "@Bean\n\t\tAtomicInteger counter() {\n\t\t\treturn new AtomicInteger();\n\t\t}", "doc_comment": ""}, "code_tokens": ["AtomicInteger", "counter", "(", ")", "{", "}", "@", "Bean", "return", ";", "new", "AtomicInteger", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 23, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 11, "n_whitespaces": 14, "n_words": 6, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1767-1770", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "lazyBean", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#lazyBean", "start_line": 1767, "end_line": 1770, "signature": "lazyBean(AtomicInteger counter)", "original_code": "@Bean\n\t\tLazyBean lazyBean(AtomicInteger counter) {\n\t\t\treturn new LazyBean(counter);\n\t\t}", "doc_comment": ""}, "code_tokens": ["LazyBean", "lazyBean", "(", ")", "{", "}", "@", "Bean", "AtomicInteger", "counter", "return", ";", "new", "LazyBean", "(", "counter", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 27, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 13, "n_whitespaces": 15, "n_words": 9, "nloc": 4, "token_counts": 17}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1785-1788", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "counter", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#counter", "start_line": 1785, "end_line": 1788, "signature": "counter()", "original_code": "@Bean\n\t\tAtomicInteger counter() {\n\t\t\treturn new AtomicInteger();\n\t\t}", "doc_comment": ""}, "code_tokens": ["AtomicInteger", "counter", "(", ")", "{", "}", "@", "Bean", "return", ";", "new", "AtomicInteger", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 23, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 11, "n_whitespaces": 14, "n_words": 6, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1790-1794", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "NotLazyBean", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#NotLazyBean", "start_line": 1790, "end_line": 1794, "signature": "NotLazyBean(AtomicInteger counter)", "original_code": "@Bean\n\t\t@Lazy(false)\n\t\tNotLazyBean NotLazyBean(AtomicInteger counter) {\n\t\t\treturn new NotLazyBean(counter);\n\t\t}", "doc_comment": ""}, "code_tokens": ["NotLazyBean", "NotLazyBean", "(", ")", "{", "}", "@", "Bean", "@", "Lazy", "AtomicInteger", "counter", "return", ";", "(", "false", ")", "new", "NotLazyBean", "(", "counter", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 34, "ast_depth": 7, "n_identifiers": 4, "vocab_size": 14, "n_whitespaces": 18, "n_words": 11, "nloc": 5, "token_counts": 22}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1809-1812", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "counter", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#counter", "start_line": 1809, "end_line": 1812, "signature": "counter()", "original_code": "@Bean\n\t\tAtomicInteger counter() {\n\t\t\treturn new AtomicInteger();\n\t\t}", "doc_comment": ""}, "code_tokens": ["AtomicInteger", "counter", "(", ")", "{", "}", "@", "Bean", "return", ";", "new", "AtomicInteger", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 23, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 11, "n_whitespaces": 14, "n_words": 6, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1814-1817", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "notLazyBean", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#notLazyBean", "start_line": 1814, "end_line": 1817, "signature": "notLazyBean(AtomicInteger counter)", "original_code": "@Bean\n\t\tNotLazyBean notLazyBean(AtomicInteger counter) {\n\t\t\treturn new NotLazyBean(counter);\n\t\t}", "doc_comment": ""}, "code_tokens": ["NotLazyBean", "notLazyBean", "(", ")", "{", "}", "@", "Bean", "AtomicInteger", "counter", "return", ";", "new", "NotLazyBean", "(", "counter", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 27, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 13, "n_whitespaces": 15, "n_words": 9, "nloc": 4, "token_counts": 17}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1819-1822", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "lazyInitializationExcludeFilter", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#lazyInitializationExcludeFilter", "start_line": 1819, "end_line": 1822, "signature": "lazyInitializationExcludeFilter()", "original_code": "@Bean\n\t\tstatic LazyInitializationExcludeFilter lazyInitializationExcludeFilter() {\n\t\t\treturn LazyInitializationExcludeFilter.forBeanTypes(NotLazyBean.class);\n\t\t}", "doc_comment": ""}, "code_tokens": ["LazyInitializationExcludeFilter", "lazyInitializationExcludeFilter", "static", "(", ")", "{", "}", "@", "Bean", "return", ";", "LazyInitializationExcludeFilter", ".", "forBeanTypes", "(", ")", "NotLazyBean", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 29, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 15, "n_whitespaces": 14, "n_words": 9, "nloc": 4, "token_counts": 19}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1842-1845", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "getExitCode", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#getExitCode", "start_line": 1842, "end_line": 1845, "signature": "getExitCode()", "original_code": "@Override\n\t\tpublic int getExitCode() {\n\t\t\treturn 11;\n\t\t}", "doc_comment": ""}, "code_tokens": ["getExitCode", "public", "int", "(", ")", "{", "}", "@", "Override", "return", "11", ";"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 20, "ast_depth": 5, "n_identifiers": 2, "vocab_size": 12, "n_whitespaces": 14, "n_words": 6, "nloc": 4, "token_counts": 12}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1868-1871", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "setApplicationContext", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#setApplicationContext", "start_line": 1868, "end_line": 1871, "signature": "setApplicationContext(ApplicationContext applicationContext)", "original_code": "@Override\n\t\tpublic void setApplicationContext(ApplicationContext applicationContext) {\n\t\t\tthis.applicationContext = applicationContext;\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "setApplicationContext", "public", "(", ")", "{", "}", "@", "Override", "ApplicationContext", "applicationContext", ";", "=", "applicationContext", "this", ".", "applicationContext"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 27, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 15, "n_whitespaces": 16, "n_words": 9, "nloc": 4, "token_counts": 17}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1873-1876", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "getOrder", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#getOrder", "start_line": 1873, "end_line": 1876, "signature": "getOrder()", "original_code": "@Override\n\t\tpublic int getOrder() {\n\t\t\treturn this.order;\n\t\t}", "doc_comment": ""}, "code_tokens": ["getOrder", "public", "int", "(", ")", "{", "}", "@", "Override", "return", ";", "this", ".", "order"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 23, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1878-1884", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "markAsRan", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#markAsRan", "start_line": 1878, "end_line": 1884, "signature": "markAsRan()", "original_code": "void markAsRan() {\n\t\t\tthis.run = true;\n\t\t\tfor (String name : this.expectedBefore) {\n\t\t\t\tAbstractTestRunner bean = this.applicationContext.getBean(name, AbstractTestRunner.class);\n\t\t\t\tassertThat(bean.hasRun()).isTrue();\n\t\t\t}\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "markAsRan", "(", ")", "{", "}", ";", "for", "(", "String", "name", ":", ")", "=", "true", "this", ".", "expectedBefore", "{", "}", "this", ".", "run", "AbstractTestRunner", ";", ";", "bean", "=", ".", "isTrue", ".", "getBean", "assertThat", "(", ")", "this", ".", "applicationContext", "(", "name", ",", ")", "(", ")", "AbstractTestRunner", ".", "class", "bean", ".", "hasRun", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 75, "ast_depth": 12, "n_identifiers": 10, "vocab_size": 26, "n_whitespaces": 38, "n_words": 22, "nloc": 7, "token_counts": 52}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1886-1888", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "hasRun", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#hasRun", "start_line": 1886, "end_line": 1888, "signature": "hasRun()", "original_code": "boolean hasRun() {\n\t\t\treturn this.run;\n\t\t}", "doc_comment": ""}, "code_tokens": ["boolean", "hasRun", "(", ")", "{", "}", "return", ";", "this", ".", "run"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 17, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 11, "n_whitespaces": 10, "n_words": 5, "nloc": 3, "token_counts": 11}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1901-1905", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "run", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#run", "start_line": 1901, "end_line": 1905, "signature": "run(String... args)", "original_code": "@Override\n\t\tpublic void run(String... args) {\n\t\t\tSystem.out.println(\">>> \" + this.name);\n\t\t\tmarkAsRan();\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "run", "public", "(", ")", "{", "}", "@", "Override", "String", "...", ";", ";", "args", ".", "println", "markAsRan", "System", ".", "out", "(", ")", "(", ")", "+", "\"", ">>> ", "\"", "this", ".", "name"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 49, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 23, "n_whitespaces": 21, "n_words": 12, "nloc": 5, "token_counts": 31}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1918-1922", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "run", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#run", "start_line": 1918, "end_line": 1922, "signature": "run(ApplicationArguments args)", "original_code": "@Override\n\t\tpublic void run(ApplicationArguments args) {\n\t\t\tSystem.out.println(\">>> \" + this.name);\n\t\t\tmarkAsRan();\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "run", "public", "(", ")", "{", "}", "@", "Override", "ApplicationArguments", "args", ";", ";", ".", "println", "markAsRan", "System", ".", "out", "(", ")", "(", ")", "+", "\"", ">>> ", "\"", "this", ".", "name"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 47, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 22, "n_whitespaces": 21, "n_words": 12, "nloc": 5, "token_counts": 30}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1930-1933", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "onApplicationEvent", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#onApplicationEvent", "start_line": 1930, "end_line": 1933, "signature": "onApplicationEvent(ExitCodeEvent event)", "original_code": "@Override\n\t\tpublic void onApplicationEvent(ExitCodeEvent event) {\n\t\t\tthis.exitCode = event.getExitCode();\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "onApplicationEvent", "public", "(", ")", "{", "}", "@", "Override", "ExitCodeEvent", "event", ";", "=", "this", ".", "exitCode", "event", ".", "getExitCode", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 33, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 17, "n_whitespaces": 16, "n_words": 10, "nloc": 4, "token_counts": 21}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1935-1937", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "getExitCode", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#getExitCode", "start_line": 1935, "end_line": 1937, "signature": "getExitCode()", "original_code": "Integer getExitCode() {\n\t\t\treturn this.exitCode;\n\t\t}", "doc_comment": ""}, "code_tokens": ["Integer", "getExitCode", "(", ")", "{", "}", "return", ";", "this", ".", "exitCode"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 17, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 11, "n_whitespaces": 10, "n_words": 5, "nloc": 3, "token_counts": 11}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1945-1947", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "addResource", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#addResource", "start_line": 1945, "end_line": 1947, "signature": "addResource(String source, String path)", "original_code": "void addResource(String source, String path) {\n\t\t\tthis.resources.put(source, new ClassPathResource(path, getClass()));\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "addResource", "(", ",", ")", "{", "}", "String", "source", "String", "path", ";", ".", "put", "this", ".", "resources", "(", "source", ",", ")", "new", "ClassPathResource", "(", "path", ",", ")", "getClass", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 44, "ast_depth": 11, "n_identifiers": 6, "vocab_size": 18, "n_whitespaces": 15, "n_words": 14, "nloc": 3, "token_counts": 30}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1949-1953", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "getResource", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#getResource", "start_line": 1949, "end_line": 1953, "signature": "getResource(String path)", "original_code": "@Override\n\t\tpublic Resource getResource(String path) {\n\t\t\tResource resource = this.resources.get(path);\n\t\t\treturn (resource != null) ? resource : new ClassPathResource(\"doesnotexist\");\n\t\t}", "doc_comment": ""}, "code_tokens": ["Resource", "getResource", "public", "(", ")", "{", "}", "@", "Override", "String", "path", "Resource", ";", "return", ";", "resource", "=", "?", "resource", ":", ".", "get", "(", ")", "new", "ClassPathResource", "this", ".", "resources", "(", "path", ")", "resource", "!=", "null", "(", ")", "\"", "doesnotexist", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 59, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 27, "n_whitespaces": 29, "n_words": 19, "nloc": 5, "token_counts": 40}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1955-1958", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "getClassLoader", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#getClassLoader", "start_line": 1955, "end_line": 1958, "signature": "getClassLoader()", "original_code": "@Override\n\t\tpublic ClassLoader getClassLoader() {\n\t\t\treturn getClass().getClassLoader();\n\t\t}", "doc_comment": ""}, "code_tokens": ["ClassLoader", "getClassLoader", "public", "(", ")", "{", "}", "@", "Override", "return", ";", ".", "getClassLoader", "getClass", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 29, "ast_depth": 8, "n_identifiers": 3, "vocab_size": 13, "n_whitespaces": 14, "n_words": 7, "nloc": 4, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1966-1969", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "onApplicationEvent", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#onApplicationEvent", "start_line": 1966, "end_line": 1969, "signature": "onApplicationEvent(ApplicationEvent event)", "original_code": "@Override\n\t\tpublic void onApplicationEvent(ApplicationEvent event) {\n\t\t\tthis.events.add(event.getClass(), event);\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "onApplicationEvent", "public", "(", ")", "{", "}", "@", "Override", "ApplicationEvent", "event", ";", ".", "add", "this", ".", "events", "(", ",", "event", ")", "event", ".", "getClass", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 39, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 18, "n_whitespaces": 15, "n_words": 12, "nloc": 4, "token_counts": 26}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1971-1974", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "getEvent", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#getEvent", "start_line": 1971, "end_line": 1974, "signature": "getEvent(Class<E> type)", "original_code": "@SuppressWarnings(\"unchecked\")\n\t\t<E extends ApplicationEvent> E getEvent(Class<E> type) {\n\t\t\treturn (E) this.events.get(type).get(0);\n\t\t}", "doc_comment": ""}, "code_tokens": ["E", "getEvent", "<", ">", "(", ")", "{", "}", "@", "SuppressWarnings", "E", "type", "return", ";", "(", ")", "extends", "ApplicationEvent", "Class", "(", "E", ")", "\"", "unchecked", "\"", "<", "E", ">", ".", "get", ".", "get", "(", "0", ")", "this", ".", "events", "(", "type", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 62, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 23, "n_whitespaces": 18, "n_words": 18, "nloc": 4, "token_counts": 41}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1985-1985", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "configure", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#configure", "start_line": 1985, "end_line": 1985, "signature": "configure(Example example)", "original_code": "void configure(Example example);", "doc_comment": ""}, "code_tokens": ["void", "configure", ";", "(", ")", "Example", "example"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 11, "ast_depth": 5, "n_identifiers": 2, "vocab_size": 7, "n_whitespaces": 2, "n_words": 4, "nloc": 1, "token_counts": 7}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1992-1997", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "example", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#example", "start_line": 1992, "end_line": 1997, "signature": "example(ObjectProvider<ExampleConfigurer> configurers)", "original_code": "@Bean\n\t\tExample example(ObjectProvider<ExampleConfigurer> configurers) {\n\t\t\tExample example = new Example();\n\t\t\tconfigurers.orderedStream().forEach((configurer) -> configurer.configure(example));\n\t\t\treturn example;\n\t\t}", "doc_comment": ""}, "code_tokens": ["Example", "example", "(", ")", "{", "}", "@", "Bean", "configurers", "Example", ";", ";", "return", "example", ";", "ObjectProvider", "example", "=", ".", "forEach", "<", "ExampleConfigurer", ">", "new", "Example", "configurers", ".", "orderedStream", "(", ")", "(", ")", "(", ")", "->", "(", "configurer", ")", "configurer", ".", "configure", "(", "example", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 67, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 23, "n_whitespaces": 28, "n_words": 19, "nloc": 6, "token_counts": 44}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#2007-2011", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "configurer", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#configurer", "start_line": 2007, "end_line": 2011, "signature": "configurer()", "original_code": "@Bean\n\t\tExampleConfigurer configurer() {\n\t\t\treturn (example) -> {\n\t\t\t};\n\t\t}", "doc_comment": ""}, "code_tokens": ["ExampleConfigurer", "configurer", "(", ")", "{", "}", "@", "Bean", "return", ";", "->", "(", "example", ")", "{", "}"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 26, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 12, "n_whitespaces": 19, "n_words": 5, "nloc": 5, "token_counts": 16}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#2022-2025", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "initialize", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#initialize", "start_line": 2022, "end_line": 2025, "signature": "initialize(ConfigurableApplicationContext applicationContext)", "original_code": "@Override\n\t\tpublic void initialize(ConfigurableApplicationContext applicationContext) {\n\t\t\tapplicationContext.getBeanFactory().registerSingleton(\"test\", \"test\");\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "initialize", "public", "(", ")", "{", "}", "@", "Override", "ConfigurableApplicationContext", "applicationContext", ";", ".", "registerSingleton", "applicationContext", ".", "getBeanFactory", "(", ",", ")", "(", ")", "\"", "test", "\"", "\"", "test", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 42, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 18, "n_whitespaces": 15, "n_words": 11, "nloc": 4, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#2031-2035", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "main", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#main", "start_line": 2031, "end_line": 2035, "signature": "main(String[] args)", "original_code": "static void main(String[] args) {\n\t\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\t\tapplication.run(args);\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "main", "static", "(", ")", "{", "}", "args", "SpringApplication", ";", ";", ";", "String", "application", "=", "application", ".", "setWebApplicationType", "application", ".", "run", "[", "]", "new", "SpringApplication", "(", ")", "(", "args", ")", "(", ")", "WebApplicationType", ".", "NONE", "ExampleConfig", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 58, "ast_depth": 9, "n_identifiers": 7, "vocab_size": 23, "n_whitespaces": 23, "n_words": 18, "nloc": 5, "token_counts": 38}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#2041-2056", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "main", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#main", "start_line": 2041, "end_line": 2056, "signature": "main(String[] args)", "original_code": "static void main(String[] args) {\n\t\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\t\tapplication.addListeners(new ApplicationListener<ApplicationEnvironmentPreparedEvent>() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic void onApplicationEvent(ApplicationEnvironmentPreparedEvent event) {\n\t\t\t\t\tSpringApplicationBuilder builder = new SpringApplicationBuilder(\n\t\t\t\t\t\t\tInnerApplicationConfiguration.class);\n\t\t\t\t\tbuilder.web(WebApplicationType.NONE);\n\t\t\t\t\tbuilder.run().close();\n\t\t\t\t}\n\n\t\t\t});\n\t\t\tapplication.run(args);\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "main", "static", "(", ")", "{", "}", "args", "SpringApplication", ";", ";", ";", ";", "String", "application", "=", "application", ".", "setWebApplicationType", "application", ".", "addListeners", "application", ".", "run", "[", "]", "new", "SpringApplication", "(", ")", "(", ")", "(", "args", ")", "(", ")", "WebApplicationType", ".", "NONE", "new", "ExampleConfig", ".", "class", "ApplicationListener", "(", ")", "{", "}", "<", "ApplicationEnvironmentPreparedEvent", ">", "void", "onApplicationEvent", "public", "(", ")", "{", "}", "@", "Override", "ApplicationEnvironmentPreparedEvent", "event", "SpringApplicationBuilder", ";", ";", ";", "builder", "=", "builder", ".", "web", ".", "close", "new", "SpringApplicationBuilder", "(", ")", "builder", ".", "run", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "InnerApplicationConfiguration", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 142, "ast_depth": 16, "n_identifiers": 14, "vocab_size": 38, "n_whitespaces": 84, "n_words": 42, "nloc": 14, "token_counts": 94}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#2046-2052", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "onApplicationEvent", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#onApplicationEvent", "start_line": 2046, "end_line": 2052, "signature": "onApplicationEvent(ApplicationEnvironmentPreparedEvent event)", "original_code": "@Override\n\t\t\t\tpublic void onApplicationEvent(ApplicationEnvironmentPreparedEvent event) {\n\t\t\t\t\tSpringApplicationBuilder builder = new SpringApplicationBuilder(\n\t\t\t\t\t\t\tInnerApplicationConfiguration.class);\n\t\t\t\t\tbuilder.web(WebApplicationType.NONE);\n\t\t\t\t\tbuilder.run().close();\n\t\t\t\t}", "doc_comment": ""}, "code_tokens": ["void", "onApplicationEvent", "public", "(", ")", "{", "}", "@", "Override", "ApplicationEnvironmentPreparedEvent", "event", "SpringApplicationBuilder", ";", ";", ";", "builder", "=", "builder", ".", "web", ".", "close", "new", "SpringApplicationBuilder", "(", ")", "builder", ".", "run", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "InnerApplicationConfiguration", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 62, "ast_depth": 9, "n_identifiers": 9, "vocab_size": 24, "n_whitespaces": 44, "n_words": 19, "nloc": 7, "token_counts": 41}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#2091-2095", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "example", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#example", "start_line": 2091, "end_line": 2095, "signature": "example()", "original_code": "@Bean\n\t\t@Profile(\"custom\")\n\t\tExample example() {\n\t\t\treturn new Example();\n\t\t}", "doc_comment": ""}, "code_tokens": ["Example", "example", "(", ")", "{", "}", "@", "Bean", "@", "Profile", "return", ";", "(", ")", "new", "Example", "\"", "custom", "\"", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 33, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 17, "n_words": 8, "nloc": 5, "token_counts": 21}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java#51-55", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java", "language": "Java"}, "method": {"name": "registerWhenTypeIsNullThrowsException", "qualified_name": "test.java.org.springframework.boot.bootstrap.DefaultBootstrapContextTests#registerWhenTypeIsNullThrowsException", "start_line": 51, "end_line": 55, "signature": "registerWhenTypeIsNullThrowsException()", "original_code": "@Test\n\tvoid registerWhenTypeIsNullThrowsException() {\n\t\tassertThatIllegalArgumentException().isThrownBy(() -> this.context.register(null, InstanceSupplier.of(1)))\n\t\t\t.withMessage(\"'type' must not be null\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "registerWhenTypeIsNullThrowsException", "(", ")", "{", "}", "@", "Test", ";", ".", "withMessage", ".", "isThrownBy", "(", ")", "assertThatIllegalArgumentException", "(", ")", "\"", "'type' must not be null", "\"", "(", ")", "->", "(", ")", ".", "register", "this", ".", "context", "(", "null", ",", ")", "InstanceSupplier", ".", "of", "(", "1", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 62, "ast_depth": 13, "n_identifiers": 9, "vocab_size": 24, "n_whitespaces": 20, "n_words": 18, "nloc": 5, "token_counts": 41}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java#57-61", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java", "language": "Java"}, "method": {"name": "registerWhenRegistrationIsNullThrowException", "qualified_name": "test.java.org.springframework.boot.bootstrap.DefaultBootstrapContextTests#registerWhenRegistrationIsNullThrowException", "start_line": 57, "end_line": 61, "signature": "registerWhenRegistrationIsNullThrowException()", "original_code": "@Test\n\tvoid registerWhenRegistrationIsNullThrowException() {\n\t\tassertThatIllegalArgumentException().isThrownBy(() -> this.context.register(Integer.class, null))\n\t\t\t.withMessage(\"'instanceSupplier' must not be null\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "registerWhenRegistrationIsNullThrowException", "(", ")", "{", "}", "@", "Test", ";", ".", "withMessage", ".", "isThrownBy", "(", ")", "assertThatIllegalArgumentException", "(", ")", "\"", "'instanceSupplier' must not be null", "\"", "(", ")", "->", "(", ")", ".", "register", "this", ".", "context", "(", ",", "null", ")", "Integer", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 58, "ast_depth": 12, "n_identifiers": 7, "vocab_size": 23, "n_whitespaces": 20, "n_words": 17, "nloc": 5, "token_counts": 38}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java#63-68", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java", "language": "Java"}, "method": {"name": "registerWhenNotAlreadyRegisteredRegistersInstance", "qualified_name": "test.java.org.springframework.boot.bootstrap.DefaultBootstrapContextTests#registerWhenNotAlreadyRegisteredRegistersInstance", "start_line": 63, "end_line": 68, "signature": "registerWhenNotAlreadyRegisteredRegistersInstance()", "original_code": "@Test\n\tvoid registerWhenNotAlreadyRegisteredRegistersInstance() {\n\t\tthis.context.register(Integer.class, InstanceSupplier.from(this.counter::getAndIncrement));\n\t\tassertThat(this.context.get(Integer.class)).isZero();\n\t\tassertThat(this.context.get(Integer.class)).isZero();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "registerWhenNotAlreadyRegisteredRegistersInstance", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ".", "register", ".", "isZero", ".", "isZero", "this", ".", "context", "(", ",", ")", "assertThat", "(", ")", "assertThat", "(", ")", "Integer", ".", "class", "InstanceSupplier", ".", "from", "(", ")", "(", ")", "(", ")", ".", "get", ".", "get", "::", "getAndIncrement", "this", ".", "context", "(", ")", "this", ".", "context", "(", ")", "this", ".", "counter", "Integer", ".", "class", "Integer", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 99, "ast_depth": 11, "n_identifiers": 11, "vocab_size": 24, "n_whitespaces": 16, "n_words": 27, "nloc": 6, "token_counts": 66}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java#70-76", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java", "language": "Java"}, "method": {"name": "registerWhenAlreadyRegisteredRegistersReplacedInstance", "qualified_name": "test.java.org.springframework.boot.bootstrap.DefaultBootstrapContextTests#registerWhenAlreadyRegisteredRegistersReplacedInstance", "start_line": 70, "end_line": 76, "signature": "registerWhenAlreadyRegisteredRegistersReplacedInstance()", "original_code": "@Test\n\tvoid registerWhenAlreadyRegisteredRegistersReplacedInstance() {\n\t\tthis.context.register(Integer.class, InstanceSupplier.from(this.counter::getAndIncrement));\n\t\tthis.context.register(Integer.class, InstanceSupplier.of(100));\n\t\tassertThat(this.context.get(Integer.class)).isEqualTo(100);\n\t\tassertThat(this.context.get(Integer.class)).isEqualTo(100);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "registerWhenAlreadyRegisteredRegistersReplacedInstance", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ";", ".", "register", ".", "register", ".", "isEqualTo", ".", "isEqualTo", "this", ".", "context", "(", ",", ")", "this", ".", "context", "(", ",", ")", "assertThat", "(", "100", ")", "assertThat", "(", "100", ")", "Integer", ".", "class", "InstanceSupplier", ".", "from", "Integer", ".", "class", "InstanceSupplier", ".", "of", "(", ")", "(", ")", "(", ")", "(", "100", ")", ".", "get", ".", "get", "::", "getAndIncrement", "this", ".", "context", "(", ")", "this", ".", "context", "(", ")", "this", ".", "counter", "Integer", ".", "class", "Integer", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 126, "ast_depth": 11, "n_identifiers": 12, "vocab_size": 26, "n_whitespaces": 20, "n_words": 37, "nloc": 7, "token_counts": 86}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java#78-85", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java", "language": "Java"}, "method": {"name": "registerWhenSingletonAlreadyCreatedThrowsException", "qualified_name": "test.java.org.springframework.boot.bootstrap.DefaultBootstrapContextTests#registerWhenSingletonAlreadyCreatedThrowsException", "start_line": 78, "end_line": 85, "signature": "registerWhenSingletonAlreadyCreatedThrowsException()", "original_code": "@Test\n\tvoid registerWhenSingletonAlreadyCreatedThrowsException() {\n\t\tthis.context.register(Integer.class, InstanceSupplier.from(this.counter::getAndIncrement));\n\t\tthis.context.get(Integer.class);\n\t\tassertThatIllegalStateException()\n\t\t\t.isThrownBy(() -> this.context.register(Integer.class, InstanceSupplier.of(100)))\n\t\t\t.withMessage(\"java.lang.Integer has already been created\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "registerWhenSingletonAlreadyCreatedThrowsException", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ".", "register", ".", "get", ".", "withMessage", "this", ".", "context", "(", ",", ")", "this", ".", "context", "(", ")", ".", "isThrownBy", "(", ")", "Integer", ".", "class", "InstanceSupplier", ".", "from", "Integer", ".", "class", "assertThatIllegalStateException", "(", ")", "\"", "java.lang.Integer has already been created", "\"", "(", ")", "(", ")", "->", "::", "getAndIncrement", "(", ")", ".", "register", "this", ".", "counter", "this", ".", "context", "(", ",", ")", "Integer", ".", "class", "InstanceSupplier", ".", "of", "(", "100", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 112, "ast_depth": 13, "n_identifiers": 13, "vocab_size": 30, "n_whitespaces": 31, "n_words": 36, "nloc": 8, "token_counts": 76}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java#87-94", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java", "language": "Java"}, "method": {"name": "registerWhenPrototypeAlreadyCreatedReplacesInstance", "qualified_name": "test.java.org.springframework.boot.bootstrap.DefaultBootstrapContextTests#registerWhenPrototypeAlreadyCreatedReplacesInstance", "start_line": 87, "end_line": 94, "signature": "registerWhenPrototypeAlreadyCreatedReplacesInstance()", "original_code": "@Test\n\tvoid registerWhenPrototypeAlreadyCreatedReplacesInstance() {\n\t\tthis.context.register(Integer.class,\n\t\t\t\tInstanceSupplier.from(this.counter::getAndIncrement).withScope(Scope.PROTOTYPE));\n\t\tthis.context.get(Integer.class);\n\t\tthis.context.register(Integer.class, InstanceSupplier.of(100));\n\t\tassertThat(this.context.get(Integer.class)).isEqualTo(100);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "registerWhenPrototypeAlreadyCreatedReplacesInstance", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ";", ".", "register", ".", "get", ".", "register", ".", "isEqualTo", "this", ".", "context", "(", ",", ")", "this", ".", "context", "(", ")", "this", ".", "context", "(", ",", ")", "assertThat", "(", "100", ")", "Integer", ".", "class", ".", "withScope", "Integer", ".", "class", "Integer", ".", "class", "InstanceSupplier", ".", "of", "(", ")", "InstanceSupplier", ".", "from", "(", ")", "(", "100", ")", ".", "get", "(", ")", "Scope", ".", "PROTOTYPE", "this", ".", "context", "(", ")", "::", "getAndIncrement", "Integer", ".", "class", "this", ".", "counter"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 124, "ast_depth": 12, "n_identifiers": 15, "vocab_size": 29, "n_whitespaces": 24, "n_words": 37, "nloc": 8, "token_counts": 85}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java#96-103", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java", "language": "Java"}, "method": {"name": "registerWhenAlreadyCreatedThrowsException", "qualified_name": "test.java.org.springframework.boot.bootstrap.DefaultBootstrapContextTests#registerWhenAlreadyCreatedThrowsException", "start_line": 96, "end_line": 103, "signature": "registerWhenAlreadyCreatedThrowsException()", "original_code": "@Test\n\tvoid registerWhenAlreadyCreatedThrowsException() {\n\t\tthis.context.register(Integer.class, InstanceSupplier.from(this.counter::getAndIncrement));\n\t\tthis.context.get(Integer.class);\n\t\tassertThatIllegalStateException()\n\t\t\t.isThrownBy(() -> this.context.register(Integer.class, InstanceSupplier.of(100)))\n\t\t\t.withMessage(\"java.lang.Integer has already been created\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "registerWhenAlreadyCreatedThrowsException", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ".", "register", ".", "get", ".", "withMessage", "this", ".", "context", "(", ",", ")", "this", ".", "context", "(", ")", ".", "isThrownBy", "(", ")", "Integer", ".", "class", "InstanceSupplier", ".", "from", "Integer", ".", "class", "assertThatIllegalStateException", "(", ")", "\"", "java.lang.Integer has already been created", "\"", "(", ")", "(", ")", "->", "::", "getAndIncrement", "(", ")", ".", "register", "this", ".", "counter", "this", ".", "context", "(", ",", ")", "Integer", ".", "class", "InstanceSupplier", ".", "of", "(", "100", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 112, "ast_depth": 13, "n_identifiers": 13, "vocab_size": 30, "n_whitespaces": 31, "n_words": 36, "nloc": 8, "token_counts": 76}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java#105-110", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java", "language": "Java"}, "method": {"name": "registerWithDependencyRegistersInstance", "qualified_name": "test.java.org.springframework.boot.bootstrap.DefaultBootstrapContextTests#registerWithDependencyRegistersInstance", "start_line": 105, "end_line": 110, "signature": "registerWithDependencyRegistersInstance()", "original_code": "@Test\n\tvoid registerWithDependencyRegistersInstance() {\n\t\tthis.context.register(Integer.class, InstanceSupplier.of(100));\n\t\tthis.context.register(String.class, this::integerAsString);\n\t\tassertThat(this.context.get(String.class)).isEqualTo(\"100\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "registerWithDependencyRegistersInstance", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ".", "register", ".", "register", ".", "isEqualTo", "this", ".", "context", "(", ",", ")", "this", ".", "context", "(", ",", ")", "assertThat", "(", ")", "Integer", ".", "class", "InstanceSupplier", ".", "of", "String", ".", "class", "this", "::", "integerAsString", "(", ")", "\"", "100", "\"", "(", "100", ")", ".", "get", "this", ".", "context", "(", ")", "String", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 91, "ast_depth": 11, "n_identifiers": 10, "vocab_size": 26, "n_whitespaces": 17, "n_words": 26, "nloc": 6, "token_counts": 62}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java#112-114", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java", "language": "Java"}, "method": {"name": "integerAsString", "qualified_name": "test.java.org.springframework.boot.bootstrap.DefaultBootstrapContextTests#integerAsString", "start_line": 112, "end_line": 114, "signature": "integerAsString(BootstrapContext context)", "original_code": "private String integerAsString(BootstrapContext context) {\n\t\treturn String.valueOf(context.get(Integer.class));\n\t}", "doc_comment": ""}, "code_tokens": ["String", "integerAsString", "private", "(", ")", "{", "}", "BootstrapContext", "context", "return", ";", "String", ".", "valueOf", "(", ")", "context", ".", "get", "(", ")", "Integer", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 36, "ast_depth": 10, "n_identifiers": 5, "vocab_size": 16, "n_whitespaces": 10, "n_words": 12, "nloc": 3, "token_counts": 24}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java#116-120", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java", "language": "Java"}, "method": {"name": "registerIfAbsentWhenAbsentRegisters", "qualified_name": "test.java.org.springframework.boot.bootstrap.DefaultBootstrapContextTests#registerIfAbsentWhenAbsentRegisters", "start_line": 116, "end_line": 120, "signature": "registerIfAbsentWhenAbsentRegisters()", "original_code": "@Test\n\tvoid registerIfAbsentWhenAbsentRegisters() {\n\t\tthis.context.registerIfAbsent(Long.class, InstanceSupplier.of(100L));\n\t\tassertThat(this.context.get(Long.class)).isEqualTo(100L);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "registerIfAbsentWhenAbsentRegisters", "(", ")", "{", "}", "@", "Test", ";", ";", ".", "registerIfAbsent", ".", "isEqualTo", "this", ".", "context", "(", ",", ")", "assertThat", "(", "100L", ")", "Long", ".", "class", "InstanceSupplier", ".", "of", "(", ")", "(", "100L", ")", ".", "get", "this", ".", "context", "(", ")", "Long", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 67, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 22, "n_whitespaces": 13, "n_words": 19, "nloc": 5, "token_counts": 45}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java#122-127", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java", "language": "Java"}, "method": {"name": "registerIfAbsentWhenPresentDoesNotRegister", "qualified_name": "test.java.org.springframework.boot.bootstrap.DefaultBootstrapContextTests#registerIfAbsentWhenPresentDoesNotRegister", "start_line": 122, "end_line": 127, "signature": "registerIfAbsentWhenPresentDoesNotRegister()", "original_code": "@Test\n\tvoid registerIfAbsentWhenPresentDoesNotRegister() {\n\t\tthis.context.registerIfAbsent(Long.class, InstanceSupplier.of(1L));\n\t\tthis.context.registerIfAbsent(Long.class, InstanceSupplier.of(100L));\n\t\tassertThat(this.context.get(Long.class)).isOne();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "registerIfAbsentWhenPresentDoesNotRegister", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ".", "registerIfAbsent", ".", "registerIfAbsent", ".", "isOne", "this", ".", "context", "(", ",", ")", "this", ".", "context", "(", ",", ")", "assertThat", "(", ")", "Long", ".", "class", "InstanceSupplier", ".", "of", "Long", ".", "class", "InstanceSupplier", ".", "of", "(", ")", "(", "1L", ")", "(", "100L", ")", ".", "get", "this", ".", "context", "(", ")", "Long", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 91, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 23, "n_whitespaces": 17, "n_words": 26, "nloc": 6, "token_counts": 62}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java#129-133", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java", "language": "Java"}, "method": {"name": "isRegisteredWhenNotRegisteredReturnsFalse", "qualified_name": "test.java.org.springframework.boot.bootstrap.DefaultBootstrapContextTests#isRegisteredWhenNotRegisteredReturnsFalse", "start_line": 129, "end_line": 133, "signature": "isRegisteredWhenNotRegisteredReturnsFalse()", "original_code": "@Test\n\tvoid isRegisteredWhenNotRegisteredReturnsFalse() {\n\t\tthis.context.register(Number.class, InstanceSupplier.of(1));\n\t\tassertThat(this.context.isRegistered(Long.class)).isFalse();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "isRegisteredWhenNotRegisteredReturnsFalse", "(", ")", "{", "}", "@", "Test", ";", ";", ".", "register", ".", "isFalse", "this", ".", "context", "(", ",", ")", "assertThat", "(", ")", "Number", ".", "class", "InstanceSupplier", ".", "of", "(", ")", "(", "1", ")", ".", "isRegistered", "this", ".", "context", "(", ")", "Long", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 66, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 23, "n_whitespaces": 13, "n_words": 18, "nloc": 5, "token_counts": 44}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java#135-139", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java", "language": "Java"}, "method": {"name": "isRegisteredWhenRegisteredReturnsTrue", "qualified_name": "test.java.org.springframework.boot.bootstrap.DefaultBootstrapContextTests#isRegisteredWhenRegisteredReturnsTrue", "start_line": 135, "end_line": 139, "signature": "isRegisteredWhenRegisteredReturnsTrue()", "original_code": "@Test\n\tvoid isRegisteredWhenRegisteredReturnsTrue() {\n\t\tthis.context.register(Number.class, InstanceSupplier.of(1));\n\t\tassertThat(this.context.isRegistered(Number.class)).isTrue();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "isRegisteredWhenRegisteredReturnsTrue", "(", ")", "{", "}", "@", "Test", ";", ";", ".", "register", ".", "isTrue", "this", ".", "context", "(", ",", ")", "assertThat", "(", ")", "Number", ".", "class", "InstanceSupplier", ".", "of", "(", ")", "(", "1", ")", ".", "isRegistered", "this", ".", "context", "(", ")", "Number", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 66, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 22, "n_whitespaces": 13, "n_words": 18, "nloc": 5, "token_counts": 44}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java#141-145", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java", "language": "Java"}, "method": {"name": "getRegisteredInstanceSupplierWhenNotRegisteredReturnsNull", "qualified_name": "test.java.org.springframework.boot.bootstrap.DefaultBootstrapContextTests#getRegisteredInstanceSupplierWhenNotRegisteredReturnsNull", "start_line": 141, "end_line": 145, "signature": "getRegisteredInstanceSupplierWhenNotRegisteredReturnsNull()", "original_code": "@Test\n\tvoid getRegisteredInstanceSupplierWhenNotRegisteredReturnsNull() {\n\t\tthis.context.register(Number.class, InstanceSupplier.of(1));\n\t\tassertThat(this.context.getRegisteredInstanceSupplier(Long.class)).isNull();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "getRegisteredInstanceSupplierWhenNotRegisteredReturnsNull", "(", ")", "{", "}", "@", "Test", ";", ";", ".", "register", ".", "isNull", "this", ".", "context", "(", ",", ")", "assertThat", "(", ")", "Number", ".", "class", "InstanceSupplier", ".", "of", "(", ")", "(", "1", ")", ".", "getRegisteredInstanceSupplier", "this", ".", "context", "(", ")", "Long", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 66, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 23, "n_whitespaces": 13, "n_words": 18, "nloc": 5, "token_counts": 44}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java#147-152", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java", "language": "Java"}, "method": {"name": "getRegisteredInstanceSupplierWhenRegisteredReturnsRegistration", "qualified_name": "test.java.org.springframework.boot.bootstrap.DefaultBootstrapContextTests#getRegisteredInstanceSupplierWhenRegisteredReturnsRegistration", "start_line": 147, "end_line": 152, "signature": "getRegisteredInstanceSupplierWhenRegisteredReturnsRegistration()", "original_code": "@Test\n\tvoid getRegisteredInstanceSupplierWhenRegisteredReturnsRegistration() {\n\t\tInstanceSupplier<Number> instanceSupplier = InstanceSupplier.of(1);\n\t\tthis.context.register(Number.class, instanceSupplier);\n\t\tassertThat(this.context.getRegisteredInstanceSupplier(Number.class)).isSameAs(instanceSupplier);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "getRegisteredInstanceSupplierWhenRegisteredReturnsRegistration", "(", ")", "{", "}", "@", "Test", ";", ";", ";", "InstanceSupplier", "instanceSupplier", "=", ".", "register", ".", "isSameAs", "<", "Number", ">", "InstanceSupplier", ".", "of", "this", ".", "context", "(", ",", "instanceSupplier", ")", "assertThat", "(", "instanceSupplier", ")", "(", "1", ")", "Number", ".", "class", "(", ")", ".", "getRegisteredInstanceSupplier", "this", ".", "context", "(", ")", "Number", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 79, "ast_depth": 11, "n_identifiers": 10, "vocab_size": 26, "n_whitespaces": 19, "n_words": 23, "nloc": 6, "token_counts": 53}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java#154-159", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java", "language": "Java"}, "method": {"name": "getWhenNoRegistrationThrowsIllegalStateException", "qualified_name": "test.java.org.springframework.boot.bootstrap.DefaultBootstrapContextTests#getWhenNoRegistrationThrowsIllegalStateException", "start_line": 154, "end_line": 159, "signature": "getWhenNoRegistrationThrowsIllegalStateException()", "original_code": "@Test\n\tvoid getWhenNoRegistrationThrowsIllegalStateException() {\n\t\tthis.context.register(Number.class, InstanceSupplier.of(1));\n\t\tassertThatIllegalStateException().isThrownBy(() -> this.context.get(Long.class))\n\t\t\t.withMessageContaining(\"has not been registered\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "getWhenNoRegistrationThrowsIllegalStateException", "(", ")", "{", "}", "@", "Test", ";", ";", ".", "register", ".", "withMessageContaining", "this", ".", "context", "(", ",", ")", ".", "isThrownBy", "(", ")", "Number", ".", "class", "InstanceSupplier", ".", "of", "assertThatIllegalStateException", "(", ")", "\"", "has not been registered", "\"", "(", "1", ")", "(", ")", "->", "(", ")", ".", "get", "this", ".", "context", "(", ")", "Long", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 81, "ast_depth": 12, "n_identifiers": 10, "vocab_size": 27, "n_whitespaces": 22, "n_words": 23, "nloc": 6, "token_counts": 54}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java#161-165", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java", "language": "Java"}, "method": {"name": "getWhenRegisteredAsNullReturnsNull", "qualified_name": "test.java.org.springframework.boot.bootstrap.DefaultBootstrapContextTests#getWhenRegisteredAsNullReturnsNull", "start_line": 161, "end_line": 165, "signature": "getWhenRegisteredAsNullReturnsNull()", "original_code": "@Test\n\tvoid getWhenRegisteredAsNullReturnsNull() {\n\t\tthis.context.register(Number.class, InstanceSupplier.of(null));\n\t\tassertThat(this.context.get(Number.class)).isNull();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "getWhenRegisteredAsNullReturnsNull", "(", ")", "{", "}", "@", "Test", ";", ";", ".", "register", ".", "isNull", "this", ".", "context", "(", ",", ")", "assertThat", "(", ")", "Number", ".", "class", "InstanceSupplier", ".", "of", "(", ")", "(", "null", ")", ".", "get", "this", ".", "context", "(", ")", "Number", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 66, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 22, "n_whitespaces": 13, "n_words": 18, "nloc": 5, "token_counts": 44}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java#167-172", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java", "language": "Java"}, "method": {"name": "getWhenSingletonCreatesOnlyOneInstance", "qualified_name": "test.java.org.springframework.boot.bootstrap.DefaultBootstrapContextTests#getWhenSingletonCreatesOnlyOneInstance", "start_line": 167, "end_line": 172, "signature": "getWhenSingletonCreatesOnlyOneInstance()", "original_code": "@Test\n\tvoid getWhenSingletonCreatesOnlyOneInstance() {\n\t\tthis.context.register(Integer.class, InstanceSupplier.from(this.counter::getAndIncrement));\n\t\tassertThat(this.context.get(Integer.class)).isZero();\n\t\tassertThat(this.context.get(Integer.class)).isZero();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "getWhenSingletonCreatesOnlyOneInstance", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ".", "register", ".", "isZero", ".", "isZero", "this", ".", "context", "(", ",", ")", "assertThat", "(", ")", "assertThat", "(", ")", "Integer", ".", "class", "InstanceSupplier", ".", "from", "(", ")", "(", ")", "(", ")", ".", "get", ".", "get", "::", "getAndIncrement", "this", ".", "context", "(", ")", "this", ".", "context", "(", ")", "this", ".", "counter", "Integer", ".", "class", "Integer", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 99, "ast_depth": 11, "n_identifiers": 11, "vocab_size": 24, "n_whitespaces": 16, "n_words": 27, "nloc": 6, "token_counts": 66}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java#174-180", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java", "language": "Java"}, "method": {"name": "getWhenPrototypeCreatesOnlyNewInstances", "qualified_name": "test.java.org.springframework.boot.bootstrap.DefaultBootstrapContextTests#getWhenPrototypeCreatesOnlyNewInstances", "start_line": 174, "end_line": 180, "signature": "getWhenPrototypeCreatesOnlyNewInstances()", "original_code": "@Test\n\tvoid getWhenPrototypeCreatesOnlyNewInstances() {\n\t\tthis.context.register(Integer.class,\n\t\t\t\tInstanceSupplier.from(this.counter::getAndIncrement).withScope(Scope.PROTOTYPE));\n\t\tassertThat(this.context.get(Integer.class)).isZero();\n\t\tassertThat(this.context.get(Integer.class)).isOne();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "getWhenPrototypeCreatesOnlyNewInstances", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ".", "register", ".", "isZero", ".", "isOne", "this", ".", "context", "(", ",", ")", "assertThat", "(", ")", "assertThat", "(", ")", "Integer", ".", "class", ".", "withScope", "(", ")", "(", ")", "InstanceSupplier", ".", "from", "(", ")", ".", "get", ".", "get", "(", ")", "Scope", ".", "PROTOTYPE", "this", ".", "context", "(", ")", "this", ".", "context", "(", ")", "::", "getAndIncrement", "Integer", ".", "class", "Integer", ".", "class", "this", ".", "counter"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 109, "ast_depth": 12, "n_identifiers": 15, "vocab_size": 28, "n_whitespaces": 20, "n_words": 30, "nloc": 7, "token_counts": 73}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java#182-185", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java", "language": "Java"}, "method": {"name": "testName", "qualified_name": "test.java.org.springframework.boot.bootstrap.DefaultBootstrapContextTests#testName", "start_line": 182, "end_line": 185, "signature": "testName()", "original_code": "@Test\n\tvoid testName() {\n\n\t}", "doc_comment": ""}, "code_tokens": ["void", "testName", "(", ")", "{", "}", "@", "Test"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 14, "ast_depth": 5, "n_identifiers": 2, "vocab_size": 8, "n_whitespaces": 7, "n_words": 3, "nloc": 3, "token_counts": 8}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java#187-191", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java", "language": "Java"}, "method": {"name": "getOrElseWhenNoRegistrationReturnsOther", "qualified_name": "test.java.org.springframework.boot.bootstrap.DefaultBootstrapContextTests#getOrElseWhenNoRegistrationReturnsOther", "start_line": 187, "end_line": 191, "signature": "getOrElseWhenNoRegistrationReturnsOther()", "original_code": "@Test\n\tvoid getOrElseWhenNoRegistrationReturnsOther() {\n\t\tthis.context.register(Number.class, InstanceSupplier.of(1));\n\t\tassertThat(this.context.getOrElse(Long.class, -1L)).isEqualTo(-1);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "getOrElseWhenNoRegistrationReturnsOther", "(", ")", "{", "}", "@", "Test", ";", ";", ".", "register", ".", "isEqualTo", "this", ".", "context", "(", ",", ")", "assertThat", "(", ")", "Number", ".", "class", "InstanceSupplier", ".", "of", "(", ")", "-", "1", "(", "1", ")", ".", "getOrElse", "this", ".", "context", "(", ",", ")", "Long", ".", "class", "-", "1L"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 73, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 25, "n_whitespaces": 14, "n_words": 20, "nloc": 5, "token_counts": 49}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java#193-197", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java", "language": "Java"}, "method": {"name": "getOrElseWhenRegisteredAsNullReturnsNull", "qualified_name": "test.java.org.springframework.boot.bootstrap.DefaultBootstrapContextTests#getOrElseWhenRegisteredAsNullReturnsNull", "start_line": 193, "end_line": 197, "signature": "getOrElseWhenRegisteredAsNullReturnsNull()", "original_code": "@Test\n\tvoid getOrElseWhenRegisteredAsNullReturnsNull() {\n\t\tthis.context.register(Number.class, InstanceSupplier.of(null));\n\t\tassertThat(this.context.getOrElse(Number.class, -1)).isNull();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "getOrElseWhenRegisteredAsNullReturnsNull", "(", ")", "{", "}", "@", "Test", ";", ";", ".", "register", ".", "isNull", "this", ".", "context", "(", ",", ")", "assertThat", "(", ")", "Number", ".", "class", "InstanceSupplier", ".", "of", "(", ")", "(", "null", ")", ".", "getOrElse", "this", ".", "context", "(", ",", ")", "Number", ".", "class", "-", "1"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 70, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 24, "n_whitespaces": 14, "n_words": 19, "nloc": 5, "token_counts": 47}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java#199-204", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java", "language": "Java"}, "method": {"name": "getOrElseCreatesReturnsOnlyOneInstance", "qualified_name": "test.java.org.springframework.boot.bootstrap.DefaultBootstrapContextTests#getOrElseCreatesReturnsOnlyOneInstance", "start_line": 199, "end_line": 204, "signature": "getOrElseCreatesReturnsOnlyOneInstance()", "original_code": "@Test\n\tvoid getOrElseCreatesReturnsOnlyOneInstance() {\n\t\tthis.context.register(Integer.class, InstanceSupplier.from(this.counter::getAndIncrement));\n\t\tassertThat(this.context.getOrElse(Integer.class, -1)).isZero();\n\t\tassertThat(this.context.getOrElse(Integer.class, -1)).isZero();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "getOrElseCreatesReturnsOnlyOneInstance", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ".", "register", ".", "isZero", ".", "isZero", "this", ".", "context", "(", ",", ")", "assertThat", "(", ")", "assertThat", "(", ")", "Integer", ".", "class", "InstanceSupplier", ".", "from", "(", ")", "(", ")", "(", ")", ".", "getOrElse", ".", "getOrElse", "::", "getAndIncrement", "this", ".", "context", "(", ",", ")", "this", ".", "context", "(", ",", ")", "this", ".", "counter", "Integer", ".", "class", "-", "1", "Integer", ".", "class", "-", "1"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 107, "ast_depth": 11, "n_identifiers": 11, "vocab_size": 26, "n_whitespaces": 18, "n_words": 29, "nloc": 6, "token_counts": 72}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java#206-210", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java", "language": "Java"}, "method": {"name": "getOrElseSupplyWhenNoRegistrationReturnsSupplied", "qualified_name": "test.java.org.springframework.boot.bootstrap.DefaultBootstrapContextTests#getOrElseSupplyWhenNoRegistrationReturnsSupplied", "start_line": 206, "end_line": 210, "signature": "getOrElseSupplyWhenNoRegistrationReturnsSupplied()", "original_code": "@Test\n\tvoid getOrElseSupplyWhenNoRegistrationReturnsSupplied() {\n\t\tthis.context.register(Number.class, InstanceSupplier.of(1));\n\t\tassertThat(this.context.getOrElseSupply(Long.class, () -> -1L)).isEqualTo(-1);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "getOrElseSupplyWhenNoRegistrationReturnsSupplied", "(", ")", "{", "}", "@", "Test", ";", ";", ".", "register", ".", "isEqualTo", "this", ".", "context", "(", ",", ")", "assertThat", "(", ")", "Number", ".", "class", "InstanceSupplier", ".", "of", "(", ")", "-", "1", "(", "1", ")", ".", "getOrElseSupply", "this", ".", "context", "(", ",", ")", "Long", ".", "class", "->", "(", ")", "-", "1L"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 78, "ast_depth": 12, "n_identifiers": 9, "vocab_size": 26, "n_whitespaces": 16, "n_words": 20, "nloc": 5, "token_counts": 52}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java#212-216", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java", "language": "Java"}, "method": {"name": "getOrElseSupplyWhenRegisteredAsNullReturnsNull", "qualified_name": "test.java.org.springframework.boot.bootstrap.DefaultBootstrapContextTests#getOrElseSupplyWhenRegisteredAsNullReturnsNull", "start_line": 212, "end_line": 216, "signature": "getOrElseSupplyWhenRegisteredAsNullReturnsNull()", "original_code": "@Test\n\tvoid getOrElseSupplyWhenRegisteredAsNullReturnsNull() {\n\t\tthis.context.register(Number.class, InstanceSupplier.of(null));\n\t\tassertThat(this.context.getOrElseSupply(Number.class, () -> -1L)).isNull();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "getOrElseSupplyWhenRegisteredAsNullReturnsNull", "(", ")", "{", "}", "@", "Test", ";", ";", ".", "register", ".", "isNull", "this", ".", "context", "(", ",", ")", "assertThat", "(", ")", "Number", ".", "class", "InstanceSupplier", ".", "of", "(", ")", "(", "null", ")", ".", "getOrElseSupply", "this", ".", "context", "(", ",", ")", "Number", ".", "class", "->", "(", ")", "-", "1L"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 75, "ast_depth": 12, "n_identifiers": 9, "vocab_size": 25, "n_whitespaces": 16, "n_words": 19, "nloc": 5, "token_counts": 50}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java#218-223", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java", "language": "Java"}, "method": {"name": "getOrElseSupplyCreatesOnlyOneInstance", "qualified_name": "test.java.org.springframework.boot.bootstrap.DefaultBootstrapContextTests#getOrElseSupplyCreatesOnlyOneInstance", "start_line": 218, "end_line": 223, "signature": "getOrElseSupplyCreatesOnlyOneInstance()", "original_code": "@Test\n\tvoid getOrElseSupplyCreatesOnlyOneInstance() {\n\t\tthis.context.register(Integer.class, InstanceSupplier.from(this.counter::getAndIncrement));\n\t\tassertThat(this.context.getOrElseSupply(Integer.class, () -> -1)).isZero();\n\t\tassertThat(this.context.getOrElseSupply(Integer.class, () -> -1)).isZero();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "getOrElseSupplyCreatesOnlyOneInstance", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ".", "register", ".", "isZero", ".", "isZero", "this", ".", "context", "(", ",", ")", "assertThat", "(", ")", "assertThat", "(", ")", "Integer", ".", "class", "InstanceSupplier", ".", "from", "(", ")", "(", ")", "(", ")", ".", "getOrElseSupply", ".", "getOrElseSupply", "::", "getAndIncrement", "this", ".", "context", "(", ",", ")", "this", ".", "context", "(", ",", ")", "this", ".", "counter", "Integer", ".", "class", "->", "Integer", ".", "class", "->", "(", ")", "-", "1", "(", ")", "-", "1"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 117, "ast_depth": 12, "n_identifiers": 11, "vocab_size": 27, "n_whitespaces": 22, "n_words": 29, "nloc": 6, "token_counts": 78}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java#225-229", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java", "language": "Java"}, "method": {"name": "getOrElseThrowWhenNoRegistrationThrowsSuppliedException", "qualified_name": "test.java.org.springframework.boot.bootstrap.DefaultBootstrapContextTests#getOrElseThrowWhenNoRegistrationThrowsSuppliedException", "start_line": 225, "end_line": 229, "signature": "getOrElseThrowWhenNoRegistrationThrowsSuppliedException()", "original_code": "@Test\n\tvoid getOrElseThrowWhenNoRegistrationThrowsSuppliedException() {\n\t\tthis.context.register(Number.class, InstanceSupplier.of(1));\n\t\tassertThatIOException().isThrownBy(() -> this.context.getOrElseThrow(Long.class, IOException::new));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "getOrElseThrowWhenNoRegistrationThrowsSuppliedException", "(", ")", "{", "}", "@", "Test", ";", ";", ".", "register", ".", "isThrownBy", "this", ".", "context", "(", ",", ")", "assertThatIOException", "(", ")", "Number", ".", "class", "InstanceSupplier", ".", "of", "(", ")", "->", "(", "1", ")", "(", ")", ".", "getOrElseThrow", "this", ".", "context", "(", ",", ")", "Long", ".", "class", "IOException", "::", "new"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 76, "ast_depth": 11, "n_identifiers": 10, "vocab_size": 27, "n_whitespaces": 16, "n_words": 20, "nloc": 5, "token_counts": 51}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java#231-235", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java", "language": "Java"}, "method": {"name": "getOrElseThrowWhenRegisteredAsNullReturnsNull", "qualified_name": "test.java.org.springframework.boot.bootstrap.DefaultBootstrapContextTests#getOrElseThrowWhenRegisteredAsNullReturnsNull", "start_line": 231, "end_line": 235, "signature": "getOrElseThrowWhenRegisteredAsNullReturnsNull()", "original_code": "@Test\n\tvoid getOrElseThrowWhenRegisteredAsNullReturnsNull() {\n\t\tthis.context.register(Number.class, InstanceSupplier.of(null));\n\t\tassertThat(this.context.getOrElseThrow(Number.class, RuntimeException::new)).isNull();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "getOrElseThrowWhenRegisteredAsNullReturnsNull", "(", ")", "{", "}", "@", "Test", ";", ";", ".", "register", ".", "isNull", "this", ".", "context", "(", ",", ")", "assertThat", "(", ")", "Number", ".", "class", "InstanceSupplier", ".", "of", "(", ")", "(", "null", ")", ".", "getOrElseThrow", "this", ".", "context", "(", ",", ")", "Number", ".", "class", "RuntimeException", "::", "new"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 71, "ast_depth": 11, "n_identifiers": 10, "vocab_size": 25, "n_whitespaces": 14, "n_words": 20, "nloc": 5, "token_counts": 48}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java#237-242", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java", "language": "Java"}, "method": {"name": "getOrElseThrowCreatesOnlyOneInstance", "qualified_name": "test.java.org.springframework.boot.bootstrap.DefaultBootstrapContextTests#getOrElseThrowCreatesOnlyOneInstance", "start_line": 237, "end_line": 242, "signature": "getOrElseThrowCreatesOnlyOneInstance()", "original_code": "@Test\n\tvoid getOrElseThrowCreatesOnlyOneInstance() {\n\t\tthis.context.register(Integer.class, InstanceSupplier.from(this.counter::getAndIncrement));\n\t\tassertThat(this.context.getOrElseThrow(Integer.class, RuntimeException::new)).isZero();\n\t\tassertThat(this.context.getOrElseThrow(Integer.class, RuntimeException::new)).isZero();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "getOrElseThrowCreatesOnlyOneInstance", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ".", "register", ".", "isZero", ".", "isZero", "this", ".", "context", "(", ",", ")", "assertThat", "(", ")", "assertThat", "(", ")", "Integer", ".", "class", "InstanceSupplier", ".", "from", "(", ")", "(", ")", "(", ")", ".", "getOrElseThrow", ".", "getOrElseThrow", "::", "getAndIncrement", "this", ".", "context", "(", ",", ")", "this", ".", "context", "(", ",", ")", "this", ".", "counter", "Integer", ".", "class", "RuntimeException", "::", "new", "Integer", ".", "class", "RuntimeException", "::", "new"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 109, "ast_depth": 11, "n_identifiers": 12, "vocab_size": 26, "n_whitespaces": 18, "n_words": 31, "nloc": 6, "token_counts": 74}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java#244-253", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java", "language": "Java"}, "method": {"name": "closeMulticastsEventToListeners", "qualified_name": "test.java.org.springframework.boot.bootstrap.DefaultBootstrapContextTests#closeMulticastsEventToListeners", "start_line": 244, "end_line": 253, "signature": "closeMulticastsEventToListeners()", "original_code": "@Test\n\tvoid closeMulticastsEventToListeners() {\n\t\tTestCloseListener listener = new TestCloseListener();\n\t\tthis.context.addCloseListener(listener);\n\t\tassertThat(listener).wasNotCalled();\n\t\tthis.context.close(this.applicationContext);\n\t\tassertThat(listener).wasCalledOnlyOnce()\n\t\t\t.hasBootstrapContextSameAs(this.context)\n\t\t\t.hasApplicationContextSameAs(this.applicationContext);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "closeMulticastsEventToListeners", "(", ")", "{", "}", "@", "Test", "TestCloseListener", ";", ";", ";", ";", ";", "listener", "=", ".", "addCloseListener", ".", "wasNotCalled", ".", "close", ".", "hasApplicationContextSameAs", "new", "TestCloseListener", "this", ".", "context", "(", "listener", ")", "assertThat", "(", ")", "this", ".", "context", "(", ")", ".", "hasBootstrapContextSameAs", "(", ")", "(", ")", "(", "listener", ")", "this", ".", "applicationContext", ".", "wasCalledOnlyOnce", "(", ")", "this", ".", "applicationContext", "assertThat", "(", ")", "this", ".", "context", "(", "listener", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 103, "ast_depth": 10, "n_identifiers": 12, "vocab_size": 24, "n_whitespaces": 33, "n_words": 28, "nloc": 10, "token_counts": 68}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java#255-262", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java", "language": "Java"}, "method": {"name": "addCloseListenerIgnoresMultipleCallsWithSameListener", "qualified_name": "test.java.org.springframework.boot.bootstrap.DefaultBootstrapContextTests#addCloseListenerIgnoresMultipleCallsWithSameListener", "start_line": 255, "end_line": 262, "signature": "addCloseListenerIgnoresMultipleCallsWithSameListener()", "original_code": "@Test\n\tvoid addCloseListenerIgnoresMultipleCallsWithSameListener() {\n\t\tTestCloseListener listener = new TestCloseListener();\n\t\tthis.context.addCloseListener(listener);\n\t\tthis.context.addCloseListener(listener);\n\t\tthis.context.close(this.applicationContext);\n\t\tassertThat(listener).wasCalledOnlyOnce();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "addCloseListenerIgnoresMultipleCallsWithSameListener", "(", ")", "{", "}", "@", "Test", "TestCloseListener", ";", ";", ";", ";", ";", "listener", "=", ".", "addCloseListener", ".", "addCloseListener", ".", "close", ".", "wasCalledOnlyOnce", "new", "TestCloseListener", "this", ".", "context", "(", "listener", ")", "this", ".", "context", "(", "listener", ")", "this", ".", "context", "(", ")", "assertThat", "(", ")", "(", ")", "this", ".", "applicationContext", "(", "listener", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 82, "ast_depth": 8, "n_identifiers": 9, "vocab_size": 21, "n_whitespaces": 25, "n_words": 23, "nloc": 8, "token_counts": 54}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java#264-269", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java", "language": "Java"}, "method": {"name": "instanceSupplierGetScopeWhenNotConfiguredReturnsSingleton", "qualified_name": "test.java.org.springframework.boot.bootstrap.DefaultBootstrapContextTests#instanceSupplierGetScopeWhenNotConfiguredReturnsSingleton", "start_line": 264, "end_line": 269, "signature": "instanceSupplierGetScopeWhenNotConfiguredReturnsSingleton()", "original_code": "@Test\n\tvoid instanceSupplierGetScopeWhenNotConfiguredReturnsSingleton() {\n\t\tInstanceSupplier<String> supplier = InstanceSupplier.of(\"test\");\n\t\tassertThat(supplier.getScope()).isEqualTo(Scope.SINGLETON);\n\t\tassertThat(supplier.get(null)).isEqualTo(\"test\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "instanceSupplierGetScopeWhenNotConfiguredReturnsSingleton", "(", ")", "{", "}", "@", "Test", ";", ";", ";", "InstanceSupplier", "supplier", "=", ".", "isEqualTo", ".", "isEqualTo", "<", "String", ">", "InstanceSupplier", ".", "of", "assertThat", "(", ")", "assertThat", "(", ")", "(", ")", "(", ")", "Scope", ".", "SINGLETON", "(", ")", "\"", "test", "\"", "\"", "test", "\"", "supplier", ".", "getScope", "supplier", ".", "get", "(", ")", "(", "null", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 85, "ast_depth": 10, "n_identifiers": 11, "vocab_size": 26, "n_whitespaces": 18, "n_words": 21, "nloc": 6, "token_counts": 56}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java#271-276", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java", "language": "Java"}, "method": {"name": "instanceSupplierWithScopeChangesScope", "qualified_name": "test.java.org.springframework.boot.bootstrap.DefaultBootstrapContextTests#instanceSupplierWithScopeChangesScope", "start_line": 271, "end_line": 276, "signature": "instanceSupplierWithScopeChangesScope()", "original_code": "@Test\n\tvoid instanceSupplierWithScopeChangesScope() {\n\t\tInstanceSupplier<String> supplier = InstanceSupplier.of(\"test\").withScope(Scope.PROTOTYPE);\n\t\tassertThat(supplier.getScope()).isEqualTo(Scope.PROTOTYPE);\n\t\tassertThat(supplier.get(null)).isEqualTo(\"test\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "instanceSupplierWithScopeChangesScope", "(", ")", "{", "}", "@", "Test", ";", ";", ";", "InstanceSupplier", "supplier", "=", ".", "isEqualTo", ".", "isEqualTo", "<", "String", ">", ".", "withScope", "assertThat", "(", ")", "assertThat", "(", ")", "InstanceSupplier", ".", "of", "(", ")", "(", ")", "Scope", ".", "PROTOTYPE", "(", ")", "\"", "test", "\"", "(", ")", "Scope", ".", "PROTOTYPE", "supplier", ".", "getScope", "supplier", ".", "get", "\"", "test", "\"", "(", ")", "(", "null", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 95, "ast_depth": 10, "n_identifiers": 12, "vocab_size": 27, "n_whitespaces": 18, "n_words": 24, "nloc": 6, "token_counts": 63}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java#287-292", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java", "language": "Java"}, "method": {"name": "onApplicationEvent", "qualified_name": "test.java.org.springframework.boot.bootstrap.DefaultBootstrapContextTests#onApplicationEvent", "start_line": 287, "end_line": 292, "signature": "onApplicationEvent(BootstrapContextClosedEvent event)", "original_code": "@Override\n\t\tpublic void onApplicationEvent(BootstrapContextClosedEvent event) {\n\t\t\tthis.called++;\n\t\t\tthis.bootstrapContext = event.getBootstrapContext();\n\t\t\tthis.applicationContext = event.getApplicationContext();\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "onApplicationEvent", "public", "(", ")", "{", "}", "@", "Override", "BootstrapContextClosedEvent", "event", ";", ";", ";", "++", "=", "=", "this", ".", "called", "this", ".", "bootstrapContext", "event", ".", "getBootstrapContext", "this", ".", "applicationContext", "event", ".", "getApplicationContext", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 56, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 21, "n_whitespaces": 26, "n_words": 16, "nloc": 6, "token_counts": 36}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java#294-297", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java", "language": "Java"}, "method": {"name": "assertThat", "qualified_name": "test.java.org.springframework.boot.bootstrap.DefaultBootstrapContextTests#assertThat", "start_line": 294, "end_line": 297, "signature": "assertThat()", "original_code": "@Override\n\t\tpublic CloseListenerAssert assertThat() {\n\t\t\treturn new CloseListenerAssert(this);\n\t\t}", "doc_comment": ""}, "code_tokens": ["CloseListenerAssert", "assertThat", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "new", "CloseListenerAssert", "(", "this", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 25, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 13, "n_whitespaces": 15, "n_words": 8, "nloc": 4, "token_counts": 16}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java#307-310", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java", "language": "Java"}, "method": {"name": "wasCalledOnlyOnce", "qualified_name": "test.java.org.springframework.boot.bootstrap.DefaultBootstrapContextTests#wasCalledOnlyOnce", "start_line": 307, "end_line": 310, "signature": "wasCalledOnlyOnce()", "original_code": "CloseListenerAssert wasCalledOnlyOnce() {\n\t\t\tassertThat(this.actual.called).as(\"action calls\").isOne();\n\t\t\treturn this;\n\t\t}", "doc_comment": ""}, "code_tokens": ["CloseListenerAssert", "wasCalledOnlyOnce", "(", ")", "{", "}", ";", "return", "this", ";", ".", "isOne", ".", "as", "(", ")", "assertThat", "(", ")", "(", ")", "\"", "action calls", "\"", ".", "called", "this", ".", "actual"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 44, "ast_depth": 11, "n_identifiers": 6, "vocab_size": 17, "n_whitespaces": 15, "n_words": 12, "nloc": 4, "token_counts": 29}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java#312-315", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java", "language": "Java"}, "method": {"name": "wasNotCalled", "qualified_name": "test.java.org.springframework.boot.bootstrap.DefaultBootstrapContextTests#wasNotCalled", "start_line": 312, "end_line": 315, "signature": "wasNotCalled()", "original_code": "CloseListenerAssert wasNotCalled() {\n\t\t\tassertThat(this.actual.called).as(\"action calls\").isZero();\n\t\t\treturn this;\n\t\t}", "doc_comment": ""}, "code_tokens": ["CloseListenerAssert", "wasNotCalled", "(", ")", "{", "}", ";", "return", "this", ";", ".", "isZero", ".", "as", "(", ")", "assertThat", "(", ")", "(", ")", "\"", "action calls", "\"", ".", "called", "this", ".", "actual"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 44, "ast_depth": 11, "n_identifiers": 6, "vocab_size": 17, "n_whitespaces": 15, "n_words": 12, "nloc": 4, "token_counts": 29}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java#317-320", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java", "language": "Java"}, "method": {"name": "hasBootstrapContextSameAs", "qualified_name": "test.java.org.springframework.boot.bootstrap.DefaultBootstrapContextTests#hasBootstrapContextSameAs", "start_line": 317, "end_line": 320, "signature": "hasBootstrapContextSameAs(BootstrapContext bootstrapContext)", "original_code": "CloseListenerAssert hasBootstrapContextSameAs(BootstrapContext bootstrapContext) {\n\t\t\tassertThat(this.actual.bootstrapContext).isSameAs(bootstrapContext);\n\t\t\treturn this;\n\t\t}", "doc_comment": ""}, "code_tokens": ["CloseListenerAssert", "hasBootstrapContextSameAs", "(", ")", "{", "}", "BootstrapContext", "bootstrapContext", ";", "return", "this", ";", ".", "isSameAs", "assertThat", "(", "bootstrapContext", ")", "(", ")", ".", "bootstrapContext", "this", ".", "actual"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 38, "ast_depth": 10, "n_identifiers": 5, "vocab_size": 15, "n_whitespaces": 15, "n_words": 12, "nloc": 4, "token_counts": 25}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java#322-325", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/bootstrap/DefaultBootstrapContextTests.java", "language": "Java"}, "method": {"name": "hasApplicationContextSameAs", "qualified_name": "test.java.org.springframework.boot.bootstrap.DefaultBootstrapContextTests#hasApplicationContextSameAs", "start_line": 322, "end_line": 325, "signature": "hasApplicationContextSameAs(ApplicationContext applicationContext)", "original_code": "CloseListenerAssert hasApplicationContextSameAs(ApplicationContext applicationContext) {\n\t\t\tassertThat(this.actual.applicationContext).isSameAs(applicationContext);\n\t\t\treturn this;\n\t\t}", "doc_comment": ""}, "code_tokens": ["CloseListenerAssert", "hasApplicationContextSameAs", "(", ")", "{", "}", "ApplicationContext", "applicationContext", ";", "return", "this", ";", ".", "isSameAs", "assertThat", "(", "applicationContext", ")", "(", ")", ".", "applicationContext", "this", ".", "actual"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 38, "ast_depth": 10, "n_identifiers": 5, "vocab_size": 15, "n_whitespaces": 15, "n_words": 12, "nloc": 4, "token_counts": 25}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/ApplicationPidFileWriterTests.java#62-68", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/ApplicationPidFileWriterTests.java", "language": "Java"}, "method": {"name": "resetListener", "qualified_name": "test.java.org.springframework.boot.context.ApplicationPidFileWriterTests#resetListener", "start_line": 62, "end_line": 68, "signature": "resetListener()", "original_code": "@BeforeEach\n\t@AfterEach\n\tvoid resetListener() {\n\t\tSystem.clearProperty(\"PIDFILE\");\n\t\tSystem.clearProperty(\"PID_FAIL_ON_WRITE_ERROR\");\n\t\tApplicationPidFileWriter.reset();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "resetListener", "(", ")", "{", "}", "@", "BeforeEach", "@", "AfterEach", ";", ";", ";", "System", ".", "clearProperty", "System", ".", "clearProperty", "ApplicationPidFileWriter", ".", "reset", "(", ")", "(", ")", "(", ")", "\"", "PIDFILE", "\"", "\"", "PID_FAIL_ON_WRITE_ERROR", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 52, "ast_depth": 8, "n_identifiers": 7, "vocab_size": 18, "n_whitespaces": 17, "n_words": 12, "nloc": 7, "token_counts": 34}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/ApplicationPidFileWriterTests.java#70-76", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/ApplicationPidFileWriterTests.java", "language": "Java"}, "method": {"name": "createPidFile", "qualified_name": "test.java.org.springframework.boot.context.ApplicationPidFileWriterTests#createPidFile", "start_line": 70, "end_line": 76, "signature": "createPidFile()", "original_code": "@Test\n\tvoid createPidFile() {\n\t\tFile file = new File(this.tempDir, \"pid\");\n\t\tApplicationPidFileWriter listener = new ApplicationPidFileWriter(file);\n\t\tlistener.onApplicationEvent(EVENT);\n\t\tassertThat(contentOf(file)).isNotEmpty();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "createPidFile", "(", ")", "{", "}", "@", "Test", "File", ";", "ApplicationPidFileWriter", ";", ";", ";", "file", "=", "listener", "=", "listener", ".", "onApplicationEvent", ".", "isNotEmpty", "new", "File", "new", "ApplicationPidFileWriter", "(", "EVENT", ")", "assertThat", "(", ")", "(", ",", ")", "(", "file", ")", "(", ")", "this", ".", "tempDir", "\"", "pid", "\"", "contentOf", "(", "file", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 77, "ast_depth": 10, "n_identifiers": 10, "vocab_size": 26, "n_whitespaces": 27, "n_words": 22, "nloc": 7, "token_counts": 51}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/ApplicationPidFileWriterTests.java#78-85", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/ApplicationPidFileWriterTests.java", "language": "Java"}, "method": {"name": "overridePidFile", "qualified_name": "test.java.org.springframework.boot.context.ApplicationPidFileWriterTests#overridePidFile", "start_line": 78, "end_line": 85, "signature": "overridePidFile()", "original_code": "@Test\n\tvoid overridePidFile() {\n\t\tFile file = new File(this.tempDir, \"pid\");\n\t\tSystem.setProperty(\"PIDFILE\", new File(this.tempDir, \"override\").getAbsolutePath());\n\t\tApplicationPidFileWriter listener = new ApplicationPidFileWriter(file);\n\t\tlistener.onApplicationEvent(EVENT);\n\t\tassertThat(contentOf(new File(System.getProperty(\"PIDFILE\")))).isNotEmpty();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "overridePidFile", "(", ")", "{", "}", "@", "Test", "File", ";", ";", "ApplicationPidFileWriter", ";", ";", ";", "file", "=", "System", ".", "setProperty", "listener", "=", "listener", ".", "onApplicationEvent", ".", "isNotEmpty", "new", "File", "(", ",", ")", "new", "ApplicationPidFileWriter", "(", "EVENT", ")", "assertThat", "(", ")", "(", ",", ")", "\"", "PIDFILE", "\"", ".", "getAbsolutePath", "(", "file", ")", "(", ")", "this", ".", "tempDir", "\"", "pid", "\"", "new", "File", "(", ")", "contentOf", "(", ",", ")", "(", ")", "this", ".", "tempDir", "\"", "override", "\"", "new", "File", "(", ")", "System", ".", "getProperty", "(", ")", "\"", "PIDFILE", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 128, "ast_depth": 15, "n_identifiers": 14, "vocab_size": 32, "n_whitespaces": 34, "n_words": 35, "nloc": 8, "token_counts": 87}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/ApplicationPidFileWriterTests.java#87-94", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/ApplicationPidFileWriterTests.java", "language": "Java"}, "method": {"name": "overridePidFileWithSpring", "qualified_name": "test.java.org.springframework.boot.context.ApplicationPidFileWriterTests#overridePidFileWithSpring", "start_line": 87, "end_line": 94, "signature": "overridePidFileWithSpring()", "original_code": "@Test\n\tvoid overridePidFileWithSpring() {\n\t\tFile file = new File(this.tempDir, \"pid\");\n\t\tSpringApplicationEvent event = createPreparedEvent(\"spring.pid.file\", file.getAbsolutePath());\n\t\tApplicationPidFileWriter listener = new ApplicationPidFileWriter();\n\t\tlistener.onApplicationEvent(event);\n\t\tassertThat(contentOf(file)).isNotEmpty();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "overridePidFileWithSpring", "(", ")", "{", "}", "@", "Test", "File", ";", "SpringApplicationEvent", ";", "ApplicationPidFileWriter", ";", ";", ";", "file", "=", "event", "=", "listener", "=", "listener", ".", "onApplicationEvent", ".", "isNotEmpty", "new", "File", "createPreparedEvent", "new", "ApplicationPidFileWriter", "(", "event", ")", "assertThat", "(", ")", "(", ",", ")", "(", ",", ")", "(", ")", "(", ")", "this", ".", "tempDir", "\"", "pid", "\"", "\"", "spring.pid.file", "\"", "file", ".", "getAbsolutePath", "contentOf", "(", ")", "(", "file", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 99, "ast_depth": 10, "n_identifiers": 12, "vocab_size": 30, "n_whitespaces": 34, "n_words": 29, "nloc": 8, "token_counts": 66}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/ApplicationPidFileWriterTests.java#96-107", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/ApplicationPidFileWriterTests.java", "language": "Java"}, "method": {"name": "tryEnvironmentPreparedEvent", "qualified_name": "test.java.org.springframework.boot.context.ApplicationPidFileWriterTests#tryEnvironmentPreparedEvent", "start_line": 96, "end_line": 107, "signature": "tryEnvironmentPreparedEvent()", "original_code": "@Test\n\tvoid tryEnvironmentPreparedEvent() throws Exception {\n\t\tFile file = new File(this.tempDir, \"pid\");\n\t\tfile.createNewFile();\n\t\tSpringApplicationEvent event = createEnvironmentPreparedEvent(\"spring.pid.file\", file.getAbsolutePath());\n\t\tApplicationPidFileWriter listener = new ApplicationPidFileWriter();\n\t\tlistener.onApplicationEvent(event);\n\t\tassertThat(contentOf(file)).isEmpty();\n\t\tlistener.setTriggerEventType(ApplicationEnvironmentPreparedEvent.class);\n\t\tlistener.onApplicationEvent(event);\n\t\tassertThat(contentOf(file)).isNotEmpty();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "tryEnvironmentPreparedEvent", "(", ")", "throws", "Exception", "{", "}", "@", "Test", "File", ";", ";", "SpringApplicationEvent", ";", "ApplicationPidFileWriter", ";", ";", ";", ";", ";", ";", "file", "=", "file", ".", "createNewFile", "event", "=", "listener", "=", "listener", ".", "onApplicationEvent", ".", "isEmpty", "listener", ".", "setTriggerEventType", "listener", ".", "onApplicationEvent", ".", "isNotEmpty", "new", "File", "(", ")", "createEnvironmentPreparedEvent", "new", "ApplicationPidFileWriter", "(", "event", ")", "assertThat", "(", ")", "(", ")", "(", "event", ")", "assertThat", "(", ")", "(", ",", ")", "(", ",", ")", "(", ")", "(", ")", "ApplicationEnvironmentPreparedEvent", ".", "class", "(", ")", "this", ".", "tempDir", "\"", "pid", "\"", "\"", "spring.pid.file", "\"", "file", ".", "getAbsolutePath", "contentOf", "contentOf", "(", ")", "(", "file", ")", "(", "file", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 153, "ast_depth": 10, "n_identifiers": 15, "vocab_size": 37, "n_whitespaces": 48, "n_words": 44, "nloc": 12, "token_counts": 102}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/ApplicationPidFileWriterTests.java#109-120", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/ApplicationPidFileWriterTests.java", "language": "Java"}, "method": {"name": "tryReadyEvent", "qualified_name": "test.java.org.springframework.boot.context.ApplicationPidFileWriterTests#tryReadyEvent", "start_line": 109, "end_line": 120, "signature": "tryReadyEvent()", "original_code": "@Test\n\tvoid tryReadyEvent() throws Exception {\n\t\tFile file = new File(this.tempDir, \"pid\");\n\t\tfile.createNewFile();\n\t\tSpringApplicationEvent event = createReadyEvent(\"spring.pid.file\", file.getAbsolutePath());\n\t\tApplicationPidFileWriter listener = new ApplicationPidFileWriter();\n\t\tlistener.onApplicationEvent(event);\n\t\tassertThat(contentOf(file)).isEmpty();\n\t\tlistener.setTriggerEventType(ApplicationReadyEvent.class);\n\t\tlistener.onApplicationEvent(event);\n\t\tassertThat(contentOf(file)).isNotEmpty();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "tryReadyEvent", "(", ")", "throws", "Exception", "{", "}", "@", "Test", "File", ";", ";", "SpringApplicationEvent", ";", "ApplicationPidFileWriter", ";", ";", ";", ";", ";", ";", "file", "=", "file", ".", "createNewFile", "event", "=", "listener", "=", "listener", ".", "onApplicationEvent", ".", "isEmpty", "listener", ".", "setTriggerEventType", "listener", ".", "onApplicationEvent", ".", "isNotEmpty", "new", "File", "(", ")", "createReadyEvent", "new", "ApplicationPidFileWriter", "(", "event", ")", "assertThat", "(", ")", "(", ")", "(", "event", ")", "assertThat", "(", ")", "(", ",", ")", "(", ",", ")", "(", ")", "(", ")", "ApplicationReadyEvent", ".", "class", "(", ")", "this", ".", "tempDir", "\"", "pid", "\"", "\"", "spring.pid.file", "\"", "file", ".", "getAbsolutePath", "contentOf", "contentOf", "(", ")", "(", "file", ")", "(", "file", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 153, "ast_depth": 10, "n_identifiers": 15, "vocab_size": 37, "n_whitespaces": 48, "n_words": 44, "nloc": 12, "token_counts": 102}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/ApplicationPidFileWriterTests.java#122-130", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/ApplicationPidFileWriterTests.java", "language": "Java"}, "method": {"name": "withNoEnvironment", "qualified_name": "test.java.org.springframework.boot.context.ApplicationPidFileWriterTests#withNoEnvironment", "start_line": 122, "end_line": 130, "signature": "withNoEnvironment()", "original_code": "@Test\n\tvoid withNoEnvironment() {\n\t\tFile file = new File(this.tempDir, \"pid\");\n\t\tApplicationPidFileWriter listener = new ApplicationPidFileWriter(file);\n\t\tlistener.setTriggerEventType(ApplicationStartingEvent.class);\n\t\tlistener.onApplicationEvent(\n\t\t\t\tnew ApplicationStartingEvent(new DefaultBootstrapContext(), new SpringApplication(), new String[] {}));\n\t\tassertThat(contentOf(file)).isNotEmpty();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "withNoEnvironment", "(", ")", "{", "}", "@", "Test", "File", ";", "ApplicationPidFileWriter", ";", ";", ";", ";", "file", "=", "listener", "=", "listener", ".", "setTriggerEventType", "listener", ".", "onApplicationEvent", ".", "isNotEmpty", "new", "File", "new", "ApplicationPidFileWriter", "(", ")", "(", ")", "assertThat", "(", ")", "(", ",", ")", "(", "file", ")", "ApplicationStartingEvent", ".", "class", "new", "ApplicationStartingEvent", "(", ")", "this", ".", "tempDir", "\"", "pid", "\"", "(", ",", ",", ")", "contentOf", "new", "DefaultBootstrapContext", "new", "SpringApplication", "new", "String", "(", "file", ")", "(", ")", "(", ")", "[", "]", "{", "}"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 118, "ast_depth": 11, "n_identifiers": 10, "vocab_size": 33, "n_whitespaces": 42, "n_words": 33, "nloc": 9, "token_counts": 79}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/ApplicationPidFileWriterTests.java#132-139", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/ApplicationPidFileWriterTests.java", "language": "Java"}, "method": {"name": "continueWhenPidFileIsReadOnly", "qualified_name": "test.java.org.springframework.boot.context.ApplicationPidFileWriterTests#continueWhenPidFileIsReadOnly", "start_line": 132, "end_line": 139, "signature": "continueWhenPidFileIsReadOnly()", "original_code": "@Test\n\tvoid continueWhenPidFileIsReadOnly() throws Exception {\n\t\twithReadOnlyPidFile((file) -> {\n\t\t\tApplicationPidFileWriter listener = new ApplicationPidFileWriter(file);\n\t\t\tlistener.onApplicationEvent(EVENT);\n\t\t\tassertThat(contentOf(file)).isEmpty();\n\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "continueWhenPidFileIsReadOnly", "(", ")", "throws", "Exception", "{", "}", "@", "Test", ";", "withReadOnlyPidFile", "(", ")", "->", "(", "file", ")", "{", "}", "ApplicationPidFileWriter", ";", ";", ";", "listener", "=", "listener", ".", "onApplicationEvent", ".", "isEmpty", "new", "ApplicationPidFileWriter", "(", "EVENT", ")", "assertThat", "(", ")", "(", "file", ")", "(", ")", "contentOf", "(", "file", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 75, "ast_depth": 15, "n_identifiers": 10, "vocab_size": 24, "n_whitespaces": 32, "n_words": 19, "nloc": 8, "token_counts": 48}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/ApplicationPidFileWriterTests.java#141-149", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/ApplicationPidFileWriterTests.java", "language": "Java"}, "method": {"name": "throwWhenPidFileIsReadOnly", "qualified_name": "test.java.org.springframework.boot.context.ApplicationPidFileWriterTests#throwWhenPidFileIsReadOnly", "start_line": 141, "end_line": 149, "signature": "throwWhenPidFileIsReadOnly()", "original_code": "@Test\n\tvoid throwWhenPidFileIsReadOnly() throws Exception {\n\t\twithReadOnlyPidFile((file) -> {\n\t\t\tSystem.setProperty(\"PID_FAIL_ON_WRITE_ERROR\", \"true\");\n\t\t\tApplicationPidFileWriter listener = new ApplicationPidFileWriter(file);\n\t\t\tassertThatIllegalStateException().isThrownBy(() -> listener.onApplicationEvent(EVENT))\n\t\t\t\t.withMessageContaining(\"Cannot create pid file\");\n\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "throwWhenPidFileIsReadOnly", "(", ")", "throws", "Exception", "{", "}", "@", "Test", ";", "withReadOnlyPidFile", "(", ")", "->", "(", "file", ")", "{", "}", ";", "ApplicationPidFileWriter", ";", ";", "System", ".", "setProperty", "listener", "=", ".", "withMessageContaining", "(", ",", ")", "new", "ApplicationPidFileWriter", ".", "isThrownBy", "(", ")", "\"", "PID_FAIL_ON_WRITE_ERROR", "\"", "\"", "true", "\"", "(", "file", ")", "assertThatIllegalStateException", "(", ")", "\"", "Cannot create pid file", "\"", "(", ")", "->", "(", ")", "listener", ".", "onApplicationEvent", "(", "EVENT", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 100, "ast_depth": 16, "n_identifiers": 12, "vocab_size": 31, "n_whitespaces": 43, "n_words": 26, "nloc": 9, "token_counts": 66}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/ApplicationPidFileWriterTests.java#151-159", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/ApplicationPidFileWriterTests.java", "language": "Java"}, "method": {"name": "throwWhenPidFileIsReadOnlyWithSpring", "qualified_name": "test.java.org.springframework.boot.context.ApplicationPidFileWriterTests#throwWhenPidFileIsReadOnlyWithSpring", "start_line": 151, "end_line": 159, "signature": "throwWhenPidFileIsReadOnlyWithSpring()", "original_code": "@Test\n\tvoid throwWhenPidFileIsReadOnlyWithSpring() throws Exception {\n\t\twithReadOnlyPidFile((file) -> {\n\t\t\tSpringApplicationEvent event = createPreparedEvent(\"spring.pid.fail-on-write-error\", \"true\");\n\t\t\tApplicationPidFileWriter listener = new ApplicationPidFileWriter(file);\n\t\t\tassertThatIllegalStateException().isThrownBy(() -> listener.onApplicationEvent(event))\n\t\t\t\t.withMessageContaining(\"Cannot create pid file\");\n\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "throwWhenPidFileIsReadOnlyWithSpring", "(", ")", "throws", "Exception", "{", "}", "@", "Test", ";", "withReadOnlyPidFile", "(", ")", "->", "(", "file", ")", "{", "}", "SpringApplicationEvent", ";", "ApplicationPidFileWriter", ";", ";", "event", "=", "listener", "=", ".", "withMessageContaining", "createPreparedEvent", "new", "ApplicationPidFileWriter", ".", "isThrownBy", "(", ")", "(", ",", ")", "(", "file", ")", "assertThatIllegalStateException", "(", ")", "\"", "Cannot create pid file", "\"", "\"", "spring.pid.fail-on-write-error", "\"", "\"", "true", "\"", "(", ")", "->", "(", ")", "listener", ".", "onApplicationEvent", "(", "event", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 102, "ast_depth": 16, "n_identifiers": 11, "vocab_size": 31, "n_whitespaces": 46, "n_words": 32, "nloc": 9, "token_counts": 67}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/ApplicationPidFileWriterTests.java#161-171", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/ApplicationPidFileWriterTests.java", "language": "Java"}, "method": {"name": "withReadOnlyPidFile", "qualified_name": "test.java.org.springframework.boot.context.ApplicationPidFileWriterTests#withReadOnlyPidFile", "start_line": 161, "end_line": 171, "signature": "withReadOnlyPidFile(Consumer<File> consumer)", "original_code": "private void withReadOnlyPidFile(Consumer<File> consumer) throws IOException {\n\t\tFile file = new File(this.tempDir, \"pid\");\n\t\tfile.createNewFile();\n\t\tfile.setReadOnly();\n\t\ttry {\n\t\t\tconsumer.accept(file);\n\t\t}\n\t\tfinally {\n\t\t\tfile.setWritable(true);\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "withReadOnlyPidFile", "private", "(", ")", "throws", "IOException", "{", "}", "consumer", "File", ";", ";", ";", "try", "Consumer", "file", "=", "file", ".", "createNewFile", "file", ".", "setReadOnly", "{", "}", "finally", "<", "File", ">", "new", "File", "(", ")", "(", ")", ";", "{", "}", "(", ",", ")", "consumer", ".", "accept", ";", "this", ".", "tempDir", "\"", "pid", "\"", "(", "file", ")", "file", ".", "setWritable", "(", "true", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 92, "ast_depth": 10, "n_identifiers": 8, "vocab_size": 31, "n_whitespaces": 44, "n_words": 27, "nloc": 11, "token_counts": 61}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/ApplicationPidFileWriterTests.java#173-177", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/ApplicationPidFileWriterTests.java", "language": "Java"}, "method": {"name": "createEnvironmentPreparedEvent", "qualified_name": "test.java.org.springframework.boot.context.ApplicationPidFileWriterTests#createEnvironmentPreparedEvent", "start_line": 173, "end_line": 177, "signature": "createEnvironmentPreparedEvent(String propName, String propValue)", "original_code": "private SpringApplicationEvent createEnvironmentPreparedEvent(String propName, String propValue) {\n\t\tConfigurableEnvironment environment = createEnvironment(propName, propValue);\n\t\treturn new ApplicationEnvironmentPreparedEvent(new DefaultBootstrapContext(), new SpringApplication(),\n\t\t\t\tnew String[] {}, environment);\n\t}", "doc_comment": ""}, "code_tokens": ["SpringApplicationEvent", "createEnvironmentPreparedEvent", "private", "(", ",", ")", "{", "}", "String", "propName", "String", "propValue", "ConfigurableEnvironment", ";", "return", ";", "environment", "=", "new", "ApplicationEnvironmentPreparedEvent", "createEnvironment", "(", ",", ",", ",", "environment", ")", "(", "propName", ",", "propValue", ")", "new", "DefaultBootstrapContext", "new", "SpringApplication", "new", "String", "(", ")", "(", ")", "[", "]", "{", "}"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 67, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 23, "n_whitespaces": 31, "n_words": 22, "nloc": 5, "token_counts": 46}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/ApplicationPidFileWriterTests.java#179-184", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/ApplicationPidFileWriterTests.java", "language": "Java"}, "method": {"name": "createPreparedEvent", "qualified_name": "test.java.org.springframework.boot.context.ApplicationPidFileWriterTests#createPreparedEvent", "start_line": 179, "end_line": 184, "signature": "createPreparedEvent(String propName, String propValue)", "original_code": "private SpringApplicationEvent createPreparedEvent(String propName, String propValue) {\n\t\tConfigurableEnvironment environment = createEnvironment(propName, propValue);\n\t\tConfigurableApplicationContext context = mock(ConfigurableApplicationContext.class);\n\t\tgiven(context.getEnvironment()).willReturn(environment);\n\t\treturn new ApplicationPreparedEvent(new SpringApplication(), new String[] {}, context);\n\t}", "doc_comment": ""}, "code_tokens": ["SpringApplicationEvent", "createPreparedEvent", "private", "(", ",", ")", "{", "}", "String", "propName", "String", "propValue", "ConfigurableEnvironment", ";", "ConfigurableApplicationContext", ";", ";", "return", ";", "environment", "=", "context", "=", ".", "willReturn", "new", "ApplicationPreparedEvent", "createEnvironment", "mock", "given", "(", "environment", ")", "(", ",", ",", "context", ")", "(", "propName", ",", "propValue", ")", "(", ")", "(", ")", "new", "SpringApplication", "new", "String", "ConfigurableApplicationContext", ".", "class", "context", ".", "getEnvironment", "(", ")", "[", "]", "{", "}", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 96, "ast_depth": 10, "n_identifiers": 10, "vocab_size": 30, "n_whitespaces": 34, "n_words": 30, "nloc": 6, "token_counts": 65}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/ApplicationPidFileWriterTests.java#186-191", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/ApplicationPidFileWriterTests.java", "language": "Java"}, "method": {"name": "createReadyEvent", "qualified_name": "test.java.org.springframework.boot.context.ApplicationPidFileWriterTests#createReadyEvent", "start_line": 186, "end_line": 191, "signature": "createReadyEvent(String propName, String propValue)", "original_code": "private SpringApplicationEvent createReadyEvent(String propName, String propValue) {\n\t\tConfigurableEnvironment environment = createEnvironment(propName, propValue);\n\t\tConfigurableApplicationContext context = mock(ConfigurableApplicationContext.class);\n\t\tgiven(context.getEnvironment()).willReturn(environment);\n\t\treturn new ApplicationReadyEvent(new SpringApplication(), new String[] {}, context, null);\n\t}", "doc_comment": ""}, "code_tokens": ["SpringApplicationEvent", "createReadyEvent", "private", "(", ",", ")", "{", "}", "String", "propName", "String", "propValue", "ConfigurableEnvironment", ";", "ConfigurableApplicationContext", ";", ";", "return", ";", "environment", "=", "context", "=", ".", "willReturn", "new", "ApplicationReadyEvent", "createEnvironment", "mock", "given", "(", "environment", ")", "(", ",", ",", "context", ",", "null", ")", "(", "propName", ",", "propValue", ")", "(", ")", "(", ")", "new", "SpringApplication", "new", "String", "ConfigurableApplicationContext", ".", "class", "context", ".", "getEnvironment", "(", ")", "[", "]", "{", "}", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 98, "ast_depth": 10, "n_identifiers": 10, "vocab_size": 31, "n_whitespaces": 35, "n_words": 31, "nloc": 6, "token_counts": 67}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/ApplicationPidFileWriterTests.java#193-198", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/ApplicationPidFileWriterTests.java", "language": "Java"}, "method": {"name": "createEnvironment", "qualified_name": "test.java.org.springframework.boot.context.ApplicationPidFileWriterTests#createEnvironment", "start_line": 193, "end_line": 198, "signature": "createEnvironment(String propName, String propValue)", "original_code": "private ConfigurableEnvironment createEnvironment(String propName, String propValue) {\n\t\tMockPropertySource propertySource = mockPropertySource(propName, propValue);\n\t\tConfigurableEnvironment environment = new StandardEnvironment();\n\t\tenvironment.getPropertySources().addLast(propertySource);\n\t\treturn environment;\n\t}", "doc_comment": ""}, "code_tokens": ["ConfigurableEnvironment", "createEnvironment", "private", "(", ",", ")", "{", "}", "String", "propName", "String", "propValue", "MockPropertySource", ";", "ConfigurableEnvironment", ";", ";", "return", "environment", ";", "propertySource", "=", "environment", "=", ".", "addLast", "mockPropertySource", "new", "StandardEnvironment", "environment", ".", "getPropertySources", "(", "propertySource", ")", "(", "propName", ",", "propValue", ")", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 65, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 23, "n_whitespaces": 29, "n_words": 22, "nloc": 6, "token_counts": 44}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/ApplicationPidFileWriterTests.java#200-204", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/ApplicationPidFileWriterTests.java", "language": "Java"}, "method": {"name": "mockPropertySource", "qualified_name": "test.java.org.springframework.boot.context.ApplicationPidFileWriterTests#mockPropertySource", "start_line": 200, "end_line": 204, "signature": "mockPropertySource(String name, String value)", "original_code": "private MockPropertySource mockPropertySource(String name, String value) {\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tpropertySource.setProperty(name, value);\n\t\treturn propertySource;\n\t}", "doc_comment": ""}, "code_tokens": ["MockPropertySource", "mockPropertySource", "private", "(", ",", ")", "{", "}", "String", "name", "String", "value", "MockPropertySource", ";", ";", "return", "propertySource", ";", "propertySource", "=", "propertySource", ".", "setProperty", "new", "MockPropertySource", "(", "name", ",", "value", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 47, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 18, "n_whitespaces": 23, "n_words": 17, "nloc": 5, "token_counts": 32}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/FileEncodingApplicationListenerTests.java#46-52", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/FileEncodingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "testIllegalState", "qualified_name": "test.java.org.springframework.boot.context.FileEncodingApplicationListenerTests#testIllegalState", "start_line": 46, "end_line": 52, "signature": "testIllegalState()", "original_code": "@Test\n\tvoid testIllegalState() {\n\t\tTestPropertySourceUtils.addInlinedPropertiesToEnvironment(this.environment,\n\t\t\t\t\"spring.mandatory_file_encoding=FOO\");\n\t\tConfigurationPropertySources.attach(this.environment);\n\t\tassertThatIllegalStateException().isThrownBy(() -> this.initializer.onApplicationEvent(this.event));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "testIllegalState", "(", ")", "{", "}", "@", "Test", ";", ";", ";", "TestPropertySourceUtils", ".", "addInlinedPropertiesToEnvironment", "ConfigurationPropertySources", ".", "attach", ".", "isThrownBy", "(", ",", ")", "(", ")", "assertThatIllegalStateException", "(", ")", "this", ".", "environment", "\"", "spring.mandatory_file_encoding=FOO", "\"", "this", ".", "environment", "(", ")", "->", "(", ")", ".", "onApplicationEvent", "this", ".", "initializer", "(", ")", "this", ".", "event"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 77, "ast_depth": 11, "n_identifiers": 12, "vocab_size": 25, "n_whitespaces": 22, "n_words": 21, "nloc": 7, "token_counts": 51}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/FileEncodingApplicationListenerTests.java#54-57", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/FileEncodingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "testSunnyDayNothingMandated", "qualified_name": "test.java.org.springframework.boot.context.FileEncodingApplicationListenerTests#testSunnyDayNothingMandated", "start_line": 54, "end_line": 57, "signature": "testSunnyDayNothingMandated()", "original_code": "@Test\n\tvoid testSunnyDayNothingMandated() {\n\t\tthis.initializer.onApplicationEvent(this.event);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "testSunnyDayNothingMandated", "(", ")", "{", "}", "@", "Test", ";", ".", "onApplicationEvent", "this", ".", "initializer", "(", ")", "this", ".", "event"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 30, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 14, "n_whitespaces": 9, "n_words": 8, "nloc": 4, "token_counts": 19}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/FileEncodingApplicationListenerTests.java#59-66", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/FileEncodingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "testSunnyDayMandated", "qualified_name": "test.java.org.springframework.boot.context.FileEncodingApplicationListenerTests#testSunnyDayMandated", "start_line": 59, "end_line": 66, "signature": "testSunnyDayMandated()", "original_code": "@Test\n\tvoid testSunnyDayMandated() {\n\t\tassertThat(System.getProperty(\"file.encoding\")).isNotNull();\n\t\tTestPropertySourceUtils.addInlinedPropertiesToEnvironment(this.environment,\n\t\t\t\t\"spring.mandatory_file_encoding:\" + System.getProperty(\"file.encoding\"));\n\t\tConfigurationPropertySources.attach(this.environment);\n\t\tthis.initializer.onApplicationEvent(this.event);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "testSunnyDayMandated", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ";", ".", "isNotNull", "TestPropertySourceUtils", ".", "addInlinedPropertiesToEnvironment", "ConfigurationPropertySources", ".", "attach", ".", "onApplicationEvent", "assertThat", "(", ")", "(", ",", ")", "(", ")", "this", ".", "initializer", "(", ")", "(", ")", "this", ".", "environment", "+", "this", ".", "environment", "this", ".", "event", "System", ".", "getProperty", "\"", "spring.mandatory_file_encoding:", "\"", "System", ".", "getProperty", "(", ")", "(", ")", "\"", "file.encoding", "\"", "\"", "file.encoding", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 98, "ast_depth": 11, "n_identifiers": 14, "vocab_size": 28, "n_whitespaces": 25, "n_words": 28, "nloc": 8, "token_counts": 66}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java#79-90", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java", "language": "Java"}, "method": {"name": "setup", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentContributorsTests#setup", "start_line": 79, "end_line": 90, "signature": "setup()", "original_code": "@BeforeEach\n\tvoid setup() {\n\t\tMockEnvironment environment = new MockEnvironment();\n\t\tBinder binder = Binder.get(environment);\n\t\tConfigDataLocationResolvers resolvers = new ConfigDataLocationResolvers(this.logFactory, this.bootstrapContext,\n\t\t\t\tbinder, new DefaultResourceLoader(getClass().getClassLoader()),\n\t\t\t\tSpringFactoriesLoader.forDefaultResourceLocation(getClass().getClassLoader()));\n\t\tConfigDataLoaders loaders = new ConfigDataLoaders(this.logFactory, this.bootstrapContext,\n\t\t\t\tSpringFactoriesLoader.forDefaultResourceLocation());\n\t\tthis.importer = new ConfigDataImporter(this.logFactory, ConfigDataNotFoundAction.FAIL, resolvers, loaders);\n\t\tthis.activationContext = new ConfigDataActivationContext(CloudPlatform.KUBERNETES, null);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "setup", "(", ")", "{", "}", "@", "BeforeEach", "MockEnvironment", ";", "Binder", ";", "ConfigDataLocationResolvers", ";", "ConfigDataLoaders", ";", ";", ";", "environment", "=", "binder", "=", "resolvers", "=", "loaders", "=", "=", "=", "new", "MockEnvironment", "Binder", ".", "get", "new", "ConfigDataLocationResolvers", "new", "ConfigDataLoaders", "this", ".", "importer", "new", "ConfigDataImporter", "this", ".", "activationContext", "new", "ConfigDataActivationContext", "(", ")", "(", "environment", ")", "(", ",", ",", "binder", ",", ",", ")", "(", ",", ",", ")", "(", ",", ",", "resolvers", ",", "loaders", ")", "(", ",", "null", ")", "this", ".", "logFactory", "this", ".", "bootstrapContext", "new", "DefaultResourceLoader", "SpringFactoriesLoader", ".", "forDefaultResourceLocation", "this", ".", "logFactory", "this", ".", "bootstrapContext", "SpringFactoriesLoader", ".", "forDefaultResourceLocation", "this", ".", "logFactory", "ConfigDataNotFoundAction", ".", "FAIL", "CloudPlatform", ".", "KUBERNETES", "(", ")", "(", ")", "(", ")", ".", "getClassLoader", ".", "getClassLoader", "getClass", "(", ")", "getClass", "(", ")", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 176, "ast_depth": 13, "n_identifiers": 20, "vocab_size": 39, "n_whitespaces": 68, "n_words": 56, "nloc": 12, "token_counts": 123}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java#92-102", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java", "language": "Java"}, "method": {"name": "createCreatesWithInitialContributors", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentContributorsTests#createCreatesWithInitialContributors", "start_line": 92, "end_line": 102, "signature": "createCreatesWithInitialContributors()", "original_code": "@Test\n\tvoid createCreatesWithInitialContributors() {\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofInitialImport(LOCATION_1,\n\t\t\t\tthis.conversionService);\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tthis.bootstrapContext, List.of(contributor), this.conversionService,\n\t\t\t\tConfigDataEnvironmentUpdateListener.NONE);\n\t\tIterator<ConfigDataEnvironmentContributor> iterator = contributors.iterator();\n\t\tassertThat(iterator.next()).isSameAs(contributor);\n\t\tassertThat(iterator.next().getKind()).isEqualTo(Kind.ROOT);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "createCreatesWithInitialContributors", "(", ")", "{", "}", "@", "Test", "ConfigDataEnvironmentContributor", ";", "ConfigDataEnvironmentContributors", ";", ";", ";", ";", "contributor", "=", "contributors", "=", "Iterator", "iterator", "=", ".", "isSameAs", ".", "isEqualTo", "ConfigDataEnvironmentContributor", ".", "ofInitialImport", "new", "ConfigDataEnvironmentContributors", "<", "ConfigDataEnvironmentContributor", ">", "contributors", ".", "iterator", "assertThat", "(", "contributor", ")", "assertThat", "(", ")", "(", "LOCATION_1", ",", ")", "(", ",", ",", ",", ",", ")", "(", ")", "(", ")", "(", ")", "Kind", ".", "ROOT", "this", ".", "conversionService", "this", ".", "logFactory", "this", ".", "bootstrapContext", "List", ".", "of", "this", ".", "conversionService", "ConfigDataEnvironmentUpdateListener", ".", "NONE", "iterator", ".", "next", ".", "getKind", "(", "contributor", ")", "(", ")", "iterator", ".", "next", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 142, "ast_depth": 11, "n_identifiers": 22, "vocab_size": 38, "n_whitespaces": 48, "n_words": 42, "nloc": 11, "token_counts": 98}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java#104-114", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java", "language": "Java"}, "method": {"name": "withProcessedImportsWhenHasNoUnprocessedImportsReturnsSameInstance", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentContributorsTests#withProcessedImportsWhenHasNoUnprocessedImportsReturnsSameInstance", "start_line": 104, "end_line": 114, "signature": "withProcessedImportsWhenHasNoUnprocessedImportsReturnsSameInstance()", "original_code": "@Test\n\tvoid withProcessedImportsWhenHasNoUnprocessedImportsReturnsSameInstance() {\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor\n\t\t\t.ofExisting(new MockPropertySource(), this.conversionService);\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tthis.bootstrapContext, List.of(contributor), this.conversionService,\n\t\t\t\tConfigDataEnvironmentUpdateListener.NONE);\n\t\tConfigDataEnvironmentContributors withProcessedImports = contributors.withProcessedImports(this.importer,\n\t\t\t\tthis.activationContext);\n\t\tassertThat(withProcessedImports).isSameAs(contributors);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "withProcessedImportsWhenHasNoUnprocessedImportsReturnsSameInstance", "(", ")", "{", "}", "@", "Test", "ConfigDataEnvironmentContributor", ";", "ConfigDataEnvironmentContributors", ";", "ConfigDataEnvironmentContributors", ";", ";", "contributor", "=", "contributors", "=", "withProcessedImports", "=", ".", "isSameAs", "ConfigDataEnvironmentContributor", ".", "ofExisting", "new", "ConfigDataEnvironmentContributors", "contributors", ".", "withProcessedImports", "assertThat", "(", "contributors", ")", "(", ",", ")", "(", ",", ",", ",", ",", ")", "(", ",", ")", "(", "withProcessedImports", ")", "new", "MockPropertySource", "this", ".", "conversionService", "this", ".", "logFactory", "this", ".", "bootstrapContext", "List", ".", "of", "this", ".", "conversionService", "ConfigDataEnvironmentUpdateListener", ".", "NONE", "this", ".", "importer", "this", ".", "activationContext", "(", ")", "(", "contributor", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 115, "ast_depth": 10, "n_identifiers": 18, "vocab_size": 32, "n_whitespaces": 51, "n_words": 38, "nloc": 11, "token_counts": 81}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java#116-138", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java", "language": "Java"}, "method": {"name": "withProcessedImportsResolvesAndLoads", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentContributorsTests#withProcessedImportsResolvesAndLoads", "start_line": 116, "end_line": 138, "signature": "withProcessedImportsResolvesAndLoads()", "original_code": "@Test\n\tvoid withProcessedImportsResolvesAndLoads() {\n\t\tthis.importer = mock(ConfigDataImporter.class);\n\t\tList<ConfigDataLocation> locations = Collections.singletonList(LOCATION_1);\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tMap<ConfigDataResolutionResult, ConfigData> imported = new LinkedHashMap<>();\n\t\timported.put(new ConfigDataResolutionResult(LOCATION_1, new TestConfigDataResource(\"a\"), false),\n\t\t\t\tnew ConfigData(List.of(propertySource)));\n\t\tgiven(this.importer.resolveAndLoad(eq(this.activationContext), any(), any(), eq(locations)))\n\t\t\t.willReturn(imported);\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofInitialImport(LOCATION_1,\n\t\t\t\tthis.conversionService);\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tthis.bootstrapContext, List.of(contributor), this.conversionService,\n\t\t\t\tConfigDataEnvironmentUpdateListener.NONE);\n\t\tConfigDataEnvironmentContributors withProcessedImports = contributors.withProcessedImports(this.importer,\n\t\t\t\tthis.activationContext);\n\t\tIterator<ConfigDataEnvironmentContributor> iterator = withProcessedImports.iterator();\n\t\tassertThat(iterator.next().getPropertySource()).isSameAs(propertySource);\n\t\tassertThat(iterator.next().getKind()).isEqualTo(Kind.INITIAL_IMPORT);\n\t\tassertThat(iterator.next().getKind()).isEqualTo(Kind.ROOT);\n\t\tassertThat(iterator.hasNext()).isFalse();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "withProcessedImportsResolvesAndLoads", "(", ")", "{", "}", "@", "Test", ";", ";", "MockPropertySource", ";", ";", ";", ";", "ConfigDataEnvironmentContributor", ";", "ConfigDataEnvironmentContributors", ";", "ConfigDataEnvironmentContributors", ";", ";", ";", ";", ";", ";", "=", "List", "locations", "=", "propertySource", "=", "Map", "imported", "=", "imported", ".", "put", ".", "willReturn", "contributor", "=", "contributors", "=", "withProcessedImports", "=", "Iterator", "iterator", "=", ".", "isSameAs", ".", "isEqualTo", ".", "isEqualTo", ".", "isFalse", "this", ".", "importer", "mock", "<", "ConfigDataLocation", ">", "Collections", ".", "singletonList", "new", "MockPropertySource", "<", "ConfigDataResolutionResult", ",", "ConfigData", ">", "new", "(", ",", ")", "given", "(", "imported", ")", "ConfigDataEnvironmentContributor", ".", "ofInitialImport", "new", "ConfigDataEnvironmentContributors", "contributors", ".", "withProcessedImports", "<", "ConfigDataEnvironmentContributor", ">", "withProcessedImports", ".", "iterator", "assertThat", "(", "propertySource", ")", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "(", ")", "(", "LOCATION_1", ")", "(", ")", "LinkedHashMap", "(", ")", "new", "ConfigDataResolutionResult", "new", "ConfigData", "(", ")", "(", "LOCATION_1", ",", ")", "(", ",", ",", ",", ",", ")", "(", ",", ")", "(", ")", "(", ")", "(", ")", "Kind", ".", "INITIAL_IMPORT", "(", ")", "Kind", ".", "ROOT", "(", ")", "ConfigDataImporter", ".", "class", "<", ">", "(", "LOCATION_1", ",", ",", "false", ")", "(", ")", ".", "resolveAndLoad", "this", ".", "conversionService", "this", ".", "logFactory", "this", ".", "bootstrapContext", "List", ".", "of", "this", ".", "conversionService", "ConfigDataEnvironmentUpdateListener", ".", "NONE", "this", ".", "importer", "this", ".", "activationContext", ".", "getPropertySource", ".", "getKind", ".", "getKind", "iterator", ".", "hasNext", "new", "TestConfigDataResource", "List", ".", "of", "this", ".", "importer", "(", ",", ",", ",", ")", "(", "contributor", ")", "iterator", ".", "next", "(", ")", "iterator", ".", "next", "(", ")", "iterator", ".", "next", "(", ")", "(", ")", "(", ")", "(", "propertySource", ")", "eq", "any", "any", "eq", "(", ")", "(", ")", "(", ")", "\"", "a", "\"", "(", ")", "(", ")", "(", ")", "(", "locations", ")", "this", ".", "activationContext"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 387, "ast_depth": 13, "n_identifiers": 41, "vocab_size": 69, "n_whitespaces": 114, "n_words": 110, "nloc": 23, "token_counts": 265}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java#140-171", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java", "language": "Java"}, "method": {"name": "withProcessedImportsResolvesAndLoadsChainedImports", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentContributorsTests#withProcessedImportsResolvesAndLoadsChainedImports", "start_line": 140, "end_line": 171, "signature": "withProcessedImportsResolvesAndLoadsChainedImports()", "original_code": "@Test\n\tvoid withProcessedImportsResolvesAndLoadsChainedImports() {\n\t\tthis.importer = mock(ConfigDataImporter.class);\n\t\tList<ConfigDataLocation> initialLocations = Collections.singletonList(LOCATION_1);\n\t\tMockPropertySource initialPropertySource = new MockPropertySource();\n\t\tinitialPropertySource.setProperty(\"spring.config.import\", \"location2\");\n\t\tMap<ConfigDataResolutionResult, ConfigData> initialImported = new LinkedHashMap<>();\n\t\tinitialImported.put(new ConfigDataResolutionResult(LOCATION_1, new TestConfigDataResource(\"a\"), false),\n\t\t\t\tnew ConfigData(List.of(initialPropertySource)));\n\t\tgiven(this.importer.resolveAndLoad(eq(this.activationContext), any(), any(), eq(initialLocations)))\n\t\t\t.willReturn(initialImported);\n\t\tList<ConfigDataLocation> secondLocations = Collections.singletonList(LOCATION_2);\n\t\tMockPropertySource secondPropertySource = new MockPropertySource();\n\t\tMap<ConfigDataResolutionResult, ConfigData> secondImported = new LinkedHashMap<>();\n\t\tsecondImported.put(new ConfigDataResolutionResult(LOCATION_2, new TestConfigDataResource(\"b\"), false),\n\t\t\t\tnew ConfigData(List.of(secondPropertySource)));\n\t\tgiven(this.importer.resolveAndLoad(eq(this.activationContext), any(), any(), eq(secondLocations)))\n\t\t\t.willReturn(secondImported);\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofInitialImport(LOCATION_1,\n\t\t\t\tthis.conversionService);\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tthis.bootstrapContext, List.of(contributor), this.conversionService,\n\t\t\t\tConfigDataEnvironmentUpdateListener.NONE);\n\t\tConfigDataEnvironmentContributors withProcessedImports = contributors.withProcessedImports(this.importer,\n\t\t\t\tthis.activationContext);\n\t\tIterator<ConfigDataEnvironmentContributor> iterator = withProcessedImports.iterator();\n\t\tassertThat(iterator.next().getPropertySource()).isSameAs(secondPropertySource);\n\t\tassertThat(iterator.next().getPropertySource()).isSameAs(initialPropertySource);\n\t\tassertThat(iterator.next().getKind()).isEqualTo(Kind.INITIAL_IMPORT);\n\t\tassertThat(iterator.next().getKind()).isEqualTo(Kind.ROOT);\n\t\tassertThat(iterator.hasNext()).isFalse();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "withProcessedImportsResolvesAndLoadsChainedImports", "(", ")", "{", "}", "@", "Test", ";", ";", "MockPropertySource", ";", ";", ";", ";", ";", ";", "MockPropertySource", ";", ";", ";", ";", "ConfigDataEnvironmentContributor", ";", "ConfigDataEnvironmentContributors", ";", "ConfigDataEnvironmentContributors", ";", ";", ";", ";", ";", ";", ";", "=", "List", "initialLocations", "=", "initialPropertySource", "=", "initialPropertySource", ".", "setProperty", "Map", "initialImported", "=", "initialImported", ".", "put", ".", "willReturn", "List", "secondLocations", "=", "secondPropertySource", "=", "Map", "secondImported", "=", "secondImported", ".", "put", ".", "willReturn", "contributor", "=", "contributors", "=", "withProcessedImports", "=", "Iterator", "iterator", "=", ".", "isSameAs", ".", "isSameAs", ".", "isEqualTo", ".", "isEqualTo", ".", "isFalse", "this", ".", "importer", "mock", "<", "ConfigDataLocation", ">", "Collections", ".", "singletonList", "new", "MockPropertySource", "(", ",", ")", "<", "ConfigDataResolutionResult", ",", "ConfigData", ">", "new", "(", ",", ")", "given", "(", "initialImported", ")", "<", "ConfigDataLocation", ">", "Collections", ".", "singletonList", "new", "MockPropertySource", "<", "ConfigDataResolutionResult", ",", "ConfigData", ">", "new", "(", ",", ")", "given", "(", "secondImported", ")", "ConfigDataEnvironmentContributor", ".", "ofInitialImport", "new", "ConfigDataEnvironmentContributors", "contributors", ".", "withProcessedImports", "<", "ConfigDataEnvironmentContributor", ">", "withProcessedImports", ".", "iterator", "assertThat", "(", "secondPropertySource", ")", "assertThat", "(", "initialPropertySource", ")", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "(", ")", "(", "LOCATION_1", ")", "(", ")", "\"", "spring.config.import", "\"", "\"", "location2", "\"", "LinkedHashMap", "(", ")", "new", "ConfigDataResolutionResult", "new", "ConfigData", "(", ")", "(", "LOCATION_2", ")", "(", ")", "LinkedHashMap", "(", ")", "new", "ConfigDataResolutionResult", "new", "ConfigData", "(", ")", "(", "LOCATION_1", ",", ")", "(", ",", ",", ",", ",", ")", "(", ",", ")", "(", ")", "(", ")", "(", ")", "(", ")", "Kind", ".", "INITIAL_IMPORT", "(", ")", "Kind", ".", "ROOT", "(", ")", "ConfigDataImporter", ".", "class", "<", ">", "(", "LOCATION_1", ",", ",", "false", ")", "(", ")", ".", "resolveAndLoad", "<", ">", "(", "LOCATION_2", ",", ",", "false", ")", "(", ")", ".", "resolveAndLoad", "this", ".", "conversionService", "this", ".", "logFactory", "this", ".", "bootstrapContext", "List", ".", "of", "this", ".", "conversionService", "ConfigDataEnvironmentUpdateListener", ".", "NONE", "this", ".", "importer", "this", ".", "activationContext", ".", "getPropertySource", ".", "getPropertySource", ".", "getKind", ".", "getKind", "iterator", ".", "hasNext", "new", "TestConfigDataResource", "List", ".", "of", "this", ".", "importer", "(", ",", ",", ",", ")", "new", "TestConfigDataResource", "List", ".", "of", "this", ".", "importer", "(", ",", ",", ",", ")", "(", "contributor", ")", "iterator", ".", "next", "(", ")", "iterator", ".", "next", "(", ")", "iterator", ".", "next", "(", ")", "iterator", ".", "next", "(", ")", "(", ")", "(", ")", "(", "initialPropertySource", ")", "eq", "any", "any", "eq", "(", ")", "(", "secondPropertySource", ")", "eq", "any", "any", "eq", "(", ")", "(", ")", "(", ")", "(", ")", "\"", "a", "\"", "(", ")", "(", ")", "(", ")", "(", "initialLocations", ")", "\"", "b", "\"", "(", ")", "(", ")", "(", ")", "(", "secondLocations", ")", "this", ".", "activationContext", "this", ".", "activationContext"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 582, "ast_depth": 13, "n_identifiers": 46, "vocab_size": 77, "n_whitespaces": 165, "n_words": 165, "nloc": 32, "token_counts": 399}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java#173-198", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java", "language": "Java"}, "method": {"name": "withProcessedImportsProvidesLocationResolverContextWithAccessToBinder", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentContributorsTests#withProcessedImportsProvidesLocationResolverContextWithAccessToBinder", "start_line": 173, "end_line": 198, "signature": "withProcessedImportsProvidesLocationResolverContextWithAccessToBinder()", "original_code": "@Test\n\tvoid withProcessedImportsProvidesLocationResolverContextWithAccessToBinder() {\n\t\tMockPropertySource existingPropertySource = new MockPropertySource();\n\t\texistingPropertySource.setProperty(\"test\", \"springboot\");\n\t\tConfigDataEnvironmentContributor existingContributor = ConfigDataEnvironmentContributor\n\t\t\t.ofExisting(existingPropertySource, this.conversionService);\n\t\tthis.importer = mock(ConfigDataImporter.class);\n\t\tList<ConfigDataLocation> locations = Collections.singletonList(LOCATION_1);\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tMap<ConfigDataResolutionResult, ConfigData> imported = new LinkedHashMap<>();\n\t\timported.put(new ConfigDataResolutionResult(LOCATION_1, new TestConfigDataResource(\"a'\"), false),\n\t\t\t\tnew ConfigData(List.of(propertySource)));\n\t\tgiven(this.importer.resolveAndLoad(eq(this.activationContext), any(), any(), eq(locations)))\n\t\t\t.willReturn(imported);\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofInitialImport(LOCATION_1,\n\t\t\t\tthis.conversionService);\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tthis.bootstrapContext, Arrays.asList(existingContributor, contributor), this.conversionService,\n\t\t\t\tConfigDataEnvironmentUpdateListener.NONE);\n\t\tcontributors.withProcessedImports(this.importer, this.activationContext);\n\t\tthen(this.importer).should()\n\t\t\t.resolveAndLoad(any(),\n\t\t\t\t\tassertArg((context) -> assertThat(context.getBinder().bind(\"test\", String.class).get())\n\t\t\t\t\t\t.isEqualTo(\"springboot\")),\n\t\t\t\t\tany(), any());\n\t}", "doc_comment": ""}, "code_tokens": ["void", "withProcessedImportsProvidesLocationResolverContextWithAccessToBinder", "(", ")", "{", "}", "@", "Test", "MockPropertySource", ";", ";", "ConfigDataEnvironmentContributor", ";", ";", ";", "MockPropertySource", ";", ";", ";", ";", "ConfigDataEnvironmentContributor", ";", "ConfigDataEnvironmentContributors", ";", ";", ";", "existingPropertySource", "=", "existingPropertySource", ".", "setProperty", "existingContributor", "=", "=", "List", "locations", "=", "propertySource", "=", "Map", "imported", "=", "imported", ".", "put", ".", "willReturn", "contributor", "=", "contributors", "=", "contributors", ".", "withProcessedImports", ".", "resolveAndLoad", "new", "MockPropertySource", "(", ",", ")", "ConfigDataEnvironmentContributor", ".", "ofExisting", "this", ".", "importer", "mock", "<", "ConfigDataLocation", ">", "Collections", ".", "singletonList", "new", "MockPropertySource", "<", "ConfigDataResolutionResult", ",", "ConfigData", ">", "new", "(", ",", ")", "given", "(", "imported", ")", "ConfigDataEnvironmentContributor", ".", "ofInitialImport", "new", "ConfigDataEnvironmentContributors", "(", ",", ")", ".", "should", "(", ",", ",", ",", ")", "(", ")", "\"", "test", "\"", "\"", "springboot", "\"", "(", "existingPropertySource", ",", ")", "(", ")", "(", "LOCATION_1", ")", "(", ")", "LinkedHashMap", "(", ")", "new", "ConfigDataResolutionResult", "new", "ConfigData", "(", ")", "(", "LOCATION_1", ",", ")", "(", ",", ",", ",", ",", ")", "this", ".", "importer", "this", ".", "activationContext", "then", "(", ")", "any", "assertArg", "any", "any", "this", ".", "conversionService", "ConfigDataImporter", ".", "class", "<", ">", "(", "LOCATION_1", ",", ",", "false", ")", "(", ")", ".", "resolveAndLoad", "this", ".", "conversionService", "this", ".", "logFactory", "this", ".", "bootstrapContext", "Arrays", ".", "asList", "this", ".", "conversionService", "ConfigDataEnvironmentUpdateListener", ".", "NONE", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "new", "TestConfigDataResource", "List", ".", "of", "this", ".", "importer", "(", ",", ",", ",", ")", "(", "existingContributor", ",", "contributor", ")", "this", ".", "importer", "->", "(", ")", "(", "propertySource", ")", "eq", "any", "any", "eq", "(", "context", ")", ".", "isEqualTo", "\"", "a'", "\"", "(", ")", "(", ")", "(", ")", "(", "locations", ")", "assertThat", "(", ")", "this", ".", "activationContext", "(", ")", "\"", "springboot", "\"", ".", "get", ".", "bind", "(", ")", "context", ".", "getBinder", "(", ",", ")", "(", ")", "\"", "test", "\"", "String", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 404, "ast_depth": 17, "n_identifiers": 44, "vocab_size": 75, "n_whitespaces": 142, "n_words": 115, "nloc": 26, "token_counts": 280}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java#200-230", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java", "language": "Java"}, "method": {"name": "withProcessedImportsProvidesLocationResolverContextWithAccessToParent", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentContributorsTests#withProcessedImportsProvidesLocationResolverContextWithAccessToParent", "start_line": 200, "end_line": 230, "signature": "withProcessedImportsProvidesLocationResolverContextWithAccessToParent()", "original_code": "@Test\n\tvoid withProcessedImportsProvidesLocationResolverContextWithAccessToParent() {\n\t\tthis.importer = mock(ConfigDataImporter.class);\n\t\tList<ConfigDataLocation> initialLocations = Collections.singletonList(LOCATION_1);\n\t\tMockPropertySource initialPropertySource = new MockPropertySource();\n\t\tinitialPropertySource.setProperty(\"spring.config.import\", \"location2\");\n\t\tMap<ConfigDataResolutionResult, ConfigData> initialImported = new LinkedHashMap<>();\n\t\tinitialImported.put(new ConfigDataResolutionResult(LOCATION_1, new TestConfigDataResource(\"a\"), false),\n\t\t\t\tnew ConfigData(List.of(initialPropertySource)));\n\t\tgiven(this.importer.resolveAndLoad(eq(this.activationContext), any(), any(), eq(initialLocations)))\n\t\t\t.willReturn(initialImported);\n\t\tList<ConfigDataLocation> secondLocations = Collections.singletonList(LOCATION_2);\n\t\tMockPropertySource secondPropertySource = new MockPropertySource();\n\t\tMap<ConfigDataResolutionResult, ConfigData> secondImported = new LinkedHashMap<>();\n\t\tsecondImported.put(new ConfigDataResolutionResult(LOCATION_2, new TestConfigDataResource(\"b\"), false),\n\t\t\t\tnew ConfigData(List.of(secondPropertySource)));\n\t\tgiven(this.importer.resolveAndLoad(eq(this.activationContext), any(), any(), eq(secondLocations)))\n\t\t\t.willReturn(secondImported);\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofInitialImport(LOCATION_1,\n\t\t\t\tthis.conversionService);\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tthis.bootstrapContext, List.of(contributor), this.conversionService,\n\t\t\t\tConfigDataEnvironmentUpdateListener.NONE);\n\t\tArgumentCaptor<ConfigDataLocationResolverContext> locationResolverContext = ArgumentCaptor\n\t\t\t.forClass(ConfigDataLocationResolverContext.class);\n\t\tcontributors.withProcessedImports(this.importer, this.activationContext);\n\t\tthen(this.importer).should()\n\t\t\t.resolveAndLoad(any(), locationResolverContext.capture(), any(), eq(secondLocations));\n\t\tConfigDataLocationResolverContext context = locationResolverContext.getValue();\n\t\tassertThat(context.getParent()).hasToString(\"a\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "withProcessedImportsProvidesLocationResolverContextWithAccessToParent", "(", ")", "{", "}", "@", "Test", ";", ";", "MockPropertySource", ";", ";", ";", ";", ";", ";", "MockPropertySource", ";", ";", ";", ";", "ConfigDataEnvironmentContributor", ";", "ConfigDataEnvironmentContributors", ";", ";", ";", ";", "ConfigDataLocationResolverContext", ";", ";", "=", "List", "initialLocations", "=", "initialPropertySource", "=", "initialPropertySource", ".", "setProperty", "Map", "initialImported", "=", "initialImported", ".", "put", ".", "willReturn", "List", "secondLocations", "=", "secondPropertySource", "=", "Map", "secondImported", "=", "secondImported", ".", "put", ".", "willReturn", "contributor", "=", "contributors", "=", "ArgumentCaptor", "locationResolverContext", "=", "contributors", ".", "withProcessedImports", ".", "resolveAndLoad", "context", "=", ".", "hasToString", "this", ".", "importer", "mock", "<", "ConfigDataLocation", ">", "Collections", ".", "singletonList", "new", "MockPropertySource", "(", ",", ")", "<", "ConfigDataResolutionResult", ",", "ConfigData", ">", "new", "(", ",", ")", "given", "(", "initialImported", ")", "<", "ConfigDataLocation", ">", "Collections", ".", "singletonList", "new", "MockPropertySource", "<", "ConfigDataResolutionResult", ",", "ConfigData", ">", "new", "(", ",", ")", "given", "(", "secondImported", ")", "ConfigDataEnvironmentContributor", ".", "ofInitialImport", "new", "ConfigDataEnvironmentContributors", "<", "ConfigDataLocationResolverContext", ">", "ArgumentCaptor", ".", "forClass", "(", ",", ")", ".", "should", "(", ",", ",", ",", ")", "locationResolverContext", ".", "getValue", "assertThat", "(", ")", "(", ")", "(", "LOCATION_1", ")", "(", ")", "\"", "spring.config.import", "\"", "\"", "location2", "\"", "LinkedHashMap", "(", ")", "new", "ConfigDataResolutionResult", "new", "ConfigData", "(", ")", "(", "LOCATION_2", ")", "(", ")", "LinkedHashMap", "(", ")", "new", "ConfigDataResolutionResult", "new", "ConfigData", "(", ")", "(", "LOCATION_1", ",", ")", "(", ",", ",", ",", ",", ")", "(", ")", "this", ".", "importer", "this", ".", "activationContext", "then", "(", ")", "any", "locationResolverContext", ".", "capture", "any", "eq", "(", ")", "(", ")", "\"", "a", "\"", "ConfigDataImporter", ".", "class", "<", ">", "(", "LOCATION_1", ",", ",", "false", ")", "(", ")", ".", "resolveAndLoad", "<", ">", "(", "LOCATION_2", ",", ",", "false", ")", "(", ")", ".", "resolveAndLoad", "this", ".", "conversionService", "this", ".", "logFactory", "this", ".", "bootstrapContext", "List", ".", "of", "this", ".", "conversionService", "ConfigDataEnvironmentUpdateListener", ".", "NONE", "ConfigDataLocationResolverContext", ".", "class", "(", ")", "(", ")", "(", ")", "(", ")", "(", "secondLocations", ")", "context", ".", "getParent", "new", "TestConfigDataResource", "List", ".", "of", "this", ".", "importer", "(", ",", ",", ",", ")", "new", "TestConfigDataResource", "List", ".", "of", "this", ".", "importer", "(", ",", ",", ",", ")", "(", "contributor", ")", "this", ".", "importer", "(", ")", "(", ")", "(", "initialPropertySource", ")", "eq", "any", "any", "eq", "(", ")", "(", "secondPropertySource", ")", "eq", "any", "any", "eq", "\"", "a", "\"", "(", ")", "(", ")", "(", ")", "(", "initialLocations", ")", "\"", "b", "\"", "(", ")", "(", ")", "(", ")", "(", "secondLocations", ")", "this", ".", "activationContext", "this", ".", "activationContext"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 534, "ast_depth": 13, "n_identifiers": 45, "vocab_size": 76, "n_whitespaces": 166, "n_words": 155, "nloc": 31, "token_counts": 368}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java#232-256", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java", "language": "Java"}, "method": {"name": "withProcessedImportsProvidesLocationResolverContextWithAccessToBootstrapRegistry", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentContributorsTests#withProcessedImportsProvidesLocationResolverContextWithAccessToBootstrapRegistry", "start_line": 232, "end_line": 256, "signature": "withProcessedImportsProvidesLocationResolverContextWithAccessToBootstrapRegistry()", "original_code": "@Test\n\tvoid withProcessedImportsProvidesLocationResolverContextWithAccessToBootstrapRegistry() {\n\t\tMockPropertySource existingPropertySource = new MockPropertySource();\n\t\texistingPropertySource.setProperty(\"test\", \"springboot\");\n\t\tConfigDataEnvironmentContributor existingContributor = ConfigDataEnvironmentContributor\n\t\t\t.ofExisting(existingPropertySource, this.conversionService);\n\t\tthis.importer = mock(ConfigDataImporter.class);\n\t\tList<ConfigDataLocation> locations = Collections.singletonList(LOCATION_1);\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tMap<ConfigDataResolutionResult, ConfigData> imported = new LinkedHashMap<>();\n\t\timported.put(new ConfigDataResolutionResult(LOCATION_1, new TestConfigDataResource(\"a'\"), false),\n\t\t\t\tnew ConfigData(List.of(propertySource)));\n\t\tgiven(this.importer.resolveAndLoad(eq(this.activationContext), any(), any(), eq(locations)))\n\t\t\t.willReturn(imported);\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofInitialImport(LOCATION_1,\n\t\t\t\tthis.conversionService);\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tthis.bootstrapContext, Arrays.asList(existingContributor, contributor), this.conversionService,\n\t\t\t\tConfigDataEnvironmentUpdateListener.NONE);\n\t\tcontributors.withProcessedImports(this.importer, this.activationContext);\n\t\tthen(this.importer).should()\n\t\t\t.resolveAndLoad(any(),\n\t\t\t\t\tassertArg((context) -> assertThat(context.getBootstrapContext()).isSameAs(this.bootstrapContext)),\n\t\t\t\t\tany(), any());\n\t}", "doc_comment": ""}, "code_tokens": ["void", "withProcessedImportsProvidesLocationResolverContextWithAccessToBootstrapRegistry", "(", ")", "{", "}", "@", "Test", "MockPropertySource", ";", ";", "ConfigDataEnvironmentContributor", ";", ";", ";", "MockPropertySource", ";", ";", ";", ";", "ConfigDataEnvironmentContributor", ";", "ConfigDataEnvironmentContributors", ";", ";", ";", "existingPropertySource", "=", "existingPropertySource", ".", "setProperty", "existingContributor", "=", "=", "List", "locations", "=", "propertySource", "=", "Map", "imported", "=", "imported", ".", "put", ".", "willReturn", "contributor", "=", "contributors", "=", "contributors", ".", "withProcessedImports", ".", "resolveAndLoad", "new", "MockPropertySource", "(", ",", ")", "ConfigDataEnvironmentContributor", ".", "ofExisting", "this", ".", "importer", "mock", "<", "ConfigDataLocation", ">", "Collections", ".", "singletonList", "new", "MockPropertySource", "<", "ConfigDataResolutionResult", ",", "ConfigData", ">", "new", "(", ",", ")", "given", "(", "imported", ")", "ConfigDataEnvironmentContributor", ".", "ofInitialImport", "new", "ConfigDataEnvironmentContributors", "(", ",", ")", ".", "should", "(", ",", ",", ",", ")", "(", ")", "\"", "test", "\"", "\"", "springboot", "\"", "(", "existingPropertySource", ",", ")", "(", ")", "(", "LOCATION_1", ")", "(", ")", "LinkedHashMap", "(", ")", "new", "ConfigDataResolutionResult", "new", "ConfigData", "(", ")", "(", "LOCATION_1", ",", ")", "(", ",", ",", ",", ",", ")", "this", ".", "importer", "this", ".", "activationContext", "then", "(", ")", "any", "assertArg", "any", "any", "this", ".", "conversionService", "ConfigDataImporter", ".", "class", "<", ">", "(", "LOCATION_1", ",", ",", "false", ")", "(", ")", ".", "resolveAndLoad", "this", ".", "conversionService", "this", ".", "logFactory", "this", ".", "bootstrapContext", "Arrays", ".", "asList", "this", ".", "conversionService", "ConfigDataEnvironmentUpdateListener", ".", "NONE", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "new", "TestConfigDataResource", "List", ".", "of", "this", ".", "importer", "(", ",", ",", ",", ")", "(", "existingContributor", ",", "contributor", ")", "this", ".", "importer", "->", "(", ")", "(", "propertySource", ")", "eq", "any", "any", "eq", "(", "context", ")", ".", "isSameAs", "\"", "a'", "\"", "(", ")", "(", ")", "(", ")", "(", "locations", ")", "assertThat", "(", ")", "this", ".", "activationContext", "(", ")", "this", ".", "bootstrapContext", "context", ".", "getBootstrapContext", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 383, "ast_depth": 15, "n_identifiers": 42, "vocab_size": 72, "n_whitespaces": 134, "n_words": 111, "nloc": 25, "token_counts": 265}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java#258-282", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java", "language": "Java"}, "method": {"name": "withProcessedImportsProvidesLoaderContextWithAccessToBootstrapRegistry", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentContributorsTests#withProcessedImportsProvidesLoaderContextWithAccessToBootstrapRegistry", "start_line": 258, "end_line": 282, "signature": "withProcessedImportsProvidesLoaderContextWithAccessToBootstrapRegistry()", "original_code": "@Test\n\tvoid withProcessedImportsProvidesLoaderContextWithAccessToBootstrapRegistry() {\n\t\tMockPropertySource existingPropertySource = new MockPropertySource();\n\t\texistingPropertySource.setProperty(\"test\", \"springboot\");\n\t\tConfigDataEnvironmentContributor existingContributor = ConfigDataEnvironmentContributor\n\t\t\t.ofExisting(existingPropertySource, this.conversionService);\n\t\tthis.importer = mock(ConfigDataImporter.class);\n\t\tList<ConfigDataLocation> locations = Collections.singletonList(LOCATION_1);\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tMap<ConfigDataResolutionResult, ConfigData> imported = new LinkedHashMap<>();\n\t\timported.put(new ConfigDataResolutionResult(LOCATION_1, new TestConfigDataResource(\"a'\"), false),\n\t\t\t\tnew ConfigData(List.of(propertySource)));\n\t\tgiven(this.importer.resolveAndLoad(eq(this.activationContext), any(), any(), eq(locations)))\n\t\t\t.willReturn(imported);\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofInitialImport(LOCATION_1,\n\t\t\t\tthis.conversionService);\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tthis.bootstrapContext, Arrays.asList(existingContributor, contributor), this.conversionService,\n\t\t\t\tConfigDataEnvironmentUpdateListener.NONE);\n\t\tcontributors.withProcessedImports(this.importer, this.activationContext);\n\t\tthen(this.importer).should()\n\t\t\t.resolveAndLoad(any(), any(),\n\t\t\t\t\tassertArg((context) -> assertThat(context.getBootstrapContext()).isSameAs(this.bootstrapContext)),\n\t\t\t\t\tany());\n\t}", "doc_comment": ""}, "code_tokens": ["void", "withProcessedImportsProvidesLoaderContextWithAccessToBootstrapRegistry", "(", ")", "{", "}", "@", "Test", "MockPropertySource", ";", ";", "ConfigDataEnvironmentContributor", ";", ";", ";", "MockPropertySource", ";", ";", ";", ";", "ConfigDataEnvironmentContributor", ";", "ConfigDataEnvironmentContributors", ";", ";", ";", "existingPropertySource", "=", "existingPropertySource", ".", "setProperty", "existingContributor", "=", "=", "List", "locations", "=", "propertySource", "=", "Map", "imported", "=", "imported", ".", "put", ".", "willReturn", "contributor", "=", "contributors", "=", "contributors", ".", "withProcessedImports", ".", "resolveAndLoad", "new", "MockPropertySource", "(", ",", ")", "ConfigDataEnvironmentContributor", ".", "ofExisting", "this", ".", "importer", "mock", "<", "ConfigDataLocation", ">", "Collections", ".", "singletonList", "new", "MockPropertySource", "<", "ConfigDataResolutionResult", ",", "ConfigData", ">", "new", "(", ",", ")", "given", "(", "imported", ")", "ConfigDataEnvironmentContributor", ".", "ofInitialImport", "new", "ConfigDataEnvironmentContributors", "(", ",", ")", ".", "should", "(", ",", ",", ",", ")", "(", ")", "\"", "test", "\"", "\"", "springboot", "\"", "(", "existingPropertySource", ",", ")", "(", ")", "(", "LOCATION_1", ")", "(", ")", "LinkedHashMap", "(", ")", "new", "ConfigDataResolutionResult", "new", "ConfigData", "(", ")", "(", "LOCATION_1", ",", ")", "(", ",", ",", ",", ",", ")", "this", ".", "importer", "this", ".", "activationContext", "then", "(", ")", "any", "any", "assertArg", "any", "this", ".", "conversionService", "ConfigDataImporter", ".", "class", "<", ">", "(", "LOCATION_1", ",", ",", "false", ")", "(", ")", ".", "resolveAndLoad", "this", ".", "conversionService", "this", ".", "logFactory", "this", ".", "bootstrapContext", "Arrays", ".", "asList", "this", ".", "conversionService", "ConfigDataEnvironmentUpdateListener", ".", "NONE", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "new", "TestConfigDataResource", "List", ".", "of", "this", ".", "importer", "(", ",", ",", ",", ")", "(", "existingContributor", ",", "contributor", ")", "this", ".", "importer", "->", "(", ")", "(", "propertySource", ")", "eq", "any", "any", "eq", "(", "context", ")", ".", "isSameAs", "\"", "a'", "\"", "(", ")", "(", ")", "(", ")", "(", "locations", ")", "assertThat", "(", ")", "this", ".", "activationContext", "(", ")", "this", ".", "bootstrapContext", "context", ".", "getBootstrapContext", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 383, "ast_depth": 15, "n_identifiers": 42, "vocab_size": 72, "n_whitespaces": 134, "n_words": 111, "nloc": 25, "token_counts": 265}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java#284-295", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java", "language": "Java"}, "method": {"name": "getBinderProvidesBinder", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentContributorsTests#getBinderProvidesBinder", "start_line": 284, "end_line": 295, "signature": "getBinderProvidesBinder()", "original_code": "@Test\n\tvoid getBinderProvidesBinder() {\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tpropertySource.setProperty(\"test\", \"springboot\");\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofExisting(propertySource,\n\t\t\t\tthis.conversionService);\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tthis.bootstrapContext, List.of(contributor), this.conversionService,\n\t\t\t\tConfigDataEnvironmentUpdateListener.NONE);\n\t\tBinder binder = contributors.getBinder(this.activationContext);\n\t\tassertThat(binder.bind(\"test\", String.class).get()).isEqualTo(\"springboot\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "getBinderProvidesBinder", "(", ")", "{", "}", "@", "Test", "MockPropertySource", ";", ";", "ConfigDataEnvironmentContributor", ";", "ConfigDataEnvironmentContributors", ";", "Binder", ";", ";", "propertySource", "=", "propertySource", ".", "setProperty", "contributor", "=", "contributors", "=", "binder", "=", ".", "isEqualTo", "new", "MockPropertySource", "(", ",", ")", "ConfigDataEnvironmentContributor", ".", "ofExisting", "new", "ConfigDataEnvironmentContributors", "contributors", ".", "getBinder", "assertThat", "(", ")", "(", ")", "\"", "test", "\"", "\"", "springboot", "\"", "(", "propertySource", ",", ")", "(", ",", ",", ",", ",", ")", "(", ")", "(", ")", "\"", "springboot", "\"", "this", ".", "conversionService", "this", ".", "logFactory", "this", ".", "bootstrapContext", "List", ".", "of", "this", ".", "conversionService", "ConfigDataEnvironmentUpdateListener", ".", "NONE", "this", ".", "activationContext", ".", "get", "(", "contributor", ")", "binder", ".", "bind", "(", ")", "(", ",", ")", "\"", "test", "\"", "String", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 159, "ast_depth": 12, "n_identifiers": 22, "vocab_size": 42, "n_whitespaces": 57, "n_words": 48, "nloc": 12, "token_counts": 112}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java#297-311", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java", "language": "Java"}, "method": {"name": "getBinderWhenHasMultipleSourcesPicksFirst", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentContributorsTests#getBinderWhenHasMultipleSourcesPicksFirst", "start_line": 297, "end_line": 311, "signature": "getBinderWhenHasMultipleSourcesPicksFirst()", "original_code": "@Test\n\tvoid getBinderWhenHasMultipleSourcesPicksFirst() {\n\t\tMockPropertySource firstPropertySource = new MockPropertySource();\n\t\tfirstPropertySource.setProperty(\"test\", \"one\");\n\t\tMockPropertySource secondPropertySource = new MockPropertySource();\n\t\tsecondPropertySource.setProperty(\"test\", \"two\");\n\t\tConfigData configData = new ConfigData(Arrays.asList(firstPropertySource, secondPropertySource));\n\t\tConfigDataEnvironmentContributor firstContributor = createBoundImportContributor(configData, 0);\n\t\tConfigDataEnvironmentContributor secondContributor = createBoundImportContributor(configData, 1);\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tthis.bootstrapContext, Arrays.asList(firstContributor, secondContributor), this.conversionService,\n\t\t\t\tConfigDataEnvironmentUpdateListener.NONE);\n\t\tBinder binder = contributors.getBinder(this.activationContext);\n\t\tassertThat(binder.bind(\"test\", String.class).get()).isEqualTo(\"one\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "getBinderWhenHasMultipleSourcesPicksFirst", "(", ")", "{", "}", "@", "Test", "MockPropertySource", ";", ";", "MockPropertySource", ";", ";", "ConfigData", ";", "ConfigDataEnvironmentContributor", ";", "ConfigDataEnvironmentContributor", ";", "ConfigDataEnvironmentContributors", ";", "Binder", ";", ";", "firstPropertySource", "=", "firstPropertySource", ".", "setProperty", "secondPropertySource", "=", "secondPropertySource", ".", "setProperty", "configData", "=", "firstContributor", "=", "secondContributor", "=", "contributors", "=", "binder", "=", ".", "isEqualTo", "new", "MockPropertySource", "(", ",", ")", "new", "MockPropertySource", "(", ",", ")", "new", "ConfigData", "createBoundImportContributor", "createBoundImportContributor", "new", "ConfigDataEnvironmentContributors", "contributors", ".", "getBinder", "assertThat", "(", ")", "(", ")", "\"", "test", "\"", "\"", "one", "\"", "(", ")", "\"", "test", "\"", "\"", "two", "\"", "(", ")", "(", "configData", ",", "0", ")", "(", "configData", ",", "1", ")", "(", ",", ",", ",", ",", ")", "(", ")", "(", ")", "\"", "one", "\"", "Arrays", ".", "asList", "this", ".", "logFactory", "this", ".", "bootstrapContext", "Arrays", ".", "asList", "this", ".", "conversionService", "ConfigDataEnvironmentUpdateListener", ".", "NONE", "this", ".", "activationContext", ".", "get", "(", "firstPropertySource", ",", "secondPropertySource", ")", "(", "firstContributor", ",", "secondContributor", ")", "binder", ".", "bind", "(", ")", "(", ",", ")", "\"", "test", "\"", "String", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 222, "ast_depth": 12, "n_identifiers": 24, "vocab_size": 49, "n_whitespaces": 80, "n_words": 68, "nloc": 15, "token_counts": 157}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java#313-328", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java", "language": "Java"}, "method": {"name": "getBinderWhenHasInactiveIgnoresInactive", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentContributorsTests#getBinderWhenHasInactiveIgnoresInactive", "start_line": 313, "end_line": 328, "signature": "getBinderWhenHasInactiveIgnoresInactive()", "original_code": "@Test\n\tvoid getBinderWhenHasInactiveIgnoresInactive() {\n\t\tMockPropertySource firstPropertySource = new MockPropertySource();\n\t\tfirstPropertySource.setProperty(\"test\", \"one\");\n\t\tfirstPropertySource.setProperty(\"spring.config.activate.on-profile\", \"production\");\n\t\tMockPropertySource secondPropertySource = new MockPropertySource();\n\t\tsecondPropertySource.setProperty(\"test\", \"two\");\n\t\tConfigData configData = new ConfigData(Arrays.asList(firstPropertySource, secondPropertySource));\n\t\tConfigDataEnvironmentContributor firstContributor = createBoundImportContributor(configData, 0);\n\t\tConfigDataEnvironmentContributor secondContributor = createBoundImportContributor(configData, 1);\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tthis.bootstrapContext, Arrays.asList(firstContributor, secondContributor), this.conversionService,\n\t\t\t\tConfigDataEnvironmentUpdateListener.NONE);\n\t\tBinder binder = contributors.getBinder(this.activationContext);\n\t\tassertThat(binder.bind(\"test\", String.class).get()).isEqualTo(\"two\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "getBinderWhenHasInactiveIgnoresInactive", "(", ")", "{", "}", "@", "Test", "MockPropertySource", ";", ";", ";", "MockPropertySource", ";", ";", "ConfigData", ";", "ConfigDataEnvironmentContributor", ";", "ConfigDataEnvironmentContributor", ";", "ConfigDataEnvironmentContributors", ";", "Binder", ";", ";", "firstPropertySource", "=", "firstPropertySource", ".", "setProperty", "firstPropertySource", ".", "setProperty", "secondPropertySource", "=", "secondPropertySource", ".", "setProperty", "configData", "=", "firstContributor", "=", "secondContributor", "=", "contributors", "=", "binder", "=", ".", "isEqualTo", "new", "MockPropertySource", "(", ",", ")", "(", ",", ")", "new", "MockPropertySource", "(", ",", ")", "new", "ConfigData", "createBoundImportContributor", "createBoundImportContributor", "new", "ConfigDataEnvironmentContributors", "contributors", ".", "getBinder", "assertThat", "(", ")", "(", ")", "\"", "test", "\"", "\"", "one", "\"", "\"", "spring.config.activate.on-profile", "\"", "\"", "production", "\"", "(", ")", "\"", "test", "\"", "\"", "two", "\"", "(", ")", "(", "configData", ",", "0", ")", "(", "configData", ",", "1", ")", "(", ",", ",", ",", ",", ")", "(", ")", "(", ")", "\"", "two", "\"", "Arrays", ".", "asList", "this", ".", "logFactory", "this", ".", "bootstrapContext", "Arrays", ".", "asList", "this", ".", "conversionService", "ConfigDataEnvironmentUpdateListener", ".", "NONE", "this", ".", "activationContext", ".", "get", "(", "firstPropertySource", ",", "secondPropertySource", ")", "(", "firstContributor", ",", "secondContributor", ")", "binder", ".", "bind", "(", ")", "(", ",", ")", "\"", "test", "\"", "String", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 240, "ast_depth": 12, "n_identifiers": 24, "vocab_size": 51, "n_whitespaces": 84, "n_words": 76, "nloc": 16, "token_counts": 170}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java#330-342", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java", "language": "Java"}, "method": {"name": "getBinderWhenHasPlaceholderResolvesPlaceholder", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentContributorsTests#getBinderWhenHasPlaceholderResolvesPlaceholder", "start_line": 330, "end_line": 342, "signature": "getBinderWhenHasPlaceholderResolvesPlaceholder()", "original_code": "@Test\n\tvoid getBinderWhenHasPlaceholderResolvesPlaceholder() {\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tpropertySource.setProperty(\"test\", \"${other}\");\n\t\tpropertySource.setProperty(\"other\", \"springboot\");\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofExisting(propertySource,\n\t\t\t\tthis.conversionService);\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tthis.bootstrapContext, List.of(contributor), this.conversionService,\n\t\t\t\tConfigDataEnvironmentUpdateListener.NONE);\n\t\tBinder binder = contributors.getBinder(this.activationContext);\n\t\tassertThat(binder.bind(\"test\", String.class).get()).isEqualTo(\"springboot\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "getBinderWhenHasPlaceholderResolvesPlaceholder", "(", ")", "{", "}", "@", "Test", "MockPropertySource", ";", ";", ";", "ConfigDataEnvironmentContributor", ";", "ConfigDataEnvironmentContributors", ";", "Binder", ";", ";", "propertySource", "=", "propertySource", ".", "setProperty", "propertySource", ".", "setProperty", "contributor", "=", "contributors", "=", "binder", "=", ".", "isEqualTo", "new", "MockPropertySource", "(", ",", ")", "(", ",", ")", "ConfigDataEnvironmentContributor", ".", "ofExisting", "new", "ConfigDataEnvironmentContributors", "contributors", ".", "getBinder", "assertThat", "(", ")", "(", ")", "\"", "test", "\"", "\"", "${other}", "\"", "\"", "other", "\"", "\"", "springboot", "\"", "(", "propertySource", ",", ")", "(", ",", ",", ",", ",", ")", "(", ")", "(", ")", "\"", "springboot", "\"", "this", ".", "conversionService", "this", ".", "logFactory", "this", ".", "bootstrapContext", "List", ".", "of", "this", ".", "conversionService", "ConfigDataEnvironmentUpdateListener", ".", "NONE", "this", ".", "activationContext", ".", "get", "(", "contributor", ")", "binder", ".", "bind", "(", ")", "(", ",", ")", "\"", "test", "\"", "String", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 177, "ast_depth": 12, "n_identifiers": 22, "vocab_size": 44, "n_whitespaces": 61, "n_words": 52, "nloc": 13, "token_counts": 125}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java#344-360", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java", "language": "Java"}, "method": {"name": "getBinderWhenHasPlaceholderAndInactiveResolvesPlaceholderOnlyFromActive", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentContributorsTests#getBinderWhenHasPlaceholderAndInactiveResolvesPlaceholderOnlyFromActive", "start_line": 344, "end_line": 360, "signature": "getBinderWhenHasPlaceholderAndInactiveResolvesPlaceholderOnlyFromActive()", "original_code": "@Test\n\tvoid getBinderWhenHasPlaceholderAndInactiveResolvesPlaceholderOnlyFromActive() {\n\t\tMockPropertySource firstPropertySource = new MockPropertySource();\n\t\tfirstPropertySource.setProperty(\"other\", \"one\");\n\t\tfirstPropertySource.setProperty(\"spring.config.activate.on-profile\", \"production\");\n\t\tMockPropertySource secondPropertySource = new MockPropertySource();\n\t\tsecondPropertySource.setProperty(\"other\", \"two\");\n\t\tsecondPropertySource.setProperty(\"test\", \"${other}\");\n\t\tConfigData configData = new ConfigData(Arrays.asList(firstPropertySource, secondPropertySource));\n\t\tConfigDataEnvironmentContributor firstContributor = createBoundImportContributor(configData, 0);\n\t\tConfigDataEnvironmentContributor secondContributor = createBoundImportContributor(configData, 1);\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tthis.bootstrapContext, Arrays.asList(firstContributor, secondContributor), this.conversionService,\n\t\t\t\tConfigDataEnvironmentUpdateListener.NONE);\n\t\tBinder binder = contributors.getBinder(this.activationContext);\n\t\tassertThat(binder.bind(\"test\", String.class).get()).isEqualTo(\"two\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "getBinderWhenHasPlaceholderAndInactiveResolvesPlaceholderOnlyFromActive", "(", ")", "{", "}", "@", "Test", "MockPropertySource", ";", ";", ";", "MockPropertySource", ";", ";", ";", "ConfigData", ";", "ConfigDataEnvironmentContributor", ";", "ConfigDataEnvironmentContributor", ";", "ConfigDataEnvironmentContributors", ";", "Binder", ";", ";", "firstPropertySource", "=", "firstPropertySource", ".", "setProperty", "firstPropertySource", ".", "setProperty", "secondPropertySource", "=", "secondPropertySource", ".", "setProperty", "secondPropertySource", ".", "setProperty", "configData", "=", "firstContributor", "=", "secondContributor", "=", "contributors", "=", "binder", "=", ".", "isEqualTo", "new", "MockPropertySource", "(", ",", ")", "(", ",", ")", "new", "MockPropertySource", "(", ",", ")", "(", ",", ")", "new", "ConfigData", "createBoundImportContributor", "createBoundImportContributor", "new", "ConfigDataEnvironmentContributors", "contributors", ".", "getBinder", "assertThat", "(", ")", "(", ")", "\"", "other", "\"", "\"", "one", "\"", "\"", "spring.config.activate.on-profile", "\"", "\"", "production", "\"", "(", ")", "\"", "other", "\"", "\"", "two", "\"", "\"", "test", "\"", "\"", "${other}", "\"", "(", ")", "(", "configData", ",", "0", ")", "(", "configData", ",", "1", ")", "(", ",", ",", ",", ",", ")", "(", ")", "(", ")", "\"", "two", "\"", "Arrays", ".", "asList", "this", ".", "logFactory", "this", ".", "bootstrapContext", "Arrays", ".", "asList", "this", ".", "conversionService", "ConfigDataEnvironmentUpdateListener", ".", "NONE", "this", ".", "activationContext", ".", "get", "(", "firstPropertySource", ",", "secondPropertySource", ")", "(", "firstContributor", ",", "secondContributor", ")", "binder", ".", "bind", "(", ")", "(", ",", ")", "\"", "test", "\"", "String", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 258, "ast_depth": 12, "n_identifiers": 24, "vocab_size": 53, "n_whitespaces": 88, "n_words": 80, "nloc": 17, "token_counts": 183}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java#362-378", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java", "language": "Java"}, "method": {"name": "getBinderWhenFailOnBindToInactiveSourceWithFirstInactiveThrowsException", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentContributorsTests#getBinderWhenFailOnBindToInactiveSourceWithFirstInactiveThrowsException", "start_line": 362, "end_line": 378, "signature": "getBinderWhenFailOnBindToInactiveSourceWithFirstInactiveThrowsException()", "original_code": "@Test\n\tvoid getBinderWhenFailOnBindToInactiveSourceWithFirstInactiveThrowsException() {\n\t\tMockPropertySource firstPropertySource = new MockPropertySource();\n\t\tfirstPropertySource.setProperty(\"test\", \"one\");\n\t\tfirstPropertySource.setProperty(\"spring.config.activate.on-profile\", \"production\");\n\t\tMockPropertySource secondPropertySource = new MockPropertySource();\n\t\tsecondPropertySource.setProperty(\"test\", \"two\");\n\t\tConfigData configData = new ConfigData(Arrays.asList(firstPropertySource, secondPropertySource));\n\t\tConfigDataEnvironmentContributor firstContributor = createBoundImportContributor(configData, 0);\n\t\tConfigDataEnvironmentContributor secondContributor = createBoundImportContributor(configData, 1);\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tthis.bootstrapContext, Arrays.asList(firstContributor, secondContributor), this.conversionService,\n\t\t\t\tConfigDataEnvironmentUpdateListener.NONE);\n\t\tBinder binder = contributors.getBinder(this.activationContext, BinderOption.FAIL_ON_BIND_TO_INACTIVE_SOURCE);\n\t\tassertThatExceptionOfType(BindException.class).isThrownBy(() -> binder.bind(\"test\", String.class))\n\t\t\t.satisfies((ex) -> assertThat(ex.getCause()).isInstanceOf(InactiveConfigDataAccessException.class));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "getBinderWhenFailOnBindToInactiveSourceWithFirstInactiveThrowsException", "(", ")", "{", "}", "@", "Test", "MockPropertySource", ";", ";", ";", "MockPropertySource", ";", ";", "ConfigData", ";", "ConfigDataEnvironmentContributor", ";", "ConfigDataEnvironmentContributor", ";", "ConfigDataEnvironmentContributors", ";", "Binder", ";", ";", "firstPropertySource", "=", "firstPropertySource", ".", "setProperty", "firstPropertySource", ".", "setProperty", "secondPropertySource", "=", "secondPropertySource", ".", "setProperty", "configData", "=", "firstContributor", "=", "secondContributor", "=", "contributors", "=", "binder", "=", ".", "satisfies", "new", "MockPropertySource", "(", ",", ")", "(", ",", ")", "new", "MockPropertySource", "(", ",", ")", "new", "ConfigData", "createBoundImportContributor", "createBoundImportContributor", "new", "ConfigDataEnvironmentContributors", "contributors", ".", "getBinder", ".", "isThrownBy", "(", ")", "(", ")", "\"", "test", "\"", "\"", "one", "\"", "\"", "spring.config.activate.on-profile", "\"", "\"", "production", "\"", "(", ")", "\"", "test", "\"", "\"", "two", "\"", "(", ")", "(", "configData", ",", "0", ")", "(", "configData", ",", "1", ")", "(", ",", ",", ",", ",", ")", "(", ",", ")", "assertThatExceptionOfType", "(", ")", "->", "Arrays", ".", "asList", "this", ".", "logFactory", "this", ".", "bootstrapContext", "Arrays", ".", "asList", "this", ".", "conversionService", "ConfigDataEnvironmentUpdateListener", ".", "NONE", "this", ".", "activationContext", "BinderOption", ".", "FAIL_ON_BIND_TO_INACTIVE_SOURCE", "(", ")", "->", "(", "ex", ")", ".", "isInstanceOf", "(", "firstPropertySource", ",", "secondPropertySource", ")", "(", "firstContributor", ",", "secondContributor", ")", "BindException", ".", "class", "(", ")", "binder", ".", "bind", "assertThat", "(", ")", "(", ",", ")", "(", ")", "InactiveConfigDataAccessException", ".", "class", "\"", "test", "\"", "String", ".", "class", "ex", ".", "getCause", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 278, "ast_depth": 13, "n_identifiers": 30, "vocab_size": 60, "n_whitespaces": 93, "n_words": 86, "nloc": 17, "token_counts": 196}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java#380-396", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java", "language": "Java"}, "method": {"name": "getBinderWhenFailOnBindToInactiveSourceWithLastInactiveThrowsException", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentContributorsTests#getBinderWhenFailOnBindToInactiveSourceWithLastInactiveThrowsException", "start_line": 380, "end_line": 396, "signature": "getBinderWhenFailOnBindToInactiveSourceWithLastInactiveThrowsException()", "original_code": "@Test\n\tvoid getBinderWhenFailOnBindToInactiveSourceWithLastInactiveThrowsException() {\n\t\tMockPropertySource firstPropertySource = new MockPropertySource();\n\t\tfirstPropertySource.setProperty(\"test\", \"one\");\n\t\tMockPropertySource secondPropertySource = new MockPropertySource();\n\t\tsecondPropertySource.setProperty(\"spring.config.activate.on-profile\", \"production\");\n\t\tsecondPropertySource.setProperty(\"test\", \"two\");\n\t\tConfigData configData = new ConfigData(Arrays.asList(firstPropertySource, secondPropertySource));\n\t\tConfigDataEnvironmentContributor firstContributor = createBoundImportContributor(configData, 0);\n\t\tConfigDataEnvironmentContributor secondContributor = createBoundImportContributor(configData, 1);\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tthis.bootstrapContext, Arrays.asList(firstContributor, secondContributor), this.conversionService,\n\t\t\t\tConfigDataEnvironmentUpdateListener.NONE);\n\t\tBinder binder = contributors.getBinder(this.activationContext, BinderOption.FAIL_ON_BIND_TO_INACTIVE_SOURCE);\n\t\tassertThatExceptionOfType(BindException.class).isThrownBy(() -> binder.bind(\"test\", String.class))\n\t\t\t.satisfies((ex) -> assertThat(ex.getCause()).isInstanceOf(InactiveConfigDataAccessException.class));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "getBinderWhenFailOnBindToInactiveSourceWithLastInactiveThrowsException", "(", ")", "{", "}", "@", "Test", "MockPropertySource", ";", ";", "MockPropertySource", ";", ";", ";", "ConfigData", ";", "ConfigDataEnvironmentContributor", ";", "ConfigDataEnvironmentContributor", ";", "ConfigDataEnvironmentContributors", ";", "Binder", ";", ";", "firstPropertySource", "=", "firstPropertySource", ".", "setProperty", "secondPropertySource", "=", "secondPropertySource", ".", "setProperty", "secondPropertySource", ".", "setProperty", "configData", "=", "firstContributor", "=", "secondContributor", "=", "contributors", "=", "binder", "=", ".", "satisfies", "new", "MockPropertySource", "(", ",", ")", "new", "MockPropertySource", "(", ",", ")", "(", ",", ")", "new", "ConfigData", "createBoundImportContributor", "createBoundImportContributor", "new", "ConfigDataEnvironmentContributors", "contributors", ".", "getBinder", ".", "isThrownBy", "(", ")", "(", ")", "\"", "test", "\"", "\"", "one", "\"", "(", ")", "\"", "spring.config.activate.on-profile", "\"", "\"", "production", "\"", "\"", "test", "\"", "\"", "two", "\"", "(", ")", "(", "configData", ",", "0", ")", "(", "configData", ",", "1", ")", "(", ",", ",", ",", ",", ")", "(", ",", ")", "assertThatExceptionOfType", "(", ")", "->", "Arrays", ".", "asList", "this", ".", "logFactory", "this", ".", "bootstrapContext", "Arrays", ".", "asList", "this", ".", "conversionService", "ConfigDataEnvironmentUpdateListener", ".", "NONE", "this", ".", "activationContext", "BinderOption", ".", "FAIL_ON_BIND_TO_INACTIVE_SOURCE", "(", ")", "->", "(", "ex", ")", ".", "isInstanceOf", "(", "firstPropertySource", ",", "secondPropertySource", ")", "(", "firstContributor", ",", "secondContributor", ")", "BindException", ".", "class", "(", ")", "binder", ".", "bind", "assertThat", "(", ")", "(", ",", ")", "(", ")", "InactiveConfigDataAccessException", ".", "class", "\"", "test", "\"", "String", ".", "class", "ex", ".", "getCause", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 278, "ast_depth": 13, "n_identifiers": 30, "vocab_size": 60, "n_whitespaces": 93, "n_words": 86, "nloc": 17, "token_counts": 196}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java#398-415", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java", "language": "Java"}, "method": {"name": "getBinderWhenFailOnBindToInactiveSourceWithResolveToInactiveThrowsException", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentContributorsTests#getBinderWhenFailOnBindToInactiveSourceWithResolveToInactiveThrowsException", "start_line": 398, "end_line": 415, "signature": "getBinderWhenFailOnBindToInactiveSourceWithResolveToInactiveThrowsException()", "original_code": "@Test\n\tvoid getBinderWhenFailOnBindToInactiveSourceWithResolveToInactiveThrowsException() {\n\t\tMockPropertySource firstPropertySource = new MockPropertySource();\n\t\tfirstPropertySource.setProperty(\"other\", \"one\");\n\t\tfirstPropertySource.setProperty(\"spring.config.activate.on-profile\", \"production\");\n\t\tMockPropertySource secondPropertySource = new MockPropertySource();\n\t\tsecondPropertySource.setProperty(\"test\", \"${other}\");\n\t\tsecondPropertySource.setProperty(\"other\", \"one\");\n\t\tConfigData configData = new ConfigData(Arrays.asList(firstPropertySource, secondPropertySource));\n\t\tConfigDataEnvironmentContributor firstContributor = createBoundImportContributor(configData, 0);\n\t\tConfigDataEnvironmentContributor secondContributor = createBoundImportContributor(configData, 1);\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tthis.bootstrapContext, Arrays.asList(firstContributor, secondContributor), this.conversionService,\n\t\t\t\tConfigDataEnvironmentUpdateListener.NONE);\n\t\tBinder binder = contributors.getBinder(this.activationContext, BinderOption.FAIL_ON_BIND_TO_INACTIVE_SOURCE);\n\t\tassertThatExceptionOfType(BindException.class).isThrownBy(() -> binder.bind(\"test\", String.class))\n\t\t\t.satisfies((ex) -> assertThat(ex.getCause()).isInstanceOf(InactiveConfigDataAccessException.class));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "getBinderWhenFailOnBindToInactiveSourceWithResolveToInactiveThrowsException", "(", ")", "{", "}", "@", "Test", "MockPropertySource", ";", ";", ";", "MockPropertySource", ";", ";", ";", "ConfigData", ";", "ConfigDataEnvironmentContributor", ";", "ConfigDataEnvironmentContributor", ";", "ConfigDataEnvironmentContributors", ";", "Binder", ";", ";", "firstPropertySource", "=", "firstPropertySource", ".", "setProperty", "firstPropertySource", ".", "setProperty", "secondPropertySource", "=", "secondPropertySource", ".", "setProperty", "secondPropertySource", ".", "setProperty", "configData", "=", "firstContributor", "=", "secondContributor", "=", "contributors", "=", "binder", "=", ".", "satisfies", "new", "MockPropertySource", "(", ",", ")", "(", ",", ")", "new", "MockPropertySource", "(", ",", ")", "(", ",", ")", "new", "ConfigData", "createBoundImportContributor", "createBoundImportContributor", "new", "ConfigDataEnvironmentContributors", "contributors", ".", "getBinder", ".", "isThrownBy", "(", ")", "(", ")", "\"", "other", "\"", "\"", "one", "\"", "\"", "spring.config.activate.on-profile", "\"", "\"", "production", "\"", "(", ")", "\"", "test", "\"", "\"", "${other}", "\"", "\"", "other", "\"", "\"", "one", "\"", "(", ")", "(", "configData", ",", "0", ")", "(", "configData", ",", "1", ")", "(", ",", ",", ",", ",", ")", "(", ",", ")", "assertThatExceptionOfType", "(", ")", "->", "Arrays", ".", "asList", "this", ".", "logFactory", "this", ".", "bootstrapContext", "Arrays", ".", "asList", "this", ".", "conversionService", "ConfigDataEnvironmentUpdateListener", ".", "NONE", "this", ".", "activationContext", "BinderOption", ".", "FAIL_ON_BIND_TO_INACTIVE_SOURCE", "(", ")", "->", "(", "ex", ")", ".", "isInstanceOf", "(", "firstPropertySource", ",", "secondPropertySource", ")", "(", "firstContributor", ",", "secondContributor", ")", "BindException", ".", "class", "(", ")", "binder", ".", "bind", "assertThat", "(", ")", "(", ",", ")", "(", ")", "InactiveConfigDataAccessException", ".", "class", "\"", "test", "\"", "String", ".", "class", "ex", ".", "getCause", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 296, "ast_depth": 13, "n_identifiers": 30, "vocab_size": 61, "n_whitespaces": 97, "n_words": 90, "nloc": 18, "token_counts": 209}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java#417-423", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java", "language": "Java"}, "method": {"name": "createBoundImportContributor", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentContributorsTests#createBoundImportContributor", "start_line": 417, "end_line": 423, "signature": "createBoundImportContributor(ConfigData configData,\n\t\t\tint propertySourceIndex)", "original_code": "private ConfigDataEnvironmentContributor createBoundImportContributor(ConfigData configData,\n\t\t\tint propertySourceIndex) {\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofUnboundImport(null, null,\n\t\t\t\tfalse, configData, propertySourceIndex, this.conversionService,\n\t\t\t\tConfigDataEnvironmentUpdateListener.NONE);\n\t\treturn contributor.withBoundProperties(Collections.singleton(contributor), null);\n\t}", "doc_comment": ""}, "code_tokens": ["ConfigDataEnvironmentContributor", "createBoundImportContributor", "private", "(", ",", ")", "{", "}", "ConfigData", "configData", "propertySourceIndex", "ConfigDataEnvironmentContributor", ";", "return", ";", "int", "contributor", "=", "contributor", ".", "withBoundProperties", "ConfigDataEnvironmentContributor", ".", "ofUnboundImport", "(", ",", "null", ")", "(", "null", ",", "null", ",", "false", ",", "configData", ",", "propertySourceIndex", ",", ",", ")", "Collections", ".", "singleton", "this", ".", "conversionService", "ConfigDataEnvironmentUpdateListener", ".", "NONE", "(", "contributor", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 72, "ast_depth": 9, "n_identifiers": 12, "vocab_size": 27, "n_whitespaces": 36, "n_words": 27, "nloc": 7, "token_counts": 53}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java#433-436", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java", "language": "Java"}, "method": {"name": "toString", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentContributorsTests#toString", "start_line": 433, "end_line": 436, "signature": "toString()", "original_code": "@Override\n\t\tpublic String toString() {\n\t\t\treturn this.value;\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "toString", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "this", ".", "value"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessorBootstrapContextIntegrationTests.java#42-46", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessorBootstrapContextIntegrationTests.java", "language": "Java"}, "method": {"name": "setup", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentPostProcessorBootstrapContextIntegrationTests#setup", "start_line": 42, "end_line": 46, "signature": "setup()", "original_code": "@BeforeEach\n\tvoid setup() {\n\t\tthis.application = new SpringApplication(Config.class);\n\t\tthis.application.setWebApplicationType(WebApplicationType.NONE);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "setup", "(", ")", "{", "}", "@", "BeforeEach", ";", ";", "=", ".", "setWebApplicationType", "this", ".", "application", "new", "SpringApplication", "this", ".", "application", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "Config", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 48, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 20, "n_whitespaces": 15, "n_words": 14, "nloc": 5, "token_counts": 31}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessorBootstrapContextIntegrationTests.java#48-74", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessorBootstrapContextIntegrationTests.java", "language": "Java"}, "method": {"name": "bootstrapsApplicationContext", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentPostProcessorBootstrapContextIntegrationTests#bootstrapsApplicationContext", "start_line": 48, "end_line": 74, "signature": "bootstrapsApplicationContext()", "original_code": "@Test\n\t@WithResource(name = \"imported.properties\", content = \"\"\"\n\t\t\tspring.config.import=testbootstrap:test\n\t\t\tspring.profiles.active=test\n\t\t\tmyprop=igotbound\n\t\t\t#---\n\t\t\tspring.config.activate.on-profile=test\n\t\t\tmyprofileprop=igotprofilebound\n\n\t\t\t\"\"\")\n\t@WithResource(name = \"META-INF/spring.factories\", content = \"\"\"\n\t\t\torg.springframework.boot.context.config.ConfigDataLoader=\\\n\t\t\torg.springframework.boot.context.config.TestConfigDataBootstrap.Loader\n\t\t\torg.springframework.boot.context.config.ConfigDataLocationResolver=\\\n\t\t\torg.springframework.boot.context.config.TestConfigDataBootstrap.LocationResolver\n\t\t\t\"\"\")\n\tvoid bootstrapsApplicationContext() {\n\t\ttry (ConfigurableApplicationContext context = this.application\n\t\t\t.run(\"--spring.config.import=classpath:imported.properties\")) {\n\t\t\tLoaderHelper bean = context.getBean(TestConfigDataBootstrap.LoaderHelper.class);\n\t\t\tassertThat(bean).isNotNull();\n\t\t\tassertThat(bean.getBound()).isEqualTo(\"igotbound\");\n\t\t\tassertThat(bean.getProfileBound()).isEqualTo(\"igotprofilebound\");\n\t\t\tassertThat(bean.getLocation().getResolverHelper().getLocation())\n\t\t\t\t.isEqualTo(ConfigDataLocation.of(\"testbootstrap:test\"));\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "bootstrapsApplicationContext", "(", ")", "{", "}", "@", "Test", "@", "WithResource", "@", "WithResource", "try", "(", ",", ")", "(", ",", ")", "(", ")", "{", "}", "name", "=", "content", "=", "name", "=", "content", "=", "ConfigurableApplicationContext", "context", "=", "LoaderHelper", ";", ";", ";", ";", ";", "\"", "imported.properties", "\"", "\"\"\"", "\n\t\t\tspring.config.import=testbootstrap:test\n\t\t\tspring.profiles.active=test\n\t\t\tmyprop=igotbound\n\t\t\t#---\n\t\t\tspring.config.activate.on-profile=test\n\t\t\tmyprofileprop=igotprofilebound\n\n\t\t\t", "\"\"\"", "\"", "META-INF/spring.factories", "\"", "\"\"\"", "\n\t\t\torg.springframework.boot.context.config.ConfigDataLoader=", "\t\t\torg.springframework.boot.context.config.TestConfigDataBootstrap.Loader\n\t\t\torg.springframework.boot.context.config.ConfigDataLocationResolver=", "\t\t\torg.springframework.boot.context.config.TestConfigDataBootstrap.LocationResolver\n\t\t\t", "\"\"\"", ".", "run", "bean", "=", ".", "isNotNull", ".", "isEqualTo", ".", "isEqualTo", ".", "isEqualTo", "this", ".", "application", "(", ")", "context", ".", "getBean", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "\"", "--spring.config.import=classpath:imported.properties", "\"", "(", ")", "(", "bean", ")", "(", ")", "\"", "igotbound", "\"", "(", ")", "\"", "igotprofilebound", "\"", "(", ")", "ConfigDataLocation", ".", "of", ".", "class", "bean", ".", "getBound", "bean", ".", "getProfileBound", ".", "getLocation", "(", ")", "TestConfigDataBootstrap", ".", "LoaderHelper", "(", ")", "(", ")", ".", "getResolverHelper", "(", ")", "\"", "testbootstrap:test", "\"", "bean", ".", "getLocation", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 209, "ast_depth": 14, "n_identifiers": 19, "vocab_size": 47, "n_whitespaces": 112, "n_words": 102, "nloc": 26, "token_counts": 142}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessorTests.java#58-68", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessorTests.java", "language": "Java"}, "method": {"name": "postProcessEnvironmentWhenNoLoaderCreatesDefaultLoaderInstance", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentPostProcessorTests#postProcessEnvironmentWhenNoLoaderCreatesDefaultLoaderInstance", "start_line": 58, "end_line": 68, "signature": "postProcessEnvironmentWhenNoLoaderCreatesDefaultLoaderInstance()", "original_code": "@Test\n\tvoid postProcessEnvironmentWhenNoLoaderCreatesDefaultLoaderInstance() {\n\t\tsetupMocksAndSpies();\n\t\twillReturn(this.configDataEnvironment).given(this.postProcessor).getConfigDataEnvironment(any(), any(), any());\n\t\tthis.postProcessor.postProcessEnvironment(this.environment, this.application);\n\t\tthen(this.postProcessor).should()\n\t\t\t.getConfigDataEnvironment(any(),\n\t\t\t\t\tassertArg((resourceLoader) -> assertThat(resourceLoader).isInstanceOf(DefaultResourceLoader.class)),\n\t\t\t\t\tany());\n\t\tthen(this.configDataEnvironment).should().processAndApply();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "postProcessEnvironmentWhenNoLoaderCreatesDefaultLoaderInstance", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ";", ";", "setupMocksAndSpies", ".", "getConfigDataEnvironment", ".", "postProcessEnvironment", ".", "getConfigDataEnvironment", ".", "processAndApply", "(", ")", ".", "given", "(", ",", ",", ")", "this", ".", "postProcessor", "(", ",", ")", ".", "should", "(", ",", ",", ")", ".", "should", "(", ")", "willReturn", "(", ")", "any", "any", "any", "this", ".", "environment", "this", ".", "application", "then", "(", ")", "any", "assertArg", "any", "then", "(", ")", "(", ")", "this", ".", "postProcessor", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "this", ".", "configDataEnvironment", "this", ".", "postProcessor", "->", "this", ".", "configDataEnvironment", "(", "resourceLoader", ")", ".", "isInstanceOf", "assertThat", "(", ")", "(", "resourceLoader", ")", "DefaultResourceLoader", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 171, "ast_depth": 13, "n_identifiers": 19, "vocab_size": 32, "n_whitespaces": 42, "n_words": 40, "nloc": 11, "token_counts": 112}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessorTests.java#70-81", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessorTests.java", "language": "Java"}, "method": {"name": "postProcessEnvironmentWhenCustomLoaderUsesSpecifiedLoaderInstance", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentPostProcessorTests#postProcessEnvironmentWhenCustomLoaderUsesSpecifiedLoaderInstance", "start_line": 70, "end_line": 81, "signature": "postProcessEnvironmentWhenCustomLoaderUsesSpecifiedLoaderInstance()", "original_code": "@Test\n\tvoid postProcessEnvironmentWhenCustomLoaderUsesSpecifiedLoaderInstance() {\n\t\tsetupMocksAndSpies();\n\t\tResourceLoader resourceLoader = mock(ResourceLoader.class);\n\t\tthis.application.setResourceLoader(resourceLoader);\n\t\twillReturn(this.configDataEnvironment).given(this.postProcessor).getConfigDataEnvironment(any(), any(), any());\n\t\tthis.postProcessor.postProcessEnvironment(this.environment, this.application);\n\t\tthen(this.postProcessor).should()\n\t\t\t.getConfigDataEnvironment(any(),\n\t\t\t\t\tassertArg((resourceLoaderB) -> assertThat(resourceLoaderB).isSameAs(resourceLoader)), any());\n\t\tthen(this.configDataEnvironment).should().processAndApply();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "postProcessEnvironmentWhenCustomLoaderUsesSpecifiedLoaderInstance", "(", ")", "{", "}", "@", "Test", ";", "ResourceLoader", ";", ";", ";", ";", ";", ";", "setupMocksAndSpies", "resourceLoader", "=", ".", "setResourceLoader", ".", "getConfigDataEnvironment", ".", "postProcessEnvironment", ".", "getConfigDataEnvironment", ".", "processAndApply", "(", ")", "mock", "this", ".", "application", "(", "resourceLoader", ")", ".", "given", "(", ",", ",", ")", "this", ".", "postProcessor", "(", ",", ")", ".", "should", "(", ",", ",", ")", ".", "should", "(", ")", "(", ")", "willReturn", "(", ")", "any", "any", "any", "this", ".", "environment", "this", ".", "application", "then", "(", ")", "any", "assertArg", "any", "then", "(", ")", "ResourceLoader", ".", "class", "(", ")", "this", ".", "postProcessor", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "this", ".", "configDataEnvironment", "this", ".", "postProcessor", "->", "this", ".", "configDataEnvironment", "(", "resourceLoaderB", ")", ".", "isSameAs", "assertThat", "(", "resourceLoader", ")", "(", "resourceLoaderB", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 196, "ast_depth": 13, "n_identifiers": 22, "vocab_size": 36, "n_whitespaces": 46, "n_words": 48, "nloc": 12, "token_counts": 129}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessorTests.java#83-93", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessorTests.java", "language": "Java"}, "method": {"name": "postProcessEnvironmentWhenHasAdditionalProfilesOnSpringApplicationUsesAdditionalProfiles", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentPostProcessorTests#postProcessEnvironmentWhenHasAdditionalProfilesOnSpringApplicationUsesAdditionalProfiles", "start_line": 83, "end_line": 93, "signature": "postProcessEnvironmentWhenHasAdditionalProfilesOnSpringApplicationUsesAdditionalProfiles()", "original_code": "@Test\n\tvoid postProcessEnvironmentWhenHasAdditionalProfilesOnSpringApplicationUsesAdditionalProfiles() {\n\t\tsetupMocksAndSpies();\n\t\tthis.application.setAdditionalProfiles(\"dev\");\n\t\twillReturn(this.configDataEnvironment).given(this.postProcessor).getConfigDataEnvironment(any(), any(), any());\n\t\tthis.postProcessor.postProcessEnvironment(this.environment, this.application);\n\t\tthen(this.postProcessor).should()\n\t\t\t.getConfigDataEnvironment(any(), any(),\n\t\t\t\t\tassertArg((additionalProperties) -> assertThat(additionalProperties).containsExactly(\"dev\")));\n\t\tthen(this.configDataEnvironment).should().processAndApply();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "postProcessEnvironmentWhenHasAdditionalProfilesOnSpringApplicationUsesAdditionalProfiles", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ";", ";", ";", "setupMocksAndSpies", ".", "setAdditionalProfiles", ".", "getConfigDataEnvironment", ".", "postProcessEnvironment", ".", "getConfigDataEnvironment", ".", "processAndApply", "(", ")", "this", ".", "application", "(", ")", ".", "given", "(", ",", ",", ")", "this", ".", "postProcessor", "(", ",", ")", ".", "should", "(", ",", ",", ")", ".", "should", "(", ")", "\"", "dev", "\"", "willReturn", "(", ")", "any", "any", "any", "this", ".", "environment", "this", ".", "application", "then", "(", ")", "any", "any", "assertArg", "then", "(", ")", "(", ")", "this", ".", "postProcessor", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "this", ".", "configDataEnvironment", "this", ".", "postProcessor", "->", "this", ".", "configDataEnvironment", "(", "additionalProperties", ")", ".", "containsExactly", "assertThat", "(", ")", "(", "additionalProperties", ")", "\"", "dev", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 187, "ast_depth": 13, "n_identifiers": 20, "vocab_size": 33, "n_whitespaces": 40, "n_words": 43, "nloc": 11, "token_counts": 123}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessorTests.java#95-103", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessorTests.java", "language": "Java"}, "method": {"name": "postProcessEnvironmentWhenNoActiveProfiles", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentPostProcessorTests#postProcessEnvironmentWhenNoActiveProfiles", "start_line": 95, "end_line": 103, "signature": "postProcessEnvironmentWhenNoActiveProfiles()", "original_code": "@Test\n\tvoid postProcessEnvironmentWhenNoActiveProfiles() {\n\t\tsetupMocksAndSpies();\n\t\twillReturn(this.configDataEnvironment).given(this.postProcessor).getConfigDataEnvironment(any(), any(), any());\n\t\tthis.postProcessor.postProcessEnvironment(this.environment, this.application);\n\t\tthen(this.postProcessor).should().getConfigDataEnvironment(any(), any(ResourceLoader.class), any());\n\t\tthen(this.configDataEnvironment).should().processAndApply();\n\t\tassertThat(this.environment.getActiveProfiles()).isEmpty();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "postProcessEnvironmentWhenNoActiveProfiles", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ";", ";", ";", "setupMocksAndSpies", ".", "getConfigDataEnvironment", ".", "postProcessEnvironment", ".", "getConfigDataEnvironment", ".", "processAndApply", ".", "isEmpty", "(", ")", ".", "given", "(", ",", ",", ")", "this", ".", "postProcessor", "(", ",", ")", ".", "should", "(", ",", ",", ")", ".", "should", "(", ")", "assertThat", "(", ")", "willReturn", "(", ")", "any", "any", "any", "this", ".", "environment", "this", ".", "application", "then", "(", ")", "any", "any", "any", "then", "(", ")", "(", ")", "(", ")", "this", ".", "postProcessor", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", ".", "getActiveProfiles", "this", ".", "configDataEnvironment", "this", ".", "postProcessor", "ResourceLoader", ".", "class", "this", ".", "configDataEnvironment", "this", ".", "environment", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 176, "ast_depth": 10, "n_identifiers": 18, "vocab_size": 30, "n_whitespaces": 29, "n_words": 41, "nloc": 9, "token_counts": 115}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessorTests.java#105-119", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessorTests.java", "language": "Java"}, "method": {"name": "applyToAppliesPostProcessing", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentPostProcessorTests#applyToAppliesPostProcessing", "start_line": 105, "end_line": 119, "signature": "applyToAppliesPostProcessing()", "original_code": "@Test\n\t@WithResource(name = \"application.properties\", content = \"property=value\")\n\t@WithResource(name = \"application-dev.properties\", content = \"property=dev-value\")\n\tvoid applyToAppliesPostProcessing() {\n\t\tint before = this.environment.getPropertySources().size();\n\t\tTestConfigDataEnvironmentUpdateListener listener = new TestConfigDataEnvironmentUpdateListener();\n\t\tConfigDataEnvironmentPostProcessor.applyTo(this.environment, null, null, Collections.singleton(\"dev\"),\n\t\t\t\tlistener);\n\t\tassertThat(this.environment.getPropertySources()).hasSizeGreaterThan(before);\n\t\tassertThat(this.environment.getActiveProfiles()).containsExactly(\"dev\");\n\t\tassertThat(listener.getAddedPropertySources()).isNotEmpty();\n\t\tassertThat(listener.getProfiles().getActive()).containsExactly(\"dev\");\n\t\tassertThat(listener.getAddedPropertySources().stream().anyMatch((added) -> hasDevProfile(added.getResource())))\n\t\t\t.isTrue();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "applyToAppliesPostProcessing", "(", ")", "{", "}", "@", "Test", "@", "WithResource", "@", "WithResource", ";", "TestConfigDataEnvironmentUpdateListener", ";", ";", ";", ";", ";", ";", ";", "(", ",", ")", "(", ",", ")", "int", "before", "=", "listener", "=", "ConfigDataEnvironmentPostProcessor", ".", "applyTo", ".", "hasSizeGreaterThan", ".", "containsExactly", ".", "isNotEmpty", ".", "containsExactly", ".", "isTrue", "name", "=", "content", "=", "name", "=", "content", "=", ".", "size", "new", "TestConfigDataEnvironmentUpdateListener", "(", ",", "null", ",", "null", ",", ",", "listener", ")", "assertThat", "(", "before", ")", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "\"", "application.properties", "\"", "\"", "property=value", "\"", "\"", "application-dev.properties", "\"", "\"", "property=dev-value", "\"", ".", "getPropertySources", "(", ")", "(", ")", "this", ".", "environment", "Collections", ".", "singleton", "(", ")", "(", ")", "\"", "dev", "\"", "(", ")", "(", ")", "\"", "dev", "\"", "(", ")", "this", ".", "environment", "(", ")", "(", ")", ".", "getPropertySources", ".", "getActiveProfiles", "listener", ".", "getAddedPropertySources", ".", "getActive", ".", "anyMatch", "\"", "dev", "\"", "this", ".", "environment", "(", ")", "this", ".", "environment", "(", ")", "(", ")", "listener", ".", "getProfiles", "(", ")", ".", "stream", "(", ")", "(", ")", "listener", ".", "getAddedPropertySources", "(", ")", "->", "(", ")", "(", "added", ")", "hasDevProfile", "(", ")", "added", ".", "getResource", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 273, "ast_depth": 15, "n_identifiers": 28, "vocab_size": 50, "n_whitespaces": 65, "n_words": 71, "nloc": 15, "token_counts": 185}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessorTests.java#121-143", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessorTests.java", "language": "Java"}, "method": {"name": "applyToCanOverrideConfigDataOptions", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentPostProcessorTests#applyToCanOverrideConfigDataOptions", "start_line": 121, "end_line": 143, "signature": "applyToCanOverrideConfigDataOptions()", "original_code": "@Test\n\t@WithResource(name = \"application.properties\", content = \"\"\"\n\t\t\tspring.profiles.active=dev\n\t\t\tproperty=value\n\t\t\t#---\n\t\t\tspring.config.activate.on-profile=dev\n\t\t\tproperty=dev-value1\n\t\t\t\"\"\")\n\t@WithResource(name = \"application-dev.properties\", content = \"property=dev-value2\")\n\tvoid applyToCanOverrideConfigDataOptions() {\n\t\tConfigDataEnvironmentUpdateListener listener = new ConfigDataEnvironmentUpdateListener() {\n\n\t\t\t@Override\n\t\t\tpublic Options onConfigDataOptions(ConfigData configData, PropertySource<?> propertySource,\n\t\t\t\t\tOptions options) {\n\t\t\t\treturn options.with(ConfigData.Option.IGNORE_PROFILES);\n\t\t\t}\n\n\t\t};\n\t\tConfigDataEnvironmentPostProcessor.applyTo(this.environment, null, null, Collections.emptyList(), listener);\n\t\tassertThat(this.environment.getProperty(\"property\")).isEqualTo(\"value\");\n\t\tassertThat(this.environment.getActiveProfiles()).isEmpty();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "applyToCanOverrideConfigDataOptions", "(", ")", "{", "}", "@", "Test", "@", "WithResource", "@", "WithResource", "ConfigDataEnvironmentUpdateListener", ";", ";", ";", ";", "(", ",", ")", "(", ",", ")", "listener", "=", "ConfigDataEnvironmentPostProcessor", ".", "applyTo", ".", "isEqualTo", ".", "isEmpty", "name", "=", "content", "=", "name", "=", "content", "=", "new", "ConfigDataEnvironmentUpdateListener", "(", ",", "null", ",", "null", ",", ",", "listener", ")", "assertThat", "(", ")", "assertThat", "(", ")", "\"", "application.properties", "\"", "\"\"\"", "\n\t\t\tspring.profiles.active=dev\n\t\t\tproperty=value\n\t\t\t#---\n\t\t\tspring.config.activate.on-profile=dev\n\t\t\tproperty=dev-value1\n\t\t\t", "\"\"\"", "\"", "application-dev.properties", "\"", "\"", "property=dev-value2", "\"", "(", ")", "{", "}", "this", ".", "environment", "Collections", ".", "emptyList", "(", ")", "\"", "value", "\"", "(", ")", "Options", "onConfigDataOptions", "(", ")", ".", "getProperty", ".", "getActiveProfiles", "public", "(", ",", ",", ")", "{", "}", "this", ".", "environment", "(", ")", "this", ".", "environment", "(", ")", "@", "Override", "ConfigData", "configData", "propertySource", "Options", "options", "return", ";", "\"", "property", "\"", "PropertySource", "options", ".", "with", "<", ">", "(", ")", "?", ".", "IGNORE_PROFILES", "ConfigData", ".", "Option"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 200, "ast_depth": 15, "n_identifiers": 25, "vocab_size": 54, "n_whitespaces": 101, "n_words": 73, "nloc": 21, "token_counts": 137}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessorTests.java#133-137", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessorTests.java", "language": "Java"}, "method": {"name": "onConfigDataOptions", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentPostProcessorTests#onConfigDataOptions", "start_line": 133, "end_line": 137, "signature": "onConfigDataOptions(ConfigData configData, PropertySource<?> propertySource,\n\t\t\t\t\tOptions options)", "original_code": "@Override\n\t\t\tpublic Options onConfigDataOptions(ConfigData configData, PropertySource<?> propertySource,\n\t\t\t\t\tOptions options) {\n\t\t\t\treturn options.with(ConfigData.Option.IGNORE_PROFILES);\n\t\t\t}", "doc_comment": ""}, "code_tokens": ["Options", "onConfigDataOptions", "public", "(", ",", ",", ")", "{", "}", "@", "Override", "ConfigData", "configData", "propertySource", "Options", "options", "return", ";", "PropertySource", "options", ".", "with", "<", ">", "(", ")", "?", ".", "IGNORE_PROFILES", "ConfigData", ".", "Option"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 49, "ast_depth": 9, "n_identifiers": 9, "vocab_size": 24, "n_whitespaces": 27, "n_words": 16, "nloc": 5, "token_counts": 32}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessorTests.java#145-148", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessorTests.java", "language": "Java"}, "method": {"name": "setupMocksAndSpies", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentPostProcessorTests#setupMocksAndSpies", "start_line": 145, "end_line": 148, "signature": "setupMocksAndSpies()", "original_code": "private void setupMocksAndSpies() {\n\t\tthis.configDataEnvironment = mock(ConfigDataEnvironment.class);\n\t\tthis.postProcessor = spy(new ConfigDataEnvironmentPostProcessor(Supplier::get, new DefaultBootstrapContext()));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "setupMocksAndSpies", "private", "(", ")", "{", "}", ";", ";", "=", "=", "this", ".", "configDataEnvironment", "mock", "this", ".", "postProcessor", "spy", "(", ")", "(", ")", "ConfigDataEnvironment", ".", "class", "new", "ConfigDataEnvironmentPostProcessor", "(", ",", ")", "Supplier", "::", "get", "new", "DefaultBootstrapContext", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 59, "ast_depth": 12, "n_identifiers": 7, "vocab_size": 24, "n_whitespaces": 18, "n_words": 17, "nloc": 4, "token_counts": 38}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessorTests.java#150-153", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessorTests.java", "language": "Java"}, "method": {"name": "hasDevProfile", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentPostProcessorTests#hasDevProfile", "start_line": 150, "end_line": 153, "signature": "hasDevProfile(ConfigDataResource resource)", "original_code": "private boolean hasDevProfile(ConfigDataResource resource) {\n\t\treturn (resource instanceof StandardConfigDataResource standardResource)\n\t\t\t\t&& \"dev\".equals(standardResource.getProfile());\n\t}", "doc_comment": ""}, "code_tokens": ["boolean", "hasDevProfile", "private", "(", ")", "{", "}", "ConfigDataResource", "resource", "return", ";", "&&", "(", ")", ".", "equals", "resource", "instanceof", "StandardConfigDataResource", "standardResource", "\"", "dev", "\"", "(", ")", "standardResource", ".", "getProfile", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 45, "ast_depth": 10, "n_identifiers": 5, "vocab_size": 20, "n_whitespaces": 19, "n_words": 14, "nloc": 4, "token_counts": 30}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java#79-86", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java", "language": "Java"}, "method": {"name": "createExposesEnvironmentBinderToConfigDataLocationResolvers", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentTests#createExposesEnvironmentBinderToConfigDataLocationResolvers", "start_line": 79, "end_line": 86, "signature": "createExposesEnvironmentBinderToConfigDataLocationResolvers()", "original_code": "@Test\n\tvoid createExposesEnvironmentBinderToConfigDataLocationResolvers() {\n\t\tthis.environment.setProperty(\"spring\", \"boot\");\n\t\tTestConfigDataEnvironment configDataEnvironment = new TestConfigDataEnvironment(this.logFactory,\n\t\t\t\tthis.bootstrapContext, this.environment, this.resourceLoader, this.additionalProfiles, null);\n\t\tassertThat(configDataEnvironment.getConfigDataLocationResolversBinder().bind(\"spring\", String.class).get())\n\t\t\t.isEqualTo(\"boot\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "createExposesEnvironmentBinderToConfigDataLocationResolvers", "(", ")", "{", "}", "@", "Test", ";", "TestConfigDataEnvironment", ";", ";", ".", "setProperty", "configDataEnvironment", "=", ".", "isEqualTo", "this", ".", "environment", "(", ",", ")", "new", "TestConfigDataEnvironment", "assertThat", "(", ")", "\"", "spring", "\"", "\"", "boot", "\"", "(", ",", ",", ",", ",", ",", "null", ")", "(", ")", "\"", "boot", "\"", "this", ".", "logFactory", "this", ".", "bootstrapContext", "this", ".", "environment", "this", ".", "resourceLoader", "this", ".", "additionalProfiles", ".", "get", ".", "bind", "(", ")", "configDataEnvironment", ".", "getConfigDataLocationResolversBinder", "(", ",", ")", "(", ")", "\"", "spring", "\"", "String", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 118, "ast_depth": 12, "n_identifiers": 14, "vocab_size": 33, "n_whitespaces": 34, "n_words": 33, "nloc": 8, "token_counts": 83}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java#88-108", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java", "language": "Java"}, "method": {"name": "createCreatesContributorsBasedOnExistingSources", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentTests#createCreatesContributorsBasedOnExistingSources", "start_line": 88, "end_line": 108, "signature": "createCreatesContributorsBasedOnExistingSources()", "original_code": "@Test\n\tvoid createCreatesContributorsBasedOnExistingSources() {\n\t\tMockPropertySource propertySource1 = new MockPropertySource(\"p1\");\n\t\tMockPropertySource propertySource2 = new MockPropertySource(\"p2\");\n\t\tMockPropertySource propertySource3 = new MockPropertySource(\"p3\");\n\t\tthis.environment.getPropertySources().addLast(propertySource1);\n\t\tthis.environment.getPropertySources().addLast(propertySource2);\n\t\tthis.environment.getPropertySources().addLast(propertySource3);\n\t\tConfigDataEnvironment configDataEnvironment = new ConfigDataEnvironment(this.logFactory, this.bootstrapContext,\n\t\t\t\tthis.environment, this.resourceLoader, this.additionalProfiles, null);\n\t\tList<ConfigDataEnvironmentContributor> children = configDataEnvironment.getContributors()\n\t\t\t.getRoot()\n\t\t\t.getChildren(ImportPhase.BEFORE_PROFILE_ACTIVATION);\n\t\tObject[] wrapped = children.stream()\n\t\t\t.filter((child) -> child.getKind() == Kind.EXISTING)\n\t\t\t.map(ConfigDataEnvironmentContributor::getPropertySource)\n\t\t\t.toArray();\n\t\tassertThat(wrapped[1]).isEqualTo(propertySource1);\n\t\tassertThat(wrapped[2]).isEqualTo(propertySource2);\n\t\tassertThat(wrapped[3]).isEqualTo(propertySource3);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "createCreatesContributorsBasedOnExistingSources", "(", ")", "{", "}", "@", "Test", "MockPropertySource", ";", "MockPropertySource", ";", "MockPropertySource", ";", ";", ";", ";", "ConfigDataEnvironment", ";", ";", ";", ";", ";", ";", "propertySource1", "=", "propertySource2", "=", "propertySource3", "=", ".", "addLast", ".", "addLast", ".", "addLast", "configDataEnvironment", "=", "List", "children", "=", "Object", "wrapped", "=", ".", "isEqualTo", ".", "isEqualTo", ".", "isEqualTo", "new", "MockPropertySource", "new", "MockPropertySource", "new", "MockPropertySource", ".", "getPropertySources", "(", "propertySource1", ")", ".", "getPropertySources", "(", "propertySource2", ")", ".", "getPropertySources", "(", "propertySource3", ")", "new", "ConfigDataEnvironment", "<", "ConfigDataEnvironmentContributor", ">", ".", "getChildren", "[", "]", ".", "toArray", "assertThat", "(", "propertySource1", ")", "assertThat", "(", "propertySource2", ")", "assertThat", "(", "propertySource3", ")", "(", ")", "(", ")", "(", ")", "this", ".", "environment", "(", ")", "this", ".", "environment", "(", ")", "this", ".", "environment", "(", ")", "(", ",", ",", ",", ",", ",", "null", ")", ".", "getRoot", "(", ")", ".", "map", "(", ")", "(", ")", "(", ")", "(", ")", "\"", "p1", "\"", "\"", "p2", "\"", "\"", "p3", "\"", "this", ".", "logFactory", "this", ".", "bootstrapContext", "this", ".", "environment", "this", ".", "resourceLoader", "this", ".", "additionalProfiles", "configDataEnvironment", ".", "getContributors", "(", ")", "ImportPhase", ".", "BEFORE_PROFILE_ACTIVATION", ".", "filter", "(", ")", "wrapped", "[", "1", "]", "wrapped", "[", "2", "]", "wrapped", "[", "3", "]", "(", ")", "children", ".", "stream", "(", ")", "ConfigDataEnvironmentContributor", "::", "getPropertySource", "(", ")", "->", "(", "child", ")", "==", "child", ".", "getKind", "Kind", ".", "EXISTING", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 306, "ast_depth": 14, "n_identifiers": 32, "vocab_size": 63, "n_whitespaces": 97, "n_words": 86, "nloc": 21, "token_counts": 210}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java#110-130", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java", "language": "Java"}, "method": {"name": "createWhenHasDefaultPropertySourceMovesItToLastContributor", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentTests#createWhenHasDefaultPropertySourceMovesItToLastContributor", "start_line": 110, "end_line": 130, "signature": "createWhenHasDefaultPropertySourceMovesItToLastContributor()", "original_code": "@Test\n\tvoid createWhenHasDefaultPropertySourceMovesItToLastContributor() {\n\t\tMockPropertySource defaultPropertySource = new MockPropertySource(\"defaultProperties\");\n\t\tMockPropertySource propertySource1 = new MockPropertySource(\"p2\");\n\t\tMockPropertySource propertySource2 = new MockPropertySource(\"p3\");\n\t\tthis.environment.getPropertySources().addLast(defaultPropertySource);\n\t\tthis.environment.getPropertySources().addLast(propertySource1);\n\t\tthis.environment.getPropertySources().addLast(propertySource2);\n\t\tConfigDataEnvironment configDataEnvironment = new ConfigDataEnvironment(this.logFactory, this.bootstrapContext,\n\t\t\t\tthis.environment, this.resourceLoader, this.additionalProfiles, null);\n\t\tList<ConfigDataEnvironmentContributor> children = configDataEnvironment.getContributors()\n\t\t\t.getRoot()\n\t\t\t.getChildren(ImportPhase.BEFORE_PROFILE_ACTIVATION);\n\t\tObject[] wrapped = children.stream()\n\t\t\t.filter((child) -> child.getKind() == Kind.EXISTING)\n\t\t\t.map(ConfigDataEnvironmentContributor::getPropertySource)\n\t\t\t.toArray();\n\t\tassertThat(wrapped[1]).isEqualTo(propertySource1);\n\t\tassertThat(wrapped[2]).isEqualTo(propertySource2);\n\t\tassertThat(wrapped[3]).isEqualTo(defaultPropertySource);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "createWhenHasDefaultPropertySourceMovesItToLastContributor", "(", ")", "{", "}", "@", "Test", "MockPropertySource", ";", "MockPropertySource", ";", "MockPropertySource", ";", ";", ";", ";", "ConfigDataEnvironment", ";", ";", ";", ";", ";", ";", "defaultPropertySource", "=", "propertySource1", "=", "propertySource2", "=", ".", "addLast", ".", "addLast", ".", "addLast", "configDataEnvironment", "=", "List", "children", "=", "Object", "wrapped", "=", ".", "isEqualTo", ".", "isEqualTo", ".", "isEqualTo", "new", "MockPropertySource", "new", "MockPropertySource", "new", "MockPropertySource", ".", "getPropertySources", "(", "defaultPropertySource", ")", ".", "getPropertySources", "(", "propertySource1", ")", ".", "getPropertySources", "(", "propertySource2", ")", "new", "ConfigDataEnvironment", "<", "ConfigDataEnvironmentContributor", ">", ".", "getChildren", "[", "]", ".", "toArray", "assertThat", "(", "propertySource1", ")", "assertThat", "(", "propertySource2", ")", "assertThat", "(", "defaultPropertySource", ")", "(", ")", "(", ")", "(", ")", "this", ".", "environment", "(", ")", "this", ".", "environment", "(", ")", "this", ".", "environment", "(", ")", "(", ",", ",", ",", ",", ",", "null", ")", ".", "getRoot", "(", ")", ".", "map", "(", ")", "(", ")", "(", ")", "(", ")", "\"", "defaultProperties", "\"", "\"", "p2", "\"", "\"", "p3", "\"", "this", ".", "logFactory", "this", ".", "bootstrapContext", "this", ".", "environment", "this", ".", "resourceLoader", "this", ".", "additionalProfiles", "configDataEnvironment", ".", "getContributors", "(", ")", "ImportPhase", ".", "BEFORE_PROFILE_ACTIVATION", ".", "filter", "(", ")", "wrapped", "[", "1", "]", "wrapped", "[", "2", "]", "wrapped", "[", "3", "]", "(", ")", "children", ".", "stream", "(", ")", "ConfigDataEnvironmentContributor", "::", "getPropertySource", "(", ")", "->", "(", "child", ")", "==", "child", ".", "getKind", "Kind", ".", "EXISTING", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 306, "ast_depth": 14, "n_identifiers": 32, "vocab_size": 63, "n_whitespaces": 97, "n_words": 86, "nloc": 21, "token_counts": 210}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java#132-148", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java", "language": "Java"}, "method": {"name": "createCreatesInitialImportContributorsInCorrectOrder", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentTests#createCreatesInitialImportContributorsInCorrectOrder", "start_line": 132, "end_line": 148, "signature": "createCreatesInitialImportContributorsInCorrectOrder()", "original_code": "@Test\n\tvoid createCreatesInitialImportContributorsInCorrectOrder() {\n\t\tthis.environment.setProperty(\"spring.config.location\", \"l1,l2\");\n\t\tthis.environment.setProperty(\"spring.config.additional-location\", \"a1,a2\");\n\t\tthis.environment.setProperty(\"spring.config.import\", \"i1,i2\");\n\t\tConfigDataEnvironment configDataEnvironment = new ConfigDataEnvironment(this.logFactory, this.bootstrapContext,\n\t\t\t\tthis.environment, this.resourceLoader, this.additionalProfiles, null);\n\t\tList<ConfigDataEnvironmentContributor> children = configDataEnvironment.getContributors()\n\t\t\t.getRoot()\n\t\t\t.getChildren(ImportPhase.BEFORE_PROFILE_ACTIVATION);\n\t\tObject[] imports = children.stream()\n\t\t\t.filter((child) -> child.getKind() == Kind.INITIAL_IMPORT)\n\t\t\t.map(ConfigDataEnvironmentContributor::getImports)\n\t\t\t.map(Object::toString)\n\t\t\t.toArray();\n\t\tassertThat(imports).containsExactly(\"[i2]\", \"[i1]\", \"[a2]\", \"[a1]\", \"[l2]\", \"[l1]\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "createCreatesInitialImportContributorsInCorrectOrder", "(", ")", "{", "}", "@", "Test", ";", ";", ";", "ConfigDataEnvironment", ";", ";", ";", ";", ".", "setProperty", ".", "setProperty", ".", "setProperty", "configDataEnvironment", "=", "List", "children", "=", "Object", "imports", "=", ".", "containsExactly", "this", ".", "environment", "(", ",", ")", "this", ".", "environment", "(", ",", ")", "this", ".", "environment", "(", ",", ")", "new", "ConfigDataEnvironment", "<", "ConfigDataEnvironmentContributor", ">", ".", "getChildren", "[", "]", ".", "toArray", "assertThat", "(", ",", ",", ",", ",", ",", ")", "\"", "spring.config.location", "\"", "\"", "l1,l2", "\"", "\"", "spring.config.additional-location", "\"", "\"", "a1,a2", "\"", "\"", "spring.config.import", "\"", "\"", "i1,i2", "\"", "(", ",", ",", ",", ",", ",", "null", ")", ".", "getRoot", "(", ")", ".", "map", "(", ")", "(", "imports", ")", "\"", "[i2]", "\"", "\"", "[i1]", "\"", "\"", "[a2]", "\"", "\"", "[a1]", "\"", "\"", "[l2]", "\"", "\"", "[l1]", "\"", "this", ".", "logFactory", "this", ".", "bootstrapContext", "this", ".", "environment", "this", ".", "resourceLoader", "this", ".", "additionalProfiles", "configDataEnvironment", ".", "getContributors", "(", ")", "ImportPhase", ".", "BEFORE_PROFILE_ACTIVATION", ".", "map", "(", ")", "(", ")", ".", "filter", "(", ")", "Object", "::", "toString", "children", ".", "stream", "(", ")", "ConfigDataEnvironmentContributor", "::", "getImports", "(", ")", "->", "(", "child", ")", "==", "child", ".", "getKind", "Kind", ".", "INITIAL_IMPORT", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 260, "ast_depth": 15, "n_identifiers": 30, "vocab_size": 65, "n_whitespaces": 82, "n_words": 78, "nloc": 17, "token_counts": 183}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java#150-157", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java", "language": "Java"}, "method": {"name": "processAndApplyAddsImportedSourceToEnvironment", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentTests#processAndApplyAddsImportedSourceToEnvironment", "start_line": 150, "end_line": 157, "signature": "processAndApplyAddsImportedSourceToEnvironment()", "original_code": "@Test\n\t@WithResource(name = \"application.properties\", content = \"spring=boot\")\n\tvoid processAndApplyAddsImportedSourceToEnvironment() {\n\t\tConfigDataEnvironment configDataEnvironment = new ConfigDataEnvironment(this.logFactory, this.bootstrapContext,\n\t\t\t\tthis.environment, this.resourceLoader, this.additionalProfiles, null);\n\t\tconfigDataEnvironment.processAndApply();\n\t\tassertThat(this.environment.getProperty(\"spring\")).isEqualTo(\"boot\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "processAndApplyAddsImportedSourceToEnvironment", "(", ")", "{", "}", "@", "Test", "@", "WithResource", "ConfigDataEnvironment", ";", ";", ";", "(", ",", ")", "configDataEnvironment", "=", "configDataEnvironment", ".", "processAndApply", ".", "isEqualTo", "name", "=", "content", "=", "new", "ConfigDataEnvironment", "(", ")", "assertThat", "(", ")", "\"", "application.properties", "\"", "\"", "spring=boot", "\"", "(", ",", ",", ",", ",", ",", "null", ")", "(", ")", "\"", "boot", "\"", "this", ".", "logFactory", "this", ".", "bootstrapContext", "this", ".", "environment", "this", ".", "resourceLoader", "this", ".", "additionalProfiles", ".", "getProperty", "this", ".", "environment", "(", ")", "\"", "spring", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 113, "ast_depth": 11, "n_identifiers": 15, "vocab_size": 34, "n_whitespaces": 35, "n_words": 34, "nloc": 8, "token_counts": 79}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java#159-173", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java", "language": "Java"}, "method": {"name": "processAndApplyOnlyAddsActiveContributors", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentTests#processAndApplyOnlyAddsActiveContributors", "start_line": 159, "end_line": 173, "signature": "processAndApplyOnlyAddsActiveContributors()", "original_code": "@Test\n\t@WithResource(name = \"application.properties\", content = \"\"\"\n\t\t\tspring=boot\n\t\t\t#---\n\t\t\tspring.config.activate.on-profile=missing\n\t\t\tother=value\n\t\t\tNo newline at end of file\n\t\t\t\"\"\")\n\tvoid processAndApplyOnlyAddsActiveContributors() {\n\t\tConfigDataEnvironment configDataEnvironment = new ConfigDataEnvironment(this.logFactory, this.bootstrapContext,\n\t\t\t\tthis.environment, this.resourceLoader, this.additionalProfiles, null);\n\t\tconfigDataEnvironment.processAndApply();\n\t\tassertThat(this.environment.getProperty(\"spring\")).isEqualTo(\"boot\");\n\t\tassertThat(this.environment.getProperty(\"other\")).isNull();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "processAndApplyOnlyAddsActiveContributors", "(", ")", "{", "}", "@", "Test", "@", "WithResource", "ConfigDataEnvironment", ";", ";", ";", ";", "(", ",", ")", "configDataEnvironment", "=", "configDataEnvironment", ".", "processAndApply", ".", "isEqualTo", ".", "isNull", "name", "=", "content", "=", "new", "ConfigDataEnvironment", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "\"", "application.properties", "\"", "\"\"\"", "\n\t\t\tspring=boot\n\t\t\t#---\n\t\t\tspring.config.activate.on-profile=missing\n\t\t\tother=value\n\t\t\tNo newline at end of file\n\t\t\t", "\"\"\"", "(", ",", ",", ",", ",", ",", "null", ")", "(", ")", "\"", "boot", "\"", "(", ")", "this", ".", "logFactory", "this", ".", "bootstrapContext", "this", ".", "environment", "this", ".", "resourceLoader", "this", ".", "additionalProfiles", ".", "getProperty", ".", "getProperty", "this", ".", "environment", "(", ")", "this", ".", "environment", "(", ")", "\"", "spring", "\"", "\"", "other", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 140, "ast_depth": 11, "n_identifiers": 16, "vocab_size": 37, "n_whitespaces": 67, "n_words": 54, "nloc": 15, "token_counts": 97}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java#175-185", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java", "language": "Java"}, "method": {"name": "processAndApplyMovesDefaultPropertySourceToLast", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentTests#processAndApplyMovesDefaultPropertySourceToLast", "start_line": 175, "end_line": 185, "signature": "processAndApplyMovesDefaultPropertySourceToLast(TestInfo info)", "original_code": "@Test\n\tvoid processAndApplyMovesDefaultPropertySourceToLast(TestInfo info) {\n\t\tMockPropertySource defaultPropertySource = new MockPropertySource(\"defaultProperties\");\n\t\tthis.environment.getPropertySources().addFirst(defaultPropertySource);\n\t\tthis.environment.setProperty(\"spring.config.location\", getConfigLocation(info));\n\t\tConfigDataEnvironment configDataEnvironment = new ConfigDataEnvironment(this.logFactory, this.bootstrapContext,\n\t\t\t\tthis.environment, this.resourceLoader, this.additionalProfiles, null);\n\t\tconfigDataEnvironment.processAndApply();\n\t\tList<PropertySource<?>> sources = this.environment.getPropertySources().stream().toList();\n\t\tassertThat(sources.get(sources.size() - 1)).isSameAs(defaultPropertySource);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "processAndApplyMovesDefaultPropertySourceToLast", "(", ")", "{", "}", "@", "Test", "TestInfo", "info", "MockPropertySource", ";", ";", ";", "ConfigDataEnvironment", ";", ";", ";", ";", "defaultPropertySource", "=", ".", "addFirst", ".", "setProperty", "configDataEnvironment", "=", "configDataEnvironment", ".", "processAndApply", "List", "sources", "=", ".", "isSameAs", "new", "MockPropertySource", ".", "getPropertySources", "(", "defaultPropertySource", ")", "this", ".", "environment", "(", ",", ")", "new", "ConfigDataEnvironment", "(", ")", "<", ">", ".", "toList", "assertThat", "(", "defaultPropertySource", ")", "(", ")", "this", ".", "environment", "(", ")", "\"", "spring.config.location", "\"", "getConfigLocation", "(", ",", ",", ",", ",", ",", "null", ")", "PropertySource", ".", "stream", "(", ")", "(", ")", "\"", "defaultProperties", "\"", "(", "info", ")", "this", ".", "logFactory", "this", ".", "bootstrapContext", "this", ".", "environment", "this", ".", "resourceLoader", "this", ".", "additionalProfiles", "<", ">", ".", "getPropertySources", "(", ")", "sources", ".", "get", "?", "this", ".", "environment", "(", ")", "(", ")", "-", "1", "sources", ".", "size", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 192, "ast_depth": 13, "n_identifiers": 22, "vocab_size": 48, "n_whitespaces": 51, "n_words": 56, "nloc": 11, "token_counts": 131}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java#187-194", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java", "language": "Java"}, "method": {"name": "processAndApplySetsDefaultProfiles", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentTests#processAndApplySetsDefaultProfiles", "start_line": 187, "end_line": 194, "signature": "processAndApplySetsDefaultProfiles(TestInfo info)", "original_code": "@Test\n\t@WithResource(name = \"application.properties\", content = \"spring.profiles.default=one,two,three\")\n\tvoid processAndApplySetsDefaultProfiles(TestInfo info) {\n\t\tConfigDataEnvironment configDataEnvironment = new ConfigDataEnvironment(this.logFactory, this.bootstrapContext,\n\t\t\t\tthis.environment, this.resourceLoader, this.additionalProfiles, null);\n\t\tconfigDataEnvironment.processAndApply();\n\t\tassertThat(this.environment.getDefaultProfiles()).containsExactly(\"one\", \"two\", \"three\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "processAndApplySetsDefaultProfiles", "(", ")", "{", "}", "@", "Test", "@", "WithResource", "TestInfo", "info", "ConfigDataEnvironment", ";", ";", ";", "(", ",", ")", "configDataEnvironment", "=", "configDataEnvironment", ".", "processAndApply", ".", "containsExactly", "name", "=", "content", "=", "new", "ConfigDataEnvironment", "(", ")", "assertThat", "(", ",", ",", ")", "\"", "application.properties", "\"", "\"", "spring.profiles.default=one,two,three", "\"", "(", ",", ",", ",", ",", ",", "null", ")", "(", ")", "\"", "one", "\"", "\"", "two", "\"", "\"", "three", "\"", "this", ".", "logFactory", "this", ".", "bootstrapContext", "this", ".", "environment", "this", ".", "resourceLoader", "this", ".", "additionalProfiles", ".", "getDefaultProfiles", "this", ".", "environment", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 122, "ast_depth": 10, "n_identifiers": 16, "vocab_size": 37, "n_whitespaces": 38, "n_words": 41, "nloc": 8, "token_counts": 86}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java#196-203", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java", "language": "Java"}, "method": {"name": "processAndApplySetsActiveProfiles", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentTests#processAndApplySetsActiveProfiles", "start_line": 196, "end_line": 203, "signature": "processAndApplySetsActiveProfiles()", "original_code": "@Test\n\t@WithResource(name = \"application.properties\", content = \"spring.profiles.active=one,two,three\")\n\tvoid processAndApplySetsActiveProfiles() {\n\t\tConfigDataEnvironment configDataEnvironment = new ConfigDataEnvironment(this.logFactory, this.bootstrapContext,\n\t\t\t\tthis.environment, this.resourceLoader, this.additionalProfiles, null);\n\t\tconfigDataEnvironment.processAndApply();\n\t\tassertThat(this.environment.getActiveProfiles()).containsExactly(\"one\", \"two\", \"three\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "processAndApplySetsActiveProfiles", "(", ")", "{", "}", "@", "Test", "@", "WithResource", "ConfigDataEnvironment", ";", ";", ";", "(", ",", ")", "configDataEnvironment", "=", "configDataEnvironment", ".", "processAndApply", ".", "containsExactly", "name", "=", "content", "=", "new", "ConfigDataEnvironment", "(", ")", "assertThat", "(", ",", ",", ")", "\"", "application.properties", "\"", "\"", "spring.profiles.active=one,two,three", "\"", "(", ",", ",", ",", ",", ",", "null", ")", "(", ")", "\"", "one", "\"", "\"", "two", "\"", "\"", "three", "\"", "this", ".", "logFactory", "this", ".", "bootstrapContext", "this", ".", "environment", "this", ".", "resourceLoader", "this", ".", "additionalProfiles", ".", "getActiveProfiles", "this", ".", "environment", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 119, "ast_depth": 10, "n_identifiers": 15, "vocab_size": 35, "n_whitespaces": 37, "n_words": 39, "nloc": 8, "token_counts": 84}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java#205-215", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java", "language": "Java"}, "method": {"name": "processAndApplySetsActiveProfilesAndProfileGroups", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentTests#processAndApplySetsActiveProfilesAndProfileGroups", "start_line": 205, "end_line": 215, "signature": "processAndApplySetsActiveProfilesAndProfileGroups()", "original_code": "@Test\n\t@WithResource(name = \"application.properties\", content = \"\"\"\n\t\t\tspring.profiles.active=one,two,three\n\t\t\tspring.profiles.group.one=four,five\n\t\t\t\"\"\")\n\tvoid processAndApplySetsActiveProfilesAndProfileGroups() {\n\t\tConfigDataEnvironment configDataEnvironment = new ConfigDataEnvironment(this.logFactory, this.bootstrapContext,\n\t\t\t\tthis.environment, this.resourceLoader, this.additionalProfiles, null);\n\t\tconfigDataEnvironment.processAndApply();\n\t\tassertThat(this.environment.getActiveProfiles()).containsExactly(\"one\", \"four\", \"five\", \"two\", \"three\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "processAndApplySetsActiveProfilesAndProfileGroups", "(", ")", "{", "}", "@", "Test", "@", "WithResource", "ConfigDataEnvironment", ";", ";", ";", "(", ",", ")", "configDataEnvironment", "=", "configDataEnvironment", ".", "processAndApply", ".", "containsExactly", "name", "=", "content", "=", "new", "ConfigDataEnvironment", "(", ")", "assertThat", "(", ",", ",", ",", ",", ")", "\"", "application.properties", "\"", "\"\"\"", "\n\t\t\tspring.profiles.active=one,two,three\n\t\t\tspring.profiles.group.one=four,five\n\t\t\t", "\"\"\"", "(", ",", ",", ",", ",", ",", "null", ")", "(", ")", "\"", "one", "\"", "\"", "four", "\"", "\"", "five", "\"", "\"", "two", "\"", "\"", "three", "\"", "this", ".", "logFactory", "this", ".", "bootstrapContext", "this", ".", "environment", "this", ".", "resourceLoader", "this", ".", "additionalProfiles", ".", "getActiveProfiles", "this", ".", "environment", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 129, "ast_depth": 10, "n_identifiers": 15, "vocab_size": 38, "n_whitespaces": 51, "n_words": 47, "nloc": 11, "token_counts": 92}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java#217-240", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java", "language": "Java"}, "method": {"name": "processAndApplyDoesNotSetProfilesFromIgnoreProfilesContributors", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentTests#processAndApplyDoesNotSetProfilesFromIgnoreProfilesContributors", "start_line": 217, "end_line": 240, "signature": "processAndApplyDoesNotSetProfilesFromIgnoreProfilesContributors(TestInfo info)", "original_code": "@Test\n\t@WithResource(name = \"application.properties\", content = \"spring.profiles.active=test\")\n\tvoid processAndApplyDoesNotSetProfilesFromIgnoreProfilesContributors(TestInfo info) {\n\t\tConfigDataEnvironment configDataEnvironment = new ConfigDataEnvironment(this.logFactory, this.bootstrapContext,\n\t\t\t\tthis.environment, this.resourceLoader, this.additionalProfiles, null) {\n\n\t\t\t@Override\n\t\t\tprotected ConfigDataEnvironmentContributors createContributors(\n\t\t\t\t\tList<ConfigDataEnvironmentContributor> contributors) {\n\t\t\t\tMap<String, Object> source = new LinkedHashMap<>();\n\t\t\t\tsource.put(\"spring.profiles.active\", \"ignore1\");\n\t\t\t\tsource.put(\"spring.profiles.include\", \"ignore2\");\n\t\t\t\tConfigData data = new ConfigData(Collections.singleton(new MapPropertySource(\"test\", source)),\n\t\t\t\t\t\tConfigData.Option.IGNORE_PROFILES);\n\t\t\t\tcontributors.add(ConfigDataEnvironmentContributor.ofUnboundImport(ConfigDataLocation.of(\"test\"),\n\t\t\t\t\t\tmock(ConfigDataResource.class), false, data, 0,\n\t\t\t\t\t\tConfigDataEnvironmentTests.this.conversionService, ConfigDataEnvironmentUpdateListener.NONE));\n\t\t\t\treturn super.createContributors(contributors);\n\t\t\t}\n\n\t\t};\n\t\tconfigDataEnvironment.processAndApply();\n\t\tassertThat(this.environment.getActiveProfiles()).containsExactly(\"test\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "processAndApplyDoesNotSetProfilesFromIgnoreProfilesContributors", "(", ")", "{", "}", "@", "Test", "@", "WithResource", "TestInfo", "info", "ConfigDataEnvironment", ";", ";", ";", "(", ",", ")", "configDataEnvironment", "=", "configDataEnvironment", ".", "processAndApply", ".", "containsExactly", "name", "=", "content", "=", "new", "ConfigDataEnvironment", "(", ")", "assertThat", "(", ")", "\"", "application.properties", "\"", "\"", "spring.profiles.active=test", "\"", "(", ",", ",", ",", ",", ",", "null", ")", "{", "}", "(", ")", "\"", "test", "\"", "this", ".", "logFactory", "this", ".", "bootstrapContext", "this", ".", "environment", "this", ".", "resourceLoader", "this", ".", "additionalProfiles", "ConfigDataEnvironmentContributors", "createContributors", ".", "getActiveProfiles", "protected", "(", ")", "{", "}", "this", ".", "environment", "(", ")", "@", "Override", "contributors", ";", ";", ";", "ConfigData", ";", ";", "return", ";", "List", "Map", "source", "=", "source", ".", "put", "source", ".", "put", "data", "=", "contributors", ".", "add", "super", ".", "createContributors", "<", "ConfigDataEnvironmentContributor", ">", "<", "String", ",", "Object", ">", "new", "(", ",", ")", "(", ",", ")", "new", "ConfigData", "(", ")", "(", "contributors", ")", "LinkedHashMap", "(", ")", "\"", "spring.profiles.active", "\"", "\"", "ignore1", "\"", "\"", "spring.profiles.include", "\"", "\"", "ignore2", "\"", "(", ",", ")", "ConfigDataEnvironmentContributor", ".", "ofUnboundImport", "<", ">", "Collections", ".", "singleton", ".", "IGNORE_PROFILES", "(", ",", ",", "false", ",", "data", ",", "0", ",", ",", ")", "(", ")", "ConfigData", ".", "Option", "ConfigDataLocation", ".", "of", "mock", ".", "conversionService", "ConfigDataEnvironmentUpdateListener", ".", "NONE", "new", "MapPropertySource", "(", ")", "(", ")", "ConfigDataEnvironmentTests", ".", "this", "(", ",", "source", ")", "\"", "test", "\"", "ConfigDataResource", ".", "class", "\"", "test", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 302, "ast_depth": 19, "n_identifiers": 37, "vocab_size": 76, "n_whitespaces": 133, "n_words": 97, "nloc": 22, "token_counts": 213}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java#223-235", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java", "language": "Java"}, "method": {"name": "createContributors", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentTests#createContributors", "start_line": 223, "end_line": 235, "signature": "createContributors(\n\t\t\t\t\tList<ConfigDataEnvironmentContributor> contributors)", "original_code": "@Override\n\t\t\tprotected ConfigDataEnvironmentContributors createContributors(\n\t\t\t\t\tList<ConfigDataEnvironmentContributor> contributors) {\n\t\t\t\tMap<String, Object> source = new LinkedHashMap<>();\n\t\t\t\tsource.put(\"spring.profiles.active\", \"ignore1\");\n\t\t\t\tsource.put(\"spring.profiles.include\", \"ignore2\");\n\t\t\t\tConfigData data = new ConfigData(Collections.singleton(new MapPropertySource(\"test\", source)),\n\t\t\t\t\t\tConfigData.Option.IGNORE_PROFILES);\n\t\t\t\tcontributors.add(ConfigDataEnvironmentContributor.ofUnboundImport(ConfigDataLocation.of(\"test\"),\n\t\t\t\t\t\tmock(ConfigDataResource.class), false, data, 0,\n\t\t\t\t\t\tConfigDataEnvironmentTests.this.conversionService, ConfigDataEnvironmentUpdateListener.NONE));\n\t\t\t\treturn super.createContributors(contributors);\n\t\t\t}", "doc_comment": ""}, "code_tokens": ["ConfigDataEnvironmentContributors", "createContributors", "protected", "(", ")", "{", "}", "@", "Override", "contributors", ";", ";", ";", "ConfigData", ";", ";", "return", ";", "List", "Map", "source", "=", "source", ".", "put", "source", ".", "put", "data", "=", "contributors", ".", "add", "super", ".", "createContributors", "<", "ConfigDataEnvironmentContributor", ">", "<", "String", ",", "Object", ">", "new", "(", ",", ")", "(", ",", ")", "new", "ConfigData", "(", ")", "(", "contributors", ")", "LinkedHashMap", "(", ")", "\"", "spring.profiles.active", "\"", "\"", "ignore1", "\"", "\"", "spring.profiles.include", "\"", "\"", "ignore2", "\"", "(", ",", ")", "ConfigDataEnvironmentContributor", ".", "ofUnboundImport", "<", ">", "Collections", ".", "singleton", ".", "IGNORE_PROFILES", "(", ",", ",", "false", ",", "data", ",", "0", ",", ",", ")", "(", ")", "ConfigData", ".", "Option", "ConfigDataLocation", ".", "of", "mock", ".", "conversionService", "ConfigDataEnvironmentUpdateListener", ".", "NONE", "new", "MapPropertySource", "(", ")", "(", ")", "ConfigDataEnvironmentTests", ".", "this", "(", ",", "source", ")", "\"", "test", "\"", "ConfigDataResource", ".", "class", "\"", "test", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 188, "ast_depth": 13, "n_identifiers": 21, "vocab_size": 54, "n_whitespaces": 87, "n_words": 60, "nloc": 13, "token_counts": 133}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java#242-265", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java", "language": "Java"}, "method": {"name": "processAndApplyWhenHasProfileIncludeInProfileSpecificDocumentThrowsException", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentTests#processAndApplyWhenHasProfileIncludeInProfileSpecificDocumentThrowsException", "start_line": 242, "end_line": 265, "signature": "processAndApplyWhenHasProfileIncludeInProfileSpecificDocumentThrowsException(String property, TestInfo info)", "original_code": "@ParameterizedTest\n\t@ValueSource(strings = { \"include\", \"include[0]\" })\n\tvoid processAndApplyWhenHasProfileIncludeInProfileSpecificDocumentThrowsException(String property, TestInfo info) {\n\t\tthis.environment.setProperty(\"spring.config.location\", getConfigLocation(info));\n\t\tConfigDataEnvironment configDataEnvironment = new ConfigDataEnvironment(this.logFactory, this.bootstrapContext,\n\t\t\t\tthis.environment, this.resourceLoader, this.additionalProfiles, null) {\n\n\t\t\t@Override\n\t\t\tprotected ConfigDataEnvironmentContributors createContributors(\n\t\t\t\t\tList<ConfigDataEnvironmentContributor> contributors) {\n\t\t\t\tMap<String, Object> source = new LinkedHashMap<>();\n\t\t\t\tsource.put(\"spring.config.activate.on-profile\", \"activate\");\n\t\t\t\tsource.put(\"spring.profiles.\" + property, \"include\");\n\t\t\t\tConfigData data = new ConfigData(Collections.singleton(new MapPropertySource(\"test\", source)));\n\t\t\t\tcontributors.add(ConfigDataEnvironmentContributor.ofUnboundImport(ConfigDataLocation.of(\"test\"),\n\t\t\t\t\t\tmock(ConfigDataResource.class), false, data, 0,\n\t\t\t\t\t\tConfigDataEnvironmentTests.this.conversionService, ConfigDataEnvironmentUpdateListener.NONE));\n\t\t\t\treturn super.createContributors(contributors);\n\t\t\t}\n\n\t\t};\n\t\tassertThatExceptionOfType(InactiveConfigDataAccessException.class)\n\t\t\t.isThrownBy(configDataEnvironment::processAndApply);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "processAndApplyWhenHasProfileIncludeInProfileSpecificDocumentThrowsException", "(", ",", ")", "{", "}", "@", "ParameterizedTest", "@", "ValueSource", "String", "property", "TestInfo", "info", ";", "ConfigDataEnvironment", ";", ";", "(", ")", ".", "setProperty", "configDataEnvironment", "=", ".", "isThrownBy", "strings", "=", "this", ".", "environment", "(", ",", ")", "new", "ConfigDataEnvironment", "assertThatExceptionOfType", "(", ")", "{", ",", "}", "\"", "spring.config.location", "\"", "getConfigLocation", "(", ",", ",", ",", ",", ",", "null", ")", "{", "}", "(", ")", "configDataEnvironment", "::", "processAndApply", "\"", "include", "\"", "\"", "include[0]", "\"", "(", "info", ")", "this", ".", "logFactory", "this", ".", "bootstrapContext", "this", ".", "environment", "this", ".", "resourceLoader", "this", ".", "additionalProfiles", "ConfigDataEnvironmentContributors", "createContributors", "InactiveConfigDataAccessException", ".", "class", "protected", "(", ")", "{", "}", "@", "Override", "contributors", ";", ";", ";", "ConfigData", ";", ";", "return", ";", "List", "Map", "source", "=", "source", ".", "put", "source", ".", "put", "data", "=", "contributors", ".", "add", "super", ".", "createContributors", "<", "ConfigDataEnvironmentContributor", ">", "<", "String", ",", "Object", ">", "new", "(", ",", ")", "(", ",", ")", "new", "ConfigData", "(", ")", "(", "contributors", ")", "LinkedHashMap", "(", ")", "\"", "spring.config.activate.on-profile", "\"", "\"", "activate", "\"", "+", "property", "\"", "include", "\"", "(", ")", "ConfigDataEnvironmentContributor", ".", "ofUnboundImport", "<", ">", "\"", "spring.profiles.", "\"", "Collections", ".", "singleton", "(", ",", ",", "false", ",", "data", ",", "0", ",", ",", ")", "(", ")", "ConfigDataLocation", ".", "of", "mock", ".", "conversionService", "ConfigDataEnvironmentUpdateListener", ".", "NONE", "new", "MapPropertySource", "(", ")", "(", ")", "ConfigDataEnvironmentTests", ".", "this", "(", ",", "source", ")", "\"", "test", "\"", "ConfigDataResource", ".", "class", "\"", "test", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 309, "ast_depth": 19, "n_identifiers": 35, "vocab_size": 78, "n_whitespaces": 135, "n_words": 100, "nloc": 22, "token_counts": 218}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java#249-260", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java", "language": "Java"}, "method": {"name": "createContributors", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentTests#createContributors", "start_line": 249, "end_line": 260, "signature": "createContributors(\n\t\t\t\t\tList<ConfigDataEnvironmentContributor> contributors)", "original_code": "@Override\n\t\t\tprotected ConfigDataEnvironmentContributors createContributors(\n\t\t\t\t\tList<ConfigDataEnvironmentContributor> contributors) {\n\t\t\t\tMap<String, Object> source = new LinkedHashMap<>();\n\t\t\t\tsource.put(\"spring.config.activate.on-profile\", \"activate\");\n\t\t\t\tsource.put(\"spring.profiles.\" + property, \"include\");\n\t\t\t\tConfigData data = new ConfigData(Collections.singleton(new MapPropertySource(\"test\", source)));\n\t\t\t\tcontributors.add(ConfigDataEnvironmentContributor.ofUnboundImport(ConfigDataLocation.of(\"test\"),\n\t\t\t\t\t\tmock(ConfigDataResource.class), false, data, 0,\n\t\t\t\t\t\tConfigDataEnvironmentTests.this.conversionService, ConfigDataEnvironmentUpdateListener.NONE));\n\t\t\t\treturn super.createContributors(contributors);\n\t\t\t}", "doc_comment": ""}, "code_tokens": ["ConfigDataEnvironmentContributors", "createContributors", "protected", "(", ")", "{", "}", "@", "Override", "contributors", ";", ";", ";", "ConfigData", ";", ";", "return", ";", "List", "Map", "source", "=", "source", ".", "put", "source", ".", "put", "data", "=", "contributors", ".", "add", "super", ".", "createContributors", "<", "ConfigDataEnvironmentContributor", ">", "<", "String", ",", "Object", ">", "new", "(", ",", ")", "(", ",", ")", "new", "ConfigData", "(", ")", "(", "contributors", ")", "LinkedHashMap", "(", ")", "\"", "spring.config.activate.on-profile", "\"", "\"", "activate", "\"", "+", "property", "\"", "include", "\"", "(", ")", "ConfigDataEnvironmentContributor", ".", "ofUnboundImport", "<", ">", "\"", "spring.profiles.", "\"", "Collections", ".", "singleton", "(", ",", ",", "false", ",", "data", ",", "0", ",", ",", ")", "(", ")", "ConfigDataLocation", ".", "of", "mock", ".", "conversionService", "ConfigDataEnvironmentUpdateListener", ".", "NONE", "new", "MapPropertySource", "(", ")", "(", ")", "ConfigDataEnvironmentTests", ".", "this", "(", ",", "source", ")", "\"", "test", "\"", "ConfigDataResource", ".", "class", "\"", "test", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 183, "ast_depth": 13, "n_identifiers": 19, "vocab_size": 54, "n_whitespaces": 82, "n_words": 59, "nloc": 12, "token_counts": 129}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java#267-289", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java", "language": "Java"}, "method": {"name": "processAndApplyIncludesProfilesFromSpringProfilesInclude", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentTests#processAndApplyIncludesProfilesFromSpringProfilesInclude", "start_line": 267, "end_line": 289, "signature": "processAndApplyIncludesProfilesFromSpringProfilesInclude(String property, TestInfo info)", "original_code": "@ParameterizedTest\n\t@ValueSource(strings = { \"spring.profiles.include\", \"spring.profiles.include[0]\" })\n\tvoid processAndApplyIncludesProfilesFromSpringProfilesInclude(String property, TestInfo info) {\n\t\tthis.environment.setProperty(\"spring.config.location\", getConfigLocation(info));\n\t\tConfigDataEnvironment configDataEnvironment = new ConfigDataEnvironment(this.logFactory, this.bootstrapContext,\n\t\t\t\tthis.environment, this.resourceLoader, this.additionalProfiles, null) {\n\n\t\t\t@Override\n\t\t\tprotected ConfigDataEnvironmentContributors createContributors(\n\t\t\t\t\tList<ConfigDataEnvironmentContributor> contributors) {\n\t\t\t\tMap<String, Object> source = new LinkedHashMap<>();\n\t\t\t\tsource.put(property, \"included\");\n\t\t\t\tConfigData data = new ConfigData(Collections.singleton(new MapPropertySource(\"test\", source)));\n\t\t\t\tcontributors.add(ConfigDataEnvironmentContributor.ofUnboundImport(ConfigDataLocation.of(\"test\"),\n\t\t\t\t\t\tmock(ConfigDataResource.class), false, data, 0,\n\t\t\t\t\t\tConfigDataEnvironmentTests.this.conversionService, ConfigDataEnvironmentUpdateListener.NONE));\n\t\t\t\treturn super.createContributors(contributors);\n\t\t\t}\n\n\t\t};\n\t\tconfigDataEnvironment.processAndApply();\n\t\tassertThat(this.environment.getActiveProfiles()).containsExactly(\"included\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "processAndApplyIncludesProfilesFromSpringProfilesInclude", "(", ",", ")", "{", "}", "@", "ParameterizedTest", "@", "ValueSource", "String", "property", "TestInfo", "info", ";", "ConfigDataEnvironment", ";", ";", ";", "(", ")", ".", "setProperty", "configDataEnvironment", "=", "configDataEnvironment", ".", "processAndApply", ".", "containsExactly", "strings", "=", "this", ".", "environment", "(", ",", ")", "new", "ConfigDataEnvironment", "(", ")", "assertThat", "(", ")", "{", ",", "}", "\"", "spring.config.location", "\"", "getConfigLocation", "(", ",", ",", ",", ",", ",", "null", ")", "{", "}", "(", ")", "\"", "included", "\"", "\"", "spring.profiles.include", "\"", "\"", "spring.profiles.include[0]", "\"", "(", "info", ")", "this", ".", "logFactory", "this", ".", "bootstrapContext", "this", ".", "environment", "this", ".", "resourceLoader", "this", ".", "additionalProfiles", "ConfigDataEnvironmentContributors", "createContributors", ".", "getActiveProfiles", "protected", "(", ")", "{", "}", "this", ".", "environment", "(", ")", "@", "Override", "contributors", ";", ";", "ConfigData", ";", ";", "return", ";", "List", "Map", "source", "=", "source", ".", "put", "data", "=", "contributors", ".", "add", "super", ".", "createContributors", "<", "ConfigDataEnvironmentContributor", ">", "<", "String", ",", "Object", ">", "new", "(", "property", ",", ")", "new", "ConfigData", "(", ")", "(", "contributors", ")", "LinkedHashMap", "(", ")", "\"", "included", "\"", "(", ")", "ConfigDataEnvironmentContributor", ".", "ofUnboundImport", "<", ">", "Collections", ".", "singleton", "(", ",", ",", "false", ",", "data", ",", "0", ",", ",", ")", "(", ")", "ConfigDataLocation", ".", "of", "mock", ".", "conversionService", "ConfigDataEnvironmentUpdateListener", ".", "NONE", "new", "MapPropertySource", "(", ")", "(", ")", "ConfigDataEnvironmentTests", ".", "this", "(", ",", "source", ")", "\"", "test", "\"", "ConfigDataResource", ".", "class", "\"", "test", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 300, "ast_depth": 19, "n_identifiers": 36, "vocab_size": 74, "n_whitespaces": 126, "n_words": 96, "nloc": 21, "token_counts": 211}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java#274-284", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java", "language": "Java"}, "method": {"name": "createContributors", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentTests#createContributors", "start_line": 274, "end_line": 284, "signature": "createContributors(\n\t\t\t\t\tList<ConfigDataEnvironmentContributor> contributors)", "original_code": "@Override\n\t\t\tprotected ConfigDataEnvironmentContributors createContributors(\n\t\t\t\t\tList<ConfigDataEnvironmentContributor> contributors) {\n\t\t\t\tMap<String, Object> source = new LinkedHashMap<>();\n\t\t\t\tsource.put(property, \"included\");\n\t\t\t\tConfigData data = new ConfigData(Collections.singleton(new MapPropertySource(\"test\", source)));\n\t\t\t\tcontributors.add(ConfigDataEnvironmentContributor.ofUnboundImport(ConfigDataLocation.of(\"test\"),\n\t\t\t\t\t\tmock(ConfigDataResource.class), false, data, 0,\n\t\t\t\t\t\tConfigDataEnvironmentTests.this.conversionService, ConfigDataEnvironmentUpdateListener.NONE));\n\t\t\t\treturn super.createContributors(contributors);\n\t\t\t}", "doc_comment": ""}, "code_tokens": ["ConfigDataEnvironmentContributors", "createContributors", "protected", "(", ")", "{", "}", "@", "Override", "contributors", ";", ";", "ConfigData", ";", ";", "return", ";", "List", "Map", "source", "=", "source", ".", "put", "data", "=", "contributors", ".", "add", "super", ".", "createContributors", "<", "ConfigDataEnvironmentContributor", ">", "<", "String", ",", "Object", ">", "new", "(", "property", ",", ")", "new", "ConfigData", "(", ")", "(", "contributors", ")", "LinkedHashMap", "(", ")", "\"", "included", "\"", "(", ")", "ConfigDataEnvironmentContributor", ".", "ofUnboundImport", "<", ">", "Collections", ".", "singleton", "(", ",", ",", "false", ",", "data", ",", "0", ",", ",", ")", "(", ")", "ConfigDataLocation", ".", "of", "mock", ".", "conversionService", "ConfigDataEnvironmentUpdateListener", ".", "NONE", "new", "MapPropertySource", "(", ")", "(", ")", "ConfigDataEnvironmentTests", ".", "this", "(", ",", "source", ")", "\"", "test", "\"", "ConfigDataResource", ".", "class", "\"", "test", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 159, "ast_depth": 13, "n_identifiers": 19, "vocab_size": 50, "n_whitespaces": 74, "n_words": 49, "nloc": 11, "token_counts": 112}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java#291-315", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java", "language": "Java"}, "method": {"name": "processAndApplyDoesNotSetProfilesFromIgnoreProfilesContributorsWhenNoProfilesActive", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentTests#processAndApplyDoesNotSetProfilesFromIgnoreProfilesContributorsWhenNoProfilesActive", "start_line": 291, "end_line": 315, "signature": "processAndApplyDoesNotSetProfilesFromIgnoreProfilesContributorsWhenNoProfilesActive(TestInfo info)", "original_code": "@Test\n\t@WithResource(name = \"application.properties\", content = \"spring=boot\")\n\tvoid processAndApplyDoesNotSetProfilesFromIgnoreProfilesContributorsWhenNoProfilesActive(TestInfo info) {\n\t\tConfigDataEnvironment configDataEnvironment = new ConfigDataEnvironment(this.logFactory, this.bootstrapContext,\n\t\t\t\tthis.environment, this.resourceLoader, this.additionalProfiles, null) {\n\n\t\t\t@Override\n\t\t\tprotected ConfigDataEnvironmentContributors createContributors(\n\t\t\t\t\tList<ConfigDataEnvironmentContributor> contributors) {\n\t\t\t\tMap<String, Object> source = new LinkedHashMap<>();\n\t\t\t\tsource.put(\"spring.profiles.active\", \"ignore1\");\n\t\t\t\tsource.put(\"spring.profiles.include\", \"ignore2\");\n\t\t\t\tConfigData data = new ConfigData(Collections.singleton(new MapPropertySource(\"test\", source)),\n\t\t\t\t\t\tConfigData.Option.IGNORE_PROFILES);\n\t\t\t\tcontributors.add(ConfigDataEnvironmentContributor.ofUnboundImport(ConfigDataLocation.of(\"test\"),\n\t\t\t\t\t\tmock(ConfigDataResource.class), false, data, 0,\n\t\t\t\t\t\tConfigDataEnvironmentTests.this.conversionService, ConfigDataEnvironmentUpdateListener.NONE));\n\t\t\t\treturn super.createContributors(contributors);\n\t\t\t}\n\n\t\t};\n\t\tconfigDataEnvironment.processAndApply();\n\t\tassertThat(this.environment.getActiveProfiles()).isEmpty();\n\t\tassertThat(this.environment.getProperty(\"spring\")).isEqualTo(\"boot\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "processAndApplyDoesNotSetProfilesFromIgnoreProfilesContributorsWhenNoProfilesActive", "(", ")", "{", "}", "@", "Test", "@", "WithResource", "TestInfo", "info", "ConfigDataEnvironment", ";", ";", ";", ";", "(", ",", ")", "configDataEnvironment", "=", "configDataEnvironment", ".", "processAndApply", ".", "isEmpty", ".", "isEqualTo", "name", "=", "content", "=", "new", "ConfigDataEnvironment", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "\"", "application.properties", "\"", "\"", "spring=boot", "\"", "(", ",", ",", ",", ",", ",", "null", ")", "{", "}", "(", ")", "(", ")", "\"", "boot", "\"", "this", ".", "logFactory", "this", ".", "bootstrapContext", "this", ".", "environment", "this", ".", "resourceLoader", "this", ".", "additionalProfiles", "ConfigDataEnvironmentContributors", "createContributors", ".", "getActiveProfiles", ".", "getProperty", "protected", "(", ")", "{", "}", "this", ".", "environment", "(", ")", "this", ".", "environment", "(", ")", "@", "Override", "contributors", ";", ";", ";", "ConfigData", ";", ";", "return", ";", "\"", "spring", "\"", "List", "Map", "source", "=", "source", ".", "put", "source", ".", "put", "data", "=", "contributors", ".", "add", "super", ".", "createContributors", "<", "ConfigDataEnvironmentContributor", ">", "<", "String", ",", "Object", ">", "new", "(", ",", ")", "(", ",", ")", "new", "ConfigData", "(", ")", "(", "contributors", ")", "LinkedHashMap", "(", ")", "\"", "spring.profiles.active", "\"", "\"", "ignore1", "\"", "\"", "spring.profiles.include", "\"", "\"", "ignore2", "\"", "(", ",", ")", "ConfigDataEnvironmentContributor", ".", "ofUnboundImport", "<", ">", "Collections", ".", "singleton", ".", "IGNORE_PROFILES", "(", ",", ",", "false", ",", "data", ",", "0", ",", ",", ")", "(", ")", "ConfigData", ".", "Option", "ConfigDataLocation", ".", "of", "mock", ".", "conversionService", "ConfigDataEnvironmentUpdateListener", ".", "NONE", "new", "MapPropertySource", "(", ")", "(", ")", "ConfigDataEnvironmentTests", ".", "this", "(", ",", "source", ")", "\"", "test", "\"", "ConfigDataResource", ".", "class", "\"", "test", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 329, "ast_depth": 19, "n_identifiers": 39, "vocab_size": 80, "n_whitespaces": 136, "n_words": 101, "nloc": 23, "token_counts": 231}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java#297-309", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java", "language": "Java"}, "method": {"name": "createContributors", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentTests#createContributors", "start_line": 297, "end_line": 309, "signature": "createContributors(\n\t\t\t\t\tList<ConfigDataEnvironmentContributor> contributors)", "original_code": "@Override\n\t\t\tprotected ConfigDataEnvironmentContributors createContributors(\n\t\t\t\t\tList<ConfigDataEnvironmentContributor> contributors) {\n\t\t\t\tMap<String, Object> source = new LinkedHashMap<>();\n\t\t\t\tsource.put(\"spring.profiles.active\", \"ignore1\");\n\t\t\t\tsource.put(\"spring.profiles.include\", \"ignore2\");\n\t\t\t\tConfigData data = new ConfigData(Collections.singleton(new MapPropertySource(\"test\", source)),\n\t\t\t\t\t\tConfigData.Option.IGNORE_PROFILES);\n\t\t\t\tcontributors.add(ConfigDataEnvironmentContributor.ofUnboundImport(ConfigDataLocation.of(\"test\"),\n\t\t\t\t\t\tmock(ConfigDataResource.class), false, data, 0,\n\t\t\t\t\t\tConfigDataEnvironmentTests.this.conversionService, ConfigDataEnvironmentUpdateListener.NONE));\n\t\t\t\treturn super.createContributors(contributors);\n\t\t\t}", "doc_comment": ""}, "code_tokens": ["ConfigDataEnvironmentContributors", "createContributors", "protected", "(", ")", "{", "}", "@", "Override", "contributors", ";", ";", ";", "ConfigData", ";", ";", "return", ";", "List", "Map", "source", "=", "source", ".", "put", "source", ".", "put", "data", "=", "contributors", ".", "add", "super", ".", "createContributors", "<", "ConfigDataEnvironmentContributor", ">", "<", "String", ",", "Object", ">", "new", "(", ",", ")", "(", ",", ")", "new", "ConfigData", "(", ")", "(", "contributors", ")", "LinkedHashMap", "(", ")", "\"", "spring.profiles.active", "\"", "\"", "ignore1", "\"", "\"", "spring.profiles.include", "\"", "\"", "ignore2", "\"", "(", ",", ")", "ConfigDataEnvironmentContributor", ".", "ofUnboundImport", "<", ">", "Collections", ".", "singleton", ".", "IGNORE_PROFILES", "(", ",", ",", "false", ",", "data", ",", "0", ",", ",", ")", "(", ")", "ConfigData", ".", "Option", "ConfigDataLocation", ".", "of", "mock", ".", "conversionService", "ConfigDataEnvironmentUpdateListener", ".", "NONE", "new", "MapPropertySource", "(", ")", "(", ")", "ConfigDataEnvironmentTests", ".", "this", "(", ",", "source", ")", "\"", "test", "\"", "ConfigDataResource", ".", "class", "\"", "test", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 188, "ast_depth": 13, "n_identifiers": 21, "vocab_size": 54, "n_whitespaces": 87, "n_words": 60, "nloc": 13, "token_counts": 133}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java#317-324", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java", "language": "Java"}, "method": {"name": "processAndApplyWhenHasInvalidPropertyThrowsException", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentTests#processAndApplyWhenHasInvalidPropertyThrowsException", "start_line": 317, "end_line": 324, "signature": "processAndApplyWhenHasInvalidPropertyThrowsException()", "original_code": "@Test\n\tvoid processAndApplyWhenHasInvalidPropertyThrowsException() {\n\t\tthis.environment.setProperty(\"spring.profiles\", \"a\");\n\t\tConfigDataEnvironment configDataEnvironment = new ConfigDataEnvironment(this.logFactory, this.bootstrapContext,\n\t\t\t\tthis.environment, this.resourceLoader, this.additionalProfiles, null);\n\t\tassertThatExceptionOfType(InvalidConfigDataPropertyException.class)\n\t\t\t.isThrownBy(configDataEnvironment::processAndApply);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "processAndApplyWhenHasInvalidPropertyThrowsException", "(", ")", "{", "}", "@", "Test", ";", "ConfigDataEnvironment", ";", ";", ".", "setProperty", "configDataEnvironment", "=", ".", "isThrownBy", "this", ".", "environment", "(", ",", ")", "new", "ConfigDataEnvironment", "assertThatExceptionOfType", "(", ")", "\"", "spring.profiles", "\"", "\"", "a", "\"", "(", ",", ",", ",", ",", ",", "null", ")", "(", ")", "configDataEnvironment", "::", "processAndApply", "this", ".", "logFactory", "this", ".", "bootstrapContext", "this", ".", "environment", "this", ".", "resourceLoader", "this", ".", "additionalProfiles", "InvalidConfigDataPropertyException", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 94, "ast_depth": 9, "n_identifiers": 12, "vocab_size": 32, "n_whitespaces": 33, "n_words": 30, "nloc": 8, "token_counts": 66}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java#326-340", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java", "language": "Java"}, "method": {"name": "processAndApplyWhenHasListenerCallsOnPropertySourceAdded", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentTests#processAndApplyWhenHasListenerCallsOnPropertySourceAdded", "start_line": 326, "end_line": 340, "signature": "processAndApplyWhenHasListenerCallsOnPropertySourceAdded(TestInfo info)", "original_code": "@Test\n\t@WithResource(name = \"custom/config.properties\", content = \"spring=boot\")\n\tvoid processAndApplyWhenHasListenerCallsOnPropertySourceAdded(TestInfo info) {\n\t\tthis.environment.setProperty(\"spring.config.location\", \"classpath:custom/config.properties\");\n\t\tTestConfigDataEnvironmentUpdateListener listener = new TestConfigDataEnvironmentUpdateListener();\n\t\tConfigDataEnvironment configDataEnvironment = new ConfigDataEnvironment(this.logFactory, this.bootstrapContext,\n\t\t\t\tthis.environment, this.resourceLoader, this.additionalProfiles, listener);\n\t\tconfigDataEnvironment.processAndApply();\n\t\tassertThat(listener.getAddedPropertySources()).hasSize(1);\n\t\tAddedPropertySource addedPropertySource = listener.getAddedPropertySources().get(0);\n\t\tassertThat(addedPropertySource.getPropertySource().getProperty(\"spring\")).isEqualTo(\"boot\");\n\t\tassertThat(addedPropertySource.getLocation()).hasToString(\"classpath:custom/config.properties\");\n\t\tassertThat(addedPropertySource.getResource().toString()).contains(\"class path resource\")\n\t\t\t.contains(\"custom/config.properties\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "processAndApplyWhenHasListenerCallsOnPropertySourceAdded", "(", ")", "{", "}", "@", "Test", "@", "WithResource", "TestInfo", "info", ";", "TestConfigDataEnvironmentUpdateListener", ";", "ConfigDataEnvironment", ";", ";", ";", "AddedPropertySource", ";", ";", ";", ";", "(", ",", ")", ".", "setProperty", "listener", "=", "configDataEnvironment", "=", "configDataEnvironment", ".", "processAndApply", ".", "hasSize", "addedPropertySource", "=", ".", "isEqualTo", ".", "hasToString", ".", "contains", "name", "=", "content", "=", "this", ".", "environment", "(", ",", ")", "new", "TestConfigDataEnvironmentUpdateListener", "new", "ConfigDataEnvironment", "(", ")", "assertThat", "(", "1", ")", ".", "get", "assertThat", "(", ")", "assertThat", "(", ")", ".", "contains", "(", ")", "\"", "custom/config.properties", "\"", "\"", "spring=boot", "\"", "\"", "spring.config.location", "\"", "\"", "classpath:custom/config.properties", "\"", "(", ")", "(", ",", ",", ",", ",", ",", "listener", ")", "(", ")", "listener", ".", "getAddedPropertySources", "(", "0", ")", "(", ")", "\"", "boot", "\"", "(", ")", "\"", "classpath:custom/config.properties", "\"", "assertThat", "(", ")", "\"", "custom/config.properties", "\"", "this", ".", "logFactory", "this", ".", "bootstrapContext", "this", ".", "environment", "this", ".", "resourceLoader", "this", ".", "additionalProfiles", "listener", ".", "getAddedPropertySources", "(", ")", ".", "getProperty", "addedPropertySource", ".", "getLocation", "(", ")", "\"", "class path resource", "\"", "(", ")", "addedPropertySource", ".", "getPropertySource", "(", ")", "(", ")", ".", "toString", "(", ")", "\"", "spring", "\"", "addedPropertySource", ".", "getResource", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 257, "ast_depth": 12, "n_identifiers": 28, "vocab_size": 54, "n_whitespaces": 68, "n_words": 82, "nloc": 15, "token_counts": 177}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java#342-350", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java", "language": "Java"}, "method": {"name": "processAndApplyWhenHasListenerCallsOnSetProfiles", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentTests#processAndApplyWhenHasListenerCallsOnSetProfiles", "start_line": 342, "end_line": 350, "signature": "processAndApplyWhenHasListenerCallsOnSetProfiles(TestInfo info)", "original_code": "@Test\n\t@WithResource(name = \"application.properties\", content = \"spring.profiles.active=one,two,three\")\n\tvoid processAndApplyWhenHasListenerCallsOnSetProfiles(TestInfo info) {\n\t\tTestConfigDataEnvironmentUpdateListener listener = new TestConfigDataEnvironmentUpdateListener();\n\t\tConfigDataEnvironment configDataEnvironment = new ConfigDataEnvironment(this.logFactory, this.bootstrapContext,\n\t\t\t\tthis.environment, this.resourceLoader, this.additionalProfiles, listener);\n\t\tconfigDataEnvironment.processAndApply();\n\t\tassertThat(listener.getProfiles().getActive()).containsExactly(\"one\", \"two\", \"three\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "processAndApplyWhenHasListenerCallsOnSetProfiles", "(", ")", "{", "}", "@", "Test", "@", "WithResource", "TestInfo", "info", "TestConfigDataEnvironmentUpdateListener", ";", "ConfigDataEnvironment", ";", ";", ";", "(", ",", ")", "listener", "=", "configDataEnvironment", "=", "configDataEnvironment", ".", "processAndApply", ".", "containsExactly", "name", "=", "content", "=", "new", "TestConfigDataEnvironmentUpdateListener", "new", "ConfigDataEnvironment", "(", ")", "assertThat", "(", ",", ",", ")", "\"", "application.properties", "\"", "\"", "spring.profiles.active=one,two,three", "\"", "(", ")", "(", ",", ",", ",", ",", ",", "listener", ")", "(", ")", "\"", "one", "\"", "\"", "two", "\"", "\"", "three", "\"", "this", ".", "logFactory", "this", ".", "bootstrapContext", "this", ".", "environment", "this", ".", "resourceLoader", "this", ".", "additionalProfiles", ".", "getActive", "listener", ".", "getProfiles", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 137, "ast_depth": 11, "n_identifiers": 18, "vocab_size": 39, "n_whitespaces": 45, "n_words": 45, "nloc": 9, "token_counts": 96}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java#352-378", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java", "language": "Java"}, "method": {"name": "configDataLoadersAreLoadedUsingClassLoaderFromResourceLoader", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentTests#configDataLoadersAreLoadedUsingClassLoaderFromResourceLoader", "start_line": 352, "end_line": 378, "signature": "configDataLoadersAreLoadedUsingClassLoaderFromResourceLoader()", "original_code": "@Test\n\t@SuppressWarnings(\"rawtypes\")\n\t@WithResource(name = \"separate-class-loader-spring.factories\", content = \"\"\"\n\t\t\torg.springframework.boot.context.config.ConfigDataLoader=\\\n\t\t\torg.springframework.boot.context.config.ConfigDataEnvironmentTests$SeparateClassLoaderConfigDataLoader\n\t\t\t\"\"\")\n\tvoid configDataLoadersAreLoadedUsingClassLoaderFromResourceLoader() {\n\t\tResourceLoader resourceLoader = mock(ResourceLoader.class);\n\t\tClassLoader classLoader = new ClassLoader(Thread.currentThread().getContextClassLoader()) {\n\n\t\t\t@Override\n\t\t\tpublic Enumeration<URL> getResources(String name) throws IOException {\n\t\t\t\tif (SpringFactoriesLoader.FACTORIES_RESOURCE_LOCATION.equals(name)) {\n\t\t\t\t\treturn super.getResources(\"separate-class-loader-spring.factories\");\n\t\t\t\t}\n\t\t\t\treturn super.getResources(name);\n\t\t\t}\n\n\t\t};\n\t\tgiven(resourceLoader.getClassLoader()).willReturn(classLoader);\n\t\tTestConfigDataEnvironment configDataEnvironment = new TestConfigDataEnvironment(this.logFactory,\n\t\t\t\tthis.bootstrapContext, this.environment, resourceLoader, this.additionalProfiles, null);\n\t\tassertThat(configDataEnvironment).extracting(\"loaders.loaders\")\n\t\t\t.asInstanceOf(InstanceOfAssertFactories.LIST)\n\t\t\t.extracting((item) -> (Class) item.getClass())\n\t\t\t.containsOnly(SeparateClassLoaderConfigDataLoader.class);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "configDataLoadersAreLoadedUsingClassLoaderFromResourceLoader", "(", ")", "{", "}", "@", "Test", "@", "SuppressWarnings", "@", "WithResource", "ResourceLoader", ";", "ClassLoader", ";", ";", "TestConfigDataEnvironment", ";", ";", "(", ")", "(", ",", ")", "resourceLoader", "=", "classLoader", "=", ".", "willReturn", "configDataEnvironment", "=", ".", "containsOnly", "\"", "rawtypes", "\"", "name", "=", "content", "=", "mock", "new", "ClassLoader", "given", "(", "classLoader", ")", "new", "TestConfigDataEnvironment", ".", "extracting", "(", ")", "\"", "separate-class-loader-spring.factories", "\"", "\"\"\"", "\n\t\t\torg.springframework.boot.context.config.ConfigDataLoader=", "\t\t\torg.springframework.boot.context.config.ConfigDataEnvironmentTests$SeparateClassLoaderConfigDataLoader\n\t\t\t", "\"\"\"", "(", ")", "(", ")", "{", "}", "(", ")", "(", ",", ",", ",", "resourceLoader", ",", ",", "null", ")", ".", "asInstanceOf", "(", ")", "SeparateClassLoaderConfigDataLoader", ".", "class", "ResourceLoader", ".", "class", ".", "getContextClassLoader", "getResources", "resourceLoader", ".", "getClassLoader", "this", ".", "logFactory", "this", ".", "bootstrapContext", "this", ".", "environment", "this", ".", "additionalProfiles", ".", "extracting", "(", ")", "->", "Thread", ".", "currentThread", "(", ")", "public", "Enumeration", "(", ")", "throws", "IOException", "{", "}", "(", ")", "assertThat", "(", ")", "InstanceOfAssertFactories", ".", "LIST", "(", "item", ")", "(", "Class", ")", "(", ")", "@", "Override", "<", "URL", ">", "String", "name", "if", "return", ";", "(", "configDataEnvironment", ")", "\"", "loaders.loaders", "\"", "item", ".", "getClass", "(", ")", "{", "}", "super", ".", "getResources", "(", ")", ".", "equals", "return", ";", "(", "name", ")", "SpringFactoriesLoader", ".", "FACTORIES_RESOURCE_LOCATION", "(", "name", ")", "super", ".", "getResources", "(", ")", "\"", "separate-class-loader-spring.factories", "\""], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 275, "ast_depth": 16, "n_identifiers": 33, "vocab_size": 71, "n_whitespaces": 126, "n_words": 99, "nloc": 25, "token_counts": 190}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java#362-368", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java", "language": "Java"}, "method": {"name": "getResources", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentTests#getResources", "start_line": 362, "end_line": 368, "signature": "getResources(String name)", "original_code": "@Override\n\t\t\tpublic Enumeration<URL> getResources(String name) throws IOException {\n\t\t\t\tif (SpringFactoriesLoader.FACTORIES_RESOURCE_LOCATION.equals(name)) {\n\t\t\t\t\treturn super.getResources(\"separate-class-loader-spring.factories\");\n\t\t\t\t}\n\t\t\t\treturn super.getResources(name);\n\t\t\t}", "doc_comment": ""}, "code_tokens": ["getResources", "public", "Enumeration", "(", ")", "throws", "IOException", "{", "}", "@", "Override", "<", "URL", ">", "String", "name", "if", "return", ";", "(", ")", "{", "}", "super", ".", "getResources", ".", "equals", "return", ";", "(", "name", ")", "SpringFactoriesLoader", ".", "FACTORIES_RESOURCE_LOCATION", "(", "name", ")", "super", ".", "getResources", "(", ")", "\"", "separate-class-loader-spring.factories", "\""], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 70, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 26, "n_whitespaces": 39, "n_words": 26, "nloc": 7, "token_counts": 47}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java#380-383", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java", "language": "Java"}, "method": {"name": "getConfigLocation", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentTests#getConfigLocation", "start_line": 380, "end_line": 383, "signature": "getConfigLocation(TestInfo info)", "original_code": "private String getConfigLocation(TestInfo info) {\n\t\treturn \"optional:classpath:\" + info.getTestClass().get().getName().replace('.', '/') + \"-\"\n\t\t\t\t+ info.getTestMethod().get().getName() + \".properties\";\n\t}", "doc_comment": ""}, "code_tokens": ["String", "getConfigLocation", "private", "(", ")", "{", "}", "TestInfo", "info", "return", ";", "+", "+", "\"", ".properties", "\"", "+", ".", "getName", "+", "\"", "-", "\"", ".", "get", "(", ")", "\"", "optional:classpath:", "\"", ".", "replace", "info", ".", "getTestMethod", "(", ")", ".", "getName", "(", "'.'", ",", "'/'", ")", "(", ")", ".", "get", "(", ")", "info", ".", "getTestClass", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 85, "ast_depth": 14, "n_identifiers": 7, "vocab_size": 25, "n_whitespaces": 23, "n_words": 18, "nloc": 4, "token_counts": 57}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java#396-401", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java", "language": "Java"}, "method": {"name": "createConfigDataLocationResolvers", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentTests#createConfigDataLocationResolvers", "start_line": 396, "end_line": 401, "signature": "createConfigDataLocationResolvers(DeferredLogFactory logFactory,\n\t\t\t\tConfigurableBootstrapContext bootstrapContext, Binder binder, ResourceLoader resourceLoader)", "original_code": "@Override\n\t\tprotected ConfigDataLocationResolvers createConfigDataLocationResolvers(DeferredLogFactory logFactory,\n\t\t\t\tConfigurableBootstrapContext bootstrapContext, Binder binder, ResourceLoader resourceLoader) {\n\t\t\tthis.configDataLocationResolversBinder = binder;\n\t\t\treturn super.createConfigDataLocationResolvers(logFactory, bootstrapContext, binder, resourceLoader);\n\t\t}", "doc_comment": ""}, "code_tokens": ["ConfigDataLocationResolvers", "createConfigDataLocationResolvers", "protected", "(", ",", ",", ",", ")", "{", "}", "@", "Override", "DeferredLogFactory", "logFactory", "ConfigurableBootstrapContext", "bootstrapContext", "Binder", "binder", "ResourceLoader", "resourceLoader", ";", "return", ";", "=", "binder", "super", ".", "createConfigDataLocationResolvers", "this", ".", "configDataLocationResolversBinder", "(", "logFactory", ",", "bootstrapContext", ",", "binder", ",", "resourceLoader", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 56, "ast_depth": 7, "n_identifiers": 7, "vocab_size": 25, "n_whitespaces": 34, "n_words": 22, "nloc": 6, "token_counts": 40}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java#403-405", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java", "language": "Java"}, "method": {"name": "getConfigDataLocationResolversBinder", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentTests#getConfigDataLocationResolversBinder", "start_line": 403, "end_line": 405, "signature": "getConfigDataLocationResolversBinder()", "original_code": "Binder getConfigDataLocationResolversBinder() {\n\t\t\treturn this.configDataLocationResolversBinder;\n\t\t}", "doc_comment": ""}, "code_tokens": ["Binder", "getConfigDataLocationResolversBinder", "(", ")", "{", "}", "return", ";", "this", ".", "configDataLocationResolversBinder"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 17, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 11, "n_whitespaces": 10, "n_words": 5, "nloc": 3, "token_counts": 11}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java#411-415", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java", "language": "Java"}, "method": {"name": "load", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataEnvironmentTests#load", "start_line": 411, "end_line": 415, "signature": "load(ConfigDataLoaderContext context, ConfigDataResource resource)", "original_code": "@Override\n\t\tpublic ConfigData load(ConfigDataLoaderContext context, ConfigDataResource resource)\n\t\t\t\tthrows IOException, ConfigDataResourceNotFoundException {\n\t\t\treturn null;\n\t\t}", "doc_comment": ""}, "code_tokens": ["ConfigData", "load", "public", "(", ",", ")", "throws", "IOException", ",", "ConfigDataResourceNotFoundException", "{", "}", "@", "Override", "ConfigDataLoaderContext", "context", "ConfigDataResource", "resource", "return", "null", ";"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 31, "ast_depth": 5, "n_identifiers": 4, "vocab_size": 20, "n_whitespaces": 24, "n_words": 13, "nloc": 5, "token_counts": 21}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java#62-71", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java", "language": "Java"}, "method": {"name": "createWhenLoaderHasDeferredLogFactoryParameterInjectsDeferredLogFactory", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataLoadersTests#createWhenLoaderHasDeferredLogFactoryParameterInjectsDeferredLogFactory", "start_line": 62, "end_line": 71, "signature": "createWhenLoaderHasDeferredLogFactoryParameterInjectsDeferredLogFactory()", "original_code": "@Test\n\tvoid createWhenLoaderHasDeferredLogFactoryParameterInjectsDeferredLogFactory() {\n\t\tMockSpringFactoriesLoader springFactoriesLoader = new MockSpringFactoriesLoader();\n\t\tspringFactoriesLoader.add(ConfigDataLoader.class, DeferredLogFactoryConfigDataLoader.class);\n\t\tConfigDataLoaders loaders = new ConfigDataLoaders(this.logFactory, this.bootstrapContext,\n\t\t\t\tspringFactoriesLoader);\n\t\tassertThat(loaders).extracting(\"loaders\")\n\t\t\t.asInstanceOf(InstanceOfAssertFactories.LIST)\n\t\t\t.satisfies(this::containsValidDeferredLogFactoryConfigDataLoader);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "createWhenLoaderHasDeferredLogFactoryParameterInjectsDeferredLogFactory", "(", ")", "{", "}", "@", "Test", "MockSpringFactoriesLoader", ";", ";", "ConfigDataLoaders", ";", ";", "springFactoriesLoader", "=", "springFactoriesLoader", ".", "add", "loaders", "=", ".", "satisfies", "new", "MockSpringFactoriesLoader", "(", ",", ")", "new", "ConfigDataLoaders", ".", "asInstanceOf", "(", ")", "(", ")", "ConfigDataLoader", ".", "class", "DeferredLogFactoryConfigDataLoader", ".", "class", "(", ",", ",", "springFactoriesLoader", ")", ".", "extracting", "(", ")", "this", "::", "containsValidDeferredLogFactoryConfigDataLoader", "this", ".", "logFactory", "this", ".", "bootstrapContext", "assertThat", "(", ")", "InstanceOfAssertFactories", ".", "LIST", "(", "loaders", ")", "\"", "loaders", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 105, "ast_depth": 10, "n_identifiers": 14, "vocab_size": 33, "n_whitespaces": 41, "n_words": 32, "nloc": 10, "token_counts": 72}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java#73-77", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java", "language": "Java"}, "method": {"name": "containsValidDeferredLogFactoryConfigDataLoader", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataLoadersTests#containsValidDeferredLogFactoryConfigDataLoader", "start_line": 73, "end_line": 77, "signature": "containsValidDeferredLogFactoryConfigDataLoader(List<?> list)", "original_code": "private void containsValidDeferredLogFactoryConfigDataLoader(List<?> list) {\n\t\tassertThat(list).hasSize(1);\n\t\tDeferredLogFactoryConfigDataLoader loader = (DeferredLogFactoryConfigDataLoader) list.get(0);\n\t\tassertThat(loader.getLogFactory()).isSameAs(this.logFactory);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "containsValidDeferredLogFactoryConfigDataLoader", "private", "(", ")", "{", "}", "list", ";", "DeferredLogFactoryConfigDataLoader", ";", ";", "List", ".", "hasSize", "loader", "=", ".", "isSameAs", "<", ">", "assertThat", "(", "1", ")", "(", "DeferredLogFactoryConfigDataLoader", ")", "assertThat", "(", ")", "?", "(", "list", ")", "list", ".", "get", "(", ")", "this", ".", "logFactory", "(", "0", ")", "loader", ".", "getLogFactory", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 78, "ast_depth": 10, "n_identifiers": 9, "vocab_size": 26, "n_whitespaces": 19, "n_words": 21, "nloc": 5, "token_counts": 51}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java#79-88", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java", "language": "Java"}, "method": {"name": "createWhenLoaderHasLogParameterThrowsException", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataLoadersTests#createWhenLoaderHasLogParameterThrowsException", "start_line": 79, "end_line": 88, "signature": "createWhenLoaderHasLogParameterThrowsException()", "original_code": "@Test\n\tvoid createWhenLoaderHasLogParameterThrowsException() {\n\t\tMockSpringFactoriesLoader springFactoriesLoader = new MockSpringFactoriesLoader();\n\t\tspringFactoriesLoader.add(ConfigDataLoader.class, LogConfigDataLoader.class);\n\t\tassertThatIllegalArgumentException()\n\t\t\t.isThrownBy(() -> new ConfigDataLoaders(this.logFactory, this.bootstrapContext, springFactoriesLoader))\n\t\t\t.havingCause()\n\t\t\t.isInstanceOf(IllegalArgumentException.class)\n\t\t\t.withMessageContaining(\"use DeferredLogFactory\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "createWhenLoaderHasLogParameterThrowsException", "(", ")", "{", "}", "@", "Test", "MockSpringFactoriesLoader", ";", ";", ";", "springFactoriesLoader", "=", "springFactoriesLoader", ".", "add", ".", "withMessageContaining", "new", "MockSpringFactoriesLoader", "(", ",", ")", ".", "isInstanceOf", "(", ")", "(", ")", "ConfigDataLoader", ".", "class", "LogConfigDataLoader", ".", "class", ".", "havingCause", "(", ")", "\"", "use DeferredLogFactory", "\"", ".", "isThrownBy", "(", ")", "IllegalArgumentException", ".", "class", "assertThatIllegalArgumentException", "(", ")", "(", ")", "->", "(", ")", "new", "ConfigDataLoaders", "(", ",", ",", "springFactoriesLoader", ")", "this", ".", "logFactory", "this", ".", "bootstrapContext"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 105, "ast_depth": 14, "n_identifiers": 11, "vocab_size": 32, "n_whitespaces": 42, "n_words": 29, "nloc": 10, "token_counts": 71}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java#90-96", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java", "language": "Java"}, "method": {"name": "createWhenLoaderHasBootstrapParametersInjectsBootstrapContext", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataLoadersTests#createWhenLoaderHasBootstrapParametersInjectsBootstrapContext", "start_line": 90, "end_line": 96, "signature": "createWhenLoaderHasBootstrapParametersInjectsBootstrapContext()", "original_code": "@Test\n\tvoid createWhenLoaderHasBootstrapParametersInjectsBootstrapContext() {\n\t\tMockSpringFactoriesLoader springFactoriesLoader = new MockSpringFactoriesLoader();\n\t\tspringFactoriesLoader.add(ConfigDataLoader.class, BootstrappingConfigDataLoader.class);\n\t\tnew ConfigDataLoaders(this.logFactory, this.bootstrapContext, springFactoriesLoader);\n\t\tassertThat(this.bootstrapContext.get(String.class)).isEqualTo(\"boot\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "createWhenLoaderHasBootstrapParametersInjectsBootstrapContext", "(", ")", "{", "}", "@", "Test", "MockSpringFactoriesLoader", ";", ";", ";", ";", "springFactoriesLoader", "=", "springFactoriesLoader", ".", "add", "new", "ConfigDataLoaders", ".", "isEqualTo", "new", "MockSpringFactoriesLoader", "(", ",", ")", "(", ",", ",", "springFactoriesLoader", ")", "assertThat", "(", ")", "(", ")", "ConfigDataLoader", ".", "class", "BootstrappingConfigDataLoader", ".", "class", "this", ".", "logFactory", "this", ".", "bootstrapContext", "(", ")", "\"", "boot", "\"", ".", "get", "this", ".", "bootstrapContext", "(", ")", "String", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 94, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 29, "n_whitespaces": 26, "n_words": 28, "nloc": 7, "token_counts": 64}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java#98-107", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java", "language": "Java"}, "method": {"name": "loadWhenSingleLoaderSupportsLocationReturnsLoadedConfigData", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataLoadersTests#loadWhenSingleLoaderSupportsLocationReturnsLoadedConfigData", "start_line": 98, "end_line": 107, "signature": "loadWhenSingleLoaderSupportsLocationReturnsLoadedConfigData()", "original_code": "@Test\n\tvoid loadWhenSingleLoaderSupportsLocationReturnsLoadedConfigData() throws Exception {\n\t\tMockSpringFactoriesLoader springFactoriesLoader = new MockSpringFactoriesLoader();\n\t\tspringFactoriesLoader.add(ConfigDataLoader.class, TestConfigDataLoader.class);\n\t\tConfigDataLoaders loaders = new ConfigDataLoaders(this.logFactory, this.bootstrapContext,\n\t\t\t\tspringFactoriesLoader);\n\t\tTestConfigDataResource location = new TestConfigDataResource(\"test\");\n\t\tConfigData loaded = loaders.load(this.context, location);\n\t\tassertThat(getLoader(loaded)).isInstanceOf(TestConfigDataLoader.class);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "loadWhenSingleLoaderSupportsLocationReturnsLoadedConfigData", "(", ")", "throws", "Exception", "{", "}", "@", "Test", "MockSpringFactoriesLoader", ";", ";", "ConfigDataLoaders", ";", "TestConfigDataResource", ";", "ConfigData", ";", ";", "springFactoriesLoader", "=", "springFactoriesLoader", ".", "add", "loaders", "=", "location", "=", "loaded", "=", ".", "isInstanceOf", "new", "MockSpringFactoriesLoader", "(", ",", ")", "new", "ConfigDataLoaders", "new", "TestConfigDataResource", "loaders", ".", "load", "assertThat", "(", ")", "(", ")", "ConfigDataLoader", ".", "class", "TestConfigDataLoader", ".", "class", "(", ",", ",", "springFactoriesLoader", ")", "(", ")", "(", ",", "location", ")", "(", ")", "TestConfigDataLoader", ".", "class", "this", ".", "logFactory", "this", ".", "bootstrapContext", "\"", "test", "\"", "this", ".", "context", "getLoader", "(", "loaded", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 128, "ast_depth": 10, "n_identifiers": 14, "vocab_size": 37, "n_whitespaces": 49, "n_words": 42, "nloc": 10, "token_counts": 88}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java#109-118", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java", "language": "Java"}, "method": {"name": "loadWhenMultipleLoadersSupportLocationThrowsException", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataLoadersTests#loadWhenMultipleLoadersSupportLocationThrowsException", "start_line": 109, "end_line": 118, "signature": "loadWhenMultipleLoadersSupportLocationThrowsException()", "original_code": "@Test\n\tvoid loadWhenMultipleLoadersSupportLocationThrowsException() {\n\t\tMockSpringFactoriesLoader springFactoriesLoader = new MockSpringFactoriesLoader();\n\t\tspringFactoriesLoader.add(ConfigDataLoader.class, AnotherConfigDataLoader.class, TestConfigDataLoader.class);\n\t\tConfigDataLoaders loaders = new ConfigDataLoaders(this.logFactory, this.bootstrapContext,\n\t\t\t\tspringFactoriesLoader);\n\t\tTestConfigDataResource location = new TestConfigDataResource(\"test\");\n\t\tassertThatIllegalStateException().isThrownBy(() -> loaders.load(this.context, location))\n\t\t\t.withMessageContaining(\"Multiple loaders found for resource 'test'\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "loadWhenMultipleLoadersSupportLocationThrowsException", "(", ")", "{", "}", "@", "Test", "MockSpringFactoriesLoader", ";", ";", "ConfigDataLoaders", ";", "TestConfigDataResource", ";", ";", "springFactoriesLoader", "=", "springFactoriesLoader", ".", "add", "loaders", "=", "location", "=", ".", "withMessageContaining", "new", "MockSpringFactoriesLoader", "(", ",", ",", ")", "new", "ConfigDataLoaders", "new", "TestConfigDataResource", ".", "isThrownBy", "(", ")", "(", ")", "ConfigDataLoader", ".", "class", "AnotherConfigDataLoader", ".", "class", "TestConfigDataLoader", ".", "class", "(", ",", ",", "springFactoriesLoader", ")", "(", ")", "assertThatIllegalStateException", "(", ")", "\"", "Multiple loaders found for resource 'test'", "\"", "this", ".", "logFactory", "this", ".", "bootstrapContext", "\"", "test", "\"", "(", ")", "->", "(", ")", "loaders", ".", "load", "(", ",", "location", ")", "this", ".", "context"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 129, "ast_depth": 12, "n_identifiers": 13, "vocab_size": 36, "n_whitespaces": 53, "n_words": 43, "nloc": 10, "token_counts": 89}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java#120-129", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java", "language": "Java"}, "method": {"name": "loadWhenNoLoaderSupportsLocationThrowsException", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataLoadersTests#loadWhenNoLoaderSupportsLocationThrowsException", "start_line": 120, "end_line": 129, "signature": "loadWhenNoLoaderSupportsLocationThrowsException()", "original_code": "@Test\n\tvoid loadWhenNoLoaderSupportsLocationThrowsException() {\n\t\tMockSpringFactoriesLoader springFactoriesLoader = new MockSpringFactoriesLoader();\n\t\tspringFactoriesLoader.add(ConfigDataLoader.class, NonLoadableConfigDataLoader.class);\n\t\tConfigDataLoaders loaders = new ConfigDataLoaders(this.logFactory, this.bootstrapContext,\n\t\t\t\tspringFactoriesLoader);\n\t\tTestConfigDataResource location = new TestConfigDataResource(\"test\");\n\t\tassertThatIllegalStateException().isThrownBy(() -> loaders.load(this.context, location))\n\t\t\t.withMessage(\"No loader found for resource 'test'\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "loadWhenNoLoaderSupportsLocationThrowsException", "(", ")", "{", "}", "@", "Test", "MockSpringFactoriesLoader", ";", ";", "ConfigDataLoaders", ";", "TestConfigDataResource", ";", ";", "springFactoriesLoader", "=", "springFactoriesLoader", ".", "add", "loaders", "=", "location", "=", ".", "withMessage", "new", "MockSpringFactoriesLoader", "(", ",", ")", "new", "ConfigDataLoaders", "new", "TestConfigDataResource", ".", "isThrownBy", "(", ")", "(", ")", "ConfigDataLoader", ".", "class", "NonLoadableConfigDataLoader", ".", "class", "(", ",", ",", "springFactoriesLoader", ")", "(", ")", "assertThatIllegalStateException", "(", ")", "\"", "No loader found for resource 'test'", "\"", "this", ".", "logFactory", "this", ".", "bootstrapContext", "\"", "test", "\"", "(", ")", "->", "(", ")", "loaders", ".", "load", "(", ",", "location", ")", "this", ".", "context"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 124, "ast_depth": 12, "n_identifiers": 13, "vocab_size": 35, "n_whitespaces": 52, "n_words": 41, "nloc": 10, "token_counts": 85}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java#131-140", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java", "language": "Java"}, "method": {"name": "loadWhenGenericTypeDoesNotMatchSkipsLoader", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataLoadersTests#loadWhenGenericTypeDoesNotMatchSkipsLoader", "start_line": 131, "end_line": 140, "signature": "loadWhenGenericTypeDoesNotMatchSkipsLoader()", "original_code": "@Test\n\tvoid loadWhenGenericTypeDoesNotMatchSkipsLoader() throws Exception {\n\t\tMockSpringFactoriesLoader springFactoriesLoader = new MockSpringFactoriesLoader();\n\t\tspringFactoriesLoader.add(ConfigDataLoader.class, OtherConfigDataLoader.class, SpecificConfigDataLoader.class);\n\t\tConfigDataLoaders loaders = new ConfigDataLoaders(this.logFactory, this.bootstrapContext,\n\t\t\t\tspringFactoriesLoader);\n\t\tTestConfigDataResource location = new TestConfigDataResource(\"test\");\n\t\tConfigData loaded = loaders.load(this.context, location);\n\t\tassertThat(getLoader(loaded)).isInstanceOf(SpecificConfigDataLoader.class);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "loadWhenGenericTypeDoesNotMatchSkipsLoader", "(", ")", "throws", "Exception", "{", "}", "@", "Test", "MockSpringFactoriesLoader", ";", ";", "ConfigDataLoaders", ";", "TestConfigDataResource", ";", "ConfigData", ";", ";", "springFactoriesLoader", "=", "springFactoriesLoader", ".", "add", "loaders", "=", "location", "=", "loaded", "=", ".", "isInstanceOf", "new", "MockSpringFactoriesLoader", "(", ",", ",", ")", "new", "ConfigDataLoaders", "new", "TestConfigDataResource", "loaders", ".", "load", "assertThat", "(", ")", "(", ")", "ConfigDataLoader", ".", "class", "OtherConfigDataLoader", ".", "class", "SpecificConfigDataLoader", ".", "class", "(", ",", ",", "springFactoriesLoader", ")", "(", ")", "(", ",", "location", ")", "(", ")", "SpecificConfigDataLoader", ".", "class", "this", ".", "logFactory", "this", ".", "bootstrapContext", "\"", "test", "\"", "this", ".", "context", "getLoader", "(", "loaded", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 133, "ast_depth": 10, "n_identifiers": 14, "vocab_size": 38, "n_whitespaces": 50, "n_words": 44, "nloc": 10, "token_counts": 92}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java#142-144", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java", "language": "Java"}, "method": {"name": "getLoader", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataLoadersTests#getLoader", "start_line": 142, "end_line": 144, "signature": "getLoader(ConfigData loaded)", "original_code": "private ConfigDataLoader<?> getLoader(ConfigData loaded) {\n\t\treturn (ConfigDataLoader<?>) loaded.getPropertySources().get(0).getProperty(\"loader\");\n\t}", "doc_comment": ""}, "code_tokens": ["getLoader", "private", "ConfigDataLoader", "(", ")", "{", "}", "<", ">", "ConfigData", "loaded", "return", ";", "?", "(", ")", "ConfigDataLoader", ".", "getProperty", "<", ">", ".", "get", "(", ")", "?", "loaded", ".", "getPropertySources", "(", "0", ")", "\"", "loader", "\"", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 58, "ast_depth": 10, "n_identifiers": 5, "vocab_size": 21, "n_whitespaces": 11, "n_words": 13, "nloc": 3, "token_counts": 37}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java#146-152", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java", "language": "Java"}, "method": {"name": "createConfigData", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataLoadersTests#createConfigData", "start_line": 146, "end_line": 152, "signature": "createConfigData(ConfigDataLoader<?> loader, ConfigDataResource resource)", "original_code": "private static ConfigData createConfigData(ConfigDataLoader<?> loader, ConfigDataResource resource) {\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tpropertySource.setProperty(\"loader\", loader);\n\t\tpropertySource.setProperty(\"resource\", resource);\n\t\tList<PropertySource<?>> propertySources = Arrays.asList(propertySource);\n\t\treturn new ConfigData(propertySources);\n\t}", "doc_comment": ""}, "code_tokens": ["ConfigData", "createConfigData", "private", "static", "(", ",", ")", "{", "}", "loader", "ConfigDataResource", "resource", "MockPropertySource", ";", ";", ";", ";", "return", ";", "ConfigDataLoader", "propertySource", "=", "propertySource", ".", "setProperty", "propertySource", ".", "setProperty", "List", "propertySources", "=", "new", "ConfigData", "<", ">", "new", "MockPropertySource", "(", ",", "loader", ")", "(", ",", "resource", ")", "<", ">", "Arrays", ".", "asList", "(", "propertySources", ")", "?", "(", ")", "\"", "loader", "\"", "\"", "resource", "\"", "PropertySource", "(", "propertySource", ")", "<", ">", "?"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 103, "ast_depth": 10, "n_identifiers": 8, "vocab_size": 30, "n_whitespaces": 35, "n_words": 30, "nloc": 7, "token_counts": 69}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java#162-165", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java", "language": "Java"}, "method": {"name": "toString", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataLoadersTests#toString", "start_line": 162, "end_line": 165, "signature": "toString()", "original_code": "@Override\n\t\tpublic String toString() {\n\t\t\treturn this.value;\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "toString", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "this", ".", "value"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java#182-185", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java", "language": "Java"}, "method": {"name": "load", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataLoadersTests#load", "start_line": 182, "end_line": 185, "signature": "load(ConfigDataLoaderContext context, ConfigDataResource resource)", "original_code": "@Override\n\t\tpublic ConfigData load(ConfigDataLoaderContext context, ConfigDataResource resource) throws IOException {\n\t\t\tthrow new AssertionError(\"Unexpected call\");\n\t\t}", "doc_comment": ""}, "code_tokens": ["ConfigData", "load", "public", "(", ",", ")", "throws", "IOException", "{", "}", "@", "Override", "ConfigDataLoaderContext", "context", "ConfigDataResource", "resource", "throw", ";", "new", "AssertionError", "(", ")", "\"", "Unexpected call", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 38, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 22, "n_whitespaces": 21, "n_words": 15, "nloc": 4, "token_counts": 25}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java#187-189", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java", "language": "Java"}, "method": {"name": "getLogFactory", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataLoadersTests#getLogFactory", "start_line": 187, "end_line": 189, "signature": "getLogFactory()", "original_code": "DeferredLogFactory getLogFactory() {\n\t\t\treturn this.logFactory;\n\t\t}", "doc_comment": ""}, "code_tokens": ["DeferredLogFactory", "getLogFactory", "(", ")", "{", "}", "return", ";", "this", ".", "logFactory"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 17, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 11, "n_whitespaces": 10, "n_words": 5, "nloc": 3, "token_counts": 11}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java#201-204", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java", "language": "Java"}, "method": {"name": "load", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataLoadersTests#load", "start_line": 201, "end_line": 204, "signature": "load(ConfigDataLoaderContext context, ConfigDataResource resource)", "original_code": "@Override\n\t\tpublic ConfigData load(ConfigDataLoaderContext context, ConfigDataResource resource) throws IOException {\n\t\t\tthrow new AssertionError(\"Unexpected call\");\n\t\t}", "doc_comment": ""}, "code_tokens": ["ConfigData", "load", "public", "(", ",", ")", "throws", "IOException", "{", "}", "@", "Override", "ConfigDataLoaderContext", "context", "ConfigDataResource", "resource", "throw", ";", "new", "AssertionError", "(", ")", "\"", "Unexpected call", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 38, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 22, "n_whitespaces": 21, "n_words": 15, "nloc": 4, "token_counts": 25}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java#219-222", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java", "language": "Java"}, "method": {"name": "load", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataLoadersTests#load", "start_line": 219, "end_line": 222, "signature": "load(ConfigDataLoaderContext context, ConfigDataResource resource)", "original_code": "@Override\n\t\tpublic ConfigData load(ConfigDataLoaderContext context, ConfigDataResource resource) throws IOException {\n\t\t\tthrow new AssertionError(\"Unexpected call\");\n\t\t}", "doc_comment": ""}, "code_tokens": ["ConfigData", "load", "public", "(", ",", ")", "throws", "IOException", "{", "}", "@", "Override", "ConfigDataLoaderContext", "context", "ConfigDataResource", "resource", "throw", ";", "new", "AssertionError", "(", ")", "\"", "Unexpected call", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 38, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 22, "n_whitespaces": 21, "n_words": 15, "nloc": 4, "token_counts": 25}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java#228-231", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java", "language": "Java"}, "method": {"name": "load", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataLoadersTests#load", "start_line": 228, "end_line": 231, "signature": "load(ConfigDataLoaderContext context, ConfigDataResource resource)", "original_code": "@Override\n\t\tpublic ConfigData load(ConfigDataLoaderContext context, ConfigDataResource resource) throws IOException {\n\t\t\treturn createConfigData(this, resource);\n\t\t}", "doc_comment": ""}, "code_tokens": ["ConfigData", "load", "public", "(", ",", ")", "throws", "IOException", "{", "}", "@", "Override", "ConfigDataLoaderContext", "context", "ConfigDataResource", "resource", "return", ";", "createConfigData", "(", "this", ",", "resource", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 36, "ast_depth": 7, "n_identifiers": 5, "vocab_size": 20, "n_whitespaces": 20, "n_words": 14, "nloc": 4, "token_counts": 24}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java#237-240", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java", "language": "Java"}, "method": {"name": "load", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataLoadersTests#load", "start_line": 237, "end_line": 240, "signature": "load(ConfigDataLoaderContext context, ConfigDataResource resource)", "original_code": "@Override\n\t\tpublic ConfigData load(ConfigDataLoaderContext context, ConfigDataResource resource) throws IOException {\n\t\t\treturn createConfigData(this, resource);\n\t\t}", "doc_comment": ""}, "code_tokens": ["ConfigData", "load", "public", "(", ",", ")", "throws", "IOException", "{", "}", "@", "Override", "ConfigDataLoaderContext", "context", "ConfigDataResource", "resource", "return", ";", "createConfigData", "(", "this", ",", "resource", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 36, "ast_depth": 7, "n_identifiers": 5, "vocab_size": 20, "n_whitespaces": 20, "n_words": 14, "nloc": 4, "token_counts": 24}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java#246-249", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java", "language": "Java"}, "method": {"name": "isLoadable", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataLoadersTests#isLoadable", "start_line": 246, "end_line": 249, "signature": "isLoadable(ConfigDataLoaderContext context, ConfigDataResource resource)", "original_code": "@Override\n\t\tpublic boolean isLoadable(ConfigDataLoaderContext context, ConfigDataResource resource) {\n\t\t\treturn false;\n\t\t}", "doc_comment": ""}, "code_tokens": ["boolean", "isLoadable", "public", "(", ",", ")", "{", "}", "@", "Override", "ConfigDataLoaderContext", "context", "ConfigDataResource", "resource", "return", "false", ";"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 26, "ast_depth": 5, "n_identifiers": 4, "vocab_size": 17, "n_whitespaces": 17, "n_words": 10, "nloc": 4, "token_counts": 17}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java#255-258", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java", "language": "Java"}, "method": {"name": "load", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataLoadersTests#load", "start_line": 255, "end_line": 258, "signature": "load(ConfigDataLoaderContext context, TestConfigDataResource location)", "original_code": "@Override\n\t\tpublic ConfigData load(ConfigDataLoaderContext context, TestConfigDataResource location) throws IOException {\n\t\t\treturn createConfigData(this, location);\n\t\t}", "doc_comment": ""}, "code_tokens": ["ConfigData", "load", "public", "(", ",", ")", "throws", "IOException", "{", "}", "@", "Override", "ConfigDataLoaderContext", "context", "TestConfigDataResource", "location", "return", ";", "createConfigData", "(", "this", ",", "location", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 36, "ast_depth": 7, "n_identifiers": 5, "vocab_size": 20, "n_whitespaces": 20, "n_words": 14, "nloc": 4, "token_counts": 24}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java#264-267", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java", "language": "Java"}, "method": {"name": "load", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataLoadersTests#load", "start_line": 264, "end_line": 267, "signature": "load(ConfigDataLoaderContext context, OtherConfigDataResource location)", "original_code": "@Override\n\t\tpublic ConfigData load(ConfigDataLoaderContext context, OtherConfigDataResource location) throws IOException {\n\t\t\treturn createConfigData(this, location);\n\t\t}", "doc_comment": ""}, "code_tokens": ["ConfigData", "load", "public", "(", ",", ")", "throws", "IOException", "{", "}", "@", "Override", "ConfigDataLoaderContext", "context", "OtherConfigDataResource", "location", "return", ";", "createConfigData", "(", "this", ",", "location", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 36, "ast_depth": 7, "n_identifiers": 5, "vocab_size": 20, "n_whitespaces": 20, "n_words": 14, "nloc": 4, "token_counts": 24}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLocationResolversTests.java#70-80", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLocationResolversTests.java", "language": "Java"}, "method": {"name": "createWhenInjectingDeferredLogFactoryCreatesResolver", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataLocationResolversTests#createWhenInjectingDeferredLogFactoryCreatesResolver", "start_line": 70, "end_line": 80, "signature": "createWhenInjectingDeferredLogFactoryCreatesResolver()", "original_code": "@Test\n\tvoid createWhenInjectingDeferredLogFactoryCreatesResolver() {\n\t\tMockSpringFactoriesLoader springFactoriesLoader = new MockSpringFactoriesLoader();\n\t\tspringFactoriesLoader.add(ConfigDataLocationResolver.class, TestLogResolver.class);\n\t\tConfigDataLocationResolvers resolvers = new ConfigDataLocationResolvers(this.logFactory, this.bootstrapContext,\n\t\t\t\tthis.binder, new DefaultResourceLoader(), springFactoriesLoader);\n\t\tassertThat(resolvers.getResolvers()).hasSize(1);\n\t\tassertThat(resolvers.getResolvers().get(0)).isExactlyInstanceOf(TestLogResolver.class);\n\t\tTestLogResolver resolver = (TestLogResolver) resolvers.getResolvers().get(0);\n\t\tassertThat(resolver.getDeferredLogFactory()).isSameAs(this.logFactory);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "createWhenInjectingDeferredLogFactoryCreatesResolver", "(", ")", "{", "}", "@", "Test", "MockSpringFactoriesLoader", ";", ";", "ConfigDataLocationResolvers", ";", ";", ";", "TestLogResolver", ";", ";", "springFactoriesLoader", "=", "springFactoriesLoader", ".", "add", "resolvers", "=", ".", "hasSize", ".", "isExactlyInstanceOf", "resolver", "=", ".", "isSameAs", "new", "MockSpringFactoriesLoader", "(", ",", ")", "new", "ConfigDataLocationResolvers", "assertThat", "(", "1", ")", "assertThat", "(", ")", "(", "TestLogResolver", ")", "assertThat", "(", ")", "(", ")", "ConfigDataLocationResolver", ".", "class", "TestLogResolver", ".", "class", "(", ",", ",", ",", ",", "springFactoriesLoader", ")", "(", ")", "(", ")", "TestLogResolver", ".", "class", ".", "get", "(", ")", "this", ".", "logFactory", "this", ".", "logFactory", "this", ".", "bootstrapContext", "this", ".", "binder", "new", "DefaultResourceLoader", "resolvers", ".", "getResolvers", ".", "get", "resolvers", ".", "getResolvers", "(", "0", ")", "resolver", ".", "getDeferredLogFactory", "(", ")", "(", ")", "resolvers", ".", "getResolvers", "(", "0", ")", "(", ")", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 179, "ast_depth": 11, "n_identifiers": 16, "vocab_size": 36, "n_whitespaces": 49, "n_words": 52, "nloc": 11, "token_counts": 123}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLocationResolversTests.java#82-91", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLocationResolversTests.java", "language": "Java"}, "method": {"name": "createWhenInjectingBinderCreatesResolver", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataLocationResolversTests#createWhenInjectingBinderCreatesResolver", "start_line": 82, "end_line": 91, "signature": "createWhenInjectingBinderCreatesResolver()", "original_code": "@Test\n\tvoid createWhenInjectingBinderCreatesResolver() {\n\t\tMockSpringFactoriesLoader springFactoriesLoader = new MockSpringFactoriesLoader();\n\t\tspringFactoriesLoader.add(ConfigDataLocationResolver.class, TestBoundResolver.class);\n\t\tConfigDataLocationResolvers resolvers = new ConfigDataLocationResolvers(this.logFactory, this.bootstrapContext,\n\t\t\t\tthis.binder, new DefaultResourceLoader(), springFactoriesLoader);\n\t\tassertThat(resolvers.getResolvers()).hasSize(1);\n\t\tassertThat(resolvers.getResolvers().get(0)).isExactlyInstanceOf(TestBoundResolver.class);\n\t\tassertThat(((TestBoundResolver) resolvers.getResolvers().get(0)).getBinder()).isSameAs(this.binder);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "createWhenInjectingBinderCreatesResolver", "(", ")", "{", "}", "@", "Test", "MockSpringFactoriesLoader", ";", ";", "ConfigDataLocationResolvers", ";", ";", ";", ";", "springFactoriesLoader", "=", "springFactoriesLoader", ".", "add", "resolvers", "=", ".", "hasSize", ".", "isExactlyInstanceOf", ".", "isSameAs", "new", "MockSpringFactoriesLoader", "(", ",", ")", "new", "ConfigDataLocationResolvers", "assertThat", "(", "1", ")", "assertThat", "(", ")", "assertThat", "(", ")", "(", ")", "ConfigDataLocationResolver", ".", "class", "TestBoundResolver", ".", "class", "(", ",", ",", ",", ",", "springFactoriesLoader", ")", "(", ")", "(", ")", "TestBoundResolver", ".", "class", "(", ")", "this", ".", "binder", "this", ".", "logFactory", "this", ".", "bootstrapContext", "this", ".", "binder", "new", "DefaultResourceLoader", "resolvers", ".", "getResolvers", ".", "get", ".", "getBinder", "(", ")", "(", ")", "resolvers", ".", "getResolvers", "(", "0", ")", "(", ")", "(", ")", "(", ")", "(", "TestBoundResolver", ")", ".", "get", "resolvers", ".", "getResolvers", "(", "0", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 175, "ast_depth": 14, "n_identifiers": 15, "vocab_size": 35, "n_whitespaces": 43, "n_words": 49, "nloc": 10, "token_counts": 120}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLocationResolversTests.java#93-101", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLocationResolversTests.java", "language": "Java"}, "method": {"name": "createWhenNotInjectingBinderCreatesResolver", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataLocationResolversTests#createWhenNotInjectingBinderCreatesResolver", "start_line": 93, "end_line": 101, "signature": "createWhenNotInjectingBinderCreatesResolver()", "original_code": "@Test\n\tvoid createWhenNotInjectingBinderCreatesResolver() {\n\t\tMockSpringFactoriesLoader springFactoriesLoader = new MockSpringFactoriesLoader();\n\t\tspringFactoriesLoader.add(ConfigDataLocationResolver.class, TestResolver.class);\n\t\tConfigDataLocationResolvers resolvers = new ConfigDataLocationResolvers(this.logFactory, this.bootstrapContext,\n\t\t\t\tthis.binder, new DefaultResourceLoader(), springFactoriesLoader);\n\t\tassertThat(resolvers.getResolvers()).hasSize(1);\n\t\tassertThat(resolvers.getResolvers().get(0)).isExactlyInstanceOf(TestResolver.class);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "createWhenNotInjectingBinderCreatesResolver", "(", ")", "{", "}", "@", "Test", "MockSpringFactoriesLoader", ";", ";", "ConfigDataLocationResolvers", ";", ";", ";", "springFactoriesLoader", "=", "springFactoriesLoader", ".", "add", "resolvers", "=", ".", "hasSize", ".", "isExactlyInstanceOf", "new", "MockSpringFactoriesLoader", "(", ",", ")", "new", "ConfigDataLocationResolvers", "assertThat", "(", "1", ")", "assertThat", "(", ")", "(", ")", "ConfigDataLocationResolver", ".", "class", "TestResolver", ".", "class", "(", ",", ",", ",", ",", "springFactoriesLoader", ")", "(", ")", "(", ")", "TestResolver", ".", "class", "this", ".", "logFactory", "this", ".", "bootstrapContext", "this", ".", "binder", "new", "DefaultResourceLoader", "resolvers", ".", "getResolvers", ".", "get", "(", ")", "(", ")", "resolvers", ".", "getResolvers", "(", "0", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 131, "ast_depth": 11, "n_identifiers": 13, "vocab_size": 33, "n_whitespaces": 39, "n_words": 39, "nloc": 9, "token_counts": 90}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLocationResolversTests.java#103-110", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLocationResolversTests.java", "language": "Java"}, "method": {"name": "createWhenResolverHasBootstrapParametersInjectsBootstrapContext", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataLocationResolversTests#createWhenResolverHasBootstrapParametersInjectsBootstrapContext", "start_line": 103, "end_line": 110, "signature": "createWhenResolverHasBootstrapParametersInjectsBootstrapContext()", "original_code": "@Test\n\tvoid createWhenResolverHasBootstrapParametersInjectsBootstrapContext() {\n\t\tMockSpringFactoriesLoader springFactoriesLoader = new MockSpringFactoriesLoader();\n\t\tspringFactoriesLoader.add(ConfigDataLocationResolver.class, TestBootstrappingResolver.class);\n\t\tnew ConfigDataLocationResolvers(this.logFactory, this.bootstrapContext, this.binder,\n\t\t\t\tnew DefaultResourceLoader(), springFactoriesLoader);\n\t\tassertThat(this.bootstrapContext.get(String.class)).isEqualTo(\"boot\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "createWhenResolverHasBootstrapParametersInjectsBootstrapContext", "(", ")", "{", "}", "@", "Test", "MockSpringFactoriesLoader", ";", ";", ";", ";", "springFactoriesLoader", "=", "springFactoriesLoader", ".", "add", "new", "ConfigDataLocationResolvers", ".", "isEqualTo", "new", "MockSpringFactoriesLoader", "(", ",", ")", "(", ",", ",", ",", ",", "springFactoriesLoader", ")", "assertThat", "(", ")", "(", ")", "ConfigDataLocationResolver", ".", "class", "TestBootstrappingResolver", ".", "class", "this", ".", "logFactory", "this", ".", "bootstrapContext", "this", ".", "binder", "new", "DefaultResourceLoader", "(", ")", "\"", "boot", "\"", "(", ")", ".", "get", "this", ".", "bootstrapContext", "(", ")", "String", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 106, "ast_depth": 11, "n_identifiers": 10, "vocab_size": 31, "n_whitespaces": 33, "n_words": 32, "nloc": 8, "token_counts": 73}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLocationResolversTests.java#112-122", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLocationResolversTests.java", "language": "Java"}, "method": {"name": "createOrdersResolvers", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataLocationResolversTests#createOrdersResolvers", "start_line": 112, "end_line": 122, "signature": "createOrdersResolvers()", "original_code": "@Test\n\tvoid createOrdersResolvers() {\n\t\tMockSpringFactoriesLoader springFactoriesLoader = new MockSpringFactoriesLoader();\n\t\tspringFactoriesLoader.add(ConfigDataLocationResolver.class, TestResolver.class, LowestTestResolver.class,\n\t\t\t\tHighestTestResolver.class);\n\t\tConfigDataLocationResolvers resolvers = new ConfigDataLocationResolvers(this.logFactory, this.bootstrapContext,\n\t\t\t\tthis.binder, new DefaultResourceLoader(), springFactoriesLoader);\n\t\tassertThat(resolvers.getResolvers().get(0)).isExactlyInstanceOf(HighestTestResolver.class);\n\t\tassertThat(resolvers.getResolvers().get(1)).isExactlyInstanceOf(TestResolver.class);\n\t\tassertThat(resolvers.getResolvers().get(2)).isExactlyInstanceOf(LowestTestResolver.class);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "createOrdersResolvers", "(", ")", "{", "}", "@", "Test", "MockSpringFactoriesLoader", ";", ";", "ConfigDataLocationResolvers", ";", ";", ";", ";", "springFactoriesLoader", "=", "springFactoriesLoader", ".", "add", "resolvers", "=", ".", "isExactlyInstanceOf", ".", "isExactlyInstanceOf", ".", "isExactlyInstanceOf", "new", "MockSpringFactoriesLoader", "(", ",", ",", ",", ")", "new", "ConfigDataLocationResolvers", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "(", ")", "ConfigDataLocationResolver", ".", "class", "TestResolver", ".", "class", "LowestTestResolver", ".", "class", "HighestTestResolver", ".", "class", "(", ",", ",", ",", ",", "springFactoriesLoader", ")", "(", ")", "HighestTestResolver", ".", "class", "(", ")", "TestResolver", ".", "class", "(", ")", "LowestTestResolver", ".", "class", "this", ".", "logFactory", "this", ".", "bootstrapContext", "this", ".", "binder", "new", "DefaultResourceLoader", ".", "get", ".", "get", ".", "get", "(", ")", "resolvers", ".", "getResolvers", "(", "0", ")", "resolvers", ".", "getResolvers", "(", "1", ")", "resolvers", ".", "getResolvers", "(", "2", ")", "(", ")", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 182, "ast_depth": 11, "n_identifiers": 12, "vocab_size": 35, "n_whitespaces": 48, "n_words": 54, "nloc": 11, "token_counts": 126}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLocationResolversTests.java#124-138", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLocationResolversTests.java", "language": "Java"}, "method": {"name": "resolveResolvesUsingFirstSupportedResolver", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataLocationResolversTests#resolveResolvesUsingFirstSupportedResolver", "start_line": 124, "end_line": 138, "signature": "resolveResolvesUsingFirstSupportedResolver()", "original_code": "@Test\n\tvoid resolveResolvesUsingFirstSupportedResolver() {\n\t\tMockSpringFactoriesLoader springFactoriesLoader = new MockSpringFactoriesLoader();\n\t\tspringFactoriesLoader.add(ConfigDataLocationResolver.class, LowestTestResolver.class,\n\t\t\t\tHighestTestResolver.class);\n\t\tConfigDataLocationResolvers resolvers = new ConfigDataLocationResolvers(this.logFactory, this.bootstrapContext,\n\t\t\t\tthis.binder, new DefaultResourceLoader(), springFactoriesLoader);\n\t\tConfigDataLocation location = ConfigDataLocation.of(\"LowestTestResolver:test\");\n\t\tList<ConfigDataResolutionResult> resolved = resolvers.resolve(this.context, location, null);\n\t\tassertThat(resolved).hasSize(1);\n\t\tTestConfigDataResource resource = (TestConfigDataResource) resolved.get(0).getResource();\n\t\tassertThat(resource.getResolver()).isInstanceOf(LowestTestResolver.class);\n\t\tassertThat(resource.getLocation()).isEqualTo(location);\n\t\tassertThat(resource.isProfileSpecific()).isFalse();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "resolveResolvesUsingFirstSupportedResolver", "(", ")", "{", "}", "@", "Test", "MockSpringFactoriesLoader", ";", ";", "ConfigDataLocationResolvers", ";", "ConfigDataLocation", ";", ";", ";", "TestConfigDataResource", ";", ";", ";", ";", "springFactoriesLoader", "=", "springFactoriesLoader", ".", "add", "resolvers", "=", "location", "=", "List", "resolved", "=", ".", "hasSize", "resource", "=", ".", "isInstanceOf", ".", "isEqualTo", ".", "isFalse", "new", "MockSpringFactoriesLoader", "(", ",", ",", ")", "new", "ConfigDataLocationResolvers", "ConfigDataLocation", ".", "of", "<", "ConfigDataResolutionResult", ">", "resolvers", ".", "resolve", "assertThat", "(", "1", ")", "(", "TestConfigDataResource", ")", "assertThat", "(", ")", "assertThat", "(", "location", ")", "assertThat", "(", ")", "(", ")", "ConfigDataLocationResolver", ".", "class", "LowestTestResolver", ".", "class", "HighestTestResolver", ".", "class", "(", ",", ",", ",", ",", "springFactoriesLoader", ")", "(", ")", "(", ",", "location", ",", "null", ")", "(", "resolved", ")", ".", "getResource", "(", ")", "LowestTestResolver", ".", "class", "(", ")", "(", ")", "this", ".", "logFactory", "this", ".", "bootstrapContext", "this", ".", "binder", "new", "DefaultResourceLoader", "\"", "LowestTestResolver:test", "\"", "this", ".", "context", "resolved", ".", "get", "(", ")", "resource", ".", "getResolver", "resource", ".", "getLocation", "resource", ".", "isProfileSpecific", "(", ")", "(", "0", ")", "(", ")", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 231, "ast_depth": 10, "n_identifiers": 25, "vocab_size": 54, "n_whitespaces": 71, "n_words": 69, "nloc": 15, "token_counts": 160}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLocationResolversTests.java#140-158", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLocationResolversTests.java", "language": "Java"}, "method": {"name": "resolveWhenProfileMergesResolvedLocations", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataLocationResolversTests#resolveWhenProfileMergesResolvedLocations", "start_line": 140, "end_line": 158, "signature": "resolveWhenProfileMergesResolvedLocations()", "original_code": "@Test\n\tvoid resolveWhenProfileMergesResolvedLocations() {\n\t\tMockSpringFactoriesLoader springFactoriesLoader = new MockSpringFactoriesLoader();\n\t\tspringFactoriesLoader.add(ConfigDataLocationResolver.class, LowestTestResolver.class,\n\t\t\t\tHighestTestResolver.class);\n\t\tConfigDataLocationResolvers resolvers = new ConfigDataLocationResolvers(this.logFactory, this.bootstrapContext,\n\t\t\t\tthis.binder, new DefaultResourceLoader(), springFactoriesLoader);\n\t\tConfigDataLocation location = ConfigDataLocation.of(\"LowestTestResolver:test\");\n\t\tList<ConfigDataResolutionResult> resolved = resolvers.resolve(this.context, location, this.profiles);\n\t\tassertThat(resolved).hasSize(2);\n\t\tTestConfigDataResource resource = (TestConfigDataResource) resolved.get(0).getResource();\n\t\tassertThat(resource.getResolver()).isInstanceOf(LowestTestResolver.class);\n\t\tassertThat(resource.getLocation()).isEqualTo(location);\n\t\tassertThat(resource.isProfileSpecific()).isFalse();\n\t\tTestConfigDataResource profileResource = (TestConfigDataResource) resolved.get(1).getResource();\n\t\tassertThat(profileResource.getResolver()).isInstanceOf(LowestTestResolver.class);\n\t\tassertThat(profileResource.getLocation()).isEqualTo(location);\n\t\tassertThat(profileResource.isProfileSpecific()).isTrue();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "resolveWhenProfileMergesResolvedLocations", "(", ")", "{", "}", "@", "Test", "MockSpringFactoriesLoader", ";", ";", "ConfigDataLocationResolvers", ";", "ConfigDataLocation", ";", ";", ";", "TestConfigDataResource", ";", ";", ";", ";", "TestConfigDataResource", ";", ";", ";", ";", "springFactoriesLoader", "=", "springFactoriesLoader", ".", "add", "resolvers", "=", "location", "=", "List", "resolved", "=", ".", "hasSize", "resource", "=", ".", "isInstanceOf", ".", "isEqualTo", ".", "isFalse", "profileResource", "=", ".", "isInstanceOf", ".", "isEqualTo", ".", "isTrue", "new", "MockSpringFactoriesLoader", "(", ",", ",", ")", "new", "ConfigDataLocationResolvers", "ConfigDataLocation", ".", "of", "<", "ConfigDataResolutionResult", ">", "resolvers", ".", "resolve", "assertThat", "(", "2", ")", "(", "TestConfigDataResource", ")", "assertThat", "(", ")", "assertThat", "(", "location", ")", "assertThat", "(", ")", "(", "TestConfigDataResource", ")", "assertThat", "(", ")", "assertThat", "(", "location", ")", "assertThat", "(", ")", "(", ")", "ConfigDataLocationResolver", ".", "class", "LowestTestResolver", ".", "class", "HighestTestResolver", ".", "class", "(", ",", ",", ",", ",", "springFactoriesLoader", ")", "(", ")", "(", ",", "location", ",", ")", "(", "resolved", ")", ".", "getResource", "(", ")", "LowestTestResolver", ".", "class", "(", ")", "(", ")", ".", "getResource", "(", ")", "LowestTestResolver", ".", "class", "(", ")", "(", ")", "this", ".", "logFactory", "this", ".", "bootstrapContext", "this", ".", "binder", "new", "DefaultResourceLoader", "\"", "LowestTestResolver:test", "\"", "this", ".", "context", "this", ".", "profiles", "resolved", ".", "get", "(", ")", "resource", ".", "getResolver", "resource", ".", "getLocation", "resource", ".", "isProfileSpecific", "resolved", ".", "get", "(", ")", "profileResource", ".", "getResolver", "profileResource", ".", "getLocation", "profileResource", ".", "isProfileSpecific", "(", ")", "(", "0", ")", "(", ")", "(", ")", "(", ")", "(", "1", ")", "(", ")", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 323, "ast_depth": 10, "n_identifiers": 28, "vocab_size": 57, "n_whitespaces": 87, "n_words": 92, "nloc": 19, "token_counts": 222}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLocationResolversTests.java#160-171", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLocationResolversTests.java", "language": "Java"}, "method": {"name": "resolveWhenNoResolverThrowsException", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataLocationResolversTests#resolveWhenNoResolverThrowsException", "start_line": 160, "end_line": 171, "signature": "resolveWhenNoResolverThrowsException()", "original_code": "@Test\n\tvoid resolveWhenNoResolverThrowsException() {\n\t\tMockSpringFactoriesLoader springFactoriesLoader = new MockSpringFactoriesLoader();\n\t\tspringFactoriesLoader.add(ConfigDataLocationResolver.class, LowestTestResolver.class,\n\t\t\t\tHighestTestResolver.class);\n\t\tConfigDataLocationResolvers resolvers = new ConfigDataLocationResolvers(this.logFactory, this.bootstrapContext,\n\t\t\t\tthis.binder, new DefaultResourceLoader(), springFactoriesLoader);\n\t\tConfigDataLocation location = ConfigDataLocation.of(\"Missing:test\");\n\t\tassertThatExceptionOfType(UnsupportedConfigDataLocationException.class)\n\t\t\t.isThrownBy(() -> resolvers.resolve(this.context, location, null))\n\t\t\t.satisfies((ex) -> assertThat(ex.getLocation()).isEqualTo(location));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "resolveWhenNoResolverThrowsException", "(", ")", "{", "}", "@", "Test", "MockSpringFactoriesLoader", ";", ";", "ConfigDataLocationResolvers", ";", "ConfigDataLocation", ";", ";", "springFactoriesLoader", "=", "springFactoriesLoader", ".", "add", "resolvers", "=", "location", "=", ".", "satisfies", "new", "MockSpringFactoriesLoader", "(", ",", ",", ")", "new", "ConfigDataLocationResolvers", "ConfigDataLocation", ".", "of", ".", "isThrownBy", "(", ")", "(", ")", "ConfigDataLocationResolver", ".", "class", "LowestTestResolver", ".", "class", "HighestTestResolver", ".", "class", "(", ",", ",", ",", ",", "springFactoriesLoader", ")", "(", ")", "assertThatExceptionOfType", "(", ")", "->", "this", ".", "logFactory", "this", ".", "bootstrapContext", "this", ".", "binder", "new", "DefaultResourceLoader", "\"", "Missing:test", "\"", "(", ")", "->", "(", "ex", ")", ".", "isEqualTo", "(", ")", "UnsupportedConfigDataLocationException", ".", "class", "(", ")", "resolvers", ".", "resolve", "assertThat", "(", "location", ")", "(", ",", "location", ",", "null", ")", "(", ")", "this", ".", "context", "ex", ".", "getLocation", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 169, "ast_depth": 13, "n_identifiers": 20, "vocab_size": 44, "n_whitespaces": 61, "n_words": 51, "nloc": 12, "token_counts": 118}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLocationResolversTests.java#173-182", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLocationResolversTests.java", "language": "Java"}, "method": {"name": "resolveWhenOptional", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataLocationResolversTests#resolveWhenOptional", "start_line": 173, "end_line": 182, "signature": "resolveWhenOptional()", "original_code": "@Test\n\tvoid resolveWhenOptional() {\n\t\tMockSpringFactoriesLoader springFactoriesLoader = new MockSpringFactoriesLoader();\n\t\tspringFactoriesLoader.add(ConfigDataLocationResolver.class, OptionalResourceTestResolver.class);\n\t\tConfigDataLocationResolvers resolvers = new ConfigDataLocationResolvers(this.logFactory, this.bootstrapContext,\n\t\t\t\tthis.binder, new DefaultResourceLoader(), springFactoriesLoader);\n\t\tConfigDataLocation location = ConfigDataLocation.of(\"OptionalResourceTestResolver:test\");\n\t\tList<ConfigDataResolutionResult> resolved = resolvers.resolve(this.context, location, null);\n\t\tassertThat(resolved.get(0).getResource().isOptional()).isTrue();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "resolveWhenOptional", "(", ")", "{", "}", "@", "Test", "MockSpringFactoriesLoader", ";", ";", "ConfigDataLocationResolvers", ";", "ConfigDataLocation", ";", ";", ";", "springFactoriesLoader", "=", "springFactoriesLoader", ".", "add", "resolvers", "=", "location", "=", "List", "resolved", "=", ".", "isTrue", "new", "MockSpringFactoriesLoader", "(", ",", ")", "new", "ConfigDataLocationResolvers", "ConfigDataLocation", ".", "of", "<", "ConfigDataResolutionResult", ">", "resolvers", ".", "resolve", "assertThat", "(", ")", "(", ")", "ConfigDataLocationResolver", ".", "class", "OptionalResourceTestResolver", ".", "class", "(", ",", ",", ",", ",", "springFactoriesLoader", ")", "(", ")", "(", ",", "location", ",", "null", ")", "(", ")", "this", ".", "logFactory", "this", ".", "bootstrapContext", "this", ".", "binder", "new", "DefaultResourceLoader", "\"", "OptionalResourceTestResolver:test", "\"", "this", ".", "context", ".", "isOptional", "(", ")", ".", "getResource", "(", ")", "resolved", ".", "get", "(", ")", "(", "0", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 155, "ast_depth": 12, "n_identifiers": 19, "vocab_size": 45, "n_whitespaces": 50, "n_words": 48, "nloc": 10, "token_counts": 108}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLocationResolversTests.java#196-201", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLocationResolversTests.java", "language": "Java"}, "method": {"name": "isResolvable", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataLocationResolversTests#isResolvable", "start_line": 196, "end_line": 201, "signature": "isResolvable(ConfigDataLocationResolverContext context, ConfigDataLocation location)", "original_code": "@Override\n\t\tpublic boolean isResolvable(ConfigDataLocationResolverContext context, ConfigDataLocation location) {\n\t\t\tString name = getClass().getName();\n\t\t\tname = name.substring(name.lastIndexOf(\"$\") + 1);\n\t\t\treturn location.hasPrefix(name + \":\");\n\t\t}", "doc_comment": ""}, "code_tokens": ["boolean", "isResolvable", "public", "(", ",", ")", "{", "}", "@", "Override", "ConfigDataLocationResolverContext", "context", "ConfigDataLocation", "location", "String", ";", ";", "return", ";", "name", "=", "name", "=", "location", ".", "hasPrefix", ".", "getName", "name", ".", "substring", "(", ")", "getClass", "(", ")", "(", ")", "name", "+", "(", ")", "+", "1", "\"", ":", "\"", "name", ".", "lastIndexOf", "(", ")", "\"", "$", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 82, "ast_depth": 12, "n_identifiers": 10, "vocab_size": 30, "n_whitespaces": 34, "n_words": 22, "nloc": 6, "token_counts": 55}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLocationResolversTests.java#203-207", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLocationResolversTests.java", "language": "Java"}, "method": {"name": "resolve", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataLocationResolversTests#resolve", "start_line": 203, "end_line": 207, "signature": "resolve(ConfigDataLocationResolverContext context,\n\t\t\t\tConfigDataLocation location)", "original_code": "@Override\n\t\tpublic List<TestConfigDataResource> resolve(ConfigDataLocationResolverContext context,\n\t\t\t\tConfigDataLocation location) {\n\t\t\treturn Collections.singletonList(new TestConfigDataResource(this.optionalResource, this, location, false));\n\t\t}", "doc_comment": ""}, "code_tokens": ["resolve", "public", "List", "(", ",", ")", "{", "}", "@", "Override", "<", "TestConfigDataResource", ">", "ConfigDataLocationResolverContext", "context", "ConfigDataLocation", "location", "return", ";", "Collections", ".", "singletonList", "(", ")", "new", "TestConfigDataResource", "(", ",", "this", ",", "location", ",", "false", ")", "this", ".", "optionalResource"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 53, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 26, "n_whitespaces": 25, "n_words": 19, "nloc": 5, "token_counts": 37}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLocationResolversTests.java#209-213", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLocationResolversTests.java", "language": "Java"}, "method": {"name": "resolveProfileSpecific", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataLocationResolversTests#resolveProfileSpecific", "start_line": 209, "end_line": 213, "signature": "resolveProfileSpecific(ConfigDataLocationResolverContext context,\n\t\t\t\tConfigDataLocation location, Profiles profiles)", "original_code": "@Override\n\t\tpublic List<TestConfigDataResource> resolveProfileSpecific(ConfigDataLocationResolverContext context,\n\t\t\t\tConfigDataLocation location, Profiles profiles) {\n\t\t\treturn Collections.singletonList(new TestConfigDataResource(this.optionalResource, this, location, true));\n\t\t}", "doc_comment": ""}, "code_tokens": ["resolveProfileSpecific", "public", "List", "(", ",", ",", ")", "{", "}", "@", "Override", "<", "TestConfigDataResource", ">", "ConfigDataLocationResolverContext", "context", "ConfigDataLocation", "location", "Profiles", "profiles", "return", ";", "Collections", ".", "singletonList", "(", ")", "new", "TestConfigDataResource", "(", ",", "this", ",", "location", ",", "true", ")", "this", ".", "optionalResource"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 57, "ast_depth": 10, "n_identifiers": 8, "vocab_size": 28, "n_whitespaces": 27, "n_words": 21, "nloc": 5, "token_counts": 40}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLocationResolversTests.java#225-227", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLocationResolversTests.java", "language": "Java"}, "method": {"name": "getDeferredLogFactory", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataLocationResolversTests#getDeferredLogFactory", "start_line": 225, "end_line": 227, "signature": "getDeferredLogFactory()", "original_code": "DeferredLogFactory getDeferredLogFactory() {\n\t\t\treturn this.deferredLogFactory;\n\t\t}", "doc_comment": ""}, "code_tokens": ["DeferredLogFactory", "getDeferredLogFactory", "(", ")", "{", "}", "return", ";", "this", ".", "deferredLogFactory"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 17, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 11, "n_whitespaces": 10, "n_words": 5, "nloc": 3, "token_counts": 11}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLocationResolversTests.java#239-241", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLocationResolversTests.java", "language": "Java"}, "method": {"name": "getBinder", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataLocationResolversTests#getBinder", "start_line": 239, "end_line": 241, "signature": "getBinder()", "original_code": "Binder getBinder() {\n\t\t\treturn this.binder;\n\t\t}", "doc_comment": ""}, "code_tokens": ["Binder", "getBinder", "(", ")", "{", "}", "return", ";", "this", ".", "binder"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 17, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 11, "n_whitespaces": 10, "n_words": 5, "nloc": 3, "token_counts": 11}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLocationResolversTests.java#292-294", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLocationResolversTests.java", "language": "Java"}, "method": {"name": "getResolver", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataLocationResolversTests#getResolver", "start_line": 292, "end_line": 294, "signature": "getResolver()", "original_code": "TestResolver getResolver() {\n\t\t\treturn this.resolver;\n\t\t}", "doc_comment": ""}, "code_tokens": ["TestResolver", "getResolver", "(", ")", "{", "}", "return", ";", "this", ".", "resolver"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 17, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 11, "n_whitespaces": 10, "n_words": 5, "nloc": 3, "token_counts": 11}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLocationResolversTests.java#296-298", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLocationResolversTests.java", "language": "Java"}, "method": {"name": "getLocation", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataLocationResolversTests#getLocation", "start_line": 296, "end_line": 298, "signature": "getLocation()", "original_code": "ConfigDataLocation getLocation() {\n\t\t\treturn this.location;\n\t\t}", "doc_comment": ""}, "code_tokens": ["ConfigDataLocation", "getLocation", "(", ")", "{", "}", "return", ";", "this", ".", "location"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 17, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 11, "n_whitespaces": 10, "n_words": 5, "nloc": 3, "token_counts": 11}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLocationResolversTests.java#300-302", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLocationResolversTests.java", "language": "Java"}, "method": {"name": "isProfileSpecific", "qualified_name": "test.java.org.springframework.boot.context.config.ConfigDataLocationResolversTests#isProfileSpecific", "start_line": 300, "end_line": 302, "signature": "isProfileSpecific()", "original_code": "boolean isProfileSpecific() {\n\t\t\treturn this.profileSpecific;\n\t\t}", "doc_comment": ""}, "code_tokens": ["boolean", "isProfileSpecific", "(", ")", "{", "}", "return", ";", "this", ".", "profileSpecific"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 17, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 11, "n_whitespaces": 10, "n_words": 5, "nloc": 3, "token_counts": 11}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/TestConfigDataBootstrap.java#42-46", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/TestConfigDataBootstrap.java", "language": "Java"}, "method": {"name": "isResolvable", "qualified_name": "test.java.org.springframework.boot.context.config.TestConfigDataBootstrap#isResolvable", "start_line": 42, "end_line": 46, "signature": "isResolvable(ConfigDataLocationResolverContext context, ConfigDataLocation location)", "original_code": "@Override\n\t\tpublic boolean isResolvable(ConfigDataLocationResolverContext context, ConfigDataLocation location) {\n\t\t\tcontext.getBootstrapContext().get(Binder.class); // gh-24559\n\t\t\treturn location.hasPrefix(\"testbootstrap:\");\n\t\t}", "doc_comment": ""}, "code_tokens": ["boolean", "isResolvable", "public", "(", ",", ")", "{", "// gh-24559", "}", "@", "Override", "ConfigDataLocationResolverContext", "context", "ConfigDataLocation", "location", ";", "return", ";", ".", "get", "location", ".", "hasPrefix", "context", ".", "getBootstrapContext", "(", ")", "(", ")", "(", ")", "Binder", ".", "class", "\"", "testbootstrap:", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 56, "ast_depth": 8, "n_identifiers": 7, "vocab_size": 25, "n_whitespaces": 23, "n_words": 19, "nloc": 5, "token_counts": 38}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/TestConfigDataBootstrap.java#48-54", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/TestConfigDataBootstrap.java", "language": "Java"}, "method": {"name": "resolve", "qualified_name": "test.java.org.springframework.boot.context.config.TestConfigDataBootstrap#resolve", "start_line": 48, "end_line": 54, "signature": "resolve(ConfigDataLocationResolverContext context, ConfigDataLocation location)", "original_code": "@Override\n\t\tpublic List<Resource> resolve(ConfigDataLocationResolverContext context, ConfigDataLocation location) {\n\t\t\tcontext.getBootstrapContext()\n\t\t\t\t.registerIfAbsent(ResolverHelper.class, InstanceSupplier.from(() -> new ResolverHelper(location)));\n\t\t\tResolverHelper helper = context.getBootstrapContext().get(ResolverHelper.class);\n\t\t\treturn Collections.singletonList(new Resource(helper));\n\t\t}", "doc_comment": ""}, "code_tokens": ["resolve", "public", "List", "(", ",", ")", "{", "}", "@", "Override", "<", "Resource", ">", "ConfigDataLocationResolverContext", "context", "ConfigDataLocation", "location", ";", "ResolverHelper", ";", "return", ";", ".", "registerIfAbsent", "helper", "=", "Collections", ".", "singletonList", "context", ".", "getBootstrapContext", "(", ",", ")", ".", "get", "(", ")", "(", ")", "ResolverHelper", ".", "class", "InstanceSupplier", ".", "from", "context", ".", "getBootstrapContext", "(", ")", "new", "Resource", "(", ")", "(", ")", "ResolverHelper", ".", "class", "(", "helper", ")", "->", "(", ")", "new", "ResolverHelper", "(", "location", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 106, "ast_depth": 12, "n_identifiers": 12, "vocab_size": 33, "n_whitespaces": 38, "n_words": 32, "nloc": 7, "token_counts": 72}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/TestConfigDataBootstrap.java#60-69", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/TestConfigDataBootstrap.java", "language": "Java"}, "method": {"name": "load", "qualified_name": "test.java.org.springframework.boot.context.config.TestConfigDataBootstrap#load", "start_line": 60, "end_line": 69, "signature": "load(ConfigDataLoaderContext context, Resource location)", "original_code": "@Override\n\t\tpublic ConfigData load(ConfigDataLoaderContext context, Resource location) throws IOException {\n\t\t\tcontext.getBootstrapContext()\n\t\t\t\t.registerIfAbsent(LoaderHelper.class,\n\t\t\t\t\t\t(bootstrapContext) -> new LoaderHelper(location, () -> bootstrapContext.get(Binder.class)));\n\t\t\tLoaderHelper helper = context.getBootstrapContext().get(LoaderHelper.class);\n\t\t\tcontext.getBootstrapContext().addCloseListener(helper);\n\t\t\treturn new ConfigData(\n\t\t\t\t\tCollections.singleton(new MapPropertySource(\"loaded\", Collections.singletonMap(\"test\", \"test\"))));\n\t\t}", "doc_comment": ""}, "code_tokens": ["ConfigData", "load", "public", "(", ",", ")", "throws", "IOException", "{", "}", "@", "Override", "ConfigDataLoaderContext", "context", "Resource", "location", ";", "LoaderHelper", ";", ";", "return", ";", ".", "registerIfAbsent", "helper", "=", ".", "addCloseListener", "new", "ConfigData", "context", ".", "getBootstrapContext", "(", ",", ")", ".", "get", "context", ".", "getBootstrapContext", "(", "helper", ")", "(", ")", "(", ")", "LoaderHelper", ".", "class", "->", "context", ".", "getBootstrapContext", "(", ")", "(", ")", "Collections", ".", "singleton", "(", "bootstrapContext", ")", "new", "LoaderHelper", "(", ")", "LoaderHelper", ".", "class", "(", ")", "(", "location", ",", ")", "new", "MapPropertySource", "->", "(", ",", ")", "(", ")", "bootstrapContext", ".", "get", "\"", "loaded", "\"", "Collections", ".", "singletonMap", "(", ")", "(", ",", ")", "Binder", ".", "class", "\"", "test", "\"", "\"", "test", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 157, "ast_depth": 14, "n_identifiers": 13, "vocab_size": 38, "n_whitespaces": 62, "n_words": 46, "nloc": 10, "token_counts": 109}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/TestConfigDataBootstrap.java#81-84", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/TestConfigDataBootstrap.java", "language": "Java"}, "method": {"name": "toString", "qualified_name": "test.java.org.springframework.boot.context.config.TestConfigDataBootstrap#toString", "start_line": 81, "end_line": 84, "signature": "toString()", "original_code": "@Override\n\t\tpublic String toString() {\n\t\t\treturn \"test\";\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "toString", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "\"", "test", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 13, "n_whitespaces": 14, "n_words": 6, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/TestConfigDataBootstrap.java#86-88", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/TestConfigDataBootstrap.java", "language": "Java"}, "method": {"name": "getResolverHelper", "qualified_name": "test.java.org.springframework.boot.context.config.TestConfigDataBootstrap#getResolverHelper", "start_line": 86, "end_line": 88, "signature": "getResolverHelper()", "original_code": "ResolverHelper getResolverHelper() {\n\t\t\treturn this.resolverHelper;\n\t\t}", "doc_comment": ""}, "code_tokens": ["ResolverHelper", "getResolverHelper", "(", ")", "{", "}", "return", ";", "this", ".", "resolverHelper"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 17, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 11, "n_whitespaces": 10, "n_words": 5, "nloc": 3, "token_counts": 11}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/TestConfigDataBootstrap.java#100-102", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/TestConfigDataBootstrap.java", "language": "Java"}, "method": {"name": "getLocation", "qualified_name": "test.java.org.springframework.boot.context.config.TestConfigDataBootstrap#getLocation", "start_line": 100, "end_line": 102, "signature": "getLocation()", "original_code": "ConfigDataLocation getLocation() {\n\t\t\treturn this.location;\n\t\t}", "doc_comment": ""}, "code_tokens": ["ConfigDataLocation", "getLocation", "(", ")", "{", "}", "return", ";", "this", ".", "location"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 17, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 11, "n_whitespaces": 10, "n_words": 5, "nloc": 3, "token_counts": 11}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/TestConfigDataBootstrap.java#117-119", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/TestConfigDataBootstrap.java", "language": "Java"}, "method": {"name": "getLocation", "qualified_name": "test.java.org.springframework.boot.context.config.TestConfigDataBootstrap#getLocation", "start_line": 117, "end_line": 119, "signature": "getLocation()", "original_code": "Resource getLocation() {\n\t\t\treturn this.location;\n\t\t}", "doc_comment": ""}, "code_tokens": ["Resource", "getLocation", "(", ")", "{", "}", "return", ";", "this", ".", "location"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 17, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 11, "n_whitespaces": 10, "n_words": 5, "nloc": 3, "token_counts": 11}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/TestConfigDataBootstrap.java#121-123", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/TestConfigDataBootstrap.java", "language": "Java"}, "method": {"name": "getBound", "qualified_name": "test.java.org.springframework.boot.context.config.TestConfigDataBootstrap#getBound", "start_line": 121, "end_line": 123, "signature": "getBound()", "original_code": "String getBound() {\n\t\t\treturn this.binder.get().bind(\"myprop\", String.class).orElse(null);\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getBound", "(", ")", "{", "}", "return", ";", ".", "orElse", ".", "bind", "(", "null", ")", ".", "get", "(", ",", ")", "this", ".", "binder", "(", ")", "\"", "myprop", "\"", "String", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 45, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 19, "n_whitespaces": 11, "n_words": 12, "nloc": 3, "token_counts": 31}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/TestConfigDataBootstrap.java#125-127", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/TestConfigDataBootstrap.java", "language": "Java"}, "method": {"name": "getProfileBound", "qualified_name": "test.java.org.springframework.boot.context.config.TestConfigDataBootstrap#getProfileBound", "start_line": 125, "end_line": 127, "signature": "getProfileBound()", "original_code": "String getProfileBound() {\n\t\t\treturn this.binder.get().bind(\"myprofileprop\", String.class).orElse(null);\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getProfileBound", "(", ")", "{", "}", "return", ";", ".", "orElse", ".", "bind", "(", "null", ")", ".", "get", "(", ",", ")", "this", ".", "binder", "(", ")", "\"", "myprofileprop", "\"", "String", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 45, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 19, "n_whitespaces": 11, "n_words": 12, "nloc": 3, "token_counts": 31}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/config/TestConfigDataBootstrap.java#129-132", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/config/TestConfigDataBootstrap.java", "language": "Java"}, "method": {"name": "onApplicationEvent", "qualified_name": "test.java.org.springframework.boot.context.config.TestConfigDataBootstrap#onApplicationEvent", "start_line": 129, "end_line": 132, "signature": "onApplicationEvent(BootstrapContextClosedEvent event)", "original_code": "@Override\n\t\tpublic void onApplicationEvent(BootstrapContextClosedEvent event) {\n\t\t\tevent.getApplicationContext().getBeanFactory().registerSingleton(\"loaderHelper\", this);\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "onApplicationEvent", "public", "(", ")", "{", "}", "@", "Override", "BootstrapContextClosedEvent", "event", ";", ".", "registerSingleton", ".", "getBeanFactory", "(", ",", "this", ")", "event", ".", "getApplicationContext", "(", ")", "\"", "loaderHelper", "\"", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 45, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 20, "n_whitespaces": 15, "n_words": 12, "nloc": 4, "token_counts": 30}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/event/EventPublishingRunListenerTests.java#48-70", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/event/EventPublishingRunListenerTests.java", "language": "Java"}, "method": {"name": "shouldPublishLifecycleEvents", "qualified_name": "test.java.org.springframework.boot.context.event.EventPublishingRunListenerTests#shouldPublishLifecycleEvents", "start_line": 48, "end_line": 70, "signature": "shouldPublishLifecycleEvents()", "original_code": "@Test\n\tvoid shouldPublishLifecycleEvents() {\n\t\tDefaultBootstrapContext bootstrapContext = new DefaultBootstrapContext();\n\t\tStaticApplicationContext context = new StaticApplicationContext();\n\t\tTestApplicationListener applicationListener = new TestApplicationListener();\n\t\tSpringApplication application = mock(SpringApplication.class);\n\t\tgiven(application.getListeners()).willReturn(Collections.singleton(applicationListener));\n\t\tEventPublishingRunListener publishingListener = new EventPublishingRunListener(application, null);\n\t\tapplicationListener.assertReceivedNoEvents();\n\t\tpublishingListener.starting(bootstrapContext);\n\t\tapplicationListener.assertReceivedEvent(ApplicationStartingEvent.class);\n\t\tpublishingListener.environmentPrepared(bootstrapContext, null);\n\t\tapplicationListener.assertReceivedEvent(ApplicationEnvironmentPreparedEvent.class);\n\t\tpublishingListener.contextPrepared(context);\n\t\tapplicationListener.assertReceivedEvent(ApplicationContextInitializedEvent.class);\n\t\tpublishingListener.contextLoaded(context);\n\t\tapplicationListener.assertReceivedEvent(ApplicationPreparedEvent.class);\n\t\tcontext.refresh();\n\t\tpublishingListener.started(context, null);\n\t\tapplicationListener.assertReceivedEvent(ApplicationStartedEvent.class, AvailabilityChangeEvent.class);\n\t\tpublishingListener.ready(context, null);\n\t\tapplicationListener.assertReceivedEvent(ApplicationReadyEvent.class, AvailabilityChangeEvent.class);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "shouldPublishLifecycleEvents", "(", ")", "{", "}", "@", "Test", "DefaultBootstrapContext", ";", "StaticApplicationContext", ";", "TestApplicationListener", ";", "SpringApplication", ";", ";", "EventPublishingRunListener", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "bootstrapContext", "=", "context", "=", "applicationListener", "=", "application", "=", ".", "willReturn", "publishingListener", "=", "applicationListener", ".", "assertReceivedNoEvents", "publishingListener", ".", "starting", "applicationListener", ".", "assertReceivedEvent", "publishingListener", ".", "environmentPrepared", "applicationListener", ".", "assertReceivedEvent", "publishingListener", ".", "contextPrepared", "applicationListener", ".", "assertReceivedEvent", "publishingListener", ".", "contextLoaded", "applicationListener", ".", "assertReceivedEvent", "context", ".", "refresh", "publishingListener", ".", "started", "applicationListener", ".", "assertReceivedEvent", "publishingListener", ".", "ready", "applicationListener", ".", "assertReceivedEvent", "new", "DefaultBootstrapContext", "new", "StaticApplicationContext", "new", "TestApplicationListener", "mock", "given", "(", ")", "new", "EventPublishingRunListener", "(", ")", "(", "bootstrapContext", ")", "(", ")", "(", "bootstrapContext", ",", "null", ")", "(", ")", "(", "context", ")", "(", ")", "(", "context", ")", "(", ")", "(", ")", "(", "context", ",", "null", ")", "(", ",", ")", "(", "context", ",", "null", ")", "(", ",", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "Collections", ".", "singleton", "(", "application", ",", "null", ")", "ApplicationStartingEvent", ".", "class", "ApplicationEnvironmentPreparedEvent", ".", "class", "ApplicationContextInitializedEvent", ".", "class", "ApplicationPreparedEvent", ".", "class", "ApplicationStartedEvent", ".", "class", "AvailabilityChangeEvent", ".", "class", "ApplicationReadyEvent", ".", "class", "AvailabilityChangeEvent", ".", "class", "SpringApplication", ".", "class", "application", ".", "getListeners", "(", "applicationListener", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 280, "ast_depth": 10, "n_identifiers": 22, "vocab_size": 47, "n_whitespaces": 91, "n_words": 86, "nloc": 23, "token_counts": 194}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/event/EventPublishingRunListenerTests.java#72-85", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/event/EventPublishingRunListenerTests.java", "language": "Java"}, "method": {"name": "initialEventListenerCanAddAdditionalListenersToApplication", "qualified_name": "test.java.org.springframework.boot.context.event.EventPublishingRunListenerTests#initialEventListenerCanAddAdditionalListenersToApplication", "start_line": 72, "end_line": 85, "signature": "initialEventListenerCanAddAdditionalListenersToApplication()", "original_code": "@Test\n\tvoid initialEventListenerCanAddAdditionalListenersToApplication() {\n\t\tSpringApplication application = new SpringApplication();\n\t\tDefaultBootstrapContext bootstrapContext = new DefaultBootstrapContext();\n\t\tConfigurableEnvironment environment = new StandardEnvironment();\n\t\tTestApplicationListener lateAddedApplicationListener = new TestApplicationListener();\n\t\tApplicationListener<ApplicationStartingEvent> listener = (event) -> event.getSpringApplication()\n\t\t\t.addListeners(lateAddedApplicationListener);\n\t\tapplication.addListeners(listener);\n\t\tEventPublishingRunListener runListener = new EventPublishingRunListener(application, null);\n\t\trunListener.starting(bootstrapContext);\n\t\trunListener.environmentPrepared(bootstrapContext, environment);\n\t\tlateAddedApplicationListener.assertReceivedEvent(ApplicationEnvironmentPreparedEvent.class);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "initialEventListenerCanAddAdditionalListenersToApplication", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", "DefaultBootstrapContext", ";", "ConfigurableEnvironment", ";", "TestApplicationListener", ";", ";", ";", "EventPublishingRunListener", ";", ";", ";", ";", "application", "=", "bootstrapContext", "=", "environment", "=", "lateAddedApplicationListener", "=", "ApplicationListener", "listener", "=", "application", ".", "addListeners", "runListener", "=", "runListener", ".", "starting", "runListener", ".", "environmentPrepared", "lateAddedApplicationListener", ".", "assertReceivedEvent", "new", "SpringApplication", "new", "DefaultBootstrapContext", "new", "StandardEnvironment", "new", "TestApplicationListener", "<", "ApplicationStartingEvent", ">", "->", "(", "listener", ")", "new", "EventPublishingRunListener", "(", "bootstrapContext", ")", "(", "bootstrapContext", ",", "environment", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", "event", ")", ".", "addListeners", "(", "application", ",", "null", ")", "ApplicationEnvironmentPreparedEvent", ".", "class", "event", ".", "getSpringApplication", "(", "lateAddedApplicationListener", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 153, "ast_depth": 10, "n_identifiers": 14, "vocab_size": 39, "n_whitespaces": 67, "n_words": 47, "nloc": 14, "token_counts": 104}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/event/EventPublishingRunListenerTests.java#91-94", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/event/EventPublishingRunListenerTests.java", "language": "Java"}, "method": {"name": "onApplicationEvent", "qualified_name": "test.java.org.springframework.boot.context.event.EventPublishingRunListenerTests#onApplicationEvent", "start_line": 91, "end_line": 94, "signature": "onApplicationEvent(ApplicationEvent event)", "original_code": "@Override\n\t\tpublic void onApplicationEvent(ApplicationEvent event) {\n\t\t\tthis.events.add(event);\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "onApplicationEvent", "public", "(", ")", "{", "}", "@", "Override", "ApplicationEvent", "event", ";", ".", "add", "this", ".", "events", "(", "event", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 31, "ast_depth": 7, "n_identifiers": 5, "vocab_size": 16, "n_whitespaces": 14, "n_words": 10, "nloc": 4, "token_counts": 20}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/event/EventPublishingRunListenerTests.java#96-98", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/event/EventPublishingRunListenerTests.java", "language": "Java"}, "method": {"name": "assertReceivedNoEvents", "qualified_name": "test.java.org.springframework.boot.context.event.EventPublishingRunListenerTests#assertReceivedNoEvents", "start_line": 96, "end_line": 98, "signature": "assertReceivedNoEvents()", "original_code": "void assertReceivedNoEvents() {\n\t\t\tassertThat(this.events).isEmpty();\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "assertReceivedNoEvents", "(", ")", "{", "}", ";", ".", "isEmpty", "assertThat", "(", ")", "(", ")", "this", ".", "events"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 27, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 12, "n_whitespaces": 9, "n_words": 6, "nloc": 3, "token_counts": 17}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/event/EventPublishingRunListenerTests.java#100-106", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/event/EventPublishingRunListenerTests.java", "language": "Java"}, "method": {"name": "assertReceivedEvent", "qualified_name": "test.java.org.springframework.boot.context.event.EventPublishingRunListenerTests#assertReceivedEvent", "start_line": 100, "end_line": 106, "signature": "assertReceivedEvent(Class<?>... eventClasses)", "original_code": "void assertReceivedEvent(Class<?>... eventClasses) {\n\t\t\tList<ApplicationEvent> receivedEvents = new ArrayList<>();\n\t\t\twhile (!this.events.isEmpty()) {\n\t\t\t\treceivedEvents.add(this.events.pollFirst());\n\t\t\t}\n\t\t\tassertThat(receivedEvents).extracting(\"class\").contains((Object[]) eventClasses);\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "assertReceivedEvent", "(", ")", "{", "}", "...", ";", "while", ";", "Class", "eventClasses", "List", "receivedEvents", "=", "(", ")", "{", "}", ".", "contains", "<", ">", "<", "ApplicationEvent", ">", "new", "!", ";", ".", "extracting", "(", ")", "?", "ArrayList", "(", ")", ".", "isEmpty", "receivedEvents", ".", "add", "assertThat", "(", ")", "(", ")", "eventClasses", "<", ">", "this", ".", "events", "(", ")", "(", ")", "(", "receivedEvents", ")", "\"", "class", "\"", "Object", ".", "pollFirst", "[", "]", "this", ".", "events", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 114, "ast_depth": 11, "n_identifiers": 10, "vocab_size": 35, "n_whitespaces": 34, "n_words": 25, "nloc": 7, "token_counts": 73}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#129-139", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "init", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#init", "start_line": 129, "end_line": 139, "signature": "init(CapturedOutput output)", "original_code": "@BeforeEach\n\tvoid init(CapturedOutput output) throws IOException {\n\t\tthis.systemPropertyNames = new HashSet<>(System.getProperties().keySet());\n\t\tthis.output = output;\n\t\tthis.logFile = new File(this.tempDir.toFile(), \"foo.log\");\n\t\tLogManager.getLogManager().readConfiguration(JavaLoggingSystem.class.getResourceAsStream(\"logging.properties\"));\n\t\tmulticastEvent(new ApplicationStartingEvent(this.bootstrapContext, new SpringApplication(), NO_ARGS));\n\t\tnew File(this.tempDir.toFile(), \"spring.log\").delete();\n\t\tConfigurableEnvironment environment = this.context.getEnvironment();\n\t\tConfigurationPropertySources.attach(environment);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "init", "(", ")", "throws", "IOException", "{", "}", "@", "BeforeEach", "CapturedOutput", "output", ";", ";", ";", ";", ";", ";", "ConfigurableEnvironment", ";", ";", "=", "=", "output", "=", ".", "readConfiguration", "multicastEvent", ".", "delete", "environment", "=", "ConfigurationPropertySources", ".", "attach", "this", ".", "systemPropertyNames", "new", "this", ".", "output", "this", ".", "logFile", "new", "File", "LogManager", ".", "getLogManager", "(", ")", "(", ")", "new", "File", "(", ")", ".", "getEnvironment", "(", "environment", ")", "HashSet", "(", ")", "(", ",", ")", "(", ")", ".", "getResourceAsStream", "new", "ApplicationStartingEvent", "(", ",", ")", "this", ".", "context", "(", ")", "<", ">", ".", "keySet", ".", "toFile", "\"", "foo.log", "\"", "JavaLoggingSystem", ".", "class", "(", ")", "(", ",", ",", "NO_ARGS", ")", ".", "toFile", "\"", "spring.log", "\"", "System", ".", "getProperties", "(", ")", "this", ".", "tempDir", "(", ")", "\"", "logging.properties", "\"", "this", ".", "bootstrapContext", "new", "SpringApplication", "this", ".", "tempDir", "(", ")", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 199, "ast_depth": 11, "n_identifiers": 23, "vocab_size": 51, "n_whitespaces": 51, "n_words": 58, "nloc": 11, "token_counts": 134}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#141-155", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "clear", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#clear", "start_line": 141, "end_line": 155, "signature": "clear()", "original_code": "@AfterEach\n\tvoid clear() {\n\t\tLoggingSystem loggingSystem = LoggingSystem.get(getClass().getClassLoader());\n\t\tloggingSystem.setLogLevel(\"ROOT\", LogLevel.INFO);\n\t\tloggingSystem.cleanUp();\n\t\tif (loggingSystem.getShutdownHandler() != null) {\n\t\t\tloggingSystem.getShutdownHandler().run();\n\t\t}\n\t\tSystem.clearProperty(LoggingSystem.class.getName());\n\t\tSystem.clearProperty(LoggingSystem.SYSTEM_PROPERTY);\n\t\tSystem.getProperties().keySet().retainAll(this.systemPropertyNames);\n\t\tif (this.context != null) {\n\t\t\tthis.context.close();\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "clear", "(", ")", "{", "}", "@", "AfterEach", "LoggingSystem", ";", ";", ";", "if", ";", ";", ";", "if", "loggingSystem", "=", "loggingSystem", ".", "setLogLevel", "loggingSystem", ".", "cleanUp", "(", ")", "{", "}", "System", ".", "clearProperty", "System", ".", "clearProperty", ".", "retainAll", "(", ")", "{", "}", "LoggingSystem", ".", "get", "(", ",", ")", "(", ")", "!=", "null", ";", "(", ")", "(", ")", ".", "keySet", "(", ")", "!=", "null", ";", "(", ")", "\"", "ROOT", "\"", "LogLevel", ".", "INFO", "loggingSystem", ".", "getShutdownHandler", ".", "run", ".", "getName", "LoggingSystem", ".", "SYSTEM_PROPERTY", "System", ".", "getProperties", "(", ")", "this", ".", "systemPropertyNames", "this", ".", "context", ".", "close", ".", "getClassLoader", "(", ")", "loggingSystem", ".", "getShutdownHandler", "(", ")", "LoggingSystem", ".", "class", "(", ")", "(", ")", "this", ".", "context", "(", ")", "getClass", "(", ")", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 182, "ast_depth": 11, "n_identifiers": 23, "vocab_size": 40, "n_whitespaces": 56, "n_words": 45, "nloc": 15, "token_counts": 122}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#157-165", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "baseConfigLocation", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#baseConfigLocation", "start_line": 157, "end_line": 165, "signature": "baseConfigLocation()", "original_code": "@Test\n\tvoid baseConfigLocation() {\n\t\tthis.listener.initialize(this.context.getEnvironment(), this.context.getClassLoader());\n\t\tthis.logger.info(\"Hello world\", new RuntimeException(\"Expected\"));\n\t\tassertThat(this.output).contains(\"Hello world\");\n\t\tassertThat(this.output).doesNotContain(\"???\");\n\t\tassertThat(this.output).contains(\"[junit-\");\n\t\tassertThat(new File(this.tempDir + \"/spring.log\")).doesNotExist();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "baseConfigLocation", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ";", ";", ";", ".", "initialize", ".", "info", ".", "contains", ".", "doesNotContain", ".", "contains", ".", "doesNotExist", "this", ".", "listener", "(", ",", ")", "this", ".", "logger", "(", ",", ")", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", ".", "getEnvironment", ".", "getClassLoader", "\"", "Hello world", "\"", "new", "RuntimeException", "(", ")", "\"", "Hello world", "\"", "(", ")", "\"", "???", "\"", "(", ")", "\"", "[junit-", "\"", "(", ")", "this", ".", "context", "(", ")", "this", ".", "context", "(", ")", "(", ")", "this", ".", "output", "this", ".", "output", "this", ".", "output", "new", "File", "\"", "Expected", "\"", "(", ")", "+", "this", ".", "tempDir", "\"", "/spring.log", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 166, "ast_depth": 12, "n_identifiers": 15, "vocab_size": 35, "n_whitespaces": 32, "n_words": 43, "nloc": 9, "token_counts": 111}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#167-174", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "overrideConfigLocation", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#overrideConfigLocation", "start_line": 167, "end_line": 174, "signature": "overrideConfigLocation()", "original_code": "@Test\n\t@WithNonDefaultXmlResource\n\tvoid overrideConfigLocation() {\n\t\taddPropertiesToEnvironment(this.context, \"logging.config=classpath:nondefault.xml\");\n\t\tthis.listener.initialize(this.context.getEnvironment(), this.context.getClassLoader());\n\t\tthis.logger.info(\"Hello world\");\n\t\tassertThat(this.output).contains(\"Hello world\").doesNotContain(\"???\").startsWith(\"null \").endsWith(\"BOOTBOOT\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "overrideConfigLocation", "(", ")", "{", "}", "@", "Test", "@", "WithNonDefaultXmlResource", ";", ";", ";", ";", "addPropertiesToEnvironment", ".", "initialize", ".", "info", ".", "endsWith", "(", ",", ")", "this", ".", "listener", "(", ",", ")", "this", ".", "logger", "(", ")", ".", "startsWith", "(", ")", "this", ".", "context", "\"", "logging.config=classpath:nondefault.xml", "\"", ".", "getEnvironment", ".", "getClassLoader", "\"", "Hello world", "\"", ".", "doesNotContain", "(", ")", "\"", "BOOTBOOT", "\"", "this", ".", "context", "(", ")", "this", ".", "context", "(", ")", ".", "contains", "(", ")", "\"", "null ", "\"", "assertThat", "(", ")", "\"", "???", "\"", "(", ")", "\"", "Hello world", "\"", "this", ".", "output"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 133, "ast_depth": 12, "n_identifiers": 17, "vocab_size": 33, "n_whitespaces": 25, "n_words": 37, "nloc": 8, "token_counts": 90}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#176-184", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "throwableFromInitializeResultsInGracefulFailure", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#throwableFromInitializeResultsInGracefulFailure", "start_line": 176, "end_line": 184, "signature": "throwableFromInitializeResultsInGracefulFailure(CapturedOutput output)", "original_code": "@Test\n\tvoid throwableFromInitializeResultsInGracefulFailure(CapturedOutput output) {\n\t\tSystem.setProperty(LoggingSystem.SYSTEM_PROPERTY, BrokenInitializationLoggingSystem.class.getName());\n\t\tmulticastEvent(this.listener,\n\t\t\t\tnew ApplicationStartingEvent(this.bootstrapContext, new SpringApplication(), NO_ARGS));\n\t\tassertThatIllegalStateException()\n\t\t\t.isThrownBy(() -> this.listener.initialize(this.context.getEnvironment(), this.context.getClassLoader()));\n\t\tassertThat(output).contains(\"Deliberately broken\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "throwableFromInitializeResultsInGracefulFailure", "(", ")", "{", "}", "@", "Test", "CapturedOutput", "output", ";", ";", ";", ";", "System", ".", "setProperty", "multicastEvent", ".", "isThrownBy", ".", "contains", "(", ",", ")", "(", ",", ")", "assertThatIllegalStateException", "(", ")", "assertThat", "(", ")", "LoggingSystem", ".", "SYSTEM_PROPERTY", ".", "getName", "this", ".", "listener", "new", "ApplicationStartingEvent", "(", ")", "->", "(", "output", ")", "\"", "Deliberately broken", "\"", "BrokenInitializationLoggingSystem", ".", "class", "(", ")", "(", ",", ",", "NO_ARGS", ")", "(", ")", ".", "initialize", "this", ".", "bootstrapContext", "new", "SpringApplication", "this", ".", "listener", "(", ",", ")", "(", ")", ".", "getEnvironment", ".", "getClassLoader", "this", ".", "context", "(", ")", "this", ".", "context", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 139, "ast_depth": 12, "n_identifiers": 20, "vocab_size": 39, "n_whitespaces": 37, "n_words": 38, "nloc": 9, "token_counts": 94}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#186-193", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "trailingWhitespaceInLoggingConfigShouldBeTrimmed", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#trailingWhitespaceInLoggingConfigShouldBeTrimmed", "start_line": 186, "end_line": 193, "signature": "trailingWhitespaceInLoggingConfigShouldBeTrimmed()", "original_code": "@Test\n\t@WithNonDefaultXmlResource\n\tvoid trailingWhitespaceInLoggingConfigShouldBeTrimmed() {\n\t\taddPropertiesToEnvironment(this.context, \"logging.config=classpath:nondefault.xml \");\n\t\tthis.listener.initialize(this.context.getEnvironment(), this.context.getClassLoader());\n\t\tthis.logger.info(\"Hello world\");\n\t\tassertThat(this.output).contains(\"Hello world\").doesNotContain(\"???\").startsWith(\"null \").endsWith(\"BOOTBOOT\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "trailingWhitespaceInLoggingConfigShouldBeTrimmed", "(", ")", "{", "}", "@", "Test", "@", "WithNonDefaultXmlResource", ";", ";", ";", ";", "addPropertiesToEnvironment", ".", "initialize", ".", "info", ".", "endsWith", "(", ",", ")", "this", ".", "listener", "(", ",", ")", "this", ".", "logger", "(", ")", ".", "startsWith", "(", ")", "this", ".", "context", "\"", "logging.config=classpath:nondefault.xml ", "\"", ".", "getEnvironment", ".", "getClassLoader", "\"", "Hello world", "\"", ".", "doesNotContain", "(", ")", "\"", "BOOTBOOT", "\"", "this", ".", "context", "(", ")", "this", ".", "context", "(", ")", ".", "contains", "(", ")", "\"", "null ", "\"", "assertThat", "(", ")", "\"", "???", "\"", "(", ")", "\"", "Hello world", "\"", "this", ".", "output"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 133, "ast_depth": 12, "n_identifiers": 17, "vocab_size": 33, "n_whitespaces": 26, "n_words": 37, "nloc": 8, "token_counts": 90}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#195-203", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "overrideConfigDoesNotExist", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#overrideConfigDoesNotExist", "start_line": 195, "end_line": 203, "signature": "overrideConfigDoesNotExist()", "original_code": "@Test\n\tvoid overrideConfigDoesNotExist() {\n\t\taddPropertiesToEnvironment(this.context, \"logging.config=doesnotexist.xml\");\n\t\tassertThatIllegalStateException()\n\t\t\t.isThrownBy(() -> this.listener.initialize(this.context.getEnvironment(), this.context.getClassLoader()));\n\t\tassertThat(this.output)\n\t\t\t.contains(\"Logging system failed to initialize using configuration from 'doesnotexist.xml'\")\n\t\t\t.doesNotContain(\"JoranException\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "overrideConfigDoesNotExist", "(", ")", "{", "}", "@", "Test", ";", ";", ";", "addPropertiesToEnvironment", ".", "isThrownBy", ".", "doesNotContain", "(", ",", ")", "assertThatIllegalStateException", "(", ")", ".", "contains", "(", ")", "this", ".", "context", "\"", "logging.config=doesnotexist.xml", "\"", "(", ")", "->", "assertThat", "(", ")", "\"", "JoranException", "\"", "(", ")", ".", "initialize", "(", ")", "\"", "Logging system failed to initialize using configuration from 'doesnotexist.xml'", "\"", "this", ".", "listener", "(", ",", ")", "this", ".", "output", ".", "getEnvironment", ".", "getClassLoader", "this", ".", "context", "(", ")", "this", ".", "context", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 110, "ast_depth": 12, "n_identifiers": 14, "vocab_size": 29, "n_whitespaces": 39, "n_words": 37, "nloc": 9, "token_counts": 73}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#205-213", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "azureDefaultLoggingConfigDoesNotCauseAFailure", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#azureDefaultLoggingConfigDoesNotCauseAFailure", "start_line": 205, "end_line": 213, "signature": "azureDefaultLoggingConfigDoesNotCauseAFailure()", "original_code": "@Test\n\tvoid azureDefaultLoggingConfigDoesNotCauseAFailure() {\n\t\taddPropertiesToEnvironment(this.context,\n\t\t\t\t\"logging.config=-Djava.util.logging.config.file=\\\"d:\\\\home\\\\site\\\\wwwroot\\\\bin\\\\apache-tomcat-7.0.52\\\\conf\\\\logging.properties\\\"\");\n\t\tthis.listener.initialize(this.context.getEnvironment(), this.context.getClassLoader());\n\t\tthis.logger.info(\"Hello world\");\n\t\tassertThat(this.output).contains(\"Hello world\").doesNotContain(\"???\");\n\t\tassertThat(new File(this.tempDir.toFile(), \"/spring.log\")).doesNotExist();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "azureDefaultLoggingConfigDoesNotCauseAFailure", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ";", ";", "addPropertiesToEnvironment", ".", "initialize", ".", "info", ".", "doesNotContain", ".", "doesNotExist", "(", ",", ")", "this", ".", "listener", "(", ",", ")", "this", ".", "logger", "(", ")", ".", "contains", "(", ")", "assertThat", "(", ")", "this", ".", "context", "\"", "logging.config=-Djava.util.logging.config.file=", "\\\"", "d:", "\\\\", "home", "\\\\", "site", "\\\\", "wwwroot", "\\\\", "bin", "\\\\", "apache-tomcat-7.0.52", "\\\\", "conf", "\\\\", "logging.properties", "\\\"", "\"", ".", "getEnvironment", ".", "getClassLoader", "\"", "Hello world", "\"", "assertThat", "(", ")", "\"", "???", "\"", "(", ")", "this", ".", "context", "(", ")", "this", ".", "context", "(", ")", "(", ")", "\"", "Hello world", "\"", "new", "File", "this", ".", "output", "(", ",", ")", ".", "toFile", "\"", "/spring.log", "\"", "this", ".", "tempDir", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 161, "ast_depth": 12, "n_identifiers": 17, "vocab_size": 44, "n_whitespaces": 31, "n_words": 56, "nloc": 9, "token_counts": 114}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#215-222", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "tomcatNopLoggingConfigDoesNotCauseAFailure", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#tomcatNopLoggingConfigDoesNotCauseAFailure", "start_line": 215, "end_line": 222, "signature": "tomcatNopLoggingConfigDoesNotCauseAFailure()", "original_code": "@Test\n\tvoid tomcatNopLoggingConfigDoesNotCauseAFailure() {\n\t\taddPropertiesToEnvironment(this.context, \"LOGGING_CONFIG=-Dnop\");\n\t\tthis.listener.initialize(this.context.getEnvironment(), this.context.getClassLoader());\n\t\tthis.logger.info(\"Hello world\");\n\t\tassertThat(this.output).contains(\"Hello world\").doesNotContain(\"???\");\n\t\tassertThat(new File(this.tempDir.toFile(), \"/spring.log\")).doesNotExist();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "tomcatNopLoggingConfigDoesNotCauseAFailure", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ";", ";", "addPropertiesToEnvironment", ".", "initialize", ".", "info", ".", "doesNotContain", ".", "doesNotExist", "(", ",", ")", "this", ".", "listener", "(", ",", ")", "this", ".", "logger", "(", ")", ".", "contains", "(", ")", "assertThat", "(", ")", "this", ".", "context", "\"", "LOGGING_CONFIG=-Dnop", "\"", ".", "getEnvironment", ".", "getClassLoader", "\"", "Hello world", "\"", "assertThat", "(", ")", "\"", "???", "\"", "(", ")", "this", ".", "context", "(", ")", "this", ".", "context", "(", ")", "(", ")", "\"", "Hello world", "\"", "new", "File", "this", ".", "output", "(", ",", ")", ".", "toFile", "\"", "/spring.log", "\"", "this", ".", "tempDir", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 144, "ast_depth": 12, "n_identifiers": 17, "vocab_size": 34, "n_whitespaces": 27, "n_words": 38, "nloc": 8, "token_counts": 97}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#224-233", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "overrideConfigBroken", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#overrideConfigBroken", "start_line": 224, "end_line": 233, "signature": "overrideConfigBroken()", "original_code": "@Test\n\tvoid overrideConfigBroken() {\n\t\taddPropertiesToEnvironment(this.context, \"logging.config=classpath:logback-broken.xml\");\n\t\tassertThatIllegalStateException().isThrownBy(() -> {\n\t\t\tthis.listener.initialize(this.context.getEnvironment(), this.context.getClassLoader());\n\t\t\tassertThat(this.output).contains(\n\t\t\t\t\t\"Logging system failed to initialize using configuration from 'classpath:logback-broken.xml'\");\n\t\t\tassertThat(this.output).contains(\"ConsolAppender\");\n\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "overrideConfigBroken", "(", ")", "{", "}", "@", "Test", ";", ";", "addPropertiesToEnvironment", ".", "isThrownBy", "(", ",", ")", "assertThatIllegalStateException", "(", ")", "this", ".", "context", "\"", "logging.config=classpath:logback-broken.xml", "\"", "(", ")", "->", "(", ")", "{", "}", ";", ";", ";", ".", "initialize", ".", "contains", ".", "contains", "this", ".", "listener", "(", ",", ")", "assertThat", "(", ")", "assertThat", "(", ")", ".", "getEnvironment", ".", "getClassLoader", "(", ")", "\"", "Logging system failed to initialize using configuration from 'classpath:logback-broken.xml'", "\"", "(", ")", "\"", "ConsolAppender", "\"", "this", ".", "context", "(", ")", "this", ".", "context", "(", ")", "this", ".", "output", "this", ".", "output"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 126, "ast_depth": 14, "n_identifiers": 13, "vocab_size": 28, "n_whitespaces": 45, "n_words": 44, "nloc": 10, "token_counts": 83}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#235-246", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "addLogFileProperty", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#addLogFileProperty", "start_line": 235, "end_line": 246, "signature": "addLogFileProperty()", "original_code": "@Test\n\t@WithNonDefaultXmlResource\n\tvoid addLogFileProperty() {\n\t\taddPropertiesToEnvironment(this.context, \"logging.config=classpath:nondefault.xml\",\n\t\t\t\t\"logging.file.name=\" + this.logFile);\n\t\tthis.listener.initialize(this.context.getEnvironment(), this.context.getClassLoader());\n\t\tLog logger = LogFactory.getLog(LoggingApplicationListenerTests.class);\n\t\tString existingOutput = this.output.toString();\n\t\tlogger.info(\"Hello world\");\n\t\tString output = this.output.toString().substring(existingOutput.length()).trim();\n\t\tassertThat(output).startsWith(this.logFile.getAbsolutePath());\n\t}", "doc_comment": ""}, "code_tokens": ["void", "addLogFileProperty", "(", ")", "{", "}", "@", "Test", "@", "WithNonDefaultXmlResource", ";", ";", "Log", ";", "String", ";", ";", "String", ";", ";", "addPropertiesToEnvironment", ".", "initialize", "logger", "=", "existingOutput", "=", "logger", ".", "info", "output", "=", ".", "startsWith", "(", ",", ",", ")", "this", ".", "listener", "(", ",", ")", "LogFactory", ".", "getLog", ".", "toString", "(", ")", ".", "trim", "assertThat", "(", ")", "this", ".", "context", "\"", "logging.config=classpath:nondefault.xml", "\"", "+", ".", "getEnvironment", ".", "getClassLoader", "(", ")", "this", ".", "output", "(", ")", "\"", "Hello world", "\"", ".", "substring", "(", ")", "(", "output", ")", ".", "getAbsolutePath", "\"", "logging.file.name=", "\"", "this", ".", "logFile", "this", ".", "context", "(", ")", "this", ".", "context", "(", ")", "LoggingApplicationListenerTests", ".", "class", ".", "toString", "(", ")", "this", ".", "logFile", "(", ")", "this", ".", "output", "(", ")", "existingOutput", ".", "length", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 182, "ast_depth": 11, "n_identifiers": 23, "vocab_size": 43, "n_whitespaces": 48, "n_words": 56, "nloc": 12, "token_counts": 124}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#248-256", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "addLogFilePropertyWithDefault", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#addLogFilePropertyWithDefault", "start_line": 248, "end_line": 256, "signature": "addLogFilePropertyWithDefault()", "original_code": "@Test\n\tvoid addLogFilePropertyWithDefault() {\n\t\tassertThat(this.logFile).doesNotExist();\n\t\taddPropertiesToEnvironment(this.context, \"logging.file.name=\" + this.logFile);\n\t\tthis.listener.initialize(this.context.getEnvironment(), this.context.getClassLoader());\n\t\tLog logger = LogFactory.getLog(LoggingApplicationListenerTests.class);\n\t\tlogger.info(\"Hello world\");\n\t\tassertThat(this.logFile).isFile();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "addLogFilePropertyWithDefault", "(", ")", "{", "}", "@", "Test", ";", ";", ";", "Log", ";", ";", ";", ".", "doesNotExist", "addPropertiesToEnvironment", ".", "initialize", "logger", "=", "logger", ".", "info", ".", "isFile", "assertThat", "(", ")", "(", ",", ")", "this", ".", "listener", "(", ",", ")", "LogFactory", ".", "getLog", "(", ")", "assertThat", "(", ")", "(", ")", "this", ".", "context", "+", ".", "getEnvironment", ".", "getClassLoader", "(", ")", "\"", "Hello world", "\"", "(", ")", "this", ".", "logFile", "\"", "logging.file.name=", "\"", "this", ".", "logFile", "this", ".", "context", "(", ")", "this", ".", "context", "(", ")", "LoggingApplicationListenerTests", ".", "class", "this", ".", "logFile"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 133, "ast_depth": 9, "n_identifiers": 16, "vocab_size": 34, "n_whitespaces": 32, "n_words": 38, "nloc": 9, "token_counts": 89}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#258-269", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "addLogPathProperty", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#addLogPathProperty", "start_line": 258, "end_line": 269, "signature": "addLogPathProperty()", "original_code": "@Test\n\t@WithNonDefaultXmlResource\n\tvoid addLogPathProperty() {\n\t\taddPropertiesToEnvironment(this.context, \"logging.config=classpath:nondefault.xml\",\n\t\t\t\t\"logging.file.path=\" + this.tempDir);\n\t\tthis.listener.initialize(this.context.getEnvironment(), this.context.getClassLoader());\n\t\tLog logger = LogFactory.getLog(LoggingApplicationListenerTests.class);\n\t\tString existingOutput = this.output.toString();\n\t\tlogger.info(\"Hello world\");\n\t\tString output = this.output.toString().substring(existingOutput.length()).trim();\n\t\tassertThat(output).startsWith(new File(this.tempDir.toFile(), \"spring.log\").getAbsolutePath());\n\t}", "doc_comment": ""}, "code_tokens": ["void", "addLogPathProperty", "(", ")", "{", "}", "@", "Test", "@", "WithNonDefaultXmlResource", ";", ";", "Log", ";", "String", ";", ";", "String", ";", ";", "addPropertiesToEnvironment", ".", "initialize", "logger", "=", "existingOutput", "=", "logger", ".", "info", "output", "=", ".", "startsWith", "(", ",", ",", ")", "this", ".", "listener", "(", ",", ")", "LogFactory", ".", "getLog", ".", "toString", "(", ")", ".", "trim", "assertThat", "(", ")", "this", ".", "context", "\"", "logging.config=classpath:nondefault.xml", "\"", "+", ".", "getEnvironment", ".", "getClassLoader", "(", ")", "this", ".", "output", "(", ")", "\"", "Hello world", "\"", ".", "substring", "(", ")", "(", "output", ")", ".", "getAbsolutePath", "\"", "logging.file.path=", "\"", "this", ".", "tempDir", "this", ".", "context", "(", ")", "this", ".", "context", "(", ")", "LoggingApplicationListenerTests", ".", "class", ".", "toString", "(", ")", "new", "File", "(", ")", "this", ".", "output", "(", ")", "existingOutput", ".", "length", "(", ",", ")", "(", ")", ".", "toFile", "\"", "spring.log", "\"", "this", ".", "tempDir", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 199, "ast_depth": 12, "n_identifiers": 24, "vocab_size": 47, "n_whitespaces": 50, "n_words": 61, "nloc": 12, "token_counts": 136}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#271-279", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "parseDebugArg", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#parseDebugArg", "start_line": 271, "end_line": 279, "signature": "parseDebugArg()", "original_code": "@Test\n\tvoid parseDebugArg() {\n\t\taddPropertiesToEnvironment(this.context, \"debug\");\n\t\tthis.listener.initialize(this.context.getEnvironment(), this.context.getClassLoader());\n\t\tthis.logger.debug(\"testatdebug\");\n\t\tthis.logger.trace(\"testattrace\");\n\t\tassertThat(this.output).contains(\"testatdebug\");\n\t\tassertThat(this.output).doesNotContain(\"testattrace\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "parseDebugArg", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ";", ";", ";", "addPropertiesToEnvironment", ".", "initialize", ".", "debug", ".", "trace", ".", "contains", ".", "doesNotContain", "(", ",", ")", "this", ".", "listener", "(", ",", ")", "this", ".", "logger", "(", ")", "this", ".", "logger", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "this", ".", "context", "\"", "debug", "\"", ".", "getEnvironment", ".", "getClassLoader", "\"", "testatdebug", "\"", "\"", "testattrace", "\"", "(", ")", "\"", "testatdebug", "\"", "(", ")", "\"", "testattrace", "\"", "this", ".", "context", "(", ")", "this", ".", "context", "(", ")", "this", ".", "output", "this", ".", "output"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 137, "ast_depth": 9, "n_identifiers": 15, "vocab_size": 28, "n_whitespaces": 26, "n_words": 34, "nloc": 9, "token_counts": 92}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#281-291", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "parseDebugArgExpandGroups", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#parseDebugArgExpandGroups", "start_line": 281, "end_line": 291, "signature": "parseDebugArgExpandGroups()", "original_code": "@Test\n\tvoid parseDebugArgExpandGroups() {\n\t\taddPropertiesToEnvironment(this.context, \"debug\");\n\t\tthis.listener.initialize(this.context.getEnvironment(), this.context.getClassLoader());\n\t\tthis.loggerContext.getLogger(\"org.springframework.boot.actuate.endpoint.web\").debug(\"testdebugwebgroup\");\n\t\tthis.loggerContext.getLogger(\"org.hibernate.SQL\").debug(\"testdebugsqlgroup\");\n\t\tassertThat(this.output).contains(\"testdebugwebgroup\");\n\t\tassertThat(this.output).contains(\"testdebugsqlgroup\");\n\t\tLoggerGroups loggerGroups = (LoggerGroups) ReflectionTestUtils.getField(this.listener, \"loggerGroups\");\n\t\tassertThat(loggerGroups.get(\"web\").getConfiguredLevel()).isEqualTo(LogLevel.DEBUG);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "parseDebugArgExpandGroups", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ";", ";", ";", "LoggerGroups", ";", ";", "addPropertiesToEnvironment", ".", "initialize", ".", "debug", ".", "debug", ".", "contains", ".", "contains", "loggerGroups", "=", ".", "isEqualTo", "(", ",", ")", "this", ".", "listener", "(", ",", ")", ".", "getLogger", "(", ")", ".", "getLogger", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "(", "LoggerGroups", ")", "assertThat", "(", ")", "this", ".", "context", "\"", "debug", "\"", ".", "getEnvironment", ".", "getClassLoader", "this", ".", "loggerContext", "(", ")", "\"", "testdebugwebgroup", "\"", "this", ".", "loggerContext", "(", ")", "\"", "testdebugsqlgroup", "\"", "(", ")", "\"", "testdebugwebgroup", "\"", "(", ")", "\"", "testdebugsqlgroup", "\"", "ReflectionTestUtils", ".", "getField", "(", ")", "LogLevel", ".", "DEBUG", "this", ".", "context", "(", ")", "this", ".", "context", "(", ")", "\"", "org.springframework.boot.actuate.endpoint.web", "\"", "\"", "org.hibernate.SQL", "\"", "this", ".", "output", "this", ".", "output", "(", ",", ")", ".", "getConfiguredLevel", "this", ".", "listener", "\"", "loggerGroups", "\"", "loggerGroups", ".", "get", "(", ")", "(", ")", "\"", "web", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 217, "ast_depth": 12, "n_identifiers": 22, "vocab_size": 40, "n_whitespaces": 37, "n_words": 61, "nloc": 11, "token_counts": 148}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#293-301", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "parseTraceArg", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#parseTraceArg", "start_line": 293, "end_line": 301, "signature": "parseTraceArg()", "original_code": "@Test\n\tvoid parseTraceArg() {\n\t\taddPropertiesToEnvironment(this.context, \"trace\");\n\t\tthis.listener.initialize(this.context.getEnvironment(), this.context.getClassLoader());\n\t\tthis.logger.debug(\"testatdebug\");\n\t\tthis.logger.trace(\"testattrace\");\n\t\tassertThat(this.output).contains(\"testatdebug\");\n\t\tassertThat(this.output).contains(\"testattrace\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "parseTraceArg", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ";", ";", ";", "addPropertiesToEnvironment", ".", "initialize", ".", "debug", ".", "trace", ".", "contains", ".", "contains", "(", ",", ")", "this", ".", "listener", "(", ",", ")", "this", ".", "logger", "(", ")", "this", ".", "logger", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "this", ".", "context", "\"", "trace", "\"", ".", "getEnvironment", ".", "getClassLoader", "\"", "testatdebug", "\"", "\"", "testattrace", "\"", "(", ")", "\"", "testatdebug", "\"", "(", ")", "\"", "testattrace", "\"", "this", ".", "context", "(", ")", "this", ".", "context", "(", ")", "this", ".", "output", "this", ".", "output"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 137, "ast_depth": 9, "n_identifiers": 14, "vocab_size": 27, "n_whitespaces": 26, "n_words": 34, "nloc": 9, "token_counts": 92}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#303-306", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "disableDebugArg", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#disableDebugArg", "start_line": 303, "end_line": 306, "signature": "disableDebugArg()", "original_code": "@Test\n\tvoid disableDebugArg() {\n\t\tdisableDebugTraceArg(\"debug=false\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "disableDebugArg", "(", ")", "{", "}", "@", "Test", ";", "disableDebugTraceArg", "(", ")", "\"", "debug=false", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 25, "ast_depth": 8, "n_identifiers": 3, "vocab_size": 12, "n_whitespaces": 9, "n_words": 6, "nloc": 4, "token_counts": 15}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#308-311", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "disableTraceArg", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#disableTraceArg", "start_line": 308, "end_line": 311, "signature": "disableTraceArg()", "original_code": "@Test\n\tvoid disableTraceArg() {\n\t\tdisableDebugTraceArg(\"trace=false\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "disableTraceArg", "(", ")", "{", "}", "@", "Test", ";", "disableDebugTraceArg", "(", ")", "\"", "trace=false", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 25, "ast_depth": 8, "n_identifiers": 3, "vocab_size": 12, "n_whitespaces": 9, "n_words": 6, "nloc": 4, "token_counts": 15}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#313-320", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "disableDebugTraceArg", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#disableDebugTraceArg", "start_line": 313, "end_line": 320, "signature": "disableDebugTraceArg(String... environment)", "original_code": "private void disableDebugTraceArg(String... environment) {\n\t\taddPropertiesToEnvironment(this.context, environment);\n\t\tthis.listener.initialize(this.context.getEnvironment(), this.context.getClassLoader());\n\t\tthis.logger.debug(\"testatdebug\");\n\t\tthis.logger.trace(\"testattrace\");\n\t\tassertThat(this.output).doesNotContain(\"testatdebug\");\n\t\tassertThat(this.output).doesNotContain(\"testattrace\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "disableDebugTraceArg", "private", "(", ")", "{", "}", "String", "...", ";", ";", ";", ";", ";", ";", "environment", "addPropertiesToEnvironment", ".", "initialize", ".", "debug", ".", "trace", ".", "doesNotContain", ".", "doesNotContain", "(", ",", "environment", ")", "this", ".", "listener", "(", ",", ")", "this", ".", "logger", "(", ")", "this", ".", "logger", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "this", ".", "context", ".", "getEnvironment", ".", "getClassLoader", "\"", "testatdebug", "\"", "\"", "testattrace", "\"", "(", ")", "\"", "testatdebug", "\"", "(", ")", "\"", "testattrace", "\"", "this", ".", "context", "(", ")", "this", ".", "context", "(", ")", "this", ".", "output", "this", ".", "output"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 137, "ast_depth": 9, "n_identifiers": 14, "vocab_size": 29, "n_whitespaces": 26, "n_words": 36, "nloc": 8, "token_counts": 92}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#322-330", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "parseLevels", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#parseLevels", "start_line": 322, "end_line": 330, "signature": "parseLevels()", "original_code": "@Test\n\tvoid parseLevels() {\n\t\taddPropertiesToEnvironment(this.context, \"logging.level.org.springframework.boot=TRACE\");\n\t\tthis.listener.initialize(this.context.getEnvironment(), this.context.getClassLoader());\n\t\tthis.logger.debug(\"testatdebug\");\n\t\tthis.logger.trace(\"testattrace\");\n\t\tassertThat(this.output).contains(\"testatdebug\");\n\t\tassertThat(this.output).contains(\"testattrace\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "parseLevels", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ";", ";", ";", "addPropertiesToEnvironment", ".", "initialize", ".", "debug", ".", "trace", ".", "contains", ".", "contains", "(", ",", ")", "this", ".", "listener", "(", ",", ")", "this", ".", "logger", "(", ")", "this", ".", "logger", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "this", ".", "context", "\"", "logging.level.org.springframework.boot=TRACE", "\"", ".", "getEnvironment", ".", "getClassLoader", "\"", "testatdebug", "\"", "\"", "testattrace", "\"", "(", ")", "\"", "testatdebug", "\"", "(", ")", "\"", "testattrace", "\"", "this", ".", "context", "(", ")", "this", ".", "context", "(", ")", "this", ".", "output", "this", ".", "output"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 137, "ast_depth": 9, "n_identifiers": 14, "vocab_size": 28, "n_whitespaces": 26, "n_words": 39, "nloc": 9, "token_counts": 92}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#332-340", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "parseLevelsCaseInsensitive", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#parseLevelsCaseInsensitive", "start_line": 332, "end_line": 340, "signature": "parseLevelsCaseInsensitive()", "original_code": "@Test\n\tvoid parseLevelsCaseInsensitive() {\n\t\taddPropertiesToEnvironment(this.context, \"logging.level.org.springframework.boot=TrAcE\");\n\t\tthis.listener.initialize(this.context.getEnvironment(), this.context.getClassLoader());\n\t\tthis.logger.debug(\"testatdebug\");\n\t\tthis.logger.trace(\"testattrace\");\n\t\tassertThat(this.output).contains(\"testatdebug\");\n\t\tassertThat(this.output).contains(\"testattrace\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "parseLevelsCaseInsensitive", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ";", ";", ";", "addPropertiesToEnvironment", ".", "initialize", ".", "debug", ".", "trace", ".", "contains", ".", "contains", "(", ",", ")", "this", ".", "listener", "(", ",", ")", "this", ".", "logger", "(", ")", "this", ".", "logger", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "this", ".", "context", "\"", "logging.level.org.springframework.boot=TrAcE", "\"", ".", "getEnvironment", ".", "getClassLoader", "\"", "testatdebug", "\"", "\"", "testattrace", "\"", "(", ")", "\"", "testatdebug", "\"", "(", ")", "\"", "testattrace", "\"", "this", ".", "context", "(", ")", "this", ".", "context", "(", ")", "this", ".", "output", "this", ".", "output"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 137, "ast_depth": 9, "n_identifiers": 14, "vocab_size": 28, "n_whitespaces": 26, "n_words": 39, "nloc": 9, "token_counts": 92}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#342-350", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "parseLevelsTrimsWhitespace", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#parseLevelsTrimsWhitespace", "start_line": 342, "end_line": 350, "signature": "parseLevelsTrimsWhitespace()", "original_code": "@Test\n\tvoid parseLevelsTrimsWhitespace() {\n\t\taddPropertiesToEnvironment(this.context, \"logging.level.org.springframework.boot= trace \");\n\t\tthis.listener.initialize(this.context.getEnvironment(), this.context.getClassLoader());\n\t\tthis.logger.debug(\"testatdebug\");\n\t\tthis.logger.trace(\"testattrace\");\n\t\tassertThat(this.output).contains(\"testatdebug\");\n\t\tassertThat(this.output).contains(\"testattrace\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "parseLevelsTrimsWhitespace", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ";", ";", ";", "addPropertiesToEnvironment", ".", "initialize", ".", "debug", ".", "trace", ".", "contains", ".", "contains", "(", ",", ")", "this", ".", "listener", "(", ",", ")", "this", ".", "logger", "(", ")", "this", ".", "logger", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "this", ".", "context", "\"", "logging.level.org.springframework.boot= trace ", "\"", ".", "getEnvironment", ".", "getClassLoader", "\"", "testatdebug", "\"", "\"", "testattrace", "\"", "(", ")", "\"", "testatdebug", "\"", "(", ")", "\"", "testattrace", "\"", "this", ".", "context", "(", ")", "this", ".", "context", "(", ")", "this", ".", "output", "this", ".", "output"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 137, "ast_depth": 9, "n_identifiers": 14, "vocab_size": 28, "n_whitespaces": 28, "n_words": 39, "nloc": 9, "token_counts": 92}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#352-360", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "parseLevelsWithPlaceholder", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#parseLevelsWithPlaceholder", "start_line": 352, "end_line": 360, "signature": "parseLevelsWithPlaceholder()", "original_code": "@Test\n\tvoid parseLevelsWithPlaceholder() {\n\t\taddPropertiesToEnvironment(this.context, \"foo=TRACE\", \"logging.level.org.springframework.boot=${foo}\");\n\t\tthis.listener.initialize(this.context.getEnvironment(), this.context.getClassLoader());\n\t\tthis.logger.debug(\"testatdebug\");\n\t\tthis.logger.trace(\"testattrace\");\n\t\tassertThat(this.output).contains(\"testatdebug\");\n\t\tassertThat(this.output).contains(\"testattrace\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "parseLevelsWithPlaceholder", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ";", ";", ";", "addPropertiesToEnvironment", ".", "initialize", ".", "debug", ".", "trace", ".", "contains", ".", "contains", "(", ",", ",", ")", "this", ".", "listener", "(", ",", ")", "this", ".", "logger", "(", ")", "this", ".", "logger", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "this", ".", "context", "\"", "foo=TRACE", "\"", "\"", "logging.level.org.springframework.boot=${foo}", "\"", ".", "getEnvironment", ".", "getClassLoader", "\"", "testatdebug", "\"", "\"", "testattrace", "\"", "(", ")", "\"", "testatdebug", "\"", "(", ")", "\"", "testattrace", "\"", "this", ".", "context", "(", ")", "this", ".", "context", "(", ")", "this", ".", "output", "this", ".", "output"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 142, "ast_depth": 9, "n_identifiers": 14, "vocab_size": 29, "n_whitespaces": 27, "n_words": 41, "nloc": 9, "token_counts": 96}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#362-368", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "parseLevelsFails", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#parseLevelsFails", "start_line": 362, "end_line": 368, "signature": "parseLevelsFails()", "original_code": "@Test\n\tvoid parseLevelsFails() {\n\t\tthis.logger.setLevel(Level.INFO);\n\t\taddPropertiesToEnvironment(this.context, \"logging.level.org.springframework.boot=GARBAGE\");\n\t\tassertThatExceptionOfType(BindException.class)\n\t\t\t.isThrownBy(() -> this.listener.initialize(this.context.getEnvironment(), this.context.getClassLoader()));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "parseLevelsFails", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ".", "setLevel", "addPropertiesToEnvironment", ".", "isThrownBy", "this", ".", "logger", "(", ")", "(", ",", ")", "assertThatExceptionOfType", "(", ")", "Level", ".", "INFO", "this", ".", "context", "\"", "logging.level.org.springframework.boot=GARBAGE", "\"", "(", ")", "->", "BindException", ".", "class", "(", ")", ".", "initialize", "this", ".", "listener", "(", ",", ")", ".", "getEnvironment", ".", "getClassLoader", "this", ".", "context", "(", ")", "this", ".", "context", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 99, "ast_depth": 12, "n_identifiers": 14, "vocab_size": 29, "n_whitespaces": 23, "n_words": 30, "nloc": 7, "token_counts": 66}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#370-377", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "parseLevelsNone", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#parseLevelsNone", "start_line": 370, "end_line": 377, "signature": "parseLevelsNone()", "original_code": "@Test\n\tvoid parseLevelsNone() {\n\t\taddPropertiesToEnvironment(this.context, \"logging.level.org.springframework.boot=OFF\");\n\t\tthis.listener.initialize(this.context.getEnvironment(), this.context.getClassLoader());\n\t\tthis.logger.debug(\"testatdebug\");\n\t\tthis.logger.error(\"testaterror\");\n\t\tassertThat(this.output).doesNotContain(\"testatdebug\").doesNotContain(\"testaterror\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "parseLevelsNone", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ";", ";", "addPropertiesToEnvironment", ".", "initialize", ".", "debug", ".", "error", ".", "doesNotContain", "(", ",", ")", "this", ".", "listener", "(", ",", ")", "this", ".", "logger", "(", ")", "this", ".", "logger", "(", ")", ".", "doesNotContain", "(", ")", "this", ".", "context", "\"", "logging.level.org.springframework.boot=OFF", "\"", ".", "getEnvironment", ".", "getClassLoader", "\"", "testatdebug", "\"", "\"", "testaterror", "\"", "assertThat", "(", ")", "\"", "testaterror", "\"", "this", ".", "context", "(", ")", "this", ".", "context", "(", ")", "(", ")", "\"", "testatdebug", "\"", "this", ".", "output"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 126, "ast_depth": 10, "n_identifiers": 14, "vocab_size": 28, "n_whitespaces": 23, "n_words": 36, "nloc": 8, "token_counts": 85}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#379-386", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "parseLevelsMapsFalseToOff", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#parseLevelsMapsFalseToOff", "start_line": 379, "end_line": 386, "signature": "parseLevelsMapsFalseToOff()", "original_code": "@Test\n\tvoid parseLevelsMapsFalseToOff() {\n\t\taddPropertiesToEnvironment(this.context, \"logging.level.org.springframework.boot=false\");\n\t\tthis.listener.initialize(this.context.getEnvironment(), this.context.getClassLoader());\n\t\tthis.logger.debug(\"testatdebug\");\n\t\tthis.logger.error(\"testaterror\");\n\t\tassertThat(this.output).doesNotContain(\"testatdebug\").doesNotContain(\"testaterror\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "parseLevelsMapsFalseToOff", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ";", ";", "addPropertiesToEnvironment", ".", "initialize", ".", "debug", ".", "error", ".", "doesNotContain", "(", ",", ")", "this", ".", "listener", "(", ",", ")", "this", ".", "logger", "(", ")", "this", ".", "logger", "(", ")", ".", "doesNotContain", "(", ")", "this", ".", "context", "\"", "logging.level.org.springframework.boot=false", "\"", ".", "getEnvironment", ".", "getClassLoader", "\"", "testatdebug", "\"", "\"", "testaterror", "\"", "assertThat", "(", ")", "\"", "testaterror", "\"", "this", ".", "context", "(", ")", "this", ".", "context", "(", ")", "(", ")", "\"", "testatdebug", "\"", "this", ".", "output"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 126, "ast_depth": 10, "n_identifiers": 14, "vocab_size": 28, "n_whitespaces": 23, "n_words": 36, "nloc": 8, "token_counts": 85}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#388-395", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "parseArgsDisabled", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#parseArgsDisabled", "start_line": 388, "end_line": 395, "signature": "parseArgsDisabled()", "original_code": "@Test\n\tvoid parseArgsDisabled() {\n\t\tthis.listener.setParseArgs(false);\n\t\taddPropertiesToEnvironment(this.context, \"debug\");\n\t\tthis.listener.initialize(this.context.getEnvironment(), this.context.getClassLoader());\n\t\tthis.logger.debug(\"testatdebug\");\n\t\tassertThat(this.output).doesNotContain(\"testatdebug\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "parseArgsDisabled", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ";", ";", ".", "setParseArgs", "addPropertiesToEnvironment", ".", "initialize", ".", "debug", ".", "doesNotContain", "this", ".", "listener", "(", "false", ")", "(", ",", ")", "this", ".", "listener", "(", ",", ")", "this", ".", "logger", "(", ")", "assertThat", "(", ")", "this", ".", "context", "\"", "debug", "\"", ".", "getEnvironment", ".", "getClassLoader", "\"", "testatdebug", "\"", "(", ")", "\"", "testatdebug", "\"", "this", ".", "context", "(", ")", "this", ".", "context", "(", ")", "this", ".", "output"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 113, "ast_depth": 9, "n_identifiers": 14, "vocab_size": 27, "n_whitespaces": 23, "n_words": 29, "nloc": 8, "token_counts": 76}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#397-406", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "parseArgsDoesntReplace", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#parseArgsDoesntReplace", "start_line": 397, "end_line": 406, "signature": "parseArgsDoesntReplace()", "original_code": "@Test\n\tvoid parseArgsDoesntReplace() {\n\t\tthis.listener.setSpringBootLogging(LogLevel.ERROR);\n\t\tthis.listener.setParseArgs(false);\n\t\tmulticastEvent(new ApplicationStartingEvent(this.bootstrapContext, this.springApplication,\n\t\t\t\tnew String[] { \"--debug\" }));\n\t\tthis.listener.initialize(this.context.getEnvironment(), this.context.getClassLoader());\n\t\tthis.logger.debug(\"testatdebug\");\n\t\tassertThat(this.output).doesNotContain(\"testatdebug\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "parseArgsDoesntReplace", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ";", ";", ";", ".", "setSpringBootLogging", ".", "setParseArgs", "multicastEvent", ".", "initialize", ".", "debug", ".", "doesNotContain", "this", ".", "listener", "(", ")", "this", ".", "listener", "(", "false", ")", "(", ")", "this", ".", "listener", "(", ",", ")", "this", ".", "logger", "(", ")", "assertThat", "(", ")", "LogLevel", ".", "ERROR", "new", "ApplicationStartingEvent", ".", "getEnvironment", ".", "getClassLoader", "\"", "testatdebug", "\"", "(", ")", "\"", "testatdebug", "\"", "(", ",", ",", ")", "this", ".", "context", "(", ")", "this", ".", "context", "(", ")", "this", ".", "output", "this", ".", "bootstrapContext", "this", ".", "springApplication", "new", "String", "[", "]", "{", "}", "\"", "--debug", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 149, "ast_depth": 12, "n_identifiers": 19, "vocab_size": 38, "n_whitespaces": 36, "n_words": 40, "nloc": 10, "token_counts": 101}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#408-413", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "bridgeHandlerLifecycle", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#bridgeHandlerLifecycle", "start_line": 408, "end_line": 413, "signature": "bridgeHandlerLifecycle()", "original_code": "@Test\n\tvoid bridgeHandlerLifecycle() {\n\t\tassertThat(bridgeHandlerInstalled()).isTrue();\n\t\tmulticastEvent(new ContextClosedEvent(this.context));\n\t\tassertThat(bridgeHandlerInstalled()).isFalse();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "bridgeHandlerLifecycle", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ".", "isTrue", "multicastEvent", ".", "isFalse", "assertThat", "(", ")", "(", ")", "assertThat", "(", ")", "(", ")", "new", "ContextClosedEvent", "(", ")", "bridgeHandlerInstalled", "(", ")", "bridgeHandlerInstalled", "(", ")", "this", ".", "context", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 67, "ast_depth": 10, "n_identifiers": 8, "vocab_size": 19, "n_whitespaces": 16, "n_words": 14, "nloc": 6, "token_counts": 41}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#415-421", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "defaultExceptionConversionWord", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#defaultExceptionConversionWord", "start_line": 415, "end_line": 421, "signature": "defaultExceptionConversionWord()", "original_code": "@Test\n\tvoid defaultExceptionConversionWord() {\n\t\tthis.listener.initialize(this.context.getEnvironment(), this.context.getClassLoader());\n\t\tthis.logger.info(\"Hello world\", new RuntimeException(\"Wrapper\", new RuntimeException(\"Expected\")));\n\t\tassertThat(this.output).contains(\"Hello world\");\n\t\tassertThat(this.output).doesNotContain(\"Wrapped by: java.lang.RuntimeException: Wrapper\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "defaultExceptionConversionWord", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ";", ".", "initialize", ".", "info", ".", "contains", ".", "doesNotContain", "this", ".", "listener", "(", ",", ")", "this", ".", "logger", "(", ",", ")", "assertThat", "(", ")", "assertThat", "(", ")", ".", "getEnvironment", ".", "getClassLoader", "\"", "Hello world", "\"", "new", "RuntimeException", "(", ")", "\"", "Hello world", "\"", "(", ")", "\"", "Wrapped by: java.lang.RuntimeException: Wrapper", "\"", "this", ".", "context", "(", ")", "this", ".", "context", "(", ")", "(", ",", ")", "this", ".", "output", "this", ".", "output", "\"", "Wrapper", "\"", "new", "RuntimeException", "(", ")", "\"", "Expected", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 127, "ast_depth": 12, "n_identifiers": 13, "vocab_size": 30, "n_whitespaces": 28, "n_words": 39, "nloc": 7, "token_counts": 86}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#423-430", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "overrideExceptionConversionWord", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#overrideExceptionConversionWord", "start_line": 423, "end_line": 430, "signature": "overrideExceptionConversionWord()", "original_code": "@Test\n\tvoid overrideExceptionConversionWord() {\n\t\taddPropertiesToEnvironment(this.context, \"logging.exceptionConversionWord=%rEx\");\n\t\tthis.listener.initialize(this.context.getEnvironment(), this.context.getClassLoader());\n\t\tthis.logger.info(\"Hello world\", new RuntimeException(\"Wrapper\", new RuntimeException(\"Expected\")));\n\t\tassertThat(this.output).contains(\"Hello world\");\n\t\tassertThat(this.output).contains(\"Wrapped by: java.lang.RuntimeException: Wrapper\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "overrideExceptionConversionWord", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ";", ";", "addPropertiesToEnvironment", ".", "initialize", ".", "info", ".", "contains", ".", "contains", "(", ",", ")", "this", ".", "listener", "(", ",", ")", "this", ".", "logger", "(", ",", ")", "assertThat", "(", ")", "assertThat", "(", ")", "this", ".", "context", "\"", "logging.exceptionConversionWord=%rEx", "\"", ".", "getEnvironment", ".", "getClassLoader", "\"", "Hello world", "\"", "new", "RuntimeException", "(", ")", "\"", "Hello world", "\"", "(", ")", "\"", "Wrapped by: java.lang.RuntimeException: Wrapper", "\"", "this", ".", "context", "(", ")", "this", ".", "context", "(", ")", "(", ",", ")", "this", ".", "output", "this", ".", "output", "\"", "Wrapper", "\"", "new", "RuntimeException", "(", ")", "\"", "Expected", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 143, "ast_depth": 12, "n_identifiers": 13, "vocab_size": 31, "n_whitespaces": 32, "n_words": 45, "nloc": 8, "token_counts": 97}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#432-444", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "shutdownHookIsRegisteredByDefault", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#shutdownHookIsRegisteredByDefault", "start_line": 432, "end_line": 444, "signature": "shutdownHookIsRegisteredByDefault()", "original_code": "@Test\n\tvoid shutdownHookIsRegisteredByDefault() throws Exception {\n\t\tTestLoggingApplicationListener listener = new TestLoggingApplicationListener();\n\t\tObject registered = ReflectionTestUtils.getField(listener, TestLoggingApplicationListener.class,\n\t\t\t\t\"shutdownHookRegistered\");\n\t\t((AtomicBoolean) registered).set(false);\n\t\tSystem.setProperty(LoggingSystem.class.getName(), TestShutdownHandlerLoggingSystem.class.getName());\n\t\tmulticastEvent(listener, new ApplicationStartingEvent(this.bootstrapContext, new SpringApplication(), NO_ARGS));\n\t\tlistener.initialize(this.context.getEnvironment(), this.context.getClassLoader());\n\t\tassertThat(listener.shutdownHook).isNotNull();\n\t\tlistener.shutdownHook.run();\n\t\tassertThat(TestShutdownHandlerLoggingSystem.shutdownLatch.await(30, TimeUnit.SECONDS)).isTrue();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "shutdownHookIsRegisteredByDefault", "(", ")", "throws", "Exception", "{", "}", "@", "Test", "TestLoggingApplicationListener", ";", "Object", ";", ";", ";", ";", ";", ";", ";", ";", "listener", "=", "registered", "=", ".", "set", "System", ".", "setProperty", "multicastEvent", "listener", ".", "initialize", ".", "isNotNull", ".", "run", ".", "isTrue", "new", "TestLoggingApplicationListener", "ReflectionTestUtils", ".", "getField", "(", ")", "(", "false", ")", "(", ",", ")", "(", "listener", ",", ")", "(", ",", ")", "assertThat", "(", ")", "listener", ".", "shutdownHook", "(", ")", "assertThat", "(", ")", "(", ")", "(", "listener", ",", ",", ")", "(", "AtomicBoolean", ")", "registered", ".", "getName", ".", "getName", "new", "ApplicationStartingEvent", ".", "getEnvironment", ".", "getClassLoader", "(", ")", "(", ")", "TestLoggingApplicationListener", ".", "class", "\"", "shutdownHookRegistered", "\"", "LoggingSystem", ".", "class", "(", ")", "TestShutdownHandlerLoggingSystem", ".", "class", "(", ")", "(", ",", ",", "NO_ARGS", ")", "this", ".", "context", "(", ")", "this", ".", "context", "(", ")", "listener", ".", "shutdownHook", ".", "await", "this", ".", "bootstrapContext", "new", "SpringApplication", "TestShutdownHandlerLoggingSystem", ".", "shutdownLatch", "(", "30", ",", ")", "(", ")", "TimeUnit", ".", "SECONDS"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 216, "ast_depth": 11, "n_identifiers": 27, "vocab_size": 52, "n_whitespaces": 57, "n_words": 61, "nloc": 13, "token_counts": 149}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#446-457", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "shutdownHookRegistrationCanBeDisabled", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#shutdownHookRegistrationCanBeDisabled", "start_line": 446, "end_line": 457, "signature": "shutdownHookRegistrationCanBeDisabled()", "original_code": "@Test\n\tvoid shutdownHookRegistrationCanBeDisabled() {\n\t\tTestLoggingApplicationListener listener = new TestLoggingApplicationListener();\n\t\tObject registered = ReflectionTestUtils.getField(listener, TestLoggingApplicationListener.class,\n\t\t\t\t\"shutdownHookRegistered\");\n\t\t((AtomicBoolean) registered).set(false);\n\t\tSystem.setProperty(LoggingSystem.class.getName(), TestShutdownHandlerLoggingSystem.class.getName());\n\t\taddPropertiesToEnvironment(this.context, \"logging.register_shutdown_hook=false\");\n\t\tmulticastEvent(listener, new ApplicationStartingEvent(this.bootstrapContext, new SpringApplication(), NO_ARGS));\n\t\tlistener.initialize(this.context.getEnvironment(), this.context.getClassLoader());\n\t\tassertThat(listener.shutdownHook).isNull();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "shutdownHookRegistrationCanBeDisabled", "(", ")", "{", "}", "@", "Test", "TestLoggingApplicationListener", ";", "Object", ";", ";", ";", ";", ";", ";", ";", "listener", "=", "registered", "=", ".", "set", "System", ".", "setProperty", "addPropertiesToEnvironment", "multicastEvent", "listener", ".", "initialize", ".", "isNull", "new", "TestLoggingApplicationListener", "ReflectionTestUtils", ".", "getField", "(", ")", "(", "false", ")", "(", ",", ")", "(", ",", ")", "(", "listener", ",", ")", "(", ",", ")", "assertThat", "(", ")", "(", ")", "(", "listener", ",", ",", ")", "(", "AtomicBoolean", ")", "registered", ".", "getName", ".", "getName", "this", ".", "context", "\"", "logging.register_shutdown_hook=false", "\"", "new", "ApplicationStartingEvent", ".", "getEnvironment", ".", "getClassLoader", "(", ")", "TestLoggingApplicationListener", ".", "class", "\"", "shutdownHookRegistered", "\"", "LoggingSystem", ".", "class", "(", ")", "TestShutdownHandlerLoggingSystem", ".", "class", "(", ")", "(", ",", ",", "NO_ARGS", ")", "this", ".", "context", "(", ")", "this", ".", "context", "(", ")", "listener", ".", "shutdownHook", "this", ".", "bootstrapContext", "new", "SpringApplication", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 188, "ast_depth": 11, "n_identifiers": 21, "vocab_size": 45, "n_whitespaces": 52, "n_words": 54, "nloc": 12, "token_counts": 130}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#459-468", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "closingContextCleansUpLoggingSystem", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#closingContextCleansUpLoggingSystem", "start_line": 459, "end_line": 468, "signature": "closingContextCleansUpLoggingSystem()", "original_code": "@Test\n\tvoid closingContextCleansUpLoggingSystem() {\n\t\tSystem.setProperty(LoggingSystem.SYSTEM_PROPERTY, TestCleanupLoggingSystem.class.getName());\n\t\tmulticastEvent(new ApplicationStartingEvent(this.bootstrapContext, this.springApplication, new String[0]));\n\t\tTestCleanupLoggingSystem loggingSystem = (TestCleanupLoggingSystem) ReflectionTestUtils.getField(this.listener,\n\t\t\t\t\"loggingSystem\");\n\t\tassertThat(loggingSystem.cleanedUp).isFalse();\n\t\tmulticastEvent(new ContextClosedEvent(this.context));\n\t\tassertThat(loggingSystem.cleanedUp).isTrue();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "closingContextCleansUpLoggingSystem", "(", ")", "{", "}", "@", "Test", ";", ";", "TestCleanupLoggingSystem", ";", ";", ";", ";", "System", ".", "setProperty", "multicastEvent", "loggingSystem", "=", ".", "isFalse", "multicastEvent", ".", "isTrue", "(", ",", ")", "(", ")", "(", "TestCleanupLoggingSystem", ")", "assertThat", "(", ")", "(", ")", "assertThat", "(", ")", "LoggingSystem", ".", "SYSTEM_PROPERTY", ".", "getName", "new", "ApplicationStartingEvent", "ReflectionTestUtils", ".", "getField", "(", ")", "new", "ContextClosedEvent", "(", ")", "TestCleanupLoggingSystem", ".", "class", "(", ")", "(", ",", ",", ")", "(", ",", ")", "loggingSystem", ".", "cleanedUp", "(", ")", "loggingSystem", ".", "cleanedUp", "this", ".", "bootstrapContext", "this", ".", "springApplication", "new", "String", "this", ".", "listener", "\"", "loggingSystem", "\"", "this", ".", "context", "[", "0", "]"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 145, "ast_depth": 11, "n_identifiers": 19, "vocab_size": 40, "n_whitespaces": 39, "n_words": 41, "nloc": 10, "token_counts": 98}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#470-484", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "closingChildContextDoesNotCleanUpLoggingSystem", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#closingChildContextDoesNotCleanUpLoggingSystem", "start_line": 470, "end_line": 484, "signature": "closingChildContextDoesNotCleanUpLoggingSystem()", "original_code": "@Test\n\tvoid closingChildContextDoesNotCleanUpLoggingSystem() {\n\t\tSystem.setProperty(LoggingSystem.SYSTEM_PROPERTY, TestCleanupLoggingSystem.class.getName());\n\t\tmulticastEvent(new ApplicationStartingEvent(this.bootstrapContext, this.springApplication, new String[0]));\n\t\tTestCleanupLoggingSystem loggingSystem = (TestCleanupLoggingSystem) ReflectionTestUtils.getField(this.listener,\n\t\t\t\t\"loggingSystem\");\n\t\tassertThat(loggingSystem.cleanedUp).isFalse();\n\t\tGenericApplicationContext childContext = new GenericApplicationContext();\n\t\tchildContext.setParent(this.context);\n\t\tmulticastEvent(new ContextClosedEvent(childContext));\n\t\tassertThat(loggingSystem.cleanedUp).isFalse();\n\t\tmulticastEvent(new ContextClosedEvent(this.context));\n\t\tassertThat(loggingSystem.cleanedUp).isTrue();\n\t\tchildContext.close();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "closingChildContextDoesNotCleanUpLoggingSystem", "(", ")", "{", "}", "@", "Test", ";", ";", "TestCleanupLoggingSystem", ";", ";", "GenericApplicationContext", ";", ";", ";", ";", ";", ";", ";", "System", ".", "setProperty", "multicastEvent", "loggingSystem", "=", ".", "isFalse", "childContext", "=", "childContext", ".", "setParent", "multicastEvent", ".", "isFalse", "multicastEvent", ".", "isTrue", "childContext", ".", "close", "(", ",", ")", "(", ")", "(", "TestCleanupLoggingSystem", ")", "assertThat", "(", ")", "new", "GenericApplicationContext", "(", ")", "(", ")", "assertThat", "(", ")", "(", ")", "assertThat", "(", ")", "(", ")", "LoggingSystem", ".", "SYSTEM_PROPERTY", ".", "getName", "new", "ApplicationStartingEvent", "ReflectionTestUtils", ".", "getField", "(", ")", "(", ")", "this", ".", "context", "new", "ContextClosedEvent", "(", ")", "new", "ContextClosedEvent", "(", ")", "TestCleanupLoggingSystem", ".", "class", "(", ")", "(", ",", ",", ")", "(", ",", ")", "loggingSystem", ".", "cleanedUp", "(", "childContext", ")", "loggingSystem", ".", "cleanedUp", "(", ")", "loggingSystem", ".", "cleanedUp", "this", ".", "bootstrapContext", "this", ".", "springApplication", "new", "String", "this", ".", "listener", "\"", "loggingSystem", "\"", "this", ".", "context", "[", "0", "]"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 210, "ast_depth": 11, "n_identifiers": 22, "vocab_size": 44, "n_whitespaces": 59, "n_words": 59, "nloc": 15, "token_counts": 141}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#486-500", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "systemPropertiesAreSetForLoggingConfiguration", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#systemPropertiesAreSetForLoggingConfiguration", "start_line": 486, "end_line": 500, "signature": "systemPropertiesAreSetForLoggingConfiguration()", "original_code": "@Test\n\tvoid systemPropertiesAreSetForLoggingConfiguration() {\n\t\taddPropertiesToEnvironment(this.context, \"logging.exception-conversion-word=conversion\",\n\t\t\t\t\"logging.file.name=\" + this.logFile, \"logging.file.path=path\", \"logging.pattern.console=console\",\n\t\t\t\t\"logging.pattern.file=file\", \"logging.pattern.level=level\", \"logging.pattern.correlation=correlation\",\n\t\t\t\t\"logging.pattern.rolling-file-name=my.log.%d{yyyyMMdd}.%i.gz\");\n\t\tthis.listener.initialize(this.context.getEnvironment(), this.context.getClassLoader());\n\t\tassertThat(getSystemProperty(LoggingSystemProperty.CONSOLE_PATTERN)).isEqualTo(\"console\");\n\t\tassertThat(getSystemProperty(LoggingSystemProperty.FILE_PATTERN)).isEqualTo(\"file\");\n\t\tassertThat(getSystemProperty(LoggingSystemProperty.EXCEPTION_CONVERSION_WORD)).isEqualTo(\"conversion\");\n\t\tassertThat(getSystemProperty(LoggingSystemProperty.LOG_FILE)).isEqualTo(this.logFile.getAbsolutePath());\n\t\tassertThat(getSystemProperty(LoggingSystemProperty.LEVEL_PATTERN)).isEqualTo(\"level\");\n\t\tassertThat(getSystemProperty(LoggingSystemProperty.LOG_PATH)).isEqualTo(\"path\");\n\t\tassertThat(getSystemProperty(LoggingSystemProperty.PID)).isNotNull();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "systemPropertiesAreSetForLoggingConfiguration", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ";", ";", ";", ";", ";", ";", "addPropertiesToEnvironment", ".", "initialize", ".", "isEqualTo", ".", "isEqualTo", ".", "isEqualTo", ".", "isEqualTo", ".", "isEqualTo", ".", "isEqualTo", ".", "isNotNull", "(", ",", ",", ",", ",", ",", ",", ",", ",", ")", "this", ".", "listener", "(", ",", ")", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "this", ".", "context", "\"", "logging.exception-conversion-word=conversion", "\"", "+", "\"", "logging.file.path=path", "\"", "\"", "logging.pattern.console=console", "\"", "\"", "logging.pattern.file=file", "\"", "\"", "logging.pattern.level=level", "\"", "\"", "logging.pattern.correlation=correlation", "\"", "\"", "logging.pattern.rolling-file-name=my.log.%d{yyyyMMdd}.%i.gz", "\"", ".", "getEnvironment", ".", "getClassLoader", "(", ")", "\"", "console", "\"", "(", ")", "\"", "file", "\"", "(", ")", "\"", "conversion", "\"", "(", ")", ".", "getAbsolutePath", "(", ")", "\"", "level", "\"", "(", ")", "\"", "path", "\"", "(", ")", "\"", "logging.file.name=", "\"", "this", ".", "logFile", "this", ".", "context", "(", ")", "this", ".", "context", "(", ")", "getSystemProperty", "getSystemProperty", "getSystemProperty", "getSystemProperty", "this", ".", "logFile", "(", ")", "getSystemProperty", "getSystemProperty", "getSystemProperty", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "LoggingSystemProperty", ".", "CONSOLE_PATTERN", "LoggingSystemProperty", ".", "FILE_PATTERN", "LoggingSystemProperty", ".", "EXCEPTION_CONVERSION_WORD", "LoggingSystemProperty", ".", "LOG_FILE", "LoggingSystemProperty", ".", "LEVEL_PATTERN", "LoggingSystemProperty", ".", "LOG_PATH", "LoggingSystemProperty", ".", "PID"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 288, "ast_depth": 11, "n_identifiers": 22, "vocab_size": 47, "n_whitespaces": 56, "n_words": 99, "nloc": 15, "token_counts": 194}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#502-508", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "environmentPropertiesIgnoreUnresolvablePlaceholders", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#environmentPropertiesIgnoreUnresolvablePlaceholders", "start_line": 502, "end_line": 508, "signature": "environmentPropertiesIgnoreUnresolvablePlaceholders()", "original_code": "@Test\n\tvoid environmentPropertiesIgnoreUnresolvablePlaceholders() {\n\t\t// gh-7719\n\t\taddPropertiesToEnvironment(this.context, \"logging.pattern.console=console ${doesnotexist}\");\n\t\tthis.listener.initialize(this.context.getEnvironment(), this.context.getClassLoader());\n\t\tassertThat(getSystemProperty(LoggingSystemProperty.CONSOLE_PATTERN)).isEqualTo(\"console ${doesnotexist}\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "environmentPropertiesIgnoreUnresolvablePlaceholders", "(", ")", "{", "// gh-7719", "}", "@", "Test", ";", ";", ";", "addPropertiesToEnvironment", ".", "initialize", ".", "isEqualTo", "(", ",", ")", "this", ".", "listener", "(", ",", ")", "assertThat", "(", ")", "this", ".", "context", "\"", "logging.pattern.console=console ${doesnotexist}", "\"", ".", "getEnvironment", ".", "getClassLoader", "(", ")", "\"", "console ${doesnotexist}", "\"", "this", ".", "context", "(", ")", "this", ".", "context", "(", ")", "getSystemProperty", "(", ")", "LoggingSystemProperty", ".", "CONSOLE_PATTERN"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 90, "ast_depth": 11, "n_identifiers": 13, "vocab_size": 27, "n_whitespaces": 23, "n_words": 29, "nloc": 7, "token_counts": 60}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#510-516", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "environmentPropertiesResolvePlaceholders", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#environmentPropertiesResolvePlaceholders", "start_line": 510, "end_line": 516, "signature": "environmentPropertiesResolvePlaceholders()", "original_code": "@Test\n\tvoid environmentPropertiesResolvePlaceholders() {\n\t\taddPropertiesToEnvironment(this.context, \"logging.pattern.console=console ${pid}\");\n\t\tthis.listener.initialize(this.context.getEnvironment(), this.context.getClassLoader());\n\t\tassertThat(getSystemProperty(LoggingSystemProperty.CONSOLE_PATTERN))\n\t\t\t.isEqualTo(this.context.getEnvironment().getProperty(\"logging.pattern.console\"));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "environmentPropertiesResolvePlaceholders", "(", ")", "{", "}", "@", "Test", ";", ";", ";", "addPropertiesToEnvironment", ".", "initialize", ".", "isEqualTo", "(", ",", ")", "this", ".", "listener", "(", ",", ")", "assertThat", "(", ")", "this", ".", "context", "\"", "logging.pattern.console=console ${pid}", "\"", ".", "getEnvironment", ".", "getClassLoader", "(", ")", ".", "getProperty", "this", ".", "context", "(", ")", "this", ".", "context", "(", ")", "getSystemProperty", ".", "getEnvironment", "(", ")", "(", ")", "this", ".", "context", "(", ")", "\"", "logging.pattern.console", "\"", "LoggingSystemProperty", ".", "CONSOLE_PATTERN"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 105, "ast_depth": 11, "n_identifiers": 14, "vocab_size": 27, "n_whitespaces": 22, "n_words": 32, "nloc": 7, "token_counts": 70}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#518-524", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "logFilePropertiesCanReferenceSystemProperties", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#logFilePropertiesCanReferenceSystemProperties", "start_line": 518, "end_line": 524, "signature": "logFilePropertiesCanReferenceSystemProperties()", "original_code": "@Test\n\tvoid logFilePropertiesCanReferenceSystemProperties() {\n\t\taddPropertiesToEnvironment(this.context, \"logging.file.name=\" + this.tempDir + \"${PID}.log\");\n\t\tthis.listener.initialize(this.context.getEnvironment(), this.context.getClassLoader());\n\t\tassertThat(getSystemProperty(LoggingSystemProperty.LOG_FILE))\n\t\t\t.isEqualTo(this.tempDir + new ApplicationPid().toString() + \".log\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "logFilePropertiesCanReferenceSystemProperties", "(", ")", "{", "}", "@", "Test", ";", ";", ";", "addPropertiesToEnvironment", ".", "initialize", ".", "isEqualTo", "(", ",", ")", "this", ".", "listener", "(", ",", ")", "assertThat", "(", ")", "this", ".", "context", "+", ".", "getEnvironment", ".", "getClassLoader", "(", ")", "+", "+", "\"", "${PID}.log", "\"", "this", ".", "context", "(", ")", "this", ".", "context", "(", ")", "getSystemProperty", "+", "\"", ".log", "\"", "\"", "logging.file.name=", "\"", "this", ".", "tempDir", "(", ")", "this", ".", "tempDir", ".", "toString", "LoggingSystemProperty", ".", "LOG_FILE", "new", "ApplicationPid", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 121, "ast_depth": 12, "n_identifiers": 15, "vocab_size": 32, "n_whitespaces": 30, "n_words": 33, "nloc": 7, "token_counts": 80}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#526-536", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "applicationFailedEventCleansUpLoggingSystem", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#applicationFailedEventCleansUpLoggingSystem", "start_line": 526, "end_line": 536, "signature": "applicationFailedEventCleansUpLoggingSystem()", "original_code": "@Test\n\tvoid applicationFailedEventCleansUpLoggingSystem() {\n\t\tSystem.setProperty(LoggingSystem.SYSTEM_PROPERTY, TestCleanupLoggingSystem.class.getName());\n\t\tmulticastEvent(new ApplicationStartingEvent(this.bootstrapContext, this.springApplication, new String[0]));\n\t\tTestCleanupLoggingSystem loggingSystem = (TestCleanupLoggingSystem) ReflectionTestUtils.getField(this.listener,\n\t\t\t\t\"loggingSystem\");\n\t\tassertThat(loggingSystem.cleanedUp).isFalse();\n\t\tmulticastEvent(new ApplicationFailedEvent(this.springApplication, new String[0],\n\t\t\t\tnew GenericApplicationContext(), new Exception()));\n\t\tassertThat(loggingSystem.cleanedUp).isTrue();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "applicationFailedEventCleansUpLoggingSystem", "(", ")", "{", "}", "@", "Test", ";", ";", "TestCleanupLoggingSystem", ";", ";", ";", ";", "System", ".", "setProperty", "multicastEvent", "loggingSystem", "=", ".", "isFalse", "multicastEvent", ".", "isTrue", "(", ",", ")", "(", ")", "(", "TestCleanupLoggingSystem", ")", "assertThat", "(", ")", "(", ")", "assertThat", "(", ")", "LoggingSystem", ".", "SYSTEM_PROPERTY", ".", "getName", "new", "ApplicationStartingEvent", "ReflectionTestUtils", ".", "getField", "(", ")", "new", "ApplicationFailedEvent", "(", ")", "TestCleanupLoggingSystem", ".", "class", "(", ")", "(", ",", ",", ")", "(", ",", ")", "loggingSystem", ".", "cleanedUp", "(", ",", ",", ",", ")", "loggingSystem", ".", "cleanedUp", "this", ".", "bootstrapContext", "this", ".", "springApplication", "new", "String", "this", ".", "listener", "\"", "loggingSystem", "\"", "this", ".", "springApplication", "new", "String", "new", "GenericApplicationContext", "new", "Exception", "[", "0", "]", "[", "0", "]", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 167, "ast_depth": 11, "n_identifiers": 18, "vocab_size": 41, "n_whitespaces": 49, "n_words": 48, "nloc": 11, "token_counts": 114}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#538-562", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "cleanupOccursAfterWebServerShutdown", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#cleanupOccursAfterWebServerShutdown", "start_line": 538, "end_line": 562, "signature": "cleanupOccursAfterWebServerShutdown()", "original_code": "@Test\n\tvoid cleanupOccursAfterWebServerShutdown() {\n\t\tSystem.setProperty(LoggingSystem.SYSTEM_PROPERTY, TestCleanupLoggingSystem.class.getName());\n\t\tthis.springApplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tConfigurableApplicationContext context = this.springApplication.run();\n\t\tApplicationListener<?> listener = this.springApplication.getListeners()\n\t\t\t.stream()\n\t\t\t.filter(LoggingApplicationListener.class::isInstance)\n\t\t\t.findFirst()\n\t\t\t.get();\n\t\tTestCleanupLoggingSystem loggingSystem = (TestCleanupLoggingSystem) ReflectionTestUtils.getField(listener,\n\t\t\t\t\"loggingSystem\");\n\t\tassertThat(loggingSystem.cleanedUp).isFalse();\n\t\tWebServerStyleLifecycle lifecycle = context.getBean(WebServerStyleLifecycle.class);\n\t\tAtomicBoolean called = new AtomicBoolean();\n\t\tAtomicBoolean cleanupOnStop = new AtomicBoolean();\n\t\tlifecycle.onStop = () -> {\n\t\t\tcalled.set(true);\n\t\t\tcleanupOnStop.set(loggingSystem.cleanedUp);\n\t\t};\n\t\tcontext.close();\n\t\tassertThat(called).isTrue();\n\t\tassertThat(cleanupOnStop).isFalse();\n\t\tassertThat(loggingSystem.cleanedUp).isTrue();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "cleanupOccursAfterWebServerShutdown", "(", ")", "{", "}", "@", "Test", ";", ";", "ConfigurableApplicationContext", ";", ";", "TestCleanupLoggingSystem", ";", ";", "WebServerStyleLifecycle", ";", "AtomicBoolean", ";", "AtomicBoolean", ";", ";", ";", ";", ";", ";", "System", ".", "setProperty", ".", "setWebApplicationType", "context", "=", "ApplicationListener", "listener", "=", "loggingSystem", "=", ".", "isFalse", "lifecycle", "=", "called", "=", "cleanupOnStop", "=", "=", "context", ".", "close", ".", "isTrue", ".", "isFalse", ".", "isTrue", "(", ",", ")", "this", ".", "springApplication", "(", ")", ".", "run", "<", ">", ".", "get", "(", "TestCleanupLoggingSystem", ")", "assertThat", "(", ")", "context", ".", "getBean", "new", "AtomicBoolean", "new", "AtomicBoolean", "lifecycle", ".", "onStop", "->", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "LoggingSystem", ".", "SYSTEM_PROPERTY", ".", "getName", "WebApplicationType", ".", "NONE", "this", ".", "springApplication", "(", ")", "?", ".", "findFirst", "(", ")", "ReflectionTestUtils", ".", "getField", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "{", "}", "(", "called", ")", "(", "cleanupOnStop", ")", "(", ")", "TestCleanupLoggingSystem", ".", "class", "(", ")", ".", "filter", "(", ")", "(", "listener", ",", ")", "loggingSystem", ".", "cleanedUp", "WebServerStyleLifecycle", ".", "class", ";", ";", "loggingSystem", ".", "cleanedUp", ".", "stream", "(", ")", "\"", "loggingSystem", "\"", "called", ".", "set", "cleanupOnStop", ".", "set", ".", "getListeners", "(", ")", "::", "isInstance", "(", "true", ")", "(", ")", "this", ".", "springApplication", "(", ")", "LoggingApplicationListener", ".", "class", "loggingSystem", ".", "cleanedUp"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 297, "ast_depth": 12, "n_identifiers": 34, "vocab_size": 60, "n_whitespaces": 106, "n_words": 78, "nloc": 25, "token_counts": 199}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#564-573", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "lowPriorityPropertySourceShouldNotOverrideRootLoggerConfig", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#lowPriorityPropertySourceShouldNotOverrideRootLoggerConfig", "start_line": 564, "end_line": 573, "signature": "lowPriorityPropertySourceShouldNotOverrideRootLoggerConfig()", "original_code": "@Test\n\tvoid lowPriorityPropertySourceShouldNotOverrideRootLoggerConfig() {\n\t\tMutablePropertySources propertySources = this.context.getEnvironment().getPropertySources();\n\t\tpropertySources\n\t\t\t.addFirst(new MapPropertySource(\"test1\", Collections.singletonMap(\"logging.level.ROOT\", \"DEBUG\")));\n\t\tpropertySources.addLast(new MapPropertySource(\"test2\", Collections.singletonMap(\"logging.level.root\", \"WARN\")));\n\t\tthis.listener.initialize(this.context.getEnvironment(), this.context.getClassLoader());\n\t\tthis.logger.debug(\"testatdebug\");\n\t\tassertThat(this.output).contains(\"testatdebug\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "lowPriorityPropertySourceShouldNotOverrideRootLoggerConfig", "(", ")", "{", "}", "@", "Test", "MutablePropertySources", ";", ";", ";", ";", ";", ";", "propertySources", "=", "propertySources", ".", "addFirst", "propertySources", ".", "addLast", ".", "initialize", ".", "debug", ".", "contains", ".", "getPropertySources", "(", ")", "(", ")", "this", ".", "listener", "(", ",", ")", "this", ".", "logger", "(", ")", "assertThat", "(", ")", ".", "getEnvironment", "(", ")", "new", "MapPropertySource", "new", "MapPropertySource", ".", "getEnvironment", ".", "getClassLoader", "\"", "testatdebug", "\"", "(", ")", "\"", "testatdebug", "\"", "this", ".", "context", "(", ")", "(", ",", ")", "(", ",", ")", "this", ".", "context", "(", ")", "this", ".", "context", "(", ")", "this", ".", "output", "\"", "test1", "\"", "Collections", ".", "singletonMap", "\"", "test2", "\"", "Collections", ".", "singletonMap", "(", ",", ")", "(", ",", ")", "\"", "logging.level.ROOT", "\"", "\"", "DEBUG", "\"", "\"", "logging.level.root", "\"", "\"", "WARN", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 178, "ast_depth": 12, "n_identifiers": 18, "vocab_size": 40, "n_whitespaces": 38, "n_words": 49, "nloc": 10, "token_counts": 123}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#575-585", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "loggingGroupsDefaultsAreApplied", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#loggingGroupsDefaultsAreApplied", "start_line": 575, "end_line": 585, "signature": "loggingGroupsDefaultsAreApplied()", "original_code": "@Test\n\tvoid loggingGroupsDefaultsAreApplied() {\n\t\taddPropertiesToEnvironment(this.context, \"logging.level.web=TRACE\");\n\t\tthis.listener.initialize(this.context.getEnvironment(), this.context.getClassLoader());\n\t\tassertTraceEnabled(\"org.springframework.core\", false);\n\t\tassertTraceEnabled(\"org.springframework.core.codec\", true);\n\t\tassertTraceEnabled(\"org.springframework.http\", true);\n\t\tassertTraceEnabled(\"org.springframework.web\", true);\n\t\tassertTraceEnabled(\"org.springframework.boot.actuate.endpoint.web\", true);\n\t\tassertTraceEnabled(\"org.springframework.boot.web.servlet.ServletContextInitializerBeans\", true);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "loggingGroupsDefaultsAreApplied", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ";", ";", ";", ";", ";", "addPropertiesToEnvironment", ".", "initialize", "assertTraceEnabled", "assertTraceEnabled", "assertTraceEnabled", "assertTraceEnabled", "assertTraceEnabled", "assertTraceEnabled", "(", ",", ")", "this", ".", "listener", "(", ",", ")", "(", ",", "false", ")", "(", ",", "true", ")", "(", ",", "true", ")", "(", ",", "true", ")", "(", ",", "true", ")", "(", ",", "true", ")", "this", ".", "context", "\"", "logging.level.web=TRACE", "\"", ".", "getEnvironment", ".", "getClassLoader", "\"", "org.springframework.core", "\"", "\"", "org.springframework.core.codec", "\"", "\"", "org.springframework.http", "\"", "\"", "org.springframework.web", "\"", "\"", "org.springframework.boot.actuate.endpoint.web", "\"", "\"", "org.springframework.boot.web.servlet.ServletContextInitializerBeans", "\"", "this", ".", "context", "(", ")", "this", ".", "context", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 141, "ast_depth": 9, "n_identifiers": 9, "vocab_size": 29, "n_whitespaces": 38, "n_words": 56, "nloc": 11, "token_counts": 96}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#587-595", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "loggingGroupsCanBeDefined", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#loggingGroupsCanBeDefined", "start_line": 587, "end_line": 595, "signature": "loggingGroupsCanBeDefined()", "original_code": "@Test\n\tvoid loggingGroupsCanBeDefined() {\n\t\taddPropertiesToEnvironment(this.context, \"logging.group.foo=com.foo.bar,com.foo.baz\",\n\t\t\t\t\"logging.level.foo=TRACE\");\n\t\tthis.listener.initialize(this.context.getEnvironment(), this.context.getClassLoader());\n\t\tassertTraceEnabled(\"com.foo\", false);\n\t\tassertTraceEnabled(\"com.foo.bar\", true);\n\t\tassertTraceEnabled(\"com.foo.baz\", true);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "loggingGroupsCanBeDefined", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ";", ";", "addPropertiesToEnvironment", ".", "initialize", "assertTraceEnabled", "assertTraceEnabled", "assertTraceEnabled", "(", ",", ",", ")", "this", ".", "listener", "(", ",", ")", "(", ",", "false", ")", "(", ",", "true", ")", "(", ",", "true", ")", "this", ".", "context", "\"", "logging.group.foo=com.foo.bar,com.foo.baz", "\"", "\"", "logging.level.foo=TRACE", "\"", ".", "getEnvironment", ".", "getClassLoader", "\"", "com.foo", "\"", "\"", "com.foo.bar", "\"", "\"", "com.foo.baz", "\"", "this", ".", "context", "(", ")", "this", ".", "context", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 107, "ast_depth": 9, "n_identifiers": 9, "vocab_size": 27, "n_whitespaces": 31, "n_words": 42, "nloc": 9, "token_counts": 73}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#597-599", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "getSystemProperty", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#getSystemProperty", "start_line": 597, "end_line": 599, "signature": "getSystemProperty(LoggingSystemProperty property)", "original_code": "private String getSystemProperty(LoggingSystemProperty property) {\n\t\treturn System.getProperty(property.getEnvironmentVariableName());\n\t}", "doc_comment": ""}, "code_tokens": ["String", "getSystemProperty", "private", "(", ")", "{", "}", "LoggingSystemProperty", "property", "return", ";", "System", ".", "getProperty", "(", ")", "property", ".", "getEnvironmentVariableName", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 32, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 15, "n_whitespaces": 10, "n_words": 10, "nloc": 3, "token_counts": 21}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#601-603", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "assertTraceEnabled", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#assertTraceEnabled", "start_line": 601, "end_line": 603, "signature": "assertTraceEnabled(String name, boolean expected)", "original_code": "private void assertTraceEnabled(String name, boolean expected) {\n\t\tassertThat(this.loggerContext.getLogger(name).isTraceEnabled()).isEqualTo(expected);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "assertTraceEnabled", "private", "(", ",", ")", "{", "}", "String", "name", "boolean", "expected", ";", ".", "isEqualTo", "assertThat", "(", "expected", ")", "(", ")", ".", "isTraceEnabled", ".", "getLogger", "(", ")", "this", ".", "loggerContext", "(", "name", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 50, "ast_depth": 11, "n_identifiers": 8, "vocab_size": 20, "n_whitespaces": 11, "n_words": 15, "nloc": 3, "token_counts": 33}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#605-607", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "multicastEvent", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#multicastEvent", "start_line": 605, "end_line": 607, "signature": "multicastEvent(ApplicationEvent event)", "original_code": "private void multicastEvent(ApplicationEvent event) {\n\t\tmulticastEvent(this.listener, event);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "multicastEvent", "private", "(", ")", "{", "}", "ApplicationEvent", "event", ";", "multicastEvent", "(", ",", "event", ")", "this", ".", "listener"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 8, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 10, "n_words": 9, "nloc": 3, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#609-613", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "multicastEvent", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#multicastEvent", "start_line": 609, "end_line": 613, "signature": "multicastEvent(ApplicationListener<?> listener, ApplicationEvent event)", "original_code": "private void multicastEvent(ApplicationListener<?> listener, ApplicationEvent event) {\n\t\tSimpleApplicationEventMulticaster multicaster = new SimpleApplicationEventMulticaster();\n\t\tmulticaster.addApplicationListener(listener);\n\t\tmulticaster.multicastEvent(event);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "multicastEvent", "private", "(", ",", ")", "{", "}", "listener", "ApplicationEvent", "event", "SimpleApplicationEventMulticaster", ";", ";", ";", "ApplicationListener", "multicaster", "=", "multicaster", ".", "addApplicationListener", "multicaster", ".", "multicastEvent", "<", ">", "new", "SimpleApplicationEventMulticaster", "(", "listener", ")", "(", "event", ")", "?", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 57, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 22, "n_whitespaces": 21, "n_words": 17, "nloc": 5, "token_counts": 37}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#615-624", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "bridgeHandlerInstalled", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#bridgeHandlerInstalled", "start_line": 615, "end_line": 624, "signature": "bridgeHandlerInstalled()", "original_code": "private boolean bridgeHandlerInstalled() {\n\t\tLogger rootLogger = LogManager.getLogManager().getLogger(\"\");\n\t\tHandler[] handlers = rootLogger.getHandlers();\n\t\tfor (Handler handler : handlers) {\n\t\t\tif (handler instanceof SLF4JBridgeHandler) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}", "doc_comment": ""}, "code_tokens": ["boolean", "bridgeHandlerInstalled", "private", "(", ")", "{", "}", "Logger", ";", ";", "for", "(", "Handler", "handler", ":", "handlers", ")", "return", "false", ";", "rootLogger", "=", "Handler", "handlers", "=", "{", "}", ".", "getLogger", "[", "]", "rootLogger", ".", "getHandlers", "if", "LogManager", ".", "getLogManager", "(", ")", "(", ")", "(", ")", "{", "}", "(", ")", "\"", "\"", "handler", "instanceof", "SLF4JBridgeHandler", "return", "true", ";"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 82, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 30, "n_whitespaces": 50, "n_words": 24, "nloc": 10, "token_counts": 56}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#626-635", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "addPropertiesToEnvironment", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#addPropertiesToEnvironment", "start_line": 626, "end_line": 635, "signature": "addPropertiesToEnvironment(ConfigurableApplicationContext context, String... pairs)", "original_code": "private void addPropertiesToEnvironment(ConfigurableApplicationContext context, String... pairs) {\n\t\tConfigurableEnvironment environment = context.getEnvironment();\n\t\tMap<String, Object> properties = new HashMap<>();\n\t\tfor (String pair : pairs) {\n\t\t\tString[] split = pair.split(\"=\", 2);\n\t\t\tproperties.put(split[0], (split.length == 2) ? split[1] : \"\");\n\t\t}\n\t\tMapPropertySource propertySource = new MapPropertySource(\"logging-config\", properties);\n\t\tenvironment.getPropertySources().addFirst(propertySource);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "addPropertiesToEnvironment", "private", "(", ",", ")", "{", "}", "ConfigurableApplicationContext", "context", "String", "...", "ConfigurableEnvironment", ";", ";", "for", "(", "String", "pair", ":", "pairs", ")", "MapPropertySource", ";", ";", "pairs", "environment", "=", "Map", "properties", "=", "{", "}", "propertySource", "=", ".", "addFirst", "context", ".", "getEnvironment", "<", "String", ",", "Object", ">", "new", ";", ";", "new", "MapPropertySource", "environment", ".", "getPropertySources", "(", "propertySource", ")", "(", ")", "HashMap", "(", ")", "String", "split", "=", "properties", ".", "put", "(", ",", "properties", ")", "(", ")", "<", ">", "[", "]", "pair", ".", "split", "(", ",", ")", "\"", "logging-config", "\"", "(", ",", "2", ")", "split", "[", "0", "]", "?", ":", "\"", "=", "\"", "(", ")", "split", "[", "1", "]", "\"", "\"", "==", "2", "split", ".", "length"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 161, "ast_depth": 13, "n_identifiers": 13, "vocab_size": 45, "n_whitespaces": 63, "n_words": 46, "nloc": 10, "token_counts": 112}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#646-649", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "getStandardConfigLocations", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#getStandardConfigLocations", "start_line": 646, "end_line": 649, "signature": "getStandardConfigLocations()", "original_code": "@Override\n\t\tprotected String[] getStandardConfigLocations() {\n\t\t\treturn new String[] { \"foo.bar\" };\n\t\t}", "doc_comment": ""}, "code_tokens": ["getStandardConfigLocations", "protected", "String", "(", ")", "{", "}", "@", "Override", "[", "]", "return", ";", "new", "String", "[", "]", "{", "}", "\"", "foo.bar", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 35, "ast_depth": 8, "n_identifiers": 2, "vocab_size": 16, "n_whitespaces": 18, "n_words": 9, "nloc": 4, "token_counts": 22}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#651-653", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "loadDefaults", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#loadDefaults", "start_line": 651, "end_line": 653, "signature": "loadDefaults(LoggingInitializationContext initializationContext, LogFile logFile)", "original_code": "@Override\n\t\tprotected void loadDefaults(LoggingInitializationContext initializationContext, LogFile logFile) {\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "loadDefaults", "protected", "(", ",", ")", "{", "}", "@", "Override", "LoggingInitializationContext", "initializationContext", "LogFile", "logFile"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 5, "n_identifiers": 4, "vocab_size": 14, "n_whitespaces": 12, "n_words": 8, "nloc": 3, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#655-658", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "loadConfiguration", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#loadConfiguration", "start_line": 655, "end_line": 658, "signature": "loadConfiguration(LoggingInitializationContext initializationContext, String location,\n\t\t\t\tLogFile logFile)", "original_code": "@Override\n\t\tprotected void loadConfiguration(LoggingInitializationContext initializationContext, String location,\n\t\t\t\tLogFile logFile) {\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "loadConfiguration", "protected", "(", ",", ",", ")", "{", "}", "@", "Override", "LoggingInitializationContext", "initializationContext", "String", "location", "LogFile", "logFile"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 26, "ast_depth": 5, "n_identifiers": 5, "vocab_size": 16, "n_whitespaces": 18, "n_words": 10, "nloc": 4, "token_counts": 17}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#660-662", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "setLogLevel", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#setLogLevel", "start_line": 660, "end_line": 662, "signature": "setLogLevel(String loggerName, LogLevel level)", "original_code": "@Override\n\t\tpublic void setLogLevel(String loggerName, LogLevel level) {\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "setLogLevel", "public", "(", ",", ")", "{", "}", "@", "Override", "String", "loggerName", "LogLevel", "level"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 5, "n_identifiers": 4, "vocab_size": 14, "n_whitespaces": 12, "n_words": 8, "nloc": 3, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#664-667", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "getLoggerConfigurations", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#getLoggerConfigurations", "start_line": 664, "end_line": 667, "signature": "getLoggerConfigurations()", "original_code": "@Override\n\t\tpublic List<LoggerConfiguration> getLoggerConfigurations() {\n\t\t\treturn null;\n\t\t}", "doc_comment": ""}, "code_tokens": ["getLoggerConfigurations", "public", "List", "(", ")", "{", "}", "@", "Override", "<", "LoggerConfiguration", ">", "return", "null", ";"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 24, "ast_depth": 5, "n_identifiers": 2, "vocab_size": 15, "n_whitespaces": 14, "n_words": 7, "nloc": 4, "token_counts": 15}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#669-672", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "getLoggerConfiguration", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#getLoggerConfiguration", "start_line": 669, "end_line": 672, "signature": "getLoggerConfiguration(String loggerName)", "original_code": "@Override\n\t\tpublic LoggerConfiguration getLoggerConfiguration(String loggerName) {\n\t\t\treturn null;\n\t\t}", "doc_comment": ""}, "code_tokens": ["LoggerConfiguration", "getLoggerConfiguration", "public", "(", ")", "{", "}", "@", "Override", "String", "loggerName", "return", "null", ";"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 5, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 15, "n_words": 8, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#674-677", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "getShutdownHandler", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#getShutdownHandler", "start_line": 674, "end_line": 677, "signature": "getShutdownHandler()", "original_code": "@Override\n\t\tpublic Runnable getShutdownHandler() {\n\t\t\treturn () -> TestShutdownHandlerLoggingSystem.shutdownLatch.countDown();\n\t\t}", "doc_comment": ""}, "code_tokens": ["Runnable", "getShutdownHandler", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "->", "(", ")", ".", "countDown", "TestShutdownHandlerLoggingSystem", ".", "shutdownLatch", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 33, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 16, "n_whitespaces": 16, "n_words": 8, "nloc": 4, "token_counts": 21}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#685-688", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "registerShutdownHook", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#registerShutdownHook", "start_line": 685, "end_line": 688, "signature": "registerShutdownHook(Runnable shutdownHook)", "original_code": "@Override\n\t\tvoid registerShutdownHook(Runnable shutdownHook) {\n\t\t\tthis.shutdownHook = shutdownHook;\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "registerShutdownHook", "(", ")", "{", "}", "@", "Override", "Runnable", "shutdownHook", ";", "=", "shutdownHook", "this", ".", "shutdownHook"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 26, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 15, "n_words": 8, "nloc": 4, "token_counts": 16}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#699-701", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "beforeInitialize", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#beforeInitialize", "start_line": 699, "end_line": 701, "signature": "beforeInitialize()", "original_code": "@Override\n\t\tpublic void beforeInitialize() {\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "beforeInitialize", "public", "(", ")", "{", "}", "@", "Override"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 15, "ast_depth": 5, "n_identifiers": 2, "vocab_size": 9, "n_whitespaces": 9, "n_words": 4, "nloc": 3, "token_counts": 9}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#703-705", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "setLogLevel", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#setLogLevel", "start_line": 703, "end_line": 705, "signature": "setLogLevel(String loggerName, LogLevel level)", "original_code": "@Override\n\t\tpublic void setLogLevel(String loggerName, LogLevel level) {\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "setLogLevel", "public", "(", ",", ")", "{", "}", "@", "Override", "String", "loggerName", "LogLevel", "level"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 5, "n_identifiers": 4, "vocab_size": 14, "n_whitespaces": 12, "n_words": 8, "nloc": 3, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#707-710", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "getLoggerConfigurations", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#getLoggerConfigurations", "start_line": 707, "end_line": 710, "signature": "getLoggerConfigurations()", "original_code": "@Override\n\t\tpublic List<LoggerConfiguration> getLoggerConfigurations() {\n\t\t\treturn null;\n\t\t}", "doc_comment": ""}, "code_tokens": ["getLoggerConfigurations", "public", "List", "(", ")", "{", "}", "@", "Override", "<", "LoggerConfiguration", ">", "return", "null", ";"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 24, "ast_depth": 5, "n_identifiers": 2, "vocab_size": 15, "n_whitespaces": 14, "n_words": 7, "nloc": 4, "token_counts": 15}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#712-715", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "getLoggerConfiguration", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#getLoggerConfiguration", "start_line": 712, "end_line": 715, "signature": "getLoggerConfiguration(String loggerName)", "original_code": "@Override\n\t\tpublic LoggerConfiguration getLoggerConfiguration(String loggerName) {\n\t\t\treturn null;\n\t\t}", "doc_comment": ""}, "code_tokens": ["LoggerConfiguration", "getLoggerConfiguration", "public", "(", ")", "{", "}", "@", "Override", "String", "loggerName", "return", "null", ";"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 5, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 15, "n_words": 8, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#717-720", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "cleanUp", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#cleanUp", "start_line": 717, "end_line": 720, "signature": "cleanUp()", "original_code": "@Override\n\t\tpublic void cleanUp() {\n\t\t\tthis.cleanedUp = true;\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "cleanUp", "public", "(", ")", "{", "}", "@", "Override", ";", "=", "true", "this", ".", "cleanedUp"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 24, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 15, "n_whitespaces": 15, "n_words": 7, "nloc": 4, "token_counts": 15}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#730-732", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "beforeInitialize", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#beforeInitialize", "start_line": 730, "end_line": 732, "signature": "beforeInitialize()", "original_code": "@Override\n\t\tpublic void beforeInitialize() {\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "beforeInitialize", "public", "(", ")", "{", "}", "@", "Override"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 15, "ast_depth": 5, "n_identifiers": 2, "vocab_size": 9, "n_whitespaces": 9, "n_words": 4, "nloc": 3, "token_counts": 9}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#734-738", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "initialize", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#initialize", "start_line": 734, "end_line": 738, "signature": "initialize(LoggingInitializationContext initializationContext, String configLocation,\n\t\t\t\tLogFile logFile)", "original_code": "@Override\n\t\tpublic void initialize(LoggingInitializationContext initializationContext, String configLocation,\n\t\t\t\tLogFile logFile) {\n\t\t\tthrow new Error(\"Deliberately broken\");\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "initialize", "public", "(", ",", ",", ")", "{", "}", "@", "Override", "LoggingInitializationContext", "initializationContext", "String", "configLocation", "LogFile", "logFile", "throw", ";", "new", "Error", "(", ")", "\"", "Deliberately broken", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 39, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 22, "n_whitespaces": 25, "n_words": 15, "nloc": 5, "token_counts": 26}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#740-742", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "setLogLevel", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#setLogLevel", "start_line": 740, "end_line": 742, "signature": "setLogLevel(String loggerName, LogLevel level)", "original_code": "@Override\n\t\tpublic void setLogLevel(String loggerName, LogLevel level) {\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "setLogLevel", "public", "(", ",", ")", "{", "}", "@", "Override", "String", "loggerName", "LogLevel", "level"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 5, "n_identifiers": 4, "vocab_size": 14, "n_whitespaces": 12, "n_words": 8, "nloc": 3, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#744-747", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "getLoggerConfigurations", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#getLoggerConfigurations", "start_line": 744, "end_line": 747, "signature": "getLoggerConfigurations()", "original_code": "@Override\n\t\tpublic List<LoggerConfiguration> getLoggerConfigurations() {\n\t\t\treturn null;\n\t\t}", "doc_comment": ""}, "code_tokens": ["getLoggerConfigurations", "public", "List", "(", ")", "{", "}", "@", "Override", "<", "LoggerConfiguration", ">", "return", "null", ";"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 24, "ast_depth": 5, "n_identifiers": 2, "vocab_size": 15, "n_whitespaces": 14, "n_words": 7, "nloc": 4, "token_counts": 15}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#749-752", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "getLoggerConfiguration", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#getLoggerConfiguration", "start_line": 749, "end_line": 752, "signature": "getLoggerConfiguration(String loggerName)", "original_code": "@Override\n\t\tpublic LoggerConfiguration getLoggerConfiguration(String loggerName) {\n\t\t\treturn null;\n\t\t}", "doc_comment": ""}, "code_tokens": ["LoggerConfiguration", "getLoggerConfiguration", "public", "(", ")", "{", "}", "@", "Override", "String", "loggerName", "return", "null", ";"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 5, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 15, "n_words": 8, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#768-771", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "start", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#start", "start_line": 768, "end_line": 771, "signature": "start()", "original_code": "@Override\n\t\tpublic void start() {\n\t\t\tthis.running = true;\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "start", "public", "(", ")", "{", "}", "@", "Override", ";", "=", "true", "this", ".", "running"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 24, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 15, "n_whitespaces": 15, "n_words": 7, "nloc": 4, "token_counts": 15}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#773-777", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "stop", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#stop", "start_line": 773, "end_line": 777, "signature": "stop()", "original_code": "@Override\n\t\tpublic void stop() {\n\t\t\tthis.running = false;\n\t\t\tthis.onStop.run();\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "stop", "public", "(", ")", "{", "}", "@", "Override", ";", ";", "=", "false", ".", "run", "this", ".", "running", "this", ".", "onStop", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 36, "ast_depth": 7, "n_identifiers": 5, "vocab_size": 17, "n_whitespaces": 19, "n_words": 10, "nloc": 5, "token_counts": 23}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#779-782", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "isRunning", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#isRunning", "start_line": 779, "end_line": 782, "signature": "isRunning()", "original_code": "@Override\n\t\tpublic boolean isRunning() {\n\t\t\treturn this.running;\n\t\t}", "doc_comment": ""}, "code_tokens": ["boolean", "isRunning", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "this", ".", "running"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java#784-787", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java", "language": "Java"}, "method": {"name": "getPhase", "qualified_name": "test.java.org.springframework.boot.context.logging.LoggingApplicationListenerTests#getPhase", "start_line": 784, "end_line": 787, "signature": "getPhase()", "original_code": "@Override\n\t\tpublic int getPhase() {\n\t\t\treturn Integer.MAX_VALUE - 1;\n\t\t}", "doc_comment": ""}, "code_tokens": ["getPhase", "public", "int", "(", ")", "{", "}", "@", "Override", "return", ";", "-", "1", "Integer", ".", "MAX_VALUE"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 26, "ast_depth": 7, "n_identifiers": 4, "vocab_size": 16, "n_whitespaces": 16, "n_words": 8, "nloc": 4, "token_counts": 16}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListenerTests.java#92-98", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListenerTests.java", "language": "Java"}, "method": {"name": "setup", "qualified_name": "test.java.org.springframework.boot.env.EnvironmentPostProcessorApplicationListenerTests#setup", "start_line": 92, "end_line": 98, "signature": "setup()", "original_code": "@BeforeEach\n\t\tvoid setup() {\n\t\t\tReflectionTestUtils.setField(this.listener, \"deferredLogs\", this.deferredLogs);\n\t\t\tReflectionTestUtils.setField(this.listener, \"postProcessorsFactory\",\n\t\t\t\t\t(Function<ClassLoader, EnvironmentPostProcessorsFactory>) (\n\t\t\t\t\t\t\tclassLoader) -> EnvironmentPostProcessorsFactory.of(TestEnvironmentPostProcessor.class));\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "setup", "(", ")", "{", "}", "@", "BeforeEach", ";", ";", "ReflectionTestUtils", ".", "setField", "ReflectionTestUtils", ".", "setField", "(", ",", ",", ")", "(", ",", ",", ")", "this", ".", "listener", "\"", "deferredLogs", "\"", "this", ".", "deferredLogs", "this", ".", "listener", "\"", "postProcessorsFactory", "\"", "(", ")", "Function", "->", "<", "ClassLoader", ",", "EnvironmentPostProcessorsFactory", ">", "(", "classLoader", ")", "EnvironmentPostProcessorsFactory", ".", "of", "(", ")", "TestEnvironmentPostProcessor", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 84, "ast_depth": 12, "n_identifiers": 9, "vocab_size": 28, "n_whitespaces": 37, "n_words": 23, "nloc": 7, "token_counts": 59}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListenerTests.java#100-104", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListenerTests.java", "language": "Java"}, "method": {"name": "createUsesSpringFactories", "qualified_name": "test.java.org.springframework.boot.env.EnvironmentPostProcessorApplicationListenerTests#createUsesSpringFactories", "start_line": 100, "end_line": 104, "signature": "createUsesSpringFactories()", "original_code": "@Test\n\t\tvoid createUsesSpringFactories() {\n\t\t\tEnvironmentPostProcessorApplicationListener listener = new EnvironmentPostProcessorApplicationListener();\n\t\t\tassertThat(listener.getEnvironmentPostProcessors(null, this.bootstrapContext)).hasSizeGreaterThan(1);\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "createUsesSpringFactories", "(", ")", "{", "}", "@", "Test", "EnvironmentPostProcessorApplicationListener", ";", ";", "listener", "=", ".", "hasSizeGreaterThan", "new", "EnvironmentPostProcessorApplicationListener", "assertThat", "(", "1", ")", "(", ")", "(", ")", "listener", ".", "getEnvironmentPostProcessors", "(", "null", ",", ")", "this", ".", "bootstrapContext"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 53, "ast_depth": 11, "n_identifiers": 7, "vocab_size": 22, "n_whitespaces": 21, "n_words": 15, "nloc": 5, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListenerTests.java#106-114", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListenerTests.java", "language": "Java"}, "method": {"name": "createWhenHasFactoryUsesFactory", "qualified_name": "test.java.org.springframework.boot.env.EnvironmentPostProcessorApplicationListenerTests#createWhenHasFactoryUsesFactory", "start_line": 106, "end_line": 114, "signature": "createWhenHasFactoryUsesFactory()", "original_code": "@Test\n\t\tvoid createWhenHasFactoryUsesFactory() {\n\t\t\tEnvironmentPostProcessorApplicationListener listener = EnvironmentPostProcessorApplicationListener\n\t\t\t\t.with(EnvironmentPostProcessorsFactory.of(TestEnvironmentPostProcessor.class));\n\t\t\tList<EnvironmentPostProcessor> postProcessors = listener.getEnvironmentPostProcessors(null,\n\t\t\t\t\tthis.bootstrapContext);\n\t\t\tassertThat(postProcessors).hasSize(1);\n\t\t\tassertThat(postProcessors.get(0)).isInstanceOf(TestEnvironmentPostProcessor.class);\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "createWhenHasFactoryUsesFactory", "(", ")", "{", "}", "@", "Test", "EnvironmentPostProcessorApplicationListener", ";", ";", ";", ";", "listener", "=", "List", "postProcessors", "=", ".", "hasSize", ".", "isInstanceOf", "EnvironmentPostProcessorApplicationListener", ".", "with", "<", "EnvironmentPostProcessor", ">", "listener", ".", "getEnvironmentPostProcessors", "assertThat", "(", "1", ")", "assertThat", "(", ")", "(", ")", "(", "null", ",", ")", "(", "postProcessors", ")", "(", ")", "TestEnvironmentPostProcessor", ".", "class", "EnvironmentPostProcessorsFactory", ".", "of", "this", ".", "bootstrapContext", "postProcessors", ".", "get", "(", ")", "(", "0", ")", "TestEnvironmentPostProcessor", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 102, "ast_depth": 11, "n_identifiers": 14, "vocab_size": 34, "n_whitespaces": 41, "n_words": 30, "nloc": 9, "token_counts": 69}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListenerTests.java#116-119", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListenerTests.java", "language": "Java"}, "method": {"name": "supportsEventTypeWhenApplicationEnvironmentPreparedEventReturnsTrue", "qualified_name": "test.java.org.springframework.boot.env.EnvironmentPostProcessorApplicationListenerTests#supportsEventTypeWhenApplicationEnvironmentPreparedEventReturnsTrue", "start_line": 116, "end_line": 119, "signature": "supportsEventTypeWhenApplicationEnvironmentPreparedEventReturnsTrue()", "original_code": "@Test\n\t\tvoid supportsEventTypeWhenApplicationEnvironmentPreparedEventReturnsTrue() {\n\t\t\tassertThat(this.listener.supportsEventType(ApplicationEnvironmentPreparedEvent.class)).isTrue();\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "supportsEventTypeWhenApplicationEnvironmentPreparedEventReturnsTrue", "(", ")", "{", "}", "@", "Test", ";", ".", "isTrue", "assertThat", "(", ")", "(", ")", ".", "supportsEventType", "this", ".", "listener", "(", ")", "ApplicationEnvironmentPreparedEvent", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 41, "ast_depth": 11, "n_identifiers": 6, "vocab_size": 17, "n_whitespaces": 12, "n_words": 10, "nloc": 4, "token_counts": 26}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListenerTests.java#121-124", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListenerTests.java", "language": "Java"}, "method": {"name": "supportsEventTypeWhenApplicationPreparedEventReturnsTrue", "qualified_name": "test.java.org.springframework.boot.env.EnvironmentPostProcessorApplicationListenerTests#supportsEventTypeWhenApplicationPreparedEventReturnsTrue", "start_line": 121, "end_line": 124, "signature": "supportsEventTypeWhenApplicationPreparedEventReturnsTrue()", "original_code": "@Test\n\t\tvoid supportsEventTypeWhenApplicationPreparedEventReturnsTrue() {\n\t\t\tassertThat(this.listener.supportsEventType(ApplicationPreparedEvent.class)).isTrue();\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "supportsEventTypeWhenApplicationPreparedEventReturnsTrue", "(", ")", "{", "}", "@", "Test", ";", ".", "isTrue", "assertThat", "(", ")", "(", ")", ".", "supportsEventType", "this", ".", "listener", "(", ")", "ApplicationPreparedEvent", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 41, "ast_depth": 11, "n_identifiers": 6, "vocab_size": 17, "n_whitespaces": 12, "n_words": 10, "nloc": 4, "token_counts": 26}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListenerTests.java#126-129", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListenerTests.java", "language": "Java"}, "method": {"name": "supportsEventTypeWhenApplicationFailedEventReturnsTrue", "qualified_name": "test.java.org.springframework.boot.env.EnvironmentPostProcessorApplicationListenerTests#supportsEventTypeWhenApplicationFailedEventReturnsTrue", "start_line": 126, "end_line": 129, "signature": "supportsEventTypeWhenApplicationFailedEventReturnsTrue()", "original_code": "@Test\n\t\tvoid supportsEventTypeWhenApplicationFailedEventReturnsTrue() {\n\t\t\tassertThat(this.listener.supportsEventType(ApplicationFailedEvent.class)).isTrue();\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "supportsEventTypeWhenApplicationFailedEventReturnsTrue", "(", ")", "{", "}", "@", "Test", ";", ".", "isTrue", "assertThat", "(", ")", "(", ")", ".", "supportsEventType", "this", ".", "listener", "(", ")", "ApplicationFailedEvent", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 41, "ast_depth": 11, "n_identifiers": 6, "vocab_size": 17, "n_whitespaces": 12, "n_words": 10, "nloc": 4, "token_counts": 26}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListenerTests.java#131-134", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListenerTests.java", "language": "Java"}, "method": {"name": "supportsEventTypeWhenOtherEventReturnsFalse", "qualified_name": "test.java.org.springframework.boot.env.EnvironmentPostProcessorApplicationListenerTests#supportsEventTypeWhenOtherEventReturnsFalse", "start_line": 131, "end_line": 134, "signature": "supportsEventTypeWhenOtherEventReturnsFalse()", "original_code": "@Test\n\t\tvoid supportsEventTypeWhenOtherEventReturnsFalse() {\n\t\t\tassertThat(this.listener.supportsEventType(ApplicationStartingEvent.class)).isFalse();\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "supportsEventTypeWhenOtherEventReturnsFalse", "(", ")", "{", "}", "@", "Test", ";", ".", "isFalse", "assertThat", "(", ")", "(", ")", ".", "supportsEventType", "this", ".", "listener", "(", ")", "ApplicationStartingEvent", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 41, "ast_depth": 11, "n_identifiers": 6, "vocab_size": 17, "n_whitespaces": 12, "n_words": 10, "nloc": 4, "token_counts": 26}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListenerTests.java#136-144", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListenerTests.java", "language": "Java"}, "method": {"name": "onApplicationEventWhenApplicationEnvironmentPreparedEventCallsPostProcessors", "qualified_name": "test.java.org.springframework.boot.env.EnvironmentPostProcessorApplicationListenerTests#onApplicationEventWhenApplicationEnvironmentPreparedEventCallsPostProcessors", "start_line": 136, "end_line": 144, "signature": "onApplicationEventWhenApplicationEnvironmentPreparedEventCallsPostProcessors()", "original_code": "@Test\n\t\tvoid onApplicationEventWhenApplicationEnvironmentPreparedEventCallsPostProcessors() {\n\t\t\tSpringApplication application = mock(SpringApplication.class);\n\t\t\tMockEnvironment environment = new MockEnvironment();\n\t\t\tApplicationEnvironmentPreparedEvent event = new ApplicationEnvironmentPreparedEvent(this.bootstrapContext,\n\t\t\t\t\tapplication, new String[0], environment);\n\t\t\tthis.listener.onApplicationEvent(event);\n\t\t\tassertThat(environment.getProperty(\"processed\")).isEqualTo(\"true\");\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "onApplicationEventWhenApplicationEnvironmentPreparedEventCallsPostProcessors", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", "MockEnvironment", ";", "ApplicationEnvironmentPreparedEvent", ";", ";", ";", "application", "=", "environment", "=", "event", "=", ".", "onApplicationEvent", ".", "isEqualTo", "mock", "new", "MockEnvironment", "new", "ApplicationEnvironmentPreparedEvent", "this", ".", "listener", "(", "event", ")", "assertThat", "(", ")", "(", ")", "(", ")", "(", ",", "application", ",", ",", "environment", ")", "(", ")", "\"", "true", "\"", "SpringApplication", ".", "class", "this", ".", "bootstrapContext", "new", "String", "environment", ".", "getProperty", "[", "0", "]", "(", ")", "\"", "processed", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 110, "ast_depth": 11, "n_identifiers": 12, "vocab_size": 35, "n_whitespaces": 48, "n_words": 33, "nloc": 9, "token_counts": 75}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListenerTests.java#146-153", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListenerTests.java", "language": "Java"}, "method": {"name": "onApplicationEventWhenApplicationPreparedEventSwitchesLogs", "qualified_name": "test.java.org.springframework.boot.env.EnvironmentPostProcessorApplicationListenerTests#onApplicationEventWhenApplicationPreparedEventSwitchesLogs", "start_line": 146, "end_line": 153, "signature": "onApplicationEventWhenApplicationPreparedEventSwitchesLogs()", "original_code": "@Test\n\t\tvoid onApplicationEventWhenApplicationPreparedEventSwitchesLogs() {\n\t\t\tSpringApplication application = mock(SpringApplication.class);\n\t\t\tConfigurableApplicationContext context = mock(ConfigurableApplicationContext.class);\n\t\t\tApplicationPreparedEvent event = new ApplicationPreparedEvent(application, new String[0], context);\n\t\t\tthis.listener.onApplicationEvent(event);\n\t\t\tthen(this.deferredLogs).should().switchOverAll();\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "onApplicationEventWhenApplicationPreparedEventSwitchesLogs", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", "ConfigurableApplicationContext", ";", "ApplicationPreparedEvent", ";", ";", ";", "application", "=", "context", "=", "event", "=", ".", "onApplicationEvent", ".", "switchOverAll", "mock", "mock", "new", "ApplicationPreparedEvent", "this", ".", "listener", "(", "event", ")", ".", "should", "(", ")", "(", ")", "(", ")", "(", "application", ",", ",", "context", ")", "then", "(", ")", "SpringApplication", ".", "class", "ConfigurableApplicationContext", ".", "class", "new", "String", "(", ")", "[", "0", "]", "this", ".", "deferredLogs"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 103, "ast_depth": 10, "n_identifiers": 12, "vocab_size": 32, "n_whitespaces": 41, "n_words": 31, "nloc": 8, "token_counts": 69}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListenerTests.java#155-163", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListenerTests.java", "language": "Java"}, "method": {"name": "onApplicationEventWhenApplicationFailedEventSwitchesLogs", "qualified_name": "test.java.org.springframework.boot.env.EnvironmentPostProcessorApplicationListenerTests#onApplicationEventWhenApplicationFailedEventSwitchesLogs", "start_line": 155, "end_line": 163, "signature": "onApplicationEventWhenApplicationFailedEventSwitchesLogs()", "original_code": "@Test\n\t\tvoid onApplicationEventWhenApplicationFailedEventSwitchesLogs() {\n\t\t\tSpringApplication application = mock(SpringApplication.class);\n\t\t\tConfigurableApplicationContext context = mock(ConfigurableApplicationContext.class);\n\t\t\tApplicationFailedEvent event = new ApplicationFailedEvent(application, new String[0], context,\n\t\t\t\t\tnew RuntimeException());\n\t\t\tthis.listener.onApplicationEvent(event);\n\t\t\tthen(this.deferredLogs).should().switchOverAll();\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "onApplicationEventWhenApplicationFailedEventSwitchesLogs", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", "ConfigurableApplicationContext", ";", "ApplicationFailedEvent", ";", ";", ";", "application", "=", "context", "=", "event", "=", ".", "onApplicationEvent", ".", "switchOverAll", "mock", "mock", "new", "ApplicationFailedEvent", "this", ".", "listener", "(", "event", ")", ".", "should", "(", ")", "(", ")", "(", ")", "(", "application", ",", ",", "context", ",", ")", "then", "(", ")", "SpringApplication", ".", "class", "ConfigurableApplicationContext", ".", "class", "new", "String", "new", "RuntimeException", "(", ")", "[", "0", "]", "(", ")", "this", ".", "deferredLogs"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 110, "ast_depth": 10, "n_identifiers": 12, "vocab_size": 33, "n_whitespaces": 48, "n_words": 33, "nloc": 9, "token_counts": 74}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListenerTests.java#172-175", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListenerTests.java", "language": "Java"}, "method": {"name": "postProcessEnvironment", "qualified_name": "test.java.org.springframework.boot.env.EnvironmentPostProcessorApplicationListenerTests#postProcessEnvironment", "start_line": 172, "end_line": 175, "signature": "postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application)", "original_code": "@Override\n\t\t\tpublic void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {\n\t\t\t\t((MockEnvironment) environment).setProperty(\"processed\", \"true\");\n\t\t\t}", "doc_comment": ""}, "code_tokens": ["void", "postProcessEnvironment", "public", "(", ",", ")", "{", "}", "@", "Override", "ConfigurableEnvironment", "environment", "SpringApplication", "application", ";", ".", "setProperty", "(", ")", "(", ",", ")", "(", "MockEnvironment", ")", "environment", "\"", "processed", "\"", "\"", "true", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 47, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 21, "n_whitespaces": 21, "n_words": 13, "nloc": 4, "token_counts": 32}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListenerTests.java#186-189", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListenerTests.java", "language": "Java"}, "method": {"name": "aotContributionIsNotNecessaryWithDefaultConfiguration", "qualified_name": "test.java.org.springframework.boot.env.EnvironmentPostProcessorApplicationListenerTests#aotContributionIsNotNecessaryWithDefaultConfiguration", "start_line": 186, "end_line": 189, "signature": "aotContributionIsNotNecessaryWithDefaultConfiguration()", "original_code": "@Test\n\t\tvoid aotContributionIsNotNecessaryWithDefaultConfiguration() {\n\t\t\tassertThat(getContribution(new StandardEnvironment())).isNull();\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "aotContributionIsNotNecessaryWithDefaultConfiguration", "(", ")", "{", "}", "@", "Test", ";", ".", "isNull", "assertThat", "(", ")", "(", ")", "getContribution", "(", ")", "new", "StandardEnvironment", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 38, "ast_depth": 12, "n_identifiers": 5, "vocab_size": 15, "n_whitespaces": 13, "n_words": 8, "nloc": 4, "token_counts": 23}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListenerTests.java#191-197", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListenerTests.java", "language": "Java"}, "method": {"name": "aotContributionIsNotNecessaryWithDefaultProfileActive", "qualified_name": "test.java.org.springframework.boot.env.EnvironmentPostProcessorApplicationListenerTests#aotContributionIsNotNecessaryWithDefaultProfileActive", "start_line": 191, "end_line": 197, "signature": "aotContributionIsNotNecessaryWithDefaultProfileActive()", "original_code": "@Test\n\t\tvoid aotContributionIsNotNecessaryWithDefaultProfileActive() {\n\t\t\tStandardEnvironment environment = new StandardEnvironment();\n\t\t\tenvironment.setDefaultProfiles(\"fallback\");\n\t\t\tenvironment.setActiveProfiles(\"fallback\");\n\t\t\tassertThat(getContribution(environment)).isNull();\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "aotContributionIsNotNecessaryWithDefaultProfileActive", "(", ")", "{", "}", "@", "Test", "StandardEnvironment", ";", ";", ";", ";", "environment", "=", "environment", ".", "setDefaultProfiles", "environment", ".", "setActiveProfiles", ".", "isNull", "new", "StandardEnvironment", "(", ")", "(", ")", "assertThat", "(", ")", "(", ")", "\"", "fallback", "\"", "\"", "fallback", "\"", "(", ")", "getContribution", "(", "environment", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 71, "ast_depth": 10, "n_identifiers": 8, "vocab_size": 21, "n_whitespaces": 28, "n_words": 17, "nloc": 7, "token_counts": 46}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListenerTests.java#199-210", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListenerTests.java", "language": "Java"}, "method": {"name": "aotContributionRegistersActiveProfiles", "qualified_name": "test.java.org.springframework.boot.env.EnvironmentPostProcessorApplicationListenerTests#aotContributionRegistersActiveProfiles", "start_line": 199, "end_line": 210, "signature": "aotContributionRegistersActiveProfiles()", "original_code": "@Test\n\t\tvoid aotContributionRegistersActiveProfiles() {\n\t\t\tConfigurableEnvironment environment = new StandardEnvironment();\n\t\t\tenvironment.setActiveProfiles(\"one\", \"two\");\n\t\t\tcompile(createContext(environment), (compiled) -> {\n\t\t\t\tEnvironmentPostProcessor environmentPostProcessor = compiled.getInstance(EnvironmentPostProcessor.class,\n\t\t\t\t\t\tClassName.get(\"com.example\", \"TestApp__EnvironmentPostProcessor\").toString());\n\t\t\t\tStandardEnvironment freshEnvironment = new StandardEnvironment();\n\t\t\t\tenvironmentPostProcessor.postProcessEnvironment(freshEnvironment, new SpringApplication());\n\t\t\t\tassertThat(freshEnvironment.getActiveProfiles()).containsExactly(\"one\", \"two\");\n\t\t\t});\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "aotContributionRegistersActiveProfiles", "(", ")", "{", "}", "@", "Test", "ConfigurableEnvironment", ";", ";", ";", "environment", "=", "environment", ".", "setActiveProfiles", "compile", "new", "StandardEnvironment", "(", ",", ")", "(", ",", ")", "(", ")", "\"", "one", "\"", "\"", "two", "\"", "createContext", "->", "(", "environment", ")", "(", "compiled", ")", "{", "}", "EnvironmentPostProcessor", ";", "StandardEnvironment", ";", ";", ";", "environmentPostProcessor", "=", "freshEnvironment", "=", "environmentPostProcessor", ".", "postProcessEnvironment", ".", "containsExactly", "compiled", ".", "getInstance", "new", "StandardEnvironment", "(", "freshEnvironment", ",", ")", "assertThat", "(", ",", ")", "(", ",", ")", "(", ")", "new", "SpringApplication", "(", ")", "\"", "one", "\"", "\"", "two", "\"", "EnvironmentPostProcessor", ".", "class", ".", "toString", "(", ")", "freshEnvironment", ".", "getActiveProfiles", "ClassName", ".", "get", "(", ")", "(", ")", "(", ",", ")", "\"", "com.example", "\"", "\"", "TestApp__EnvironmentPostProcessor", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 165, "ast_depth": 17, "n_identifiers": 17, "vocab_size": 39, "n_whitespaces": 70, "n_words": 42, "nloc": 12, "token_counts": 113}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListenerTests.java#212-226", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListenerTests.java", "language": "Java"}, "method": {"name": "shouldUseAotEnvironmentPostProcessor", "qualified_name": "test.java.org.springframework.boot.env.EnvironmentPostProcessorApplicationListenerTests#shouldUseAotEnvironmentPostProcessor", "start_line": 212, "end_line": 226, "signature": "shouldUseAotEnvironmentPostProcessor()", "original_code": "@Test\n\t\tvoid shouldUseAotEnvironmentPostProcessor() {\n\t\t\tSpringApplication application = new SpringApplication(ExampleAotProcessedApp.class);\n\t\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\t\tapplication.setMainApplicationClass(ExampleAotProcessedApp.class);\n\t\t\tSystem.setProperty(AotDetector.AOT_ENABLED, \"true\");\n\t\t\ttry {\n\t\t\t\tApplicationContext context = application.run();\n\t\t\t\tassertThat(context.getEnvironment().getActiveProfiles()).containsExactly(\"one\", \"three\");\n\t\t\t\tassertThat(context.getBean(\"test\")).isEqualTo(\"test\");\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tSystem.clearProperty(AotDetector.AOT_ENABLED);\n\t\t\t}\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "shouldUseAotEnvironmentPostProcessor", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", "try", "application", "=", "application", ".", "setWebApplicationType", "application", ".", "setMainApplicationClass", "System", ".", "setProperty", "{", "}", "finally", "new", "SpringApplication", "(", ")", "(", ")", "(", ",", ")", "ApplicationContext", ";", ";", ";", "{", "}", "(", ")", "WebApplicationType", ".", "NONE", "ExampleAotProcessedApp", ".", "class", "AotDetector", ".", "AOT_ENABLED", "\"", "true", "\"", "context", "=", ".", "containsExactly", ".", "isEqualTo", ";", "ExampleAotProcessedApp", ".", "class", "application", ".", "run", "assertThat", "(", ",", ")", "assertThat", "(", ")", "System", ".", "clearProperty", "(", ")", "(", ")", "\"", "one", "\"", "\"", "three", "\"", "(", ")", "\"", "test", "\"", "(", ")", ".", "getActiveProfiles", "context", ".", "getBean", "AotDetector", ".", "AOT_ENABLED", "context", ".", "getEnvironment", "(", ")", "(", ")", "(", ")", "\"", "test", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 173, "ast_depth": 13, "n_identifiers": 20, "vocab_size": 42, "n_whitespaces": 71, "n_words": 45, "nloc": 15, "token_counts": 117}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListenerTests.java#228-250", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListenerTests.java", "language": "Java"}, "method": {"name": "aotEnvironmentPostProcessorShouldBeAppliedFirst", "qualified_name": "test.java.org.springframework.boot.env.EnvironmentPostProcessorApplicationListenerTests#aotEnvironmentPostProcessorShouldBeAppliedFirst", "start_line": 228, "end_line": 250, "signature": "aotEnvironmentPostProcessorShouldBeAppliedFirst(@TempDir Path tempDir)", "original_code": "@Test\n\t\tvoid aotEnvironmentPostProcessorShouldBeAppliedFirst(@TempDir Path tempDir) {\n\t\t\tProperties properties = new Properties();\n\t\t\tproperties.put(EnvironmentPostProcessor.class.getName(), TestEnvironmentPostProcessor.class.getName());\n\t\t\tClassLoader classLoader = createClassLoaderWithAdditionalSpringFactories(tempDir, properties);\n\t\t\tDefaultResourceLoader resourceLoader = new DefaultResourceLoader(classLoader);\n\n\t\t\tSpringApplication application = new SpringApplication(ExampleAotProcessedApp.class);\n\t\t\tapplication.setResourceLoader(resourceLoader);\n\t\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\t\tapplication.setMainApplicationClass(ExampleAotProcessedApp.class);\n\t\t\tSystem.setProperty(AotDetector.AOT_ENABLED, \"true\");\n\t\t\ttry {\n\t\t\t\tApplicationContext context = application.run();\n\t\t\t\t// See TestEnvironmentPostProcessor\n\t\t\t\tassertThat(context.getEnvironment().getProperty(\"test.activeProfiles\")).isEqualTo(\"one,three\");\n\t\t\t\tassertThat(context.getEnvironment().getActiveProfiles()).containsExactly(\"one\", \"three\");\n\t\t\t\tassertThat(context.getBean(\"test\")).isEqualTo(\"test\");\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tSystem.clearProperty(AotDetector.AOT_ENABLED);\n\t\t\t}\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "aotEnvironmentPostProcessorShouldBeAppliedFirst", "(", ")", "{", "}", "@", "Test", "Path", "tempDir", "Properties", ";", ";", "ClassLoader", ";", "DefaultResourceLoader", ";", "SpringApplication", ";", ";", ";", ";", ";", "try", "properties", "=", "properties", ".", "put", "classLoader", "=", "resourceLoader", "=", "application", "=", "application", ".", "setResourceLoader", "application", ".", "setWebApplicationType", "application", ".", "setMainApplicationClass", "System", ".", "setProperty", "{", "// See TestEnvironmentPostProcessor", "}", "finally", "@", "TempDir", "new", "Properties", "(", ",", ")", "createClassLoaderWithAdditionalSpringFactories", "new", "DefaultResourceLoader", "new", "SpringApplication", "(", "resourceLoader", ")", "(", ")", "(", ")", "(", ",", ")", "ApplicationContext", ";", ";", ";", ";", "{", "}", "(", ")", ".", "getName", ".", "getName", "(", "tempDir", ",", "properties", ")", "(", "classLoader", ")", "(", ")", "WebApplicationType", ".", "NONE", "ExampleAotProcessedApp", ".", "class", "AotDetector", ".", "AOT_ENABLED", "\"", "true", "\"", "context", "=", ".", "isEqualTo", ".", "containsExactly", ".", "isEqualTo", ";", "EnvironmentPostProcessor", ".", "class", "(", ")", "TestEnvironmentPostProcessor", ".", "class", "(", ")", "ExampleAotProcessedApp", ".", "class", "application", ".", "run", "assertThat", "(", ")", "assertThat", "(", ",", ")", "assertThat", "(", ")", "System", ".", "clearProperty", "(", ")", "(", ")", "\"", "one,three", "\"", "(", ")", "\"", "one", "\"", "\"", "three", "\"", "(", ")", "\"", "test", "\"", "(", ")", ".", "getProperty", ".", "getActiveProfiles", "context", ".", "getBean", "AotDetector", ".", "AOT_ENABLED", "context", ".", "getEnvironment", "(", ")", "context", ".", "getEnvironment", "(", ")", "(", ")", "(", ")", "\"", "test.activeProfiles", "\"", "(", ")", "\"", "test", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 294, "ast_depth": 13, "n_identifiers": 30, "vocab_size": 61, "n_whitespaces": 119, "n_words": 84, "nloc": 22, "token_counts": 200}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListenerTests.java#252-266", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListenerTests.java", "language": "Java"}, "method": {"name": "shouldBeLenientIfAotEnvironmentPostProcessorDoesNotExist", "qualified_name": "test.java.org.springframework.boot.env.EnvironmentPostProcessorApplicationListenerTests#shouldBeLenientIfAotEnvironmentPostProcessorDoesNotExist", "start_line": 252, "end_line": 266, "signature": "shouldBeLenientIfAotEnvironmentPostProcessorDoesNotExist()", "original_code": "@Test\n\t\tvoid shouldBeLenientIfAotEnvironmentPostProcessorDoesNotExist() {\n\t\t\tSpringApplication application = new SpringApplication(ExampleAotProcessedNoProfileApp.class);\n\t\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\t\tapplication.setMainApplicationClass(ExampleAotProcessedNoProfileApp.class);\n\t\t\tSystem.setProperty(AotDetector.AOT_ENABLED, \"true\");\n\t\t\ttry {\n\t\t\t\tApplicationContext context = application.run();\n\t\t\t\tassertThat(context.getEnvironment().getActiveProfiles()).isEmpty();\n\t\t\t\tassertThat(context.getBean(\"test\")).isEqualTo(\"test\");\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tSystem.clearProperty(AotDetector.AOT_ENABLED);\n\t\t\t}\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "shouldBeLenientIfAotEnvironmentPostProcessorDoesNotExist", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", "try", "application", "=", "application", ".", "setWebApplicationType", "application", ".", "setMainApplicationClass", "System", ".", "setProperty", "{", "}", "finally", "new", "SpringApplication", "(", ")", "(", ")", "(", ",", ")", "ApplicationContext", ";", ";", ";", "{", "}", "(", ")", "WebApplicationType", ".", "NONE", "ExampleAotProcessedNoProfileApp", ".", "class", "AotDetector", ".", "AOT_ENABLED", "\"", "true", "\"", "context", "=", ".", "isEmpty", ".", "isEqualTo", ";", "ExampleAotProcessedNoProfileApp", ".", "class", "application", ".", "run", "assertThat", "(", ")", "assertThat", "(", ")", "System", ".", "clearProperty", "(", ")", "(", ")", "(", ")", "\"", "test", "\"", "(", ")", ".", "getActiveProfiles", "context", ".", "getBean", "AotDetector", ".", "AOT_ENABLED", "context", ".", "getEnvironment", "(", ")", "(", ")", "(", ")", "\"", "test", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 164, "ast_depth": 13, "n_identifiers": 20, "vocab_size": 40, "n_whitespaces": 70, "n_words": 43, "nloc": 15, "token_counts": 110}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListenerTests.java#268-272", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListenerTests.java", "language": "Java"}, "method": {"name": "getContribution", "qualified_name": "test.java.org.springframework.boot.env.EnvironmentPostProcessorApplicationListenerTests#getContribution", "start_line": 268, "end_line": 272, "signature": "getContribution(ConfigurableEnvironment environment)", "original_code": "private BeanFactoryInitializationAotContribution getContribution(ConfigurableEnvironment environment) {\n\t\t\tDefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory();\n\t\t\tbeanFactory.registerSingleton(ConfigurableApplicationContext.ENVIRONMENT_BEAN_NAME, environment);\n\t\t\treturn new EnvironmentBeanFactoryInitializationAotProcessor().processAheadOfTime(beanFactory);\n\t\t}", "doc_comment": ""}, "code_tokens": ["BeanFactoryInitializationAotContribution", "getContribution", "private", "(", ")", "{", "}", "ConfigurableEnvironment", "environment", "DefaultListableBeanFactory", ";", ";", "return", ";", "beanFactory", "=", "beanFactory", ".", "registerSingleton", ".", "processAheadOfTime", "new", "DefaultListableBeanFactory", "(", ",", "environment", ")", "new", "EnvironmentBeanFactoryInitializationAotProcessor", "(", "beanFactory", ")", "(", ")", "ConfigurableApplicationContext", ".", "ENVIRONMENT_BEAN_NAME", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 58, "ast_depth": 8, "n_identifiers": 7, "vocab_size": 22, "n_whitespaces": 26, "n_words": 19, "nloc": 5, "token_counts": 39}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListenerTests.java#274-278", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListenerTests.java", "language": "Java"}, "method": {"name": "createContext", "qualified_name": "test.java.org.springframework.boot.env.EnvironmentPostProcessorApplicationListenerTests#createContext", "start_line": 274, "end_line": 278, "signature": "createContext(ConfigurableEnvironment environment)", "original_code": "private GenericApplicationContext createContext(ConfigurableEnvironment environment) {\n\t\t\tGenericApplicationContext context = new GenericApplicationContext();\n\t\t\tcontext.setEnvironment(environment);\n\t\t\treturn context;\n\t\t}", "doc_comment": ""}, "code_tokens": ["GenericApplicationContext", "createContext", "private", "(", ")", "{", "}", "ConfigurableEnvironment", "environment", "GenericApplicationContext", ";", ";", "return", "context", ";", "context", "=", "context", ".", "setEnvironment", "new", "GenericApplicationContext", "(", "environment", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 41, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 16, "n_whitespaces": 24, "n_words": 14, "nloc": 5, "token_counts": 27}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListenerTests.java#280-285", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListenerTests.java", "language": "Java"}, "method": {"name": "compile", "qualified_name": "test.java.org.springframework.boot.env.EnvironmentPostProcessorApplicationListenerTests#compile", "start_line": 280, "end_line": 285, "signature": "compile(GenericApplicationContext context, Consumer<Compiled> compiled)", "original_code": "private void compile(GenericApplicationContext context, Consumer<Compiled> compiled) {\n\t\t\tTestGenerationContext generationContext = new TestGenerationContext(TEST_APP);\n\t\t\tnew ApplicationContextAotGenerator().processAheadOfTime(context, generationContext);\n\t\t\tgenerationContext.writeGeneratedContent();\n\t\t\tTestCompiler.forSystem().with(generationContext).compile(compiled);\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "compile", "private", "(", ",", ")", "{", "}", "GenericApplicationContext", "context", "compiled", "TestGenerationContext", ";", ";", ";", ";", "Consumer", "generationContext", "=", ".", "processAheadOfTime", "generationContext", ".", "writeGeneratedContent", ".", "compile", "<", "Compiled", ">", "new", "TestGenerationContext", "new", "ApplicationContextAotGenerator", "(", "context", ",", "generationContext", ")", "(", ")", ".", "with", "(", "compiled", ")", "(", "TEST_APP", ")", "(", ")", "TestCompiler", ".", "forSystem", "(", "generationContext", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 86, "ast_depth": 9, "n_identifiers": 10, "vocab_size": 28, "n_whitespaces": 31, "n_words": 26, "nloc": 6, "token_counts": 58}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListenerTests.java#287-305", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListenerTests.java", "language": "Java"}, "method": {"name": "createClassLoaderWithAdditionalSpringFactories", "qualified_name": "test.java.org.springframework.boot.env.EnvironmentPostProcessorApplicationListenerTests#createClassLoaderWithAdditionalSpringFactories", "start_line": 287, "end_line": 305, "signature": "createClassLoaderWithAdditionalSpringFactories(Path tempDir, Properties properties)", "original_code": "private ClassLoader createClassLoaderWithAdditionalSpringFactories(Path tempDir, Properties properties) {\n\t\t\treturn new ClassLoader() {\n\t\t\t\t@Override\n\t\t\t\tpublic Enumeration<URL> getResources(String name) throws IOException {\n\t\t\t\t\tEnumeration<URL> resources = super.getResources(name);\n\t\t\t\t\tif (SpringFactoriesLoader.FACTORIES_RESOURCE_LOCATION.equals(name)) {\n\t\t\t\t\t\tPath springFactories = tempDir.resolve(\"spring.factories\");\n\t\t\t\t\t\ttry (BufferedWriter writer = Files.newBufferedWriter(springFactories)) {\n\t\t\t\t\t\t\tproperties.store(writer, \"\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tList<URL> allResources = new ArrayList<>();\n\t\t\t\t\t\tallResources.add(springFactories.toUri().toURL());\n\t\t\t\t\t\tallResources.addAll(Collections.list(resources));\n\t\t\t\t\t\treturn Collections.enumeration(allResources);\n\t\t\t\t\t}\n\t\t\t\t\treturn resources;\n\t\t\t\t}\n\t\t\t};\n\t\t}", "doc_comment": ""}, "code_tokens": ["ClassLoader", "createClassLoaderWithAdditionalSpringFactories", "private", "(", ",", ")", "{", "}", "Path", "tempDir", "Properties", "properties", "return", ";", "new", "ClassLoader", "(", ")", "{", "}", "getResources", "public", "Enumeration", "(", ")", "throws", "IOException", "{", "}", "@", "Override", "<", "URL", ">", "String", "name", ";", "if", "return", "resources", ";", "Enumeration", "resources", "=", "(", ")", "{", "}", "<", "URL", ">", "super", ".", "getResources", ".", "equals", "Path", ";", "try", ";", ";", ";", "return", ";", "(", "name", ")", "SpringFactoriesLoader", ".", "FACTORIES_RESOURCE_LOCATION", "(", "name", ")", "springFactories", "=", "(", ")", "{", "}", "List", "allResources", "=", "allResources", ".", "add", "allResources", ".", "addAll", "Collections", ".", "enumeration", "tempDir", ".", "resolve", "BufferedWriter", "writer", "=", ";", "<", "URL", ">", "new", "(", ")", "(", ")", "(", "allResources", ")", "(", ")", "Files", ".", "newBufferedWriter", "properties", ".", "store", "ArrayList", "(", ")", ".", "toURL", "Collections", ".", "list", "\"", "spring.factories", "\"", "(", "springFactories", ")", "(", "writer", ",", ")", "<", ">", "springFactories", ".", "toUri", "(", ")", "(", "resources", ")", "\"", "\"", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 220, "ast_depth": 17, "n_identifiers": 24, "vocab_size": 55, "n_whitespaces": 142, "n_words": 66, "nloc": 19, "token_counts": 149}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListenerTests.java#289-303", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListenerTests.java", "language": "Java"}, "method": {"name": "getResources", "qualified_name": "test.java.org.springframework.boot.env.EnvironmentPostProcessorApplicationListenerTests#getResources", "start_line": 289, "end_line": 303, "signature": "getResources(String name)", "original_code": "@Override\n\t\t\t\tpublic Enumeration<URL> getResources(String name) throws IOException {\n\t\t\t\t\tEnumeration<URL> resources = super.getResources(name);\n\t\t\t\t\tif (SpringFactoriesLoader.FACTORIES_RESOURCE_LOCATION.equals(name)) {\n\t\t\t\t\t\tPath springFactories = tempDir.resolve(\"spring.factories\");\n\t\t\t\t\t\ttry (BufferedWriter writer = Files.newBufferedWriter(springFactories)) {\n\t\t\t\t\t\t\tproperties.store(writer, \"\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tList<URL> allResources = new ArrayList<>();\n\t\t\t\t\t\tallResources.add(springFactories.toUri().toURL());\n\t\t\t\t\t\tallResources.addAll(Collections.list(resources));\n\t\t\t\t\t\treturn Collections.enumeration(allResources);\n\t\t\t\t\t}\n\t\t\t\t\treturn resources;\n\t\t\t\t}", "doc_comment": ""}, "code_tokens": ["getResources", "public", "Enumeration", "(", ")", "throws", "IOException", "{", "}", "@", "Override", "<", "URL", ">", "String", "name", ";", "if", "return", "resources", ";", "Enumeration", "resources", "=", "(", ")", "{", "}", "<", "URL", ">", "super", ".", "getResources", ".", "equals", "Path", ";", "try", ";", ";", ";", "return", ";", "(", "name", ")", "SpringFactoriesLoader", ".", "FACTORIES_RESOURCE_LOCATION", "(", "name", ")", "springFactories", "=", "(", ")", "{", "}", "List", "allResources", "=", "allResources", ".", "add", "allResources", ".", "addAll", "Collections", ".", "enumeration", "tempDir", ".", "resolve", "BufferedWriter", "writer", "=", ";", "<", "URL", ">", "new", "(", ")", "(", ")", "(", "allResources", ")", "(", ")", "Files", ".", "newBufferedWriter", "properties", ".", "store", "ArrayList", "(", ")", ".", "toURL", "Collections", ".", "list", "\"", "spring.factories", "\"", "(", "springFactories", ")", "(", "writer", ",", ")", "<", ">", "springFactories", ".", "toUri", "(", ")", "(", "resources", ")", "\"", "\"", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 190, "ast_depth": 12, "n_identifiers": 23, "vocab_size": 51, "n_whitespaces": 117, "n_words": 56, "nloc": 15, "token_counts": 129}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListenerTests.java#309-314", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListenerTests.java", "language": "Java"}, "method": {"name": "postProcessEnvironment", "qualified_name": "test.java.org.springframework.boot.env.EnvironmentPostProcessorApplicationListenerTests#postProcessEnvironment", "start_line": 309, "end_line": 314, "signature": "postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application)", "original_code": "@Override\n\t\t\tpublic void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {\n\t\t\t\tMockPropertySource propertySource = new MockPropertySource().withProperty(\"test.activeProfiles\",\n\t\t\t\t\t\tStringUtils.arrayToCommaDelimitedString(environment.getActiveProfiles()));\n\t\t\t\tenvironment.getPropertySources().addLast(propertySource);\n\t\t\t}", "doc_comment": ""}, "code_tokens": ["void", "postProcessEnvironment", "public", "(", ",", ")", "{", "}", "@", "Override", "ConfigurableEnvironment", "environment", "SpringApplication", "application", "MockPropertySource", ";", ";", "propertySource", "=", ".", "addLast", ".", "withProperty", "environment", ".", "getPropertySources", "(", "propertySource", ")", "new", "MockPropertySource", "(", ",", ")", "(", ")", "(", ")", "\"", "test.activeProfiles", "\"", "StringUtils", ".", "arrayToCommaDelimitedString", "(", ")", "environment", ".", "getActiveProfiles", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 75, "ast_depth": 12, "n_identifiers": 11, "vocab_size": 28, "n_whitespaces": 35, "n_words": 23, "nloc": 6, "token_counts": 51}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListenerTests.java#316-319", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListenerTests.java", "language": "Java"}, "method": {"name": "getOrder", "qualified_name": "test.java.org.springframework.boot.env.EnvironmentPostProcessorApplicationListenerTests#getOrder", "start_line": 316, "end_line": 319, "signature": "getOrder()", "original_code": "@Override\n\t\t\tpublic int getOrder() {\n\t\t\t\treturn Ordered.HIGHEST_PRECEDENCE;\n\t\t\t}", "doc_comment": ""}, "code_tokens": ["getOrder", "public", "int", "(", ")", "{", "}", "@", "Override", "return", ";", "Ordered", ".", "HIGHEST_PRECEDENCE"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 23, "ast_depth": 6, "n_identifiers": 4, "vocab_size": 14, "n_whitespaces": 17, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListenerTests.java#330-333", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListenerTests.java", "language": "Java"}, "method": {"name": "initialize", "qualified_name": "test.java.org.springframework.boot.env.EnvironmentPostProcessorApplicationListenerTests#initialize", "start_line": 330, "end_line": 333, "signature": "initialize(ConfigurableApplicationContext applicationContext)", "original_code": "@Override\n\t\t\tpublic void initialize(ConfigurableApplicationContext applicationContext) {\n\t\t\t\tapplicationContext.getBeanFactory().registerSingleton(\"test\", \"test\");\n\t\t\t}", "doc_comment": ""}, "code_tokens": ["void", "initialize", "public", "(", ")", "{", "}", "@", "Override", "ConfigurableApplicationContext", "applicationContext", ";", ".", "registerSingleton", "applicationContext", ".", "getBeanFactory", "(", ",", ")", "(", ")", "\"", "test", "\"", "\"", "test", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 42, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 18, "n_whitespaces": 18, "n_words": 11, "nloc": 4, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListenerTests.java#339-343", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListenerTests.java", "language": "Java"}, "method": {"name": "postProcessEnvironment", "qualified_name": "test.java.org.springframework.boot.env.EnvironmentPostProcessorApplicationListenerTests#postProcessEnvironment", "start_line": 339, "end_line": 343, "signature": "postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application)", "original_code": "@Override\n\t\t\tpublic void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {\n\t\t\t\tenvironment.addActiveProfile(\"one\");\n\t\t\t\tenvironment.addActiveProfile(\"three\");\n\t\t\t}", "doc_comment": ""}, "code_tokens": ["void", "postProcessEnvironment", "public", "(", ",", ")", "{", "}", "@", "Override", "ConfigurableEnvironment", "environment", "SpringApplication", "application", ";", ";", "environment", ".", "addActiveProfile", "environment", ".", "addActiveProfile", "(", ")", "(", ")", "\"", "one", "\"", "\"", "three", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 48, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 20, "n_whitespaces": 24, "n_words": 14, "nloc": 5, "token_counts": 32}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListenerTests.java#354-357", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorApplicationListenerTests.java", "language": "Java"}, "method": {"name": "initialize", "qualified_name": "test.java.org.springframework.boot.env.EnvironmentPostProcessorApplicationListenerTests#initialize", "start_line": 354, "end_line": 357, "signature": "initialize(ConfigurableApplicationContext applicationContext)", "original_code": "@Override\n\t\t\tpublic void initialize(ConfigurableApplicationContext applicationContext) {\n\t\t\t\tapplicationContext.getBeanFactory().registerSingleton(\"test\", \"test\");\n\t\t\t}", "doc_comment": ""}, "code_tokens": ["void", "initialize", "public", "(", ")", "{", "}", "@", "Override", "ConfigurableApplicationContext", "applicationContext", ";", ".", "registerSingleton", "applicationContext", ".", "getBeanFactory", "(", ",", ")", "(", ")", "\"", "test", "\"", "\"", "test", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 42, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 18, "n_whitespaces": 18, "n_words": 11, "nloc": 4, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorsFactoryTests.java#43-49", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorsFactoryTests.java", "language": "Java"}, "method": {"name": "fromSpringFactoriesReturnsFactory", "qualified_name": "test.java.org.springframework.boot.env.EnvironmentPostProcessorsFactoryTests#fromSpringFactoriesReturnsFactory", "start_line": 43, "end_line": 49, "signature": "fromSpringFactoriesReturnsFactory()", "original_code": "@Test\n\tvoid fromSpringFactoriesReturnsFactory() {\n\t\tEnvironmentPostProcessorsFactory factory = EnvironmentPostProcessorsFactory.fromSpringFactories(null);\n\t\tList<EnvironmentPostProcessor> processors = factory.getEnvironmentPostProcessors(this.logFactory,\n\t\t\t\tthis.bootstrapContext);\n\t\tassertThat(processors).hasSizeGreaterThan(1);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "fromSpringFactoriesReturnsFactory", "(", ")", "{", "}", "@", "Test", "EnvironmentPostProcessorsFactory", ";", ";", ";", "factory", "=", "List", "processors", "=", ".", "hasSizeGreaterThan", "EnvironmentPostProcessorsFactory", ".", "fromSpringFactories", "<", "EnvironmentPostProcessor", ">", "factory", ".", "getEnvironmentPostProcessors", "assertThat", "(", "1", ")", "(", "null", ")", "(", ",", ")", "(", "processors", ")", "this", ".", "logFactory", "this", ".", "bootstrapContext"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 70, "ast_depth": 9, "n_identifiers": 11, "vocab_size": 28, "n_whitespaces": 26, "n_words": 21, "nloc": 7, "token_counts": 47}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorsFactoryTests.java#51-59", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorsFactoryTests.java", "language": "Java"}, "method": {"name": "ofClassesReturnsFactory", "qualified_name": "test.java.org.springframework.boot.env.EnvironmentPostProcessorsFactoryTests#ofClassesReturnsFactory", "start_line": 51, "end_line": 59, "signature": "ofClassesReturnsFactory()", "original_code": "@Test\n\tvoid ofClassesReturnsFactory() {\n\t\tEnvironmentPostProcessorsFactory factory = EnvironmentPostProcessorsFactory\n\t\t\t.of(TestEnvironmentPostProcessor.class);\n\t\tList<EnvironmentPostProcessor> processors = factory.getEnvironmentPostProcessors(this.logFactory,\n\t\t\t\tthis.bootstrapContext);\n\t\tassertThat(processors).hasSize(1);\n\t\tassertThat(processors.get(0)).isInstanceOf(TestEnvironmentPostProcessor.class);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "ofClassesReturnsFactory", "(", ")", "{", "}", "@", "Test", "EnvironmentPostProcessorsFactory", ";", ";", ";", ";", "factory", "=", "List", "processors", "=", ".", "hasSize", ".", "isInstanceOf", "EnvironmentPostProcessorsFactory", ".", "of", "<", "EnvironmentPostProcessor", ">", "factory", ".", "getEnvironmentPostProcessors", "assertThat", "(", "1", ")", "assertThat", "(", ")", "(", ")", "(", ",", ")", "(", "processors", ")", "(", ")", "TestEnvironmentPostProcessor", ".", "class", "TestEnvironmentPostProcessor", ".", "class", "this", ".", "logFactory", "this", ".", "bootstrapContext", "processors", ".", "get", "(", "0", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 98, "ast_depth": 10, "n_identifiers": 13, "vocab_size": 32, "n_whitespaces": 33, "n_words": 29, "nloc": 9, "token_counts": 66}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorsFactoryTests.java#61-69", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorsFactoryTests.java", "language": "Java"}, "method": {"name": "ofClassNamesReturnsFactory", "qualified_name": "test.java.org.springframework.boot.env.EnvironmentPostProcessorsFactoryTests#ofClassNamesReturnsFactory", "start_line": 61, "end_line": 69, "signature": "ofClassNamesReturnsFactory()", "original_code": "@Test\n\tvoid ofClassNamesReturnsFactory() {\n\t\tEnvironmentPostProcessorsFactory factory = EnvironmentPostProcessorsFactory\n\t\t\t.of(TestEnvironmentPostProcessor.class.getName());\n\t\tList<EnvironmentPostProcessor> processors = factory.getEnvironmentPostProcessors(this.logFactory,\n\t\t\t\tthis.bootstrapContext);\n\t\tassertThat(processors).hasSize(1);\n\t\tassertThat(processors.get(0)).isInstanceOf(TestEnvironmentPostProcessor.class);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "ofClassNamesReturnsFactory", "(", ")", "{", "}", "@", "Test", "EnvironmentPostProcessorsFactory", ";", ";", ";", ";", "factory", "=", "List", "processors", "=", ".", "hasSize", ".", "isInstanceOf", "EnvironmentPostProcessorsFactory", ".", "of", "<", "EnvironmentPostProcessor", ">", "factory", ".", "getEnvironmentPostProcessors", "assertThat", "(", "1", ")", "assertThat", "(", ")", "(", ")", "(", ",", ")", "(", "processors", ")", "(", ")", "TestEnvironmentPostProcessor", ".", "class", ".", "getName", "this", ".", "logFactory", "this", ".", "bootstrapContext", "processors", ".", "get", "TestEnvironmentPostProcessor", ".", "class", "(", ")", "(", "0", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 104, "ast_depth": 10, "n_identifiers": 14, "vocab_size": 33, "n_whitespaces": 33, "n_words": 30, "nloc": 9, "token_counts": 70}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorsFactoryTests.java#71-88", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorsFactoryTests.java", "language": "Java"}, "method": {"name": "ofClassNamesWithClassLoaderReturnsFactory", "qualified_name": "test.java.org.springframework.boot.env.EnvironmentPostProcessorsFactoryTests#ofClassNamesWithClassLoaderReturnsFactory", "start_line": 71, "end_line": 88, "signature": "ofClassNamesWithClassLoaderReturnsFactory()", "original_code": "@Test\n\tvoid ofClassNamesWithClassLoaderReturnsFactory() {\n\t\tOverridingClassLoader classLoader = new OverridingClassLoader(getClass().getClassLoader()) {\n\n\t\t\t@Override\n\t\t\tprotected boolean isEligibleForOverriding(String className) {\n\t\t\t\treturn super.isEligibleForOverriding(className)\n\t\t\t\t\t\t&& className.equals(TestEnvironmentPostProcessor.class.getName());\n\t\t\t}\n\n\t\t};\n\t\tEnvironmentPostProcessorsFactory factory = EnvironmentPostProcessorsFactory.of(classLoader,\n\t\t\t\tTestEnvironmentPostProcessor.class.getName());\n\t\tList<EnvironmentPostProcessor> processors = factory.getEnvironmentPostProcessors(this.logFactory,\n\t\t\t\tthis.bootstrapContext);\n\t\tassertThat(processors).hasSize(1);\n\t\tassertThat(processors.get(0).getClass().getClassLoader()).isSameAs(classLoader);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "ofClassNamesWithClassLoaderReturnsFactory", "(", ")", "{", "}", "@", "Test", "OverridingClassLoader", ";", "EnvironmentPostProcessorsFactory", ";", ";", ";", ";", "classLoader", "=", "factory", "=", "List", "processors", "=", ".", "hasSize", ".", "isSameAs", "new", "OverridingClassLoader", "EnvironmentPostProcessorsFactory", ".", "of", "<", "EnvironmentPostProcessor", ">", "factory", ".", "getEnvironmentPostProcessors", "assertThat", "(", "1", ")", "assertThat", "(", "classLoader", ")", "(", ")", "{", "}", "(", "classLoader", ",", ")", "(", ",", ")", "(", "processors", ")", "(", ")", ".", "getClassLoader", "boolean", "isEligibleForOverriding", ".", "getName", "this", ".", "logFactory", "this", ".", "bootstrapContext", ".", "getClassLoader", "getClass", "(", ")", "protected", "(", ")", "{", "}", "TestEnvironmentPostProcessor", ".", "class", "(", ")", ".", "getClass", "(", ")", "(", ")", "@", "Override", "String", "className", "return", ";", "processors", ".", "get", "(", ")", "&&", "(", "0", ")", "super", ".", "isEligibleForOverriding", "className", ".", "equals", "(", "className", ")", "(", ")", ".", "getName", "TestEnvironmentPostProcessor", ".", "class", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 188, "ast_depth": 16, "n_identifiers": 21, "vocab_size": 48, "n_whitespaces": 77, "n_words": 53, "nloc": 16, "token_counts": 127}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorsFactoryTests.java#75-79", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorsFactoryTests.java", "language": "Java"}, "method": {"name": "isEligibleForOverriding", "qualified_name": "test.java.org.springframework.boot.env.EnvironmentPostProcessorsFactoryTests#isEligibleForOverriding", "start_line": 75, "end_line": 79, "signature": "isEligibleForOverriding(String className)", "original_code": "@Override\n\t\t\tprotected boolean isEligibleForOverriding(String className) {\n\t\t\t\treturn super.isEligibleForOverriding(className)\n\t\t\t\t\t\t&& className.equals(TestEnvironmentPostProcessor.class.getName());\n\t\t\t}", "doc_comment": ""}, "code_tokens": ["boolean", "isEligibleForOverriding", "protected", "(", ")", "{", "}", "@", "Override", "String", "className", "return", ";", "&&", "super", ".", "isEligibleForOverriding", "className", ".", "equals", "(", "className", ")", "(", ")", ".", "getName", "TestEnvironmentPostProcessor", ".", "class", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 48, "ast_depth": 10, "n_identifiers": 5, "vocab_size": 20, "n_whitespaces": 26, "n_words": 15, "nloc": 5, "token_counts": 32}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorsFactoryTests.java#95-97", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorsFactoryTests.java", "language": "Java"}, "method": {"name": "postProcessEnvironment", "qualified_name": "test.java.org.springframework.boot.env.EnvironmentPostProcessorsFactoryTests#postProcessEnvironment", "start_line": 95, "end_line": 97, "signature": "postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application)", "original_code": "@Override\n\t\tpublic void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "postProcessEnvironment", "public", "(", ",", ")", "{", "}", "@", "Override", "ConfigurableEnvironment", "environment", "SpringApplication", "application"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 5, "n_identifiers": 4, "vocab_size": 14, "n_whitespaces": 12, "n_words": 8, "nloc": 3, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/env/ReflectionEnvironmentPostProcessorsFactoryTests.java#48-53", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/ReflectionEnvironmentPostProcessorsFactoryTests.java", "language": "Java"}, "method": {"name": "createWithClassesCreatesFactory", "qualified_name": "test.java.org.springframework.boot.env.ReflectionEnvironmentPostProcessorsFactoryTests#createWithClassesCreatesFactory", "start_line": 48, "end_line": 53, "signature": "createWithClassesCreatesFactory()", "original_code": "@Test\n\tvoid createWithClassesCreatesFactory() {\n\t\tReflectionEnvironmentPostProcessorsFactory factory = new ReflectionEnvironmentPostProcessorsFactory(\n\t\t\t\tTestEnvironmentPostProcessor.class);\n\t\tassertThatFactory(factory).createsSinglePostProcessor(TestEnvironmentPostProcessor.class);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "createWithClassesCreatesFactory", "(", ")", "{", "}", "@", "Test", "ReflectionEnvironmentPostProcessorsFactory", ";", ";", "factory", "=", ".", "createsSinglePostProcessor", "new", "ReflectionEnvironmentPostProcessorsFactory", "assertThatFactory", "(", ")", "(", ")", "(", "factory", ")", "TestEnvironmentPostProcessor", ".", "class", "TestEnvironmentPostProcessor", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 48, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 18, "n_whitespaces": 21, "n_words": 14, "nloc": 6, "token_counts": 31}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/env/ReflectionEnvironmentPostProcessorsFactoryTests.java#55-60", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/ReflectionEnvironmentPostProcessorsFactoryTests.java", "language": "Java"}, "method": {"name": "createWithClassNamesArrayCreatesFactory", "qualified_name": "test.java.org.springframework.boot.env.ReflectionEnvironmentPostProcessorsFactoryTests#createWithClassNamesArrayCreatesFactory", "start_line": 55, "end_line": 60, "signature": "createWithClassNamesArrayCreatesFactory()", "original_code": "@Test\n\tvoid createWithClassNamesArrayCreatesFactory() {\n\t\tReflectionEnvironmentPostProcessorsFactory factory = new ReflectionEnvironmentPostProcessorsFactory(null,\n\t\t\t\tTestEnvironmentPostProcessor.class.getName());\n\t\tassertThatFactory(factory).createsSinglePostProcessor(TestEnvironmentPostProcessor.class);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "createWithClassNamesArrayCreatesFactory", "(", ")", "{", "}", "@", "Test", "ReflectionEnvironmentPostProcessorsFactory", ";", ";", "factory", "=", ".", "createsSinglePostProcessor", "new", "ReflectionEnvironmentPostProcessorsFactory", "assertThatFactory", "(", ")", "(", "null", ",", ")", "(", "factory", ")", "TestEnvironmentPostProcessor", ".", "class", ".", "getName", "TestEnvironmentPostProcessor", ".", "class", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 56, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 21, "n_whitespaces": 21, "n_words": 16, "nloc": 6, "token_counts": 37}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/env/ReflectionEnvironmentPostProcessorsFactoryTests.java#62-67", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/ReflectionEnvironmentPostProcessorsFactoryTests.java", "language": "Java"}, "method": {"name": "createWithClassNamesListCreatesFactory", "qualified_name": "test.java.org.springframework.boot.env.ReflectionEnvironmentPostProcessorsFactoryTests#createWithClassNamesListCreatesFactory", "start_line": 62, "end_line": 67, "signature": "createWithClassNamesListCreatesFactory()", "original_code": "@Test\n\tvoid createWithClassNamesListCreatesFactory() {\n\t\tReflectionEnvironmentPostProcessorsFactory factory = new ReflectionEnvironmentPostProcessorsFactory(null,\n\t\t\t\tArrays.asList(TestEnvironmentPostProcessor.class.getName()));\n\t\tassertThatFactory(factory).createsSinglePostProcessor(TestEnvironmentPostProcessor.class);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "createWithClassNamesListCreatesFactory", "(", ")", "{", "}", "@", "Test", "ReflectionEnvironmentPostProcessorsFactory", ";", ";", "factory", "=", ".", "createsSinglePostProcessor", "new", "ReflectionEnvironmentPostProcessorsFactory", "assertThatFactory", "(", ")", "(", "null", ",", ")", "(", "factory", ")", "TestEnvironmentPostProcessor", ".", "class", "Arrays", ".", "asList", "(", ")", ".", "getName", "TestEnvironmentPostProcessor", ".", "class", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 63, "ast_depth": 12, "n_identifiers": 8, "vocab_size": 23, "n_whitespaces": 21, "n_words": 18, "nloc": 6, "token_counts": 42}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/env/ReflectionEnvironmentPostProcessorsFactoryTests.java#69-83", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/ReflectionEnvironmentPostProcessorsFactoryTests.java", "language": "Java"}, "method": {"name": "createWithClassNamesAndClassLoaderListCreatesFactory", "qualified_name": "test.java.org.springframework.boot.env.ReflectionEnvironmentPostProcessorsFactoryTests#createWithClassNamesAndClassLoaderListCreatesFactory", "start_line": 69, "end_line": 83, "signature": "createWithClassNamesAndClassLoaderListCreatesFactory()", "original_code": "@Test\n\tvoid createWithClassNamesAndClassLoaderListCreatesFactory() {\n\t\tOverridingClassLoader classLoader = new OverridingClassLoader(getClass().getClassLoader()) {\n\n\t\t\t@Override\n\t\t\tprotected boolean isEligibleForOverriding(String className) {\n\t\t\t\treturn super.isEligibleForOverriding(className)\n\t\t\t\t\t\t&& className.equals(TestEnvironmentPostProcessor.class.getName());\n\t\t\t}\n\n\t\t};\n\t\tReflectionEnvironmentPostProcessorsFactory factory = new ReflectionEnvironmentPostProcessorsFactory(classLoader,\n\t\t\t\tArrays.asList(TestEnvironmentPostProcessor.class.getName()));\n\t\tassertThatFactory(factory).createsSinglePostProcessorWithClassLoader(classLoader);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "createWithClassNamesAndClassLoaderListCreatesFactory", "(", ")", "{", "}", "@", "Test", "OverridingClassLoader", ";", "ReflectionEnvironmentPostProcessorsFactory", ";", ";", "classLoader", "=", "factory", "=", ".", "createsSinglePostProcessorWithClassLoader", "new", "OverridingClassLoader", "new", "ReflectionEnvironmentPostProcessorsFactory", "assertThatFactory", "(", "classLoader", ")", "(", ")", "{", "}", "(", "classLoader", ",", ")", "(", "factory", ")", ".", "getClassLoader", "boolean", "isEligibleForOverriding", "Arrays", ".", "asList", "getClass", "(", ")", "protected", "(", ")", "{", "}", "(", ")", "(", ")", "@", "Override", "String", "className", "return", ";", ".", "getName", "&&", "TestEnvironmentPostProcessor", ".", "class", "(", ")", "super", ".", "isEligibleForOverriding", "className", ".", "equals", "(", "className", ")", "(", ")", ".", "getName", "TestEnvironmentPostProcessor", ".", "class", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 133, "ast_depth": 16, "n_identifiers": 15, "vocab_size": 36, "n_whitespaces": 64, "n_words": 38, "nloc": 13, "token_counts": 89}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/env/ReflectionEnvironmentPostProcessorsFactoryTests.java#73-77", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/ReflectionEnvironmentPostProcessorsFactoryTests.java", "language": "Java"}, "method": {"name": "isEligibleForOverriding", "qualified_name": "test.java.org.springframework.boot.env.ReflectionEnvironmentPostProcessorsFactoryTests#isEligibleForOverriding", "start_line": 73, "end_line": 77, "signature": "isEligibleForOverriding(String className)", "original_code": "@Override\n\t\t\tprotected boolean isEligibleForOverriding(String className) {\n\t\t\t\treturn super.isEligibleForOverriding(className)\n\t\t\t\t\t\t&& className.equals(TestEnvironmentPostProcessor.class.getName());\n\t\t\t}", "doc_comment": ""}, "code_tokens": ["boolean", "isEligibleForOverriding", "protected", "(", ")", "{", "}", "@", "Override", "String", "className", "return", ";", "&&", "super", ".", "isEligibleForOverriding", "className", ".", "equals", "(", "className", ")", "(", ")", ".", "getName", "TestEnvironmentPostProcessor", ".", "class", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 48, "ast_depth": 10, "n_identifiers": 5, "vocab_size": 20, "n_whitespaces": 26, "n_words": 15, "nloc": 5, "token_counts": 32}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/env/ReflectionEnvironmentPostProcessorsFactoryTests.java#85-90", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/ReflectionEnvironmentPostProcessorsFactoryTests.java", "language": "Java"}, "method": {"name": "getEnvironmentPostProcessorsWhenHasDefaultConstructorCreatesPostProcessors", "qualified_name": "test.java.org.springframework.boot.env.ReflectionEnvironmentPostProcessorsFactoryTests#getEnvironmentPostProcessorsWhenHasDefaultConstructorCreatesPostProcessors", "start_line": 85, "end_line": 90, "signature": "getEnvironmentPostProcessorsWhenHasDefaultConstructorCreatesPostProcessors()", "original_code": "@Test\n\tvoid getEnvironmentPostProcessorsWhenHasDefaultConstructorCreatesPostProcessors() {\n\t\tReflectionEnvironmentPostProcessorsFactory factory = new ReflectionEnvironmentPostProcessorsFactory(null,\n\t\t\t\tTestEnvironmentPostProcessor.class.getName());\n\t\tassertThatFactory(factory).createsSinglePostProcessor(TestEnvironmentPostProcessor.class);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "getEnvironmentPostProcessorsWhenHasDefaultConstructorCreatesPostProcessors", "(", ")", "{", "}", "@", "Test", "ReflectionEnvironmentPostProcessorsFactory", ";", ";", "factory", "=", ".", "createsSinglePostProcessor", "new", "ReflectionEnvironmentPostProcessorsFactory", "assertThatFactory", "(", ")", "(", "null", ",", ")", "(", "factory", ")", "TestEnvironmentPostProcessor", ".", "class", ".", "getName", "TestEnvironmentPostProcessor", ".", "class", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 56, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 21, "n_whitespaces": 21, "n_words": 16, "nloc": 6, "token_counts": 37}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/env/ReflectionEnvironmentPostProcessorsFactoryTests.java#92-97", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/ReflectionEnvironmentPostProcessorsFactoryTests.java", "language": "Java"}, "method": {"name": "getEnvironmentPostProcessorsWhenHasLogFactoryConstructorCreatesPostProcessors", "qualified_name": "test.java.org.springframework.boot.env.ReflectionEnvironmentPostProcessorsFactoryTests#getEnvironmentPostProcessorsWhenHasLogFactoryConstructorCreatesPostProcessors", "start_line": 92, "end_line": 97, "signature": "getEnvironmentPostProcessorsWhenHasLogFactoryConstructorCreatesPostProcessors()", "original_code": "@Test\n\tvoid getEnvironmentPostProcessorsWhenHasLogFactoryConstructorCreatesPostProcessors() {\n\t\tReflectionEnvironmentPostProcessorsFactory factory = new ReflectionEnvironmentPostProcessorsFactory(null,\n\t\t\t\tTestLogFactoryEnvironmentPostProcessor.class.getName());\n\t\tassertThatFactory(factory).createsSinglePostProcessor(TestLogFactoryEnvironmentPostProcessor.class);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "getEnvironmentPostProcessorsWhenHasLogFactoryConstructorCreatesPostProcessors", "(", ")", "{", "}", "@", "Test", "ReflectionEnvironmentPostProcessorsFactory", ";", ";", "factory", "=", ".", "createsSinglePostProcessor", "new", "ReflectionEnvironmentPostProcessorsFactory", "assertThatFactory", "(", ")", "(", "null", ",", ")", "(", "factory", ")", "TestLogFactoryEnvironmentPostProcessor", ".", "class", ".", "getName", "TestLogFactoryEnvironmentPostProcessor", ".", "class", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 56, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 21, "n_whitespaces": 21, "n_words": 16, "nloc": 6, "token_counts": 37}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/env/ReflectionEnvironmentPostProcessorsFactoryTests.java#99-104", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/ReflectionEnvironmentPostProcessorsFactoryTests.java", "language": "Java"}, "method": {"name": "getEnvironmentPostProcessorsWhenHasLogConstructorCreatesPostProcessors", "qualified_name": "test.java.org.springframework.boot.env.ReflectionEnvironmentPostProcessorsFactoryTests#getEnvironmentPostProcessorsWhenHasLogConstructorCreatesPostProcessors", "start_line": 99, "end_line": 104, "signature": "getEnvironmentPostProcessorsWhenHasLogConstructorCreatesPostProcessors()", "original_code": "@Test\n\tvoid getEnvironmentPostProcessorsWhenHasLogConstructorCreatesPostProcessors() {\n\t\tReflectionEnvironmentPostProcessorsFactory factory = new ReflectionEnvironmentPostProcessorsFactory(null,\n\t\t\t\tTestLogEnvironmentPostProcessor.class.getName());\n\t\tassertThatFactory(factory).createsSinglePostProcessor(TestLogEnvironmentPostProcessor.class);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "getEnvironmentPostProcessorsWhenHasLogConstructorCreatesPostProcessors", "(", ")", "{", "}", "@", "Test", "ReflectionEnvironmentPostProcessorsFactory", ";", ";", "factory", "=", ".", "createsSinglePostProcessor", "new", "ReflectionEnvironmentPostProcessorsFactory", "assertThatFactory", "(", ")", "(", "null", ",", ")", "(", "factory", ")", "TestLogEnvironmentPostProcessor", ".", "class", ".", "getName", "TestLogEnvironmentPostProcessor", ".", "class", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 56, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 21, "n_whitespaces": 21, "n_words": 16, "nloc": 6, "token_counts": 37}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/env/ReflectionEnvironmentPostProcessorsFactoryTests.java#106-111", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/ReflectionEnvironmentPostProcessorsFactoryTests.java", "language": "Java"}, "method": {"name": "getEnvironmentPostProcessorsWhenHasBootstrapRegistryConstructorCreatesPostProcessors", "qualified_name": "test.java.org.springframework.boot.env.ReflectionEnvironmentPostProcessorsFactoryTests#getEnvironmentPostProcessorsWhenHasBootstrapRegistryConstructorCreatesPostProcessors", "start_line": 106, "end_line": 111, "signature": "getEnvironmentPostProcessorsWhenHasBootstrapRegistryConstructorCreatesPostProcessors()", "original_code": "@Test\n\tvoid getEnvironmentPostProcessorsWhenHasBootstrapRegistryConstructorCreatesPostProcessors() {\n\t\tReflectionEnvironmentPostProcessorsFactory factory = new ReflectionEnvironmentPostProcessorsFactory(null,\n\t\t\t\tTestBootstrapRegistryEnvironmentPostProcessor.class.getName());\n\t\tassertThatFactory(factory).createsSinglePostProcessor(TestBootstrapRegistryEnvironmentPostProcessor.class);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "getEnvironmentPostProcessorsWhenHasBootstrapRegistryConstructorCreatesPostProcessors", "(", ")", "{", "}", "@", "Test", "ReflectionEnvironmentPostProcessorsFactory", ";", ";", "factory", "=", ".", "createsSinglePostProcessor", "new", "ReflectionEnvironmentPostProcessorsFactory", "assertThatFactory", "(", ")", "(", "null", ",", ")", "(", "factory", ")", "TestBootstrapRegistryEnvironmentPostProcessor", ".", "class", ".", "getName", "TestBootstrapRegistryEnvironmentPostProcessor", ".", "class", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 56, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 21, "n_whitespaces": 21, "n_words": 16, "nloc": 6, "token_counts": 37}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/env/ReflectionEnvironmentPostProcessorsFactoryTests.java#113-120", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/ReflectionEnvironmentPostProcessorsFactoryTests.java", "language": "Java"}, "method": {"name": "getEnvironmentPostProcessorsWhenHasNoSuitableConstructorThrowsException", "qualified_name": "test.java.org.springframework.boot.env.ReflectionEnvironmentPostProcessorsFactoryTests#getEnvironmentPostProcessorsWhenHasNoSuitableConstructorThrowsException", "start_line": 113, "end_line": 120, "signature": "getEnvironmentPostProcessorsWhenHasNoSuitableConstructorThrowsException()", "original_code": "@Test\n\tvoid getEnvironmentPostProcessorsWhenHasNoSuitableConstructorThrowsException() {\n\t\tReflectionEnvironmentPostProcessorsFactory factory = new ReflectionEnvironmentPostProcessorsFactory(null,\n\t\t\t\tBadEnvironmentPostProcessor.class.getName());\n\t\tassertThatIllegalArgumentException()\n\t\t\t.isThrownBy(() -> factory.getEnvironmentPostProcessors(this.logFactory, this.bootstrapContext))\n\t\t\t.withMessageContaining(\"Unable to instantiate\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "getEnvironmentPostProcessorsWhenHasNoSuitableConstructorThrowsException", "(", ")", "{", "}", "@", "Test", "ReflectionEnvironmentPostProcessorsFactory", ";", ";", "factory", "=", ".", "withMessageContaining", "new", "ReflectionEnvironmentPostProcessorsFactory", ".", "isThrownBy", "(", ")", "(", "null", ",", ")", "assertThatIllegalArgumentException", "(", ")", "\"", "Unable to instantiate", "\"", ".", "getName", "(", ")", "->", "BadEnvironmentPostProcessor", ".", "class", "(", ")", "(", ")", "factory", ".", "getEnvironmentPostProcessors", "(", ",", ")", "this", ".", "logFactory", "this", ".", "bootstrapContext"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 82, "ast_depth": 12, "n_identifiers": 10, "vocab_size": 29, "n_whitespaces": 34, "n_words": 23, "nloc": 8, "token_counts": 55}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/env/ReflectionEnvironmentPostProcessorsFactoryTests.java#122-124", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/ReflectionEnvironmentPostProcessorsFactoryTests.java", "language": "Java"}, "method": {"name": "assertThatFactory", "qualified_name": "test.java.org.springframework.boot.env.ReflectionEnvironmentPostProcessorsFactoryTests#assertThatFactory", "start_line": 122, "end_line": 124, "signature": "assertThatFactory(EnvironmentPostProcessorsFactory factory)", "original_code": "private EnvironmentPostProcessorsFactoryAssert assertThatFactory(EnvironmentPostProcessorsFactory factory) {\n\t\treturn new EnvironmentPostProcessorsFactoryAssert(factory);\n\t}", "doc_comment": ""}, "code_tokens": ["EnvironmentPostProcessorsFactoryAssert", "assertThatFactory", "private", "(", ")", "{", "}", "EnvironmentPostProcessorsFactory", "factory", "return", ";", "new", "EnvironmentPostProcessorsFactoryAssert", "(", "factory", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 25, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 12, "n_whitespaces": 11, "n_words": 9, "nloc": 3, "token_counts": 16}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/env/ReflectionEnvironmentPostProcessorsFactoryTests.java#134-137", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/ReflectionEnvironmentPostProcessorsFactoryTests.java", "language": "Java"}, "method": {"name": "createsSinglePostProcessor", "qualified_name": "test.java.org.springframework.boot.env.ReflectionEnvironmentPostProcessorsFactoryTests#createsSinglePostProcessor", "start_line": 134, "end_line": 137, "signature": "createsSinglePostProcessor(Class<?> expectedType)", "original_code": "void createsSinglePostProcessor(Class<?> expectedType) {\n\t\t\tEnvironmentPostProcessor processor = getSingleProcessor();\n\t\t\tassertThat(processor).isInstanceOf(expectedType);\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "createsSinglePostProcessor", "(", ")", "{", "}", "expectedType", "EnvironmentPostProcessor", ";", ";", "Class", "processor", "=", ".", "isInstanceOf", "<", ">", "getSingleProcessor", "assertThat", "(", "expectedType", ")", "?", "(", ")", "(", "processor", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 45, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 19, "n_whitespaces": 17, "n_words": 11, "nloc": 4, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/env/ReflectionEnvironmentPostProcessorsFactoryTests.java#139-142", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/ReflectionEnvironmentPostProcessorsFactoryTests.java", "language": "Java"}, "method": {"name": "createsSinglePostProcessorWithClassLoader", "qualified_name": "test.java.org.springframework.boot.env.ReflectionEnvironmentPostProcessorsFactoryTests#createsSinglePostProcessorWithClassLoader", "start_line": 139, "end_line": 142, "signature": "createsSinglePostProcessorWithClassLoader(OverridingClassLoader classLoader)", "original_code": "void createsSinglePostProcessorWithClassLoader(OverridingClassLoader classLoader) {\n\t\t\tEnvironmentPostProcessor processor = getSingleProcessor();\n\t\t\tassertThat(processor.getClass().getClassLoader()).isSameAs(classLoader);\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "createsSinglePostProcessorWithClassLoader", "(", ")", "{", "}", "OverridingClassLoader", "classLoader", "EnvironmentPostProcessor", ";", ";", "processor", "=", ".", "isSameAs", "getSingleProcessor", "assertThat", "(", "classLoader", ")", "(", ")", "(", ")", ".", "getClassLoader", "processor", ".", "getClass", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 51, "ast_depth": 11, "n_identifiers": 8, "vocab_size": 18, "n_whitespaces": 17, "n_words": 13, "nloc": 4, "token_counts": 33}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/env/ReflectionEnvironmentPostProcessorsFactoryTests.java#144-150", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/ReflectionEnvironmentPostProcessorsFactoryTests.java", "language": "Java"}, "method": {"name": "getSingleProcessor", "qualified_name": "test.java.org.springframework.boot.env.ReflectionEnvironmentPostProcessorsFactoryTests#getSingleProcessor", "start_line": 144, "end_line": 150, "signature": "getSingleProcessor()", "original_code": "private EnvironmentPostProcessor getSingleProcessor() {\n\t\t\tList<EnvironmentPostProcessor> processors = this.factory.getEnvironmentPostProcessors(\n\t\t\t\t\tReflectionEnvironmentPostProcessorsFactoryTests.this.logFactory,\n\t\t\t\t\tReflectionEnvironmentPostProcessorsFactoryTests.this.bootstrapContext);\n\t\t\tassertThat(processors).hasSize(1);\n\t\t\treturn processors.get(0);\n\t\t}", "doc_comment": ""}, "code_tokens": ["EnvironmentPostProcessor", "getSingleProcessor", "private", "(", ")", "{", "}", ";", ";", "return", ";", "List", "processors", "=", ".", "hasSize", "processors", ".", "get", "<", "EnvironmentPostProcessor", ">", ".", "getEnvironmentPostProcessors", "assertThat", "(", "1", ")", "(", "0", ")", "this", ".", "factory", "(", ",", ")", "(", "processors", ")", ".", "logFactory", ".", "bootstrapContext", "ReflectionEnvironmentPostProcessorsFactoryTests", ".", "this", "ReflectionEnvironmentPostProcessorsFactoryTests", ".", "this"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 74, "ast_depth": 10, "n_identifiers": 10, "vocab_size": 27, "n_whitespaces": 34, "n_words": 23, "nloc": 7, "token_counts": 50}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/env/ReflectionEnvironmentPostProcessorsFactoryTests.java#156-158", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/ReflectionEnvironmentPostProcessorsFactoryTests.java", "language": "Java"}, "method": {"name": "postProcessEnvironment", "qualified_name": "test.java.org.springframework.boot.env.ReflectionEnvironmentPostProcessorsFactoryTests#postProcessEnvironment", "start_line": 156, "end_line": 158, "signature": "postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application)", "original_code": "@Override\n\t\tpublic void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "postProcessEnvironment", "public", "(", ",", ")", "{", "}", "@", "Override", "ConfigurableEnvironment", "environment", "SpringApplication", "application"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 5, "n_identifiers": 4, "vocab_size": 14, "n_whitespaces": 12, "n_words": 8, "nloc": 3, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/env/ReflectionEnvironmentPostProcessorsFactoryTests.java#168-170", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/ReflectionEnvironmentPostProcessorsFactoryTests.java", "language": "Java"}, "method": {"name": "postProcessEnvironment", "qualified_name": "test.java.org.springframework.boot.env.ReflectionEnvironmentPostProcessorsFactoryTests#postProcessEnvironment", "start_line": 168, "end_line": 170, "signature": "postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application)", "original_code": "@Override\n\t\tpublic void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "postProcessEnvironment", "public", "(", ",", ")", "{", "}", "@", "Override", "ConfigurableEnvironment", "environment", "SpringApplication", "application"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 5, "n_identifiers": 4, "vocab_size": 14, "n_whitespaces": 12, "n_words": 8, "nloc": 3, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/env/ReflectionEnvironmentPostProcessorsFactoryTests.java#180-182", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/ReflectionEnvironmentPostProcessorsFactoryTests.java", "language": "Java"}, "method": {"name": "postProcessEnvironment", "qualified_name": "test.java.org.springframework.boot.env.ReflectionEnvironmentPostProcessorsFactoryTests#postProcessEnvironment", "start_line": 180, "end_line": 182, "signature": "postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application)", "original_code": "@Override\n\t\tpublic void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "postProcessEnvironment", "public", "(", ",", ")", "{", "}", "@", "Override", "ConfigurableEnvironment", "environment", "SpringApplication", "application"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 5, "n_identifiers": 4, "vocab_size": 14, "n_whitespaces": 12, "n_words": 8, "nloc": 3, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/env/ReflectionEnvironmentPostProcessorsFactoryTests.java#192-194", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/ReflectionEnvironmentPostProcessorsFactoryTests.java", "language": "Java"}, "method": {"name": "postProcessEnvironment", "qualified_name": "test.java.org.springframework.boot.env.ReflectionEnvironmentPostProcessorsFactoryTests#postProcessEnvironment", "start_line": 192, "end_line": 194, "signature": "postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application)", "original_code": "@Override\n\t\tpublic void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "postProcessEnvironment", "public", "(", ",", ")", "{", "}", "@", "Override", "ConfigurableEnvironment", "environment", "SpringApplication", "application"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 5, "n_identifiers": 4, "vocab_size": 14, "n_whitespaces": 12, "n_words": 8, "nloc": 3, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:core/spring-boot/src/test/java/org/springframework/boot/env/ReflectionEnvironmentPostProcessorsFactoryTests.java#203-205", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/ReflectionEnvironmentPostProcessorsFactoryTests.java", "language": "Java"}, "method": {"name": "postProcessEnvironment", "qualified_name": "test.java.org.springframework.boot.env.ReflectionEnvironmentPostProcessorsFactoryTests#postProcessEnvironment", "start_line": 203, "end_line": 205, "signature": "postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application)", "original_code": "@Override\n\t\tpublic void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "postProcessEnvironment", "public", "(", ",", ")", "{", "}", "@", "Override", "ConfigurableEnvironment", "environment", "SpringApplication", "application"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 5, "n_identifiers": 4, "vocab_size": 14, "n_whitespaces": 12, "n_words": 8, "nloc": 3, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:module/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/RestartApplicationListenerTests.java#54-59", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/RestartApplicationListenerTests.java", "language": "Java"}, "method": {"name": "cleanup", "qualified_name": "test.java.org.springframework.boot.devtools.restart.RestartApplicationListenerTests#cleanup", "start_line": 54, "end_line": 59, "signature": "cleanup()", "original_code": "@BeforeEach\n\t@AfterEach\n\tvoid cleanup() {\n\t\tRestarter.clearInstance();\n\t\tSystem.clearProperty(ENABLED_PROPERTY);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "cleanup", "(", ")", "{", "}", "@", "BeforeEach", "@", "AfterEach", ";", ";", "Restarter", ".", "clearInstance", "System", ".", "clearProperty", "(", ")", "(", "ENABLED_PROPERTY", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 36, "ast_depth": 7, "n_identifiers": 8, "vocab_size": 16, "n_whitespaces": 14, "n_words": 9, "nloc": 6, "token_counts": 23}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:module/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/RestartApplicationListenerTests.java#61-64", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/RestartApplicationListenerTests.java", "language": "Java"}, "method": {"name": "isHighestPriority", "qualified_name": "test.java.org.springframework.boot.devtools.restart.RestartApplicationListenerTests#isHighestPriority", "start_line": 61, "end_line": 64, "signature": "isHighestPriority()", "original_code": "@Test\n\tvoid isHighestPriority() {\n\t\tassertThat(new RestartApplicationListener().getOrder()).isEqualTo(Ordered.HIGHEST_PRECEDENCE);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "isHighestPriority", "(", ")", "{", "}", "@", "Test", ";", ".", "isEqualTo", "assertThat", "(", ")", "(", ")", "Ordered", ".", "HIGHEST_PRECEDENCE", ".", "getOrder", "new", "RestartApplicationListener", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 43, "ast_depth": 11, "n_identifiers": 7, "vocab_size": 17, "n_whitespaces": 10, "n_words": 10, "nloc": 4, "token_counts": 27}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:module/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/RestartApplicationListenerTests.java#66-72", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/RestartApplicationListenerTests.java", "language": "Java"}, "method": {"name": "initializeWithReady", "qualified_name": "test.java.org.springframework.boot.devtools.restart.RestartApplicationListenerTests#initializeWithReady", "start_line": 66, "end_line": 72, "signature": "initializeWithReady()", "original_code": "@Test\n\tvoid initializeWithReady() {\n\t\ttestInitialize(false, new ImplicitlyEnabledRestartApplicationListener());\n\t\tassertThat(Restarter.getInstance()).hasFieldOrPropertyWithValue(\"args\", ARGS);\n\t\tassertThat(Restarter.getInstance().isFinished()).isTrue();\n\t\tassertThat((List<?>) ReflectionTestUtils.getField(Restarter.getInstance(), \"rootContexts\")).isNotEmpty();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "initializeWithReady", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ";", "testInitialize", ".", "hasFieldOrPropertyWithValue", ".", "isTrue", ".", "isNotEmpty", "(", "false", ",", ")", "assertThat", "(", ",", "ARGS", ")", "assertThat", "(", ")", "assertThat", "(", ")", "new", "ImplicitlyEnabledRestartApplicationListener", "(", ")", "\"", "args", "\"", "(", ")", "(", ")", "(", ")", "Restarter", ".", "getInstance", ".", "isFinished", "(", ")", "(", ")", "Restarter", ".", "getInstance", "(", ")", "List", "ReflectionTestUtils", ".", "getField", "(", ")", "<", ">", "(", ",", ")", "?", "Restarter", ".", "getInstance", "\"", "rootContexts", "\"", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 123, "ast_depth": 13, "n_identifiers": 13, "vocab_size": 32, "n_whitespaces": 23, "n_words": 26, "nloc": 7, "token_counts": 81}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:module/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/RestartApplicationListenerTests.java#74-80", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/RestartApplicationListenerTests.java", "language": "Java"}, "method": {"name": "initializeWithFail", "qualified_name": "test.java.org.springframework.boot.devtools.restart.RestartApplicationListenerTests#initializeWithFail", "start_line": 74, "end_line": 80, "signature": "initializeWithFail()", "original_code": "@Test\n\tvoid initializeWithFail() {\n\t\ttestInitialize(true, new ImplicitlyEnabledRestartApplicationListener());\n\t\tassertThat(Restarter.getInstance()).hasFieldOrPropertyWithValue(\"args\", ARGS);\n\t\tassertThat(Restarter.getInstance().isFinished()).isTrue();\n\t\tassertThat((List<?>) ReflectionTestUtils.getField(Restarter.getInstance(), \"rootContexts\")).isEmpty();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "initializeWithFail", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ";", "testInitialize", ".", "hasFieldOrPropertyWithValue", ".", "isTrue", ".", "isEmpty", "(", "true", ",", ")", "assertThat", "(", ",", "ARGS", ")", "assertThat", "(", ")", "assertThat", "(", ")", "new", "ImplicitlyEnabledRestartApplicationListener", "(", ")", "\"", "args", "\"", "(", ")", "(", ")", "(", ")", "Restarter", ".", "getInstance", ".", "isFinished", "(", ")", "(", ")", "Restarter", ".", "getInstance", "(", ")", "List", "ReflectionTestUtils", ".", "getField", "(", ")", "<", ">", "(", ",", ")", "?", "Restarter", ".", "getInstance", "\"", "rootContexts", "\"", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 123, "ast_depth": 13, "n_identifiers": 13, "vocab_size": 32, "n_whitespaces": 23, "n_words": 26, "nloc": 7, "token_counts": 81}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:module/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/RestartApplicationListenerTests.java#82-88", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/RestartApplicationListenerTests.java", "language": "Java"}, "method": {"name": "disableWithSystemProperty", "qualified_name": "test.java.org.springframework.boot.devtools.restart.RestartApplicationListenerTests#disableWithSystemProperty", "start_line": 82, "end_line": 88, "signature": "disableWithSystemProperty(CapturedOutput output)", "original_code": "@Test\n\tvoid disableWithSystemProperty(CapturedOutput output) {\n\t\tSystem.setProperty(ENABLED_PROPERTY, \"false\");\n\t\ttestInitialize(false, new ImplicitlyEnabledRestartApplicationListener());\n\t\tassertThat(Restarter.getInstance()).hasFieldOrPropertyWithValue(\"enabled\", false);\n\t\tassertThat(output).contains(\"Restart disabled due to System property\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "disableWithSystemProperty", "(", ")", "{", "}", "@", "Test", "CapturedOutput", "output", ";", ";", ";", ";", "System", ".", "setProperty", "testInitialize", ".", "hasFieldOrPropertyWithValue", ".", "contains", "(", "ENABLED_PROPERTY", ",", ")", "(", "false", ",", ")", "assertThat", "(", ",", "false", ")", "assertThat", "(", ")", "\"", "false", "\"", "new", "ImplicitlyEnabledRestartApplicationListener", "(", ")", "\"", "enabled", "\"", "(", "output", ")", "\"", "Restart disabled due to System property", "\"", "(", ")", "Restarter", ".", "getInstance", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 91, "ast_depth": 10, "n_identifiers": 12, "vocab_size": 28, "n_whitespaces": 28, "n_words": 28, "nloc": 7, "token_counts": 61}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:module/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/RestartApplicationListenerTests.java#90-96", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/RestartApplicationListenerTests.java", "language": "Java"}, "method": {"name": "enableWithSystemProperty", "qualified_name": "test.java.org.springframework.boot.devtools.restart.RestartApplicationListenerTests#enableWithSystemProperty", "start_line": 90, "end_line": 96, "signature": "enableWithSystemProperty(CapturedOutput output)", "original_code": "@Test\n\tvoid enableWithSystemProperty(CapturedOutput output) {\n\t\tSystem.setProperty(ENABLED_PROPERTY, \"true\");\n\t\ttestInitialize(false, new ImplicitlyEnabledRestartApplicationListener());\n\t\tassertThat(Restarter.getInstance()).hasFieldOrPropertyWithValue(\"enabled\", true);\n\t\tassertThat(output).contains(\"Restart enabled irrespective of application packaging due to System property\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "enableWithSystemProperty", "(", ")", "{", "}", "@", "Test", "CapturedOutput", "output", ";", ";", ";", ";", "System", ".", "setProperty", "testInitialize", ".", "hasFieldOrPropertyWithValue", ".", "contains", "(", "ENABLED_PROPERTY", ",", ")", "(", "false", ",", ")", "assertThat", "(", ",", "true", ")", "assertThat", "(", ")", "\"", "true", "\"", "new", "ImplicitlyEnabledRestartApplicationListener", "(", ")", "\"", "enabled", "\"", "(", "output", ")", "\"", "Restart enabled irrespective of application packaging due to System property", "\"", "(", ")", "Restarter", ".", "getInstance", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 91, "ast_depth": 10, "n_identifiers": 12, "vocab_size": 29, "n_whitespaces": 32, "n_words": 32, "nloc": 7, "token_counts": 61}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:module/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/RestartApplicationListenerTests.java#98-104", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/RestartApplicationListenerTests.java", "language": "Java"}, "method": {"name": "enableWithSystemPropertyWhenImplicitlyDisabled", "qualified_name": "test.java.org.springframework.boot.devtools.restart.RestartApplicationListenerTests#enableWithSystemPropertyWhenImplicitlyDisabled", "start_line": 98, "end_line": 104, "signature": "enableWithSystemPropertyWhenImplicitlyDisabled(CapturedOutput output)", "original_code": "@Test\n\tvoid enableWithSystemPropertyWhenImplicitlyDisabled(CapturedOutput output) {\n\t\tSystem.setProperty(ENABLED_PROPERTY, \"true\");\n\t\ttestInitialize(false, new RestartApplicationListener());\n\t\tassertThat(Restarter.getInstance()).hasFieldOrPropertyWithValue(\"enabled\", true);\n\t\tassertThat(output).contains(\"Restart enabled irrespective of application packaging due to System property\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "enableWithSystemPropertyWhenImplicitlyDisabled", "(", ")", "{", "}", "@", "Test", "CapturedOutput", "output", ";", ";", ";", ";", "System", ".", "setProperty", "testInitialize", ".", "hasFieldOrPropertyWithValue", ".", "contains", "(", "ENABLED_PROPERTY", ",", ")", "(", "false", ",", ")", "assertThat", "(", ",", "true", ")", "assertThat", "(", ")", "\"", "true", "\"", "new", "RestartApplicationListener", "(", ")", "\"", "enabled", "\"", "(", "output", ")", "\"", "Restart enabled irrespective of application packaging due to System property", "\"", "(", ")", "Restarter", ".", "getInstance", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 91, "ast_depth": 10, "n_identifiers": 12, "vocab_size": 29, "n_whitespaces": 32, "n_words": 32, "nloc": 7, "token_counts": 61}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:module/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/RestartApplicationListenerTests.java#106-111", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/RestartApplicationListenerTests.java", "language": "Java"}, "method": {"name": "implicitlyDisabledInTests", "qualified_name": "test.java.org.springframework.boot.devtools.restart.RestartApplicationListenerTests#implicitlyDisabledInTests", "start_line": 106, "end_line": 111, "signature": "implicitlyDisabledInTests(CapturedOutput output)", "original_code": "@Test\n\tvoid implicitlyDisabledInTests(CapturedOutput output) {\n\t\ttestInitialize(false, new RestartApplicationListener());\n\t\tassertThat(Restarter.getInstance()).hasFieldOrPropertyWithValue(\"enabled\", false);\n\t\tassertThat(output).contains(\"Restart disabled due to context in which it is running\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "implicitlyDisabledInTests", "(", ")", "{", "}", "@", "Test", "CapturedOutput", "output", ";", ";", ";", "testInitialize", ".", "hasFieldOrPropertyWithValue", ".", "contains", "(", "false", ",", ")", "assertThat", "(", ",", "false", ")", "assertThat", "(", ")", "new", "RestartApplicationListener", "(", ")", "\"", "enabled", "\"", "(", "output", ")", "\"", "Restart disabled due to context in which it is running", "\"", "(", ")", "Restarter", ".", "getInstance", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 76, "ast_depth": 10, "n_identifiers": 9, "vocab_size": 25, "n_whitespaces": 28, "n_words": 28, "nloc": 6, "token_counts": 50}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:module/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/RestartApplicationListenerTests.java#113-128", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/RestartApplicationListenerTests.java", "language": "Java"}, "method": {"name": "testInitialize", "qualified_name": "test.java.org.springframework.boot.devtools.restart.RestartApplicationListenerTests#testInitialize", "start_line": 113, "end_line": 128, "signature": "testInitialize(boolean failed, RestartApplicationListener listener)", "original_code": "private void testInitialize(boolean failed, RestartApplicationListener listener) {\n\t\tRestarter.clearInstance();\n\t\tDefaultBootstrapContext bootstrapContext = new DefaultBootstrapContext();\n\t\tSpringApplication application = new SpringApplication();\n\t\tConfigurableApplicationContext context = mock(ConfigurableApplicationContext.class);\n\t\tlistener.onApplicationEvent(new ApplicationStartingEvent(bootstrapContext, application, ARGS));\n\t\tassertThat(Restarter.getInstance()).isNotNull();\n\t\tassertThat(Restarter.getInstance().isFinished()).isFalse();\n\t\tlistener.onApplicationEvent(new ApplicationPreparedEvent(application, ARGS, context));\n\t\tif (failed) {\n\t\t\tlistener.onApplicationEvent(new ApplicationFailedEvent(application, ARGS, context, new RuntimeException()));\n\t\t}\n\t\telse {\n\t\t\tlistener.onApplicationEvent(new ApplicationReadyEvent(application, ARGS, context, null));\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "testInitialize", "private", "(", ",", ")", "{", "}", "boolean", "failed", "RestartApplicationListener", "listener", ";", "DefaultBootstrapContext", ";", "SpringApplication", ";", "ConfigurableApplicationContext", ";", ";", ";", ";", ";", "if", "else", "Restarter", ".", "clearInstance", "bootstrapContext", "=", "application", "=", "context", "=", "listener", ".", "onApplicationEvent", ".", "isNotNull", ".", "isFalse", "listener", ".", "onApplicationEvent", "(", "failed", ")", "{", "}", "{", "}", "(", ")", "new", "DefaultBootstrapContext", "new", "SpringApplication", "mock", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "(", ")", ";", ";", "(", ")", "(", ")", "(", ")", "new", "ApplicationStartingEvent", "(", ")", "(", ")", "new", "ApplicationPreparedEvent", "listener", ".", "onApplicationEvent", "listener", ".", "onApplicationEvent", "ConfigurableApplicationContext", ".", "class", "(", "bootstrapContext", ",", "application", ",", "ARGS", ")", "Restarter", ".", "getInstance", ".", "isFinished", "(", "application", ",", "ARGS", ",", "context", ")", "(", ")", "(", ")", "(", ")", "Restarter", ".", "getInstance", "(", ")", "new", "ApplicationFailedEvent", "new", "ApplicationReadyEvent", "(", ")", "(", "application", ",", "ARGS", ",", "context", ",", ")", "(", "application", ",", "ARGS", ",", "context", ",", "null", ")", "new", "RuntimeException", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 215, "ast_depth": 13, "n_identifiers": 16, "vocab_size": 41, "n_whitespaces": 81, "n_words": 65, "nloc": 16, "token_counts": 150}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:module/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/RestartApplicationListenerTests.java#132-135", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/RestartApplicationListenerTests.java", "language": "Java"}, "method": {"name": "implicitlyEnableRestart", "qualified_name": "test.java.org.springframework.boot.devtools.restart.RestartApplicationListenerTests#implicitlyEnableRestart", "start_line": 132, "end_line": 135, "signature": "implicitlyEnableRestart()", "original_code": "@Override\n\t\tboolean implicitlyEnableRestart() {\n\t\t\treturn true;\n\t\t}", "doc_comment": ""}, "code_tokens": ["boolean", "implicitlyEnableRestart", "(", ")", "{", "}", "@", "Override", "return", "true", ";"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 18, "ast_depth": 5, "n_identifiers": 2, "vocab_size": 11, "n_whitespaces": 13, "n_words": 5, "nloc": 4, "token_counts": 11}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:smoke-test/spring-boot-smoke-test-bootstrap-registry/src/main/java/smoketest/bootstrapregistry/external/svn/SubversionBootstrap.java#42-46", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "smoke-test/spring-boot-smoke-test-bootstrap-registry/src/main/java/smoketest/bootstrapregistry/external/svn/SubversionBootstrap.java", "language": "Java"}, "method": {"name": "withCustomClient", "qualified_name": "smoketest.bootstrapregistry.external.svn.SubversionBootstrap#withCustomClient", "start_line": 42, "end_line": 46, "signature": "withCustomClient(\n\t\t\tFunction<@Nullable SubversionServerCertificate, SubversionClient> clientFactory)", "original_code": "public static BootstrapRegistryInitializer withCustomClient(\n\t\t\tFunction<@Nullable SubversionServerCertificate, SubversionClient> clientFactory) {\n\t\treturn (registry) -> registry.register(SubversionClient.class,\n\t\t\t\t(bootstrapContext) -> createSubversionClient(bootstrapContext, clientFactory));\n\t}", "doc_comment": "/**\n\t * Return a {@link BootstrapRegistryInitializer} for the given client factory.\n\t * @param clientFactory the client factory\n\t * @return a {@link BootstrapRegistryInitializer} instance\n\t */"}, "code_tokens": ["BootstrapRegistryInitializer", "withCustomClient", "public", "static", "(", ")", "{", "}", "clientFactory", "return", ";", "Function", "->", "<", ",", "SubversionClient", ">", "(", "registry", ")", "registry", ".", "register", "SubversionServerCertificate", "(", ",", ")", "@", "Nullable", "SubversionClient", ".", "class", "->", "(", "bootstrapContext", ")", "createSubversionClient", "(", "bootstrapContext", ",", "clientFactory", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 62, "ast_depth": 11, "n_identifiers": 7, "vocab_size": 26, "n_whitespaces": 27, "n_words": 19, "nloc": 5, "token_counts": 42}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:smoke-test/spring-boot-smoke-test-bootstrap-registry/src/main/java/smoketest/bootstrapregistry/external/svn/SubversionBootstrap.java#48-51", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "smoke-test/spring-boot-smoke-test-bootstrap-registry/src/main/java/smoketest/bootstrapregistry/external/svn/SubversionBootstrap.java", "language": "Java"}, "method": {"name": "createSubversionClient", "qualified_name": "smoketest.bootstrapregistry.external.svn.SubversionBootstrap#createSubversionClient", "start_line": 48, "end_line": 51, "signature": "createSubversionClient(BootstrapContext bootstrapContext,\n\t\t\tFunction<@Nullable SubversionServerCertificate, SubversionClient> clientFactory)", "original_code": "private static SubversionClient createSubversionClient(BootstrapContext bootstrapContext,\n\t\t\tFunction<@Nullable SubversionServerCertificate, SubversionClient> clientFactory) {\n\t\treturn clientFactory.apply(bootstrapContext.get(SubversionServerCertificate.class));\n\t}", "doc_comment": ""}, "code_tokens": ["SubversionClient", "createSubversionClient", "private", "static", "(", ",", ")", "{", "}", "BootstrapContext", "bootstrapContext", "clientFactory", "return", ";", "Function", "clientFactory", ".", "apply", "<", ",", "SubversionClient", ">", "(", ")", "SubversionServerCertificate", "bootstrapContext", ".", "get", "@", "Nullable", "(", ")", "SubversionServerCertificate", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 52, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 24, "n_whitespaces": 18, "n_words": 18, "nloc": 4, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:smoke-test/spring-boot-smoke-test-bootstrap-registry/src/main/java/smoketest/bootstrapregistry/external/svn/SubversionConfigDataLoader.java#49-51", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "smoke-test/spring-boot-smoke-test-bootstrap-registry/src/main/java/smoketest/bootstrapregistry/external/svn/SubversionConfigDataLoader.java", "language": "Java"}, "method": {"name": "createSubversionClient", "qualified_name": "smoketest.bootstrapregistry.external.svn.SubversionConfigDataLoader#createSubversionClient", "start_line": 49, "end_line": 51, "signature": "createSubversionClient(BootstrapContext bootstrapContext)", "original_code": "private SubversionClient createSubversionClient(BootstrapContext bootstrapContext) {\n\t\treturn new SubversionClient(bootstrapContext.get(SubversionServerCertificate.class));\n\t}", "doc_comment": ""}, "code_tokens": ["SubversionClient", "createSubversionClient", "private", "(", ")", "{", "}", "BootstrapContext", "bootstrapContext", "return", ";", "new", "SubversionClient", "(", ")", "bootstrapContext", ".", "get", "(", ")", "SubversionServerCertificate", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 35, "ast_depth": 10, "n_identifiers": 3, "vocab_size": 16, "n_whitespaces": 11, "n_words": 12, "nloc": 3, "token_counts": 23}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:smoke-test/spring-boot-smoke-test-bootstrap-registry/src/main/java/smoketest/bootstrapregistry/external/svn/SubversionConfigDataLoader.java#53-63", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "smoke-test/spring-boot-smoke-test-bootstrap-registry/src/main/java/smoketest/bootstrapregistry/external/svn/SubversionConfigDataLoader.java", "language": "Java"}, "method": {"name": "load", "qualified_name": "smoketest.bootstrapregistry.external.svn.SubversionConfigDataLoader#load", "start_line": 53, "end_line": 63, "signature": "load(ConfigDataLoaderContext context, SubversionConfigDataResource resource)", "original_code": "@Override\n\tpublic ConfigData load(ConfigDataLoaderContext context, SubversionConfigDataResource resource)\n\t\t\tthrows IOException, ConfigDataLocationNotFoundException {\n\t\tcontext.getBootstrapContext()\n\t\t\t.registerIfAbsent(SubversionServerCertificate.class, InstanceSupplier.of(resource.getServerCertificate()));\n\t\tSubversionClient client = context.getBootstrapContext().get(SubversionClient.class);\n\t\tAssert.state(client != null, \"'client' must not be null\");\n\t\tString loaded = client.load(resource.getLocation());\n\t\tPropertySource<?> propertySource = new MapPropertySource(\"svn\", Collections.singletonMap(\"svn\", loaded));\n\t\treturn new ConfigData(Collections.singleton(propertySource));\n\t}", "doc_comment": ""}, "code_tokens": ["ConfigData", "load", "public", "(", ",", ")", "throws", "IOException", ",", "ConfigDataLocationNotFoundException", "{", "}", "@", "Override", "ConfigDataLoaderContext", "context", "SubversionConfigDataResource", "resource", ";", "SubversionClient", ";", ";", "String", ";", ";", "return", ";", ".", "registerIfAbsent", "client", "=", "Assert", ".", "state", "loaded", "=", "PropertySource", "propertySource", "=", "new", "ConfigData", "context", ".", "getBootstrapContext", "(", ",", ")", ".", "get", "(", ",", ")", "client", ".", "load", "<", ">", "new", "MapPropertySource", "(", ")", "(", ")", "SubversionServerCertificate", ".", "class", "InstanceSupplier", ".", "of", "context", ".", "getBootstrapContext", "(", ")", "client", "!=", "null", "\"", "'client' must not be null", "\"", "(", ")", "?", "(", ",", ")", "Collections", ".", "singleton", "(", ")", "(", ")", "SubversionClient", ".", "class", "resource", ".", "getLocation", "\"", "svn", "\"", "Collections", ".", "singletonMap", "(", "propertySource", ")", "resource", ".", "getServerCertificate", "(", ")", "(", ",", "loaded", ")", "(", ")", "\"", "svn", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 175, "ast_depth": 11, "n_identifiers": 19, "vocab_size": 51, "n_whitespaces": 60, "n_words": 57, "nloc": 11, "token_counts": 122}}
{"dataset_split": "train", "id": "spring-boot@4ebf09a:smoke-test/spring-boot-smoke-test-bootstrap-registry/src/main/java/smoketest/bootstrapregistry/external/svn/SubversionConfigDataLoader.java#65-69", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4ebf09ad12166cb25bef6de7a3532007a006cb37", "license": "apache-2.0"}, "file": {"path": "smoke-test/spring-boot-smoke-test-bootstrap-registry/src/main/java/smoketest/bootstrapregistry/external/svn/SubversionConfigDataLoader.java", "language": "Java"}, "method": {"name": "onBootstrapContextClosed", "qualified_name": "smoketest.bootstrapregistry.external.svn.SubversionConfigDataLoader#onBootstrapContextClosed", "start_line": 65, "end_line": 69, "signature": "onBootstrapContextClosed(BootstrapContextClosedEvent event)", "original_code": "private static void onBootstrapContextClosed(BootstrapContextClosedEvent event) {\n\t\tSubversionClient subversionClient = event.getBootstrapContext().get(SubversionClient.class);\n\t\tAssert.state(subversionClient != null, \"'subversionClient' must not be null\");\n\t\tevent.getApplicationContext().getBeanFactory().registerSingleton(\"subversionClient\", subversionClient);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "onBootstrapContextClosed", "private", "static", "(", ")", "{", "}", "BootstrapContextClosedEvent", "event", "SubversionClient", ";", ";", ";", "subversionClient", "=", "Assert", ".", "state", ".", "registerSingleton", ".", "get", "(", ",", ")", ".", "getBeanFactory", "(", ",", "subversionClient", ")", "event", ".", "getBootstrapContext", "(", ")", "subversionClient", "!=", "null", "\"", "'subversionClient' must not be null", "\"", "event", ".", "getApplicationContext", "(", ")", "\"", "subversionClient", "\"", "(", ")", "SubversionClient", ".", "class", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 84, "ast_depth": 9, "n_identifiers": 10, "vocab_size": 28, "n_whitespaces": 27, "n_words": 28, "nloc": 5, "token_counts": 58}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/EnvironmentPostProcessor.java#59-59", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/EnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "postProcessEnvironment", "qualified_name": "org.springframework.boot.EnvironmentPostProcessor#postProcessEnvironment", "start_line": 59, "end_line": 59, "signature": "postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application)", "original_code": "void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application);", "doc_comment": "/**\n\t * Post-process the given {@code environment}.\n\t * @param environment the environment to post-process\n\t * @param application the application to which the environment belongs\n\t */"}, "code_tokens": ["void", "postProcessEnvironment", ";", "(", ",", ")", "ConfigurableEnvironment", "environment", "SpringApplication", "application"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 15, "ast_depth": 5, "n_identifiers": 3, "vocab_size": 10, "n_whitespaces": 4, "n_words": 6, "nloc": 1, "token_counts": 10}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/cloud/CloudFoundryVcapEnvironmentPostProcessor.java#109-111", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/cloud/CloudFoundryVcapEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "setOrder", "qualified_name": "org.springframework.boot.cloud.CloudFoundryVcapEnvironmentPostProcessor#setOrder", "start_line": 109, "end_line": 111, "signature": "setOrder(int order)", "original_code": "public void setOrder(int order) {\n\t\tthis.order = order;\n\t}", "doc_comment": ""}, "code_tokens": ["void", "setOrder", "public", "(", ")", "{", "}", "order", ";", "int", "=", "order", "this", ".", "order"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 25, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 13, "n_whitespaces": 11, "n_words": 8, "nloc": 3, "token_counts": 15}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/cloud/CloudFoundryVcapEnvironmentPostProcessor.java#113-116", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/cloud/CloudFoundryVcapEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "getOrder", "qualified_name": "org.springframework.boot.cloud.CloudFoundryVcapEnvironmentPostProcessor#getOrder", "start_line": 113, "end_line": 116, "signature": "getOrder()", "original_code": "@Override\n\tpublic int getOrder() {\n\t\treturn this.order;\n\t}", "doc_comment": ""}, "code_tokens": ["getOrder", "public", "int", "(", ")", "{", "}", "@", "Override", "return", ";", "this", ".", "order"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 23, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 11, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/cloud/CloudFoundryVcapEnvironmentPostProcessor.java#118-134", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/cloud/CloudFoundryVcapEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "postProcessEnvironment", "qualified_name": "org.springframework.boot.cloud.CloudFoundryVcapEnvironmentPostProcessor#postProcessEnvironment", "start_line": 118, "end_line": 134, "signature": "postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application)", "original_code": "@Override\n\tpublic void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {\n\t\tif (CloudPlatform.CLOUD_FOUNDRY.isActive(environment)) {\n\t\t\tProperties properties = new Properties();\n\t\t\tJsonParser jsonParser = JsonParserFactory.getJsonParser();\n\t\t\taddWithPrefix(properties, getPropertiesFromApplication(environment, jsonParser), \"vcap.application.\");\n\t\t\taddWithPrefix(properties, getPropertiesFromServices(environment, jsonParser), \"vcap.services.\");\n\t\t\tMutablePropertySources propertySources = environment.getPropertySources();\n\t\t\tPropertiesPropertySource vcapSource = new PropertiesPropertySource(\"vcap\", properties);\n\t\t\tif (propertySources.contains(CommandLinePropertySource.COMMAND_LINE_PROPERTY_SOURCE_NAME)) {\n\t\t\t\tpropertySources.addAfter(CommandLinePropertySource.COMMAND_LINE_PROPERTY_SOURCE_NAME, vcapSource);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tpropertySources.addFirst(vcapSource);\n\t\t\t}\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "postProcessEnvironment", "public", "(", ",", ")", "{", "}", "@", "Override", "ConfigurableEnvironment", "environment", "SpringApplication", "application", "if", "(", ")", "{", "}", ".", "isActive", "Properties", ";", "JsonParser", ";", ";", ";", "MutablePropertySources", ";", "PropertiesPropertySource", ";", "if", "else", "CloudPlatform", ".", "CLOUD_FOUNDRY", "(", "environment", ")", "properties", "=", "jsonParser", "=", "addWithPrefix", "addWithPrefix", "propertySources", "=", "vcapSource", "=", "(", ")", "{", "}", "{", "}", "new", "Properties", "JsonParserFactory", ".", "getJsonParser", "(", "properties", ",", ",", ")", "(", "properties", ",", ",", ")", "environment", ".", "getPropertySources", "new", "PropertiesPropertySource", "propertySources", ".", "contains", ";", ";", "(", ")", "(", ")", "getPropertiesFromApplication", "\"", "vcap.application.", "\"", "getPropertiesFromServices", "\"", "vcap.services.", "\"", "(", ")", "(", ",", "properties", ")", "(", ")", "propertySources", ".", "addAfter", "propertySources", ".", "addFirst", "(", "environment", ",", "jsonParser", ")", "(", "environment", ",", "jsonParser", ")", "\"", "vcap", "\"", "CommandLinePropertySource", ".", "COMMAND_LINE_PROPERTY_SOURCE_NAME", "(", ",", "vcapSource", ")", "(", "vcapSource", ")", "CommandLinePropertySource", ".", "COMMAND_LINE_PROPERTY_SOURCE_NAME"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 189, "ast_depth": 12, "n_identifiers": 22, "vocab_size": 46, "n_whitespaces": 93, "n_words": 59, "nloc": 17, "token_counts": 132}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/cloud/CloudFoundryVcapEnvironmentPostProcessor.java#136-141", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/cloud/CloudFoundryVcapEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "addWithPrefix", "qualified_name": "org.springframework.boot.cloud.CloudFoundryVcapEnvironmentPostProcessor#addWithPrefix", "start_line": 136, "end_line": 141, "signature": "addWithPrefix(Properties properties, Properties other, String prefix)", "original_code": "private void addWithPrefix(Properties properties, Properties other, String prefix) {\n\t\tfor (String key : other.stringPropertyNames()) {\n\t\t\tString prefixed = prefix + key;\n\t\t\tproperties.setProperty(prefixed, other.getProperty(key));\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "addWithPrefix", "private", "(", ",", ",", ")", "{", "}", "Properties", "properties", "Properties", "other", "String", "prefix", "for", "(", "String", "key", ":", ")", "other", ".", "stringPropertyNames", "{", "}", "(", ")", "String", ";", ";", "prefixed", "=", "properties", ".", "setProperty", "prefix", "+", "key", "(", "prefixed", ",", ")", "other", ".", "getProperty", "(", "key", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 69, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 24, "n_whitespaces": 35, "n_words": 24, "nloc": 6, "token_counts": 49}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/cloud/CloudFoundryVcapEnvironmentPostProcessor.java#143-154", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/cloud/CloudFoundryVcapEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "getPropertiesFromApplication", "qualified_name": "org.springframework.boot.cloud.CloudFoundryVcapEnvironmentPostProcessor#getPropertiesFromApplication", "start_line": 143, "end_line": 154, "signature": "getPropertiesFromApplication(Environment environment, JsonParser parser)", "original_code": "private Properties getPropertiesFromApplication(Environment environment, JsonParser parser) {\n\t\tProperties properties = new Properties();\n\t\ttry {\n\t\t\tString property = environment.getProperty(\"VCAP_APPLICATION\", \"{}\");\n\t\t\tMap<String, Object> map = parser.parseMap(property);\n\t\t\textractPropertiesFromApplication(properties, map);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tthis.logger.error(\"Could not parse VCAP_APPLICATION\", ex);\n\t\t}\n\t\treturn properties;\n\t}", "doc_comment": ""}, "code_tokens": ["Properties", "getPropertiesFromApplication", "private", "(", ",", ")", "{", "}", "Environment", "environment", "JsonParser", "parser", "Properties", ";", "try", "return", "properties", ";", "properties", "=", "{", "}", "catch", "(", ")", "new", "Properties", "String", ";", ";", ";", "ex", "{", "}", "(", ")", "property", "=", "Map", "map", "=", "extractPropertiesFromApplication", "Exception", ";", "environment", ".", "getProperty", "<", "String", ",", "Object", ">", "parser", ".", "parseMap", "(", "properties", ",", "map", ")", ".", "error", "(", ",", ")", "(", "property", ")", "this", ".", "logger", "(", ",", "ex", ")", "\"", "VCAP_APPLICATION", "\"", "\"", "{}", "\"", "\"", "Could not parse VCAP_APPLICATION", "\""], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 122, "ast_depth": 11, "n_identifiers": 12, "vocab_size": 39, "n_whitespaces": 64, "n_words": 40, "nloc": 12, "token_counts": 84}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/cloud/CloudFoundryVcapEnvironmentPostProcessor.java#156-167", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/cloud/CloudFoundryVcapEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "getPropertiesFromServices", "qualified_name": "org.springframework.boot.cloud.CloudFoundryVcapEnvironmentPostProcessor#getPropertiesFromServices", "start_line": 156, "end_line": 167, "signature": "getPropertiesFromServices(Environment environment, JsonParser parser)", "original_code": "private Properties getPropertiesFromServices(Environment environment, JsonParser parser) {\n\t\tProperties properties = new Properties();\n\t\ttry {\n\t\t\tString property = environment.getProperty(\"VCAP_SERVICES\", \"{}\");\n\t\t\tMap<String, Object> map = parser.parseMap(property);\n\t\t\textractPropertiesFromServices(properties, map);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tthis.logger.error(\"Could not parse VCAP_SERVICES\", ex);\n\t\t}\n\t\treturn properties;\n\t}", "doc_comment": ""}, "code_tokens": ["Properties", "getPropertiesFromServices", "private", "(", ",", ")", "{", "}", "Environment", "environment", "JsonParser", "parser", "Properties", ";", "try", "return", "properties", ";", "properties", "=", "{", "}", "catch", "(", ")", "new", "Properties", "String", ";", ";", ";", "ex", "{", "}", "(", ")", "property", "=", "Map", "map", "=", "extractPropertiesFromServices", "Exception", ";", "environment", ".", "getProperty", "<", "String", ",", "Object", ">", "parser", ".", "parseMap", "(", "properties", ",", "map", ")", ".", "error", "(", ",", ")", "(", "property", ")", "this", ".", "logger", "(", ",", "ex", ")", "\"", "VCAP_SERVICES", "\"", "\"", "{}", "\"", "\"", "Could not parse VCAP_SERVICES", "\""], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 122, "ast_depth": 11, "n_identifiers": 12, "vocab_size": 39, "n_whitespaces": 64, "n_words": 40, "nloc": 12, "token_counts": 84}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/cloud/CloudFoundryVcapEnvironmentPostProcessor.java#169-173", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/cloud/CloudFoundryVcapEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "extractPropertiesFromApplication", "qualified_name": "org.springframework.boot.cloud.CloudFoundryVcapEnvironmentPostProcessor#extractPropertiesFromApplication", "start_line": 169, "end_line": 173, "signature": "extractPropertiesFromApplication(Properties properties, @Nullable Map<String, Object> map)", "original_code": "private void extractPropertiesFromApplication(Properties properties, @Nullable Map<String, Object> map) {\n\t\tif (map != null) {\n\t\t\tflatten(properties, map, \"\");\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "extractPropertiesFromApplication", "private", "(", ",", ")", "{", "}", "Properties", "properties", "map", "if", "Map", "(", ")", "{", "}", "@", "Nullable", "<", "String", ",", "Object", ">", "map", "!=", "null", ";", "flatten", "(", "properties", ",", "map", ",", ")", "\"", "\""], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 56, "ast_depth": 10, "n_identifiers": 5, "vocab_size": 24, "n_whitespaces": 26, "n_words": 16, "nloc": 5, "token_counts": 37}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/cloud/CloudFoundryVcapEnvironmentPostProcessor.java#175-191", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/cloud/CloudFoundryVcapEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "extractPropertiesFromServices", "qualified_name": "org.springframework.boot.cloud.CloudFoundryVcapEnvironmentPostProcessor#extractPropertiesFromServices", "start_line": 175, "end_line": 191, "signature": "extractPropertiesFromServices(Properties properties, @Nullable Map<String, Object> map)", "original_code": "private void extractPropertiesFromServices(Properties properties, @Nullable Map<String, Object> map) {\n\t\tif (map != null) {\n\t\t\tfor (Object services : map.values()) {\n\t\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\t\tList<Object> list = (List<Object>) services;\n\t\t\t\tfor (Object object : list) {\n\t\t\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\t\t\tMap<String, Object> service = (Map<String, Object>) object;\n\t\t\t\t\tString key = (String) service.get(\"name\");\n\t\t\t\t\tif (key == null) {\n\t\t\t\t\t\tkey = (String) service.get(\"label\");\n\t\t\t\t\t}\n\t\t\t\t\tflatten(properties, service, key);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "extractPropertiesFromServices", "private", "(", ",", ")", "{", "}", "Properties", "properties", "map", "if", "Map", "(", ")", "{", "}", "@", "Nullable", "<", "String", ",", "Object", ">", "map", "!=", "null", "for", "(", "Object", "services", ":", ")", "map", ".", "values", "{", "}", "(", ")", ";", "for", "(", "Object", "object", ":", "list", ")", "List", "list", "=", "{", "}", "@", "SuppressWarnings", "<", "Object", ">", "(", ")", "services", ";", "String", ";", "if", ";", "(", ")", "List", "Map", "service", "=", "key", "=", "(", ")", "{", "}", "flatten", "\"", "unchecked", "\"", "<", "Object", ">", "@", "SuppressWarnings", "<", "String", ",", "Object", ">", "(", ")", "object", "(", "String", ")", "key", "==", "null", ";", "(", "properties", ",", "service", ",", "key", ")", "(", ")", "Map", "service", ".", "get", "key", "=", "\"", "unchecked", "\"", "<", "String", ",", "Object", ">", "(", ")", "(", "String", ")", "\"", "name", "\"", "service", ".", "get", "(", ")", "\"", "label", "\""], "metrics": {"cyclomatic_complexity": 5, "n_ast_nodes": 203, "ast_depth": 18, "n_identifiers": 13, "vocab_size": 41, "n_whitespaces": 124, "n_words": 58, "nloc": 17, "token_counts": 141}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/cloud/CloudFoundryVcapEnvironmentPostProcessor.java#193-220", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/cloud/CloudFoundryVcapEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "flatten", "qualified_name": "org.springframework.boot.cloud.CloudFoundryVcapEnvironmentPostProcessor#flatten", "start_line": 193, "end_line": 220, "signature": "flatten(Properties properties, Map<String, Object> input, @Nullable String path)", "original_code": "@SuppressWarnings(\"unchecked\")\n\tprivate void flatten(Properties properties, Map<String, Object> input, @Nullable String path) {\n\t\tinput.forEach((key, value) -> {\n\t\t\tString name = getPropertyName(path, key);\n\t\t\tif (value instanceof Map) {\n\t\t\t\t// Need a compound key\n\t\t\t\tflatten(properties, (Map<String, Object>) value, name);\n\t\t\t}\n\t\t\telse if (value instanceof Collection<?> collection) {\n\t\t\t\t// Need a compound key\n\t\t\t\tproperties.put(name, StringUtils.collectionToCommaDelimitedString(collection));\n\t\t\t\tint count = 0;\n\t\t\t\tfor (Object item : collection) {\n\t\t\t\t\tString itemKey = \"[\" + (count++) + \"]\";\n\t\t\t\t\tflatten(properties, Collections.singletonMap(itemKey, item), name);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (value instanceof String) {\n\t\t\t\tproperties.put(name, value);\n\t\t\t}\n\t\t\telse if (value instanceof Number || value instanceof Boolean) {\n\t\t\t\tproperties.put(name, value.toString());\n\t\t\t}\n\t\t\telse {\n\t\t\t\tproperties.put(name, (value != null) ? value : \"\");\n\t\t\t}\n\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "flatten", "private", "(", ",", ",", ")", "{", "}", "@", "SuppressWarnings", "Properties", "properties", "input", "String", "path", ";", "(", ")", "Map", "input", ".", "forEach", "\"", "unchecked", "\"", "<", "String", ",", "Object", ">", "@", "Nullable", "(", ")", "->", "(", "key", ",", "value", ")", "{", "}", "String", ";", "if", "else", "name", "=", "(", ")", "{", "// Need a compound key", "}", "if", "else", "getPropertyName", "value", "instanceof", "Map", ";", "(", ")", "{", "// Need a compound key", "}", "if", "else", "(", "path", ",", "key", ")", "flatten", "value", "instanceof", "collection", ";", ";", "for", "(", "Object", "item", ":", "collection", ")", "(", ")", "{", "}", "if", "else", "(", "properties", ",", ",", "name", ")", "Collection", "properties", ".", "put", "int", "count", "=", "0", "{", "}", "value", "instanceof", "String", ";", "(", ")", "{", "}", "{", "}", "(", ")", "value", "<", ">", "(", "name", ",", ")", "String", ";", ";", "properties", ".", "put", "||", ";", ";", "Map", "?", "StringUtils", ".", "collectionToCommaDelimitedString", "itemKey", "=", "flatten", "(", "name", ",", "value", ")", "value", "instanceof", "Number", "value", "instanceof", "Boolean", "properties", ".", "put", "properties", ".", "put", "<", "String", ",", "Object", ">", "(", "collection", ")", "+", "(", "properties", ",", ",", "name", ")", "(", "name", ",", ")", "(", "name", ",", ")", "+", "\"", "]", "\"", "Collections", ".", "singletonMap", "value", ".", "toString", "?", "value", ":", "\"", "[", "\"", "(", ")", "(", "itemKey", ",", "item", ")", "(", ")", "(", ")", "\"", "\"", "count", "++", "value", "!=", "null"], "metrics": {"cyclomatic_complexity": 7, "n_ast_nodes": 309, "ast_depth": 20, "n_identifiers": 21, "vocab_size": 60, "n_whitespaces": 198, "n_words": 100, "nloc": 28, "token_counts": 218}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/cloud/CloudFoundryVcapEnvironmentPostProcessor.java#222-230", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/cloud/CloudFoundryVcapEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "getPropertyName", "qualified_name": "org.springframework.boot.cloud.CloudFoundryVcapEnvironmentPostProcessor#getPropertyName", "start_line": 222, "end_line": 230, "signature": "getPropertyName(@Nullable String path, String key)", "original_code": "private String getPropertyName(@Nullable String path, String key) {\n\t\tif (!StringUtils.hasText(path)) {\n\t\t\treturn key;\n\t\t}\n\t\tif (key.startsWith(\"[\")) {\n\t\t\treturn path + key;\n\t\t}\n\t\treturn path + \".\" + key;\n\t}", "doc_comment": ""}, "code_tokens": ["String", "getPropertyName", "private", "(", ",", ")", "{", "}", "String", "path", "String", "key", "if", "if", "return", ";", "(", ")", "{", "}", "(", ")", "{", "}", "+", "key", "@", "Nullable", "!", "return", "key", ";", "key", ".", "startsWith", "return", ";", "path", "+", "StringUtils", ".", "hasText", "(", ")", "path", "+", "key", "\"", ".", "\"", "(", "path", ")", "\"", "[", "\""], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 84, "ast_depth": 9, "n_identifiers": 7, "vocab_size": 23, "n_whitespaces": 45, "n_words": 23, "nloc": 9, "token_counts": 56}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/context/config/AnsiOutputApplicationListener.java#40-47", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/AnsiOutputApplicationListener.java", "language": "Java"}, "method": {"name": "onApplicationEvent", "qualified_name": "org.springframework.boot.context.config.AnsiOutputApplicationListener#onApplicationEvent", "start_line": 40, "end_line": 47, "signature": "onApplicationEvent(ApplicationEnvironmentPreparedEvent event)", "original_code": "@Override\n\tpublic void onApplicationEvent(ApplicationEnvironmentPreparedEvent event) {\n\t\tConfigurableEnvironment environment = event.getEnvironment();\n\t\tBinder.get(environment)\n\t\t\t.bind(\"spring.output.ansi.enabled\", AnsiOutput.Enabled.class)\n\t\t\t.ifBound(AnsiOutput::setEnabled);\n\t\tAnsiOutput.setConsoleAvailable(environment.getProperty(\"spring.output.ansi.console-available\", Boolean.class));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "onApplicationEvent", "public", "(", ")", "{", "}", "@", "Override", "ApplicationEnvironmentPreparedEvent", "event", "ConfigurableEnvironment", ";", ";", ";", "environment", "=", ".", "ifBound", "AnsiOutput", ".", "setConsoleAvailable", "event", ".", "getEnvironment", ".", "bind", "(", ")", "(", ")", "(", ")", "Binder", ".", "get", "(", ",", ")", "AnsiOutput", "::", "setEnabled", "environment", ".", "getProperty", "(", "environment", ")", "\"", "spring.output.ansi.enabled", "\"", ".", "class", "(", ",", ")", "AnsiOutput", ".", "Enabled", "\"", "spring.output.ansi.console-available", "\"", "Boolean", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 94, "ast_depth": 10, "n_identifiers": 13, "vocab_size": 33, "n_whitespaces": 30, "n_words": 35, "nloc": 8, "token_counts": 65}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/context/config/AnsiOutputApplicationListener.java#49-53", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/AnsiOutputApplicationListener.java", "language": "Java"}, "method": {"name": "getOrder", "qualified_name": "org.springframework.boot.context.config.AnsiOutputApplicationListener#getOrder", "start_line": 49, "end_line": 53, "signature": "getOrder()", "original_code": "@Override\n\tpublic int getOrder() {\n\t\t// Apply after EnvironmentPostProcessorApplicationListener\n\t\treturn EnvironmentPostProcessorApplicationListener.DEFAULT_ORDER + 1;\n\t}", "doc_comment": ""}, "code_tokens": ["getOrder", "public", "int", "(", ")", "{", "// Apply after EnvironmentPostProcessorApplicationListener", "}", "@", "Override", "return", ";", "+", "1", "EnvironmentPostProcessorApplicationListener", ".", "DEFAULT_ORDER"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 27, "ast_depth": 7, "n_identifiers": 4, "vocab_size": 17, "n_whitespaces": 19, "n_words": 11, "nloc": 5, "token_counts": 17}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessor.java#83-86", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "getOrder", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentPostProcessor#getOrder", "start_line": 83, "end_line": 86, "signature": "getOrder()", "original_code": "@Override\n\tpublic int getOrder() {\n\t\treturn ORDER;\n\t}", "doc_comment": ""}, "code_tokens": ["getOrder", "public", "int", "(", ")", "{", "}", "@", "Override", "return", "ORDER", ";"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 20, "ast_depth": 5, "n_identifiers": 3, "vocab_size": 12, "n_whitespaces": 11, "n_words": 6, "nloc": 4, "token_counts": 12}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessor.java#88-91", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "postProcessEnvironment", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentPostProcessor#postProcessEnvironment", "start_line": 88, "end_line": 91, "signature": "postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application)", "original_code": "@Override\n\tpublic void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {\n\t\tpostProcessEnvironment(environment, application.getResourceLoader(), application.getAdditionalProfiles());\n\t}", "doc_comment": ""}, "code_tokens": ["void", "postProcessEnvironment", "public", "(", ",", ")", "{", "}", "@", "Override", "ConfigurableEnvironment", "environment", "SpringApplication", "application", ";", "postProcessEnvironment", "(", "environment", ",", ",", ")", "application", ".", "getResourceLoader", "application", ".", "getAdditionalProfiles", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 46, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 18, "n_whitespaces": 15, "n_words": 14, "nloc": 4, "token_counts": 31}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessor.java#93-98", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "postProcessEnvironment", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentPostProcessor#postProcessEnvironment", "start_line": 93, "end_line": 98, "signature": "postProcessEnvironment(ConfigurableEnvironment environment, @Nullable ResourceLoader resourceLoader,\n\t\t\tCollection<String> additionalProfiles)", "original_code": "void postProcessEnvironment(ConfigurableEnvironment environment, @Nullable ResourceLoader resourceLoader,\n\t\t\tCollection<String> additionalProfiles) {\n\t\tthis.logger.trace(\"Post-processing environment to add config data\");\n\t\tresourceLoader = (resourceLoader != null) ? resourceLoader : new DefaultResourceLoader();\n\t\tgetConfigDataEnvironment(environment, resourceLoader, additionalProfiles).processAndApply();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "postProcessEnvironment", "(", ",", ",", ")", "{", "}", "ConfigurableEnvironment", "environment", "ResourceLoader", "resourceLoader", "additionalProfiles", ";", ";", ";", "Collection", ".", "trace", "resourceLoader", "=", ".", "processAndApply", "@", "Nullable", "<", "String", ">", "this", ".", "logger", "(", ")", "?", "resourceLoader", ":", "getConfigDataEnvironment", "(", ")", "\"", "Post-processing environment to add config data", "\"", "(", ")", "new", "DefaultResourceLoader", "(", "environment", ",", "resourceLoader", ",", "additionalProfiles", ")", "resourceLoader", "!=", "null", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 86, "ast_depth": 9, "n_identifiers": 9, "vocab_size": 34, "n_whitespaces": 38, "n_words": 31, "nloc": 6, "token_counts": 58}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessor.java#100-104", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "getConfigDataEnvironment", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentPostProcessor#getConfigDataEnvironment", "start_line": 100, "end_line": 104, "signature": "getConfigDataEnvironment(ConfigurableEnvironment environment, ResourceLoader resourceLoader,\n\t\t\tCollection<String> additionalProfiles)", "original_code": "ConfigDataEnvironment getConfigDataEnvironment(ConfigurableEnvironment environment, ResourceLoader resourceLoader,\n\t\t\tCollection<String> additionalProfiles) {\n\t\treturn new ConfigDataEnvironment(this.logFactory, this.bootstrapContext, environment, resourceLoader,\n\t\t\t\tadditionalProfiles, this.environmentUpdateListener);\n\t}", "doc_comment": ""}, "code_tokens": ["ConfigDataEnvironment", "getConfigDataEnvironment", "(", ",", ",", ")", "{", "}", "ConfigurableEnvironment", "environment", "ResourceLoader", "resourceLoader", "additionalProfiles", "return", ";", "Collection", "new", "ConfigDataEnvironment", "<", "String", ">", "(", ",", ",", "environment", ",", "resourceLoader", ",", "additionalProfiles", ",", ")", "this", ".", "logFactory", "this", ".", "bootstrapContext", "this", ".", "environmentUpdateListener"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 55, "ast_depth": 8, "n_identifiers": 7, "vocab_size": 24, "n_whitespaces": 26, "n_words": 21, "nloc": 5, "token_counts": 40}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessor.java#112-114", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "applyTo", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentPostProcessor#applyTo", "start_line": 112, "end_line": 114, "signature": "applyTo(ConfigurableEnvironment environment)", "original_code": "public static void applyTo(ConfigurableEnvironment environment) {\n\t\tapplyTo(environment, null, null, Collections.emptyList());\n\t}", "doc_comment": "/**\n\t * Apply {@link ConfigData} post-processing to an existing {@link Environment}. This\n\t * method can be useful when working with an {@link Environment} that has been created\n\t * directly and not necessarily as part of a {@link SpringApplication}.\n\t * @param environment the environment to apply {@link ConfigData} to\n\t */"}, "code_tokens": ["void", "applyTo", "public", "static", "(", ")", "{", "}", "ConfigurableEnvironment", "environment", ";", "applyTo", "(", "environment", ",", "null", ",", "null", ",", ")", "Collections", ".", "emptyList", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 36, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 16, "n_whitespaces": 13, "n_words": 12, "nloc": 3, "token_counts": 25}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessor.java#126-129", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "applyTo", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentPostProcessor#applyTo", "start_line": 126, "end_line": 129, "signature": "applyTo(ConfigurableEnvironment environment, ResourceLoader resourceLoader,\n\t\t\t@Nullable ConfigurableBootstrapContext bootstrapContext, String... additionalProfiles)", "original_code": "public static void applyTo(ConfigurableEnvironment environment, ResourceLoader resourceLoader,\n\t\t\t@Nullable ConfigurableBootstrapContext bootstrapContext, String... additionalProfiles) {\n\t\tapplyTo(environment, resourceLoader, bootstrapContext, Arrays.asList(additionalProfiles));\n\t}", "doc_comment": "/**\n\t * Apply {@link ConfigData} post-processing to an existing {@link Environment}. This\n\t * method can be useful when working with an {@link Environment} that has been created\n\t * directly and not necessarily as part of a {@link SpringApplication}.\n\t * @param environment the environment to apply {@link ConfigData} to\n\t * @param resourceLoader the resource loader to use\n\t * @param bootstrapContext the bootstrap context to use or {@code null} to use a\n\t * throw-away context\n\t * @param additionalProfiles any additional profiles that should be applied\n\t */"}, "code_tokens": ["void", "applyTo", "public", "static", "(", ",", ",", ",", ")", "{", "}", "ConfigurableEnvironment", "environment", "ResourceLoader", "resourceLoader", "ConfigurableBootstrapContext", "bootstrapContext", "String", "...", ";", "additionalProfiles", "applyTo", "@", "Nullable", "(", "environment", ",", "resourceLoader", ",", "bootstrapContext", ",", ")", "Arrays", ".", "asList", "(", "additionalProfiles", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 55, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 24, "n_whitespaces": 23, "n_words": 20, "nloc": 4, "token_counts": 38}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessor.java#141-148", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "applyTo", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentPostProcessor#applyTo", "start_line": 141, "end_line": 148, "signature": "applyTo(ConfigurableEnvironment environment, @Nullable ResourceLoader resourceLoader,\n\t\t\t@Nullable ConfigurableBootstrapContext bootstrapContext, Collection<String> additionalProfiles)", "original_code": "public static void applyTo(ConfigurableEnvironment environment, @Nullable ResourceLoader resourceLoader,\n\t\t\t@Nullable ConfigurableBootstrapContext bootstrapContext, Collection<String> additionalProfiles) {\n\t\tDeferredLogFactory logFactory = Supplier::get;\n\t\tbootstrapContext = (bootstrapContext != null) ? bootstrapContext : new DefaultBootstrapContext();\n\t\tConfigDataEnvironmentPostProcessor postProcessor = new ConfigDataEnvironmentPostProcessor(logFactory,\n\t\t\t\tbootstrapContext);\n\t\tpostProcessor.postProcessEnvironment(environment, resourceLoader, additionalProfiles);\n\t}", "doc_comment": "/**\n\t * Apply {@link ConfigData} post-processing to an existing {@link Environment}. This\n\t * method can be useful when working with an {@link Environment} that has been created\n\t * directly and not necessarily as part of a {@link SpringApplication}.\n\t * @param environment the environment to apply {@link ConfigData} to\n\t * @param resourceLoader the resource loader to use\n\t * @param bootstrapContext the bootstrap context to use or {@code null} to use a\n\t * throw-away context\n\t * @param additionalProfiles any additional profiles that should be applied\n\t */"}, "code_tokens": ["void", "applyTo", "public", "static", "(", ",", ",", ",", ")", "{", "}", "ConfigurableEnvironment", "environment", "ResourceLoader", "resourceLoader", "ConfigurableBootstrapContext", "bootstrapContext", "additionalProfiles", "DeferredLogFactory", ";", ";", "ConfigDataEnvironmentPostProcessor", ";", ";", "Collection", "logFactory", "=", "bootstrapContext", "=", "postProcessor", "=", "postProcessor", ".", "postProcessEnvironment", "@", "Nullable", "@", "Nullable", "<", "String", ">", "Supplier", "::", "get", "?", "bootstrapContext", ":", "new", "ConfigDataEnvironmentPostProcessor", "(", "environment", ",", "resourceLoader", ",", "additionalProfiles", ")", "(", ")", "new", "DefaultBootstrapContext", "(", "logFactory", ",", "bootstrapContext", ")", "bootstrapContext", "!=", "null", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 102, "ast_depth": 9, "n_identifiers": 11, "vocab_size": 39, "n_whitespaces": 53, "n_words": 36, "nloc": 8, "token_counts": 70}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessor.java#163-171", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "applyTo", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentPostProcessor#applyTo", "start_line": 163, "end_line": 171, "signature": "applyTo(ConfigurableEnvironment environment, @Nullable ResourceLoader resourceLoader,\n\t\t\t@Nullable ConfigurableBootstrapContext bootstrapContext, Collection<String> additionalProfiles,\n\t\t\tConfigDataEnvironmentUpdateListener environmentUpdateListener)", "original_code": "public static void applyTo(ConfigurableEnvironment environment, @Nullable ResourceLoader resourceLoader,\n\t\t\t@Nullable ConfigurableBootstrapContext bootstrapContext, Collection<String> additionalProfiles,\n\t\t\tConfigDataEnvironmentUpdateListener environmentUpdateListener) {\n\t\tDeferredLogFactory logFactory = Supplier::get;\n\t\tbootstrapContext = (bootstrapContext != null) ? bootstrapContext : new DefaultBootstrapContext();\n\t\tConfigDataEnvironmentPostProcessor postProcessor = new ConfigDataEnvironmentPostProcessor(logFactory,\n\t\t\t\tbootstrapContext, environmentUpdateListener);\n\t\tpostProcessor.postProcessEnvironment(environment, resourceLoader, additionalProfiles);\n\t}", "doc_comment": "/**\n\t * Apply {@link ConfigData} post-processing to an existing {@link Environment}. This\n\t * method can be useful when working with an {@link Environment} that has been created\n\t * directly and not necessarily as part of a {@link SpringApplication}.\n\t * @param environment the environment to apply {@link ConfigData} to\n\t * @param resourceLoader the resource loader to use\n\t * @param bootstrapContext the bootstrap context to use or {@code null} to use a\n\t * throw-away context\n\t * @param additionalProfiles any additional profiles that should be applied\n\t * @param environmentUpdateListener optional\n\t * {@link ConfigDataEnvironmentUpdateListener} that can be used to track\n\t * {@link Environment} updates.\n\t */"}, "code_tokens": ["void", "applyTo", "public", "static", "(", ",", ",", ",", ",", ")", "{", "}", "ConfigurableEnvironment", "environment", "ResourceLoader", "resourceLoader", "ConfigurableBootstrapContext", "bootstrapContext", "additionalProfiles", "ConfigDataEnvironmentUpdateListener", "environmentUpdateListener", "DeferredLogFactory", ";", ";", "ConfigDataEnvironmentPostProcessor", ";", ";", "Collection", "logFactory", "=", "bootstrapContext", "=", "postProcessor", "=", "postProcessor", ".", "postProcessEnvironment", "@", "Nullable", "@", "Nullable", "<", "String", ">", "Supplier", "::", "get", "?", "bootstrapContext", ":", "new", "ConfigDataEnvironmentPostProcessor", "(", "environment", ",", "resourceLoader", ",", "additionalProfiles", ")", "(", ")", "new", "DefaultBootstrapContext", "(", "logFactory", ",", "bootstrapContext", ",", "environmentUpdateListener", ")", "bootstrapContext", "!=", "null", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 108, "ast_depth": 9, "n_identifiers": 12, "vocab_size": 41, "n_whitespaces": 59, "n_words": 39, "nloc": 9, "token_counts": 75}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLoaderContext.java#35-35", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLoaderContext.java", "language": "Java"}, "method": {"name": "getBootstrapContext", "qualified_name": "org.springframework.boot.context.config.ConfigDataLoaderContext#getBootstrapContext", "start_line": 35, "end_line": 35, "signature": "getBootstrapContext()", "original_code": "ConfigurableBootstrapContext getBootstrapContext();", "doc_comment": "/**\n\t * Provides access to the {@link ConfigurableBootstrapContext} shared across all\n\t * {@link EnvironmentPostProcessor EnvironmentPostProcessors}.\n\t * @return the bootstrap context\n\t */"}, "code_tokens": ["ConfigurableBootstrapContext", "getBootstrapContext", ";", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 8, "ast_depth": 4, "n_identifiers": 1, "vocab_size": 5, "n_whitespaces": 1, "n_words": 2, "nloc": 1, "token_counts": 5}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLocationResolverContext.java#39-39", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLocationResolverContext.java", "language": "Java"}, "method": {"name": "getBinder", "qualified_name": "org.springframework.boot.context.config.ConfigDataLocationResolverContext#getBinder", "start_line": 39, "end_line": 39, "signature": "getBinder()", "original_code": "Binder getBinder();", "doc_comment": "/**\n\t * Provides access to a binder that can be used to obtain previously contributed\n\t * values.\n\t * @return a binder instance\n\t */"}, "code_tokens": ["Binder", "getBinder", ";", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 8, "ast_depth": 4, "n_identifiers": 1, "vocab_size": 5, "n_whitespaces": 1, "n_words": 2, "nloc": 1, "token_counts": 5}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLocationResolverContext.java#46-46", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLocationResolverContext.java", "language": "Java"}, "method": {"name": "getParent", "qualified_name": "org.springframework.boot.context.config.ConfigDataLocationResolverContext#getParent", "start_line": 46, "end_line": 46, "signature": "getParent()", "original_code": "@Nullable ConfigDataResource getParent();", "doc_comment": "/**\n\t * Provides access to the parent {@link ConfigDataResource} that triggered the resolve\n\t * or {@code null} if there is no available parent.\n\t * @return the parent location\n\t */"}, "code_tokens": ["ConfigDataResource", "getParent", ";", "(", ")", "@", "Nullable"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 12, "ast_depth": 5, "n_identifiers": 2, "vocab_size": 7, "n_whitespaces": 2, "n_words": 3, "nloc": 1, "token_counts": 7}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLocationResolverContext.java#53-53", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLocationResolverContext.java", "language": "Java"}, "method": {"name": "getBootstrapContext", "qualified_name": "org.springframework.boot.context.config.ConfigDataLocationResolverContext#getBootstrapContext", "start_line": 53, "end_line": 53, "signature": "getBootstrapContext()", "original_code": "ConfigurableBootstrapContext getBootstrapContext();", "doc_comment": "/**\n\t * Provides access to the {@link ConfigurableBootstrapContext} shared across all\n\t * {@link EnvironmentPostProcessor EnvironmentPostProcessors}.\n\t * @return the bootstrap context\n\t */"}, "code_tokens": ["ConfigurableBootstrapContext", "getBootstrapContext", ";", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 8, "ast_depth": 4, "n_identifiers": 1, "vocab_size": 5, "n_whitespaces": 1, "n_words": 2, "nloc": 1, "token_counts": 5}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/env/RandomValuePropertySource.java#85-92", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/RandomValuePropertySource.java", "language": "Java"}, "method": {"name": "getProperty", "qualified_name": "org.springframework.boot.env.RandomValuePropertySource#getProperty", "start_line": 85, "end_line": 92, "signature": "getProperty(String name)", "original_code": "@Override\n\tpublic @Nullable Object getProperty(String name) {\n\t\tif (!name.startsWith(PREFIX)) {\n\t\t\treturn null;\n\t\t}\n\t\tlogger.trace(LogMessage.format(\"Generating random property for '%s'\", name));\n\t\treturn getRandomValue(name.substring(PREFIX.length()));\n\t}", "doc_comment": ""}, "code_tokens": ["Object", "getProperty", "public", "(", ")", "{", "}", "@", "Override", "@", "Nullable", "String", "name", "if", ";", "return", ";", "(", ")", "{", "}", "logger", ".", "trace", "getRandomValue", "!", "return", "null", ";", "(", ")", "(", ")", "name", ".", "startsWith", "LogMessage", ".", "format", "name", ".", "substring", "(", "PREFIX", ")", "(", ",", "name", ")", "(", ")", "\"", "Generating random property for '%s'", "\"", "PREFIX", ".", "length", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 87, "ast_depth": 11, "n_identifiers": 13, "vocab_size": 30, "n_whitespaces": 34, "n_words": 29, "nloc": 8, "token_counts": 59}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/env/RandomValuePropertySource.java#94-113", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/RandomValuePropertySource.java", "language": "Java"}, "method": {"name": "getRandomValue", "qualified_name": "org.springframework.boot.env.RandomValuePropertySource#getRandomValue", "start_line": 94, "end_line": 113, "signature": "getRandomValue(String type)", "original_code": "private Object getRandomValue(String type) {\n\t\tif (type.equals(\"int\")) {\n\t\t\treturn getSource().nextInt();\n\t\t}\n\t\tif (type.equals(\"long\")) {\n\t\t\treturn getSource().nextLong();\n\t\t}\n\t\tString range = getRange(type, \"int\");\n\t\tif (range != null) {\n\t\t\treturn getNextIntInRange(Range.of(range, Integer::parseInt));\n\t\t}\n\t\trange = getRange(type, \"long\");\n\t\tif (range != null) {\n\t\t\treturn getNextLongInRange(Range.of(range, Long::parseLong));\n\t\t}\n\t\tif (type.equals(\"uuid\")) {\n\t\t\treturn UUID.randomUUID().toString();\n\t\t}\n\t\treturn getRandomBytes();\n\t}", "doc_comment": ""}, "code_tokens": ["Object", "getRandomValue", "private", "(", ")", "{", "}", "String", "type", "if", "if", "String", ";", "if", ";", "if", "if", "return", ";", "(", ")", "{", "}", "(", ")", "{", "}", "range", "=", "(", ")", "{", "}", "range", "=", "(", ")", "{", "}", "(", ")", "{", "}", "getRandomBytes", "type", ".", "equals", "return", ";", "type", ".", "equals", "return", ";", "getRange", "range", "!=", "null", "return", ";", "getRange", "range", "!=", "null", "return", ";", "type", ".", "equals", "return", ";", "(", ")", "(", ")", ".", "nextInt", "(", ")", ".", "nextLong", "(", "type", ",", ")", "getNextIntInRange", "(", "type", ",", ")", "getNextLongInRange", "(", ")", ".", "toString", "\"", "int", "\"", "getSource", "(", ")", "\"", "long", "\"", "getSource", "(", ")", "\"", "int", "\"", "(", ")", "\"", "long", "\"", "(", ")", "\"", "uuid", "\"", "UUID", ".", "randomUUID", "(", ")", "(", ")", "(", ")", "Range", ".", "of", "Range", ".", "of", "(", ")", "(", "range", ",", ")", "(", "range", ",", ")", "Integer", "::", "parseInt", "Long", "::", "parseLong"], "metrics": {"cyclomatic_complexity": 6, "n_ast_nodes": 223, "ast_depth": 12, "n_identifiers": 20, "vocab_size": 40, "n_whitespaces": 94, "n_words": 58, "nloc": 20, "token_counts": 151}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/env/RandomValuePropertySource.java#115-123", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/RandomValuePropertySource.java", "language": "Java"}, "method": {"name": "getRange", "qualified_name": "org.springframework.boot.env.RandomValuePropertySource#getRange", "start_line": 115, "end_line": 123, "signature": "getRange(String type, String prefix)", "original_code": "private @Nullable String getRange(String type, String prefix) {\n\t\tif (type.startsWith(prefix)) {\n\t\t\tint startIndex = prefix.length() + 1;\n\t\t\tif (type.length() > startIndex) {\n\t\t\t\treturn type.substring(startIndex, type.length() - 1);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}", "doc_comment": ""}, "code_tokens": ["String", "getRange", "private", "(", ",", ")", "{", "}", "@", "Nullable", "String", "type", "String", "prefix", "if", "return", "null", ";", "(", ")", "{", "}", "type", ".", "startsWith", ";", "if", "(", "prefix", ")", "int", "startIndex", "=", "(", ")", "{", "}", "+", "1", ">", "startIndex", "return", ";", "prefix", ".", "length", "type", ".", "length", "type", ".", "substring", "(", ")", "(", ")", "(", "startIndex", ",", ")", "-", "1", "type", ".", "length", "(", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 99, "ast_depth": 14, "n_identifiers": 8, "vocab_size": 27, "n_whitespaces": 51, "n_words": 30, "nloc": 9, "token_counts": 67}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/env/RandomValuePropertySource.java#125-129", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/RandomValuePropertySource.java", "language": "Java"}, "method": {"name": "getNextIntInRange", "qualified_name": "org.springframework.boot.env.RandomValuePropertySource#getNextIntInRange", "start_line": 125, "end_line": 129, "signature": "getNextIntInRange(Range<Integer> range)", "original_code": "private int getNextIntInRange(Range<Integer> range) {\n\t\tOptionalInt first = getSource().ints(1, range.getMin(), range.getMax()).findFirst();\n\t\tassertPresent(first.isPresent(), range);\n\t\treturn first.getAsInt();\n\t}", "doc_comment": ""}, "code_tokens": ["getNextIntInRange", "private", "int", "(", ")", "{", "}", "range", "OptionalInt", ";", ";", "return", ";", "Range", "first", "=", "assertPresent", "first", ".", "getAsInt", "<", "Integer", ">", ".", "findFirst", "(", ",", "range", ")", "(", ")", ".", "ints", "(", ")", "first", ".", "isPresent", "getSource", "(", "1", ",", ",", ")", "(", ")", "(", ")", "range", ".", "getMin", "range", ".", "getMax", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 87, "ast_depth": 11, "n_identifiers": 11, "vocab_size": 28, "n_whitespaces": 22, "n_words": 23, "nloc": 5, "token_counts": 58}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/env/RandomValuePropertySource.java#131-135", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/RandomValuePropertySource.java", "language": "Java"}, "method": {"name": "getNextLongInRange", "qualified_name": "org.springframework.boot.env.RandomValuePropertySource#getNextLongInRange", "start_line": 131, "end_line": 135, "signature": "getNextLongInRange(Range<Long> range)", "original_code": "private long getNextLongInRange(Range<Long> range) {\n\t\tOptionalLong first = getSource().longs(1, range.getMin(), range.getMax()).findFirst();\n\t\tassertPresent(first.isPresent(), range);\n\t\treturn first.getAsLong();\n\t}", "doc_comment": ""}, "code_tokens": ["getNextLongInRange", "private", "long", "(", ")", "{", "}", "range", "OptionalLong", ";", ";", "return", ";", "Range", "first", "=", "assertPresent", "first", ".", "getAsLong", "<", "Long", ">", ".", "findFirst", "(", ",", "range", ")", "(", ")", ".", "longs", "(", ")", "first", ".", "isPresent", "getSource", "(", "1", ",", ",", ")", "(", ")", "(", ")", "range", ".", "getMin", "range", ".", "getMax", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 87, "ast_depth": 11, "n_identifiers": 11, "vocab_size": 28, "n_whitespaces": 22, "n_words": 23, "nloc": 5, "token_counts": 58}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/env/RandomValuePropertySource.java#137-139", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/RandomValuePropertySource.java", "language": "Java"}, "method": {"name": "assertPresent", "qualified_name": "org.springframework.boot.env.RandomValuePropertySource#assertPresent", "start_line": 137, "end_line": 139, "signature": "assertPresent(boolean present, Range<?> range)", "original_code": "private void assertPresent(boolean present, Range<?> range) {\n\t\tAssert.state(present, () -> \"Could not get random number for range '\" + range + \"'\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "assertPresent", "private", "(", ",", ")", "{", "}", "boolean", "present", "range", ";", "Range", "Assert", ".", "state", "<", ">", "(", "present", ",", ")", "?", "->", "(", ")", "+", "+", "range", "\"", "'", "\"", "\"", "Could not get random number for range '", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 54, "ast_depth": 11, "n_identifiers": 5, "vocab_size": 24, "n_whitespaces": 25, "n_words": 18, "nloc": 3, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/env/RandomValuePropertySource.java#141-145", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/RandomValuePropertySource.java", "language": "Java"}, "method": {"name": "getRandomBytes", "qualified_name": "org.springframework.boot.env.RandomValuePropertySource#getRandomBytes", "start_line": 141, "end_line": 145, "signature": "getRandomBytes()", "original_code": "private Object getRandomBytes() {\n\t\tbyte[] bytes = new byte[16];\n\t\tgetSource().nextBytes(bytes);\n\t\treturn HexFormat.of().withLowerCase().formatHex(bytes);\n\t}", "doc_comment": ""}, "code_tokens": ["Object", "getRandomBytes", "private", "(", ")", "{", "}", ";", ";", "return", ";", "bytes", "=", ".", "nextBytes", ".", "formatHex", "byte", "[", "]", "new", "getSource", "(", "bytes", ")", ".", "withLowerCase", "(", "bytes", ")", "byte", "[", "16", "]", "(", ")", "HexFormat", ".", "of", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 68, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 23, "n_whitespaces": 19, "n_words": 17, "nloc": 5, "token_counts": 43}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/env/RandomValuePropertySource.java#151-153", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/RandomValuePropertySource.java", "language": "Java"}, "method": {"name": "addToEnvironment", "qualified_name": "org.springframework.boot.env.RandomValuePropertySource#addToEnvironment", "start_line": 151, "end_line": 153, "signature": "addToEnvironment(ConfigurableEnvironment environment)", "original_code": "public static void addToEnvironment(ConfigurableEnvironment environment) {\n\t\taddToEnvironment(environment, logger);\n\t}", "doc_comment": "/**\n\t * Add a {@link RandomValuePropertySource} to the given {@link Environment}.\n\t * @param environment the environment to add the random property source to\n\t */"}, "code_tokens": ["void", "addToEnvironment", "public", "static", "(", ")", "{", "}", "ConfigurableEnvironment", "environment", ";", "addToEnvironment", "(", "environment", ",", "logger", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 26, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 13, "n_whitespaces": 11, "n_words": 9, "nloc": 3, "token_counts": 17}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/env/RandomValuePropertySource.java#161-176", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/RandomValuePropertySource.java", "language": "Java"}, "method": {"name": "addToEnvironment", "qualified_name": "org.springframework.boot.env.RandomValuePropertySource#addToEnvironment", "start_line": 161, "end_line": 176, "signature": "addToEnvironment(ConfigurableEnvironment environment, Log logger)", "original_code": "public static void addToEnvironment(ConfigurableEnvironment environment, Log logger) {\n\t\tMutablePropertySources sources = environment.getPropertySources();\n\t\tPropertySource<?> existing = sources.get(RANDOM_PROPERTY_SOURCE_NAME);\n\t\tif (existing != null) {\n\t\t\tlogger.trace(\"RandomValuePropertySource already present\");\n\t\t\treturn;\n\t\t}\n\t\tRandomValuePropertySource randomSource = new RandomValuePropertySource(RANDOM_PROPERTY_SOURCE_NAME);\n\t\tif (sources.get(StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME) != null) {\n\t\t\tsources.addAfter(StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME, randomSource);\n\t\t}\n\t\telse {\n\t\t\tsources.addLast(randomSource);\n\t\t}\n\t\tlogger.trace(\"RandomValuePropertySource add to Environment\");\n\t}", "doc_comment": "/**\n\t * Add a {@link RandomValuePropertySource} to the given {@link Environment}.\n\t * @param environment the environment to add the random property source to\n\t * @param logger logger used for debug and trace information\n\t * @since 4.0.0\n\t */"}, "code_tokens": ["void", "addToEnvironment", "public", "static", "(", ",", ")", "{", "}", "ConfigurableEnvironment", "environment", "Log", "logger", "MutablePropertySources", ";", ";", "if", "RandomValuePropertySource", ";", "if", "else", ";", "sources", "=", "PropertySource", "existing", "=", "(", ")", "{", "}", "randomSource", "=", "(", ")", "{", "}", "{", "}", "logger", ".", "trace", "environment", ".", "getPropertySources", "<", ">", "sources", ".", "get", "existing", "!=", "null", ";", "return", ";", "new", "RandomValuePropertySource", "!=", "null", ";", ";", "(", ")", "(", ")", "?", "(", "RANDOM_PROPERTY_SOURCE_NAME", ")", "logger", ".", "trace", "(", "RANDOM_PROPERTY_SOURCE_NAME", ")", "sources", ".", "get", "sources", ".", "addAfter", "sources", ".", "addLast", "\"", "RandomValuePropertySource add to Environment", "\"", "(", ")", "(", ")", "(", ",", "randomSource", ")", "(", "randomSource", ")", "\"", "RandomValuePropertySource already present", "\"", "StandardEnvironment", ".", "SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME", "StandardEnvironment", ".", "SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 158, "ast_depth": 10, "n_identifiers": 14, "vocab_size": 42, "n_whitespaces": 80, "n_words": 52, "nloc": 16, "token_counts": 108}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/env/RandomValuePropertySource.java#192-194", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/RandomValuePropertySource.java", "language": "Java"}, "method": {"name": "getMin", "qualified_name": "org.springframework.boot.env.RandomValuePropertySource#getMin", "start_line": 192, "end_line": 194, "signature": "getMin()", "original_code": "T getMin() {\n\t\t\treturn this.min;\n\t\t}", "doc_comment": ""}, "code_tokens": ["T", "getMin", "(", ")", "{", "}", "return", ";", "this", ".", "min"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 17, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 11, "n_whitespaces": 10, "n_words": 5, "nloc": 3, "token_counts": 11}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/env/RandomValuePropertySource.java#196-198", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/RandomValuePropertySource.java", "language": "Java"}, "method": {"name": "getMax", "qualified_name": "org.springframework.boot.env.RandomValuePropertySource#getMax", "start_line": 196, "end_line": 198, "signature": "getMax()", "original_code": "T getMax() {\n\t\t\treturn this.max;\n\t\t}", "doc_comment": ""}, "code_tokens": ["T", "getMax", "(", ")", "{", "}", "return", ";", "this", ".", "max"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 17, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 11, "n_whitespaces": 10, "n_words": 5, "nloc": 3, "token_counts": 11}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/env/RandomValuePropertySource.java#200-203", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/RandomValuePropertySource.java", "language": "Java"}, "method": {"name": "toString", "qualified_name": "org.springframework.boot.env.RandomValuePropertySource#toString", "start_line": 200, "end_line": 203, "signature": "toString()", "original_code": "@Override\n\t\tpublic String toString() {\n\t\t\treturn this.value;\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "toString", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "this", ".", "value"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/env/RandomValuePropertySource.java#205-216", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/RandomValuePropertySource.java", "language": "Java"}, "method": {"name": "of", "qualified_name": "org.springframework.boot.env.RandomValuePropertySource#of", "start_line": 205, "end_line": 216, "signature": "of(String value, Function<String, T> parse)", "original_code": "static <T extends Number & Comparable<T>> Range<T> of(String value, Function<String, T> parse) {\n\t\t\tT zero = parse.apply(\"0\");\n\t\t\tString[] tokens = StringUtils.commaDelimitedListToStringArray(value);\n\t\t\tT min = parse.apply(tokens[0]);\n\t\t\tif (tokens.length == 1) {\n\t\t\t\tAssert.state(min.compareTo(zero) > 0, \"Bound must be positive.\");\n\t\t\t\treturn new Range<>(value, zero, min);\n\t\t\t}\n\t\t\tT max = parse.apply(tokens[1]);\n\t\t\tAssert.state(min.compareTo(max) < 0, \"Lower bound must be less than upper bound.\");\n\t\t\treturn new Range<>(value, min, max);\n\t\t}", "doc_comment": ""}, "code_tokens": ["of", "static", "<", ">", "Range", "(", ",", ")", "{", "}", "T", "<", "T", ">", "String", "value", "parse", "T", ";", ";", "T", ";", "if", "T", ";", ";", "return", ";", "extends", "Number", "&", "Function", "zero", "=", "String", "tokens", "=", "min", "=", "(", ")", "{", "}", "max", "=", "Assert", ".", "state", "new", "Comparable", "<", "String", ",", "T", ">", "parse", ".", "apply", "[", "]", "StringUtils", ".", "commaDelimitedListToStringArray", "parse", ".", "apply", "==", "1", ";", "return", ";", "parse", ".", "apply", "(", ",", ")", "Range", "(", "value", ",", "min", ",", "max", ")", "<", "T", ">", "(", ")", "(", "value", ")", "(", ")", "tokens", ".", "length", "Assert", ".", "state", "new", "(", ")", "<", "0", "\"", "Lower bound must be less than upper bound.", "\"", "<", ">", "\"", "0", "\"", "tokens", "[", "0", "]", "(", ",", ")", "Range", "(", "value", ",", "zero", ",", "min", ")", "tokens", "[", "1", "]", "min", ".", "compareTo", ">", "0", "\"", "Bound must be positive.", "\"", "<", ">", "(", "max", ")", "min", ".", "compareTo", "(", "zero", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 218, "ast_depth": 12, "n_identifiers": 14, "vocab_size": 44, "n_whitespaces": 97, "n_words": 77, "nloc": 12, "token_counts": 152}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListener.java#103-106", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListener.java", "language": "Java"}, "method": {"name": "with", "qualified_name": "org.springframework.boot.support.EnvironmentPostProcessorApplicationListener#with", "start_line": 103, "end_line": 106, "signature": "with(\n\t\t\tEnvironmentPostProcessorsFactory postProcessorsFactory)", "original_code": "public static EnvironmentPostProcessorApplicationListener with(\n\t\t\tEnvironmentPostProcessorsFactory postProcessorsFactory) {\n\t\treturn new EnvironmentPostProcessorApplicationListener((classloader) -> postProcessorsFactory);\n\t}", "doc_comment": "/**\n\t * Factory method that creates an {@link EnvironmentPostProcessorApplicationListener}\n\t * with a specific {@link EnvironmentPostProcessorsFactory}.\n\t * @param postProcessorsFactory the environment post processor factory\n\t * @return an {@link EnvironmentPostProcessorApplicationListener} instance\n\t */"}, "code_tokens": ["EnvironmentPostProcessorApplicationListener", "with", "public", "static", "(", ")", "{", "}", "EnvironmentPostProcessorsFactory", "postProcessorsFactory", "return", ";", "new", "EnvironmentPostProcessorApplicationListener", "(", ")", "->", "postProcessorsFactory", "(", "classloader", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 32, "ast_depth": 9, "n_identifiers": 3, "vocab_size": 15, "n_whitespaces": 18, "n_words": 11, "nloc": 4, "token_counts": 21}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListener.java#108-113", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListener.java", "language": "Java"}, "method": {"name": "supportsEventType", "qualified_name": "org.springframework.boot.support.EnvironmentPostProcessorApplicationListener#supportsEventType", "start_line": 108, "end_line": 113, "signature": "supportsEventType(Class<? extends ApplicationEvent> eventType)", "original_code": "@Override\n\tpublic boolean supportsEventType(Class<? extends ApplicationEvent> eventType) {\n\t\treturn ApplicationEnvironmentPreparedEvent.class.isAssignableFrom(eventType)\n\t\t\t\t|| ApplicationPreparedEvent.class.isAssignableFrom(eventType)\n\t\t\t\t|| ApplicationFailedEvent.class.isAssignableFrom(eventType);\n\t}", "doc_comment": ""}, "code_tokens": ["boolean", "supportsEventType", "public", "(", ")", "{", "}", "@", "Override", "eventType", "return", ";", "Class", "||", "<", ">", "||", ".", "isAssignableFrom", "?", "extends", "ApplicationEvent", ".", "isAssignableFrom", ".", "isAssignableFrom", "ApplicationFailedEvent", ".", "class", "(", "eventType", ")", "ApplicationEnvironmentPreparedEvent", ".", "class", "(", "eventType", ")", "ApplicationPreparedEvent", ".", "class", "(", "eventType", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 66, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 25, "n_whitespaces": 26, "n_words": 21, "nloc": 6, "token_counts": 44}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListener.java#115-126", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListener.java", "language": "Java"}, "method": {"name": "onApplicationEvent", "qualified_name": "org.springframework.boot.support.EnvironmentPostProcessorApplicationListener#onApplicationEvent", "start_line": 115, "end_line": 126, "signature": "onApplicationEvent(ApplicationEvent event)", "original_code": "@Override\n\tpublic void onApplicationEvent(ApplicationEvent event) {\n\t\tif (event instanceof ApplicationEnvironmentPreparedEvent environmentPreparedEvent) {\n\t\t\tonApplicationEnvironmentPreparedEvent(environmentPreparedEvent);\n\t\t}\n\t\tif (event instanceof ApplicationPreparedEvent) {\n\t\t\tonApplicationPreparedEvent();\n\t\t}\n\t\tif (event instanceof ApplicationFailedEvent) {\n\t\t\tonApplicationFailedEvent();\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "onApplicationEvent", "public", "(", ")", "{", "}", "@", "Override", "ApplicationEvent", "event", "if", "if", "if", "(", ")", "{", "}", "(", ")", "{", "}", "(", ")", "{", "}", "event", "instanceof", "ApplicationEnvironmentPreparedEvent", "environmentPreparedEvent", ";", "event", "instanceof", "ApplicationPreparedEvent", ";", "event", "instanceof", "ApplicationFailedEvent", ";", "onApplicationEnvironmentPreparedEvent", "onApplicationPreparedEvent", "onApplicationFailedEvent", "(", "environmentPreparedEvent", ")", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 4, "n_ast_nodes": 77, "ast_depth": 9, "n_identifiers": 7, "vocab_size": 21, "n_whitespaces": 51, "n_words": 23, "nloc": 12, "token_counts": 49}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListener.java#128-137", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListener.java", "language": "Java"}, "method": {"name": "onApplicationEnvironmentPreparedEvent", "qualified_name": "org.springframework.boot.support.EnvironmentPostProcessorApplicationListener#onApplicationEnvironmentPreparedEvent", "start_line": 128, "end_line": 137, "signature": "onApplicationEnvironmentPreparedEvent(ApplicationEnvironmentPreparedEvent event)", "original_code": "private void onApplicationEnvironmentPreparedEvent(ApplicationEnvironmentPreparedEvent event) {\n\t\tConfigurableEnvironment environment = event.getEnvironment();\n\t\tSpringApplication application = event.getSpringApplication();\n\t\tList<EnvironmentPostProcessor> postProcessors = getEnvironmentPostProcessors(application.getResourceLoader(),\n\t\t\t\tevent.getBootstrapContext());\n\t\taddAotGeneratedEnvironmentPostProcessorIfNecessary(postProcessors, application);\n\t\tfor (EnvironmentPostProcessor postProcessor : postProcessors) {\n\t\t\tpostProcessor.postProcessEnvironment(environment, application);\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "onApplicationEnvironmentPreparedEvent", "private", "(", ")", "{", "}", "ApplicationEnvironmentPreparedEvent", "event", "ConfigurableEnvironment", ";", "SpringApplication", ";", ";", ";", "for", "(", "EnvironmentPostProcessor", "postProcessor", ":", "postProcessors", ")", "environment", "=", "application", "=", "List", "postProcessors", "=", "addAotGeneratedEnvironmentPostProcessorIfNecessary", "{", "}", "event", ".", "getEnvironment", "event", ".", "getSpringApplication", "<", "EnvironmentPostProcessor", ">", "getEnvironmentPostProcessors", "(", "postProcessors", ",", "application", ")", ";", "(", ")", "(", ")", "(", ",", ")", "postProcessor", ".", "postProcessEnvironment", "application", ".", "getResourceLoader", "event", ".", "getBootstrapContext", "(", "environment", ",", "application", ")", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 105, "ast_depth": 10, "n_identifiers": 13, "vocab_size": 32, "n_whitespaces": 49, "n_words": 32, "nloc": 10, "token_counts": 73}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListener.java#139-141", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListener.java", "language": "Java"}, "method": {"name": "onApplicationPreparedEvent", "qualified_name": "org.springframework.boot.support.EnvironmentPostProcessorApplicationListener#onApplicationPreparedEvent", "start_line": 139, "end_line": 141, "signature": "onApplicationPreparedEvent()", "original_code": "private void onApplicationPreparedEvent() {\n\t\tfinish();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "onApplicationPreparedEvent", "private", "(", ")", "{", "}", ";", "finish", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 19, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 9, "n_whitespaces": 8, "n_words": 4, "nloc": 3, "token_counts": 11}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListener.java#143-145", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListener.java", "language": "Java"}, "method": {"name": "onApplicationFailedEvent", "qualified_name": "org.springframework.boot.support.EnvironmentPostProcessorApplicationListener#onApplicationFailedEvent", "start_line": 143, "end_line": 145, "signature": "onApplicationFailedEvent()", "original_code": "private void onApplicationFailedEvent() {\n\t\tfinish();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "onApplicationFailedEvent", "private", "(", ")", "{", "}", ";", "finish", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 19, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 9, "n_whitespaces": 8, "n_words": 4, "nloc": 3, "token_counts": 11}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListener.java#147-149", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListener.java", "language": "Java"}, "method": {"name": "finish", "qualified_name": "org.springframework.boot.support.EnvironmentPostProcessorApplicationListener#finish", "start_line": 147, "end_line": 149, "signature": "finish()", "original_code": "private void finish() {\n\t\tthis.deferredLogs.switchOverAll();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "finish", "private", "(", ")", "{", "}", ";", ".", "switchOverAll", "this", ".", "deferredLogs", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 24, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 12, "n_whitespaces": 8, "n_words": 6, "nloc": 3, "token_counts": 15}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListener.java#151-156", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListener.java", "language": "Java"}, "method": {"name": "getEnvironmentPostProcessors", "qualified_name": "org.springframework.boot.support.EnvironmentPostProcessorApplicationListener#getEnvironmentPostProcessors", "start_line": 151, "end_line": 156, "signature": "getEnvironmentPostProcessors(@Nullable ResourceLoader resourceLoader,\n\t\t\tConfigurableBootstrapContext bootstrapContext)", "original_code": "List<EnvironmentPostProcessor> getEnvironmentPostProcessors(@Nullable ResourceLoader resourceLoader,\n\t\t\tConfigurableBootstrapContext bootstrapContext) {\n\t\tClassLoader classLoader = (resourceLoader != null) ? resourceLoader.getClassLoader() : null;\n\t\tEnvironmentPostProcessorsFactory postProcessorsFactory = this.postProcessorsFactory.apply(classLoader);\n\t\treturn postProcessorsFactory.getEnvironmentPostProcessors(this.deferredLogs, bootstrapContext);\n\t}", "doc_comment": ""}, "code_tokens": ["getEnvironmentPostProcessors", "List", "(", ",", ")", "{", "}", "<", "EnvironmentPostProcessor", ">", "ResourceLoader", "resourceLoader", "ConfigurableBootstrapContext", "bootstrapContext", "ClassLoader", ";", "EnvironmentPostProcessorsFactory", ";", "return", ";", "classLoader", "=", "postProcessorsFactory", "=", "postProcessorsFactory", ".", "getEnvironmentPostProcessors", "@", "Nullable", "?", ":", "null", ".", "apply", "(", ",", "bootstrapContext", ")", "(", ")", "resourceLoader", ".", "getClassLoader", "this", ".", "postProcessorsFactory", "(", "classLoader", ")", "this", ".", "deferredLogs", "resourceLoader", "!=", "null", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 83, "ast_depth": 9, "n_identifiers": 9, "vocab_size": 32, "n_whitespaces": 34, "n_words": 27, "nloc": 6, "token_counts": 57}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListener.java#158-170", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListener.java", "language": "Java"}, "method": {"name": "addAotGeneratedEnvironmentPostProcessorIfNecessary", "qualified_name": "org.springframework.boot.support.EnvironmentPostProcessorApplicationListener#addAotGeneratedEnvironmentPostProcessorIfNecessary", "start_line": 158, "end_line": 170, "signature": "addAotGeneratedEnvironmentPostProcessorIfNecessary(List<EnvironmentPostProcessor> postProcessors,\n\t\t\tSpringApplication springApplication)", "original_code": "private void addAotGeneratedEnvironmentPostProcessorIfNecessary(List<EnvironmentPostProcessor> postProcessors,\n\t\t\tSpringApplication springApplication) {\n\t\tif (AotDetector.useGeneratedArtifacts()) {\n\t\t\tClassLoader classLoader = (springApplication.getResourceLoader() != null)\n\t\t\t\t\t? springApplication.getResourceLoader().getClassLoader() : null;\n\t\t\tClass<?> mainApplicationClass = springApplication.getMainApplicationClass();\n\t\t\tAssert.state(mainApplicationClass != null, \"mainApplicationClass not found\");\n\t\t\tString postProcessorClassName = mainApplicationClass.getName() + \"__\" + AOT_FEATURE_NAME;\n\t\t\tif (ClassUtils.isPresent(postProcessorClassName, classLoader)) {\n\t\t\t\tpostProcessors.add(0, instantiateEnvironmentPostProcessor(postProcessorClassName, classLoader));\n\t\t\t}\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "addAotGeneratedEnvironmentPostProcessorIfNecessary", "private", "(", ",", ")", "{", "}", "postProcessors", "SpringApplication", "springApplication", "if", "List", "(", ")", "{", "}", "<", "EnvironmentPostProcessor", ">", "AotDetector", ".", "useGeneratedArtifacts", "ClassLoader", ";", ";", ";", "String", ";", "if", "(", ")", "classLoader", "=", "Class", "mainApplicationClass", "=", "Assert", ".", "state", "postProcessorClassName", "=", "(", ")", "{", "}", "?", ":", "null", "<", ">", "springApplication", ".", "getMainApplicationClass", "(", ",", ")", "+", "AOT_FEATURE_NAME", "ClassUtils", ".", "isPresent", ";", "(", ")", ".", "getClassLoader", "?", "(", ")", "mainApplicationClass", "!=", "null", "\"", "mainApplicationClass not found", "\"", "+", "(", "postProcessorClassName", ",", "classLoader", ")", "postProcessors", ".", "add", "!=", "null", "springApplication", ".", "getResourceLoader", "(", ")", "mainApplicationClass", ".", "getName", "\"", "__", "\"", "(", "0", ",", ")", "springApplication", ".", "getResourceLoader", "(", ")", "(", ")", "instantiateEnvironmentPostProcessor", "(", ")", "(", "postProcessorClassName", ",", "classLoader", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 171, "ast_depth": 13, "n_identifiers": 19, "vocab_size": 47, "n_whitespaces": 82, "n_words": 48, "nloc": 13, "token_counts": 117}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListener.java#172-183", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListener.java", "language": "Java"}, "method": {"name": "instantiateEnvironmentPostProcessor", "qualified_name": "org.springframework.boot.support.EnvironmentPostProcessorApplicationListener#instantiateEnvironmentPostProcessor", "start_line": 172, "end_line": 183, "signature": "instantiateEnvironmentPostProcessor(String postProcessorClassName,\n\t\t\t@Nullable ClassLoader classLoader)", "original_code": "private EnvironmentPostProcessor instantiateEnvironmentPostProcessor(String postProcessorClassName,\n\t\t\t@Nullable ClassLoader classLoader) {\n\t\ttry {\n\t\t\tClass<?> initializerClass = ClassUtils.resolveClassName(postProcessorClassName, classLoader);\n\t\t\tAssert.isAssignable(EnvironmentPostProcessor.class, initializerClass);\n\t\t\treturn (EnvironmentPostProcessor) BeanUtils.instantiateClass(initializerClass);\n\t\t}\n\t\tcatch (BeanInstantiationException ex) {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"Failed to instantiate EnvironmentPostProcessor: \" + postProcessorClassName, ex);\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["EnvironmentPostProcessor", "instantiateEnvironmentPostProcessor", "private", "(", ",", ")", "{", "}", "String", "postProcessorClassName", "ClassLoader", "classLoader", "try", "{", "}", "catch", "(", ")", "@", "Nullable", ";", ";", "return", ";", "ex", "{", "}", "Class", "initializerClass", "=", "Assert", ".", "isAssignable", "(", "EnvironmentPostProcessor", ")", "BeanInstantiationException", "throw", ";", "<", ">", "ClassUtils", ".", "resolveClassName", "(", ",", "initializerClass", ")", "BeanUtils", ".", "instantiateClass", "new", "IllegalArgumentException", "?", "(", "postProcessorClassName", ",", "classLoader", ")", "EnvironmentPostProcessor", ".", "class", "(", "initializerClass", ")", "(", ",", "ex", ")", "+", "postProcessorClassName", "\"", "Failed to instantiate EnvironmentPostProcessor: ", "\""], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 109, "ast_depth": 12, "n_identifiers": 12, "vocab_size": 40, "n_whitespaces": 66, "n_words": 37, "nloc": 12, "token_counts": 74}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListener.java#185-188", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListener.java", "language": "Java"}, "method": {"name": "getOrder", "qualified_name": "org.springframework.boot.support.EnvironmentPostProcessorApplicationListener#getOrder", "start_line": 185, "end_line": 188, "signature": "getOrder()", "original_code": "@Override\n\tpublic int getOrder() {\n\t\treturn this.order;\n\t}", "doc_comment": ""}, "code_tokens": ["getOrder", "public", "int", "(", ")", "{", "}", "@", "Override", "return", ";", "this", ".", "order"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 23, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 11, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListener.java#190-192", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListener.java", "language": "Java"}, "method": {"name": "setOrder", "qualified_name": "org.springframework.boot.support.EnvironmentPostProcessorApplicationListener#setOrder", "start_line": 190, "end_line": 192, "signature": "setOrder(int order)", "original_code": "public void setOrder(int order) {\n\t\tthis.order = order;\n\t}", "doc_comment": ""}, "code_tokens": ["void", "setOrder", "public", "(", ")", "{", "}", "order", ";", "int", "=", "order", "this", ".", "order"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 25, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 13, "n_whitespaces": 11, "n_words": 8, "nloc": 3, "token_counts": 15}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListener.java#200-211", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListener.java", "language": "Java"}, "method": {"name": "processAheadOfTime", "qualified_name": "org.springframework.boot.support.EnvironmentPostProcessorApplicationListener#processAheadOfTime", "start_line": 200, "end_line": 211, "signature": "processAheadOfTime(\n\t\t\t\tConfigurableListableBeanFactory beanFactory)", "original_code": "@Override\n\t\tpublic @Nullable BeanFactoryInitializationAotContribution processAheadOfTime(\n\t\t\t\tConfigurableListableBeanFactory beanFactory) {\n\t\t\tEnvironment environment = beanFactory.getBean(ConfigurableApplicationContext.ENVIRONMENT_BEAN_NAME,\n\t\t\t\t\tEnvironment.class);\n\t\t\tString[] activeProfiles = environment.getActiveProfiles();\n\t\t\tString[] defaultProfiles = environment.getDefaultProfiles();\n\t\t\tif (!ObjectUtils.isEmpty(activeProfiles) && !Arrays.equals(activeProfiles, defaultProfiles)) {\n\t\t\t\treturn new EnvironmentAotContribution(activeProfiles);\n\t\t\t}\n\t\t\treturn null;\n\t\t}", "doc_comment": ""}, "code_tokens": ["BeanFactoryInitializationAotContribution", "processAheadOfTime", "public", "(", ")", "{", "}", "@", "Override", "@", "Nullable", "ConfigurableListableBeanFactory", "beanFactory", "Environment", ";", ";", ";", "if", "return", "null", ";", "environment", "=", "String", "activeProfiles", "=", "String", "defaultProfiles", "=", "(", ")", "{", "}", "beanFactory", ".", "getBean", "[", "]", "environment", ".", "getActiveProfiles", "[", "]", "environment", ".", "getDefaultProfiles", "&&", "return", ";", "(", ",", ")", "(", ")", "(", ")", "!", "!", "new", "EnvironmentAotContribution", "ConfigurableApplicationContext", ".", "ENVIRONMENT_BEAN_NAME", "Environment", ".", "class", "ObjectUtils", ".", "isEmpty", "Arrays", ".", "equals", "(", "activeProfiles", ")", "(", "activeProfiles", ")", "(", "activeProfiles", ",", "defaultProfiles", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 123, "ast_depth": 10, "n_identifiers": 16, "vocab_size": 40, "n_whitespaces": 68, "n_words": 37, "nloc": 12, "token_counts": 83}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListener.java#225-241", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListener.java", "language": "Java"}, "method": {"name": "applyTo", "qualified_name": "org.springframework.boot.support.EnvironmentPostProcessorApplicationListener#applyTo", "start_line": 225, "end_line": 241, "signature": "applyTo(GenerationContext generationContext,\n\t\t\t\tBeanFactoryInitializationCode beanFactoryInitializationCode)", "original_code": "@Override\n\t\tpublic void applyTo(GenerationContext generationContext,\n\t\t\t\tBeanFactoryInitializationCode beanFactoryInitializationCode) {\n\t\t\tGeneratedClass generatedClass = generationContext.getGeneratedClasses()\n\t\t\t\t.addForFeature(AOT_FEATURE_NAME, (type) -> {\n\t\t\t\t\ttype.addModifiers(Modifier.PUBLIC);\n\t\t\t\t\ttype.addJavadoc(\"Configure the environment with AOT optimizations.\");\n\t\t\t\t\ttype.addSuperinterface(EnvironmentPostProcessor.class);\n\t\t\t\t});\n\t\t\tgeneratedClass.getMethods().add(\"postProcessEnvironment\", (method) -> {\n\t\t\t\tmethod.addModifiers(Modifier.PUBLIC);\n\t\t\t\tmethod.addAnnotation(Override.class);\n\t\t\t\tmethod.addParameter(ConfigurableEnvironment.class, ENVIRONMENT_VARIABLE);\n\t\t\t\tmethod.addParameter(SpringApplication.class, \"application\");\n\t\t\t\tmethod.addCode(generateActiveProfilesInitializeCode());\n\t\t\t});\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "applyTo", "public", "(", ",", ")", "{", "}", "@", "Override", "GenerationContext", "generationContext", "BeanFactoryInitializationCode", "beanFactoryInitializationCode", "GeneratedClass", ";", ";", "generatedClass", "=", ".", "add", ".", "addForFeature", "generatedClass", ".", "getMethods", "(", ",", ")", "generationContext", ".", "getGeneratedClasses", "(", "AOT_FEATURE_NAME", ",", ")", "(", ")", "\"", "postProcessEnvironment", "\"", "->", "(", ")", "->", "(", "method", ")", "{", "}", "(", "type", ")", "{", "}", ";", ";", ";", ";", ";", ";", ";", ";", "method", ".", "addModifiers", "method", ".", "addAnnotation", "method", ".", "addParameter", "method", ".", "addParameter", "method", ".", "addCode", "type", ".", "addModifiers", "type", ".", "addJavadoc", "type", ".", "addSuperinterface", "(", ")", "(", ")", "(", ",", "ENVIRONMENT_VARIABLE", ")", "(", ",", ")", "(", ")", "(", ")", "(", ")", "(", ")", "Modifier", ".", "PUBLIC", "Override", ".", "class", "ConfigurableEnvironment", ".", "class", "SpringApplication", ".", "class", "\"", "application", "\"", "generateActiveProfilesInitializeCode", "Modifier", ".", "PUBLIC", "\"", "Configure the environment with AOT optimizations.", "\"", "EnvironmentPostProcessor", ".", "class", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 193, "ast_depth": 14, "n_identifiers": 22, "vocab_size": 45, "n_whitespaces": 97, "n_words": 57, "nloc": 17, "token_counts": 133}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListener.java#243-249", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListener.java", "language": "Java"}, "method": {"name": "generateActiveProfilesInitializeCode", "qualified_name": "org.springframework.boot.support.EnvironmentPostProcessorApplicationListener#generateActiveProfilesInitializeCode", "start_line": 243, "end_line": 249, "signature": "generateActiveProfilesInitializeCode()", "original_code": "private CodeBlock generateActiveProfilesInitializeCode() {\n\t\t\tCodeBlock.Builder code = CodeBlock.builder();\n\t\t\tfor (String activeProfile : this.activeProfiles) {\n\t\t\t\tcode.addStatement(\"$L.addActiveProfile($S)\", ENVIRONMENT_VARIABLE, activeProfile);\n\t\t\t}\n\t\t\treturn code.build();\n\t\t}", "doc_comment": ""}, "code_tokens": ["CodeBlock", "generateActiveProfilesInitializeCode", "private", "(", ")", "{", "}", ";", "for", "(", "String", "activeProfile", ":", ")", "return", ";", "CodeBlock", ".", "Builder", "code", "=", "this", ".", "activeProfiles", "{", "}", "code", ".", "build", "CodeBlock", ".", "builder", ";", "(", ")", "(", ")", "code", ".", "addStatement", "(", ",", "ENVIRONMENT_VARIABLE", ",", "activeProfile", ")", "\"", "$L.addActiveProfile($S)", "\""], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 69, "ast_depth": 10, "n_identifiers": 9, "vocab_size": 26, "n_whitespaces": 38, "n_words": 23, "nloc": 7, "token_counts": 49}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/support/EnvironmentPostProcessorsFactory.java#44-45", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/EnvironmentPostProcessorsFactory.java", "language": "Java"}, "method": {"name": "getEnvironmentPostProcessors", "qualified_name": "org.springframework.boot.support.EnvironmentPostProcessorsFactory#getEnvironmentPostProcessors", "start_line": 44, "end_line": 45, "signature": "getEnvironmentPostProcessors(DeferredLogFactory logFactory,\n\t\t\tConfigurableBootstrapContext bootstrapContext)", "original_code": "List<EnvironmentPostProcessor> getEnvironmentPostProcessors(DeferredLogFactory logFactory,\n\t\t\tConfigurableBootstrapContext bootstrapContext);", "doc_comment": "/**\n\t * Create all requested {@link EnvironmentPostProcessor} instances.\n\t * @param logFactory a deferred log factory\n\t * @param bootstrapContext a bootstrap context\n\t * @return the post processor instances\n\t */"}, "code_tokens": ["getEnvironmentPostProcessors", ";", "List", "(", ",", ")", "<", "EnvironmentPostProcessor", ">", "DeferredLogFactory", "logFactory", "ConfigurableBootstrapContext", "bootstrapContext"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 20, "ast_depth": 5, "n_identifiers": 3, "vocab_size": 13, "n_whitespaces": 7, "n_words": 7, "nloc": 2, "token_counts": 13}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/support/EnvironmentPostProcessorsFactory.java#53-56", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/EnvironmentPostProcessorsFactory.java", "language": "Java"}, "method": {"name": "fromSpringFactories", "qualified_name": "org.springframework.boot.support.EnvironmentPostProcessorsFactory#fromSpringFactories", "start_line": 53, "end_line": 56, "signature": "fromSpringFactories(@Nullable ClassLoader classLoader)", "original_code": "static EnvironmentPostProcessorsFactory fromSpringFactories(@Nullable ClassLoader classLoader) {\n\t\treturn new SpringFactoriesEnvironmentPostProcessorsFactory(\n\t\t\t\tSpringFactoriesLoader.forDefaultResourceLocation(classLoader));\n\t}", "doc_comment": "/**\n\t * Return a {@link EnvironmentPostProcessorsFactory} backed by\n\t * {@code spring.factories}.\n\t * @param classLoader the source class loader\n\t * @return an {@link EnvironmentPostProcessorsFactory} instance\n\t */"}, "code_tokens": ["EnvironmentPostProcessorsFactory", "fromSpringFactories", "static", "(", ")", "{", "}", "ClassLoader", "classLoader", "return", ";", "new", "SpringFactoriesEnvironmentPostProcessorsFactory", "@", "Nullable", "(", ")", "SpringFactoriesLoader", ".", "forDefaultResourceLocation", "(", "classLoader", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 36, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 18, "n_whitespaces": 17, "n_words": 12, "nloc": 4, "token_counts": 23}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/support/EnvironmentPostProcessorsFactory.java#64-66", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/EnvironmentPostProcessorsFactory.java", "language": "Java"}, "method": {"name": "of", "qualified_name": "org.springframework.boot.support.EnvironmentPostProcessorsFactory#of", "start_line": 64, "end_line": 66, "signature": "of(Class<?>... classes)", "original_code": "static EnvironmentPostProcessorsFactory of(Class<?>... classes) {\n\t\treturn new ReflectionEnvironmentPostProcessorsFactory(classes);\n\t}", "doc_comment": "/**\n\t * Return a {@link EnvironmentPostProcessorsFactory} that reflectively creates post\n\t * processors from the given classes.\n\t * @param classes the post processor classes\n\t * @return an {@link EnvironmentPostProcessorsFactory} instance\n\t */"}, "code_tokens": ["EnvironmentPostProcessorsFactory", "of", "static", "(", ")", "{", "}", "...", "return", ";", "Class", "classes", "new", "ReflectionEnvironmentPostProcessorsFactory", "<", ">", "(", "classes", ")", "?"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 33, "ast_depth": 8, "n_identifiers": 2, "vocab_size": 17, "n_whitespaces": 11, "n_words": 9, "nloc": 3, "token_counts": 20}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/support/EnvironmentPostProcessorsFactory.java#74-76", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/EnvironmentPostProcessorsFactory.java", "language": "Java"}, "method": {"name": "of", "qualified_name": "org.springframework.boot.support.EnvironmentPostProcessorsFactory#of", "start_line": 74, "end_line": 76, "signature": "of(String... classNames)", "original_code": "static EnvironmentPostProcessorsFactory of(String... classNames) {\n\t\treturn of(null, classNames);\n\t}", "doc_comment": "/**\n\t * Return a {@link EnvironmentPostProcessorsFactory} that reflectively creates post\n\t * processors from the given class names.\n\t * @param classNames the post processor class names\n\t * @return an {@link EnvironmentPostProcessorsFactory} instance\n\t */"}, "code_tokens": ["EnvironmentPostProcessorsFactory", "of", "static", "(", ")", "{", "}", "String", "...", "return", ";", "classNames", "of", "(", "null", ",", "classNames", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 14, "n_whitespaces": 11, "n_words": 9, "nloc": 3, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/support/EnvironmentPostProcessorsFactory.java#86-88", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/EnvironmentPostProcessorsFactory.java", "language": "Java"}, "method": {"name": "of", "qualified_name": "org.springframework.boot.support.EnvironmentPostProcessorsFactory#of", "start_line": 86, "end_line": 88, "signature": "of(@Nullable ClassLoader classLoader, String... classNames)", "original_code": "static EnvironmentPostProcessorsFactory of(@Nullable ClassLoader classLoader, String... classNames) {\n\t\treturn new ReflectionEnvironmentPostProcessorsFactory(classLoader, classNames);\n\t}", "doc_comment": "/**\n\t * Return a {@link EnvironmentPostProcessorsFactory} that reflectively creates post\n\t * processors from the given class names.\n\t * @param classLoader the source class loader\n\t * @param classNames the post processor class names\n\t * @return an {@link EnvironmentPostProcessorsFactory} instance\n\t * @since 2.4.8\n\t */"}, "code_tokens": ["EnvironmentPostProcessorsFactory", "of", "static", "(", ",", ")", "{", "}", "ClassLoader", "classLoader", "String", "...", "return", ";", "classNames", "new", "ReflectionEnvironmentPostProcessorsFactory", "@", "Nullable", "(", "classLoader", ",", "classNames", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 37, "ast_depth": 7, "n_identifiers": 4, "vocab_size": 19, "n_whitespaces": 15, "n_words": 13, "nloc": 3, "token_counts": 24}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/support/RandomValuePropertySourceEnvironmentPostProcessor.java#52-55", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/RandomValuePropertySourceEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "getOrder", "qualified_name": "org.springframework.boot.support.RandomValuePropertySourceEnvironmentPostProcessor#getOrder", "start_line": 52, "end_line": 55, "signature": "getOrder()", "original_code": "@Override\n\tpublic int getOrder() {\n\t\treturn ORDER;\n\t}", "doc_comment": ""}, "code_tokens": ["getOrder", "public", "int", "(", ")", "{", "}", "@", "Override", "return", "ORDER", ";"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 20, "ast_depth": 5, "n_identifiers": 3, "vocab_size": 12, "n_whitespaces": 11, "n_words": 6, "nloc": 4, "token_counts": 12}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/support/RandomValuePropertySourceEnvironmentPostProcessor.java#57-60", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/RandomValuePropertySourceEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "postProcessEnvironment", "qualified_name": "org.springframework.boot.support.RandomValuePropertySourceEnvironmentPostProcessor#postProcessEnvironment", "start_line": 57, "end_line": 60, "signature": "postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application)", "original_code": "@Override\n\tpublic void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {\n\t\tRandomValuePropertySource.addToEnvironment(environment, this.logger);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "postProcessEnvironment", "public", "(", ",", ")", "{", "}", "@", "Override", "ConfigurableEnvironment", "environment", "SpringApplication", "application", ";", "RandomValuePropertySource", ".", "addToEnvironment", "(", "environment", ",", ")", "this", ".", "logger"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 37, "ast_depth": 8, "n_identifiers": 7, "vocab_size": 20, "n_whitespaces": 14, "n_words": 13, "nloc": 4, "token_counts": 25}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/support/ReflectionEnvironmentPostProcessorsFactory.java#63-79", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/ReflectionEnvironmentPostProcessorsFactory.java", "language": "Java"}, "method": {"name": "getEnvironmentPostProcessors", "qualified_name": "org.springframework.boot.support.ReflectionEnvironmentPostProcessorsFactory#getEnvironmentPostProcessors", "start_line": 63, "end_line": 79, "signature": "getEnvironmentPostProcessors(DeferredLogFactory logFactory,\n\t\t\tConfigurableBootstrapContext bootstrapContext)", "original_code": "@Override\n\tpublic List<EnvironmentPostProcessor> getEnvironmentPostProcessors(DeferredLogFactory logFactory,\n\t\t\tConfigurableBootstrapContext bootstrapContext) {\n\t\tInstantiator<EnvironmentPostProcessor> instantiator = new Instantiator<>(EnvironmentPostProcessor.class,\n\t\t\t\t(parameters) -> {\n\t\t\t\t\tparameters.add(DeferredLogFactory.class, logFactory);\n\t\t\t\t\tparameters.add(Log.class, logFactory::getLog);\n\t\t\t\t\tparameters.add(ConfigurableBootstrapContext.class, bootstrapContext);\n\t\t\t\t\tparameters.add(BootstrapContext.class, bootstrapContext);\n\t\t\t\t\tparameters.add(BootstrapRegistry.class, bootstrapContext);\n\t\t\t\t});\n\t\tif (this.classes != null) {\n\t\t\treturn instantiator.instantiateTypes(this.classes);\n\t\t}\n\t\tAssert.state(this.classNames != null, \"'classNames' must not be null\");\n\t\treturn instantiator.instantiate(this.classLoader, this.classNames);\n\t}", "doc_comment": ""}, "code_tokens": ["getEnvironmentPostProcessors", "public", "List", "(", ",", ")", "{", "}", "@", "Override", "<", "EnvironmentPostProcessor", ">", "DeferredLogFactory", "logFactory", "ConfigurableBootstrapContext", "bootstrapContext", ";", "if", ";", "return", ";", "Instantiator", "instantiator", "=", "(", ")", "{", "}", "Assert", ".", "state", "instantiator", ".", "instantiate", "<", "EnvironmentPostProcessor", ">", "new", "!=", "null", "return", ";", "(", ",", ")", "(", ",", ")", "Instantiator", "(", ",", ")", "this", ".", "classes", "instantiator", ".", "instantiateTypes", "!=", "null", "\"", "'classNames' must not be null", "\"", "this", ".", "classLoader", "this", ".", "classNames", "<", ">", "EnvironmentPostProcessor", ".", "class", "->", "(", ")", "this", ".", "classNames", "(", "parameters", ")", "{", "}", "this", ".", "classes", ";", ";", ";", ";", ";", "parameters", ".", "add", "parameters", ".", "add", "parameters", ".", "add", "parameters", ".", "add", "parameters", ".", "add", "(", ",", "logFactory", ")", "(", ",", ")", "(", ",", "bootstrapContext", ")", "(", ",", "bootstrapContext", ")", "(", ",", "bootstrapContext", ")", "DeferredLogFactory", ".", "class", "Log", ".", "class", "logFactory", "::", "getLog", "ConfigurableBootstrapContext", ".", "class", "BootstrapContext", ".", "class", "BootstrapRegistry", ".", "class"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 209, "ast_depth": 14, "n_identifiers": 15, "vocab_size": 46, "n_whitespaces": 97, "n_words": 69, "nloc": 17, "token_counts": 146}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessor.java#87-90", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "getOrder", "qualified_name": "org.springframework.boot.support.SpringApplicationJsonEnvironmentPostProcessor#getOrder", "start_line": 87, "end_line": 90, "signature": "getOrder()", "original_code": "@Override\n\tpublic int getOrder() {\n\t\treturn this.order;\n\t}", "doc_comment": ""}, "code_tokens": ["getOrder", "public", "int", "(", ")", "{", "}", "@", "Override", "return", ";", "this", ".", "order"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 23, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 11, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessor.java#92-94", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "setOrder", "qualified_name": "org.springframework.boot.support.SpringApplicationJsonEnvironmentPostProcessor#setOrder", "start_line": 92, "end_line": 94, "signature": "setOrder(int order)", "original_code": "public void setOrder(int order) {\n\t\tthis.order = order;\n\t}", "doc_comment": ""}, "code_tokens": ["void", "setOrder", "public", "(", ")", "{", "}", "order", ";", "int", "=", "order", "this", ".", "order"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 25, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 13, "n_whitespaces": 11, "n_words": 8, "nloc": 3, "token_counts": 15}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessor.java#96-104", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "postProcessEnvironment", "qualified_name": "org.springframework.boot.support.SpringApplicationJsonEnvironmentPostProcessor#postProcessEnvironment", "start_line": 96, "end_line": 104, "signature": "postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application)", "original_code": "@Override\n\tpublic void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {\n\t\tMutablePropertySources propertySources = environment.getPropertySources();\n\t\tpropertySources.stream()\n\t\t\t.map(JsonPropertyValue::get)\n\t\t\t.filter(Objects::nonNull)\n\t\t\t.findFirst()\n\t\t\t.ifPresent((v) -> processJson(environment, v));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "postProcessEnvironment", "public", "(", ",", ")", "{", "}", "@", "Override", "ConfigurableEnvironment", "environment", "SpringApplication", "application", "MutablePropertySources", ";", ";", "propertySources", "=", ".", "ifPresent", "environment", ".", "getPropertySources", ".", "findFirst", "(", ")", "(", ")", ".", "filter", "(", ")", "->", ".", "map", "(", ")", "(", "v", ")", "processJson", "propertySources", ".", "stream", "(", ")", "Objects", "::", "nonNull", "(", "environment", ",", "v", ")", "(", ")", "JsonPropertyValue", "::", "get"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 90, "ast_depth": 11, "n_identifiers": 17, "vocab_size": 33, "n_whitespaces": 38, "n_words": 26, "nloc": 9, "token_counts": 61}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessor.java#106-112", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "processJson", "qualified_name": "org.springframework.boot.support.SpringApplicationJsonEnvironmentPostProcessor#processJson", "start_line": 106, "end_line": 112, "signature": "processJson(ConfigurableEnvironment environment, JsonPropertyValue propertyValue)", "original_code": "private void processJson(ConfigurableEnvironment environment, JsonPropertyValue propertyValue) {\n\t\tJsonParser parser = JsonParserFactory.getJsonParser();\n\t\tMap<String, Object> map = parser.parseMap(propertyValue.getJson());\n\t\tif (!map.isEmpty()) {\n\t\t\taddJsonPropertySource(environment, new JsonPropertySource(propertyValue, flatten(map)));\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "processJson", "private", "(", ",", ")", "{", "}", "ConfigurableEnvironment", "environment", "JsonPropertyValue", "propertyValue", "JsonParser", ";", ";", "if", "parser", "=", "Map", "map", "=", "(", ")", "{", "}", "JsonParserFactory", ".", "getJsonParser", "<", "String", ",", "Object", ">", "parser", ".", "parseMap", "!", ";", "(", ")", "(", ")", "map", ".", "isEmpty", "addJsonPropertySource", "propertyValue", ".", "getJson", "(", ")", "(", "environment", ",", ")", "(", ")", "new", "JsonPropertySource", "(", "propertyValue", ",", ")", "flatten", "(", "map", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 99, "ast_depth": 13, "n_identifiers": 12, "vocab_size": 34, "n_whitespaces": 36, "n_words": 29, "nloc": 7, "token_counts": 67}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessor.java#119-123", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "flatten", "qualified_name": "org.springframework.boot.support.SpringApplicationJsonEnvironmentPostProcessor#flatten", "start_line": 119, "end_line": 123, "signature": "flatten(Map<String, Object> map)", "original_code": "private Map<String, Object> flatten(Map<String, Object> map) {\n\t\tMap<String, Object> result = new LinkedHashMap<>();\n\t\tflatten(null, result, map);\n\t\treturn result;\n\t}", "doc_comment": "/**\n\t * Flatten the map keys using period separator.\n\t * @param map the map that should be flattened\n\t * @return the flattened map\n\t */"}, "code_tokens": ["flatten", "private", "Map", "(", ")", "{", "}", "<", "String", ",", "Object", ">", "map", ";", ";", "return", "result", ";", "Map", "Map", "result", "=", "flatten", "<", "String", ",", "Object", ">", "<", "String", ",", "Object", ">", "new", "(", "null", ",", "result", ",", "map", ")", "LinkedHashMap", "(", ")", "<", ">"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 68, "ast_depth": 9, "n_identifiers": 3, "vocab_size": 20, "n_whitespaces": 25, "n_words": 21, "nloc": 5, "token_counts": 46}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessor.java#125-128", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "flatten", "qualified_name": "org.springframework.boot.support.SpringApplicationJsonEnvironmentPostProcessor#flatten", "start_line": 125, "end_line": 128, "signature": "flatten(@Nullable String prefix, Map<String, Object> result, Map<String, Object> map)", "original_code": "private void flatten(@Nullable String prefix, Map<String, Object> result, Map<String, Object> map) {\n\t\tString namePrefix = (prefix != null) ? prefix + \".\" : \"\";\n\t\tmap.forEach((key, value) -> extract(namePrefix + key, result, value));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "flatten", "private", "(", ",", ",", ")", "{", "}", "String", "prefix", "result", "map", "String", ";", ";", "Map", "Map", "namePrefix", "=", "map", ".", "forEach", "@", "Nullable", "<", "String", ",", "Object", ">", "<", "String", ",", "Object", ">", "?", ":", "(", ")", "(", ")", "prefix", "+", "\"", "\"", "->", "prefix", "!=", "null", "\"", ".", "\"", "(", "key", ",", "value", ")", "extract", "(", ",", "result", ",", "value", ")", "namePrefix", "+", "key"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 97, "ast_depth": 11, "n_identifiers": 10, "vocab_size": 33, "n_whitespaces": 37, "n_words": 28, "nloc": 4, "token_counts": 67}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessor.java#130-153", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "extract", "qualified_name": "org.springframework.boot.support.SpringApplicationJsonEnvironmentPostProcessor#extract", "start_line": 130, "end_line": 153, "signature": "extract(String name, Map<String, Object> result, Object value)", "original_code": "@SuppressWarnings(\"unchecked\")\n\tprivate void extract(String name, Map<String, Object> result, Object value) {\n\t\tif (value instanceof Map<?, ?> map) {\n\t\t\tif (CollectionUtils.isEmpty(map)) {\n\t\t\t\tresult.put(name, value);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tflatten(name, result, (Map<String, Object>) value);\n\t\t}\n\t\telse if (value instanceof Collection<?> collection) {\n\t\t\tif (CollectionUtils.isEmpty(collection)) {\n\t\t\t\tresult.put(name, value);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tint index = 0;\n\t\t\tfor (Object object : collection) {\n\t\t\t\textract(name + \"[\" + index + \"]\", result, object);\n\t\t\t\tindex++;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tresult.put(name, value);\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "extract", "private", "(", ",", ",", ")", "{", "}", "@", "SuppressWarnings", "String", "name", "result", "Object", "value", "if", "else", "(", ")", "Map", "(", ")", "{", "}", "if", "else", "\"", "unchecked", "\"", "<", "String", ",", "Object", ">", "value", "instanceof", "map", "if", ";", "(", ")", "{", "}", "{", "}", "Map", "(", ")", "{", "}", "flatten", "value", "instanceof", "collection", "if", ";", "for", "(", "Object", "object", ":", "collection", ")", ";", "<", ",", ">", "CollectionUtils", ".", "isEmpty", ";", "return", ";", "(", "name", ",", "result", ",", ")", "Collection", "(", ")", "{", "}", "int", "index", "=", "0", "{", "}", "result", ".", "put", "?", "?", "(", "map", ")", "result", ".", "put", "(", ")", "value", "<", ">", "CollectionUtils", ".", "isEmpty", ";", "return", ";", ";", ";", "(", "name", ",", "value", ")", "(", "name", ",", "value", ")", "Map", "?", "(", "collection", ")", "result", ".", "put", "extract", "index", "++", "<", "String", ",", "Object", ">", "(", "name", ",", "value", ")", "(", ",", "result", ",", "object", ")", "+", "+", "index", "\"", "]", "\"", "name", "+", "\"", "[", "\""], "metrics": {"cyclomatic_complexity": 6, "n_ast_nodes": 234, "ast_depth": 16, "n_identifiers": 13, "vocab_size": 45, "n_whitespaces": 137, "n_words": 67, "nloc": 24, "token_counts": 163}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessor.java#155-164", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "addJsonPropertySource", "qualified_name": "org.springframework.boot.support.SpringApplicationJsonEnvironmentPostProcessor#addJsonPropertySource", "start_line": 155, "end_line": 164, "signature": "addJsonPropertySource(ConfigurableEnvironment environment, PropertySource<?> source)", "original_code": "private void addJsonPropertySource(ConfigurableEnvironment environment, PropertySource<?> source) {\n\t\tMutablePropertySources sources = environment.getPropertySources();\n\t\tString name = findPropertySource(sources);\n\t\tif (sources.contains(name)) {\n\t\t\tsources.addBefore(name, source);\n\t\t}\n\t\telse {\n\t\t\tsources.addFirst(source);\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "addJsonPropertySource", "private", "(", ",", ")", "{", "}", "ConfigurableEnvironment", "environment", "source", "MutablePropertySources", ";", "String", ";", "if", "else", "PropertySource", "sources", "=", "name", "=", "(", ")", "{", "}", "{", "}", "<", ">", "environment", ".", "getPropertySources", "findPropertySource", "sources", ".", "contains", ";", ";", "?", "(", ")", "(", "sources", ")", "(", "name", ")", "sources", ".", "addBefore", "sources", ".", "addFirst", "(", "name", ",", "source", ")", "(", "source", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 92, "ast_depth": 9, "n_identifiers": 10, "vocab_size": 29, "n_whitespaces": 44, "n_words": 27, "nloc": 10, "token_counts": 62}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessor.java#166-177", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "findPropertySource", "qualified_name": "org.springframework.boot.support.SpringApplicationJsonEnvironmentPostProcessor#findPropertySource", "start_line": 166, "end_line": 177, "signature": "findPropertySource(MutablePropertySources sources)", "original_code": "private String findPropertySource(MutablePropertySources sources) {\n\t\tif (ClassUtils.isPresent(SERVLET_ENVIRONMENT_CLASS, null)) {\n\t\t\tPropertySource<?> servletPropertySource = sources.stream()\n\t\t\t\t.filter((source) -> SERVLET_ENVIRONMENT_PROPERTY_SOURCES.contains(source.getName()))\n\t\t\t\t.findFirst()\n\t\t\t\t.orElse(null);\n\t\t\tif (servletPropertySource != null) {\n\t\t\t\treturn servletPropertySource.getName();\n\t\t\t}\n\t\t}\n\t\treturn StandardEnvironment.SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME;\n\t}", "doc_comment": ""}, "code_tokens": ["String", "findPropertySource", "private", "(", ")", "{", "}", "MutablePropertySources", "sources", "if", "return", ";", "(", ")", "{", "}", "StandardEnvironment", ".", "SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME", "ClassUtils", ".", "isPresent", ";", "if", "(", "SERVLET_ENVIRONMENT_CLASS", ",", "null", ")", "PropertySource", "servletPropertySource", "=", "(", ")", "{", "}", "<", ">", ".", "orElse", "servletPropertySource", "!=", "null", "return", ";", "?", ".", "findFirst", "(", "null", ")", "servletPropertySource", ".", "getName", ".", "filter", "(", ")", "(", ")", "sources", ".", "stream", "(", ")", "(", ")", "->", "(", "source", ")", "SERVLET_ENVIRONMENT_PROPERTY_SOURCES", ".", "contains", "(", ")", "source", ".", "getName", "(", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 120, "ast_depth": 17, "n_identifiers": 16, "vocab_size": 36, "n_whitespaces": 61, "n_words": 32, "nloc": 12, "token_counts": 81}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessor.java#188-191", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "getOrigin", "qualified_name": "org.springframework.boot.support.SpringApplicationJsonEnvironmentPostProcessor#getOrigin", "start_line": 188, "end_line": 191, "signature": "getOrigin(String key)", "original_code": "@Override\n\t\tpublic Origin getOrigin(String key) {\n\t\t\treturn this.propertyValue.getOrigin();\n\t\t}", "doc_comment": ""}, "code_tokens": ["Origin", "getOrigin", "public", "(", ")", "{", "}", "@", "Override", "String", "key", "return", ";", ".", "getOrigin", "this", ".", "propertyValue", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 31, "ast_depth": 7, "n_identifiers": 4, "vocab_size": 16, "n_whitespaces": 15, "n_words": 10, "nloc": 4, "token_counts": 20}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessor.java#212-214", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "getJson", "qualified_name": "org.springframework.boot.support.SpringApplicationJsonEnvironmentPostProcessor#getJson", "start_line": 212, "end_line": 214, "signature": "getJson()", "original_code": "String getJson() {\n\t\t\treturn this.json;\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getJson", "(", ")", "{", "}", "return", ";", "this", ".", "json"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 17, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 11, "n_whitespaces": 10, "n_words": 5, "nloc": 3, "token_counts": 11}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessor.java#216-218", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "getOrigin", "qualified_name": "org.springframework.boot.support.SpringApplicationJsonEnvironmentPostProcessor#getOrigin", "start_line": 216, "end_line": 218, "signature": "getOrigin()", "original_code": "Origin getOrigin() {\n\t\t\treturn PropertySourceOrigin.get(this.propertySource, this.propertyName);\n\t\t}", "doc_comment": ""}, "code_tokens": ["Origin", "getOrigin", "(", ")", "{", "}", "return", ";", "PropertySourceOrigin", ".", "get", "(", ",", ")", "this", ".", "propertySource", "this", ".", "propertyName"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 29, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 15, "n_whitespaces": 11, "n_words": 9, "nloc": 3, "token_counts": 20}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessor.java#220-228", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "get", "qualified_name": "org.springframework.boot.support.SpringApplicationJsonEnvironmentPostProcessor#get", "start_line": 220, "end_line": 228, "signature": "get(PropertySource<?> propertySource)", "original_code": "static @Nullable JsonPropertyValue get(PropertySource<?> propertySource) {\n\t\t\tfor (String candidate : CANDIDATES) {\n\t\t\t\tObject value = propertySource.getProperty(candidate);\n\t\t\t\tif (value instanceof String string && StringUtils.hasLength(string)) {\n\t\t\t\t\treturn new JsonPropertyValue(propertySource, candidate, string);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}", "doc_comment": ""}, "code_tokens": ["JsonPropertyValue", "get", "static", "(", ")", "{", "}", "@", "Nullable", "propertySource", "for", "(", "String", "candidate", ":", "CANDIDATES", ")", "return", "null", ";", "PropertySource", "{", "}", "<", ">", "Object", ";", "if", "?", "value", "=", "(", ")", "{", "}", "propertySource", ".", "getProperty", "&&", "return", ";", "(", "candidate", ")", "value", "instanceof", "String", "string", "StringUtils", ".", "hasLength", "new", "JsonPropertyValue", "(", "string", ")", "(", "propertySource", ",", "candidate", ",", "string", ")"], "metrics": {"cyclomatic_complexity": 4, "n_ast_nodes": 90, "ast_depth": 11, "n_identifiers": 10, "vocab_size": 35, "n_whitespaces": 61, "n_words": 31, "nloc": 9, "token_counts": 63}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/support/SpringFactoriesEnvironmentPostProcessorsFactory.java#42-50", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/SpringFactoriesEnvironmentPostProcessorsFactory.java", "language": "Java"}, "method": {"name": "getEnvironmentPostProcessors", "qualified_name": "org.springframework.boot.support.SpringFactoriesEnvironmentPostProcessorsFactory#getEnvironmentPostProcessors", "start_line": 42, "end_line": 50, "signature": "getEnvironmentPostProcessors(DeferredLogFactory logFactory,\n\t\t\tConfigurableBootstrapContext bootstrapContext)", "original_code": "@Override\n\tpublic List<EnvironmentPostProcessor> getEnvironmentPostProcessors(DeferredLogFactory logFactory,\n\t\t\tConfigurableBootstrapContext bootstrapContext) {\n\t\tArgumentResolver argumentResolver = ArgumentResolver.of(DeferredLogFactory.class, logFactory);\n\t\targumentResolver = argumentResolver.and(ConfigurableBootstrapContext.class, bootstrapContext);\n\t\targumentResolver = argumentResolver.and(BootstrapContext.class, bootstrapContext);\n\t\targumentResolver = argumentResolver.and(BootstrapRegistry.class, bootstrapContext);\n\t\treturn this.loader.load(EnvironmentPostProcessor.class, argumentResolver);\n\t}", "doc_comment": ""}, "code_tokens": ["getEnvironmentPostProcessors", "public", "List", "(", ",", ")", "{", "}", "@", "Override", "<", "EnvironmentPostProcessor", ">", "DeferredLogFactory", "logFactory", "ConfigurableBootstrapContext", "bootstrapContext", "ArgumentResolver", ";", ";", ";", ";", "return", ";", "argumentResolver", "=", "argumentResolver", "=", "argumentResolver", "=", "argumentResolver", "=", ".", "load", "ArgumentResolver", ".", "of", "argumentResolver", ".", "and", "argumentResolver", ".", "and", "argumentResolver", ".", "and", "this", ".", "loader", "(", ",", "argumentResolver", ")", "(", ",", "logFactory", ")", "(", ",", "bootstrapContext", ")", "(", ",", "bootstrapContext", ")", "(", ",", "bootstrapContext", ")", "EnvironmentPostProcessor", ".", "class", "DeferredLogFactory", ".", "class", "ConfigurableBootstrapContext", ".", "class", "BootstrapContext", ".", "class", "BootstrapRegistry", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 119, "ast_depth": 9, "n_identifiers": 10, "vocab_size": 31, "n_whitespaces": 43, "n_words": 41, "nloc": 9, "token_counts": 84}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/support/SystemEnvironmentPropertySourceEnvironmentPostProcessor.java#53-60", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/SystemEnvironmentPropertySourceEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "postProcessEnvironment", "qualified_name": "org.springframework.boot.support.SystemEnvironmentPropertySourceEnvironmentPostProcessor#postProcessEnvironment", "start_line": 53, "end_line": 60, "signature": "postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application)", "original_code": "@Override\n\tpublic void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {\n\t\tString sourceName = StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME;\n\t\tPropertySource<?> propertySource = environment.getPropertySources().get(sourceName);\n\t\tif (propertySource != null) {\n\t\t\treplacePropertySource(environment, sourceName, propertySource, application.getEnvironmentPrefix());\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "postProcessEnvironment", "public", "(", ",", ")", "{", "}", "@", "Override", "ConfigurableEnvironment", "environment", "SpringApplication", "application", "String", ";", ";", "if", "sourceName", "=", "PropertySource", "propertySource", "=", "(", ")", "{", "}", "StandardEnvironment", ".", "SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME", "<", ">", ".", "get", "propertySource", "!=", "null", ";", "?", "environment", ".", "getPropertySources", "(", "sourceName", ")", "replacePropertySource", "(", ")", "(", "environment", ",", "sourceName", ",", "propertySource", ",", ")", "application", ".", "getEnvironmentPrefix", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 90, "ast_depth": 11, "n_identifiers": 12, "vocab_size": 33, "n_whitespaces": 39, "n_words": 27, "nloc": 8, "token_counts": 61}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/support/SystemEnvironmentPropertySourceEnvironmentPostProcessor.java#62-69", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/SystemEnvironmentPropertySourceEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "replacePropertySource", "qualified_name": "org.springframework.boot.support.SystemEnvironmentPropertySourceEnvironmentPostProcessor#replacePropertySource", "start_line": 62, "end_line": 69, "signature": "replacePropertySource(ConfigurableEnvironment environment, String sourceName,\n\t\t\tPropertySource<?> propertySource, @Nullable String environmentPrefix)", "original_code": "@SuppressWarnings(\"unchecked\")\n\tprivate void replacePropertySource(ConfigurableEnvironment environment, String sourceName,\n\t\t\tPropertySource<?> propertySource, @Nullable String environmentPrefix) {\n\t\tMap<String, Object> originalSource = (Map<String, Object>) propertySource.getSource();\n\t\tSystemEnvironmentPropertySource source = new OriginAwareSystemEnvironmentPropertySource(sourceName,\n\t\t\t\toriginalSource, environmentPrefix);\n\t\tenvironment.getPropertySources().replace(sourceName, source);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "replacePropertySource", "private", "(", ",", ",", ",", ")", "{", "}", "@", "SuppressWarnings", "ConfigurableEnvironment", "environment", "String", "sourceName", "propertySource", "String", "environmentPrefix", ";", "SystemEnvironmentPropertySource", ";", ";", "(", ")", "PropertySource", "Map", "originalSource", "=", "source", "=", ".", "replace", "\"", "unchecked", "\"", "<", ">", "@", "Nullable", "<", "String", ",", "Object", ">", "(", ")", "new", "OriginAwareSystemEnvironmentPropertySource", "environment", ".", "getPropertySources", "(", "sourceName", ",", "source", ")", "?", "Map", "propertySource", ".", "getSource", "(", "sourceName", ",", "originalSource", ",", "environmentPrefix", ")", "(", ")", "<", "String", ",", "Object", ">", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 113, "ast_depth": 9, "n_identifiers": 12, "vocab_size": 36, "n_whitespaces": 44, "n_words": 35, "nloc": 8, "token_counts": 78}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/support/SystemEnvironmentPropertySourceEnvironmentPostProcessor.java#71-74", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/SystemEnvironmentPropertySourceEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "getOrder", "qualified_name": "org.springframework.boot.support.SystemEnvironmentPropertySourceEnvironmentPostProcessor#getOrder", "start_line": 71, "end_line": 74, "signature": "getOrder()", "original_code": "@Override\n\tpublic int getOrder() {\n\t\treturn this.order;\n\t}", "doc_comment": ""}, "code_tokens": ["getOrder", "public", "int", "(", ")", "{", "}", "@", "Override", "return", ";", "this", ".", "order"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 23, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 11, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/support/SystemEnvironmentPropertySourceEnvironmentPostProcessor.java#76-78", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/SystemEnvironmentPropertySourceEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "setOrder", "qualified_name": "org.springframework.boot.support.SystemEnvironmentPropertySourceEnvironmentPostProcessor#setOrder", "start_line": 76, "end_line": 78, "signature": "setOrder(int order)", "original_code": "public void setOrder(int order) {\n\t\tthis.order = order;\n\t}", "doc_comment": ""}, "code_tokens": ["void", "setOrder", "public", "(", ")", "{", "}", "order", ";", "int", "=", "order", "this", ".", "order"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 25, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 13, "n_whitespaces": 11, "n_words": 8, "nloc": 3, "token_counts": 15}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/support/SystemEnvironmentPropertySourceEnvironmentPostProcessor.java#94-102", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/SystemEnvironmentPropertySourceEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "determinePrefix", "qualified_name": "org.springframework.boot.support.SystemEnvironmentPropertySourceEnvironmentPostProcessor#determinePrefix", "start_line": 94, "end_line": 102, "signature": "determinePrefix(@Nullable String environmentPrefix)", "original_code": "private @Nullable String determinePrefix(@Nullable String environmentPrefix) {\n\t\t\tif (!StringUtils.hasText(environmentPrefix)) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif (environmentPrefix.endsWith(\".\") || environmentPrefix.endsWith(\"_\") || environmentPrefix.endsWith(\"-\")) {\n\t\t\t\treturn environmentPrefix.substring(0, environmentPrefix.length() - 1);\n\t\t\t}\n\t\t\treturn environmentPrefix;\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "determinePrefix", "private", "(", ")", "{", "}", "@", "Nullable", "String", "environmentPrefix", "if", "if", "return", "environmentPrefix", ";", "(", ")", "{", "}", "(", ")", "{", "}", "@", "Nullable", "!", "return", "null", ";", "||", "return", ";", "StringUtils", ".", "hasText", "||", "environmentPrefix", ".", "endsWith", "environmentPrefix", ".", "substring", "(", "environmentPrefix", ")", "environmentPrefix", ".", "endsWith", "environmentPrefix", ".", "endsWith", "(", ")", "(", "0", ",", ")", "(", ")", "(", ")", "\"", "-", "\"", "-", "1", "\"", ".", "\"", "\"", "_", "\"", "environmentPrefix", ".", "length", "(", ")"], "metrics": {"cyclomatic_complexity": 5, "n_ast_nodes": 115, "ast_depth": 12, "n_identifiers": 8, "vocab_size": 28, "n_whitespaces": 53, "n_words": 30, "nloc": 9, "token_counts": 78}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/support/SystemEnvironmentPropertySourceEnvironmentPostProcessor.java#104-107", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/SystemEnvironmentPropertySourceEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "containsProperty", "qualified_name": "org.springframework.boot.support.SystemEnvironmentPropertySourceEnvironmentPostProcessor#containsProperty", "start_line": 104, "end_line": 107, "signature": "containsProperty(String name)", "original_code": "@Override\n\t\tpublic boolean containsProperty(String name) {\n\t\t\treturn super.containsProperty(name);\n\t\t}", "doc_comment": ""}, "code_tokens": ["boolean", "containsProperty", "public", "(", ")", "{", "}", "@", "Override", "String", "name", "return", ";", "super", ".", "containsProperty", "(", "name", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 29, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 15, "n_whitespaces": 15, "n_words": 10, "nloc": 4, "token_counts": 19}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/support/SystemEnvironmentPropertySourceEnvironmentPostProcessor.java#109-112", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/SystemEnvironmentPropertySourceEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "getProperty", "qualified_name": "org.springframework.boot.support.SystemEnvironmentPropertySourceEnvironmentPostProcessor#getProperty", "start_line": 109, "end_line": 112, "signature": "getProperty(String name)", "original_code": "@Override\n\t\tpublic @Nullable Object getProperty(String name) {\n\t\t\treturn super.getProperty(name);\n\t\t}", "doc_comment": ""}, "code_tokens": ["Object", "getProperty", "public", "(", ")", "{", "}", "@", "Override", "@", "Nullable", "String", "name", "return", ";", "super", ".", "getProperty", "(", "name", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 32, "ast_depth": 7, "n_identifiers": 4, "vocab_size": 16, "n_whitespaces": 16, "n_words": 11, "nloc": 4, "token_counts": 21}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/support/SystemEnvironmentPropertySourceEnvironmentPostProcessor.java#114-121", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/SystemEnvironmentPropertySourceEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "getOrigin", "qualified_name": "org.springframework.boot.support.SystemEnvironmentPropertySourceEnvironmentPostProcessor#getOrigin", "start_line": 114, "end_line": 121, "signature": "getOrigin(String key)", "original_code": "@Override\n\t\tpublic @Nullable Origin getOrigin(String key) {\n\t\t\tString property = resolvePropertyName(key);\n\t\t\tif (super.containsProperty(property)) {\n\t\t\t\treturn new SystemEnvironmentOrigin(property);\n\t\t\t}\n\t\t\treturn null;\n\t\t}", "doc_comment": ""}, "code_tokens": ["Origin", "getOrigin", "public", "(", ")", "{", "}", "@", "Override", "@", "Nullable", "String", "key", "String", ";", "if", "return", "null", ";", "property", "=", "(", ")", "{", "}", "resolvePropertyName", "super", ".", "containsProperty", "return", ";", "(", "key", ")", "(", "property", ")", "new", "SystemEnvironmentOrigin", "(", "property", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 63, "ast_depth": 9, "n_identifiers": 7, "vocab_size": 24, "n_whitespaces": 40, "n_words": 21, "nloc": 8, "token_counts": 42}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/support/SystemEnvironmentPropertySourceEnvironmentPostProcessor.java#123-126", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/SystemEnvironmentPropertySourceEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "getPrefix", "qualified_name": "org.springframework.boot.support.SystemEnvironmentPropertySourceEnvironmentPostProcessor#getPrefix", "start_line": 123, "end_line": 126, "signature": "getPrefix()", "original_code": "@Override\n\t\tpublic @Nullable String getPrefix() {\n\t\t\treturn this.prefix;\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getPrefix", "public", "(", ")", "{", "}", "@", "Override", "@", "Nullable", "return", ";", "this", ".", "prefix"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 25, "ast_depth": 6, "n_identifiers": 4, "vocab_size": 15, "n_whitespaces": 15, "n_words": 8, "nloc": 4, "token_counts": 16}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/main/java/org/springframework/boot/support/SystemEnvironmentPropertySourceEnvironmentPostProcessor.java#128-131", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/SystemEnvironmentPropertySourceEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "isImmutable", "qualified_name": "org.springframework.boot.support.SystemEnvironmentPropertySourceEnvironmentPostProcessor#isImmutable", "start_line": 128, "end_line": 131, "signature": "isImmutable()", "original_code": "@Override\n\t\tpublic boolean isImmutable() {\n\t\t\treturn (Object) getSource() == System.getenv();\n\t\t}", "doc_comment": ""}, "code_tokens": ["boolean", "isImmutable", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "==", "(", "Object", ")", "System", ".", "getenv", "getSource", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 36, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 17, "n_whitespaces": 17, "n_words": 9, "nloc": 4, "token_counts": 23}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorsFactoryTests.java#45-51", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorsFactoryTests.java", "language": "Java"}, "method": {"name": "fromSpringFactoriesReturnsFactory", "qualified_name": "test.java.org.springframework.boot.env.EnvironmentPostProcessorsFactoryTests#fromSpringFactoriesReturnsFactory", "start_line": 45, "end_line": 51, "signature": "fromSpringFactoriesReturnsFactory()", "original_code": "@Test\n\tvoid fromSpringFactoriesReturnsFactory() {\n\t\tEnvironmentPostProcessorsFactory factory = EnvironmentPostProcessorsFactory.fromSpringFactories(null);\n\t\tList<EnvironmentPostProcessor> processors = factory.getEnvironmentPostProcessors(this.logFactory,\n\t\t\t\tthis.bootstrapContext);\n\t\tassertThat(processors).hasSizeGreaterThan(1);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "fromSpringFactoriesReturnsFactory", "(", ")", "{", "}", "@", "Test", "EnvironmentPostProcessorsFactory", ";", ";", ";", "factory", "=", "List", "processors", "=", ".", "hasSizeGreaterThan", "EnvironmentPostProcessorsFactory", ".", "fromSpringFactories", "<", "EnvironmentPostProcessor", ">", "factory", ".", "getEnvironmentPostProcessors", "assertThat", "(", "1", ")", "(", "null", ")", "(", ",", ")", "(", "processors", ")", "this", ".", "logFactory", "this", ".", "bootstrapContext"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 70, "ast_depth": 9, "n_identifiers": 11, "vocab_size": 28, "n_whitespaces": 26, "n_words": 21, "nloc": 7, "token_counts": 47}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorsFactoryTests.java#53-61", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorsFactoryTests.java", "language": "Java"}, "method": {"name": "ofClassesReturnsFactory", "qualified_name": "test.java.org.springframework.boot.env.EnvironmentPostProcessorsFactoryTests#ofClassesReturnsFactory", "start_line": 53, "end_line": 61, "signature": "ofClassesReturnsFactory()", "original_code": "@Test\n\tvoid ofClassesReturnsFactory() {\n\t\tEnvironmentPostProcessorsFactory factory = EnvironmentPostProcessorsFactory\n\t\t\t.of(TestEnvironmentPostProcessor.class);\n\t\tList<EnvironmentPostProcessor> processors = factory.getEnvironmentPostProcessors(this.logFactory,\n\t\t\t\tthis.bootstrapContext);\n\t\tassertThat(processors).hasSize(1);\n\t\tassertThat(processors.get(0)).isInstanceOf(TestEnvironmentPostProcessor.class);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "ofClassesReturnsFactory", "(", ")", "{", "}", "@", "Test", "EnvironmentPostProcessorsFactory", ";", ";", ";", ";", "factory", "=", "List", "processors", "=", ".", "hasSize", ".", "isInstanceOf", "EnvironmentPostProcessorsFactory", ".", "of", "<", "EnvironmentPostProcessor", ">", "factory", ".", "getEnvironmentPostProcessors", "assertThat", "(", "1", ")", "assertThat", "(", ")", "(", ")", "(", ",", ")", "(", "processors", ")", "(", ")", "TestEnvironmentPostProcessor", ".", "class", "TestEnvironmentPostProcessor", ".", "class", "this", ".", "logFactory", "this", ".", "bootstrapContext", "processors", ".", "get", "(", "0", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 98, "ast_depth": 10, "n_identifiers": 13, "vocab_size": 32, "n_whitespaces": 33, "n_words": 29, "nloc": 9, "token_counts": 66}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorsFactoryTests.java#63-71", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorsFactoryTests.java", "language": "Java"}, "method": {"name": "ofClassNamesReturnsFactory", "qualified_name": "test.java.org.springframework.boot.env.EnvironmentPostProcessorsFactoryTests#ofClassNamesReturnsFactory", "start_line": 63, "end_line": 71, "signature": "ofClassNamesReturnsFactory()", "original_code": "@Test\n\tvoid ofClassNamesReturnsFactory() {\n\t\tEnvironmentPostProcessorsFactory factory = EnvironmentPostProcessorsFactory\n\t\t\t.of(TestEnvironmentPostProcessor.class.getName());\n\t\tList<EnvironmentPostProcessor> processors = factory.getEnvironmentPostProcessors(this.logFactory,\n\t\t\t\tthis.bootstrapContext);\n\t\tassertThat(processors).hasSize(1);\n\t\tassertThat(processors.get(0)).isInstanceOf(TestEnvironmentPostProcessor.class);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "ofClassNamesReturnsFactory", "(", ")", "{", "}", "@", "Test", "EnvironmentPostProcessorsFactory", ";", ";", ";", ";", "factory", "=", "List", "processors", "=", ".", "hasSize", ".", "isInstanceOf", "EnvironmentPostProcessorsFactory", ".", "of", "<", "EnvironmentPostProcessor", ">", "factory", ".", "getEnvironmentPostProcessors", "assertThat", "(", "1", ")", "assertThat", "(", ")", "(", ")", "(", ",", ")", "(", "processors", ")", "(", ")", "TestEnvironmentPostProcessor", ".", "class", ".", "getName", "this", ".", "logFactory", "this", ".", "bootstrapContext", "processors", ".", "get", "TestEnvironmentPostProcessor", ".", "class", "(", ")", "(", "0", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 104, "ast_depth": 10, "n_identifiers": 14, "vocab_size": 33, "n_whitespaces": 33, "n_words": 30, "nloc": 9, "token_counts": 70}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorsFactoryTests.java#73-90", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorsFactoryTests.java", "language": "Java"}, "method": {"name": "ofClassNamesWithClassLoaderReturnsFactory", "qualified_name": "test.java.org.springframework.boot.env.EnvironmentPostProcessorsFactoryTests#ofClassNamesWithClassLoaderReturnsFactory", "start_line": 73, "end_line": 90, "signature": "ofClassNamesWithClassLoaderReturnsFactory()", "original_code": "@Test\n\tvoid ofClassNamesWithClassLoaderReturnsFactory() {\n\t\tOverridingClassLoader classLoader = new OverridingClassLoader(getClass().getClassLoader()) {\n\n\t\t\t@Override\n\t\t\tprotected boolean isEligibleForOverriding(String className) {\n\t\t\t\treturn super.isEligibleForOverriding(className)\n\t\t\t\t\t\t&& className.equals(TestEnvironmentPostProcessor.class.getName());\n\t\t\t}\n\n\t\t};\n\t\tEnvironmentPostProcessorsFactory factory = EnvironmentPostProcessorsFactory.of(classLoader,\n\t\t\t\tTestEnvironmentPostProcessor.class.getName());\n\t\tList<EnvironmentPostProcessor> processors = factory.getEnvironmentPostProcessors(this.logFactory,\n\t\t\t\tthis.bootstrapContext);\n\t\tassertThat(processors).hasSize(1);\n\t\tassertThat(processors.get(0).getClass().getClassLoader()).isSameAs(classLoader);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "ofClassNamesWithClassLoaderReturnsFactory", "(", ")", "{", "}", "@", "Test", "OverridingClassLoader", ";", "EnvironmentPostProcessorsFactory", ";", ";", ";", ";", "classLoader", "=", "factory", "=", "List", "processors", "=", ".", "hasSize", ".", "isSameAs", "new", "OverridingClassLoader", "EnvironmentPostProcessorsFactory", ".", "of", "<", "EnvironmentPostProcessor", ">", "factory", ".", "getEnvironmentPostProcessors", "assertThat", "(", "1", ")", "assertThat", "(", "classLoader", ")", "(", ")", "{", "}", "(", "classLoader", ",", ")", "(", ",", ")", "(", "processors", ")", "(", ")", ".", "getClassLoader", "boolean", "isEligibleForOverriding", ".", "getName", "this", ".", "logFactory", "this", ".", "bootstrapContext", ".", "getClassLoader", "getClass", "(", ")", "protected", "(", ")", "{", "}", "TestEnvironmentPostProcessor", ".", "class", "(", ")", ".", "getClass", "(", ")", "(", ")", "@", "Override", "String", "className", "return", ";", "processors", ".", "get", "(", ")", "&&", "(", "0", ")", "super", ".", "isEligibleForOverriding", "className", ".", "equals", "(", "className", ")", "(", ")", ".", "getName", "TestEnvironmentPostProcessor", ".", "class", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 188, "ast_depth": 16, "n_identifiers": 21, "vocab_size": 48, "n_whitespaces": 77, "n_words": 53, "nloc": 16, "token_counts": 127}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorsFactoryTests.java#77-81", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorsFactoryTests.java", "language": "Java"}, "method": {"name": "isEligibleForOverriding", "qualified_name": "test.java.org.springframework.boot.env.EnvironmentPostProcessorsFactoryTests#isEligibleForOverriding", "start_line": 77, "end_line": 81, "signature": "isEligibleForOverriding(String className)", "original_code": "@Override\n\t\t\tprotected boolean isEligibleForOverriding(String className) {\n\t\t\t\treturn super.isEligibleForOverriding(className)\n\t\t\t\t\t\t&& className.equals(TestEnvironmentPostProcessor.class.getName());\n\t\t\t}", "doc_comment": ""}, "code_tokens": ["boolean", "isEligibleForOverriding", "protected", "(", ")", "{", "}", "@", "Override", "String", "className", "return", ";", "&&", "super", ".", "isEligibleForOverriding", "className", ".", "equals", "(", "className", ")", "(", ")", ".", "getName", "TestEnvironmentPostProcessor", ".", "class", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 48, "ast_depth": 10, "n_identifiers": 5, "vocab_size": 20, "n_whitespaces": 26, "n_words": 15, "nloc": 5, "token_counts": 32}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorsFactoryTests.java#97-99", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorsFactoryTests.java", "language": "Java"}, "method": {"name": "postProcessEnvironment", "qualified_name": "test.java.org.springframework.boot.env.EnvironmentPostProcessorsFactoryTests#postProcessEnvironment", "start_line": 97, "end_line": 99, "signature": "postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application)", "original_code": "@Override\n\t\tpublic void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "postProcessEnvironment", "public", "(", ",", ")", "{", "}", "@", "Override", "ConfigurableEnvironment", "environment", "SpringApplication", "application"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 5, "n_identifiers": 4, "vocab_size": 14, "n_whitespaces": 12, "n_words": 8, "nloc": 3, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListenerTests.java#93-99", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListenerTests.java", "language": "Java"}, "method": {"name": "setup", "qualified_name": "test.java.org.springframework.boot.support.EnvironmentPostProcessorApplicationListenerTests#setup", "start_line": 93, "end_line": 99, "signature": "setup()", "original_code": "@BeforeEach\n\t\tvoid setup() {\n\t\t\tReflectionTestUtils.setField(this.listener, \"deferredLogs\", this.deferredLogs);\n\t\t\tReflectionTestUtils.setField(this.listener, \"postProcessorsFactory\",\n\t\t\t\t\t(Function<ClassLoader, EnvironmentPostProcessorsFactory>) (\n\t\t\t\t\t\t\tclassLoader) -> EnvironmentPostProcessorsFactory.of(TestEnvironmentPostProcessor.class));\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "setup", "(", ")", "{", "}", "@", "BeforeEach", ";", ";", "ReflectionTestUtils", ".", "setField", "ReflectionTestUtils", ".", "setField", "(", ",", ",", ")", "(", ",", ",", ")", "this", ".", "listener", "\"", "deferredLogs", "\"", "this", ".", "deferredLogs", "this", ".", "listener", "\"", "postProcessorsFactory", "\"", "(", ")", "Function", "->", "<", "ClassLoader", ",", "EnvironmentPostProcessorsFactory", ">", "(", "classLoader", ")", "EnvironmentPostProcessorsFactory", ".", "of", "(", ")", "TestEnvironmentPostProcessor", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 84, "ast_depth": 12, "n_identifiers": 9, "vocab_size": 28, "n_whitespaces": 37, "n_words": 23, "nloc": 7, "token_counts": 59}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListenerTests.java#101-105", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListenerTests.java", "language": "Java"}, "method": {"name": "createUsesSpringFactories", "qualified_name": "test.java.org.springframework.boot.support.EnvironmentPostProcessorApplicationListenerTests#createUsesSpringFactories", "start_line": 101, "end_line": 105, "signature": "createUsesSpringFactories()", "original_code": "@Test\n\t\tvoid createUsesSpringFactories() {\n\t\t\tEnvironmentPostProcessorApplicationListener listener = new EnvironmentPostProcessorApplicationListener();\n\t\t\tassertThat(listener.getEnvironmentPostProcessors(null, this.bootstrapContext)).hasSizeGreaterThan(1);\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "createUsesSpringFactories", "(", ")", "{", "}", "@", "Test", "EnvironmentPostProcessorApplicationListener", ";", ";", "listener", "=", ".", "hasSizeGreaterThan", "new", "EnvironmentPostProcessorApplicationListener", "assertThat", "(", "1", ")", "(", ")", "(", ")", "listener", ".", "getEnvironmentPostProcessors", "(", "null", ",", ")", "this", ".", "bootstrapContext"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 53, "ast_depth": 11, "n_identifiers": 7, "vocab_size": 22, "n_whitespaces": 21, "n_words": 15, "nloc": 5, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListenerTests.java#107-115", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListenerTests.java", "language": "Java"}, "method": {"name": "createWhenHasFactoryUsesFactory", "qualified_name": "test.java.org.springframework.boot.support.EnvironmentPostProcessorApplicationListenerTests#createWhenHasFactoryUsesFactory", "start_line": 107, "end_line": 115, "signature": "createWhenHasFactoryUsesFactory()", "original_code": "@Test\n\t\tvoid createWhenHasFactoryUsesFactory() {\n\t\t\tEnvironmentPostProcessorApplicationListener listener = EnvironmentPostProcessorApplicationListener\n\t\t\t\t.with(EnvironmentPostProcessorsFactory.of(TestEnvironmentPostProcessor.class));\n\t\t\tList<EnvironmentPostProcessor> postProcessors = listener.getEnvironmentPostProcessors(null,\n\t\t\t\t\tthis.bootstrapContext);\n\t\t\tassertThat(postProcessors).hasSize(1);\n\t\t\tassertThat(postProcessors.get(0)).isInstanceOf(TestEnvironmentPostProcessor.class);\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "createWhenHasFactoryUsesFactory", "(", ")", "{", "}", "@", "Test", "EnvironmentPostProcessorApplicationListener", ";", ";", ";", ";", "listener", "=", "List", "postProcessors", "=", ".", "hasSize", ".", "isInstanceOf", "EnvironmentPostProcessorApplicationListener", ".", "with", "<", "EnvironmentPostProcessor", ">", "listener", ".", "getEnvironmentPostProcessors", "assertThat", "(", "1", ")", "assertThat", "(", ")", "(", ")", "(", "null", ",", ")", "(", "postProcessors", ")", "(", ")", "TestEnvironmentPostProcessor", ".", "class", "EnvironmentPostProcessorsFactory", ".", "of", "this", ".", "bootstrapContext", "postProcessors", ".", "get", "(", ")", "(", "0", ")", "TestEnvironmentPostProcessor", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 102, "ast_depth": 11, "n_identifiers": 14, "vocab_size": 34, "n_whitespaces": 41, "n_words": 30, "nloc": 9, "token_counts": 69}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListenerTests.java#117-120", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListenerTests.java", "language": "Java"}, "method": {"name": "supportsEventTypeWhenApplicationEnvironmentPreparedEventReturnsTrue", "qualified_name": "test.java.org.springframework.boot.support.EnvironmentPostProcessorApplicationListenerTests#supportsEventTypeWhenApplicationEnvironmentPreparedEventReturnsTrue", "start_line": 117, "end_line": 120, "signature": "supportsEventTypeWhenApplicationEnvironmentPreparedEventReturnsTrue()", "original_code": "@Test\n\t\tvoid supportsEventTypeWhenApplicationEnvironmentPreparedEventReturnsTrue() {\n\t\t\tassertThat(this.listener.supportsEventType(ApplicationEnvironmentPreparedEvent.class)).isTrue();\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "supportsEventTypeWhenApplicationEnvironmentPreparedEventReturnsTrue", "(", ")", "{", "}", "@", "Test", ";", ".", "isTrue", "assertThat", "(", ")", "(", ")", ".", "supportsEventType", "this", ".", "listener", "(", ")", "ApplicationEnvironmentPreparedEvent", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 41, "ast_depth": 11, "n_identifiers": 6, "vocab_size": 17, "n_whitespaces": 12, "n_words": 10, "nloc": 4, "token_counts": 26}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListenerTests.java#122-125", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListenerTests.java", "language": "Java"}, "method": {"name": "supportsEventTypeWhenApplicationPreparedEventReturnsTrue", "qualified_name": "test.java.org.springframework.boot.support.EnvironmentPostProcessorApplicationListenerTests#supportsEventTypeWhenApplicationPreparedEventReturnsTrue", "start_line": 122, "end_line": 125, "signature": "supportsEventTypeWhenApplicationPreparedEventReturnsTrue()", "original_code": "@Test\n\t\tvoid supportsEventTypeWhenApplicationPreparedEventReturnsTrue() {\n\t\t\tassertThat(this.listener.supportsEventType(ApplicationPreparedEvent.class)).isTrue();\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "supportsEventTypeWhenApplicationPreparedEventReturnsTrue", "(", ")", "{", "}", "@", "Test", ";", ".", "isTrue", "assertThat", "(", ")", "(", ")", ".", "supportsEventType", "this", ".", "listener", "(", ")", "ApplicationPreparedEvent", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 41, "ast_depth": 11, "n_identifiers": 6, "vocab_size": 17, "n_whitespaces": 12, "n_words": 10, "nloc": 4, "token_counts": 26}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListenerTests.java#127-130", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListenerTests.java", "language": "Java"}, "method": {"name": "supportsEventTypeWhenApplicationFailedEventReturnsTrue", "qualified_name": "test.java.org.springframework.boot.support.EnvironmentPostProcessorApplicationListenerTests#supportsEventTypeWhenApplicationFailedEventReturnsTrue", "start_line": 127, "end_line": 130, "signature": "supportsEventTypeWhenApplicationFailedEventReturnsTrue()", "original_code": "@Test\n\t\tvoid supportsEventTypeWhenApplicationFailedEventReturnsTrue() {\n\t\t\tassertThat(this.listener.supportsEventType(ApplicationFailedEvent.class)).isTrue();\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "supportsEventTypeWhenApplicationFailedEventReturnsTrue", "(", ")", "{", "}", "@", "Test", ";", ".", "isTrue", "assertThat", "(", ")", "(", ")", ".", "supportsEventType", "this", ".", "listener", "(", ")", "ApplicationFailedEvent", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 41, "ast_depth": 11, "n_identifiers": 6, "vocab_size": 17, "n_whitespaces": 12, "n_words": 10, "nloc": 4, "token_counts": 26}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListenerTests.java#132-135", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListenerTests.java", "language": "Java"}, "method": {"name": "supportsEventTypeWhenOtherEventReturnsFalse", "qualified_name": "test.java.org.springframework.boot.support.EnvironmentPostProcessorApplicationListenerTests#supportsEventTypeWhenOtherEventReturnsFalse", "start_line": 132, "end_line": 135, "signature": "supportsEventTypeWhenOtherEventReturnsFalse()", "original_code": "@Test\n\t\tvoid supportsEventTypeWhenOtherEventReturnsFalse() {\n\t\t\tassertThat(this.listener.supportsEventType(ApplicationStartingEvent.class)).isFalse();\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "supportsEventTypeWhenOtherEventReturnsFalse", "(", ")", "{", "}", "@", "Test", ";", ".", "isFalse", "assertThat", "(", ")", "(", ")", ".", "supportsEventType", "this", ".", "listener", "(", ")", "ApplicationStartingEvent", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 41, "ast_depth": 11, "n_identifiers": 6, "vocab_size": 17, "n_whitespaces": 12, "n_words": 10, "nloc": 4, "token_counts": 26}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListenerTests.java#137-145", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListenerTests.java", "language": "Java"}, "method": {"name": "onApplicationEventWhenApplicationEnvironmentPreparedEventCallsPostProcessors", "qualified_name": "test.java.org.springframework.boot.support.EnvironmentPostProcessorApplicationListenerTests#onApplicationEventWhenApplicationEnvironmentPreparedEventCallsPostProcessors", "start_line": 137, "end_line": 145, "signature": "onApplicationEventWhenApplicationEnvironmentPreparedEventCallsPostProcessors()", "original_code": "@Test\n\t\tvoid onApplicationEventWhenApplicationEnvironmentPreparedEventCallsPostProcessors() {\n\t\t\tSpringApplication application = mock(SpringApplication.class);\n\t\t\tMockEnvironment environment = new MockEnvironment();\n\t\t\tApplicationEnvironmentPreparedEvent event = new ApplicationEnvironmentPreparedEvent(this.bootstrapContext,\n\t\t\t\t\tapplication, new String[0], environment);\n\t\t\tthis.listener.onApplicationEvent(event);\n\t\t\tassertThat(environment.getProperty(\"processed\")).isEqualTo(\"true\");\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "onApplicationEventWhenApplicationEnvironmentPreparedEventCallsPostProcessors", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", "MockEnvironment", ";", "ApplicationEnvironmentPreparedEvent", ";", ";", ";", "application", "=", "environment", "=", "event", "=", ".", "onApplicationEvent", ".", "isEqualTo", "mock", "new", "MockEnvironment", "new", "ApplicationEnvironmentPreparedEvent", "this", ".", "listener", "(", "event", ")", "assertThat", "(", ")", "(", ")", "(", ")", "(", ",", "application", ",", ",", "environment", ")", "(", ")", "\"", "true", "\"", "SpringApplication", ".", "class", "this", ".", "bootstrapContext", "new", "String", "environment", ".", "getProperty", "[", "0", "]", "(", ")", "\"", "processed", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 110, "ast_depth": 11, "n_identifiers": 12, "vocab_size": 35, "n_whitespaces": 48, "n_words": 33, "nloc": 9, "token_counts": 75}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListenerTests.java#147-154", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListenerTests.java", "language": "Java"}, "method": {"name": "onApplicationEventWhenApplicationPreparedEventSwitchesLogs", "qualified_name": "test.java.org.springframework.boot.support.EnvironmentPostProcessorApplicationListenerTests#onApplicationEventWhenApplicationPreparedEventSwitchesLogs", "start_line": 147, "end_line": 154, "signature": "onApplicationEventWhenApplicationPreparedEventSwitchesLogs()", "original_code": "@Test\n\t\tvoid onApplicationEventWhenApplicationPreparedEventSwitchesLogs() {\n\t\t\tSpringApplication application = mock(SpringApplication.class);\n\t\t\tConfigurableApplicationContext context = mock(ConfigurableApplicationContext.class);\n\t\t\tApplicationPreparedEvent event = new ApplicationPreparedEvent(application, new String[0], context);\n\t\t\tthis.listener.onApplicationEvent(event);\n\t\t\tthen(this.deferredLogs).should().switchOverAll();\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "onApplicationEventWhenApplicationPreparedEventSwitchesLogs", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", "ConfigurableApplicationContext", ";", "ApplicationPreparedEvent", ";", ";", ";", "application", "=", "context", "=", "event", "=", ".", "onApplicationEvent", ".", "switchOverAll", "mock", "mock", "new", "ApplicationPreparedEvent", "this", ".", "listener", "(", "event", ")", ".", "should", "(", ")", "(", ")", "(", ")", "(", "application", ",", ",", "context", ")", "then", "(", ")", "SpringApplication", ".", "class", "ConfigurableApplicationContext", ".", "class", "new", "String", "(", ")", "[", "0", "]", "this", ".", "deferredLogs"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 103, "ast_depth": 10, "n_identifiers": 12, "vocab_size": 32, "n_whitespaces": 41, "n_words": 31, "nloc": 8, "token_counts": 69}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListenerTests.java#156-164", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListenerTests.java", "language": "Java"}, "method": {"name": "onApplicationEventWhenApplicationFailedEventSwitchesLogs", "qualified_name": "test.java.org.springframework.boot.support.EnvironmentPostProcessorApplicationListenerTests#onApplicationEventWhenApplicationFailedEventSwitchesLogs", "start_line": 156, "end_line": 164, "signature": "onApplicationEventWhenApplicationFailedEventSwitchesLogs()", "original_code": "@Test\n\t\tvoid onApplicationEventWhenApplicationFailedEventSwitchesLogs() {\n\t\t\tSpringApplication application = mock(SpringApplication.class);\n\t\t\tConfigurableApplicationContext context = mock(ConfigurableApplicationContext.class);\n\t\t\tApplicationFailedEvent event = new ApplicationFailedEvent(application, new String[0], context,\n\t\t\t\t\tnew RuntimeException());\n\t\t\tthis.listener.onApplicationEvent(event);\n\t\t\tthen(this.deferredLogs).should().switchOverAll();\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "onApplicationEventWhenApplicationFailedEventSwitchesLogs", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", "ConfigurableApplicationContext", ";", "ApplicationFailedEvent", ";", ";", ";", "application", "=", "context", "=", "event", "=", ".", "onApplicationEvent", ".", "switchOverAll", "mock", "mock", "new", "ApplicationFailedEvent", "this", ".", "listener", "(", "event", ")", ".", "should", "(", ")", "(", ")", "(", ")", "(", "application", ",", ",", "context", ",", ")", "then", "(", ")", "SpringApplication", ".", "class", "ConfigurableApplicationContext", ".", "class", "new", "String", "new", "RuntimeException", "(", ")", "[", "0", "]", "(", ")", "this", ".", "deferredLogs"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 110, "ast_depth": 10, "n_identifiers": 12, "vocab_size": 33, "n_whitespaces": 48, "n_words": 33, "nloc": 9, "token_counts": 74}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListenerTests.java#173-176", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListenerTests.java", "language": "Java"}, "method": {"name": "postProcessEnvironment", "qualified_name": "test.java.org.springframework.boot.support.EnvironmentPostProcessorApplicationListenerTests#postProcessEnvironment", "start_line": 173, "end_line": 176, "signature": "postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application)", "original_code": "@Override\n\t\t\tpublic void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {\n\t\t\t\t((MockEnvironment) environment).setProperty(\"processed\", \"true\");\n\t\t\t}", "doc_comment": ""}, "code_tokens": ["void", "postProcessEnvironment", "public", "(", ",", ")", "{", "}", "@", "Override", "ConfigurableEnvironment", "environment", "SpringApplication", "application", ";", ".", "setProperty", "(", ")", "(", ",", ")", "(", "MockEnvironment", ")", "environment", "\"", "processed", "\"", "\"", "true", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 47, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 21, "n_whitespaces": 21, "n_words": 13, "nloc": 4, "token_counts": 32}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListenerTests.java#187-190", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListenerTests.java", "language": "Java"}, "method": {"name": "aotContributionIsNotNecessaryWithDefaultConfiguration", "qualified_name": "test.java.org.springframework.boot.support.EnvironmentPostProcessorApplicationListenerTests#aotContributionIsNotNecessaryWithDefaultConfiguration", "start_line": 187, "end_line": 190, "signature": "aotContributionIsNotNecessaryWithDefaultConfiguration()", "original_code": "@Test\n\t\tvoid aotContributionIsNotNecessaryWithDefaultConfiguration() {\n\t\t\tassertThat(getContribution(new StandardEnvironment())).isNull();\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "aotContributionIsNotNecessaryWithDefaultConfiguration", "(", ")", "{", "}", "@", "Test", ";", ".", "isNull", "assertThat", "(", ")", "(", ")", "getContribution", "(", ")", "new", "StandardEnvironment", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 38, "ast_depth": 12, "n_identifiers": 5, "vocab_size": 15, "n_whitespaces": 13, "n_words": 8, "nloc": 4, "token_counts": 23}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListenerTests.java#192-198", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListenerTests.java", "language": "Java"}, "method": {"name": "aotContributionIsNotNecessaryWithDefaultProfileActive", "qualified_name": "test.java.org.springframework.boot.support.EnvironmentPostProcessorApplicationListenerTests#aotContributionIsNotNecessaryWithDefaultProfileActive", "start_line": 192, "end_line": 198, "signature": "aotContributionIsNotNecessaryWithDefaultProfileActive()", "original_code": "@Test\n\t\tvoid aotContributionIsNotNecessaryWithDefaultProfileActive() {\n\t\t\tStandardEnvironment environment = new StandardEnvironment();\n\t\t\tenvironment.setDefaultProfiles(\"fallback\");\n\t\t\tenvironment.setActiveProfiles(\"fallback\");\n\t\t\tassertThat(getContribution(environment)).isNull();\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "aotContributionIsNotNecessaryWithDefaultProfileActive", "(", ")", "{", "}", "@", "Test", "StandardEnvironment", ";", ";", ";", ";", "environment", "=", "environment", ".", "setDefaultProfiles", "environment", ".", "setActiveProfiles", ".", "isNull", "new", "StandardEnvironment", "(", ")", "(", ")", "assertThat", "(", ")", "(", ")", "\"", "fallback", "\"", "\"", "fallback", "\"", "(", ")", "getContribution", "(", "environment", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 71, "ast_depth": 10, "n_identifiers": 8, "vocab_size": 21, "n_whitespaces": 28, "n_words": 17, "nloc": 7, "token_counts": 46}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListenerTests.java#200-211", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListenerTests.java", "language": "Java"}, "method": {"name": "aotContributionRegistersActiveProfiles", "qualified_name": "test.java.org.springframework.boot.support.EnvironmentPostProcessorApplicationListenerTests#aotContributionRegistersActiveProfiles", "start_line": 200, "end_line": 211, "signature": "aotContributionRegistersActiveProfiles()", "original_code": "@Test\n\t\tvoid aotContributionRegistersActiveProfiles() {\n\t\t\tConfigurableEnvironment environment = new StandardEnvironment();\n\t\t\tenvironment.setActiveProfiles(\"one\", \"two\");\n\t\t\tcompile(createContext(environment), (compiled) -> {\n\t\t\t\tEnvironmentPostProcessor environmentPostProcessor = compiled.getInstance(EnvironmentPostProcessor.class,\n\t\t\t\t\t\tClassName.get(\"com.example\", \"TestApp__EnvironmentPostProcessor\").toString());\n\t\t\t\tStandardEnvironment freshEnvironment = new StandardEnvironment();\n\t\t\t\tenvironmentPostProcessor.postProcessEnvironment(freshEnvironment, new SpringApplication());\n\t\t\t\tassertThat(freshEnvironment.getActiveProfiles()).containsExactly(\"one\", \"two\");\n\t\t\t});\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "aotContributionRegistersActiveProfiles", "(", ")", "{", "}", "@", "Test", "ConfigurableEnvironment", ";", ";", ";", "environment", "=", "environment", ".", "setActiveProfiles", "compile", "new", "StandardEnvironment", "(", ",", ")", "(", ",", ")", "(", ")", "\"", "one", "\"", "\"", "two", "\"", "createContext", "->", "(", "environment", ")", "(", "compiled", ")", "{", "}", "EnvironmentPostProcessor", ";", "StandardEnvironment", ";", ";", ";", "environmentPostProcessor", "=", "freshEnvironment", "=", "environmentPostProcessor", ".", "postProcessEnvironment", ".", "containsExactly", "compiled", ".", "getInstance", "new", "StandardEnvironment", "(", "freshEnvironment", ",", ")", "assertThat", "(", ",", ")", "(", ",", ")", "(", ")", "new", "SpringApplication", "(", ")", "\"", "one", "\"", "\"", "two", "\"", "EnvironmentPostProcessor", ".", "class", ".", "toString", "(", ")", "freshEnvironment", ".", "getActiveProfiles", "ClassName", ".", "get", "(", ")", "(", ")", "(", ",", ")", "\"", "com.example", "\"", "\"", "TestApp__EnvironmentPostProcessor", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 165, "ast_depth": 17, "n_identifiers": 17, "vocab_size": 39, "n_whitespaces": 70, "n_words": 42, "nloc": 12, "token_counts": 113}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListenerTests.java#213-227", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListenerTests.java", "language": "Java"}, "method": {"name": "shouldUseAotEnvironmentPostProcessor", "qualified_name": "test.java.org.springframework.boot.support.EnvironmentPostProcessorApplicationListenerTests#shouldUseAotEnvironmentPostProcessor", "start_line": 213, "end_line": 227, "signature": "shouldUseAotEnvironmentPostProcessor()", "original_code": "@Test\n\t\tvoid shouldUseAotEnvironmentPostProcessor() {\n\t\t\tSpringApplication application = new SpringApplication(ExampleAotProcessedApp.class);\n\t\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\t\tapplication.setMainApplicationClass(ExampleAotProcessedApp.class);\n\t\t\tSystem.setProperty(AotDetector.AOT_ENABLED, \"true\");\n\t\t\ttry {\n\t\t\t\tApplicationContext context = application.run();\n\t\t\t\tassertThat(context.getEnvironment().getActiveProfiles()).containsExactly(\"one\", \"three\");\n\t\t\t\tassertThat(context.getBean(\"test\")).isEqualTo(\"test\");\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tSystem.clearProperty(AotDetector.AOT_ENABLED);\n\t\t\t}\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "shouldUseAotEnvironmentPostProcessor", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", "try", "application", "=", "application", ".", "setWebApplicationType", "application", ".", "setMainApplicationClass", "System", ".", "setProperty", "{", "}", "finally", "new", "SpringApplication", "(", ")", "(", ")", "(", ",", ")", "ApplicationContext", ";", ";", ";", "{", "}", "(", ")", "WebApplicationType", ".", "NONE", "ExampleAotProcessedApp", ".", "class", "AotDetector", ".", "AOT_ENABLED", "\"", "true", "\"", "context", "=", ".", "containsExactly", ".", "isEqualTo", ";", "ExampleAotProcessedApp", ".", "class", "application", ".", "run", "assertThat", "(", ",", ")", "assertThat", "(", ")", "System", ".", "clearProperty", "(", ")", "(", ")", "\"", "one", "\"", "\"", "three", "\"", "(", ")", "\"", "test", "\"", "(", ")", ".", "getActiveProfiles", "context", ".", "getBean", "AotDetector", ".", "AOT_ENABLED", "context", ".", "getEnvironment", "(", ")", "(", ")", "(", ")", "\"", "test", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 173, "ast_depth": 13, "n_identifiers": 20, "vocab_size": 42, "n_whitespaces": 71, "n_words": 45, "nloc": 15, "token_counts": 117}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListenerTests.java#229-251", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListenerTests.java", "language": "Java"}, "method": {"name": "aotEnvironmentPostProcessorShouldBeAppliedFirst", "qualified_name": "test.java.org.springframework.boot.support.EnvironmentPostProcessorApplicationListenerTests#aotEnvironmentPostProcessorShouldBeAppliedFirst", "start_line": 229, "end_line": 251, "signature": "aotEnvironmentPostProcessorShouldBeAppliedFirst(@TempDir Path tempDir)", "original_code": "@Test\n\t\tvoid aotEnvironmentPostProcessorShouldBeAppliedFirst(@TempDir Path tempDir) {\n\t\t\tProperties properties = new Properties();\n\t\t\tproperties.put(EnvironmentPostProcessor.class.getName(), TestEnvironmentPostProcessor.class.getName());\n\t\t\tClassLoader classLoader = createClassLoaderWithAdditionalSpringFactories(tempDir, properties);\n\t\t\tDefaultResourceLoader resourceLoader = new DefaultResourceLoader(classLoader);\n\n\t\t\tSpringApplication application = new SpringApplication(ExampleAotProcessedApp.class);\n\t\t\tapplication.setResourceLoader(resourceLoader);\n\t\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\t\tapplication.setMainApplicationClass(ExampleAotProcessedApp.class);\n\t\t\tSystem.setProperty(AotDetector.AOT_ENABLED, \"true\");\n\t\t\ttry {\n\t\t\t\tApplicationContext context = application.run();\n\t\t\t\t// See TestEnvironmentPostProcessor\n\t\t\t\tassertThat(context.getEnvironment().getProperty(\"test.activeProfiles\")).isEqualTo(\"one,three\");\n\t\t\t\tassertThat(context.getEnvironment().getActiveProfiles()).containsExactly(\"one\", \"three\");\n\t\t\t\tassertThat(context.getBean(\"test\")).isEqualTo(\"test\");\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tSystem.clearProperty(AotDetector.AOT_ENABLED);\n\t\t\t}\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "aotEnvironmentPostProcessorShouldBeAppliedFirst", "(", ")", "{", "}", "@", "Test", "Path", "tempDir", "Properties", ";", ";", "ClassLoader", ";", "DefaultResourceLoader", ";", "SpringApplication", ";", ";", ";", ";", ";", "try", "properties", "=", "properties", ".", "put", "classLoader", "=", "resourceLoader", "=", "application", "=", "application", ".", "setResourceLoader", "application", ".", "setWebApplicationType", "application", ".", "setMainApplicationClass", "System", ".", "setProperty", "{", "// See TestEnvironmentPostProcessor", "}", "finally", "@", "TempDir", "new", "Properties", "(", ",", ")", "createClassLoaderWithAdditionalSpringFactories", "new", "DefaultResourceLoader", "new", "SpringApplication", "(", "resourceLoader", ")", "(", ")", "(", ")", "(", ",", ")", "ApplicationContext", ";", ";", ";", ";", "{", "}", "(", ")", ".", "getName", ".", "getName", "(", "tempDir", ",", "properties", ")", "(", "classLoader", ")", "(", ")", "WebApplicationType", ".", "NONE", "ExampleAotProcessedApp", ".", "class", "AotDetector", ".", "AOT_ENABLED", "\"", "true", "\"", "context", "=", ".", "isEqualTo", ".", "containsExactly", ".", "isEqualTo", ";", "EnvironmentPostProcessor", ".", "class", "(", ")", "TestEnvironmentPostProcessor", ".", "class", "(", ")", "ExampleAotProcessedApp", ".", "class", "application", ".", "run", "assertThat", "(", ")", "assertThat", "(", ",", ")", "assertThat", "(", ")", "System", ".", "clearProperty", "(", ")", "(", ")", "\"", "one,three", "\"", "(", ")", "\"", "one", "\"", "\"", "three", "\"", "(", ")", "\"", "test", "\"", "(", ")", ".", "getProperty", ".", "getActiveProfiles", "context", ".", "getBean", "AotDetector", ".", "AOT_ENABLED", "context", ".", "getEnvironment", "(", ")", "context", ".", "getEnvironment", "(", ")", "(", ")", "(", ")", "\"", "test.activeProfiles", "\"", "(", ")", "\"", "test", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 294, "ast_depth": 13, "n_identifiers": 30, "vocab_size": 61, "n_whitespaces": 119, "n_words": 84, "nloc": 22, "token_counts": 200}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListenerTests.java#253-267", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListenerTests.java", "language": "Java"}, "method": {"name": "shouldBeLenientIfAotEnvironmentPostProcessorDoesNotExist", "qualified_name": "test.java.org.springframework.boot.support.EnvironmentPostProcessorApplicationListenerTests#shouldBeLenientIfAotEnvironmentPostProcessorDoesNotExist", "start_line": 253, "end_line": 267, "signature": "shouldBeLenientIfAotEnvironmentPostProcessorDoesNotExist()", "original_code": "@Test\n\t\tvoid shouldBeLenientIfAotEnvironmentPostProcessorDoesNotExist() {\n\t\t\tSpringApplication application = new SpringApplication(ExampleAotProcessedNoProfileApp.class);\n\t\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\t\tapplication.setMainApplicationClass(ExampleAotProcessedNoProfileApp.class);\n\t\t\tSystem.setProperty(AotDetector.AOT_ENABLED, \"true\");\n\t\t\ttry {\n\t\t\t\tApplicationContext context = application.run();\n\t\t\t\tassertThat(context.getEnvironment().getActiveProfiles()).isEmpty();\n\t\t\t\tassertThat(context.getBean(\"test\")).isEqualTo(\"test\");\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tSystem.clearProperty(AotDetector.AOT_ENABLED);\n\t\t\t}\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "shouldBeLenientIfAotEnvironmentPostProcessorDoesNotExist", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", "try", "application", "=", "application", ".", "setWebApplicationType", "application", ".", "setMainApplicationClass", "System", ".", "setProperty", "{", "}", "finally", "new", "SpringApplication", "(", ")", "(", ")", "(", ",", ")", "ApplicationContext", ";", ";", ";", "{", "}", "(", ")", "WebApplicationType", ".", "NONE", "ExampleAotProcessedNoProfileApp", ".", "class", "AotDetector", ".", "AOT_ENABLED", "\"", "true", "\"", "context", "=", ".", "isEmpty", ".", "isEqualTo", ";", "ExampleAotProcessedNoProfileApp", ".", "class", "application", ".", "run", "assertThat", "(", ")", "assertThat", "(", ")", "System", ".", "clearProperty", "(", ")", "(", ")", "(", ")", "\"", "test", "\"", "(", ")", ".", "getActiveProfiles", "context", ".", "getBean", "AotDetector", ".", "AOT_ENABLED", "context", ".", "getEnvironment", "(", ")", "(", ")", "(", ")", "\"", "test", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 164, "ast_depth": 13, "n_identifiers": 20, "vocab_size": 40, "n_whitespaces": 70, "n_words": 43, "nloc": 15, "token_counts": 110}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListenerTests.java#269-273", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListenerTests.java", "language": "Java"}, "method": {"name": "getContribution", "qualified_name": "test.java.org.springframework.boot.support.EnvironmentPostProcessorApplicationListenerTests#getContribution", "start_line": 269, "end_line": 273, "signature": "getContribution(ConfigurableEnvironment environment)", "original_code": "private BeanFactoryInitializationAotContribution getContribution(ConfigurableEnvironment environment) {\n\t\t\tDefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory();\n\t\t\tbeanFactory.registerSingleton(ConfigurableApplicationContext.ENVIRONMENT_BEAN_NAME, environment);\n\t\t\treturn new EnvironmentBeanFactoryInitializationAotProcessor().processAheadOfTime(beanFactory);\n\t\t}", "doc_comment": ""}, "code_tokens": ["BeanFactoryInitializationAotContribution", "getContribution", "private", "(", ")", "{", "}", "ConfigurableEnvironment", "environment", "DefaultListableBeanFactory", ";", ";", "return", ";", "beanFactory", "=", "beanFactory", ".", "registerSingleton", ".", "processAheadOfTime", "new", "DefaultListableBeanFactory", "(", ",", "environment", ")", "new", "EnvironmentBeanFactoryInitializationAotProcessor", "(", "beanFactory", ")", "(", ")", "ConfigurableApplicationContext", ".", "ENVIRONMENT_BEAN_NAME", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 58, "ast_depth": 8, "n_identifiers": 7, "vocab_size": 22, "n_whitespaces": 26, "n_words": 19, "nloc": 5, "token_counts": 39}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListenerTests.java#275-279", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListenerTests.java", "language": "Java"}, "method": {"name": "createContext", "qualified_name": "test.java.org.springframework.boot.support.EnvironmentPostProcessorApplicationListenerTests#createContext", "start_line": 275, "end_line": 279, "signature": "createContext(ConfigurableEnvironment environment)", "original_code": "private GenericApplicationContext createContext(ConfigurableEnvironment environment) {\n\t\t\tGenericApplicationContext context = new GenericApplicationContext();\n\t\t\tcontext.setEnvironment(environment);\n\t\t\treturn context;\n\t\t}", "doc_comment": ""}, "code_tokens": ["GenericApplicationContext", "createContext", "private", "(", ")", "{", "}", "ConfigurableEnvironment", "environment", "GenericApplicationContext", ";", ";", "return", "context", ";", "context", "=", "context", ".", "setEnvironment", "new", "GenericApplicationContext", "(", "environment", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 41, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 16, "n_whitespaces": 24, "n_words": 14, "nloc": 5, "token_counts": 27}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListenerTests.java#281-286", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListenerTests.java", "language": "Java"}, "method": {"name": "compile", "qualified_name": "test.java.org.springframework.boot.support.EnvironmentPostProcessorApplicationListenerTests#compile", "start_line": 281, "end_line": 286, "signature": "compile(GenericApplicationContext context, Consumer<Compiled> compiled)", "original_code": "private void compile(GenericApplicationContext context, Consumer<Compiled> compiled) {\n\t\t\tTestGenerationContext generationContext = new TestGenerationContext(TEST_APP);\n\t\t\tnew ApplicationContextAotGenerator().processAheadOfTime(context, generationContext);\n\t\t\tgenerationContext.writeGeneratedContent();\n\t\t\tTestCompiler.forSystem().with(generationContext).compile(compiled);\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "compile", "private", "(", ",", ")", "{", "}", "GenericApplicationContext", "context", "compiled", "TestGenerationContext", ";", ";", ";", ";", "Consumer", "generationContext", "=", ".", "processAheadOfTime", "generationContext", ".", "writeGeneratedContent", ".", "compile", "<", "Compiled", ">", "new", "TestGenerationContext", "new", "ApplicationContextAotGenerator", "(", "context", ",", "generationContext", ")", "(", ")", ".", "with", "(", "compiled", ")", "(", "TEST_APP", ")", "(", ")", "TestCompiler", ".", "forSystem", "(", "generationContext", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 86, "ast_depth": 9, "n_identifiers": 10, "vocab_size": 28, "n_whitespaces": 31, "n_words": 26, "nloc": 6, "token_counts": 58}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListenerTests.java#288-306", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListenerTests.java", "language": "Java"}, "method": {"name": "createClassLoaderWithAdditionalSpringFactories", "qualified_name": "test.java.org.springframework.boot.support.EnvironmentPostProcessorApplicationListenerTests#createClassLoaderWithAdditionalSpringFactories", "start_line": 288, "end_line": 306, "signature": "createClassLoaderWithAdditionalSpringFactories(Path tempDir, Properties properties)", "original_code": "private ClassLoader createClassLoaderWithAdditionalSpringFactories(Path tempDir, Properties properties) {\n\t\t\treturn new ClassLoader() {\n\t\t\t\t@Override\n\t\t\t\tpublic Enumeration<URL> getResources(String name) throws IOException {\n\t\t\t\t\tEnumeration<URL> resources = super.getResources(name);\n\t\t\t\t\tif (SpringFactoriesLoader.FACTORIES_RESOURCE_LOCATION.equals(name)) {\n\t\t\t\t\t\tPath springFactories = tempDir.resolve(\"spring.factories\");\n\t\t\t\t\t\ttry (BufferedWriter writer = Files.newBufferedWriter(springFactories)) {\n\t\t\t\t\t\t\tproperties.store(writer, \"\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tList<URL> allResources = new ArrayList<>();\n\t\t\t\t\t\tallResources.add(springFactories.toUri().toURL());\n\t\t\t\t\t\tallResources.addAll(Collections.list(resources));\n\t\t\t\t\t\treturn Collections.enumeration(allResources);\n\t\t\t\t\t}\n\t\t\t\t\treturn resources;\n\t\t\t\t}\n\t\t\t};\n\t\t}", "doc_comment": ""}, "code_tokens": ["ClassLoader", "createClassLoaderWithAdditionalSpringFactories", "private", "(", ",", ")", "{", "}", "Path", "tempDir", "Properties", "properties", "return", ";", "new", "ClassLoader", "(", ")", "{", "}", "getResources", "public", "Enumeration", "(", ")", "throws", "IOException", "{", "}", "@", "Override", "<", "URL", ">", "String", "name", ";", "if", "return", "resources", ";", "Enumeration", "resources", "=", "(", ")", "{", "}", "<", "URL", ">", "super", ".", "getResources", ".", "equals", "Path", ";", "try", ";", ";", ";", "return", ";", "(", "name", ")", "SpringFactoriesLoader", ".", "FACTORIES_RESOURCE_LOCATION", "(", "name", ")", "springFactories", "=", "(", ")", "{", "}", "List", "allResources", "=", "allResources", ".", "add", "allResources", ".", "addAll", "Collections", ".", "enumeration", "tempDir", ".", "resolve", "BufferedWriter", "writer", "=", ";", "<", "URL", ">", "new", "(", ")", "(", ")", "(", "allResources", ")", "(", ")", "Files", ".", "newBufferedWriter", "properties", ".", "store", "ArrayList", "(", ")", ".", "toURL", "Collections", ".", "list", "\"", "spring.factories", "\"", "(", "springFactories", ")", "(", "writer", ",", ")", "<", ">", "springFactories", ".", "toUri", "(", ")", "(", "resources", ")", "\"", "\"", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 220, "ast_depth": 17, "n_identifiers": 24, "vocab_size": 55, "n_whitespaces": 142, "n_words": 66, "nloc": 19, "token_counts": 149}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListenerTests.java#290-304", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListenerTests.java", "language": "Java"}, "method": {"name": "getResources", "qualified_name": "test.java.org.springframework.boot.support.EnvironmentPostProcessorApplicationListenerTests#getResources", "start_line": 290, "end_line": 304, "signature": "getResources(String name)", "original_code": "@Override\n\t\t\t\tpublic Enumeration<URL> getResources(String name) throws IOException {\n\t\t\t\t\tEnumeration<URL> resources = super.getResources(name);\n\t\t\t\t\tif (SpringFactoriesLoader.FACTORIES_RESOURCE_LOCATION.equals(name)) {\n\t\t\t\t\t\tPath springFactories = tempDir.resolve(\"spring.factories\");\n\t\t\t\t\t\ttry (BufferedWriter writer = Files.newBufferedWriter(springFactories)) {\n\t\t\t\t\t\t\tproperties.store(writer, \"\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tList<URL> allResources = new ArrayList<>();\n\t\t\t\t\t\tallResources.add(springFactories.toUri().toURL());\n\t\t\t\t\t\tallResources.addAll(Collections.list(resources));\n\t\t\t\t\t\treturn Collections.enumeration(allResources);\n\t\t\t\t\t}\n\t\t\t\t\treturn resources;\n\t\t\t\t}", "doc_comment": ""}, "code_tokens": ["getResources", "public", "Enumeration", "(", ")", "throws", "IOException", "{", "}", "@", "Override", "<", "URL", ">", "String", "name", ";", "if", "return", "resources", ";", "Enumeration", "resources", "=", "(", ")", "{", "}", "<", "URL", ">", "super", ".", "getResources", ".", "equals", "Path", ";", "try", ";", ";", ";", "return", ";", "(", "name", ")", "SpringFactoriesLoader", ".", "FACTORIES_RESOURCE_LOCATION", "(", "name", ")", "springFactories", "=", "(", ")", "{", "}", "List", "allResources", "=", "allResources", ".", "add", "allResources", ".", "addAll", "Collections", ".", "enumeration", "tempDir", ".", "resolve", "BufferedWriter", "writer", "=", ";", "<", "URL", ">", "new", "(", ")", "(", ")", "(", "allResources", ")", "(", ")", "Files", ".", "newBufferedWriter", "properties", ".", "store", "ArrayList", "(", ")", ".", "toURL", "Collections", ".", "list", "\"", "spring.factories", "\"", "(", "springFactories", ")", "(", "writer", ",", ")", "<", ">", "springFactories", ".", "toUri", "(", ")", "(", "resources", ")", "\"", "\"", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 190, "ast_depth": 12, "n_identifiers": 23, "vocab_size": 51, "n_whitespaces": 117, "n_words": 56, "nloc": 15, "token_counts": 129}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListenerTests.java#310-315", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListenerTests.java", "language": "Java"}, "method": {"name": "postProcessEnvironment", "qualified_name": "test.java.org.springframework.boot.support.EnvironmentPostProcessorApplicationListenerTests#postProcessEnvironment", "start_line": 310, "end_line": 315, "signature": "postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application)", "original_code": "@Override\n\t\t\tpublic void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {\n\t\t\t\tMockPropertySource propertySource = new MockPropertySource().withProperty(\"test.activeProfiles\",\n\t\t\t\t\t\tStringUtils.arrayToCommaDelimitedString(environment.getActiveProfiles()));\n\t\t\t\tenvironment.getPropertySources().addLast(propertySource);\n\t\t\t}", "doc_comment": ""}, "code_tokens": ["void", "postProcessEnvironment", "public", "(", ",", ")", "{", "}", "@", "Override", "ConfigurableEnvironment", "environment", "SpringApplication", "application", "MockPropertySource", ";", ";", "propertySource", "=", ".", "addLast", ".", "withProperty", "environment", ".", "getPropertySources", "(", "propertySource", ")", "new", "MockPropertySource", "(", ",", ")", "(", ")", "(", ")", "\"", "test.activeProfiles", "\"", "StringUtils", ".", "arrayToCommaDelimitedString", "(", ")", "environment", ".", "getActiveProfiles", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 75, "ast_depth": 12, "n_identifiers": 11, "vocab_size": 28, "n_whitespaces": 35, "n_words": 23, "nloc": 6, "token_counts": 51}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListenerTests.java#317-320", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListenerTests.java", "language": "Java"}, "method": {"name": "getOrder", "qualified_name": "test.java.org.springframework.boot.support.EnvironmentPostProcessorApplicationListenerTests#getOrder", "start_line": 317, "end_line": 320, "signature": "getOrder()", "original_code": "@Override\n\t\t\tpublic int getOrder() {\n\t\t\t\treturn Ordered.HIGHEST_PRECEDENCE;\n\t\t\t}", "doc_comment": ""}, "code_tokens": ["getOrder", "public", "int", "(", ")", "{", "}", "@", "Override", "return", ";", "Ordered", ".", "HIGHEST_PRECEDENCE"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 23, "ast_depth": 6, "n_identifiers": 4, "vocab_size": 14, "n_whitespaces": 17, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListenerTests.java#331-334", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListenerTests.java", "language": "Java"}, "method": {"name": "initialize", "qualified_name": "test.java.org.springframework.boot.support.EnvironmentPostProcessorApplicationListenerTests#initialize", "start_line": 331, "end_line": 334, "signature": "initialize(ConfigurableApplicationContext applicationContext)", "original_code": "@Override\n\t\t\tpublic void initialize(ConfigurableApplicationContext applicationContext) {\n\t\t\t\tapplicationContext.getBeanFactory().registerSingleton(\"test\", \"test\");\n\t\t\t}", "doc_comment": ""}, "code_tokens": ["void", "initialize", "public", "(", ")", "{", "}", "@", "Override", "ConfigurableApplicationContext", "applicationContext", ";", ".", "registerSingleton", "applicationContext", ".", "getBeanFactory", "(", ",", ")", "(", ")", "\"", "test", "\"", "\"", "test", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 42, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 18, "n_whitespaces": 18, "n_words": 11, "nloc": 4, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListenerTests.java#340-344", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListenerTests.java", "language": "Java"}, "method": {"name": "postProcessEnvironment", "qualified_name": "test.java.org.springframework.boot.support.EnvironmentPostProcessorApplicationListenerTests#postProcessEnvironment", "start_line": 340, "end_line": 344, "signature": "postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application)", "original_code": "@Override\n\t\t\tpublic void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {\n\t\t\t\tenvironment.addActiveProfile(\"one\");\n\t\t\t\tenvironment.addActiveProfile(\"three\");\n\t\t\t}", "doc_comment": ""}, "code_tokens": ["void", "postProcessEnvironment", "public", "(", ",", ")", "{", "}", "@", "Override", "ConfigurableEnvironment", "environment", "SpringApplication", "application", ";", ";", "environment", ".", "addActiveProfile", "environment", ".", "addActiveProfile", "(", ")", "(", ")", "\"", "one", "\"", "\"", "three", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 48, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 20, "n_whitespaces": 24, "n_words": 14, "nloc": 5, "token_counts": 32}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListenerTests.java#355-358", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/EnvironmentPostProcessorApplicationListenerTests.java", "language": "Java"}, "method": {"name": "initialize", "qualified_name": "test.java.org.springframework.boot.support.EnvironmentPostProcessorApplicationListenerTests#initialize", "start_line": 355, "end_line": 358, "signature": "initialize(ConfigurableApplicationContext applicationContext)", "original_code": "@Override\n\t\t\tpublic void initialize(ConfigurableApplicationContext applicationContext) {\n\t\t\t\tapplicationContext.getBeanFactory().registerSingleton(\"test\", \"test\");\n\t\t\t}", "doc_comment": ""}, "code_tokens": ["void", "initialize", "public", "(", ")", "{", "}", "@", "Override", "ConfigurableApplicationContext", "applicationContext", ";", ".", "registerSingleton", "applicationContext", ".", "getBeanFactory", "(", ",", ")", "(", ")", "\"", "test", "\"", "\"", "test", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 42, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 18, "n_whitespaces": 18, "n_words": 11, "nloc": 4, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/RandomValuePropertySourceEnvironmentPostProcessorTests.java#40-43", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/RandomValuePropertySourceEnvironmentPostProcessorTests.java", "language": "Java"}, "method": {"name": "getOrderIsBeforeConfigData", "qualified_name": "test.java.org.springframework.boot.support.RandomValuePropertySourceEnvironmentPostProcessorTests#getOrderIsBeforeConfigData", "start_line": 40, "end_line": 43, "signature": "getOrderIsBeforeConfigData()", "original_code": "@Test\n\tvoid getOrderIsBeforeConfigData() {\n\t\tassertThat(this.postProcessor.getOrder()).isLessThan(ConfigDataEnvironmentPostProcessor.ORDER);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "getOrderIsBeforeConfigData", "(", ")", "{", "}", "@", "Test", ";", ".", "isLessThan", "assertThat", "(", ")", "(", ")", "ConfigDataEnvironmentPostProcessor", ".", "ORDER", ".", "getOrder", "this", ".", "postProcessor", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 41, "ast_depth": 10, "n_identifiers": 8, "vocab_size": 17, "n_whitespaces": 9, "n_words": 10, "nloc": 4, "token_counts": 26}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/RandomValuePropertySourceEnvironmentPostProcessorTests.java#45-50", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/RandomValuePropertySourceEnvironmentPostProcessorTests.java", "language": "Java"}, "method": {"name": "postProcessEnvironmentAddsPropertySource", "qualified_name": "test.java.org.springframework.boot.support.RandomValuePropertySourceEnvironmentPostProcessorTests#postProcessEnvironmentAddsPropertySource", "start_line": 45, "end_line": 50, "signature": "postProcessEnvironmentAddsPropertySource()", "original_code": "@Test\n\tvoid postProcessEnvironmentAddsPropertySource() {\n\t\tMockEnvironment environment = new MockEnvironment();\n\t\tthis.postProcessor.postProcessEnvironment(environment, mock(SpringApplication.class));\n\t\tassertThat(environment.getProperty(\"random.string\")).isNotNull();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "postProcessEnvironmentAddsPropertySource", "(", ")", "{", "}", "@", "Test", "MockEnvironment", ";", ";", ";", "environment", "=", ".", "postProcessEnvironment", ".", "isNotNull", "new", "MockEnvironment", "this", ".", "postProcessor", "(", "environment", ",", ")", "assertThat", "(", ")", "(", ")", "mock", "(", ")", "(", ")", "environment", ".", "getProperty", "SpringApplication", ".", "class", "(", ")", "\"", "random.string", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 73, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 26, "n_whitespaces": 20, "n_words": 20, "nloc": 6, "token_counts": 48}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/ReflectionEnvironmentPostProcessorsFactoryTests.java#49-54", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/ReflectionEnvironmentPostProcessorsFactoryTests.java", "language": "Java"}, "method": {"name": "createWithClassesCreatesFactory", "qualified_name": "test.java.org.springframework.boot.support.ReflectionEnvironmentPostProcessorsFactoryTests#createWithClassesCreatesFactory", "start_line": 49, "end_line": 54, "signature": "createWithClassesCreatesFactory()", "original_code": "@Test\n\tvoid createWithClassesCreatesFactory() {\n\t\tReflectionEnvironmentPostProcessorsFactory factory = new ReflectionEnvironmentPostProcessorsFactory(\n\t\t\t\tTestEnvironmentPostProcessor.class);\n\t\tassertThatFactory(factory).createsSinglePostProcessor(TestEnvironmentPostProcessor.class);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "createWithClassesCreatesFactory", "(", ")", "{", "}", "@", "Test", "ReflectionEnvironmentPostProcessorsFactory", ";", ";", "factory", "=", ".", "createsSinglePostProcessor", "new", "ReflectionEnvironmentPostProcessorsFactory", "assertThatFactory", "(", ")", "(", ")", "(", "factory", ")", "TestEnvironmentPostProcessor", ".", "class", "TestEnvironmentPostProcessor", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 48, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 18, "n_whitespaces": 21, "n_words": 14, "nloc": 6, "token_counts": 31}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/ReflectionEnvironmentPostProcessorsFactoryTests.java#56-61", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/ReflectionEnvironmentPostProcessorsFactoryTests.java", "language": "Java"}, "method": {"name": "createWithClassNamesArrayCreatesFactory", "qualified_name": "test.java.org.springframework.boot.support.ReflectionEnvironmentPostProcessorsFactoryTests#createWithClassNamesArrayCreatesFactory", "start_line": 56, "end_line": 61, "signature": "createWithClassNamesArrayCreatesFactory()", "original_code": "@Test\n\tvoid createWithClassNamesArrayCreatesFactory() {\n\t\tReflectionEnvironmentPostProcessorsFactory factory = new ReflectionEnvironmentPostProcessorsFactory(null,\n\t\t\t\tTestEnvironmentPostProcessor.class.getName());\n\t\tassertThatFactory(factory).createsSinglePostProcessor(TestEnvironmentPostProcessor.class);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "createWithClassNamesArrayCreatesFactory", "(", ")", "{", "}", "@", "Test", "ReflectionEnvironmentPostProcessorsFactory", ";", ";", "factory", "=", ".", "createsSinglePostProcessor", "new", "ReflectionEnvironmentPostProcessorsFactory", "assertThatFactory", "(", ")", "(", "null", ",", ")", "(", "factory", ")", "TestEnvironmentPostProcessor", ".", "class", ".", "getName", "TestEnvironmentPostProcessor", ".", "class", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 56, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 21, "n_whitespaces": 21, "n_words": 16, "nloc": 6, "token_counts": 37}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/ReflectionEnvironmentPostProcessorsFactoryTests.java#63-68", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/ReflectionEnvironmentPostProcessorsFactoryTests.java", "language": "Java"}, "method": {"name": "createWithClassNamesListCreatesFactory", "qualified_name": "test.java.org.springframework.boot.support.ReflectionEnvironmentPostProcessorsFactoryTests#createWithClassNamesListCreatesFactory", "start_line": 63, "end_line": 68, "signature": "createWithClassNamesListCreatesFactory()", "original_code": "@Test\n\tvoid createWithClassNamesListCreatesFactory() {\n\t\tReflectionEnvironmentPostProcessorsFactory factory = new ReflectionEnvironmentPostProcessorsFactory(null,\n\t\t\t\tArrays.asList(TestEnvironmentPostProcessor.class.getName()));\n\t\tassertThatFactory(factory).createsSinglePostProcessor(TestEnvironmentPostProcessor.class);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "createWithClassNamesListCreatesFactory", "(", ")", "{", "}", "@", "Test", "ReflectionEnvironmentPostProcessorsFactory", ";", ";", "factory", "=", ".", "createsSinglePostProcessor", "new", "ReflectionEnvironmentPostProcessorsFactory", "assertThatFactory", "(", ")", "(", "null", ",", ")", "(", "factory", ")", "TestEnvironmentPostProcessor", ".", "class", "Arrays", ".", "asList", "(", ")", ".", "getName", "TestEnvironmentPostProcessor", ".", "class", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 63, "ast_depth": 12, "n_identifiers": 8, "vocab_size": 23, "n_whitespaces": 21, "n_words": 18, "nloc": 6, "token_counts": 42}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/ReflectionEnvironmentPostProcessorsFactoryTests.java#70-84", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/ReflectionEnvironmentPostProcessorsFactoryTests.java", "language": "Java"}, "method": {"name": "createWithClassNamesAndClassLoaderListCreatesFactory", "qualified_name": "test.java.org.springframework.boot.support.ReflectionEnvironmentPostProcessorsFactoryTests#createWithClassNamesAndClassLoaderListCreatesFactory", "start_line": 70, "end_line": 84, "signature": "createWithClassNamesAndClassLoaderListCreatesFactory()", "original_code": "@Test\n\tvoid createWithClassNamesAndClassLoaderListCreatesFactory() {\n\t\tOverridingClassLoader classLoader = new OverridingClassLoader(getClass().getClassLoader()) {\n\n\t\t\t@Override\n\t\t\tprotected boolean isEligibleForOverriding(String className) {\n\t\t\t\treturn super.isEligibleForOverriding(className)\n\t\t\t\t\t\t&& className.equals(TestEnvironmentPostProcessor.class.getName());\n\t\t\t}\n\n\t\t};\n\t\tReflectionEnvironmentPostProcessorsFactory factory = new ReflectionEnvironmentPostProcessorsFactory(classLoader,\n\t\t\t\tArrays.asList(TestEnvironmentPostProcessor.class.getName()));\n\t\tassertThatFactory(factory).createsSinglePostProcessorWithClassLoader(classLoader);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "createWithClassNamesAndClassLoaderListCreatesFactory", "(", ")", "{", "}", "@", "Test", "OverridingClassLoader", ";", "ReflectionEnvironmentPostProcessorsFactory", ";", ";", "classLoader", "=", "factory", "=", ".", "createsSinglePostProcessorWithClassLoader", "new", "OverridingClassLoader", "new", "ReflectionEnvironmentPostProcessorsFactory", "assertThatFactory", "(", "classLoader", ")", "(", ")", "{", "}", "(", "classLoader", ",", ")", "(", "factory", ")", ".", "getClassLoader", "boolean", "isEligibleForOverriding", "Arrays", ".", "asList", "getClass", "(", ")", "protected", "(", ")", "{", "}", "(", ")", "(", ")", "@", "Override", "String", "className", "return", ";", ".", "getName", "&&", "TestEnvironmentPostProcessor", ".", "class", "(", ")", "super", ".", "isEligibleForOverriding", "className", ".", "equals", "(", "className", ")", "(", ")", ".", "getName", "TestEnvironmentPostProcessor", ".", "class", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 133, "ast_depth": 16, "n_identifiers": 15, "vocab_size": 36, "n_whitespaces": 64, "n_words": 38, "nloc": 13, "token_counts": 89}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/ReflectionEnvironmentPostProcessorsFactoryTests.java#74-78", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/ReflectionEnvironmentPostProcessorsFactoryTests.java", "language": "Java"}, "method": {"name": "isEligibleForOverriding", "qualified_name": "test.java.org.springframework.boot.support.ReflectionEnvironmentPostProcessorsFactoryTests#isEligibleForOverriding", "start_line": 74, "end_line": 78, "signature": "isEligibleForOverriding(String className)", "original_code": "@Override\n\t\t\tprotected boolean isEligibleForOverriding(String className) {\n\t\t\t\treturn super.isEligibleForOverriding(className)\n\t\t\t\t\t\t&& className.equals(TestEnvironmentPostProcessor.class.getName());\n\t\t\t}", "doc_comment": ""}, "code_tokens": ["boolean", "isEligibleForOverriding", "protected", "(", ")", "{", "}", "@", "Override", "String", "className", "return", ";", "&&", "super", ".", "isEligibleForOverriding", "className", ".", "equals", "(", "className", ")", "(", ")", ".", "getName", "TestEnvironmentPostProcessor", ".", "class", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 48, "ast_depth": 10, "n_identifiers": 5, "vocab_size": 20, "n_whitespaces": 26, "n_words": 15, "nloc": 5, "token_counts": 32}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/ReflectionEnvironmentPostProcessorsFactoryTests.java#86-91", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/ReflectionEnvironmentPostProcessorsFactoryTests.java", "language": "Java"}, "method": {"name": "getEnvironmentPostProcessorsWhenHasDefaultConstructorCreatesPostProcessors", "qualified_name": "test.java.org.springframework.boot.support.ReflectionEnvironmentPostProcessorsFactoryTests#getEnvironmentPostProcessorsWhenHasDefaultConstructorCreatesPostProcessors", "start_line": 86, "end_line": 91, "signature": "getEnvironmentPostProcessorsWhenHasDefaultConstructorCreatesPostProcessors()", "original_code": "@Test\n\tvoid getEnvironmentPostProcessorsWhenHasDefaultConstructorCreatesPostProcessors() {\n\t\tReflectionEnvironmentPostProcessorsFactory factory = new ReflectionEnvironmentPostProcessorsFactory(null,\n\t\t\t\tTestEnvironmentPostProcessor.class.getName());\n\t\tassertThatFactory(factory).createsSinglePostProcessor(TestEnvironmentPostProcessor.class);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "getEnvironmentPostProcessorsWhenHasDefaultConstructorCreatesPostProcessors", "(", ")", "{", "}", "@", "Test", "ReflectionEnvironmentPostProcessorsFactory", ";", ";", "factory", "=", ".", "createsSinglePostProcessor", "new", "ReflectionEnvironmentPostProcessorsFactory", "assertThatFactory", "(", ")", "(", "null", ",", ")", "(", "factory", ")", "TestEnvironmentPostProcessor", ".", "class", ".", "getName", "TestEnvironmentPostProcessor", ".", "class", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 56, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 21, "n_whitespaces": 21, "n_words": 16, "nloc": 6, "token_counts": 37}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/ReflectionEnvironmentPostProcessorsFactoryTests.java#93-98", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/ReflectionEnvironmentPostProcessorsFactoryTests.java", "language": "Java"}, "method": {"name": "getEnvironmentPostProcessorsWhenHasLogFactoryConstructorCreatesPostProcessors", "qualified_name": "test.java.org.springframework.boot.support.ReflectionEnvironmentPostProcessorsFactoryTests#getEnvironmentPostProcessorsWhenHasLogFactoryConstructorCreatesPostProcessors", "start_line": 93, "end_line": 98, "signature": "getEnvironmentPostProcessorsWhenHasLogFactoryConstructorCreatesPostProcessors()", "original_code": "@Test\n\tvoid getEnvironmentPostProcessorsWhenHasLogFactoryConstructorCreatesPostProcessors() {\n\t\tReflectionEnvironmentPostProcessorsFactory factory = new ReflectionEnvironmentPostProcessorsFactory(null,\n\t\t\t\tTestLogFactoryEnvironmentPostProcessor.class.getName());\n\t\tassertThatFactory(factory).createsSinglePostProcessor(TestLogFactoryEnvironmentPostProcessor.class);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "getEnvironmentPostProcessorsWhenHasLogFactoryConstructorCreatesPostProcessors", "(", ")", "{", "}", "@", "Test", "ReflectionEnvironmentPostProcessorsFactory", ";", ";", "factory", "=", ".", "createsSinglePostProcessor", "new", "ReflectionEnvironmentPostProcessorsFactory", "assertThatFactory", "(", ")", "(", "null", ",", ")", "(", "factory", ")", "TestLogFactoryEnvironmentPostProcessor", ".", "class", ".", "getName", "TestLogFactoryEnvironmentPostProcessor", ".", "class", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 56, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 21, "n_whitespaces": 21, "n_words": 16, "nloc": 6, "token_counts": 37}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/ReflectionEnvironmentPostProcessorsFactoryTests.java#100-105", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/ReflectionEnvironmentPostProcessorsFactoryTests.java", "language": "Java"}, "method": {"name": "getEnvironmentPostProcessorsWhenHasLogConstructorCreatesPostProcessors", "qualified_name": "test.java.org.springframework.boot.support.ReflectionEnvironmentPostProcessorsFactoryTests#getEnvironmentPostProcessorsWhenHasLogConstructorCreatesPostProcessors", "start_line": 100, "end_line": 105, "signature": "getEnvironmentPostProcessorsWhenHasLogConstructorCreatesPostProcessors()", "original_code": "@Test\n\tvoid getEnvironmentPostProcessorsWhenHasLogConstructorCreatesPostProcessors() {\n\t\tReflectionEnvironmentPostProcessorsFactory factory = new ReflectionEnvironmentPostProcessorsFactory(null,\n\t\t\t\tTestLogEnvironmentPostProcessor.class.getName());\n\t\tassertThatFactory(factory).createsSinglePostProcessor(TestLogEnvironmentPostProcessor.class);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "getEnvironmentPostProcessorsWhenHasLogConstructorCreatesPostProcessors", "(", ")", "{", "}", "@", "Test", "ReflectionEnvironmentPostProcessorsFactory", ";", ";", "factory", "=", ".", "createsSinglePostProcessor", "new", "ReflectionEnvironmentPostProcessorsFactory", "assertThatFactory", "(", ")", "(", "null", ",", ")", "(", "factory", ")", "TestLogEnvironmentPostProcessor", ".", "class", ".", "getName", "TestLogEnvironmentPostProcessor", ".", "class", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 56, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 21, "n_whitespaces": 21, "n_words": 16, "nloc": 6, "token_counts": 37}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/ReflectionEnvironmentPostProcessorsFactoryTests.java#107-112", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/ReflectionEnvironmentPostProcessorsFactoryTests.java", "language": "Java"}, "method": {"name": "getEnvironmentPostProcessorsWhenHasBootstrapRegistryConstructorCreatesPostProcessors", "qualified_name": "test.java.org.springframework.boot.support.ReflectionEnvironmentPostProcessorsFactoryTests#getEnvironmentPostProcessorsWhenHasBootstrapRegistryConstructorCreatesPostProcessors", "start_line": 107, "end_line": 112, "signature": "getEnvironmentPostProcessorsWhenHasBootstrapRegistryConstructorCreatesPostProcessors()", "original_code": "@Test\n\tvoid getEnvironmentPostProcessorsWhenHasBootstrapRegistryConstructorCreatesPostProcessors() {\n\t\tReflectionEnvironmentPostProcessorsFactory factory = new ReflectionEnvironmentPostProcessorsFactory(null,\n\t\t\t\tTestBootstrapRegistryEnvironmentPostProcessor.class.getName());\n\t\tassertThatFactory(factory).createsSinglePostProcessor(TestBootstrapRegistryEnvironmentPostProcessor.class);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "getEnvironmentPostProcessorsWhenHasBootstrapRegistryConstructorCreatesPostProcessors", "(", ")", "{", "}", "@", "Test", "ReflectionEnvironmentPostProcessorsFactory", ";", ";", "factory", "=", ".", "createsSinglePostProcessor", "new", "ReflectionEnvironmentPostProcessorsFactory", "assertThatFactory", "(", ")", "(", "null", ",", ")", "(", "factory", ")", "TestBootstrapRegistryEnvironmentPostProcessor", ".", "class", ".", "getName", "TestBootstrapRegistryEnvironmentPostProcessor", ".", "class", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 56, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 21, "n_whitespaces": 21, "n_words": 16, "nloc": 6, "token_counts": 37}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/ReflectionEnvironmentPostProcessorsFactoryTests.java#114-121", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/ReflectionEnvironmentPostProcessorsFactoryTests.java", "language": "Java"}, "method": {"name": "getEnvironmentPostProcessorsWhenHasNoSuitableConstructorThrowsException", "qualified_name": "test.java.org.springframework.boot.support.ReflectionEnvironmentPostProcessorsFactoryTests#getEnvironmentPostProcessorsWhenHasNoSuitableConstructorThrowsException", "start_line": 114, "end_line": 121, "signature": "getEnvironmentPostProcessorsWhenHasNoSuitableConstructorThrowsException()", "original_code": "@Test\n\tvoid getEnvironmentPostProcessorsWhenHasNoSuitableConstructorThrowsException() {\n\t\tReflectionEnvironmentPostProcessorsFactory factory = new ReflectionEnvironmentPostProcessorsFactory(null,\n\t\t\t\tBadEnvironmentPostProcessor.class.getName());\n\t\tassertThatIllegalArgumentException()\n\t\t\t.isThrownBy(() -> factory.getEnvironmentPostProcessors(this.logFactory, this.bootstrapContext))\n\t\t\t.withMessageContaining(\"Unable to instantiate\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "getEnvironmentPostProcessorsWhenHasNoSuitableConstructorThrowsException", "(", ")", "{", "}", "@", "Test", "ReflectionEnvironmentPostProcessorsFactory", ";", ";", "factory", "=", ".", "withMessageContaining", "new", "ReflectionEnvironmentPostProcessorsFactory", ".", "isThrownBy", "(", ")", "(", "null", ",", ")", "assertThatIllegalArgumentException", "(", ")", "\"", "Unable to instantiate", "\"", ".", "getName", "(", ")", "->", "BadEnvironmentPostProcessor", ".", "class", "(", ")", "(", ")", "factory", ".", "getEnvironmentPostProcessors", "(", ",", ")", "this", ".", "logFactory", "this", ".", "bootstrapContext"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 82, "ast_depth": 12, "n_identifiers": 10, "vocab_size": 29, "n_whitespaces": 34, "n_words": 23, "nloc": 8, "token_counts": 55}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/ReflectionEnvironmentPostProcessorsFactoryTests.java#123-125", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/ReflectionEnvironmentPostProcessorsFactoryTests.java", "language": "Java"}, "method": {"name": "assertThatFactory", "qualified_name": "test.java.org.springframework.boot.support.ReflectionEnvironmentPostProcessorsFactoryTests#assertThatFactory", "start_line": 123, "end_line": 125, "signature": "assertThatFactory(EnvironmentPostProcessorsFactory factory)", "original_code": "private EnvironmentPostProcessorsFactoryAssert assertThatFactory(EnvironmentPostProcessorsFactory factory) {\n\t\treturn new EnvironmentPostProcessorsFactoryAssert(factory);\n\t}", "doc_comment": ""}, "code_tokens": ["EnvironmentPostProcessorsFactoryAssert", "assertThatFactory", "private", "(", ")", "{", "}", "EnvironmentPostProcessorsFactory", "factory", "return", ";", "new", "EnvironmentPostProcessorsFactoryAssert", "(", "factory", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 25, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 12, "n_whitespaces": 11, "n_words": 9, "nloc": 3, "token_counts": 16}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/ReflectionEnvironmentPostProcessorsFactoryTests.java#135-138", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/ReflectionEnvironmentPostProcessorsFactoryTests.java", "language": "Java"}, "method": {"name": "createsSinglePostProcessor", "qualified_name": "test.java.org.springframework.boot.support.ReflectionEnvironmentPostProcessorsFactoryTests#createsSinglePostProcessor", "start_line": 135, "end_line": 138, "signature": "createsSinglePostProcessor(Class<?> expectedType)", "original_code": "void createsSinglePostProcessor(Class<?> expectedType) {\n\t\t\tEnvironmentPostProcessor processor = getSingleProcessor();\n\t\t\tassertThat(processor).isInstanceOf(expectedType);\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "createsSinglePostProcessor", "(", ")", "{", "}", "expectedType", "EnvironmentPostProcessor", ";", ";", "Class", "processor", "=", ".", "isInstanceOf", "<", ">", "getSingleProcessor", "assertThat", "(", "expectedType", ")", "?", "(", ")", "(", "processor", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 45, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 19, "n_whitespaces": 17, "n_words": 11, "nloc": 4, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/ReflectionEnvironmentPostProcessorsFactoryTests.java#140-143", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/ReflectionEnvironmentPostProcessorsFactoryTests.java", "language": "Java"}, "method": {"name": "createsSinglePostProcessorWithClassLoader", "qualified_name": "test.java.org.springframework.boot.support.ReflectionEnvironmentPostProcessorsFactoryTests#createsSinglePostProcessorWithClassLoader", "start_line": 140, "end_line": 143, "signature": "createsSinglePostProcessorWithClassLoader(OverridingClassLoader classLoader)", "original_code": "void createsSinglePostProcessorWithClassLoader(OverridingClassLoader classLoader) {\n\t\t\tEnvironmentPostProcessor processor = getSingleProcessor();\n\t\t\tassertThat(processor.getClass().getClassLoader()).isSameAs(classLoader);\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "createsSinglePostProcessorWithClassLoader", "(", ")", "{", "}", "OverridingClassLoader", "classLoader", "EnvironmentPostProcessor", ";", ";", "processor", "=", ".", "isSameAs", "getSingleProcessor", "assertThat", "(", "classLoader", ")", "(", ")", "(", ")", ".", "getClassLoader", "processor", ".", "getClass", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 51, "ast_depth": 11, "n_identifiers": 8, "vocab_size": 18, "n_whitespaces": 17, "n_words": 13, "nloc": 4, "token_counts": 33}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/ReflectionEnvironmentPostProcessorsFactoryTests.java#145-151", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/ReflectionEnvironmentPostProcessorsFactoryTests.java", "language": "Java"}, "method": {"name": "getSingleProcessor", "qualified_name": "test.java.org.springframework.boot.support.ReflectionEnvironmentPostProcessorsFactoryTests#getSingleProcessor", "start_line": 145, "end_line": 151, "signature": "getSingleProcessor()", "original_code": "private EnvironmentPostProcessor getSingleProcessor() {\n\t\t\tList<EnvironmentPostProcessor> processors = this.factory.getEnvironmentPostProcessors(\n\t\t\t\t\tReflectionEnvironmentPostProcessorsFactoryTests.this.logFactory,\n\t\t\t\t\tReflectionEnvironmentPostProcessorsFactoryTests.this.bootstrapContext);\n\t\t\tassertThat(processors).hasSize(1);\n\t\t\treturn processors.get(0);\n\t\t}", "doc_comment": ""}, "code_tokens": ["EnvironmentPostProcessor", "getSingleProcessor", "private", "(", ")", "{", "}", ";", ";", "return", ";", "List", "processors", "=", ".", "hasSize", "processors", ".", "get", "<", "EnvironmentPostProcessor", ">", ".", "getEnvironmentPostProcessors", "assertThat", "(", "1", ")", "(", "0", ")", "this", ".", "factory", "(", ",", ")", "(", "processors", ")", ".", "logFactory", ".", "bootstrapContext", "ReflectionEnvironmentPostProcessorsFactoryTests", ".", "this", "ReflectionEnvironmentPostProcessorsFactoryTests", ".", "this"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 74, "ast_depth": 10, "n_identifiers": 10, "vocab_size": 27, "n_whitespaces": 34, "n_words": 23, "nloc": 7, "token_counts": 50}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/ReflectionEnvironmentPostProcessorsFactoryTests.java#157-159", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/ReflectionEnvironmentPostProcessorsFactoryTests.java", "language": "Java"}, "method": {"name": "postProcessEnvironment", "qualified_name": "test.java.org.springframework.boot.support.ReflectionEnvironmentPostProcessorsFactoryTests#postProcessEnvironment", "start_line": 157, "end_line": 159, "signature": "postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application)", "original_code": "@Override\n\t\tpublic void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "postProcessEnvironment", "public", "(", ",", ")", "{", "}", "@", "Override", "ConfigurableEnvironment", "environment", "SpringApplication", "application"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 5, "n_identifiers": 4, "vocab_size": 14, "n_whitespaces": 12, "n_words": 8, "nloc": 3, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/ReflectionEnvironmentPostProcessorsFactoryTests.java#169-171", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/ReflectionEnvironmentPostProcessorsFactoryTests.java", "language": "Java"}, "method": {"name": "postProcessEnvironment", "qualified_name": "test.java.org.springframework.boot.support.ReflectionEnvironmentPostProcessorsFactoryTests#postProcessEnvironment", "start_line": 169, "end_line": 171, "signature": "postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application)", "original_code": "@Override\n\t\tpublic void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "postProcessEnvironment", "public", "(", ",", ")", "{", "}", "@", "Override", "ConfigurableEnvironment", "environment", "SpringApplication", "application"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 5, "n_identifiers": 4, "vocab_size": 14, "n_whitespaces": 12, "n_words": 8, "nloc": 3, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/ReflectionEnvironmentPostProcessorsFactoryTests.java#181-183", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/ReflectionEnvironmentPostProcessorsFactoryTests.java", "language": "Java"}, "method": {"name": "postProcessEnvironment", "qualified_name": "test.java.org.springframework.boot.support.ReflectionEnvironmentPostProcessorsFactoryTests#postProcessEnvironment", "start_line": 181, "end_line": 183, "signature": "postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application)", "original_code": "@Override\n\t\tpublic void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "postProcessEnvironment", "public", "(", ",", ")", "{", "}", "@", "Override", "ConfigurableEnvironment", "environment", "SpringApplication", "application"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 5, "n_identifiers": 4, "vocab_size": 14, "n_whitespaces": 12, "n_words": 8, "nloc": 3, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/ReflectionEnvironmentPostProcessorsFactoryTests.java#193-195", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/ReflectionEnvironmentPostProcessorsFactoryTests.java", "language": "Java"}, "method": {"name": "postProcessEnvironment", "qualified_name": "test.java.org.springframework.boot.support.ReflectionEnvironmentPostProcessorsFactoryTests#postProcessEnvironment", "start_line": 193, "end_line": 195, "signature": "postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application)", "original_code": "@Override\n\t\tpublic void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "postProcessEnvironment", "public", "(", ",", ")", "{", "}", "@", "Override", "ConfigurableEnvironment", "environment", "SpringApplication", "application"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 5, "n_identifiers": 4, "vocab_size": 14, "n_whitespaces": 12, "n_words": 8, "nloc": 3, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/ReflectionEnvironmentPostProcessorsFactoryTests.java#204-206", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/ReflectionEnvironmentPostProcessorsFactoryTests.java", "language": "Java"}, "method": {"name": "postProcessEnvironment", "qualified_name": "test.java.org.springframework.boot.support.ReflectionEnvironmentPostProcessorsFactoryTests#postProcessEnvironment", "start_line": 204, "end_line": 206, "signature": "postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application)", "original_code": "@Override\n\t\tpublic void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "postProcessEnvironment", "public", "(", ",", ")", "{", "}", "@", "Override", "ConfigurableEnvironment", "environment", "SpringApplication", "application"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 5, "n_identifiers": 4, "vocab_size": 14, "n_whitespaces": 12, "n_words": 8, "nloc": 3, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessorTests.java#51-58", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessorTests.java", "language": "Java"}, "method": {"name": "error", "qualified_name": "test.java.org.springframework.boot.support.SpringApplicationJsonEnvironmentPostProcessorTests#error", "start_line": 51, "end_line": 58, "signature": "error()", "original_code": "@Test\n\tvoid error() {\n\t\tassertThat(this.environment.resolvePlaceholders(\"${foo:}\")).isEmpty();\n\t\tTestPropertySourceUtils.addInlinedPropertiesToEnvironment(this.environment, \"spring.application.json=foo:bar\");\n\t\tassertThatExceptionOfType(JsonParseException.class)\n\t\t\t.isThrownBy(() -> this.processor.postProcessEnvironment(this.environment, null))\n\t\t\t.withMessageContaining(\"Cannot parse JSON\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "error", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ".", "isEmpty", "TestPropertySourceUtils", ".", "addInlinedPropertiesToEnvironment", ".", "withMessageContaining", "assertThat", "(", ")", "(", ",", ")", ".", "isThrownBy", "(", ")", "(", ")", "this", ".", "environment", "\"", "spring.application.json=foo:bar", "\"", "assertThatExceptionOfType", "(", ")", "\"", "Cannot parse JSON", "\"", ".", "resolvePlaceholders", "(", ")", "->", "this", ".", "environment", "(", ")", "JsonParseException", ".", "class", "(", ")", ".", "postProcessEnvironment", "\"", "${foo:}", "\"", "this", ".", "processor", "(", ",", "null", ")", "this", ".", "environment"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 107, "ast_depth": 12, "n_identifiers": 13, "vocab_size": 31, "n_whitespaces": 29, "n_words": 32, "nloc": 8, "token_counts": 72}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessorTests.java#60-65", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessorTests.java", "language": "Java"}, "method": {"name": "missing", "qualified_name": "test.java.org.springframework.boot.support.SpringApplicationJsonEnvironmentPostProcessorTests#missing", "start_line": 60, "end_line": 65, "signature": "missing()", "original_code": "@Test\n\tvoid missing() {\n\t\tassertThat(this.environment.resolvePlaceholders(\"${foo:}\")).isEmpty();\n\t\tthis.processor.postProcessEnvironment(this.environment, null);\n\t\tassertThat(this.environment.resolvePlaceholders(\"${foo:}\")).isEmpty();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "missing", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ".", "isEmpty", ".", "postProcessEnvironment", ".", "isEmpty", "assertThat", "(", ")", "this", ".", "processor", "(", ",", "null", ")", "assertThat", "(", ")", "(", ")", "this", ".", "environment", "(", ")", ".", "resolvePlaceholders", ".", "resolvePlaceholders", "this", ".", "environment", "(", ")", "this", ".", "environment", "(", ")", "\"", "${foo:}", "\"", "\"", "${foo:}", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 86, "ast_depth": 11, "n_identifiers": 8, "vocab_size": 21, "n_whitespaces": 16, "n_words": 21, "nloc": 6, "token_counts": 57}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessorTests.java#67-73", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessorTests.java", "language": "Java"}, "method": {"name": "empty", "qualified_name": "test.java.org.springframework.boot.support.SpringApplicationJsonEnvironmentPostProcessorTests#empty", "start_line": 67, "end_line": 73, "signature": "empty()", "original_code": "@Test\n\tvoid empty() {\n\t\tassertThat(this.environment.resolvePlaceholders(\"${foo:}\")).isEmpty();\n\t\tTestPropertySourceUtils.addInlinedPropertiesToEnvironment(this.environment, \"spring.application.json={}\");\n\t\tthis.processor.postProcessEnvironment(this.environment, null);\n\t\tassertThat(this.environment.resolvePlaceholders(\"${foo:}\")).isEmpty();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "empty", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ";", ".", "isEmpty", "TestPropertySourceUtils", ".", "addInlinedPropertiesToEnvironment", ".", "postProcessEnvironment", ".", "isEmpty", "assertThat", "(", ")", "(", ",", ")", "this", ".", "processor", "(", ",", "null", ")", "assertThat", "(", ")", "(", ")", "this", ".", "environment", "\"", "spring.application.json={}", "\"", "this", ".", "environment", "(", ")", ".", "resolvePlaceholders", ".", "resolvePlaceholders", "this", ".", "environment", "(", ")", "this", ".", "environment", "(", ")", "\"", "${foo:}", "\"", "\"", "${foo:}", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 104, "ast_depth": 11, "n_identifiers": 10, "vocab_size": 24, "n_whitespaces": 20, "n_words": 28, "nloc": 7, "token_counts": 70}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessorTests.java#75-82", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessorTests.java", "language": "Java"}, "method": {"name": "periodSeparated", "qualified_name": "test.java.org.springframework.boot.support.SpringApplicationJsonEnvironmentPostProcessorTests#periodSeparated", "start_line": 75, "end_line": 82, "signature": "periodSeparated()", "original_code": "@Test\n\tvoid periodSeparated() {\n\t\tassertThat(this.environment.resolvePlaceholders(\"${foo:}\")).isEmpty();\n\t\tTestPropertySourceUtils.addInlinedPropertiesToEnvironment(this.environment,\n\t\t\t\t\"spring.application.json={\\\"foo\\\":\\\"bar\\\"}\");\n\t\tthis.processor.postProcessEnvironment(this.environment, null);\n\t\tassertThat(this.environment.resolvePlaceholders(\"${foo:}\")).isEqualTo(\"bar\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "periodSeparated", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ";", ".", "isEmpty", "TestPropertySourceUtils", ".", "addInlinedPropertiesToEnvironment", ".", "postProcessEnvironment", ".", "isEqualTo", "assertThat", "(", ")", "(", ",", ")", "this", ".", "processor", "(", ",", "null", ")", "assertThat", "(", ")", "(", ")", "this", ".", "environment", "\"", "spring.application.json={", "\\\"", "foo", "\\\"", ":", "\\\"", "bar", "\\\"", "}", "\"", "this", ".", "environment", "(", ")", "\"", "bar", "\"", ".", "resolvePlaceholders", ".", "resolvePlaceholders", "this", ".", "environment", "(", ")", "this", ".", "environment", "(", ")", "\"", "${foo:}", "\"", "\"", "${foo:}", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 116, "ast_depth": 11, "n_identifiers": 11, "vocab_size": 29, "n_whitespaces": 24, "n_words": 31, "nloc": 8, "token_counts": 81}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessorTests.java#84-91", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessorTests.java", "language": "Java"}, "method": {"name": "envVar", "qualified_name": "test.java.org.springframework.boot.support.SpringApplicationJsonEnvironmentPostProcessorTests#envVar", "start_line": 84, "end_line": 91, "signature": "envVar()", "original_code": "@Test\n\tvoid envVar() {\n\t\tassertThat(this.environment.resolvePlaceholders(\"${foo:}\")).isEmpty();\n\t\tTestPropertySourceUtils.addInlinedPropertiesToEnvironment(this.environment,\n\t\t\t\t\"SPRING_APPLICATION_JSON={\\\"foo\\\":\\\"bar\\\"}\");\n\t\tthis.processor.postProcessEnvironment(this.environment, null);\n\t\tassertThat(this.environment.resolvePlaceholders(\"${foo:}\")).isEqualTo(\"bar\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "envVar", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ";", ".", "isEmpty", "TestPropertySourceUtils", ".", "addInlinedPropertiesToEnvironment", ".", "postProcessEnvironment", ".", "isEqualTo", "assertThat", "(", ")", "(", ",", ")", "this", ".", "processor", "(", ",", "null", ")", "assertThat", "(", ")", "(", ")", "this", ".", "environment", "\"", "SPRING_APPLICATION_JSON={", "\\\"", "foo", "\\\"", ":", "\\\"", "bar", "\\\"", "}", "\"", "this", ".", "environment", "(", ")", "\"", "bar", "\"", ".", "resolvePlaceholders", ".", "resolvePlaceholders", "this", ".", "environment", "(", ")", "this", ".", "environment", "(", ")", "\"", "${foo:}", "\"", "\"", "${foo:}", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 116, "ast_depth": 11, "n_identifiers": 11, "vocab_size": 29, "n_whitespaces": 24, "n_words": 29, "nloc": 8, "token_counts": 81}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessorTests.java#93-101", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessorTests.java", "language": "Java"}, "method": {"name": "nested", "qualified_name": "test.java.org.springframework.boot.support.SpringApplicationJsonEnvironmentPostProcessorTests#nested", "start_line": 93, "end_line": 101, "signature": "nested()", "original_code": "@Test\n\tvoid nested() {\n\t\tassertThat(this.environment.resolvePlaceholders(\"${foo:}\")).isEmpty();\n\t\tTestPropertySourceUtils.addInlinedPropertiesToEnvironment(this.environment,\n\t\t\t\t\"SPRING_APPLICATION_JSON={\\\"foo\\\":{\\\"bar\\\":\\\"spam\\\",\\\"rab\\\":\\\"maps\\\"}}\");\n\t\tthis.processor.postProcessEnvironment(this.environment, null);\n\t\tassertThat(this.environment.resolvePlaceholders(\"${foo.bar:}\")).isEqualTo(\"spam\");\n\t\tassertThat(this.environment.resolvePlaceholders(\"${foo.rab:}\")).isEqualTo(\"maps\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "nested", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ";", ";", ".", "isEmpty", "TestPropertySourceUtils", ".", "addInlinedPropertiesToEnvironment", ".", "postProcessEnvironment", ".", "isEqualTo", ".", "isEqualTo", "assertThat", "(", ")", "(", ",", ")", "this", ".", "processor", "(", ",", "null", ")", "assertThat", "(", ")", "assertThat", "(", ")", "(", ")", "this", ".", "environment", "\"", "SPRING_APPLICATION_JSON={", "\\\"", "foo", "\\\"", ":{", "\\\"", "bar", "\\\"", ":", "\\\"", "spam", "\\\"", ",", "\\\"", "rab", "\\\"", ":", "\\\"", "maps", "\\\"", "}}", "\"", "this", ".", "environment", "(", ")", "\"", "spam", "\"", "(", ")", "\"", "maps", "\"", ".", "resolvePlaceholders", ".", "resolvePlaceholders", ".", "resolvePlaceholders", "this", ".", "environment", "(", ")", "this", ".", "environment", "(", ")", "this", ".", "environment", "(", ")", "\"", "${foo:}", "\"", "\"", "${foo.bar:}", "\"", "\"", "${foo.rab:}", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 159, "ast_depth": 11, "n_identifiers": 11, "vocab_size": 36, "n_whitespaces": 27, "n_words": 41, "nloc": 9, "token_counts": 114}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessorTests.java#103-110", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessorTests.java", "language": "Java"}, "method": {"name": "prefixed", "qualified_name": "test.java.org.springframework.boot.support.SpringApplicationJsonEnvironmentPostProcessorTests#prefixed", "start_line": 103, "end_line": 110, "signature": "prefixed()", "original_code": "@Test\n\tvoid prefixed() {\n\t\tassertThat(this.environment.resolvePlaceholders(\"${foo:}\")).isEmpty();\n\t\tTestPropertySourceUtils.addInlinedPropertiesToEnvironment(this.environment,\n\t\t\t\t\"SPRING_APPLICATION_JSON={\\\"foo.bar\\\":\\\"spam\\\"}\");\n\t\tthis.processor.postProcessEnvironment(this.environment, null);\n\t\tassertThat(this.environment.resolvePlaceholders(\"${foo.bar:}\")).isEqualTo(\"spam\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "prefixed", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ";", ".", "isEmpty", "TestPropertySourceUtils", ".", "addInlinedPropertiesToEnvironment", ".", "postProcessEnvironment", ".", "isEqualTo", "assertThat", "(", ")", "(", ",", ")", "this", ".", "processor", "(", ",", "null", ")", "assertThat", "(", ")", "(", ")", "this", ".", "environment", "\"", "SPRING_APPLICATION_JSON={", "\\\"", "foo.bar", "\\\"", ":", "\\\"", "spam", "\\\"", "}", "\"", "this", ".", "environment", "(", ")", "\"", "spam", "\"", ".", "resolvePlaceholders", ".", "resolvePlaceholders", "this", ".", "environment", "(", ")", "this", ".", "environment", "(", ")", "\"", "${foo:}", "\"", "\"", "${foo.bar:}", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 116, "ast_depth": 11, "n_identifiers": 11, "vocab_size": 30, "n_whitespaces": 24, "n_words": 31, "nloc": 8, "token_counts": 81}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessorTests.java#112-119", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessorTests.java", "language": "Java"}, "method": {"name": "list", "qualified_name": "test.java.org.springframework.boot.support.SpringApplicationJsonEnvironmentPostProcessorTests#list", "start_line": 112, "end_line": 119, "signature": "list()", "original_code": "@Test\n\tvoid list() {\n\t\tassertThat(this.environment.resolvePlaceholders(\"${foo[1]:}\")).isEmpty();\n\t\tTestPropertySourceUtils.addInlinedPropertiesToEnvironment(this.environment,\n\t\t\t\t\"SPRING_APPLICATION_JSON={\\\"foo\\\":[\\\"bar\\\",\\\"spam\\\"]}\");\n\t\tthis.processor.postProcessEnvironment(this.environment, null);\n\t\tassertThat(this.environment.resolvePlaceholders(\"${foo[1]:}\")).isEqualTo(\"spam\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "list", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ";", ".", "isEmpty", "TestPropertySourceUtils", ".", "addInlinedPropertiesToEnvironment", ".", "postProcessEnvironment", ".", "isEqualTo", "assertThat", "(", ")", "(", ",", ")", "this", ".", "processor", "(", ",", "null", ")", "assertThat", "(", ")", "(", ")", "this", ".", "environment", "\"", "SPRING_APPLICATION_JSON={", "\\\"", "foo", "\\\"", ":[", "\\\"", "bar", "\\\"", ",", "\\\"", "spam", "\\\"", "]}", "\"", "this", ".", "environment", "(", ")", "\"", "spam", "\"", ".", "resolvePlaceholders", ".", "resolvePlaceholders", "this", ".", "environment", "(", ")", "this", ".", "environment", "(", ")", "\"", "${foo[1]:}", "\"", "\"", "${foo[1]:}", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 120, "ast_depth": 11, "n_identifiers": 11, "vocab_size": 31, "n_whitespaces": 24, "n_words": 32, "nloc": 8, "token_counts": 85}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessorTests.java#121-128", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessorTests.java", "language": "Java"}, "method": {"name": "listOfObject", "qualified_name": "test.java.org.springframework.boot.support.SpringApplicationJsonEnvironmentPostProcessorTests#listOfObject", "start_line": 121, "end_line": 128, "signature": "listOfObject()", "original_code": "@Test\n\tvoid listOfObject() {\n\t\tassertThat(this.environment.resolvePlaceholders(\"${foo[0].bar:}\")).isEmpty();\n\t\tTestPropertySourceUtils.addInlinedPropertiesToEnvironment(this.environment,\n\t\t\t\t\"SPRING_APPLICATION_JSON={\\\"foo\\\":[{\\\"bar\\\":\\\"spam\\\"}]}\");\n\t\tthis.processor.postProcessEnvironment(this.environment, null);\n\t\tassertThat(this.environment.resolvePlaceholders(\"${foo[0].bar:}\")).isEqualTo(\"spam\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "listOfObject", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ";", ".", "isEmpty", "TestPropertySourceUtils", ".", "addInlinedPropertiesToEnvironment", ".", "postProcessEnvironment", ".", "isEqualTo", "assertThat", "(", ")", "(", ",", ")", "this", ".", "processor", "(", ",", "null", ")", "assertThat", "(", ")", "(", ")", "this", ".", "environment", "\"", "SPRING_APPLICATION_JSON={", "\\\"", "foo", "\\\"", ":[{", "\\\"", "bar", "\\\"", ":", "\\\"", "spam", "\\\"", "}]}", "\"", "this", ".", "environment", "(", ")", "\"", "spam", "\"", ".", "resolvePlaceholders", ".", "resolvePlaceholders", "this", ".", "environment", "(", ")", "this", ".", "environment", "(", ")", "\"", "${foo[0].bar:}", "\"", "\"", "${foo[0].bar:}", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 120, "ast_depth": 11, "n_identifiers": 11, "vocab_size": 32, "n_whitespaces": 24, "n_words": 34, "nloc": 8, "token_counts": 85}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessorTests.java#130-141", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessorTests.java", "language": "Java"}, "method": {"name": "propertySourceShouldTrackOrigin", "qualified_name": "test.java.org.springframework.boot.support.SpringApplicationJsonEnvironmentPostProcessorTests#propertySourceShouldTrackOrigin", "start_line": 130, "end_line": 141, "signature": "propertySourceShouldTrackOrigin()", "original_code": "@Test\n\tvoid propertySourceShouldTrackOrigin() {\n\t\tassertThat(this.environment.resolvePlaceholders(\"${foo:}\")).isEmpty();\n\t\tTestPropertySourceUtils.addInlinedPropertiesToEnvironment(this.environment,\n\t\t\t\t\"spring.application.json={\\\"foo\\\":\\\"bar\\\"}\");\n\t\tthis.processor.postProcessEnvironment(this.environment, null);\n\t\tPropertySource<?> propertySource = this.environment.getPropertySources().get(\"spring.application.json\");\n\t\tPropertySourceOrigin origin = (PropertySourceOrigin) PropertySourceOrigin.get(propertySource, \"foo\");\n\t\tassertThat(origin.getPropertySource().getName()).isEqualTo(\"Inlined Test Properties\");\n\t\tassertThat(origin.getPropertyName()).isEqualTo(\"spring.application.json\");\n\t\tassertThat(this.environment.resolvePlaceholders(\"${foo:}\")).isEqualTo(\"bar\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "propertySourceShouldTrackOrigin", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ";", "PropertySourceOrigin", ";", ";", ";", ";", ".", "isEmpty", "TestPropertySourceUtils", ".", "addInlinedPropertiesToEnvironment", ".", "postProcessEnvironment", "PropertySource", "propertySource", "=", "origin", "=", ".", "isEqualTo", ".", "isEqualTo", ".", "isEqualTo", "assertThat", "(", ")", "(", ",", ")", "this", ".", "processor", "(", ",", "null", ")", "<", ">", ".", "get", "(", "PropertySourceOrigin", ")", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "(", ")", "this", ".", "environment", "\"", "spring.application.json={", "\\\"", "foo", "\\\"", ":", "\\\"", "bar", "\\\"", "}", "\"", "this", ".", "environment", "?", ".", "getPropertySources", "(", ")", "PropertySourceOrigin", ".", "get", "(", ")", "\"", "Inlined Test Properties", "\"", "(", ")", "\"", "spring.application.json", "\"", "(", ")", "\"", "bar", "\"", ".", "resolvePlaceholders", "this", ".", "environment", "(", ")", "\"", "spring.application.json", "\"", "(", "propertySource", ",", ")", ".", "getName", "origin", ".", "getPropertyName", ".", "resolvePlaceholders", "this", ".", "environment", "(", ")", "\"", "foo", "\"", "origin", ".", "getPropertySource", "(", ")", "(", ")", "this", ".", "environment", "(", ")", "\"", "${foo:}", "\"", "(", ")", "\"", "${foo:}", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 225, "ast_depth": 11, "n_identifiers": 19, "vocab_size": 44, "n_whitespaces": 46, "n_words": 62, "nloc": 12, "token_counts": 155}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessorTests.java#143-146", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessorTests.java", "language": "Java"}, "method": {"name": "propertySourceShouldBeOrderedBeforeJndiPropertySource", "qualified_name": "test.java.org.springframework.boot.support.SpringApplicationJsonEnvironmentPostProcessorTests#propertySourceShouldBeOrderedBeforeJndiPropertySource", "start_line": 143, "end_line": 146, "signature": "propertySourceShouldBeOrderedBeforeJndiPropertySource()", "original_code": "@Test\n\tvoid propertySourceShouldBeOrderedBeforeJndiPropertySource() {\n\t\ttestServletPropertySource(StandardServletEnvironment.JNDI_PROPERTY_SOURCE_NAME);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "propertySourceShouldBeOrderedBeforeJndiPropertySource", "(", ")", "{", "}", "@", "Test", ";", "testServletPropertySource", "(", ")", "StandardServletEnvironment", ".", "JNDI_PROPERTY_SOURCE_NAME"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 25, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 13, "n_whitespaces": 9, "n_words": 6, "nloc": 4, "token_counts": 15}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessorTests.java#148-151", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessorTests.java", "language": "Java"}, "method": {"name": "propertySourceShouldBeOrderedBeforeServletContextPropertySource", "qualified_name": "test.java.org.springframework.boot.support.SpringApplicationJsonEnvironmentPostProcessorTests#propertySourceShouldBeOrderedBeforeServletContextPropertySource", "start_line": 148, "end_line": 151, "signature": "propertySourceShouldBeOrderedBeforeServletContextPropertySource()", "original_code": "@Test\n\tvoid propertySourceShouldBeOrderedBeforeServletContextPropertySource() {\n\t\ttestServletPropertySource(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "propertySourceShouldBeOrderedBeforeServletContextPropertySource", "(", ")", "{", "}", "@", "Test", ";", "testServletPropertySource", "(", ")", "StandardServletEnvironment", ".", "SERVLET_CONTEXT_PROPERTY_SOURCE_NAME"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 25, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 13, "n_whitespaces": 9, "n_words": 6, "nloc": 4, "token_counts": 15}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessorTests.java#153-156", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessorTests.java", "language": "Java"}, "method": {"name": "propertySourceShouldBeOrderedBeforeServletConfigPropertySource", "qualified_name": "test.java.org.springframework.boot.support.SpringApplicationJsonEnvironmentPostProcessorTests#propertySourceShouldBeOrderedBeforeServletConfigPropertySource", "start_line": 153, "end_line": 156, "signature": "propertySourceShouldBeOrderedBeforeServletConfigPropertySource()", "original_code": "@Test\n\tvoid propertySourceShouldBeOrderedBeforeServletConfigPropertySource() {\n\t\ttestServletPropertySource(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "propertySourceShouldBeOrderedBeforeServletConfigPropertySource", "(", ")", "{", "}", "@", "Test", ";", "testServletPropertySource", "(", ")", "StandardServletEnvironment", ".", "SERVLET_CONFIG_PROPERTY_SOURCE_NAME"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 25, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 13, "n_whitespaces": 9, "n_words": 6, "nloc": 4, "token_counts": 15}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessorTests.java#158-173", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessorTests.java", "language": "Java"}, "method": {"name": "propertySourceOrderingWhenMultipleServletSpecificPropertySources", "qualified_name": "test.java.org.springframework.boot.support.SpringApplicationJsonEnvironmentPostProcessorTests#propertySourceOrderingWhenMultipleServletSpecificPropertySources", "start_line": 158, "end_line": 173, "signature": "propertySourceOrderingWhenMultipleServletSpecificPropertySources()", "original_code": "@Test\n\tvoid propertySourceOrderingWhenMultipleServletSpecificPropertySources() {\n\t\tMapPropertySource jndi = getPropertySource(StandardServletEnvironment.JNDI_PROPERTY_SOURCE_NAME, \"jndi\");\n\t\tthis.environment.getPropertySources().addFirst(jndi);\n\t\tMapPropertySource servlet = getPropertySource(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME,\n\t\t\t\t\"servlet\");\n\t\tthis.environment.getPropertySources().addFirst(servlet);\n\t\tMapPropertySource custom = getPropertySource(\"custom\", \"custom\");\n\t\tthis.environment.getPropertySources().addFirst(custom);\n\t\tTestPropertySourceUtils.addInlinedPropertiesToEnvironment(this.environment,\n\t\t\t\t\"SPRING_APPLICATION_JSON={\\\"foo\\\":\\\"bar\\\"}\");\n\t\tthis.processor.postProcessEnvironment(this.environment, null);\n\t\tPropertySource<?> json = this.environment.getPropertySources().get(\"spring.application.json\");\n\t\tassertThat(this.environment.getProperty(\"foo\")).isEqualTo(\"custom\");\n\t\tassertThat(this.environment.getPropertySources()).containsSequence(custom, json, servlet, jndi);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "propertySourceOrderingWhenMultipleServletSpecificPropertySources", "(", ")", "{", "}", "@", "Test", "MapPropertySource", ";", ";", "MapPropertySource", ";", ";", "MapPropertySource", ";", ";", ";", ";", ";", ";", ";", "jndi", "=", ".", "addFirst", "servlet", "=", ".", "addFirst", "custom", "=", ".", "addFirst", "TestPropertySourceUtils", ".", "addInlinedPropertiesToEnvironment", ".", "postProcessEnvironment", "PropertySource", "json", "=", ".", "isEqualTo", ".", "containsSequence", "getPropertySource", ".", "getPropertySources", "(", "jndi", ")", "getPropertySource", ".", "getPropertySources", "(", "servlet", ")", "getPropertySource", ".", "getPropertySources", "(", "custom", ")", "(", ",", ")", "this", ".", "processor", "(", ",", "null", ")", "<", ">", ".", "get", "assertThat", "(", ")", "assertThat", "(", "custom", ",", "json", ",", "servlet", ",", "jndi", ")", "(", ",", ")", "this", ".", "environment", "(", ")", "(", ",", ")", "this", ".", "environment", "(", ")", "(", ",", ")", "this", ".", "environment", "(", ")", "this", ".", "environment", "\"", "SPRING_APPLICATION_JSON={", "\\\"", "foo", "\\\"", ":", "\\\"", "bar", "\\\"", "}", "\"", "this", ".", "environment", "?", ".", "getPropertySources", "(", ")", "(", ")", "\"", "custom", "\"", "(", ")", "StandardServletEnvironment", ".", "JNDI_PROPERTY_SOURCE_NAME", "\"", "jndi", "\"", "StandardServletEnvironment", ".", "SERVLET_CONTEXT_PROPERTY_SOURCE_NAME", "\"", "servlet", "\"", "\"", "custom", "\"", "\"", "custom", "\"", "this", ".", "environment", "(", ")", "\"", "spring.application.json", "\"", ".", "getProperty", ".", "getPropertySources", "this", ".", "environment", "(", ")", "this", ".", "environment", "(", ")", "\"", "foo", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 268, "ast_depth": 11, "n_identifiers": 22, "vocab_size": 46, "n_whitespaces": 67, "n_words": 73, "nloc": 16, "token_counts": 187}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessorTests.java#175-181", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessorTests.java", "language": "Java"}, "method": {"name": "nullValuesShouldBeAddedToPropertySource", "qualified_name": "test.java.org.springframework.boot.support.SpringApplicationJsonEnvironmentPostProcessorTests#nullValuesShouldBeAddedToPropertySource", "start_line": 175, "end_line": 181, "signature": "nullValuesShouldBeAddedToPropertySource()", "original_code": "@Test\n\tvoid nullValuesShouldBeAddedToPropertySource() {\n\t\tTestPropertySourceUtils.addInlinedPropertiesToEnvironment(this.environment,\n\t\t\t\t\"SPRING_APPLICATION_JSON={\\\"foo\\\":null}\");\n\t\tthis.processor.postProcessEnvironment(this.environment, null);\n\t\tassertThat(this.environment.containsProperty(\"foo\")).isTrue();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "nullValuesShouldBeAddedToPropertySource", "(", ")", "{", "}", "@", "Test", ";", ";", ";", "TestPropertySourceUtils", ".", "addInlinedPropertiesToEnvironment", ".", "postProcessEnvironment", ".", "isTrue", "(", ",", ")", "this", ".", "processor", "(", ",", "null", ")", "assertThat", "(", ")", "this", ".", "environment", "\"", "SPRING_APPLICATION_JSON={", "\\\"", "foo", "\\\"", ":null}", "\"", "this", ".", "environment", "(", ")", ".", "containsProperty", "this", ".", "environment", "(", ")", "\"", "foo", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 81, "ast_depth": 11, "n_identifiers": 10, "vocab_size": 26, "n_whitespaces": 21, "n_words": 22, "nloc": 7, "token_counts": 56}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessorTests.java#183-194", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessorTests.java", "language": "Java"}, "method": {"name": "emptyValuesForCollectionShouldNotBeIgnored", "qualified_name": "test.java.org.springframework.boot.support.SpringApplicationJsonEnvironmentPostProcessorTests#emptyValuesForCollectionShouldNotBeIgnored", "start_line": 183, "end_line": 194, "signature": "emptyValuesForCollectionShouldNotBeIgnored()", "original_code": "@Test\n\tvoid emptyValuesForCollectionShouldNotBeIgnored() {\n\t\tTestPropertySourceUtils.addInlinedPropertiesToEnvironment(this.environment,\n\t\t\t\t\"SPRING_APPLICATION_JSON={\\\"foo\\\":[]}\");\n\t\tMockPropertySource source = new MockPropertySource();\n\t\tsource.setProperty(\"foo\", \"bar\");\n\t\tthis.environment.getPropertySources().addLast(source);\n\t\tassertThat(this.environment.resolvePlaceholders(\"${foo}\")).isEqualTo(\"bar\");\n\t\tthis.environment.getPropertySources().addLast(source);\n\t\tthis.processor.postProcessEnvironment(this.environment, null);\n\t\tassertThat(this.environment.resolvePlaceholders(\"${foo}\")).isEmpty();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "emptyValuesForCollectionShouldNotBeIgnored", "(", ")", "{", "}", "@", "Test", ";", "MockPropertySource", ";", ";", ";", ";", ";", ";", ";", "TestPropertySourceUtils", ".", "addInlinedPropertiesToEnvironment", "source", "=", "source", ".", "setProperty", ".", "addLast", ".", "isEqualTo", ".", "addLast", ".", "postProcessEnvironment", ".", "isEmpty", "(", ",", ")", "new", "MockPropertySource", "(", ",", ")", ".", "getPropertySources", "(", "source", ")", "assertThat", "(", ")", ".", "getPropertySources", "(", "source", ")", "this", ".", "processor", "(", ",", "null", ")", "assertThat", "(", ")", "this", ".", "environment", "\"", "SPRING_APPLICATION_JSON={", "\\\"", "foo", "\\\"", ":[]}", "\"", "(", ")", "\"", "foo", "\"", "\"", "bar", "\"", "this", ".", "environment", "(", ")", "(", ")", "\"", "bar", "\"", "this", ".", "environment", "(", ")", "this", ".", "environment", "(", ")", ".", "resolvePlaceholders", ".", "resolvePlaceholders", "this", ".", "environment", "(", ")", "this", ".", "environment", "(", ")", "\"", "${foo}", "\"", "\"", "${foo}", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 180, "ast_depth": 11, "n_identifiers": 15, "vocab_size": 36, "n_whitespaces": 41, "n_words": 46, "nloc": 12, "token_counts": 124}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessorTests.java#196-206", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessorTests.java", "language": "Java"}, "method": {"name": "emptyMapValuesShouldNotBeIgnored", "qualified_name": "test.java.org.springframework.boot.support.SpringApplicationJsonEnvironmentPostProcessorTests#emptyMapValuesShouldNotBeIgnored", "start_line": 196, "end_line": 206, "signature": "emptyMapValuesShouldNotBeIgnored()", "original_code": "@Test\n\t@SuppressWarnings(\"unchecked\")\n\tvoid emptyMapValuesShouldNotBeIgnored() {\n\t\tTestPropertySourceUtils.addInlinedPropertiesToEnvironment(this.environment,\n\t\t\t\t\"SPRING_APPLICATION_JSON={\\\"foo\\\":{}}\");\n\t\tMockPropertySource source = new MockPropertySource();\n\t\tsource.setProperty(\"foo.baz\", \"bar\");\n\t\tthis.environment.getPropertySources().addLast(source);\n\t\tthis.processor.postProcessEnvironment(this.environment, null);\n\t\tassertThat(this.environment.getProperty(\"foo\", Map.class)).isEmpty();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "emptyMapValuesShouldNotBeIgnored", "(", ")", "{", "}", "@", "Test", "@", "SuppressWarnings", ";", "MockPropertySource", ";", ";", ";", ";", ";", "(", ")", "TestPropertySourceUtils", ".", "addInlinedPropertiesToEnvironment", "source", "=", "source", ".", "setProperty", ".", "addLast", ".", "postProcessEnvironment", ".", "isEmpty", "\"", "unchecked", "\"", "(", ",", ")", "new", "MockPropertySource", "(", ",", ")", ".", "getPropertySources", "(", "source", ")", "this", ".", "processor", "(", ",", "null", ")", "assertThat", "(", ")", "this", ".", "environment", "\"", "SPRING_APPLICATION_JSON={", "\\\"", "foo", "\\\"", ":{}}", "\"", "(", ")", "\"", "foo.baz", "\"", "\"", "bar", "\"", "this", ".", "environment", "(", ")", "this", ".", "environment", "(", ")", ".", "getProperty", "this", ".", "environment", "(", ",", ")", "\"", "foo", "\"", "Map", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 145, "ast_depth": 11, "n_identifiers": 15, "vocab_size": 39, "n_whitespaces": 38, "n_words": 39, "nloc": 11, "token_counts": 101}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessorTests.java#208-214", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessorTests.java", "language": "Java"}, "method": {"name": "testServletPropertySource", "qualified_name": "test.java.org.springframework.boot.support.SpringApplicationJsonEnvironmentPostProcessorTests#testServletPropertySource", "start_line": 208, "end_line": 214, "signature": "testServletPropertySource(String servletPropertySourceName)", "original_code": "private void testServletPropertySource(String servletPropertySourceName) {\n\t\tthis.environment.getPropertySources().addFirst(getPropertySource(servletPropertySourceName, \"servlet\"));\n\t\tTestPropertySourceUtils.addInlinedPropertiesToEnvironment(this.environment,\n\t\t\t\t\"SPRING_APPLICATION_JSON={\\\"foo\\\":\\\"bar\\\"}\");\n\t\tthis.processor.postProcessEnvironment(this.environment, null);\n\t\tassertThat(this.environment.getProperty(\"foo\")).isEqualTo(\"bar\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "testServletPropertySource", "private", "(", ")", "{", "}", "String", "servletPropertySourceName", ";", ";", ";", ";", ".", "addFirst", "TestPropertySourceUtils", ".", "addInlinedPropertiesToEnvironment", ".", "postProcessEnvironment", ".", "isEqualTo", ".", "getPropertySources", "(", ")", "(", ",", ")", "this", ".", "processor", "(", ",", "null", ")", "assertThat", "(", ")", "this", ".", "environment", "(", ")", "getPropertySource", "this", ".", "environment", "\"", "SPRING_APPLICATION_JSON={", "\\\"", "foo", "\\\"", ":", "\\\"", "bar", "\\\"", "}", "\"", "this", ".", "environment", "(", ")", "\"", "bar", "\"", "(", "servletPropertySourceName", ",", ")", ".", "getProperty", "\"", "servlet", "\"", "this", ".", "environment", "(", ")", "\"", "foo", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 119, "ast_depth": 11, "n_identifiers": 13, "vocab_size": 32, "n_whitespaces": 25, "n_words": 32, "nloc": 7, "token_counts": 84}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessorTests.java#216-218", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/SpringApplicationJsonEnvironmentPostProcessorTests.java", "language": "Java"}, "method": {"name": "getPropertySource", "qualified_name": "test.java.org.springframework.boot.support.SpringApplicationJsonEnvironmentPostProcessorTests#getPropertySource", "start_line": 216, "end_line": 218, "signature": "getPropertySource(String name, String value)", "original_code": "private MapPropertySource getPropertySource(String name, String value) {\n\t\treturn new MapPropertySource(name, Collections.singletonMap(\"foo\", value));\n\t}", "doc_comment": ""}, "code_tokens": ["MapPropertySource", "getPropertySource", "private", "(", ",", ")", "{", "}", "String", "name", "String", "value", "return", ";", "new", "MapPropertySource", "(", "name", ",", ")", "Collections", ".", "singletonMap", "(", ",", "value", ")", "\"", "foo", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 43, "ast_depth": 10, "n_identifiers": 5, "vocab_size": 19, "n_whitespaces": 15, "n_words": 15, "nloc": 3, "token_counts": 30}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/SystemEnvironmentPropertySourceEnvironmentPostProcessorTests.java#45-51", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/SystemEnvironmentPropertySourceEnvironmentPostProcessorTests.java", "language": "Java"}, "method": {"name": "postProcessShouldReplaceSystemEnvironmentPropertySource", "qualified_name": "test.java.org.springframework.boot.support.SystemEnvironmentPropertySourceEnvironmentPostProcessorTests#postProcessShouldReplaceSystemEnvironmentPropertySource", "start_line": 45, "end_line": 51, "signature": "postProcessShouldReplaceSystemEnvironmentPropertySource()", "original_code": "@Test\n\tvoid postProcessShouldReplaceSystemEnvironmentPropertySource() {\n\t\tSystemEnvironmentPropertySourceEnvironmentPostProcessor postProcessor = new SystemEnvironmentPropertySourceEnvironmentPostProcessor();\n\t\tpostProcessor.postProcessEnvironment(this.environment, this.application);\n\t\tPropertySource<?> replaced = this.environment.getPropertySources().get(\"systemEnvironment\");\n\t\tassertThat(replaced).isInstanceOf(OriginAwareSystemEnvironmentPropertySource.class);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "postProcessShouldReplaceSystemEnvironmentPropertySource", "(", ")", "{", "}", "@", "Test", "SystemEnvironmentPropertySourceEnvironmentPostProcessor", ";", ";", ";", ";", "postProcessor", "=", "postProcessor", ".", "postProcessEnvironment", "PropertySource", "replaced", "=", ".", "isInstanceOf", "new", "SystemEnvironmentPropertySourceEnvironmentPostProcessor", "(", ",", ")", "<", ">", ".", "get", "assertThat", "(", ")", "(", ")", "this", ".", "environment", "this", ".", "application", "?", ".", "getPropertySources", "(", ")", "(", "replaced", ")", "OriginAwareSystemEnvironmentPropertySource", ".", "class", "this", ".", "environment", "(", ")", "\"", "systemEnvironment", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 94, "ast_depth": 9, "n_identifiers": 11, "vocab_size": 32, "n_whitespaces": 26, "n_words": 25, "nloc": 7, "token_counts": 62}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/SystemEnvironmentPropertySourceEnvironmentPostProcessorTests.java#53-69", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/SystemEnvironmentPropertySourceEnvironmentPostProcessorTests.java", "language": "Java"}, "method": {"name": "replacedPropertySourceShouldBeOriginAware", "qualified_name": "test.java.org.springframework.boot.support.SystemEnvironmentPropertySourceEnvironmentPostProcessorTests#replacedPropertySourceShouldBeOriginAware", "start_line": 53, "end_line": 69, "signature": "replacedPropertySourceShouldBeOriginAware()", "original_code": "@Test\n\t@SuppressWarnings(\"unchecked\")\n\tvoid replacedPropertySourceShouldBeOriginAware() {\n\t\tSystemEnvironmentPropertySourceEnvironmentPostProcessor postProcessor = new SystemEnvironmentPropertySourceEnvironmentPostProcessor();\n\t\tPropertySource<?> original = this.environment.getPropertySources().get(\"systemEnvironment\");\n\t\tpostProcessor.postProcessEnvironment(this.environment, this.application);\n\t\tOriginAwareSystemEnvironmentPropertySource replaced = (OriginAwareSystemEnvironmentPropertySource) this.environment\n\t\t\t.getPropertySources()\n\t\t\t.get(\"systemEnvironment\");\n\t\tMap<String, Object> originalMap = (Map<String, Object>) original.getSource();\n\t\tMap<String, Object> replacedMap = replaced.getSource();\n\t\toriginalMap.forEach((key, value) -> {\n\t\t\tObject actual = replacedMap.get(key);\n\t\t\tassertThat(actual).isEqualTo(value);\n\t\t\tassertThat(replaced.getOrigin(key)).isInstanceOf(SystemEnvironmentOrigin.class);\n\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "replacedPropertySourceShouldBeOriginAware", "(", ")", "{", "}", "@", "Test", "@", "SuppressWarnings", "SystemEnvironmentPropertySourceEnvironmentPostProcessor", ";", ";", ";", "OriginAwareSystemEnvironmentPropertySource", ";", ";", ";", ";", "(", ")", "postProcessor", "=", "PropertySource", "original", "=", "postProcessor", ".", "postProcessEnvironment", "replaced", "=", "Map", "originalMap", "=", "Map", "replacedMap", "=", "originalMap", ".", "forEach", "\"", "unchecked", "\"", "new", "SystemEnvironmentPropertySourceEnvironmentPostProcessor", "<", ">", ".", "get", "(", ",", ")", "(", "OriginAwareSystemEnvironmentPropertySource", ")", "<", "String", ",", "Object", ">", "(", ")", "<", "String", ",", "Object", ">", "replaced", ".", "getSource", "(", ")", "(", ")", "?", ".", "getPropertySources", "(", ")", "this", ".", "environment", "this", ".", "application", ".", "get", "Map", "original", ".", "getSource", "(", ")", "->", "this", ".", "environment", "(", ")", "\"", "systemEnvironment", "\"", ".", "getPropertySources", "(", ")", "<", "String", ",", "Object", ">", "(", ")", "(", "key", ",", "value", ")", "{", "}", "this", ".", "environment", "(", ")", "\"", "systemEnvironment", "\"", "Object", ";", ";", ";", "actual", "=", ".", "isEqualTo", ".", "isInstanceOf", "replacedMap", ".", "get", "assertThat", "(", "value", ")", "assertThat", "(", ")", "(", "key", ")", "(", "actual", ")", "(", ")", "SystemEnvironmentOrigin", ".", "class", "replaced", ".", "getOrigin", "(", "key", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 241, "ast_depth": 15, "n_identifiers": 22, "vocab_size": 49, "n_whitespaces": 80, "n_words": 65, "nloc": 17, "token_counts": 165}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/SystemEnvironmentPropertySourceEnvironmentPostProcessorTests.java#71-79", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/SystemEnvironmentPropertySourceEnvironmentPostProcessorTests.java", "language": "Java"}, "method": {"name": "replacedPropertySourceWhenPropertyAbsentShouldReturnNullOrigin", "qualified_name": "test.java.org.springframework.boot.support.SystemEnvironmentPropertySourceEnvironmentPostProcessorTests#replacedPropertySourceWhenPropertyAbsentShouldReturnNullOrigin", "start_line": 71, "end_line": 79, "signature": "replacedPropertySourceWhenPropertyAbsentShouldReturnNullOrigin()", "original_code": "@Test\n\tvoid replacedPropertySourceWhenPropertyAbsentShouldReturnNullOrigin() {\n\t\tSystemEnvironmentPropertySourceEnvironmentPostProcessor postProcessor = new SystemEnvironmentPropertySourceEnvironmentPostProcessor();\n\t\tpostProcessor.postProcessEnvironment(this.environment, this.application);\n\t\tOriginAwareSystemEnvironmentPropertySource replaced = (OriginAwareSystemEnvironmentPropertySource) this.environment\n\t\t\t.getPropertySources()\n\t\t\t.get(\"systemEnvironment\");\n\t\tassertThat(replaced.getOrigin(\"NON_EXISTENT\")).isNull();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "replacedPropertySourceWhenPropertyAbsentShouldReturnNullOrigin", "(", ")", "{", "}", "@", "Test", "SystemEnvironmentPropertySourceEnvironmentPostProcessor", ";", ";", "OriginAwareSystemEnvironmentPropertySource", ";", ";", "postProcessor", "=", "postProcessor", ".", "postProcessEnvironment", "replaced", "=", ".", "isNull", "new", "SystemEnvironmentPropertySourceEnvironmentPostProcessor", "(", ",", ")", "(", "OriginAwareSystemEnvironmentPropertySource", ")", "assertThat", "(", ")", "(", ")", "this", ".", "environment", "this", ".", "application", ".", "get", "(", ")", ".", "getPropertySources", "(", ")", "replaced", ".", "getOrigin", "this", ".", "environment", "(", ")", "\"", "systemEnvironment", "\"", "(", ")", "\"", "NON_EXISTENT", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 98, "ast_depth": 11, "n_identifiers": 12, "vocab_size": 29, "n_whitespaces": 35, "n_words": 26, "nloc": 9, "token_counts": 66}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/SystemEnvironmentPropertySourceEnvironmentPostProcessorTests.java#81-94", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/SystemEnvironmentPropertySourceEnvironmentPostProcessorTests.java", "language": "Java"}, "method": {"name": "replacedPropertySourceShouldResolveProperty", "qualified_name": "test.java.org.springframework.boot.support.SystemEnvironmentPropertySourceEnvironmentPostProcessorTests#replacedPropertySourceShouldResolveProperty", "start_line": 81, "end_line": 94, "signature": "replacedPropertySourceShouldResolveProperty()", "original_code": "@Test\n\tvoid replacedPropertySourceShouldResolveProperty() {\n\t\tSystemEnvironmentPropertySourceEnvironmentPostProcessor postProcessor = new SystemEnvironmentPropertySourceEnvironmentPostProcessor();\n\t\tMap<String, Object> source = Collections.singletonMap(\"FOO_BAR_BAZ\", \"hello\");\n\t\tthis.environment.getPropertySources()\n\t\t\t.replace(\"systemEnvironment\", new SystemEnvironmentPropertySource(\"systemEnvironment\", source));\n\t\tpostProcessor.postProcessEnvironment(this.environment, this.application);\n\t\tOriginAwareSystemEnvironmentPropertySource replaced = (OriginAwareSystemEnvironmentPropertySource) this.environment\n\t\t\t.getPropertySources()\n\t\t\t.get(\"systemEnvironment\");\n\t\tSystemEnvironmentOrigin origin = (SystemEnvironmentOrigin) replaced.getOrigin(\"foo.bar.baz\");\n\t\tassertThat(origin.getProperty()).isEqualTo(\"FOO_BAR_BAZ\");\n\t\tassertThat(replaced.getProperty(\"foo.bar.baz\")).isEqualTo(\"hello\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "replacedPropertySourceShouldResolveProperty", "(", ")", "{", "}", "@", "Test", "SystemEnvironmentPropertySourceEnvironmentPostProcessor", ";", ";", ";", ";", "OriginAwareSystemEnvironmentPropertySource", ";", "SystemEnvironmentOrigin", ";", ";", ";", "postProcessor", "=", "Map", "source", "=", ".", "replace", "postProcessor", ".", "postProcessEnvironment", "replaced", "=", "origin", "=", ".", "isEqualTo", ".", "isEqualTo", "new", "SystemEnvironmentPropertySourceEnvironmentPostProcessor", "<", "String", ",", "Object", ">", "Collections", ".", "singletonMap", ".", "getPropertySources", "(", ",", ")", "(", ",", ")", "(", "OriginAwareSystemEnvironmentPropertySource", ")", "(", "SystemEnvironmentOrigin", ")", "assertThat", "(", ")", "assertThat", "(", ")", "(", ")", "(", ",", ")", "this", ".", "environment", "(", ")", "\"", "systemEnvironment", "\"", "new", "SystemEnvironmentPropertySource", "this", ".", "environment", "this", ".", "application", ".", "get", "replaced", ".", "getOrigin", "(", ")", "\"", "FOO_BAR_BAZ", "\"", "(", ")", "\"", "hello", "\"", "\"", "FOO_BAR_BAZ", "\"", "\"", "hello", "\"", "(", ",", "source", ")", ".", "getPropertySources", "(", ")", "(", ")", "origin", ".", "getProperty", "replaced", ".", "getProperty", "\"", "systemEnvironment", "\"", "this", ".", "environment", "(", ")", "\"", "systemEnvironment", "\"", "\"", "foo.bar.baz", "\"", "(", ")", "(", ")", "\"", "foo.bar.baz", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 211, "ast_depth": 11, "n_identifiers": 18, "vocab_size": 44, "n_whitespaces": 63, "n_words": 59, "nloc": 14, "token_counts": 146}}
{"dataset_split": "train", "id": "spring-boot@6c84674:core/spring-boot/src/test/java/org/springframework/boot/support/SystemEnvironmentPropertySourceEnvironmentPostProcessorTests.java#96-106", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/SystemEnvironmentPropertySourceEnvironmentPostProcessorTests.java", "language": "Java"}, "method": {"name": "propertySourceShouldBePrefixed", "qualified_name": "test.java.org.springframework.boot.support.SystemEnvironmentPropertySourceEnvironmentPostProcessorTests#propertySourceShouldBePrefixed", "start_line": 96, "end_line": 106, "signature": "propertySourceShouldBePrefixed()", "original_code": "@Test\n\tvoid propertySourceShouldBePrefixed() {\n\t\tSystemEnvironmentPropertySourceEnvironmentPostProcessor postProcessor = new SystemEnvironmentPropertySourceEnvironmentPostProcessor();\n\t\tSpringApplication application = new SpringApplication();\n\t\tapplication.setEnvironmentPrefix(\"my\");\n\t\tpostProcessor.postProcessEnvironment(this.environment, application);\n\t\tOriginAwareSystemEnvironmentPropertySource replaced = (OriginAwareSystemEnvironmentPropertySource) this.environment\n\t\t\t.getPropertySources()\n\t\t\t.get(\"systemEnvironment\");\n\t\tassertThat(replaced.getPrefix()).isEqualTo(\"my\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "propertySourceShouldBePrefixed", "(", ")", "{", "}", "@", "Test", "SystemEnvironmentPropertySourceEnvironmentPostProcessor", ";", "SpringApplication", ";", ";", ";", "OriginAwareSystemEnvironmentPropertySource", ";", ";", "postProcessor", "=", "application", "=", "application", ".", "setEnvironmentPrefix", "postProcessor", ".", "postProcessEnvironment", "replaced", "=", ".", "isEqualTo", "new", "SystemEnvironmentPropertySourceEnvironmentPostProcessor", "new", "SpringApplication", "(", ")", "(", ",", "application", ")", "(", "OriginAwareSystemEnvironmentPropertySource", ")", "assertThat", "(", ")", "(", ")", "(", ")", "\"", "my", "\"", "this", ".", "environment", ".", "get", "(", ")", "\"", "my", "\"", ".", "getPropertySources", "(", ")", "replaced", ".", "getPrefix", "this", ".", "environment", "(", ")", "\"", "systemEnvironment", "\"", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 120, "ast_depth": 10, "n_identifiers": 13, "vocab_size": 31, "n_whitespaces": 45, "n_words": 32, "nloc": 11, "token_counts": 81}}
{"dataset_split": "train", "id": "spring-boot@6c84674:documentation/spring-boot-docs/src/main/java/org/springframework/boot/docs/howto/application/customizetheenvironmentorapplicationcontext/MyEnvironmentPostProcessor.java#34-39", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "documentation/spring-boot-docs/src/main/java/org/springframework/boot/docs/howto/application/customizetheenvironmentorapplicationcontext/MyEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "postProcessEnvironment", "qualified_name": "org.springframework.boot.docs.howto.application.customizetheenvironmentorapplicationcontext.MyEnvironmentPostProcessor#postProcessEnvironment", "start_line": 34, "end_line": 39, "signature": "postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application)", "original_code": "@Override\n\tpublic void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {\n\t\tResource path = new ClassPathResource(\"com/example/myapp/config.yml\");\n\t\tPropertySource<?> propertySource = loadYaml(path);\n\t\tenvironment.getPropertySources().addLast(propertySource);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "postProcessEnvironment", "public", "(", ",", ")", "{", "}", "@", "Override", "ConfigurableEnvironment", "environment", "SpringApplication", "application", "Resource", ";", ";", ";", "path", "=", "PropertySource", "propertySource", "=", ".", "addLast", "new", "ClassPathResource", "<", ">", "loadYaml", "environment", ".", "getPropertySources", "(", "propertySource", ")", "(", ")", "?", "(", "path", ")", "(", ")", "\"", "com/example/myapp/config.yml", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 72, "ast_depth": 9, "n_identifiers": 9, "vocab_size": 31, "n_whitespaces": 26, "n_words": 25, "nloc": 6, "token_counts": 47}}
{"dataset_split": "train", "id": "spring-boot@6c84674:documentation/spring-boot-docs/src/main/java/org/springframework/boot/docs/howto/application/customizetheenvironmentorapplicationcontext/MyEnvironmentPostProcessor.java#41-49", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "documentation/spring-boot-docs/src/main/java/org/springframework/boot/docs/howto/application/customizetheenvironmentorapplicationcontext/MyEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "loadYaml", "qualified_name": "org.springframework.boot.docs.howto.application.customizetheenvironmentorapplicationcontext.MyEnvironmentPostProcessor#loadYaml", "start_line": 41, "end_line": 49, "signature": "loadYaml(Resource path)", "original_code": "private PropertySource<?> loadYaml(Resource path) {\n\t\tAssert.isTrue(path.exists(), () -> \"'path' [%s] must exist\".formatted(path));\n\t\ttry {\n\t\t\treturn this.loader.load(\"custom-resource\", path).get(0);\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\tthrow new IllegalStateException(\"Failed to load yaml configuration from \" + path, ex);\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["loadYaml", "private", "PropertySource", "(", ")", "{", "}", "<", ">", "Resource", "path", ";", "try", "?", "Assert", ".", "isTrue", "{", "}", "catch", "(", ")", "(", ",", ")", "return", ";", "ex", "{", "}", "path", ".", "exists", "->", ".", "get", "IOException", "throw", ";", "(", ")", "(", ")", ".", "formatted", ".", "load", "(", "0", ")", "new", "IllegalStateException", "\"", "'path' [%s] must exist", "\"", "(", "path", ")", "this", ".", "loader", "(", ",", "path", ")", "(", ",", "ex", ")", "\"", "custom-resource", "\"", "+", "path", "\"", "Failed to load yaml configuration from ", "\""], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 114, "ast_depth": 12, "n_identifiers": 10, "vocab_size": 38, "n_whitespaces": 52, "n_words": 39, "nloc": 9, "token_counts": 77}}
{"dataset_split": "train", "id": "spring-boot@6c84674:documentation/spring-boot-docs/src/main/kotlin/org/springframework/boot/docs/howto/application/customizetheenvironmentorapplicationcontext/MyEnvironmentPostProcessor.kt#33-37", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "documentation/spring-boot-docs/src/main/kotlin/org/springframework/boot/docs/howto/application/customizetheenvironmentorapplicationcontext/MyEnvironmentPostProcessor.kt", "language": "Java"}, "method": {"name": "postProcessEnvironment", "qualified_name": "main.kotlin.org.springframework.boot.docs.howto.application.customizetheenvironmentorapplicationcontext.MyEnvironmentPostProcessor.kt#postProcessEnvironment", "start_line": 33, "end_line": 37, "signature": "postProcessEnvironment(environment: ConfigurableEnvironment, application: SpringApplication)", "original_code": "override fun postProcessEnvironment(environment: ConfigurableEnvironment, application: SpringApplication) {\n\t\tval path: Resource = ClassPathResource(\"com/example/myapp/config.yml\")\n\t\tval propertySource = loadYaml(path)\n\t\tenvironment.propertySources.addLast(propertySource)\n\t}", "doc_comment": ""}, "code_tokens": ["override", "postProcessEnvironment", "fun", "(", ",", ")", "{", "}", "environment", "ConfigurableEnvironment", "application", "SpringApplication", "val", "", "val", "", "", ":", ":", "path", ":", "Resource", "=", "propertySource", "=", ".", "addLast", "ClassPathResource", "loadYaml", "environment", ".", "propertySources", "(", "propertySource", ")", "(", ")", "(", "path", ")", "\"", "com/example/myapp/config.yml", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 66, "ast_depth": 9, "n_identifiers": 12, "vocab_size": 26, "n_whitespaces": 24, "n_words": 24, "nloc": 5, "token_counts": 43}}
{"dataset_split": "train", "id": "spring-boot@6c84674:documentation/spring-boot-docs/src/main/kotlin/org/springframework/boot/docs/howto/application/customizetheenvironmentorapplicationcontext/MyEnvironmentPostProcessor.kt#39-46", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "documentation/spring-boot-docs/src/main/kotlin/org/springframework/boot/docs/howto/application/customizetheenvironmentorapplicationcontext/MyEnvironmentPostProcessor.kt", "language": "Java"}, "method": {"name": "loadYaml", "qualified_name": "main.kotlin.org.springframework.boot.docs.howto.application.customizetheenvironmentorapplicationcontext.MyEnvironmentPostProcessor.kt#loadYaml", "start_line": 39, "end_line": 46, "signature": "loadYaml(path: Resource)", "original_code": "private fun loadYaml(path: Resource): PropertySource<*> {\n\t\tAssert.isTrue(path.exists()) { \"Resource $path does not exist\" }\n\t\treturn try {\n\t\t\tloader.load(\"custom-resource\", path)[0]\n\t\t} catch (ex: IOException) {\n\t\t\tthrow IllegalStateException(\"Failed to load yaml configuration from $path\", ex)\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["fun", "loadYaml", "private", "(", ")", ":", "PropertySource", "<", "*", ">", "{", "}", "path", "Resource", "", "{", "}", "return", "try", "", "{", "}", "", "{", "}", ":", "Assert", ".", "isTrue", "", "", "catch", "throw", "", "(", ")", "\"", "Resource $path does not exist", "\"", "[", "0", "]", "(", "IOException", ")", "IllegalStateException", "path", ".", "exists", "loader", ".", "load", "ex", ":", "(", ",", "ex", ")", "(", ")", "(", ",", "path", ")", "\"", "Failed to load yaml configuration from $path", "\"", "\"", "custom-resource", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 102, "ast_depth": 10, "n_identifiers": 14, "vocab_size": 36, "n_whitespaces": 49, "n_words": 36, "nloc": 8, "token_counts": 70}}
{"dataset_split": "train", "id": "spring-boot@6c84674:module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/RemoteSpringApplication.java#55-64", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/RemoteSpringApplication.java", "language": "Java"}, "method": {"name": "run", "qualified_name": "org.springframework.boot.devtools.RemoteSpringApplication#run", "start_line": 55, "end_line": 64, "signature": "run(String[] args)", "original_code": "private void run(String[] args) {\n\t\tRestarter.initialize(args, RestartInitializer.NONE);\n\t\tSpringApplication application = new SpringApplication(RemoteClientConfiguration.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tapplication.setBanner(getBanner());\n\t\tapplication.setInitializers(getInitializers());\n\t\tapplication.setListeners(getListeners());\n\t\tapplication.run(args);\n\t\twaitIndefinitely();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "run", "private", "(", ")", "{", "}", "args", ";", "SpringApplication", ";", ";", ";", ";", ";", ";", ";", "String", "Restarter", ".", "initialize", "application", "=", "application", ".", "setWebApplicationType", "application", ".", "setBanner", "application", ".", "setInitializers", "application", ".", "setListeners", "application", ".", "run", "waitIndefinitely", "[", "]", "(", "args", ",", ")", "new", "SpringApplication", "(", ")", "(", ")", "(", ")", "(", ")", "(", "args", ")", "(", ")", "RestartInitializer", ".", "NONE", "(", ")", "WebApplicationType", ".", "NONE", "getBanner", "getInitializers", "getListeners", "RemoteClientConfiguration", ".", "class", "(", ")", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 122, "ast_depth": 9, "n_identifiers": 16, "vocab_size": 33, "n_whitespaces": 35, "n_words": 33, "nloc": 10, "token_counts": 80}}
{"dataset_split": "train", "id": "spring-boot@6c84674:module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/RemoteSpringApplication.java#66-70", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/RemoteSpringApplication.java", "language": "Java"}, "method": {"name": "getInitializers", "qualified_name": "org.springframework.boot.devtools.RemoteSpringApplication#getInitializers", "start_line": 66, "end_line": 70, "signature": "getInitializers()", "original_code": "private Collection<ApplicationContextInitializer<?>> getInitializers() {\n\t\tList<ApplicationContextInitializer<?>> initializers = new ArrayList<>();\n\t\tinitializers.add(new RestartScopeInitializer());\n\t\treturn initializers;\n\t}", "doc_comment": ""}, "code_tokens": ["getInitializers", "private", "Collection", "(", ")", "{", "}", "<", ">", ";", ";", "return", "initializers", ";", "ApplicationContextInitializer", "List", "initializers", "=", "initializers", ".", "add", "<", ">", "<", ">", "new", "(", ")", "?", "ApplicationContextInitializer", "ArrayList", "(", ")", "new", "RestartScopeInitializer", "<", ">", "<", ">", "(", ")", "?"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 69, "ast_depth": 10, "n_identifiers": 3, "vocab_size": 21, "n_whitespaces": 20, "n_words": 15, "nloc": 5, "token_counts": 42}}
{"dataset_split": "train", "id": "spring-boot@6c84674:module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/RemoteSpringApplication.java#72-80", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/RemoteSpringApplication.java", "language": "Java"}, "method": {"name": "getListeners", "qualified_name": "org.springframework.boot.devtools.RemoteSpringApplication#getListeners", "start_line": 72, "end_line": 80, "signature": "getListeners()", "original_code": "private Collection<ApplicationListener<?>> getListeners() {\n\t\tList<ApplicationListener<?>> listeners = new ArrayList<>();\n\t\tlisteners.add(new AnsiOutputApplicationListener());\n\t\tlisteners.add(EnvironmentPostProcessorApplicationListener\n\t\t\t.with(EnvironmentPostProcessorsFactory.of(ConfigDataEnvironmentPostProcessor.class)));\n\t\tlisteners.add(new LoggingApplicationListener());\n\t\tlisteners.add(new RemoteUrlPropertyExtractor());\n\t\treturn listeners;\n\t}", "doc_comment": ""}, "code_tokens": ["getListeners", "private", "Collection", "(", ")", "{", "}", "<", ">", ";", ";", ";", ";", ";", "return", "listeners", ";", "ApplicationListener", "List", "listeners", "=", "listeners", ".", "add", "listeners", ".", "add", "listeners", ".", "add", "listeners", ".", "add", "<", ">", "<", ">", "new", "(", ")", "(", ")", "(", ")", "(", ")", "?", "ApplicationListener", "ArrayList", "(", ")", "new", "AnsiOutputApplicationListener", "EnvironmentPostProcessorApplicationListener", ".", "with", "new", "LoggingApplicationListener", "new", "RemoteUrlPropertyExtractor", "<", ">", "<", ">", "(", ")", "(", ")", "(", ")", "(", ")", "?", "EnvironmentPostProcessorsFactory", ".", "of", "(", ")", "ConfigDataEnvironmentPostProcessor", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 126, "ast_depth": 12, "n_identifiers": 7, "vocab_size": 29, "n_whitespaces": 35, "n_words": 31, "nloc": 9, "token_counts": 81}}
{"dataset_split": "train", "id": "spring-boot@6c84674:module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/RemoteSpringApplication.java#82-85", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/RemoteSpringApplication.java", "language": "Java"}, "method": {"name": "getBanner", "qualified_name": "org.springframework.boot.devtools.RemoteSpringApplication#getBanner", "start_line": 82, "end_line": 85, "signature": "getBanner()", "original_code": "private Banner getBanner() {\n\t\tClassPathResource banner = new ClassPathResource(\"remote-banner.txt\", RemoteSpringApplication.class);\n\t\treturn new ResourceBanner(banner);\n\t}", "doc_comment": ""}, "code_tokens": ["Banner", "getBanner", "private", "(", ")", "{", "}", "ClassPathResource", ";", "return", ";", "banner", "=", "new", "ResourceBanner", "new", "ClassPathResource", "(", "banner", ")", "(", ",", ")", "\"", "remote-banner.txt", "\"", "RemoteSpringApplication", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 43, "ast_depth": 9, "n_identifiers": 2, "vocab_size": 20, "n_whitespaces": 18, "n_words": 16, "nloc": 4, "token_counts": 29}}
{"dataset_split": "train", "id": "spring-boot@6c84674:module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/RemoteSpringApplication.java#87-96", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/RemoteSpringApplication.java", "language": "Java"}, "method": {"name": "waitIndefinitely", "qualified_name": "org.springframework.boot.devtools.RemoteSpringApplication#waitIndefinitely", "start_line": 87, "end_line": 96, "signature": "waitIndefinitely()", "original_code": "private void waitIndefinitely() {\n\t\twhile (true) {\n\t\t\ttry {\n\t\t\t\tThread.sleep(1000);\n\t\t\t}\n\t\t\tcatch (InterruptedException ex) {\n\t\t\t\tThread.currentThread().interrupt();\n\t\t\t}\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "waitIndefinitely", "private", "(", ")", "{", "}", "while", "(", "true", ")", "{", "}", "try", "{", "}", "catch", "(", ")", ";", "ex", "{", "}", "Thread", ".", "sleep", "InterruptedException", ";", "(", "1000", ")", ".", "interrupt", "Thread", ".", "currentThread", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 62, "ast_depth": 13, "n_identifiers": 6, "vocab_size": 20, "n_whitespaces": 43, "n_words": 15, "nloc": 10, "token_counts": 40}}
{"dataset_split": "train", "id": "spring-boot@6c84674:module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/RemoteSpringApplication.java#103-105", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/RemoteSpringApplication.java", "language": "Java"}, "method": {"name": "main", "qualified_name": "org.springframework.boot.devtools.RemoteSpringApplication#main", "start_line": 103, "end_line": 105, "signature": "main(String[] args)", "original_code": "public static void main(String[] args) {\n\t\tnew RemoteSpringApplication().run(args);\n\t}", "doc_comment": "/**\n\t * Run the {@link RemoteSpringApplication}.\n\t * @param args the program arguments (including the remote URL as a non-option\n\t * argument)\n\t */"}, "code_tokens": ["void", "main", "public", "static", "(", ")", "{", "}", "args", ";", "String", ".", "run", "[", "]", "new", "RemoteSpringApplication", "(", "args", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 35, "ast_depth": 8, "n_identifiers": 3, "vocab_size": 17, "n_whitespaces": 11, "n_words": 10, "nloc": 3, "token_counts": 22}}
{"dataset_split": "train", "id": "spring-boot@6c84674:module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/env/DevToolsHomePropertiesPostProcessor.java#89-98", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/env/DevToolsHomePropertiesPostProcessor.java", "language": "Java"}, "method": {"name": "postProcessEnvironment", "qualified_name": "org.springframework.boot.devtools.env.DevToolsHomePropertiesPostProcessor#postProcessEnvironment", "start_line": 89, "end_line": 98, "signature": "postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application)", "original_code": "@Override\n\tpublic void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {\n\t\tif (DevToolsEnablementDeducer.shouldEnable(Thread.currentThread())) {\n\t\t\tList<PropertySource<?>> propertySources = getPropertySources();\n\t\t\tif (propertySources.isEmpty()) {\n\t\t\t\taddPropertySource(propertySources, LEGACY_FILE_NAME, (file) -> \"devtools-local\");\n\t\t\t}\n\t\t\tpropertySources.forEach(environment.getPropertySources()::addFirst);\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "postProcessEnvironment", "public", "(", ",", ")", "{", "}", "@", "Override", "ConfigurableEnvironment", "environment", "SpringApplication", "application", "if", "(", ")", "{", "}", "DevToolsEnablementDeducer", ".", "shouldEnable", ";", "if", ";", "(", ")", "List", "propertySources", "=", "(", ")", "{", "}", "propertySources", ".", "forEach", "Thread", ".", "currentThread", "<", ">", "getPropertySources", "propertySources", ".", "isEmpty", ";", "(", ")", "(", ")", "PropertySource", "(", ")", "(", ")", "addPropertySource", "::", "addFirst", "<", ">", "(", "propertySources", ",", "LEGACY_FILE_NAME", ",", ")", "environment", ".", "getPropertySources", "?", "->", "(", ")", "(", "file", ")", "\"", "devtools-local", "\""], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 121, "ast_depth": 13, "n_identifiers": 16, "vocab_size": 39, "n_whitespaces": 48, "n_words": 31, "nloc": 10, "token_counts": 80}}
{"dataset_split": "train", "id": "spring-boot@6c84674:module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/env/DevToolsHomePropertiesPostProcessor.java#100-106", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/env/DevToolsHomePropertiesPostProcessor.java", "language": "Java"}, "method": {"name": "getPropertySources", "qualified_name": "org.springframework.boot.devtools.env.DevToolsHomePropertiesPostProcessor#getPropertySources", "start_line": 100, "end_line": 106, "signature": "getPropertySources()", "original_code": "private List<PropertySource<?>> getPropertySources() {\n\t\tList<PropertySource<?>> propertySources = new ArrayList<>();\n\t\tfor (String fileName : FILE_NAMES) {\n\t\t\taddPropertySource(propertySources, CONFIG_PATH + fileName, this::getPropertySourceName);\n\t\t}\n\t\treturn propertySources;\n\t}", "doc_comment": ""}, "code_tokens": ["getPropertySources", "private", "List", "(", ")", "{", "}", "<", ">", ";", "for", "(", "String", "fileName", ":", "FILE_NAMES", ")", "return", "propertySources", ";", "PropertySource", "List", "propertySources", "=", "{", "}", "<", ">", "<", ">", "new", ";", "?", "PropertySource", "ArrayList", "(", ")", "addPropertySource", "<", ">", "<", ">", "(", "propertySources", ",", ",", ")", "?", "CONFIG_PATH", "+", "fileName", "this", "::", "getPropertySourceName"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 83, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 29, "n_whitespaces": 35, "n_words": 21, "nloc": 7, "token_counts": 54}}
{"dataset_split": "train", "id": "spring-boot@6c84674:module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/env/DevToolsHomePropertiesPostProcessor.java#108-110", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/env/DevToolsHomePropertiesPostProcessor.java", "language": "Java"}, "method": {"name": "getPropertySourceName", "qualified_name": "org.springframework.boot.devtools.env.DevToolsHomePropertiesPostProcessor#getPropertySourceName", "start_line": 108, "end_line": 110, "signature": "getPropertySourceName(File file)", "original_code": "private String getPropertySourceName(File file) {\n\t\treturn \"devtools-local: [\" + file.toURI() + \"]\";\n\t}", "doc_comment": ""}, "code_tokens": ["String", "getPropertySourceName", "private", "(", ")", "{", "}", "File", "file", "return", ";", "+", "+", "\"", "]", "\"", "\"", "devtools-local: [", "\"", "file", ".", "toURI", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 37, "ast_depth": 9, "n_identifiers": 3, "vocab_size": 17, "n_whitespaces": 15, "n_words": 10, "nloc": 3, "token_counts": 24}}
{"dataset_split": "train", "id": "spring-boot@6c84674:module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/env/DevToolsHomePropertiesPostProcessor.java#112-120", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/env/DevToolsHomePropertiesPostProcessor.java", "language": "Java"}, "method": {"name": "addPropertySource", "qualified_name": "org.springframework.boot.devtools.env.DevToolsHomePropertiesPostProcessor#addPropertySource", "start_line": 112, "end_line": 120, "signature": "addPropertySource(List<PropertySource<?>> propertySources, String fileName,\n\t\t\tFunction<File, String> propertySourceNamer)", "original_code": "private void addPropertySource(List<PropertySource<?>> propertySources, String fileName,\n\t\t\tFunction<File, String> propertySourceNamer) {\n\t\tFile home = getHomeDirectory();\n\t\tFile file = (home != null) ? new File(home, fileName) : null;\n\t\tFileSystemResource resource = (file != null) ? new FileSystemResource(file) : null;\n\t\tif (resource != null && resource.exists() && resource.isFile()) {\n\t\t\taddPropertySource(propertySources, resource, propertySourceNamer);\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "addPropertySource", "private", "(", ",", ",", ")", "{", "}", "propertySources", "String", "fileName", "propertySourceNamer", "File", ";", "File", ";", "FileSystemResource", ";", "if", "List", "Function", "home", "=", "file", "=", "resource", "=", "(", ")", "{", "}", "<", ">", "<", "File", ",", "String", ">", "getHomeDirectory", "?", ":", "null", "?", ":", "null", "&&", ";", "PropertySource", "(", ")", "(", ")", "new", "File", "(", ")", "new", "FileSystemResource", "&&", "resource", ".", "isFile", "addPropertySource", "<", ">", "home", "!=", "null", "(", "home", ",", "fileName", ")", "file", "!=", "null", "(", "file", ")", "resource", "!=", "null", "resource", ".", "exists", "(", ")", "(", "propertySources", ",", "resource", ",", "propertySourceNamer", ")", "?", "(", ")"], "metrics": {"cyclomatic_complexity": 4, "n_ast_nodes": 144, "ast_depth": 10, "n_identifiers": 10, "vocab_size": 35, "n_whitespaces": 67, "n_words": 43, "nloc": 9, "token_counts": 98}}
{"dataset_split": "train", "id": "spring-boot@6c84674:module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/env/DevToolsHomePropertiesPostProcessor.java#122-135", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/env/DevToolsHomePropertiesPostProcessor.java", "language": "Java"}, "method": {"name": "addPropertySource", "qualified_name": "org.springframework.boot.devtools.env.DevToolsHomePropertiesPostProcessor#addPropertySource", "start_line": 122, "end_line": 135, "signature": "addPropertySource(List<PropertySource<?>> propertySources, FileSystemResource resource,\n\t\t\tFunction<File, String> propertySourceNamer)", "original_code": "private void addPropertySource(List<PropertySource<?>> propertySources, FileSystemResource resource,\n\t\t\tFunction<File, String> propertySourceNamer) {\n\t\ttry {\n\t\t\tString name = propertySourceNamer.apply(resource.getFile());\n\t\t\tfor (PropertySourceLoader loader : PROPERTY_SOURCE_LOADERS) {\n\t\t\t\tif (canLoadFileExtension(loader, resource.getFilename())) {\n\t\t\t\t\tpropertySources.addAll(loader.load(name, resource));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\tthrow new IllegalStateException(\"Unable to load \" + resource.getFilename(), ex);\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "addPropertySource", "private", "(", ",", ",", ")", "{", "}", "propertySources", "FileSystemResource", "resource", "propertySourceNamer", "try", "List", "Function", "{", "}", "catch", "(", ")", "<", ">", "<", "File", ",", "String", ">", "String", ";", "for", "(", "PropertySourceLoader", "loader", ":", "PROPERTY_SOURCE_LOADERS", ")", "ex", "{", "}", "PropertySource", "name", "=", "{", "}", "IOException", "throw", ";", "<", ">", "propertySourceNamer", ".", "apply", "if", "new", "IllegalStateException", "?", "(", ")", "(", ")", "{", "}", "(", ",", "ex", ")", "resource", ".", "getFile", "canLoadFileExtension", ";", "+", "(", ")", "(", "loader", ",", ")", "propertySources", ".", "addAll", "\"", "Unable to load ", "\"", "resource", ".", "getFilename", "resource", ".", "getFilename", "(", ")", "(", ")", "(", ")", "loader", ".", "load", "(", "name", ",", "resource", ")"], "metrics": {"cyclomatic_complexity": 4, "n_ast_nodes": 153, "ast_depth": 15, "n_identifiers": 14, "vocab_size": 46, "n_whitespaces": 82, "n_words": 46, "nloc": 14, "token_counts": 105}}
{"dataset_split": "train", "id": "spring-boot@6c84674:module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/env/DevToolsHomePropertiesPostProcessor.java#137-140", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/env/DevToolsHomePropertiesPostProcessor.java", "language": "Java"}, "method": {"name": "canLoadFileExtension", "qualified_name": "org.springframework.boot.devtools.env.DevToolsHomePropertiesPostProcessor#canLoadFileExtension", "start_line": 137, "end_line": 140, "signature": "canLoadFileExtension(PropertySourceLoader loader, String name)", "original_code": "private boolean canLoadFileExtension(PropertySourceLoader loader, String name) {\n\t\treturn Arrays.stream(loader.getFileExtensions())\n\t\t\t.anyMatch((fileExtension) -> StringUtils.endsWithIgnoreCase(name, fileExtension));\n\t}", "doc_comment": ""}, "code_tokens": ["boolean", "canLoadFileExtension", "private", "(", ",", ")", "{", "}", "PropertySourceLoader", "loader", "String", "name", "return", ";", ".", "anyMatch", "Arrays", ".", "stream", "(", ")", "(", ")", "->", "loader", ".", "getFileExtensions", "(", "fileExtension", ")", "StringUtils", ".", "endsWithIgnoreCase", "(", ")", "(", "name", ",", "fileExtension", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 58, "ast_depth": 10, "n_identifiers": 10, "vocab_size": 23, "n_whitespaces": 19, "n_words": 18, "nloc": 4, "token_counts": 40}}
{"dataset_split": "train", "id": "spring-boot@6c84674:module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/env/DevToolsHomePropertiesPostProcessor.java#142-146", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/env/DevToolsHomePropertiesPostProcessor.java", "language": "Java"}, "method": {"name": "getHomeDirectory", "qualified_name": "org.springframework.boot.devtools.env.DevToolsHomePropertiesPostProcessor#getHomeDirectory", "start_line": 142, "end_line": 146, "signature": "getHomeDirectory()", "original_code": "protected @Nullable File getHomeDirectory() {\n\t\treturn getHomeDirectory(() -> this.environmentVariables.get(\"SPRING_DEVTOOLS_HOME\"),\n\t\t\t\t() -> this.systemProperties.getProperty(\"spring.devtools.home\"),\n\t\t\t\t() -> this.systemProperties.getProperty(\"user.home\"));\n\t}", "doc_comment": ""}, "code_tokens": ["File", "getHomeDirectory", "protected", "(", ")", "{", "}", "@", "Nullable", "return", ";", "getHomeDirectory", "(", ",", ",", ")", "->", "->", "->", "(", ")", ".", "get", "(", ")", ".", "getProperty", "(", ")", ".", "getProperty", "this", ".", "environmentVariables", "(", ")", "this", ".", "systemProperties", "(", ")", "this", ".", "systemProperties", "(", ")", "\"", "SPRING_DEVTOOLS_HOME", "\"", "\"", "spring.devtools.home", "\"", "\"", "user.home", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 82, "ast_depth": 11, "n_identifiers": 6, "vocab_size": 23, "n_whitespaces": 26, "n_words": 21, "nloc": 5, "token_counts": 55}}
{"dataset_split": "train", "id": "spring-boot@6c84674:module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/env/DevToolsHomePropertiesPostProcessor.java#148-157", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/env/DevToolsHomePropertiesPostProcessor.java", "language": "Java"}, "method": {"name": "getHomeDirectory", "qualified_name": "org.springframework.boot.devtools.env.DevToolsHomePropertiesPostProcessor#getHomeDirectory", "start_line": 148, "end_line": 157, "signature": "getHomeDirectory(Supplier<String>... pathSuppliers)", "original_code": "@SafeVarargs\n\tprivate @Nullable File getHomeDirectory(Supplier<String>... pathSuppliers) {\n\t\tfor (Supplier<String> pathSupplier : pathSuppliers) {\n\t\t\tString path = pathSupplier.get();\n\t\t\tif (StringUtils.hasText(path)) {\n\t\t\t\treturn new File(path);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}", "doc_comment": ""}, "code_tokens": ["File", "getHomeDirectory", "private", "(", ")", "{", "}", "@", "SafeVarargs", "@", "Nullable", "...", "for", "(", "pathSupplier", ":", "pathSuppliers", ")", "return", "null", ";", "Supplier", "pathSuppliers", "Supplier", "{", "}", "<", "String", ">", "<", "String", ">", "String", ";", "if", "path", "=", "(", ")", "{", "}", "pathSupplier", ".", "get", "StringUtils", ".", "hasText", "return", ";", "(", ")", "(", "path", ")", "new", "File", "(", "path", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 87, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 30, "n_whitespaces": 48, "n_words": 27, "nloc": 10, "token_counts": 59}}
{"dataset_split": "train", "id": "spring-boot@6c84674:module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/env/DevToolsPropertyDefaultsPostProcessor.java#76-90", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/env/DevToolsPropertyDefaultsPostProcessor.java", "language": "Java"}, "method": {"name": "postProcessEnvironment", "qualified_name": "org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor#postProcessEnvironment", "start_line": 76, "end_line": 90, "signature": "postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application)", "original_code": "@Override\n\tpublic void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {\n\t\tif (DevToolsEnablementDeducer.shouldEnable(Thread.currentThread()) && isLocalApplication(environment)) {\n\t\t\tif (canAddProperties(environment)) {\n\t\t\t\tlogger.info(LogMessage.format(\"Devtools property defaults active! Set '%s' to 'false' to disable\",\n\t\t\t\t\t\tENABLED));\n\t\t\t\tenvironment.getPropertySources().addLast(new MapPropertySource(\"devtools\", PROPERTIES));\n\t\t\t}\n\t\t\tif (isWebApplication(environment) && !environment.containsProperty(WEB_LOGGING)) {\n\t\t\t\tlogger.info(LogMessage.format(\n\t\t\t\t\t\t\"For additional web related logging consider setting the '%s' property to 'DEBUG'\",\n\t\t\t\t\t\tWEB_LOGGING));\n\t\t\t}\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "postProcessEnvironment", "public", "(", ",", ")", "{", "}", "@", "Override", "ConfigurableEnvironment", "environment", "SpringApplication", "application", "if", "(", ")", "{", "}", "&&", "if", "if", "DevToolsEnablementDeducer", ".", "shouldEnable", "isLocalApplication", "(", ")", "{", "}", "(", ")", "{", "}", "(", ")", "(", "environment", ")", "canAddProperties", ";", ";", "&&", ";", "Thread", ".", "currentThread", "(", "environment", ")", "logger", ".", "info", ".", "addLast", "isWebApplication", "!", "logger", ".", "info", "(", ")", "(", ")", "environment", ".", "getPropertySources", "(", ")", "(", "environment", ")", "environment", ".", "containsProperty", "(", ")", "LogMessage", ".", "format", "(", ")", "new", "MapPropertySource", "(", "WEB_LOGGING", ")", "LogMessage", ".", "format", "(", ",", "ENABLED", ")", "(", ",", "PROPERTIES", ")", "(", ",", "WEB_LOGGING", ")", "\"", "Devtools property defaults active! Set '%s' to 'false' to disable", "\"", "\"", "devtools", "\"", "\"", "For additional web related logging consider setting the '%s' property to 'DEBUG'", "\""], "metrics": {"cyclomatic_complexity": 6, "n_ast_nodes": 163, "ast_depth": 14, "n_identifiers": 21, "vocab_size": 42, "n_whitespaces": 100, "n_words": 63, "nloc": 15, "token_counts": 111}}
{"dataset_split": "train", "id": "spring-boot@6c84674:module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/env/DevToolsPropertyDefaultsPostProcessor.java#92-94", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/env/DevToolsPropertyDefaultsPostProcessor.java", "language": "Java"}, "method": {"name": "isLocalApplication", "qualified_name": "org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor#isLocalApplication", "start_line": 92, "end_line": 94, "signature": "isLocalApplication(ConfigurableEnvironment environment)", "original_code": "private boolean isLocalApplication(ConfigurableEnvironment environment) {\n\t\treturn environment.getPropertySources().get(\"remoteUrl\") == null;\n\t}", "doc_comment": ""}, "code_tokens": ["boolean", "isLocalApplication", "private", "(", ")", "{", "}", "ConfigurableEnvironment", "environment", "return", ";", "==", "null", ".", "get", "environment", ".", "getPropertySources", "(", ")", "(", ")", "\"", "remoteUrl", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 38, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 18, "n_whitespaces": 12, "n_words": 11, "nloc": 3, "token_counts": 25}}
{"dataset_split": "train", "id": "spring-boot@6c84674:module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/env/DevToolsPropertyDefaultsPostProcessor.java#96-101", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/env/DevToolsPropertyDefaultsPostProcessor.java", "language": "Java"}, "method": {"name": "canAddProperties", "qualified_name": "org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor#canAddProperties", "start_line": 96, "end_line": 101, "signature": "canAddProperties(Environment environment)", "original_code": "private boolean canAddProperties(Environment environment) {\n\t\tif (environment.getProperty(ENABLED, Boolean.class, true)) {\n\t\t\treturn isRestarterInitialized() || isRemoteRestartEnabled(environment);\n\t\t}\n\t\treturn false;\n\t}", "doc_comment": ""}, "code_tokens": ["boolean", "canAddProperties", "private", "(", ")", "{", "}", "Environment", "environment", "if", "return", "false", ";", "(", ")", "{", "}", "environment", ".", "getProperty", "return", ";", "(", "ENABLED", ",", ",", "true", ")", "||", "Boolean", ".", "class", "isRestarterInitialized", "isRemoteRestartEnabled", "(", ")", "(", "environment", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 58, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 23, "n_whitespaces": 27, "n_words": 18, "nloc": 6, "token_counts": 39}}
{"dataset_split": "train", "id": "spring-boot@6c84674:module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/env/DevToolsPropertyDefaultsPostProcessor.java#103-111", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/env/DevToolsPropertyDefaultsPostProcessor.java", "language": "Java"}, "method": {"name": "isRestarterInitialized", "qualified_name": "org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor#isRestarterInitialized", "start_line": 103, "end_line": 111, "signature": "isRestarterInitialized()", "original_code": "private boolean isRestarterInitialized() {\n\t\ttry {\n\t\t\tRestarter restarter = Restarter.getInstance();\n\t\t\treturn (restarter != null && restarter.getInitialUrls() != null);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\treturn false;\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["boolean", "isRestarterInitialized", "private", "(", ")", "{", "}", "try", "{", "}", "catch", "(", ")", "Restarter", ";", "return", ";", "ex", "{", "}", "restarter", "=", "(", ")", "Exception", "return", "false", ";", "Restarter", ".", "getInstance", "&&", "(", ")", "restarter", "!=", "null", "!=", "null", "restarter", ".", "getInitialUrls", "(", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 67, "ast_depth": 12, "n_identifiers": 6, "vocab_size": 23, "n_whitespaces": 44, "n_words": 19, "nloc": 9, "token_counts": 44}}
{"dataset_split": "train", "id": "spring-boot@6c84674:module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/env/DevToolsPropertyDefaultsPostProcessor.java#113-115", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/env/DevToolsPropertyDefaultsPostProcessor.java", "language": "Java"}, "method": {"name": "isRemoteRestartEnabled", "qualified_name": "org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor#isRemoteRestartEnabled", "start_line": 113, "end_line": 115, "signature": "isRemoteRestartEnabled(Environment environment)", "original_code": "private boolean isRemoteRestartEnabled(Environment environment) {\n\t\treturn environment.containsProperty(\"spring.devtools.remote.secret\");\n\t}", "doc_comment": ""}, "code_tokens": ["boolean", "isRemoteRestartEnabled", "private", "(", ")", "{", "}", "Environment", "environment", "return", ";", "environment", ".", "containsProperty", "(", ")", "\"", "spring.devtools.remote.secret", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 29, "ast_depth": 8, "n_identifiers": 3, "vocab_size": 15, "n_whitespaces": 10, "n_words": 12, "nloc": 3, "token_counts": 19}}
{"dataset_split": "train", "id": "spring-boot@6c84674:module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/env/DevToolsPropertyDefaultsPostProcessor.java#117-125", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/env/DevToolsPropertyDefaultsPostProcessor.java", "language": "Java"}, "method": {"name": "isWebApplication", "qualified_name": "org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor#isWebApplication", "start_line": 117, "end_line": 125, "signature": "isWebApplication(Environment environment)", "original_code": "private boolean isWebApplication(Environment environment) {\n\t\tfor (String candidate : WEB_ENVIRONMENT_CLASSES) {\n\t\t\tClass<?> environmentClass = resolveClassName(candidate, environment.getClass().getClassLoader());\n\t\t\tif (environmentClass != null && environmentClass.isInstance(environment)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}", "doc_comment": ""}, "code_tokens": ["boolean", "isWebApplication", "private", "(", ")", "{", "}", "Environment", "environment", "for", "(", "String", "candidate", ":", "WEB_ENVIRONMENT_CLASSES", ")", "return", "false", ";", "{", "}", ";", "if", "Class", "environmentClass", "=", "(", ")", "{", "}", "<", ">", "resolveClassName", "&&", "return", "true", ";", "?", "(", "candidate", ",", ")", "environmentClass", "!=", "null", "environmentClass", ".", "isInstance", ".", "getClassLoader", "(", "environment", ")", "environment", ".", "getClass", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 4, "n_ast_nodes": 88, "ast_depth": 13, "n_identifiers": 9, "vocab_size": 34, "n_whitespaces": 49, "n_words": 26, "nloc": 9, "token_counts": 60}}
{"dataset_split": "train", "id": "spring-boot@6c84674:module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/env/DevToolsPropertyDefaultsPostProcessor.java#127-134", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/env/DevToolsPropertyDefaultsPostProcessor.java", "language": "Java"}, "method": {"name": "resolveClassName", "qualified_name": "org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor#resolveClassName", "start_line": 127, "end_line": 134, "signature": "resolveClassName(String candidate, ClassLoader classLoader)", "original_code": "private @Nullable Class<?> resolveClassName(String candidate, ClassLoader classLoader) {\n\t\ttry {\n\t\t\treturn ClassUtils.resolveClassName(candidate, classLoader);\n\t\t}\n\t\tcatch (IllegalArgumentException ex) {\n\t\t\treturn null;\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["resolveClassName", "private", "Class", "(", ",", ")", "{", "}", "@", "Nullable", "<", ">", "String", "candidate", "ClassLoader", "classLoader", "try", "?", "{", "}", "catch", "(", ")", "return", ";", "ex", "{", "}", "ClassUtils", ".", "resolveClassName", "IllegalArgumentException", "return", "null", ";", "(", "candidate", ",", "classLoader", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 61, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 26, "n_whitespaces": 36, "n_words": 19, "nloc": 8, "token_counts": 40}}
{"dataset_split": "train", "id": "spring-boot@6c84674:module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/env/DevToolsPropertyDefaultsPostProcessor.java#136-154", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/env/DevToolsPropertyDefaultsPostProcessor.java", "language": "Java"}, "method": {"name": "loadDefaultProperties", "qualified_name": "org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor#loadDefaultProperties", "start_line": 136, "end_line": 154, "signature": "loadDefaultProperties()", "original_code": "private static Map<String, Object> loadDefaultProperties() {\n\t\tProperties properties = new Properties();\n\t\ttry (InputStream stream = DevToolsPropertyDefaultsPostProcessor.class\n\t\t\t.getResourceAsStream(\"devtools-property-defaults.properties\")) {\n\t\t\tif (stream == null) {\n\t\t\t\tthrow new RuntimeException(\n\t\t\t\t\t\t\"Failed to load devtools-property-defaults.properties because it doesn't exist\");\n\t\t\t}\n\t\t\tproperties.load(stream);\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\tthrow new RuntimeException(\"Failed to load devtools-property-defaults.properties\", ex);\n\t\t}\n\t\tMap<String, Object> map = new HashMap<>();\n\t\tfor (String name : properties.stringPropertyNames()) {\n\t\t\tmap.put(name, properties.getProperty(name));\n\t\t}\n\t\treturn Collections.unmodifiableMap(map);\n\t}", "doc_comment": ""}, "code_tokens": ["loadDefaultProperties", "private", "static", "Map", "(", ")", "{", "}", "<", "String", ",", "Object", ">", "Properties", ";", "try", ";", "for", "(", "String", "name", ":", ")", "return", ";", "properties", "=", "(", ")", "{", "}", "catch", "(", ")", "Map", "map", "=", "properties", ".", "stringPropertyNames", "{", "}", "Collections", ".", "unmodifiableMap", "new", "Properties", "InputStream", "stream", "=", "if", ";", "ex", "{", "}", "<", "String", ",", "Object", ">", "new", "(", ")", ";", "(", "map", ")", "(", ")", ".", "getResourceAsStream", "(", ")", "{", "}", "properties", ".", "load", "IOException", "throw", ";", "HashMap", "(", ")", "map", ".", "put", "DevToolsPropertyDefaultsPostProcessor", ".", "class", "(", ")", "stream", "==", "null", "throw", ";", "(", "stream", ")", "new", "RuntimeException", "<", ">", "(", "name", ",", ")", "\"", "devtools-property-defaults.properties", "\"", "new", "RuntimeException", "(", ",", "ex", ")", "properties", ".", "getProperty", "(", ")", "\"", "Failed to load devtools-property-defaults.properties", "\"", "(", "name", ")", "\"", "Failed to load devtools-property-defaults.properties because it doesn't exist", "\""], "metrics": {"cyclomatic_complexity": 4, "n_ast_nodes": 189, "ast_depth": 12, "n_identifiers": 13, "vocab_size": 49, "n_whitespaces": 113, "n_words": 76, "nloc": 19, "token_counts": 131}}
{"dataset_split": "train", "id": "spring-boot@6c84674:module/spring-boot-integration/src/main/java/org/springframework/boot/integration/autoconfigure/IntegrationPropertiesEnvironmentPostProcessor.java#48-51", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-integration/src/main/java/org/springframework/boot/integration/autoconfigure/IntegrationPropertiesEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "getOrder", "qualified_name": "org.springframework.boot.integration.autoconfigure.IntegrationPropertiesEnvironmentPostProcessor#getOrder", "start_line": 48, "end_line": 51, "signature": "getOrder()", "original_code": "@Override\n\tpublic int getOrder() {\n\t\treturn Ordered.LOWEST_PRECEDENCE;\n\t}", "doc_comment": ""}, "code_tokens": ["getOrder", "public", "int", "(", ")", "{", "}", "@", "Override", "return", ";", "Ordered", ".", "LOWEST_PRECEDENCE"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 23, "ast_depth": 6, "n_identifiers": 4, "vocab_size": 14, "n_whitespaces": 11, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@6c84674:module/spring-boot-integration/src/main/java/org/springframework/boot/integration/autoconfigure/IntegrationPropertiesEnvironmentPostProcessor.java#53-59", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-integration/src/main/java/org/springframework/boot/integration/autoconfigure/IntegrationPropertiesEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "postProcessEnvironment", "qualified_name": "org.springframework.boot.integration.autoconfigure.IntegrationPropertiesEnvironmentPostProcessor#postProcessEnvironment", "start_line": 53, "end_line": 59, "signature": "postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application)", "original_code": "@Override\n\tpublic void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {\n\t\tResource resource = new ClassPathResource(\"META-INF/spring.integration.properties\");\n\t\tif (resource.exists()) {\n\t\t\tregisterIntegrationPropertiesPropertySource(environment, resource);\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "postProcessEnvironment", "public", "(", ",", ")", "{", "}", "@", "Override", "ConfigurableEnvironment", "environment", "SpringApplication", "application", "Resource", ";", "if", "resource", "=", "(", ")", "{", "}", "new", "ClassPathResource", "resource", ".", "exists", ";", "(", ")", "(", ")", "registerIntegrationPropertiesPropertySource", "\"", "META-INF/spring.integration.properties", "\"", "(", "environment", ",", "resource", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 63, "ast_depth": 9, "n_identifiers": 7, "vocab_size": 26, "n_whitespaces": 30, "n_words": 23, "nloc": 7, "token_counts": 42}}
{"dataset_split": "train", "id": "spring-boot@6c84674:module/spring-boot-integration/src/main/java/org/springframework/boot/integration/autoconfigure/IntegrationPropertiesEnvironmentPostProcessor.java#61-72", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-integration/src/main/java/org/springframework/boot/integration/autoconfigure/IntegrationPropertiesEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "registerIntegrationPropertiesPropertySource", "qualified_name": "org.springframework.boot.integration.autoconfigure.IntegrationPropertiesEnvironmentPostProcessor#registerIntegrationPropertiesPropertySource", "start_line": 61, "end_line": 72, "signature": "registerIntegrationPropertiesPropertySource(ConfigurableEnvironment environment, Resource resource)", "original_code": "protected void registerIntegrationPropertiesPropertySource(ConfigurableEnvironment environment, Resource resource) {\n\t\tPropertiesPropertySourceLoader loader = new PropertiesPropertySourceLoader();\n\t\ttry {\n\t\t\tOriginTrackedMapPropertySource propertyFileSource = (OriginTrackedMapPropertySource) loader\n\t\t\t\t.load(\"META-INF/spring.integration.properties\", resource)\n\t\t\t\t.get(0);\n\t\t\tenvironment.getPropertySources().addLast(new IntegrationPropertiesPropertySource(propertyFileSource));\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\tthrow new IllegalStateException(\"Failed to load integration properties from \" + resource, ex);\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "registerIntegrationPropertiesPropertySource", "protected", "(", ",", ")", "{", "}", "ConfigurableEnvironment", "environment", "Resource", "resource", "PropertiesPropertySourceLoader", ";", "try", "loader", "=", "{", "}", "catch", "(", ")", "new", "PropertiesPropertySourceLoader", "OriginTrackedMapPropertySource", ";", ";", "ex", "{", "}", "(", ")", "propertyFileSource", "=", ".", "addLast", "IOException", "throw", ";", "(", "OriginTrackedMapPropertySource", ")", "environment", ".", "getPropertySources", "(", ")", "new", "IllegalStateException", ".", "get", "(", ")", "new", "IntegrationPropertiesPropertySource", "(", ",", "ex", ")", "loader", ".", "load", "(", "0", ")", "(", "propertyFileSource", ")", "+", "resource", "(", ",", "resource", ")", "\"", "Failed to load integration properties from ", "\"", "\"", "META-INF/spring.integration.properties", "\""], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 117, "ast_depth": 13, "n_identifiers": 10, "vocab_size": 36, "n_whitespaces": 70, "n_words": 45, "nloc": 12, "token_counts": 80}}
{"dataset_split": "train", "id": "spring-boot@6c84674:module/spring-boot-integration/src/main/java/org/springframework/boot/integration/autoconfigure/IntegrationPropertiesEnvironmentPostProcessor.java#105-109", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-integration/src/main/java/org/springframework/boot/integration/autoconfigure/IntegrationPropertiesEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "getProperty", "qualified_name": "org.springframework.boot.integration.autoconfigure.IntegrationPropertiesEnvironmentPostProcessor#getProperty", "start_line": 105, "end_line": 109, "signature": "getProperty(String name)", "original_code": "@Override\n\t\tpublic @Nullable Object getProperty(String name) {\n\t\t\tString mapped = KEYS_MAPPING.get(name);\n\t\t\treturn (mapped != null) ? this.delegate.getProperty(mapped) : null;\n\t\t}", "doc_comment": ""}, "code_tokens": ["Object", "getProperty", "public", "(", ")", "{", "}", "@", "Override", "@", "Nullable", "String", "name", "String", ";", "return", ";", "mapped", "=", "?", ":", "null", "KEYS_MAPPING", ".", "get", "(", ")", ".", "getProperty", "(", "name", ")", "mapped", "!=", "null", "this", ".", "delegate", "(", "mapped", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 60, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 25, "n_whitespaces": 29, "n_words": 20, "nloc": 5, "token_counts": 41}}
{"dataset_split": "train", "id": "spring-boot@6c84674:module/spring-boot-integration/src/main/java/org/springframework/boot/integration/autoconfigure/IntegrationPropertiesEnvironmentPostProcessor.java#111-115", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-integration/src/main/java/org/springframework/boot/integration/autoconfigure/IntegrationPropertiesEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "getOrigin", "qualified_name": "org.springframework.boot.integration.autoconfigure.IntegrationPropertiesEnvironmentPostProcessor#getOrigin", "start_line": 111, "end_line": 115, "signature": "getOrigin(String key)", "original_code": "@Override\n\t\tpublic @Nullable Origin getOrigin(String key) {\n\t\t\tString mapped = KEYS_MAPPING.get(key);\n\t\t\treturn (mapped != null) ? this.delegate.getOrigin(mapped) : null;\n\t\t}", "doc_comment": ""}, "code_tokens": ["Origin", "getOrigin", "public", "(", ")", "{", "}", "@", "Override", "@", "Nullable", "String", "key", "String", ";", "return", ";", "mapped", "=", "?", ":", "null", "KEYS_MAPPING", ".", "get", "(", ")", ".", "getOrigin", "(", "key", ")", "mapped", "!=", "null", "this", ".", "delegate", "(", "mapped", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 60, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 25, "n_whitespaces": 29, "n_words": 20, "nloc": 5, "token_counts": 41}}
{"dataset_split": "train", "id": "spring-boot@6c84674:module/spring-boot-micrometer-tracing/src/main/java/org/springframework/boot/micrometer/tracing/autoconfigure/LogCorrelationEnvironmentPostProcessor.java#41-46", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-micrometer-tracing/src/main/java/org/springframework/boot/micrometer/tracing/autoconfigure/LogCorrelationEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "postProcessEnvironment", "qualified_name": "org.springframework.boot.micrometer.tracing.autoconfigure.LogCorrelationEnvironmentPostProcessor#postProcessEnvironment", "start_line": 41, "end_line": 46, "signature": "postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application)", "original_code": "@Override\n\tpublic void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {\n\t\tif (ClassUtils.isPresent(\"io.micrometer.tracing.Tracer\", application.getClassLoader())) {\n\t\t\tenvironment.getPropertySources().addLast(new LogCorrelationPropertySource(this, environment));\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "postProcessEnvironment", "public", "(", ",", ")", "{", "}", "@", "Override", "ConfigurableEnvironment", "environment", "SpringApplication", "application", "if", "(", ")", "{", "}", "ClassUtils", ".", "isPresent", ";", "(", ",", ")", ".", "addLast", "\"", "io.micrometer.tracing.Tracer", "\"", "application", ".", "getClassLoader", "environment", ".", "getPropertySources", "(", ")", "(", ")", "(", ")", "new", "LogCorrelationPropertySource", "(", "this", ",", "environment", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 73, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 27, "n_whitespaces": 25, "n_words": 24, "nloc": 6, "token_counts": 50}}
{"dataset_split": "train", "id": "spring-boot@6c84674:module/spring-boot-micrometer-tracing/src/main/java/org/springframework/boot/micrometer/tracing/autoconfigure/LogCorrelationEnvironmentPostProcessor.java#62-65", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-micrometer-tracing/src/main/java/org/springframework/boot/micrometer/tracing/autoconfigure/LogCorrelationEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "getPropertyNames", "qualified_name": "org.springframework.boot.micrometer.tracing.autoconfigure.LogCorrelationEnvironmentPostProcessor#getPropertyNames", "start_line": 62, "end_line": 65, "signature": "getPropertyNames()", "original_code": "@Override\n\t\tpublic String[] getPropertyNames() {\n\t\t\treturn new String[] { LoggingSystem.EXPECT_CORRELATION_ID_PROPERTY };\n\t\t}", "doc_comment": ""}, "code_tokens": ["getPropertyNames", "public", "String", "(", ")", "{", "}", "@", "Override", "[", "]", "return", ";", "new", "String", "[", "]", "{", "}", "LoggingSystem", ".", "EXPECT_CORRELATION_ID_PROPERTY"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 35, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 17, "n_whitespaces": 18, "n_words": 9, "nloc": 4, "token_counts": 22}}
{"dataset_split": "train", "id": "spring-boot@6c84674:module/spring-boot-micrometer-tracing/src/main/java/org/springframework/boot/micrometer/tracing/autoconfigure/LogCorrelationEnvironmentPostProcessor.java#67-73", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-micrometer-tracing/src/main/java/org/springframework/boot/micrometer/tracing/autoconfigure/LogCorrelationEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "getProperty", "qualified_name": "org.springframework.boot.micrometer.tracing.autoconfigure.LogCorrelationEnvironmentPostProcessor#getProperty", "start_line": 67, "end_line": 73, "signature": "getProperty(String name)", "original_code": "@Override\n\t\tpublic @Nullable Object getProperty(String name) {\n\t\t\tif (name.equals(LoggingSystem.EXPECT_CORRELATION_ID_PROPERTY)) {\n\t\t\t\treturn this.environment.getProperty(\"management.tracing.export.enabled\", Boolean.class, Boolean.TRUE);\n\t\t\t}\n\t\t\treturn null;\n\t\t}", "doc_comment": ""}, "code_tokens": ["Object", "getProperty", "public", "(", ")", "{", "}", "@", "Override", "@", "Nullable", "String", "name", "if", "return", "null", ";", "(", ")", "{", "}", "name", ".", "equals", "return", ";", "(", ")", ".", "getProperty", "LoggingSystem", ".", "EXPECT_CORRELATION_ID_PROPERTY", "this", ".", "environment", "(", ",", ",", ")", "\"", "management.tracing.export.enabled", "\"", "Boolean", ".", "class", "Boolean", ".", "TRUE"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 71, "ast_depth": 10, "n_identifiers": 10, "vocab_size": 28, "n_whitespaces": 34, "n_words": 26, "nloc": 7, "token_counts": 49}}
{"dataset_split": "train", "id": "spring-boot@6c84674:module/spring-boot-reactor/src/main/java/org/springframework/boot/reactor/ReactorEnvironmentPostProcessor.java#45-62", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-reactor/src/main/java/org/springframework/boot/reactor/ReactorEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "postProcessEnvironment", "qualified_name": "org.springframework.boot.reactor.ReactorEnvironmentPostProcessor#postProcessEnvironment", "start_line": 45, "end_line": 62, "signature": "postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application)", "original_code": "@Override\n\tpublic void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {\n\t\tif (ClassUtils.isPresent(REACTOR_DEBUGAGENT_CLASS, null)) {\n\t\t\tBoolean agentEnabled = environment.getProperty(\"spring.reactor.debug-agent.enabled\", Boolean.class);\n\t\t\tif (agentEnabled != Boolean.FALSE) {\n\t\t\t\ttry {\n\t\t\t\t\tClass<?> debugAgent = Class.forName(REACTOR_DEBUGAGENT_CLASS);\n\t\t\t\t\tdebugAgent.getMethod(\"init\").invoke(null);\n\t\t\t\t}\n\t\t\t\tcatch (Exception ex) {\n\t\t\t\t\tthrow new RuntimeException(\"Failed to init Reactor's debug agent\", ex);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (Threading.VIRTUAL.isActive(environment)) {\n\t\t\tSystem.setProperty(\"reactor.schedulers.defaultBoundedElasticOnVirtualThreads\", \"true\");\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "postProcessEnvironment", "public", "(", ",", ")", "{", "}", "@", "Override", "ConfigurableEnvironment", "environment", "SpringApplication", "application", "if", "if", "(", ")", "{", "}", "(", ")", "{", "}", "ClassUtils", ".", "isPresent", "Boolean", ";", "if", ".", "isActive", ";", "(", "REACTOR_DEBUGAGENT_CLASS", ",", "null", ")", "agentEnabled", "=", "(", ")", "{", "}", "Threading", ".", "VIRTUAL", "(", "environment", ")", "System", ".", "setProperty", "environment", ".", "getProperty", "agentEnabled", "!=", "try", "(", ",", ")", "(", ",", ")", "Boolean", ".", "FALSE", "{", "}", "catch", "(", ")", "\"", "reactor.schedulers.defaultBoundedElasticOnVirtualThreads", "\"", "\"", "true", "\"", "\"", "spring.reactor.debug-agent.enabled", "\"", "Boolean", ".", "class", ";", ";", "ex", "{", "}", "Class", "debugAgent", "=", ".", "invoke", "Exception", "throw", ";", "<", ">", "Class", ".", "forName", "debugAgent", ".", "getMethod", "(", "null", ")", "new", "RuntimeException", "?", "(", "REACTOR_DEBUGAGENT_CLASS", ")", "(", ")", "(", ",", "ex", ")", "\"", "init", "\"", "\"", "Failed to init Reactor's debug agent", "\""], "metrics": {"cyclomatic_complexity": 5, "n_ast_nodes": 185, "ast_depth": 15, "n_identifiers": 22, "vocab_size": 54, "n_whitespaces": 105, "n_words": 64, "nloc": 18, "token_counts": 127}}
{"dataset_split": "train", "id": "spring-boot@6c84674:module/spring-boot-reactor/src/main/java/org/springframework/boot/reactor/ReactorEnvironmentPostProcessor.java#64-67", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-reactor/src/main/java/org/springframework/boot/reactor/ReactorEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "getOrder", "qualified_name": "org.springframework.boot.reactor.ReactorEnvironmentPostProcessor#getOrder", "start_line": 64, "end_line": 67, "signature": "getOrder()", "original_code": "@Override\n\tpublic int getOrder() {\n\t\treturn Ordered.LOWEST_PRECEDENCE;\n\t}", "doc_comment": ""}, "code_tokens": ["getOrder", "public", "int", "(", ")", "{", "}", "@", "Override", "return", ";", "Ordered", ".", "LOWEST_PRECEDENCE"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 23, "ast_depth": 6, "n_identifiers": 4, "vocab_size": 14, "n_whitespaces": 11, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@6c84674:module/spring-boot-web-server-test/src/main/java/org/springframework/boot/web/server/test/SpringBootTestRandomPortEnvironmentPostProcessor.java#47-65", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-web-server-test/src/main/java/org/springframework/boot/web/server/test/SpringBootTestRandomPortEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "postProcessEnvironment", "qualified_name": "org.springframework.boot.web.server.test.SpringBootTestRandomPortEnvironmentPostProcessor#postProcessEnvironment", "start_line": 47, "end_line": 65, "signature": "postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application)", "original_code": "@Override\n\tpublic void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {\n\t\tMapPropertySource source = (MapPropertySource) environment.getPropertySources()\n\t\t\t.get(TestPropertySourceUtils.INLINED_PROPERTIES_PROPERTY_SOURCE_NAME);\n\t\tif (source == null || isTestServerPortFixed(source, environment) || isTestManagementPortConfigured(source)) {\n\t\t\treturn;\n\t\t}\n\t\tInteger managementPort = getPropertyAsInteger(environment, MANAGEMENT_PORT_PROPERTY, null);\n\t\tif (managementPort == null || managementPort.equals(-1) || managementPort.equals(0)) {\n\t\t\treturn;\n\t\t}\n\t\tInteger serverPort = getPropertyAsInteger(environment, SERVER_PORT_PROPERTY, 8080);\n\t\tif (!managementPort.equals(serverPort)) {\n\t\t\tsource.getSource().put(MANAGEMENT_PORT_PROPERTY, \"0\");\n\t\t}\n\t\telse {\n\t\t\tsource.getSource().put(MANAGEMENT_PORT_PROPERTY, \"\");\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "postProcessEnvironment", "public", "(", ",", ")", "{", "}", "@", "Override", "ConfigurableEnvironment", "environment", "SpringApplication", "application", "MapPropertySource", ";", "if", "Integer", ";", "if", "Integer", ";", "if", "else", "source", "=", "(", ")", "{", "}", "managementPort", "=", "(", ")", "{", "}", "serverPort", "=", "(", ")", "{", "}", "{", "}", "(", "MapPropertySource", ")", "||", "return", ";", "getPropertyAsInteger", "||", "return", ";", "getPropertyAsInteger", "!", ";", ";", ".", "get", "||", "isTestManagementPortConfigured", "(", "environment", ",", "MANAGEMENT_PORT_PROPERTY", ",", "null", ")", "||", "managementPort", ".", "equals", "(", "environment", ",", "SERVER_PORT_PROPERTY", ",", "8080", ")", "managementPort", ".", "equals", ".", "put", ".", "put", "environment", ".", "getPropertySources", "(", ")", "source", "==", "null", "isTestServerPortFixed", "(", "source", ")", "managementPort", "==", "null", "managementPort", ".", "equals", "(", "0", ")", "(", "serverPort", ")", "source", ".", "getSource", "(", "MANAGEMENT_PORT_PROPERTY", ",", ")", "source", ".", "getSource", "(", "MANAGEMENT_PORT_PROPERTY", ",", ")", "(", ")", "TestPropertySourceUtils", ".", "INLINED_PROPERTIES_PROPERTY_SOURCE_NAME", "(", "source", ",", "environment", ")", "(", ")", "(", ")", "\"", "0", "\"", "(", ")", "\"", "\"", "-", "1"], "metrics": {"cyclomatic_complexity": 8, "n_ast_nodes": 214, "ast_depth": 11, "n_identifiers": 19, "vocab_size": 46, "n_whitespaces": 99, "n_words": 61, "nloc": 19, "token_counts": 148}}
{"dataset_split": "train", "id": "spring-boot@6c84674:module/spring-boot-web-server-test/src/main/java/org/springframework/boot/web/server/test/SpringBootTestRandomPortEnvironmentPostProcessor.java#67-69", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-web-server-test/src/main/java/org/springframework/boot/web/server/test/SpringBootTestRandomPortEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "isTestServerPortFixed", "qualified_name": "org.springframework.boot.web.server.test.SpringBootTestRandomPortEnvironmentPostProcessor#isTestServerPortFixed", "start_line": 67, "end_line": 69, "signature": "isTestServerPortFixed(MapPropertySource source, ConfigurableEnvironment environment)", "original_code": "private boolean isTestServerPortFixed(MapPropertySource source, ConfigurableEnvironment environment) {\n\t\treturn !Integer.valueOf(0).equals(getPropertyAsInteger(source, SERVER_PORT_PROPERTY, environment));\n\t}", "doc_comment": ""}, "code_tokens": ["boolean", "isTestServerPortFixed", "private", "(", ",", ")", "{", "}", "MapPropertySource", "source", "ConfigurableEnvironment", "environment", "return", ";", "!", ".", "equals", "Integer", ".", "valueOf", "(", ")", "(", "0", ")", "getPropertyAsInteger", "(", "source", ",", "SERVER_PORT_PROPERTY", ",", "environment", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 48, "ast_depth": 10, "n_identifiers": 8, "vocab_size": 22, "n_whitespaces": 14, "n_words": 16, "nloc": 3, "token_counts": 33}}
{"dataset_split": "train", "id": "spring-boot@6c84674:module/spring-boot-web-server-test/src/main/java/org/springframework/boot/web/server/test/SpringBootTestRandomPortEnvironmentPostProcessor.java#71-73", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-web-server-test/src/main/java/org/springframework/boot/web/server/test/SpringBootTestRandomPortEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "isTestManagementPortConfigured", "qualified_name": "org.springframework.boot.web.server.test.SpringBootTestRandomPortEnvironmentPostProcessor#isTestManagementPortConfigured", "start_line": 71, "end_line": 73, "signature": "isTestManagementPortConfigured(PropertySource<?> source)", "original_code": "private boolean isTestManagementPortConfigured(PropertySource<?> source) {\n\t\treturn source.getProperty(MANAGEMENT_PORT_PROPERTY) != null;\n\t}", "doc_comment": ""}, "code_tokens": ["boolean", "isTestManagementPortConfigured", "private", "(", ")", "{", "}", "source", "return", ";", "PropertySource", "!=", "null", "<", ">", "source", ".", "getProperty", "?", "(", "MANAGEMENT_PORT_PROPERTY", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 35, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 19, "n_whitespaces": 12, "n_words": 10, "nloc": 3, "token_counts": 22}}
{"dataset_split": "train", "id": "spring-boot@6c84674:module/spring-boot-web-server-test/src/main/java/org/springframework/boot/web/server/test/SpringBootTestRandomPortEnvironmentPostProcessor.java#75-86", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-web-server-test/src/main/java/org/springframework/boot/web/server/test/SpringBootTestRandomPortEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "getPropertyAsInteger", "qualified_name": "org.springframework.boot.web.server.test.SpringBootTestRandomPortEnvironmentPostProcessor#getPropertyAsInteger", "start_line": 75, "end_line": 86, "signature": "getPropertyAsInteger(ConfigurableEnvironment environment, String property,\n\t\t\t@Nullable Integer defaultValue)", "original_code": "@Contract(\"_, _, !null -> !null\")\n\tprivate @Nullable Integer getPropertyAsInteger(ConfigurableEnvironment environment, String property,\n\t\t\t@Nullable Integer defaultValue) {\n\t\treturn environment.getPropertySources()\n\t\t\t.stream()\n\t\t\t.filter((source) -> !source.getName()\n\t\t\t\t.equals(TestPropertySourceUtils.INLINED_PROPERTIES_PROPERTY_SOURCE_NAME))\n\t\t\t.map((source) -> getPropertyAsInteger(source, property, environment))\n\t\t\t.filter(Objects::nonNull)\n\t\t\t.findFirst()\n\t\t\t.orElse(defaultValue);\n\t}", "doc_comment": ""}, "code_tokens": ["Integer", "getPropertyAsInteger", "private", "(", ",", ",", ")", "{", "}", "@", "Contract", "@", "Nullable", "ConfigurableEnvironment", "environment", "String", "property", "Integer", "defaultValue", "return", ";", "(", ")", ".", "orElse", "\"", "_, _, !null -> !null", "\"", "@", "Nullable", ".", "findFirst", "(", "defaultValue", ")", ".", "filter", "(", ")", ".", "map", "(", ")", ".", "filter", "(", ")", "Objects", "::", "nonNull", ".", "stream", "(", ")", "->", "environment", ".", "getPropertySources", "(", ")", "->", "(", "source", ")", "getPropertyAsInteger", "(", ")", "(", "source", ")", "!", "(", "source", ",", "property", ",", "environment", ")", ".", "equals", "source", ".", "getName", "(", ")", "(", ")", "TestPropertySourceUtils", ".", "INLINED_PROPERTIES_PROPERTY_SOURCE_NAME"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 132, "ast_depth": 16, "n_identifiers": 19, "vocab_size": 37, "n_whitespaces": 60, "n_words": 39, "nloc": 12, "token_counts": 90}}
{"dataset_split": "train", "id": "spring-boot@6c84674:module/spring-boot-web-server-test/src/main/java/org/springframework/boot/web/server/test/SpringBootTestRandomPortEnvironmentPostProcessor.java#88-106", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-web-server-test/src/main/java/org/springframework/boot/web/server/test/SpringBootTestRandomPortEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "getPropertyAsInteger", "qualified_name": "org.springframework.boot.web.server.test.SpringBootTestRandomPortEnvironmentPostProcessor#getPropertyAsInteger", "start_line": 88, "end_line": 106, "signature": "getPropertyAsInteger(PropertySource<?> source, String property,\n\t\t\tConfigurableEnvironment environment)", "original_code": "private @Nullable Integer getPropertyAsInteger(PropertySource<?> source, String property,\n\t\t\tConfigurableEnvironment environment) {\n\t\tObject value = source.getProperty(property);\n\t\tif (value == null) {\n\t\t\treturn null;\n\t\t}\n\t\tif (ClassUtils.isAssignableValue(Integer.class, value)) {\n\t\t\treturn (Integer) value;\n\t\t}\n\t\ttry {\n\t\t\treturn environment.getConversionService().convert(value, Integer.class);\n\t\t}\n\t\tcatch (ConversionFailedException ex) {\n\t\t\tif (value instanceof String string) {\n\t\t\t\treturn getResolvedValueIfPossible(environment, string);\n\t\t\t}\n\t\t\tthrow ex;\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["Integer", "getPropertyAsInteger", "private", "(", ",", ",", ")", "{", "}", "@", "Nullable", "source", "String", "property", "ConfigurableEnvironment", "environment", "Object", ";", "if", "if", "try", "PropertySource", "value", "=", "(", ")", "{", "}", "(", ")", "{", "}", "{", "}", "catch", "(", ")", "<", ">", "source", ".", "getProperty", "value", "==", "null", "return", "null", ";", "ClassUtils", ".", "isAssignableValue", "return", ";", "return", ";", "ex", "{", "}", "?", "(", "property", ")", "(", ",", "value", ")", "(", "Integer", ")", "value", ".", "convert", "ConversionFailedException", "if", "throw", "ex", ";", "Integer", ".", "class", "environment", ".", "getConversionService", "(", "value", ",", ")", "(", ")", "{", "}", "(", ")", "Integer", ".", "class", "value", "instanceof", "String", "string", "return", ";", "getResolvedValueIfPossible", "(", "environment", ",", "string", ")"], "metrics": {"cyclomatic_complexity": 5, "n_ast_nodes": 157, "ast_depth": 12, "n_identifiers": 14, "vocab_size": 42, "n_whitespaces": 97, "n_words": 51, "nloc": 19, "token_counts": 108}}
{"dataset_split": "train", "id": "spring-boot@6c84674:module/spring-boot-web-server-test/src/main/java/org/springframework/boot/web/server/test/SpringBootTestRandomPortEnvironmentPostProcessor.java#108-111", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-web-server-test/src/main/java/org/springframework/boot/web/server/test/SpringBootTestRandomPortEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "getResolvedValueIfPossible", "qualified_name": "org.springframework.boot.web.server.test.SpringBootTestRandomPortEnvironmentPostProcessor#getResolvedValueIfPossible", "start_line": 108, "end_line": 111, "signature": "getResolvedValueIfPossible(ConfigurableEnvironment environment, String value)", "original_code": "private @Nullable Integer getResolvedValueIfPossible(ConfigurableEnvironment environment, String value) {\n\t\tString resolvedValue = environment.resolveRequiredPlaceholders(value);\n\t\treturn environment.getConversionService().convert(resolvedValue, Integer.class);\n\t}", "doc_comment": ""}, "code_tokens": ["Integer", "getResolvedValueIfPossible", "private", "(", ",", ")", "{", "}", "@", "Nullable", "ConfigurableEnvironment", "environment", "String", "value", "String", ";", "return", ";", "resolvedValue", "=", ".", "convert", "environment", ".", "resolveRequiredPlaceholders", "environment", ".", "getConversionService", "(", "resolvedValue", ",", ")", "(", "value", ")", "(", ")", "Integer", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 58, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 23, "n_whitespaces": 20, "n_words": 20, "nloc": 4, "token_counts": 40}}
{"dataset_split": "train", "id": "spring-boot@6c84674:smoke-test/spring-boot-smoke-test-profile/src/main/java/smoketest/profile/ActiveProfilesEnvironmentPostProcessor.java#33-38", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "smoke-test/spring-boot-smoke-test-profile/src/main/java/smoketest/profile/ActiveProfilesEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "postProcessEnvironment", "qualified_name": "smoketest.profile.ActiveProfilesEnvironmentPostProcessor#postProcessEnvironment", "start_line": 33, "end_line": 38, "signature": "postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application)", "original_code": "@Override\n\tpublic void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {\n\t\tif (environment.getProperty(\"enableEnvironmentPostProcessor\") != null) {\n\t\t\tenvironment.addActiveProfile(\"dev\");\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "postProcessEnvironment", "public", "(", ",", ")", "{", "}", "@", "Override", "ConfigurableEnvironment", "environment", "SpringApplication", "application", "if", "(", ")", "{", "}", "!=", "null", ";", "environment", ".", "getProperty", "environment", ".", "addActiveProfile", "(", ")", "(", ")", "\"", "enableEnvironmentPostProcessor", "\"", "\"", "dev", "\""], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 57, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 24, "n_whitespaces": 24, "n_words": 16, "nloc": 6, "token_counts": 38}}
{"dataset_split": "train", "id": "spring-boot@6c84674:smoke-test/spring-boot-smoke-test-profile/src/test/java/smoketest/profile/ActiveProfilesTests.java#43-46", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6c84674c3313eb607e77c7e25379d65b0a149be7", "license": "apache-2.0"}, "file": {"path": "smoke-test/spring-boot-smoke-test-profile/src/test/java/smoketest/profile/ActiveProfilesTests.java", "language": "Java"}, "method": {"name": "activeProfileShouldTakePrecedenceOverProgrammaticallySetProfile", "qualified_name": "test.java.smoketest.profile.ActiveProfilesTests#activeProfileShouldTakePrecedenceOverProgrammaticallySetProfile", "start_line": 43, "end_line": 46, "signature": "activeProfileShouldTakePrecedenceOverProgrammaticallySetProfile()", "original_code": "@Test\n\tvoid activeProfileShouldTakePrecedenceOverProgrammaticallySetProfile() {\n\t\tassertThat(this.environment.getActiveProfiles()).containsExactly(\"dev\", \"hello\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "activeProfileShouldTakePrecedenceOverProgrammaticallySetProfile", "(", ")", "{", "}", "@", "Test", ";", ".", "containsExactly", "assertThat", "(", ",", ")", "(", ")", "\"", "dev", "\"", "\"", "hello", "\"", ".", "getActiveProfiles", "this", ".", "environment", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 46, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 19, "n_whitespaces": 10, "n_words": 10, "nloc": 4, "token_counts": 30}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot-test/src/main/java/org/springframework/boot/test/context/ConfigDataApplicationContextInitializer.java#41-49", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/context/ConfigDataApplicationContextInitializer.java", "language": "Java"}, "method": {"name": "initialize", "qualified_name": "org.springframework.boot.test.context.ConfigDataApplicationContextInitializer#initialize", "start_line": 41, "end_line": 49, "signature": "initialize(ConfigurableApplicationContext applicationContext)", "original_code": "@Override\n\tpublic void initialize(ConfigurableApplicationContext applicationContext) {\n\t\tConfigurableEnvironment environment = applicationContext.getEnvironment();\n\t\tRandomValuePropertySource.addToEnvironment(environment);\n\t\tDefaultBootstrapContext bootstrapContext = new DefaultBootstrapContext();\n\t\tConfigDataEnvironmentPostProcessor.applyTo(environment, applicationContext, bootstrapContext);\n\t\tbootstrapContext.close(applicationContext);\n\t\tDefaultPropertiesPropertySource.moveToEnd(environment);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "initialize", "public", "(", ")", "{", "}", "@", "Override", "ConfigurableApplicationContext", "applicationContext", "ConfigurableEnvironment", ";", ";", "DefaultBootstrapContext", ";", ";", ";", ";", "environment", "=", "RandomValuePropertySource", ".", "addToEnvironment", "bootstrapContext", "=", "ConfigDataEnvironmentPostProcessor", ".", "applyTo", "bootstrapContext", ".", "close", "DefaultPropertiesPropertySource", ".", "moveToEnd", "applicationContext", ".", "getEnvironment", "(", "environment", ")", "new", "DefaultBootstrapContext", "(", "environment", ",", "applicationContext", ",", "bootstrapContext", ")", "(", "applicationContext", ")", "(", "environment", ")", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 87, "ast_depth": 8, "n_identifiers": 13, "vocab_size": 28, "n_whitespaces": 35, "n_words": 28, "nloc": 9, "token_counts": 60}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#285-289", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "deduceMainApplicationClass", "qualified_name": "org.springframework.boot.SpringApplication#deduceMainApplicationClass", "start_line": 285, "end_line": 289, "signature": "deduceMainApplicationClass()", "original_code": "private @Nullable Class<?> deduceMainApplicationClass() {\n\t\treturn StackWalker.getInstance(StackWalker.Option.RETAIN_CLASS_REFERENCE)\n\t\t\t.walk(this::findMainClass)\n\t\t\t.orElse(null);\n\t}", "doc_comment": ""}, "code_tokens": ["deduceMainApplicationClass", "private", "Class", "(", ")", "{", "}", "@", "Nullable", "<", ">", "return", ";", "?", ".", "orElse", ".", "walk", "(", "null", ")", "StackWalker", ".", "getInstance", "(", ")", "(", ")", "this", "::", "findMainClass", ".", "RETAIN_CLASS_REFERENCE", "StackWalker", ".", "Option"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 55, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 25, "n_whitespaces": 18, "n_words": 15, "nloc": 5, "token_counts": 36}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#291-295", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "findMainClass", "qualified_name": "org.springframework.boot.SpringApplication#findMainClass", "start_line": 291, "end_line": 295, "signature": "findMainClass(Stream<StackFrame> stack)", "original_code": "private Optional<Class<?>> findMainClass(Stream<StackFrame> stack) {\n\t\treturn stack.filter((frame) -> Objects.equals(frame.getMethodName(), \"main\"))\n\t\t\t.findFirst()\n\t\t\t.map(StackWalker.StackFrame::getDeclaringClass);\n\t}", "doc_comment": ""}, "code_tokens": ["findMainClass", "private", "Optional", "(", ")", "{", "}", "<", ">", "stack", "return", ";", "Class", "Stream", ".", "map", "<", ">", "<", "StackFrame", ">", ".", "findFirst", "(", ")", "?", "stack", ".", "filter", "(", ")", "::", "getDeclaringClass", "(", ")", "StackWalker", ".", "StackFrame", "->", "(", "frame", ")", "Objects", ".", "equals", "(", ",", ")", "frame", ".", "getMethodName", "\"", "main", "\"", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 85, "ast_depth": 14, "n_identifiers": 12, "vocab_size": 31, "n_whitespaces": 21, "n_words": 21, "nloc": 5, "token_counts": 56}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#303-341", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "run", "qualified_name": "org.springframework.boot.SpringApplication#run", "start_line": 303, "end_line": 341, "signature": "run(String... args)", "original_code": "public ConfigurableApplicationContext run(String... args) {\n\t\tStartup startup = Startup.create();\n\t\tif (this.properties.isRegisterShutdownHook()) {\n\t\t\tSpringApplication.shutdownHook.enableShutdownHookAddition();\n\t\t}\n\t\tDefaultBootstrapContext bootstrapContext = createBootstrapContext();\n\t\tConfigurableApplicationContext context = null;\n\t\tconfigureHeadlessProperty();\n\t\tSpringApplicationRunListeners listeners = getRunListeners(args);\n\t\tlisteners.starting(bootstrapContext, this.mainApplicationClass);\n\t\ttry {\n\t\t\tApplicationArguments applicationArguments = new DefaultApplicationArguments(args);\n\t\t\tConfigurableEnvironment environment = prepareEnvironment(listeners, bootstrapContext, applicationArguments);\n\t\t\tBanner printedBanner = printBanner(environment);\n\t\t\tcontext = createApplicationContext();\n\t\t\tcontext.setApplicationStartup(this.applicationStartup);\n\t\t\tprepareContext(bootstrapContext, context, environment, listeners, applicationArguments, printedBanner);\n\t\t\trefreshContext(context);\n\t\t\tafterRefresh(context, applicationArguments);\n\t\t\tDuration timeTakenToStarted = startup.started();\n\t\t\tif (this.properties.isLogStartupInfo()) {\n\t\t\t\tnew StartupInfoLogger(this.mainApplicationClass, environment).logStarted(getApplicationLog(), startup);\n\t\t\t}\n\t\t\tlisteners.started(context, timeTakenToStarted);\n\t\t\tcallRunners(context, applicationArguments);\n\t\t}\n\t\tcatch (Throwable ex) {\n\t\t\tthrow handleRunFailure(context, ex, listeners);\n\t\t}\n\t\ttry {\n\t\t\tif (context.isRunning()) {\n\t\t\t\tlisteners.ready(context, startup.ready());\n\t\t\t}\n\t\t}\n\t\tcatch (Throwable ex) {\n\t\t\tthrow handleRunFailure(context, ex, null);\n\t\t}\n\t\treturn context;\n\t}", "doc_comment": "/**\n\t * Run the Spring application, creating and refreshing a new\n\t * {@link ApplicationContext}.\n\t * @param args the application arguments (usually passed from a Java main method)\n\t * @return a running {@link ApplicationContext}\n\t */"}, "code_tokens": ["ConfigurableApplicationContext", "run", "public", "(", ")", "{", "}", "String", "...", "Startup", ";", "if", "DefaultBootstrapContext", ";", "ConfigurableApplicationContext", ";", ";", "SpringApplicationRunListeners", ";", ";", "try", "try", "return", "context", ";", "args", "startup", "=", "(", ")", "{", "}", "bootstrapContext", "=", "context", "=", "null", "configureHeadlessProperty", "listeners", "=", "listeners", ".", "starting", "{", "}", "catch", "(", ")", "{", "}", "catch", "(", ")", "Startup", ".", "create", ".", "isRegisterShutdownHook", ";", "createBootstrapContext", "(", ")", "getRunListeners", "(", "bootstrapContext", ",", ")", "ApplicationArguments", ";", "ConfigurableEnvironment", ";", "Banner", ";", ";", ";", ";", ";", ";", "Duration", ";", "if", ";", ";", "ex", "{", "}", "if", "ex", "{", "}", "(", ")", "this", ".", "properties", "(", ")", ".", "enableShutdownHookAddition", "(", ")", "(", "args", ")", "this", ".", "mainApplicationClass", "applicationArguments", "=", "environment", "=", "printedBanner", "=", "context", "=", "context", ".", "setApplicationStartup", "prepareContext", "refreshContext", "afterRefresh", "timeTakenToStarted", "=", "(", ")", "{", "}", "listeners", ".", "started", "callRunners", "Throwable", "throw", ";", "(", ")", "{", "}", "Throwable", "throw", ";", "SpringApplication", ".", "shutdownHook", "(", ")", "new", "DefaultApplicationArguments", "prepareEnvironment", "printBanner", "createApplicationContext", "(", ")", "(", "bootstrapContext", ",", "context", ",", "environment", ",", "listeners", ",", "applicationArguments", ",", "printedBanner", ")", "(", "context", ")", "(", "context", ",", "applicationArguments", ")", "startup", ".", "started", ".", "isLogStartupInfo", ";", "(", "context", ",", "timeTakenToStarted", ")", "(", "context", ",", "applicationArguments", ")", "handleRunFailure", "context", ".", "isRunning", ";", "handleRunFailure", "(", "args", ")", "(", "listeners", ",", "bootstrapContext", ",", "applicationArguments", ")", "(", "environment", ")", "(", ")", "this", ".", "applicationStartup", "(", ")", "this", ".", "properties", "(", ")", ".", "logStarted", "(", "context", ",", "ex", ",", "listeners", ")", "(", ")", "listeners", ".", "ready", "(", "context", ",", "ex", ",", "null", ")", "new", "StartupInfoLogger", "(", ",", "startup", ")", "(", "context", ",", ")", "(", ",", "environment", ")", "getApplicationLog", "startup", ".", "ready", "this", ".", "mainApplicationClass", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 6, "n_ast_nodes": 387, "ast_depth": 13, "n_identifiers": 39, "vocab_size": 68, "n_whitespaces": 202, "n_words": 116, "nloc": 39, "token_counts": 267}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#343-347", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "createBootstrapContext", "qualified_name": "org.springframework.boot.SpringApplication#createBootstrapContext", "start_line": 343, "end_line": 347, "signature": "createBootstrapContext()", "original_code": "private DefaultBootstrapContext createBootstrapContext() {\n\t\tDefaultBootstrapContext bootstrapContext = new DefaultBootstrapContext();\n\t\tthis.bootstrapRegistryInitializers.forEach((initializer) -> initializer.initialize(bootstrapContext));\n\t\treturn bootstrapContext;\n\t}", "doc_comment": ""}, "code_tokens": ["DefaultBootstrapContext", "createBootstrapContext", "private", "(", ")", "{", "}", "DefaultBootstrapContext", ";", ";", "return", "bootstrapContext", ";", "bootstrapContext", "=", ".", "forEach", "new", "DefaultBootstrapContext", "this", ".", "bootstrapRegistryInitializers", "(", ")", "(", ")", "->", "(", "initializer", ")", "initializer", ".", "initialize", "(", "bootstrapContext", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 54, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 19, "n_whitespaces": 21, "n_words": 16, "nloc": 5, "token_counts": 36}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#349-367", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "prepareEnvironment", "qualified_name": "org.springframework.boot.SpringApplication#prepareEnvironment", "start_line": 349, "end_line": 367, "signature": "prepareEnvironment(SpringApplicationRunListeners listeners,\n\t\t\tDefaultBootstrapContext bootstrapContext, ApplicationArguments applicationArguments)", "original_code": "private ConfigurableEnvironment prepareEnvironment(SpringApplicationRunListeners listeners,\n\t\t\tDefaultBootstrapContext bootstrapContext, ApplicationArguments applicationArguments) {\n\t\t// Create and configure the environment\n\t\tConfigurableEnvironment environment = getOrCreateEnvironment();\n\t\tconfigureEnvironment(environment, applicationArguments.getSourceArgs());\n\t\tConfigurationPropertySources.attach(environment);\n\t\tlisteners.environmentPrepared(bootstrapContext, environment);\n\t\tApplicationInfoPropertySource.moveToEnd(environment);\n\t\tDefaultPropertiesPropertySource.moveToEnd(environment);\n\t\tAssert.state(!environment.containsProperty(\"spring.main.environment-prefix\"),\n\t\t\t\t\"Environment prefix cannot be set via properties.\");\n\t\tbindToSpringApplication(environment);\n\t\tif (!this.isCustomEnvironment) {\n\t\t\tEnvironmentConverter environmentConverter = new EnvironmentConverter(getClassLoader());\n\t\t\tenvironment = environmentConverter.convertEnvironmentIfNecessary(environment, deduceEnvironmentClass());\n\t\t}\n\t\tConfigurationPropertySources.attach(environment);\n\t\treturn environment;\n\t}", "doc_comment": ""}, "code_tokens": ["ConfigurableEnvironment", "prepareEnvironment", "private", "(", ",", ",", ")", "{", "// Create and configure the environment", "}", "SpringApplicationRunListeners", "listeners", "DefaultBootstrapContext", "bootstrapContext", "ApplicationArguments", "applicationArguments", "ConfigurableEnvironment", ";", ";", ";", ";", ";", ";", ";", ";", "if", ";", "return", "environment", ";", "environment", "=", "configureEnvironment", "ConfigurationPropertySources", ".", "attach", "listeners", ".", "environmentPrepared", "ApplicationInfoPropertySource", ".", "moveToEnd", "DefaultPropertiesPropertySource", ".", "moveToEnd", "Assert", ".", "state", "bindToSpringApplication", "(", ")", "{", "}", "ConfigurationPropertySources", ".", "attach", "getOrCreateEnvironment", "(", "environment", ",", ")", "(", "environment", ")", "(", "bootstrapContext", ",", "environment", ")", "(", "environment", ")", "(", "environment", ")", "(", ",", ")", "(", "environment", ")", "!", "EnvironmentConverter", ";", ";", "(", "environment", ")", "(", ")", "applicationArguments", ".", "getSourceArgs", "!", "\"", "Environment prefix cannot be set via properties.", "\"", "this", ".", "isCustomEnvironment", "environmentConverter", "=", "environment", "=", "(", ")", "environment", ".", "containsProperty", "new", "EnvironmentConverter", "environmentConverter", ".", "convertEnvironmentIfNecessary", "(", ")", "(", ")", "(", "environment", ",", ")", "\"", "spring.main.environment-prefix", "\"", "getClassLoader", "deduceEnvironmentClass", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 192, "ast_depth": 12, "n_identifiers": 23, "vocab_size": 46, "n_whitespaces": 91, "n_words": 69, "nloc": 19, "token_counts": 131}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#369-377", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "deduceEnvironmentClass", "qualified_name": "org.springframework.boot.SpringApplication#deduceEnvironmentClass", "start_line": 369, "end_line": 377, "signature": "deduceEnvironmentClass()", "original_code": "private Class<? extends ConfigurableEnvironment> deduceEnvironmentClass() {\n\t\tWebApplicationType webApplicationType = this.properties.getWebApplicationType();\n\t\tClass<? extends ConfigurableEnvironment> environmentType = this.applicationContextFactory\n\t\t\t.getEnvironmentType(webApplicationType);\n\t\tif (environmentType == null && this.applicationContextFactory != ApplicationContextFactory.DEFAULT) {\n\t\t\tenvironmentType = ApplicationContextFactory.DEFAULT.getEnvironmentType(webApplicationType);\n\t\t}\n\t\treturn (environmentType != null) ? environmentType : ApplicationEnvironment.class;\n\t}", "doc_comment": ""}, "code_tokens": ["deduceEnvironmentClass", "private", "Class", "(", ")", "{", "}", "<", ">", "WebApplicationType", ";", ";", "if", "return", ";", "?", "extends", "ConfigurableEnvironment", "webApplicationType", "=", "Class", "environmentType", "=", "(", ")", "{", "}", "?", "environmentType", ":", ".", "getWebApplicationType", "<", ">", ".", "getEnvironmentType", "&&", ";", "(", ")", "ApplicationEnvironment", ".", "class", "this", ".", "properties", "(", ")", "?", "extends", "ConfigurableEnvironment", "this", ".", "applicationContextFactory", "(", "webApplicationType", ")", "environmentType", "==", "null", "!=", "environmentType", "=", "environmentType", "!=", "null", "this", ".", "applicationContextFactory", "ApplicationContextFactory", ".", "DEFAULT", ".", "getEnvironmentType", "ApplicationContextFactory", ".", "DEFAULT", "(", "webApplicationType", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 119, "ast_depth": 10, "n_identifiers": 9, "vocab_size": 34, "n_whitespaces": 55, "n_words": 36, "nloc": 9, "token_counts": 80}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#379-418", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "prepareContext", "qualified_name": "org.springframework.boot.SpringApplication#prepareContext", "start_line": 379, "end_line": 418, "signature": "prepareContext(DefaultBootstrapContext bootstrapContext, ConfigurableApplicationContext context,\n\t\t\tConfigurableEnvironment environment, SpringApplicationRunListeners listeners,\n\t\t\tApplicationArguments applicationArguments, @Nullable Banner printedBanner)", "original_code": "private void prepareContext(DefaultBootstrapContext bootstrapContext, ConfigurableApplicationContext context,\n\t\t\tConfigurableEnvironment environment, SpringApplicationRunListeners listeners,\n\t\t\tApplicationArguments applicationArguments, @Nullable Banner printedBanner) {\n\t\tcontext.setEnvironment(environment);\n\t\tpostProcessApplicationContext(context);\n\t\taddAotGeneratedInitializerIfNecessary(this.initializers);\n\t\tapplyInitializers(context);\n\t\tlisteners.contextPrepared(context);\n\t\tbootstrapContext.close(context);\n\t\tif (this.properties.isLogStartupInfo()) {\n\t\t\tlogStartupInfo(context);\n\t\t\tlogStartupProfileInfo(context);\n\t\t}\n\t\t// Add boot specific singleton beans\n\t\tConfigurableListableBeanFactory beanFactory = context.getBeanFactory();\n\t\tbeanFactory.registerSingleton(\"springApplicationArguments\", applicationArguments);\n\t\tif (printedBanner != null) {\n\t\t\tbeanFactory.registerSingleton(\"springBootBanner\", printedBanner);\n\t\t}\n\t\tif (beanFactory instanceof AbstractAutowireCapableBeanFactory autowireCapableBeanFactory) {\n\t\t\tautowireCapableBeanFactory.setAllowCircularReferences(this.properties.isAllowCircularReferences());\n\t\t\tif (beanFactory instanceof DefaultListableBeanFactory listableBeanFactory) {\n\t\t\t\tlistableBeanFactory.setAllowBeanDefinitionOverriding(this.properties.isAllowBeanDefinitionOverriding());\n\t\t\t}\n\t\t}\n\t\tif (this.properties.isLazyInitialization()) {\n\t\t\tcontext.addBeanFactoryPostProcessor(new LazyInitializationBeanFactoryPostProcessor());\n\t\t}\n\t\tif (this.properties.isKeepAlive()) {\n\t\t\tcontext.addApplicationListener(new KeepAlive());\n\t\t}\n\t\tcontext.addBeanFactoryPostProcessor(new PropertySourceOrderingBeanFactoryPostProcessor(context));\n\t\tif (!AotDetector.useGeneratedArtifacts()) {\n\t\t\t// Load the sources\n\t\t\tSet<Object> sources = getAllSources();\n\t\t\tAssert.state(!ObjectUtils.isEmpty(sources), \"No sources defined\");\n\t\t\tload(context, sources.toArray(new Object[0]));\n\t\t}\n\t\tlisteners.contextLoaded(context);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "prepareContext", "private", "(", ",", ",", ",", ",", ",", ")", "{", "// Add boot specific singleton beans", "}", "DefaultBootstrapContext", "bootstrapContext", "ConfigurableApplicationContext", "context", "ConfigurableEnvironment", "environment", "SpringApplicationRunListeners", "listeners", "ApplicationArguments", "applicationArguments", "Banner", "printedBanner", ";", ";", ";", ";", ";", ";", "if", "ConfigurableListableBeanFactory", ";", ";", "if", "if", "if", "if", ";", "if", ";", "context", ".", "setEnvironment", "postProcessApplicationContext", "addAotGeneratedInitializerIfNecessary", "applyInitializers", "listeners", ".", "contextPrepared", "bootstrapContext", ".", "close", "(", ")", "{", "}", "beanFactory", "=", "beanFactory", ".", "registerSingleton", "(", ")", "{", "}", "(", ")", "{", "}", "(", ")", "{", "}", "(", ")", "{", "}", "context", ".", "addBeanFactoryPostProcessor", "(", ")", "{", "// Load the sources", "}", "listeners", ".", "contextLoaded", "@", "Nullable", "(", "environment", ")", "(", "context", ")", "(", ")", "(", "context", ")", "(", "context", ")", "(", "context", ")", ".", "isLogStartupInfo", ";", ";", "context", ".", "getBeanFactory", "(", ",", "applicationArguments", ")", "printedBanner", "!=", "null", ";", "beanFactory", "instanceof", "AbstractAutowireCapableBeanFactory", "autowireCapableBeanFactory", ";", "if", ".", "isLazyInitialization", ";", ".", "isKeepAlive", ";", "(", ")", "!", ";", ";", ";", "(", "context", ")", "this", ".", "initializers", "this", ".", "properties", "(", ")", "logStartupInfo", "logStartupProfileInfo", "(", ")", "\"", "springApplicationArguments", "\"", "beanFactory", ".", "registerSingleton", "autowireCapableBeanFactory", ".", "setAllowCircularReferences", "(", ")", "{", "}", "this", ".", "properties", "(", ")", "context", ".", "addBeanFactoryPostProcessor", "this", ".", "properties", "(", ")", "context", ".", "addApplicationListener", "new", "PropertySourceOrderingBeanFactoryPostProcessor", "AotDetector", ".", "useGeneratedArtifacts", "Set", "sources", "=", "Assert", ".", "state", "load", "(", "context", ")", "(", "context", ")", "(", ",", "printedBanner", ")", "(", ")", "beanFactory", "instanceof", "DefaultListableBeanFactory", "listableBeanFactory", ";", "(", ")", "(", ")", "(", "context", ")", "(", ")", "<", "Object", ">", "getAllSources", "(", ",", ")", "(", "context", ",", ")", "\"", "springBootBanner", "\"", ".", "isAllowCircularReferences", "listableBeanFactory", ".", "setAllowBeanDefinitionOverriding", "new", "LazyInitializationBeanFactoryPostProcessor", "new", "KeepAlive", "(", ")", "!", "\"", "No sources defined", "\"", "sources", ".", "toArray", "this", ".", "properties", "(", ")", "(", ")", "(", ")", "(", ")", "ObjectUtils", ".", "isEmpty", "(", ")", ".", "isAllowBeanDefinitionOverriding", "(", "sources", ")", "new", "Object", "this", ".", "properties", "(", ")", "[", "0", "]"], "metrics": {"cyclomatic_complexity": 8, "n_ast_nodes": 423, "ast_depth": 13, "n_identifiers": 43, "vocab_size": 86, "n_whitespaces": 191, "n_words": 129, "nloc": 40, "token_counts": 287}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#420-435", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "addAotGeneratedInitializerIfNecessary", "qualified_name": "org.springframework.boot.SpringApplication#addAotGeneratedInitializerIfNecessary", "start_line": 420, "end_line": 435, "signature": "addAotGeneratedInitializerIfNecessary(List<ApplicationContextInitializer<?>> initializers)", "original_code": "private void addAotGeneratedInitializerIfNecessary(List<ApplicationContextInitializer<?>> initializers) {\n\t\tif (AotDetector.useGeneratedArtifacts()) {\n\t\t\tList<ApplicationContextInitializer<?>> aotInitializers = new ArrayList<>(\n\t\t\t\t\tinitializers.stream().filter(AotApplicationContextInitializer.class::isInstance).toList());\n\t\t\tif (aotInitializers.isEmpty()) {\n\t\t\t\tAssert.state(this.mainApplicationClass != null, \"No application main class found\");\n\t\t\t\tString initializerClassName = this.mainApplicationClass.getName() + \"__ApplicationContextInitializer\";\n\t\t\t\tif (!ClassUtils.isPresent(initializerClassName, getClassLoader())) {\n\t\t\t\t\tthrow new AotInitializerNotFoundException(this.mainApplicationClass, initializerClassName);\n\t\t\t\t}\n\t\t\t\taotInitializers.add(AotApplicationContextInitializer.forInitializerClasses(initializerClassName));\n\t\t\t}\n\t\t\tinitializers.removeAll(aotInitializers);\n\t\t\tinitializers.addAll(0, aotInitializers);\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "addAotGeneratedInitializerIfNecessary", "private", "(", ")", "{", "}", "initializers", "if", "List", "(", ")", "{", "}", "<", ">", "AotDetector", ".", "useGeneratedArtifacts", ";", "if", ";", ";", "ApplicationContextInitializer", "(", ")", "List", "aotInitializers", "=", "(", ")", "{", "}", "initializers", ".", "removeAll", "initializers", ".", "addAll", "<", ">", "<", ">", "new", "aotInitializers", ".", "isEmpty", ";", "String", ";", "if", ";", "(", "aotInitializers", ")", "(", "0", ",", "aotInitializers", ")", "?", "ApplicationContextInitializer", "ArrayList", "(", ")", "(", ")", "Assert", ".", "state", "initializerClassName", "=", "(", ")", "{", "}", "aotInitializers", ".", "add", "<", ">", "<", ">", ".", "toList", "(", ",", ")", "+", "!", "throw", ";", "(", ")", "?", ".", "filter", "(", ")", "!=", "null", "\"", "No application main class found", "\"", ".", "getName", "\"", "__ApplicationContextInitializer", "\"", "ClassUtils", ".", "isPresent", "new", "AotInitializerNotFoundException", "AotApplicationContextInitializer", ".", "forInitializerClasses", "initializers", ".", "stream", "(", ")", "this", ".", "mainApplicationClass", "this", ".", "mainApplicationClass", "(", ")", "(", "initializerClassName", ",", ")", "(", ",", "initializerClassName", ")", "(", "initializerClassName", ")", "(", ")", "::", "isInstance", "getClassLoader", "this", ".", "mainApplicationClass", "AotApplicationContextInitializer", ".", "class", "(", ")"], "metrics": {"cyclomatic_complexity": 4, "n_ast_nodes": 230, "ast_depth": 15, "n_identifiers": 23, "vocab_size": 55, "n_whitespaces": 96, "n_words": 63, "nloc": 16, "token_counts": 154}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#437-442", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "refreshContext", "qualified_name": "org.springframework.boot.SpringApplication#refreshContext", "start_line": 437, "end_line": 442, "signature": "refreshContext(ConfigurableApplicationContext context)", "original_code": "private void refreshContext(ConfigurableApplicationContext context) {\n\t\tif (this.properties.isRegisterShutdownHook()) {\n\t\t\tshutdownHook.registerApplicationContext(context);\n\t\t}\n\t\trefresh(context);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "refreshContext", "private", "(", ")", "{", "}", "ConfigurableApplicationContext", "context", "if", ";", "(", ")", "{", "}", "refresh", ".", "isRegisterShutdownHook", ";", "(", "context", ")", "this", ".", "properties", "(", ")", "shutdownHook", ".", "registerApplicationContext", "(", "context", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 51, "ast_depth": 9, "n_identifiers": 7, "vocab_size": 18, "n_whitespaces": 21, "n_words": 14, "nloc": 6, "token_counts": 33}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#444-447", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "configureHeadlessProperty", "qualified_name": "org.springframework.boot.SpringApplication#configureHeadlessProperty", "start_line": 444, "end_line": 447, "signature": "configureHeadlessProperty()", "original_code": "private void configureHeadlessProperty() {\n\t\tSystem.setProperty(SYSTEM_PROPERTY_JAVA_AWT_HEADLESS,\n\t\t\t\tSystem.getProperty(SYSTEM_PROPERTY_JAVA_AWT_HEADLESS, Boolean.toString(this.headless)));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "configureHeadlessProperty", "private", "(", ")", "{", "}", ";", "System", ".", "setProperty", "(", "SYSTEM_PROPERTY_JAVA_AWT_HEADLESS", ",", ")", "System", ".", "getProperty", "(", "SYSTEM_PROPERTY_JAVA_AWT_HEADLESS", ",", ")", "Boolean", ".", "toString", "(", ")", "this", ".", "headless"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 43, "ast_depth": 12, "n_identifiers": 8, "vocab_size": 18, "n_whitespaces": 14, "n_words": 13, "nloc": 4, "token_counts": 30}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#449-461", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "getRunListeners", "qualified_name": "org.springframework.boot.SpringApplication#getRunListeners", "start_line": 449, "end_line": 461, "signature": "getRunListeners(String[] args)", "original_code": "private SpringApplicationRunListeners getRunListeners(String[] args) {\n\t\tArgumentResolver argumentResolver = ArgumentResolver.of(SpringApplication.class, this);\n\t\targumentResolver = argumentResolver.and(String[].class, args);\n\t\tList<SpringApplicationRunListener> listeners = getSpringFactoriesInstances(SpringApplicationRunListener.class,\n\t\t\t\targumentResolver);\n\t\tSpringApplicationHook hook = applicationHook.get();\n\t\tSpringApplicationRunListener hookListener = (hook != null) ? hook.getRunListener(this) : null;\n\t\tif (hookListener != null) {\n\t\t\tlisteners = new ArrayList<>(listeners);\n\t\t\tlisteners.add(hookListener);\n\t\t}\n\t\treturn new SpringApplicationRunListeners(logger, listeners, this.applicationStartup);\n\t}", "doc_comment": ""}, "code_tokens": ["SpringApplicationRunListeners", "getRunListeners", "private", "(", ")", "{", "}", "args", "ArgumentResolver", ";", ";", ";", "SpringApplicationHook", ";", "SpringApplicationRunListener", ";", "if", "return", ";", "String", "argumentResolver", "=", "argumentResolver", "=", "List", "listeners", "=", "hook", "=", "hookListener", "=", "(", ")", "{", "}", "new", "SpringApplicationRunListeners", "[", "]", "ArgumentResolver", ".", "of", "argumentResolver", ".", "and", "<", "SpringApplicationRunListener", ">", "getSpringFactoriesInstances", "applicationHook", ".", "get", "?", ":", "null", "hookListener", "!=", "null", ";", ";", "(", "logger", ",", "listeners", ",", ")", "(", ",", "this", ")", "(", ",", "args", ")", "(", ",", "argumentResolver", ")", "(", ")", "(", ")", "hook", ".", "getRunListener", "listeners", "=", "listeners", ".", "add", "this", ".", "applicationStartup", "SpringApplication", ".", "class", ".", "class", "SpringApplicationRunListener", ".", "class", "hook", "!=", "null", "(", "this", ")", "new", "(", "hookListener", ")", "String", "ArrayList", "(", "listeners", ")", "[", "]", "<", ">"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 175, "ast_depth": 11, "n_identifiers": 16, "vocab_size": 45, "n_whitespaces": 76, "n_words": 54, "nloc": 13, "token_counts": 120}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#463-465", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "getSpringFactoriesInstances", "qualified_name": "org.springframework.boot.SpringApplication#getSpringFactoriesInstances", "start_line": 463, "end_line": 465, "signature": "getSpringFactoriesInstances(Class<T> type)", "original_code": "private <T> List<T> getSpringFactoriesInstances(Class<T> type) {\n\t\treturn getSpringFactoriesInstances(type, null);\n\t}", "doc_comment": ""}, "code_tokens": ["getSpringFactoriesInstances", "private", "<", ">", "List", "(", ")", "{", "}", "T", "<", "T", ">", "type", "return", ";", "Class", "getSpringFactoriesInstances", "<", "T", ">", "(", "type", ",", "null", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 41, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 16, "n_whitespaces": 12, "n_words": 12, "nloc": 3, "token_counts": 26}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#467-469", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "getSpringFactoriesInstances", "qualified_name": "org.springframework.boot.SpringApplication#getSpringFactoriesInstances", "start_line": 467, "end_line": 469, "signature": "getSpringFactoriesInstances(Class<T> type, @Nullable ArgumentResolver argumentResolver)", "original_code": "private <T> List<T> getSpringFactoriesInstances(Class<T> type, @Nullable ArgumentResolver argumentResolver) {\n\t\treturn SpringFactoriesLoader.forDefaultResourceLocation(getClassLoader()).load(type, argumentResolver);\n\t}", "doc_comment": ""}, "code_tokens": ["getSpringFactoriesInstances", "private", "<", ">", "List", "(", ",", ")", "{", "}", "T", "<", "T", ">", "type", "ArgumentResolver", "argumentResolver", "return", ";", "Class", ".", "load", "<", "T", ">", "@", "Nullable", "SpringFactoriesLoader", ".", "forDefaultResourceLocation", "(", "type", ",", "argumentResolver", ")", "(", ")", "getClassLoader", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 62, "ast_depth": 10, "n_identifiers": 8, "vocab_size": 24, "n_whitespaces": 15, "n_words": 18, "nloc": 3, "token_counts": 40}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#471-481", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "getOrCreateEnvironment", "qualified_name": "org.springframework.boot.SpringApplication#getOrCreateEnvironment", "start_line": 471, "end_line": 481, "signature": "getOrCreateEnvironment()", "original_code": "private ConfigurableEnvironment getOrCreateEnvironment() {\n\t\tif (this.environment != null) {\n\t\t\treturn this.environment;\n\t\t}\n\t\tWebApplicationType webApplicationType = this.properties.getWebApplicationType();\n\t\tConfigurableEnvironment environment = this.applicationContextFactory.createEnvironment(webApplicationType);\n\t\tif (environment == null && this.applicationContextFactory != ApplicationContextFactory.DEFAULT) {\n\t\t\tenvironment = ApplicationContextFactory.DEFAULT.createEnvironment(webApplicationType);\n\t\t}\n\t\treturn (environment != null) ? environment : new ApplicationEnvironment();\n\t}", "doc_comment": ""}, "code_tokens": ["ConfigurableEnvironment", "getOrCreateEnvironment", "private", "(", ")", "{", "}", "if", "WebApplicationType", ";", "ConfigurableEnvironment", ";", "if", "return", ";", "(", ")", "{", "}", "webApplicationType", "=", "environment", "=", "(", ")", "{", "}", "?", "environment", ":", "!=", "null", "return", ";", ".", "getWebApplicationType", ".", "createEnvironment", "&&", ";", "(", ")", "new", "ApplicationEnvironment", "this", ".", "environment", "this", ".", "environment", "this", ".", "properties", "(", ")", "this", ".", "applicationContextFactory", "(", "webApplicationType", ")", "environment", "==", "null", "!=", "environment", "=", "environment", "!=", "null", "(", ")", "this", ".", "applicationContextFactory", "ApplicationContextFactory", ".", "DEFAULT", ".", "createEnvironment", "ApplicationContextFactory", ".", "DEFAULT", "(", "webApplicationType", ")"], "metrics": {"cyclomatic_complexity": 4, "n_ast_nodes": 127, "ast_depth": 10, "n_identifiers": 9, "vocab_size": 30, "n_whitespaces": 63, "n_words": 39, "nloc": 11, "token_counts": 86}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#494-500", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "configureEnvironment", "qualified_name": "org.springframework.boot.SpringApplication#configureEnvironment", "start_line": 494, "end_line": 500, "signature": "configureEnvironment(ConfigurableEnvironment environment, String[] args)", "original_code": "protected void configureEnvironment(ConfigurableEnvironment environment, String[] args) {\n\t\tif (this.addConversionService) {\n\t\t\tenvironment.setConversionService(new ApplicationConversionService());\n\t\t}\n\t\tconfigurePropertySources(environment, args);\n\t\tconfigureProfiles(environment, args);\n\t}", "doc_comment": "/**\n\t * Template method delegating to\n\t * {@link #configurePropertySources(ConfigurableEnvironment, String[])} and\n\t * {@link #configureProfiles(ConfigurableEnvironment, String[])} in that order.\n\t * Override this method for complete control over Environment customization, or one of\n\t * the above for fine-grained control over property sources or profiles, respectively.\n\t * @param environment this application's environment\n\t * @param args arguments passed to the {@code run} method\n\t * @see #configureProfiles(ConfigurableEnvironment, String[])\n\t * @see #configurePropertySources(ConfigurableEnvironment, String[])\n\t */"}, "code_tokens": ["void", "configureEnvironment", "protected", "(", ",", ")", "{", "}", "ConfigurableEnvironment", "environment", "args", "if", ";", ";", "String", "(", ")", "{", "}", "configurePropertySources", "configureProfiles", "[", "]", "this", ".", "addConversionService", ";", "(", "environment", ",", "args", ")", "(", "environment", ",", "args", ")", "environment", ".", "setConversionService", "(", ")", "new", "ApplicationConversionService", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 70, "ast_depth": 11, "n_identifiers": 7, "vocab_size": 24, "n_whitespaces": 29, "n_words": 20, "nloc": 7, "token_counts": 46}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#509-529", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "configurePropertySources", "qualified_name": "org.springframework.boot.SpringApplication#configurePropertySources", "start_line": 509, "end_line": 529, "signature": "configurePropertySources(ConfigurableEnvironment environment, String[] args)", "original_code": "protected void configurePropertySources(ConfigurableEnvironment environment, String[] args) {\n\t\tMutablePropertySources sources = environment.getPropertySources();\n\t\tif (!CollectionUtils.isEmpty(this.defaultProperties)) {\n\t\t\tDefaultPropertiesPropertySource.addOrMerge(this.defaultProperties, sources);\n\t\t}\n\t\tif (this.addCommandLineProperties && args.length > 0) {\n\t\t\tString name = CommandLinePropertySource.COMMAND_LINE_PROPERTY_SOURCE_NAME;\n\t\t\tPropertySource<?> source = sources.get(name);\n\t\t\tif (source != null) {\n\t\t\t\tCompositePropertySource composite = new CompositePropertySource(name);\n\t\t\t\tcomposite\n\t\t\t\t\t.addPropertySource(new SimpleCommandLinePropertySource(\"springApplicationCommandLineArgs\", args));\n\t\t\t\tcomposite.addPropertySource(source);\n\t\t\t\tsources.replace(name, composite);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsources.addFirst(new SimpleCommandLinePropertySource(args));\n\t\t\t}\n\t\t}\n\t\tenvironment.getPropertySources().addLast(new ApplicationInfoPropertySource(this.mainApplicationClass));\n\t}", "doc_comment": "/**\n\t * Add, remove or re-order any {@link PropertySource}s in this application's\n\t * environment.\n\t * @param environment this application's environment\n\t * @param args arguments passed to the {@code run} method\n\t * @see #configureEnvironment(ConfigurableEnvironment, String[])\n\t */"}, "code_tokens": ["void", "configurePropertySources", "protected", "(", ",", ")", "{", "}", "ConfigurableEnvironment", "environment", "args", "MutablePropertySources", ";", "if", "if", ";", "String", "sources", "=", "(", ")", "{", "}", "(", ")", "{", "}", ".", "addLast", "[", "]", "environment", ".", "getPropertySources", "!", ";", "&&", "String", ";", ";", "if", "else", "environment", ".", "getPropertySources", "(", ")", "(", ")", "CollectionUtils", ".", "isEmpty", "DefaultPropertiesPropertySource", ".", "addOrMerge", "this", ".", "addCommandLineProperties", ">", "0", "name", "=", "PropertySource", "source", "=", "(", ")", "{", "}", "{", "}", "(", ")", "new", "ApplicationInfoPropertySource", "(", ")", "(", ",", "sources", ")", "args", ".", "length", "CommandLinePropertySource", ".", "COMMAND_LINE_PROPERTY_SOURCE_NAME", "<", ">", "sources", ".", "get", "source", "!=", "null", "CompositePropertySource", ";", ";", ";", ";", ";", "(", ")", "this", ".", "defaultProperties", "this", ".", "defaultProperties", "?", "(", "name", ")", "composite", "=", "composite", ".", "addPropertySource", "composite", ".", "addPropertySource", "sources", ".", "replace", "sources", ".", "addFirst", "this", ".", "mainApplicationClass", "new", "CompositePropertySource", "(", ")", "(", "source", ")", "(", "name", ",", "composite", ")", "(", ")", "(", "name", ")", "new", "SimpleCommandLinePropertySource", "new", "SimpleCommandLinePropertySource", "(", ",", "args", ")", "(", "args", ")", "\"", "springApplicationCommandLineArgs", "\""], "metrics": {"cyclomatic_complexity": 5, "n_ast_nodes": 236, "ast_depth": 14, "n_identifiers": 23, "vocab_size": 56, "n_whitespaces": 117, "n_words": 70, "nloc": 21, "token_counts": 161}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#539-540", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "configureProfiles", "qualified_name": "org.springframework.boot.SpringApplication#configureProfiles", "start_line": 539, "end_line": 540, "signature": "configureProfiles(ConfigurableEnvironment environment, String[] args)", "original_code": "protected void configureProfiles(ConfigurableEnvironment environment, String[] args) {\n\t}", "doc_comment": "/**\n\t * Configure which profiles are active (or active by default) for this application\n\t * environment. Additional profiles may be activated during configuration file\n\t * processing through the {@code spring.profiles.active} property.\n\t * @param environment this application's environment\n\t * @param args arguments passed to the {@code run} method\n\t * @see #configureEnvironment(ConfigurableEnvironment, String[])\n\t */"}, "code_tokens": ["void", "configureProfiles", "protected", "(", ",", ")", "{", "}", "ConfigurableEnvironment", "environment", "args", "String", "[", "]"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 23, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 8, "n_words": 7, "nloc": 2, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#546-553", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "bindToSpringApplication", "qualified_name": "org.springframework.boot.SpringApplication#bindToSpringApplication", "start_line": 546, "end_line": 553, "signature": "bindToSpringApplication(ConfigurableEnvironment environment)", "original_code": "protected void bindToSpringApplication(ConfigurableEnvironment environment) {\n\t\ttry {\n\t\t\tBinder.get(environment).bind(\"spring.main\", Bindable.ofInstance(this.properties));\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tthrow new IllegalStateException(\"Cannot bind to SpringApplication\", ex);\n\t\t}\n\t}", "doc_comment": "/**\n\t * Bind the environment to the {@link ApplicationProperties}.\n\t * @param environment the environment to bind\n\t */"}, "code_tokens": ["void", "bindToSpringApplication", "protected", "(", ")", "{", "}", "ConfigurableEnvironment", "environment", "try", "{", "}", "catch", "(", ")", ";", "ex", "{", "}", ".", "bind", "Exception", "throw", ";", "Binder", ".", "get", "(", ",", ")", "new", "IllegalStateException", "(", "environment", ")", "\"", "spring.main", "\"", "Bindable", ".", "ofInstance", "(", ",", "ex", ")", "(", ")", "\"", "Cannot bind to SpringApplication", "\"", "this", ".", "properties"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 78, "ast_depth": 12, "n_identifiers": 9, "vocab_size": 29, "n_whitespaces": 37, "n_words": 27, "nloc": 8, "token_counts": 53}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#555-566", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "printBanner", "qualified_name": "org.springframework.boot.SpringApplication#printBanner", "start_line": 555, "end_line": 566, "signature": "printBanner(ConfigurableEnvironment environment)", "original_code": "private @Nullable Banner printBanner(ConfigurableEnvironment environment) {\n\t\tif (this.properties.getBannerMode(environment) == Banner.Mode.OFF) {\n\t\t\treturn null;\n\t\t}\n\t\tResourceLoader resourceLoader = (this.resourceLoader != null) ? this.resourceLoader\n\t\t\t\t: new DefaultResourceLoader(null);\n\t\tSpringApplicationBannerPrinter bannerPrinter = new SpringApplicationBannerPrinter(resourceLoader, this.banner);\n\t\tif (this.properties.getBannerMode(environment) == Mode.LOG) {\n\t\t\treturn bannerPrinter.print(environment, this.mainApplicationClass, logger);\n\t\t}\n\t\treturn bannerPrinter.print(environment, this.mainApplicationClass, System.out);\n\t}", "doc_comment": ""}, "code_tokens": ["Banner", "printBanner", "private", "(", ")", "{", "}", "@", "Nullable", "ConfigurableEnvironment", "environment", "if", "ResourceLoader", ";", "SpringApplicationBannerPrinter", ";", "if", "return", ";", "(", ")", "{", "}", "resourceLoader", "=", "bannerPrinter", "=", "(", ")", "{", "}", "bannerPrinter", ".", "print", "==", "return", "null", ";", "?", ":", "new", "SpringApplicationBannerPrinter", "==", "return", ";", "(", "environment", ",", ",", ")", ".", "getBannerMode", ".", "OFF", "(", ")", "this", ".", "resourceLoader", "new", "DefaultResourceLoader", "(", "resourceLoader", ",", ")", ".", "getBannerMode", "Mode", ".", "LOG", "bannerPrinter", ".", "print", "this", ".", "mainApplicationClass", "System", ".", "out", "this", ".", "properties", "(", "environment", ")", "Banner", ".", "Mode", "!=", "null", "(", "null", ")", "this", ".", "banner", "this", ".", "properties", "(", "environment", ")", "(", "environment", ",", ",", "logger", ")", "this", ".", "resourceLoader", "this", ".", "mainApplicationClass"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 162, "ast_depth": 10, "n_identifiers": 17, "vocab_size": 40, "n_whitespaces": 70, "n_words": 55, "nloc": 12, "token_counts": 114}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#575-580", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "createApplicationContext", "qualified_name": "org.springframework.boot.SpringApplication#createApplicationContext", "start_line": 575, "end_line": 580, "signature": "createApplicationContext()", "original_code": "protected ConfigurableApplicationContext createApplicationContext() {\n\t\tConfigurableApplicationContext context = this.applicationContextFactory\n\t\t\t.create(this.properties.getWebApplicationType());\n\t\tAssert.state(context != null, \"ApplicationContextFactory created null context\");\n\t\treturn context;\n\t}", "doc_comment": "/**\n\t * Strategy method used to create the {@link ApplicationContext}. By default this\n\t * method will respect any explicitly set application context class or factory before\n\t * falling back to a suitable default.\n\t * @return the application context (not yet refreshed)\n\t * @see #setApplicationContextFactory(ApplicationContextFactory)\n\t */"}, "code_tokens": ["ConfigurableApplicationContext", "createApplicationContext", "protected", "(", ")", "{", "}", "ConfigurableApplicationContext", ";", ";", "return", "context", ";", "context", "=", "Assert", ".", "state", ".", "create", "(", ",", ")", "this", ".", "applicationContextFactory", "(", ")", "context", "!=", "null", "\"", "ApplicationContextFactory created null context", "\"", ".", "getWebApplicationType", "this", ".", "properties", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 60, "ast_depth": 10, "n_identifiers": 8, "vocab_size": 24, "n_whitespaces": 28, "n_words": 21, "nloc": 6, "token_counts": 41}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#587-603", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "postProcessApplicationContext", "qualified_name": "org.springframework.boot.SpringApplication#postProcessApplicationContext", "start_line": 587, "end_line": 603, "signature": "postProcessApplicationContext(ConfigurableApplicationContext context)", "original_code": "protected void postProcessApplicationContext(ConfigurableApplicationContext context) {\n\t\tif (this.beanNameGenerator != null) {\n\t\t\tcontext.getBeanFactory()\n\t\t\t\t.registerSingleton(AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR, this.beanNameGenerator);\n\t\t}\n\t\tif (this.resourceLoader != null) {\n\t\t\tif (context instanceof GenericApplicationContext genericApplicationContext) {\n\t\t\t\tgenericApplicationContext.setResourceLoader(this.resourceLoader);\n\t\t\t}\n\t\t\tif (context instanceof DefaultResourceLoader defaultResourceLoader) {\n\t\t\t\tdefaultResourceLoader.setClassLoader(this.resourceLoader.getClassLoader());\n\t\t\t}\n\t\t}\n\t\tif (this.addConversionService) {\n\t\t\tcontext.getBeanFactory().setConversionService(context.getEnvironment().getConversionService());\n\t\t}\n\t}", "doc_comment": "/**\n\t * Apply any relevant post-processing to the {@link ApplicationContext}. Subclasses\n\t * can apply additional processing as required.\n\t * @param context the application context\n\t */"}, "code_tokens": ["void", "postProcessApplicationContext", "protected", "(", ")", "{", "}", "ConfigurableApplicationContext", "context", "if", "if", "if", "(", ")", "{", "}", "(", ")", "{", "}", "(", ")", "{", "}", "!=", "null", ";", "!=", "null", "if", "if", "this", ".", "addConversionService", ";", "this", ".", "beanNameGenerator", ".", "registerSingleton", "this", ".", "resourceLoader", "(", ")", "{", "}", "(", ")", "{", "}", ".", "setConversionService", "context", ".", "getBeanFactory", "(", ",", ")", "context", "instanceof", "GenericApplicationContext", "genericApplicationContext", ";", "context", "instanceof", "DefaultResourceLoader", "defaultResourceLoader", ";", "context", ".", "getBeanFactory", "(", ")", "(", ")", "AnnotationConfigUtils", ".", "CONFIGURATION_BEAN_NAME_GENERATOR", "this", ".", "beanNameGenerator", "genericApplicationContext", ".", "setResourceLoader", "defaultResourceLoader", ".", "setClassLoader", "(", ")", ".", "getConversionService", "(", ")", "(", ")", "context", ".", "getEnvironment", "(", ")", "this", ".", "resourceLoader", ".", "getClassLoader", "(", ")", "this", ".", "resourceLoader", "(", ")"], "metrics": {"cyclomatic_complexity": 6, "n_ast_nodes": 167, "ast_depth": 13, "n_identifiers": 17, "vocab_size": 34, "n_whitespaces": 84, "n_words": 48, "nloc": 17, "token_counts": 113}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#611-621", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "applyInitializers", "qualified_name": "org.springframework.boot.SpringApplication#applyInitializers", "start_line": 611, "end_line": 621, "signature": "applyInitializers(ConfigurableApplicationContext context)", "original_code": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n\tprotected void applyInitializers(ConfigurableApplicationContext context) {\n\t\tfor (ApplicationContextInitializer initializer : getInitializers()) {\n\t\t\tClass<?> requiredType = GenericTypeResolver.resolveTypeArgument(initializer.getClass(),\n\t\t\t\t\tApplicationContextInitializer.class);\n\t\t\tAssert.state(requiredType != null,\n\t\t\t\t\t() -> \"No generic type found for initializr of type \" + initializer.getClass());\n\t\t\tAssert.state(requiredType.isInstance(context), \"Unable to call initializer\");\n\t\t\tinitializer.initialize(context);\n\t\t}\n\t}", "doc_comment": "/**\n\t * Apply any {@link ApplicationContextInitializer}s to the context before it is\n\t * refreshed.\n\t * @param context the configured ApplicationContext (not refreshed yet)\n\t * @see ConfigurableApplicationContext#refresh()\n\t */"}, "code_tokens": ["void", "applyInitializers", "protected", "(", ")", "{", "}", "@", "SuppressWarnings", "ConfigurableApplicationContext", "context", "for", "(", "ApplicationContextInitializer", "initializer", ":", ")", "(", ")", "getInitializers", "{", "}", "{", ",", "}", "(", ")", ";", ";", ";", ";", "\"", "rawtypes", "\"", "\"", "unchecked", "\"", "Class", "requiredType", "=", "Assert", ".", "state", "Assert", ".", "state", "initializer", ".", "initialize", "<", ">", "GenericTypeResolver", ".", "resolveTypeArgument", "(", ",", ")", "(", ",", ")", "(", "context", ")", "?", "(", ",", ")", "requiredType", "!=", "null", "->", "requiredType", ".", "isInstance", "\"", "Unable to call initializer", "\"", "initializer", ".", "getClass", "ApplicationContextInitializer", ".", "class", "(", ")", "+", "(", "context", ")", "(", ")", "\"", "No generic type found for initializr of type ", "\"", "initializer", ".", "getClass", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 143, "ast_depth": 13, "n_identifiers": 13, "vocab_size": 42, "n_whitespaces": 71, "n_words": 46, "nloc": 11, "token_counts": 99}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#629-634", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "logStartupInfo", "qualified_name": "org.springframework.boot.SpringApplication#logStartupInfo", "start_line": 629, "end_line": 634, "signature": "logStartupInfo(ConfigurableApplicationContext context)", "original_code": "protected void logStartupInfo(ConfigurableApplicationContext context) {\n\t\tboolean isRoot = context.getParent() == null;\n\t\tif (isRoot) {\n\t\t\tnew StartupInfoLogger(this.mainApplicationClass, context.getEnvironment()).logStarting(getApplicationLog());\n\t\t}\n\t}", "doc_comment": "/**\n\t * Called to log startup information, subclasses may override to add additional\n\t * logging.\n\t * @param context the application context\n\t * @since 3.4.0\n\t */"}, "code_tokens": ["void", "logStartupInfo", "protected", "(", ")", "{", "}", "ConfigurableApplicationContext", "context", "boolean", ";", "if", "isRoot", "=", "(", "isRoot", ")", "{", "}", "==", "null", ";", "context", ".", "getParent", ".", "logStarting", "(", ")", "new", "StartupInfoLogger", "(", ")", "(", ",", ")", "getApplicationLog", "this", ".", "mainApplicationClass", "context", ".", "getEnvironment", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 71, "ast_depth": 12, "n_identifiers": 8, "vocab_size": 26, "n_whitespaces": 28, "n_words": 20, "nloc": 6, "token_counts": 47}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#640-657", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "logStartupProfileInfo", "qualified_name": "org.springframework.boot.SpringApplication#logStartupProfileInfo", "start_line": 640, "end_line": 657, "signature": "logStartupProfileInfo(ConfigurableApplicationContext context)", "original_code": "protected void logStartupProfileInfo(ConfigurableApplicationContext context) {\n\t\tLog log = getApplicationLog();\n\t\tif (log.isInfoEnabled()) {\n\t\t\tList<String> activeProfiles = quoteProfiles(context.getEnvironment().getActiveProfiles());\n\t\t\tif (ObjectUtils.isEmpty(activeProfiles)) {\n\t\t\t\tList<String> defaultProfiles = quoteProfiles(context.getEnvironment().getDefaultProfiles());\n\t\t\t\tString message = String.format(\"%s default %s: \", defaultProfiles.size(),\n\t\t\t\t\t\t(defaultProfiles.size() <= 1) ? \"profile\" : \"profiles\");\n\t\t\t\tlog.info(\"No active profile set, falling back to \" + message\n\t\t\t\t\t\t+ StringUtils.collectionToDelimitedString(defaultProfiles, \", \"));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tString message = (activeProfiles.size() == 1) ? \"1 profile is active: \"\n\t\t\t\t\t\t: activeProfiles.size() + \" profiles are active: \";\n\t\t\t\tlog.info(\"The following \" + message + StringUtils.collectionToDelimitedString(activeProfiles, \", \"));\n\t\t\t}\n\t\t}\n\t}", "doc_comment": "/**\n\t * Called to log active profile information.\n\t * @param context the application context\n\t */"}, "code_tokens": ["void", "logStartupProfileInfo", "protected", "(", ")", "{", "}", "ConfigurableApplicationContext", "context", "Log", ";", "if", "log", "=", "(", ")", "{", "}", "getApplicationLog", "log", ".", "isInfoEnabled", ";", "if", "else", "(", ")", "(", ")", "List", "activeProfiles", "=", "(", ")", "{", "}", "{", "}", "<", "String", ">", "quoteProfiles", "ObjectUtils", ".", "isEmpty", ";", "String", ";", ";", "String", ";", ";", "(", ")", "(", "activeProfiles", ")", "List", "defaultProfiles", "=", "message", "=", "log", ".", "info", "message", "=", "log", ".", "info", ".", "getActiveProfiles", "<", "String", ">", "quoteProfiles", "String", ".", "format", "(", ")", "?", ":", "(", ")", "context", ".", "getEnvironment", "(", ")", "(", ")", "(", ",", ",", ")", "+", "(", ")", "\"", "1 profile is active: ", "\"", "+", "+", "(", ")", ".", "getDefaultProfiles", "\"", "%s default %s: ", "\"", "defaultProfiles", ".", "size", "?", ":", "+", "message", "StringUtils", ".", "collectionToDelimitedString", "==", "1", "activeProfiles", ".", "size", "\"", " profiles are active: ", "\"", "+", "message", "StringUtils", ".", "collectionToDelimitedString", "context", ".", "getEnvironment", "(", ")", "(", ")", "(", ")", "\"", "profile", "\"", "\"", "profiles", "\"", "\"", "No active profile set, falling back to ", "\"", "(", "defaultProfiles", ",", ")", "activeProfiles", ".", "size", "(", ")", "\"", "The following ", "\"", "(", "activeProfiles", ",", ")", "(", ")", "<=", "1", "\"", ", ", "\"", "(", ")", "\"", ", ", "\"", "defaultProfiles", ".", "size", "(", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 270, "ast_depth": 17, "n_identifiers": 20, "vocab_size": 52, "n_whitespaces": 146, "n_words": 79, "nloc": 18, "token_counts": 185}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#659-661", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "quoteProfiles", "qualified_name": "org.springframework.boot.SpringApplication#quoteProfiles", "start_line": 659, "end_line": 661, "signature": "quoteProfiles(String[] profiles)", "original_code": "private List<String> quoteProfiles(String[] profiles) {\n\t\treturn Arrays.stream(profiles).map((profile) -> \"\\\"\" + profile + \"\\\"\").toList();\n\t}", "doc_comment": ""}, "code_tokens": ["quoteProfiles", "private", "List", "(", ")", "{", "}", "<", "String", ">", "profiles", "return", ";", "String", ".", "toList", "[", "]", ".", "map", "(", ")", "Arrays", ".", "stream", "(", ")", "(", "profiles", ")", "->", "(", "profile", ")", "+", "+", "profile", "\"", "\\\"", "\"", "\"", "\\\"", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 66, "ast_depth": 12, "n_identifiers": 7, "vocab_size": 25, "n_whitespaces": 16, "n_words": 14, "nloc": 3, "token_counts": 43}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#667-672", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "getApplicationLog", "qualified_name": "org.springframework.boot.SpringApplication#getApplicationLog", "start_line": 667, "end_line": 672, "signature": "getApplicationLog()", "original_code": "protected Log getApplicationLog() {\n\t\tif (this.mainApplicationClass == null) {\n\t\t\treturn logger;\n\t\t}\n\t\treturn LogFactory.getLog(this.mainApplicationClass);\n\t}", "doc_comment": "/**\n\t * Returns the {@link Log} for the application. By default will be deduced.\n\t * @return the application log\n\t */"}, "code_tokens": ["Log", "getApplicationLog", "protected", "(", ")", "{", "}", "if", "return", ";", "(", ")", "{", "}", "LogFactory", ".", "getLog", "==", "null", "return", "logger", ";", "(", ")", "this", ".", "mainApplicationClass", "this", ".", "mainApplicationClass"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 45, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 18, "n_whitespaces": 24, "n_words": 14, "nloc": 6, "token_counts": 30}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#679-694", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "load", "qualified_name": "org.springframework.boot.SpringApplication#load", "start_line": 679, "end_line": 694, "signature": "load(ApplicationContext context, Object[] sources)", "original_code": "protected void load(ApplicationContext context, Object[] sources) {\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"Loading source \" + StringUtils.arrayToCommaDelimitedString(sources));\n\t\t}\n\t\tBeanDefinitionLoader loader = createBeanDefinitionLoader(getBeanDefinitionRegistry(context), sources);\n\t\tif (this.beanNameGenerator != null) {\n\t\t\tloader.setBeanNameGenerator(this.beanNameGenerator);\n\t\t}\n\t\tif (this.resourceLoader != null) {\n\t\t\tloader.setResourceLoader(this.resourceLoader);\n\t\t}\n\t\tif (this.environment != null) {\n\t\t\tloader.setEnvironment(this.environment);\n\t\t}\n\t\tloader.load();\n\t}", "doc_comment": "/**\n\t * Load beans into the application context.\n\t * @param context the context to load beans into\n\t * @param sources the sources to load\n\t */"}, "code_tokens": ["void", "load", "protected", "(", ",", ")", "{", "}", "ApplicationContext", "context", "sources", "if", "BeanDefinitionLoader", ";", "if", "if", "if", ";", "Object", "(", ")", "{", "}", "loader", "=", "(", ")", "{", "}", "(", ")", "{", "}", "(", ")", "{", "}", "loader", ".", "load", "[", "]", "logger", ".", "isDebugEnabled", ";", "createBeanDefinitionLoader", "!=", "null", ";", "!=", "null", ";", "!=", "null", ";", "(", ")", "(", ")", "logger", ".", "debug", "(", ",", "sources", ")", "this", ".", "beanNameGenerator", "loader", ".", "setBeanNameGenerator", "this", ".", "resourceLoader", "loader", ".", "setResourceLoader", "this", ".", "environment", "loader", ".", "setEnvironment", "(", ")", "getBeanDefinitionRegistry", "(", ")", "(", ")", "(", ")", "+", "(", "context", ")", "this", ".", "beanNameGenerator", "this", ".", "resourceLoader", "this", ".", "environment", "\"", "Loading source ", "\"", "StringUtils", ".", "arrayToCommaDelimitedString", "(", "sources", ")"], "metrics": {"cyclomatic_complexity": 5, "n_ast_nodes": 173, "ast_depth": 12, "n_identifiers": 17, "vocab_size": 39, "n_whitespaces": 76, "n_words": 49, "nloc": 16, "token_counts": 116}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#701-703", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "getResourceLoader", "qualified_name": "org.springframework.boot.SpringApplication#getResourceLoader", "start_line": 701, "end_line": 703, "signature": "getResourceLoader()", "original_code": "public @Nullable ResourceLoader getResourceLoader() {\n\t\treturn this.resourceLoader;\n\t}", "doc_comment": "/**\n\t * The ResourceLoader that will be used in the ApplicationContext.\n\t * @return the resourceLoader the resource loader that will be used in the\n\t * ApplicationContext (or {@code null} if the default)\n\t */"}, "code_tokens": ["ResourceLoader", "getResourceLoader", "public", "(", ")", "{", "}", "@", "Nullable", "return", ";", "this", ".", "resourceLoader"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 10, "n_words": 7, "nloc": 3, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#711-720", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "getClassLoader", "qualified_name": "org.springframework.boot.SpringApplication#getClassLoader", "start_line": 711, "end_line": 720, "signature": "getClassLoader()", "original_code": "public ClassLoader getClassLoader() {\n\t\tif (this.resourceLoader != null) {\n\t\t\tClassLoader classLoader = this.resourceLoader.getClassLoader();\n\t\t\tAssert.state(classLoader != null, \"No classloader found\");\n\t\t\treturn classLoader;\n\t\t}\n\t\tClassLoader classLoader = ClassUtils.getDefaultClassLoader();\n\t\tAssert.state(classLoader != null, \"No classloader found\");\n\t\treturn classLoader;\n\t}", "doc_comment": "/**\n\t * Either the ClassLoader that will be used in the ApplicationContext (if\n\t * {@link #setResourceLoader(ResourceLoader) resourceLoader} is set), or the context\n\t * class loader (if not null), or the loader of the Spring {@link ClassUtils} class.\n\t * @return a ClassLoader (never null)\n\t */"}, "code_tokens": ["ClassLoader", "getClassLoader", "public", "(", ")", "{", "}", "if", "ClassLoader", ";", ";", "return", "classLoader", ";", "(", ")", "{", "}", "classLoader", "=", "Assert", ".", "state", "!=", "null", "ClassLoader", ";", ";", "return", "classLoader", ";", "ClassUtils", ".", "getDefaultClassLoader", "(", ",", ")", "this", ".", "resourceLoader", "classLoader", "=", "Assert", ".", "state", "(", ")", "classLoader", "!=", "null", "\"", "No classloader found", "\"", ".", "getClassLoader", "(", ",", ")", "this", ".", "resourceLoader", "(", ")", "classLoader", "!=", "null", "\"", "No classloader found", "\""], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 100, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 24, "n_whitespaces": 54, "n_words": 34, "nloc": 10, "token_counts": 69}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#727-735", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "getBeanDefinitionRegistry", "qualified_name": "org.springframework.boot.SpringApplication#getBeanDefinitionRegistry", "start_line": 727, "end_line": 735, "signature": "getBeanDefinitionRegistry(ApplicationContext context)", "original_code": "private BeanDefinitionRegistry getBeanDefinitionRegistry(ApplicationContext context) {\n\t\tif (context instanceof BeanDefinitionRegistry registry) {\n\t\t\treturn registry;\n\t\t}\n\t\tif (context instanceof AbstractApplicationContext abstractApplicationContext) {\n\t\t\treturn (BeanDefinitionRegistry) abstractApplicationContext.getBeanFactory();\n\t\t}\n\t\tthrow new IllegalStateException(\"Could not locate BeanDefinitionRegistry\");\n\t}", "doc_comment": "/**\n\t * Get the bean definition registry.\n\t * @param context the application context\n\t * @return the BeanDefinitionRegistry if it can be determined\n\t */"}, "code_tokens": ["BeanDefinitionRegistry", "getBeanDefinitionRegistry", "private", "(", ")", "{", "}", "ApplicationContext", "context", "if", "if", "throw", ";", "(", ")", "{", "}", "(", ")", "{", "}", "new", "IllegalStateException", "context", "instanceof", "BeanDefinitionRegistry", "registry", "return", "registry", ";", "context", "instanceof", "AbstractApplicationContext", "abstractApplicationContext", "return", ";", "(", ")", "(", "BeanDefinitionRegistry", ")", "\"", "Could not locate BeanDefinitionRegistry", "\"", "abstractApplicationContext", ".", "getBeanFactory", "(", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 72, "ast_depth": 10, "n_identifiers": 5, "vocab_size": 23, "n_whitespaces": 47, "n_words": 28, "nloc": 9, "token_counts": 49}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#743-745", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "createBeanDefinitionLoader", "qualified_name": "org.springframework.boot.SpringApplication#createBeanDefinitionLoader", "start_line": 743, "end_line": 745, "signature": "createBeanDefinitionLoader(BeanDefinitionRegistry registry, Object[] sources)", "original_code": "protected BeanDefinitionLoader createBeanDefinitionLoader(BeanDefinitionRegistry registry, Object[] sources) {\n\t\treturn new BeanDefinitionLoader(registry, sources);\n\t}", "doc_comment": "/**\n\t * Factory method used to create the {@link BeanDefinitionLoader}.\n\t * @param registry the bean definition registry\n\t * @param sources the sources to load\n\t * @return the {@link BeanDefinitionLoader} that will be used to load beans\n\t */"}, "code_tokens": ["BeanDefinitionLoader", "createBeanDefinitionLoader", "protected", "(", ",", ")", "{", "}", "BeanDefinitionRegistry", "registry", "sources", "return", ";", "Object", "new", "BeanDefinitionLoader", "[", "]", "(", "registry", ",", "sources", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 35, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 17, "n_whitespaces": 14, "n_words": 12, "nloc": 3, "token_counts": 23}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#751-753", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "refresh", "qualified_name": "org.springframework.boot.SpringApplication#refresh", "start_line": 751, "end_line": 753, "signature": "refresh(ConfigurableApplicationContext applicationContext)", "original_code": "protected void refresh(ConfigurableApplicationContext applicationContext) {\n\t\tapplicationContext.refresh();\n\t}", "doc_comment": "/**\n\t * Refresh the underlying {@link ApplicationContext}.\n\t * @param applicationContext the application context to refresh\n\t */"}, "code_tokens": ["void", "refresh", "protected", "(", ")", "{", "}", "ConfigurableApplicationContext", "applicationContext", ";", "applicationContext", ".", "refresh", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 24, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 11, "n_whitespaces": 9, "n_words": 7, "nloc": 3, "token_counts": 15}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#760-761", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "afterRefresh", "qualified_name": "org.springframework.boot.SpringApplication#afterRefresh", "start_line": 760, "end_line": 761, "signature": "afterRefresh(ConfigurableApplicationContext context, ApplicationArguments args)", "original_code": "protected void afterRefresh(ConfigurableApplicationContext context, ApplicationArguments args) {\n\t}", "doc_comment": "/**\n\t * Called after the context has been refreshed.\n\t * @param context the application context\n\t * @param args the application arguments\n\t */"}, "code_tokens": ["void", "afterRefresh", "protected", "(", ",", ")", "{", "}", "ConfigurableApplicationContext", "context", "ApplicationArguments", "args"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 19, "ast_depth": 5, "n_identifiers": 3, "vocab_size": 12, "n_whitespaces": 8, "n_words": 7, "nloc": 2, "token_counts": 12}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#763-773", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "callRunners", "qualified_name": "org.springframework.boot.SpringApplication#callRunners", "start_line": 763, "end_line": 773, "signature": "callRunners(ConfigurableApplicationContext context, ApplicationArguments args)", "original_code": "private void callRunners(ConfigurableApplicationContext context, ApplicationArguments args) {\n\t\tConfigurableListableBeanFactory beanFactory = context.getBeanFactory();\n\t\tString[] beanNames = beanFactory.getBeanNamesForType(Runner.class);\n\t\tMap<Runner, String> instancesToBeanNames = new IdentityHashMap<>();\n\t\tfor (String beanName : beanNames) {\n\t\t\tinstancesToBeanNames.put(beanFactory.getBean(beanName, Runner.class), beanName);\n\t\t}\n\t\tComparator<Object> comparator = getOrderComparator(beanFactory)\n\t\t\t.withSourceProvider(new FactoryAwareOrderSourceProvider(beanFactory, instancesToBeanNames));\n\t\tinstancesToBeanNames.keySet().stream().sorted(comparator).forEach((runner) -> callRunner(runner, args));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "callRunners", "private", "(", ",", ")", "{", "}", "ConfigurableApplicationContext", "context", "ApplicationArguments", "args", "ConfigurableListableBeanFactory", ";", ";", ";", "for", "(", "String", "beanName", ":", "beanNames", ")", ";", ";", "beanFactory", "=", "String", "beanNames", "=", "Map", "instancesToBeanNames", "=", "{", "}", "Comparator", "comparator", "=", ".", "forEach", "context", ".", "getBeanFactory", "[", "]", "beanFactory", ".", "getBeanNamesForType", "<", "Runner", ",", "String", ">", "new", ";", "<", "Object", ">", ".", "withSourceProvider", ".", "sorted", "(", ")", "(", ")", "(", ")", "IdentityHashMap", "(", ")", "instancesToBeanNames", ".", "put", "getOrderComparator", "(", ")", ".", "stream", "(", "comparator", ")", "->", "Runner", ".", "class", "<", ">", "(", ",", "beanName", ")", "(", "beanFactory", ")", "new", "FactoryAwareOrderSourceProvider", "instancesToBeanNames", ".", "keySet", "(", ")", "(", "runner", ")", "callRunner", "beanFactory", ".", "getBean", "(", "beanFactory", ",", "instancesToBeanNames", ")", "(", ")", "(", "runner", ",", "args", ")", "(", "beanName", ",", ")", "Runner", ".", "class"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 185, "ast_depth": 12, "n_identifiers": 20, "vocab_size": 49, "n_whitespaces": 63, "n_words": 55, "nloc": 11, "token_counts": 128}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#775-780", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "getOrderComparator", "qualified_name": "org.springframework.boot.SpringApplication#getOrderComparator", "start_line": 775, "end_line": 780, "signature": "getOrderComparator(ConfigurableListableBeanFactory beanFactory)", "original_code": "private OrderComparator getOrderComparator(ConfigurableListableBeanFactory beanFactory) {\n\t\tComparator<?> dependencyComparator = (beanFactory instanceof DefaultListableBeanFactory defaultListableBeanFactory)\n\t\t\t\t? defaultListableBeanFactory.getDependencyComparator() : null;\n\t\treturn (dependencyComparator instanceof OrderComparator orderComparator) ? orderComparator\n\t\t\t\t: AnnotationAwareOrderComparator.INSTANCE;\n\t}", "doc_comment": ""}, "code_tokens": ["OrderComparator", "getOrderComparator", "private", "(", ")", "{", "}", "ConfigurableListableBeanFactory", "beanFactory", ";", "return", ";", "Comparator", "dependencyComparator", "=", "?", "orderComparator", ":", "<", ">", "?", ":", "null", "(", ")", "AnnotationAwareOrderComparator", ".", "INSTANCE", "?", "(", ")", "defaultListableBeanFactory", ".", "getDependencyComparator", "dependencyComparator", "instanceof", "OrderComparator", "orderComparator", "beanFactory", "instanceof", "DefaultListableBeanFactory", "defaultListableBeanFactory", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 65, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 27, "n_whitespaces": 38, "n_words": 22, "nloc": 6, "token_counts": 44}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#782-790", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "callRunner", "qualified_name": "org.springframework.boot.SpringApplication#callRunner", "start_line": 782, "end_line": 790, "signature": "callRunner(Runner runner, ApplicationArguments args)", "original_code": "private void callRunner(Runner runner, ApplicationArguments args) {\n\t\tif (runner instanceof ApplicationRunner) {\n\t\t\tcallRunner(ApplicationRunner.class, runner, (applicationRunner) -> applicationRunner.run(args));\n\t\t}\n\t\tif (runner instanceof CommandLineRunner) {\n\t\t\tcallRunner(CommandLineRunner.class, runner,\n\t\t\t\t\t(commandLineRunner) -> commandLineRunner.run(args.getSourceArgs()));\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "callRunner", "private", "(", ",", ")", "{", "}", "Runner", "runner", "ApplicationArguments", "args", "if", "if", "(", ")", "{", "}", "(", ")", "{", "}", "runner", "instanceof", "ApplicationRunner", ";", "runner", "instanceof", "CommandLineRunner", ";", "callRunner", "callRunner", "(", ",", "runner", ",", ")", "(", ",", "runner", ",", ")", "ApplicationRunner", ".", "class", "->", "CommandLineRunner", ".", "class", "->", "(", "applicationRunner", ")", "applicationRunner", ".", "run", "(", "commandLineRunner", ")", "commandLineRunner", ".", "run", "(", "args", ")", "(", ")", "args", ".", "getSourceArgs", "(", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 105, "ast_depth": 14, "n_identifiers": 7, "vocab_size": 24, "n_whitespaces": 49, "n_words": 32, "nloc": 9, "token_counts": 72}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#792-797", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "callRunner", "qualified_name": "org.springframework.boot.SpringApplication#callRunner", "start_line": 792, "end_line": 797, "signature": "callRunner(Class<R> type, Runner runner, ThrowingConsumer<R> call)", "original_code": "@SuppressWarnings(\"unchecked\")\n\tprivate <R extends Runner> void callRunner(Class<R> type, Runner runner, ThrowingConsumer<R> call) {\n\t\tcall.throwing(\n\t\t\t\t(message, ex) -> new IllegalStateException(\"Failed to execute \" + ClassUtils.getShortName(type), ex))\n\t\t\t.accept((R) runner);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "callRunner", "private", "<", ">", "(", ",", ",", ")", "{", "}", "@", "SuppressWarnings", "R", "type", "Runner", "runner", "call", ";", "(", ")", "extends", "Runner", "Class", "ThrowingConsumer", ".", "accept", "\"", "unchecked", "\"", "<", "R", ">", "<", "R", ">", "call", ".", "throwing", "(", ")", "(", ")", "(", "R", ")", "runner", "->", "(", "message", ",", "ex", ")", "new", "IllegalStateException", "(", ",", "ex", ")", "+", "\"", "Failed to execute ", "\"", "ClassUtils", ".", "getShortName", "(", "type", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 101, "ast_depth": 14, "n_identifiers": 11, "vocab_size": 35, "n_whitespaces": 38, "n_words": 32, "nloc": 6, "token_counts": 69}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#799-824", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "handleRunFailure", "qualified_name": "org.springframework.boot.SpringApplication#handleRunFailure", "start_line": 799, "end_line": 824, "signature": "handleRunFailure(@Nullable ConfigurableApplicationContext context, Throwable exception,\n\t\t\t@Nullable SpringApplicationRunListeners listeners)", "original_code": "private RuntimeException handleRunFailure(@Nullable ConfigurableApplicationContext context, Throwable exception,\n\t\t\t@Nullable SpringApplicationRunListeners listeners) {\n\t\tif (exception instanceof AbandonedRunException abandonedRunException) {\n\t\t\treturn abandonedRunException;\n\t\t}\n\t\ttry {\n\t\t\ttry {\n\t\t\t\thandleExitCode(context, exception);\n\t\t\t\tif (listeners != null) {\n\t\t\t\t\tlisteners.failed(context, exception);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\treportFailure(getExceptionReporters(context), exception);\n\t\t\t\tif (context != null) {\n\t\t\t\t\tcontext.close();\n\t\t\t\t\tshutdownHook.deregisterFailedApplicationContext(context);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tlogger.warn(\"Unable to close ApplicationContext\", ex);\n\t\t}\n\t\treturn (exception instanceof RuntimeException runtimeException) ? runtimeException\n\t\t\t\t: new IllegalStateException(exception);\n\t}", "doc_comment": ""}, "code_tokens": ["RuntimeException", "handleRunFailure", "private", "(", ",", ",", ")", "{", "}", "ConfigurableApplicationContext", "context", "Throwable", "exception", "SpringApplicationRunListeners", "listeners", "if", "try", "return", ";", "(", ")", "{", "}", "{", "}", "catch", "(", ")", "?", "runtimeException", ":", "@", "Nullable", "@", "Nullable", "exception", "instanceof", "AbandonedRunException", "abandonedRunException", "return", "abandonedRunException", ";", "try", "ex", "{", "}", "(", ")", "new", "IllegalStateException", "{", "}", "finally", "Exception", ";", "exception", "instanceof", "RuntimeException", "runtimeException", "(", "exception", ")", ";", "if", "{", "}", "logger", ".", "warn", "handleExitCode", "(", ")", "{", "}", ";", "if", "(", ",", "ex", ")", "(", "context", ",", "exception", ")", "listeners", "!=", "null", ";", "reportFailure", "(", ")", "{", "}", "\"", "Unable to close ApplicationContext", "\"", "listeners", ".", "failed", "(", ",", "exception", ")", "context", "!=", "null", ";", ";", "(", "context", ",", "exception", ")", "getExceptionReporters", "context", ".", "close", "shutdownHook", ".", "deregisterFailedApplicationContext", "(", "context", ")", "(", ")", "(", "context", ")"], "metrics": {"cyclomatic_complexity": 5, "n_ast_nodes": 191, "ast_depth": 14, "n_identifiers": 17, "vocab_size": 46, "n_whitespaces": 148, "n_words": 62, "nloc": 26, "token_counts": 129}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#826-836", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "getExceptionReporters", "qualified_name": "org.springframework.boot.SpringApplication#getExceptionReporters", "start_line": 826, "end_line": 836, "signature": "getExceptionReporters(\n\t\t\t@Nullable ConfigurableApplicationContext context)", "original_code": "private Collection<SpringBootExceptionReporter> getExceptionReporters(\n\t\t\t@Nullable ConfigurableApplicationContext context) {\n\t\ttry {\n\t\t\tArgumentResolver argumentResolver = (context != null)\n\t\t\t\t\t? ArgumentResolver.of(ConfigurableApplicationContext.class, context) : ArgumentResolver.none();\n\t\t\treturn getSpringFactoriesInstances(SpringBootExceptionReporter.class, argumentResolver);\n\t\t}\n\t\tcatch (Throwable ex) {\n\t\t\treturn Collections.emptyList();\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["getExceptionReporters", "private", "Collection", "(", ")", "{", "}", "<", "SpringBootExceptionReporter", ">", "ConfigurableApplicationContext", "context", "try", "{", "}", "catch", "(", ")", "@", "Nullable", "ArgumentResolver", ";", "return", ";", "ex", "{", "}", "argumentResolver", "=", "getSpringFactoriesInstances", "Throwable", "return", ";", "?", ":", "(", ",", "argumentResolver", ")", "Collections", ".", "emptyList", "(", ")", "ArgumentResolver", ".", "of", "ArgumentResolver", ".", "none", "SpringBootExceptionReporter", ".", "class", "(", ")", "context", "!=", "null", "(", ",", "context", ")", "(", ")", "ConfigurableApplicationContext", ".", "class"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 100, "ast_depth": 12, "n_identifiers": 11, "vocab_size": 35, "n_whitespaces": 57, "n_words": 30, "nloc": 11, "token_counts": 67}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#838-863", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "reportFailure", "qualified_name": "org.springframework.boot.SpringApplication#reportFailure", "start_line": 838, "end_line": 863, "signature": "reportFailure(Collection<SpringBootExceptionReporter> exceptionReporters, Throwable failure)", "original_code": "private void reportFailure(Collection<SpringBootExceptionReporter> exceptionReporters, Throwable failure) {\n\t\ttry {\n\t\t\tfor (SpringBootExceptionReporter reporter : exceptionReporters) {\n\t\t\t\tif (reporter.reportException(failure)) {\n\t\t\t\t\tregisterLoggedException(failure);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (Throwable ex) {\n\t\t\t// Continue with normal handling of the original failure\n\t\t}\n\t\tif (logger.isErrorEnabled()) {\n\t\t\tif (NativeDetector.inNativeImage()) {\n\t\t\t\t// Depending on how early the failure was, logging may not work in a\n\t\t\t\t// native image so we output the stack trace directly to System.out\n\t\t\t\t// instead.\n\t\t\t\tSystem.out.println(\"Application run failed\");\n\t\t\t\tfailure.printStackTrace(System.out);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlogger.error(\"Application run failed\", failure);\n\t\t\t}\n\t\t\tregisterLoggedException(failure);\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "reportFailure", "private", "(", ",", ")", "{", "}", "exceptionReporters", "Throwable", "failure", "try", "if", "Collection", "{", "}", "catch", "(", ")", "(", ")", "{", "}", "<", "SpringBootExceptionReporter", ">", "for", "(", "SpringBootExceptionReporter", "reporter", ":", "exceptionReporters", ")", "ex", "{", "// Continue with normal handling of the original failure", "}", "logger", ".", "isErrorEnabled", "if", "else", ";", "{", "}", "Throwable", "(", ")", "(", ")", "{", "// Depending on how early the failure was, logging may not work in a", "// native image so we output the stack trace directly to System.out", "// instead.", "}", "{", "}", "registerLoggedException", "if", "NativeDetector", ".", "inNativeImage", ";", ";", ";", "(", "failure", ")", "(", ")", "{", "}", "(", ")", ".", "println", "failure", ".", "printStackTrace", "logger", ".", "error", "reporter", ".", "reportException", ";", "return", ";", "System", ".", "out", "(", ")", "(", ")", "(", ",", "failure", ")", "(", "failure", ")", "registerLoggedException", "\"", "Application run failed", "\"", "System", ".", "out", "\"", "Application run failed", "\"", "(", "failure", ")"], "metrics": {"cyclomatic_complexity": 6, "n_ast_nodes": 168, "ast_depth": 13, "n_identifiers": 16, "vocab_size": 43, "n_whitespaces": 164, "n_words": 82, "nloc": 26, "token_counts": 115}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#870-875", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "registerLoggedException", "qualified_name": "org.springframework.boot.SpringApplication#registerLoggedException", "start_line": 870, "end_line": 875, "signature": "registerLoggedException(Throwable exception)", "original_code": "protected void registerLoggedException(Throwable exception) {\n\t\tSpringBootExceptionHandler handler = getSpringBootExceptionHandler();\n\t\tif (handler != null) {\n\t\t\thandler.registerLoggedException(exception);\n\t\t}\n\t}", "doc_comment": "/**\n\t * Register that the given exception has been logged. By default, if the running in\n\t * the main thread, this method will suppress additional printing of the stacktrace.\n\t * @param exception the exception that was logged\n\t */"}, "code_tokens": ["void", "registerLoggedException", "protected", "(", ")", "{", "}", "Throwable", "exception", "SpringBootExceptionHandler", ";", "if", "handler", "=", "(", ")", "{", "}", "getSpringBootExceptionHandler", "handler", "!=", "null", ";", "(", ")", "handler", ".", "registerLoggedException", "(", "exception", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 48, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 18, "n_whitespaces": 26, "n_words": 14, "nloc": 6, "token_counts": 31}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#877-888", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "handleExitCode", "qualified_name": "org.springframework.boot.SpringApplication#handleExitCode", "start_line": 877, "end_line": 888, "signature": "handleExitCode(@Nullable ConfigurableApplicationContext context, Throwable exception)", "original_code": "private void handleExitCode(@Nullable ConfigurableApplicationContext context, Throwable exception) {\n\t\tint exitCode = getExitCodeFromException(context, exception);\n\t\tif (exitCode != 0) {\n\t\t\tif (context != null) {\n\t\t\t\tcontext.publishEvent(new ExitCodeEvent(context, exitCode));\n\t\t\t}\n\t\t\tSpringBootExceptionHandler handler = getSpringBootExceptionHandler();\n\t\t\tif (handler != null) {\n\t\t\t\thandler.registerExitCode(exitCode);\n\t\t\t}\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "handleExitCode", "private", "(", ",", ")", "{", "}", "ConfigurableApplicationContext", "context", "Throwable", "exception", ";", "if", "int", "exitCode", "=", "(", ")", "{", "}", "@", "Nullable", "getExitCodeFromException", "exitCode", "!=", "0", "if", "SpringBootExceptionHandler", ";", "if", "(", "context", ",", "exception", ")", "(", ")", "{", "}", "handler", "=", "(", ")", "{", "}", "context", "!=", "null", ";", "getSpringBootExceptionHandler", "handler", "!=", "null", ";", "context", ".", "publishEvent", "(", ")", "handler", ".", "registerExitCode", "(", ")", "(", "exitCode", ")", "new", "ExitCodeEvent", "(", "context", ",", "exitCode", ")"], "metrics": {"cyclomatic_complexity": 4, "n_ast_nodes": 113, "ast_depth": 13, "n_identifiers": 10, "vocab_size": 31, "n_whitespaces": 69, "n_words": 34, "nloc": 12, "token_counts": 75}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#890-896", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "getExitCodeFromException", "qualified_name": "org.springframework.boot.SpringApplication#getExitCodeFromException", "start_line": 890, "end_line": 896, "signature": "getExitCodeFromException(@Nullable ConfigurableApplicationContext context, Throwable exception)", "original_code": "private int getExitCodeFromException(@Nullable ConfigurableApplicationContext context, Throwable exception) {\n\t\tint exitCode = getExitCodeFromMappedException(context, exception);\n\t\tif (exitCode == 0) {\n\t\t\texitCode = getExitCodeFromExitCodeGeneratorException(exception);\n\t\t}\n\t\treturn exitCode;\n\t}", "doc_comment": ""}, "code_tokens": ["getExitCodeFromException", "private", "int", "(", ",", ")", "{", "}", "ConfigurableApplicationContext", "context", "Throwable", "exception", ";", "if", "return", "exitCode", ";", "int", "exitCode", "=", "(", ")", "{", "}", "@", "Nullable", "getExitCodeFromMappedException", "exitCode", "==", "0", ";", "(", "context", ",", "exception", ")", "exitCode", "=", "getExitCodeFromExitCodeGeneratorException", "(", "exception", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 66, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 23, "n_whitespaces": 36, "n_words": 21, "nloc": 7, "token_counts": 42}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#898-906", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "getExitCodeFromMappedException", "qualified_name": "org.springframework.boot.SpringApplication#getExitCodeFromMappedException", "start_line": 898, "end_line": 906, "signature": "getExitCodeFromMappedException(@Nullable ConfigurableApplicationContext context, Throwable exception)", "original_code": "private int getExitCodeFromMappedException(@Nullable ConfigurableApplicationContext context, Throwable exception) {\n\t\tif (context == null || !context.isActive()) {\n\t\t\treturn 0;\n\t\t}\n\t\tExitCodeGenerators generators = new ExitCodeGenerators();\n\t\tCollection<ExitCodeExceptionMapper> beans = context.getBeansOfType(ExitCodeExceptionMapper.class).values();\n\t\tgenerators.addAll(exception, beans);\n\t\treturn generators.getExitCode();\n\t}", "doc_comment": ""}, "code_tokens": ["getExitCodeFromMappedException", "private", "int", "(", ",", ")", "{", "}", "ConfigurableApplicationContext", "context", "Throwable", "exception", "if", "ExitCodeGenerators", ";", ";", ";", "return", ";", "(", ")", "{", "}", "generators", "=", "Collection", "beans", "=", "generators", ".", "addAll", "generators", ".", "getExitCode", "@", "Nullable", "||", "return", "0", ";", "new", "ExitCodeGenerators", "<", "ExitCodeExceptionMapper", ">", ".", "values", "(", "exception", ",", "beans", ")", "(", ")", "context", "==", "null", "!", "(", ")", "context", ".", "getBeansOfType", "(", ")", "context", ".", "isActive", "(", ")", "(", ")", "ExitCodeExceptionMapper", ".", "class"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 113, "ast_depth": 10, "n_identifiers": 11, "vocab_size": 38, "n_whitespaces": 47, "n_words": 34, "nloc": 9, "token_counts": 75}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#908-916", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "getExitCodeFromExitCodeGeneratorException", "qualified_name": "org.springframework.boot.SpringApplication#getExitCodeFromExitCodeGeneratorException", "start_line": 908, "end_line": 916, "signature": "getExitCodeFromExitCodeGeneratorException(@Nullable Throwable exception)", "original_code": "private int getExitCodeFromExitCodeGeneratorException(@Nullable Throwable exception) {\n\t\tif (exception == null) {\n\t\t\treturn 0;\n\t\t}\n\t\tif (exception instanceof ExitCodeGenerator generator) {\n\t\t\treturn generator.getExitCode();\n\t\t}\n\t\treturn getExitCodeFromExitCodeGeneratorException(exception.getCause());\n\t}", "doc_comment": ""}, "code_tokens": ["getExitCodeFromExitCodeGeneratorException", "private", "int", "(", ")", "{", "}", "Throwable", "exception", "if", "if", "return", ";", "(", ")", "{", "}", "(", ")", "{", "}", "getExitCodeFromExitCodeGeneratorException", "@", "Nullable", "exception", "==", "null", "return", "0", ";", "exception", "instanceof", "ExitCodeGenerator", "generator", "return", ";", "(", ")", "generator", ".", "getExitCode", "exception", ".", "getCause", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 74, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 23, "n_whitespaces": 42, "n_words": 23, "nloc": 9, "token_counts": 48}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#918-923", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "getSpringBootExceptionHandler", "qualified_name": "org.springframework.boot.SpringApplication#getSpringBootExceptionHandler", "start_line": 918, "end_line": 923, "signature": "getSpringBootExceptionHandler()", "original_code": "@Nullable SpringBootExceptionHandler getSpringBootExceptionHandler() {\n\t\tif (isMainThread(Thread.currentThread())) {\n\t\t\treturn SpringBootExceptionHandler.forCurrentThread();\n\t\t}\n\t\treturn null;\n\t}", "doc_comment": ""}, "code_tokens": ["SpringBootExceptionHandler", "getSpringBootExceptionHandler", "(", ")", "{", "}", "@", "Nullable", "if", "return", "null", ";", "(", ")", "{", "}", "isMainThread", "return", ";", "(", ")", "SpringBootExceptionHandler", ".", "forCurrentThread", "Thread", ".", "currentThread", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 48, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 17, "n_whitespaces": 22, "n_words": 12, "nloc": 6, "token_counts": 31}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#925-928", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "isMainThread", "qualified_name": "org.springframework.boot.SpringApplication#isMainThread", "start_line": 925, "end_line": 928, "signature": "isMainThread(Thread currentThread)", "original_code": "private boolean isMainThread(Thread currentThread) {\n\t\treturn (\"main\".equals(currentThread.getName()) || \"restartedMain\".equals(currentThread.getName()))\n\t\t\t\t&& \"main\".equals(currentThread.getThreadGroup().getName());\n\t}", "doc_comment": ""}, "code_tokens": ["boolean", "isMainThread", "private", "(", ")", "{", "}", "Thread", "currentThread", "return", ";", "&&", "(", ")", ".", "equals", "||", "\"", "main", "\"", "(", ")", ".", "equals", ".", "equals", ".", "getName", "\"", "main", "\"", "(", ")", "\"", "restartedMain", "\"", "(", ")", "currentThread", ".", "getThreadGroup", "(", ")", "currentThread", ".", "getName", "currentThread", ".", "getName", "(", ")", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 82, "ast_depth": 12, "n_identifiers": 5, "vocab_size": 20, "n_whitespaces": 18, "n_words": 19, "nloc": 4, "token_counts": 55}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#934-936", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "getMainApplicationClass", "qualified_name": "org.springframework.boot.SpringApplication#getMainApplicationClass", "start_line": 934, "end_line": 936, "signature": "getMainApplicationClass()", "original_code": "public @Nullable Class<?> getMainApplicationClass() {\n\t\treturn this.mainApplicationClass;\n\t}", "doc_comment": "/**\n\t * Returns the main application class that has been deduced or explicitly configured.\n\t * @return the main application class or {@code null}\n\t */"}, "code_tokens": ["getMainApplicationClass", "public", "Class", "(", ")", "{", "}", "@", "Nullable", "<", ">", "return", ";", "?", "this", ".", "mainApplicationClass"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 17, "n_whitespaces": 10, "n_words": 7, "nloc": 3, "token_counts": 17}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#944-946", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "setMainApplicationClass", "qualified_name": "org.springframework.boot.SpringApplication#setMainApplicationClass", "start_line": 944, "end_line": 946, "signature": "setMainApplicationClass(@Nullable Class<?> mainApplicationClass)", "original_code": "public void setMainApplicationClass(@Nullable Class<?> mainApplicationClass) {\n\t\tthis.mainApplicationClass = mainApplicationClass;\n\t}", "doc_comment": "/**\n\t * Set a specific main application class that will be used as a log source and to\n\t * obtain version information. By default the main application class will be deduced.\n\t * Can be set to {@code null} if there is no explicit application class.\n\t * @param mainApplicationClass the mainApplicationClass to set or {@code null}\n\t */"}, "code_tokens": ["void", "setMainApplicationClass", "public", "(", ")", "{", "}", "mainApplicationClass", ";", "Class", "=", "mainApplicationClass", "@", "Nullable", "<", ">", "this", ".", "mainApplicationClass", "?"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 34, "ast_depth": 8, "n_identifiers": 3, "vocab_size": 18, "n_whitespaces": 12, "n_words": 9, "nloc": 3, "token_counts": 20}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#953-955", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "getWebApplicationType", "qualified_name": "org.springframework.boot.SpringApplication#getWebApplicationType", "start_line": 953, "end_line": 955, "signature": "getWebApplicationType()", "original_code": "public @Nullable WebApplicationType getWebApplicationType() {\n\t\treturn this.properties.getWebApplicationType();\n\t}", "doc_comment": "/**\n\t * Returns the type of web application that is being run.\n\t * @return the type of web application\n\t * @since 2.0.0\n\t */"}, "code_tokens": ["WebApplicationType", "getWebApplicationType", "public", "(", ")", "{", "}", "@", "Nullable", "return", ";", ".", "getWebApplicationType", "this", ".", "properties", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 10, "n_words": 8, "nloc": 3, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#963-966", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "setWebApplicationType", "qualified_name": "org.springframework.boot.SpringApplication#setWebApplicationType", "start_line": 963, "end_line": 966, "signature": "setWebApplicationType(WebApplicationType webApplicationType)", "original_code": "public void setWebApplicationType(WebApplicationType webApplicationType) {\n\t\tAssert.notNull(webApplicationType, \"'webApplicationType' must not be null\");\n\t\tthis.properties.setWebApplicationType(webApplicationType);\n\t}", "doc_comment": "/**\n\t * Sets the type of web application to be run. If not explicitly set the type of web\n\t * application will be deduced based on the classpath.\n\t * @param webApplicationType the web application type\n\t * @since 2.0.0\n\t */"}, "code_tokens": ["void", "setWebApplicationType", "public", "(", ")", "{", "}", "WebApplicationType", "webApplicationType", ";", ";", "Assert", ".", "notNull", ".", "setWebApplicationType", "(", "webApplicationType", ",", ")", "this", ".", "properties", "(", "webApplicationType", ")", "\"", "'webApplicationType' must not be null", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 43, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 18, "n_whitespaces": 17, "n_words": 17, "nloc": 4, "token_counts": 29}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#975-977", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "setAllowBeanDefinitionOverriding", "qualified_name": "org.springframework.boot.SpringApplication#setAllowBeanDefinitionOverriding", "start_line": 975, "end_line": 977, "signature": "setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding)", "original_code": "public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding) {\n\t\tthis.properties.setAllowBeanDefinitionOverriding(allowBeanDefinitionOverriding);\n\t}", "doc_comment": "/**\n\t * Sets if bean definition overriding, by registering a definition with the same name\n\t * as an existing definition, should be allowed. Defaults to {@code false}.\n\t * @param allowBeanDefinitionOverriding if overriding is allowed\n\t * @since 2.1.0\n\t * @see DefaultListableBeanFactory#setAllowBeanDefinitionOverriding(boolean)\n\t */"}, "code_tokens": ["void", "setAllowBeanDefinitionOverriding", "public", "(", ")", "{", "}", "boolean", "allowBeanDefinitionOverriding", ";", ".", "setAllowBeanDefinitionOverriding", "this", ".", "properties", "(", "allowBeanDefinitionOverriding", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 13, "n_whitespaces": 9, "n_words": 9, "nloc": 3, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#986-988", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "setAllowCircularReferences", "qualified_name": "org.springframework.boot.SpringApplication#setAllowCircularReferences", "start_line": 986, "end_line": 988, "signature": "setAllowCircularReferences(boolean allowCircularReferences)", "original_code": "public void setAllowCircularReferences(boolean allowCircularReferences) {\n\t\tthis.properties.setAllowCircularReferences(allowCircularReferences);\n\t}", "doc_comment": "/**\n\t * Sets whether to allow circular references between beans and automatically try to\n\t * resolve them. Defaults to {@code false}.\n\t * @param allowCircularReferences if circular references are allowed\n\t * @since 2.6.0\n\t * @see AbstractAutowireCapableBeanFactory#setAllowCircularReferences(boolean)\n\t */"}, "code_tokens": ["void", "setAllowCircularReferences", "public", "(", ")", "{", "}", "boolean", "allowCircularReferences", ";", ".", "setAllowCircularReferences", "this", ".", "properties", "(", "allowCircularReferences", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 13, "n_whitespaces": 9, "n_words": 9, "nloc": 3, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#996-998", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "setLazyInitialization", "qualified_name": "org.springframework.boot.SpringApplication#setLazyInitialization", "start_line": 996, "end_line": 998, "signature": "setLazyInitialization(boolean lazyInitialization)", "original_code": "public void setLazyInitialization(boolean lazyInitialization) {\n\t\tthis.properties.setLazyInitialization(lazyInitialization);\n\t}", "doc_comment": "/**\n\t * Sets if beans should be initialized lazily. Defaults to {@code false}.\n\t * @param lazyInitialization if initialization should be lazy\n\t * @since 2.2\n\t * @see BeanDefinition#setLazyInit(boolean)\n\t */"}, "code_tokens": ["void", "setLazyInitialization", "public", "(", ")", "{", "}", "boolean", "lazyInitialization", ";", ".", "setLazyInitialization", "this", ".", "properties", "(", "lazyInitialization", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 13, "n_whitespaces": 9, "n_words": 9, "nloc": 3, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1005-1007", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "setHeadless", "qualified_name": "org.springframework.boot.SpringApplication#setHeadless", "start_line": 1005, "end_line": 1007, "signature": "setHeadless(boolean headless)", "original_code": "public void setHeadless(boolean headless) {\n\t\tthis.headless = headless;\n\t}", "doc_comment": "/**\n\t * Sets if the application is headless and should not instantiate AWT. Defaults to\n\t * {@code true} to prevent java icons appearing.\n\t * @param headless if the application is headless\n\t */"}, "code_tokens": ["void", "setHeadless", "public", "(", ")", "{", "}", "boolean", "headless", ";", "=", "headless", "this", ".", "headless"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 24, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 13, "n_whitespaces": 11, "n_words": 8, "nloc": 3, "token_counts": 15}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1016-1018", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "setRegisterShutdownHook", "qualified_name": "org.springframework.boot.SpringApplication#setRegisterShutdownHook", "start_line": 1016, "end_line": 1018, "signature": "setRegisterShutdownHook(boolean registerShutdownHook)", "original_code": "public void setRegisterShutdownHook(boolean registerShutdownHook) {\n\t\tthis.properties.setRegisterShutdownHook(registerShutdownHook);\n\t}", "doc_comment": "/**\n\t * Sets if the created {@link ApplicationContext} should have a shutdown hook\n\t * registered. Defaults to {@code true} to ensure that JVM shutdowns are handled\n\t * gracefully.\n\t * @param registerShutdownHook if the shutdown hook should be registered\n\t * @see #getShutdownHandlers()\n\t */"}, "code_tokens": ["void", "setRegisterShutdownHook", "public", "(", ")", "{", "}", "boolean", "registerShutdownHook", ";", ".", "setRegisterShutdownHook", "this", ".", "properties", "(", "registerShutdownHook", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 13, "n_whitespaces": 9, "n_words": 9, "nloc": 3, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1025-1027", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "setBanner", "qualified_name": "org.springframework.boot.SpringApplication#setBanner", "start_line": 1025, "end_line": 1027, "signature": "setBanner(Banner banner)", "original_code": "public void setBanner(Banner banner) {\n\t\tthis.banner = banner;\n\t}", "doc_comment": "/**\n\t * Sets the {@link Banner} instance which will be used to print the banner when no\n\t * static banner file is provided.\n\t * @param banner the Banner instance to use\n\t */"}, "code_tokens": ["void", "setBanner", "public", "(", ")", "{", "}", "Banner", "banner", ";", "=", "banner", "this", ".", "banner"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 24, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 13, "n_whitespaces": 11, "n_words": 8, "nloc": 3, "token_counts": 15}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1034-1036", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "setBannerMode", "qualified_name": "org.springframework.boot.SpringApplication#setBannerMode", "start_line": 1034, "end_line": 1036, "signature": "setBannerMode(Banner.Mode bannerMode)", "original_code": "public void setBannerMode(Banner.Mode bannerMode) {\n\t\tthis.properties.setBannerMode(bannerMode);\n\t}", "doc_comment": "/**\n\t * Sets the mode used to display the banner when the application runs. Defaults to\n\t * {@code Banner.Mode.CONSOLE}.\n\t * @param bannerMode the mode used to display the banner\n\t */"}, "code_tokens": ["void", "setBannerMode", "public", "(", ")", "{", "}", "bannerMode", ";", "Banner", ".", "Mode", ".", "setBannerMode", "this", ".", "properties", "(", "bannerMode", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 31, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 9, "n_words": 10, "nloc": 3, "token_counts": 20}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1043-1045", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "setLogStartupInfo", "qualified_name": "org.springframework.boot.SpringApplication#setLogStartupInfo", "start_line": 1043, "end_line": 1045, "signature": "setLogStartupInfo(boolean logStartupInfo)", "original_code": "public void setLogStartupInfo(boolean logStartupInfo) {\n\t\tthis.properties.setLogStartupInfo(logStartupInfo);\n\t}", "doc_comment": "/**\n\t * Sets if the application information should be logged when the application starts.\n\t * Defaults to {@code true}.\n\t * @param logStartupInfo if startup info should be logged.\n\t */"}, "code_tokens": ["void", "setLogStartupInfo", "public", "(", ")", "{", "}", "boolean", "logStartupInfo", ";", ".", "setLogStartupInfo", "this", ".", "properties", "(", "logStartupInfo", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 13, "n_whitespaces": 9, "n_words": 9, "nloc": 3, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1052-1054", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "setAddCommandLineProperties", "qualified_name": "org.springframework.boot.SpringApplication#setAddCommandLineProperties", "start_line": 1052, "end_line": 1054, "signature": "setAddCommandLineProperties(boolean addCommandLineProperties)", "original_code": "public void setAddCommandLineProperties(boolean addCommandLineProperties) {\n\t\tthis.addCommandLineProperties = addCommandLineProperties;\n\t}", "doc_comment": "/**\n\t * Sets if a {@link CommandLinePropertySource} should be added to the application\n\t * context in order to expose arguments. Defaults to {@code true}.\n\t * @param addCommandLineProperties if command line arguments should be exposed\n\t */"}, "code_tokens": ["void", "setAddCommandLineProperties", "public", "(", ")", "{", "}", "boolean", "addCommandLineProperties", ";", "=", "addCommandLineProperties", "this", ".", "addCommandLineProperties"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 24, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 13, "n_whitespaces": 11, "n_words": 8, "nloc": 3, "token_counts": 15}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1062-1064", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "setAddConversionService", "qualified_name": "org.springframework.boot.SpringApplication#setAddConversionService", "start_line": 1062, "end_line": 1064, "signature": "setAddConversionService(boolean addConversionService)", "original_code": "public void setAddConversionService(boolean addConversionService) {\n\t\tthis.addConversionService = addConversionService;\n\t}", "doc_comment": "/**\n\t * Sets if the {@link ApplicationConversionService} should be added to the application\n\t * context's {@link Environment}.\n\t * @param addConversionService if the application conversion service should be added\n\t * @since 2.1.0\n\t */"}, "code_tokens": ["void", "setAddConversionService", "public", "(", ")", "{", "}", "boolean", "addConversionService", ";", "=", "addConversionService", "this", ".", "addConversionService"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 24, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 13, "n_whitespaces": 11, "n_words": 8, "nloc": 3, "token_counts": 15}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1072-1075", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "addBootstrapRegistryInitializer", "qualified_name": "org.springframework.boot.SpringApplication#addBootstrapRegistryInitializer", "start_line": 1072, "end_line": 1075, "signature": "addBootstrapRegistryInitializer(BootstrapRegistryInitializer bootstrapRegistryInitializer)", "original_code": "public void addBootstrapRegistryInitializer(BootstrapRegistryInitializer bootstrapRegistryInitializer) {\n\t\tAssert.notNull(bootstrapRegistryInitializer, \"'bootstrapRegistryInitializer' must not be null\");\n\t\tthis.bootstrapRegistryInitializers.addAll(Arrays.asList(bootstrapRegistryInitializer));\n\t}", "doc_comment": "/**\n\t * Adds {@link BootstrapRegistryInitializer} instances that can be used to initialize\n\t * the {@link BootstrapRegistry}.\n\t * @param bootstrapRegistryInitializer the bootstrap registry initializer to add\n\t * @since 2.4.5\n\t */"}, "code_tokens": ["void", "addBootstrapRegistryInitializer", "public", "(", ")", "{", "}", "BootstrapRegistryInitializer", "bootstrapRegistryInitializer", ";", ";", "Assert", ".", "notNull", ".", "addAll", "(", "bootstrapRegistryInitializer", ",", ")", "this", ".", "bootstrapRegistryInitializers", "(", ")", "\"", "'bootstrapRegistryInitializer' must not be null", "\"", "Arrays", ".", "asList", "(", "bootstrapRegistryInitializer", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 50, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 21, "n_whitespaces": 17, "n_words": 19, "nloc": 4, "token_counts": 34}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1082-1084", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "setDefaultProperties", "qualified_name": "org.springframework.boot.SpringApplication#setDefaultProperties", "start_line": 1082, "end_line": 1084, "signature": "setDefaultProperties(Map<String, Object> defaultProperties)", "original_code": "public void setDefaultProperties(Map<String, Object> defaultProperties) {\n\t\tthis.defaultProperties = defaultProperties;\n\t}", "doc_comment": "/**\n\t * Set default environment properties which will be used in addition to those in the\n\t * existing {@link Environment}.\n\t * @param defaultProperties the additional properties to set\n\t */"}, "code_tokens": ["void", "setDefaultProperties", "public", "(", ")", "{", "}", "defaultProperties", ";", "Map", "=", "defaultProperties", "<", "String", ",", "Object", ">", "this", ".", "defaultProperties"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 31, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 18, "n_whitespaces": 12, "n_words": 10, "nloc": 3, "token_counts": 20}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1090-1095", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "setDefaultProperties", "qualified_name": "org.springframework.boot.SpringApplication#setDefaultProperties", "start_line": 1090, "end_line": 1095, "signature": "setDefaultProperties(Properties defaultProperties)", "original_code": "public void setDefaultProperties(Properties defaultProperties) {\n\t\tthis.defaultProperties = new HashMap<>();\n\t\tfor (Object key : Collections.list(defaultProperties.propertyNames())) {\n\t\t\tthis.defaultProperties.put((String) key, defaultProperties.get(key));\n\t\t}\n\t}", "doc_comment": "/**\n\t * Convenient alternative to {@link #setDefaultProperties(Map)}.\n\t * @param defaultProperties some {@link Properties}\n\t */"}, "code_tokens": ["void", "setDefaultProperties", "public", "(", ")", "{", "}", "Properties", "defaultProperties", ";", "for", "(", "Object", "key", ":", ")", "=", "Collections", ".", "list", "{", "}", "this", ".", "defaultProperties", "new", "(", ")", ";", "HashMap", "(", ")", "defaultProperties", ".", "propertyNames", ".", "put", "<", ">", "(", ")", "this", ".", "defaultProperties", "(", ",", ")", "(", "String", ")", "key", "defaultProperties", ".", "get", "(", "key", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 83, "ast_depth": 11, "n_identifiers": 8, "vocab_size": 28, "n_whitespaces": 29, "n_words": 24, "nloc": 6, "token_counts": 57}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1102-1104", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "setAdditionalProfiles", "qualified_name": "org.springframework.boot.SpringApplication#setAdditionalProfiles", "start_line": 1102, "end_line": 1104, "signature": "setAdditionalProfiles(String... profiles)", "original_code": "public void setAdditionalProfiles(String... profiles) {\n\t\tthis.additionalProfiles = Collections.unmodifiableSet(new LinkedHashSet<>(Arrays.asList(profiles)));\n\t}", "doc_comment": "/**\n\t * Set additional profile values to use (on top of those set in system or command line\n\t * properties).\n\t * @param profiles the additional profiles to set\n\t */"}, "code_tokens": ["void", "setAdditionalProfiles", "public", "(", ")", "{", "}", "String", "...", ";", "profiles", "=", "this", ".", "additionalProfiles", "Collections", ".", "unmodifiableSet", "(", ")", "new", "LinkedHashSet", "(", ")", "<", ">", "Arrays", ".", "asList", "(", "profiles", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 50, "ast_depth": 12, "n_identifiers": 7, "vocab_size": 23, "n_whitespaces": 12, "n_words": 14, "nloc": 3, "token_counts": 32}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1110-1112", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "getAdditionalProfiles", "qualified_name": "org.springframework.boot.SpringApplication#getAdditionalProfiles", "start_line": 1110, "end_line": 1112, "signature": "getAdditionalProfiles()", "original_code": "public Set<String> getAdditionalProfiles() {\n\t\treturn this.additionalProfiles;\n\t}", "doc_comment": "/**\n\t * Return an immutable set of any additional profiles in use.\n\t * @return the additional profiles\n\t */"}, "code_tokens": ["getAdditionalProfiles", "public", "Set", "(", ")", "{", "}", "<", "String", ">", "return", ";", "this", ".", "additionalProfiles"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 24, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 15, "n_whitespaces": 9, "n_words": 7, "nloc": 3, "token_counts": 15}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1118-1120", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "setBeanNameGenerator", "qualified_name": "org.springframework.boot.SpringApplication#setBeanNameGenerator", "start_line": 1118, "end_line": 1120, "signature": "setBeanNameGenerator(BeanNameGenerator beanNameGenerator)", "original_code": "public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {\n\t\tthis.beanNameGenerator = beanNameGenerator;\n\t}", "doc_comment": "/**\n\t * Sets the bean name generator that should be used when generating bean names.\n\t * @param beanNameGenerator the bean name generator\n\t */"}, "code_tokens": ["void", "setBeanNameGenerator", "public", "(", ")", "{", "}", "BeanNameGenerator", "beanNameGenerator", ";", "=", "beanNameGenerator", "this", ".", "beanNameGenerator"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 24, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 13, "n_whitespaces": 11, "n_words": 8, "nloc": 3, "token_counts": 15}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1127-1130", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "setEnvironment", "qualified_name": "org.springframework.boot.SpringApplication#setEnvironment", "start_line": 1127, "end_line": 1130, "signature": "setEnvironment(@Nullable ConfigurableEnvironment environment)", "original_code": "public void setEnvironment(@Nullable ConfigurableEnvironment environment) {\n\t\tthis.isCustomEnvironment = true;\n\t\tthis.environment = environment;\n\t}", "doc_comment": "/**\n\t * Sets the underlying environment that should be used with the created application\n\t * context.\n\t * @param environment the environment\n\t */"}, "code_tokens": ["void", "setEnvironment", "public", "(", ")", "{", "}", "ConfigurableEnvironment", "environment", ";", ";", "=", "true", "=", "environment", "@", "Nullable", "this", ".", "isCustomEnvironment", "this", ".", "environment"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 37, "ast_depth": 7, "n_identifiers": 4, "vocab_size": 17, "n_whitespaces": 17, "n_words": 12, "nloc": 4, "token_counts": 23}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1145-1147", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "addPrimarySources", "qualified_name": "org.springframework.boot.SpringApplication#addPrimarySources", "start_line": 1145, "end_line": 1147, "signature": "addPrimarySources(Collection<Class<?>> additionalPrimarySources)", "original_code": "public void addPrimarySources(Collection<Class<?>> additionalPrimarySources) {\n\t\tthis.primarySources.addAll(additionalPrimarySources);\n\t}", "doc_comment": "/**\n\t * Add additional items to the primary sources that will be added to an\n\t * ApplicationContext when {@link #run(String...)} is called.\n\t * <p>\n\t * The sources here are added to those that were set in the constructor. Most users\n\t * should consider using {@link #getSources()}/{@link #setSources(Set)} rather than\n\t * calling this method.\n\t * @param additionalPrimarySources the additional primary sources to add\n\t * @see #SpringApplication(Class...)\n\t * @see #getSources()\n\t * @see #setSources(Set)\n\t * @see #getAllSources()\n\t */"}, "code_tokens": ["void", "addPrimarySources", "public", "(", ")", "{", "}", "additionalPrimarySources", ";", "Collection", ".", "addAll", "<", ">", "this", ".", "primarySources", "(", "additionalPrimarySources", ")", "Class", "<", ">", "?"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 39, "ast_depth": 10, "n_identifiers": 4, "vocab_size": 18, "n_whitespaces": 9, "n_words": 10, "nloc": 3, "token_counts": 24}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1159-1161", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "getSources", "qualified_name": "org.springframework.boot.SpringApplication#getSources", "start_line": 1159, "end_line": 1161, "signature": "getSources()", "original_code": "public Set<String> getSources() {\n\t\treturn this.properties.getSources();\n\t}", "doc_comment": "/**\n\t * Returns a mutable set of the sources that will be added to an ApplicationContext\n\t * when {@link #run(String...)} is called.\n\t * <p>\n\t * Sources set here will be used in addition to any primary sources set in the\n\t * constructor.\n\t * @return the application sources.\n\t * @see #SpringApplication(Class...)\n\t * @see #getAllSources()\n\t */"}, "code_tokens": ["getSources", "public", "Set", "(", ")", "{", "}", "<", "String", ">", "return", ";", ".", "getSources", "this", ".", "properties", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 30, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 15, "n_whitespaces": 9, "n_words": 8, "nloc": 3, "token_counts": 19}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1173-1176", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "setSources", "qualified_name": "org.springframework.boot.SpringApplication#setSources", "start_line": 1173, "end_line": 1176, "signature": "setSources(Set<String> sources)", "original_code": "public void setSources(Set<String> sources) {\n\t\tAssert.notNull(sources, \"'sources' must not be null\");\n\t\tthis.properties.setSources(sources);\n\t}", "doc_comment": "/**\n\t * Set additional sources that will be used to create an ApplicationContext. A source\n\t * can be: a class name, package name, or an XML resource location.\n\t * <p>\n\t * Sources set here will be used in addition to any primary sources set in the\n\t * constructor.\n\t * @param sources the application sources to set\n\t * @see #SpringApplication(Class...)\n\t * @see #getAllSources()\n\t */"}, "code_tokens": ["void", "setSources", "public", "(", ")", "{", "}", "sources", ";", ";", "Set", "Assert", ".", "notNull", ".", "setSources", "<", "String", ">", "(", "sources", ",", ")", "this", ".", "properties", "(", "sources", ")", "\"", "'sources' must not be null", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 48, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 21, "n_whitespaces": 17, "n_words": 18, "nloc": 4, "token_counts": 32}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1185-1194", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "getAllSources", "qualified_name": "org.springframework.boot.SpringApplication#getAllSources", "start_line": 1185, "end_line": 1194, "signature": "getAllSources()", "original_code": "public Set<Object> getAllSources() {\n\t\tSet<Object> allSources = new LinkedHashSet<>();\n\t\tif (!CollectionUtils.isEmpty(this.primarySources)) {\n\t\t\tallSources.addAll(this.primarySources);\n\t\t}\n\t\tif (!CollectionUtils.isEmpty(this.properties.getSources())) {\n\t\t\tallSources.addAll(this.properties.getSources());\n\t\t}\n\t\treturn Collections.unmodifiableSet(allSources);\n\t}", "doc_comment": "/**\n\t * Return an immutable set of all the sources that will be added to an\n\t * ApplicationContext when {@link #run(String...)} is called. This method combines any\n\t * primary sources specified in the constructor with any additional ones that have\n\t * been {@link #setSources(Set) explicitly set}.\n\t * @return an immutable set of all sources\n\t */"}, "code_tokens": ["getAllSources", "public", "Set", "(", ")", "{", "}", "<", "Object", ">", ";", "if", "if", "return", ";", "Set", "allSources", "=", "(", ")", "{", "}", "(", ")", "{", "}", "Collections", ".", "unmodifiableSet", "<", "Object", ">", "new", "!", ";", "!", ";", "(", "allSources", ")", "LinkedHashSet", "(", ")", "CollectionUtils", ".", "isEmpty", "allSources", ".", "addAll", "CollectionUtils", ".", "isEmpty", "allSources", ".", "addAll", "<", ">", "(", ")", "(", ")", "(", ")", "(", ")", "this", ".", "primarySources", "this", ".", "primarySources", ".", "getSources", ".", "getSources", "this", ".", "properties", "(", ")", "this", ".", "properties", "(", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 129, "ast_depth": 11, "n_identifiers": 10, "vocab_size": 28, "n_whitespaces": 40, "n_words": 33, "nloc": 10, "token_counts": 85}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1200-1203", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "setResourceLoader", "qualified_name": "org.springframework.boot.SpringApplication#setResourceLoader", "start_line": 1200, "end_line": 1203, "signature": "setResourceLoader(ResourceLoader resourceLoader)", "original_code": "public void setResourceLoader(ResourceLoader resourceLoader) {\n\t\tAssert.notNull(resourceLoader, \"'resourceLoader' must not be null\");\n\t\tthis.resourceLoader = resourceLoader;\n\t}", "doc_comment": "/**\n\t * Sets the {@link ResourceLoader} that should be used when loading resources.\n\t * @param resourceLoader the resource loader\n\t */"}, "code_tokens": ["void", "setResourceLoader", "public", "(", ")", "{", "}", "ResourceLoader", "resourceLoader", ";", ";", "Assert", ".", "notNull", "=", "resourceLoader", "(", "resourceLoader", ",", ")", "this", ".", "resourceLoader", "\"", "'resourceLoader' must not be null", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 39, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 18, "n_whitespaces": 19, "n_words": 16, "nloc": 4, "token_counts": 26}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1211-1213", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "getEnvironmentPrefix", "qualified_name": "org.springframework.boot.SpringApplication#getEnvironmentPrefix", "start_line": 1211, "end_line": 1213, "signature": "getEnvironmentPrefix()", "original_code": "public @Nullable String getEnvironmentPrefix() {\n\t\treturn this.environmentPrefix;\n\t}", "doc_comment": "/**\n\t * Return a prefix that should be applied when obtaining configuration properties from\n\t * the system environment.\n\t * @return the environment property prefix\n\t * @since 2.5.0\n\t */"}, "code_tokens": ["String", "getEnvironmentPrefix", "public", "(", ")", "{", "}", "@", "Nullable", "return", ";", "this", ".", "environmentPrefix"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 10, "n_words": 7, "nloc": 3, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1221-1223", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "setEnvironmentPrefix", "qualified_name": "org.springframework.boot.SpringApplication#setEnvironmentPrefix", "start_line": 1221, "end_line": 1223, "signature": "setEnvironmentPrefix(String environmentPrefix)", "original_code": "public void setEnvironmentPrefix(String environmentPrefix) {\n\t\tthis.environmentPrefix = environmentPrefix;\n\t}", "doc_comment": "/**\n\t * Set the prefix that should be applied when obtaining configuration properties from\n\t * the system environment.\n\t * @param environmentPrefix the environment property prefix to set\n\t * @since 2.5.0\n\t */"}, "code_tokens": ["void", "setEnvironmentPrefix", "public", "(", ")", "{", "}", "String", "environmentPrefix", ";", "=", "environmentPrefix", "this", ".", "environmentPrefix"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 24, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 13, "n_whitespaces": 11, "n_words": 8, "nloc": 3, "token_counts": 15}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1233-1236", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "setApplicationContextFactory", "qualified_name": "org.springframework.boot.SpringApplication#setApplicationContextFactory", "start_line": 1233, "end_line": 1236, "signature": "setApplicationContextFactory(@Nullable ApplicationContextFactory applicationContextFactory)", "original_code": "public void setApplicationContextFactory(@Nullable ApplicationContextFactory applicationContextFactory) {\n\t\tthis.applicationContextFactory = (applicationContextFactory != null) ? applicationContextFactory\n\t\t\t\t: ApplicationContextFactory.DEFAULT;\n\t}", "doc_comment": "/**\n\t * Sets the factory that will be called to create the application context. If not set,\n\t * defaults to a factory that will create a context that is appropriate for the\n\t * application's type (a reactive web application, a servlet web application, or a\n\t * non-web application).\n\t * @param applicationContextFactory the factory for the context\n\t * @since 2.4.0\n\t */"}, "code_tokens": ["void", "setApplicationContextFactory", "public", "(", ")", "{", "}", "ApplicationContextFactory", "applicationContextFactory", ";", "=", "@", "Nullable", "this", ".", "applicationContextFactory", "?", "applicationContextFactory", ":", "(", ")", "ApplicationContextFactory", ".", "DEFAULT", "applicationContextFactory", "!=", "null"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 42, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 20, "n_whitespaces": 22, "n_words": 13, "nloc": 4, "token_counts": 27}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1243-1245", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "setInitializers", "qualified_name": "org.springframework.boot.SpringApplication#setInitializers", "start_line": 1243, "end_line": 1245, "signature": "setInitializers(Collection<? extends ApplicationContextInitializer<?>> initializers)", "original_code": "public void setInitializers(Collection<? extends ApplicationContextInitializer<?>> initializers) {\n\t\tthis.initializers = new ArrayList<>(initializers);\n\t}", "doc_comment": "/**\n\t * Sets the {@link ApplicationContextInitializer} that will be applied to the Spring\n\t * {@link ApplicationContext}.\n\t * @param initializers the initializers to set\n\t */"}, "code_tokens": ["void", "setInitializers", "public", "(", ")", "{", "}", "initializers", ";", "Collection", "=", "<", ">", "this", ".", "initializers", "new", "?", "extends", "ArrayList", "(", "initializers", ")", "ApplicationContextInitializer", "<", ">", "<", ">", "?"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 48, "ast_depth": 11, "n_identifiers": 2, "vocab_size": 20, "n_whitespaces": 14, "n_words": 12, "nloc": 3, "token_counts": 29}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1252-1254", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "addInitializers", "qualified_name": "org.springframework.boot.SpringApplication#addInitializers", "start_line": 1252, "end_line": 1254, "signature": "addInitializers(ApplicationContextInitializer<?>... initializers)", "original_code": "public void addInitializers(ApplicationContextInitializer<?>... initializers) {\n\t\tthis.initializers.addAll(Arrays.asList(initializers));\n\t}", "doc_comment": "/**\n\t * Add {@link ApplicationContextInitializer}s to be applied to the Spring\n\t * {@link ApplicationContext}.\n\t * @param initializers the initializers to add\n\t */"}, "code_tokens": ["void", "addInitializers", "public", "(", ")", "{", "}", "...", ";", "ApplicationContextInitializer", "initializers", ".", "addAll", "<", ">", "this", ".", "initializers", "(", ")", "?", "Arrays", ".", "asList", "(", "initializers", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 43, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 19, "n_whitespaces": 9, "n_words": 11, "nloc": 3, "token_counts": 27}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1261-1263", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "getInitializers", "qualified_name": "org.springframework.boot.SpringApplication#getInitializers", "start_line": 1261, "end_line": 1263, "signature": "getInitializers()", "original_code": "public Set<ApplicationContextInitializer<?>> getInitializers() {\n\t\treturn asUnmodifiableOrderedSet(this.initializers);\n\t}", "doc_comment": "/**\n\t * Returns read-only ordered Set of the {@link ApplicationContextInitializer}s that\n\t * will be applied to the Spring {@link ApplicationContext}.\n\t * @return the initializers\n\t */"}, "code_tokens": ["getInitializers", "public", "Set", "(", ")", "{", "}", "<", ">", "return", ";", "ApplicationContextInitializer", "asUnmodifiableOrderedSet", "<", ">", "(", ")", "?", "this", ".", "initializers"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 35, "ast_depth": 8, "n_identifiers": 3, "vocab_size": 17, "n_whitespaces": 9, "n_words": 8, "nloc": 3, "token_counts": 21}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1270-1272", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "setListeners", "qualified_name": "org.springframework.boot.SpringApplication#setListeners", "start_line": 1270, "end_line": 1272, "signature": "setListeners(Collection<? extends ApplicationListener<?>> listeners)", "original_code": "public void setListeners(Collection<? extends ApplicationListener<?>> listeners) {\n\t\tthis.listeners = new ArrayList<>(listeners);\n\t}", "doc_comment": "/**\n\t * Sets the {@link ApplicationListener}s that will be applied to the SpringApplication\n\t * and registered with the {@link ApplicationContext}.\n\t * @param listeners the listeners to set\n\t */"}, "code_tokens": ["void", "setListeners", "public", "(", ")", "{", "}", "listeners", ";", "Collection", "=", "<", ">", "this", ".", "listeners", "new", "?", "extends", "ArrayList", "(", "listeners", ")", "ApplicationListener", "<", ">", "<", ">", "?"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 48, "ast_depth": 11, "n_identifiers": 2, "vocab_size": 20, "n_whitespaces": 14, "n_words": 12, "nloc": 3, "token_counts": 29}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1279-1281", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "addListeners", "qualified_name": "org.springframework.boot.SpringApplication#addListeners", "start_line": 1279, "end_line": 1281, "signature": "addListeners(ApplicationListener<?>... listeners)", "original_code": "public void addListeners(ApplicationListener<?>... listeners) {\n\t\tthis.listeners.addAll(Arrays.asList(listeners));\n\t}", "doc_comment": "/**\n\t * Add {@link ApplicationListener}s to be applied to the SpringApplication and\n\t * registered with the {@link ApplicationContext}.\n\t * @param listeners the listeners to add\n\t */"}, "code_tokens": ["void", "addListeners", "public", "(", ")", "{", "}", "...", ";", "ApplicationListener", "listeners", ".", "addAll", "<", ">", "this", ".", "listeners", "(", ")", "?", "Arrays", ".", "asList", "(", "listeners", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 43, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 19, "n_whitespaces": 9, "n_words": 11, "nloc": 3, "token_counts": 27}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1289-1291", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "getListeners", "qualified_name": "org.springframework.boot.SpringApplication#getListeners", "start_line": 1289, "end_line": 1291, "signature": "getListeners()", "original_code": "public Set<ApplicationListener<?>> getListeners() {\n\t\treturn asUnmodifiableOrderedSet(this.listeners);\n\t}", "doc_comment": "/**\n\t * Returns read-only ordered Set of the {@link ApplicationListener}s that will be\n\t * applied to the SpringApplication and registered with the {@link ApplicationContext}\n\t * .\n\t * @return the listeners\n\t */"}, "code_tokens": ["getListeners", "public", "Set", "(", ")", "{", "}", "<", ">", "return", ";", "ApplicationListener", "asUnmodifiableOrderedSet", "<", ">", "(", ")", "?", "this", ".", "listeners"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 35, "ast_depth": 8, "n_identifiers": 3, "vocab_size": 17, "n_whitespaces": 9, "n_words": 8, "nloc": 3, "token_counts": 21}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1298-1300", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "setApplicationStartup", "qualified_name": "org.springframework.boot.SpringApplication#setApplicationStartup", "start_line": 1298, "end_line": 1300, "signature": "setApplicationStartup(ApplicationStartup applicationStartup)", "original_code": "public void setApplicationStartup(ApplicationStartup applicationStartup) {\n\t\tthis.applicationStartup = (applicationStartup != null) ? applicationStartup : ApplicationStartup.DEFAULT;\n\t}", "doc_comment": "/**\n\t * Set the {@link ApplicationStartup} to use for collecting startup metrics.\n\t * @param applicationStartup the application startup to use\n\t * @since 2.4.0\n\t */"}, "code_tokens": ["void", "setApplicationStartup", "public", "(", ")", "{", "}", "ApplicationStartup", "applicationStartup", ";", "=", "this", ".", "applicationStartup", "?", "applicationStartup", ":", "(", ")", "ApplicationStartup", ".", "DEFAULT", "applicationStartup", "!=", "null"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 38, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 18, "n_whitespaces": 17, "n_words": 12, "nloc": 3, "token_counts": 25}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1307-1309", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "getApplicationStartup", "qualified_name": "org.springframework.boot.SpringApplication#getApplicationStartup", "start_line": 1307, "end_line": 1309, "signature": "getApplicationStartup()", "original_code": "public ApplicationStartup getApplicationStartup() {\n\t\treturn this.applicationStartup;\n\t}", "doc_comment": "/**\n\t * Returns the {@link ApplicationStartup} used for collecting startup metrics.\n\t * @return the application startup\n\t * @since 2.4.0\n\t */"}, "code_tokens": ["ApplicationStartup", "getApplicationStartup", "public", "(", ")", "{", "}", "return", ";", "this", ".", "applicationStartup"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 19, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 12, "n_whitespaces": 9, "n_words": 6, "nloc": 3, "token_counts": 12}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1317-1319", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "isKeepAlive", "qualified_name": "org.springframework.boot.SpringApplication#isKeepAlive", "start_line": 1317, "end_line": 1319, "signature": "isKeepAlive()", "original_code": "public boolean isKeepAlive() {\n\t\treturn this.properties.isKeepAlive();\n\t}", "doc_comment": "/**\n\t * Whether to keep the application alive even if there are no more non-daemon threads.\n\t * @return whether to keep the application alive even if there are no more non-daemon\n\t * threads\n\t * @since 3.2.0\n\t */"}, "code_tokens": ["boolean", "isKeepAlive", "public", "(", ")", "{", "}", "return", ";", ".", "isKeepAlive", "this", ".", "properties", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 25, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 12, "n_whitespaces": 9, "n_words": 7, "nloc": 3, "token_counts": 16}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1328-1330", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "setKeepAlive", "qualified_name": "org.springframework.boot.SpringApplication#setKeepAlive", "start_line": 1328, "end_line": 1330, "signature": "setKeepAlive(boolean keepAlive)", "original_code": "public void setKeepAlive(boolean keepAlive) {\n\t\tthis.properties.setKeepAlive(keepAlive);\n\t}", "doc_comment": "/**\n\t * Set whether to keep the application alive even if there are no more non-daemon\n\t * threads.\n\t * @param keepAlive whether to keep the application alive even if there are no more\n\t * non-daemon threads\n\t * @since 3.2.0\n\t */"}, "code_tokens": ["void", "setKeepAlive", "public", "(", ")", "{", "}", "boolean", "keepAlive", ";", ".", "setKeepAlive", "this", ".", "properties", "(", "keepAlive", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 13, "n_whitespaces": 9, "n_words": 9, "nloc": 3, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1338-1340", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "getShutdownHandlers", "qualified_name": "org.springframework.boot.SpringApplication#getShutdownHandlers", "start_line": 1338, "end_line": 1340, "signature": "getShutdownHandlers()", "original_code": "public static SpringApplicationShutdownHandlers getShutdownHandlers() {\n\t\treturn shutdownHook.getHandlers();\n\t}", "doc_comment": "/**\n\t * Return a {@link SpringApplicationShutdownHandlers} instance that can be used to add\n\t * or remove handlers that perform actions before the JVM is shutdown.\n\t * @return a {@link SpringApplicationShutdownHandlers} instance\n\t * @since 2.5.1\n\t */"}, "code_tokens": ["SpringApplicationShutdownHandlers", "getShutdownHandlers", "public", "static", "(", ")", "{", "}", "return", ";", "shutdownHook", ".", "getHandlers", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 23, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 13, "n_whitespaces": 10, "n_words": 7, "nloc": 3, "token_counts": 15}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1349-1351", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "run", "qualified_name": "org.springframework.boot.SpringApplication#run", "start_line": 1349, "end_line": 1351, "signature": "run(Class<?> primarySource, String... args)", "original_code": "public static ConfigurableApplicationContext run(Class<?> primarySource, String... args) {\n\t\treturn run(new Class<?>[] { primarySource }, args);\n\t}", "doc_comment": "/**\n\t * Static helper that can be used to run a {@link SpringApplication} from the\n\t * specified source using default settings.\n\t * @param primarySource the primary source to load\n\t * @param args the application arguments (usually passed from a Java main method)\n\t * @return the running {@link ApplicationContext}\n\t */"}, "code_tokens": ["ConfigurableApplicationContext", "run", "public", "static", "(", ",", ")", "{", "}", "primarySource", "String", "...", "return", ";", "Class", "args", "run", "<", ">", "(", ",", "args", ")", "?", "new", "Class", "[", "]", "{", "primarySource", "}", "<", ">", "?"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 54, "ast_depth": 11, "n_identifiers": 3, "vocab_size": 22, "n_whitespaces": 18, "n_words": 14, "nloc": 3, "token_counts": 34}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1360-1362", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "run", "qualified_name": "org.springframework.boot.SpringApplication#run", "start_line": 1360, "end_line": 1362, "signature": "run(Class<?>[] primarySources, String[] args)", "original_code": "public static ConfigurableApplicationContext run(Class<?>[] primarySources, String[] args) {\n\t\treturn new SpringApplication(primarySources).run(args);\n\t}", "doc_comment": "/**\n\t * Static helper that can be used to run a {@link SpringApplication} from the\n\t * specified sources using default settings and user supplied arguments.\n\t * @param primarySources the primary sources to load\n\t * @param args the application arguments (usually passed from a Java main method)\n\t * @return the running {@link ApplicationContext}\n\t */"}, "code_tokens": ["ConfigurableApplicationContext", "run", "public", "static", "(", ",", ")", "{", "}", "primarySources", "args", "return", ";", "String", ".", "run", "Class", "[", "]", "[", "]", "new", "SpringApplication", "(", "args", ")", "<", ">", "(", "primarySources", ")", "?"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 51, "ast_depth": 9, "n_identifiers": 3, "vocab_size": 23, "n_whitespaces": 14, "n_words": 14, "nloc": 3, "token_counts": 32}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1376-1378", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "main", "qualified_name": "org.springframework.boot.SpringApplication#main", "start_line": 1376, "end_line": 1378, "signature": "main(String[] args)", "original_code": "public static void main(String[] args) throws Exception {\n\t\tSpringApplication.run(new Class<?>[0], args);\n\t}", "doc_comment": "/**\n\t * A basic main that can be used to launch an application. This method is useful when\n\t * application sources are defined through a {@literal --spring.main.sources} command\n\t * line argument.\n\t * <p>\n\t * Most developers will want to define their own main method and call the\n\t * {@link #run(Class, String...) run} method instead.\n\t * @param args command line arguments\n\t * @throws Exception if the application cannot be started\n\t * @see SpringApplication#run(Class[], String[])\n\t * @see SpringApplication#run(Class, String...)\n\t */"}, "code_tokens": ["void", "main", "public", "static", "(", ")", "throws", "Exception", "{", "}", "args", ";", "String", "SpringApplication", ".", "run", "[", "]", "(", ",", "args", ")", "new", "Class", "[", "0", "]", "<", ">", "?"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 47, "ast_depth": 11, "n_identifiers": 4, "vocab_size": 25, "n_whitespaces": 14, "n_words": 14, "nloc": 3, "token_counts": 30}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1392-1415", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "exit", "qualified_name": "org.springframework.boot.SpringApplication#exit", "start_line": 1392, "end_line": 1415, "signature": "exit(ApplicationContext context, ExitCodeGenerator... exitCodeGenerators)", "original_code": "public static int exit(ApplicationContext context, ExitCodeGenerator... exitCodeGenerators) {\n\t\tAssert.notNull(context, \"'context' must not be null\");\n\t\tint exitCode = 0;\n\t\ttry {\n\t\t\ttry {\n\t\t\t\tExitCodeGenerators generators = new ExitCodeGenerators();\n\t\t\t\tCollection<ExitCodeGenerator> beans = context.getBeansOfType(ExitCodeGenerator.class).values();\n\t\t\t\tgenerators.addAll(exitCodeGenerators);\n\t\t\t\tgenerators.addAll(beans);\n\t\t\t\texitCode = generators.getExitCode();\n\t\t\t\tif (exitCode != 0) {\n\t\t\t\t\tcontext.publishEvent(new ExitCodeEvent(context, exitCode));\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tclose(context);\n\t\t\t}\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tex.printStackTrace();\n\t\t\texitCode = (exitCode != 0) ? exitCode : 1;\n\t\t}\n\t\treturn exitCode;\n\t}", "doc_comment": "/**\n\t * Static helper that can be used to exit a {@link SpringApplication} and obtain a\n\t * code indicating success (0) or otherwise. Does not throw exceptions but should\n\t * print stack traces of any encountered. Applies the specified\n\t * {@link ExitCodeGenerator ExitCodeGenerators} in addition to any Spring beans that\n\t * implement {@link ExitCodeGenerator}. When multiple generators are available, the\n\t * first non-zero exit code is used. Generators are ordered based on their\n\t * {@link Ordered} implementation and {@link Order @Order} annotation.\n\t * @param context the context to close if possible\n\t * @param exitCodeGenerators exit code generators\n\t * @return the outcome (0 if successful)\n\t */"}, "code_tokens": ["exit", "public", "static", "int", "(", ",", ")", "{", "}", "ApplicationContext", "context", "ExitCodeGenerator", "...", ";", ";", "try", "return", "exitCode", ";", "exitCodeGenerators", "Assert", ".", "notNull", "int", "exitCode", "=", "0", "{", "}", "catch", "(", ")", "(", "context", ",", ")", "try", "ex", "{", "}", "\"", "'context' must not be null", "\"", "{", "}", "finally", "Exception", ";", ";", "ExitCodeGenerators", ";", ";", ";", ";", ";", "if", "{", "}", "ex", ".", "printStackTrace", "exitCode", "=", "generators", "=", "Collection", "beans", "=", "generators", ".", "addAll", "generators", ".", "addAll", "exitCode", "=", "(", ")", "{", "}", ";", "(", ")", "?", "exitCode", ":", "1", "new", "ExitCodeGenerators", "<", "ExitCodeGenerator", ">", ".", "values", "(", "exitCodeGenerators", ")", "(", "beans", ")", "generators", ".", "getExitCode", "exitCode", "!=", "0", ";", "close", "(", ")", "(", ")", "context", ".", "getBeansOfType", "(", ")", "(", ")", "context", ".", "publishEvent", "(", "context", ")", "exitCode", "!=", "0", "(", ")", "(", ")", "ExitCodeGenerator", ".", "class", "new", "ExitCodeEvent", "(", "context", ",", "exitCode", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 212, "ast_depth": 15, "n_identifiers": 16, "vocab_size": 50, "n_whitespaces": 138, "n_words": 66, "nloc": 24, "token_counts": 142}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1428-1431", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "from", "qualified_name": "org.springframework.boot.SpringApplication#from", "start_line": 1428, "end_line": 1431, "signature": "from(ThrowingConsumer<String[]> main)", "original_code": "public static SpringApplication.Augmented from(ThrowingConsumer<String[]> main) {\n\t\tAssert.notNull(main, \"'main' must not be null\");\n\t\treturn new Augmented(main, Collections.emptySet(), Collections.emptySet());\n\t}", "doc_comment": "/**\n\t * Create an application from an existing {@code main} method that can run with\n\t * additional {@code @Configuration} or bean classes. This method can be helpful when\n\t * writing a test harness that needs to start an application with additional\n\t * configuration.\n\t * @param main the main method entry point that runs the {@link SpringApplication}\n\t * @return a {@link SpringApplication.Augmented} instance that can be used to add\n\t * configuration and run the application\n\t * @since 3.1.0\n\t * @see #withHook(SpringApplicationHook, Runnable)\n\t */"}, "code_tokens": ["from", "public", "static", "SpringApplication", ".", "Augmented", "(", ")", "{", "}", "main", ";", "return", ";", "ThrowingConsumer", "Assert", ".", "notNull", "new", "Augmented", "<", ">", "(", "main", ",", ")", "(", "main", ",", ",", ")", "String", "\"", "'main' must not be null", "\"", "Collections", ".", "emptySet", "Collections", ".", "emptySet", "[", "]", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 69, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 27, "n_whitespaces": 22, "n_words": 24, "nloc": 4, "token_counts": 47}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1441-1446", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "withHook", "qualified_name": "org.springframework.boot.SpringApplication#withHook", "start_line": 1441, "end_line": 1446, "signature": "withHook(SpringApplicationHook hook, Runnable action)", "original_code": "public static void withHook(SpringApplicationHook hook, Runnable action) {\n\t\twithHook(hook, () -> {\n\t\t\taction.run();\n\t\t\treturn Void.class;\n\t\t});\n\t}", "doc_comment": "/**\n\t * Perform the given action with the given {@link SpringApplicationHook} attached if\n\t * the action triggers an {@link SpringApplication#run(String...) application run}.\n\t * @param hook the hook to apply\n\t * @param action the action to run\n\t * @since 3.0.0\n\t * @see #withHook(SpringApplicationHook, ThrowingSupplier)\n\t */"}, "code_tokens": ["void", "withHook", "public", "static", "(", ",", ")", "{", "}", "SpringApplicationHook", "hook", "Runnable", "action", ";", "withHook", "(", "hook", ",", ")", "->", "(", ")", "{", "}", ";", "return", ";", "action", ".", "run", "Void", ".", "class", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 53, "ast_depth": 12, "n_identifiers": 4, "vocab_size": 20, "n_whitespaces": 27, "n_words": 15, "nloc": 6, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1458-1466", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "withHook", "qualified_name": "org.springframework.boot.SpringApplication#withHook", "start_line": 1458, "end_line": 1466, "signature": "withHook(SpringApplicationHook hook, ThrowingSupplier<T> action)", "original_code": "public static <T> T withHook(SpringApplicationHook hook, ThrowingSupplier<T> action) {\n\t\tapplicationHook.set(hook);\n\t\ttry {\n\t\t\treturn action.get();\n\t\t}\n\t\tfinally {\n\t\t\tapplicationHook.remove();\n\t\t}\n\t}", "doc_comment": "/**\n\t * Perform the given action with the given {@link SpringApplicationHook} attached if\n\t * the action triggers an {@link SpringApplication#run(String...) application run}.\n\t * @param <T> the result type\n\t * @param hook the hook to apply\n\t * @param action the action to run\n\t * @return the result of the action\n\t * @since 3.0.0\n\t * @see #withHook(SpringApplicationHook, Runnable)\n\t */"}, "code_tokens": ["T", "withHook", "public", "static", "<", ">", "(", ",", ")", "{", "}", "T", "SpringApplicationHook", "hook", "action", ";", "try", "ThrowingSupplier", "applicationHook", ".", "set", "{", "}", "finally", "<", "T", ">", "(", "hook", ")", "return", ";", "{", "}", "action", ".", "get", ";", "(", ")", "applicationHook", ".", "remove", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 69, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 24, "n_whitespaces": 36, "n_words": 20, "nloc": 9, "token_counts": 45}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1468-1472", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "close", "qualified_name": "org.springframework.boot.SpringApplication#close", "start_line": 1468, "end_line": 1472, "signature": "close(ApplicationContext context)", "original_code": "private static void close(ApplicationContext context) {\n\t\tif (context instanceof ConfigurableApplicationContext closable) {\n\t\t\tclosable.close();\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "close", "private", "static", "(", ")", "{", "}", "ApplicationContext", "context", "if", "(", ")", "{", "}", "context", "instanceof", "ConfigurableApplicationContext", "closable", ";", "closable", ".", "close", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 38, "ast_depth": 9, "n_identifiers": 3, "vocab_size": 16, "n_whitespaces": 22, "n_words": 13, "nloc": 5, "token_counts": 25}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1474-1478", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "asUnmodifiableOrderedSet", "qualified_name": "org.springframework.boot.SpringApplication#asUnmodifiableOrderedSet", "start_line": 1474, "end_line": 1478, "signature": "asUnmodifiableOrderedSet(Collection<E> elements)", "original_code": "private static <E> Set<E> asUnmodifiableOrderedSet(Collection<E> elements) {\n\t\tList<E> list = new ArrayList<>(elements);\n\t\tlist.sort(AnnotationAwareOrderComparator.INSTANCE);\n\t\treturn new LinkedHashSet<>(list);\n\t}", "doc_comment": ""}, "code_tokens": ["asUnmodifiableOrderedSet", "private", "static", "<", ">", "Set", "(", ")", "{", "}", "E", "<", "E", ">", "elements", ";", ";", "return", ";", "Collection", "List", "list", "=", "list", ".", "sort", "new", "<", "E", ">", "<", "E", ">", "new", "(", ")", "LinkedHashSet", "(", "list", ")", "ArrayList", "(", "elements", ")", "AnnotationAwareOrderComparator", ".", "INSTANCE", "<", ">", "<", ">"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 80, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 25, "n_whitespaces": 23, "n_words": 23, "nloc": 5, "token_counts": 51}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1506-1510", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "with", "qualified_name": "org.springframework.boot.SpringApplication#with", "start_line": 1506, "end_line": 1510, "signature": "with(Class<?>... sources)", "original_code": "public Augmented with(Class<?>... sources) {\n\t\t\tLinkedHashSet<Class<?>> merged = new LinkedHashSet<>(this.sources);\n\t\t\tmerged.addAll(Arrays.asList(sources));\n\t\t\treturn new Augmented(this.main, merged, this.additionalProfiles);\n\t\t}", "doc_comment": "/**\n\t\t * Return a new {@link SpringApplication.Augmented} instance with additional\n\t\t * sources that should be applied when the application runs.\n\t\t * @param sources the sources that should be applied\n\t\t * @return a new {@link SpringApplication.Augmented} instance\n\t\t */"}, "code_tokens": ["Augmented", "with", "public", "(", ")", "{", "}", "...", ";", ";", "return", ";", "Class", "sources", "LinkedHashSet", "merged", "=", "merged", ".", "addAll", "new", "Augmented", "<", ">", "<", ">", "new", "(", ")", "(", ",", "merged", ",", ")", "?", "Class", "LinkedHashSet", "(", ")", "Arrays", ".", "asList", "this", ".", "main", "this", ".", "additionalProfiles", "<", ">", "<", ">", "this", ".", "sources", "(", "sources", ")", "?"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 91, "ast_depth": 10, "n_identifiers": 8, "vocab_size": 27, "n_whitespaces": 27, "n_words": 25, "nloc": 5, "token_counts": 59}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1519-1523", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "withAdditionalProfiles", "qualified_name": "org.springframework.boot.SpringApplication#withAdditionalProfiles", "start_line": 1519, "end_line": 1523, "signature": "withAdditionalProfiles(String... profiles)", "original_code": "public Augmented withAdditionalProfiles(String... profiles) {\n\t\t\tSet<String> merged = new LinkedHashSet<>(this.additionalProfiles);\n\t\t\tmerged.addAll(Arrays.asList(profiles));\n\t\t\treturn new Augmented(this.main, this.sources, merged);\n\t\t}", "doc_comment": "/**\n\t\t * Return a new {@link SpringApplication.Augmented} instance with additional\n\t\t * profiles that should be applied when the application runs.\n\t\t * @param profiles the profiles that should be applied\n\t\t * @return a new {@link SpringApplication.Augmented} instance\n\t\t * @since 3.4.0\n\t\t */"}, "code_tokens": ["Augmented", "withAdditionalProfiles", "public", "(", ")", "{", "}", "String", "...", ";", ";", "return", ";", "profiles", "Set", "merged", "=", "merged", ".", "addAll", "new", "Augmented", "<", "String", ">", "new", "(", ")", "(", ",", ",", "merged", ")", "LinkedHashSet", "(", ")", "Arrays", ".", "asList", "this", ".", "main", "this", ".", "sources", "<", ">", "this", ".", "additionalProfiles", "(", "profiles", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 79, "ast_depth": 9, "n_identifiers": 9, "vocab_size": 28, "n_whitespaces": 27, "n_words": 25, "nloc": 5, "token_counts": 53}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1530-1539", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "run", "qualified_name": "org.springframework.boot.SpringApplication#run", "start_line": 1530, "end_line": 1539, "signature": "run(String... args)", "original_code": "public SpringApplication.Running run(String... args) {\n\t\t\tRunListener runListener = new RunListener();\n\t\t\tSpringApplicationHook hook = new SingleUseSpringApplicationHook((springApplication) -> {\n\t\t\t\tspringApplication.addPrimarySources(this.sources);\n\t\t\t\tspringApplication.setAdditionalProfiles(this.additionalProfiles.toArray(String[]::new));\n\t\t\t\treturn runListener;\n\t\t\t});\n\t\t\twithHook(hook, () -> this.main.accept(args));\n\t\t\treturn runListener;\n\t\t}", "doc_comment": "/**\n\t\t * Run the application using the given args.\n\t\t * @param args the main method args\n\t\t * @return the running {@link ApplicationContext}\n\t\t */"}, "code_tokens": ["run", "public", "SpringApplication", ".", "Running", "(", ")", "{", "}", "String", "...", "RunListener", ";", "SpringApplicationHook", ";", ";", "return", "runListener", ";", "args", "runListener", "=", "hook", "=", "withHook", "new", "RunListener", "new", "SingleUseSpringApplicationHook", "(", "hook", ",", ")", "(", ")", "(", ")", "->", "->", "(", ")", ".", "accept", "(", "springApplication", ")", "{", "}", "this", ".", "main", "(", "args", ")", ";", ";", "return", "runListener", ";", "springApplication", ".", "addPrimarySources", "springApplication", ".", "setAdditionalProfiles", "(", ")", "(", ")", "this", ".", "sources", ".", "toArray", "this", ".", "additionalProfiles", "(", ")", "::", "new", "String", "[", "]"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 126, "ast_depth": 18, "n_identifiers": 13, "vocab_size": 36, "n_whitespaces": 57, "n_words": 36, "nloc": 10, "token_counts": 84}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1550-1553", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "contextLoaded", "qualified_name": "org.springframework.boot.SpringApplication#contextLoaded", "start_line": 1550, "end_line": 1553, "signature": "contextLoaded(ConfigurableApplicationContext context)", "original_code": "@Override\n\t\t\tpublic void contextLoaded(ConfigurableApplicationContext context) {\n\t\t\t\tthis.contexts.add(context);\n\t\t\t}", "doc_comment": ""}, "code_tokens": ["void", "contextLoaded", "public", "(", ")", "{", "}", "@", "Override", "ConfigurableApplicationContext", "context", ";", ".", "add", "this", ".", "contexts", "(", "context", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 31, "ast_depth": 7, "n_identifiers": 5, "vocab_size": 16, "n_whitespaces": 17, "n_words": 10, "nloc": 4, "token_counts": 20}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1555-1563", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "getApplicationContext", "qualified_name": "org.springframework.boot.SpringApplication#getApplicationContext", "start_line": 1555, "end_line": 1563, "signature": "getApplicationContext()", "original_code": "@Override\n\t\t\tpublic ConfigurableApplicationContext getApplicationContext() {\n\t\t\t\tList<ConfigurableApplicationContext> rootContexts = this.contexts.stream()\n\t\t\t\t\t.filter((context) -> context.getParent() == null)\n\t\t\t\t\t.toList();\n\t\t\t\tAssert.state(!rootContexts.isEmpty(), \"No root application context located\");\n\t\t\t\tAssert.state(rootContexts.size() == 1, \"No unique root application context located\");\n\t\t\t\treturn rootContexts.get(0);\n\t\t\t}", "doc_comment": ""}, "code_tokens": ["ConfigurableApplicationContext", "getApplicationContext", "public", "(", ")", "{", "}", "@", "Override", ";", ";", ";", "return", ";", "List", "rootContexts", "=", "Assert", ".", "state", "Assert", ".", "state", "rootContexts", ".", "get", "<", "ConfigurableApplicationContext", ">", ".", "toList", "(", ",", ")", "(", ",", ")", "(", "0", ")", ".", "filter", "(", ")", "!", "\"", "No root application context located", "\"", "==", "1", "\"", "No unique root application context located", "\"", ".", "stream", "(", ")", "rootContexts", ".", "isEmpty", "rootContexts", ".", "size", "this", ".", "contexts", "(", ")", "->", "(", ")", "(", ")", "(", "context", ")", "==", "null", "context", ".", "getParent", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 122, "ast_depth": 13, "n_identifiers": 14, "vocab_size": 39, "n_whitespaces": 64, "n_words": 40, "nloc": 9, "token_counts": 83}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1582-1582", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "getApplicationContext", "qualified_name": "org.springframework.boot.SpringApplication#getApplicationContext", "start_line": 1582, "end_line": 1582, "signature": "getApplicationContext()", "original_code": "ConfigurableApplicationContext getApplicationContext();", "doc_comment": "/**\n\t\t * Return the root {@link ConfigurableApplicationContext} of the running\n\t\t * application.\n\t\t * @return the root application context\n\t\t */"}, "code_tokens": ["ConfigurableApplicationContext", "getApplicationContext", ";", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 8, "ast_depth": 4, "n_identifiers": 1, "vocab_size": 5, "n_whitespaces": 1, "n_words": 2, "nloc": 1, "token_counts": 5}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1598-1601", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "getOrder", "qualified_name": "org.springframework.boot.SpringApplication#getOrder", "start_line": 1598, "end_line": 1601, "signature": "getOrder()", "original_code": "@Override\n\t\tpublic int getOrder() {\n\t\t\treturn Ordered.HIGHEST_PRECEDENCE;\n\t\t}", "doc_comment": ""}, "code_tokens": ["getOrder", "public", "int", "(", ")", "{", "}", "@", "Override", "return", ";", "Ordered", ".", "HIGHEST_PRECEDENCE"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 23, "ast_depth": 6, "n_identifiers": 4, "vocab_size": 14, "n_whitespaces": 14, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1603-1606", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "postProcessBeanFactory", "qualified_name": "org.springframework.boot.SpringApplication#postProcessBeanFactory", "start_line": 1603, "end_line": 1606, "signature": "postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory)", "original_code": "@Override\n\t\tpublic void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {\n\t\t\tDefaultPropertiesPropertySource.moveToEnd(this.context.getEnvironment());\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "postProcessBeanFactory", "public", "(", ")", "throws", "BeansException", "{", "}", "@", "Override", "ConfigurableListableBeanFactory", "beanFactory", ";", "DefaultPropertiesPropertySource", ".", "moveToEnd", "(", ")", ".", "getEnvironment", "this", ".", "context", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 40, "ast_depth": 9, "n_identifiers": 7, "vocab_size": 20, "n_whitespaces": 16, "n_words": 13, "nloc": 4, "token_counts": 26}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1642-1644", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "getApplicationContext", "qualified_name": "org.springframework.boot.SpringApplication#getApplicationContext", "start_line": 1642, "end_line": 1644, "signature": "getApplicationContext()", "original_code": "public @Nullable ConfigurableApplicationContext getApplicationContext() {\n\t\t\treturn this.applicationContext;\n\t\t}", "doc_comment": "/**\n\t\t * Return the application context that was available when the run was abandoned or\n\t\t * {@code null} if no context was available.\n\t\t * @return the application context\n\t\t */"}, "code_tokens": ["ConfigurableApplicationContext", "getApplicationContext", "public", "(", ")", "{", "}", "@", "Nullable", "return", ";", "this", ".", "applicationContext"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 12, "n_words": 7, "nloc": 3, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1661-1664", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "getRunListener", "qualified_name": "org.springframework.boot.SpringApplication#getRunListener", "start_line": 1661, "end_line": 1664, "signature": "getRunListener(SpringApplication springApplication)", "original_code": "@Override\n\t\tpublic @Nullable SpringApplicationRunListener getRunListener(SpringApplication springApplication) {\n\t\t\treturn this.used.compareAndSet(false, true) ? this.delegate.getRunListener(springApplication) : null;\n\t\t}", "doc_comment": ""}, "code_tokens": ["SpringApplicationRunListener", "getRunListener", "public", "(", ")", "{", "}", "@", "Override", "@", "Nullable", "SpringApplication", "springApplication", "return", ";", "?", ":", "null", ".", "compareAndSet", ".", "getRunListener", "this", ".", "used", "(", "false", ",", "true", ")", "this", ".", "delegate", "(", "springApplication", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 52, "ast_depth": 8, "n_identifiers": 7, "vocab_size": 25, "n_whitespaces": 21, "n_words": 18, "nloc": 4, "token_counts": 36}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1676-1684", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "onApplicationEvent", "qualified_name": "org.springframework.boot.SpringApplication#onApplicationEvent", "start_line": 1676, "end_line": 1684, "signature": "onApplicationEvent(ApplicationContextEvent event)", "original_code": "@Override\n\t\tpublic void onApplicationEvent(ApplicationContextEvent event) {\n\t\t\tif (event instanceof ContextRefreshedEvent) {\n\t\t\t\tstartKeepAliveThread();\n\t\t\t}\n\t\t\telse if (event instanceof ContextClosedEvent) {\n\t\t\t\tstopKeepAliveThread();\n\t\t\t}\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "onApplicationEvent", "public", "(", ")", "{", "}", "@", "Override", "ApplicationContextEvent", "event", "if", "else", "(", ")", "{", "}", "if", "event", "instanceof", "ContextRefreshedEvent", ";", "(", ")", "{", "}", "startKeepAliveThread", "event", "instanceof", "ContextClosedEvent", ";", "(", ")", "stopKeepAliveThread", "(", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 57, "ast_depth": 10, "n_identifiers": 5, "vocab_size": 19, "n_whitespaces": 45, "n_words": 17, "nloc": 9, "token_counts": 36}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1686-1702", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "startKeepAliveThread", "qualified_name": "org.springframework.boot.SpringApplication#startKeepAliveThread", "start_line": 1686, "end_line": 1702, "signature": "startKeepAliveThread()", "original_code": "private void startKeepAliveThread() {\n\t\t\tThread thread = new Thread(() -> {\n\t\t\t\twhile (true) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tThread.sleep(Long.MAX_VALUE);\n\t\t\t\t\t}\n\t\t\t\t\tcatch (InterruptedException ex) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (this.thread.compareAndSet(null, thread)) {\n\t\t\t\tthread.setDaemon(false);\n\t\t\t\tthread.setName(\"keep-alive\");\n\t\t\t\tthread.start();\n\t\t\t}\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "startKeepAliveThread", "private", "(", ")", "{", "}", "Thread", ";", "if", "thread", "=", "(", ")", "{", "}", "new", "Thread", ".", "compareAndSet", ";", ";", ";", "(", ")", "this", ".", "thread", "(", "null", ",", "thread", ")", "thread", ".", "setDaemon", "thread", ".", "setName", "thread", ".", "start", "->", "(", "false", ")", "(", ")", "(", ")", "(", ")", "{", "}", "\"", "keep-alive", "\"", "while", "(", "true", ")", "{", "}", "try", "{", "}", "catch", "(", ")", ";", "ex", "{", "}", "Thread", ".", "sleep", "InterruptedException", "break", ";", "(", ")", "Long", ".", "MAX_VALUE"], "metrics": {"cyclomatic_complexity": 4, "n_ast_nodes": 126, "ast_depth": 18, "n_identifiers": 11, "vocab_size": 35, "n_whitespaces": 100, "n_words": 33, "nloc": 17, "token_counts": 84}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1704-1710", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "stopKeepAliveThread", "qualified_name": "org.springframework.boot.SpringApplication#stopKeepAliveThread", "start_line": 1704, "end_line": 1710, "signature": "stopKeepAliveThread()", "original_code": "private void stopKeepAliveThread() {\n\t\t\tThread thread = this.thread.getAndSet(null);\n\t\t\tif (thread == null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthread.interrupt();\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "stopKeepAliveThread", "private", "(", ")", "{", "}", "Thread", ";", "if", ";", "thread", "=", "(", ")", "{", "}", "thread", ".", "interrupt", ".", "getAndSet", "thread", "==", "null", "return", ";", "(", ")", "this", ".", "thread", "(", "null", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 53, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 19, "n_whitespaces": 34, "n_words": 15, "nloc": 7, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1721-1721", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "startTime", "qualified_name": "org.springframework.boot.SpringApplication#startTime", "start_line": 1721, "end_line": 1721, "signature": "startTime()", "original_code": "protected abstract long startTime();", "doc_comment": ""}, "code_tokens": ["startTime", ";", "protected", "abstract", "long", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 12, "ast_depth": 4, "n_identifiers": 1, "vocab_size": 7, "n_whitespaces": 3, "n_words": 4, "nloc": 1, "token_counts": 7}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1723-1723", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "processUptime", "qualified_name": "org.springframework.boot.SpringApplication#processUptime", "start_line": 1723, "end_line": 1723, "signature": "processUptime()", "original_code": "protected abstract @Nullable Long processUptime();", "doc_comment": ""}, "code_tokens": ["Long", "processUptime", ";", "protected", "abstract", "(", ")", "@", "Nullable"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 14, "ast_depth": 5, "n_identifiers": 2, "vocab_size": 9, "n_whitespaces": 4, "n_words": 5, "nloc": 1, "token_counts": 9}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1725-1725", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "action", "qualified_name": "org.springframework.boot.SpringApplication#action", "start_line": 1725, "end_line": 1725, "signature": "action()", "original_code": "protected abstract String action();", "doc_comment": ""}, "code_tokens": ["String", "action", ";", "protected", "abstract", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 11, "ast_depth": 4, "n_identifiers": 1, "vocab_size": 7, "n_whitespaces": 3, "n_words": 4, "nloc": 1, "token_counts": 7}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1727-1731", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "started", "qualified_name": "org.springframework.boot.SpringApplication#started", "start_line": 1727, "end_line": 1731, "signature": "started()", "original_code": "final Duration started() {\n\t\t\tlong now = System.currentTimeMillis();\n\t\t\tthis.timeTakenToStarted = Duration.ofMillis(now - startTime());\n\t\t\treturn this.timeTakenToStarted;\n\t\t}", "doc_comment": ""}, "code_tokens": ["Duration", "started", "final", "(", ")", "{", "}", ";", ";", "return", ";", "long", "now", "=", "=", "this", ".", "timeTakenToStarted", "System", ".", "currentTimeMillis", "this", ".", "timeTakenToStarted", "Duration", ".", "ofMillis", "(", ")", "(", ")", "now", "-", "startTime", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 56, "ast_depth": 11, "n_identifiers": 8, "vocab_size": 20, "n_whitespaces": 26, "n_words": 16, "nloc": 5, "token_counts": 36}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1733-1737", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "timeTakenToStarted", "qualified_name": "org.springframework.boot.SpringApplication#timeTakenToStarted", "start_line": 1733, "end_line": 1737, "signature": "timeTakenToStarted()", "original_code": "Duration timeTakenToStarted() {\n\t\t\tAssert.state(this.timeTakenToStarted != null,\n\t\t\t\t\t\"timeTakenToStarted is not set. Make sure to call started() before this method\");\n\t\t\treturn this.timeTakenToStarted;\n\t\t}", "doc_comment": ""}, "code_tokens": ["Duration", "timeTakenToStarted", "(", ")", "{", "}", ";", "return", ";", "Assert", ".", "state", "this", ".", "timeTakenToStarted", "(", ",", ")", "!=", "null", "\"", "timeTakenToStarted is not set. Make sure to call started() before this method", "\"", "this", ".", "timeTakenToStarted"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 38, "ast_depth": 9, "n_identifiers": 3, "vocab_size": 17, "n_whitespaces": 33, "n_words": 22, "nloc": 5, "token_counts": 26}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1739-1742", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "ready", "qualified_name": "org.springframework.boot.SpringApplication#ready", "start_line": 1739, "end_line": 1742, "signature": "ready()", "original_code": "private Duration ready() {\n\t\t\tlong now = System.currentTimeMillis();\n\t\t\treturn Duration.ofMillis(now - startTime());\n\t\t}", "doc_comment": ""}, "code_tokens": ["Duration", "ready", "private", "(", ")", "{", "}", ";", "return", ";", "long", "now", "=", "Duration", ".", "ofMillis", "System", ".", "currentTimeMillis", "(", ")", "(", ")", "now", "-", "startTime", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 44, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 18, "n_whitespaces": 20, "n_words": 12, "nloc": 4, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1744-1749", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "create", "qualified_name": "org.springframework.boot.SpringApplication#create", "start_line": 1744, "end_line": 1749, "signature": "create()", "original_code": "static Startup create() {\n\t\t\tClassLoader classLoader = Startup.class.getClassLoader();\n\t\t\treturn (ClassUtils.isPresent(\"jdk.crac.management.CRaCMXBean\", classLoader)\n\t\t\t\t\t&& ClassUtils.isPresent(\"org.crac.management.CRaCMXBean\", classLoader))\n\t\t\t\t\t\t\t? new CoordinatedRestoreAtCheckpointStartup() : new StandardStartup();\n\t\t}", "doc_comment": ""}, "code_tokens": ["Startup", "create", "static", "(", ")", "{", "}", "ClassLoader", ";", "return", ";", "classLoader", "=", "?", ":", ".", "getClassLoader", "(", ")", "new", "CoordinatedRestoreAtCheckpointStartup", "new", "StandardStartup", "Startup", ".", "class", "(", ")", "&&", "(", ")", "(", ")", "ClassUtils", ".", "isPresent", "ClassUtils", ".", "isPresent", "(", ",", "classLoader", ")", "(", ",", "classLoader", ")", "\"", "jdk.crac.management.CRaCMXBean", "\"", "\"", "org.crac.management.CRaCMXBean", "\""], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 77, "ast_depth": 11, "n_identifiers": 5, "vocab_size": 27, "n_whitespaces": 40, "n_words": 27, "nloc": 6, "token_counts": 53}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1760-1763", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "startTime", "qualified_name": "org.springframework.boot.SpringApplication#startTime", "start_line": 1760, "end_line": 1763, "signature": "startTime()", "original_code": "@Override\n\t\tprotected long startTime() {\n\t\t\treturn this.startTime;\n\t\t}", "doc_comment": ""}, "code_tokens": ["startTime", "protected", "long", "(", ")", "{", "}", "@", "Override", "return", ";", "this", ".", "startTime"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 23, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 13, "n_whitespaces": 14, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1765-1773", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "processUptime", "qualified_name": "org.springframework.boot.SpringApplication#processUptime", "start_line": 1765, "end_line": 1773, "signature": "processUptime()", "original_code": "@Override\n\t\tprotected @Nullable Long processUptime() {\n\t\t\ttry {\n\t\t\t\treturn ManagementFactory.getRuntimeMXBean().getUptime();\n\t\t\t}\n\t\t\tcatch (Throwable ex) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}", "doc_comment": ""}, "code_tokens": ["Long", "processUptime", "protected", "(", ")", "{", "}", "@", "Override", "@", "Nullable", "try", "{", "}", "catch", "(", ")", "return", ";", "ex", "{", "}", ".", "getUptime", "Throwable", "return", "null", ";", "ManagementFactory", ".", "getRuntimeMXBean", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 54, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 21, "n_whitespaces": 42, "n_words": 15, "nloc": 9, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1775-1778", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "action", "qualified_name": "org.springframework.boot.SpringApplication#action", "start_line": 1775, "end_line": 1778, "signature": "action()", "original_code": "@Override\n\t\tprotected String action() {\n\t\t\treturn \"Started\";\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "action", "protected", "(", ")", "{", "}", "@", "Override", "return", ";", "\"", "Started", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 13, "n_whitespaces": 14, "n_words": 6, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1789-1793", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "processUptime", "qualified_name": "org.springframework.boot.SpringApplication#processUptime", "start_line": 1789, "end_line": 1793, "signature": "processUptime()", "original_code": "@Override\n\t\tprotected @Nullable Long processUptime() {\n\t\t\tLong uptime = CRaCMXBean.getCRaCMXBean().getUptimeSinceRestore();\n\t\t\treturn (uptime >= 0) ? uptime : this.fallback.processUptime();\n\t\t}", "doc_comment": ""}, "code_tokens": ["Long", "processUptime", "protected", "(", ")", "{", "}", "@", "Override", "@", "Nullable", "Long", ";", "return", ";", "uptime", "=", "?", "uptime", ":", ".", "getUptimeSinceRestore", "(", ")", ".", "processUptime", "CRaCMXBean", ".", "getCRaCMXBean", "(", ")", "uptime", ">=", "0", "this", ".", "fallback", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 61, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 24, "n_whitespaces": 28, "n_words": 17, "nloc": 5, "token_counts": 41}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1795-1798", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "action", "qualified_name": "org.springframework.boot.SpringApplication#action", "start_line": 1795, "end_line": 1798, "signature": "action()", "original_code": "@Override\n\t\tprotected String action() {\n\t\t\treturn (restoreTime() >= 0) ? \"Restored\" : this.fallback.action();\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "action", "protected", "(", ")", "{", "}", "@", "Override", "return", ";", "?", ":", "(", ")", "\"", "Restored", "\"", ".", "action", ">=", "0", "this", ".", "fallback", "(", ")", "restoreTime", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 46, "ast_depth": 10, "n_identifiers": 4, "vocab_size": 21, "n_whitespaces": 20, "n_words": 11, "nloc": 4, "token_counts": 30}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1800-1802", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "restoreTime", "qualified_name": "org.springframework.boot.SpringApplication#restoreTime", "start_line": 1800, "end_line": 1802, "signature": "restoreTime()", "original_code": "private long restoreTime() {\n\t\t\treturn CRaCMXBean.getCRaCMXBean().getRestoreTime();\n\t\t}", "doc_comment": ""}, "code_tokens": ["restoreTime", "private", "long", "(", ")", "{", "}", "return", ";", ".", "getRestoreTime", "CRaCMXBean", ".", "getCRaCMXBean", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 29, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 13, "n_whitespaces": 11, "n_words": 7, "nloc": 3, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1804-1808", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "startTime", "qualified_name": "org.springframework.boot.SpringApplication#startTime", "start_line": 1804, "end_line": 1808, "signature": "startTime()", "original_code": "@Override\n\t\tprotected long startTime() {\n\t\t\tlong restoreTime = restoreTime();\n\t\t\treturn (restoreTime >= 0) ? restoreTime : this.fallback.startTime();\n\t\t}", "doc_comment": ""}, "code_tokens": ["startTime", "protected", "long", "(", ")", "{", "}", "@", "Override", ";", "return", ";", "long", "restoreTime", "=", "?", "restoreTime", ":", "restoreTime", "(", ")", ".", "startTime", "(", ")", "restoreTime", ">=", "0", "this", ".", "fallback", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 52, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 20, "n_whitespaces": 27, "n_words": 14, "nloc": 5, "token_counts": 33}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1827-1831", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "getOrderSource", "qualified_name": "org.springframework.boot.SpringApplication#getOrderSource", "start_line": 1827, "end_line": 1831, "signature": "getOrderSource(Object obj)", "original_code": "@Override\n\t\tpublic @Nullable Object getOrderSource(Object obj) {\n\t\t\tString beanName = this.instancesToBeanNames.get(obj);\n\t\t\treturn (beanName != null) ? getOrderSource(beanName, obj.getClass()) : null;\n\t\t}", "doc_comment": ""}, "code_tokens": ["Object", "getOrderSource", "public", "(", ")", "{", "}", "@", "Override", "@", "Nullable", "Object", "obj", "String", ";", "return", ";", "beanName", "=", "?", ":", "null", ".", "get", "(", ")", "getOrderSource", "this", ".", "instancesToBeanNames", "(", "obj", ")", "beanName", "!=", "null", "(", "beanName", ",", ")", "obj", ".", "getClass", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 66, "ast_depth": 10, "n_identifiers": 8, "vocab_size": 26, "n_whitespaces": 30, "n_words": 21, "nloc": 5, "token_counts": 45}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#1833-1845", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "language": "Java"}, "method": {"name": "getOrderSource", "qualified_name": "org.springframework.boot.SpringApplication#getOrderSource", "start_line": 1833, "end_line": 1845, "signature": "getOrderSource(String beanName, Class<?> instanceType)", "original_code": "private @Nullable Object getOrderSource(String beanName, Class<?> instanceType) {\n\t\t\ttry {\n\t\t\t\tRootBeanDefinition beanDefinition = (RootBeanDefinition) this.beanFactory\n\t\t\t\t\t.getMergedBeanDefinition(beanName);\n\t\t\t\tMethod factoryMethod = beanDefinition.getResolvedFactoryMethod();\n\t\t\t\tClass<?> targetType = beanDefinition.getTargetType();\n\t\t\t\ttargetType = (targetType != instanceType) ? targetType : null;\n\t\t\t\treturn Stream.of(factoryMethod, targetType).filter(Objects::nonNull).toArray();\n\t\t\t}\n\t\t\tcatch (NoSuchBeanDefinitionException ex) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}", "doc_comment": ""}, "code_tokens": ["Object", "getOrderSource", "private", "(", ",", ")", "{", "}", "@", "Nullable", "String", "beanName", "instanceType", "try", "Class", "{", "}", "catch", "(", ")", "<", ">", "RootBeanDefinition", ";", "Method", ";", ";", ";", "return", ";", "ex", "{", "}", "?", "beanDefinition", "=", "factoryMethod", "=", "Class", "targetType", "=", "targetType", "=", ".", "toArray", "NoSuchBeanDefinitionException", "return", "null", ";", "(", "RootBeanDefinition", ")", "beanDefinition", ".", "getResolvedFactoryMethod", "<", ">", "beanDefinition", ".", "getTargetType", "?", "targetType", ":", "null", ".", "filter", "(", ")", ".", "getMergedBeanDefinition", "(", ")", "?", "(", ")", "(", ")", "Stream", ".", "of", "(", ")", "this", ".", "beanFactory", "(", "beanName", ")", "targetType", "!=", "instanceType", "(", "factoryMethod", ",", "targetType", ")", "Objects", "::", "nonNull"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 147, "ast_depth": 11, "n_identifiers": 18, "vocab_size": 45, "n_whitespaces": 87, "n_words": 43, "nloc": 13, "token_counts": 99}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironment.java#159-163", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironment.java", "language": "Java"}, "method": {"name": "createConfigDataLocationResolvers", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironment#createConfigDataLocationResolvers", "start_line": 159, "end_line": 163, "signature": "createConfigDataLocationResolvers(DeferredLogFactory logFactory,\n\t\t\tConfigurableBootstrapContext bootstrapContext, Binder binder, ResourceLoader resourceLoader)", "original_code": "protected ConfigDataLocationResolvers createConfigDataLocationResolvers(DeferredLogFactory logFactory,\n\t\t\tConfigurableBootstrapContext bootstrapContext, Binder binder, ResourceLoader resourceLoader) {\n\t\treturn new ConfigDataLocationResolvers(logFactory, bootstrapContext, binder, resourceLoader,\n\t\t\t\tSpringFactoriesLoader.forDefaultResourceLocation(resourceLoader.getClassLoader()));\n\t}", "doc_comment": ""}, "code_tokens": ["ConfigDataLocationResolvers", "createConfigDataLocationResolvers", "protected", "(", ",", ",", ",", ")", "{", "}", "DeferredLogFactory", "logFactory", "ConfigurableBootstrapContext", "bootstrapContext", "Binder", "binder", "ResourceLoader", "resourceLoader", "return", ";", "new", "ConfigDataLocationResolvers", "(", "logFactory", ",", "bootstrapContext", ",", "binder", ",", "resourceLoader", ",", ")", "SpringFactoriesLoader", ".", "forDefaultResourceLocation", "(", ")", "resourceLoader", ".", "getClassLoader", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 58, "ast_depth": 11, "n_identifiers": 8, "vocab_size": 23, "n_whitespaces": 28, "n_words": 22, "nloc": 5, "token_counts": 42}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironment.java#165-188", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironment.java", "language": "Java"}, "method": {"name": "createContributors", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironment#createContributors", "start_line": 165, "end_line": 188, "signature": "createContributors(Binder binder)", "original_code": "private ConfigDataEnvironmentContributors createContributors(Binder binder) {\n\t\tthis.logger.trace(\"Building config data environment contributors\");\n\t\tMutablePropertySources propertySources = this.environment.getPropertySources();\n\t\tList<ConfigDataEnvironmentContributor> contributors = new ArrayList<>(propertySources.size() + 10);\n\t\tPropertySource<?> defaultPropertySource = null;\n\t\tfor (PropertySource<?> propertySource : propertySources) {\n\t\t\tif (DefaultPropertiesPropertySource.hasMatchingName(propertySource)) {\n\t\t\t\tdefaultPropertySource = propertySource;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.logger.trace(LogMessage.format(\"Creating wrapped config data contributor for '%s'\",\n\t\t\t\t\t\tpropertySource.getName()));\n\t\t\t\tcontributors.add(ConfigDataEnvironmentContributor.ofExisting(propertySource,\n\t\t\t\t\t\tthis.environment.getConversionService()));\n\t\t\t}\n\t\t}\n\t\tcontributors.addAll(getInitialImportContributors(binder));\n\t\tif (defaultPropertySource != null) {\n\t\t\tthis.logger.trace(\"Creating wrapped config data contributor for default property source\");\n\t\t\tcontributors.add(ConfigDataEnvironmentContributor.ofExisting(defaultPropertySource,\n\t\t\t\t\tthis.environment.getConversionService()));\n\t\t}\n\t\treturn createContributors(contributors);\n\t}", "doc_comment": ""}, "code_tokens": ["ConfigDataEnvironmentContributors", "createContributors", "private", "(", ")", "{", "}", "Binder", "binder", ";", "MutablePropertySources", ";", ";", ";", "for", "(", "propertySource", ":", "propertySources", ")", ";", "if", "return", ";", ".", "trace", "propertySources", "=", "List", "contributors", "=", "PropertySource", "defaultPropertySource", "=", "null", "PropertySource", "{", "}", "contributors", ".", "addAll", "(", ")", "{", "}", "createContributors", "this", ".", "logger", "(", ")", ".", "getPropertySources", "<", "ConfigDataEnvironmentContributor", ">", "new", "<", ">", "<", ">", "if", "else", "(", ")", "defaultPropertySource", "!=", "null", ";", ";", "(", "contributors", ")", "\"", "Building config data environment contributors", "\"", "this", ".", "environment", "(", ")", "ArrayList", "(", ")", "?", "?", "(", ")", "{", "}", "{", "}", "getInitialImportContributors", ".", "trace", "contributors", ".", "add", "<", ">", "+", "10", "DefaultPropertiesPropertySource", ".", "hasMatchingName", ";", ";", ";", "(", "binder", ")", "this", ".", "logger", "(", ")", "(", ")", "propertySources", ".", "size", "(", "propertySource", ")", "defaultPropertySource", "=", "propertySource", ".", "trace", "contributors", ".", "add", "\"", "Creating wrapped config data contributor for default property source", "\"", "ConfigDataEnvironmentContributor", ".", "ofExisting", "(", ")", "this", ".", "logger", "(", ")", "(", ")", "(", "defaultPropertySource", ",", ")", "LogMessage", ".", "format", "ConfigDataEnvironmentContributor", ".", "ofExisting", ".", "getConversionService", "(", ",", ")", "(", "propertySource", ",", ")", "this", ".", "environment", "(", ")", "\"", "Creating wrapped config data contributor for '%s'", "\"", "propertySource", ".", "getName", ".", "getConversionService", "(", ")", "this", ".", "environment", "(", ")"], "metrics": {"cyclomatic_complexity": 4, "n_ast_nodes": 273, "ast_depth": 15, "n_identifiers": 22, "vocab_size": 55, "n_whitespaces": 140, "n_words": 92, "nloc": 24, "token_counts": 186}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironment.java#190-194", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironment.java", "language": "Java"}, "method": {"name": "createContributors", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironment#createContributors", "start_line": 190, "end_line": 194, "signature": "createContributors(\n\t\t\tList<ConfigDataEnvironmentContributor> contributors)", "original_code": "protected ConfigDataEnvironmentContributors createContributors(\n\t\t\tList<ConfigDataEnvironmentContributor> contributors) {\n\t\treturn new ConfigDataEnvironmentContributors(this.logFactory, this.bootstrapContext, contributors,\n\t\t\t\tthis.environment.getConversionService(), this.environmentUpdateListener);\n\t}", "doc_comment": ""}, "code_tokens": ["ConfigDataEnvironmentContributors", "createContributors", "protected", "(", ")", "{", "}", "contributors", "return", ";", "List", "new", "ConfigDataEnvironmentContributors", "<", "ConfigDataEnvironmentContributor", ">", "(", ",", ",", "contributors", ",", ",", ")", "this", ".", "logFactory", "this", ".", "bootstrapContext", ".", "getConversionService", "this", ".", "environmentUpdateListener", "this", ".", "environment", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 56, "ast_depth": 9, "n_identifiers": 7, "vocab_size": 23, "n_whitespaces": 23, "n_words": 19, "nloc": 5, "token_counts": 39}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironment.java#196-198", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironment.java", "language": "Java"}, "method": {"name": "getContributors", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironment#getContributors", "start_line": 196, "end_line": 198, "signature": "getContributors()", "original_code": "ConfigDataEnvironmentContributors getContributors() {\n\t\treturn this.contributors;\n\t}", "doc_comment": ""}, "code_tokens": ["ConfigDataEnvironmentContributors", "getContributors", "(", ")", "{", "}", "return", ";", "this", ".", "contributors"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 17, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 11, "n_whitespaces": 8, "n_words": 5, "nloc": 3, "token_counts": 11}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironment.java#200-208", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironment.java", "language": "Java"}, "method": {"name": "getInitialImportContributors", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironment#getInitialImportContributors", "start_line": 200, "end_line": 208, "signature": "getInitialImportContributors(Binder binder)", "original_code": "private List<ConfigDataEnvironmentContributor> getInitialImportContributors(Binder binder) {\n\t\tList<ConfigDataEnvironmentContributor> initialContributors = new ArrayList<>();\n\t\taddInitialImportContributors(initialContributors, bindLocations(binder, IMPORT_PROPERTY, EMPTY_LOCATIONS));\n\t\taddInitialImportContributors(initialContributors,\n\t\t\t\tbindLocations(binder, ADDITIONAL_LOCATION_PROPERTY, EMPTY_LOCATIONS));\n\t\taddInitialImportContributors(initialContributors,\n\t\t\t\tbindLocations(binder, LOCATION_PROPERTY, DEFAULT_SEARCH_LOCATIONS));\n\t\treturn initialContributors;\n\t}", "doc_comment": ""}, "code_tokens": ["getInitialImportContributors", "private", "List", "(", ")", "{", "}", "<", "ConfigDataEnvironmentContributor", ">", "Binder", "binder", ";", ";", ";", ";", "return", "initialContributors", ";", "List", "initialContributors", "=", "addInitialImportContributors", "addInitialImportContributors", "addInitialImportContributors", "<", "ConfigDataEnvironmentContributor", ">", "new", "(", "initialContributors", ",", ")", "(", "initialContributors", ",", ")", "(", "initialContributors", ",", ")", "ArrayList", "(", ")", "bindLocations", "bindLocations", "bindLocations", "<", ">", "(", "binder", ",", "IMPORT_PROPERTY", ",", "EMPTY_LOCATIONS", ")", "(", "binder", ",", "ADDITIONAL_LOCATION_PROPERTY", ",", "EMPTY_LOCATIONS", ")", "(", "binder", ",", "LOCATION_PROPERTY", ",", "DEFAULT_SEARCH_LOCATIONS", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 102, "ast_depth": 9, "n_identifiers": 10, "vocab_size": 26, "n_whitespaces": 43, "n_words": 31, "nloc": 9, "token_counts": 70}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironment.java#210-212", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironment.java", "language": "Java"}, "method": {"name": "bindLocations", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironment#bindLocations", "start_line": 210, "end_line": 212, "signature": "bindLocations(Binder binder, String propertyName, ConfigDataLocation[] other)", "original_code": "private ConfigDataLocation[] bindLocations(Binder binder, String propertyName, ConfigDataLocation[] other) {\n\t\treturn binder.bind(propertyName, CONFIG_DATA_LOCATION_ARRAY).orElse(other);\n\t}", "doc_comment": ""}, "code_tokens": ["bindLocations", "private", "ConfigDataLocation", "(", ",", ",", ")", "{", "}", "[", "]", "Binder", "binder", "String", "propertyName", "other", "return", ";", "ConfigDataLocation", ".", "orElse", "[", "]", "binder", ".", "bind", "(", "other", ")", "(", "propertyName", ",", "CONFIG_DATA_LOCATION_ARRAY", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 51, "ast_depth": 8, "n_identifiers": 7, "vocab_size": 21, "n_whitespaces": 15, "n_words": 16, "nloc": 3, "token_counts": 34}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironment.java#214-221", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironment.java", "language": "Java"}, "method": {"name": "addInitialImportContributors", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironment#addInitialImportContributors", "start_line": 214, "end_line": 221, "signature": "addInitialImportContributors(List<ConfigDataEnvironmentContributor> initialContributors,\n\t\t\tConfigDataLocation[] locations)", "original_code": "private void addInitialImportContributors(List<ConfigDataEnvironmentContributor> initialContributors,\n\t\t\tConfigDataLocation[] locations) {\n\t\tfor (int i = locations.length - 1; i >= 0; i--) {\n\t\t\tif (ConfigDataLocation.isNotEmpty(locations[i])) {\n\t\t\t\tinitialContributors.add(createInitialImportContributor(locations[i]));\n\t\t\t}\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "addInitialImportContributors", "private", "(", ",", ")", "{", "}", "initialContributors", "locations", "for", "(", ";", ")", "List", "ConfigDataLocation", ";", "i", ">=", "0", "i", "--", "{", "}", "<", "ConfigDataEnvironmentContributor", ">", "[", "]", "int", "i", "=", "if", "-", "1", "(", ")", "{", "}", "locations", ".", "length", "ConfigDataLocation", ".", "isNotEmpty", ";", "(", ")", "initialContributors", ".", "add", "locations", "[", "i", "]", "(", ")", "createInitialImportContributor", "(", ")", "locations", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 96, "ast_depth": 14, "n_identifiers": 9, "vocab_size": 33, "n_whitespaces": 43, "n_words": 27, "nloc": 8, "token_counts": 64}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironment.java#223-226", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironment.java", "language": "Java"}, "method": {"name": "createInitialImportContributor", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironment#createInitialImportContributor", "start_line": 223, "end_line": 226, "signature": "createInitialImportContributor(ConfigDataLocation location)", "original_code": "private ConfigDataEnvironmentContributor createInitialImportContributor(ConfigDataLocation location) {\n\t\tthis.logger.trace(LogMessage.format(\"Adding initial config data import from location '%s'\", location));\n\t\treturn ConfigDataEnvironmentContributor.ofInitialImport(location, this.environment.getConversionService());\n\t}", "doc_comment": ""}, "code_tokens": ["ConfigDataEnvironmentContributor", "createInitialImportContributor", "private", "(", ")", "{", "}", "ConfigDataLocation", "location", ";", "return", ";", ".", "trace", "ConfigDataEnvironmentContributor", ".", "ofInitialImport", "this", ".", "logger", "(", ")", "(", "location", ",", ")", "LogMessage", ".", "format", ".", "getConversionService", "(", ",", "location", ")", "this", ".", "environment", "(", ")", "\"", "Adding initial config data import from location '%s'", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 62, "ast_depth": 10, "n_identifiers": 10, "vocab_size": 23, "n_whitespaces": 22, "n_words": 26, "nloc": 4, "token_counts": 43}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironment.java#232-244", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironment.java", "language": "Java"}, "method": {"name": "processAndApply", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironment#processAndApply", "start_line": 232, "end_line": 244, "signature": "processAndApply()", "original_code": "void processAndApply() {\n\t\tConfigDataImporter importer = new ConfigDataImporter(this.logFactory, this.notFoundAction, this.resolvers,\n\t\t\t\tthis.loaders);\n\t\tregisterBootstrapBinder(this.contributors, null, DENY_INACTIVE_BINDING);\n\t\tConfigDataEnvironmentContributors contributors = processInitial(this.contributors, importer);\n\t\tConfigDataActivationContext activationContext = createActivationContext(\n\t\t\t\tcontributors.getBinder(null, BinderOption.FAIL_ON_BIND_TO_INACTIVE_SOURCE));\n\t\tcontributors = processWithoutProfiles(contributors, importer, activationContext);\n\t\tactivationContext = withProfiles(contributors, activationContext);\n\t\tcontributors = processWithProfiles(contributors, importer, activationContext);\n\t\tapplyToEnvironment(contributors, activationContext, importer.getLoadedLocations(),\n\t\t\t\timporter.getOptionalLocations());\n\t}", "doc_comment": "/**\n\t * Process all contributions and apply any newly imported property sources to the\n\t * {@link Environment}.\n\t */"}, "code_tokens": ["void", "processAndApply", "(", ")", "{", "}", "ConfigDataImporter", ";", ";", "ConfigDataEnvironmentContributors", ";", "ConfigDataActivationContext", ";", ";", ";", ";", ";", "importer", "=", "registerBootstrapBinder", "contributors", "=", "activationContext", "=", "contributors", "=", "activationContext", "=", "contributors", "=", "applyToEnvironment", "new", "ConfigDataImporter", "(", ",", "null", ",", "DENY_INACTIVE_BINDING", ")", "processInitial", "createActivationContext", "processWithoutProfiles", "withProfiles", "processWithProfiles", "(", "contributors", ",", "activationContext", ",", ",", ")", "(", ",", ",", ",", ")", "this", ".", "contributors", "(", ",", "importer", ")", "(", ")", "(", "contributors", ",", "importer", ",", "activationContext", ")", "(", "contributors", ",", "activationContext", ")", "(", "contributors", ",", "importer", ",", "activationContext", ")", "importer", ".", "getLoadedLocations", "importer", ".", "getOptionalLocations", "this", ".", "logFactory", "this", ".", "notFoundAction", "this", ".", "resolvers", "this", ".", "loaders", "this", ".", "contributors", "contributors", ".", "getBinder", "(", ")", "(", ")", "(", "null", ",", ")", "BinderOption", ".", "FAIL_ON_BIND_TO_INACTIVE_SOURCE"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 166, "ast_depth": 11, "n_identifiers": 21, "vocab_size": 36, "n_whitespaces": 72, "n_words": 54, "nloc": 13, "token_counts": 119}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironment.java#246-252", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironment.java", "language": "Java"}, "method": {"name": "processInitial", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironment#processInitial", "start_line": 246, "end_line": 252, "signature": "processInitial(ConfigDataEnvironmentContributors contributors,\n\t\t\tConfigDataImporter importer)", "original_code": "private ConfigDataEnvironmentContributors processInitial(ConfigDataEnvironmentContributors contributors,\n\t\t\tConfigDataImporter importer) {\n\t\tthis.logger.trace(\"Processing initial config data environment contributors without activation context\");\n\t\tcontributors = contributors.withProcessedImports(importer, null);\n\t\tregisterBootstrapBinder(contributors, null, DENY_INACTIVE_BINDING);\n\t\treturn contributors;\n\t}", "doc_comment": ""}, "code_tokens": ["ConfigDataEnvironmentContributors", "processInitial", "private", "(", ",", ")", "{", "}", "ConfigDataEnvironmentContributors", "contributors", "ConfigDataImporter", "importer", ";", ";", ";", "return", "contributors", ";", ".", "trace", "contributors", "=", "registerBootstrapBinder", "this", ".", "logger", "(", ")", "contributors", ".", "withProcessedImports", "(", "contributors", ",", "null", ",", "DENY_INACTIVE_BINDING", ")", "\"", "Processing initial config data environment contributors without activation context", "\"", "(", "importer", ",", "null", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 66, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 24, "n_whitespaces": 37, "n_words": 30, "nloc": 7, "token_counts": 46}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironment.java#254-265", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironment.java", "language": "Java"}, "method": {"name": "createActivationContext", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironment#createActivationContext", "start_line": 254, "end_line": 265, "signature": "createActivationContext(Binder initialBinder)", "original_code": "private ConfigDataActivationContext createActivationContext(Binder initialBinder) {\n\t\tthis.logger.trace(\"Creating config data activation context from initial contributions\");\n\t\ttry {\n\t\t\treturn new ConfigDataActivationContext(this.environment, initialBinder);\n\t\t}\n\t\tcatch (BindException ex) {\n\t\t\tif (ex.getCause() instanceof InactiveConfigDataAccessException inactiveException) {\n\t\t\t\tthrow inactiveException;\n\t\t\t}\n\t\t\tthrow ex;\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["ConfigDataActivationContext", "createActivationContext", "private", "(", ")", "{", "}", "Binder", "initialBinder", ";", "try", ".", "trace", "{", "}", "catch", "(", ")", "this", ".", "logger", "(", ")", "return", ";", "ex", "{", "}", "\"", "Creating config data activation context from initial contributions", "\"", "new", "ConfigDataActivationContext", "BindException", "if", "throw", "ex", ";", "(", ",", "initialBinder", ")", "(", ")", "{", "}", "this", ".", "environment", "instanceof", "InactiveConfigDataAccessException", "inactiveException", "throw", "inactiveException", ";", "ex", ".", "getCause", "(", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 89, "ast_depth": 12, "n_identifiers": 8, "vocab_size": 30, "n_whitespaces": 63, "n_words": 36, "nloc": 12, "token_counts": 60}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironment.java#267-273", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironment.java", "language": "Java"}, "method": {"name": "processWithoutProfiles", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironment#processWithoutProfiles", "start_line": 267, "end_line": 273, "signature": "processWithoutProfiles(ConfigDataEnvironmentContributors contributors,\n\t\t\tConfigDataImporter importer, ConfigDataActivationContext activationContext)", "original_code": "private ConfigDataEnvironmentContributors processWithoutProfiles(ConfigDataEnvironmentContributors contributors,\n\t\t\tConfigDataImporter importer, ConfigDataActivationContext activationContext) {\n\t\tthis.logger.trace(\"Processing config data environment contributors with initial activation context\");\n\t\tcontributors = contributors.withProcessedImports(importer, activationContext);\n\t\tregisterBootstrapBinder(contributors, activationContext, DENY_INACTIVE_BINDING);\n\t\treturn contributors;\n\t}", "doc_comment": ""}, "code_tokens": ["ConfigDataEnvironmentContributors", "processWithoutProfiles", "private", "(", ",", ",", ")", "{", "}", "ConfigDataEnvironmentContributors", "contributors", "ConfigDataImporter", "importer", "ConfigDataActivationContext", "activationContext", ";", ";", ";", "return", "contributors", ";", ".", "trace", "contributors", "=", "registerBootstrapBinder", "this", ".", "logger", "(", ")", "contributors", ".", "withProcessedImports", "(", "contributors", ",", "activationContext", ",", "DENY_INACTIVE_BINDING", ")", "\"", "Processing config data environment contributors with initial activation context", "\"", "(", "importer", ",", "activationContext", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 70, "ast_depth": 8, "n_identifiers": 9, "vocab_size": 25, "n_whitespaces": 39, "n_words": 32, "nloc": 7, "token_counts": 49}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironment.java#275-293", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironment.java", "language": "Java"}, "method": {"name": "withProfiles", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironment#withProfiles", "start_line": 275, "end_line": 293, "signature": "withProfiles(ConfigDataEnvironmentContributors contributors,\n\t\t\tConfigDataActivationContext activationContext)", "original_code": "private ConfigDataActivationContext withProfiles(ConfigDataEnvironmentContributors contributors,\n\t\t\tConfigDataActivationContext activationContext) {\n\t\tthis.logger.trace(\"Deducing profiles from current config data environment contributors\");\n\t\tBinder binder = contributors.getBinder(activationContext,\n\t\t\t\t(contributor) -> !contributor.hasConfigDataOption(ConfigData.Option.IGNORE_PROFILES),\n\t\t\t\tBinderOption.FAIL_ON_BIND_TO_INACTIVE_SOURCE);\n\t\ttry {\n\t\t\tSet<String> additionalProfiles = new LinkedHashSet<>(this.additionalProfiles);\n\t\t\tadditionalProfiles.addAll(getIncludedProfiles(contributors, activationContext));\n\t\t\tProfiles profiles = new Profiles(this.environment, binder, additionalProfiles);\n\t\t\treturn activationContext.withProfiles(profiles);\n\t\t}\n\t\tcatch (BindException ex) {\n\t\t\tif (ex.getCause() instanceof InactiveConfigDataAccessException inactiveException) {\n\t\t\t\tthrow inactiveException;\n\t\t\t}\n\t\t\tthrow ex;\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["ConfigDataActivationContext", "withProfiles", "private", "(", ",", ")", "{", "}", "ConfigDataEnvironmentContributors", "contributors", "ConfigDataActivationContext", "activationContext", ";", "Binder", ";", "try", ".", "trace", "binder", "=", "{", "}", "catch", "(", ")", "this", ".", "logger", "(", ")", "contributors", ".", "getBinder", ";", ";", "Profiles", ";", "return", ";", "ex", "{", "}", "\"", "Deducing profiles from current config data environment contributors", "\"", "(", "activationContext", ",", ",", ")", "Set", "additionalProfiles", "=", "additionalProfiles", ".", "addAll", "profiles", "=", "activationContext", ".", "withProfiles", "BindException", "if", "throw", "ex", ";", "->", "BinderOption", ".", "FAIL_ON_BIND_TO_INACTIVE_SOURCE", "<", "String", ">", "new", "(", ")", "new", "Profiles", "(", "profiles", ")", "(", ")", "{", "}", "(", "contributor", ")", "!", "LinkedHashSet", "(", ")", "getIncludedProfiles", "(", ",", "binder", ",", "additionalProfiles", ")", "instanceof", "InactiveConfigDataAccessException", "inactiveException", "throw", "inactiveException", ";", "contributor", ".", "hasConfigDataOption", "<", ">", "this", ".", "additionalProfiles", "(", "contributors", ",", "activationContext", ")", "this", ".", "environment", "ex", ".", "getCause", "(", ")", "(", ")", ".", "IGNORE_PROFILES", "ConfigData", ".", "Option"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 193, "ast_depth": 14, "n_identifiers": 22, "vocab_size": 54, "n_whitespaces": 107, "n_words": 69, "nloc": 19, "token_counts": 133}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironment.java#295-317", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironment.java", "language": "Java"}, "method": {"name": "getIncludedProfiles", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironment#getIncludedProfiles", "start_line": 295, "end_line": 317, "signature": "getIncludedProfiles(ConfigDataEnvironmentContributors contributors,\n\t\t\tConfigDataActivationContext activationContext)", "original_code": "private Collection<? extends String> getIncludedProfiles(ConfigDataEnvironmentContributors contributors,\n\t\t\tConfigDataActivationContext activationContext) {\n\t\tPlaceholdersResolver placeholdersResolver = new ConfigDataEnvironmentContributorPlaceholdersResolver(\n\t\t\t\tcontributors, activationContext, null, true, this.environment.getConversionService());\n\t\tSet<String> result = new LinkedHashSet<>();\n\t\tfor (ConfigDataEnvironmentContributor contributor : contributors) {\n\t\t\tConfigurationPropertySource source = contributor.getConfigurationPropertySource();\n\t\t\tif (source != null && !contributor.hasConfigDataOption(ConfigData.Option.IGNORE_PROFILES)) {\n\t\t\t\tBinder binder = new Binder(Collections.singleton(source), placeholdersResolver);\n\t\t\t\tbinder.bind(Profiles.INCLUDE_PROFILES, STRING_LIST, ProfilesValidator.get(binder))\n\t\t\t\t\t.ifBound((includes) -> {\n\t\t\t\t\t\tif (!contributor.isActive(activationContext)) {\n\t\t\t\t\t\t\tInactiveConfigDataAccessException.throwIfPropertyFound(contributor,\n\t\t\t\t\t\t\t\t\tProfiles.INCLUDE_PROFILES);\n\t\t\t\t\t\t\tInactiveConfigDataAccessException.throwIfPropertyFound(contributor,\n\t\t\t\t\t\t\t\t\tProfiles.INCLUDE_PROFILES.append(\"[0]\"));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresult.addAll(includes);\n\t\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}", "doc_comment": ""}, "code_tokens": ["getIncludedProfiles", "private", "Collection", "(", ",", ")", "{", "}", "<", ">", "ConfigDataEnvironmentContributors", "contributors", "ConfigDataActivationContext", "activationContext", "PlaceholdersResolver", ";", ";", "for", "(", "ConfigDataEnvironmentContributor", "contributor", ":", "contributors", ")", "return", "result", ";", "?", "extends", "String", "placeholdersResolver", "=", "Set", "result", "=", "{", "}", "new", "ConfigDataEnvironmentContributorPlaceholdersResolver", "<", "String", ">", "new", "ConfigurationPropertySource", ";", "if", "(", "contributors", ",", "activationContext", ",", "null", ",", "true", ",", ")", "LinkedHashSet", "(", ")", "source", "=", "(", ")", "{", "}", ".", "getConversionService", "<", ">", "contributor", ".", "getConfigurationPropertySource", "&&", "Binder", ";", ";", "this", ".", "environment", "(", ")", "(", ")", "source", "!=", "null", "!", "binder", "=", ".", "ifBound", "contributor", ".", "hasConfigDataOption", "new", "Binder", "binder", ".", "bind", "(", ")", "(", ")", "(", ",", "placeholdersResolver", ")", "(", ",", "STRING_LIST", ",", ")", "->", ".", "IGNORE_PROFILES", "Collections", ".", "singleton", "Profiles", ".", "INCLUDE_PROFILES", "ProfilesValidator", ".", "get", "(", "includes", ")", "{", "}", "ConfigData", ".", "Option", "(", "source", ")", "(", "binder", ")", "if", ";", "(", ")", "{", "}", "result", ".", "addAll", "!", ";", ";", "(", "includes", ")", "contributor", ".", "isActive", "InactiveConfigDataAccessException", ".", "throwIfPropertyFound", "InactiveConfigDataAccessException", ".", "throwIfPropertyFound", "(", "activationContext", ")", "(", "contributor", ",", ")", "(", "contributor", ",", ")", "Profiles", ".", "INCLUDE_PROFILES", ".", "append", "Profiles", ".", "INCLUDE_PROFILES", "(", ")", "\"", "[0]", "\""], "metrics": {"cyclomatic_complexity": 5, "n_ast_nodes": 265, "ast_depth": 21, "n_identifiers": 30, "vocab_size": 68, "n_whitespaces": 162, "n_words": 80, "nloc": 23, "token_counts": 186}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironment.java#319-325", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironment.java", "language": "Java"}, "method": {"name": "processWithProfiles", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironment#processWithProfiles", "start_line": 319, "end_line": 325, "signature": "processWithProfiles(ConfigDataEnvironmentContributors contributors,\n\t\t\tConfigDataImporter importer, ConfigDataActivationContext activationContext)", "original_code": "private ConfigDataEnvironmentContributors processWithProfiles(ConfigDataEnvironmentContributors contributors,\n\t\t\tConfigDataImporter importer, ConfigDataActivationContext activationContext) {\n\t\tthis.logger.trace(\"Processing config data environment contributors with profile activation context\");\n\t\tcontributors = contributors.withProcessedImports(importer, activationContext);\n\t\tregisterBootstrapBinder(contributors, activationContext, ALLOW_INACTIVE_BINDING);\n\t\treturn contributors;\n\t}", "doc_comment": ""}, "code_tokens": ["ConfigDataEnvironmentContributors", "processWithProfiles", "private", "(", ",", ",", ")", "{", "}", "ConfigDataEnvironmentContributors", "contributors", "ConfigDataImporter", "importer", "ConfigDataActivationContext", "activationContext", ";", ";", ";", "return", "contributors", ";", ".", "trace", "contributors", "=", "registerBootstrapBinder", "this", ".", "logger", "(", ")", "contributors", ".", "withProcessedImports", "(", "contributors", ",", "activationContext", ",", "ALLOW_INACTIVE_BINDING", ")", "\"", "Processing config data environment contributors with profile activation context", "\"", "(", "importer", ",", "activationContext", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 70, "ast_depth": 8, "n_identifiers": 9, "vocab_size": 25, "n_whitespaces": 39, "n_words": 32, "nloc": 7, "token_counts": 49}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironment.java#327-332", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironment.java", "language": "Java"}, "method": {"name": "registerBootstrapBinder", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironment#registerBootstrapBinder", "start_line": 327, "end_line": 332, "signature": "registerBootstrapBinder(ConfigDataEnvironmentContributors contributors,\n\t\t\t@Nullable ConfigDataActivationContext activationContext, BinderOption... binderOptions)", "original_code": "private void registerBootstrapBinder(ConfigDataEnvironmentContributors contributors,\n\t\t\t@Nullable ConfigDataActivationContext activationContext, BinderOption... binderOptions) {\n\t\tthis.bootstrapContext.register(Binder.class,\n\t\t\t\tInstanceSupplier.from(() -> contributors.getBinder(activationContext, binderOptions))\n\t\t\t\t\t.withScope(Scope.PROTOTYPE));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "registerBootstrapBinder", "private", "(", ",", ",", ")", "{", "}", "ConfigDataEnvironmentContributors", "contributors", "ConfigDataActivationContext", "activationContext", "BinderOption", "...", ";", "binderOptions", ".", "register", "@", "Nullable", "this", ".", "bootstrapContext", "(", ",", ")", "Binder", ".", "class", ".", "withScope", "InstanceSupplier", ".", "from", "(", ")", "(", ")", "Scope", ".", "PROTOTYPE", "->", "(", ")", "contributors", ".", "getBinder", "(", "activationContext", ",", "binderOptions", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 78, "ast_depth": 13, "n_identifiers": 13, "vocab_size": 31, "n_whitespaces": 31, "n_words": 24, "nloc": 6, "token_counts": 53}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironment.java#334-349", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironment.java", "language": "Java"}, "method": {"name": "applyToEnvironment", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironment#applyToEnvironment", "start_line": 334, "end_line": 349, "signature": "applyToEnvironment(ConfigDataEnvironmentContributors contributors,\n\t\t\tConfigDataActivationContext activationContext, Set<ConfigDataLocation> loadedLocations,\n\t\t\tSet<ConfigDataLocation> optionalLocations)", "original_code": "private void applyToEnvironment(ConfigDataEnvironmentContributors contributors,\n\t\t\tConfigDataActivationContext activationContext, Set<ConfigDataLocation> loadedLocations,\n\t\t\tSet<ConfigDataLocation> optionalLocations) {\n\t\tcheckForInvalidProperties(contributors);\n\t\tcheckMandatoryLocations(contributors, activationContext, loadedLocations, optionalLocations);\n\t\tMutablePropertySources propertySources = this.environment.getPropertySources();\n\t\tapplyContributor(contributors, activationContext, propertySources);\n\t\tDefaultPropertiesPropertySource.moveToEnd(propertySources);\n\t\tProfiles profiles = activationContext.getProfiles();\n\t\tAssert.state(profiles != null, \"'profiles' must not be null\");\n\t\tthis.logger.trace(LogMessage.format(\"Setting default profiles: %s\", profiles.getDefault()));\n\t\tthis.environment.setDefaultProfiles(StringUtils.toStringArray(profiles.getDefault()));\n\t\tthis.logger.trace(LogMessage.format(\"Setting active profiles: %s\", profiles.getActive()));\n\t\tthis.environment.setActiveProfiles(StringUtils.toStringArray(profiles.getActive()));\n\t\tthis.environmentUpdateListener.onSetProfiles(profiles);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "applyToEnvironment", "private", "(", ",", ",", ",", ")", "{", "}", "ConfigDataEnvironmentContributors", "contributors", "ConfigDataActivationContext", "activationContext", "loadedLocations", "optionalLocations", ";", ";", "MutablePropertySources", ";", ";", ";", "Profiles", ";", ";", ";", ";", ";", ";", ";", "Set", "Set", "checkForInvalidProperties", "checkMandatoryLocations", "propertySources", "=", "applyContributor", "DefaultPropertiesPropertySource", ".", "moveToEnd", "profiles", "=", "Assert", ".", "state", ".", "trace", ".", "setDefaultProfiles", ".", "trace", ".", "setActiveProfiles", ".", "onSetProfiles", "<", "ConfigDataLocation", ">", "<", "ConfigDataLocation", ">", "(", "contributors", ")", "(", "contributors", ",", "activationContext", ",", "loadedLocations", ",", "optionalLocations", ")", ".", "getPropertySources", "(", "contributors", ",", "activationContext", ",", "propertySources", ")", "(", "propertySources", ")", "activationContext", ".", "getProfiles", "(", ",", ")", "this", ".", "logger", "(", ")", "this", ".", "environment", "(", ")", "this", ".", "logger", "(", ")", "this", ".", "environment", "(", ")", "this", ".", "environmentUpdateListener", "(", "profiles", ")", "this", ".", "environment", "(", ")", "(", ")", "profiles", "!=", "null", "\"", "'profiles' must not be null", "\"", "LogMessage", ".", "format", "StringUtils", ".", "toStringArray", "LogMessage", ".", "format", "StringUtils", ".", "toStringArray", "(", ",", ")", "(", ")", "(", ",", ")", "(", ")", "\"", "Setting default profiles: %s", "\"", "profiles", ".", "getDefault", "profiles", ".", "getDefault", "\"", "Setting active profiles: %s", "\"", "profiles", ".", "getActive", "profiles", ".", "getActive", "(", ")", "(", ")", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 255, "ast_depth": 11, "n_identifiers": 29, "vocab_size": 54, "n_whitespaces": 80, "n_words": 85, "nloc": 16, "token_counts": 178}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironment.java#351-370", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironment.java", "language": "Java"}, "method": {"name": "applyContributor", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironment#applyContributor", "start_line": 351, "end_line": 370, "signature": "applyContributor(ConfigDataEnvironmentContributors contributors,\n\t\t\tConfigDataActivationContext activationContext, MutablePropertySources propertySources)", "original_code": "private void applyContributor(ConfigDataEnvironmentContributors contributors,\n\t\t\tConfigDataActivationContext activationContext, MutablePropertySources propertySources) {\n\t\tthis.logger.trace(\"Applying config data environment contributions\");\n\t\tfor (ConfigDataEnvironmentContributor contributor : contributors) {\n\t\t\tPropertySource<?> propertySource = contributor.getPropertySource();\n\t\t\tif (contributor.getKind() == ConfigDataEnvironmentContributor.Kind.BOUND_IMPORT && propertySource != null) {\n\t\t\t\tif (!contributor.isActive(activationContext)) {\n\t\t\t\t\tthis.logger\n\t\t\t\t\t\t.trace(LogMessage.format(\"Skipping inactive property source '%s'\", propertySource.getName()));\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.logger\n\t\t\t\t\t\t.trace(LogMessage.format(\"Adding imported property source '%s'\", propertySource.getName()));\n\t\t\t\t\tpropertySources.addLast(propertySource);\n\t\t\t\t\tthis.environmentUpdateListener.onPropertySourceAdded(propertySource, contributor.getLocation(),\n\t\t\t\t\t\t\tcontributor.getResource());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "applyContributor", "private", "(", ",", ",", ")", "{", "}", "ConfigDataEnvironmentContributors", "contributors", "ConfigDataActivationContext", "activationContext", "MutablePropertySources", "propertySources", ";", "for", "(", "ConfigDataEnvironmentContributor", "contributor", ":", "contributors", ")", ".", "trace", "{", "}", "this", ".", "logger", "(", ")", ";", "if", "\"", "Applying config data environment contributions", "\"", "PropertySource", "propertySource", "=", "(", ")", "{", "}", "<", ">", "contributor", ".", "getPropertySource", "&&", "if", "else", "?", "(", ")", "==", "propertySource", "!=", "null", "(", ")", "{", "}", "{", "}", "contributor", ".", "getKind", ".", "BOUND_IMPORT", "!", ";", ";", ";", ";", "(", ")", "ConfigDataEnvironmentContributor", ".", "Kind", "contributor", ".", "isActive", ".", "trace", ".", "trace", "propertySources", ".", "addLast", ".", "onPropertySourceAdded", "(", "activationContext", ")", "this", ".", "logger", "(", ")", "this", ".", "logger", "(", ")", "(", "propertySource", ")", "this", ".", "environmentUpdateListener", "(", "propertySource", ",", ",", ")", "LogMessage", ".", "format", "LogMessage", ".", "format", "contributor", ".", "getLocation", "contributor", ".", "getResource", "(", ",", ")", "(", ",", ")", "(", ")", "(", ")", "\"", "Skipping inactive property source '%s'", "\"", "propertySource", ".", "getName", "\"", "Adding imported property source '%s'", "\"", "propertySource", ".", "getName", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 5, "n_ast_nodes": 222, "ast_depth": 17, "n_identifiers": 22, "vocab_size": 53, "n_whitespaces": 134, "n_words": 73, "nloc": 20, "token_counts": 154}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironment.java#372-376", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironment.java", "language": "Java"}, "method": {"name": "checkForInvalidProperties", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironment#checkForInvalidProperties", "start_line": 372, "end_line": 376, "signature": "checkForInvalidProperties(ConfigDataEnvironmentContributors contributors)", "original_code": "private void checkForInvalidProperties(ConfigDataEnvironmentContributors contributors) {\n\t\tfor (ConfigDataEnvironmentContributor contributor : contributors) {\n\t\t\tInvalidConfigDataPropertyException.throwIfPropertyFound(contributor);\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "checkForInvalidProperties", "private", "(", ")", "{", "}", "ConfigDataEnvironmentContributors", "contributors", "for", "(", "ConfigDataEnvironmentContributor", "contributor", ":", "contributors", ")", "{", "}", ";", "InvalidConfigDataPropertyException", ".", "throwIfPropertyFound", "(", "contributor", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 36, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 17, "n_whitespaces": 21, "n_words": 12, "nloc": 5, "token_counts": 25}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironment.java#378-399", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironment.java", "language": "Java"}, "method": {"name": "checkMandatoryLocations", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironment#checkMandatoryLocations", "start_line": 378, "end_line": 399, "signature": "checkMandatoryLocations(ConfigDataEnvironmentContributors contributors,\n\t\t\tConfigDataActivationContext activationContext, Set<ConfigDataLocation> loadedLocations,\n\t\t\tSet<ConfigDataLocation> optionalLocations)", "original_code": "private void checkMandatoryLocations(ConfigDataEnvironmentContributors contributors,\n\t\t\tConfigDataActivationContext activationContext, Set<ConfigDataLocation> loadedLocations,\n\t\t\tSet<ConfigDataLocation> optionalLocations) {\n\t\tSet<ConfigDataLocation> mandatoryLocations = new LinkedHashSet<>();\n\t\tfor (ConfigDataEnvironmentContributor contributor : contributors) {\n\t\t\tif (contributor.isActive(activationContext)) {\n\t\t\t\tmandatoryLocations.addAll(getMandatoryImports(contributor));\n\t\t\t}\n\t\t}\n\t\tfor (ConfigDataEnvironmentContributor contributor : contributors) {\n\t\t\tif (contributor.getLocation() != null) {\n\t\t\t\tmandatoryLocations.remove(contributor.getLocation());\n\t\t\t}\n\t\t}\n\t\tmandatoryLocations.removeAll(loadedLocations);\n\t\tmandatoryLocations.removeAll(optionalLocations);\n\t\tif (!mandatoryLocations.isEmpty()) {\n\t\t\tfor (ConfigDataLocation mandatoryLocation : mandatoryLocations) {\n\t\t\t\tthis.notFoundAction.handle(this.logger, new ConfigDataLocationNotFoundException(mandatoryLocation));\n\t\t\t}\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "checkMandatoryLocations", "private", "(", ",", ",", ",", ")", "{", "}", "ConfigDataEnvironmentContributors", "contributors", "ConfigDataActivationContext", "activationContext", "loadedLocations", "optionalLocations", ";", "for", "(", "ConfigDataEnvironmentContributor", "contributor", ":", "contributors", ")", "for", "(", "ConfigDataEnvironmentContributor", "contributor", ":", "contributors", ")", ";", ";", "if", "Set", "Set", "Set", "mandatoryLocations", "=", "{", "}", "{", "}", "mandatoryLocations", ".", "removeAll", "mandatoryLocations", ".", "removeAll", "(", ")", "{", "}", "<", "ConfigDataLocation", ">", "<", "ConfigDataLocation", ">", "<", "ConfigDataLocation", ">", "new", "if", "if", "(", "loadedLocations", ")", "(", "optionalLocations", ")", "!", "for", "(", "ConfigDataLocation", "mandatoryLocation", ":", "mandatoryLocations", ")", "LinkedHashSet", "(", ")", "(", ")", "{", "}", "(", ")", "{", "}", "mandatoryLocations", ".", "isEmpty", "{", "}", "<", ">", "contributor", ".", "isActive", ";", "!=", "null", ";", "(", ")", ";", "(", "activationContext", ")", "mandatoryLocations", ".", "addAll", "contributor", ".", "getLocation", "mandatoryLocations", ".", "remove", ".", "handle", "(", ")", "(", ")", "(", ")", "this", ".", "notFoundAction", "(", ",", ")", "getMandatoryImports", "contributor", ".", "getLocation", "this", ".", "logger", "new", "ConfigDataLocationNotFoundException", "(", "contributor", ")", "(", ")", "(", "mandatoryLocation", ")"], "metrics": {"cyclomatic_complexity": 7, "n_ast_nodes": 217, "ast_depth": 13, "n_identifiers": 18, "vocab_size": 45, "n_whitespaces": 113, "n_words": 63, "nloc": 22, "token_counts": 150}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironment.java#401-410", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironment.java", "language": "Java"}, "method": {"name": "getMandatoryImports", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironment#getMandatoryImports", "start_line": 401, "end_line": 410, "signature": "getMandatoryImports(ConfigDataEnvironmentContributor contributor)", "original_code": "private Set<ConfigDataLocation> getMandatoryImports(ConfigDataEnvironmentContributor contributor) {\n\t\tList<ConfigDataLocation> imports = contributor.getImports();\n\t\tSet<ConfigDataLocation> mandatoryLocations = new LinkedHashSet<>(imports.size());\n\t\tfor (ConfigDataLocation location : imports) {\n\t\t\tif (!location.isOptional()) {\n\t\t\t\tmandatoryLocations.add(location);\n\t\t\t}\n\t\t}\n\t\treturn mandatoryLocations;\n\t}", "doc_comment": ""}, "code_tokens": ["getMandatoryImports", "private", "Set", "(", ")", "{", "}", "<", "ConfigDataLocation", ">", "ConfigDataEnvironmentContributor", "contributor", ";", ";", "for", "(", "ConfigDataLocation", "location", ":", "imports", ")", "return", "mandatoryLocations", ";", "List", "imports", "=", "Set", "mandatoryLocations", "=", "{", "}", "<", "ConfigDataLocation", ">", "contributor", ".", "getImports", "<", "ConfigDataLocation", ">", "new", "if", "(", ")", "LinkedHashSet", "(", ")", "(", ")", "{", "}", "<", ">", "imports", ".", "size", "!", ";", "(", ")", "location", ".", "isOptional", "mandatoryLocations", ".", "add", "(", ")", "(", "location", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 108, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 30, "n_whitespaces": 49, "n_words": 30, "nloc": 10, "token_counts": 72}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/env/DefaultPropertiesPropertySource.java#61-63", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/DefaultPropertiesPropertySource.java", "language": "Java"}, "method": {"name": "hasMatchingName", "qualified_name": "org.springframework.boot.env.DefaultPropertiesPropertySource#hasMatchingName", "start_line": 61, "end_line": 63, "signature": "hasMatchingName(@Nullable PropertySource<?> propertySource)", "original_code": "public static boolean hasMatchingName(@Nullable PropertySource<?> propertySource) {\n\t\treturn (propertySource != null) && propertySource.getName().equals(NAME);\n\t}", "doc_comment": "/**\n\t * Return {@code true} if the given source is named 'defaultProperties'.\n\t * @param propertySource the property source to check\n\t * @return {@code true} if the name matches\n\t */"}, "code_tokens": ["boolean", "hasMatchingName", "public", "static", "(", ")", "{", "}", "propertySource", "return", ";", "PropertySource", "&&", "@", "Nullable", "<", ">", "(", ")", ".", "equals", "?", "propertySource", "!=", "null", "propertySource", ".", "getName", "(", "NAME", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 52, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 24, "n_whitespaces": 16, "n_words": 14, "nloc": 3, "token_counts": 33}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/env/DefaultPropertiesPropertySource.java#72-77", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/DefaultPropertiesPropertySource.java", "language": "Java"}, "method": {"name": "ifNotEmpty", "qualified_name": "org.springframework.boot.env.DefaultPropertiesPropertySource#ifNotEmpty", "start_line": 72, "end_line": 77, "signature": "ifNotEmpty(@Nullable Map<String, Object> source,\n\t\t\t@Nullable Consumer<DefaultPropertiesPropertySource> action)", "original_code": "public static void ifNotEmpty(@Nullable Map<String, Object> source,\n\t\t\t@Nullable Consumer<DefaultPropertiesPropertySource> action) {\n\t\tif (!CollectionUtils.isEmpty(source) && action != null) {\n\t\t\taction.accept(new DefaultPropertiesPropertySource(source));\n\t\t}\n\t}", "doc_comment": "/**\n\t * Create a new {@link DefaultPropertiesPropertySource} instance if the provided\n\t * source is not empty.\n\t * @param source the {@code Map} source\n\t * @param action the action used to consume the\n\t * {@link DefaultPropertiesPropertySource}\n\t */"}, "code_tokens": ["void", "ifNotEmpty", "public", "static", "(", ",", ")", "{", "}", "source", "action", "if", "Map", "Consumer", "(", ")", "{", "}", "@", "Nullable", "<", "String", ",", "Object", ">", "@", "Nullable", "<", "DefaultPropertiesPropertySource", ">", "&&", ";", "!", "action", "!=", "null", "action", ".", "accept", "CollectionUtils", ".", "isEmpty", "(", ")", "(", "source", ")", "new", "DefaultPropertiesPropertySource", "(", "source", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 80, "ast_depth": 11, "n_identifiers": 7, "vocab_size": 31, "n_whitespaces": 32, "n_words": 24, "nloc": 6, "token_counts": 52}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/env/DefaultPropertiesPropertySource.java#85-98", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/DefaultPropertiesPropertySource.java", "language": "Java"}, "method": {"name": "addOrMerge", "qualified_name": "org.springframework.boot.env.DefaultPropertiesPropertySource#addOrMerge", "start_line": 85, "end_line": 98, "signature": "addOrMerge(Map<String, Object> source, MutablePropertySources sources)", "original_code": "public static void addOrMerge(Map<String, Object> source, MutablePropertySources sources) {\n\t\tif (!CollectionUtils.isEmpty(source)) {\n\t\t\tMap<String, Object> resultingSource = new HashMap<>();\n\t\t\tDefaultPropertiesPropertySource propertySource = new DefaultPropertiesPropertySource(resultingSource);\n\t\t\tif (sources.contains(NAME)) {\n\t\t\t\tmergeIfPossible(source, sources, resultingSource);\n\t\t\t\tsources.replace(NAME, propertySource);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tresultingSource.putAll(source);\n\t\t\t\tsources.addLast(propertySource);\n\t\t\t}\n\t\t}\n\t}", "doc_comment": "/**\n\t * Add a new {@link DefaultPropertiesPropertySource} or merge with an existing one.\n\t * @param source the {@code Map} source\n\t * @param sources the existing sources\n\t * @since 2.4.4\n\t */"}, "code_tokens": ["void", "addOrMerge", "public", "static", "(", ",", ")", "{", "}", "source", "MutablePropertySources", "sources", "if", "Map", "(", ")", "{", "}", "<", "String", ",", "Object", ">", "!", ";", "DefaultPropertiesPropertySource", ";", "if", "else", "CollectionUtils", ".", "isEmpty", "Map", "resultingSource", "=", "propertySource", "=", "(", ")", "{", "}", "{", "}", "(", "source", ")", "<", "String", ",", "Object", ">", "new", "new", "DefaultPropertiesPropertySource", "sources", ".", "contains", ";", ";", ";", ";", "HashMap", "(", ")", "(", "resultingSource", ")", "(", "NAME", ")", "mergeIfPossible", "sources", ".", "replace", "resultingSource", ".", "putAll", "sources", ".", "addLast", "<", ">", "(", "source", ",", "sources", ",", "resultingSource", ")", "(", "NAME", ",", "propertySource", ")", "(", "source", ")", "(", "propertySource", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 145, "ast_depth": 11, "n_identifiers": 13, "vocab_size": 36, "n_whitespaces": 77, "n_words": 44, "nloc": 14, "token_counts": 100}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/env/DefaultPropertiesPropertySource.java#100-111", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/DefaultPropertiesPropertySource.java", "language": "Java"}, "method": {"name": "mergeIfPossible", "qualified_name": "org.springframework.boot.env.DefaultPropertiesPropertySource#mergeIfPossible", "start_line": 100, "end_line": 111, "signature": "mergeIfPossible(Map<String, Object> source, MutablePropertySources sources,\n\t\t\tMap<String, Object> resultingSource)", "original_code": "@SuppressWarnings(\"unchecked\")\n\tprivate static void mergeIfPossible(Map<String, Object> source, MutablePropertySources sources,\n\t\t\tMap<String, Object> resultingSource) {\n\t\tPropertySource<?> existingSource = sources.get(NAME);\n\t\tif (existingSource != null) {\n\t\t\tObject underlyingSource = existingSource.getSource();\n\t\t\tif (underlyingSource instanceof Map) {\n\t\t\t\tresultingSource.putAll((Map<String, Object>) underlyingSource);\n\t\t\t}\n\t\t\tresultingSource.putAll(source);\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "mergeIfPossible", "private", "static", "(", ",", ",", ")", "{", "}", "@", "SuppressWarnings", "source", "MutablePropertySources", "sources", "resultingSource", ";", "if", "(", ")", "Map", "Map", "PropertySource", "existingSource", "=", "(", ")", "{", "}", "\"", "unchecked", "\"", "<", "String", ",", "Object", ">", "<", "String", ",", "Object", ">", "<", ">", "sources", ".", "get", "existingSource", "!=", "null", "Object", ";", "if", ";", "?", "(", "NAME", ")", "underlyingSource", "=", "(", ")", "{", "}", "resultingSource", ".", "putAll", "existingSource", ".", "getSource", "underlyingSource", "instanceof", "Map", ";", "(", "source", ")", "(", ")", "resultingSource", ".", "putAll", "(", ")", "(", ")", "underlyingSource", "Map", "<", "String", ",", "Object", ">"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 136, "ast_depth": 14, "n_identifiers": 11, "vocab_size": 37, "n_whitespaces": 64, "n_words": 41, "nloc": 12, "token_counts": 93}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/env/DefaultPropertiesPropertySource.java#118-120", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/DefaultPropertiesPropertySource.java", "language": "Java"}, "method": {"name": "moveToEnd", "qualified_name": "org.springframework.boot.env.DefaultPropertiesPropertySource#moveToEnd", "start_line": 118, "end_line": 120, "signature": "moveToEnd(ConfigurableEnvironment environment)", "original_code": "public static void moveToEnd(ConfigurableEnvironment environment) {\n\t\tmoveToEnd(environment.getPropertySources());\n\t}", "doc_comment": "/**\n\t * Move the 'defaultProperties' property source so that it's the last source in the\n\t * given {@link ConfigurableEnvironment}.\n\t * @param environment the environment to update\n\t */"}, "code_tokens": ["void", "moveToEnd", "public", "static", "(", ")", "{", "}", "ConfigurableEnvironment", "environment", ";", "moveToEnd", "(", ")", "environment", ".", "getPropertySources", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 30, "ast_depth": 9, "n_identifiers": 3, "vocab_size": 13, "n_whitespaces": 10, "n_words": 9, "nloc": 3, "token_counts": 19}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/main/java/org/springframework/boot/env/DefaultPropertiesPropertySource.java#127-132", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/DefaultPropertiesPropertySource.java", "language": "Java"}, "method": {"name": "moveToEnd", "qualified_name": "org.springframework.boot.env.DefaultPropertiesPropertySource#moveToEnd", "start_line": 127, "end_line": 132, "signature": "moveToEnd(MutablePropertySources propertySources)", "original_code": "public static void moveToEnd(MutablePropertySources propertySources) {\n\t\tPropertySource<?> propertySource = propertySources.remove(NAME);\n\t\tif (propertySource != null) {\n\t\t\tpropertySources.addLast(propertySource);\n\t\t}\n\t}", "doc_comment": "/**\n\t * Move the 'defaultProperties' property source so that it's the last source in the\n\t * given {@link MutablePropertySources}.\n\t * @param propertySources the property sources to update\n\t */"}, "code_tokens": ["void", "moveToEnd", "public", "static", "(", ")", "{", "}", "MutablePropertySources", "propertySources", ";", "if", "PropertySource", "propertySource", "=", "(", ")", "{", "}", "<", ">", "propertySources", ".", "remove", "propertySource", "!=", "null", ";", "?", "(", "NAME", ")", "propertySources", ".", "addLast", "(", "propertySource", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 58, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 24, "n_whitespaces": 27, "n_words": 17, "nloc": 6, "token_counts": 38}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#172-177", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "getEnvironment", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#getEnvironment", "start_line": 172, "end_line": 177, "signature": "getEnvironment()", "original_code": "private Environment getEnvironment() {\n\t\tif (this.context != null) {\n\t\t\treturn this.context.getEnvironment();\n\t\t}\n\t\tthrow new IllegalStateException(\"Could not obtain Environment\");\n\t}", "doc_comment": ""}, "code_tokens": ["Environment", "getEnvironment", "private", "(", ")", "{", "}", "if", "throw", ";", "(", ")", "{", "}", "new", "IllegalStateException", "!=", "null", "return", ";", "(", ")", "this", ".", "context", ".", "getEnvironment", "\"", "Could not obtain Environment", "\"", "this", ".", "context", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 53, "ast_depth": 9, "n_identifiers": 2, "vocab_size": 20, "n_whitespaces": 28, "n_words": 18, "nloc": 6, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#179-183", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "storeAndClearHeadlessProperty", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#storeAndClearHeadlessProperty", "start_line": 179, "end_line": 183, "signature": "storeAndClearHeadlessProperty()", "original_code": "@BeforeEach\n\tvoid storeAndClearHeadlessProperty() {\n\t\tthis.headlessProperty = System.getProperty(\"java.awt.headless\");\n\t\tSystem.clearProperty(\"java.awt.headless\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "storeAndClearHeadlessProperty", "(", ")", "{", "}", "@", "BeforeEach", ";", ";", "=", "System", ".", "clearProperty", "this", ".", "headlessProperty", "System", ".", "getProperty", "(", ")", "(", ")", "\"", "java.awt.headless", "\"", "\"", "java.awt.headless", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 46, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 18, "n_whitespaces": 14, "n_words": 15, "nloc": 5, "token_counts": 30}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#185-193", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "reinstateHeadlessProperty", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#reinstateHeadlessProperty", "start_line": 185, "end_line": 193, "signature": "reinstateHeadlessProperty()", "original_code": "@AfterEach\n\tvoid reinstateHeadlessProperty() {\n\t\tif (this.headlessProperty == null) {\n\t\t\tSystem.clearProperty(\"java.awt.headless\");\n\t\t}\n\t\telse {\n\t\t\tSystem.setProperty(\"java.awt.headless\", this.headlessProperty);\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "reinstateHeadlessProperty", "(", ")", "{", "}", "@", "AfterEach", "if", "else", "(", ")", "{", "}", "{", "}", "==", "null", ";", ";", "this", ".", "headlessProperty", "System", ".", "clearProperty", "System", ".", "setProperty", "(", ")", "(", ",", ")", "\"", "java.awt.headless", "\"", "\"", "java.awt.headless", "\"", "this", ".", "headlessProperty"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 64, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 22, "n_whitespaces": 32, "n_words": 20, "nloc": 9, "token_counts": 43}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#195-202", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "cleanUp", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#cleanUp", "start_line": 195, "end_line": 202, "signature": "cleanUp()", "original_code": "@AfterEach\n\tvoid cleanUp() {\n\t\tif (this.context != null) {\n\t\t\tthis.context.close();\n\t\t}\n\t\tSystem.clearProperty(\"spring.main.banner-mode\");\n\t\tSpringApplicationShutdownHookInstance.reset();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "cleanUp", "(", ")", "{", "}", "@", "AfterEach", "if", ";", ";", "(", ")", "{", "}", "System", ".", "clearProperty", "SpringApplicationShutdownHookInstance", ".", "reset", "!=", "null", ";", "(", ")", "(", ")", "this", ".", "context", ".", "close", "\"", "spring.main.banner-mode", "\"", "this", ".", "context", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 63, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 22, "n_whitespaces": 26, "n_words": 18, "nloc": 8, "token_counts": 41}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#204-208", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "sourcesMustNotBeNull", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#sourcesMustNotBeNull", "start_line": 204, "end_line": 208, "signature": "sourcesMustNotBeNull()", "original_code": "@Test\n\tvoid sourcesMustNotBeNull() {\n\t\tassertThatIllegalArgumentException().isThrownBy(() -> new SpringApplication((Class<?>[]) null).run())\n\t\t\t.withMessageContaining(\"'primarySources' must not be null\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "sourcesMustNotBeNull", "(", ")", "{", "}", "@", "Test", ";", ".", "withMessageContaining", ".", "isThrownBy", "(", ")", "assertThatIllegalArgumentException", "(", ")", "\"", "'primarySources' must not be null", "\"", "(", ")", "->", "(", ")", ".", "run", "new", "SpringApplication", "(", ")", "(", ")", "(", ")", "null", "Class", "[", "]", "<", ">", "?"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 69, "ast_depth": 17, "n_identifiers": 6, "vocab_size": 26, "n_whitespaces": 21, "n_words": 16, "nloc": 5, "token_counts": 43}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#210-214", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "sourcesMustNotBeEmpty", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#sourcesMustNotBeEmpty", "start_line": 210, "end_line": 214, "signature": "sourcesMustNotBeEmpty()", "original_code": "@Test\n\tvoid sourcesMustNotBeEmpty() {\n\t\tassertThatIllegalStateException().isThrownBy(() -> new SpringApplication().run())\n\t\t\t.withMessageContaining(\"No sources defined\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "sourcesMustNotBeEmpty", "(", ")", "{", "}", "@", "Test", ";", ".", "withMessageContaining", ".", "isThrownBy", "(", ")", "assertThatIllegalStateException", "(", ")", "\"", "No sources defined", "\"", "(", ")", "->", "(", ")", ".", "run", "new", "SpringApplication", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 54, "ast_depth": 12, "n_identifiers": 6, "vocab_size": 19, "n_whitespaces": 18, "n_words": 12, "nloc": 5, "token_counts": 34}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#216-223", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "sourcesMustBeAccessible", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#sourcesMustBeAccessible", "start_line": 216, "end_line": 223, "signature": "sourcesMustBeAccessible()", "original_code": "@Test\n\tvoid sourcesMustBeAccessible() {\n\t\tassertThatExceptionOfType(BeanDefinitionStoreException.class)\n\t\t\t.isThrownBy(() -> new SpringApplication(InaccessibleConfiguration.class).run())\n\t\t\t.havingRootCause()\n\t\t\t.isInstanceOf(IllegalArgumentException.class)\n\t\t\t.withMessageContaining(\"No visible constructors\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "sourcesMustBeAccessible", "(", ")", "{", "}", "@", "Test", ";", ".", "withMessageContaining", ".", "isInstanceOf", "(", ")", ".", "havingRootCause", "(", ")", "\"", "No visible constructors", "\"", ".", "isThrownBy", "(", ")", "IllegalArgumentException", ".", "class", "assertThatExceptionOfType", "(", ")", "(", ")", "->", "BeanDefinitionStoreException", ".", "class", "(", ")", ".", "run", "new", "SpringApplication", "(", ")", "(", ")", "InaccessibleConfiguration", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 78, "ast_depth": 15, "n_identifiers": 8, "vocab_size": 25, "n_whitespaces": 30, "n_words": 20, "nloc": 8, "token_counts": 51}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#225-233", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "customBanner", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#customBanner", "start_line": 225, "end_line": 233, "signature": "customBanner(CapturedOutput output)", "original_code": "@Test\n\t@WithResource(name = \"banner.txt\", content = \"Running a Test!\")\n\tvoid customBanner(CapturedOutput output) {\n\t\tSpringApplication application = spy(new SpringApplication(ExampleConfig.class));\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tthis.context = application.run();\n\t\tassertThat(output).startsWith(\"Running a Test!\");\n\n\t}", "doc_comment": ""}, "code_tokens": ["void", "customBanner", "(", ")", "{", "}", "@", "Test", "@", "WithResource", "CapturedOutput", "output", "SpringApplication", ";", ";", ";", ";", "(", ",", ")", "application", "=", "application", ".", "setWebApplicationType", "=", ".", "startsWith", "name", "=", "content", "=", "spy", "(", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "\"", "banner.txt", "\"", "\"", "Running a Test!", "\"", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", "output", ")", "\"", "Running a Test!", "\"", "new", "SpringApplication", "(", ")", "ExampleConfig", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 105, "ast_depth": 11, "n_identifiers": 15, "vocab_size": 34, "n_whitespaces": 37, "n_words": 34, "nloc": 8, "token_counts": 70}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#235-245", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "customBannerWithProperties", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#customBannerWithProperties", "start_line": 235, "end_line": 245, "signature": "customBannerWithProperties(CapturedOutput output)", "original_code": "@Test\n\t@WithResource(name = \"banner.txt\", content = \"\"\"\n\t\t\tRunning a Test!\n\n\t\t\t${test.property}\"\"\")\n\tvoid customBannerWithProperties(CapturedOutput output) {\n\t\tSpringApplication application = spy(new SpringApplication(ExampleConfig.class));\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tthis.context = application.run(\"--test.property=123456\");\n\t\tassertThat(output).containsPattern(\"Running a Test!\\\\s+123456\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "customBannerWithProperties", "(", ")", "{", "}", "@", "Test", "@", "WithResource", "CapturedOutput", "output", "SpringApplication", ";", ";", ";", ";", "(", ",", ")", "application", "=", "application", ".", "setWebApplicationType", "=", ".", "containsPattern", "name", "=", "content", "=", "spy", "(", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "\"", "banner.txt", "\"", "\"\"\"", "\n\t\t\tRunning a Test!\n\n\t\t\t${test.property}", "\"\"\"", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", "output", ")", "\"", "Running a Test!", "\\\\", "s+123456", "\"", "new", "SpringApplication", "\"", "--test.property=123456", "\"", "(", ")", "ExampleConfig", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 111, "ast_depth": 11, "n_identifiers": 15, "vocab_size": 39, "n_whitespaces": 45, "n_words": 41, "nloc": 10, "token_counts": 75}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#247-253", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "logsActiveProfilesWithoutProfileAndSingleDefault", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#logsActiveProfilesWithoutProfileAndSingleDefault", "start_line": 247, "end_line": 253, "signature": "logsActiveProfilesWithoutProfileAndSingleDefault(CapturedOutput output)", "original_code": "@Test\n\tvoid logsActiveProfilesWithoutProfileAndSingleDefault(CapturedOutput output) {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tthis.context = application.run();\n\t\tassertThat(output).contains(\"No active profile set, falling back to 1 default profile: \\\"default\\\"\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "logsActiveProfilesWithoutProfileAndSingleDefault", "(", ")", "{", "}", "@", "Test", "CapturedOutput", "output", "SpringApplication", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "=", ".", "contains", "new", "SpringApplication", "(", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", "output", ")", "\"", "No active profile set, falling back to 1 default profile: ", "\\\"", "default", "\\\"", "\"", "ExampleConfig", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 82, "ast_depth": 9, "n_identifiers": 11, "vocab_size": 30, "n_whitespaces": 35, "n_words": 33, "nloc": 7, "token_counts": 55}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#255-264", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "logsActiveProfilesWithoutProfileAndMultipleDefaults", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#logsActiveProfilesWithoutProfileAndMultipleDefaults", "start_line": 255, "end_line": 264, "signature": "logsActiveProfilesWithoutProfileAndMultipleDefaults(CapturedOutput output)", "original_code": "@Test\n\tvoid logsActiveProfilesWithoutProfileAndMultipleDefaults(CapturedOutput output) {\n\t\tMockEnvironment environment = new MockEnvironment();\n\t\tenvironment.setDefaultProfiles(\"p0\", \"default\");\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tapplication.setEnvironment(environment);\n\t\tthis.context = application.run();\n\t\tassertThat(output).contains(\"No active profile set, falling back to 2 default profiles: \\\"p0\\\", \\\"default\\\"\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "logsActiveProfilesWithoutProfileAndMultipleDefaults", "(", ")", "{", "}", "@", "Test", "CapturedOutput", "output", "MockEnvironment", ";", ";", "SpringApplication", ";", ";", ";", ";", ";", "environment", "=", "environment", ".", "setDefaultProfiles", "application", "=", "application", ".", "setWebApplicationType", "application", ".", "setEnvironment", "=", ".", "contains", "new", "MockEnvironment", "(", ",", ")", "new", "SpringApplication", "(", ")", "(", "environment", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "(", ")", "\"", "p0", "\"", "\"", "default", "\"", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", "output", ")", "\"", "No active profile set, falling back to 2 default profiles: ", "\\\"", "p0", "\\\"", ", ", "\\\"", "default", "\\\"", "\"", "ExampleConfig", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 126, "ast_depth": 9, "n_identifiers": 14, "vocab_size": 37, "n_whitespaces": 50, "n_words": 45, "nloc": 10, "token_counts": 87}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#266-272", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "logsActiveProfilesWithSingleProfile", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#logsActiveProfilesWithSingleProfile", "start_line": 266, "end_line": 272, "signature": "logsActiveProfilesWithSingleProfile(CapturedOutput output)", "original_code": "@Test\n\tvoid logsActiveProfilesWithSingleProfile(CapturedOutput output) {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tthis.context = application.run(\"--spring.profiles.active=myprofiles\");\n\t\tassertThat(output).contains(\"The following 1 profile is active: \\\"myprofiles\\\"\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "logsActiveProfilesWithSingleProfile", "(", ")", "{", "}", "@", "Test", "CapturedOutput", "output", "SpringApplication", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "=", ".", "contains", "new", "SpringApplication", "(", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", "output", ")", "\"", "The following 1 profile is active: ", "\\\"", "myprofiles", "\\\"", "\"", "ExampleConfig", ".", "class", "\"", "--spring.profiles.active=myprofiles", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 86, "ast_depth": 9, "n_identifiers": 11, "vocab_size": 31, "n_whitespaces": 31, "n_words": 33, "nloc": 7, "token_counts": 58}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#274-281", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "logsActiveProfilesWithMultipleProfiles", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#logsActiveProfilesWithMultipleProfiles", "start_line": 274, "end_line": 281, "signature": "logsActiveProfilesWithMultipleProfiles(CapturedOutput output)", "original_code": "@Test\n\tvoid logsActiveProfilesWithMultipleProfiles(CapturedOutput output) {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tapplication.setAdditionalProfiles(\"p1\", \"p2\");\n\t\tapplication.run();\n\t\tassertThat(output).contains(\"The following 2 profiles are active: \\\"p1\\\", \\\"p2\\\"\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "logsActiveProfilesWithMultipleProfiles", "(", ")", "{", "}", "@", "Test", "CapturedOutput", "output", "SpringApplication", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "application", ".", "setAdditionalProfiles", "application", ".", "run", ".", "contains", "new", "SpringApplication", "(", ")", "(", ",", ")", "(", ")", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "\"", "p1", "\"", "\"", "p2", "\"", "(", "output", ")", "\"", "The following 2 profiles are active: ", "\\\"", "p1", "\\\"", ", ", "\\\"", "p2", "\\\"", "\"", "ExampleConfig", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 98, "ast_depth": 9, "n_identifiers": 11, "vocab_size": 32, "n_whitespaces": 34, "n_words": 32, "nloc": 8, "token_counts": 68}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#283-290", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "enableBannerInLogViaProperty", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#enableBannerInLogViaProperty", "start_line": 283, "end_line": 290, "signature": "enableBannerInLogViaProperty(CapturedOutput output)", "original_code": "@Test\n\tvoid enableBannerInLogViaProperty(CapturedOutput output) {\n\t\tSpringApplication application = spy(new SpringApplication(ExampleConfig.class));\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tthis.context = application.run(\"--spring.main.banner-mode=log\");\n\t\tassertThatBannerModeIs(application, Banner.Mode.LOG);\n\t\tassertThat(output).contains(\"o.s.b.SpringApplication\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "enableBannerInLogViaProperty", "(", ")", "{", "}", "@", "Test", "CapturedOutput", "output", "SpringApplication", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "=", "assertThatBannerModeIs", ".", "contains", "spy", "(", ")", "this", ".", "context", "application", ".", "run", "(", "application", ",", ")", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", ".", "LOG", "(", "output", ")", "\"", "o.s.b.SpringApplication", "\"", "new", "SpringApplication", "\"", "--spring.main.banner-mode=log", "\"", "Banner", ".", "Mode", "(", ")", "ExampleConfig", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 104, "ast_depth": 11, "n_identifiers": 16, "vocab_size": 35, "n_whitespaces": 29, "n_words": 37, "nloc": 8, "token_counts": 69}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#292-299", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "triggersConfigFileApplicationListenerBeforeBinding", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#triggersConfigFileApplicationListenerBeforeBinding", "start_line": 292, "end_line": 299, "signature": "triggersConfigFileApplicationListenerBeforeBinding()", "original_code": "@Test\n\t@WithResource(name = \"bindtoapplication.properties\", content = \"spring.main.banner-mode=off\")\n\tvoid triggersConfigFileApplicationListenerBeforeBinding() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tthis.context = application.run(\"--spring.config.name=bindtoapplication\");\n\t\tassertThatBannerModeIs(application, Mode.OFF);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "triggersConfigFileApplicationListenerBeforeBinding", "(", ")", "{", "}", "@", "Test", "@", "WithResource", "SpringApplication", ";", ";", ";", ";", "(", ",", ")", "application", "=", "application", ".", "setWebApplicationType", "=", "assertThatBannerModeIs", "name", "=", "content", "=", "new", "SpringApplication", "(", ")", "this", ".", "context", "application", ".", "run", "(", "application", ",", ")", "\"", "bindtoapplication.properties", "\"", "\"", "spring.main.banner-mode=off", "\"", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "Mode", ".", "OFF", "ExampleConfig", ".", "class", "\"", "--spring.config.name=bindtoapplication", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 96, "ast_depth": 9, "n_identifiers": 14, "vocab_size": 33, "n_whitespaces": 32, "n_words": 35, "nloc": 8, "token_counts": 65}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#301-308", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "bindsSystemPropertyToSpringApplication", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#bindsSystemPropertyToSpringApplication", "start_line": 301, "end_line": 308, "signature": "bindsSystemPropertyToSpringApplication()", "original_code": "@Test\n\tvoid bindsSystemPropertyToSpringApplication() {\n\t\tSystem.setProperty(\"spring.main.banner-mode\", \"off\");\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tthis.context = application.run();\n\t\tassertThatBannerModeIs(application, Mode.OFF);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "bindsSystemPropertyToSpringApplication", "(", ")", "{", "}", "@", "Test", ";", "SpringApplication", ";", ";", ";", ";", "System", ".", "setProperty", "application", "=", "application", ".", "setWebApplicationType", "=", "assertThatBannerModeIs", "(", ",", ")", "new", "SpringApplication", "(", ")", "this", ".", "context", "application", ".", "run", "(", "application", ",", ")", "\"", "spring.main.banner-mode", "\"", "\"", "off", "\"", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "Mode", ".", "OFF", "ExampleConfig", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 89, "ast_depth": 9, "n_identifiers": 13, "vocab_size": 31, "n_whitespaces": 29, "n_words": 28, "nloc": 8, "token_counts": 60}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#310-317", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "bindsYamlStyleBannerModeToSpringApplication", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#bindsYamlStyleBannerModeToSpringApplication", "start_line": 310, "end_line": 317, "signature": "bindsYamlStyleBannerModeToSpringApplication()", "original_code": "@Test\n\tvoid bindsYamlStyleBannerModeToSpringApplication() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setDefaultProperties(Collections.singletonMap(\"spring.main.banner-mode\", false));\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tthis.context = application.run();\n\t\tassertThatBannerModeIs(application, Mode.OFF);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "bindsYamlStyleBannerModeToSpringApplication", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setDefaultProperties", "application", ".", "setWebApplicationType", "=", "assertThatBannerModeIs", "new", "SpringApplication", "(", ")", "(", ")", "this", ".", "context", "application", ".", "run", "(", "application", ",", ")", "(", ")", "Collections", ".", "singletonMap", "WebApplicationType", ".", "NONE", "(", ")", "Mode", ".", "OFF", "ExampleConfig", ".", "class", "(", ",", "false", ")", "\"", "spring.main.banner-mode", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 93, "ast_depth": 10, "n_identifiers": 14, "vocab_size": 32, "n_whitespaces": 29, "n_words": 30, "nloc": 8, "token_counts": 63}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#319-325", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "bindsBooleanAsStringBannerModeToSpringApplication", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#bindsBooleanAsStringBannerModeToSpringApplication", "start_line": 319, "end_line": 325, "signature": "bindsBooleanAsStringBannerModeToSpringApplication()", "original_code": "@Test\n\tvoid bindsBooleanAsStringBannerModeToSpringApplication() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tthis.context = application.run(\"--spring.main.banner-mode=false\");\n\t\tassertThatBannerModeIs(application, Mode.OFF);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "bindsBooleanAsStringBannerModeToSpringApplication", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "=", "assertThatBannerModeIs", "new", "SpringApplication", "(", ")", "this", ".", "context", "application", ".", "run", "(", "application", ",", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "Mode", ".", "OFF", "ExampleConfig", ".", "class", "\"", "--spring.main.banner-mode=false", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 75, "ast_depth": 9, "n_identifiers": 11, "vocab_size": 28, "n_whitespaces": 25, "n_words": 26, "nloc": 7, "token_counts": 50}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#327-333", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "customId", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#customId", "start_line": 327, "end_line": 333, "signature": "customId()", "original_code": "@Test\n\tvoid customId() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tthis.context = application.run(\"--spring.application.name=foo\");\n\t\tassertThat(this.context.getId()).startsWith(\"foo\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "customId", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "=", ".", "startsWith", "new", "SpringApplication", "(", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "\"", "foo", "\"", "ExampleConfig", ".", "class", "\"", "--spring.application.name=foo", "\"", ".", "getId", "this", ".", "context", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 89, "ast_depth": 10, "n_identifiers": 11, "vocab_size": 28, "n_whitespaces": 24, "n_words": 27, "nloc": 7, "token_counts": 59}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#335-342", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "specificApplicationContextFactory", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#specificApplicationContextFactory", "start_line": 335, "end_line": 342, "signature": "specificApplicationContextFactory()", "original_code": "@Test\n\tvoid specificApplicationContextFactory() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication\n\t\t\t.setApplicationContextFactory(ApplicationContextFactory.ofContextClass(StaticApplicationContext.class));\n\t\tthis.context = application.run();\n\t\tassertThat(this.context).isInstanceOf(StaticApplicationContext.class);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "specificApplicationContextFactory", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", "application", "=", "application", ".", "setApplicationContextFactory", "=", ".", "isInstanceOf", "new", "SpringApplication", "(", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "(", ")", "ApplicationContextFactory", ".", "ofContextClass", "(", ")", "(", ")", "StaticApplicationContext", ".", "class", "ExampleConfig", ".", "class", "(", ")", "this", ".", "context", "StaticApplicationContext", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 86, "ast_depth": 10, "n_identifiers": 10, "vocab_size": 25, "n_whitespaces": 28, "n_words": 25, "nloc": 8, "token_counts": 57}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#344-355", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "specificApplicationContextInitializer", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#specificApplicationContextInitializer", "start_line": 344, "end_line": 355, "signature": "specificApplicationContextInitializer()", "original_code": "@Test\n\tvoid specificApplicationContextInitializer() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tfinal AtomicReference<ApplicationContext> reference = new AtomicReference<>();\n\t\tapplication.setInitializers(Collections\n\t\t\t.singletonList((ApplicationContextInitializer<ConfigurableApplicationContext>) reference::set));\n\t\tthis.context = application.run(\"--foo=bar\");\n\t\tassertThat(this.context).isSameAs(reference.get());\n\t\t// Custom initializers do not switch off the defaults\n\t\tassertThat(getEnvironment().getProperty(\"foo\")).isEqualTo(\"bar\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "specificApplicationContextInitializer", "(", ")", "{", "// Custom initializers do not switch off the defaults", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "final", "AtomicReference", "reference", "=", "application", ".", "setInitializers", "=", ".", "isSameAs", ".", "isEqualTo", "new", "SpringApplication", "(", ")", "<", "ApplicationContext", ">", "new", "(", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "AtomicReference", "(", ")", "Collections", ".", "singletonList", "(", ")", "(", ")", "reference", ".", "get", "(", ")", "\"", "bar", "\"", "ExampleConfig", ".", "class", "<", ">", "(", ")", "\"", "--foo=bar", "\"", "this", ".", "context", "(", ")", ".", "getProperty", "(", ")", "getEnvironment", "(", ")", "ApplicationContextInitializer", "reference", "::", "set", "(", ")", "\"", "foo", "\"", "<", "ConfigurableApplicationContext", ">"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 171, "ast_depth": 12, "n_identifiers": 19, "vocab_size": 46, "n_whitespaces": 54, "n_words": 53, "nloc": 12, "token_counts": 113}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#357-364", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "applicationRunningEventListener", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#applicationRunningEventListener", "start_line": 357, "end_line": 364, "signature": "applicationRunningEventListener()", "original_code": "@Test\n\tvoid applicationRunningEventListener() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tAtomicReference<ApplicationReadyEvent> reference = addListener(application, ApplicationReadyEvent.class);\n\t\tthis.context = application.run(\"--foo=bar\");\n\t\tassertThat(application).isSameAs(reference.get().getSpringApplication());\n\t}", "doc_comment": ""}, "code_tokens": ["void", "applicationRunningEventListener", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "AtomicReference", "reference", "=", "=", ".", "isSameAs", "new", "SpringApplication", "(", ")", "<", "ApplicationReadyEvent", ">", "addListener", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", "application", ",", ")", "(", ")", "(", "application", ")", ".", "getSpringApplication", "ExampleConfig", ".", "class", "ApplicationReadyEvent", ".", "class", "\"", "--foo=bar", "\"", "reference", ".", "get", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 111, "ast_depth": 10, "n_identifiers": 14, "vocab_size": 35, "n_whitespaces": 31, "n_words": 32, "nloc": 8, "token_counts": 74}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#366-375", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "contextRefreshedEventListener", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#contextRefreshedEventListener", "start_line": 366, "end_line": 375, "signature": "contextRefreshedEventListener()", "original_code": "@Test\n\tvoid contextRefreshedEventListener() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tAtomicReference<ContextRefreshedEvent> reference = addListener(application, ContextRefreshedEvent.class);\n\t\tthis.context = application.run(\"--foo=bar\");\n\t\tassertThat(this.context).isSameAs(reference.get().getApplicationContext());\n\t\t// Custom initializers do not switch off the defaults\n\t\tassertThat(getEnvironment().getProperty(\"foo\")).isEqualTo(\"bar\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "contextRefreshedEventListener", "(", ")", "{", "// Custom initializers do not switch off the defaults", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "AtomicReference", "reference", "=", "=", ".", "isSameAs", ".", "isEqualTo", "new", "SpringApplication", "(", ")", "<", "ContextRefreshedEvent", ">", "addListener", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", "application", ",", ")", "(", ")", "(", ")", ".", "getApplicationContext", "(", ")", "\"", "bar", "\"", "ExampleConfig", ".", "class", "ContextRefreshedEvent", ".", "class", "\"", "--foo=bar", "\"", "this", ".", "context", "reference", ".", "get", "(", ")", ".", "getProperty", "(", ")", "getEnvironment", "(", ")", "(", ")", "\"", "foo", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 147, "ast_depth": 11, "n_identifiers": 17, "vocab_size": 41, "n_whitespaces": 45, "n_words": 47, "nloc": 10, "token_counts": 98}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#377-398", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "eventsArePublishedInExpectedOrder", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#eventsArePublishedInExpectedOrder", "start_line": 377, "end_line": 398, "signature": "eventsArePublishedInExpectedOrder()", "original_code": "@Test\n\t@SuppressWarnings(\"unchecked\")\n\tvoid eventsArePublishedInExpectedOrder() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tApplicationListener<ApplicationEvent> listener = mock(ApplicationListener.class);\n\t\tapplication.addListeners(listener);\n\t\tthis.context = application.run();\n\t\tInOrder inOrder = Mockito.inOrder(listener);\n\t\tthen(listener).should(inOrder).onApplicationEvent(isA(ApplicationStartingEvent.class));\n\t\tthen(listener).should(inOrder).onApplicationEvent(isA(ApplicationEnvironmentPreparedEvent.class));\n\t\tthen(listener).should(inOrder).onApplicationEvent(isA(ApplicationContextInitializedEvent.class));\n\t\tthen(listener).should(inOrder).onApplicationEvent(isA(ApplicationPreparedEvent.class));\n\t\tthen(listener).should(inOrder).onApplicationEvent(isA(ContextRefreshedEvent.class));\n\t\tthen(listener).should(inOrder).onApplicationEvent(isA(ApplicationStartedEvent.class));\n\t\tthen(listener).should(inOrder)\n\t\t\t.onApplicationEvent(argThat(isAvailabilityChangeEventWithState(LivenessState.CORRECT)));\n\t\tthen(listener).should(inOrder).onApplicationEvent(isA(ApplicationReadyEvent.class));\n\t\tthen(listener).should(inOrder)\n\t\t\t.onApplicationEvent(argThat(isAvailabilityChangeEventWithState(ReadinessState.ACCEPTING_TRAFFIC)));\n\t\tinOrder.verifyNoMoreInteractions();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "eventsArePublishedInExpectedOrder", "(", ")", "{", "}", "@", "Test", "@", "SuppressWarnings", "SpringApplication", ";", ";", ";", ";", ";", "InOrder", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "(", ")", "application", "=", "application", ".", "setWebApplicationType", "ApplicationListener", "listener", "=", "application", ".", "addListeners", "=", "inOrder", "=", ".", "onApplicationEvent", ".", "onApplicationEvent", ".", "onApplicationEvent", ".", "onApplicationEvent", ".", "onApplicationEvent", ".", "onApplicationEvent", ".", "onApplicationEvent", ".", "onApplicationEvent", ".", "onApplicationEvent", "inOrder", ".", "verifyNoMoreInteractions", "\"", "unchecked", "\"", "new", "SpringApplication", "(", ")", "<", "ApplicationEvent", ">", "mock", "(", "listener", ")", "this", ".", "context", "application", ".", "run", "Mockito", ".", "inOrder", ".", "should", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "(", "listener", ")", "then", "(", "inOrder", ")", "isA", "then", "(", "inOrder", ")", "isA", "then", "(", "inOrder", ")", "isA", "then", "(", "inOrder", ")", "isA", "then", "(", "inOrder", ")", "isA", "then", "(", "inOrder", ")", "isA", "then", "(", "inOrder", ")", "argThat", "then", "(", "inOrder", ")", "isA", "then", "(", "inOrder", ")", "argThat", "ExampleConfig", ".", "class", "ApplicationListener", ".", "class", "(", "listener", ")", "(", ")", "(", "listener", ")", "(", ")", "(", "listener", ")", "(", ")", "(", "listener", ")", "(", ")", "(", "listener", ")", "(", ")", "(", "listener", ")", "(", ")", "(", "listener", ")", "(", ")", "(", "listener", ")", "(", ")", "(", "listener", ")", "(", ")", "ApplicationStartingEvent", ".", "class", "ApplicationEnvironmentPreparedEvent", ".", "class", "ApplicationContextInitializedEvent", ".", "class", "ApplicationPreparedEvent", ".", "class", "ContextRefreshedEvent", ".", "class", "ApplicationStartedEvent", ".", "class", "isAvailabilityChangeEventWithState", "ApplicationReadyEvent", ".", "class", "isAvailabilityChangeEventWithState", "(", ")", "(", ")", "LivenessState", ".", "CORRECT", "ReadinessState", ".", "ACCEPTING_TRAFFIC"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 401, "ast_depth": 12, "n_identifiers": 25, "vocab_size": 53, "n_whitespaces": 76, "n_words": 109, "nloc": 22, "token_counts": 267}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#400-407", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "applicationStartedEventHasStartedTime", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#applicationStartedEventHasStartedTime", "start_line": 400, "end_line": 407, "signature": "applicationStartedEventHasStartedTime()", "original_code": "@Test\n\tvoid applicationStartedEventHasStartedTime() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tAtomicReference<ApplicationStartedEvent> reference = addListener(application, ApplicationStartedEvent.class);\n\t\tthis.context = application.run();\n\t\tassertThat(reference.get()).isNotNull().extracting(ApplicationStartedEvent::getTimeTaken).isNotNull();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "applicationStartedEventHasStartedTime", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "AtomicReference", "reference", "=", "=", ".", "isNotNull", "new", "SpringApplication", "(", ")", "<", "ApplicationStartedEvent", ">", "addListener", "this", ".", "context", "application", ".", "run", ".", "extracting", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", "application", ",", ")", "(", ")", ".", "isNotNull", "(", ")", "ExampleConfig", ".", "class", "ApplicationStartedEvent", ".", "class", "assertThat", "(", ")", "ApplicationStartedEvent", "::", "getTimeTaken", "(", ")", "reference", ".", "get", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 116, "ast_depth": 12, "n_identifiers": 16, "vocab_size": 35, "n_whitespaces": 31, "n_words": 32, "nloc": 8, "token_counts": 77}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#409-416", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "applicationReadyEventHasReadyTime", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#applicationReadyEventHasReadyTime", "start_line": 409, "end_line": 416, "signature": "applicationReadyEventHasReadyTime()", "original_code": "@Test\n\tvoid applicationReadyEventHasReadyTime() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tAtomicReference<ApplicationReadyEvent> reference = addListener(application, ApplicationReadyEvent.class);\n\t\tthis.context = application.run();\n\t\tassertThat(reference.get()).isNotNull().extracting(ApplicationReadyEvent::getTimeTaken).isNotNull();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "applicationReadyEventHasReadyTime", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "AtomicReference", "reference", "=", "=", ".", "isNotNull", "new", "SpringApplication", "(", ")", "<", "ApplicationReadyEvent", ">", "addListener", "this", ".", "context", "application", ".", "run", ".", "extracting", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", "application", ",", ")", "(", ")", ".", "isNotNull", "(", ")", "ExampleConfig", ".", "class", "ApplicationReadyEvent", ".", "class", "assertThat", "(", ")", "ApplicationReadyEvent", "::", "getTimeTaken", "(", ")", "reference", ".", "get", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 116, "ast_depth": 12, "n_identifiers": 16, "vocab_size": 35, "n_whitespaces": 31, "n_words": 32, "nloc": 8, "token_counts": 77}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#418-424", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "defaultApplicationContext", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#defaultApplicationContext", "start_line": 418, "end_line": 424, "signature": "defaultApplicationContext()", "original_code": "@Test\n\tvoid defaultApplicationContext() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tthis.context = application.run();\n\t\tassertThat(this.context).isInstanceOf(AnnotationConfigApplicationContext.class);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "defaultApplicationContext", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "=", ".", "isInstanceOf", "new", "SpringApplication", "(", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "AnnotationConfigApplicationContext", ".", "class", "ExampleConfig", ".", "class", "this", ".", "context"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 79, "ast_depth": 9, "n_identifiers": 10, "vocab_size": 25, "n_whitespaces": 24, "n_words": 23, "nloc": 7, "token_counts": 52}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#426-434", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "customEnvironment", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#customEnvironment", "start_line": 426, "end_line": 434, "signature": "customEnvironment()", "original_code": "@Test\n\tvoid customEnvironment() {\n\t\tTestSpringApplication application = new TestSpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tConfigurableEnvironment environment = new StandardEnvironment();\n\t\tapplication.setEnvironment(environment);\n\t\tthis.context = application.run();\n\t\tthen(application.getLoader()).should().setEnvironment(environment);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "customEnvironment", "(", ")", "{", "}", "@", "Test", "TestSpringApplication", ";", ";", "ConfigurableEnvironment", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "environment", "=", "application", ".", "setEnvironment", "=", ".", "setEnvironment", "new", "TestSpringApplication", "(", ")", "new", "StandardEnvironment", "(", "environment", ")", "this", ".", "context", "application", ".", "run", ".", "should", "(", "environment", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "then", "(", ")", "ExampleConfig", ".", "class", "(", ")", "application", ".", "getLoader", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 107, "ast_depth": 11, "n_identifiers": 13, "vocab_size": 29, "n_whitespaces": 34, "n_words": 30, "nloc": 9, "token_counts": 71}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#436-444", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "customResourceLoader", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#customResourceLoader", "start_line": 436, "end_line": 444, "signature": "customResourceLoader()", "original_code": "@Test\n\tvoid customResourceLoader() {\n\t\tTestSpringApplication application = new TestSpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tResourceLoader resourceLoader = new DefaultResourceLoader();\n\t\tapplication.setResourceLoader(resourceLoader);\n\t\tthis.context = application.run();\n\t\tthen(application.getLoader()).should().setResourceLoader(resourceLoader);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "customResourceLoader", "(", ")", "{", "}", "@", "Test", "TestSpringApplication", ";", ";", "ResourceLoader", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "resourceLoader", "=", "application", ".", "setResourceLoader", "=", ".", "setResourceLoader", "new", "TestSpringApplication", "(", ")", "new", "DefaultResourceLoader", "(", "resourceLoader", ")", "this", ".", "context", "application", ".", "run", ".", "should", "(", "resourceLoader", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "then", "(", ")", "ExampleConfig", ".", "class", "(", ")", "application", ".", "getLoader", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 107, "ast_depth": 11, "n_identifiers": 13, "vocab_size": 29, "n_whitespaces": 34, "n_words": 30, "nloc": 9, "token_counts": 71}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#446-452", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "customResourceLoaderFromConstructor", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#customResourceLoaderFromConstructor", "start_line": 446, "end_line": 452, "signature": "customResourceLoaderFromConstructor()", "original_code": "@Test\n\tvoid customResourceLoaderFromConstructor() {\n\t\tResourceLoader resourceLoader = new DefaultResourceLoader();\n\t\tTestSpringApplication application = new TestSpringApplication(resourceLoader, ExampleConfig.class);\n\t\tthis.context = application.run();\n\t\tthen(application.getLoader()).should().setResourceLoader(resourceLoader);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "customResourceLoaderFromConstructor", "(", ")", "{", "}", "@", "Test", "ResourceLoader", ";", "TestSpringApplication", ";", ";", ";", "resourceLoader", "=", "application", "=", "=", ".", "setResourceLoader", "new", "DefaultResourceLoader", "new", "TestSpringApplication", "this", ".", "context", "application", ".", "run", ".", "should", "(", "resourceLoader", ")", "(", ")", "(", "resourceLoader", ",", ")", "(", ")", "then", "(", ")", "ExampleConfig", ".", "class", "(", ")", "application", ".", "getLoader", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 86, "ast_depth": 11, "n_identifiers": 10, "vocab_size": 27, "n_whitespaces": 29, "n_words": 24, "nloc": 7, "token_counts": 57}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#454-463", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "customBeanNameGenerator", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#customBeanNameGenerator", "start_line": 454, "end_line": 463, "signature": "customBeanNameGenerator()", "original_code": "@Test\n\tvoid customBeanNameGenerator() {\n\t\tTestSpringApplication application = new TestSpringApplication(ExampleConfig.class);\n\t\tBeanNameGenerator beanNameGenerator = new DefaultBeanNameGenerator();\n\t\tapplication.setBeanNameGenerator(beanNameGenerator);\n\t\tthis.context = application.run();\n\t\tthen(application.getLoader()).should().setBeanNameGenerator(beanNameGenerator);\n\t\tObject actualGenerator = this.context.getBean(AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR);\n\t\tassertThat(actualGenerator).isSameAs(beanNameGenerator);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "customBeanNameGenerator", "(", ")", "{", "}", "@", "Test", "TestSpringApplication", ";", "BeanNameGenerator", ";", ";", ";", ";", "Object", ";", ";", "application", "=", "beanNameGenerator", "=", "application", ".", "setBeanNameGenerator", "=", ".", "setBeanNameGenerator", "actualGenerator", "=", ".", "isSameAs", "new", "TestSpringApplication", "new", "DefaultBeanNameGenerator", "(", "beanNameGenerator", ")", "this", ".", "context", "application", ".", "run", ".", "should", "(", "beanNameGenerator", ")", ".", "getBean", "assertThat", "(", "beanNameGenerator", ")", "(", ")", "(", ")", "(", ")", "then", "(", ")", "this", ".", "context", "(", ")", "(", "actualGenerator", ")", "ExampleConfig", ".", "class", "(", ")", "AnnotationConfigUtils", ".", "CONFIGURATION_BEAN_NAME_GENERATOR", "application", ".", "getLoader", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 129, "ast_depth": 11, "n_identifiers": 16, "vocab_size": 33, "n_whitespaces": 40, "n_words": 37, "nloc": 10, "token_counts": 86}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#465-473", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "commandLinePropertySource", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#commandLinePropertySource", "start_line": 465, "end_line": 473, "signature": "commandLinePropertySource()", "original_code": "@Test\n\tvoid commandLinePropertySource() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tConfigurableEnvironment environment = new StandardEnvironment();\n\t\tapplication.setEnvironment(environment);\n\t\tthis.context = application.run(\"--foo=bar\");\n\t\tassertThat(environment).has(matchingPropertySource(CommandLinePropertySource.class, \"commandLineArgs\"));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "commandLinePropertySource", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", "ConfigurableEnvironment", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "environment", "=", "application", ".", "setEnvironment", "=", ".", "has", "new", "SpringApplication", "(", ")", "new", "StandardEnvironment", "(", "environment", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "(", "environment", ")", "matchingPropertySource", "ExampleConfig", ".", "class", "\"", "--foo=bar", "\"", "(", ",", ")", "CommandLinePropertySource", ".", "class", "\"", "commandLineArgs", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 112, "ast_depth": 10, "n_identifiers": 13, "vocab_size": 34, "n_whitespaces": 35, "n_words": 33, "nloc": 9, "token_counts": 75}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#475-496", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "commandLinePropertySourceEnhancesEnvironment", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#commandLinePropertySourceEnhancesEnvironment", "start_line": 475, "end_line": 496, "signature": "commandLinePropertySourceEnhancesEnvironment()", "original_code": "@Test\n\tvoid commandLinePropertySourceEnhancesEnvironment() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tConfigurableEnvironment environment = new StandardEnvironment();\n\t\tenvironment.getPropertySources()\n\t\t\t.addFirst(new MapPropertySource(\"commandLineArgs\", Collections.singletonMap(\"foo\", \"original\")));\n\t\tapplication.setEnvironment(environment);\n\t\tthis.context = application.run(\"--foo=bar\", \"--bar=foo\");\n\t\tassertThat(environment).has(matchingPropertySource(CompositePropertySource.class, \"commandLineArgs\"));\n\t\tassertThat(environment.getProperty(\"bar\")).isEqualTo(\"foo\");\n\t\t// New command line properties take precedence\n\t\tassertThat(environment.getProperty(\"foo\")).isEqualTo(\"bar\");\n\t\tCompositePropertySource composite = (CompositePropertySource) environment.getPropertySources()\n\t\t\t.get(\"commandLineArgs\");\n\t\tassertThat(composite.getPropertySources()).hasSize(2);\n\t\tassertThat(composite.getPropertySources()).first()\n\t\t\t.matches((source) -> source.getName().equals(\"springApplicationCommandLineArgs\"),\n\t\t\t\t\t\"is named springApplicationCommandLineArgs\");\n\t\tassertThat(composite.getPropertySources()).element(1)\n\t\t\t.matches((source) -> source.getName().equals(\"commandLineArgs\"), \"is named commandLineArgs\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "commandLinePropertySourceEnhancesEnvironment", "(", ")", "{", "// New command line properties take precedence", "}", "@", "Test", "SpringApplication", ";", ";", "ConfigurableEnvironment", ";", ";", ";", ";", ";", ";", ";", "CompositePropertySource", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "environment", "=", ".", "addFirst", "application", ".", "setEnvironment", "=", ".", "has", ".", "isEqualTo", ".", "isEqualTo", "composite", "=", ".", "hasSize", ".", "matches", ".", "matches", "new", "SpringApplication", "(", ")", "new", "StandardEnvironment", "environment", ".", "getPropertySources", "(", ")", "(", "environment", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "(", "CompositePropertySource", ")", "assertThat", "(", "2", ")", ".", "first", "(", ",", ")", ".", "element", "(", ",", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "new", "MapPropertySource", "(", ",", ")", "(", "environment", ")", "matchingPropertySource", "(", ")", "\"", "foo", "\"", "(", ")", "\"", "bar", "\"", ".", "get", "(", ")", "assertThat", "(", ")", "->", "\"", "is named springApplicationCommandLineArgs", "\"", "assertThat", "(", "1", ")", "->", "\"", "is named commandLineArgs", "\"", "ExampleConfig", ".", "class", "(", ",", ")", "\"", "--foo=bar", "\"", "\"", "--bar=foo", "\"", "(", ",", ")", "environment", ".", "getProperty", "environment", ".", "getProperty", "environment", ".", "getPropertySources", "(", ")", "composite", ".", "getPropertySources", "(", ")", "(", "source", ")", ".", "equals", "(", ")", "(", "source", ")", ".", "equals", "\"", "commandLineArgs", "\"", "Collections", ".", "singletonMap", "CompositePropertySource", ".", "class", "\"", "commandLineArgs", "\"", "(", ")", "(", ")", "(", ")", "\"", "commandLineArgs", "\"", "(", ")", "composite", ".", "getPropertySources", "source", ".", "getName", "(", ")", "composite", ".", "getPropertySources", "source", ".", "getName", "(", ")", "(", ",", ")", "\"", "bar", "\"", "\"", "foo", "\"", "(", ")", "(", ")", "\"", "springApplicationCommandLineArgs", "\"", "(", ")", "(", ")", "\"", "commandLineArgs", "\"", "\"", "foo", "\"", "\"", "original", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 373, "ast_depth": 12, "n_identifiers": 28, "vocab_size": 61, "n_whitespaces": 104, "n_words": 102, "nloc": 22, "token_counts": 256}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#498-507", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "propertiesFileEnhancesEnvironment", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#propertiesFileEnhancesEnvironment", "start_line": 498, "end_line": 507, "signature": "propertiesFileEnhancesEnvironment()", "original_code": "@Test\n\t@WithResource(name = \"application.properties\", content = \"foo=bucket\")\n\tvoid propertiesFileEnhancesEnvironment() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tConfigurableEnvironment environment = new StandardEnvironment();\n\t\tapplication.setEnvironment(environment);\n\t\tthis.context = application.run();\n\t\tassertThat(environment.getProperty(\"foo\")).isEqualTo(\"bucket\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "propertiesFileEnhancesEnvironment", "(", ")", "{", "}", "@", "Test", "@", "WithResource", "SpringApplication", ";", ";", "ConfigurableEnvironment", ";", ";", ";", ";", "(", ",", ")", "application", "=", "application", ".", "setWebApplicationType", "environment", "=", "application", ".", "setEnvironment", "=", ".", "isEqualTo", "name", "=", "content", "=", "new", "SpringApplication", "(", ")", "new", "StandardEnvironment", "(", "environment", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "\"", "application.properties", "\"", "\"", "foo=bucket", "\"", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "(", ")", "\"", "bucket", "\"", "ExampleConfig", ".", "class", "environment", ".", "getProperty", "(", ")", "\"", "foo", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 129, "ast_depth": 11, "n_identifiers": 16, "vocab_size": 38, "n_whitespaces": 41, "n_words": 37, "nloc": 10, "token_counts": 87}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#509-518", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "addProfiles", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#addProfiles", "start_line": 509, "end_line": 518, "signature": "addProfiles()", "original_code": "@Test\n\tvoid addProfiles() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tapplication.setAdditionalProfiles(\"foo\");\n\t\tConfigurableEnvironment environment = new StandardEnvironment();\n\t\tapplication.setEnvironment(environment);\n\t\tthis.context = application.run();\n\t\tassertThat(environment.acceptsProfiles(Profiles.of(\"foo\"))).isTrue();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "addProfiles", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", "ConfigurableEnvironment", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "application", ".", "setAdditionalProfiles", "environment", "=", "application", ".", "setEnvironment", "=", ".", "isTrue", "new", "SpringApplication", "(", ")", "(", ")", "new", "StandardEnvironment", "(", "environment", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "\"", "foo", "\"", "(", ")", "(", ")", "(", ")", "ExampleConfig", ".", "class", "environment", ".", "acceptsProfiles", "(", ")", "Profiles", ".", "of", "(", ")", "\"", "foo", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 124, "ast_depth": 13, "n_identifiers": 16, "vocab_size": 34, "n_whitespaces": 37, "n_words": 34, "nloc": 10, "token_counts": 83}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#520-529", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "additionalProfilesOrderedBeforeActiveProfiles", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#additionalProfilesOrderedBeforeActiveProfiles", "start_line": 520, "end_line": 529, "signature": "additionalProfilesOrderedBeforeActiveProfiles()", "original_code": "@Test\n\tvoid additionalProfilesOrderedBeforeActiveProfiles() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tapplication.setAdditionalProfiles(\"foo\");\n\t\tConfigurableEnvironment environment = new StandardEnvironment();\n\t\tapplication.setEnvironment(environment);\n\t\tthis.context = application.run(\"--spring.profiles.active=bar,spam\");\n\t\tassertThat(environment.getActiveProfiles()).containsExactly(\"foo\", \"bar\", \"spam\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "additionalProfilesOrderedBeforeActiveProfiles", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", "ConfigurableEnvironment", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "application", ".", "setAdditionalProfiles", "environment", "=", "application", ".", "setEnvironment", "=", ".", "containsExactly", "new", "SpringApplication", "(", ")", "(", ")", "new", "StandardEnvironment", "(", "environment", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ",", ",", ")", "(", ")", "WebApplicationType", ".", "NONE", "\"", "foo", "\"", "(", ")", "(", ")", "(", ")", "\"", "foo", "\"", "\"", "bar", "\"", "\"", "spam", "\"", "ExampleConfig", ".", "class", "\"", "--spring.profiles.active=bar,spam", "\"", "environment", ".", "getActiveProfiles", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 131, "ast_depth": 10, "n_identifiers": 14, "vocab_size": 36, "n_whitespaces": 39, "n_words": 39, "nloc": 10, "token_counts": 89}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#531-543", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "addProfilesOrderWithProperties", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#addProfilesOrderWithProperties", "start_line": 531, "end_line": 543, "signature": "addProfilesOrderWithProperties()", "original_code": "@Test\n\t@WithResource(name = \"application.properties\", content = \"my.property=fromapplicationproperties\")\n\t@WithResource(name = \"application-other.properties\", content = \"my.property=fromotherpropertiesfile\")\n\tvoid addProfilesOrderWithProperties() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tapplication.setAdditionalProfiles(\"other\");\n\t\tConfigurableEnvironment environment = new StandardEnvironment();\n\t\tapplication.setEnvironment(environment);\n\t\tthis.context = application.run();\n\t\t// Active profile should win over default\n\t\tassertThat(environment.getProperty(\"my.property\")).isEqualTo(\"fromotherpropertiesfile\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "addProfilesOrderWithProperties", "(", ")", "{", "// Active profile should win over default", "}", "@", "Test", "@", "WithResource", "@", "WithResource", "SpringApplication", ";", ";", ";", "ConfigurableEnvironment", ";", ";", ";", ";", "(", ",", ")", "(", ",", ")", "application", "=", "application", ".", "setWebApplicationType", "application", ".", "setAdditionalProfiles", "environment", "=", "application", ".", "setEnvironment", "=", ".", "isEqualTo", "name", "=", "content", "=", "name", "=", "content", "=", "new", "SpringApplication", "(", ")", "(", ")", "new", "StandardEnvironment", "(", "environment", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "\"", "application.properties", "\"", "\"", "my.property=fromapplicationproperties", "\"", "\"", "application-other.properties", "\"", "\"", "my.property=fromotherpropertiesfile", "\"", "(", ")", "WebApplicationType", ".", "NONE", "\"", "other", "\"", "(", ")", "(", ")", "(", ")", "\"", "fromotherpropertiesfile", "\"", "ExampleConfig", ".", "class", "environment", ".", "getProperty", "(", ")", "\"", "my.property", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 164, "ast_depth": 11, "n_identifiers": 17, "vocab_size": 43, "n_whitespaces": 60, "n_words": 57, "nloc": 13, "token_counts": 112}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#545-554", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "emptyCommandLinePropertySourceNotAdded", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#emptyCommandLinePropertySourceNotAdded", "start_line": 545, "end_line": 554, "signature": "emptyCommandLinePropertySourceNotAdded()", "original_code": "@Test\n\t@WithResource(name = \"application.properties\", content = \"foo=bucket\")\n\tvoid emptyCommandLinePropertySourceNotAdded() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tConfigurableEnvironment environment = new StandardEnvironment();\n\t\tapplication.setEnvironment(environment);\n\t\tthis.context = application.run();\n\t\tassertThat(environment.getProperty(\"foo\")).isEqualTo(\"bucket\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "emptyCommandLinePropertySourceNotAdded", "(", ")", "{", "}", "@", "Test", "@", "WithResource", "SpringApplication", ";", ";", "ConfigurableEnvironment", ";", ";", ";", ";", "(", ",", ")", "application", "=", "application", ".", "setWebApplicationType", "environment", "=", "application", ".", "setEnvironment", "=", ".", "isEqualTo", "name", "=", "content", "=", "new", "SpringApplication", "(", ")", "new", "StandardEnvironment", "(", "environment", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "\"", "application.properties", "\"", "\"", "foo=bucket", "\"", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "(", ")", "\"", "bucket", "\"", "ExampleConfig", ".", "class", "environment", ".", "getProperty", "(", ")", "\"", "foo", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 129, "ast_depth": 11, "n_identifiers": 16, "vocab_size": 38, "n_whitespaces": 41, "n_words": 37, "nloc": 10, "token_counts": 87}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#556-565", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "disableCommandLinePropertySource", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#disableCommandLinePropertySource", "start_line": 556, "end_line": 565, "signature": "disableCommandLinePropertySource()", "original_code": "@Test\n\tvoid disableCommandLinePropertySource() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tapplication.setAddCommandLineProperties(false);\n\t\tConfigurableEnvironment environment = new StandardEnvironment();\n\t\tapplication.setEnvironment(environment);\n\t\tthis.context = application.run(\"--foo=bar\");\n\t\tassertThat(environment).doesNotHave(matchingPropertySource(PropertySource.class, \"commandLineArgs\"));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "disableCommandLinePropertySource", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", "ConfigurableEnvironment", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "application", ".", "setAddCommandLineProperties", "environment", "=", "application", ".", "setEnvironment", "=", ".", "doesNotHave", "new", "SpringApplication", "(", ")", "(", "false", ")", "new", "StandardEnvironment", "(", "environment", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "(", "environment", ")", "matchingPropertySource", "ExampleConfig", ".", "class", "\"", "--foo=bar", "\"", "(", ",", ")", "PropertySource", ".", "class", "\"", "commandLineArgs", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 122, "ast_depth": 10, "n_identifiers": 14, "vocab_size": 36, "n_whitespaces": 38, "n_words": 36, "nloc": 10, "token_counts": 82}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#567-576", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "contextUsesApplicationConversionService", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#contextUsesApplicationConversionService", "start_line": 567, "end_line": 576, "signature": "contextUsesApplicationConversionService()", "original_code": "@Test\n\tvoid contextUsesApplicationConversionService() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tthis.context = application.run();\n\t\tassertThat(this.context.getBeanFactory().getConversionService())\n\t\t\t.isInstanceOf(ApplicationConversionService.class);\n\t\tassertThat(this.context.getEnvironment().getConversionService())\n\t\t\t.isInstanceOf(ApplicationConversionService.class);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "contextUsesApplicationConversionService", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "=", ".", "isInstanceOf", ".", "isInstanceOf", "new", "SpringApplication", "(", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "ApplicationConversionService", ".", "class", "(", ")", "ApplicationConversionService", ".", "class", "ExampleConfig", ".", "class", ".", "getConversionService", ".", "getConversionService", ".", "getBeanFactory", "(", ")", ".", "getEnvironment", "(", ")", "this", ".", "context", "(", ")", "this", ".", "context", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 124, "ast_depth": 11, "n_identifiers": 13, "vocab_size": 28, "n_whitespaces": 35, "n_words": 33, "nloc": 10, "token_counts": 82}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#578-587", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "contextWhenHasAddConversionServiceFalseUsesRegularConversionService", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#contextWhenHasAddConversionServiceFalseUsesRegularConversionService", "start_line": 578, "end_line": 587, "signature": "contextWhenHasAddConversionServiceFalseUsesRegularConversionService()", "original_code": "@Test\n\tvoid contextWhenHasAddConversionServiceFalseUsesRegularConversionService() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tapplication.setAddConversionService(false);\n\t\tthis.context = application.run();\n\t\tassertThat(this.context.getBeanFactory().getConversionService()).isNull();\n\t\tassertThat(this.context.getEnvironment().getConversionService())\n\t\t\t.isNotInstanceOf(ApplicationConversionService.class);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "contextWhenHasAddConversionServiceFalseUsesRegularConversionService", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "application", ".", "setAddConversionService", "=", ".", "isNull", ".", "isNotInstanceOf", "new", "SpringApplication", "(", ")", "(", "false", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "(", ")", "ApplicationConversionService", ".", "class", "ExampleConfig", ".", "class", ".", "getConversionService", ".", "getConversionService", ".", "getBeanFactory", "(", ")", ".", "getEnvironment", "(", ")", "this", ".", "context", "(", ")", "this", ".", "context", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 130, "ast_depth": 11, "n_identifiers": 15, "vocab_size": 31, "n_whitespaces": 34, "n_words": 34, "nloc": 10, "token_counts": 86}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#589-597", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "runCommandLineRunnersAndApplicationRunners", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#runCommandLineRunnersAndApplicationRunners", "start_line": 589, "end_line": 597, "signature": "runCommandLineRunnersAndApplicationRunners()", "original_code": "@Test\n\tvoid runCommandLineRunnersAndApplicationRunners() {\n\t\tSpringApplication application = new SpringApplication(CommandLineRunConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tthis.context = application.run(\"arg\");\n\t\tassertThat(this.context).has(runTestRunnerBean(\"runnerA\"));\n\t\tassertThat(this.context).has(runTestRunnerBean(\"runnerB\"));\n\t\tassertThat(this.context).has(runTestRunnerBean(\"runnerC\"));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runCommandLineRunnersAndApplicationRunners", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "=", ".", "has", ".", "has", ".", "has", "new", "SpringApplication", "(", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "runTestRunnerBean", "(", ")", "runTestRunnerBean", "(", ")", "runTestRunnerBean", "CommandLineRunConfig", ".", "class", "\"", "arg", "\"", "this", ".", "context", "(", ")", "this", ".", "context", "(", ")", "this", ".", "context", "(", ")", "\"", "runnerA", "\"", "\"", "runnerB", "\"", "\"", "runnerC", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 140, "ast_depth": 10, "n_identifiers": 11, "vocab_size": 30, "n_whitespaces": 30, "n_words": 36, "nloc": 9, "token_counts": 92}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#599-610", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "runCommandLineRunnersAndApplicationRunnersWithParentContext", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#runCommandLineRunnersAndApplicationRunnersWithParentContext", "start_line": 599, "end_line": 610, "signature": "runCommandLineRunnersAndApplicationRunnersWithParentContext()", "original_code": "@Test\n\tvoid runCommandLineRunnersAndApplicationRunnersWithParentContext() {\n\t\tSpringApplication application = new SpringApplication(CommandLineRunConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tapplication.addInitializers(new ParentContextApplicationContextInitializer(\n\t\t\t\tnew AnnotationConfigApplicationContext(CommandLineRunParentConfig.class)));\n\t\tthis.context = application.run(\"arg\");\n\t\tassertThat(this.context).has(runTestRunnerBean(\"runnerA\"));\n\t\tassertThat(this.context).has(runTestRunnerBean(\"runnerB\"));\n\t\tassertThat(this.context).has(runTestRunnerBean(\"runnerC\"));\n\t\tassertThat(this.context).doesNotHave(runTestRunnerBean(\"runnerP\"));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runCommandLineRunnersAndApplicationRunnersWithParentContext", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "application", ".", "addInitializers", "=", ".", "has", ".", "has", ".", "has", ".", "doesNotHave", "new", "SpringApplication", "(", ")", "(", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "new", "ParentContextApplicationContextInitializer", "(", ")", "(", ")", "runTestRunnerBean", "(", ")", "runTestRunnerBean", "(", ")", "runTestRunnerBean", "(", ")", "runTestRunnerBean", "CommandLineRunConfig", ".", "class", "(", ")", "\"", "arg", "\"", "this", ".", "context", "(", ")", "this", ".", "context", "(", ")", "this", ".", "context", "(", ")", "this", ".", "context", "(", ")", "new", "AnnotationConfigApplicationContext", "\"", "runnerA", "\"", "\"", "runnerB", "\"", "\"", "runnerC", "\"", "\"", "runnerP", "\"", "(", ")", "CommandLineRunParentConfig", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 191, "ast_depth": 12, "n_identifiers": 13, "vocab_size": 36, "n_whitespaces": 43, "n_words": 50, "nloc": 12, "token_counts": 126}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#612-619", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "runCommandLineRunnersAndApplicationRunnersUsingOrderOnBeanDefinitions", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#runCommandLineRunnersAndApplicationRunnersUsingOrderOnBeanDefinitions", "start_line": 612, "end_line": 619, "signature": "runCommandLineRunnersAndApplicationRunnersUsingOrderOnBeanDefinitions()", "original_code": "@Test\n\tvoid runCommandLineRunnersAndApplicationRunnersUsingOrderOnBeanDefinitions() {\n\t\tSpringApplication application = new SpringApplication(BeanDefinitionOrderRunnerConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tthis.context = application.run(\"arg\");\n\t\tBeanDefinitionOrderRunnerConfig config = this.context.getBean(BeanDefinitionOrderRunnerConfig.class);\n\t\tassertThat(config.runners).containsExactly(\"runnerA\", \"runnerB\", \"runnerC\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runCommandLineRunnersAndApplicationRunnersUsingOrderOnBeanDefinitions", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", "BeanDefinitionOrderRunnerConfig", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "=", "config", "=", ".", "containsExactly", "new", "SpringApplication", "(", ")", "this", ".", "context", "application", ".", "run", ".", "getBean", "assertThat", "(", ",", ",", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "this", ".", "context", "(", ")", "(", ")", "\"", "runnerA", "\"", "\"", "runnerB", "\"", "\"", "runnerC", "\"", "BeanDefinitionOrderRunnerConfig", ".", "class", "\"", "arg", "\"", "BeanDefinitionOrderRunnerConfig", ".", "class", "config", ".", "runners"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 113, "ast_depth": 9, "n_identifiers": 13, "vocab_size": 33, "n_whitespaces": 32, "n_words": 32, "nloc": 8, "token_counts": 77}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#621-649", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "runnersAreCalledAfterStartedIsLoggedAndBeforeApplicationReadyEventIsPublished", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#runnersAreCalledAfterStartedIsLoggedAndBeforeApplicationReadyEventIsPublished", "start_line": 621, "end_line": 649, "signature": "runnersAreCalledAfterStartedIsLoggedAndBeforeApplicationReadyEventIsPublished(CapturedOutput output)", "original_code": "@Test\n\t@SuppressWarnings(\"unchecked\")\n\tvoid runnersAreCalledAfterStartedIsLoggedAndBeforeApplicationReadyEventIsPublished(CapturedOutput output)\n\t\t\tthrows Exception {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tApplicationRunner applicationRunner = mock(ApplicationRunner.class);\n\t\tCommandLineRunner commandLineRunner = mock(CommandLineRunner.class);\n\t\tapplication.addInitializers((context) -> {\n\t\t\tConfigurableListableBeanFactory beanFactory = context.getBeanFactory();\n\t\t\tbeanFactory.registerSingleton(\"commandLineRunner\", (CommandLineRunner) (args) -> {\n\t\t\t\tassertThat(output).contains(\"Started\");\n\t\t\t\tcommandLineRunner.run(args);\n\t\t\t});\n\t\t\tbeanFactory.registerSingleton(\"applicationRunner\", (ApplicationRunner) (args) -> {\n\t\t\t\tassertThat(output).contains(\"Started\");\n\t\t\t\tapplicationRunner.run(args);\n\t\t\t});\n\t\t});\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tApplicationListener<ApplicationReadyEvent> eventListener = mock(ApplicationListener.class);\n\t\tapplication.addListeners(eventListener);\n\t\tthis.context = application.run();\n\t\tInOrder applicationRunnerOrder = Mockito.inOrder(eventListener, applicationRunner);\n\t\tapplicationRunnerOrder.verify(applicationRunner).run(any(ApplicationArguments.class));\n\t\tapplicationRunnerOrder.verify(eventListener).onApplicationEvent(any(ApplicationReadyEvent.class));\n\t\tInOrder commandLineRunnerOrder = Mockito.inOrder(eventListener, commandLineRunner);\n\t\tcommandLineRunnerOrder.verify(commandLineRunner).run();\n\t\tcommandLineRunnerOrder.verify(eventListener).onApplicationEvent(any(ApplicationReadyEvent.class));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runnersAreCalledAfterStartedIsLoggedAndBeforeApplicationReadyEventIsPublished", "(", ")", "throws", "Exception", "{", "}", "@", "Test", "@", "SuppressWarnings", "CapturedOutput", "output", "SpringApplication", ";", "ApplicationRunner", ";", "CommandLineRunner", ";", ";", ";", ";", ";", ";", "InOrder", ";", ";", ";", "InOrder", ";", ";", ";", "(", ")", "application", "=", "applicationRunner", "=", "commandLineRunner", "=", "application", ".", "addInitializers", "application", ".", "setWebApplicationType", "ApplicationListener", "eventListener", "=", "application", ".", "addListeners", "=", "applicationRunnerOrder", "=", ".", "run", ".", "onApplicationEvent", "commandLineRunnerOrder", "=", ".", "run", ".", "onApplicationEvent", "\"", "unchecked", "\"", "new", "SpringApplication", "mock", "mock", "(", ")", "(", ")", "<", "ApplicationReadyEvent", ">", "mock", "(", "eventListener", ")", "this", ".", "context", "application", ".", "run", "Mockito", ".", "inOrder", "applicationRunnerOrder", ".", "verify", "(", ")", "applicationRunnerOrder", ".", "verify", "(", ")", "Mockito", ".", "inOrder", "commandLineRunnerOrder", ".", "verify", "(", ")", "commandLineRunnerOrder", ".", "verify", "(", ")", "(", ")", "(", ")", "(", ")", "->", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "(", "eventListener", ",", "applicationRunner", ")", "(", "applicationRunner", ")", "any", "(", "eventListener", ")", "any", "(", "eventListener", ",", "commandLineRunner", ")", "(", "commandLineRunner", ")", "(", "eventListener", ")", "any", "ExampleConfig", ".", "class", "ApplicationRunner", ".", "class", "CommandLineRunner", ".", "class", "(", "context", ")", "{", "}", "ApplicationListener", ".", "class", "(", ")", "(", ")", "(", ")", "ConfigurableListableBeanFactory", ";", ";", ";", "ApplicationArguments", ".", "class", "ApplicationReadyEvent", ".", "class", "ApplicationReadyEvent", ".", "class", "beanFactory", "=", "beanFactory", ".", "registerSingleton", "beanFactory", ".", "registerSingleton", "context", ".", "getBeanFactory", "(", ",", ")", "(", ",", ")", "(", ")", "\"", "commandLineRunner", "\"", "(", "CommandLineRunner", ")", "\"", "applicationRunner", "\"", "(", "ApplicationRunner", ")", "->", "->", "(", "args", ")", "{", "}", "(", "args", ")", "{", "}", ";", ";", ";", ";", ".", "contains", "commandLineRunner", ".", "run", ".", "contains", "applicationRunner", ".", "run", "assertThat", "(", ")", "(", "args", ")", "assertThat", "(", ")", "(", "args", ")", "(", "output", ")", "\"", "Started", "\"", "(", "output", ")", "\"", "Started", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 398, "ast_depth": 19, "n_identifiers": 29, "vocab_size": 60, "n_whitespaces": 135, "n_words": 110, "nloc": 29, "token_counts": 272}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#651-666", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "applicationRunnerFailureCausesApplicationFailedEventToBePublished", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#applicationRunnerFailureCausesApplicationFailedEventToBePublished", "start_line": 651, "end_line": 666, "signature": "applicationRunnerFailureCausesApplicationFailedEventToBePublished()", "original_code": "@Test\n\tvoid applicationRunnerFailureCausesApplicationFailedEventToBePublished() throws Exception {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tApplicationListener<SpringApplicationEvent> listener = mock(ApplicationListener.class);\n\t\tapplication.addListeners(listener);\n\t\tApplicationRunner runner = mock(ApplicationRunner.class);\n\t\tException failure = new Exception();\n\t\twillThrow(failure).given(runner).run(isA(ApplicationArguments.class));\n\t\tapplication.addInitializers((context) -> context.getBeanFactory().registerSingleton(\"runner\", runner));\n\t\tassertThatIllegalStateException().isThrownBy(application::run).withCause(failure);\n\t\tthen(listener).should().onApplicationEvent(isA(ApplicationStartedEvent.class));\n\t\tthen(listener).should().onApplicationEvent(isA(ApplicationFailedEvent.class));\n\t\tthen(listener).should(never()).onApplicationEvent(isA(ApplicationReadyEvent.class));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "applicationRunnerFailureCausesApplicationFailedEventToBePublished", "(", ")", "throws", "Exception", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", "ApplicationRunner", ";", "Exception", ";", ";", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "ApplicationListener", "listener", "=", "application", ".", "addListeners", "runner", "=", "failure", "=", ".", "run", "application", ".", "addInitializers", ".", "withCause", ".", "onApplicationEvent", ".", "onApplicationEvent", ".", "onApplicationEvent", "new", "SpringApplication", "(", ")", "@", "SuppressWarnings", "<", "SpringApplicationEvent", ">", "mock", "(", "listener", ")", "mock", "new", "Exception", ".", "given", "(", ")", "(", ")", ".", "isThrownBy", "(", "failure", ")", ".", "should", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "(", ")", "(", ")", "willThrow", "(", "runner", ")", "isA", "->", "assertThatIllegalStateException", "(", ")", "then", "(", ")", "isA", "then", "(", ")", "isA", "then", "(", ")", "isA", "ExampleConfig", ".", "class", "\"", "unchecked", "\"", "ApplicationListener", ".", "class", "ApplicationRunner", ".", "class", "(", "failure", ")", "(", ")", "(", "context", ")", ".", "registerSingleton", "(", ")", "application", "::", "run", "(", "listener", ")", "(", ")", "(", "listener", ")", "(", ")", "(", "listener", ")", "never", "(", ")", "ApplicationArguments", ".", "class", "context", ".", "getBeanFactory", "(", ",", "runner", ")", "ApplicationStartedEvent", ".", "class", "ApplicationFailedEvent", ".", "class", "(", ")", "ApplicationReadyEvent", ".", "class", "(", ")", "\"", "runner", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 294, "ast_depth": 11, "n_identifiers": 27, "vocab_size": 56, "n_whitespaces": 64, "n_words": 79, "nloc": 16, "token_counts": 195}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#668-683", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "commandLineRunnerFailureCausesApplicationFailedEventToBePublished", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#commandLineRunnerFailureCausesApplicationFailedEventToBePublished", "start_line": 668, "end_line": 683, "signature": "commandLineRunnerFailureCausesApplicationFailedEventToBePublished()", "original_code": "@Test\n\tvoid commandLineRunnerFailureCausesApplicationFailedEventToBePublished() throws Exception {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tApplicationListener<SpringApplicationEvent> listener = mock(ApplicationListener.class);\n\t\tapplication.addListeners(listener);\n\t\tCommandLineRunner runner = mock(CommandLineRunner.class);\n\t\tException failure = new Exception();\n\t\twillThrow(failure).given(runner).run();\n\t\tapplication.addInitializers((context) -> context.getBeanFactory().registerSingleton(\"runner\", runner));\n\t\tassertThatIllegalStateException().isThrownBy(application::run).withCause(failure);\n\t\tthen(listener).should().onApplicationEvent(isA(ApplicationStartedEvent.class));\n\t\tthen(listener).should().onApplicationEvent(isA(ApplicationFailedEvent.class));\n\t\tthen(listener).should(never()).onApplicationEvent(isA(ApplicationReadyEvent.class));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "commandLineRunnerFailureCausesApplicationFailedEventToBePublished", "(", ")", "throws", "Exception", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", "CommandLineRunner", ";", "Exception", ";", ";", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "ApplicationListener", "listener", "=", "application", ".", "addListeners", "runner", "=", "failure", "=", ".", "run", "application", ".", "addInitializers", ".", "withCause", ".", "onApplicationEvent", ".", "onApplicationEvent", ".", "onApplicationEvent", "new", "SpringApplication", "(", ")", "@", "SuppressWarnings", "<", "SpringApplicationEvent", ">", "mock", "(", "listener", ")", "mock", "new", "Exception", ".", "given", "(", ")", "(", ")", ".", "isThrownBy", "(", "failure", ")", ".", "should", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "(", ")", "(", ")", "willThrow", "(", "runner", ")", "->", "assertThatIllegalStateException", "(", ")", "then", "(", ")", "isA", "then", "(", ")", "isA", "then", "(", ")", "isA", "ExampleConfig", ".", "class", "\"", "unchecked", "\"", "ApplicationListener", ".", "class", "CommandLineRunner", ".", "class", "(", "failure", ")", "(", "context", ")", ".", "registerSingleton", "(", ")", "application", "::", "run", "(", "listener", ")", "(", ")", "(", "listener", ")", "(", ")", "(", "listener", ")", "never", "(", ")", "context", ".", "getBeanFactory", "(", ",", "runner", ")", "ApplicationStartedEvent", ".", "class", "ApplicationFailedEvent", ".", "class", "(", ")", "ApplicationReadyEvent", ".", "class", "(", ")", "\"", "runner", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 285, "ast_depth": 11, "n_identifiers": 27, "vocab_size": 55, "n_whitespaces": 64, "n_words": 76, "nloc": 16, "token_counts": 189}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#685-697", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "failureInReadyEventListenerDoesNotCausePublicationOfFailedEvent", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#failureInReadyEventListenerDoesNotCausePublicationOfFailedEvent", "start_line": 685, "end_line": 697, "signature": "failureInReadyEventListenerDoesNotCausePublicationOfFailedEvent()", "original_code": "@Test\n\tvoid failureInReadyEventListenerDoesNotCausePublicationOfFailedEvent() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tApplicationListener<SpringApplicationEvent> listener = mock(ApplicationListener.class);\n\t\tapplication.addListeners(listener);\n\t\tRuntimeException failure = new RuntimeException();\n\t\twillThrow(failure).given(listener).onApplicationEvent(isA(ApplicationReadyEvent.class));\n\t\tassertThatExceptionOfType(RuntimeException.class).isThrownBy(application::run).isEqualTo(failure);\n\t\tthen(listener).should().onApplicationEvent(isA(ApplicationReadyEvent.class));\n\t\tthen(listener).should(never()).onApplicationEvent(isA(ApplicationFailedEvent.class));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "failureInReadyEventListenerDoesNotCausePublicationOfFailedEvent", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", "RuntimeException", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "ApplicationListener", "listener", "=", "application", ".", "addListeners", "failure", "=", ".", "onApplicationEvent", ".", "isEqualTo", ".", "onApplicationEvent", ".", "onApplicationEvent", "new", "SpringApplication", "(", ")", "@", "SuppressWarnings", "<", "SpringApplicationEvent", ">", "mock", "(", "listener", ")", "new", "RuntimeException", ".", "given", "(", ")", ".", "isThrownBy", "(", "failure", ")", ".", "should", "(", ")", ".", "should", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "(", ")", "willThrow", "(", "listener", ")", "isA", "assertThatExceptionOfType", "(", ")", "then", "(", ")", "isA", "then", "(", ")", "isA", "ExampleConfig", ".", "class", "\"", "unchecked", "\"", "ApplicationListener", ".", "class", "(", "failure", ")", "(", ")", "(", ")", "application", "::", "run", "(", "listener", ")", "(", ")", "(", "listener", ")", "never", "(", ")", "ApplicationReadyEvent", ".", "class", "RuntimeException", ".", "class", "ApplicationReadyEvent", ".", "class", "(", ")", "ApplicationFailedEvent", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 217, "ast_depth": 10, "n_identifiers": 22, "vocab_size": 45, "n_whitespaces": 47, "n_words": 59, "nloc": 13, "token_counts": 143}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#699-715", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "failureInReadyEventListenerCloseApplicationContext", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#failureInReadyEventListenerCloseApplicationContext", "start_line": 699, "end_line": 715, "signature": "failureInReadyEventListenerCloseApplicationContext(CapturedOutput output)", "original_code": "@Test\n\tvoid failureInReadyEventListenerCloseApplicationContext(CapturedOutput output) {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tExitCodeListener exitCodeListener = new ExitCodeListener();\n\t\tapplication.addListeners(exitCodeListener);\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tApplicationListener<SpringApplicationEvent> listener = mock(ApplicationListener.class);\n\t\tapplication.addListeners(listener);\n\t\tExitStatusException failure = new ExitStatusException();\n\t\twillThrow(failure).given(listener).onApplicationEvent(isA(ApplicationReadyEvent.class));\n\t\tassertThatExceptionOfType(RuntimeException.class).isThrownBy(application::run);\n\t\tthen(listener).should().onApplicationEvent(isA(ApplicationReadyEvent.class));\n\t\tthen(listener).should(never()).onApplicationEvent(isA(ApplicationFailedEvent.class));\n\t\tassertThat(exitCodeListener.getExitCode()).isEqualTo(11);\n\t\tassertThat(output).contains(\"Application run failed\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "failureInReadyEventListenerCloseApplicationContext", "(", ")", "{", "}", "@", "Test", "CapturedOutput", "output", "SpringApplication", ";", ";", "ExitCodeListener", ";", ";", ";", ";", "ExitStatusException", ";", ";", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "exitCodeListener", "=", "application", ".", "addListeners", "ApplicationListener", "listener", "=", "application", ".", "addListeners", "failure", "=", ".", "onApplicationEvent", ".", "isThrownBy", ".", "onApplicationEvent", ".", "onApplicationEvent", ".", "isEqualTo", ".", "contains", "new", "SpringApplication", "(", ")", "new", "ExitCodeListener", "(", "exitCodeListener", ")", "@", "SuppressWarnings", "<", "SpringApplicationEvent", ">", "mock", "(", "listener", ")", "new", "ExitStatusException", ".", "given", "(", ")", "assertThatExceptionOfType", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", "assertThat", "(", "11", ")", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "(", ")", "(", ")", "willThrow", "(", "listener", ")", "isA", "(", ")", "application", "::", "run", "then", "(", ")", "isA", "then", "(", ")", "isA", "(", ")", "(", "output", ")", "\"", "Application run failed", "\"", "ExampleConfig", ".", "class", "\"", "unchecked", "\"", "ApplicationListener", ".", "class", "(", "failure", ")", "(", ")", "RuntimeException", ".", "class", "(", "listener", ")", "(", ")", "(", "listener", ")", "never", "(", ")", "exitCodeListener", ".", "getExitCode", "ApplicationReadyEvent", ".", "class", "ApplicationReadyEvent", ".", "class", "(", ")", "ApplicationFailedEvent", ".", "class", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 274, "ast_depth": 10, "n_identifiers": 27, "vocab_size": 55, "n_whitespaces": 66, "n_words": 77, "nloc": 17, "token_counts": 181}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#717-734", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "failureOnTheJvmLogsApplicationRunFailed", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#failureOnTheJvmLogsApplicationRunFailed", "start_line": 717, "end_line": 734, "signature": "failureOnTheJvmLogsApplicationRunFailed(CapturedOutput output)", "original_code": "@Test\n\tvoid failureOnTheJvmLogsApplicationRunFailed(CapturedOutput output) {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tExitCodeListener exitCodeListener = new ExitCodeListener();\n\t\tapplication.addListeners(exitCodeListener);\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tApplicationListener<SpringApplicationEvent> listener = mock(ApplicationListener.class);\n\t\tapplication.addListeners(listener);\n\t\tExitStatusException failure = new ExitStatusException();\n\t\twillThrow(failure).given(listener).onApplicationEvent(isA(ApplicationReadyEvent.class));\n\t\tassertThatExceptionOfType(RuntimeException.class).isThrownBy(application::run);\n\t\tthen(listener).should().onApplicationEvent(isA(ApplicationReadyEvent.class));\n\t\tthen(listener).should(never()).onApplicationEvent(isA(ApplicationFailedEvent.class));\n\t\tassertThat(exitCodeListener.getExitCode()).isEqualTo(11);\n\t\t// Leading space only happens when logging\n\t\tassertThat(output).contains(\" Application run failed\").contains(\"ExitStatusException\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "failureOnTheJvmLogsApplicationRunFailed", "(", ")", "{", "// Leading space only happens when logging", "}", "@", "Test", "CapturedOutput", "output", "SpringApplication", ";", ";", "ExitCodeListener", ";", ";", ";", ";", "ExitStatusException", ";", ";", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "exitCodeListener", "=", "application", ".", "addListeners", "ApplicationListener", "listener", "=", "application", ".", "addListeners", "failure", "=", ".", "onApplicationEvent", ".", "isThrownBy", ".", "onApplicationEvent", ".", "onApplicationEvent", ".", "isEqualTo", ".", "contains", "new", "SpringApplication", "(", ")", "new", "ExitCodeListener", "(", "exitCodeListener", ")", "@", "SuppressWarnings", "<", "SpringApplicationEvent", ">", "mock", "(", "listener", ")", "new", "ExitStatusException", ".", "given", "(", ")", "assertThatExceptionOfType", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", "assertThat", "(", "11", ")", ".", "contains", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "(", ")", "(", ")", "willThrow", "(", "listener", ")", "isA", "(", ")", "application", "::", "run", "then", "(", ")", "isA", "then", "(", ")", "isA", "(", ")", "assertThat", "(", ")", "\"", "ExitStatusException", "\"", "ExampleConfig", ".", "class", "\"", "unchecked", "\"", "ApplicationListener", ".", "class", "(", "failure", ")", "(", ")", "RuntimeException", ".", "class", "(", "listener", ")", "(", ")", "(", "listener", ")", "never", "(", ")", "exitCodeListener", ".", "getExitCode", "(", "output", ")", "\"", " Application run failed", "\"", "ApplicationReadyEvent", ".", "class", "ApplicationReadyEvent", ".", "class", "(", ")", "ApplicationFailedEvent", ".", "class", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 285, "ast_depth": 10, "n_identifiers": 27, "vocab_size": 56, "n_whitespaces": 76, "n_words": 85, "nloc": 18, "token_counts": 189}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#736-762", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "failureInANativeImageWritesFailureToSystemOut", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#failureInANativeImageWritesFailureToSystemOut", "start_line": 736, "end_line": 762, "signature": "failureInANativeImageWritesFailureToSystemOut(CapturedOutput output)", "original_code": "@Test\n\t@ForkedClassPath\n\tvoid failureInANativeImageWritesFailureToSystemOut(CapturedOutput output) {\n\t\tSystem.setProperty(\"org.graalvm.nativeimage.imagecode\", \"true\");\n\t\ttry {\n\t\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\t\tExitCodeListener exitCodeListener = new ExitCodeListener();\n\t\t\tapplication.addListeners(exitCodeListener);\n\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\tApplicationListener<SpringApplicationEvent> listener = mock(ApplicationListener.class);\n\t\t\tapplication.addListeners(listener);\n\t\t\tExitStatusException failure = new ExitStatusException();\n\t\t\twillThrow(failure).given(listener).onApplicationEvent(isA(ApplicationReadyEvent.class));\n\t\t\tassertThatExceptionOfType(RuntimeException.class).isThrownBy(application::run);\n\t\t\tthen(listener).should().onApplicationEvent(isA(ApplicationReadyEvent.class));\n\t\t\tthen(listener).should(never()).onApplicationEvent(isA(ApplicationFailedEvent.class));\n\t\t\tassertThat(exitCodeListener.getExitCode()).isEqualTo(11);\n\t\t\t// Leading space only happens when logging\n\t\t\tassertThat(output).doesNotContain(\" Application run failed\")\n\t\t\t\t.contains(\"Application run failed\")\n\t\t\t\t.contains(\"ExitStatusException\");\n\t\t}\n\t\tfinally {\n\t\t\tSystem.clearProperty(\"org.graalvm.nativeimage.imagecode\");\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "failureInANativeImageWritesFailureToSystemOut", "(", ")", "{", "}", "@", "Test", "@", "ForkedClassPath", "CapturedOutput", "output", ";", "try", "System", ".", "setProperty", "{", "// Leading space only happens when logging", "}", "finally", "(", ",", ")", "SpringApplication", ";", ";", "ExitCodeListener", ";", ";", ";", ";", "ExitStatusException", ";", ";", ";", ";", ";", ";", ";", "{", "}", "\"", "org.graalvm.nativeimage.imagecode", "\"", "\"", "true", "\"", "application", "=", "application", ".", "setWebApplicationType", "exitCodeListener", "=", "application", ".", "addListeners", "ApplicationListener", "listener", "=", "application", ".", "addListeners", "failure", "=", ".", "onApplicationEvent", ".", "isThrownBy", ".", "onApplicationEvent", ".", "onApplicationEvent", ".", "isEqualTo", ".", "contains", ";", "new", "SpringApplication", "(", ")", "new", "ExitCodeListener", "(", "exitCodeListener", ")", "@", "SuppressWarnings", "<", "SpringApplicationEvent", ">", "mock", "(", "listener", ")", "new", "ExitStatusException", ".", "given", "(", ")", "assertThatExceptionOfType", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", "assertThat", "(", "11", ")", ".", "contains", "(", ")", "System", ".", "clearProperty", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "(", ")", "(", ")", "willThrow", "(", "listener", ")", "isA", "(", ")", "application", "::", "run", "then", "(", ")", "isA", "then", "(", ")", "isA", "(", ")", ".", "doesNotContain", "(", ")", "\"", "ExitStatusException", "\"", "(", ")", "ExampleConfig", ".", "class", "\"", "unchecked", "\"", "ApplicationListener", ".", "class", "(", "failure", ")", "(", ")", "RuntimeException", ".", "class", "(", "listener", ")", "(", ")", "(", "listener", ")", "never", "(", ")", "exitCodeListener", ".", "getExitCode", "assertThat", "(", ")", "\"", "Application run failed", "\"", "\"", "org.graalvm.nativeimage.imagecode", "\"", "ApplicationReadyEvent", ".", "class", "ApplicationReadyEvent", ".", "class", "(", ")", "ApplicationFailedEvent", ".", "class", "(", ")", "(", "output", ")", "\"", " Application run failed", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 339, "ast_depth": 12, "n_identifiers": 32, "vocab_size": 67, "n_whitespaces": 127, "n_words": 105, "nloc": 27, "token_counts": 226}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#764-774", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "loadSources", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#loadSources", "start_line": 764, "end_line": 774, "signature": "loadSources()", "original_code": "@Test\n\tvoid loadSources() {\n\t\tClass<?>[] sources = { ExampleConfig.class, TestCommandLineRunner.class };\n\t\tTestSpringApplication application = new TestSpringApplication(sources);\n\t\tapplication.getSources().add(\"a\");\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tapplication.setUseMockLoader(true);\n\t\tthis.context = application.run();\n\t\tSet<Object> allSources = application.getAllSources();\n\t\tassertThat(allSources).contains(ExampleConfig.class, TestCommandLineRunner.class, \"a\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "loadSources", "(", ")", "{", "}", "@", "Test", ";", "TestSpringApplication", ";", ";", ";", ";", ";", ";", ";", "sources", "=", "application", "=", ".", "add", "application", ".", "setWebApplicationType", "application", ".", "setUseMockLoader", "=", "Set", "allSources", "=", ".", "contains", "Class", "[", "]", "{", ",", "}", "new", "TestSpringApplication", "application", ".", "getSources", "(", ")", "(", ")", "(", "true", ")", "this", ".", "context", "application", ".", "run", "<", "Object", ">", "application", ".", "getAllSources", "assertThat", "(", ",", ",", ")", "<", ">", "ExampleConfig", ".", "class", "TestCommandLineRunner", ".", "class", "(", "sources", ")", "(", ")", "\"", "a", "\"", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "(", "allSources", ")", "ExampleConfig", ".", "class", "TestCommandLineRunner", ".", "class", "\"", "a", "\"", "?"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 158, "ast_depth": 9, "n_identifiers": 16, "vocab_size": 43, "n_whitespaces": 47, "n_words": 42, "nloc": 11, "token_counts": 106}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#776-784", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "wildcardSources", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#wildcardSources", "start_line": 776, "end_line": 784, "signature": "wildcardSources()", "original_code": "@Test\n\t@WithSampleBeansXmlResource\n\t@WithResource(name = \"application.properties\", content = \"sample.app.test.prop=*\")\n\tvoid wildcardSources() {\n\t\tTestSpringApplication application = new TestSpringApplication();\n\t\tapplication.getSources().add(\"classpath*:org/springframework/boot/sample-${sample.app.test.prop}.xml\");\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tthis.context = application.run(\"--spring.config.location=classpath:/\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "wildcardSources", "(", ")", "{", "}", "@", "Test", "@", "WithSampleBeansXmlResource", "@", "WithResource", "TestSpringApplication", ";", ";", ";", ";", "(", ",", ")", "application", "=", ".", "add", "application", ".", "setWebApplicationType", "=", "name", "=", "content", "=", "new", "TestSpringApplication", "application", ".", "getSources", "(", ")", "(", ")", "this", ".", "context", "application", ".", "run", "\"", "application.properties", "\"", "\"", "sample.app.test.prop=*", "\"", "(", ")", "(", ")", "\"", "classpath*:org/springframework/boot/sample-${sample.app.test.prop}.xml", "\"", "WebApplicationType", ".", "NONE", "(", ")", "\"", "--spring.config.location=classpath:/", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 101, "ast_depth": 9, "n_identifiers": 14, "vocab_size": 32, "n_whitespaces": 33, "n_words": 42, "nloc": 9, "token_counts": 68}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#786-790", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "run", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#run", "start_line": 786, "end_line": 790, "signature": "run()", "original_code": "@Test\n\tvoid run() {\n\t\tthis.context = SpringApplication.run(ExampleConfig.class);\n\t\tassertThat(this.context).isNotNull();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "run", "(", ")", "{", "}", "@", "Test", ";", ";", "=", ".", "isNotNull", "this", ".", "context", "SpringApplication", ".", "run", "assertThat", "(", ")", "(", ")", "(", ")", "ExampleConfig", ".", "class", "this", ".", "context"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 50, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 18, "n_whitespaces": 14, "n_words": 13, "nloc": 5, "token_counts": 32}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#792-796", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "runComponents", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#runComponents", "start_line": 792, "end_line": 796, "signature": "runComponents()", "original_code": "@Test\n\tvoid runComponents() {\n\t\tthis.context = SpringApplication.run(new Class<?>[] { ExampleConfig.class, Object.class }, new String[0]);\n\t\tassertThat(this.context).isNotNull();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runComponents", "(", ")", "{", "}", "@", "Test", ";", ";", "=", ".", "isNotNull", "this", ".", "context", "SpringApplication", ".", "run", "assertThat", "(", ")", "(", ",", ")", "(", ")", "new", "new", "String", "this", ".", "context", "Class", "[", "]", "{", ",", "}", "[", "0", "]", "<", ">", "ExampleConfig", ".", "class", "Object", ".", "class", "?"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 78, "ast_depth": 12, "n_identifiers": 7, "vocab_size": 30, "n_whitespaces": 21, "n_words": 20, "nloc": 5, "token_counts": 51}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#798-805", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "exit", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#exit", "start_line": 798, "end_line": 805, "signature": "exit()", "original_code": "@Test\n\tvoid exit() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tthis.context = application.run();\n\t\tassertThat(this.context).isNotNull();\n\t\tassertThat(SpringApplication.exit(this.context)).isZero();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "exit", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "=", ".", "isNotNull", ".", "isZero", "new", "SpringApplication", "(", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "(", ")", "ExampleConfig", ".", "class", "this", ".", "context", "SpringApplication", ".", "exit", "(", ")", "this", ".", "context"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 99, "ast_depth": 11, "n_identifiers": 12, "vocab_size": 25, "n_whitespaces": 27, "n_words": 27, "nloc": 8, "token_counts": 65}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#807-817", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "exitWithExplicitCode", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#exitWithExplicitCode", "start_line": 807, "end_line": 817, "signature": "exitWithExplicitCode()", "original_code": "@Test\n\tvoid exitWithExplicitCode() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tExitCodeListener listener = new ExitCodeListener();\n\t\tapplication.addListeners(listener);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tthis.context = application.run();\n\t\tassertThat(this.context).isNotNull();\n\t\tassertThat(SpringApplication.exit(this.context, (ExitCodeGenerator) () -> 2)).isEqualTo(2);\n\t\tassertThat(listener.getExitCode()).isEqualTo(2);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "exitWithExplicitCode", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", "ExitCodeListener", ";", ";", ";", ";", ";", ";", ";", "application", "=", "listener", "=", "application", ".", "addListeners", "application", ".", "setWebApplicationType", "=", ".", "isNotNull", ".", "isEqualTo", ".", "isEqualTo", "new", "SpringApplication", "new", "ExitCodeListener", "(", "listener", ")", "(", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "assertThat", "(", "2", ")", "assertThat", "(", "2", ")", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "(", ")", "(", ")", "ExampleConfig", ".", "class", "this", ".", "context", "SpringApplication", ".", "exit", "listener", ".", "getExitCode", "(", ",", ")", "(", ")", "this", ".", "context", "(", "ExitCodeGenerator", ")", "->", "2", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 154, "ast_depth": 13, "n_identifiers": 16, "vocab_size": 34, "n_whitespaces": 44, "n_words": 42, "nloc": 11, "token_counts": 103}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#819-836", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "exitWithExplicitCodeFromException", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#exitWithExplicitCodeFromException", "start_line": 819, "end_line": 836, "signature": "exitWithExplicitCodeFromException()", "original_code": "@Test\n\tvoid exitWithExplicitCodeFromException() {\n\t\tfinal SpringBootExceptionHandler handler = mock(SpringBootExceptionHandler.class);\n\t\tSpringApplication application = new SpringApplication(ExitCodeCommandLineRunConfig.class) {\n\n\t\t\t@Override\n\t\t\tSpringBootExceptionHandler getSpringBootExceptionHandler() {\n\t\t\t\treturn handler;\n\t\t\t}\n\n\t\t};\n\t\tExitCodeListener listener = new ExitCodeListener();\n\t\tapplication.addListeners(listener);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tassertThatIllegalStateException().isThrownBy(application::run);\n\t\tthen(handler).should().registerExitCode(11);\n\t\tassertThat(listener.getExitCode()).isEqualTo(11);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "exitWithExplicitCodeFromException", "(", ")", "{", "}", "@", "Test", "SpringBootExceptionHandler", ";", "SpringApplication", ";", "ExitCodeListener", ";", ";", ";", ";", ";", ";", "final", "handler", "=", "application", "=", "listener", "=", "application", ".", "addListeners", "application", ".", "setWebApplicationType", ".", "isThrownBy", ".", "registerExitCode", ".", "isEqualTo", "mock", "new", "SpringApplication", "new", "ExitCodeListener", "(", "listener", ")", "(", ")", "assertThatIllegalStateException", "(", ")", ".", "should", "(", "11", ")", "assertThat", "(", "11", ")", "(", ")", "(", ")", "{", "}", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "application", "::", "run", "then", "(", ")", "(", ")", "SpringBootExceptionHandler", ".", "class", "ExitCodeCommandLineRunConfig", ".", "class", "SpringBootExceptionHandler", "getSpringBootExceptionHandler", "(", "handler", ")", "listener", ".", "getExitCode", "(", ")", "{", "}", "(", ")", "@", "Override", "return", "handler", ";"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 161, "ast_depth": 11, "n_identifiers": 21, "vocab_size": 40, "n_whitespaces": 68, "n_words": 45, "nloc": 16, "token_counts": 106}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#824-827", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "getSpringBootExceptionHandler", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#getSpringBootExceptionHandler", "start_line": 824, "end_line": 827, "signature": "getSpringBootExceptionHandler()", "original_code": "@Override\n\t\t\tSpringBootExceptionHandler getSpringBootExceptionHandler() {\n\t\t\t\treturn handler;\n\t\t\t}", "doc_comment": ""}, "code_tokens": ["SpringBootExceptionHandler", "getSpringBootExceptionHandler", "(", ")", "{", "}", "@", "Override", "return", "handler", ";"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 18, "ast_depth": 5, "n_identifiers": 3, "vocab_size": 11, "n_whitespaces": 16, "n_words": 5, "nloc": 4, "token_counts": 11}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#838-855", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "exitWithExplicitCodeFromMappedException", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#exitWithExplicitCodeFromMappedException", "start_line": 838, "end_line": 855, "signature": "exitWithExplicitCodeFromMappedException()", "original_code": "@Test\n\tvoid exitWithExplicitCodeFromMappedException() {\n\t\tfinal SpringBootExceptionHandler handler = mock(SpringBootExceptionHandler.class);\n\t\tSpringApplication application = new SpringApplication(MappedExitCodeCommandLineRunConfig.class) {\n\n\t\t\t@Override\n\t\t\tSpringBootExceptionHandler getSpringBootExceptionHandler() {\n\t\t\t\treturn handler;\n\t\t\t}\n\n\t\t};\n\t\tExitCodeListener listener = new ExitCodeListener();\n\t\tapplication.addListeners(listener);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tassertThatIllegalStateException().isThrownBy(application::run);\n\t\tthen(handler).should().registerExitCode(11);\n\t\tassertThat(listener.getExitCode()).isEqualTo(11);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "exitWithExplicitCodeFromMappedException", "(", ")", "{", "}", "@", "Test", "SpringBootExceptionHandler", ";", "SpringApplication", ";", "ExitCodeListener", ";", ";", ";", ";", ";", ";", "final", "handler", "=", "application", "=", "listener", "=", "application", ".", "addListeners", "application", ".", "setWebApplicationType", ".", "isThrownBy", ".", "registerExitCode", ".", "isEqualTo", "mock", "new", "SpringApplication", "new", "ExitCodeListener", "(", "listener", ")", "(", ")", "assertThatIllegalStateException", "(", ")", ".", "should", "(", "11", ")", "assertThat", "(", "11", ")", "(", ")", "(", ")", "{", "}", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "application", "::", "run", "then", "(", ")", "(", ")", "SpringBootExceptionHandler", ".", "class", "MappedExitCodeCommandLineRunConfig", ".", "class", "SpringBootExceptionHandler", "getSpringBootExceptionHandler", "(", "handler", ")", "listener", ".", "getExitCode", "(", ")", "{", "}", "(", ")", "@", "Override", "return", "handler", ";"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 161, "ast_depth": 11, "n_identifiers": 21, "vocab_size": 40, "n_whitespaces": 68, "n_words": 45, "nloc": 16, "token_counts": 106}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#843-846", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "getSpringBootExceptionHandler", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#getSpringBootExceptionHandler", "start_line": 843, "end_line": 846, "signature": "getSpringBootExceptionHandler()", "original_code": "@Override\n\t\t\tSpringBootExceptionHandler getSpringBootExceptionHandler() {\n\t\t\t\treturn handler;\n\t\t\t}", "doc_comment": ""}, "code_tokens": ["SpringBootExceptionHandler", "getSpringBootExceptionHandler", "(", ")", "{", "}", "@", "Override", "return", "handler", ";"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 18, "ast_depth": 5, "n_identifiers": 3, "vocab_size": 11, "n_whitespaces": 16, "n_words": 5, "nloc": 4, "token_counts": 11}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#857-876", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "exceptionFromRefreshIsHandledGracefully", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#exceptionFromRefreshIsHandledGracefully", "start_line": 857, "end_line": 876, "signature": "exceptionFromRefreshIsHandledGracefully(CapturedOutput output)", "original_code": "@Test\n\tvoid exceptionFromRefreshIsHandledGracefully(CapturedOutput output) {\n\t\tfinal SpringBootExceptionHandler handler = mock(SpringBootExceptionHandler.class);\n\t\tSpringApplication application = new SpringApplication(RefreshFailureConfig.class) {\n\n\t\t\t@Override\n\t\t\tSpringBootExceptionHandler getSpringBootExceptionHandler() {\n\t\t\t\treturn handler;\n\t\t\t}\n\n\t\t};\n\t\tExitCodeListener listener = new ExitCodeListener();\n\t\tapplication.addListeners(listener);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tassertThatExceptionOfType(RuntimeException.class).isThrownBy(application::run);\n\t\tthen(handler).should()\n\t\t\t.registerLoggedException(\n\t\t\t\t\tassertArg((exception) -> assertThat(exception).hasCauseInstanceOf(RefreshFailureException.class)));\n\t\tassertThat(output).doesNotContain(\"NullPointerException\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "exceptionFromRefreshIsHandledGracefully", "(", ")", "{", "}", "@", "Test", "CapturedOutput", "output", "SpringBootExceptionHandler", ";", "SpringApplication", ";", "ExitCodeListener", ";", ";", ";", ";", ";", ";", "final", "handler", "=", "application", "=", "listener", "=", "application", ".", "addListeners", "application", ".", "setWebApplicationType", ".", "isThrownBy", ".", "registerLoggedException", ".", "doesNotContain", "mock", "new", "SpringApplication", "new", "ExitCodeListener", "(", "listener", ")", "(", ")", "assertThatExceptionOfType", "(", ")", ".", "should", "(", ")", "assertThat", "(", ")", "(", ")", "(", ")", "{", "}", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "application", "::", "run", "then", "(", ")", "assertArg", "(", "output", ")", "\"", "NullPointerException", "\"", "SpringBootExceptionHandler", ".", "class", "RefreshFailureConfig", ".", "class", "SpringBootExceptionHandler", "getSpringBootExceptionHandler", "RuntimeException", ".", "class", "(", "handler", ")", "(", ")", "(", ")", "{", "}", "->", "@", "Override", "return", "handler", ";", "(", "exception", ")", ".", "hasCauseInstanceOf", "assertThat", "(", ")", "(", "exception", ")", "RefreshFailureException", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 191, "ast_depth": 13, "n_identifiers": 24, "vocab_size": 48, "n_whitespaces": 81, "n_words": 54, "nloc": 18, "token_counts": 126}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#862-865", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "getSpringBootExceptionHandler", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#getSpringBootExceptionHandler", "start_line": 862, "end_line": 865, "signature": "getSpringBootExceptionHandler()", "original_code": "@Override\n\t\t\tSpringBootExceptionHandler getSpringBootExceptionHandler() {\n\t\t\t\treturn handler;\n\t\t\t}", "doc_comment": ""}, "code_tokens": ["SpringBootExceptionHandler", "getSpringBootExceptionHandler", "(", ")", "{", "}", "@", "Override", "return", "handler", ";"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 18, "ast_depth": 5, "n_identifiers": 3, "vocab_size": 11, "n_whitespaces": 16, "n_words": 5, "nloc": 4, "token_counts": 11}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#878-888", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "defaultCommandLineArgs", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#defaultCommandLineArgs", "start_line": 878, "end_line": 888, "signature": "defaultCommandLineArgs()", "original_code": "@Test\n\tvoid defaultCommandLineArgs() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setDefaultProperties(\n\t\t\t\tStringUtils.splitArrayElementsIntoProperties(new String[] { \"baz=\", \"bar=spam\" }, \"=\"));\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tthis.context = application.run(\"--bar=foo\", \"bucket\", \"crap\");\n\t\tassertThat(this.context).isInstanceOf(AnnotationConfigApplicationContext.class);\n\t\tassertThat(getEnvironment().getProperty(\"bar\")).isEqualTo(\"foo\");\n\t\tassertThat(getEnvironment().getProperty(\"baz\")).isEmpty();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "defaultCommandLineArgs", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setDefaultProperties", "application", ".", "setWebApplicationType", "=", ".", "isInstanceOf", ".", "isEqualTo", ".", "isEmpty", "new", "SpringApplication", "(", ")", "(", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "(", ")", "StringUtils", ".", "splitArrayElementsIntoProperties", "WebApplicationType", ".", "NONE", "(", ",", ",", ")", "(", ")", "AnnotationConfigApplicationContext", ".", "class", "(", ")", "\"", "foo", "\"", "(", ")", "ExampleConfig", ".", "class", "(", ",", ")", "\"", "--bar=foo", "\"", "\"", "bucket", "\"", "\"", "crap", "\"", "this", ".", "context", ".", "getProperty", ".", "getProperty", "new", "String", "\"", "=", "\"", "getEnvironment", "(", ")", "getEnvironment", "(", ")", "[", "]", "{", ",", "}", "(", ")", "\"", "bar", "\"", "(", ")", "\"", "baz", "\"", "\"", "baz=", "\"", "\"", "bar=spam", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 192, "ast_depth": 12, "n_identifiers": 17, "vocab_size": 45, "n_whitespaces": 46, "n_words": 47, "nloc": 11, "token_counts": 130}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#890-903", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "defaultPropertiesShouldBeMerged", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#defaultPropertiesShouldBeMerged", "start_line": 890, "end_line": 903, "signature": "defaultPropertiesShouldBeMerged()", "original_code": "@Test\n\tvoid defaultPropertiesShouldBeMerged() {\n\t\tMockEnvironment environment = new MockEnvironment();\n\t\tenvironment.getPropertySources()\n\t\t\t.addFirst(new MapPropertySource(DefaultPropertiesPropertySource.NAME,\n\t\t\t\t\tCollections.singletonMap(\"bar\", \"foo\")));\n\t\tSpringApplication application = new SpringApplicationBuilder(ExampleConfig.class).environment(environment)\n\t\t\t.properties(\"baz=bing\")\n\t\t\t.web(WebApplicationType.NONE)\n\t\t\t.build();\n\t\tthis.context = application.run();\n\t\tassertThat(getEnvironment().getProperty(\"bar\")).isEqualTo(\"foo\");\n\t\tassertThat(getEnvironment().getProperty(\"baz\")).isEqualTo(\"bing\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "defaultPropertiesShouldBeMerged", "(", ")", "{", "}", "@", "Test", "MockEnvironment", ";", ";", "SpringApplication", ";", ";", ";", ";", "environment", "=", ".", "addFirst", "application", "=", "=", ".", "isEqualTo", ".", "isEqualTo", "new", "MockEnvironment", "environment", ".", "getPropertySources", "(", ")", ".", "build", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "assertThat", "(", ")", "(", ")", "(", ")", "new", "MapPropertySource", ".", "web", "(", ")", "(", ")", "(", ")", "\"", "foo", "\"", "(", ")", "\"", "bing", "\"", "(", ",", ")", ".", "properties", "(", ")", ".", "getProperty", ".", "getProperty", "DefaultPropertiesPropertySource", ".", "NAME", "Collections", ".", "singletonMap", ".", "environment", "(", ")", "WebApplicationType", ".", "NONE", "getEnvironment", "(", ")", "getEnvironment", "(", ")", "(", ",", ")", "new", "SpringApplicationBuilder", "(", "environment", ")", "\"", "baz=bing", "\"", "(", ")", "\"", "bar", "\"", "(", ")", "\"", "baz", "\"", "\"", "bar", "\"", "\"", "foo", "\"", "(", ")", "ExampleConfig", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 196, "ast_depth": 13, "n_identifiers": 21, "vocab_size": 45, "n_whitespaces": 58, "n_words": 49, "nloc": 14, "token_counts": 132}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#905-911", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "commandLineArgsApplyToSpringApplication", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#commandLineArgsApplyToSpringApplication", "start_line": 905, "end_line": 911, "signature": "commandLineArgsApplyToSpringApplication()", "original_code": "@Test\n\tvoid commandLineArgsApplyToSpringApplication() {\n\t\tTestSpringApplication application = new TestSpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tthis.context = application.run(\"--spring.main.banner-mode=OFF\");\n\t\tassertThat(application.getBannerMode()).isEqualTo(Banner.Mode.OFF);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "commandLineArgsApplyToSpringApplication", "(", ")", "{", "}", "@", "Test", "TestSpringApplication", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "=", ".", "isEqualTo", "new", "TestSpringApplication", "(", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", ".", "OFF", "ExampleConfig", ".", "class", "\"", "--spring.main.banner-mode=OFF", "\"", "application", ".", "getBannerMode", "Banner", ".", "Mode", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 89, "ast_depth": 10, "n_identifiers": 14, "vocab_size": 30, "n_whitespaces": 24, "n_words": 29, "nloc": 7, "token_counts": 59}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#913-919", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "registerShutdownHook", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#registerShutdownHook", "start_line": 913, "end_line": 919, "signature": "registerShutdownHook()", "original_code": "@Test\n\tvoid registerShutdownHook() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tthis.context = application.run();\n\t\tassertThat(SpringApplicationShutdownHookInstance.get()).registeredApplicationContext(this.context);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "registerShutdownHook", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "=", ".", "registeredApplicationContext", "new", "SpringApplication", "(", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "this", ".", "context", "ExampleConfig", ".", "class", "SpringApplicationShutdownHookInstance", ".", "get", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 82, "ast_depth": 10, "n_identifiers": 12, "vocab_size": 26, "n_whitespaces": 24, "n_words": 23, "nloc": 7, "token_counts": 54}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#921-928", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "registerShutdownHookOff", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#registerShutdownHookOff", "start_line": 921, "end_line": 928, "signature": "registerShutdownHookOff()", "original_code": "@Test\n\tvoid registerShutdownHookOff() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tapplication.setRegisterShutdownHook(false);\n\t\tthis.context = application.run();\n\t\tassertThat(SpringApplicationShutdownHookInstance.get()).didNotRegisterApplicationContext(this.context);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "registerShutdownHookOff", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "application", ".", "setRegisterShutdownHook", "=", ".", "didNotRegisterApplicationContext", "new", "SpringApplication", "(", ")", "(", "false", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "this", ".", "context", "ExampleConfig", ".", "class", "SpringApplicationShutdownHookInstance", ".", "get", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 92, "ast_depth": 10, "n_identifiers": 13, "vocab_size": 28, "n_whitespaces": 27, "n_words": 26, "nloc": 8, "token_counts": 61}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#930-940", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "registerListener", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#registerListener", "start_line": 930, "end_line": 940, "signature": "registerListener()", "original_code": "@Test\n\tvoid registerListener() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class, ListenerConfig.class);\n\t\tapplication.setApplicationContextFactory(ApplicationContextFactory.ofContextClass(SpyApplicationContext.class));\n\t\tSet<ApplicationEvent> events = new LinkedHashSet<>();\n\t\tapplication.addListeners((ApplicationListener<ApplicationEvent>) events::add);\n\t\tthis.context = application.run();\n\t\tassertThat(events).hasAtLeastOneElementOfType(ApplicationPreparedEvent.class);\n\t\tassertThat(events).hasAtLeastOneElementOfType(ContextRefreshedEvent.class);\n\t\tverifyRegisteredListenerSuccessEvents();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "registerListener", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setApplicationContextFactory", "Set", "events", "=", "application", ".", "addListeners", "=", ".", "hasAtLeastOneElementOfType", ".", "hasAtLeastOneElementOfType", "verifyRegisteredListenerSuccessEvents", "new", "SpringApplication", "(", ")", "<", "ApplicationEvent", ">", "new", "(", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "assertThat", "(", ")", "(", ")", "(", ",", ")", "ApplicationContextFactory", ".", "ofContextClass", "LinkedHashSet", "(", ")", "(", ")", "(", ")", "(", "events", ")", "ApplicationPreparedEvent", ".", "class", "(", "events", ")", "ContextRefreshedEvent", ".", "class", "ExampleConfig", ".", "class", "ListenerConfig", ".", "class", "(", ")", "<", ">", "ApplicationListener", "events", "::", "add", "SpyApplicationContext", ".", "class", "<", "ApplicationEvent", ">"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 156, "ast_depth": 10, "n_identifiers": 14, "vocab_size": 40, "n_whitespaces": 42, "n_words": 43, "nloc": 11, "token_counts": 103}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#942-953", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "registerListenerWithCustomMulticaster", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#registerListenerWithCustomMulticaster", "start_line": 942, "end_line": 953, "signature": "registerListenerWithCustomMulticaster()", "original_code": "@Test\n\tvoid registerListenerWithCustomMulticaster() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class, ListenerConfig.class,\n\t\t\t\tMulticaster.class);\n\t\tapplication.setApplicationContextFactory(ApplicationContextFactory.ofContextClass(SpyApplicationContext.class));\n\t\tSet<ApplicationEvent> events = new LinkedHashSet<>();\n\t\tapplication.addListeners((ApplicationListener<ApplicationEvent>) events::add);\n\t\tthis.context = application.run();\n\t\tassertThat(events).hasAtLeastOneElementOfType(ApplicationPreparedEvent.class);\n\t\tassertThat(events).hasAtLeastOneElementOfType(ContextRefreshedEvent.class);\n\t\tverifyRegisteredListenerSuccessEvents();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "registerListenerWithCustomMulticaster", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setApplicationContextFactory", "Set", "events", "=", "application", ".", "addListeners", "=", ".", "hasAtLeastOneElementOfType", ".", "hasAtLeastOneElementOfType", "verifyRegisteredListenerSuccessEvents", "new", "SpringApplication", "(", ")", "<", "ApplicationEvent", ">", "new", "(", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "assertThat", "(", ")", "(", ")", "(", ",", ",", ")", "ApplicationContextFactory", ".", "ofContextClass", "LinkedHashSet", "(", ")", "(", ")", "(", ")", "(", "events", ")", "ApplicationPreparedEvent", ".", "class", "(", "events", ")", "ContextRefreshedEvent", ".", "class", "ExampleConfig", ".", "class", "ListenerConfig", ".", "class", "Multicaster", ".", "class", "(", ")", "<", ">", "ApplicationListener", "events", "::", "add", "SpyApplicationContext", ".", "class", "<", "ApplicationEvent", ">"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 161, "ast_depth": 10, "n_identifiers": 14, "vocab_size": 41, "n_whitespaces": 47, "n_words": 45, "nloc": 12, "token_counts": 107}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#955-968", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "verifyRegisteredListenerSuccessEvents", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#verifyRegisteredListenerSuccessEvents", "start_line": 955, "end_line": 968, "signature": "verifyRegisteredListenerSuccessEvents()", "original_code": "@SuppressWarnings(\"unchecked\")\n\tprivate void verifyRegisteredListenerSuccessEvents() {\n\t\tApplicationListener<ApplicationEvent> listener = this.context.getBean(\"testApplicationListener\",\n\t\t\t\tApplicationListener.class);\n\t\tInOrder inOrder = Mockito.inOrder(listener);\n\t\tthen(listener).should(inOrder).onApplicationEvent(isA(ContextRefreshedEvent.class));\n\t\tthen(listener).should(inOrder).onApplicationEvent(isA(ApplicationStartedEvent.class));\n\t\tthen(listener).should(inOrder)\n\t\t\t.onApplicationEvent(argThat(isAvailabilityChangeEventWithState(LivenessState.CORRECT)));\n\t\tthen(listener).should(inOrder).onApplicationEvent(isA(ApplicationReadyEvent.class));\n\t\tthen(listener).should(inOrder)\n\t\t\t.onApplicationEvent(argThat(isAvailabilityChangeEventWithState(ReadinessState.ACCEPTING_TRAFFIC)));\n\t\tinOrder.verifyNoMoreInteractions();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "verifyRegisteredListenerSuccessEvents", "private", "(", ")", "{", "}", "@", "SuppressWarnings", ";", "InOrder", ";", ";", ";", ";", ";", ";", ";", "(", ")", "ApplicationListener", "listener", "=", "inOrder", "=", ".", "onApplicationEvent", ".", "onApplicationEvent", ".", "onApplicationEvent", ".", "onApplicationEvent", ".", "onApplicationEvent", "inOrder", ".", "verifyNoMoreInteractions", "\"", "unchecked", "\"", "<", "ApplicationEvent", ">", ".", "getBean", "Mockito", ".", "inOrder", ".", "should", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", "(", ")", "this", ".", "context", "(", ",", ")", "(", "listener", ")", "then", "(", "inOrder", ")", "isA", "then", "(", "inOrder", ")", "isA", "then", "(", "inOrder", ")", "argThat", "then", "(", "inOrder", ")", "isA", "then", "(", "inOrder", ")", "argThat", "\"", "testApplicationListener", "\"", "ApplicationListener", ".", "class", "(", "listener", ")", "(", ")", "(", "listener", ")", "(", ")", "(", "listener", ")", "(", ")", "(", "listener", ")", "(", ")", "(", "listener", ")", "(", ")", "ContextRefreshedEvent", ".", "class", "ApplicationStartedEvent", ".", "class", "isAvailabilityChangeEventWithState", "ApplicationReadyEvent", ".", "class", "isAvailabilityChangeEventWithState", "(", ")", "(", ")", "LivenessState", ".", "CORRECT", "ReadinessState", ".", "ACCEPTING_TRAFFIC"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 235, "ast_depth": 12, "n_identifiers": 18, "vocab_size": 42, "n_whitespaces": 50, "n_words": 63, "nloc": 14, "token_counts": 157}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#970-978", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "applicationListenerFromApplicationIsCalledWhenContextFailsRefreshBeforeListenerRegistration", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#applicationListenerFromApplicationIsCalledWhenContextFailsRefreshBeforeListenerRegistration", "start_line": 970, "end_line": 978, "signature": "applicationListenerFromApplicationIsCalledWhenContextFailsRefreshBeforeListenerRegistration()", "original_code": "@SuppressWarnings(\"unchecked\")\n\t@Test\n\tvoid applicationListenerFromApplicationIsCalledWhenContextFailsRefreshBeforeListenerRegistration() {\n\t\tApplicationListener<ApplicationEvent> listener = mock(ApplicationListener.class);\n\t\tSpringApplication application = new SpringApplication(BrokenBeanFactoryPostProcessing.class);\n\t\tapplication.addListeners(listener);\n\t\tassertThatExceptionOfType(ApplicationContextException.class).isThrownBy(application::run);\n\t\tverifyRegisteredListenerFailedFromApplicationEvents(listener);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "applicationListenerFromApplicationIsCalledWhenContextFailsRefreshBeforeListenerRegistration", "(", ")", "{", "}", "@", "SuppressWarnings", "@", "Test", ";", "SpringApplication", ";", ";", ";", ";", "(", ")", "ApplicationListener", "listener", "=", "application", "=", "application", ".", "addListeners", ".", "isThrownBy", "verifyRegisteredListenerFailedFromApplicationEvents", "\"", "unchecked", "\"", "<", "ApplicationEvent", ">", "mock", "new", "SpringApplication", "(", "listener", ")", "assertThatExceptionOfType", "(", ")", "(", "listener", ")", "(", ")", "(", ")", "(", ")", "application", "::", "run", "ApplicationListener", ".", "class", "BrokenBeanFactoryPostProcessing", ".", "class", "ApplicationContextException", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 99, "ast_depth": 9, "n_identifiers": 11, "vocab_size": 32, "n_whitespaces": 30, "n_words": 28, "nloc": 9, "token_counts": 65}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#980-989", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "applicationListenerFromApplicationIsCalledWhenContextFailsRefreshAfterListenerRegistration", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#applicationListenerFromApplicationIsCalledWhenContextFailsRefreshAfterListenerRegistration", "start_line": 980, "end_line": 989, "signature": "applicationListenerFromApplicationIsCalledWhenContextFailsRefreshAfterListenerRegistration()", "original_code": "@SuppressWarnings(\"unchecked\")\n\t@Test\n\tvoid applicationListenerFromApplicationIsCalledWhenContextFailsRefreshAfterListenerRegistration() {\n\t\tApplicationListener<ApplicationEvent> listener = mock(ApplicationListener.class);\n\t\tSpringApplication application = new SpringApplication(BrokenPostConstructConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tapplication.addListeners(listener);\n\t\tassertThatExceptionOfType(BeanCreationException.class).isThrownBy(application::run);\n\t\tverifyRegisteredListenerFailedFromApplicationEvents(listener);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "applicationListenerFromApplicationIsCalledWhenContextFailsRefreshAfterListenerRegistration", "(", ")", "{", "}", "@", "SuppressWarnings", "@", "Test", ";", "SpringApplication", ";", ";", ";", ";", ";", "(", ")", "ApplicationListener", "listener", "=", "application", "=", "application", ".", "setWebApplicationType", "application", ".", "addListeners", ".", "isThrownBy", "verifyRegisteredListenerFailedFromApplicationEvents", "\"", "unchecked", "\"", "<", "ApplicationEvent", ">", "mock", "new", "SpringApplication", "(", ")", "(", "listener", ")", "assertThatExceptionOfType", "(", ")", "(", "listener", ")", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "application", "::", "run", "ApplicationListener", ".", "class", "BrokenPostConstructConfig", ".", "class", "BeanCreationException", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 112, "ast_depth": 9, "n_identifiers": 14, "vocab_size": 35, "n_whitespaces": 33, "n_words": 32, "nloc": 10, "token_counts": 74}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#991-999", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "verifyRegisteredListenerFailedFromApplicationEvents", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#verifyRegisteredListenerFailedFromApplicationEvents", "start_line": 991, "end_line": 999, "signature": "verifyRegisteredListenerFailedFromApplicationEvents(ApplicationListener<ApplicationEvent> listener)", "original_code": "private void verifyRegisteredListenerFailedFromApplicationEvents(ApplicationListener<ApplicationEvent> listener) {\n\t\tInOrder inOrder = Mockito.inOrder(listener);\n\t\tthen(listener).should(inOrder).onApplicationEvent(isA(ApplicationStartingEvent.class));\n\t\tthen(listener).should(inOrder).onApplicationEvent(isA(ApplicationEnvironmentPreparedEvent.class));\n\t\tthen(listener).should(inOrder).onApplicationEvent(isA(ApplicationContextInitializedEvent.class));\n\t\tthen(listener).should(inOrder).onApplicationEvent(isA(ApplicationPreparedEvent.class));\n\t\tthen(listener).should(inOrder).onApplicationEvent(isA(ApplicationFailedEvent.class));\n\t\tinOrder.verifyNoMoreInteractions();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "verifyRegisteredListenerFailedFromApplicationEvents", "private", "(", ")", "{", "}", "listener", "InOrder", ";", ";", ";", ";", ";", ";", ";", "ApplicationListener", "inOrder", "=", ".", "onApplicationEvent", ".", "onApplicationEvent", ".", "onApplicationEvent", ".", "onApplicationEvent", ".", "onApplicationEvent", "inOrder", ".", "verifyNoMoreInteractions", "<", "ApplicationEvent", ">", "Mockito", ".", "inOrder", ".", "should", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", "(", ")", "(", "listener", ")", "then", "(", "inOrder", ")", "isA", "then", "(", "inOrder", ")", "isA", "then", "(", "inOrder", ")", "isA", "then", "(", "inOrder", ")", "isA", "then", "(", "inOrder", ")", "isA", "(", "listener", ")", "(", ")", "(", "listener", ")", "(", ")", "(", "listener", ")", "(", ")", "(", "listener", ")", "(", ")", "(", "listener", ")", "(", ")", "ApplicationStartingEvent", ".", "class", "ApplicationEnvironmentPreparedEvent", ".", "class", "ApplicationContextInitializedEvent", ".", "class", "ApplicationPreparedEvent", ".", "class", "ApplicationFailedEvent", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 193, "ast_depth": 10, "n_identifiers": 9, "vocab_size": 29, "n_whitespaces": 30, "n_words": 53, "nloc": 9, "token_counts": 128}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1001-1010", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "applicationListenerFromContextIsCalledWhenContextFailsRefreshBeforeListenerRegistration", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#applicationListenerFromContextIsCalledWhenContextFailsRefreshBeforeListenerRegistration", "start_line": 1001, "end_line": 1010, "signature": "applicationListenerFromContextIsCalledWhenContextFailsRefreshBeforeListenerRegistration()", "original_code": "@SuppressWarnings(\"unchecked\")\n\t@Test\n\tvoid applicationListenerFromContextIsCalledWhenContextFailsRefreshBeforeListenerRegistration() {\n\t\tfinal ApplicationListener<ApplicationEvent> listener = mock(ApplicationListener.class);\n\t\tSpringApplication application = new SpringApplication(BrokenBeanFactoryPostProcessing.class);\n\t\tapplication.addInitializers((applicationContext) -> applicationContext.addApplicationListener(listener));\n\t\tassertThatExceptionOfType(ApplicationContextException.class).isThrownBy(application::run);\n\t\tthen(listener).should().onApplicationEvent(isA(ApplicationFailedEvent.class));\n\t\tthen(listener).shouldHaveNoMoreInteractions();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "applicationListenerFromContextIsCalledWhenContextFailsRefreshBeforeListenerRegistration", "(", ")", "{", "}", "@", "SuppressWarnings", "@", "Test", ";", "SpringApplication", ";", ";", ";", ";", ";", "(", ")", "final", "ApplicationListener", "listener", "=", "application", "=", "application", ".", "addInitializers", ".", "isThrownBy", ".", "onApplicationEvent", ".", "shouldHaveNoMoreInteractions", "\"", "unchecked", "\"", "<", "ApplicationEvent", ">", "mock", "new", "SpringApplication", "(", ")", "assertThatExceptionOfType", "(", ")", ".", "should", "(", ")", "then", "(", ")", "(", ")", "(", ")", "->", "(", ")", "application", "::", "run", "then", "(", ")", "isA", "(", "listener", ")", "ApplicationListener", ".", "class", "BrokenBeanFactoryPostProcessing", ".", "class", "(", "applicationContext", ")", "applicationContext", ".", "addApplicationListener", "ApplicationContextException", ".", "class", "(", "listener", ")", "(", ")", "(", "listener", ")", "ApplicationFailedEvent", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 149, "ast_depth": 10, "n_identifiers": 17, "vocab_size": 41, "n_whitespaces": 36, "n_words": 40, "nloc": 10, "token_counts": 98}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1012-1022", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "applicationListenerFromContextIsCalledWhenContextFailsRefreshAfterListenerRegistration", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#applicationListenerFromContextIsCalledWhenContextFailsRefreshAfterListenerRegistration", "start_line": 1012, "end_line": 1022, "signature": "applicationListenerFromContextIsCalledWhenContextFailsRefreshAfterListenerRegistration()", "original_code": "@SuppressWarnings(\"unchecked\")\n\t@Test\n\tvoid applicationListenerFromContextIsCalledWhenContextFailsRefreshAfterListenerRegistration() {\n\t\tApplicationListener<ApplicationEvent> listener = mock(ApplicationListener.class);\n\t\tSpringApplication application = new SpringApplication(BrokenPostConstructConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tapplication.addInitializers((applicationContext) -> applicationContext.addApplicationListener(listener));\n\t\tassertThatExceptionOfType(BeanCreationException.class).isThrownBy(application::run);\n\t\tthen(listener).should().onApplicationEvent(isA(ApplicationFailedEvent.class));\n\t\tthen(listener).shouldHaveNoMoreInteractions();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "applicationListenerFromContextIsCalledWhenContextFailsRefreshAfterListenerRegistration", "(", ")", "{", "}", "@", "SuppressWarnings", "@", "Test", ";", "SpringApplication", ";", ";", ";", ";", ";", ";", "(", ")", "ApplicationListener", "listener", "=", "application", "=", "application", ".", "setWebApplicationType", "application", ".", "addInitializers", ".", "isThrownBy", ".", "onApplicationEvent", ".", "shouldHaveNoMoreInteractions", "\"", "unchecked", "\"", "<", "ApplicationEvent", ">", "mock", "new", "SpringApplication", "(", ")", "(", ")", "assertThatExceptionOfType", "(", ")", ".", "should", "(", ")", "then", "(", ")", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "->", "(", ")", "application", "::", "run", "then", "(", ")", "isA", "(", "listener", ")", "ApplicationListener", ".", "class", "BrokenPostConstructConfig", ".", "class", "(", "applicationContext", ")", "applicationContext", ".", "addApplicationListener", "BeanCreationException", ".", "class", "(", "listener", ")", "(", ")", "(", "listener", ")", "ApplicationFailedEvent", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 160, "ast_depth": 10, "n_identifiers": 20, "vocab_size": 43, "n_whitespaces": 38, "n_words": 43, "nloc": 11, "token_counts": 106}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1024-1030", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "headless", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#headless", "start_line": 1024, "end_line": 1030, "signature": "headless()", "original_code": "@Test\n\tvoid headless() {\n\t\tTestSpringApplication application = new TestSpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tthis.context = application.run();\n\t\tassertThat(System.getProperty(\"java.awt.headless\")).isEqualTo(\"true\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "headless", "(", ")", "{", "}", "@", "Test", "TestSpringApplication", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "=", ".", "isEqualTo", "new", "TestSpringApplication", "(", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "\"", "true", "\"", "ExampleConfig", ".", "class", "System", ".", "getProperty", "(", ")", "\"", "java.awt.headless", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 86, "ast_depth": 11, "n_identifiers": 12, "vocab_size": 29, "n_whitespaces": 24, "n_words": 25, "nloc": 7, "token_counts": 57}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1032-1039", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "headlessFalse", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#headlessFalse", "start_line": 1032, "end_line": 1039, "signature": "headlessFalse()", "original_code": "@Test\n\tvoid headlessFalse() {\n\t\tTestSpringApplication application = new TestSpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tapplication.setHeadless(false);\n\t\tthis.context = application.run();\n\t\tassertThat(System.getProperty(\"java.awt.headless\")).isEqualTo(\"false\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "headlessFalse", "(", ")", "{", "}", "@", "Test", "TestSpringApplication", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "application", ".", "setHeadless", "=", ".", "isEqualTo", "new", "TestSpringApplication", "(", ")", "(", "false", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "\"", "false", "\"", "ExampleConfig", ".", "class", "System", ".", "getProperty", "(", ")", "\"", "java.awt.headless", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 96, "ast_depth": 11, "n_identifiers": 13, "vocab_size": 30, "n_whitespaces": 27, "n_words": 28, "nloc": 8, "token_counts": 64}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1041-1048", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "headlessSystemPropertyTakesPrecedence", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#headlessSystemPropertyTakesPrecedence", "start_line": 1041, "end_line": 1048, "signature": "headlessSystemPropertyTakesPrecedence()", "original_code": "@Test\n\tvoid headlessSystemPropertyTakesPrecedence() {\n\t\tSystem.setProperty(\"java.awt.headless\", \"false\");\n\t\tTestSpringApplication application = new TestSpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tthis.context = application.run();\n\t\tassertThat(System.getProperty(\"java.awt.headless\")).isEqualTo(\"false\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "headlessSystemPropertyTakesPrecedence", "(", ")", "{", "}", "@", "Test", ";", "TestSpringApplication", ";", ";", ";", ";", "System", ".", "setProperty", "application", "=", "application", ".", "setWebApplicationType", "=", ".", "isEqualTo", "(", ",", ")", "new", "TestSpringApplication", "(", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "\"", "java.awt.headless", "\"", "\"", "false", "\"", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "\"", "false", "\"", "ExampleConfig", ".", "class", "System", ".", "getProperty", "(", ")", "\"", "java.awt.headless", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 104, "ast_depth": 11, "n_identifiers": 13, "vocab_size": 31, "n_whitespaces": 28, "n_words": 31, "nloc": 8, "token_counts": 70}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1050-1058", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "getApplicationArgumentsBean", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#getApplicationArgumentsBean", "start_line": 1050, "end_line": 1058, "signature": "getApplicationArgumentsBean()", "original_code": "@Test\n\tvoid getApplicationArgumentsBean() {\n\t\tTestSpringApplication application = new TestSpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tthis.context = application.run(\"--debug\", \"spring\", \"boot\");\n\t\tApplicationArguments args = this.context.getBean(ApplicationArguments.class);\n\t\tassertThat(args.getNonOptionArgs()).containsExactly(\"spring\", \"boot\");\n\t\tassertThat(args.containsOption(\"debug\")).isTrue();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "getApplicationArgumentsBean", "(", ")", "{", "}", "@", "Test", "TestSpringApplication", ";", ";", ";", "ApplicationArguments", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "=", "args", "=", ".", "containsExactly", ".", "isTrue", "new", "TestSpringApplication", "(", ")", "this", ".", "context", "application", ".", "run", ".", "getBean", "assertThat", "(", ",", ")", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ",", ",", ")", "this", ".", "context", "(", ")", "(", ")", "\"", "spring", "\"", "\"", "boot", "\"", "(", ")", "ExampleConfig", ".", "class", "\"", "--debug", "\"", "\"", "spring", "\"", "\"", "boot", "\"", "ApplicationArguments", ".", "class", "args", ".", "getNonOptionArgs", "args", ".", "containsOption", "(", ")", "(", ")", "\"", "debug", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 145, "ast_depth": 11, "n_identifiers": 15, "vocab_size": 36, "n_whitespaces": 36, "n_words": 38, "nloc": 9, "token_counts": 99}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1060-1066", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "nonWebApplicationConfiguredViaAPropertyHasTheCorrectTypeOfContextAndEnvironment", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#nonWebApplicationConfiguredViaAPropertyHasTheCorrectTypeOfContextAndEnvironment", "start_line": 1060, "end_line": 1066, "signature": "nonWebApplicationConfiguredViaAPropertyHasTheCorrectTypeOfContextAndEnvironment()", "original_code": "@Test\n\tvoid nonWebApplicationConfiguredViaAPropertyHasTheCorrectTypeOfContextAndEnvironment() {\n\t\tConfigurableApplicationContext context = new SpringApplication(ExampleConfig.class)\n\t\t\t.run(\"--spring.main.web-application-type=none\");\n\t\tassertThat(context).isNotInstanceOfAny(WebApplicationContext.class, ReactiveWebApplicationContext.class);\n\t\tassertThat(context.getEnvironment()).isNotInstanceOfAny(ConfigurableWebEnvironment.class);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "nonWebApplicationConfiguredViaAPropertyHasTheCorrectTypeOfContextAndEnvironment", "(", ")", "{", "}", "@", "Test", "ConfigurableApplicationContext", ";", ";", ";", "context", "=", ".", "isNotInstanceOfAny", ".", "isNotInstanceOfAny", ".", "run", "assertThat", "(", ",", ")", "assertThat", "(", ")", "new", "SpringApplication", "(", ")", "(", "context", ")", "WebApplicationContext", ".", "class", "ReactiveWebApplicationContext", ".", "class", "(", ")", "ConfigurableWebEnvironment", ".", "class", "(", ")", "\"", "--spring.main.web-application-type=none", "\"", "context", ".", "getEnvironment", "ExampleConfig", ".", "class", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 87, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 27, "n_whitespaces": 24, "n_words": 29, "nloc": 7, "token_counts": 58}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1068-1084", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "failureResultsInSingleStackTrace", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#failureResultsInSingleStackTrace", "start_line": 1068, "end_line": 1084, "signature": "failureResultsInSingleStackTrace(CapturedOutput output)", "original_code": "@Test\n\tvoid failureResultsInSingleStackTrace(CapturedOutput output) throws Exception {\n\t\tThreadGroup group = new ThreadGroup(\"main\");\n\t\tThread thread = new Thread(group, \"main\") {\n\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tSpringApplication application = new SpringApplication(FailingConfig.class);\n\t\t\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\t\t\tapplication.run();\n\t\t\t}\n\n\t\t};\n\t\tthread.start();\n\t\tthread.join(6000);\n\t\tassertThat(output).containsOnlyOnce(\"Caused by: java.lang.RuntimeException: ExpectedError\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "failureResultsInSingleStackTrace", "(", ")", "throws", "Exception", "{", "}", "@", "Test", "CapturedOutput", "output", "ThreadGroup", ";", "Thread", ";", ";", ";", ";", "group", "=", "thread", "=", "thread", ".", "start", "thread", ".", "join", ".", "containsOnlyOnce", "new", "ThreadGroup", "new", "Thread", "(", ")", "(", "6000", ")", "assertThat", "(", ")", "(", ")", "(", "group", ",", ")", "{", "}", "(", "output", ")", "\"", "Caused by: java.lang.RuntimeException: ExpectedError", "\"", "\"", "main", "\"", "\"", "main", "\"", "void", "run", "public", "(", ")", "{", "}", "@", "Override", "SpringApplication", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "application", ".", "run", "new", "SpringApplication", "(", ")", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "FailingConfig", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 146, "ast_depth": 15, "n_identifiers": 15, "vocab_size": 39, "n_whitespaces": 76, "n_words": 48, "nloc": 15, "token_counts": 98}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1073-1078", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "run", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#run", "start_line": 1073, "end_line": 1078, "signature": "run()", "original_code": "@Override\n\t\t\tpublic void run() {\n\t\t\t\tSpringApplication application = new SpringApplication(FailingConfig.class);\n\t\t\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\t\t\tapplication.run();\n\t\t\t}", "doc_comment": ""}, "code_tokens": ["void", "run", "public", "(", ")", "{", "}", "@", "Override", "SpringApplication", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "application", ".", "run", "new", "SpringApplication", "(", ")", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "FailingConfig", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 53, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 20, "n_whitespaces": 30, "n_words": 16, "nloc": 6, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1086-1090", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "beanDefinitionOverridingIsDisabledByDefault", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#beanDefinitionOverridingIsDisabledByDefault", "start_line": 1086, "end_line": 1090, "signature": "beanDefinitionOverridingIsDisabledByDefault()", "original_code": "@Test\n\tvoid beanDefinitionOverridingIsDisabledByDefault() {\n\t\tassertThatExceptionOfType(BeanDefinitionOverrideException.class)\n\t\t\t.isThrownBy(() -> new SpringApplication(ExampleConfig.class, OverrideConfig.class).run());\n\t}", "doc_comment": ""}, "code_tokens": ["void", "beanDefinitionOverridingIsDisabledByDefault", "(", ")", "{", "}", "@", "Test", ";", ".", "isThrownBy", "assertThatExceptionOfType", "(", ")", "(", ")", "->", "BeanDefinitionOverrideException", ".", "class", "(", ")", ".", "run", "new", "SpringApplication", "(", ")", "(", ",", ")", "ExampleConfig", ".", "class", "OverrideConfig", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 57, "ast_depth": 12, "n_identifiers": 5, "vocab_size": 21, "n_whitespaces": 17, "n_words": 14, "nloc": 5, "token_counts": 37}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1092-1097", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "beanDefinitionOverridingCanBeEnabled", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#beanDefinitionOverridingCanBeEnabled", "start_line": 1092, "end_line": 1097, "signature": "beanDefinitionOverridingCanBeEnabled()", "original_code": "@Test\n\tvoid beanDefinitionOverridingCanBeEnabled() {\n\t\tassertThat(new SpringApplication(ExampleConfig.class, OverrideConfig.class)\n\t\t\t.run(\"--spring.main.allow-bean-definition-overriding=true\", \"--spring.main.web-application-type=none\")\n\t\t\t.getBean(\"someBean\")).isEqualTo(\"override\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "beanDefinitionOverridingCanBeEnabled", "(", ")", "{", "}", "@", "Test", ";", ".", "isEqualTo", "assertThat", "(", ")", "(", ")", "\"", "override", "\"", ".", "getBean", ".", "run", "(", ")", "new", "SpringApplication", "(", ",", ")", "\"", "someBean", "\"", "(", ",", ")", "\"", "--spring.main.allow-bean-definition-overriding=true", "\"", "\"", "--spring.main.web-application-type=none", "\"", "ExampleConfig", ".", "class", "OverrideConfig", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 71, "ast_depth": 13, "n_identifiers": 6, "vocab_size": 25, "n_whitespaces": 20, "n_words": 28, "nloc": 6, "token_counts": 48}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1099-1106", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "circularReferencesAreDisabledByDefault", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#circularReferencesAreDisabledByDefault", "start_line": 1099, "end_line": 1106, "signature": "circularReferencesAreDisabledByDefault()", "original_code": "@Test\n\tvoid circularReferencesAreDisabledByDefault() {\n\t\tassertThatExceptionOfType(UnsatisfiedDependencyException.class)\n\t\t\t.isThrownBy(\n\t\t\t\t\t() -> new SpringApplication(ExampleProducerConfiguration.class, ExampleConsumerConfiguration.class)\n\t\t\t\t\t\t.run(\"--spring.main.web-application-type=none\"))\n\t\t\t.withRootCauseInstanceOf(BeanCurrentlyInCreationException.class);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "circularReferencesAreDisabledByDefault", "(", ")", "{", "}", "@", "Test", ";", ".", "withRootCauseInstanceOf", ".", "isThrownBy", "(", ")", "assertThatExceptionOfType", "(", ")", "BeanCurrentlyInCreationException", ".", "class", "(", ")", "->", "UnsatisfiedDependencyException", ".", "class", "(", ")", ".", "run", "new", "SpringApplication", "(", ")", "(", ",", ")", "\"", "--spring.main.web-application-type=none", "\"", "ExampleProducerConfiguration", ".", "class", "ExampleConsumerConfiguration", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 71, "ast_depth": 13, "n_identifiers": 6, "vocab_size": 25, "n_whitespaces": 34, "n_words": 23, "nloc": 8, "token_counts": 47}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1108-1113", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "circularReferencesCanBeEnabled", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#circularReferencesCanBeEnabled", "start_line": 1108, "end_line": 1113, "signature": "circularReferencesCanBeEnabled()", "original_code": "@Test\n\tvoid circularReferencesCanBeEnabled() {\n\t\tassertThatNoException().isThrownBy(\n\t\t\t\t() -> new SpringApplication(ExampleProducerConfiguration.class, ExampleConsumerConfiguration.class)\n\t\t\t\t\t.run(\"--spring.main.web-application-type=none\", \"--spring.main.allow-circular-references=true\"));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "circularReferencesCanBeEnabled", "(", ")", "{", "}", "@", "Test", ";", ".", "isThrownBy", "assertThatNoException", "(", ")", "(", ")", "->", "(", ")", ".", "run", "new", "SpringApplication", "(", ",", ")", "(", ",", ")", "\"", "--spring.main.web-application-type=none", "\"", "\"", "--spring.main.allow-circular-references=true", "\"", "ExampleProducerConfiguration", ".", "class", "ExampleConsumerConfiguration", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 62, "ast_depth": 12, "n_identifiers": 5, "vocab_size": 23, "n_whitespaces": 25, "n_words": 24, "nloc": 6, "token_counts": 41}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1115-1122", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "relaxedBindingShouldWorkBeforeEnvironmentIsPrepared", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#relaxedBindingShouldWorkBeforeEnvironmentIsPrepared", "start_line": 1115, "end_line": 1122, "signature": "relaxedBindingShouldWorkBeforeEnvironmentIsPrepared()", "original_code": "@Test\n\t@WithResource(name = \"custom-config/application.yml\", content = \"hello: world\")\n\tvoid relaxedBindingShouldWorkBeforeEnvironmentIsPrepared() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tthis.context = application.run(\"--spring.config.additionalLocation=classpath:custom-config/\");\n\t\tassertThat(this.context.getEnvironment().getProperty(\"hello\")).isEqualTo(\"world\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "relaxedBindingShouldWorkBeforeEnvironmentIsPrepared", "(", ")", "{", "}", "@", "Test", "@", "WithResource", "SpringApplication", ";", ";", ";", ";", "(", ",", ")", "application", "=", "application", ".", "setWebApplicationType", "=", ".", "isEqualTo", "name", "=", "content", "=", "new", "SpringApplication", "(", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "\"", "custom-config/application.yml", "\"", "\"", "hello: world", "\"", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "\"", "world", "\"", "ExampleConfig", ".", "class", "\"", "--spring.config.additionalLocation=classpath:custom-config/", "\"", ".", "getProperty", ".", "getEnvironment", "(", ")", "this", ".", "context", "(", ")", "\"", "hello", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 120, "ast_depth": 11, "n_identifiers": 15, "vocab_size": 36, "n_whitespaces": 32, "n_words": 40, "nloc": 8, "token_counts": 81}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1124-1128", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "lazyInitializationIsDisabledByDefault", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#lazyInitializationIsDisabledByDefault", "start_line": 1124, "end_line": 1128, "signature": "lazyInitializationIsDisabledByDefault()", "original_code": "@Test\n\tvoid lazyInitializationIsDisabledByDefault() {\n\t\tassertThat(new SpringApplication(LazyInitializationConfig.class).run(\"--spring.main.web-application-type=none\")\n\t\t\t.getBean(AtomicInteger.class)).hasValue(1);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "lazyInitializationIsDisabledByDefault", "(", ")", "{", "}", "@", "Test", ";", ".", "hasValue", "assertThat", "(", "1", ")", "(", ")", ".", "getBean", ".", "run", "(", ")", "new", "SpringApplication", "(", ")", "AtomicInteger", ".", "class", "(", ")", "\"", "--spring.main.web-application-type=none", "\"", "LazyInitializationConfig", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 58, "ast_depth": 13, "n_identifiers": 6, "vocab_size": 22, "n_whitespaces": 14, "n_words": 20, "nloc": 5, "token_counts": 38}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1130-1135", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "lazyInitializationCanBeEnabled", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#lazyInitializationCanBeEnabled", "start_line": 1130, "end_line": 1135, "signature": "lazyInitializationCanBeEnabled()", "original_code": "@Test\n\tvoid lazyInitializationCanBeEnabled() {\n\t\tassertThat(new SpringApplication(LazyInitializationConfig.class)\n\t\t\t.run(\"--spring.main.web-application-type=none\", \"--spring.main.lazy-initialization=true\")\n\t\t\t.getBean(AtomicInteger.class)).hasValue(0);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "lazyInitializationCanBeEnabled", "(", ")", "{", "}", "@", "Test", ";", ".", "hasValue", "assertThat", "(", "0", ")", "(", ")", ".", "getBean", ".", "run", "(", ")", "new", "SpringApplication", "(", ",", ")", "AtomicInteger", ".", "class", "(", ")", "\"", "--spring.main.web-application-type=none", "\"", "\"", "--spring.main.lazy-initialization=true", "\"", "LazyInitializationConfig", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 63, "ast_depth": 13, "n_identifiers": 6, "vocab_size": 24, "n_whitespaces": 19, "n_words": 25, "nloc": 6, "token_counts": 42}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1137-1142", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "lazyInitializationIgnoresBeansThatAreExplicitlyNotLazy", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#lazyInitializationIgnoresBeansThatAreExplicitlyNotLazy", "start_line": 1137, "end_line": 1142, "signature": "lazyInitializationIgnoresBeansThatAreExplicitlyNotLazy()", "original_code": "@Test\n\tvoid lazyInitializationIgnoresBeansThatAreExplicitlyNotLazy() {\n\t\tassertThat(new SpringApplication(NotLazyInitializationConfig.class)\n\t\t\t.run(\"--spring.main.web-application-type=none\", \"--spring.main.lazy-initialization=true\")\n\t\t\t.getBean(AtomicInteger.class)).hasValue(1);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "lazyInitializationIgnoresBeansThatAreExplicitlyNotLazy", "(", ")", "{", "}", "@", "Test", ";", ".", "hasValue", "assertThat", "(", "1", ")", "(", ")", ".", "getBean", ".", "run", "(", ")", "new", "SpringApplication", "(", ",", ")", "AtomicInteger", ".", "class", "(", ")", "\"", "--spring.main.web-application-type=none", "\"", "\"", "--spring.main.lazy-initialization=true", "\"", "NotLazyInitializationConfig", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 63, "ast_depth": 13, "n_identifiers": 6, "vocab_size": 24, "n_whitespaces": 19, "n_words": 25, "nloc": 6, "token_counts": 42}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1144-1149", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "lazyInitializationIgnoresLazyInitializationExcludeFilteredBeans", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#lazyInitializationIgnoresLazyInitializationExcludeFilteredBeans", "start_line": 1144, "end_line": 1149, "signature": "lazyInitializationIgnoresLazyInitializationExcludeFilteredBeans()", "original_code": "@Test\n\tvoid lazyInitializationIgnoresLazyInitializationExcludeFilteredBeans() {\n\t\tassertThat(new SpringApplication(LazyInitializationExcludeFilterConfig.class)\n\t\t\t.run(\"--spring.main.web-application-type=none\", \"--spring.main.lazy-initialization=true\")\n\t\t\t.getBean(AtomicInteger.class)).hasValue(1);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "lazyInitializationIgnoresLazyInitializationExcludeFilteredBeans", "(", ")", "{", "}", "@", "Test", ";", ".", "hasValue", "assertThat", "(", "1", ")", "(", ")", ".", "getBean", ".", "run", "(", ")", "new", "SpringApplication", "(", ",", ")", "AtomicInteger", ".", "class", "(", ")", "\"", "--spring.main.web-application-type=none", "\"", "\"", "--spring.main.lazy-initialization=true", "\"", "LazyInitializationExcludeFilterConfig", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 63, "ast_depth": 13, "n_identifiers": 6, "vocab_size": 24, "n_whitespaces": 19, "n_words": 25, "nloc": 6, "token_counts": 42}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1151-1178", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "customApplicationStartupPublishStartupSteps", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#customApplicationStartupPublishStartupSteps", "start_line": 1151, "end_line": 1178, "signature": "customApplicationStartupPublishStartupSteps()", "original_code": "@Test\n\tvoid customApplicationStartupPublishStartupSteps() {\n\t\tApplicationStartup applicationStartup = mock(ApplicationStartup.class);\n\t\tStartupStep startupStep = mock(StartupStep.class);\n\t\tgiven(applicationStartup.start(anyString())).willReturn(startupStep);\n\t\tgiven(startupStep.tag(anyString(), anyString())).willReturn(startupStep);\n\t\tgiven(startupStep.tag(anyString(), ArgumentMatchers.<Supplier<String>>any())).willReturn(startupStep);\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tapplication.setApplicationStartup(applicationStartup);\n\t\tthis.context = application.run();\n\t\tassertThat(this.context.getBean(ApplicationStartup.class)).isEqualTo(applicationStartup);\n\t\tthen(applicationStartup).should().start(\"spring.boot.application.starting\");\n\t\tthen(applicationStartup).should().start(\"spring.boot.application.environment-prepared\");\n\t\tthen(applicationStartup).should().start(\"spring.boot.application.context-prepared\");\n\t\tthen(applicationStartup).should().start(\"spring.boot.application.context-loaded\");\n\t\tthen(applicationStartup).should().start(\"spring.boot.application.started\");\n\t\tthen(applicationStartup).should().start(\"spring.boot.application.ready\");\n\t\tlong startCount = mockingDetails(applicationStartup).getInvocations()\n\t\t\t.stream()\n\t\t\t.filter((invocation) -> invocation.getMethod().toString().contains(\"start(\"))\n\t\t\t.count();\n\t\tlong endCount = mockingDetails(startupStep).getInvocations()\n\t\t\t.stream()\n\t\t\t.filter((invocation) -> invocation.getMethod().toString().contains(\"end(\"))\n\t\t\t.count();\n\t\tassertThat(startCount).isEqualTo(endCount);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "customApplicationStartupPublishStartupSteps", "(", ")", "{", "}", "@", "Test", "ApplicationStartup", ";", "StartupStep", ";", ";", ";", ";", "SpringApplication", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "applicationStartup", "=", "startupStep", "=", ".", "willReturn", ".", "willReturn", ".", "willReturn", "application", "=", "application", ".", "setWebApplicationType", "application", ".", "setApplicationStartup", "=", ".", "isEqualTo", ".", "start", ".", "start", ".", "start", ".", "start", ".", "start", ".", "start", "long", "startCount", "=", "long", "endCount", "=", ".", "isEqualTo", "mock", "mock", "given", "(", "startupStep", ")", "given", "(", "startupStep", ")", "given", "(", "startupStep", ")", "new", "SpringApplication", "(", ")", "(", "applicationStartup", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", "applicationStartup", ")", ".", "should", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", ".", "count", ".", "count", "assertThat", "(", "endCount", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "then", "(", ")", "\"", "spring.boot.application.starting", "\"", "then", "(", ")", "\"", "spring.boot.application.environment-prepared", "\"", "then", "(", ")", "\"", "spring.boot.application.context-prepared", "\"", "then", "(", ")", "\"", "spring.boot.application.context-loaded", "\"", "then", "(", ")", "\"", "spring.boot.application.started", "\"", "then", "(", ")", "\"", "spring.boot.application.ready", "\"", ".", "filter", "(", ")", ".", "filter", "(", ")", "(", "startCount", ")", "ApplicationStartup", ".", "class", "StartupStep", ".", "class", "applicationStartup", ".", "start", "startupStep", ".", "tag", "startupStep", ".", "tag", "ExampleConfig", ".", "class", ".", "getBean", "(", "applicationStartup", ")", "(", "applicationStartup", ")", "(", "applicationStartup", ")", "(", "applicationStartup", ")", "(", "applicationStartup", ")", "(", "applicationStartup", ")", ".", "stream", "(", ")", ".", "stream", "(", ")", "(", ")", "(", ",", ")", "(", ",", ")", "this", ".", "context", "(", ")", ".", "getInvocations", "(", ")", "->", ".", "getInvocations", "(", ")", "->", "anyString", "anyString", "anyString", "anyString", "ArgumentMatchers", ".", "any", "ApplicationStartup", ".", "class", "mockingDetails", "(", ")", "(", "invocation", ")", ".", "contains", "mockingDetails", "(", ")", "(", "invocation", ")", ".", "contains", "(", ")", "(", ")", "(", ")", "(", ")", "<", ">", "(", ")", "(", "applicationStartup", ")", ".", "toString", "(", ")", "(", "startupStep", ")", ".", "toString", "(", ")", "Supplier", "invocation", ".", "getMethod", "(", ")", "\"", "start(", "\"", "invocation", ".", "getMethod", "(", ")", "\"", "end(", "\"", "<", "String", ">", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 518, "ast_depth": 14, "n_identifiers": 35, "vocab_size": 67, "n_whitespaces": 111, "n_words": 144, "nloc": 28, "token_counts": 345}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1180-1203", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "customApplicationStartupPublishStartupStepsWithFailure", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#customApplicationStartupPublishStartupStepsWithFailure", "start_line": 1180, "end_line": 1203, "signature": "customApplicationStartupPublishStartupStepsWithFailure()", "original_code": "@Test\n\tvoid customApplicationStartupPublishStartupStepsWithFailure() {\n\t\tApplicationStartup applicationStartup = mock(ApplicationStartup.class);\n\t\tStartupStep startupStep = mock(StartupStep.class);\n\t\tgiven(applicationStartup.start(anyString())).willReturn(startupStep);\n\t\tgiven(startupStep.tag(anyString(), anyString())).willReturn(startupStep);\n\t\tgiven(startupStep.tag(anyString(), ArgumentMatchers.<Supplier<String>>any())).willReturn(startupStep);\n\t\tSpringApplication application = new SpringApplication(BrokenPostConstructConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tapplication.setApplicationStartup(applicationStartup);\n\t\tassertThatExceptionOfType(BeanCreationException.class).isThrownBy(application::run);\n\t\tthen(applicationStartup).should().start(\"spring.boot.application.starting\");\n\t\tthen(applicationStartup).should().start(\"spring.boot.application.environment-prepared\");\n\t\tthen(applicationStartup).should().start(\"spring.boot.application.failed\");\n\t\tlong startCount = mockingDetails(applicationStartup).getInvocations()\n\t\t\t.stream()\n\t\t\t.filter((invocation) -> invocation.getMethod().toString().contains(\"start(\"))\n\t\t\t.count();\n\t\tlong endCount = mockingDetails(startupStep).getInvocations()\n\t\t\t.stream()\n\t\t\t.filter((invocation) -> invocation.getMethod().toString().contains(\"end(\"))\n\t\t\t.count();\n\t\tassertThat(startCount).isEqualTo(endCount);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "customApplicationStartupPublishStartupStepsWithFailure", "(", ")", "{", "}", "@", "Test", "ApplicationStartup", ";", "StartupStep", ";", ";", ";", ";", "SpringApplication", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "applicationStartup", "=", "startupStep", "=", ".", "willReturn", ".", "willReturn", ".", "willReturn", "application", "=", "application", ".", "setWebApplicationType", "application", ".", "setApplicationStartup", ".", "isThrownBy", ".", "start", ".", "start", ".", "start", "long", "startCount", "=", "long", "endCount", "=", ".", "isEqualTo", "mock", "mock", "given", "(", "startupStep", ")", "given", "(", "startupStep", ")", "given", "(", "startupStep", ")", "new", "SpringApplication", "(", ")", "(", "applicationStartup", ")", "assertThatExceptionOfType", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", ".", "count", ".", "count", "assertThat", "(", "endCount", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "application", "::", "run", "then", "(", ")", "\"", "spring.boot.application.starting", "\"", "then", "(", ")", "\"", "spring.boot.application.environment-prepared", "\"", "then", "(", ")", "\"", "spring.boot.application.failed", "\"", ".", "filter", "(", ")", ".", "filter", "(", ")", "(", "startCount", ")", "ApplicationStartup", ".", "class", "StartupStep", ".", "class", "applicationStartup", ".", "start", "startupStep", ".", "tag", "startupStep", ".", "tag", "BrokenPostConstructConfig", ".", "class", "BeanCreationException", ".", "class", "(", "applicationStartup", ")", "(", "applicationStartup", ")", "(", "applicationStartup", ")", ".", "stream", "(", ")", ".", "stream", "(", ")", "(", ")", "(", ",", ")", "(", ",", ")", ".", "getInvocations", "(", ")", "->", ".", "getInvocations", "(", ")", "->", "anyString", "anyString", "anyString", "anyString", "ArgumentMatchers", ".", "any", "mockingDetails", "(", ")", "(", "invocation", ")", ".", "contains", "mockingDetails", "(", ")", "(", "invocation", ")", ".", "contains", "(", ")", "(", ")", "(", ")", "(", ")", "<", ">", "(", ")", "(", "applicationStartup", ")", ".", "toString", "(", ")", "(", "startupStep", ")", ".", "toString", "(", ")", "Supplier", "invocation", ".", "getMethod", "(", ")", "\"", "start(", "\"", "invocation", ".", "getMethod", "(", ")", "\"", "end(", "\"", "<", "String", ">", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 424, "ast_depth": 14, "n_identifiers": 35, "vocab_size": 65, "n_whitespaces": 97, "n_words": 112, "nloc": 24, "token_counts": 282}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1205-1219", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "addBootstrapRegistryInitializer", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#addBootstrapRegistryInitializer", "start_line": 1205, "end_line": 1219, "signature": "addBootstrapRegistryInitializer()", "original_code": "@Test\n\tvoid addBootstrapRegistryInitializer() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tapplication.addBootstrapRegistryInitializer(\n\t\t\t\t(bootstrapContext) -> bootstrapContext.register(String.class, InstanceSupplier.of(\"boot\")));\n\t\tTestApplicationListener listener = new TestApplicationListener();\n\t\tapplication.addListeners(listener);\n\t\tapplication.run();\n\t\tApplicationStartingEvent startingEvent = listener.getEvent(ApplicationStartingEvent.class);\n\t\tassertThat(startingEvent.getBootstrapContext().get(String.class)).isEqualTo(\"boot\");\n\t\tApplicationEnvironmentPreparedEvent environmentPreparedEvent = listener\n\t\t\t.getEvent(ApplicationEnvironmentPreparedEvent.class);\n\t\tassertThat(environmentPreparedEvent.getBootstrapContext().get(String.class)).isEqualTo(\"boot\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "addBootstrapRegistryInitializer", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", "TestApplicationListener", ";", ";", ";", "ApplicationStartingEvent", ";", ";", "ApplicationEnvironmentPreparedEvent", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "application", ".", "addBootstrapRegistryInitializer", "listener", "=", "application", ".", "addListeners", "application", ".", "run", "startingEvent", "=", ".", "isEqualTo", "environmentPreparedEvent", "=", ".", "isEqualTo", "new", "SpringApplication", "(", ")", "(", ")", "new", "TestApplicationListener", "(", "listener", ")", "(", ")", "listener", ".", "getEvent", "assertThat", "(", ")", "listener", ".", "getEvent", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "->", "(", ")", "(", ")", "(", ")", "\"", "boot", "\"", "(", ")", "(", ")", "\"", "boot", "\"", "ExampleConfig", ".", "class", "(", "bootstrapContext", ")", "bootstrapContext", ".", "register", "ApplicationStartingEvent", ".", "class", ".", "get", "ApplicationEnvironmentPreparedEvent", ".", "class", ".", "get", "(", ",", ")", "startingEvent", ".", "getBootstrapContext", "(", ")", "environmentPreparedEvent", ".", "getBootstrapContext", "(", ")", "String", ".", "class", "InstanceSupplier", ".", "of", "(", ")", "String", ".", "class", "(", ")", "String", ".", "class", "(", ")", "\"", "boot", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 214, "ast_depth": 13, "n_identifiers": 20, "vocab_size": 41, "n_whitespaces": 62, "n_words": 60, "nloc": 15, "token_counts": 146}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1221-1233", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "addBootstrapRegistryInitializerCanRegisterBeans", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#addBootstrapRegistryInitializerCanRegisterBeans", "start_line": 1221, "end_line": 1233, "signature": "addBootstrapRegistryInitializerCanRegisterBeans()", "original_code": "@Test\n\tvoid addBootstrapRegistryInitializerCanRegisterBeans() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tapplication.addBootstrapRegistryInitializer((bootstrapContext) -> {\n\t\t\tbootstrapContext.register(String.class, InstanceSupplier.of(\"boot\"));\n\t\t\tbootstrapContext.addCloseListener((event) -> event.getApplicationContext()\n\t\t\t\t.getBeanFactory()\n\t\t\t\t.registerSingleton(\"test\", event.getBootstrapContext().get(String.class)));\n\t\t});\n\t\tConfigurableApplicationContext applicationContext = application.run();\n\t\tassertThat(applicationContext.getBean(\"test\")).isEqualTo(\"boot\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "addBootstrapRegistryInitializerCanRegisterBeans", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", "ConfigurableApplicationContext", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "application", ".", "addBootstrapRegistryInitializer", "applicationContext", "=", ".", "isEqualTo", "new", "SpringApplication", "(", ")", "(", ")", "application", ".", "run", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "->", "(", ")", "(", ")", "\"", "boot", "\"", "ExampleConfig", ".", "class", "(", "bootstrapContext", ")", "{", "}", "applicationContext", ".", "getBean", ";", ";", "(", ")", "bootstrapContext", ".", "register", "bootstrapContext", ".", "addCloseListener", "\"", "test", "\"", "(", ",", ")", "(", ")", "String", ".", "class", "InstanceSupplier", ".", "of", "->", "(", ")", "(", "event", ")", ".", "registerSingleton", "\"", "boot", "\"", ".", "getBeanFactory", "(", ",", ")", "event", ".", "getApplicationContext", "(", ")", "\"", "test", "\"", ".", "get", "(", ")", "event", ".", "getBootstrapContext", "(", ")", "(", ")", "String", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 183, "ast_depth": 18, "n_identifiers": 23, "vocab_size": 43, "n_whitespaces": 55, "n_words": 46, "nloc": 13, "token_counts": 125}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1235-1239", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "settingEnvironmentPrefixViaPropertiesThrowsException", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#settingEnvironmentPrefixViaPropertiesThrowsException", "start_line": 1235, "end_line": 1239, "signature": "settingEnvironmentPrefixViaPropertiesThrowsException()", "original_code": "@Test\n\tvoid settingEnvironmentPrefixViaPropertiesThrowsException() {\n\t\tassertThatIllegalStateException()\n\t\t\t.isThrownBy(() -> new SpringApplication().run(\"--spring.main.environment-prefix=my\"));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "settingEnvironmentPrefixViaPropertiesThrowsException", "(", ")", "{", "}", "@", "Test", ";", ".", "isThrownBy", "assertThatIllegalStateException", "(", ")", "(", ")", "->", "(", ")", ".", "run", "new", "SpringApplication", "(", ")", "(", ")", "\"", "--spring.main.environment-prefix=my", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 48, "ast_depth": 11, "n_identifiers": 5, "vocab_size": 18, "n_whitespaces": 16, "n_words": 13, "nloc": 5, "token_counts": 30}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1241-1248", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "bindsEnvironmentPrefixToSpringApplication", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#bindsEnvironmentPrefixToSpringApplication", "start_line": 1241, "end_line": 1248, "signature": "bindsEnvironmentPrefixToSpringApplication()", "original_code": "@Test\n\tvoid bindsEnvironmentPrefixToSpringApplication() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setEnvironmentPrefix(\"my\");\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tthis.context = application.run();\n\t\tassertThat(application.getEnvironmentPrefix()).isEqualTo(\"my\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "bindsEnvironmentPrefixToSpringApplication", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setEnvironmentPrefix", "application", ".", "setWebApplicationType", "=", ".", "isEqualTo", "new", "SpringApplication", "(", ")", "(", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "(", ")", "\"", "my", "\"", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "\"", "my", "\"", "ExampleConfig", ".", "class", "application", ".", "getEnvironmentPrefix", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 95, "ast_depth": 10, "n_identifiers": 12, "vocab_size": 28, "n_whitespaces": 27, "n_words": 25, "nloc": 8, "token_counts": 63}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1250-1260", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "movesConfigClassPropertySourcesToEnd", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#movesConfigClassPropertySourcesToEnd", "start_line": 1250, "end_line": 1260, "signature": "movesConfigClassPropertySourcesToEnd()", "original_code": "@Test\n\t@WithResource(name = \"spring-application-config-property-source.properties\",\n\t\t\tcontent = \"test.name=spring-application-config-property-source\")\n\tvoid movesConfigClassPropertySourcesToEnd() {\n\t\tSpringApplication application = new SpringApplication(PropertySourceConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tapplication.setDefaultProperties(Collections.singletonMap(\"test.name\", \"test\"));\n\t\tthis.context = application.run();\n\t\tassertThat(this.context.getEnvironment().getProperty(\"test.name\"))\n\t\t\t.isEqualTo(\"spring-application-config-property-source\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "movesConfigClassPropertySourcesToEnd", "(", ")", "{", "}", "@", "Test", "@", "WithResource", "SpringApplication", ";", ";", ";", ";", ";", "(", ",", ")", "application", "=", "application", ".", "setWebApplicationType", "application", ".", "setDefaultProperties", "=", ".", "isEqualTo", "name", "=", "content", "=", "new", "SpringApplication", "(", ")", "(", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "\"", "spring-application-config-property-source.properties", "\"", "\"", "test.name=spring-application-config-property-source", "\"", "(", ")", "WebApplicationType", ".", "NONE", "Collections", ".", "singletonMap", "(", ")", "(", ")", "\"", "spring-application-config-property-source", "\"", "PropertySourceConfig", ".", "class", "(", ",", ")", ".", "getProperty", "\"", "test.name", "\"", "\"", "test", "\"", ".", "getEnvironment", "(", ")", "this", ".", "context", "(", ")", "\"", "test.name", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 141, "ast_depth": 11, "n_identifiers": 18, "vocab_size": 39, "n_whitespaces": 42, "n_words": 53, "nloc": 11, "token_counts": 96}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1262-1277", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "deregistersShutdownHookForFailedApplicationContext", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#deregistersShutdownHookForFailedApplicationContext", "start_line": 1262, "end_line": 1277, "signature": "deregistersShutdownHookForFailedApplicationContext()", "original_code": "@Test\n\tvoid deregistersShutdownHookForFailedApplicationContext() {\n\t\tSpringApplication application = new SpringApplication(BrokenPostConstructConfig.class);\n\t\tList<ApplicationEvent> events = new ArrayList<>();\n\t\tapplication.addListeners(events::add);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tassertThatExceptionOfType(BeanCreationException.class).isThrownBy(application::run);\n\t\tassertThat(events).hasAtLeastOneElementOfType(ApplicationFailedEvent.class);\n\t\tApplicationFailedEvent failure = events.stream()\n\t\t\t.filter((event) -> event instanceof ApplicationFailedEvent)\n\t\t\t.map(ApplicationFailedEvent.class::cast)\n\t\t\t.findFirst()\n\t\t\t.get();\n\t\tassertThat(SpringApplicationShutdownHookInstance.get())\n\t\t\t.didNotRegisterApplicationContext(failure.getApplicationContext());\n\t}", "doc_comment": ""}, "code_tokens": ["void", "deregistersShutdownHookForFailedApplicationContext", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", ";", ";", "ApplicationFailedEvent", ";", ";", "application", "=", "List", "events", "=", "application", ".", "addListeners", "application", ".", "setWebApplicationType", ".", "isThrownBy", ".", "hasAtLeastOneElementOfType", "failure", "=", ".", "didNotRegisterApplicationContext", "new", "SpringApplication", "<", "ApplicationEvent", ">", "new", "(", ")", "(", ")", "assertThatExceptionOfType", "(", ")", "assertThat", "(", ")", ".", "get", "assertThat", "(", ")", "(", ")", "ArrayList", "(", ")", "events", "::", "add", "WebApplicationType", ".", "NONE", "(", ")", "application", "::", "run", "(", "events", ")", "ApplicationFailedEvent", ".", "class", ".", "findFirst", "(", ")", "(", ")", "failure", ".", "getApplicationContext", "BrokenPostConstructConfig", ".", "class", "<", ">", "BeanCreationException", ".", "class", ".", "map", "(", ")", "SpringApplicationShutdownHookInstance", ".", "get", "(", ")", ".", "filter", "(", ")", "(", ")", "events", ".", "stream", "(", ")", "::", "cast", "(", ")", "->", "ApplicationFailedEvent", ".", "class", "(", "event", ")", "event", "instanceof", "ApplicationFailedEvent"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 197, "ast_depth": 13, "n_identifiers": 25, "vocab_size": 48, "n_whitespaces": 65, "n_words": 54, "nloc": 16, "token_counts": 131}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1279-1290", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "withRunnableHookRunsWithHook", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#withRunnableHookRunsWithHook", "start_line": 1279, "end_line": 1290, "signature": "withRunnableHookRunsWithHook()", "original_code": "@Test\n\tvoid withRunnableHookRunsWithHook() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tSpringApplicationRunListener runListener = mock(SpringApplicationRunListener.class);\n\t\tSpringApplicationHook hook = (springApplication) -> runListener;\n\t\tSpringApplication.withHook(hook, () -> this.context = application.run());\n\t\tthen(runListener).should().starting(any());\n\t\tthen(runListener).should().contextPrepared(this.context);\n\t\tthen(runListener).should().ready(eq(this.context), any());\n\t\tassertThat(this.context.isRunning()).isTrue();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "withRunnableHookRunsWithHook", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", "SpringApplicationRunListener", ";", "SpringApplicationHook", ";", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "runListener", "=", "hook", "=", "SpringApplication", ".", "withHook", ".", "starting", ".", "contextPrepared", ".", "ready", ".", "isTrue", "new", "SpringApplication", "(", ")", "mock", "->", "runListener", "(", "hook", ",", ")", ".", "should", "(", ")", ".", "should", "(", ")", ".", "should", "(", ",", ")", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", "springApplication", ")", "->", "then", "(", ")", "any", "then", "(", ")", "this", ".", "context", "then", "(", ")", "eq", "any", "(", ")", "ExampleConfig", ".", "class", "SpringApplicationRunListener", ".", "class", "(", ")", "=", "(", "runListener", ")", "(", ")", "(", "runListener", ")", "(", "runListener", ")", "(", ")", "(", ")", ".", "isRunning", "this", ".", "context", "application", ".", "run", "this", ".", "context", "this", ".", "context", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 207, "ast_depth": 11, "n_identifiers": 24, "vocab_size": 41, "n_whitespaces": 51, "n_words": 53, "nloc": 12, "token_counts": 137}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1292-1303", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "withCallableHookRunsWithHook", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#withCallableHookRunsWithHook", "start_line": 1292, "end_line": 1303, "signature": "withCallableHookRunsWithHook()", "original_code": "@Test\n\tvoid withCallableHookRunsWithHook() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tSpringApplicationRunListener runListener = mock(SpringApplicationRunListener.class);\n\t\tSpringApplicationHook hook = (springApplication) -> runListener;\n\t\tthis.context = SpringApplication.withHook(hook, () -> application.run());\n\t\tthen(runListener).should().starting(any());\n\t\tthen(runListener).should().contextPrepared(this.context);\n\t\tthen(runListener).should().ready(eq(this.context), any());\n\t\tassertThat(this.context.isRunning()).isTrue();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "withCallableHookRunsWithHook", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", "SpringApplicationRunListener", ";", "SpringApplicationHook", ";", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "runListener", "=", "hook", "=", "=", ".", "starting", ".", "contextPrepared", ".", "ready", ".", "isTrue", "new", "SpringApplication", "(", ")", "mock", "->", "runListener", "this", ".", "context", "SpringApplication", ".", "withHook", ".", "should", "(", ")", ".", "should", "(", ")", ".", "should", "(", ",", ")", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", "springApplication", ")", "(", "hook", ",", ")", "then", "(", ")", "any", "then", "(", ")", "this", ".", "context", "then", "(", ")", "eq", "any", "(", ")", "ExampleConfig", ".", "class", "SpringApplicationRunListener", ".", "class", "->", "(", "runListener", ")", "(", ")", "(", "runListener", ")", "(", "runListener", ")", "(", ")", "(", ")", ".", "isRunning", "(", ")", "application", ".", "run", "this", ".", "context", "this", ".", "context", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 207, "ast_depth": 11, "n_identifiers": 24, "vocab_size": 41, "n_whitespaces": 51, "n_words": 53, "nloc": 12, "token_counts": 137}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1305-1333", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "withHookWhenHookThrowsAbandonedRunExceptionAbandonsRun", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#withHookWhenHookThrowsAbandonedRunExceptionAbandonsRun", "start_line": 1305, "end_line": 1333, "signature": "withHookWhenHookThrowsAbandonedRunExceptionAbandonsRun()", "original_code": "@Test\n\t@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n\tvoid withHookWhenHookThrowsAbandonedRunExceptionAbandonsRun() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tApplicationListener listener = mock(ApplicationListener.class);\n\t\tapplication.addListeners(listener);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tSpringApplicationRunListener runListener = spy(new SpringApplicationRunListener() {\n\n\t\t\t@Override\n\t\t\tpublic void contextLoaded(ConfigurableApplicationContext context) {\n\t\t\t\tthrow new SpringApplication.AbandonedRunException(context);\n\t\t\t}\n\n\t\t});\n\t\tSpringApplicationHook hook = (springApplication) -> runListener;\n\t\tassertThatExceptionOfType(SpringApplication.AbandonedRunException.class)\n\t\t\t.isThrownBy(() -> SpringApplication.withHook(hook, () -> application.run()))\n\t\t\t.satisfies((ex) -> assertThat(ex.getApplicationContext().isRunning()).isFalse());\n\t\tthen(runListener).should().starting(any());\n\t\tthen(runListener).should().contextPrepared(any());\n\t\tthen(runListener).should(never()).ready(any(), any());\n\t\tthen(runListener).should(never()).failed(any(), any());\n\t\tthen(listener).should().onApplicationEvent(any(ApplicationStartingEvent.class));\n\t\tthen(listener).should().onApplicationEvent(any(ApplicationEnvironmentPreparedEvent.class));\n\t\tthen(listener).should().onApplicationEvent(any(ApplicationPreparedEvent.class));\n\t\tthen(listener).should(never()).onApplicationEvent(any(ApplicationReadyEvent.class));\n\t\tthen(listener).should(never()).onApplicationEvent(any(ApplicationFailedEvent.class));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "withHookWhenHookThrowsAbandonedRunExceptionAbandonsRun", "(", ")", "{", "}", "@", "Test", "@", "SuppressWarnings", "SpringApplication", ";", "ApplicationListener", ";", ";", ";", "SpringApplicationRunListener", ";", "SpringApplicationHook", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "(", ")", "application", "=", "listener", "=", "application", ".", "addListeners", "application", ".", "setWebApplicationType", "runListener", "=", "hook", "=", ".", "satisfies", ".", "starting", ".", "contextPrepared", ".", "ready", ".", "failed", ".", "onApplicationEvent", ".", "onApplicationEvent", ".", "onApplicationEvent", ".", "onApplicationEvent", ".", "onApplicationEvent", "{", ",", "}", "new", "SpringApplication", "mock", "(", "listener", ")", "(", ")", "spy", "->", "runListener", ".", "isThrownBy", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", ".", "should", "(", ",", ")", ".", "should", "(", ",", ")", ".", "should", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", ".", "should", "(", ")", "\"", "rawtypes", "\"", "\"", "unchecked", "\"", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", "springApplication", ")", "assertThatExceptionOfType", "(", ")", "->", "then", "(", ")", "any", "then", "(", ")", "any", "then", "(", ")", "any", "any", "then", "(", ")", "any", "any", "then", "(", ")", "any", "then", "(", ")", "any", "then", "(", ")", "any", "then", "(", ")", "any", "then", "(", ")", "any", "ExampleConfig", ".", "class", "ApplicationListener", ".", "class", "new", "SpringApplicationRunListener", "(", ")", "->", "(", "ex", ")", ".", "isFalse", "(", "runListener", ")", "(", ")", "(", "runListener", ")", "(", ")", "(", "runListener", ")", "never", "(", ")", "(", ")", "(", "runListener", ")", "never", "(", ")", "(", ")", "(", "listener", ")", "(", ")", "(", "listener", ")", "(", ")", "(", "listener", ")", "(", ")", "(", "listener", ")", "never", "(", ")", "(", "listener", ")", "never", "(", ")", "(", ")", "{", "}", ".", "class", "(", ")", "SpringApplication", ".", "withHook", "assertThat", "(", ")", "(", ")", "(", ")", "ApplicationStartingEvent", ".", "class", "ApplicationEnvironmentPreparedEvent", ".", "class", "ApplicationPreparedEvent", ".", "class", "(", ")", "ApplicationReadyEvent", ".", "class", "(", ")", "ApplicationFailedEvent", ".", "class", "void", "contextLoaded", "SpringApplication", ".", "AbandonedRunException", "(", "hook", ",", ")", "(", ")", "public", "(", ")", "{", "}", "->", ".", "isRunning", "@", "Override", "ConfigurableApplicationContext", "context", "throw", ";", "(", ")", "application", ".", "run", "ex", ".", "getApplicationContext", "(", ")", "new", "(", ")", "(", ")", "SpringApplication", ".", "AbandonedRunException", "(", "context", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 508, "ast_depth": 15, "n_identifiers": 37, "vocab_size": 66, "n_whitespaces": 121, "n_words": 122, "nloc": 27, "token_counts": 334}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1314-1317", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "contextLoaded", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#contextLoaded", "start_line": 1314, "end_line": 1317, "signature": "contextLoaded(ConfigurableApplicationContext context)", "original_code": "@Override\n\t\t\tpublic void contextLoaded(ConfigurableApplicationContext context) {\n\t\t\t\tthrow new SpringApplication.AbandonedRunException(context);\n\t\t\t}", "doc_comment": ""}, "code_tokens": ["void", "contextLoaded", "public", "(", ")", "{", "}", "@", "Override", "ConfigurableApplicationContext", "context", "throw", ";", "new", "SpringApplication", ".", "AbandonedRunException", "(", "context", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 31, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 17, "n_whitespaces": 19, "n_words": 11, "nloc": 4, "token_counts": 20}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1335-1349", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "shouldUseAotInitializer", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#shouldUseAotInitializer", "start_line": 1335, "end_line": 1349, "signature": "shouldUseAotInitializer()", "original_code": "@Test\n\t// gh-32555\n\tvoid shouldUseAotInitializer() {\n\t\tSpringApplication application = new SpringApplication(ExampleAotProcessedMainClass.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tapplication.setMainApplicationClass(ExampleAotProcessedMainClass.class);\n\t\tSystem.setProperty(AotDetector.AOT_ENABLED, \"true\");\n\t\ttry {\n\t\t\tApplicationContext context = application.run();\n\t\t\tassertThat(context.getBean(\"test\")).isEqualTo(\"test\");\n\t\t}\n\t\tfinally {\n\t\t\tSystem.clearProperty(AotDetector.AOT_ENABLED);\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["// gh-32555", "void", "shouldUseAotInitializer", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", "try", "application", "=", "application", ".", "setWebApplicationType", "application", ".", "setMainApplicationClass", "System", ".", "setProperty", "{", "}", "finally", "new", "SpringApplication", "(", ")", "(", ")", "(", ",", ")", "ApplicationContext", ";", ";", "{", "}", "(", ")", "WebApplicationType", ".", "NONE", "ExampleAotProcessedMainClass", ".", "class", "AotDetector", ".", "AOT_ENABLED", "\"", "true", "\"", "context", "=", ".", "isEqualTo", ";", "ExampleAotProcessedMainClass", ".", "class", "application", ".", "run", "assertThat", "(", ")", "System", ".", "clearProperty", "(", ")", "(", ")", "\"", "test", "\"", "(", ")", "context", ".", "getBean", "AotDetector", ".", "AOT_ENABLED", "(", ")", "\"", "test", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 139, "ast_depth": 13, "n_identifiers": 17, "vocab_size": 38, "n_whitespaces": 55, "n_words": 40, "nloc": 15, "token_counts": 94}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1351-1364", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "shouldReportFriendlyErrorIfAotInitializerNotFound", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#shouldReportFriendlyErrorIfAotInitializerNotFound", "start_line": 1351, "end_line": 1364, "signature": "shouldReportFriendlyErrorIfAotInitializerNotFound()", "original_code": "@Test\n\tvoid shouldReportFriendlyErrorIfAotInitializerNotFound() {\n\t\tSpringApplication application = new SpringApplication(TestSpringApplication.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tapplication.setMainApplicationClass(TestSpringApplication.class);\n\t\tSystem.setProperty(AotDetector.AOT_ENABLED, \"true\");\n\t\ttry {\n\t\t\tassertThatExceptionOfType(AotInitializerNotFoundException.class).isThrownBy(application::run)\n\t\t\t\t.withMessageMatching(\"^.+AOT initializer .+ could not be found$\");\n\t\t}\n\t\tfinally {\n\t\t\tSystem.clearProperty(AotDetector.AOT_ENABLED);\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "shouldReportFriendlyErrorIfAotInitializerNotFound", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", "try", "application", "=", "application", ".", "setWebApplicationType", "application", ".", "setMainApplicationClass", "System", ".", "setProperty", "{", "}", "finally", "new", "SpringApplication", "(", ")", "(", ")", "(", ",", ")", ";", "{", "}", "(", ")", "WebApplicationType", ".", "NONE", "TestSpringApplication", ".", "class", "AotDetector", ".", "AOT_ENABLED", "\"", "true", "\"", ".", "withMessageMatching", ";", "TestSpringApplication", ".", "class", ".", "isThrownBy", "(", ")", "System", ".", "clearProperty", "assertThatExceptionOfType", "(", ")", "\"", "^.+AOT initializer .+ could not be found$", "\"", "(", ")", "(", ")", "application", "::", "run", "AotDetector", ".", "AOT_ENABLED", "AotInitializerNotFoundException", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 128, "ast_depth": 12, "n_identifiers": 16, "vocab_size": 37, "n_whitespaces": 56, "n_words": 41, "nloc": 14, "token_counts": 86}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1366-1375", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "fromRunsWithAdditionalSources", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#fromRunsWithAdditionalSources", "start_line": 1366, "end_line": 1375, "signature": "fromRunsWithAdditionalSources()", "original_code": "@Test\n\tvoid fromRunsWithAdditionalSources() {\n\t\tassertThat(ExampleAdditionalConfig.local.get()).isNull();\n\t\tthis.context = SpringApplication.from(ExampleFromMainMethod::main)\n\t\t\t.with(ExampleAdditionalConfig.class)\n\t\t\t.run()\n\t\t\t.getApplicationContext();\n\t\tassertThat(ExampleAdditionalConfig.local.get()).isNotNull();\n\t\tExampleAdditionalConfig.local.remove();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "fromRunsWithAdditionalSources", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ";", ".", "isNull", "=", ".", "isNotNull", ".", "remove", "assertThat", "(", ")", "this", ".", "context", ".", "getApplicationContext", "assertThat", "(", ")", "ExampleAdditionalConfig", ".", "local", "(", ")", "(", ")", ".", "run", "(", ")", "(", ")", ".", "get", ".", "with", "(", ")", ".", "get", "ExampleAdditionalConfig", ".", "local", "(", ")", "SpringApplication", ".", "from", "(", ")", "ExampleAdditionalConfig", ".", "local", "(", ")", "(", ")", "ExampleAdditionalConfig", ".", "class", "ExampleFromMainMethod", "::", "main"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 113, "ast_depth": 12, "n_identifiers": 17, "vocab_size": 29, "n_whitespaces": 32, "n_words": 27, "nloc": 10, "token_counts": 74}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1377-1384", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "fromReturnsApplicationContext", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#fromReturnsApplicationContext", "start_line": 1377, "end_line": 1384, "signature": "fromReturnsApplicationContext()", "original_code": "@Test\n\tvoid fromReturnsApplicationContext() {\n\t\tthis.context = SpringApplication.from(ExampleFromMainMethod::main)\n\t\t\t.with(ExampleAdditionalConfig.class)\n\t\t\t.run()\n\t\t\t.getApplicationContext();\n\t\tassertThat(this.context).isNotNull();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "fromReturnsApplicationContext", "(", ")", "{", "}", "@", "Test", ";", ";", "=", ".", "isNotNull", "this", ".", "context", ".", "getApplicationContext", "assertThat", "(", ")", ".", "run", "(", ")", "(", ")", ".", "with", "(", ")", "this", ".", "context", "SpringApplication", ".", "from", "(", ")", "(", ")", "ExampleAdditionalConfig", ".", "class", "ExampleFromMainMethod", "::", "main"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 72, "ast_depth": 12, "n_identifiers": 12, "vocab_size": 25, "n_whitespaces": 26, "n_words": 18, "nloc": 8, "token_counts": 47}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1386-1393", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "fromWithMultipleApplicationsOnlyAppliesAdditionalSourcesOnce", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#fromWithMultipleApplicationsOnlyAppliesAdditionalSourcesOnce", "start_line": 1386, "end_line": 1393, "signature": "fromWithMultipleApplicationsOnlyAppliesAdditionalSourcesOnce()", "original_code": "@Test\n\tvoid fromWithMultipleApplicationsOnlyAppliesAdditionalSourcesOnce() {\n\t\tthis.context = SpringApplication.from(MultipleApplicationsMainMethod::main)\n\t\t\t.with(SingleUseAdditionalConfig.class)\n\t\t\t.run()\n\t\t\t.getApplicationContext();\n\t\tassertThatNoException().isThrownBy(() -> this.context.getBean(SingleUseAdditionalConfig.class));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "fromWithMultipleApplicationsOnlyAppliesAdditionalSourcesOnce", "(", ")", "{", "}", "@", "Test", ";", ";", "=", ".", "isThrownBy", "this", ".", "context", ".", "getApplicationContext", "assertThatNoException", "(", ")", ".", "run", "(", ")", "(", ")", "->", ".", "with", "(", ")", "(", ")", ".", "getBean", "SpringApplication", ".", "from", "(", ")", "this", ".", "context", "(", ")", "(", ")", "SingleUseAdditionalConfig", ".", "class", "SingleUseAdditionalConfig", ".", "class", "MultipleApplicationsMainMethod", "::", "main"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 87, "ast_depth": 12, "n_identifiers": 13, "vocab_size": 27, "n_whitespaces": 28, "n_words": 21, "nloc": 8, "token_counts": 57}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1395-1404", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "fromAppliesProfiles", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#fromAppliesProfiles", "start_line": 1395, "end_line": 1404, "signature": "fromAppliesProfiles()", "original_code": "@Test\n\tvoid fromAppliesProfiles() {\n\t\tthis.context = SpringApplication.from(ExampleFromMainMethod::main)\n\t\t\t.with(ProfileConfig.class)\n\t\t\t.withAdditionalProfiles(\"custom\")\n\t\t\t.run()\n\t\t\t.getApplicationContext();\n\t\tassertThat(this.context).isNotNull();\n\t\tassertThat(this.context.getBeanProvider(Example.class).getIfAvailable()).isNotNull();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "fromAppliesProfiles", "(", ")", "{", "}", "@", "Test", ";", ";", ";", "=", ".", "isNotNull", ".", "isNotNull", "this", ".", "context", ".", "getApplicationContext", "assertThat", "(", ")", "assertThat", "(", ")", ".", "run", "(", ")", "(", ")", "(", ")", ".", "withAdditionalProfiles", "(", ")", "this", ".", "context", ".", "getIfAvailable", ".", "with", "(", ")", ".", "getBeanProvider", "(", ")", "SpringApplication", ".", "from", "(", ")", "\"", "custom", "\"", "this", ".", "context", "(", ")", "(", ")", "ProfileConfig", ".", "class", "Example", ".", "class", "ExampleFromMainMethod", "::", "main"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 115, "ast_depth": 13, "n_identifiers": 15, "vocab_size": 31, "n_whitespaces": 33, "n_words": 28, "nloc": 10, "token_counts": 76}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1406-1415", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "shouldStartDaemonThreadIfKeepAliveIsEnabled", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#shouldStartDaemonThreadIfKeepAliveIsEnabled", "start_line": 1406, "end_line": 1415, "signature": "shouldStartDaemonThreadIfKeepAliveIsEnabled()", "original_code": "@Test\n\tvoid shouldStartDaemonThreadIfKeepAliveIsEnabled() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tthis.context = application.run(\"--spring.main.keep-alive=true\");\n\t\tSet<Thread> threads = getCurrentThreads();\n\t\tassertThat(threads).filteredOn((thread) -> thread.getName().equals(\"keep-alive\"))\n\t\t\t.singleElement()\n\t\t\t.satisfies((thread) -> assertThat(thread.isDaemon()).isFalse());\n\t}", "doc_comment": ""}, "code_tokens": ["void", "shouldStartDaemonThreadIfKeepAliveIsEnabled", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "=", "Set", "threads", "=", ".", "satisfies", "new", "SpringApplication", "(", ")", "this", ".", "context", "application", ".", "run", "<", "Thread", ">", "getCurrentThreads", ".", "singleElement", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", ".", "filteredOn", "(", ")", "->", "ExampleConfig", ".", "class", "\"", "--spring.main.keep-alive=true", "\"", "assertThat", "(", ")", "(", "thread", ")", ".", "isFalse", "(", "threads", ")", "->", "assertThat", "(", ")", "(", "thread", ")", ".", "equals", "(", ")", "thread", ".", "getName", "(", ")", "thread", ".", "isDaemon", "(", ")", "\"", "keep-alive", "\"", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 151, "ast_depth": 13, "n_identifiers": 19, "vocab_size": 41, "n_whitespaces": 42, "n_words": 42, "nloc": 10, "token_counts": 100}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1417-1430", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "shouldStopKeepAliveThreadIfContextIsClosed", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#shouldStopKeepAliveThreadIfContextIsClosed", "start_line": 1417, "end_line": 1430, "signature": "shouldStopKeepAliveThreadIfContextIsClosed()", "original_code": "@Test\n\tvoid shouldStopKeepAliveThreadIfContextIsClosed() {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tapplication.setKeepAlive(true);\n\t\tthis.context = application.run();\n\t\tassertThat(getCurrentThreads()).filteredOn((thread) -> thread.getName().equals(\"keep-alive\")).isNotEmpty();\n\t\tthis.context.close();\n\t\tAwaitility.await()\n\t\t\t.atMost(Duration.ofSeconds(30))\n\t\t\t.untilAsserted(\n\t\t\t\t\t() -> assertThat(getCurrentThreads()).filteredOn((thread) -> thread.getName().equals(\"keep-alive\"))\n\t\t\t\t\t\t.isEmpty());\n\t}", "doc_comment": ""}, "code_tokens": ["void", "shouldStopKeepAliveThreadIfContextIsClosed", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "application", ".", "setKeepAlive", "=", ".", "isNotEmpty", ".", "close", ".", "untilAsserted", "new", "SpringApplication", "(", ")", "(", "true", ")", "this", ".", "context", "application", ".", "run", ".", "filteredOn", "(", ")", "this", ".", "context", "(", ")", ".", "atMost", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "assertThat", "(", ")", "Awaitility", ".", "await", "(", ")", "->", "ExampleConfig", ".", "class", "(", ")", "->", "(", ")", "Duration", ".", "ofSeconds", "(", ")", ".", "isEmpty", "getCurrentThreads", "(", "thread", ")", ".", "equals", "(", "30", ")", ".", "filteredOn", "(", ")", "(", ")", "thread", ".", "getName", "(", ")", "assertThat", "(", ")", "(", ")", "\"", "keep-alive", "\"", "(", ")", "->", "getCurrentThreads", "(", "thread", ")", ".", "equals", "(", ")", "thread", ".", "getName", "(", ")", "(", ")", "\"", "keep-alive", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 206, "ast_depth": 15, "n_identifiers": 24, "vocab_size": 43, "n_whitespaces": 60, "n_words": 50, "nloc": 14, "token_counts": 137}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1432-1436", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "isAvailabilityChangeEventWithState", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#isAvailabilityChangeEventWithState", "start_line": 1432, "end_line": 1436, "signature": "isAvailabilityChangeEventWithState(\n\t\t\tS state)", "original_code": "private <S extends AvailabilityState> ArgumentMatcher<ApplicationEvent> isAvailabilityChangeEventWithState(\n\t\t\tS state) {\n\t\treturn (argument) -> (argument instanceof AvailabilityChangeEvent<?> availabilityChangeEvent)\n\t\t\t\t&& availabilityChangeEvent.getState().equals(state);\n\t}", "doc_comment": ""}, "code_tokens": ["isAvailabilityChangeEventWithState", "private", "<", ">", "ArgumentMatcher", "(", ")", "{", "}", "S", "<", "ApplicationEvent", ">", "S", "state", "return", ";", "extends", "AvailabilityState", "->", "(", "argument", ")", "&&", "(", ")", ".", "equals", "argument", "instanceof", "availabilityChangeEvent", "availabilityChangeEvent", ".", "getState", "(", "state", ")", "AvailabilityChangeEvent", "(", ")", "<", ">", "?"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 67, "ast_depth": 12, "n_identifiers": 6, "vocab_size": 26, "n_whitespaces": 28, "n_words": 19, "nloc": 5, "token_counts": 43}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1438-1443", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "addListener", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#addListener", "start_line": 1438, "end_line": 1443, "signature": "addListener(SpringApplication application,\n\t\t\tClass<E> eventType)", "original_code": "private <E extends ApplicationEvent> AtomicReference<E> addListener(SpringApplication application,\n\t\t\tClass<E> eventType) {\n\t\tAtomicReference<E> reference = new AtomicReference<>();\n\t\tapplication.addListeners(new TestEventListener<>(eventType, reference));\n\t\treturn reference;\n\t}", "doc_comment": ""}, "code_tokens": ["addListener", "private", "<", ">", "AtomicReference", "(", ",", ")", "{", "}", "E", "<", "E", ">", "SpringApplication", "application", "eventType", ";", ";", "return", "reference", ";", "extends", "ApplicationEvent", "Class", "AtomicReference", "reference", "=", "application", ".", "addListeners", "<", "E", ">", "<", "E", ">", "new", "(", ")", "AtomicReference", "(", ")", "new", "<", ">", "TestEventListener", "(", "eventType", ",", "reference", ")", "<", ">"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 84, "ast_depth": 10, "n_identifiers": 5, "vocab_size": 25, "n_whitespaces": 30, "n_words": 25, "nloc": 6, "token_counts": 54}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1445-1461", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "matchingPropertySource", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#matchingPropertySource", "start_line": 1445, "end_line": 1461, "signature": "matchingPropertySource(final Class<?> propertySourceClass,\n\t\t\tfinal String name)", "original_code": "private Condition<ConfigurableEnvironment> matchingPropertySource(final Class<?> propertySourceClass,\n\t\t\tfinal String name) {\n\n\t\treturn new Condition<>(\"has property source\") {\n\n\t\t\t@Override\n\t\t\tpublic boolean matches(ConfigurableEnvironment value) {\n\t\t\t\tfor (PropertySource<?> source : value.getPropertySources()) {\n\t\t\t\t\tif (propertySourceClass.isInstance(source) && (name == null || name.equals(source.getName()))) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t};\n\t}", "doc_comment": ""}, "code_tokens": ["matchingPropertySource", "private", "Condition", "(", ",", ")", "{", "}", "<", "ConfigurableEnvironment", ">", "propertySourceClass", "String", "name", "return", ";", "final", "Class", "final", "new", "<", ">", "Condition", "(", ")", "{", "}", "?", "<", ">", "\"", "has property source", "\"", "boolean", "matches", "public", "(", ")", "{", "}", "@", "Override", "ConfigurableEnvironment", "value", "for", "(", "source", ":", ")", "return", "false", ";", "PropertySource", "value", ".", "getPropertySources", "{", "}", "<", ">", "(", ")", "if", "?", "(", ")", "{", "}", "&&", "return", "true", ";", "propertySourceClass", ".", "isInstance", "(", ")", "(", "source", ")", "||", "name", "==", "null", "name", ".", "equals", "(", ")", "source", ".", "getName", "(", ")"], "metrics": {"cyclomatic_complexity": 5, "n_ast_nodes": 143, "ast_depth": 20, "n_identifiers": 11, "vocab_size": 44, "n_whitespaces": 92, "n_words": 41, "nloc": 14, "token_counts": 94}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1450-1458", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "matches", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#matches", "start_line": 1450, "end_line": 1458, "signature": "matches(ConfigurableEnvironment value)", "original_code": "@Override\n\t\t\tpublic boolean matches(ConfigurableEnvironment value) {\n\t\t\t\tfor (PropertySource<?> source : value.getPropertySources()) {\n\t\t\t\t\tif (propertySourceClass.isInstance(source) && (name == null || name.equals(source.getName()))) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}", "doc_comment": ""}, "code_tokens": ["boolean", "matches", "public", "(", ")", "{", "}", "@", "Override", "ConfigurableEnvironment", "value", "for", "(", "source", ":", ")", "return", "false", ";", "PropertySource", "value", ".", "getPropertySources", "{", "}", "<", ">", "(", ")", "if", "?", "(", ")", "{", "}", "&&", "return", "true", ";", "propertySourceClass", ".", "isInstance", "(", ")", "(", "source", ")", "||", "name", "==", "null", "name", ".", "equals", "(", ")", "source", ".", "getName", "(", ")"], "metrics": {"cyclomatic_complexity": 5, "n_ast_nodes": 90, "ast_depth": 15, "n_identifiers": 10, "vocab_size": 34, "n_whitespaces": 61, "n_words": 25, "nloc": 9, "token_counts": 61}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1463-1472", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "runTestRunnerBean", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#runTestRunnerBean", "start_line": 1463, "end_line": 1472, "signature": "runTestRunnerBean(String name)", "original_code": "private Condition<ConfigurableApplicationContext> runTestRunnerBean(String name) {\n\t\treturn new Condition<>(\"run testrunner bean\") {\n\n\t\t\t@Override\n\t\t\tpublic boolean matches(ConfigurableApplicationContext value) {\n\t\t\t\treturn value.getBean(name, AbstractTestRunner.class).hasRun();\n\t\t\t}\n\n\t\t};\n\t}", "doc_comment": ""}, "code_tokens": ["runTestRunnerBean", "private", "Condition", "(", ")", "{", "}", "<", "ConfigurableApplicationContext", ">", "String", "name", "return", ";", "new", "Condition", "(", ")", "{", "}", "<", ">", "\"", "run testrunner bean", "\"", "boolean", "matches", "public", "(", ")", "{", "}", "@", "Override", "ConfigurableApplicationContext", "value", "return", ";", ".", "hasRun", "value", ".", "getBean", "(", ")", "(", "name", ",", ")", "AbstractTestRunner", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 79, "ast_depth": 14, "n_identifiers": 7, "vocab_size": 29, "n_whitespaces": 42, "n_words": 25, "nloc": 8, "token_counts": 52}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1466-1469", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "matches", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#matches", "start_line": 1466, "end_line": 1469, "signature": "matches(ConfigurableApplicationContext value)", "original_code": "@Override\n\t\t\tpublic boolean matches(ConfigurableApplicationContext value) {\n\t\t\t\treturn value.getBean(name, AbstractTestRunner.class).hasRun();\n\t\t\t}", "doc_comment": ""}, "code_tokens": ["boolean", "matches", "public", "(", ")", "{", "}", "@", "Override", "ConfigurableApplicationContext", "value", "return", ";", ".", "hasRun", "value", ".", "getBean", "(", ")", "(", "name", ",", ")", "AbstractTestRunner", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 40, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 20, "n_whitespaces": 19, "n_words": 13, "nloc": 4, "token_counts": 27}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1474-1476", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "getCurrentThreads", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#getCurrentThreads", "start_line": 1474, "end_line": 1476, "signature": "getCurrentThreads()", "original_code": "private Set<Thread> getCurrentThreads() {\n\t\treturn Thread.getAllStackTraces().keySet();\n\t}", "doc_comment": ""}, "code_tokens": ["getCurrentThreads", "private", "Set", "(", ")", "{", "}", "<", "Thread", ">", "return", ";", ".", "keySet", "Thread", ".", "getAllStackTraces", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 33, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 15, "n_whitespaces": 9, "n_words": 8, "nloc": 3, "token_counts": 21}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1478-1481", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "assertThatBannerModeIs", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#assertThatBannerModeIs", "start_line": 1478, "end_line": 1481, "signature": "assertThatBannerModeIs(SpringApplication application, Mode mode)", "original_code": "private void assertThatBannerModeIs(SpringApplication application, Mode mode) {\n\t\tObject properties = ReflectionTestUtils.getField(application, \"properties\");\n\t\tassertThat(properties).hasFieldOrPropertyWithValue(\"bannerMode\", mode);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "assertThatBannerModeIs", "private", "(", ",", ")", "{", "}", "SpringApplication", "application", "Mode", "mode", "Object", ";", ";", "properties", "=", ".", "hasFieldOrPropertyWithValue", "ReflectionTestUtils", ".", "getField", "assertThat", "(", ",", "mode", ")", "(", "application", ",", ")", "(", "properties", ")", "\"", "bannerMode", "\"", "\"", "properties", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 58, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 23, "n_whitespaces": 19, "n_words": 18, "nloc": 4, "token_counts": 40}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1494-1497", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "supportsEventType", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#supportsEventType", "start_line": 1494, "end_line": 1497, "signature": "supportsEventType(Class<? extends ApplicationEvent> eventType)", "original_code": "@Override\n\t\tpublic boolean supportsEventType(Class<? extends ApplicationEvent> eventType) {\n\t\t\treturn this.eventType.isAssignableFrom(eventType);\n\t\t}", "doc_comment": ""}, "code_tokens": ["boolean", "supportsEventType", "public", "(", ")", "{", "}", "@", "Override", "eventType", "return", ";", "Class", ".", "isAssignableFrom", "<", ">", "this", ".", "eventType", "(", "eventType", ")", "?", "extends", "ApplicationEvent"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 40, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 21, "n_whitespaces": 17, "n_words": 13, "nloc": 4, "token_counts": 26}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1499-1503", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "onApplicationEvent", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#onApplicationEvent", "start_line": 1499, "end_line": 1503, "signature": "onApplicationEvent(ApplicationEvent event)", "original_code": "@Override\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tpublic void onApplicationEvent(ApplicationEvent event) {\n\t\t\tthis.reference.set((E) event);\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "onApplicationEvent", "public", "(", ")", "{", "}", "@", "Override", "@", "SuppressWarnings", "ApplicationEvent", "event", ";", "(", ")", ".", "set", "\"", "unchecked", "\"", "this", ".", "reference", "(", ")", "(", "E", ")", "event"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 45, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 20, "n_whitespaces": 18, "n_words": 13, "nloc": 5, "token_counts": 30}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1513-1516", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "testMessage", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#testMessage", "start_line": 1513, "end_line": 1516, "signature": "testMessage()", "original_code": "@Bean\n\t\tString testMessage() {\n\t\t\treturn \"test\";\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "testMessage", "(", ")", "{", "}", "@", "Bean", "return", ";", "\"", "test", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 21, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 12, "n_whitespaces": 13, "n_words": 5, "nloc": 4, "token_counts": 13}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1524-1527", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "registerShutdownHook", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#registerShutdownHook", "start_line": 1524, "end_line": 1527, "signature": "registerShutdownHook()", "original_code": "@Override\n\t\tpublic void registerShutdownHook() {\n\t\t\tthis.applicationContext.registerShutdownHook();\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "registerShutdownHook", "public", "(", ")", "{", "}", "@", "Override", ";", ".", "registerShutdownHook", "this", ".", "applicationContext", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 27, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 13, "n_whitespaces": 13, "n_words": 7, "nloc": 4, "token_counts": 17}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1529-1531", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "getApplicationContext", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#getApplicationContext", "start_line": 1529, "end_line": 1531, "signature": "getApplicationContext()", "original_code": "ConfigurableApplicationContext getApplicationContext() {\n\t\t\treturn this.applicationContext;\n\t\t}", "doc_comment": ""}, "code_tokens": ["ConfigurableApplicationContext", "getApplicationContext", "(", ")", "{", "}", "return", ";", "this", ".", "applicationContext"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 17, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 11, "n_whitespaces": 10, "n_words": 5, "nloc": 3, "token_counts": 11}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1533-1537", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "close", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#close", "start_line": 1533, "end_line": 1537, "signature": "close()", "original_code": "@Override\n\t\tpublic void close() {\n\t\t\tthis.applicationContext.close();\n\t\t\tsuper.close();\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "close", "public", "(", ")", "{", "}", "@", "Override", ";", ";", ".", "close", "super", ".", "close", "this", ".", "applicationContext", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 36, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 17, "n_words": 9, "nloc": 5, "token_counts": 23}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1555-1557", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "setUseMockLoader", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#setUseMockLoader", "start_line": 1555, "end_line": 1557, "signature": "setUseMockLoader(boolean useMockLoader)", "original_code": "void setUseMockLoader(boolean useMockLoader) {\n\t\t\tthis.useMockLoader = useMockLoader;\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "setUseMockLoader", "(", ")", "{", "}", "boolean", "useMockLoader", ";", "=", "useMockLoader", "this", ".", "useMockLoader"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 12, "n_whitespaces": 12, "n_words": 7, "nloc": 3, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1559-1568", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "createBeanDefinitionLoader", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#createBeanDefinitionLoader", "start_line": 1559, "end_line": 1568, "signature": "createBeanDefinitionLoader(BeanDefinitionRegistry registry, Object[] sources)", "original_code": "@Override\n\t\tprotected BeanDefinitionLoader createBeanDefinitionLoader(BeanDefinitionRegistry registry, Object[] sources) {\n\t\t\tif (this.useMockLoader) {\n\t\t\t\tthis.loader = mock(BeanDefinitionLoader.class);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.loader = spy(super.createBeanDefinitionLoader(registry, sources));\n\t\t\t}\n\t\t\treturn this.loader;\n\t\t}", "doc_comment": ""}, "code_tokens": ["BeanDefinitionLoader", "createBeanDefinitionLoader", "protected", "(", ",", ")", "{", "}", "@", "Override", "BeanDefinitionRegistry", "registry", "sources", "if", "else", "return", ";", "Object", "(", ")", "{", "}", "{", "}", "this", ".", "loader", "[", "]", "this", ".", "useMockLoader", ";", ";", "=", "=", "this", ".", "loader", "mock", "this", ".", "loader", "spy", "(", ")", "(", ")", "BeanDefinitionLoader", ".", "class", "super", ".", "createBeanDefinitionLoader", "(", "registry", ",", "sources", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 89, "ast_depth": 12, "n_identifiers": 8, "vocab_size": 29, "n_whitespaces": 51, "n_words": 27, "nloc": 10, "token_counts": 59}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1570-1572", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "getLoader", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#getLoader", "start_line": 1570, "end_line": 1572, "signature": "getLoader()", "original_code": "BeanDefinitionLoader getLoader() {\n\t\t\treturn this.loader;\n\t\t}", "doc_comment": ""}, "code_tokens": ["BeanDefinitionLoader", "getLoader", "(", ")", "{", "}", "return", ";", "this", ".", "loader"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 17, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 11, "n_whitespaces": 10, "n_words": 5, "nloc": 3, "token_counts": 11}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1574-1576", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "getBannerMode", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#getBannerMode", "start_line": 1574, "end_line": 1576, "signature": "getBannerMode()", "original_code": "Banner.Mode getBannerMode() {\n\t\t\treturn this.properties.getBannerMode(new MockEnvironment());\n\t\t}", "doc_comment": ""}, "code_tokens": ["getBannerMode", "Banner", ".", "Mode", "(", ")", "{", "}", "return", ";", ".", "getBannerMode", "this", ".", "properties", "(", ")", "new", "MockEnvironment", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 32, "ast_depth": 9, "n_identifiers": 2, "vocab_size": 14, "n_whitespaces": 11, "n_words": 9, "nloc": 3, "token_counts": 21}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1583-1586", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "someBean", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#someBean", "start_line": 1583, "end_line": 1586, "signature": "someBean()", "original_code": "@Bean\n\t\tString someBean() {\n\t\t\treturn \"test\";\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "someBean", "(", ")", "{", "}", "@", "Bean", "return", ";", "\"", "test", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 21, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 12, "n_whitespaces": 13, "n_words": 5, "nloc": 4, "token_counts": 13}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1593-1596", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "someBean", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#someBean", "start_line": 1593, "end_line": 1596, "signature": "someBean()", "original_code": "@Bean\n\t\tString someBean() {\n\t\t\treturn \"override\";\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "someBean", "(", ")", "{", "}", "@", "Bean", "return", ";", "\"", "override", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 21, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 12, "n_whitespaces": 13, "n_words": 5, "nloc": 4, "token_counts": 13}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1603-1606", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "thing", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#thing", "start_line": 1603, "end_line": 1606, "signature": "thing()", "original_code": "@Bean\n\t\tThing thing() {\n\t\t\treturn new Thing();\n\t\t}", "doc_comment": ""}, "code_tokens": ["Thing", "thing", "(", ")", "{", "}", "@", "Bean", "return", ";", "new", "Thing", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 23, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 11, "n_whitespaces": 14, "n_words": 6, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1610-1613", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "boom", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#boom", "start_line": 1610, "end_line": 1613, "signature": "boom()", "original_code": "@PostConstruct\n\t\t\tvoid boom() {\n\t\t\t\tthrow new IllegalStateException();\n\t\t\t}", "doc_comment": ""}, "code_tokens": ["void", "boom", "(", ")", "{", "}", "@", "PostConstruct", "throw", ";", "new", "IllegalStateException", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 23, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 12, "n_whitespaces": 17, "n_words": 6, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1622-1627", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "brokenBeanFactoryPostProcessor", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#brokenBeanFactoryPostProcessor", "start_line": 1622, "end_line": 1627, "signature": "brokenBeanFactoryPostProcessor()", "original_code": "@Bean\n\t\tstatic BeanFactoryPostProcessor brokenBeanFactoryPostProcessor() {\n\t\t\treturn (beanFactory) -> {\n\t\t\t\tthrow new ApplicationContextException(\"broken\");\n\t\t\t};\n\t\t}", "doc_comment": ""}, "code_tokens": ["BeanFactoryPostProcessor", "brokenBeanFactoryPostProcessor", "static", "(", ")", "{", "}", "@", "Bean", "return", ";", "->", "(", "beanFactory", ")", "{", "}", "throw", ";", "new", "ApplicationContextException", "(", ")", "\"", "broken", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 40, "ast_depth": 11, "n_identifiers": 3, "vocab_size": 18, "n_whitespaces": 27, "n_words": 10, "nloc": 6, "token_counts": 26}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1634-1637", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "testApplicationListener", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#testApplicationListener", "start_line": 1634, "end_line": 1637, "signature": "testApplicationListener()", "original_code": "@Bean\n\t\tApplicationListener<?> testApplicationListener() {\n\t\t\treturn mock(ApplicationListener.class);\n\t\t}", "doc_comment": ""}, "code_tokens": ["testApplicationListener", "ApplicationListener", "(", ")", "{", "}", "@", "Bean", "<", ">", "return", ";", "?", "mock", "(", ")", "ApplicationListener", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 32, "ast_depth": 8, "n_identifiers": 3, "vocab_size": 16, "n_whitespaces": 13, "n_words": 7, "nloc": 4, "token_counts": 19}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1644-1647", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "applicationEventMulticaster", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#applicationEventMulticaster", "start_line": 1644, "end_line": 1647, "signature": "applicationEventMulticaster()", "original_code": "@Bean(name = AbstractApplicationContext.APPLICATION_EVENT_MULTICASTER_BEAN_NAME)\n\t\tApplicationEventMulticaster applicationEventMulticaster() {\n\t\t\treturn spy(new SimpleApplicationEventMulticaster());\n\t\t}", "doc_comment": ""}, "code_tokens": ["ApplicationEventMulticaster", "applicationEventMulticaster", "(", ")", "{", "}", "@", "Bean", "return", ";", "(", ")", "spy", "name", "=", "(", ")", "AbstractApplicationContext", ".", "APPLICATION_EVENT_MULTICASTER_BEAN_NAME", "new", "SimpleApplicationEventMulticaster", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 38, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 18, "n_whitespaces": 16, "n_words": 10, "nloc": 4, "token_counts": 24}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1654-1657", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "fail", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#fail", "start_line": 1654, "end_line": 1657, "signature": "fail()", "original_code": "@Bean\n\t\tObject fail() {\n\t\t\tthrow new RuntimeException(\"ExpectedError\");\n\t\t}", "doc_comment": ""}, "code_tokens": ["Object", "fail", "(", ")", "{", "}", "@", "Bean", "throw", ";", "new", "RuntimeException", "(", ")", "\"", "ExpectedError", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 27, "ast_depth": 8, "n_identifiers": 2, "vocab_size": 14, "n_whitespaces": 14, "n_words": 7, "nloc": 4, "token_counts": 17}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1664-1667", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "runnerC", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#runnerC", "start_line": 1664, "end_line": 1667, "signature": "runnerC()", "original_code": "@Bean\n\t\tTestCommandLineRunner runnerC() {\n\t\t\treturn new TestCommandLineRunner(\"runnerC\", Ordered.LOWEST_PRECEDENCE, \"runnerB\", \"runnerA\");\n\t\t}", "doc_comment": ""}, "code_tokens": ["TestCommandLineRunner", "runnerC", "(", ")", "{", "}", "@", "Bean", "return", ";", "new", "TestCommandLineRunner", "(", ",", ",", ",", ")", "\"", "runnerC", "\"", "Ordered", ".", "LOWEST_PRECEDENCE", "\"", "runnerB", "\"", "\"", "runnerA", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 42, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 18, "n_whitespaces": 17, "n_words": 11, "nloc": 4, "token_counts": 29}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1669-1672", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "runnerB", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#runnerB", "start_line": 1669, "end_line": 1672, "signature": "runnerB()", "original_code": "@Bean\n\t\tTestApplicationRunner runnerB() {\n\t\t\treturn new TestApplicationRunner(\"runnerB\", Ordered.LOWEST_PRECEDENCE - 1, \"runnerA\");\n\t\t}", "doc_comment": ""}, "code_tokens": ["TestApplicationRunner", "runnerB", "(", ")", "{", "}", "@", "Bean", "return", ";", "new", "TestApplicationRunner", "(", ",", ",", ")", "\"", "runnerB", "\"", "-", "1", "\"", "runnerA", "\"", "Ordered", ".", "LOWEST_PRECEDENCE"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 40, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 19, "n_whitespaces": 18, "n_words": 11, "nloc": 4, "token_counts": 27}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1674-1677", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "runnerA", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#runnerA", "start_line": 1674, "end_line": 1677, "signature": "runnerA()", "original_code": "@Bean\n\t\tTestCommandLineRunner runnerA() {\n\t\t\treturn new TestCommandLineRunner(\"runnerA\", Ordered.HIGHEST_PRECEDENCE);\n\t\t}", "doc_comment": ""}, "code_tokens": ["TestCommandLineRunner", "runnerA", "(", ")", "{", "}", "@", "Bean", "return", ";", "new", "TestCommandLineRunner", "(", ",", ")", "\"", "runnerA", "\"", "Ordered", ".", "HIGHEST_PRECEDENCE"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 32, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 16, "n_whitespaces": 15, "n_words": 9, "nloc": 4, "token_counts": 21}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1684-1687", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "runnerP", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#runnerP", "start_line": 1684, "end_line": 1687, "signature": "runnerP()", "original_code": "@Bean\n\t\tTestCommandLineRunner runnerP() {\n\t\t\treturn new TestCommandLineRunner(\"runnerP\", Ordered.LOWEST_PRECEDENCE);\n\t\t}", "doc_comment": ""}, "code_tokens": ["TestCommandLineRunner", "runnerP", "(", ")", "{", "}", "@", "Bean", "return", ";", "new", "TestCommandLineRunner", "(", ",", ")", "\"", "runnerP", "\"", "Ordered", ".", "LOWEST_PRECEDENCE"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 32, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 16, "n_whitespaces": 15, "n_words": 9, "nloc": 4, "token_counts": 21}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1696-1700", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "runnerC", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#runnerC", "start_line": 1696, "end_line": 1700, "signature": "runnerC()", "original_code": "@Bean\n\t\t@Order\n\t\tCommandLineRunner runnerC() {\n\t\t\treturn (args) -> this.runners.add(\"runnerC\");\n\t\t}", "doc_comment": ""}, "code_tokens": ["CommandLineRunner", "runnerC", "(", ")", "{", "}", "@", "Bean", "@", "Order", "return", ";", "->", "(", "args", ")", ".", "add", "this", ".", "runners", "(", ")", "\"", "runnerC", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 40, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 18, "n_whitespaces": 18, "n_words": 10, "nloc": 5, "token_counts": 26}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1702-1706", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "runnerB", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#runnerB", "start_line": 1702, "end_line": 1706, "signature": "runnerB()", "original_code": "@Bean\n\t\t@Order(Ordered.LOWEST_PRECEDENCE - 1)\n\t\tApplicationRunner runnerB() {\n\t\t\treturn (args) -> this.runners.add(\"runnerB\");\n\t\t}", "doc_comment": ""}, "code_tokens": ["ApplicationRunner", "runnerB", "(", ")", "{", "}", "@", "Bean", "@", "Order", "return", ";", "(", ")", "->", "-", "1", "(", "args", ")", ".", "add", "Ordered", ".", "LOWEST_PRECEDENCE", "this", ".", "runners", "(", ")", "\"", "runnerB", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 50, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 22, "n_whitespaces": 20, "n_words": 13, "nloc": 5, "token_counts": 33}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1708-1712", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "runnerA", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#runnerA", "start_line": 1708, "end_line": 1712, "signature": "runnerA()", "original_code": "@Bean\n\t\t@Order(Ordered.HIGHEST_PRECEDENCE)\n\t\tCommandLineRunner runnerA() {\n\t\t\treturn (args) -> this.runners.add(\"runnerA\");\n\t\t}", "doc_comment": ""}, "code_tokens": ["CommandLineRunner", "runnerA", "(", ")", "{", "}", "@", "Bean", "@", "Order", "return", ";", "(", ")", "->", "Ordered", ".", "HIGHEST_PRECEDENCE", "(", "args", ")", ".", "add", "this", ".", "runners", "(", ")", "\"", "runnerA", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 47, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 20, "n_whitespaces": 18, "n_words": 12, "nloc": 5, "token_counts": 31}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1719-1724", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "runner", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#runner", "start_line": 1719, "end_line": 1724, "signature": "runner()", "original_code": "@Bean\n\t\tCommandLineRunner runner() {\n\t\t\treturn (args) -> {\n\t\t\t\tthrow new IllegalStateException(new ExitStatusException());\n\t\t\t};\n\t\t}", "doc_comment": ""}, "code_tokens": ["CommandLineRunner", "runner", "(", ")", "{", "}", "@", "Bean", "return", ";", "->", "(", "args", ")", "{", "}", "throw", ";", "new", "IllegalStateException", "(", ")", "new", "ExitStatusException", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 41, "ast_depth": 12, "n_identifiers": 3, "vocab_size": 16, "n_whitespaces": 27, "n_words": 10, "nloc": 6, "token_counts": 26}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1731-1736", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "runner", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#runner", "start_line": 1731, "end_line": 1736, "signature": "runner()", "original_code": "@Bean\n\t\tCommandLineRunner runner() {\n\t\t\treturn (args) -> {\n\t\t\t\tthrow new IllegalStateException();\n\t\t\t};\n\t\t}", "doc_comment": ""}, "code_tokens": ["CommandLineRunner", "runner", "(", ")", "{", "}", "@", "Bean", "return", ";", "->", "(", "args", ")", "{", "}", "throw", ";", "new", "IllegalStateException", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 35, "ast_depth": 10, "n_identifiers": 3, "vocab_size": 15, "n_whitespaces": 26, "n_words": 8, "nloc": 6, "token_counts": 22}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1738-1746", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "exceptionMapper", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#exceptionMapper", "start_line": 1738, "end_line": 1746, "signature": "exceptionMapper()", "original_code": "@Bean\n\t\tExitCodeExceptionMapper exceptionMapper() {\n\t\t\treturn (exception) -> {\n\t\t\t\tif (exception instanceof IllegalStateException) {\n\t\t\t\t\treturn 11;\n\t\t\t\t}\n\t\t\t\treturn 0;\n\t\t\t};\n\t\t}", "doc_comment": ""}, "code_tokens": ["ExitCodeExceptionMapper", "exceptionMapper", "(", ")", "{", "}", "@", "Bean", "return", ";", "->", "(", "exception", ")", "{", "}", "if", "return", "0", ";", "(", ")", "{", "}", "exception", "instanceof", "IllegalStateException", "return", "11", ";"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 46, "ast_depth": 10, "n_identifiers": 3, "vocab_size": 17, "n_whitespaces": 46, "n_words": 13, "nloc": 9, "token_counts": 30}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1753-1756", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "fail", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#fail", "start_line": 1753, "end_line": 1756, "signature": "fail()", "original_code": "@PostConstruct\n\t\tvoid fail() {\n\t\t\tthrow new RefreshFailureException();\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "fail", "(", ")", "{", "}", "@", "PostConstruct", "throw", ";", "new", "RefreshFailureException", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 23, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 12, "n_whitespaces": 14, "n_words": 6, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1763-1766", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "counter", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#counter", "start_line": 1763, "end_line": 1766, "signature": "counter()", "original_code": "@Bean\n\t\tAtomicInteger counter() {\n\t\t\treturn new AtomicInteger();\n\t\t}", "doc_comment": ""}, "code_tokens": ["AtomicInteger", "counter", "(", ")", "{", "}", "@", "Bean", "return", ";", "new", "AtomicInteger", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 23, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 11, "n_whitespaces": 14, "n_words": 6, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1768-1771", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "lazyBean", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#lazyBean", "start_line": 1768, "end_line": 1771, "signature": "lazyBean(AtomicInteger counter)", "original_code": "@Bean\n\t\tLazyBean lazyBean(AtomicInteger counter) {\n\t\t\treturn new LazyBean(counter);\n\t\t}", "doc_comment": ""}, "code_tokens": ["LazyBean", "lazyBean", "(", ")", "{", "}", "@", "Bean", "AtomicInteger", "counter", "return", ";", "new", "LazyBean", "(", "counter", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 27, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 13, "n_whitespaces": 15, "n_words": 9, "nloc": 4, "token_counts": 17}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1786-1789", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "counter", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#counter", "start_line": 1786, "end_line": 1789, "signature": "counter()", "original_code": "@Bean\n\t\tAtomicInteger counter() {\n\t\t\treturn new AtomicInteger();\n\t\t}", "doc_comment": ""}, "code_tokens": ["AtomicInteger", "counter", "(", ")", "{", "}", "@", "Bean", "return", ";", "new", "AtomicInteger", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 23, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 11, "n_whitespaces": 14, "n_words": 6, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1791-1795", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "NotLazyBean", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#NotLazyBean", "start_line": 1791, "end_line": 1795, "signature": "NotLazyBean(AtomicInteger counter)", "original_code": "@Bean\n\t\t@Lazy(false)\n\t\tNotLazyBean NotLazyBean(AtomicInteger counter) {\n\t\t\treturn new NotLazyBean(counter);\n\t\t}", "doc_comment": ""}, "code_tokens": ["NotLazyBean", "NotLazyBean", "(", ")", "{", "}", "@", "Bean", "@", "Lazy", "AtomicInteger", "counter", "return", ";", "(", "false", ")", "new", "NotLazyBean", "(", "counter", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 34, "ast_depth": 7, "n_identifiers": 4, "vocab_size": 14, "n_whitespaces": 18, "n_words": 11, "nloc": 5, "token_counts": 22}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1810-1813", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "counter", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#counter", "start_line": 1810, "end_line": 1813, "signature": "counter()", "original_code": "@Bean\n\t\tAtomicInteger counter() {\n\t\t\treturn new AtomicInteger();\n\t\t}", "doc_comment": ""}, "code_tokens": ["AtomicInteger", "counter", "(", ")", "{", "}", "@", "Bean", "return", ";", "new", "AtomicInteger", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 23, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 11, "n_whitespaces": 14, "n_words": 6, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1815-1818", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "notLazyBean", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#notLazyBean", "start_line": 1815, "end_line": 1818, "signature": "notLazyBean(AtomicInteger counter)", "original_code": "@Bean\n\t\tNotLazyBean notLazyBean(AtomicInteger counter) {\n\t\t\treturn new NotLazyBean(counter);\n\t\t}", "doc_comment": ""}, "code_tokens": ["NotLazyBean", "notLazyBean", "(", ")", "{", "}", "@", "Bean", "AtomicInteger", "counter", "return", ";", "new", "NotLazyBean", "(", "counter", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 27, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 13, "n_whitespaces": 15, "n_words": 9, "nloc": 4, "token_counts": 17}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1820-1823", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "lazyInitializationExcludeFilter", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#lazyInitializationExcludeFilter", "start_line": 1820, "end_line": 1823, "signature": "lazyInitializationExcludeFilter()", "original_code": "@Bean\n\t\tstatic LazyInitializationExcludeFilter lazyInitializationExcludeFilter() {\n\t\t\treturn LazyInitializationExcludeFilter.forBeanTypes(NotLazyBean.class);\n\t\t}", "doc_comment": ""}, "code_tokens": ["LazyInitializationExcludeFilter", "lazyInitializationExcludeFilter", "static", "(", ")", "{", "}", "@", "Bean", "return", ";", "LazyInitializationExcludeFilter", ".", "forBeanTypes", "(", ")", "NotLazyBean", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 29, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 15, "n_whitespaces": 14, "n_words": 9, "nloc": 4, "token_counts": 19}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1843-1846", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "getExitCode", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#getExitCode", "start_line": 1843, "end_line": 1846, "signature": "getExitCode()", "original_code": "@Override\n\t\tpublic int getExitCode() {\n\t\t\treturn 11;\n\t\t}", "doc_comment": ""}, "code_tokens": ["getExitCode", "public", "int", "(", ")", "{", "}", "@", "Override", "return", "11", ";"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 20, "ast_depth": 5, "n_identifiers": 2, "vocab_size": 12, "n_whitespaces": 14, "n_words": 6, "nloc": 4, "token_counts": 12}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1869-1872", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "setApplicationContext", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#setApplicationContext", "start_line": 1869, "end_line": 1872, "signature": "setApplicationContext(ApplicationContext applicationContext)", "original_code": "@Override\n\t\tpublic void setApplicationContext(ApplicationContext applicationContext) {\n\t\t\tthis.applicationContext = applicationContext;\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "setApplicationContext", "public", "(", ")", "{", "}", "@", "Override", "ApplicationContext", "applicationContext", ";", "=", "applicationContext", "this", ".", "applicationContext"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 27, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 15, "n_whitespaces": 16, "n_words": 9, "nloc": 4, "token_counts": 17}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1874-1877", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "getOrder", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#getOrder", "start_line": 1874, "end_line": 1877, "signature": "getOrder()", "original_code": "@Override\n\t\tpublic int getOrder() {\n\t\t\treturn this.order;\n\t\t}", "doc_comment": ""}, "code_tokens": ["getOrder", "public", "int", "(", ")", "{", "}", "@", "Override", "return", ";", "this", ".", "order"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 23, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1879-1885", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "markAsRan", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#markAsRan", "start_line": 1879, "end_line": 1885, "signature": "markAsRan()", "original_code": "void markAsRan() {\n\t\t\tthis.run = true;\n\t\t\tfor (String name : this.expectedBefore) {\n\t\t\t\tAbstractTestRunner bean = this.applicationContext.getBean(name, AbstractTestRunner.class);\n\t\t\t\tassertThat(bean.hasRun()).isTrue();\n\t\t\t}\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "markAsRan", "(", ")", "{", "}", ";", "for", "(", "String", "name", ":", ")", "=", "true", "this", ".", "expectedBefore", "{", "}", "this", ".", "run", "AbstractTestRunner", ";", ";", "bean", "=", ".", "isTrue", ".", "getBean", "assertThat", "(", ")", "this", ".", "applicationContext", "(", "name", ",", ")", "(", ")", "AbstractTestRunner", ".", "class", "bean", ".", "hasRun", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 75, "ast_depth": 12, "n_identifiers": 10, "vocab_size": 26, "n_whitespaces": 38, "n_words": 22, "nloc": 7, "token_counts": 52}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1887-1889", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "hasRun", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#hasRun", "start_line": 1887, "end_line": 1889, "signature": "hasRun()", "original_code": "boolean hasRun() {\n\t\t\treturn this.run;\n\t\t}", "doc_comment": ""}, "code_tokens": ["boolean", "hasRun", "(", ")", "{", "}", "return", ";", "this", ".", "run"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 17, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 11, "n_whitespaces": 10, "n_words": 5, "nloc": 3, "token_counts": 11}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1902-1906", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "run", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#run", "start_line": 1902, "end_line": 1906, "signature": "run(String... args)", "original_code": "@Override\n\t\tpublic void run(String... args) {\n\t\t\tSystem.out.println(\">>> \" + this.name);\n\t\t\tmarkAsRan();\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "run", "public", "(", ")", "{", "}", "@", "Override", "String", "...", ";", ";", "args", ".", "println", "markAsRan", "System", ".", "out", "(", ")", "(", ")", "+", "\"", ">>> ", "\"", "this", ".", "name"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 49, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 23, "n_whitespaces": 21, "n_words": 12, "nloc": 5, "token_counts": 31}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1919-1923", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "run", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#run", "start_line": 1919, "end_line": 1923, "signature": "run(ApplicationArguments args)", "original_code": "@Override\n\t\tpublic void run(ApplicationArguments args) {\n\t\t\tSystem.out.println(\">>> \" + this.name);\n\t\t\tmarkAsRan();\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "run", "public", "(", ")", "{", "}", "@", "Override", "ApplicationArguments", "args", ";", ";", ".", "println", "markAsRan", "System", ".", "out", "(", ")", "(", ")", "+", "\"", ">>> ", "\"", "this", ".", "name"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 47, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 22, "n_whitespaces": 21, "n_words": 12, "nloc": 5, "token_counts": 30}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1931-1934", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "onApplicationEvent", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#onApplicationEvent", "start_line": 1931, "end_line": 1934, "signature": "onApplicationEvent(ExitCodeEvent event)", "original_code": "@Override\n\t\tpublic void onApplicationEvent(ExitCodeEvent event) {\n\t\t\tthis.exitCode = event.getExitCode();\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "onApplicationEvent", "public", "(", ")", "{", "}", "@", "Override", "ExitCodeEvent", "event", ";", "=", "this", ".", "exitCode", "event", ".", "getExitCode", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 33, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 17, "n_whitespaces": 16, "n_words": 10, "nloc": 4, "token_counts": 21}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1936-1938", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "getExitCode", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#getExitCode", "start_line": 1936, "end_line": 1938, "signature": "getExitCode()", "original_code": "Integer getExitCode() {\n\t\t\treturn this.exitCode;\n\t\t}", "doc_comment": ""}, "code_tokens": ["Integer", "getExitCode", "(", ")", "{", "}", "return", ";", "this", ".", "exitCode"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 17, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 11, "n_whitespaces": 10, "n_words": 5, "nloc": 3, "token_counts": 11}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1946-1948", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "addResource", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#addResource", "start_line": 1946, "end_line": 1948, "signature": "addResource(String source, String path)", "original_code": "void addResource(String source, String path) {\n\t\t\tthis.resources.put(source, new ClassPathResource(path, getClass()));\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "addResource", "(", ",", ")", "{", "}", "String", "source", "String", "path", ";", ".", "put", "this", ".", "resources", "(", "source", ",", ")", "new", "ClassPathResource", "(", "path", ",", ")", "getClass", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 44, "ast_depth": 11, "n_identifiers": 6, "vocab_size": 18, "n_whitespaces": 15, "n_words": 14, "nloc": 3, "token_counts": 30}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1950-1954", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "getResource", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#getResource", "start_line": 1950, "end_line": 1954, "signature": "getResource(String path)", "original_code": "@Override\n\t\tpublic Resource getResource(String path) {\n\t\t\tResource resource = this.resources.get(path);\n\t\t\treturn (resource != null) ? resource : new ClassPathResource(\"doesnotexist\");\n\t\t}", "doc_comment": ""}, "code_tokens": ["Resource", "getResource", "public", "(", ")", "{", "}", "@", "Override", "String", "path", "Resource", ";", "return", ";", "resource", "=", "?", "resource", ":", ".", "get", "(", ")", "new", "ClassPathResource", "this", ".", "resources", "(", "path", ")", "resource", "!=", "null", "(", ")", "\"", "doesnotexist", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 59, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 27, "n_whitespaces": 29, "n_words": 19, "nloc": 5, "token_counts": 40}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1956-1959", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "getClassLoader", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#getClassLoader", "start_line": 1956, "end_line": 1959, "signature": "getClassLoader()", "original_code": "@Override\n\t\tpublic ClassLoader getClassLoader() {\n\t\t\treturn getClass().getClassLoader();\n\t\t}", "doc_comment": ""}, "code_tokens": ["ClassLoader", "getClassLoader", "public", "(", ")", "{", "}", "@", "Override", "return", ";", ".", "getClassLoader", "getClass", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 29, "ast_depth": 8, "n_identifiers": 3, "vocab_size": 13, "n_whitespaces": 14, "n_words": 7, "nloc": 4, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1967-1970", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "onApplicationEvent", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#onApplicationEvent", "start_line": 1967, "end_line": 1970, "signature": "onApplicationEvent(ApplicationEvent event)", "original_code": "@Override\n\t\tpublic void onApplicationEvent(ApplicationEvent event) {\n\t\t\tthis.events.add(event.getClass(), event);\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "onApplicationEvent", "public", "(", ")", "{", "}", "@", "Override", "ApplicationEvent", "event", ";", ".", "add", "this", ".", "events", "(", ",", "event", ")", "event", ".", "getClass", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 39, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 18, "n_whitespaces": 15, "n_words": 12, "nloc": 4, "token_counts": 26}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1972-1975", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "getEvent", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#getEvent", "start_line": 1972, "end_line": 1975, "signature": "getEvent(Class<E> type)", "original_code": "@SuppressWarnings(\"unchecked\")\n\t\t<E extends ApplicationEvent> E getEvent(Class<E> type) {\n\t\t\treturn (E) this.events.get(type).get(0);\n\t\t}", "doc_comment": ""}, "code_tokens": ["E", "getEvent", "<", ">", "(", ")", "{", "}", "@", "SuppressWarnings", "E", "type", "return", ";", "(", ")", "extends", "ApplicationEvent", "Class", "(", "E", ")", "\"", "unchecked", "\"", "<", "E", ">", ".", "get", ".", "get", "(", "0", ")", "this", ".", "events", "(", "type", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 62, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 23, "n_whitespaces": 18, "n_words": 18, "nloc": 4, "token_counts": 41}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1986-1986", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "configure", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#configure", "start_line": 1986, "end_line": 1986, "signature": "configure(Example example)", "original_code": "void configure(Example example);", "doc_comment": ""}, "code_tokens": ["void", "configure", ";", "(", ")", "Example", "example"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 11, "ast_depth": 5, "n_identifiers": 2, "vocab_size": 7, "n_whitespaces": 2, "n_words": 4, "nloc": 1, "token_counts": 7}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#1993-1998", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "example", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#example", "start_line": 1993, "end_line": 1998, "signature": "example(ObjectProvider<ExampleConfigurer> configurers)", "original_code": "@Bean\n\t\tExample example(ObjectProvider<ExampleConfigurer> configurers) {\n\t\t\tExample example = new Example();\n\t\t\tconfigurers.orderedStream().forEach((configurer) -> configurer.configure(example));\n\t\t\treturn example;\n\t\t}", "doc_comment": ""}, "code_tokens": ["Example", "example", "(", ")", "{", "}", "@", "Bean", "configurers", "Example", ";", ";", "return", "example", ";", "ObjectProvider", "example", "=", ".", "forEach", "<", "ExampleConfigurer", ">", "new", "Example", "configurers", ".", "orderedStream", "(", ")", "(", ")", "(", ")", "->", "(", "configurer", ")", "configurer", ".", "configure", "(", "example", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 67, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 23, "n_whitespaces": 28, "n_words": 19, "nloc": 6, "token_counts": 44}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#2008-2012", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "configurer", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#configurer", "start_line": 2008, "end_line": 2012, "signature": "configurer()", "original_code": "@Bean\n\t\tExampleConfigurer configurer() {\n\t\t\treturn (example) -> {\n\t\t\t};\n\t\t}", "doc_comment": ""}, "code_tokens": ["ExampleConfigurer", "configurer", "(", ")", "{", "}", "@", "Bean", "return", ";", "->", "(", "example", ")", "{", "}"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 26, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 12, "n_whitespaces": 19, "n_words": 5, "nloc": 5, "token_counts": 16}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#2023-2026", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "initialize", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#initialize", "start_line": 2023, "end_line": 2026, "signature": "initialize(ConfigurableApplicationContext applicationContext)", "original_code": "@Override\n\t\tpublic void initialize(ConfigurableApplicationContext applicationContext) {\n\t\t\tapplicationContext.getBeanFactory().registerSingleton(\"test\", \"test\");\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "initialize", "public", "(", ")", "{", "}", "@", "Override", "ConfigurableApplicationContext", "applicationContext", ";", ".", "registerSingleton", "applicationContext", ".", "getBeanFactory", "(", ",", ")", "(", ")", "\"", "test", "\"", "\"", "test", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 42, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 18, "n_whitespaces": 15, "n_words": 11, "nloc": 4, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#2032-2036", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "main", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#main", "start_line": 2032, "end_line": 2036, "signature": "main(String[] args)", "original_code": "static void main(String[] args) {\n\t\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\t\tapplication.run(args);\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "main", "static", "(", ")", "{", "}", "args", "SpringApplication", ";", ";", ";", "String", "application", "=", "application", ".", "setWebApplicationType", "application", ".", "run", "[", "]", "new", "SpringApplication", "(", ")", "(", "args", ")", "(", ")", "WebApplicationType", ".", "NONE", "ExampleConfig", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 58, "ast_depth": 9, "n_identifiers": 7, "vocab_size": 23, "n_whitespaces": 23, "n_words": 18, "nloc": 5, "token_counts": 38}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#2042-2057", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "main", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#main", "start_line": 2042, "end_line": 2057, "signature": "main(String[] args)", "original_code": "static void main(String[] args) {\n\t\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\t\tapplication.addListeners(new ApplicationListener<ApplicationEnvironmentPreparedEvent>() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic void onApplicationEvent(ApplicationEnvironmentPreparedEvent event) {\n\t\t\t\t\tSpringApplicationBuilder builder = new SpringApplicationBuilder(\n\t\t\t\t\t\t\tInnerApplicationConfiguration.class);\n\t\t\t\t\tbuilder.web(WebApplicationType.NONE);\n\t\t\t\t\tbuilder.run().close();\n\t\t\t\t}\n\n\t\t\t});\n\t\t\tapplication.run(args);\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "main", "static", "(", ")", "{", "}", "args", "SpringApplication", ";", ";", ";", ";", "String", "application", "=", "application", ".", "setWebApplicationType", "application", ".", "addListeners", "application", ".", "run", "[", "]", "new", "SpringApplication", "(", ")", "(", ")", "(", "args", ")", "(", ")", "WebApplicationType", ".", "NONE", "new", "ExampleConfig", ".", "class", "ApplicationListener", "(", ")", "{", "}", "<", "ApplicationEnvironmentPreparedEvent", ">", "void", "onApplicationEvent", "public", "(", ")", "{", "}", "@", "Override", "ApplicationEnvironmentPreparedEvent", "event", "SpringApplicationBuilder", ";", ";", ";", "builder", "=", "builder", ".", "web", ".", "close", "new", "SpringApplicationBuilder", "(", ")", "builder", ".", "run", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "InnerApplicationConfiguration", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 142, "ast_depth": 16, "n_identifiers": 14, "vocab_size": 38, "n_whitespaces": 84, "n_words": 42, "nloc": 14, "token_counts": 94}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#2047-2053", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "onApplicationEvent", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#onApplicationEvent", "start_line": 2047, "end_line": 2053, "signature": "onApplicationEvent(ApplicationEnvironmentPreparedEvent event)", "original_code": "@Override\n\t\t\t\tpublic void onApplicationEvent(ApplicationEnvironmentPreparedEvent event) {\n\t\t\t\t\tSpringApplicationBuilder builder = new SpringApplicationBuilder(\n\t\t\t\t\t\t\tInnerApplicationConfiguration.class);\n\t\t\t\t\tbuilder.web(WebApplicationType.NONE);\n\t\t\t\t\tbuilder.run().close();\n\t\t\t\t}", "doc_comment": ""}, "code_tokens": ["void", "onApplicationEvent", "public", "(", ")", "{", "}", "@", "Override", "ApplicationEnvironmentPreparedEvent", "event", "SpringApplicationBuilder", ";", ";", ";", "builder", "=", "builder", ".", "web", ".", "close", "new", "SpringApplicationBuilder", "(", ")", "builder", ".", "run", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "InnerApplicationConfiguration", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 62, "ast_depth": 9, "n_identifiers": 9, "vocab_size": 24, "n_whitespaces": 44, "n_words": 19, "nloc": 7, "token_counts": 41}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java#2092-2096", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java", "language": "Java"}, "method": {"name": "example", "qualified_name": "test.java.org.springframework.boot.SpringApplicationTests#example", "start_line": 2092, "end_line": 2096, "signature": "example()", "original_code": "@Bean\n\t\t@Profile(\"custom\")\n\t\tExample example() {\n\t\t\treturn new Example();\n\t\t}", "doc_comment": ""}, "code_tokens": ["Example", "example", "(", ")", "{", "}", "@", "Bean", "@", "Profile", "return", ";", "(", ")", "new", "Example", "\"", "custom", "\"", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 33, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 17, "n_words": 8, "nloc": 5, "token_counts": 21}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/env/DefaultPropertiesPropertySourceTests.java#49-52", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/DefaultPropertiesPropertySourceTests.java", "language": "Java"}, "method": {"name": "nameIsDefaultProperties", "qualified_name": "test.java.org.springframework.boot.env.DefaultPropertiesPropertySourceTests#nameIsDefaultProperties", "start_line": 49, "end_line": 52, "signature": "nameIsDefaultProperties()", "original_code": "@Test\n\tvoid nameIsDefaultProperties() {\n\t\tassertThat(DefaultPropertiesPropertySource.NAME).isEqualTo(\"defaultProperties\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "nameIsDefaultProperties", "(", ")", "{", "}", "@", "Test", ";", ".", "isEqualTo", "assertThat", "(", ")", "(", ")", "\"", "defaultProperties", "\"", "DefaultPropertiesPropertySource", ".", "NAME"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 35, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 16, "n_whitespaces": 9, "n_words": 8, "nloc": 4, "token_counts": 22}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/env/DefaultPropertiesPropertySourceTests.java#54-60", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/DefaultPropertiesPropertySourceTests.java", "language": "Java"}, "method": {"name": "createCreatesSource", "qualified_name": "test.java.org.springframework.boot.env.DefaultPropertiesPropertySourceTests#createCreatesSource", "start_line": 54, "end_line": 60, "signature": "createCreatesSource()", "original_code": "@Test\n\tvoid createCreatesSource() {\n\t\tDefaultPropertiesPropertySource propertySource = new DefaultPropertiesPropertySource(\n\t\t\t\tCollections.singletonMap(\"spring\", \"boot\"));\n\t\tassertThat(propertySource.getName()).isEqualTo(\"defaultProperties\");\n\t\tassertThat(propertySource.getProperty(\"spring\")).isEqualTo(\"boot\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "createCreatesSource", "(", ")", "{", "}", "@", "Test", "DefaultPropertiesPropertySource", ";", ";", ";", "propertySource", "=", ".", "isEqualTo", ".", "isEqualTo", "new", "DefaultPropertiesPropertySource", "assertThat", "(", ")", "assertThat", "(", ")", "(", ")", "(", ")", "\"", "defaultProperties", "\"", "(", ")", "\"", "boot", "\"", "Collections", ".", "singletonMap", "propertySource", ".", "getName", "propertySource", ".", "getProperty", "(", ",", ")", "(", ")", "(", ")", "\"", "spring", "\"", "\"", "boot", "\"", "\"", "spring", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 94, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 25, "n_whitespaces": 25, "n_words": 22, "nloc": 7, "token_counts": 63}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/env/DefaultPropertiesPropertySourceTests.java#62-66", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/DefaultPropertiesPropertySourceTests.java", "language": "Java"}, "method": {"name": "hasMatchingNameWhenNameMatchesReturnsTrue", "qualified_name": "test.java.org.springframework.boot.env.DefaultPropertiesPropertySourceTests#hasMatchingNameWhenNameMatchesReturnsTrue", "start_line": 62, "end_line": 66, "signature": "hasMatchingNameWhenNameMatchesReturnsTrue()", "original_code": "@Test\n\tvoid hasMatchingNameWhenNameMatchesReturnsTrue() {\n\t\tMockPropertySource propertySource = new MockPropertySource(\"defaultProperties\");\n\t\tassertThat(DefaultPropertiesPropertySource.hasMatchingName(propertySource)).isTrue();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "hasMatchingNameWhenNameMatchesReturnsTrue", "(", ")", "{", "}", "@", "Test", "MockPropertySource", ";", ";", "propertySource", "=", ".", "isTrue", "new", "MockPropertySource", "assertThat", "(", ")", "(", ")", "(", ")", "\"", "defaultProperties", "\"", "DefaultPropertiesPropertySource", ".", "hasMatchingName", "(", "propertySource", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 51, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 20, "n_whitespaces": 16, "n_words": 13, "nloc": 5, "token_counts": 33}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/env/DefaultPropertiesPropertySourceTests.java#68-72", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/DefaultPropertiesPropertySourceTests.java", "language": "Java"}, "method": {"name": "hasMatchingNameWhenNameDoesNotMatchReturnsFalse", "qualified_name": "test.java.org.springframework.boot.env.DefaultPropertiesPropertySourceTests#hasMatchingNameWhenNameDoesNotMatchReturnsFalse", "start_line": 68, "end_line": 72, "signature": "hasMatchingNameWhenNameDoesNotMatchReturnsFalse()", "original_code": "@Test\n\tvoid hasMatchingNameWhenNameDoesNotMatchReturnsFalse() {\n\t\tMockPropertySource propertySource = new MockPropertySource(\"normalProperties\");\n\t\tassertThat(DefaultPropertiesPropertySource.hasMatchingName(propertySource)).isFalse();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "hasMatchingNameWhenNameDoesNotMatchReturnsFalse", "(", ")", "{", "}", "@", "Test", "MockPropertySource", ";", ";", "propertySource", "=", ".", "isFalse", "new", "MockPropertySource", "assertThat", "(", ")", "(", ")", "(", ")", "\"", "normalProperties", "\"", "DefaultPropertiesPropertySource", ".", "hasMatchingName", "(", "propertySource", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 51, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 20, "n_whitespaces": 16, "n_words": 13, "nloc": 5, "token_counts": 33}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/env/DefaultPropertiesPropertySourceTests.java#74-77", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/DefaultPropertiesPropertySourceTests.java", "language": "Java"}, "method": {"name": "hasMatchingNameWhenPropertySourceIsNullReturnsFalse", "qualified_name": "test.java.org.springframework.boot.env.DefaultPropertiesPropertySourceTests#hasMatchingNameWhenPropertySourceIsNullReturnsFalse", "start_line": 74, "end_line": 77, "signature": "hasMatchingNameWhenPropertySourceIsNullReturnsFalse()", "original_code": "@Test\n\tvoid hasMatchingNameWhenPropertySourceIsNullReturnsFalse() {\n\t\tassertThat(DefaultPropertiesPropertySource.hasMatchingName(null)).isFalse();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "hasMatchingNameWhenPropertySourceIsNullReturnsFalse", "(", ")", "{", "}", "@", "Test", ";", ".", "isFalse", "assertThat", "(", ")", "(", ")", "DefaultPropertiesPropertySource", ".", "hasMatchingName", "(", "null", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 35, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 15, "n_whitespaces": 9, "n_words": 8, "nloc": 4, "token_counts": 22}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/env/DefaultPropertiesPropertySourceTests.java#79-83", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/DefaultPropertiesPropertySourceTests.java", "language": "Java"}, "method": {"name": "ifNotEmptyWhenNullDoesNotCallAction", "qualified_name": "test.java.org.springframework.boot.env.DefaultPropertiesPropertySourceTests#ifNotEmptyWhenNullDoesNotCallAction", "start_line": 79, "end_line": 83, "signature": "ifNotEmptyWhenNullDoesNotCallAction()", "original_code": "@Test\n\tvoid ifNotEmptyWhenNullDoesNotCallAction() {\n\t\tDefaultPropertiesPropertySource.ifNotEmpty(null, this.action);\n\t\tthen(this.action).shouldHaveNoInteractions();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "ifNotEmptyWhenNullDoesNotCallAction", "(", ")", "{", "}", "@", "Test", ";", ";", "DefaultPropertiesPropertySource", ".", "ifNotEmpty", ".", "shouldHaveNoInteractions", "(", "null", ",", ")", "then", "(", ")", "this", ".", "action", "(", ")", "this", ".", "action"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 46, "ast_depth": 9, "n_identifiers": 7, "vocab_size": 18, "n_whitespaces": 13, "n_words": 12, "nloc": 5, "token_counts": 30}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/env/DefaultPropertiesPropertySourceTests.java#85-89", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/DefaultPropertiesPropertySourceTests.java", "language": "Java"}, "method": {"name": "ifNotEmptyWhenEmptyDoesNotCallAction", "qualified_name": "test.java.org.springframework.boot.env.DefaultPropertiesPropertySourceTests#ifNotEmptyWhenEmptyDoesNotCallAction", "start_line": 85, "end_line": 89, "signature": "ifNotEmptyWhenEmptyDoesNotCallAction()", "original_code": "@Test\n\tvoid ifNotEmptyWhenEmptyDoesNotCallAction() {\n\t\tDefaultPropertiesPropertySource.ifNotEmpty(Collections.emptyMap(), this.action);\n\t\tthen(this.action).shouldHaveNoInteractions();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "ifNotEmptyWhenEmptyDoesNotCallAction", "(", ")", "{", "}", "@", "Test", ";", ";", "DefaultPropertiesPropertySource", ".", "ifNotEmpty", ".", "shouldHaveNoInteractions", "(", ",", ")", "then", "(", ")", "Collections", ".", "emptyMap", "this", ".", "action", "(", ")", "(", ")", "this", ".", "action"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 52, "ast_depth": 9, "n_identifiers": 9, "vocab_size": 19, "n_whitespaces": 13, "n_words": 13, "nloc": 5, "token_counts": 34}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/env/DefaultPropertiesPropertySourceTests.java#91-96", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/DefaultPropertiesPropertySourceTests.java", "language": "Java"}, "method": {"name": "ifNotEmptyHasValueCallsAction", "qualified_name": "test.java.org.springframework.boot.env.DefaultPropertiesPropertySourceTests#ifNotEmptyHasValueCallsAction", "start_line": 91, "end_line": 96, "signature": "ifNotEmptyHasValueCallsAction()", "original_code": "@Test\n\tvoid ifNotEmptyHasValueCallsAction() {\n\t\tDefaultPropertiesPropertySource.ifNotEmpty(Collections.singletonMap(\"spring\", \"boot\"), this.action);\n\t\tthen(this.action).should()\n\t\t\t.accept(assertArg((properties) -> assertThat(properties.getProperty(\"spring\")).isEqualTo(\"boot\")));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "ifNotEmptyHasValueCallsAction", "(", ")", "{", "}", "@", "Test", ";", ";", "DefaultPropertiesPropertySource", ".", "ifNotEmpty", ".", "accept", "(", ",", ")", ".", "should", "(", ")", "Collections", ".", "singletonMap", "this", ".", "action", "then", "(", ")", "assertArg", "(", ",", ")", "(", ")", "(", ")", "\"", "spring", "\"", "\"", "boot", "\"", "this", ".", "action", "->", "(", "properties", ")", ".", "isEqualTo", "assertThat", "(", ")", "(", ")", "\"", "boot", "\"", "properties", ".", "getProperty", "(", ")", "\"", "spring", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 104, "ast_depth": 16, "n_identifiers": 15, "vocab_size": 29, "n_whitespaces": 20, "n_words": 24, "nloc": 6, "token_counts": 70}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/env/DefaultPropertiesPropertySourceTests.java#98-102", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/DefaultPropertiesPropertySourceTests.java", "language": "Java"}, "method": {"name": "moveToEndWhenNotPresentDoesNothing", "qualified_name": "test.java.org.springframework.boot.env.DefaultPropertiesPropertySourceTests#moveToEndWhenNotPresentDoesNothing", "start_line": 98, "end_line": 102, "signature": "moveToEndWhenNotPresentDoesNothing()", "original_code": "@Test\n\tvoid moveToEndWhenNotPresentDoesNothing() {\n\t\tMockEnvironment environment = new MockEnvironment();\n\t\tDefaultPropertiesPropertySource.moveToEnd(environment);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "moveToEndWhenNotPresentDoesNothing", "(", ")", "{", "}", "@", "Test", "MockEnvironment", ";", ";", "environment", "=", "DefaultPropertiesPropertySource", ".", "moveToEnd", "new", "MockEnvironment", "(", "environment", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 36, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 16, "n_whitespaces": 16, "n_words": 10, "nloc": 5, "token_counts": 23}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/env/DefaultPropertiesPropertySourceTests.java#104-111", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/DefaultPropertiesPropertySourceTests.java", "language": "Java"}, "method": {"name": "addOrMergeWhenExistingNotFoundShouldAdd", "qualified_name": "test.java.org.springframework.boot.env.DefaultPropertiesPropertySourceTests#addOrMergeWhenExistingNotFoundShouldAdd", "start_line": 104, "end_line": 111, "signature": "addOrMergeWhenExistingNotFoundShouldAdd()", "original_code": "@Test\n\tvoid addOrMergeWhenExistingNotFoundShouldAdd() {\n\t\tMockEnvironment environment = new MockEnvironment();\n\t\tMutablePropertySources propertySources = environment.getPropertySources();\n\t\tDefaultPropertiesPropertySource.addOrMerge(Collections.singletonMap(\"spring\", \"boot\"), propertySources);\n\t\tassertThat(propertySources.contains(DefaultPropertiesPropertySource.NAME)).isTrue();\n\t\tassertThat(propertySources.get(DefaultPropertiesPropertySource.NAME).getProperty(\"spring\")).isEqualTo(\"boot\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "addOrMergeWhenExistingNotFoundShouldAdd", "(", ")", "{", "}", "@", "Test", "MockEnvironment", ";", "MutablePropertySources", ";", ";", ";", ";", "environment", "=", "propertySources", "=", "DefaultPropertiesPropertySource", ".", "addOrMerge", ".", "isTrue", ".", "isEqualTo", "new", "MockEnvironment", "environment", ".", "getPropertySources", "(", ",", "propertySources", ")", "assertThat", "(", ")", "assertThat", "(", ")", "(", ")", "(", ")", "Collections", ".", "singletonMap", "(", ")", "(", ")", "\"", "boot", "\"", "(", ",", ")", "propertySources", ".", "contains", ".", "getProperty", "\"", "spring", "\"", "\"", "boot", "\"", "(", ")", "propertySources", ".", "get", "(", ")", "DefaultPropertiesPropertySource", ".", "NAME", "(", ")", "\"", "spring", "\"", "DefaultPropertiesPropertySource", ".", "NAME"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 128, "ast_depth": 12, "n_identifiers": 16, "vocab_size": 32, "n_whitespaces": 30, "n_words": 33, "nloc": 8, "token_counts": 87}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/env/DefaultPropertiesPropertySourceTests.java#113-122", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/DefaultPropertiesPropertySourceTests.java", "language": "Java"}, "method": {"name": "addOrMergeWhenExistingFoundShouldMerge", "qualified_name": "test.java.org.springframework.boot.env.DefaultPropertiesPropertySourceTests#addOrMergeWhenExistingFoundShouldMerge", "start_line": 113, "end_line": 122, "signature": "addOrMergeWhenExistingFoundShouldMerge()", "original_code": "@Test\n\tvoid addOrMergeWhenExistingFoundShouldMerge() {\n\t\tMockEnvironment environment = new MockEnvironment();\n\t\tMutablePropertySources propertySources = environment.getPropertySources();\n\t\tpropertySources.addLast(new DefaultPropertiesPropertySource(Collections.singletonMap(\"spring\", \"boot\")));\n\t\tDefaultPropertiesPropertySource.addOrMerge(Collections.singletonMap(\"hello\", \"world\"), propertySources);\n\t\tassertThat(propertySources.contains(DefaultPropertiesPropertySource.NAME)).isTrue();\n\t\tassertThat(propertySources.get(DefaultPropertiesPropertySource.NAME).getProperty(\"spring\")).isEqualTo(\"boot\");\n\t\tassertThat(propertySources.get(DefaultPropertiesPropertySource.NAME).getProperty(\"hello\")).isEqualTo(\"world\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "addOrMergeWhenExistingFoundShouldMerge", "(", ")", "{", "}", "@", "Test", "MockEnvironment", ";", "MutablePropertySources", ";", ";", ";", ";", ";", ";", "environment", "=", "propertySources", "=", "propertySources", ".", "addLast", "DefaultPropertiesPropertySource", ".", "addOrMerge", ".", "isTrue", ".", "isEqualTo", ".", "isEqualTo", "new", "MockEnvironment", "environment", ".", "getPropertySources", "(", ")", "(", ",", "propertySources", ")", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "(", ")", "(", ")", "new", "DefaultPropertiesPropertySource", "Collections", ".", "singletonMap", "(", ")", "(", ")", "\"", "boot", "\"", "(", ")", "\"", "world", "\"", "(", ")", "(", ",", ")", "propertySources", ".", "contains", ".", "getProperty", ".", "getProperty", "Collections", ".", "singletonMap", "\"", "hello", "\"", "\"", "world", "\"", "(", ")", "propertySources", ".", "get", "(", ")", "propertySources", ".", "get", "(", ")", "(", ",", ")", "DefaultPropertiesPropertySource", ".", "NAME", "(", ")", "\"", "spring", "\"", "(", ")", "\"", "hello", "\"", "\"", "spring", "\"", "\"", "boot", "\"", "DefaultPropertiesPropertySource", ".", "NAME", "DefaultPropertiesPropertySource", ".", "NAME"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 197, "ast_depth": 12, "n_identifiers": 17, "vocab_size": 35, "n_whitespaces": 38, "n_words": 50, "nloc": 10, "token_counts": 135}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/env/DefaultPropertiesPropertySourceTests.java#124-135", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/DefaultPropertiesPropertySourceTests.java", "language": "Java"}, "method": {"name": "addOrMergeWhenExistingNotMapPropertySourceShouldNotMerge", "qualified_name": "test.java.org.springframework.boot.env.DefaultPropertiesPropertySourceTests#addOrMergeWhenExistingNotMapPropertySourceShouldNotMerge", "start_line": 124, "end_line": 135, "signature": "addOrMergeWhenExistingNotMapPropertySourceShouldNotMerge()", "original_code": "@Test\n\tvoid addOrMergeWhenExistingNotMapPropertySourceShouldNotMerge() {\n\t\tMockEnvironment environment = new MockEnvironment();\n\t\tMutablePropertySources propertySources = environment.getPropertySources();\n\t\tCompositePropertySource composite = new CompositePropertySource(DefaultPropertiesPropertySource.NAME);\n\t\tcomposite.addPropertySource(new DefaultPropertiesPropertySource(Collections.singletonMap(\"spring\", \"boot\")));\n\t\tpropertySources.addFirst(composite);\n\t\tDefaultPropertiesPropertySource.addOrMerge(Collections.singletonMap(\"hello\", \"world\"), propertySources);\n\t\tassertThat(propertySources.contains(DefaultPropertiesPropertySource.NAME)).isTrue();\n\t\tassertThat(propertySources.get(DefaultPropertiesPropertySource.NAME).getProperty(\"spring\")).isNull();\n\t\tassertThat(propertySources.get(DefaultPropertiesPropertySource.NAME).getProperty(\"hello\")).isEqualTo(\"world\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "addOrMergeWhenExistingNotMapPropertySourceShouldNotMerge", "(", ")", "{", "}", "@", "Test", "MockEnvironment", ";", "MutablePropertySources", ";", "CompositePropertySource", ";", ";", ";", ";", ";", ";", ";", "environment", "=", "propertySources", "=", "composite", "=", "composite", ".", "addPropertySource", "propertySources", ".", "addFirst", "DefaultPropertiesPropertySource", ".", "addOrMerge", ".", "isTrue", ".", "isNull", ".", "isEqualTo", "new", "MockEnvironment", "environment", ".", "getPropertySources", "new", "CompositePropertySource", "(", ")", "(", "composite", ")", "(", ",", "propertySources", ")", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "(", ")", "(", ")", "(", ")", "new", "DefaultPropertiesPropertySource", "Collections", ".", "singletonMap", "(", ")", "(", ")", "(", ")", "\"", "world", "\"", "DefaultPropertiesPropertySource", ".", "NAME", "(", ")", "(", ",", ")", "propertySources", ".", "contains", ".", "getProperty", ".", "getProperty", "Collections", ".", "singletonMap", "\"", "hello", "\"", "\"", "world", "\"", "(", ")", "propertySources", ".", "get", "(", ")", "propertySources", ".", "get", "(", ")", "(", ",", ")", "DefaultPropertiesPropertySource", ".", "NAME", "(", ")", "\"", "spring", "\"", "(", ")", "\"", "hello", "\"", "\"", "spring", "\"", "\"", "boot", "\"", "DefaultPropertiesPropertySource", ".", "NAME", "DefaultPropertiesPropertySource", ".", "NAME"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 219, "ast_depth": 12, "n_identifiers": 20, "vocab_size": 39, "n_whitespaces": 48, "n_words": 58, "nloc": 12, "token_counts": 150}}
{"dataset_split": "train", "id": "spring-boot@c53ea0a:core/spring-boot/src/test/java/org/springframework/boot/env/DefaultPropertiesPropertySourceTests.java#137-147", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c53ea0a08c24f27a4086ebbca88f3a86f5336a75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/env/DefaultPropertiesPropertySourceTests.java", "language": "Java"}, "method": {"name": "moveToEndWhenPresentMovesToEnd", "qualified_name": "test.java.org.springframework.boot.env.DefaultPropertiesPropertySourceTests#moveToEndWhenPresentMovesToEnd", "start_line": 137, "end_line": 147, "signature": "moveToEndWhenPresentMovesToEnd()", "original_code": "@Test\n\tvoid moveToEndWhenPresentMovesToEnd() {\n\t\tMockEnvironment environment = new MockEnvironment();\n\t\tMutablePropertySources propertySources = environment.getPropertySources();\n\t\tpropertySources.addLast(new DefaultPropertiesPropertySource(Collections.singletonMap(\"spring\", \"boot\")));\n\t\tpropertySources.addLast(new MockPropertySource(\"test\"));\n\t\tDefaultPropertiesPropertySource.moveToEnd(environment);\n\t\tString[] names = propertySources.stream().map(PropertySource::getName).toArray(String[]::new);\n\t\tassertThat(names).containsExactly(MockPropertySource.MOCK_PROPERTIES_PROPERTY_SOURCE_NAME, \"test\",\n\t\t\t\tDefaultPropertiesPropertySource.NAME);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "moveToEndWhenPresentMovesToEnd", "(", ")", "{", "}", "@", "Test", "MockEnvironment", ";", "MutablePropertySources", ";", ";", ";", ";", ";", ";", "environment", "=", "propertySources", "=", "propertySources", ".", "addLast", "propertySources", ".", "addLast", "DefaultPropertiesPropertySource", ".", "moveToEnd", "String", "names", "=", ".", "containsExactly", "new", "MockEnvironment", "environment", ".", "getPropertySources", "(", ")", "(", ")", "(", "environment", ")", "[", "]", ".", "toArray", "assertThat", "(", ",", ",", ")", "(", ")", "(", ")", "new", "DefaultPropertiesPropertySource", "new", "MockPropertySource", ".", "map", "(", ")", "(", "names", ")", "MockPropertySource", ".", "MOCK_PROPERTIES_PROPERTY_SOURCE_NAME", "\"", "test", "\"", "DefaultPropertiesPropertySource", ".", "NAME", "(", ")", "(", ")", "propertySources", ".", "stream", "(", ")", "::", "new", "Collections", ".", "singletonMap", "\"", "test", "\"", "(", ")", "PropertySource", "::", "getName", "String", "(", ",", ")", "[", "]", "\"", "spring", "\"", "\"", "boot", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 168, "ast_depth": 12, "n_identifiers": 21, "vocab_size": 42, "n_whitespaces": 46, "n_words": 45, "nloc": 11, "token_counts": 114}}
{"dataset_split": "train", "id": "spring-boot@1acda68:core/spring-boot/src/main/java/org/springframework/boot/support/AnsiOutputApplicationListener.java#39-46", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "1acda68d39a1f464bddd42ef10becf04a17dbaca", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/AnsiOutputApplicationListener.java", "language": "Java"}, "method": {"name": "onApplicationEvent", "qualified_name": "org.springframework.boot.support.AnsiOutputApplicationListener#onApplicationEvent", "start_line": 39, "end_line": 46, "signature": "onApplicationEvent(ApplicationEnvironmentPreparedEvent event)", "original_code": "@Override\n\tpublic void onApplicationEvent(ApplicationEnvironmentPreparedEvent event) {\n\t\tConfigurableEnvironment environment = event.getEnvironment();\n\t\tBinder.get(environment)\n\t\t\t.bind(\"spring.output.ansi.enabled\", AnsiOutput.Enabled.class)\n\t\t\t.ifBound(AnsiOutput::setEnabled);\n\t\tAnsiOutput.setConsoleAvailable(environment.getProperty(\"spring.output.ansi.console-available\", Boolean.class));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "onApplicationEvent", "public", "(", ")", "{", "}", "@", "Override", "ApplicationEnvironmentPreparedEvent", "event", "ConfigurableEnvironment", ";", ";", ";", "environment", "=", ".", "ifBound", "AnsiOutput", ".", "setConsoleAvailable", "event", ".", "getEnvironment", ".", "bind", "(", ")", "(", ")", "(", ")", "Binder", ".", "get", "(", ",", ")", "AnsiOutput", "::", "setEnabled", "environment", ".", "getProperty", "(", "environment", ")", "\"", "spring.output.ansi.enabled", "\"", ".", "class", "(", ",", ")", "AnsiOutput", ".", "Enabled", "\"", "spring.output.ansi.console-available", "\"", "Boolean", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 94, "ast_depth": 10, "n_identifiers": 13, "vocab_size": 33, "n_whitespaces": 30, "n_words": 35, "nloc": 8, "token_counts": 65}}
{"dataset_split": "train", "id": "spring-boot@1acda68:core/spring-boot/src/main/java/org/springframework/boot/support/AnsiOutputApplicationListener.java#48-52", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "1acda68d39a1f464bddd42ef10becf04a17dbaca", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/AnsiOutputApplicationListener.java", "language": "Java"}, "method": {"name": "getOrder", "qualified_name": "org.springframework.boot.support.AnsiOutputApplicationListener#getOrder", "start_line": 48, "end_line": 52, "signature": "getOrder()", "original_code": "@Override\n\tpublic int getOrder() {\n\t\t// Apply after EnvironmentPostProcessorApplicationListener\n\t\treturn EnvironmentPostProcessorApplicationListener.DEFAULT_ORDER + 1;\n\t}", "doc_comment": ""}, "code_tokens": ["getOrder", "public", "int", "(", ")", "{", "// Apply after EnvironmentPostProcessorApplicationListener", "}", "@", "Override", "return", ";", "+", "1", "EnvironmentPostProcessorApplicationListener", ".", "DEFAULT_ORDER"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 27, "ast_depth": 7, "n_identifiers": 4, "vocab_size": 17, "n_whitespaces": 19, "n_words": 11, "nloc": 5, "token_counts": 17}}
{"dataset_split": "train", "id": "spring-boot@1acda68:core/spring-boot/src/test/java/org/springframework/boot/support/AnsiOutputApplicationListenerTests.java#46-49", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "1acda68d39a1f464bddd42ef10becf04a17dbaca", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/AnsiOutputApplicationListenerTests.java", "language": "Java"}, "method": {"name": "resetAnsi", "qualified_name": "test.java.org.springframework.boot.support.AnsiOutputApplicationListenerTests#resetAnsi", "start_line": 46, "end_line": 49, "signature": "resetAnsi()", "original_code": "@BeforeEach\n\tvoid resetAnsi() {\n\t\tAnsiOutput.setEnabled(Enabled.DETECT);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "resetAnsi", "(", ")", "{", "}", "@", "BeforeEach", ";", "AnsiOutput", ".", "setEnabled", "(", ")", "Enabled", ".", "DETECT"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 27, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 14, "n_whitespaces": 9, "n_words": 7, "nloc": 4, "token_counts": 17}}
{"dataset_split": "train", "id": "spring-boot@1acda68:core/spring-boot/src/test/java/org/springframework/boot/support/AnsiOutputApplicationListenerTests.java#51-57", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "1acda68d39a1f464bddd42ef10becf04a17dbaca", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/AnsiOutputApplicationListenerTests.java", "language": "Java"}, "method": {"name": "cleanUp", "qualified_name": "test.java.org.springframework.boot.support.AnsiOutputApplicationListenerTests#cleanUp", "start_line": 51, "end_line": 57, "signature": "cleanUp()", "original_code": "@AfterEach\n\tvoid cleanUp() {\n\t\tresetAnsi();\n\t\tif (this.context != null) {\n\t\t\tthis.context.close();\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "cleanUp", "(", ")", "{", "}", "@", "AfterEach", ";", "if", "resetAnsi", "(", ")", "{", "}", "(", ")", "!=", "null", ";", "this", ".", "context", ".", "close", "this", ".", "context", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 48, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 17, "n_whitespaces": 23, "n_words": 11, "nloc": 7, "token_counts": 30}}
{"dataset_split": "train", "id": "spring-boot@1acda68:core/spring-boot/src/test/java/org/springframework/boot/support/AnsiOutputApplicationListenerTests.java#59-68", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "1acda68d39a1f464bddd42ef10becf04a17dbaca", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/AnsiOutputApplicationListenerTests.java", "language": "Java"}, "method": {"name": "enabled", "qualified_name": "test.java.org.springframework.boot.support.AnsiOutputApplicationListenerTests#enabled", "start_line": 59, "end_line": 68, "signature": "enabled()", "original_code": "@Test\n\tvoid enabled() {\n\t\tSpringApplication application = new SpringApplication(Config.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tMap<String, Object> props = new HashMap<>();\n\t\tprops.put(\"spring.output.ansi.enabled\", \"ALWAYS\");\n\t\tapplication.setDefaultProperties(props);\n\t\tthis.context = application.run();\n\t\tassertThat(AnsiOutputEnabledValue.get()).isEqualTo(Enabled.ALWAYS);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "enabled", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "Map", "props", "=", "props", ".", "put", "application", ".", "setDefaultProperties", "=", ".", "isEqualTo", "new", "SpringApplication", "(", ")", "<", "String", ",", "Object", ">", "new", "(", ",", ")", "(", "props", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "HashMap", "(", ")", "\"", "spring.output.ansi.enabled", "\"", "\"", "ALWAYS", "\"", "(", ")", "(", ")", "Enabled", ".", "ALWAYS", "Config", ".", "class", "<", ">", "AnsiOutputEnabledValue", ".", "get", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 133, "ast_depth": 10, "n_identifiers": 17, "vocab_size": 40, "n_whitespaces": 39, "n_words": 39, "nloc": 10, "token_counts": 89}}
{"dataset_split": "train", "id": "spring-boot@1acda68:core/spring-boot/src/test/java/org/springframework/boot/support/AnsiOutputApplicationListenerTests.java#70-79", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "1acda68d39a1f464bddd42ef10becf04a17dbaca", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/AnsiOutputApplicationListenerTests.java", "language": "Java"}, "method": {"name": "disabled", "qualified_name": "test.java.org.springframework.boot.support.AnsiOutputApplicationListenerTests#disabled", "start_line": 70, "end_line": 79, "signature": "disabled()", "original_code": "@Test\n\tvoid disabled() {\n\t\tSpringApplication application = new SpringApplication(Config.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tMap<String, Object> props = new HashMap<>();\n\t\tprops.put(\"spring.output.ansi.enabled\", \"never\");\n\t\tapplication.setDefaultProperties(props);\n\t\tthis.context = application.run();\n\t\tassertThat(AnsiOutputEnabledValue.get()).isEqualTo(Enabled.NEVER);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "disabled", "(", ")", "{", "}", "@", "Test", "SpringApplication", ";", ";", ";", ";", ";", ";", ";", "application", "=", "application", ".", "setWebApplicationType", "Map", "props", "=", "props", ".", "put", "application", ".", "setDefaultProperties", "=", ".", "isEqualTo", "new", "SpringApplication", "(", ")", "<", "String", ",", "Object", ">", "new", "(", ",", ")", "(", "props", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "(", ")", "WebApplicationType", ".", "NONE", "HashMap", "(", ")", "\"", "spring.output.ansi.enabled", "\"", "\"", "never", "\"", "(", ")", "(", ")", "Enabled", ".", "NEVER", "Config", ".", "class", "<", ">", "AnsiOutputEnabledValue", ".", "get", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 133, "ast_depth": 10, "n_identifiers": 17, "vocab_size": 41, "n_whitespaces": 39, "n_words": 39, "nloc": 10, "token_counts": 89}}
{"dataset_split": "train", "id": "spring-boot@1acda68:core/spring-boot/src/test/java/org/springframework/boot/support/AnsiOutputApplicationListenerTests.java#81-88", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "1acda68d39a1f464bddd42ef10becf04a17dbaca", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/support/AnsiOutputApplicationListenerTests.java", "language": "Java"}, "method": {"name": "disabledViaApplicationProperties", "qualified_name": "test.java.org.springframework.boot.support.AnsiOutputApplicationListenerTests#disabledViaApplicationProperties", "start_line": 81, "end_line": 88, "signature": "disabledViaApplicationProperties()", "original_code": "@Test\n\t@WithResource(name = \"application.properties\", content = \"spring.output.ansi.enabled=never\")\n\tvoid disabledViaApplicationProperties() {\n\t\tSpringApplication application = new SpringApplication(Config.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tthis.context = application.run();\n\t\tassertThat(AnsiOutputEnabledValue.get()).isEqualTo(Enabled.NEVER);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "disabledViaApplicationProperties", "(", ")", "{", "}", "@", "Test", "@", "WithResource", "SpringApplication", ";", ";", ";", ";", "(", ",", ")", "application", "=", "application", ".", "setWebApplicationType", "=", ".", "isEqualTo", "name", "=", "content", "=", "new", "SpringApplication", "(", ")", "this", ".", "context", "application", ".", "run", "assertThat", "(", ")", "\"", "application.properties", "\"", "\"", "spring.output.ansi.enabled=never", "\"", "(", ")", "WebApplicationType", ".", "NONE", "(", ")", "(", ")", "Enabled", ".", "NEVER", "Config", ".", "class", "AnsiOutputEnabledValue", ".", "get", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 103, "ast_depth": 10, "n_identifiers": 17, "vocab_size": 35, "n_whitespaces": 31, "n_words": 33, "nloc": 8, "token_counts": 69}}
{"dataset_split": "train", "id": "spring-boot@1acda68:module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/RemoteSpringApplication.java#55-64", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "1acda68d39a1f464bddd42ef10becf04a17dbaca", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/RemoteSpringApplication.java", "language": "Java"}, "method": {"name": "run", "qualified_name": "org.springframework.boot.devtools.RemoteSpringApplication#run", "start_line": 55, "end_line": 64, "signature": "run(String[] args)", "original_code": "private void run(String[] args) {\n\t\tRestarter.initialize(args, RestartInitializer.NONE);\n\t\tSpringApplication application = new SpringApplication(RemoteClientConfiguration.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tapplication.setBanner(getBanner());\n\t\tapplication.setInitializers(getInitializers());\n\t\tapplication.setListeners(getListeners());\n\t\tapplication.run(args);\n\t\twaitIndefinitely();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "run", "private", "(", ")", "{", "}", "args", ";", "SpringApplication", ";", ";", ";", ";", ";", ";", ";", "String", "Restarter", ".", "initialize", "application", "=", "application", ".", "setWebApplicationType", "application", ".", "setBanner", "application", ".", "setInitializers", "application", ".", "setListeners", "application", ".", "run", "waitIndefinitely", "[", "]", "(", "args", ",", ")", "new", "SpringApplication", "(", ")", "(", ")", "(", ")", "(", ")", "(", "args", ")", "(", ")", "RestartInitializer", ".", "NONE", "(", ")", "WebApplicationType", ".", "NONE", "getBanner", "getInitializers", "getListeners", "RemoteClientConfiguration", ".", "class", "(", ")", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 122, "ast_depth": 9, "n_identifiers": 16, "vocab_size": 33, "n_whitespaces": 35, "n_words": 33, "nloc": 10, "token_counts": 80}}
{"dataset_split": "train", "id": "spring-boot@1acda68:module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/RemoteSpringApplication.java#66-70", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "1acda68d39a1f464bddd42ef10becf04a17dbaca", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/RemoteSpringApplication.java", "language": "Java"}, "method": {"name": "getInitializers", "qualified_name": "org.springframework.boot.devtools.RemoteSpringApplication#getInitializers", "start_line": 66, "end_line": 70, "signature": "getInitializers()", "original_code": "private Collection<ApplicationContextInitializer<?>> getInitializers() {\n\t\tList<ApplicationContextInitializer<?>> initializers = new ArrayList<>();\n\t\tinitializers.add(new RestartScopeInitializer());\n\t\treturn initializers;\n\t}", "doc_comment": ""}, "code_tokens": ["getInitializers", "private", "Collection", "(", ")", "{", "}", "<", ">", ";", ";", "return", "initializers", ";", "ApplicationContextInitializer", "List", "initializers", "=", "initializers", ".", "add", "<", ">", "<", ">", "new", "(", ")", "?", "ApplicationContextInitializer", "ArrayList", "(", ")", "new", "RestartScopeInitializer", "<", ">", "<", ">", "(", ")", "?"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 69, "ast_depth": 10, "n_identifiers": 3, "vocab_size": 21, "n_whitespaces": 20, "n_words": 15, "nloc": 5, "token_counts": 42}}
{"dataset_split": "train", "id": "spring-boot@1acda68:module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/RemoteSpringApplication.java#72-80", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "1acda68d39a1f464bddd42ef10becf04a17dbaca", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/RemoteSpringApplication.java", "language": "Java"}, "method": {"name": "getListeners", "qualified_name": "org.springframework.boot.devtools.RemoteSpringApplication#getListeners", "start_line": 72, "end_line": 80, "signature": "getListeners()", "original_code": "private Collection<ApplicationListener<?>> getListeners() {\n\t\tList<ApplicationListener<?>> listeners = new ArrayList<>();\n\t\tlisteners.add(new AnsiOutputApplicationListener());\n\t\tlisteners.add(EnvironmentPostProcessorApplicationListener\n\t\t\t.with(EnvironmentPostProcessorsFactory.of(ConfigDataEnvironmentPostProcessor.class)));\n\t\tlisteners.add(new LoggingApplicationListener());\n\t\tlisteners.add(new RemoteUrlPropertyExtractor());\n\t\treturn listeners;\n\t}", "doc_comment": ""}, "code_tokens": ["getListeners", "private", "Collection", "(", ")", "{", "}", "<", ">", ";", ";", ";", ";", ";", "return", "listeners", ";", "ApplicationListener", "List", "listeners", "=", "listeners", ".", "add", "listeners", ".", "add", "listeners", ".", "add", "listeners", ".", "add", "<", ">", "<", ">", "new", "(", ")", "(", ")", "(", ")", "(", ")", "?", "ApplicationListener", "ArrayList", "(", ")", "new", "AnsiOutputApplicationListener", "EnvironmentPostProcessorApplicationListener", ".", "with", "new", "LoggingApplicationListener", "new", "RemoteUrlPropertyExtractor", "<", ">", "<", ">", "(", ")", "(", ")", "(", ")", "(", ")", "?", "EnvironmentPostProcessorsFactory", ".", "of", "(", ")", "ConfigDataEnvironmentPostProcessor", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 126, "ast_depth": 12, "n_identifiers": 7, "vocab_size": 29, "n_whitespaces": 35, "n_words": 31, "nloc": 9, "token_counts": 81}}
{"dataset_split": "train", "id": "spring-boot@1acda68:module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/RemoteSpringApplication.java#82-85", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "1acda68d39a1f464bddd42ef10becf04a17dbaca", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/RemoteSpringApplication.java", "language": "Java"}, "method": {"name": "getBanner", "qualified_name": "org.springframework.boot.devtools.RemoteSpringApplication#getBanner", "start_line": 82, "end_line": 85, "signature": "getBanner()", "original_code": "private Banner getBanner() {\n\t\tClassPathResource banner = new ClassPathResource(\"remote-banner.txt\", RemoteSpringApplication.class);\n\t\treturn new ResourceBanner(banner);\n\t}", "doc_comment": ""}, "code_tokens": ["Banner", "getBanner", "private", "(", ")", "{", "}", "ClassPathResource", ";", "return", ";", "banner", "=", "new", "ResourceBanner", "new", "ClassPathResource", "(", "banner", ")", "(", ",", ")", "\"", "remote-banner.txt", "\"", "RemoteSpringApplication", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 43, "ast_depth": 9, "n_identifiers": 2, "vocab_size": 20, "n_whitespaces": 18, "n_words": 16, "nloc": 4, "token_counts": 29}}
{"dataset_split": "train", "id": "spring-boot@1acda68:module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/RemoteSpringApplication.java#87-96", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "1acda68d39a1f464bddd42ef10becf04a17dbaca", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/RemoteSpringApplication.java", "language": "Java"}, "method": {"name": "waitIndefinitely", "qualified_name": "org.springframework.boot.devtools.RemoteSpringApplication#waitIndefinitely", "start_line": 87, "end_line": 96, "signature": "waitIndefinitely()", "original_code": "private void waitIndefinitely() {\n\t\twhile (true) {\n\t\t\ttry {\n\t\t\t\tThread.sleep(1000);\n\t\t\t}\n\t\t\tcatch (InterruptedException ex) {\n\t\t\t\tThread.currentThread().interrupt();\n\t\t\t}\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "waitIndefinitely", "private", "(", ")", "{", "}", "while", "(", "true", ")", "{", "}", "try", "{", "}", "catch", "(", ")", ";", "ex", "{", "}", "Thread", ".", "sleep", "InterruptedException", ";", "(", "1000", ")", ".", "interrupt", "Thread", ".", "currentThread", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 62, "ast_depth": 13, "n_identifiers": 6, "vocab_size": 20, "n_whitespaces": 43, "n_words": 15, "nloc": 10, "token_counts": 40}}
{"dataset_split": "train", "id": "spring-boot@1acda68:module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/RemoteSpringApplication.java#103-105", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "1acda68d39a1f464bddd42ef10becf04a17dbaca", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/RemoteSpringApplication.java", "language": "Java"}, "method": {"name": "main", "qualified_name": "org.springframework.boot.devtools.RemoteSpringApplication#main", "start_line": 103, "end_line": 105, "signature": "main(String[] args)", "original_code": "public static void main(String[] args) {\n\t\tnew RemoteSpringApplication().run(args);\n\t}", "doc_comment": "/**\n\t * Run the {@link RemoteSpringApplication}.\n\t * @param args the program arguments (including the remote URL as a non-option\n\t * argument)\n\t */"}, "code_tokens": ["void", "main", "public", "static", "(", ")", "{", "}", "args", ";", "String", ".", "run", "[", "]", "new", "RemoteSpringApplication", "(", "args", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 35, "ast_depth": 8, "n_identifiers": 3, "vocab_size": 17, "n_whitespaces": 11, "n_words": 10, "nloc": 3, "token_counts": 22}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/ApplicationInfoPropertySource.java#50-53", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/ApplicationInfoPropertySource.java", "language": "Java"}, "method": {"name": "isImmutable", "qualified_name": "org.springframework.boot.ApplicationInfoPropertySource#isImmutable", "start_line": 50, "end_line": 53, "signature": "isImmutable()", "original_code": "@Override\n\tpublic boolean isImmutable() {\n\t\treturn true;\n\t}", "doc_comment": ""}, "code_tokens": ["boolean", "isImmutable", "public", "(", ")", "{", "}", "@", "Override", "return", "true", ";"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 19, "ast_depth": 5, "n_identifiers": 2, "vocab_size": 12, "n_whitespaces": 11, "n_words": 6, "nloc": 4, "token_counts": 12}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/ApplicationInfoPropertySource.java#55-66", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/ApplicationInfoPropertySource.java", "language": "Java"}, "method": {"name": "getProperties", "qualified_name": "org.springframework.boot.ApplicationInfoPropertySource#getProperties", "start_line": 55, "end_line": 66, "signature": "getProperties(@Nullable String applicationVersion)", "original_code": "private static Map<String, Object> getProperties(@Nullable String applicationVersion) {\n\t\tMap<String, Object> result = new HashMap<>();\n\t\tif (StringUtils.hasText(applicationVersion)) {\n\t\t\tresult.put(\"spring.application.version\", applicationVersion);\n\t\t}\n\t\tApplicationPid applicationPid = new ApplicationPid();\n\t\tLong pid = applicationPid.toLong();\n\t\tif (pid != null) {\n\t\t\tresult.put(\"spring.application.pid\", pid);\n\t\t}\n\t\treturn result;\n\t}", "doc_comment": ""}, "code_tokens": ["getProperties", "private", "static", "Map", "(", ")", "{", "}", "<", "String", ",", "Object", ">", "String", "applicationVersion", ";", "if", "ApplicationPid", ";", "Long", ";", "if", "return", "result", ";", "Map", "result", "=", "(", ")", "{", "}", "applicationPid", "=", "pid", "=", "(", ")", "{", "}", "@", "Nullable", "<", "String", ",", "Object", ">", "new", "StringUtils", ".", "hasText", ";", "new", "ApplicationPid", "applicationPid", ".", "toLong", "pid", "!=", "null", ";", "HashMap", "(", ")", "(", "applicationVersion", ")", "result", ".", "put", "(", ")", "(", ")", "result", ".", "put", "<", ">", "(", ",", "applicationVersion", ")", "(", ",", "pid", ")", "\"", "spring.application.version", "\"", "\"", "spring.application.pid", "\""], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 137, "ast_depth": 10, "n_identifiers": 10, "vocab_size": 37, "n_whitespaces": 62, "n_words": 44, "nloc": 12, "token_counts": 93}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/ApplicationInfoPropertySource.java#68-71", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/ApplicationInfoPropertySource.java", "language": "Java"}, "method": {"name": "readVersion", "qualified_name": "org.springframework.boot.ApplicationInfoPropertySource#readVersion", "start_line": 68, "end_line": 71, "signature": "readVersion(@Nullable Class<?> applicationClass)", "original_code": "private static @Nullable String readVersion(@Nullable Class<?> applicationClass) {\n\t\tPackage sourcePackage = (applicationClass != null) ? applicationClass.getPackage() : null;\n\t\treturn (sourcePackage != null) ? sourcePackage.getImplementationVersion() : null;\n\t}", "doc_comment": ""}, "code_tokens": ["String", "readVersion", "private", "static", "(", ")", "{", "}", "@", "Nullable", "applicationClass", "Package", ";", "return", ";", "Class", "sourcePackage", "=", "?", ":", "null", "@", "Nullable", "<", ">", "?", ":", "null", "(", ")", "sourcePackage", ".", "getImplementationVersion", "?", "(", ")", "applicationClass", ".", "getPackage", "sourcePackage", "!=", "null", "(", ")", "applicationClass", "!=", "null", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 74, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 26, "n_whitespaces": 31, "n_words": 21, "nloc": 4, "token_counts": 49}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/ApplicationInfoPropertySource.java#78-84", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/ApplicationInfoPropertySource.java", "language": "Java"}, "method": {"name": "moveToEnd", "qualified_name": "org.springframework.boot.ApplicationInfoPropertySource#moveToEnd", "start_line": 78, "end_line": 84, "signature": "moveToEnd(ConfigurableEnvironment environment)", "original_code": "static void moveToEnd(ConfigurableEnvironment environment) {\n\t\tMutablePropertySources propertySources = environment.getPropertySources();\n\t\tPropertySource<?> propertySource = propertySources.remove(NAME);\n\t\tif (propertySource != null) {\n\t\t\tpropertySources.addLast(propertySource);\n\t\t}\n\t}", "doc_comment": "/**\n\t * Moves the {@link ApplicationInfoPropertySource} to the end of the environment's\n\t * property sources.\n\t * @param environment the environment\n\t */"}, "code_tokens": ["void", "moveToEnd", "static", "(", ")", "{", "}", "ConfigurableEnvironment", "environment", "MutablePropertySources", ";", ";", "if", "propertySources", "=", "PropertySource", "propertySource", "=", "(", ")", "{", "}", "environment", ".", "getPropertySources", "<", ">", "propertySources", ".", "remove", "propertySource", "!=", "null", ";", "(", ")", "?", "(", "NAME", ")", "propertySources", ".", "addLast", "(", "propertySource", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 70, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 26, "n_whitespaces": 32, "n_words": 20, "nloc": 7, "token_counts": 46}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java#123-125", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java", "language": "Java"}, "method": {"name": "getKind", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentContributor#getKind", "start_line": 123, "end_line": 125, "signature": "getKind()", "original_code": "Kind getKind() {\n\t\treturn this.kind;\n\t}", "doc_comment": "/**\n\t * Return the contributor kind.\n\t * @return the kind of contributor\n\t */"}, "code_tokens": ["Kind", "getKind", "(", ")", "{", "}", "return", ";", "this", ".", "kind"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 17, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 11, "n_whitespaces": 8, "n_words": 5, "nloc": 3, "token_counts": 11}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java#127-129", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java", "language": "Java"}, "method": {"name": "getLocation", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentContributor#getLocation", "start_line": 127, "end_line": 129, "signature": "getLocation()", "original_code": "@Nullable ConfigDataLocation getLocation() {\n\t\treturn this.location;\n\t}", "doc_comment": ""}, "code_tokens": ["ConfigDataLocation", "getLocation", "(", ")", "{", "}", "@", "Nullable", "return", ";", "this", ".", "location"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 21, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 13, "n_whitespaces": 9, "n_words": 6, "nloc": 3, "token_counts": 13}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java#136-141", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java", "language": "Java"}, "method": {"name": "isActive", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentContributor#isActive", "start_line": 136, "end_line": 141, "signature": "isActive(@Nullable ConfigDataActivationContext activationContext)", "original_code": "boolean isActive(@Nullable ConfigDataActivationContext activationContext) {\n\t\tif (this.kind == Kind.UNBOUND_IMPORT) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this.properties == null || this.properties.isActive(activationContext);\n\t}", "doc_comment": "/**\n\t * Return if this contributor is currently active.\n\t * @param activationContext the activation context\n\t * @return if the contributor is active\n\t */"}, "code_tokens": ["boolean", "isActive", "(", ")", "{", "}", "ConfigDataActivationContext", "activationContext", "if", "return", ";", "(", ")", "{", "}", "||", "@", "Nullable", "==", "return", "false", ";", "==", "null", ".", "isActive", "this", ".", "kind", "Kind", ".", "UNBOUND_IMPORT", "this", ".", "properties", "this", ".", "properties", "(", "activationContext", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 62, "ast_depth": 8, "n_identifiers": 7, "vocab_size": 23, "n_whitespaces": 29, "n_words": 20, "nloc": 6, "token_counts": 41}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java#147-149", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java", "language": "Java"}, "method": {"name": "getResource", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentContributor#getResource", "start_line": 147, "end_line": 149, "signature": "getResource()", "original_code": "@Nullable ConfigDataResource getResource() {\n\t\treturn this.resource;\n\t}", "doc_comment": "/**\n\t * Return the resource that contributed this instance.\n\t * @return the resource or {@code null}\n\t */"}, "code_tokens": ["ConfigDataResource", "getResource", "(", ")", "{", "}", "@", "Nullable", "return", ";", "this", ".", "resource"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 21, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 13, "n_whitespaces": 9, "n_words": 6, "nloc": 3, "token_counts": 13}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java#155-157", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java", "language": "Java"}, "method": {"name": "isFromProfileSpecificImport", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentContributor#isFromProfileSpecificImport", "start_line": 155, "end_line": 157, "signature": "isFromProfileSpecificImport()", "original_code": "boolean isFromProfileSpecificImport() {\n\t\treturn this.fromProfileSpecificImport;\n\t}", "doc_comment": "/**\n\t * Return if the contributor is from a profile specific import.\n\t * @return if the contributor is profile specific\n\t */"}, "code_tokens": ["boolean", "isFromProfileSpecificImport", "(", ")", "{", "}", "return", ";", "this", ".", "fromProfileSpecificImport"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 17, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 11, "n_whitespaces": 8, "n_words": 5, "nloc": 3, "token_counts": 11}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java#163-165", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java", "language": "Java"}, "method": {"name": "getPropertySource", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentContributor#getPropertySource", "start_line": 163, "end_line": 165, "signature": "getPropertySource()", "original_code": "@Nullable PropertySource<?> getPropertySource() {\n\t\treturn this.propertySource;\n\t}", "doc_comment": "/**\n\t * Return the property source for this contributor.\n\t * @return the property source or {@code null}\n\t */"}, "code_tokens": ["getPropertySource", "PropertySource", "(", ")", "{", "}", "@", "Nullable", "<", ">", "return", ";", "?", "this", ".", "propertySource"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 27, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 16, "n_whitespaces": 9, "n_words": 6, "nloc": 3, "token_counts": 16}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java#171-173", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java", "language": "Java"}, "method": {"name": "getConfigurationPropertySource", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentContributor#getConfigurationPropertySource", "start_line": 171, "end_line": 173, "signature": "getConfigurationPropertySource()", "original_code": "@Nullable ConfigurationPropertySource getConfigurationPropertySource() {\n\t\treturn this.configurationPropertySource;\n\t}", "doc_comment": "/**\n\t * Return the configuration property source for this contributor.\n\t * @return the configuration property source or {@code null}\n\t */"}, "code_tokens": ["ConfigurationPropertySource", "getConfigurationPropertySource", "(", ")", "{", "}", "@", "Nullable", "return", ";", "this", ".", "configurationPropertySource"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 21, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 13, "n_whitespaces": 9, "n_words": 6, "nloc": 3, "token_counts": 13}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java#180-182", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java", "language": "Java"}, "method": {"name": "hasConfigDataOption", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentContributor#hasConfigDataOption", "start_line": 180, "end_line": 182, "signature": "hasConfigDataOption(ConfigData.Option option)", "original_code": "boolean hasConfigDataOption(ConfigData.Option option) {\n\t\treturn this.configDataOptions.contains(option);\n\t}", "doc_comment": "/**\n\t * Return if the contributor has a specific config data option.\n\t * @param option the option to check\n\t * @return {@code true} if the option is present\n\t */"}, "code_tokens": ["boolean", "hasConfigDataOption", "(", ")", "{", "}", "option", "return", ";", "ConfigData", ".", "Option", ".", "contains", "this", ".", "configDataOptions", "(", "option", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 30, "ast_depth": 7, "n_identifiers": 4, "vocab_size": 15, "n_whitespaces": 9, "n_words": 10, "nloc": 3, "token_counts": 20}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java#184-188", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java", "language": "Java"}, "method": {"name": "withoutConfigDataOption", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentContributor#withoutConfigDataOption", "start_line": 184, "end_line": 188, "signature": "withoutConfigDataOption(ConfigData.Option option)", "original_code": "ConfigDataEnvironmentContributor withoutConfigDataOption(ConfigData.Option option) {\n\t\treturn new ConfigDataEnvironmentContributor(this.kind, this.location, this.resource,\n\t\t\t\tthis.fromProfileSpecificImport, this.propertySource, this.configurationPropertySource, this.properties,\n\t\t\t\tthis.configDataOptions.without(option), this.children, this.conversionService);\n\t}", "doc_comment": ""}, "code_tokens": ["ConfigDataEnvironmentContributor", "withoutConfigDataOption", "(", ")", "{", "}", "option", "return", ";", "ConfigData", ".", "Option", "new", "ConfigDataEnvironmentContributor", "(", ",", ",", ",", ",", ",", ",", ",", ",", ",", ")", "this", ".", "kind", "this", ".", "location", "this", ".", "resource", "this", ".", "fromProfileSpecificImport", "this", ".", "propertySource", "this", ".", "configurationPropertySource", "this", ".", "properties", ".", "without", "this", ".", "children", "this", ".", "conversionService", "this", ".", "configDataOptions", "(", "option", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 81, "ast_depth": 9, "n_identifiers": 13, "vocab_size": 26, "n_whitespaces": 27, "n_words": 30, "nloc": 5, "token_counts": 60}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java#194-196", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java", "language": "Java"}, "method": {"name": "getImports", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentContributor#getImports", "start_line": 194, "end_line": 196, "signature": "getImports()", "original_code": "List<ConfigDataLocation> getImports() {\n\t\treturn (this.properties != null) ? this.properties.getImports() : Collections.emptyList();\n\t}", "doc_comment": "/**\n\t * Return any imports requested by this contributor.\n\t * @return the imports\n\t */"}, "code_tokens": ["getImports", "List", "(", ")", "{", "}", "<", "ConfigDataLocation", ">", "return", ";", "?", ":", "(", ")", ".", "getImports", "Collections", ".", "emptyList", "!=", "null", "this", ".", "properties", "(", ")", "(", ")", "this", ".", "properties"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 48, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 20, "n_whitespaces": 14, "n_words": 12, "nloc": 3, "token_counts": 32}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java#204-209", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java", "language": "Java"}, "method": {"name": "hasUnprocessedImports", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentContributor#hasUnprocessedImports", "start_line": 204, "end_line": 209, "signature": "hasUnprocessedImports(ImportPhase importPhase)", "original_code": "boolean hasUnprocessedImports(ImportPhase importPhase) {\n\t\tif (getImports().isEmpty()) {\n\t\t\treturn false;\n\t\t}\n\t\treturn !this.children.containsKey(importPhase);\n\t}", "doc_comment": "/**\n\t * Return true if this contributor has imports that have not yet been processed in the\n\t * given phase.\n\t * @param importPhase the import phase\n\t * @return if there are unprocessed imports\n\t */"}, "code_tokens": ["boolean", "hasUnprocessedImports", "(", ")", "{", "}", "ImportPhase", "importPhase", "if", "return", ";", "(", ")", "{", "}", "!", ".", "isEmpty", "return", "false", ";", ".", "containsKey", "getImports", "(", ")", "this", ".", "children", "(", "importPhase", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 52, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 19, "n_whitespaces": 22, "n_words": 14, "nloc": 6, "token_counts": 34}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java#216-218", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java", "language": "Java"}, "method": {"name": "getChildren", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentContributor#getChildren", "start_line": 216, "end_line": 218, "signature": "getChildren(ImportPhase importPhase)", "original_code": "List<ConfigDataEnvironmentContributor> getChildren(ImportPhase importPhase) {\n\t\treturn this.children.getOrDefault(importPhase, Collections.emptyList());\n\t}", "doc_comment": "/**\n\t * Return children of this contributor for the given phase.\n\t * @param importPhase the import phase\n\t * @return a list of children\n\t */"}, "code_tokens": ["getChildren", "List", "(", ")", "{", "}", "<", "ConfigDataEnvironmentContributor", ">", "ImportPhase", "importPhase", "return", ";", ".", "getOrDefault", "this", ".", "children", "(", "importPhase", ",", ")", "Collections", ".", "emptyList", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 40, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 20, "n_whitespaces": 10, "n_words": 12, "nloc": 3, "token_counts": 27}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java#225-227", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java", "language": "Java"}, "method": {"name": "stream", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentContributor#stream", "start_line": 225, "end_line": 227, "signature": "stream()", "original_code": "Stream<ConfigDataEnvironmentContributor> stream() {\n\t\treturn StreamSupport.stream(spliterator(), false);\n\t}", "doc_comment": "/**\n\t * Returns a {@link Stream} that traverses this contributor and all its children in\n\t * priority order.\n\t * @return the stream\n\t */"}, "code_tokens": ["stream", "Stream", "(", ")", "{", "}", "<", "ConfigDataEnvironmentContributor", ">", "return", ";", "StreamSupport", ".", "stream", "(", ",", "false", ")", "spliterator", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 32, "ast_depth": 9, "n_identifiers": 3, "vocab_size": 16, "n_whitespaces": 9, "n_words": 8, "nloc": 3, "token_counts": 21}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java#235-238", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java", "language": "Java"}, "method": {"name": "iterator", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentContributor#iterator", "start_line": 235, "end_line": 238, "signature": "iterator()", "original_code": "@Override\n\tpublic Iterator<ConfigDataEnvironmentContributor> iterator() {\n\t\treturn new ContributorIterator();\n\t}", "doc_comment": "/**\n\t * Returns an {@link Iterator} that traverses this contributor and all its children in\n\t * priority order.\n\t * @return the iterator\n\t * @see java.lang.Iterable#iterator()\n\t */"}, "code_tokens": ["iterator", "public", "Iterator", "(", ")", "{", "}", "@", "Override", "<", "ConfigDataEnvironmentContributor", ">", "return", ";", "new", "ContributorIterator", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 29, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 16, "n_whitespaces": 12, "n_words": 8, "nloc": 4, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java#247-262", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java", "language": "Java"}, "method": {"name": "withBoundProperties", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentContributor#withBoundProperties", "start_line": 247, "end_line": 262, "signature": "withBoundProperties(Iterable<ConfigDataEnvironmentContributor> contributors,\n\t\t\t@Nullable ConfigDataActivationContext activationContext)", "original_code": "ConfigDataEnvironmentContributor withBoundProperties(Iterable<ConfigDataEnvironmentContributor> contributors,\n\t\t\t@Nullable ConfigDataActivationContext activationContext) {\n\t\tConfigurationPropertySource configurationPropertySource = getConfigurationPropertySource();\n\t\tAssert.state(configurationPropertySource != null, \"'configurationPropertySource' must not be null\");\n\t\tIterable<ConfigurationPropertySource> sources = Collections.singleton(configurationPropertySource);\n\t\tPlaceholdersResolver placeholdersResolver = new ConfigDataEnvironmentContributorPlaceholdersResolver(\n\t\t\t\tcontributors, activationContext, this, true, this.conversionService);\n\t\tBinder binder = new Binder(sources, placeholdersResolver, null, null, null);\n\t\tConfigDataProperties properties = ConfigDataProperties.get(binder);\n\t\tif (properties != null && this.configDataOptions.contains(ConfigData.Option.IGNORE_IMPORTS)) {\n\t\t\tproperties = properties.withoutImports();\n\t\t}\n\t\treturn new ConfigDataEnvironmentContributor(Kind.BOUND_IMPORT, this.location, this.resource,\n\t\t\t\tthis.fromProfileSpecificImport, this.propertySource, this.configurationPropertySource, properties,\n\t\t\t\tthis.configDataOptions, null, this.conversionService);\n\t}", "doc_comment": "/**\n\t * Create a new {@link ConfigDataEnvironmentContributor} with bound\n\t * {@link ConfigDataProperties}.\n\t * @param contributors the contributors used for binding\n\t * @param activationContext the activation context\n\t * @return a new contributor instance\n\t */"}, "code_tokens": ["ConfigDataEnvironmentContributor", "withBoundProperties", "(", ",", ")", "{", "}", "contributors", "ConfigDataActivationContext", "activationContext", "ConfigurationPropertySource", ";", ";", ";", "PlaceholdersResolver", ";", "Binder", ";", "ConfigDataProperties", ";", "if", "return", ";", "Iterable", "configurationPropertySource", "=", "Assert", ".", "state", "Iterable", "sources", "=", "placeholdersResolver", "=", "binder", "=", "properties", "=", "(", ")", "{", "}", "new", "ConfigDataEnvironmentContributor", "<", "ConfigDataEnvironmentContributor", ">", "@", "Nullable", "getConfigurationPropertySource", "(", ",", ")", "<", "ConfigurationPropertySource", ">", "Collections", ".", "singleton", "new", "ConfigDataEnvironmentContributorPlaceholdersResolver", "new", "Binder", "ConfigDataProperties", ".", "get", "&&", ";", "(", ",", ",", ",", ",", ",", ",", "properties", ",", ",", "null", ",", ")", "(", ")", "configurationPropertySource", "!=", "null", "\"", "'configurationPropertySource' must not be null", "\"", "(", "configurationPropertySource", ")", "(", "contributors", ",", "activationContext", ",", "this", ",", "true", ",", ")", "(", "sources", ",", "placeholdersResolver", ",", "null", ",", "null", ",", "null", ")", "(", "binder", ")", "properties", "!=", "null", ".", "contains", "properties", "=", "Kind", ".", "BOUND_IMPORT", "this", ".", "location", "this", ".", "resource", "this", ".", "fromProfileSpecificImport", "this", ".", "propertySource", "this", ".", "configurationPropertySource", "this", ".", "configDataOptions", "this", ".", "conversionService", "this", ".", "conversionService", "this", ".", "configDataOptions", "(", ")", "properties", ".", "withoutImports", ".", "IGNORE_IMPORTS", "(", ")", "ConfigData", ".", "Option"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 228, "ast_depth": 11, "n_identifiers": 29, "vocab_size": 57, "n_whitespaces": 106, "n_words": 83, "nloc": 16, "token_counts": 165}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java#271-281", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java", "language": "Java"}, "method": {"name": "withChildren", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentContributor#withChildren", "start_line": 271, "end_line": 281, "signature": "withChildren(ImportPhase importPhase,\n\t\t\tList<ConfigDataEnvironmentContributor> children)", "original_code": "ConfigDataEnvironmentContributor withChildren(ImportPhase importPhase,\n\t\t\tList<ConfigDataEnvironmentContributor> children) {\n\t\tMap<ImportPhase, List<ConfigDataEnvironmentContributor>> updatedChildren = new LinkedHashMap<>(this.children);\n\t\tupdatedChildren.put(importPhase, children);\n\t\tif (importPhase == ImportPhase.AFTER_PROFILE_ACTIVATION) {\n\t\t\tmoveProfileSpecific(updatedChildren);\n\t\t}\n\t\treturn new ConfigDataEnvironmentContributor(this.kind, this.location, this.resource,\n\t\t\t\tthis.fromProfileSpecificImport, this.propertySource, this.configurationPropertySource, this.properties,\n\t\t\t\tthis.configDataOptions, updatedChildren, this.conversionService);\n\t}", "doc_comment": "/**\n\t * Create a new {@link ConfigDataEnvironmentContributor} instance with a new set of\n\t * children for the given phase.\n\t * @param importPhase the import phase\n\t * @param children the new children\n\t * @return a new contributor instance\n\t */"}, "code_tokens": ["ConfigDataEnvironmentContributor", "withChildren", "(", ",", ")", "{", "}", "ImportPhase", "importPhase", "children", ";", ";", "if", "return", ";", "List", "Map", "updatedChildren", "=", "updatedChildren", ".", "put", "(", ")", "{", "}", "new", "ConfigDataEnvironmentContributor", "<", "ConfigDataEnvironmentContributor", ">", "<", "ImportPhase", ",", ">", "new", "(", "importPhase", ",", "children", ")", "importPhase", "==", ";", "(", ",", ",", ",", ",", ",", ",", ",", ",", "updatedChildren", ",", ")", "List", "LinkedHashMap", "(", ")", "ImportPhase", ".", "AFTER_PROFILE_ACTIVATION", "moveProfileSpecific", "this", ".", "kind", "this", ".", "location", "this", ".", "resource", "this", ".", "fromProfileSpecificImport", "this", ".", "propertySource", "this", ".", "configurationPropertySource", "this", ".", "properties", "this", ".", "configDataOptions", "this", ".", "conversionService", "<", "ConfigDataEnvironmentContributor", ">", "<", ">", "this", ".", "children", "(", "updatedChildren", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 144, "ast_depth": 9, "n_identifiers": 17, "vocab_size": 36, "n_whitespaces": 58, "n_words": 48, "nloc": 11, "token_counts": 102}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java#283-296", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java", "language": "Java"}, "method": {"name": "moveProfileSpecific", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentContributor#moveProfileSpecific", "start_line": 283, "end_line": 296, "signature": "moveProfileSpecific(Map<ImportPhase, List<ConfigDataEnvironmentContributor>> children)", "original_code": "private void moveProfileSpecific(Map<ImportPhase, List<ConfigDataEnvironmentContributor>> children) {\n\t\tList<ConfigDataEnvironmentContributor> before = children.get(ImportPhase.BEFORE_PROFILE_ACTIVATION);\n\t\tif (!hasAnyProfileSpecificChildren(before)) {\n\t\t\treturn;\n\t\t}\n\t\tList<ConfigDataEnvironmentContributor> updatedBefore = new ArrayList<>(before.size());\n\t\tList<ConfigDataEnvironmentContributor> updatedAfter = new ArrayList<>();\n\t\tfor (ConfigDataEnvironmentContributor contributor : before) {\n\t\t\tupdatedBefore.add(moveProfileSpecificChildren(contributor, updatedAfter));\n\t\t}\n\t\tupdatedAfter.addAll(children.getOrDefault(ImportPhase.AFTER_PROFILE_ACTIVATION, Collections.emptyList()));\n\t\tchildren.put(ImportPhase.BEFORE_PROFILE_ACTIVATION, updatedBefore);\n\t\tchildren.put(ImportPhase.AFTER_PROFILE_ACTIVATION, updatedAfter);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "moveProfileSpecific", "private", "(", ")", "{", "}", "children", ";", "if", ";", ";", "for", "(", "ConfigDataEnvironmentContributor", "contributor", ":", "before", ")", ";", ";", ";", "Map", "List", "before", "=", "(", ")", "{", "}", "List", "updatedBefore", "=", "List", "updatedAfter", "=", "{", "}", "updatedAfter", ".", "addAll", "children", ".", "put", "children", ".", "put", "<", "ImportPhase", ",", ">", "<", "ConfigDataEnvironmentContributor", ">", "children", ".", "get", "!", "return", ";", "<", "ConfigDataEnvironmentContributor", ">", "new", "<", "ConfigDataEnvironmentContributor", ">", "new", ";", "(", ")", "(", ",", "updatedBefore", ")", "(", ",", "updatedAfter", ")", "List", "(", ")", "hasAnyProfileSpecificChildren", "ArrayList", "(", ")", "ArrayList", "(", ")", "updatedBefore", ".", "add", "children", ".", "getOrDefault", "ImportPhase", ".", "BEFORE_PROFILE_ACTIVATION", "ImportPhase", ".", "AFTER_PROFILE_ACTIVATION", "<", "ConfigDataEnvironmentContributor", ">", "ImportPhase", ".", "BEFORE_PROFILE_ACTIVATION", "(", "before", ")", "<", ">", "before", ".", "size", "<", ">", "(", ")", "(", ",", ")", "(", ")", "moveProfileSpecificChildren", "ImportPhase", ".", "AFTER_PROFILE_ACTIVATION", "Collections", ".", "emptyList", "(", "contributor", ",", "updatedAfter", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 203, "ast_depth": 11, "n_identifiers": 19, "vocab_size": 41, "n_whitespaces": 67, "n_words": 58, "nloc": 14, "token_counts": 138}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java#298-314", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java", "language": "Java"}, "method": {"name": "moveProfileSpecificChildren", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentContributor#moveProfileSpecificChildren", "start_line": 298, "end_line": 314, "signature": "moveProfileSpecificChildren(ConfigDataEnvironmentContributor contributor,\n\t\t\tList<ConfigDataEnvironmentContributor> removed)", "original_code": "private ConfigDataEnvironmentContributor moveProfileSpecificChildren(ConfigDataEnvironmentContributor contributor,\n\t\t\tList<ConfigDataEnvironmentContributor> removed) {\n\t\tfor (ImportPhase importPhase : ImportPhase.values()) {\n\t\t\tList<ConfigDataEnvironmentContributor> children = contributor.getChildren(importPhase);\n\t\t\tList<ConfigDataEnvironmentContributor> updatedChildren = new ArrayList<>(children.size());\n\t\t\tfor (ConfigDataEnvironmentContributor child : children) {\n\t\t\t\tif (child.hasConfigDataOption(ConfigData.Option.PROFILE_SPECIFIC)) {\n\t\t\t\t\tremoved.add(child.withoutConfigDataOption(ConfigData.Option.PROFILE_SPECIFIC));\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tupdatedChildren.add(child);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcontributor = contributor.withChildren(importPhase, updatedChildren);\n\t\t}\n\t\treturn contributor;\n\t}", "doc_comment": ""}, "code_tokens": ["ConfigDataEnvironmentContributor", "moveProfileSpecificChildren", "private", "(", ",", ")", "{", "}", "ConfigDataEnvironmentContributor", "contributor", "removed", "for", "(", "ImportPhase", "importPhase", ":", ")", "return", "contributor", ";", "List", "ImportPhase", ".", "values", "{", "}", "<", "ConfigDataEnvironmentContributor", ">", "(", ")", ";", ";", "for", "(", "ConfigDataEnvironmentContributor", "child", ":", "children", ")", ";", "List", "children", "=", "List", "updatedChildren", "=", "{", "}", "contributor", "=", "<", "ConfigDataEnvironmentContributor", ">", "contributor", ".", "getChildren", "<", "ConfigDataEnvironmentContributor", ">", "new", "if", "else", "contributor", ".", "withChildren", "(", "importPhase", ")", "ArrayList", "(", ")", "(", ")", "{", "}", "{", "}", "(", "importPhase", ",", "updatedChildren", ")", "<", ">", "children", ".", "size", "child", ".", "hasConfigDataOption", ";", ";", "(", ")", "(", ")", "removed", ".", "add", "updatedChildren", ".", "add", ".", "PROFILE_SPECIFIC", "(", ")", "(", "child", ")", "ConfigData", ".", "Option", "child", ".", "withoutConfigDataOption", "(", ")", ".", "PROFILE_SPECIFIC", "ConfigData", ".", "Option"], "metrics": {"cyclomatic_complexity": 4, "n_ast_nodes": 177, "ast_depth": 17, "n_identifiers": 18, "vocab_size": 38, "n_whitespaces": 96, "n_words": 54, "nloc": 17, "token_counts": 123}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java#316-331", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java", "language": "Java"}, "method": {"name": "hasAnyProfileSpecificChildren", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentContributor#hasAnyProfileSpecificChildren", "start_line": 316, "end_line": 331, "signature": "hasAnyProfileSpecificChildren(@Nullable List<ConfigDataEnvironmentContributor> contributors)", "original_code": "@Contract(\"null -> false\")\n\tprivate boolean hasAnyProfileSpecificChildren(@Nullable List<ConfigDataEnvironmentContributor> contributors) {\n\t\tif (CollectionUtils.isEmpty(contributors)) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (ConfigDataEnvironmentContributor contributor : contributors) {\n\t\t\tfor (ImportPhase importPhase : ImportPhase.values()) {\n\t\t\t\tif (contributor.getChildren(importPhase)\n\t\t\t\t\t.stream()\n\t\t\t\t\t.anyMatch((child) -> child.hasConfigDataOption(ConfigData.Option.PROFILE_SPECIFIC))) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}", "doc_comment": ""}, "code_tokens": ["boolean", "hasAnyProfileSpecificChildren", "private", "(", ")", "{", "}", "@", "Contract", "contributors", "if", "for", "(", "ConfigDataEnvironmentContributor", "contributor", ":", "contributors", ")", "return", "false", ";", "(", ")", "List", "(", ")", "{", "}", "{", "}", "\"", "null -> false", "\"", "@", "Nullable", "<", "ConfigDataEnvironmentContributor", ">", "CollectionUtils", ".", "isEmpty", "return", "false", ";", "for", "(", "ImportPhase", "importPhase", ":", ")", "(", "contributors", ")", "ImportPhase", ".", "values", "{", "}", "(", ")", "if", "(", ")", "{", "}", ".", "anyMatch", "return", "true", ";", ".", "stream", "(", ")", "contributor", ".", "getChildren", "(", ")", "->", "(", "importPhase", ")", "(", "child", ")", "child", ".", "hasConfigDataOption", "(", ")", ".", "PROFILE_SPECIFIC", "ConfigData", ".", "Option"], "metrics": {"cyclomatic_complexity": 5, "n_ast_nodes": 138, "ast_depth": 17, "n_identifiers": 18, "vocab_size": 40, "n_whitespaces": 85, "n_words": 41, "nloc": 16, "token_counts": 96}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java#340-357", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java", "language": "Java"}, "method": {"name": "withReplacement", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentContributor#withReplacement", "start_line": 340, "end_line": 357, "signature": "withReplacement(ConfigDataEnvironmentContributor existing,\n\t\t\tConfigDataEnvironmentContributor replacement)", "original_code": "ConfigDataEnvironmentContributor withReplacement(ConfigDataEnvironmentContributor existing,\n\t\t\tConfigDataEnvironmentContributor replacement) {\n\t\tif (this == existing) {\n\t\t\treturn replacement;\n\t\t}\n\t\tMap<ImportPhase, List<ConfigDataEnvironmentContributor>> updatedChildren = new LinkedHashMap<>(\n\t\t\t\tthis.children.size());\n\t\tthis.children.forEach((importPhase, contributors) -> {\n\t\t\tList<ConfigDataEnvironmentContributor> updatedContributors = new ArrayList<>(contributors.size());\n\t\t\tfor (ConfigDataEnvironmentContributor contributor : contributors) {\n\t\t\t\tupdatedContributors.add(contributor.withReplacement(existing, replacement));\n\t\t\t}\n\t\t\tupdatedChildren.put(importPhase, Collections.unmodifiableList(updatedContributors));\n\t\t});\n\t\treturn new ConfigDataEnvironmentContributor(this.kind, this.location, this.resource,\n\t\t\t\tthis.fromProfileSpecificImport, this.propertySource, this.configurationPropertySource, this.properties,\n\t\t\t\tthis.configDataOptions, updatedChildren, this.conversionService);\n\t}", "doc_comment": "/**\n\t * Create a new {@link ConfigDataEnvironmentContributor} instance where an existing\n\t * child is replaced.\n\t * @param existing the existing node that should be replaced\n\t * @param replacement the replacement node that should be used instead\n\t * @return a new {@link ConfigDataEnvironmentContributor} instance\n\t */"}, "code_tokens": ["ConfigDataEnvironmentContributor", "withReplacement", "(", ",", ")", "{", "}", "ConfigDataEnvironmentContributor", "existing", "ConfigDataEnvironmentContributor", "replacement", "if", ";", ";", "return", ";", "(", ")", "{", "}", "Map", "updatedChildren", "=", ".", "forEach", "new", "ConfigDataEnvironmentContributor", "this", "==", "existing", "return", "replacement", ";", "<", "ImportPhase", ",", ">", "new", "this", ".", "children", "(", ")", "(", ",", ",", ",", ",", ",", ",", ",", ",", "updatedChildren", ",", ")", "List", "LinkedHashMap", "(", ")", "->", "this", ".", "kind", "this", ".", "location", "this", ".", "resource", "this", ".", "fromProfileSpecificImport", "this", ".", "propertySource", "this", ".", "configurationPropertySource", "this", ".", "properties", "this", ".", "configDataOptions", "this", ".", "conversionService", "<", "ConfigDataEnvironmentContributor", ">", "<", ">", ".", "size", "(", "importPhase", ",", "contributors", ")", "{", "}", "this", ".", "children", "(", ")", ";", "for", "(", "ConfigDataEnvironmentContributor", "contributor", ":", "contributors", ")", ";", "List", "updatedContributors", "=", "{", "}", "updatedChildren", ".", "put", "<", "ConfigDataEnvironmentContributor", ">", "new", ";", "(", "importPhase", ",", ")", "ArrayList", "(", ")", "updatedContributors", ".", "add", "Collections", ".", "unmodifiableList", "<", ">", "contributors", ".", "size", "(", ")", "(", "updatedContributors", ")", "(", ")", "contributor", ".", "withReplacement", "(", "existing", ",", "replacement", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 226, "ast_depth": 16, "n_identifiers": 24, "vocab_size": 48, "n_whitespaces": 101, "n_words": 71, "nloc": 18, "token_counts": 161}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java#359-364", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java", "language": "Java"}, "method": {"name": "toString", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentContributor#toString", "start_line": 359, "end_line": 364, "signature": "toString()", "original_code": "@Override\n\tpublic String toString() {\n\t\tStringBuilder builder = new StringBuilder();\n\t\tbuildToString(\"\", builder);\n\t\treturn builder.toString();\n\t}", "doc_comment": ""}, "code_tokens": ["String", "toString", "public", "(", ")", "{", "}", "@", "Override", "StringBuilder", ";", ";", "return", ";", "builder", "=", "buildToString", "builder", ".", "toString", "new", "StringBuilder", "(", ",", "builder", ")", "(", ")", "(", ")", "\"", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 49, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 19, "n_whitespaces": 22, "n_words": 13, "nloc": 6, "token_counts": 32}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java#366-384", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java", "language": "Java"}, "method": {"name": "buildToString", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentContributor#buildToString", "start_line": 366, "end_line": 384, "signature": "buildToString(String prefix, StringBuilder builder)", "original_code": "private void buildToString(String prefix, StringBuilder builder) {\n\t\tbuilder.append(prefix);\n\t\tbuilder.append(this.kind);\n\t\tbuilder.append(\" \");\n\t\tbuilder.append(this.location);\n\t\tbuilder.append(\" \");\n\t\tbuilder.append(this.resource);\n\t\tbuilder.append(\" \");\n\t\tbuilder.append(this.configDataOptions);\n\t\tbuilder.append(\"\\n\");\n\t\tfor (ConfigDataEnvironmentContributor child : this.children.getOrDefault(ImportPhase.BEFORE_PROFILE_ACTIVATION,\n\t\t\t\tCollections.emptyList())) {\n\t\t\tchild.buildToString(prefix + \"    \", builder);\n\t\t}\n\t\tfor (ConfigDataEnvironmentContributor child : this.children.getOrDefault(ImportPhase.AFTER_PROFILE_ACTIVATION,\n\t\t\t\tCollections.emptyList())) {\n\t\t\tchild.buildToString(prefix + \"    \", builder);\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "buildToString", "private", "(", ",", ")", "{", "}", "String", "prefix", "StringBuilder", "builder", ";", ";", ";", ";", ";", ";", ";", ";", ";", "for", "(", "ConfigDataEnvironmentContributor", "child", ":", ")", "for", "(", "ConfigDataEnvironmentContributor", "child", ":", ")", "builder", ".", "append", "builder", ".", "append", "builder", ".", "append", "builder", ".", "append", "builder", ".", "append", "builder", ".", "append", "builder", ".", "append", "builder", ".", "append", "builder", ".", "append", ".", "getOrDefault", "{", "}", ".", "getOrDefault", "{", "}", "(", "prefix", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "this", ".", "children", "(", ",", ")", ";", "this", ".", "children", "(", ",", ")", ";", "this", ".", "kind", "\"", " ", "\"", "this", ".", "location", "\"", " ", "\"", "this", ".", "resource", "\"", " ", "\"", "this", ".", "configDataOptions", "\"", "\\n", "\"", "ImportPhase", ".", "BEFORE_PROFILE_ACTIVATION", "Collections", ".", "emptyList", "child", ".", "buildToString", "ImportPhase", ".", "AFTER_PROFILE_ACTIVATION", "Collections", ".", "emptyList", "child", ".", "buildToString", "(", ")", "(", ",", "builder", ")", "(", ")", "(", ",", "builder", ")", "prefix", "+", "prefix", "+", "\"", "    ", "\"", "\"", "    ", "\""], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 233, "ast_depth": 11, "n_identifiers": 16, "vocab_size": 36, "n_whitespaces": 92, "n_words": 63, "nloc": 19, "token_counts": 165}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java#392-398", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java", "language": "Java"}, "method": {"name": "of", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentContributor#of", "start_line": 392, "end_line": 398, "signature": "of(List<ConfigDataEnvironmentContributor> contributors,\n\t\t\tConversionService conversionService)", "original_code": "static ConfigDataEnvironmentContributor of(List<ConfigDataEnvironmentContributor> contributors,\n\t\t\tConversionService conversionService) {\n\t\tMap<ImportPhase, List<ConfigDataEnvironmentContributor>> children = new LinkedHashMap<>();\n\t\tchildren.put(ImportPhase.BEFORE_PROFILE_ACTIVATION, Collections.unmodifiableList(contributors));\n\t\treturn new ConfigDataEnvironmentContributor(Kind.ROOT, null, null, false, null, null, null, null, children,\n\t\t\t\tconversionService);\n\t}", "doc_comment": "/**\n\t * Factory method to create a {@link Kind#ROOT root} contributor.\n\t * @param contributors the immediate children of the root\n\t * @param conversionService the conversion service to use\n\t * @return a new {@link ConfigDataEnvironmentContributor} instance\n\t */"}, "code_tokens": ["ConfigDataEnvironmentContributor", "of", "static", "(", ",", ")", "{", "}", "contributors", "ConversionService", "conversionService", ";", ";", "return", ";", "List", "Map", "children", "=", "children", ".", "put", "new", "ConfigDataEnvironmentContributor", "<", "ConfigDataEnvironmentContributor", ">", "<", "ImportPhase", ",", ">", "new", "(", ",", ")", "(", ",", "null", ",", "null", ",", "false", ",", "null", ",", "null", ",", "null", ",", "null", ",", "children", ",", "conversionService", ")", "List", "LinkedHashMap", "(", ")", "ImportPhase", ".", "BEFORE_PROFILE_ACTIVATION", "Collections", ".", "unmodifiableList", "Kind", ".", "ROOT", "<", "ConfigDataEnvironmentContributor", ">", "<", ">", "(", "contributors", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 105, "ast_depth": 9, "n_identifiers": 11, "vocab_size": 31, "n_whitespaces": 41, "n_words": 36, "nloc": 7, "token_counts": 76}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java#408-414", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java", "language": "Java"}, "method": {"name": "ofInitialImport", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentContributor#ofInitialImport", "start_line": 408, "end_line": 414, "signature": "ofInitialImport(ConfigDataLocation initialImport,\n\t\t\tConversionService conversionService)", "original_code": "static ConfigDataEnvironmentContributor ofInitialImport(ConfigDataLocation initialImport,\n\t\t\tConversionService conversionService) {\n\t\tList<ConfigDataLocation> imports = Collections.singletonList(initialImport);\n\t\tConfigDataProperties properties = new ConfigDataProperties(imports, null);\n\t\treturn new ConfigDataEnvironmentContributor(Kind.INITIAL_IMPORT, null, null, false, null, null, properties,\n\t\t\t\tnull, null, conversionService);\n\t}", "doc_comment": "/**\n\t * Factory method to create a {@link Kind#INITIAL_IMPORT initial import} contributor.\n\t * This contributor is used to trigger initial imports of additional contributors. It\n\t * does not contribute any properties itself.\n\t * @param initialImport the initial import location (with placeholders resolved)\n\t * @param conversionService the conversion service to use\n\t * @return a new {@link ConfigDataEnvironmentContributor} instance\n\t */"}, "code_tokens": ["ConfigDataEnvironmentContributor", "ofInitialImport", "static", "(", ",", ")", "{", "}", "ConfigDataLocation", "initialImport", "ConversionService", "conversionService", ";", "ConfigDataProperties", ";", "return", ";", "List", "imports", "=", "properties", "=", "new", "ConfigDataEnvironmentContributor", "<", "ConfigDataLocation", ">", "Collections", ".", "singletonList", "new", "ConfigDataProperties", "(", ",", "null", ",", "null", ",", "false", ",", "null", ",", "null", ",", "properties", ",", "null", ",", "null", ",", "conversionService", ")", "(", "initialImport", ")", "(", "imports", ",", "null", ")", "Kind", ".", "INITIAL_IMPORT"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 84, "ast_depth": 8, "n_identifiers": 9, "vocab_size": 29, "n_whitespaces": 43, "n_words": 33, "nloc": 7, "token_counts": 63}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java#424-428", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java", "language": "Java"}, "method": {"name": "ofExisting", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentContributor#ofExisting", "start_line": 424, "end_line": 428, "signature": "ofExisting(PropertySource<?> propertySource,\n\t\t\tConversionService conversionService)", "original_code": "static ConfigDataEnvironmentContributor ofExisting(PropertySource<?> propertySource,\n\t\t\tConversionService conversionService) {\n\t\treturn new ConfigDataEnvironmentContributor(Kind.EXISTING, null, null, false, propertySource,\n\t\t\t\tasConfigurationPropertySource(propertySource), null, null, null, conversionService);\n\t}", "doc_comment": "/**\n\t * Factory method to create a contributor that wraps an {@link Kind#EXISTING existing}\n\t * property source. The contributor provides access to existing properties, but\n\t * doesn't actively import any additional contributors.\n\t * @param propertySource the property source to wrap\n\t * @param conversionService the conversion service to use\n\t * @return a new {@link ConfigDataEnvironmentContributor} instance\n\t */"}, "code_tokens": ["ConfigDataEnvironmentContributor", "ofExisting", "static", "(", ",", ")", "{", "}", "propertySource", "ConversionService", "conversionService", "return", ";", "PropertySource", "new", "ConfigDataEnvironmentContributor", "<", ">", "(", ",", "null", ",", "null", ",", "false", ",", "propertySource", ",", ",", "null", ",", "null", ",", "null", ",", "conversionService", ")", "?", "Kind", ".", "EXISTING", "asConfigurationPropertySource", "(", "propertySource", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 61, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 24, "n_whitespaces": 29, "n_words": 22, "nloc": 5, "token_counts": 45}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java#443-452", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java", "language": "Java"}, "method": {"name": "ofUnboundImport", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentContributor#ofUnboundImport", "start_line": 443, "end_line": 452, "signature": "ofUnboundImport(@Nullable ConfigDataLocation location,\n\t\t\t@Nullable ConfigDataResource resource, boolean profileSpecific, ConfigData configData,\n\t\t\tint propertySourceIndex, ConversionService conversionService,\n\t\t\tConfigDataEnvironmentUpdateListener environmentUpdateListener)", "original_code": "static ConfigDataEnvironmentContributor ofUnboundImport(@Nullable ConfigDataLocation location,\n\t\t\t@Nullable ConfigDataResource resource, boolean profileSpecific, ConfigData configData,\n\t\t\tint propertySourceIndex, ConversionService conversionService,\n\t\t\tConfigDataEnvironmentUpdateListener environmentUpdateListener) {\n\t\tPropertySource<?> propertySource = configData.getPropertySources().get(propertySourceIndex);\n\t\tConfigData.Options options = configData.getOptions(propertySource);\n\t\toptions = environmentUpdateListener.onConfigDataOptions(configData, propertySource, options);\n\t\treturn new ConfigDataEnvironmentContributor(Kind.UNBOUND_IMPORT, location, resource, profileSpecific,\n\t\t\t\tpropertySource, asConfigurationPropertySource(propertySource), null, options, null, conversionService);\n\t}", "doc_comment": "/**\n\t * Factory method to create an {@link Kind#UNBOUND_IMPORT unbound import} contributor.\n\t * This contributor has been actively imported from another contributor and may itself\n\t * import further contributors later.\n\t * @param location the location of this contributor\n\t * @param resource the config data resource\n\t * @param profileSpecific if the contributor is from a profile specific import\n\t * @param configData the config data\n\t * @param propertySourceIndex the index of the property source that should be used\n\t * @param conversionService the conversion service to use\n\t * @param environmentUpdateListener the environment update listener\n\t * @return a new {@link ConfigDataEnvironmentContributor} instance\n\t */"}, "code_tokens": ["ConfigDataEnvironmentContributor", "ofUnboundImport", "static", "(", ",", ",", ",", ",", ",", ",", ")", "{", "}", "ConfigDataLocation", "location", "ConfigDataResource", "resource", "boolean", "profileSpecific", "ConfigData", "configData", "propertySourceIndex", "ConversionService", "conversionService", "ConfigDataEnvironmentUpdateListener", "environmentUpdateListener", ";", ";", ";", "return", ";", "int", "PropertySource", "propertySource", "=", "ConfigData", ".", "Options", "options", "=", "options", "=", "new", "ConfigDataEnvironmentContributor", "@", "Nullable", "@", "Nullable", "<", ">", ".", "get", "configData", ".", "getOptions", "environmentUpdateListener", ".", "onConfigDataOptions", "(", ",", "location", ",", "resource", ",", "profileSpecific", ",", "propertySource", ",", ",", "null", ",", "options", ",", "null", ",", "conversionService", ")", "?", "configData", ".", "getPropertySources", "(", "propertySourceIndex", ")", "(", "propertySource", ")", "(", "configData", ",", "propertySource", ",", "options", ")", "Kind", ".", "UNBOUND_IMPORT", "asConfigurationPropertySource", "(", ")", "(", "propertySource", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 144, "ast_depth": 9, "n_identifiers": 18, "vocab_size": 44, "n_whitespaces": 66, "n_words": 52, "nloc": 10, "token_counts": 103}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java#454-461", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java", "language": "Java"}, "method": {"name": "asConfigurationPropertySource", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentContributor#asConfigurationPropertySource", "start_line": 454, "end_line": 461, "signature": "asConfigurationPropertySource(\n\t\t\tPropertySource<?> propertySource)", "original_code": "private static @Nullable ConfigurationPropertySource asConfigurationPropertySource(\n\t\t\tPropertySource<?> propertySource) {\n\t\tConfigurationPropertySource configurationPropertySource = ConfigurationPropertySource.from(propertySource);\n\t\tif (configurationPropertySource != null && propertySource instanceof PropertySourceInfo propertySourceInfo) {\n\t\t\tconfigurationPropertySource = configurationPropertySource.withPrefix(propertySourceInfo.getPrefix());\n\t\t}\n\t\treturn configurationPropertySource;\n\t}", "doc_comment": ""}, "code_tokens": ["ConfigurationPropertySource", "asConfigurationPropertySource", "private", "static", "(", ")", "{", "}", "@", "Nullable", "propertySource", "ConfigurationPropertySource", ";", "if", "return", "configurationPropertySource", ";", "PropertySource", "configurationPropertySource", "=", "(", ")", "{", "}", "<", ">", "ConfigurationPropertySource", ".", "from", "&&", ";", "?", "(", "propertySource", ")", "configurationPropertySource", "!=", "null", "propertySource", "instanceof", "PropertySourceInfo", "propertySourceInfo", "configurationPropertySource", "=", "configurationPropertySource", ".", "withPrefix", "(", ")", "propertySourceInfo", ".", "getPrefix", "(", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 81, "ast_depth": 12, "n_identifiers": 9, "vocab_size": 30, "n_whitespaces": 43, "n_words": 26, "nloc": 8, "token_counts": 54}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java#470-474", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java", "language": "Java"}, "method": {"name": "ofEmptyLocation", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentContributor#ofEmptyLocation", "start_line": 470, "end_line": 474, "signature": "ofEmptyLocation(ConfigDataLocation location, boolean profileSpecific,\n\t\t\tConversionService conversionService)", "original_code": "static ConfigDataEnvironmentContributor ofEmptyLocation(ConfigDataLocation location, boolean profileSpecific,\n\t\t\tConversionService conversionService) {\n\t\treturn new ConfigDataEnvironmentContributor(Kind.EMPTY_LOCATION, location, null, profileSpecific, null, null,\n\t\t\t\tnull, EMPTY_LOCATION_OPTIONS, null, conversionService);\n\t}", "doc_comment": "/**\n\t * Factory method to create an {@link Kind#EMPTY_LOCATION empty location} contributor.\n\t * @param location the location of this contributor\n\t * @param profileSpecific if the contributor is from a profile specific import\n\t * @param conversionService the conversion service to use\n\t * @return a new {@link ConfigDataEnvironmentContributor} instance\n\t */"}, "code_tokens": ["ConfigDataEnvironmentContributor", "ofEmptyLocation", "static", "(", ",", ",", ")", "{", "}", "ConfigDataLocation", "location", "boolean", "profileSpecific", "ConversionService", "conversionService", "return", ";", "new", "ConfigDataEnvironmentContributor", "(", ",", "location", ",", "null", ",", "profileSpecific", ",", "null", ",", "null", ",", "null", ",", "EMPTY_LOCATION_OPTIONS", ",", "null", ",", "conversionService", ")", "Kind", ".", "EMPTY_LOCATION"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 54, "ast_depth": 8, "n_identifiers": 7, "vocab_size": 22, "n_whitespaces": 31, "n_words": 23, "nloc": 5, "token_counts": 42}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java#535-540", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java", "language": "Java"}, "method": {"name": "get", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentContributor#get", "start_line": 535, "end_line": 540, "signature": "get(@Nullable ConfigDataActivationContext activationContext)", "original_code": "static ImportPhase get(@Nullable ConfigDataActivationContext activationContext) {\n\t\t\tif (activationContext != null && activationContext.getProfiles() != null) {\n\t\t\t\treturn AFTER_PROFILE_ACTIVATION;\n\t\t\t}\n\t\t\treturn BEFORE_PROFILE_ACTIVATION;\n\t\t}", "doc_comment": "/**\n\t\t * Return the {@link ImportPhase} based on the given activation context.\n\t\t * @param activationContext the activation context\n\t\t * @return the import phase\n\t\t */"}, "code_tokens": ["ImportPhase", "get", "static", "(", ")", "{", "}", "ConfigDataActivationContext", "activationContext", "if", "return", "BEFORE_PROFILE_ACTIVATION", ";", "(", ")", "{", "}", "@", "Nullable", "&&", "return", "AFTER_PROFILE_ACTIVATION", ";", "activationContext", "!=", "null", "!=", "null", "activationContext", ".", "getProfiles", "(", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 51, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 21, "n_whitespaces": 35, "n_words": 16, "nloc": 6, "token_counts": 33}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java#563-566", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java", "language": "Java"}, "method": {"name": "hasNext", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentContributor#hasNext", "start_line": 563, "end_line": 566, "signature": "hasNext()", "original_code": "@Override\n\t\tpublic boolean hasNext() {\n\t\t\treturn fetchIfNecessary() != null;\n\t\t}", "doc_comment": ""}, "code_tokens": ["boolean", "hasNext", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "!=", "null", "fetchIfNecessary", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 26, "ast_depth": 8, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 16, "n_words": 7, "nloc": 4, "token_counts": 16}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java#568-576", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java", "language": "Java"}, "method": {"name": "next", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentContributor#next", "start_line": 568, "end_line": 576, "signature": "next()", "original_code": "@Override\n\t\tpublic ConfigDataEnvironmentContributor next() {\n\t\t\tConfigDataEnvironmentContributor next = fetchIfNecessary();\n\t\t\tif (next == null) {\n\t\t\t\tthrow new NoSuchElementException();\n\t\t\t}\n\t\t\tthis.next = null;\n\t\t\treturn next;\n\t\t}", "doc_comment": ""}, "code_tokens": ["ConfigDataEnvironmentContributor", "next", "public", "(", ")", "{", "}", "@", "Override", "ConfigDataEnvironmentContributor", ";", "if", ";", "return", "next", ";", "next", "=", "(", ")", "{", "}", "=", "null", "fetchIfNecessary", "next", "==", "null", "throw", ";", "this", ".", "next", "(", ")", "new", "NoSuchElementException", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 60, "ast_depth": 9, "n_identifiers": 3, "vocab_size": 21, "n_whitespaces": 46, "n_words": 18, "nloc": 9, "token_counts": 39}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java#578-601", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributor.java", "language": "Java"}, "method": {"name": "fetchIfNecessary", "qualified_name": "org.springframework.boot.context.config.ConfigDataEnvironmentContributor#fetchIfNecessary", "start_line": 578, "end_line": 601, "signature": "fetchIfNecessary()", "original_code": "private @Nullable ConfigDataEnvironmentContributor fetchIfNecessary() {\n\t\t\tif (this.next != null) {\n\t\t\t\treturn this.next;\n\t\t\t}\n\t\t\tif (this.current.hasNext()) {\n\t\t\t\tthis.next = this.current.next();\n\t\t\t\treturn this.next;\n\t\t\t}\n\t\t\tif (this.children.hasNext()) {\n\t\t\t\tthis.current = this.children.next().iterator();\n\t\t\t\treturn fetchIfNecessary();\n\t\t\t}\n\t\t\tif (this.phase == ImportPhase.AFTER_PROFILE_ACTIVATION) {\n\t\t\t\tthis.phase = ImportPhase.BEFORE_PROFILE_ACTIVATION;\n\t\t\t\tthis.children = getChildren(this.phase).iterator();\n\t\t\t\treturn fetchIfNecessary();\n\t\t\t}\n\t\t\tif (this.phase == ImportPhase.BEFORE_PROFILE_ACTIVATION) {\n\t\t\t\tthis.phase = null;\n\t\t\t\tthis.next = ConfigDataEnvironmentContributor.this;\n\t\t\t\treturn this.next;\n\t\t\t}\n\t\t\treturn null;\n\t\t}", "doc_comment": ""}, "code_tokens": ["ConfigDataEnvironmentContributor", "fetchIfNecessary", "private", "(", ")", "{", "}", "@", "Nullable", "if", "if", "if", "if", "if", "return", "null", ";", "(", ")", "{", "}", "(", ")", "{", "}", "(", ")", "{", "}", "(", ")", "{", "}", "(", ")", "{", "}", "!=", "null", "return", ";", ".", "hasNext", ";", "return", ";", ".", "hasNext", ";", "return", ";", "==", ";", ";", "return", ";", "==", ";", ";", "return", ";", "this", ".", "next", "this", ".", "next", "this", ".", "current", "(", ")", "=", "this", ".", "next", "this", ".", "children", "(", ")", "=", "fetchIfNecessary", "this", ".", "phase", "ImportPhase", ".", "AFTER_PROFILE_ACTIVATION", "=", "=", "fetchIfNecessary", "this", ".", "phase", "ImportPhase", ".", "BEFORE_PROFILE_ACTIVATION", "=", "null", "=", "this", ".", "next", "this", ".", "next", ".", "next", "this", ".", "current", ".", "iterator", "(", ")", "this", ".", "phase", "ImportPhase", ".", "BEFORE_PROFILE_ACTIVATION", "this", ".", "children", ".", "iterator", "(", ")", "this", ".", "phase", "this", ".", "next", "ConfigDataEnvironmentContributor", ".", "this", "this", ".", "current", "(", ")", ".", "next", "(", ")", "getChildren", "(", ")", "this", ".", "children", "(", ")", "(", ")", "this", ".", "phase"], "metrics": {"cyclomatic_complexity": 6, "n_ast_nodes": 241, "ast_depth": 12, "n_identifiers": 13, "vocab_size": 28, "n_whitespaces": 140, "n_words": 69, "nloc": 24, "token_counts": 160}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringConfigurationPropertySources.java#55-57", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringConfigurationPropertySources.java", "language": "Java"}, "method": {"name": "isUsingSources", "qualified_name": "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources#isUsingSources", "start_line": 55, "end_line": 57, "signature": "isUsingSources(Iterable<PropertySource<?>> sources)", "original_code": "boolean isUsingSources(Iterable<PropertySource<?>> sources) {\n\t\treturn this.sources == sources;\n\t}", "doc_comment": ""}, "code_tokens": ["boolean", "isUsingSources", "(", ")", "{", "}", "sources", "return", ";", "Iterable", "==", "sources", "<", ">", "this", ".", "sources", "PropertySource", "<", ">", "?"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 34, "ast_depth": 10, "n_identifiers": 2, "vocab_size": 17, "n_whitespaces": 11, "n_words": 9, "nloc": 3, "token_counts": 21}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringConfigurationPropertySources.java#59-62", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringConfigurationPropertySources.java", "language": "Java"}, "method": {"name": "iterator", "qualified_name": "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources#iterator", "start_line": 59, "end_line": 62, "signature": "iterator()", "original_code": "@Override\n\tpublic Iterator<ConfigurationPropertySource> iterator() {\n\t\treturn new SourcesIterator(this.sources.iterator(), this::adapt);\n\t}", "doc_comment": ""}, "code_tokens": ["iterator", "public", "Iterator", "(", ")", "{", "}", "@", "Override", "<", "ConfigurationPropertySource", ">", "return", ";", "new", "SourcesIterator", "(", ",", ")", ".", "iterator", "this", "::", "adapt", "this", ".", "sources", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 44, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 22, "n_whitespaces": 13, "n_words": 13, "nloc": 4, "token_counts": 29}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringConfigurationPropertySources.java#64-77", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringConfigurationPropertySources.java", "language": "Java"}, "method": {"name": "adapt", "qualified_name": "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources#adapt", "start_line": 64, "end_line": 77, "signature": "adapt(PropertySource<?> source)", "original_code": "private ConfigurationPropertySource adapt(PropertySource<?> source) {\n\t\tConfigurationPropertySource result = this.cache.get(source);\n\t\t// Most PropertySources test equality only using the source name, so we need to\n\t\t// check the actual source hasn't also changed.\n\t\tif (result != null && result.getUnderlyingSource() == source) {\n\t\t\treturn result;\n\t\t}\n\t\tresult = SpringConfigurationPropertySource.from(source);\n\t\tif (source instanceof PropertySourceInfo propertySourceInfo) {\n\t\t\tresult = result.withPrefix(propertySourceInfo.getPrefix());\n\t\t}\n\t\tthis.cache.put(source, result);\n\t\treturn result;\n\t}", "doc_comment": ""}, "code_tokens": ["ConfigurationPropertySource", "adapt", "private", "(", ")", "{", "// Most PropertySources test equality only using the source name, so we need to", "// check the actual source hasn't also changed.", "}", "source", "ConfigurationPropertySource", ";", "if", ";", "if", ";", "return", "result", ";", "PropertySource", "result", "=", "(", ")", "{", "}", "result", "=", "(", ")", "{", "}", ".", "put", "<", ">", ".", "get", "&&", "return", "result", ";", "SpringConfigurationPropertySource", ".", "from", "source", "instanceof", "PropertySourceInfo", "propertySourceInfo", ";", "this", ".", "cache", "(", "source", ",", "result", ")", "?", "this", ".", "cache", "(", "source", ")", "result", "!=", "null", "==", "source", "(", "source", ")", "result", "=", "result", ".", "getUnderlyingSource", "result", ".", "withPrefix", "(", ")", "(", ")", "propertySourceInfo", ".", "getPrefix", "(", ")"], "metrics": {"cyclomatic_complexity": 4, "n_ast_nodes": 132, "ast_depth": 12, "n_identifiers": 12, "vocab_size": 37, "n_whitespaces": 87, "n_words": 61, "nloc": 14, "token_counts": 90}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringConfigurationPropertySources.java#94-97", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringConfigurationPropertySources.java", "language": "Java"}, "method": {"name": "hasNext", "qualified_name": "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources#hasNext", "start_line": 94, "end_line": 97, "signature": "hasNext()", "original_code": "@Override\n\t\tpublic boolean hasNext() {\n\t\t\treturn fetchNext() != null;\n\t\t}", "doc_comment": ""}, "code_tokens": ["boolean", "hasNext", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "!=", "null", "fetchNext", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 26, "ast_depth": 8, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 16, "n_words": 7, "nloc": 4, "token_counts": 16}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringConfigurationPropertySources.java#99-107", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringConfigurationPropertySources.java", "language": "Java"}, "method": {"name": "next", "qualified_name": "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources#next", "start_line": 99, "end_line": 107, "signature": "next()", "original_code": "@Override\n\t\tpublic ConfigurationPropertySource next() {\n\t\t\tConfigurationPropertySource next = fetchNext();\n\t\t\tif (next == null) {\n\t\t\t\tthrow new NoSuchElementException();\n\t\t\t}\n\t\t\tthis.next = null;\n\t\t\treturn next;\n\t\t}", "doc_comment": ""}, "code_tokens": ["ConfigurationPropertySource", "next", "public", "(", ")", "{", "}", "@", "Override", "ConfigurationPropertySource", ";", "if", ";", "return", "next", ";", "next", "=", "(", ")", "{", "}", "=", "null", "fetchNext", "next", "==", "null", "throw", ";", "this", ".", "next", "(", ")", "new", "NoSuchElementException", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 60, "ast_depth": 9, "n_identifiers": 3, "vocab_size": 21, "n_whitespaces": 46, "n_words": 18, "nloc": 9, "token_counts": 39}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringConfigurationPropertySources.java#109-129", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringConfigurationPropertySources.java", "language": "Java"}, "method": {"name": "fetchNext", "qualified_name": "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources#fetchNext", "start_line": 109, "end_line": 129, "signature": "fetchNext()", "original_code": "private @Nullable ConfigurationPropertySource fetchNext() {\n\t\t\tif (this.next == null) {\n\t\t\t\tif (this.iterators.isEmpty()) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tif (!this.iterators.peek().hasNext()) {\n\t\t\t\t\tthis.iterators.pop();\n\t\t\t\t\treturn fetchNext();\n\t\t\t\t}\n\t\t\t\tPropertySource<?> candidate = this.iterators.peek().next();\n\t\t\t\tif (candidate.getSource() instanceof ConfigurableEnvironment configurableEnvironment) {\n\t\t\t\t\tpush(configurableEnvironment);\n\t\t\t\t\treturn fetchNext();\n\t\t\t\t}\n\t\t\t\tif (isIgnored(candidate)) {\n\t\t\t\t\treturn fetchNext();\n\t\t\t\t}\n\t\t\t\tthis.next = this.adapter.apply(candidate);\n\t\t\t}\n\t\t\treturn this.next;\n\t\t}", "doc_comment": ""}, "code_tokens": ["ConfigurationPropertySource", "fetchNext", "private", "(", ")", "{", "}", "@", "Nullable", "if", "return", ";", "(", ")", "{", "}", "this", ".", "next", "==", "null", "if", "if", ";", "if", "if", ";", "this", ".", "next", "(", ")", "{", "}", "(", ")", "{", "}", "PropertySource", "candidate", "=", "(", ")", "{", "}", "(", ")", "{", "}", "=", ".", "isEmpty", "return", "null", ";", "!", ";", "return", ";", "<", ">", ".", "next", "instanceof", "ConfigurableEnvironment", "configurableEnvironment", ";", "return", ";", "isIgnored", "return", ";", "this", ".", "next", ".", "apply", "this", ".", "iterators", "(", ")", ".", "hasNext", ".", "pop", "fetchNext", "?", ".", "peek", "(", ")", "candidate", ".", "getSource", "push", "fetchNext", "(", "candidate", ")", "fetchNext", "this", ".", "adapter", "(", "candidate", ")", ".", "peek", "(", ")", "this", ".", "iterators", "(", ")", "(", ")", "this", ".", "iterators", "(", ")", "(", ")", "(", "configurableEnvironment", ")", "(", ")", "(", ")", "this", ".", "iterators", "(", ")"], "metrics": {"cyclomatic_complexity": 6, "n_ast_nodes": 209, "ast_depth": 12, "n_identifiers": 15, "vocab_size": 37, "n_whitespaces": 130, "n_words": 54, "nloc": 21, "token_counts": 137}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringConfigurationPropertySources.java#131-133", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringConfigurationPropertySources.java", "language": "Java"}, "method": {"name": "push", "qualified_name": "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources#push", "start_line": 131, "end_line": 133, "signature": "push(ConfigurableEnvironment environment)", "original_code": "private void push(ConfigurableEnvironment environment) {\n\t\t\tthis.iterators.push(environment.getPropertySources().iterator());\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "push", "private", "(", ")", "{", "}", "ConfigurableEnvironment", "environment", ";", ".", "push", "this", ".", "iterators", "(", ")", ".", "iterator", "environment", ".", "getPropertySources", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 40, "ast_depth": 10, "n_identifiers": 5, "vocab_size": 15, "n_whitespaces": 11, "n_words": 11, "nloc": 3, "token_counts": 26}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringConfigurationPropertySources.java#135-138", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringConfigurationPropertySources.java", "language": "Java"}, "method": {"name": "isIgnored", "qualified_name": "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources#isIgnored", "start_line": 135, "end_line": 138, "signature": "isIgnored(PropertySource<?> candidate)", "original_code": "private boolean isIgnored(PropertySource<?> candidate) {\n\t\t\treturn (candidate instanceof StubPropertySource\n\t\t\t\t\t|| candidate instanceof ConfigurationPropertySourcesPropertySource);\n\t\t}", "doc_comment": ""}, "code_tokens": ["boolean", "isIgnored", "private", "(", ")", "{", "}", "candidate", "return", ";", "PropertySource", "(", ")", "<", ">", "||", "?", "candidate", "instanceof", "StubPropertySource", "candidate", "instanceof", "ConfigurationPropertySourcesPropertySource"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 37, "ast_depth": 8, "n_identifiers": 2, "vocab_size": 18, "n_whitespaces": 23, "n_words": 12, "nloc": 4, "token_counts": 23}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java#78-86", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java", "language": "Java"}, "method": {"name": "getAncestorOfCheck", "qualified_name": "org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySource#getAncestorOfCheck", "start_line": 78, "end_line": 86, "signature": "getAncestorOfCheck(\n\t\t\tPropertyMapper[] mappers)", "original_code": "private BiPredicate<ConfigurationPropertyName, ConfigurationPropertyName> getAncestorOfCheck(\n\t\t\tPropertyMapper[] mappers) {\n\t\tBiPredicate<ConfigurationPropertyName, ConfigurationPropertyName> ancestorOfCheck = mappers[0]\n\t\t\t.getAncestorOfCheck();\n\t\tfor (int i = 1; i < mappers.length; i++) {\n\t\t\tancestorOfCheck = ancestorOfCheck.or(mappers[i].getAncestorOfCheck());\n\t\t}\n\t\treturn ancestorOfCheck;\n\t}", "doc_comment": ""}, "code_tokens": ["getAncestorOfCheck", "private", "BiPredicate", "(", ")", "{", "}", "<", "ConfigurationPropertyName", ",", "ConfigurationPropertyName", ">", "mappers", ";", "for", "(", ";", ")", "return", "ancestorOfCheck", ";", "PropertyMapper", "BiPredicate", "ancestorOfCheck", "=", ";", "i", "<", "i", "++", "{", "}", "[", "]", "<", "ConfigurationPropertyName", ",", "ConfigurationPropertyName", ">", ".", "getAncestorOfCheck", "int", "i", "=", "1", "mappers", ".", "length", ";", "mappers", "[", "0", "]", "(", ")", "ancestorOfCheck", "=", "ancestorOfCheck", ".", "or", "(", ")", ".", "getAncestorOfCheck", "mappers", "[", "i", "]", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 103, "ast_depth": 12, "n_identifiers": 6, "vocab_size": 28, "n_whitespaces": 47, "n_words": 30, "nloc": 9, "token_counts": 70}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java#88-97", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java", "language": "Java"}, "method": {"name": "assertEnumerablePropertySource", "qualified_name": "org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySource#assertEnumerablePropertySource", "start_line": 88, "end_line": 97, "signature": "assertEnumerablePropertySource()", "original_code": "private void assertEnumerablePropertySource() {\n\t\tif (getPropertySource() instanceof MapPropertySource mapSource) {\n\t\t\ttry {\n\t\t\t\tmapSource.getSource().size();\n\t\t\t}\n\t\t\tcatch (UnsupportedOperationException ex) {\n\t\t\t\tthrow new IllegalArgumentException(\"PropertySource must be fully enumerable\");\n\t\t\t}\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "assertEnumerablePropertySource", "private", "(", ")", "{", "}", "if", "(", ")", "{", "}", "instanceof", "MapPropertySource", "mapSource", "try", "getPropertySource", "{", "}", "catch", "(", ")", "(", ")", ";", "ex", "{", "}", ".", "size", "UnsupportedOperationException", "throw", ";", "mapSource", ".", "getSource", "(", ")", "new", "IllegalArgumentException", "(", ")", "(", ")", "\"", "PropertySource must be fully enumerable", "\""], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 73, "ast_depth": 13, "n_identifiers": 6, "vocab_size": 25, "n_whitespaces": 52, "n_words": 23, "nloc": 10, "token_counts": 47}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java#99-102", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java", "language": "Java"}, "method": {"name": "getCaching", "qualified_name": "org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySource#getCaching", "start_line": 99, "end_line": 102, "signature": "getCaching()", "original_code": "@Override\n\tpublic ConfigurationPropertyCaching getCaching() {\n\t\treturn this.cache;\n\t}", "doc_comment": ""}, "code_tokens": ["ConfigurationPropertyCaching", "getCaching", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "this", ".", "cache"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 11, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java#104-121", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java", "language": "Java"}, "method": {"name": "getConfigurationProperty", "qualified_name": "org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySource#getConfigurationProperty", "start_line": 104, "end_line": 121, "signature": "getConfigurationProperty(@Nullable ConfigurationPropertyName name)", "original_code": "@Override\n\tpublic @Nullable ConfigurationProperty getConfigurationProperty(@Nullable ConfigurationPropertyName name) {\n\t\tif (name == null) {\n\t\t\treturn null;\n\t\t}\n\t\tConfigurationProperty configurationProperty = super.getConfigurationProperty(name);\n\t\tif (configurationProperty != null) {\n\t\t\treturn configurationProperty;\n\t\t}\n\t\tfor (String candidate : getCache().getMapped(name)) {\n\t\t\tObject value = getPropertySourceProperty(candidate);\n\t\t\tif (value != null) {\n\t\t\t\tOrigin origin = PropertySourceOrigin.get(getPropertySource(), candidate);\n\t\t\t\treturn ConfigurationProperty.of(this, name, value, origin);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}", "doc_comment": ""}, "code_tokens": ["ConfigurationProperty", "getConfigurationProperty", "public", "(", ")", "{", "}", "@", "Override", "@", "Nullable", "ConfigurationPropertyName", "name", "if", "ConfigurationProperty", ";", "if", "for", "(", "String", "candidate", ":", ")", "return", "null", ";", "(", ")", "{", "}", "configurationProperty", "=", "(", ")", "{", "}", ".", "getMapped", "{", "}", "@", "Nullable", "name", "==", "null", "return", "null", ";", "super", ".", "getConfigurationProperty", "configurationProperty", "!=", "null", "return", "configurationProperty", ";", "getCache", "(", "name", ")", "Object", ";", "if", "(", "name", ")", "(", ")", "value", "=", "(", ")", "{", "}", "getPropertySourceProperty", "value", "!=", "null", "Origin", ";", "return", ";", "(", "candidate", ")", "origin", "=", "ConfigurationProperty", ".", "of", "PropertySourceOrigin", ".", "get", "(", "this", ",", "name", ",", "value", ",", "origin", ")", "(", ",", "candidate", ")", "getPropertySource", "(", ")"], "metrics": {"cyclomatic_complexity": 5, "n_ast_nodes": 158, "ast_depth": 14, "n_identifiers": 16, "vocab_size": 39, "n_whitespaces": 98, "n_words": 51, "nloc": 18, "token_counts": 110}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java#123-126", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java", "language": "Java"}, "method": {"name": "getSystemEnvironmentProperty", "qualified_name": "org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySource#getSystemEnvironmentProperty", "start_line": 123, "end_line": 126, "signature": "getSystemEnvironmentProperty(Map<String, Object> systemEnvironment, String name)", "original_code": "@Override\n\tprotected @Nullable Object getSystemEnvironmentProperty(Map<String, Object> systemEnvironment, String name) {\n\t\treturn getCache().getSystemEnvironmentProperty(name);\n\t}", "doc_comment": ""}, "code_tokens": ["Object", "getSystemEnvironmentProperty", "protected", "(", ",", ")", "{", "}", "@", "Override", "@", "Nullable", "systemEnvironment", "String", "name", "return", ";", "Map", ".", "getSystemEnvironmentProperty", "<", "String", ",", "Object", ">", "getCache", "(", "name", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 47, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 21, "n_whitespaces": 16, "n_words": 15, "nloc": 4, "token_counts": 31}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java#128-132", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java", "language": "Java"}, "method": {"name": "stream", "qualified_name": "org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySource#stream", "start_line": 128, "end_line": 132, "signature": "stream()", "original_code": "@Override\n\tpublic Stream<ConfigurationPropertyName> stream() {\n\t\t@Nullable ConfigurationPropertyName[] names = getConfigurationPropertyNames();\n\t\treturn Arrays.stream(names).filter(Objects::nonNull);\n\t}", "doc_comment": ""}, "code_tokens": ["stream", "public", "Stream", "(", ")", "{", "}", "@", "Override", "<", "ConfigurationPropertyName", ">", ";", "return", ";", "ConfigurationPropertyName", "names", "=", ".", "filter", "@", "Nullable", "[", "]", "getConfigurationPropertyNames", "Arrays", ".", "stream", "(", ")", "(", ")", "(", "names", ")", "Objects", "::", "nonNull"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 60, "ast_depth": 8, "n_identifiers": 9, "vocab_size": 26, "n_whitespaces": 18, "n_words": 16, "nloc": 5, "token_counts": 38}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java#134-137", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java", "language": "Java"}, "method": {"name": "iterator", "qualified_name": "org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySource#iterator", "start_line": 134, "end_line": 137, "signature": "iterator()", "original_code": "@Override\n\tpublic Iterator<ConfigurationPropertyName> iterator() {\n\t\treturn new ConfigurationPropertyNamesIterator(getConfigurationPropertyNames());\n\t}", "doc_comment": ""}, "code_tokens": ["iterator", "public", "Iterator", "(", ")", "{", "}", "@", "Override", "<", "ConfigurationPropertyName", ">", "return", ";", "new", "ConfigurationPropertyNamesIterator", "(", ")", "getConfigurationPropertyNames", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 34, "ast_depth": 9, "n_identifiers": 3, "vocab_size": 17, "n_whitespaces": 12, "n_words": 9, "nloc": 4, "token_counts": 21}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java#139-163", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java", "language": "Java"}, "method": {"name": "containsDescendantOf", "qualified_name": "org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySource#containsDescendantOf", "start_line": 139, "end_line": 163, "signature": "containsDescendantOf(ConfigurationPropertyName name)", "original_code": "@Override\n\tpublic ConfigurationPropertyState containsDescendantOf(ConfigurationPropertyName name) {\n\t\tConfigurationPropertyState result = super.containsDescendantOf(name);\n\t\tif (result != ConfigurationPropertyState.UNKNOWN) {\n\t\t\treturn result;\n\t\t}\n\t\tif (this.ancestorOfCheck == PropertyMapper.DEFAULT_ANCESTOR_OF_CHECK) {\n\t\t\tSet<ConfigurationPropertyName> descendants = getCache().getDescendants();\n\t\t\tif (descendants != null) {\n\t\t\t\tif (name.isEmpty() && !descendants.isEmpty()) {\n\t\t\t\t\treturn ConfigurationPropertyState.PRESENT;\n\t\t\t\t}\n\t\t\t\treturn !descendants.contains(name) ? ConfigurationPropertyState.ABSENT\n\t\t\t\t\t\t: ConfigurationPropertyState.PRESENT;\n\t\t\t}\n\t\t}\n\t\tresult = (this.containsDescendantOfCache != null) ? this.containsDescendantOfCache.get(name) : null;\n\t\tif (result == null) {\n\t\t\tresult = (!ancestorOfCheck(name)) ? ConfigurationPropertyState.ABSENT : ConfigurationPropertyState.PRESENT;\n\t\t\tif (this.containsDescendantOfCache != null) {\n\t\t\t\tthis.containsDescendantOfCache.put(name, result);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}", "doc_comment": ""}, "code_tokens": ["ConfigurationPropertyState", "containsDescendantOf", "public", "(", ")", "{", "}", "@", "Override", "ConfigurationPropertyName", "name", "ConfigurationPropertyState", ";", "if", "if", ";", "if", "return", "result", ";", "result", "=", "(", ")", "{", "}", "(", ")", "{", "}", "result", "=", "(", ")", "{", "}", "super", ".", "containsDescendantOf", "result", "!=", "return", "result", ";", "==", ";", "if", "?", ":", "null", "result", "==", "null", ";", "if", "(", "name", ")", "ConfigurationPropertyState", ".", "UNKNOWN", "this", ".", "ancestorOfCheck", "PropertyMapper", ".", "DEFAULT_ANCESTOR_OF_CHECK", "Set", "descendants", "=", "(", ")", "{", "}", "(", ")", ".", "get", "result", "=", "(", ")", "{", "}", "<", "ConfigurationPropertyName", ">", ".", "getDescendants", "descendants", "!=", "null", "if", "return", ";", "!=", "null", "this", ".", "containsDescendantOfCache", "(", "name", ")", "?", ":", "!=", "null", ";", "getCache", "(", ")", "(", ")", "{", "}", "?", ":", "this", ".", "containsDescendantOfCache", "(", ")", "ConfigurationPropertyState", ".", "ABSENT", "ConfigurationPropertyState", ".", "PRESENT", "this", ".", "containsDescendantOfCache", ".", "put", "(", ")", "&&", "return", ";", "!", "ConfigurationPropertyState", ".", "ABSENT", "ConfigurationPropertyState", ".", "PRESENT", "!", "this", ".", "containsDescendantOfCache", "(", "name", ",", "result", ")", "name", ".", "isEmpty", "!", "ConfigurationPropertyState", ".", "PRESENT", "descendants", ".", "contains", "ancestorOfCheck", "(", ")", "descendants", ".", "isEmpty", "(", "name", ")", "(", "name", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 8, "n_ast_nodes": 263, "ast_depth": 14, "n_identifiers": 19, "vocab_size": 44, "n_whitespaces": 148, "n_words": 76, "nloc": 25, "token_counts": 178}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java#165-173", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java", "language": "Java"}, "method": {"name": "ancestorOfCheck", "qualified_name": "org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySource#ancestorOfCheck", "start_line": 165, "end_line": 173, "signature": "ancestorOfCheck(ConfigurationPropertyName name)", "original_code": "private boolean ancestorOfCheck(ConfigurationPropertyName name) {\n\t\t@Nullable ConfigurationPropertyName[] candidates = getConfigurationPropertyNames();\n\t\tfor (ConfigurationPropertyName candidate : candidates) {\n\t\t\tif (candidate != null && this.ancestorOfCheck.test(name, candidate)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}", "doc_comment": ""}, "code_tokens": ["boolean", "ancestorOfCheck", "private", "(", ")", "{", "}", "ConfigurationPropertyName", "name", ";", "for", "(", "ConfigurationPropertyName", "candidate", ":", "candidates", ")", "return", "false", ";", "ConfigurationPropertyName", "candidates", "=", "{", "}", "@", "Nullable", "[", "]", "getConfigurationPropertyNames", "if", "(", ")", "(", ")", "{", "}", "&&", "return", "true", ";", "candidate", "!=", "null", ".", "test", "this", ".", "ancestorOfCheck", "(", "name", ",", "candidate", ")"], "metrics": {"cyclomatic_complexity": 4, "n_ast_nodes": 80, "ast_depth": 11, "n_identifiers": 7, "vocab_size": 31, "n_whitespaces": 49, "n_words": 25, "nloc": 9, "token_counts": 54}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java#175-186", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java", "language": "Java"}, "method": {"name": "getConfigurationPropertyNames", "qualified_name": "org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySource#getConfigurationPropertyNames", "start_line": 175, "end_line": 186, "signature": "getConfigurationPropertyNames()", "original_code": "@Nullable ConfigurationPropertyName[] getConfigurationPropertyNames() {\n\t\tif (!isImmutablePropertySource()) {\n\t\t\treturn getCache().getConfigurationPropertyNames(getPropertySource().getPropertyNames());\n\t\t}\n\t\t@Nullable ConfigurationPropertyName[] configurationPropertyNames = this.configurationPropertyNames;\n\t\tif (configurationPropertyNames == null) {\n\t\t\tconfigurationPropertyNames = getCache()\n\t\t\t\t.getConfigurationPropertyNames(getPropertySource().getPropertyNames());\n\t\t\tthis.configurationPropertyNames = configurationPropertyNames;\n\t\t}\n\t\treturn configurationPropertyNames;\n\t}", "doc_comment": ""}, "code_tokens": ["getConfigurationPropertyNames", "ConfigurationPropertyName", "(", ")", "{", "}", "@", "Nullable", "[", "]", "if", ";", "if", "return", "configurationPropertyNames", ";", "(", ")", "{", "}", "ConfigurationPropertyName", "configurationPropertyNames", "=", "(", ")", "{", "}", "!", "return", ";", "@", "Nullable", "[", "]", "this", ".", "configurationPropertyNames", "configurationPropertyNames", "==", "null", ";", ";", "isImmutablePropertySource", ".", "getConfigurationPropertyNames", "configurationPropertyNames", "=", "=", "configurationPropertyNames", "(", ")", "getCache", "(", ")", ".", "getConfigurationPropertyNames", "this", ".", "configurationPropertyNames", "(", ")", ".", "getPropertyNames", "getCache", "(", ")", "getPropertySource", "(", ")", "(", ")", ".", "getPropertyNames", "(", ")", "getPropertySource", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 128, "ast_depth": 13, "n_identifiers": 7, "vocab_size": 24, "n_whitespaces": 56, "n_words": 28, "nloc": 12, "token_counts": 80}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java#188-190", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java", "language": "Java"}, "method": {"name": "getCache", "qualified_name": "org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySource#getCache", "start_line": 188, "end_line": 190, "signature": "getCache()", "original_code": "private Cache getCache() {\n\t\treturn this.cache.get(this::createCache, this::updateCache);\n\t}", "doc_comment": ""}, "code_tokens": ["Cache", "getCache", "private", "(", ")", "{", "}", "return", ";", ".", "get", "this", ".", "cache", "(", ",", ")", "this", "::", "createCache", "this", "::", "updateCache"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 34, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 17, "n_whitespaces": 10, "n_words": 11, "nloc": 3, "token_counts": 23}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java#192-196", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java", "language": "Java"}, "method": {"name": "createCache", "qualified_name": "org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySource#createCache", "start_line": 192, "end_line": 196, "signature": "createCache()", "original_code": "private Cache createCache() {\n\t\tboolean immutable = isImmutablePropertySource();\n\t\tboolean captureDescendants = this.ancestorOfCheck == PropertyMapper.DEFAULT_ANCESTOR_OF_CHECK;\n\t\treturn new Cache(getMappers(), immutable, captureDescendants, isSystemEnvironmentSource());\n\t}", "doc_comment": ""}, "code_tokens": ["Cache", "createCache", "private", "(", ")", "{", "}", "boolean", ";", "boolean", ";", "return", ";", "immutable", "=", "captureDescendants", "=", "new", "Cache", "isImmutablePropertySource", "==", "(", ",", "immutable", ",", "captureDescendants", ",", ")", "(", ")", "this", ".", "ancestorOfCheck", "PropertyMapper", ".", "DEFAULT_ANCESTOR_OF_CHECK", "getMappers", "isSystemEnvironmentSource", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 63, "ast_depth": 9, "n_identifiers": 9, "vocab_size": 24, "n_whitespaces": 27, "n_words": 19, "nloc": 5, "token_counts": 42}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java#198-201", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java", "language": "Java"}, "method": {"name": "updateCache", "qualified_name": "org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySource#updateCache", "start_line": 198, "end_line": 201, "signature": "updateCache(Cache cache)", "original_code": "private Cache updateCache(Cache cache) {\n\t\tcache.update(getPropertySource());\n\t\treturn cache;\n\t}", "doc_comment": ""}, "code_tokens": ["Cache", "updateCache", "private", "(", ")", "{", "}", "Cache", "cache", ";", "return", "cache", ";", "cache", ".", "update", "(", ")", "getPropertySource", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 33, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 13, "n_whitespaces": 13, "n_words": 10, "nloc": 4, "token_counts": 21}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java#203-212", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java", "language": "Java"}, "method": {"name": "isImmutablePropertySource", "qualified_name": "org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySource#isImmutablePropertySource", "start_line": 203, "end_line": 212, "signature": "isImmutablePropertySource()", "original_code": "boolean isImmutablePropertySource() {\n\t\tEnumerablePropertySource<?> source = getPropertySource();\n\t\tif (source instanceof PropertySourceInfo propertySourceInfo) {\n\t\t\treturn propertySourceInfo.isImmutable();\n\t\t}\n\t\tif (StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME.equals(source.getName())) {\n\t\t\treturn source.getSource() == System.getenv();\n\t\t}\n\t\treturn false;\n\t}", "doc_comment": ""}, "code_tokens": ["boolean", "isImmutablePropertySource", "(", ")", "{", "}", ";", "if", "if", "return", "false", ";", "EnumerablePropertySource", "source", "=", "(", ")", "{", "}", "(", ")", "{", "}", "<", ">", "getPropertySource", "source", "instanceof", "PropertySourceInfo", "propertySourceInfo", "return", ";", ".", "equals", "return", ";", "?", "(", ")", "propertySourceInfo", ".", "isImmutable", "StandardEnvironment", ".", "SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME", "(", ")", "==", "(", ")", "source", ".", "getName", "source", ".", "getSource", "System", ".", "getenv", "(", ")", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 98, "ast_depth": 10, "n_identifiers": 12, "vocab_size": 30, "n_whitespaces": 45, "n_words": 26, "nloc": 10, "token_counts": 65}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java#214-217", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java", "language": "Java"}, "method": {"name": "getPropertySource", "qualified_name": "org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySource#getPropertySource", "start_line": 214, "end_line": 217, "signature": "getPropertySource()", "original_code": "@Override\n\tprotected EnumerablePropertySource<?> getPropertySource() {\n\t\treturn (EnumerablePropertySource<?>) super.getPropertySource();\n\t}", "doc_comment": ""}, "code_tokens": ["getPropertySource", "protected", "EnumerablePropertySource", "(", ")", "{", "}", "@", "Override", "<", ">", "return", ";", "?", "(", ")", "EnumerablePropertySource", "super", ".", "getPropertySource", "<", ">", "(", ")", "?"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 41, "ast_depth": 9, "n_identifiers": 2, "vocab_size": 16, "n_whitespaces": 12, "n_words": 8, "nloc": 4, "token_counts": 25}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java#241-256", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java", "language": "Java"}, "method": {"name": "update", "qualified_name": "org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySource#update", "start_line": 241, "end_line": 256, "signature": "update(EnumerablePropertySource<?> propertySource)", "original_code": "void update(EnumerablePropertySource<?> propertySource) {\n\t\t\tif (this.data == null || !this.immutable) {\n\t\t\t\tint count = 0;\n\t\t\t\twhile (true) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\ttryUpdate(propertySource);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tcatch (ConcurrentModificationException ex) {\n\t\t\t\t\t\tif (count++ > 10) {\n\t\t\t\t\t\t\tthrow ex;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "update", "(", ")", "{", "}", "propertySource", "if", "EnumerablePropertySource", "(", ")", "{", "}", "<", ">", "||", ";", "while", "?", "==", "null", "!", "int", "count", "=", "0", "(", "true", ")", "{", "}", "this", ".", "data", "this", ".", "immutable", "try", "{", "}", "catch", "(", ")", ";", "return", ";", "ex", "{", "}", "tryUpdate", "ConcurrentModificationException", "if", "(", "propertySource", ")", "(", ")", "{", "}", ">", "10", "throw", "ex", ";", "count", "++"], "metrics": {"cyclomatic_complexity": 6, "n_ast_nodes": 104, "ast_depth": 15, "n_identifiers": 7, "vocab_size": 36, "n_whitespaces": 109, "n_words": 27, "nloc": 16, "token_counts": 66}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java#258-292", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java", "language": "Java"}, "method": {"name": "tryUpdate", "qualified_name": "org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySource#tryUpdate", "start_line": 258, "end_line": 292, "signature": "tryUpdate(EnumerablePropertySource<?> propertySource)", "original_code": "private void tryUpdate(EnumerablePropertySource<?> propertySource) {\n\t\t\tData data = this.data;\n\t\t\tString[] lastUpdated = (data != null) ? data.lastUpdated() : null;\n\t\t\tString[] propertyNames = propertySource.getPropertyNames();\n\t\t\tif (lastUpdated != null && Arrays.equals(lastUpdated, propertyNames)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tint size = propertyNames.length;\n\t\t\tMap<ConfigurationPropertyName, Set<String>> mappings = cloneOrCreate(\n\t\t\t\t\t(data != null) ? data.mappings() : null, size);\n\t\t\tMap<String, ConfigurationPropertyName> reverseMappings = cloneOrCreate(\n\t\t\t\t\t(data != null) ? data.reverseMappings() : null, size);\n\t\t\tSet<ConfigurationPropertyName> descendants = (!this.captureDescendants) ? null : new HashSet<>();\n\t\t\tMap<String, Object> systemEnvironmentCopy = (!this.systemEnvironmentSource) ? null\n\t\t\t\t\t: copySource(propertySource);\n\t\t\tfor (PropertyMapper propertyMapper : this.mappers) {\n\t\t\t\tfor (String propertyName : propertyNames) {\n\t\t\t\t\tif (!reverseMappings.containsKey(propertyName)) {\n\t\t\t\t\t\tConfigurationPropertyName configurationPropertyName = propertyMapper.map(propertyName);\n\t\t\t\t\t\tif (configurationPropertyName != null && !configurationPropertyName.isEmpty()) {\n\t\t\t\t\t\t\tadd(mappings, configurationPropertyName, propertyName);\n\t\t\t\t\t\t\treverseMappings.put(propertyName, configurationPropertyName);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (String propertyName : propertyNames) {\n\t\t\t\taddParents(descendants, reverseMappings.get(propertyName));\n\t\t\t}\n\t\t\tConfigurationPropertyName[] configurationPropertyNames = this.immutable\n\t\t\t\t\t? reverseMappings.values().toArray(new ConfigurationPropertyName[0]) : null;\n\t\t\tlastUpdated = this.immutable ? null : propertyNames;\n\t\t\tthis.data = new Data(mappings, reverseMappings, descendants, configurationPropertyNames,\n\t\t\t\t\tsystemEnvironmentCopy, lastUpdated);\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "tryUpdate", "private", "(", ")", "{", "}", "propertySource", "Data", ";", ";", ";", "if", ";", ";", ";", ";", ";", "for", "(", "PropertyMapper", "propertyMapper", ":", ")", "for", "(", "String", "propertyName", ":", "propertyNames", ")", ";", ";", ";", "EnumerablePropertySource", "data", "=", "String", "lastUpdated", "=", "String", "propertyNames", "=", "(", ")", "{", "}", "int", "size", "=", "Map", "mappings", "=", "Map", "reverseMappings", "=", "Set", "descendants", "=", "Map", "systemEnvironmentCopy", "=", "this", ".", "mappers", "{", "}", "{", "}", "ConfigurationPropertyName", "configurationPropertyNames", "=", "lastUpdated", "=", "=", "<", ">", "this", ".", "data", "[", "]", "?", ":", "null", "[", "]", "propertySource", ".", "getPropertyNames", "&&", "return", ";", "propertyNames", ".", "length", "<", "ConfigurationPropertyName", ",", ">", "cloneOrCreate", "<", "String", ",", "ConfigurationPropertyName", ">", "cloneOrCreate", "<", "ConfigurationPropertyName", ">", "?", "null", ":", "<", "String", ",", "Object", ">", "?", "null", ":", "for", "(", "String", "propertyName", ":", "propertyNames", ")", ";", "[", "]", "?", ":", "null", "?", "null", ":", "propertyNames", "this", ".", "data", "new", "Data", "?", "(", ")", "data", ".", "lastUpdated", "(", ")", "lastUpdated", "!=", "null", "Arrays", ".", "equals", "Set", "(", ",", "size", ")", "(", ",", "size", ")", "(", ")", "new", "(", ")", "copySource", "{", "}", "addParents", "this", ".", "immutable", ".", "toArray", "this", ".", "immutable", "(", "mappings", ",", "reverseMappings", ",", "descendants", ",", "configurationPropertyNames", ",", "systemEnvironmentCopy", ",", "lastUpdated", ")", "data", "!=", "null", "(", ")", "(", "lastUpdated", ",", "propertyNames", ")", "<", "String", ">", "?", ":", "null", "?", ":", "null", "!", "HashSet", "(", ")", "!", "(", "propertySource", ")", "if", "(", "descendants", ",", ")", "reverseMappings", ".", "values", "(", ")", "(", ")", "data", ".", "mappings", "(", ")", "data", ".", "reverseMappings", "this", ".", "captureDescendants", "<", ">", "this", ".", "systemEnvironmentSource", "(", ")", "{", "}", "reverseMappings", ".", "get", "(", ")", "new", "ConfigurationPropertyName", "data", "!=", "null", "(", ")", "data", "!=", "null", "(", ")", "!", "ConfigurationPropertyName", ";", "if", "(", "propertyName", ")", "[", "0", "]", "reverseMappings", ".", "containsKey", "configurationPropertyName", "=", "(", ")", "{", "}", "(", "propertyName", ")", "propertyMapper", ".", "map", "&&", ";", ";", "(", "propertyName", ")", "configurationPropertyName", "!=", "null", "!", "add", "reverseMappings", ".", "put", "configurationPropertyName", ".", "isEmpty", "(", "mappings", ",", "configurationPropertyName", ",", "propertyName", ")", "(", "propertyName", ",", "configurationPropertyName", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 9, "n_ast_nodes": 470, "ast_depth": 16, "n_identifiers": 33, "vocab_size": 69, "n_whitespaces": 286, "n_words": 138, "nloc": 35, "token_counts": 328}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java#294-297", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java", "language": "Java"}, "method": {"name": "copySource", "qualified_name": "org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySource#copySource", "start_line": 294, "end_line": 297, "signature": "copySource(EnumerablePropertySource<?> propertySource)", "original_code": "@SuppressWarnings(\"unchecked\")\n\t\tprivate HashMap<String, Object> copySource(EnumerablePropertySource<?> propertySource) {\n\t\t\treturn new HashMap<>((Map<String, Object>) propertySource.getSource());\n\t\t}", "doc_comment": ""}, "code_tokens": ["copySource", "private", "HashMap", "(", ")", "{", "}", "@", "SuppressWarnings", "<", "String", ",", "Object", ">", "propertySource", "return", ";", "(", ")", "EnumerablePropertySource", "new", "\"", "unchecked", "\"", "<", ">", "HashMap", "(", ")", "?", "<", ">", "(", ")", "Map", "propertySource", ".", "getSource", "<", "String", ",", "Object", ">", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 69, "ast_depth": 10, "n_identifiers": 4, "vocab_size": 25, "n_whitespaces": 19, "n_words": 17, "nloc": 4, "token_counts": 45}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java#299-301", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java", "language": "Java"}, "method": {"name": "cloneOrCreate", "qualified_name": "org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySource#cloneOrCreate", "start_line": 299, "end_line": 301, "signature": "cloneOrCreate(@Nullable Map<K, V> source, int size)", "original_code": "private <K, V> Map<K, V> cloneOrCreate(@Nullable Map<K, V> source, int size) {\n\t\t\treturn (source != null) ? new LinkedHashMap<>(source) : new LinkedHashMap<>(size);\n\t\t}", "doc_comment": ""}, "code_tokens": ["cloneOrCreate", "private", "<", ",", ">", "Map", "(", ",", ")", "{", "}", "K", "V", "<", "K", ",", "V", ">", "source", "size", "return", ";", "Map", "int", "?", ":", "@", "Nullable", "<", "K", ",", "V", ">", "(", ")", "new", "new", "source", "!=", "null", "LinkedHashMap", "(", "source", ")", "LinkedHashMap", "(", "size", ")", "<", ">", "<", ">"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 81, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 25, "n_whitespaces": 27, "n_words": 23, "nloc": 3, "token_counts": 52}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java#303-315", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java", "language": "Java"}, "method": {"name": "addParents", "qualified_name": "org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySource#addParents", "start_line": 303, "end_line": 315, "signature": "addParents(@Nullable Set<ConfigurationPropertyName> descendants,\n\t\t\t\t@Nullable ConfigurationPropertyName name)", "original_code": "private void addParents(@Nullable Set<ConfigurationPropertyName> descendants,\n\t\t\t\t@Nullable ConfigurationPropertyName name) {\n\t\t\tif (descendants == null || name == null || name.isEmpty()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tConfigurationPropertyName parent = name.getParent();\n\t\t\twhile (!parent.isEmpty()) {\n\t\t\t\tif (!descendants.add(parent)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tparent = parent.getParent();\n\t\t\t}\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "addParents", "private", "(", ",", ")", "{", "}", "descendants", "ConfigurationPropertyName", "name", "if", "ConfigurationPropertyName", ";", "while", "Set", "(", ")", "{", "}", "parent", "=", "(", ")", "{", "}", "@", "Nullable", "<", "ConfigurationPropertyName", ">", "@", "Nullable", "||", "return", ";", "name", ".", "getParent", "!", "if", ";", "||", "name", ".", "isEmpty", "(", ")", "parent", ".", "isEmpty", "(", ")", "{", "}", "parent", "=", "descendants", "==", "null", "name", "==", "null", "(", ")", "(", ")", "!", "return", ";", "parent", ".", "getParent", "descendants", ".", "add", "(", ")", "(", "parent", ")"], "metrics": {"cyclomatic_complexity": 6, "n_ast_nodes": 125, "ast_depth": 11, "n_identifiers": 8, "vocab_size": 30, "n_whitespaces": 80, "n_words": 33, "nloc": 13, "token_counts": 81}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java#317-319", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java", "language": "Java"}, "method": {"name": "add", "qualified_name": "org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySource#add", "start_line": 317, "end_line": 319, "signature": "add(Map<K, Set<T>> map, K key, T value)", "original_code": "private <K, T> void add(Map<K, Set<T>> map, K key, T value) {\n\t\t\tmap.computeIfAbsent(key, (k) -> new HashSet<>()).add(value);\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "add", "private", "<", ",", ">", "(", ",", ",", ")", "{", "}", "K", "T", "map", "K", "key", "T", "value", ";", "Map", ".", "add", "<", "K", ",", ">", "map", ".", "computeIfAbsent", "(", "value", ")", "Set", "(", "key", ",", ")", "<", "T", ">", "->", "(", "k", ")", "new", "HashSet", "(", ")", "<", ">"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 77, "ast_depth": 12, "n_identifiers": 6, "vocab_size": 24, "n_whitespaces": 22, "n_words": 22, "nloc": 3, "token_counts": 51}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java#321-325", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java", "language": "Java"}, "method": {"name": "getMapped", "qualified_name": "org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySource#getMapped", "start_line": 321, "end_line": 325, "signature": "getMapped(ConfigurationPropertyName configurationPropertyName)", "original_code": "Set<String> getMapped(ConfigurationPropertyName configurationPropertyName) {\n\t\t\tData data = this.data;\n\t\t\tAssert.state(data != null, \"'data' must not be null\");\n\t\t\treturn data.mappings().getOrDefault(configurationPropertyName, Collections.emptySet());\n\t\t}", "doc_comment": ""}, "code_tokens": ["getMapped", "Set", "(", ")", "{", "}", "<", "String", ">", "ConfigurationPropertyName", "configurationPropertyName", "Data", ";", ";", "return", ";", "data", "=", "Assert", ".", "state", ".", "getOrDefault", "this", ".", "data", "(", ",", ")", "data", ".", "mappings", "(", "configurationPropertyName", ",", ")", "data", "!=", "null", "\"", "'data' must not be null", "\"", "(", ")", "Collections", ".", "emptySet", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 71, "ast_depth": 9, "n_identifiers": 9, "vocab_size": 29, "n_whitespaces": 30, "n_words": 25, "nloc": 5, "token_counts": 49}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java#327-343", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java", "language": "Java"}, "method": {"name": "getConfigurationPropertyNames", "qualified_name": "org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySource#getConfigurationPropertyNames", "start_line": 327, "end_line": 343, "signature": "getConfigurationPropertyNames(String[] propertyNames)", "original_code": "@Nullable ConfigurationPropertyName[] getConfigurationPropertyNames(String[] propertyNames) {\n\t\t\tData data = this.data;\n\t\t\tAssert.state(data != null, \"'data' must not be null\");\n\t\t\t@Nullable ConfigurationPropertyName[] names = data.configurationPropertyNames();\n\t\t\tif (names != null) {\n\t\t\t\treturn names;\n\t\t\t}\n\t\t\tMap<String, ConfigurationPropertyName> reverseMappings = data.reverseMappings();\n\t\t\tif (reverseMappings == null || reverseMappings.isEmpty()) {\n\t\t\t\treturn EMPTY_NAMES_ARRAY;\n\t\t\t}\n\t\t\tnames = new ConfigurationPropertyName[propertyNames.length];\n\t\t\tfor (int i = 0; i < propertyNames.length; i++) {\n\t\t\t\tnames[i] = reverseMappings.get(propertyNames[i]);\n\t\t\t}\n\t\t\treturn names;\n\t\t}", "doc_comment": ""}, "code_tokens": ["getConfigurationPropertyNames", "ConfigurationPropertyName", "(", ")", "{", "}", "@", "Nullable", "[", "]", "propertyNames", "Data", ";", ";", ";", "if", ";", "if", ";", "for", "(", ";", ")", "return", "names", ";", "String", "data", "=", "Assert", ".", "state", "ConfigurationPropertyName", "names", "=", "(", ")", "{", "}", "Map", "reverseMappings", "=", "(", ")", "{", "}", "names", "=", ";", "i", "<", "i", "++", "{", "}", "[", "]", "this", ".", "data", "(", ",", ")", "@", "Nullable", "[", "]", "data", ".", "configurationPropertyNames", "names", "!=", "null", "return", "names", ";", "<", "String", ",", "ConfigurationPropertyName", ">", "data", ".", "reverseMappings", "||", "return", "EMPTY_NAMES_ARRAY", ";", "new", "ConfigurationPropertyName", "int", "i", "=", "0", "propertyNames", ".", "length", ";", "data", "!=", "null", "\"", "'data' must not be null", "\"", "(", ")", "(", ")", "reverseMappings", "==", "null", "reverseMappings", ".", "isEmpty", "[", "]", "=", "(", ")", "propertyNames", ".", "length", "names", "[", "i", "]", "reverseMappings", ".", "get", "(", ")", "propertyNames", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 5, "n_ast_nodes": 201, "ast_depth": 11, "n_identifiers": 14, "vocab_size": 45, "n_whitespaces": 115, "n_words": 62, "nloc": 17, "token_counts": 135}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java#345-349", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java", "language": "Java"}, "method": {"name": "getDescendants", "qualified_name": "org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySource#getDescendants", "start_line": 345, "end_line": 349, "signature": "getDescendants()", "original_code": "@Nullable Set<ConfigurationPropertyName> getDescendants() {\n\t\t\tData data = this.data;\n\t\t\tAssert.state(data != null, \"'data' must not be null\");\n\t\t\treturn data.descendants();\n\t\t}", "doc_comment": ""}, "code_tokens": ["getDescendants", "Set", "(", ")", "{", "}", "@", "Nullable", "<", "ConfigurationPropertyName", ">", "Data", ";", ";", "return", ";", "data", "=", "Assert", ".", "state", "data", ".", "descendants", "this", ".", "data", "(", ",", ")", "(", ")", "data", "!=", "null", "\"", "'data' must not be null", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 57, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 26, "n_whitespaces": 29, "n_words": 20, "nloc": 5, "token_counts": 38}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java#351-357", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java", "language": "Java"}, "method": {"name": "getSystemEnvironmentProperty", "qualified_name": "org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySource#getSystemEnvironmentProperty", "start_line": 351, "end_line": 357, "signature": "getSystemEnvironmentProperty(String name)", "original_code": "@Nullable Object getSystemEnvironmentProperty(String name) {\n\t\t\tData data = this.data;\n\t\t\tAssert.state(data != null, \"'data' must not be null\");\n\t\t\tMap<String, Object> systemEnvironmentCopy = data.systemEnvironmentCopy();\n\t\t\tAssert.state(systemEnvironmentCopy != null, \"'systemEnvironmentCopy' must not be null\");\n\t\t\treturn systemEnvironmentCopy.get(name);\n\t\t}", "doc_comment": ""}, "code_tokens": ["Object", "getSystemEnvironmentProperty", "(", ")", "{", "}", "@", "Nullable", "String", "name", "Data", ";", ";", ";", ";", "return", ";", "data", "=", "Assert", ".", "state", "Map", "systemEnvironmentCopy", "=", "Assert", ".", "state", "systemEnvironmentCopy", ".", "get", "this", ".", "data", "(", ",", ")", "<", "String", ",", "Object", ">", "data", ".", "systemEnvironmentCopy", "(", ",", ")", "(", "name", ")", "data", "!=", "null", "\"", "'data' must not be null", "\"", "(", ")", "systemEnvironmentCopy", "!=", "null", "\"", "'systemEnvironmentCopy' must not be null", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 94, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 30, "n_whitespaces": 49, "n_words": 37, "nloc": 7, "token_counts": 65}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java#382-386", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java", "language": "Java"}, "method": {"name": "hasNext", "qualified_name": "org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySource#hasNext", "start_line": 382, "end_line": 386, "signature": "hasNext()", "original_code": "@Override\n\t\tpublic boolean hasNext() {\n\t\t\tskipNulls();\n\t\t\treturn this.index < this.names.length;\n\t\t}", "doc_comment": ""}, "code_tokens": ["boolean", "hasNext", "public", "(", ")", "{", "}", "@", "Override", ";", "return", ";", "skipNulls", "<", "(", ")", "this", ".", "index", ".", "length", "this", ".", "names"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 38, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 18, "n_whitespaces": 20, "n_words": 11, "nloc": 5, "token_counts": 24}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java#388-395", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java", "language": "Java"}, "method": {"name": "next", "qualified_name": "org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySource#next", "start_line": 388, "end_line": 395, "signature": "next()", "original_code": "@Override\n\t\tpublic @Nullable ConfigurationPropertyName next() {\n\t\t\tskipNulls();\n\t\t\tif (this.index >= this.names.length) {\n\t\t\t\tthrow new NoSuchElementException();\n\t\t\t}\n\t\t\treturn this.names[this.index++];\n\t\t}", "doc_comment": ""}, "code_tokens": ["ConfigurationPropertyName", "next", "public", "(", ")", "{", "}", "@", "Override", "@", "Nullable", ";", "if", "return", ";", "skipNulls", "(", ")", "{", "}", "[", "]", "(", ")", ">=", "throw", ";", "this", ".", "names", "++", "this", ".", "index", ".", "length", "new", "NoSuchElementException", "this", ".", "index", "this", ".", "names", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 71, "ast_depth": 9, "n_identifiers": 7, "vocab_size": 26, "n_whitespaces": 38, "n_words": 20, "nloc": 8, "token_counts": 46}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java#397-404", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java", "language": "Java"}, "method": {"name": "skipNulls", "qualified_name": "org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySource#skipNulls", "start_line": 397, "end_line": 404, "signature": "skipNulls()", "original_code": "private void skipNulls() {\n\t\t\twhile (this.index < this.names.length) {\n\t\t\t\tif (this.names[this.index] != null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.index++;\n\t\t\t}\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "skipNulls", "private", "(", ")", "{", "}", "while", "(", ")", "{", "}", "<", "if", ";", "this", ".", "index", ".", "length", "(", ")", "{", "}", "++", "this", ".", "names", "!=", "null", "return", ";", "this", ".", "index", "[", "]", "this", ".", "names", "this", ".", "index"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 66, "ast_depth": 11, "n_identifiers": 4, "vocab_size": 22, "n_whitespaces": 43, "n_words": 18, "nloc": 8, "token_counts": 43}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/env/ConfigTreePropertySource.java#120-123", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/ConfigTreePropertySource.java", "language": "Java"}, "method": {"name": "getPropertyNames", "qualified_name": "org.springframework.boot.env.ConfigTreePropertySource#getPropertyNames", "start_line": 120, "end_line": 123, "signature": "getPropertyNames()", "original_code": "@Override\n\tpublic String[] getPropertyNames() {\n\t\treturn this.names.clone();\n\t}", "doc_comment": ""}, "code_tokens": ["getPropertyNames", "public", "String", "(", ")", "{", "}", "@", "Override", "[", "]", "return", ";", ".", "clone", "this", ".", "names", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 32, "ast_depth": 7, "n_identifiers": 4, "vocab_size": 17, "n_whitespaces": 11, "n_words": 8, "nloc": 4, "token_counts": 20}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/env/ConfigTreePropertySource.java#125-129", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/ConfigTreePropertySource.java", "language": "Java"}, "method": {"name": "getProperty", "qualified_name": "org.springframework.boot.env.ConfigTreePropertySource#getProperty", "start_line": 125, "end_line": 129, "signature": "getProperty(String name)", "original_code": "@Override\n\tpublic @Nullable Value getProperty(String name) {\n\t\tPropertyFile propertyFile = this.propertyFiles.get(name);\n\t\treturn (propertyFile != null) ? propertyFile.getContent() : null;\n\t}", "doc_comment": ""}, "code_tokens": ["Value", "getProperty", "public", "(", ")", "{", "}", "@", "Override", "@", "Nullable", "String", "name", "PropertyFile", ";", "return", ";", "propertyFile", "=", "?", ":", "null", ".", "get", "(", ")", "propertyFile", ".", "getContent", "this", ".", "propertyFiles", "(", "name", ")", "propertyFile", "!=", "null", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 59, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 26, "n_whitespaces": 25, "n_words": 19, "nloc": 5, "token_counts": 40}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/env/ConfigTreePropertySource.java#131-135", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/ConfigTreePropertySource.java", "language": "Java"}, "method": {"name": "getOrigin", "qualified_name": "org.springframework.boot.env.ConfigTreePropertySource#getOrigin", "start_line": 131, "end_line": 135, "signature": "getOrigin(String name)", "original_code": "@Override\n\tpublic @Nullable Origin getOrigin(String name) {\n\t\tPropertyFile propertyFile = this.propertyFiles.get(name);\n\t\treturn (propertyFile != null) ? propertyFile.getOrigin() : null;\n\t}", "doc_comment": ""}, "code_tokens": ["Origin", "getOrigin", "public", "(", ")", "{", "}", "@", "Override", "@", "Nullable", "String", "name", "PropertyFile", ";", "return", ";", "propertyFile", "=", "?", ":", "null", ".", "get", "(", ")", "propertyFile", ".", "getOrigin", "this", ".", "propertyFiles", "(", "name", ")", "propertyFile", "!=", "null", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 59, "ast_depth": 8, "n_identifiers": 7, "vocab_size": 25, "n_whitespaces": 25, "n_words": 19, "nloc": 5, "token_counts": 40}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/env/ConfigTreePropertySource.java#137-140", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/ConfigTreePropertySource.java", "language": "Java"}, "method": {"name": "isImmutable", "qualified_name": "org.springframework.boot.env.ConfigTreePropertySource#isImmutable", "start_line": 137, "end_line": 140, "signature": "isImmutable()", "original_code": "@Override\n\tpublic boolean isImmutable() {\n\t\treturn !this.options.contains(Option.ALWAYS_READ);\n\t}", "doc_comment": ""}, "code_tokens": ["boolean", "isImmutable", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "!", ".", "contains", "this", ".", "options", "(", ")", "Option", ".", "ALWAYS_READ"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 34, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 18, "n_whitespaces": 11, "n_words": 10, "nloc": 4, "token_counts": 22}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/env/ConfigTreePropertySource.java#201-206", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/ConfigTreePropertySource.java", "language": "Java"}, "method": {"name": "getContent", "qualified_name": "org.springframework.boot.env.ConfigTreePropertySource#getContent", "start_line": 201, "end_line": 206, "signature": "getContent()", "original_code": "PropertyFileContent getContent() {\n\t\t\tif (this.cachedContent != null) {\n\t\t\t\treturn this.cachedContent;\n\t\t\t}\n\t\t\treturn new PropertyFileContent(this.path, this.resource, this.origin, false, this.autoTrimTrailingNewLine);\n\t\t}", "doc_comment": ""}, "code_tokens": ["PropertyFileContent", "getContent", "(", ")", "{", "}", "if", "return", ";", "(", ")", "{", "}", "new", "PropertyFileContent", "!=", "null", "return", ";", "(", ",", ",", ",", "false", ",", ")", "this", ".", "cachedContent", "this", ".", "cachedContent", "this", ".", "path", "this", ".", "resource", "this", ".", "origin", "this", ".", "autoTrimTrailingNewLine"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 62, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 21, "n_whitespaces": 33, "n_words": 21, "nloc": 6, "token_counts": 44}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/env/ConfigTreePropertySource.java#208-210", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/ConfigTreePropertySource.java", "language": "Java"}, "method": {"name": "getOrigin", "qualified_name": "org.springframework.boot.env.ConfigTreePropertySource#getOrigin", "start_line": 208, "end_line": 210, "signature": "getOrigin()", "original_code": "Origin getOrigin() {\n\t\t\treturn this.origin;\n\t\t}", "doc_comment": ""}, "code_tokens": ["Origin", "getOrigin", "(", ")", "{", "}", "return", ";", "this", ".", "origin"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 17, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 11, "n_whitespaces": 10, "n_words": 5, "nloc": 3, "token_counts": 11}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/env/ConfigTreePropertySource.java#212-232", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/ConfigTreePropertySource.java", "language": "Java"}, "method": {"name": "findAll", "qualified_name": "org.springframework.boot.env.ConfigTreePropertySource#findAll", "start_line": 212, "end_line": 232, "signature": "findAll(Path sourceDirectory, Set<Option> options)", "original_code": "static Map<String, PropertyFile> findAll(Path sourceDirectory, Set<Option> options) {\n\t\t\ttry {\n\t\t\t\tMap<String, PropertyFile> propertyFiles = new TreeMap<>();\n\t\t\t\ttry (Stream<Path> pathStream = Files.find(sourceDirectory, MAX_DEPTH, PropertyFile::isPropertyFile,\n\t\t\t\t\t\tFileVisitOption.FOLLOW_LINKS)) {\n\t\t\t\t\tpathStream.forEach((path) -> {\n\t\t\t\t\t\tString name = getName(sourceDirectory.relativize(path));\n\t\t\t\t\t\tif (StringUtils.hasText(name)) {\n\t\t\t\t\t\t\tif (options.contains(Option.USE_LOWERCASE_NAMES)) {\n\t\t\t\t\t\t\t\tname = name.toLowerCase(Locale.getDefault());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpropertyFiles.put(name, new PropertyFile(path, options));\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn Collections.unmodifiableMap(propertyFiles);\n\t\t\t}\n\t\t\tcatch (IOException ex) {\n\t\t\t\tthrow new IllegalStateException(\"Unable to find files in '\" + sourceDirectory + \"'\", ex);\n\t\t\t}\n\t\t}", "doc_comment": ""}, "code_tokens": ["findAll", "static", "Map", "(", ",", ")", "{", "}", "<", "String", ",", "PropertyFile", ">", "Path", "sourceDirectory", "options", "try", "Set", "{", "}", "catch", "(", ")", "<", "Option", ">", ";", "try", "return", ";", "ex", "{", "}", "Map", "propertyFiles", "=", "(", ")", "{", "}", "Collections", ".", "unmodifiableMap", "IOException", "throw", ";", "<", "String", ",", "PropertyFile", ">", "new", "pathStream", "=", ";", "(", "propertyFiles", ")", "new", "IllegalStateException", "TreeMap", "(", ")", "Stream", "Files", ".", "find", "pathStream", ".", "forEach", "(", ",", "ex", ")", "<", ">", "<", "Path", ">", "(", "sourceDirectory", ",", "MAX_DEPTH", ",", ",", ")", "(", ")", "+", "PropertyFile", "::", "isPropertyFile", "FileVisitOption", ".", "FOLLOW_LINKS", "->", "+", "sourceDirectory", "\"", "'", "\"", "(", "path", ")", "{", "}", "\"", "Unable to find files in '", "\"", "String", ";", "if", "name", "=", "(", ")", "{", "}", "getName", "StringUtils", ".", "hasText", "if", ";", "(", ")", "(", "name", ")", "(", ")", "{", "}", "propertyFiles", ".", "put", "sourceDirectory", ".", "relativize", "options", ".", "contains", ";", "(", "name", ",", ")", "(", "path", ")", "(", ")", "name", "=", "new", "PropertyFile", "Option", ".", "USE_LOWERCASE_NAMES", "name", ".", "toLowerCase", "(", "path", ",", "options", ")", "(", ")", "Locale", ".", "getDefault", "(", ")"], "metrics": {"cyclomatic_complexity": 4, "n_ast_nodes": 253, "ast_depth": 23, "n_identifiers": 29, "vocab_size": 60, "n_whitespaces": 167, "n_words": 76, "nloc": 21, "token_counts": 174}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/env/ConfigTreePropertySource.java#234-236", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/ConfigTreePropertySource.java", "language": "Java"}, "method": {"name": "isPropertyFile", "qualified_name": "org.springframework.boot.env.ConfigTreePropertySource#isPropertyFile", "start_line": 234, "end_line": 236, "signature": "isPropertyFile(Path path, BasicFileAttributes attributes)", "original_code": "private static boolean isPropertyFile(Path path, BasicFileAttributes attributes) {\n\t\t\treturn !hasHiddenPathElement(path) && (attributes.isRegularFile() || attributes.isSymbolicLink());\n\t\t}", "doc_comment": ""}, "code_tokens": ["boolean", "isPropertyFile", "private", "static", "(", ",", ")", "{", "}", "Path", "path", "BasicFileAttributes", "attributes", "return", ";", "&&", "!", "(", ")", "hasHiddenPathElement", "||", "(", "path", ")", "attributes", ".", "isRegularFile", "attributes", ".", "isSymbolicLink", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 52, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 22, "n_whitespaces": 19, "n_words": 15, "nloc": 3, "token_counts": 34}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/env/ConfigTreePropertySource.java#238-245", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/ConfigTreePropertySource.java", "language": "Java"}, "method": {"name": "hasHiddenPathElement", "qualified_name": "org.springframework.boot.env.ConfigTreePropertySource#hasHiddenPathElement", "start_line": 238, "end_line": 245, "signature": "hasHiddenPathElement(Path path)", "original_code": "private static boolean hasHiddenPathElement(Path path) {\n\t\t\tfor (Path element : path) {\n\t\t\t\tif (element.toString().startsWith(\"..\")) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}", "doc_comment": ""}, "code_tokens": ["boolean", "hasHiddenPathElement", "private", "static", "(", ")", "{", "}", "Path", "path", "for", "(", "Path", "element", ":", "path", ")", "return", "false", ";", "{", "}", "if", "(", ")", "{", "}", ".", "startsWith", "return", "true", ";", "element", ".", "toString", "(", ")", "(", ")", "\"", "..", "\""], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 60, "ast_depth": 11, "n_identifiers": 5, "vocab_size": 23, "n_whitespaces": 45, "n_words": 18, "nloc": 8, "token_counts": 42}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/env/ConfigTreePropertySource.java#247-258", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/ConfigTreePropertySource.java", "language": "Java"}, "method": {"name": "getName", "qualified_name": "org.springframework.boot.env.ConfigTreePropertySource#getName", "start_line": 247, "end_line": 258, "signature": "getName(Path relativePath)", "original_code": "private static String getName(Path relativePath) {\n\t\t\tint nameCount = relativePath.getNameCount();\n\t\t\tif (nameCount == 1) {\n\t\t\t\treturn relativePath.toString();\n\t\t\t}\n\t\t\tStringBuilder name = new StringBuilder();\n\t\t\tfor (int i = 0; i < nameCount; i++) {\n\t\t\t\tname.append((i != 0) ? \".\" : \"\");\n\t\t\t\tname.append(relativePath.getName(i));\n\t\t\t}\n\t\t\treturn name.toString();\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getName", "private", "static", "(", ")", "{", "}", "Path", "relativePath", ";", "if", "StringBuilder", ";", "for", "(", ";", ")", "return", ";", "int", "nameCount", "=", "(", ")", "{", "}", "name", "=", ";", "i", "<", "nameCount", "i", "++", "{", "}", "name", ".", "toString", "relativePath", ".", "getNameCount", "nameCount", "==", "1", "return", ";", "new", "StringBuilder", "int", "i", "=", "0", ";", ";", "(", ")", "(", ")", "relativePath", ".", "toString", "(", ")", "name", ".", "append", "name", ".", "append", "(", ")", "(", ")", "(", ")", "?", ":", "relativePath", ".", "getName", "(", ")", "\"", ".", "\"", "\"", "\"", "(", "i", ")", "i", "!=", "0"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 140, "ast_depth": 12, "n_identifiers": 8, "vocab_size": 34, "n_whitespaces": 79, "n_words": 39, "nloc": 12, "token_counts": 95}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/env/ConfigTreePropertySource.java#290-293", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/ConfigTreePropertySource.java", "language": "Java"}, "method": {"name": "getOrigin", "qualified_name": "org.springframework.boot.env.ConfigTreePropertySource#getOrigin", "start_line": 290, "end_line": 293, "signature": "getOrigin()", "original_code": "@Override\n\t\tpublic Origin getOrigin() {\n\t\t\treturn this.origin;\n\t\t}", "doc_comment": ""}, "code_tokens": ["Origin", "getOrigin", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "this", ".", "origin"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/env/ConfigTreePropertySource.java#295-298", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/ConfigTreePropertySource.java", "language": "Java"}, "method": {"name": "length", "qualified_name": "org.springframework.boot.env.ConfigTreePropertySource#length", "start_line": 295, "end_line": 298, "signature": "length()", "original_code": "@Override\n\t\tpublic int length() {\n\t\t\treturn toString().length();\n\t\t}", "doc_comment": ""}, "code_tokens": ["length", "public", "int", "(", ")", "{", "}", "@", "Override", "return", ";", ".", "length", "toString", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 30, "ast_depth": 8, "n_identifiers": 3, "vocab_size": 13, "n_whitespaces": 14, "n_words": 7, "nloc": 4, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/env/ConfigTreePropertySource.java#300-303", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/ConfigTreePropertySource.java", "language": "Java"}, "method": {"name": "charAt", "qualified_name": "org.springframework.boot.env.ConfigTreePropertySource#charAt", "start_line": 300, "end_line": 303, "signature": "charAt(int index)", "original_code": "@Override\n\t\tpublic char charAt(int index) {\n\t\t\treturn toString().charAt(index);\n\t\t}", "doc_comment": ""}, "code_tokens": ["charAt", "public", "char", "(", ")", "{", "}", "@", "Override", "index", "return", ";", "int", ".", "charAt", "toString", "(", "index", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 35, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 15, "n_whitespaces": 15, "n_words": 10, "nloc": 4, "token_counts": 21}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/env/ConfigTreePropertySource.java#305-308", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/ConfigTreePropertySource.java", "language": "Java"}, "method": {"name": "subSequence", "qualified_name": "org.springframework.boot.env.ConfigTreePropertySource#subSequence", "start_line": 305, "end_line": 308, "signature": "subSequence(int start, int end)", "original_code": "@Override\n\t\tpublic CharSequence subSequence(int start, int end) {\n\t\t\treturn toString().subSequence(start, end);\n\t\t}", "doc_comment": ""}, "code_tokens": ["CharSequence", "subSequence", "public", "(", ",", ")", "{", "}", "@", "Override", "start", "end", "return", ";", "int", "int", ".", "subSequence", "toString", "(", "start", ",", "end", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 41, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 17, "n_whitespaces": 18, "n_words": 13, "nloc": 4, "token_counts": 26}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/env/ConfigTreePropertySource.java#310-317", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/ConfigTreePropertySource.java", "language": "Java"}, "method": {"name": "toString", "qualified_name": "org.springframework.boot.env.ConfigTreePropertySource#toString", "start_line": 310, "end_line": 317, "signature": "toString()", "original_code": "@Override\n\t\tpublic String toString() {\n\t\t\tString string = new String(getBytes());\n\t\t\tif (this.autoTrimTrailingNewLine) {\n\t\t\t\tstring = autoTrimTrailingNewLine(string);\n\t\t\t}\n\t\t\treturn string;\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "toString", "public", "(", ")", "{", "}", "@", "Override", "String", ";", "if", "return", "string", ";", "string", "=", "(", ")", "{", "}", "new", "String", "this", ".", "autoTrimTrailingNewLine", ";", "(", ")", "string", "=", "getBytes", "autoTrimTrailingNewLine", "(", ")", "(", "string", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 59, "ast_depth": 10, "n_identifiers": 5, "vocab_size": 19, "n_whitespaces": 39, "n_words": 17, "nloc": 8, "token_counts": 38}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/env/ConfigTreePropertySource.java#319-335", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/ConfigTreePropertySource.java", "language": "Java"}, "method": {"name": "autoTrimTrailingNewLine", "qualified_name": "org.springframework.boot.env.ConfigTreePropertySource#autoTrimTrailingNewLine", "start_line": 319, "end_line": 335, "signature": "autoTrimTrailingNewLine(String string)", "original_code": "private String autoTrimTrailingNewLine(String string) {\n\t\t\tif (!string.endsWith(\"\\n\")) {\n\t\t\t\treturn string;\n\t\t\t}\n\t\t\tint numberOfLines = 0;\n\t\t\tfor (int i = 0; i < string.length(); i++) {\n\t\t\t\tchar ch = string.charAt(i);\n\t\t\t\tif (ch == '\\n') {\n\t\t\t\t\tnumberOfLines++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (numberOfLines > 1) {\n\t\t\t\treturn string;\n\t\t\t}\n\t\t\treturn (string.endsWith(\"\\r\\n\")) ? string.substring(0, string.length() - 2)\n\t\t\t\t\t: string.substring(0, string.length() - 1);\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "autoTrimTrailingNewLine", "private", "(", ")", "{", "}", "String", "string", "if", ";", "for", "(", ";", ")", "if", "return", ";", "(", ")", "{", "}", "int", "numberOfLines", "=", "0", ";", "i", "<", "i", "++", "{", "}", "(", ")", "{", "}", "?", ":", "!", "return", "string", ";", "int", "i", "=", "0", "string", ".", "length", ";", "if", "numberOfLines", ">", "1", "return", "string", ";", "(", ")", "string", ".", "substring", "string", ".", "substring", "string", ".", "endsWith", "(", ")", "char", "ch", "=", "(", ")", "{", "}", "string", ".", "endsWith", "(", "0", ",", ")", "(", "0", ",", ")", "(", ")", "string", ".", "charAt", "ch", "==", "'\\n'", ";", "(", ")", "-", "2", "-", "1", "\"", "\\n", "\"", "(", "i", ")", "numberOfLines", "++", "\"", "\\r", "\\n", "\"", "string", ".", "length", "string", ".", "length", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 5, "n_ast_nodes": 184, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 39, "n_whitespaces": 113, "n_words": 53, "nloc": 17, "token_counts": 126}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/env/ConfigTreePropertySource.java#337-344", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/ConfigTreePropertySource.java", "language": "Java"}, "method": {"name": "getInputStream", "qualified_name": "org.springframework.boot.env.ConfigTreePropertySource#getInputStream", "start_line": 337, "end_line": 344, "signature": "getInputStream()", "original_code": "@Override\n\t\tpublic InputStream getInputStream() throws IOException {\n\t\t\tif (!this.cacheContent) {\n\t\t\t\tassertStillExists();\n\t\t\t\treturn this.resource.getInputStream();\n\t\t\t}\n\t\t\treturn new ByteArrayInputStream(getBytes());\n\t\t}", "doc_comment": ""}, "code_tokens": ["InputStream", "getInputStream", "public", "(", ")", "throws", "IOException", "{", "}", "@", "Override", "if", "return", ";", "(", ")", "{", "}", "new", "ByteArrayInputStream", "!", ";", "return", ";", "(", ")", "this", ".", "cacheContent", "assertStillExists", ".", "getInputStream", "getBytes", "(", ")", "this", ".", "resource", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 66, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 23, "n_whitespaces": 38, "n_words": 18, "nloc": 8, "token_counts": 42}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/env/ConfigTreePropertySource.java#346-372", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/ConfigTreePropertySource.java", "language": "Java"}, "method": {"name": "getBytes", "qualified_name": "org.springframework.boot.env.ConfigTreePropertySource#getBytes", "start_line": 346, "end_line": 372, "signature": "getBytes()", "original_code": "private byte[] getBytes() {\n\t\t\ttry {\n\t\t\t\tif (!this.cacheContent) {\n\t\t\t\t\tassertStillExists();\n\t\t\t\t\treturn FileCopyUtils.copyToByteArray(this.resource.getInputStream());\n\t\t\t\t}\n\t\t\t\tbyte[] content = this.content;\n\t\t\t\tif (content == null) {\n\t\t\t\t\tassertStillExists();\n\t\t\t\t\tthis.resourceLock.lock();\n\t\t\t\t\ttry {\n\t\t\t\t\t\tcontent = this.content;\n\t\t\t\t\t\tif (content == null) {\n\t\t\t\t\t\t\tcontent = FileCopyUtils.copyToByteArray(this.resource.getInputStream());\n\t\t\t\t\t\t\tthis.content = content;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfinally {\n\t\t\t\t\t\tthis.resourceLock.unlock();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn content;\n\t\t\t}\n\t\t\tcatch (IOException ex) {\n\t\t\t\tthrow new IllegalStateException(ex);\n\t\t\t}\n\t\t}", "doc_comment": ""}, "code_tokens": ["getBytes", "private", "(", ")", "{", "}", "byte", "[", "]", "try", "{", "}", "catch", "(", ")", "if", ";", "if", "return", "content", ";", "ex", "{", "}", "(", ")", "{", "}", "content", "=", "(", ")", "{", "}", "IOException", "throw", ";", "!", ";", "return", ";", "byte", "[", "]", "this", ".", "content", "content", "==", "null", ";", ";", "try", "new", "IllegalStateException", "this", ".", "cacheContent", "assertStillExists", "FileCopyUtils", ".", "copyToByteArray", "assertStillExists", ".", "lock", "{", "}", "finally", "(", "ex", ")", "(", ")", "(", ")", "(", ")", "this", ".", "resourceLock", "(", ")", ";", "if", "{", "}", ".", "getInputStream", "content", "=", "(", ")", "{", "}", ";", "this", ".", "resource", "(", ")", "this", ".", "content", "content", "==", "null", ";", ";", ".", "unlock", "content", "=", "=", "content", "this", ".", "resourceLock", "(", ")", "FileCopyUtils", ".", "copyToByteArray", "this", ".", "content", "(", ")", ".", "getInputStream", "this", ".", "resource", "(", ")"], "metrics": {"cyclomatic_complexity": 5, "n_ast_nodes": 208, "ast_depth": 18, "n_identifiers": 12, "vocab_size": 36, "n_whitespaces": 178, "n_words": 54, "nloc": 27, "token_counts": 134}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/env/ConfigTreePropertySource.java#374-376", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/ConfigTreePropertySource.java", "language": "Java"}, "method": {"name": "assertStillExists", "qualified_name": "org.springframework.boot.env.ConfigTreePropertySource#assertStillExists", "start_line": 374, "end_line": 376, "signature": "assertStillExists()", "original_code": "private void assertStillExists() {\n\t\t\tAssert.state(Files.exists(this.path), () -> \"The property file '\" + this.path + \"' no longer exists\");\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "assertStillExists", "private", "(", ")", "{", "}", ";", "Assert", ".", "state", "(", ",", ")", "Files", ".", "exists", "->", "(", ")", "(", ")", "+", "this", ".", "path", "+", "\"", "' no longer exists", "\"", "\"", "The property file '", "\"", "this", ".", "path"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 54, "ast_depth": 11, "n_identifiers": 6, "vocab_size": 21, "n_whitespaces": 23, "n_words": 17, "nloc": 3, "token_counts": 36}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/env/OriginTrackedMapPropertySource.java#65-72", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/OriginTrackedMapPropertySource.java", "language": "Java"}, "method": {"name": "getProperty", "qualified_name": "org.springframework.boot.env.OriginTrackedMapPropertySource#getProperty", "start_line": 65, "end_line": 72, "signature": "getProperty(String name)", "original_code": "@Override\n\tpublic @Nullable Object getProperty(String name) {\n\t\tObject value = super.getProperty(name);\n\t\tif (value instanceof OriginTrackedValue originTrackedValue) {\n\t\t\treturn originTrackedValue.getValue();\n\t\t}\n\t\treturn value;\n\t}", "doc_comment": ""}, "code_tokens": ["Object", "getProperty", "public", "(", ")", "{", "}", "@", "Override", "@", "Nullable", "String", "name", "Object", ";", "if", "return", "value", ";", "value", "=", "(", ")", "{", "}", "super", ".", "getProperty", "value", "instanceof", "OriginTrackedValue", "originTrackedValue", "return", ";", "(", "name", ")", "originTrackedValue", ".", "getValue", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 62, "ast_depth": 9, "n_identifiers": 7, "vocab_size": 23, "n_whitespaces": 35, "n_words": 22, "nloc": 8, "token_counts": 42}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/env/OriginTrackedMapPropertySource.java#74-81", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/OriginTrackedMapPropertySource.java", "language": "Java"}, "method": {"name": "getOrigin", "qualified_name": "org.springframework.boot.env.OriginTrackedMapPropertySource#getOrigin", "start_line": 74, "end_line": 81, "signature": "getOrigin(String name)", "original_code": "@Override\n\tpublic @Nullable Origin getOrigin(String name) {\n\t\tObject value = super.getProperty(name);\n\t\tif (value instanceof OriginTrackedValue originTrackedValue) {\n\t\t\treturn originTrackedValue.getOrigin();\n\t\t}\n\t\treturn null;\n\t}", "doc_comment": ""}, "code_tokens": ["Origin", "getOrigin", "public", "(", ")", "{", "}", "@", "Override", "@", "Nullable", "String", "name", "Object", ";", "if", "return", "null", ";", "value", "=", "(", ")", "{", "}", "super", ".", "getProperty", "value", "instanceof", "OriginTrackedValue", "originTrackedValue", "return", ";", "(", "name", ")", "originTrackedValue", ".", "getOrigin", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 62, "ast_depth": 9, "n_identifiers": 7, "vocab_size": 25, "n_whitespaces": 35, "n_words": 22, "nloc": 8, "token_counts": 42}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/env/OriginTrackedMapPropertySource.java#83-86", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/OriginTrackedMapPropertySource.java", "language": "Java"}, "method": {"name": "isImmutable", "qualified_name": "org.springframework.boot.env.OriginTrackedMapPropertySource#isImmutable", "start_line": 83, "end_line": 86, "signature": "isImmutable()", "original_code": "@Override\n\tpublic boolean isImmutable() {\n\t\treturn this.immutable;\n\t}", "doc_comment": ""}, "code_tokens": ["boolean", "isImmutable", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "this", ".", "immutable"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 11, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/env/PropertySourceInfo.java#37-39", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/PropertySourceInfo.java", "language": "Java"}, "method": {"name": "isImmutable", "qualified_name": "org.springframework.boot.env.PropertySourceInfo#isImmutable", "start_line": 37, "end_line": 39, "signature": "isImmutable()", "original_code": "default boolean isImmutable() {\n\t\treturn false;\n\t}", "doc_comment": "/**\n\t * Return {@code true} if this lookup is immutable and has contents that will never\n\t * change.\n\t * @return if the lookup is immutable\n\t */"}, "code_tokens": ["boolean", "isImmutable", "default", "(", ")", "{", "}", "return", "false", ";"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 16, "ast_depth": 5, "n_identifiers": 1, "vocab_size": 10, "n_whitespaces": 9, "n_words": 5, "nloc": 3, "token_counts": 10}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/env/PropertySourceInfo.java#49-51", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/env/PropertySourceInfo.java", "language": "Java"}, "method": {"name": "getPrefix", "qualified_name": "org.springframework.boot.env.PropertySourceInfo#getPrefix", "start_line": 49, "end_line": 51, "signature": "getPrefix()", "original_code": "default @Nullable String getPrefix() {\n\t\treturn null;\n\t}", "doc_comment": "/**\n\t * Return the implicit prefix that is applied when performing a lookup or {@code null}\n\t * if no prefix is used. Prefixes can be used to disambiguate keys that would\n\t * otherwise clash. For example, if multiple applications are running on the same\n\t * machine a different prefix can be set on each application to ensure that different\n\t * environment variables are used.\n\t * @return the prefix applied by the lookup class or {@code null}.\n\t */"}, "code_tokens": ["String", "getPrefix", "default", "(", ")", "{", "}", "@", "Nullable", "return", "null", ";"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 19, "ast_depth": 5, "n_identifiers": 2, "vocab_size": 12, "n_whitespaces": 10, "n_words": 6, "nloc": 3, "token_counts": 12}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/origin/OriginLookup.java#38-38", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/origin/OriginLookup.java", "language": "Java"}, "method": {"name": "getOrigin", "qualified_name": "org.springframework.boot.origin.OriginLookup#getOrigin", "start_line": 38, "end_line": 38, "signature": "getOrigin(K key)", "original_code": "@Nullable Origin getOrigin(K key);", "doc_comment": "/**\n\t * Return the origin of the given key or {@code null} if the origin cannot be\n\t * determined.\n\t * @param key the key to lookup\n\t * @return the origin of the key or {@code null}\n\t */"}, "code_tokens": ["Origin", "getOrigin", ";", "(", ")", "@", "Nullable", "K", "key"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 15, "ast_depth": 5, "n_identifiers": 3, "vocab_size": 9, "n_whitespaces": 3, "n_words": 5, "nloc": 1, "token_counts": 9}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/origin/OriginLookup.java#49-60", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/origin/OriginLookup.java", "language": "Java"}, "method": {"name": "getOrigin", "qualified_name": "org.springframework.boot.origin.OriginLookup#getOrigin", "start_line": 49, "end_line": 60, "signature": "getOrigin(Object source, K key)", "original_code": "@SuppressWarnings(\"unchecked\")\n\tstatic <K> @Nullable Origin getOrigin(Object source, K key) {\n\t\tif (!(source instanceof OriginLookup)) {\n\t\t\treturn null;\n\t\t}\n\t\ttry {\n\t\t\treturn ((OriginLookup<K>) source).getOrigin(key);\n\t\t}\n\t\tcatch (Throwable ex) {\n\t\t\treturn null;\n\t\t}\n\t}", "doc_comment": "/**\n\t * Attempt to look up the origin from the given source. If the source is not a\n\t * {@link OriginLookup} or if an exception occurs during lookup then {@code null} is\n\t * returned.\n\t * @param source the source object\n\t * @param key the key to lookup\n\t * @param <K> the key type\n\t * @return an {@link Origin} or {@code null}\n\t */"}, "code_tokens": ["Origin", "getOrigin", "static", "<", ">", "@", "Nullable", "(", ",", ")", "{", "}", "@", "SuppressWarnings", "K", "Object", "source", "K", "key", "if", "try", "(", ")", "(", ")", "{", "}", "{", "}", "catch", "(", ")", "\"", "unchecked", "\"", "!", "return", "null", ";", "return", ";", "ex", "{", "}", "(", ")", ".", "getOrigin", "Throwable", "return", "null", ";", "source", "instanceof", "OriginLookup", "(", ")", "(", "key", ")", "(", ")", "source", "OriginLookup", "<", "K", ">"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 101, "ast_depth": 12, "n_identifiers": 6, "vocab_size": 31, "n_whitespaces": 54, "n_words": 29, "nloc": 12, "token_counts": 67}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/support/SystemEnvironmentPropertySourceEnvironmentPostProcessor.java#54-61", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/SystemEnvironmentPropertySourceEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "postProcessEnvironment", "qualified_name": "org.springframework.boot.support.SystemEnvironmentPropertySourceEnvironmentPostProcessor#postProcessEnvironment", "start_line": 54, "end_line": 61, "signature": "postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application)", "original_code": "@Override\n\tpublic void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {\n\t\tString sourceName = StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME;\n\t\tPropertySource<?> propertySource = environment.getPropertySources().get(sourceName);\n\t\tif (propertySource != null) {\n\t\t\treplacePropertySource(environment, sourceName, propertySource, application.getEnvironmentPrefix());\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "postProcessEnvironment", "public", "(", ",", ")", "{", "}", "@", "Override", "ConfigurableEnvironment", "environment", "SpringApplication", "application", "String", ";", ";", "if", "sourceName", "=", "PropertySource", "propertySource", "=", "(", ")", "{", "}", "StandardEnvironment", ".", "SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME", "<", ">", ".", "get", "propertySource", "!=", "null", ";", "?", "environment", ".", "getPropertySources", "(", "sourceName", ")", "replacePropertySource", "(", ")", "(", "environment", ",", "sourceName", ",", "propertySource", ",", ")", "application", ".", "getEnvironmentPrefix", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 90, "ast_depth": 11, "n_identifiers": 12, "vocab_size": 33, "n_whitespaces": 39, "n_words": 27, "nloc": 8, "token_counts": 61}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/support/SystemEnvironmentPropertySourceEnvironmentPostProcessor.java#63-70", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/SystemEnvironmentPropertySourceEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "replacePropertySource", "qualified_name": "org.springframework.boot.support.SystemEnvironmentPropertySourceEnvironmentPostProcessor#replacePropertySource", "start_line": 63, "end_line": 70, "signature": "replacePropertySource(ConfigurableEnvironment environment, String sourceName,\n\t\t\tPropertySource<?> propertySource, @Nullable String environmentPrefix)", "original_code": "@SuppressWarnings(\"unchecked\")\n\tprivate void replacePropertySource(ConfigurableEnvironment environment, String sourceName,\n\t\t\tPropertySource<?> propertySource, @Nullable String environmentPrefix) {\n\t\tMap<String, Object> originalSource = (Map<String, Object>) propertySource.getSource();\n\t\tSystemEnvironmentPropertySource source = new OriginAwareSystemEnvironmentPropertySource(sourceName,\n\t\t\t\toriginalSource, environmentPrefix);\n\t\tenvironment.getPropertySources().replace(sourceName, source);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "replacePropertySource", "private", "(", ",", ",", ",", ")", "{", "}", "@", "SuppressWarnings", "ConfigurableEnvironment", "environment", "String", "sourceName", "propertySource", "String", "environmentPrefix", ";", "SystemEnvironmentPropertySource", ";", ";", "(", ")", "PropertySource", "Map", "originalSource", "=", "source", "=", ".", "replace", "\"", "unchecked", "\"", "<", ">", "@", "Nullable", "<", "String", ",", "Object", ">", "(", ")", "new", "OriginAwareSystemEnvironmentPropertySource", "environment", ".", "getPropertySources", "(", "sourceName", ",", "source", ")", "?", "Map", "propertySource", ".", "getSource", "(", "sourceName", ",", "originalSource", ",", "environmentPrefix", ")", "(", ")", "<", "String", ",", "Object", ">", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 113, "ast_depth": 9, "n_identifiers": 12, "vocab_size": 36, "n_whitespaces": 44, "n_words": 35, "nloc": 8, "token_counts": 78}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/support/SystemEnvironmentPropertySourceEnvironmentPostProcessor.java#72-75", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/SystemEnvironmentPropertySourceEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "getOrder", "qualified_name": "org.springframework.boot.support.SystemEnvironmentPropertySourceEnvironmentPostProcessor#getOrder", "start_line": 72, "end_line": 75, "signature": "getOrder()", "original_code": "@Override\n\tpublic int getOrder() {\n\t\treturn this.order;\n\t}", "doc_comment": ""}, "code_tokens": ["getOrder", "public", "int", "(", ")", "{", "}", "@", "Override", "return", ";", "this", ".", "order"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 23, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 11, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/support/SystemEnvironmentPropertySourceEnvironmentPostProcessor.java#77-79", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/SystemEnvironmentPropertySourceEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "setOrder", "qualified_name": "org.springframework.boot.support.SystemEnvironmentPropertySourceEnvironmentPostProcessor#setOrder", "start_line": 77, "end_line": 79, "signature": "setOrder(int order)", "original_code": "public void setOrder(int order) {\n\t\tthis.order = order;\n\t}", "doc_comment": ""}, "code_tokens": ["void", "setOrder", "public", "(", ")", "{", "}", "order", ";", "int", "=", "order", "this", ".", "order"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 25, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 13, "n_whitespaces": 11, "n_words": 8, "nloc": 3, "token_counts": 15}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/support/SystemEnvironmentPropertySourceEnvironmentPostProcessor.java#95-103", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/SystemEnvironmentPropertySourceEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "determinePrefix", "qualified_name": "org.springframework.boot.support.SystemEnvironmentPropertySourceEnvironmentPostProcessor#determinePrefix", "start_line": 95, "end_line": 103, "signature": "determinePrefix(@Nullable String environmentPrefix)", "original_code": "private @Nullable String determinePrefix(@Nullable String environmentPrefix) {\n\t\t\tif (!StringUtils.hasText(environmentPrefix)) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif (environmentPrefix.endsWith(\".\") || environmentPrefix.endsWith(\"_\") || environmentPrefix.endsWith(\"-\")) {\n\t\t\t\treturn environmentPrefix.substring(0, environmentPrefix.length() - 1);\n\t\t\t}\n\t\t\treturn environmentPrefix;\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "determinePrefix", "private", "(", ")", "{", "}", "@", "Nullable", "String", "environmentPrefix", "if", "if", "return", "environmentPrefix", ";", "(", ")", "{", "}", "(", ")", "{", "}", "@", "Nullable", "!", "return", "null", ";", "||", "return", ";", "StringUtils", ".", "hasText", "||", "environmentPrefix", ".", "endsWith", "environmentPrefix", ".", "substring", "(", "environmentPrefix", ")", "environmentPrefix", ".", "endsWith", "environmentPrefix", ".", "endsWith", "(", ")", "(", "0", ",", ")", "(", ")", "(", ")", "\"", "-", "\"", "-", "1", "\"", ".", "\"", "\"", "_", "\"", "environmentPrefix", ".", "length", "(", ")"], "metrics": {"cyclomatic_complexity": 5, "n_ast_nodes": 115, "ast_depth": 12, "n_identifiers": 8, "vocab_size": 28, "n_whitespaces": 53, "n_words": 30, "nloc": 9, "token_counts": 78}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/support/SystemEnvironmentPropertySourceEnvironmentPostProcessor.java#105-108", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/SystemEnvironmentPropertySourceEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "containsProperty", "qualified_name": "org.springframework.boot.support.SystemEnvironmentPropertySourceEnvironmentPostProcessor#containsProperty", "start_line": 105, "end_line": 108, "signature": "containsProperty(String name)", "original_code": "@Override\n\t\tpublic boolean containsProperty(String name) {\n\t\t\treturn super.containsProperty(name);\n\t\t}", "doc_comment": ""}, "code_tokens": ["boolean", "containsProperty", "public", "(", ")", "{", "}", "@", "Override", "String", "name", "return", ";", "super", ".", "containsProperty", "(", "name", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 29, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 15, "n_whitespaces": 15, "n_words": 10, "nloc": 4, "token_counts": 19}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/support/SystemEnvironmentPropertySourceEnvironmentPostProcessor.java#110-113", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/SystemEnvironmentPropertySourceEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "getProperty", "qualified_name": "org.springframework.boot.support.SystemEnvironmentPropertySourceEnvironmentPostProcessor#getProperty", "start_line": 110, "end_line": 113, "signature": "getProperty(String name)", "original_code": "@Override\n\t\tpublic @Nullable Object getProperty(String name) {\n\t\t\treturn super.getProperty(name);\n\t\t}", "doc_comment": ""}, "code_tokens": ["Object", "getProperty", "public", "(", ")", "{", "}", "@", "Override", "@", "Nullable", "String", "name", "return", ";", "super", ".", "getProperty", "(", "name", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 32, "ast_depth": 7, "n_identifiers": 4, "vocab_size": 16, "n_whitespaces": 16, "n_words": 11, "nloc": 4, "token_counts": 21}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/support/SystemEnvironmentPropertySourceEnvironmentPostProcessor.java#115-122", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/SystemEnvironmentPropertySourceEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "getOrigin", "qualified_name": "org.springframework.boot.support.SystemEnvironmentPropertySourceEnvironmentPostProcessor#getOrigin", "start_line": 115, "end_line": 122, "signature": "getOrigin(String key)", "original_code": "@Override\n\t\tpublic @Nullable Origin getOrigin(String key) {\n\t\t\tString property = resolvePropertyName(key);\n\t\t\tif (super.containsProperty(property)) {\n\t\t\t\treturn new SystemEnvironmentOrigin(property);\n\t\t\t}\n\t\t\treturn null;\n\t\t}", "doc_comment": ""}, "code_tokens": ["Origin", "getOrigin", "public", "(", ")", "{", "}", "@", "Override", "@", "Nullable", "String", "key", "String", ";", "if", "return", "null", ";", "property", "=", "(", ")", "{", "}", "resolvePropertyName", "super", ".", "containsProperty", "return", ";", "(", "key", ")", "(", "property", ")", "new", "SystemEnvironmentOrigin", "(", "property", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 63, "ast_depth": 9, "n_identifiers": 7, "vocab_size": 24, "n_whitespaces": 40, "n_words": 21, "nloc": 8, "token_counts": 42}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/support/SystemEnvironmentPropertySourceEnvironmentPostProcessor.java#124-127", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/SystemEnvironmentPropertySourceEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "getPrefix", "qualified_name": "org.springframework.boot.support.SystemEnvironmentPropertySourceEnvironmentPostProcessor#getPrefix", "start_line": 124, "end_line": 127, "signature": "getPrefix()", "original_code": "@Override\n\t\tpublic @Nullable String getPrefix() {\n\t\t\treturn this.prefix;\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getPrefix", "public", "(", ")", "{", "}", "@", "Override", "@", "Nullable", "return", ";", "this", ".", "prefix"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 25, "ast_depth": 6, "n_identifiers": 4, "vocab_size": 15, "n_whitespaces": 15, "n_words": 8, "nloc": 4, "token_counts": 16}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/main/java/org/springframework/boot/support/SystemEnvironmentPropertySourceEnvironmentPostProcessor.java#129-132", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/support/SystemEnvironmentPropertySourceEnvironmentPostProcessor.java", "language": "Java"}, "method": {"name": "isImmutable", "qualified_name": "org.springframework.boot.support.SystemEnvironmentPropertySourceEnvironmentPostProcessor#isImmutable", "start_line": 129, "end_line": 132, "signature": "isImmutable()", "original_code": "@Override\n\t\tpublic boolean isImmutable() {\n\t\t\treturn (Object) getSource() == System.getenv();\n\t\t}", "doc_comment": ""}, "code_tokens": ["boolean", "isImmutable", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "==", "(", "Object", ")", "System", ".", "getenv", "getSource", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 36, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 17, "n_whitespaces": 17, "n_words": 9, "nloc": 4, "token_counts": 23}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertySourcesTests.java#48-59", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertySourcesTests.java", "language": "Java"}, "method": {"name": "attachShouldAddAdapterAtBeginning", "qualified_name": "test.java.org.springframework.boot.context.properties.source.ConfigurationPropertySourcesTests#attachShouldAddAdapterAtBeginning", "start_line": 48, "end_line": 59, "signature": "attachShouldAddAdapterAtBeginning()", "original_code": "@Test\n\tvoid attachShouldAddAdapterAtBeginning() {\n\t\tConfigurableEnvironment environment = new StandardEnvironment();\n\t\tMutablePropertySources sources = environment.getPropertySources();\n\t\tsources.addLast(new SystemEnvironmentPropertySource(\"system\", Collections.singletonMap(\"SERVER_PORT\", \"1234\")));\n\t\tsources.addLast(new MapPropertySource(\"config\", Collections.singletonMap(\"server.port\", \"4568\")));\n\t\tint size = sources.size();\n\t\tConfigurationPropertySources.attach(environment);\n\t\tassertThat(sources).hasSize(size + 1);\n\t\tPropertyResolver resolver = new PropertySourcesPropertyResolver(sources);\n\t\tassertThat(resolver.getProperty(\"server.port\")).isEqualTo(\"1234\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "attachShouldAddAdapterAtBeginning", "(", ")", "{", "}", "@", "Test", "ConfigurableEnvironment", ";", "MutablePropertySources", ";", ";", ";", ";", ";", ";", "PropertyResolver", ";", ";", "environment", "=", "sources", "=", "sources", ".", "addLast", "sources", ".", "addLast", "int", "size", "=", "ConfigurationPropertySources", ".", "attach", ".", "hasSize", "resolver", "=", ".", "isEqualTo", "new", "StandardEnvironment", "environment", ".", "getPropertySources", "(", ")", "(", ")", "sources", ".", "size", "(", "environment", ")", "assertThat", "(", ")", "new", "PropertySourcesPropertyResolver", "assertThat", "(", ")", "(", ")", "(", ")", "new", "SystemEnvironmentPropertySource", "new", "MapPropertySource", "(", ")", "(", "sources", ")", "size", "+", "1", "(", "sources", ")", "(", ")", "\"", "1234", "\"", "(", ",", ")", "(", ",", ")", "resolver", ".", "getProperty", "\"", "system", "\"", "Collections", ".", "singletonMap", "\"", "config", "\"", "Collections", ".", "singletonMap", "(", ")", "(", ",", ")", "(", ",", ")", "\"", "server.port", "\"", "\"", "SERVER_PORT", "\"", "\"", "1234", "\"", "\"", "server.port", "\"", "\"", "4568", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 194, "ast_depth": 12, "n_identifiers": 16, "vocab_size": 44, "n_whitespaces": 55, "n_words": 54, "nloc": 12, "token_counts": 133}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertySourcesTests.java#61-71", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertySourcesTests.java", "language": "Java"}, "method": {"name": "attachShouldReattachInMergedSetup", "qualified_name": "test.java.org.springframework.boot.context.properties.source.ConfigurationPropertySourcesTests#attachShouldReattachInMergedSetup", "start_line": 61, "end_line": 71, "signature": "attachShouldReattachInMergedSetup()", "original_code": "@Test\n\tvoid attachShouldReattachInMergedSetup() {\n\t\tConfigurableEnvironment parent = new StandardEnvironment();\n\t\tConfigurationPropertySources.attach(parent);\n\t\tConfigurableEnvironment child = new StandardEnvironment();\n\t\tchild.merge(parent);\n\t\tchild.getPropertySources()\n\t\t\t.addLast(new MapPropertySource(\"config\", Collections.singletonMap(\"my.example_property\", \"1234\")));\n\t\tConfigurationPropertySources.attach(child);\n\t\tassertThat(child.getProperty(\"my.example-property\")).isEqualTo(\"1234\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "attachShouldReattachInMergedSetup", "(", ")", "{", "}", "@", "Test", "ConfigurableEnvironment", ";", ";", "ConfigurableEnvironment", ";", ";", ";", ";", ";", "parent", "=", "ConfigurationPropertySources", ".", "attach", "child", "=", "child", ".", "merge", ".", "addLast", "ConfigurationPropertySources", ".", "attach", ".", "isEqualTo", "new", "StandardEnvironment", "(", "parent", ")", "new", "StandardEnvironment", "(", "parent", ")", "child", ".", "getPropertySources", "(", ")", "(", "child", ")", "assertThat", "(", ")", "(", ")", "(", ")", "(", ")", "new", "MapPropertySource", "(", ")", "\"", "1234", "\"", "(", ",", ")", "child", ".", "getProperty", "\"", "config", "\"", "Collections", ".", "singletonMap", "(", ")", "(", ",", ")", "\"", "my.example-property", "\"", "\"", "my.example_property", "\"", "\"", "1234", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 138, "ast_depth": 12, "n_identifiers": 14, "vocab_size": 33, "n_whitespaces": 42, "n_words": 39, "nloc": 11, "token_counts": 94}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertySourcesTests.java#73-84", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertySourcesTests.java", "language": "Java"}, "method": {"name": "attachWhenAlreadyAttachedWithSameSourcesShouldReturnExistingInstance", "qualified_name": "test.java.org.springframework.boot.context.properties.source.ConfigurationPropertySourcesTests#attachWhenAlreadyAttachedWithSameSourcesShouldReturnExistingInstance", "start_line": 73, "end_line": 84, "signature": "attachWhenAlreadyAttachedWithSameSourcesShouldReturnExistingInstance()", "original_code": "@Test\n\tvoid attachWhenAlreadyAttachedWithSameSourcesShouldReturnExistingInstance() {\n\t\tConfigurableEnvironment environment = new StandardEnvironment();\n\t\tMutablePropertySources sources = environment.getPropertySources();\n\t\tsources.addLast(new SystemEnvironmentPropertySource(\"system\", Collections.singletonMap(\"SERVER_PORT\", \"1234\")));\n\t\tsources.addLast(new MapPropertySource(\"config\", Collections.singletonMap(\"server.port\", \"4568\")));\n\t\tConfigurationPropertySources.attach(environment);\n\t\tIterable<ConfigurationPropertySource> first = ConfigurationPropertySources.get(environment);\n\t\tConfigurationPropertySources.attach(environment);\n\t\tIterable<ConfigurationPropertySource> second = ConfigurationPropertySources.get(environment);\n\t\tassertThat(first).isSameAs(second);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "attachWhenAlreadyAttachedWithSameSourcesShouldReturnExistingInstance", "(", ")", "{", "}", "@", "Test", "ConfigurableEnvironment", ";", "MutablePropertySources", ";", ";", ";", ";", ";", ";", ";", ";", "environment", "=", "sources", "=", "sources", ".", "addLast", "sources", ".", "addLast", "ConfigurationPropertySources", ".", "attach", "Iterable", "first", "=", "ConfigurationPropertySources", ".", "attach", "Iterable", "second", "=", ".", "isSameAs", "new", "StandardEnvironment", "environment", ".", "getPropertySources", "(", ")", "(", ")", "(", "environment", ")", "<", "ConfigurationPropertySource", ">", "ConfigurationPropertySources", ".", "get", "(", "environment", ")", "<", "ConfigurationPropertySource", ">", "ConfigurationPropertySources", ".", "get", "assertThat", "(", "second", ")", "(", ")", "(", ")", "new", "SystemEnvironmentPropertySource", "new", "MapPropertySource", "(", "environment", ")", "(", "environment", ")", "(", "first", ")", "(", ",", ")", "(", ",", ")", "\"", "system", "\"", "Collections", ".", "singletonMap", "\"", "config", "\"", "Collections", ".", "singletonMap", "(", ",", ")", "(", ",", ")", "\"", "SERVER_PORT", "\"", "\"", "1234", "\"", "\"", "server.port", "\"", "\"", "4568", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 184, "ast_depth": 12, "n_identifiers": 15, "vocab_size": 42, "n_whitespaces": 52, "n_words": 52, "nloc": 12, "token_counts": 127}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertySourcesTests.java#86-90", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertySourcesTests.java", "language": "Java"}, "method": {"name": "getWhenNotAttachedShouldReturnAdapted", "qualified_name": "test.java.org.springframework.boot.context.properties.source.ConfigurationPropertySourcesTests#getWhenNotAttachedShouldReturnAdapted", "start_line": 86, "end_line": 90, "signature": "getWhenNotAttachedShouldReturnAdapted()", "original_code": "@Test\n\tvoid getWhenNotAttachedShouldReturnAdapted() {\n\t\tConfigurableEnvironment environment = new StandardEnvironment();\n\t\tassertThat(ConfigurationPropertySources.get(environment)).isNotEmpty();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "getWhenNotAttachedShouldReturnAdapted", "(", ")", "{", "}", "@", "Test", "ConfigurableEnvironment", ";", ";", "environment", "=", ".", "isNotEmpty", "new", "StandardEnvironment", "assertThat", "(", ")", "(", ")", "(", ")", "ConfigurationPropertySources", ".", "get", "(", "environment", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 47, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 19, "n_whitespaces": 16, "n_words": 12, "nloc": 5, "token_counts": 30}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertySourcesTests.java#92-100", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertySourcesTests.java", "language": "Java"}, "method": {"name": "getWhenAttachedShouldReturnAttached", "qualified_name": "test.java.org.springframework.boot.context.properties.source.ConfigurationPropertySourcesTests#getWhenAttachedShouldReturnAttached", "start_line": 92, "end_line": 100, "signature": "getWhenAttachedShouldReturnAttached()", "original_code": "@Test\n\tvoid getWhenAttachedShouldReturnAttached() {\n\t\tConfigurableEnvironment environment = new StandardEnvironment();\n\t\tMutablePropertySources sources = environment.getPropertySources();\n\t\tsources.addFirst(new MapPropertySource(\"test\", Collections.singletonMap(\"a\", \"b\")));\n\t\tint expectedSize = sources.size();\n\t\tConfigurationPropertySources.attach(environment);\n\t\tassertThat(ConfigurationPropertySources.get(environment)).hasSize(expectedSize);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "getWhenAttachedShouldReturnAttached", "(", ")", "{", "}", "@", "Test", "ConfigurableEnvironment", ";", "MutablePropertySources", ";", ";", ";", ";", ";", "environment", "=", "sources", "=", "sources", ".", "addFirst", "int", "expectedSize", "=", "ConfigurationPropertySources", ".", "attach", ".", "hasSize", "new", "StandardEnvironment", "environment", ".", "getPropertySources", "(", ")", "sources", ".", "size", "(", "environment", ")", "assertThat", "(", "expectedSize", ")", "(", ")", "(", ")", "new", "MapPropertySource", "(", ")", "(", ")", "(", ",", ")", "ConfigurationPropertySources", ".", "get", "\"", "test", "\"", "Collections", ".", "singletonMap", "(", "environment", ")", "(", ",", ")", "\"", "a", "\"", "\"", "b", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 121, "ast_depth": 12, "n_identifiers": 15, "vocab_size": 35, "n_whitespaces": 37, "n_words": 33, "nloc": 9, "token_counts": 82}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertySourcesTests.java#102-112", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertySourcesTests.java", "language": "Java"}, "method": {"name": "environmentPropertyExpansionShouldWorkWhenAttached", "qualified_name": "test.java.org.springframework.boot.context.properties.source.ConfigurationPropertySourcesTests#environmentPropertyExpansionShouldWorkWhenAttached", "start_line": 102, "end_line": 112, "signature": "environmentPropertyExpansionShouldWorkWhenAttached()", "original_code": "@Test\n\tvoid environmentPropertyExpansionShouldWorkWhenAttached() {\n\t\tConfigurableEnvironment environment = new StandardEnvironment();\n\t\tMap<String, Object> source = new LinkedHashMap<>();\n\t\tsource.put(\"fooBar\", \"Spring ${barBaz} ${bar-baz}\");\n\t\tsource.put(\"barBaz\", \"Boot\");\n\t\tPropertySource<?> propertySource = new MapPropertySource(\"test\", source);\n\t\tenvironment.getPropertySources().addFirst(propertySource);\n\t\tConfigurationPropertySources.attach(environment);\n\t\tassertThat(environment.getProperty(\"foo-bar\")).isEqualTo(\"Spring Boot Boot\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "environmentPropertyExpansionShouldWorkWhenAttached", "(", ")", "{", "}", "@", "Test", "ConfigurableEnvironment", ";", ";", ";", ";", ";", ";", ";", ";", "environment", "=", "Map", "source", "=", "source", ".", "put", "source", ".", "put", "PropertySource", "propertySource", "=", ".", "addFirst", "ConfigurationPropertySources", ".", "attach", ".", "isEqualTo", "new", "StandardEnvironment", "<", "String", ",", "Object", ">", "new", "(", ",", ")", "(", ",", ")", "<", ">", "new", "MapPropertySource", "environment", ".", "getPropertySources", "(", "propertySource", ")", "(", "environment", ")", "assertThat", "(", ")", "(", ")", "LinkedHashMap", "(", ")", "\"", "fooBar", "\"", "\"", "Spring ${barBaz} ${bar-baz}", "\"", "\"", "barBaz", "\"", "\"", "Boot", "\"", "?", "(", ",", "source", ")", "(", ")", "(", ")", "\"", "Spring Boot Boot", "\"", "<", ">", "\"", "test", "\"", "environment", ".", "getProperty", "(", ")", "\"", "foo-bar", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 163, "ast_depth": 11, "n_identifiers": 13, "vocab_size": 43, "n_whitespaces": 50, "n_words": 46, "nloc": 11, "token_counts": 110}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertySourcesTests.java#114-121", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertySourcesTests.java", "language": "Java"}, "method": {"name": "fromPropertySourceShouldReturnSpringConfigurationPropertySource", "qualified_name": "test.java.org.springframework.boot.context.properties.source.ConfigurationPropertySourcesTests#fromPropertySourceShouldReturnSpringConfigurationPropertySource", "start_line": 114, "end_line": 121, "signature": "fromPropertySourceShouldReturnSpringConfigurationPropertySource()", "original_code": "@Test\n\tvoid fromPropertySourceShouldReturnSpringConfigurationPropertySource() {\n\t\tPropertySource<?> source = new MapPropertySource(\"foo\", Collections.singletonMap(\"foo\", \"bar\"));\n\t\tConfigurationPropertySource configurationPropertySource = ConfigurationPropertySources.from(source)\n\t\t\t.iterator()\n\t\t\t.next();\n\t\tassertThat(configurationPropertySource).isInstanceOf(SpringConfigurationPropertySource.class);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "fromPropertySourceShouldReturnSpringConfigurationPropertySource", "(", ")", "{", "}", "@", "Test", ";", "ConfigurationPropertySource", ";", ";", "PropertySource", "source", "=", "configurationPropertySource", "=", ".", "isInstanceOf", "<", ">", "new", "MapPropertySource", ".", "next", "assertThat", "(", ")", "?", "(", ",", ")", ".", "iterator", "(", ")", "(", "configurationPropertySource", ")", "SpringConfigurationPropertySource", ".", "class", "\"", "foo", "\"", "Collections", ".", "singletonMap", "ConfigurationPropertySources", ".", "from", "(", ")", "(", ",", ")", "(", "source", ")", "\"", "foo", "\"", "\"", "bar", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 97, "ast_depth": 11, "n_identifiers": 12, "vocab_size": 34, "n_whitespaces": 32, "n_words": 24, "nloc": 8, "token_counts": 65}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertySourcesTests.java#123-140", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertySourcesTests.java", "language": "Java"}, "method": {"name": "fromPropertySourceShouldFlattenPropertySources", "qualified_name": "test.java.org.springframework.boot.context.properties.source.ConfigurationPropertySourcesTests#fromPropertySourceShouldFlattenPropertySources", "start_line": 123, "end_line": 140, "signature": "fromPropertySourceShouldFlattenPropertySources()", "original_code": "@Test\n\tvoid fromPropertySourceShouldFlattenPropertySources() {\n\t\tStandardEnvironment environment = new StandardEnvironment();\n\t\tenvironment.getPropertySources().addFirst(new MapPropertySource(\"foo\", Collections.singletonMap(\"foo\", \"bar\")));\n\t\tenvironment.getPropertySources().addFirst(new MapPropertySource(\"far\", Collections.singletonMap(\"far\", \"far\")));\n\t\tMutablePropertySources sources = new MutablePropertySources();\n\t\tsources.addFirst(new PropertySource<Environment>(\"env\", environment) {\n\n\t\t\t@Override\n\t\t\tpublic String getProperty(String key) {\n\t\t\t\treturn this.source.getProperty(key);\n\t\t\t}\n\n\t\t});\n\t\tsources.addLast(new MapPropertySource(\"baz\", Collections.singletonMap(\"baz\", \"barf\")));\n\t\tIterable<ConfigurationPropertySource> configurationSources = ConfigurationPropertySources.from(sources);\n\t\tassertThat(configurationSources.iterator()).toIterable().hasSize(5);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "fromPropertySourceShouldFlattenPropertySources", "(", ")", "{", "}", "@", "Test", "StandardEnvironment", ";", ";", ";", "MutablePropertySources", ";", ";", ";", ";", ";", "environment", "=", ".", "addFirst", ".", "addFirst", "sources", "=", "sources", ".", "addFirst", "sources", ".", "addLast", "Iterable", "configurationSources", "=", ".", "hasSize", "new", "StandardEnvironment", "environment", ".", "getPropertySources", "(", ")", "environment", ".", "getPropertySources", "(", ")", "new", "MutablePropertySources", "(", ")", "(", ")", "<", "ConfigurationPropertySource", ">", "ConfigurationPropertySources", ".", "from", ".", "toIterable", "(", "5", ")", "(", ")", "(", ")", "new", "MapPropertySource", "(", ")", "new", "MapPropertySource", "(", ")", "new", "new", "MapPropertySource", "(", "sources", ")", "assertThat", "(", ")", "(", ",", ")", "(", ",", ")", "PropertySource", "(", ",", "environment", ")", "{", "}", "(", ",", ")", "(", ")", "\"", "foo", "\"", "Collections", ".", "singletonMap", "\"", "far", "\"", "Collections", ".", "singletonMap", "<", "Environment", ">", "\"", "env", "\"", "String", "getProperty", "\"", "baz", "\"", "Collections", ".", "singletonMap", "configurationSources", ".", "iterator", "(", ",", ")", "(", ",", ")", "public", "(", ")", "{", "}", "(", ",", ")", "(", ")", "\"", "foo", "\"", "\"", "bar", "\"", "\"", "far", "\"", "\"", "far", "\"", "@", "Override", "String", "key", "return", ";", "\"", "baz", "\"", "\"", "barf", "\"", ".", "getProperty", "this", ".", "source", "(", "key", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 264, "ast_depth": 14, "n_identifiers": 20, "vocab_size": 52, "n_whitespaces": 80, "n_words": 70, "nloc": 16, "token_counts": 182}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertySourcesTests.java#131-134", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertySourcesTests.java", "language": "Java"}, "method": {"name": "getProperty", "qualified_name": "test.java.org.springframework.boot.context.properties.source.ConfigurationPropertySourcesTests#getProperty", "start_line": 131, "end_line": 134, "signature": "getProperty(String key)", "original_code": "@Override\n\t\t\tpublic String getProperty(String key) {\n\t\t\t\treturn this.source.getProperty(key);\n\t\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getProperty", "public", "(", ")", "{", "}", "@", "Override", "String", "key", "return", ";", ".", "getProperty", "this", ".", "source", "(", "key", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 32, "ast_depth": 7, "n_identifiers": 4, "vocab_size": 15, "n_whitespaces": 18, "n_words": 11, "nloc": 4, "token_counts": 21}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertySourcesTests.java#142-147", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertySourcesTests.java", "language": "Java"}, "method": {"name": "environmentPropertyAccessWhenImmutableShouldBePerformant", "qualified_name": "test.java.org.springframework.boot.context.properties.source.ConfigurationPropertySourcesTests#environmentPropertyAccessWhenImmutableShouldBePerformant", "start_line": 142, "end_line": 147, "signature": "environmentPropertyAccessWhenImmutableShouldBePerformant()", "original_code": "@Test // gh-20625\n\tvoid environmentPropertyAccessWhenImmutableShouldBePerformant() {\n\t\tlong baseline = testPropertySourcePerformance(false);\n\t\tlong immutable = testPropertySourcePerformance(true);\n\t\tassertThat(immutable).isLessThan(baseline / 2);\n\t}", "doc_comment": ""}, "code_tokens": ["// gh-20625", "void", "environmentPropertyAccessWhenImmutableShouldBePerformant", "(", ")", "{", "}", "@", "Test", ";", ";", ";", "long", "baseline", "=", "long", "immutable", "=", ".", "isLessThan", "testPropertySourcePerformance", "testPropertySourcePerformance", "assertThat", "(", ")", "(", "false", ")", "(", "true", ")", "(", "immutable", ")", "baseline", "/", "2"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 59, "ast_depth": 8, "n_identifiers": 7, "vocab_size": 22, "n_whitespaces": 25, "n_words": 18, "nloc": 6, "token_counts": 37}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertySourcesTests.java#149-156", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertySourcesTests.java", "language": "Java"}, "method": {"name": "environmentPropertyAccessWhenMutableWithCacheShouldBePerformant", "qualified_name": "test.java.org.springframework.boot.context.properties.source.ConfigurationPropertySourcesTests#environmentPropertyAccessWhenMutableWithCacheShouldBePerformant", "start_line": 149, "end_line": 156, "signature": "environmentPropertyAccessWhenMutableWithCacheShouldBePerformant()", "original_code": "@Test // gh-20625\n\tvoid environmentPropertyAccessWhenMutableWithCacheShouldBePerformant() {\n\t\tStandardEnvironment environment = createPerformanceTestEnvironment(false);\n\t\tlong uncached = testPropertySourcePerformance(environment);\n\t\tConfigurationPropertyCaching.get(environment).enable();\n\t\tlong cached = testPropertySourcePerformance(environment);\n\t\tassertThat(cached).isLessThan(uncached / 2);\n\t}", "doc_comment": ""}, "code_tokens": ["// gh-20625", "void", "environmentPropertyAccessWhenMutableWithCacheShouldBePerformant", "(", ")", "{", "}", "@", "Test", "StandardEnvironment", ";", ";", ";", ";", ";", "environment", "=", "long", "uncached", "=", ".", "enable", "long", "cached", "=", ".", "isLessThan", "createPerformanceTestEnvironment", "testPropertySourcePerformance", "ConfigurationPropertyCaching", ".", "get", "(", ")", "testPropertySourcePerformance", "assertThat", "(", ")", "(", "false", ")", "(", "environment", ")", "(", "environment", ")", "(", "environment", ")", "(", "cached", ")", "uncached", "/", "2"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 87, "ast_depth": 8, "n_identifiers": 12, "vocab_size": 27, "n_whitespaces": 34, "n_words": 26, "nloc": 8, "token_counts": 56}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertySourcesTests.java#158-162", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertySourcesTests.java", "language": "Java"}, "method": {"name": "environmentPropertyAccessWhenMutableShouldBeTolerable", "qualified_name": "test.java.org.springframework.boot.context.properties.source.ConfigurationPropertySourcesTests#environmentPropertyAccessWhenMutableShouldBeTolerable", "start_line": 158, "end_line": 162, "signature": "environmentPropertyAccessWhenMutableShouldBeTolerable()", "original_code": "@Test // gh-20625\n\t@Disabled(\"for manual testing\")\n\tvoid environmentPropertyAccessWhenMutableShouldBeTolerable() {\n\t\tassertThat(testPropertySourcePerformance(false)).isLessThan(5000);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "environmentPropertyAccessWhenMutableShouldBeTolerable", "// gh-20625", "(", ")", "{", "}", "@", "Test", "@", "Disabled", ";", "(", ")", ".", "isLessThan", "\"", "for manual testing", "\"", "assertThat", "(", "5000", ")", "(", ")", "testPropertySourcePerformance", "(", "false", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 45, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 19, "n_whitespaces": 15, "n_words": 14, "nloc": 5, "token_counts": 29}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertySourcesTests.java#164-182", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertySourcesTests.java", "language": "Java"}, "method": {"name": "descendantOfPropertyAccessWhenMutableWithCacheShouldBePerformant", "qualified_name": "test.java.org.springframework.boot.context.properties.source.ConfigurationPropertySourcesTests#descendantOfPropertyAccessWhenMutableWithCacheShouldBePerformant", "start_line": 164, "end_line": 182, "signature": "descendantOfPropertyAccessWhenMutableWithCacheShouldBePerformant()", "original_code": "@Test // gh-21416\n\tvoid descendantOfPropertyAccessWhenMutableWithCacheShouldBePerformant() {\n\t\tFunction<StandardEnvironment, Long> descendantOfPerformance = (environment) -> {\n\t\t\tIterable<ConfigurationPropertySource> sources = ConfigurationPropertySources.get(environment);\n\t\t\tConfigurationPropertyName missing = ConfigurationPropertyName.of(\"missing\");\n\t\t\tlong start = System.nanoTime();\n\t\t\tfor (int i = 0; i < 1000; i++) {\n\t\t\t\tfor (ConfigurationPropertySource source : sources) {\n\t\t\t\t\tassertThat(source.containsDescendantOf(missing)).isEqualTo(ConfigurationPropertyState.ABSENT);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n\t\t};\n\t\tStandardEnvironment environment = createPerformanceTestEnvironment(false);\n\t\tlong baseline = descendantOfPerformance.apply(environment);\n\t\tConfigurationPropertyCaching.get(environment).enable();\n\t\tlong cached = descendantOfPerformance.apply(environment);\n\t\tassertThat(cached).isLessThan(baseline / 2);\n\t}", "doc_comment": ""}, "code_tokens": ["// gh-21416", "void", "descendantOfPropertyAccessWhenMutableWithCacheShouldBePerformant", "(", ")", "{", "}", "@", "Test", ";", "StandardEnvironment", ";", ";", ";", ";", ";", "Function", "descendantOfPerformance", "=", "environment", "=", "long", "baseline", "=", ".", "enable", "long", "cached", "=", ".", "isLessThan", "<", "StandardEnvironment", ",", "Long", ">", "->", "createPerformanceTestEnvironment", "descendantOfPerformance", ".", "apply", "ConfigurationPropertyCaching", ".", "get", "(", ")", "descendantOfPerformance", ".", "apply", "assertThat", "(", ")", "(", "environment", ")", "{", "}", "(", "false", ")", "(", "environment", ")", "(", "environment", ")", "(", "environment", ")", "(", "cached", ")", "baseline", "/", "2", ";", "ConfigurationPropertyName", ";", ";", "for", "(", ";", ")", "return", ";", "Iterable", "sources", "=", "missing", "=", "long", "start", "=", ";", "i", "<", "1000", "i", "++", "{", "}", ".", "toMillis", "<", "ConfigurationPropertySource", ">", "ConfigurationPropertySources", ".", "get", "ConfigurationPropertyName", ".", "of", "System", ".", "nanoTime", "int", "i", "=", "0", "for", "(", "ConfigurationPropertySource", "source", ":", "sources", ")", "TimeUnit", ".", "NANOSECONDS", "(", ")", "(", "environment", ")", "(", ")", "(", ")", "{", "}", "-", "start", "\"", "missing", "\"", ";", "System", ".", "nanoTime", ".", "isEqualTo", "(", ")", "assertThat", "(", ")", "(", ")", "ConfigurationPropertyState", ".", "ABSENT", "source", ".", "containsDescendantOf", "(", "missing", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 245, "ast_depth": 18, "n_identifiers": 30, "vocab_size": 62, "n_whitespaces": 112, "n_words": 73, "nloc": 19, "token_counts": 167}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertySourcesTests.java#184-187", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertySourcesTests.java", "language": "Java"}, "method": {"name": "testPropertySourcePerformance", "qualified_name": "test.java.org.springframework.boot.context.properties.source.ConfigurationPropertySourcesTests#testPropertySourcePerformance", "start_line": 184, "end_line": 187, "signature": "testPropertySourcePerformance(boolean immutable)", "original_code": "private long testPropertySourcePerformance(boolean immutable) {\n\t\tStandardEnvironment environment = createPerformanceTestEnvironment(immutable);\n\t\treturn testPropertySourcePerformance(environment);\n\t}", "doc_comment": ""}, "code_tokens": ["testPropertySourcePerformance", "private", "long", "(", ")", "{", "}", "boolean", "immutable", "StandardEnvironment", ";", "return", ";", "environment", "=", "testPropertySourcePerformance", "createPerformanceTestEnvironment", "(", "environment", ")", "(", "immutable", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 37, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 15, "n_whitespaces": 16, "n_words": 12, "nloc": 4, "token_counts": 23}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertySourcesTests.java#189-197", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertySourcesTests.java", "language": "Java"}, "method": {"name": "createPerformanceTestEnvironment", "qualified_name": "test.java.org.springframework.boot.context.properties.source.ConfigurationPropertySourcesTests#createPerformanceTestEnvironment", "start_line": 189, "end_line": 197, "signature": "createPerformanceTestEnvironment(boolean immutable)", "original_code": "private StandardEnvironment createPerformanceTestEnvironment(boolean immutable) {\n\t\tStandardEnvironment environment = new StandardEnvironment();\n\t\tMutablePropertySources propertySources = environment.getPropertySources();\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tpropertySources.addLast(new TestPropertySource(i, immutable));\n\t\t}\n\t\tConfigurationPropertySources.attach(environment);\n\t\treturn environment;\n\t}", "doc_comment": ""}, "code_tokens": ["StandardEnvironment", "createPerformanceTestEnvironment", "private", "(", ")", "{", "}", "boolean", "immutable", "StandardEnvironment", ";", "MutablePropertySources", ";", "for", "(", ";", ")", ";", "return", "environment", ";", "environment", "=", "propertySources", "=", ";", "i", "<", "100", "i", "++", "{", "}", "ConfigurationPropertySources", ".", "attach", "new", "StandardEnvironment", "environment", ".", "getPropertySources", "int", "i", "=", "0", ";", "(", "environment", ")", "(", ")", "(", ")", "propertySources", ".", "addLast", "(", ")", "new", "TestPropertySource", "(", "i", ",", "immutable", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 95, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 30, "n_whitespaces": 47, "n_words": 31, "nloc": 9, "token_counts": 65}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertySourcesTests.java#199-207", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertySourcesTests.java", "language": "Java"}, "method": {"name": "testPropertySourcePerformance", "qualified_name": "test.java.org.springframework.boot.context.properties.source.ConfigurationPropertySourcesTests#testPropertySourcePerformance", "start_line": 199, "end_line": 207, "signature": "testPropertySourcePerformance(StandardEnvironment environment)", "original_code": "private long testPropertySourcePerformance(StandardEnvironment environment) {\n\t\tlong start = System.nanoTime();\n\t\tfor (int i = 0; i < 1000; i++) {\n\t\t\tenvironment.getProperty(\"missing\" + i);\n\t\t}\n\t\tlong total = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n\t\tassertThat(environment.getProperty(\"test-10-property-80\")).isEqualTo(\"test-10-property-80-value\");\n\t\treturn total;\n\t}", "doc_comment": ""}, "code_tokens": ["testPropertySourcePerformance", "private", "long", "(", ")", "{", "}", "StandardEnvironment", "environment", ";", "for", "(", ";", ")", ";", ";", "return", "total", ";", "long", "start", "=", ";", "i", "<", "1000", "i", "++", "{", "}", "long", "total", "=", ".", "isEqualTo", "System", ".", "nanoTime", "int", "i", "=", "0", ";", ".", "toMillis", "assertThat", "(", ")", "(", ")", "environment", ".", "getProperty", "TimeUnit", ".", "NANOSECONDS", "(", ")", "(", ")", "\"", "test-10-property-80-value", "\"", "(", ")", "-", "start", "environment", ".", "getProperty", "+", "i", "System", ".", "nanoTime", "(", ")", "\"", "missing", "\"", "(", ")", "\"", "test-10-property-80", "\""], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 128, "ast_depth": 11, "n_identifiers": 13, "vocab_size": 36, "n_whitespaces": 48, "n_words": 43, "nloc": 9, "token_counts": 85}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertySourcesTests.java#218-226", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertySourcesTests.java", "language": "Java"}, "method": {"name": "createProperties", "qualified_name": "test.java.org.springframework.boot.context.properties.source.ConfigurationPropertySourcesTests#createProperties", "start_line": 218, "end_line": 226, "signature": "createProperties(int index)", "original_code": "private static Map<String, Object> createProperties(int index) {\n\t\t\tMap<String, Object> map = new LinkedHashMap<>();\n\t\t\tfor (int i = 0; i < 1000; i++) {\n\t\t\t\tString name = \"test-\" + index + \"-property-\" + i;\n\t\t\t\tString value = name + \"-value\";\n\t\t\t\tmap.put(name, value);\n\t\t\t}\n\t\t\treturn map;\n\t\t}", "doc_comment": ""}, "code_tokens": ["createProperties", "private", "static", "Map", "(", ")", "{", "}", "<", "String", ",", "Object", ">", "index", ";", "for", "(", ";", ")", "return", "map", ";", "int", "Map", "map", "=", ";", "i", "<", "1000", "i", "++", "{", "}", "<", "String", ",", "Object", ">", "new", "int", "i", "=", "0", "String", ";", "String", ";", ";", "LinkedHashMap", "(", ")", "name", "=", "value", "=", "map", ".", "put", "<", ">", "+", "i", "name", "+", "(", "name", ",", "value", ")", "+", "\"", "-value", "\"", "+", "index", "\"", "-property-", "\"", "\"", "test-", "\""], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 121, "ast_depth": 12, "n_identifiers": 7, "vocab_size": 35, "n_whitespaces": 70, "n_words": 37, "nloc": 9, "token_counts": 82}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:core/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertySourcesTests.java#228-231", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertySourcesTests.java", "language": "Java"}, "method": {"name": "isImmutable", "qualified_name": "test.java.org.springframework.boot.context.properties.source.ConfigurationPropertySourcesTests#isImmutable", "start_line": 228, "end_line": 231, "signature": "isImmutable()", "original_code": "@Override\n\t\tpublic boolean isImmutable() {\n\t\t\treturn this.immutable;\n\t\t}", "doc_comment": ""}, "code_tokens": ["boolean", "isImmutable", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "this", ".", "immutable"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:module/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/server/ManagementContextAutoConfiguration.java#63-70", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/server/ManagementContextAutoConfiguration.java", "language": "Java"}, "method": {"name": "afterSingletonsInstantiated", "qualified_name": "org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration#afterSingletonsInstantiated", "start_line": 63, "end_line": 70, "signature": "afterSingletonsInstantiated()", "original_code": "@Override\n\t\tpublic void afterSingletonsInstantiated() {\n\t\t\tverifySslConfiguration();\n\t\t\tverifyAddressConfiguration();\n\t\t\tif (this.environment instanceof ConfigurableEnvironment configurableEnvironment) {\n\t\t\t\taddLocalManagementPortPropertyAlias(configurableEnvironment);\n\t\t\t}\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "afterSingletonsInstantiated", "public", "(", ")", "{", "}", "@", "Override", ";", ";", "if", "verifySslConfiguration", "verifyAddressConfiguration", "(", ")", "{", "}", "(", ")", "(", ")", "instanceof", "ConfigurableEnvironment", "configurableEnvironment", ";", "this", ".", "environment", "addLocalManagementPortPropertyAlias", "(", "configurableEnvironment", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 53, "ast_depth": 9, "n_identifiers": 7, "vocab_size": 20, "n_whitespaces": 35, "n_words": 14, "nloc": 8, "token_counts": 33}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:module/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/server/ManagementContextAutoConfiguration.java#72-76", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/server/ManagementContextAutoConfiguration.java", "language": "Java"}, "method": {"name": "verifySslConfiguration", "qualified_name": "org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration#verifySslConfiguration", "start_line": 72, "end_line": 76, "signature": "verifySslConfiguration()", "original_code": "private void verifySslConfiguration() {\n\t\t\tBoolean enabled = this.environment.getProperty(\"management.server.ssl.enabled\", Boolean.class, false);\n\t\t\tAssert.state(!enabled, \"Management-specific SSL cannot be configured as the management \"\n\t\t\t\t\t+ \"server is not listening on a separate port\");\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "verifySslConfiguration", "private", "(", ")", "{", "}", "Boolean", ";", ";", "enabled", "=", "Assert", ".", "state", ".", "getProperty", "(", ",", ")", "this", ".", "environment", "(", ",", ",", "false", ")", "!", "enabled", "+", "\"", "management.server.ssl.enabled", "\"", "Boolean", ".", "class", "\"", "Management-specific SSL cannot be configured as the management ", "\"", "\"", "server is not listening on a separate port", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 62, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 26, "n_whitespaces": 42, "n_words": 35, "nloc": 5, "token_counts": 43}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:module/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/server/ManagementContextAutoConfiguration.java#78-82", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/server/ManagementContextAutoConfiguration.java", "language": "Java"}, "method": {"name": "verifyAddressConfiguration", "qualified_name": "org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration#verifyAddressConfiguration", "start_line": 78, "end_line": 82, "signature": "verifyAddressConfiguration()", "original_code": "private void verifyAddressConfiguration() {\n\t\t\tObject address = this.environment.getProperty(\"management.server.address\");\n\t\t\tAssert.state(address == null, \"Management-specific server address cannot be configured as the management \"\n\t\t\t\t\t+ \"server is not listening on a separate port\");\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "verifyAddressConfiguration", "private", "(", ")", "{", "}", "Object", ";", ";", "address", "=", "Assert", ".", "state", ".", "getProperty", "(", ",", ")", "this", ".", "environment", "(", ")", "address", "==", "null", "+", "\"", "management.server.address", "\"", "\"", "Management-specific server address cannot be configured as the management ", "\"", "\"", "server is not listening on a separate port", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 56, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 25, "n_whitespaces": 43, "n_words": 33, "nloc": 5, "token_counts": 38}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:module/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/server/ManagementContextAutoConfiguration.java#89-91", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/server/ManagementContextAutoConfiguration.java", "language": "Java"}, "method": {"name": "addLocalManagementPortPropertyAlias", "qualified_name": "org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration#addLocalManagementPortPropertyAlias", "start_line": 89, "end_line": 91, "signature": "addLocalManagementPortPropertyAlias(ConfigurableEnvironment environment)", "original_code": "private void addLocalManagementPortPropertyAlias(ConfigurableEnvironment environment) {\n\t\t\tenvironment.getPropertySources().addLast(new LocalManagementPortPropertySource(environment));\n\t\t}", "doc_comment": "/**\n\t\t * Add an alias for 'local.management.port' that actually resolves using\n\t\t * 'local.server.port'.\n\t\t * @param environment the environment\n\t\t */"}, "code_tokens": ["void", "addLocalManagementPortPropertyAlias", "private", "(", ")", "{", "}", "ConfigurableEnvironment", "environment", ";", ".", "addLast", "environment", ".", "getPropertySources", "(", ")", "(", ")", "new", "LocalManagementPortPropertySource", "(", "environment", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 37, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 15, "n_whitespaces": 12, "n_words": 11, "nloc": 3, "token_counts": 24}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:module/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/server/ManagementContextAutoConfiguration.java#106-110", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/server/ManagementContextAutoConfiguration.java", "language": "Java"}, "method": {"name": "childManagementContextInitializer", "qualified_name": "org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration#childManagementContextInitializer", "start_line": 106, "end_line": 110, "signature": "childManagementContextInitializer(\n\t\t\t\tManagementContextFactory managementContextFactory, AbstractApplicationContext parentContext)", "original_code": "@Bean\n\t\tstatic ChildManagementContextInitializer childManagementContextInitializer(\n\t\t\t\tManagementContextFactory managementContextFactory, AbstractApplicationContext parentContext) {\n\t\t\treturn new ChildManagementContextInitializer(managementContextFactory, parentContext);\n\t\t}", "doc_comment": ""}, "code_tokens": ["ChildManagementContextInitializer", "childManagementContextInitializer", "static", "(", ",", ")", "{", "}", "@", "Bean", "ManagementContextFactory", "managementContextFactory", "AbstractApplicationContext", "parentContext", "return", ";", "new", "ChildManagementContextInitializer", "(", "managementContextFactory", ",", "parentContext", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 34, "ast_depth": 7, "n_identifiers": 4, "vocab_size": 17, "n_whitespaces": 24, "n_words": 13, "nloc": 5, "token_counts": 23}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:module/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/server/ManagementContextAutoConfiguration.java#132-135", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/server/ManagementContextAutoConfiguration.java", "language": "Java"}, "method": {"name": "getPropertyNames", "qualified_name": "org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration#getPropertyNames", "start_line": 132, "end_line": 135, "signature": "getPropertyNames()", "original_code": "@Override\n\t\tpublic String[] getPropertyNames() {\n\t\t\treturn PROPERTY_NAMES;\n\t\t}", "doc_comment": ""}, "code_tokens": ["getPropertyNames", "public", "String", "(", ")", "{", "}", "@", "Override", "[", "]", "return", "PROPERTY_NAMES", ";"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 23, "ast_depth": 5, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 6, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:module/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/server/ManagementContextAutoConfiguration.java#137-141", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/server/ManagementContextAutoConfiguration.java", "language": "Java"}, "method": {"name": "getProperty", "qualified_name": "org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration#getProperty", "start_line": 137, "end_line": 141, "signature": "getProperty(String name)", "original_code": "@Override\n\t\tpublic @Nullable Object getProperty(String name) {\n\t\t\tString mapped = PROPERTY_MAPPINGS.get(name);\n\t\t\treturn (mapped != null) ? this.environment.getProperty(mapped) : null;\n\t\t}", "doc_comment": ""}, "code_tokens": ["Object", "getProperty", "public", "(", ")", "{", "}", "@", "Override", "@", "Nullable", "String", "name", "String", ";", "return", ";", "mapped", "=", "?", ":", "null", "PROPERTY_MAPPINGS", ".", "get", "(", ")", ".", "getProperty", "(", "name", ")", "mapped", "!=", "null", "this", ".", "environment", "(", "mapped", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 60, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 25, "n_whitespaces": 29, "n_words": 20, "nloc": 5, "token_counts": 41}}
{"dataset_split": "train", "id": "spring-boot@fc68b00:module/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/server/ManagementContextAutoConfiguration.java#143-146", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "fc68b001d8f17abc64f07893d5d4d3c35c2b468e", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/server/ManagementContextAutoConfiguration.java", "language": "Java"}, "method": {"name": "isImmutable", "qualified_name": "org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration#isImmutable", "start_line": 143, "end_line": 146, "signature": "isImmutable()", "original_code": "@Override\n\t\tpublic boolean isImmutable() {\n\t\t\treturn true;\n\t\t}", "doc_comment": ""}, "code_tokens": ["boolean", "isImmutable", "public", "(", ")", "{", "}", "@", "Override", "return", "true", ";"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 19, "ast_depth": 5, "n_identifiers": 2, "vocab_size": 12, "n_whitespaces": 14, "n_words": 6, "nloc": 4, "token_counts": 12}}
{"dataset_split": "train", "id": "spring-boot@6642bf7:core/spring-boot-test/src/main/java/org/springframework/boot/test/system/OutputCaptureRule.java#62-84", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6642bf7beb33ca7590fa3f36430aaf9ab21bc800", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/system/OutputCaptureRule.java", "language": "Java"}, "method": {"name": "apply", "qualified_name": "org.springframework.boot.test.system.OutputCaptureRule#apply", "start_line": 62, "end_line": 84, "signature": "apply(Statement base, Description description)", "original_code": "@Override\n\tpublic Statement apply(Statement base, Description description) {\n\t\treturn new Statement() {\n\t\t\t@Override\n\t\t\tpublic void evaluate() throws Throwable {\n\t\t\t\tOutputCaptureRule.this.delegate.push();\n\t\t\t\ttry {\n\t\t\t\t\tbase.evaluate();\n\t\t\t\t}\n\t\t\t\tfinally {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (!OutputCaptureRule.this.matchers.isEmpty()) {\n\t\t\t\t\t\t\tString output = OutputCaptureRule.this.delegate.toString();\n\t\t\t\t\t\t\tMatcherAssert.assertThat(output, allOf(OutputCaptureRule.this.matchers));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfinally {\n\t\t\t\t\t\tOutputCaptureRule.this.delegate.pop();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}", "doc_comment": ""}, "code_tokens": ["Statement", "apply", "public", "(", ",", ")", "{", "}", "@", "Override", "Statement", "base", "Description", "description", "return", ";", "new", "Statement", "(", ")", "{", "}", "void", "evaluate", "public", "(", ")", "throws", "Throwable", "{", "}", "@", "Override", ";", "try", ".", "push", "{", "}", "finally", ".", "delegate", "(", ")", ";", "{", "}", "OutputCaptureRule", ".", "this", "base", ".", "evaluate", "try", "(", ")", "{", "}", "finally", "if", "{", "}", "(", ")", "{", "}", ";", "!", "String", ";", ";", ".", "pop", ".", "isEmpty", "output", "=", "MatcherAssert", ".", "assertThat", ".", "delegate", "(", ")", ".", "matchers", "(", ")", ".", "toString", "(", "output", ",", ")", "OutputCaptureRule", ".", "this", "OutputCaptureRule", ".", "this", ".", "delegate", "(", ")", "allOf", "OutputCaptureRule", ".", "this", "(", ")", ".", "matchers", "OutputCaptureRule", ".", "this"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 175, "ast_depth": 23, "n_identifiers": 16, "vocab_size": 39, "n_whitespaces": 138, "n_words": 49, "nloc": 23, "token_counts": 115}}
{"dataset_split": "train", "id": "spring-boot@6642bf7:core/spring-boot-test/src/main/java/org/springframework/boot/test/system/OutputCaptureRule.java#65-82", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6642bf7beb33ca7590fa3f36430aaf9ab21bc800", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/system/OutputCaptureRule.java", "language": "Java"}, "method": {"name": "evaluate", "qualified_name": "org.springframework.boot.test.system.OutputCaptureRule#evaluate", "start_line": 65, "end_line": 82, "signature": "evaluate()", "original_code": "@Override\n\t\t\tpublic void evaluate() throws Throwable {\n\t\t\t\tOutputCaptureRule.this.delegate.push();\n\t\t\t\ttry {\n\t\t\t\t\tbase.evaluate();\n\t\t\t\t}\n\t\t\t\tfinally {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (!OutputCaptureRule.this.matchers.isEmpty()) {\n\t\t\t\t\t\t\tString output = OutputCaptureRule.this.delegate.toString();\n\t\t\t\t\t\t\tMatcherAssert.assertThat(output, allOf(OutputCaptureRule.this.matchers));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfinally {\n\t\t\t\t\t\tOutputCaptureRule.this.delegate.pop();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}", "doc_comment": ""}, "code_tokens": ["void", "evaluate", "public", "(", ")", "throws", "Throwable", "{", "}", "@", "Override", ";", "try", ".", "push", "{", "}", "finally", ".", "delegate", "(", ")", ";", "{", "}", "OutputCaptureRule", ".", "this", "base", ".", "evaluate", "try", "(", ")", "{", "}", "finally", "if", "{", "}", "(", ")", "{", "}", ";", "!", "String", ";", ";", ".", "pop", ".", "isEmpty", "output", "=", "MatcherAssert", ".", "assertThat", ".", "delegate", "(", ")", ".", "matchers", "(", ")", ".", "toString", "(", "output", ",", ")", "OutputCaptureRule", ".", "this", "OutputCaptureRule", ".", "this", ".", "delegate", "(", ")", "allOf", "OutputCaptureRule", ".", "this", "(", ")", ".", "matchers", "OutputCaptureRule", ".", "this"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 142, "ast_depth": 18, "n_identifiers": 14, "vocab_size": 33, "n_whitespaces": 115, "n_words": 38, "nloc": 18, "token_counts": 93}}
{"dataset_split": "train", "id": "spring-boot@6642bf7:core/spring-boot-test/src/main/java/org/springframework/boot/test/system/OutputCaptureRule.java#86-89", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6642bf7beb33ca7590fa3f36430aaf9ab21bc800", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/system/OutputCaptureRule.java", "language": "Java"}, "method": {"name": "getAll", "qualified_name": "org.springframework.boot.test.system.OutputCaptureRule#getAll", "start_line": 86, "end_line": 89, "signature": "getAll()", "original_code": "@Override\n\tpublic String getAll() {\n\t\treturn this.delegate.getAll();\n\t}", "doc_comment": ""}, "code_tokens": ["String", "getAll", "public", "(", ")", "{", "}", "@", "Override", "return", ";", ".", "getAll", "this", ".", "delegate", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 11, "n_words": 8, "nloc": 4, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@6642bf7:core/spring-boot-test/src/main/java/org/springframework/boot/test/system/OutputCaptureRule.java#91-94", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6642bf7beb33ca7590fa3f36430aaf9ab21bc800", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/system/OutputCaptureRule.java", "language": "Java"}, "method": {"name": "getOut", "qualified_name": "org.springframework.boot.test.system.OutputCaptureRule#getOut", "start_line": 91, "end_line": 94, "signature": "getOut()", "original_code": "@Override\n\tpublic String getOut() {\n\t\treturn this.delegate.getOut();\n\t}", "doc_comment": ""}, "code_tokens": ["String", "getOut", "public", "(", ")", "{", "}", "@", "Override", "return", ";", ".", "getOut", "this", ".", "delegate", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 11, "n_words": 8, "nloc": 4, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@6642bf7:core/spring-boot-test/src/main/java/org/springframework/boot/test/system/OutputCaptureRule.java#96-99", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6642bf7beb33ca7590fa3f36430aaf9ab21bc800", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/system/OutputCaptureRule.java", "language": "Java"}, "method": {"name": "getErr", "qualified_name": "org.springframework.boot.test.system.OutputCaptureRule#getErr", "start_line": 96, "end_line": 99, "signature": "getErr()", "original_code": "@Override\n\tpublic String getErr() {\n\t\treturn this.delegate.getErr();\n\t}", "doc_comment": ""}, "code_tokens": ["String", "getErr", "public", "(", ")", "{", "}", "@", "Override", "return", ";", ".", "getErr", "this", ".", "delegate", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 11, "n_words": 8, "nloc": 4, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@6642bf7:core/spring-boot-test/src/main/java/org/springframework/boot/test/system/OutputCaptureRule.java#101-104", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6642bf7beb33ca7590fa3f36430aaf9ab21bc800", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/system/OutputCaptureRule.java", "language": "Java"}, "method": {"name": "toString", "qualified_name": "org.springframework.boot.test.system.OutputCaptureRule#toString", "start_line": 101, "end_line": 104, "signature": "toString()", "original_code": "@Override\n\tpublic String toString() {\n\t\treturn this.delegate.toString();\n\t}", "doc_comment": ""}, "code_tokens": ["String", "toString", "public", "(", ")", "{", "}", "@", "Override", "return", ";", ".", "toString", "this", ".", "delegate", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 11, "n_words": 8, "nloc": 4, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@6642bf7:core/spring-boot-test/src/main/java/org/springframework/boot/test/system/OutputCaptureRule.java#111-113", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6642bf7beb33ca7590fa3f36430aaf9ab21bc800", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/system/OutputCaptureRule.java", "language": "Java"}, "method": {"name": "expect", "qualified_name": "org.springframework.boot.test.system.OutputCaptureRule#expect", "start_line": 111, "end_line": 113, "signature": "expect(Matcher<? super String> matcher)", "original_code": "public void expect(Matcher<? super String> matcher) {\n\t\tthis.matchers.add(matcher);\n\t}", "doc_comment": "/**\n\t * Verify that the output is matched by the supplied {@code matcher}. Verification is\n\t * performed after the test method has executed.\n\t * @param matcher the matcher\n\t */"}, "code_tokens": ["void", "expect", "public", "(", ")", "{", "}", "matcher", ";", "Matcher", ".", "add", "<", ">", "this", ".", "matchers", "(", "matcher", ")", "?", "super", "String"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 36, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 19, "n_whitespaces": 11, "n_words": 11, "nloc": 3, "token_counts": 23}}
{"dataset_split": "train", "id": "spring-boot@6642bf7:core/spring-boot-test/src/test/java/org/springframework/boot/test/system/OutputCaptureRuleTests.java#35-39", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6642bf7beb33ca7590fa3f36430aaf9ab21bc800", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/test/java/org/springframework/boot/test/system/OutputCaptureRuleTests.java", "language": "Java"}, "method": {"name": "toStringShouldReturnAllCapturedOutput", "qualified_name": "test.java.org.springframework.boot.test.system.OutputCaptureRuleTests#toStringShouldReturnAllCapturedOutput", "start_line": 35, "end_line": 39, "signature": "toStringShouldReturnAllCapturedOutput()", "original_code": "@Test\n\tpublic void toStringShouldReturnAllCapturedOutput() {\n\t\tSystem.out.println(\"Hello World\");\n\t\tassertThat(this.output.toString()).contains(\"Hello World\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "toStringShouldReturnAllCapturedOutput", "public", "(", ")", "{", "}", "@", "Test", ";", ";", ".", "println", ".", "contains", "System", ".", "out", "(", ")", "assertThat", "(", ")", "\"", "Hello World", "\"", "(", ")", "\"", "Hello World", "\"", ".", "toString", "this", ".", "output", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 58, "ast_depth": 10, "n_identifiers": 9, "vocab_size": 21, "n_whitespaces": 15, "n_words": 16, "nloc": 5, "token_counts": 38}}
{"dataset_split": "train", "id": "spring-boot@6642bf7:core/spring-boot-test/src/test/java/org/springframework/boot/test/system/OutputCaptureRuleTests.java#41-46", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6642bf7beb33ca7590fa3f36430aaf9ab21bc800", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/test/java/org/springframework/boot/test/system/OutputCaptureRuleTests.java", "language": "Java"}, "method": {"name": "getAllShouldReturnAllCapturedOutput", "qualified_name": "test.java.org.springframework.boot.test.system.OutputCaptureRuleTests#getAllShouldReturnAllCapturedOutput", "start_line": 41, "end_line": 46, "signature": "getAllShouldReturnAllCapturedOutput()", "original_code": "@Test\n\tpublic void getAllShouldReturnAllCapturedOutput() {\n\t\tSystem.out.println(\"Hello World\");\n\t\tSystem.err.println(\"Hello Error\");\n\t\tassertThat(this.output.getAll()).contains(\"Hello World\", \"Hello Error\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "getAllShouldReturnAllCapturedOutput", "public", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ".", "println", ".", "println", ".", "contains", "System", ".", "out", "(", ")", "System", ".", "err", "(", ")", "assertThat", "(", ",", ")", "\"", "Hello World", "\"", "\"", "Hello Error", "\"", "(", ")", "\"", "Hello World", "\"", "\"", "Hello Error", "\"", ".", "getAll", "this", ".", "output", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 79, "ast_depth": 10, "n_identifiers": 10, "vocab_size": 24, "n_whitespaces": 21, "n_words": 23, "nloc": 6, "token_counts": 53}}
{"dataset_split": "train", "id": "spring-boot@6642bf7:core/spring-boot-test/src/test/java/org/springframework/boot/test/system/OutputCaptureRuleTests.java#48-54", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6642bf7beb33ca7590fa3f36430aaf9ab21bc800", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/test/java/org/springframework/boot/test/system/OutputCaptureRuleTests.java", "language": "Java"}, "method": {"name": "getOutShouldOnlyReturnOutputCapturedFromSystemOut", "qualified_name": "test.java.org.springframework.boot.test.system.OutputCaptureRuleTests#getOutShouldOnlyReturnOutputCapturedFromSystemOut", "start_line": 48, "end_line": 54, "signature": "getOutShouldOnlyReturnOutputCapturedFromSystemOut()", "original_code": "@Test\n\tpublic void getOutShouldOnlyReturnOutputCapturedFromSystemOut() {\n\t\tSystem.out.println(\"Hello World\");\n\t\tSystem.err.println(\"Hello Error\");\n\t\tassertThat(this.output.getOut()).contains(\"Hello World\");\n\t\tassertThat(this.output.getOut()).doesNotContain(\"Hello Error\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "getOutShouldOnlyReturnOutputCapturedFromSystemOut", "public", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ";", ".", "println", ".", "println", ".", "contains", ".", "doesNotContain", "System", ".", "out", "(", ")", "System", ".", "err", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "\"", "Hello World", "\"", "\"", "Hello Error", "\"", "(", ")", "\"", "Hello World", "\"", "(", ")", "\"", "Hello Error", "\"", ".", "getOut", ".", "getOut", "this", ".", "output", "(", ")", "this", ".", "output", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 101, "ast_depth": 10, "n_identifiers": 11, "vocab_size": 24, "n_whitespaces": 23, "n_words": 28, "nloc": 7, "token_counts": 67}}
{"dataset_split": "train", "id": "spring-boot@6642bf7:core/spring-boot-test/src/test/java/org/springframework/boot/test/system/OutputCaptureRuleTests.java#56-62", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6642bf7beb33ca7590fa3f36430aaf9ab21bc800", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/test/java/org/springframework/boot/test/system/OutputCaptureRuleTests.java", "language": "Java"}, "method": {"name": "getErrShouldOnlyReturnOutputCapturedFromSystemErr", "qualified_name": "test.java.org.springframework.boot.test.system.OutputCaptureRuleTests#getErrShouldOnlyReturnOutputCapturedFromSystemErr", "start_line": 56, "end_line": 62, "signature": "getErrShouldOnlyReturnOutputCapturedFromSystemErr()", "original_code": "@Test\n\tpublic void getErrShouldOnlyReturnOutputCapturedFromSystemErr() {\n\t\tSystem.out.println(\"Hello World\");\n\t\tSystem.err.println(\"Hello Error\");\n\t\tassertThat(this.output.getErr()).contains(\"Hello Error\");\n\t\tassertThat(this.output.getErr()).doesNotContain(\"Hello World\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "getErrShouldOnlyReturnOutputCapturedFromSystemErr", "public", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ";", ".", "println", ".", "println", ".", "contains", ".", "doesNotContain", "System", ".", "out", "(", ")", "System", ".", "err", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "\"", "Hello World", "\"", "\"", "Hello Error", "\"", "(", ")", "\"", "Hello Error", "\"", "(", ")", "\"", "Hello World", "\"", ".", "getErr", ".", "getErr", "this", ".", "output", "(", ")", "this", ".", "output", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 101, "ast_depth": 10, "n_identifiers": 11, "vocab_size": 24, "n_whitespaces": 23, "n_words": 28, "nloc": 7, "token_counts": 67}}
{"dataset_split": "train", "id": "spring-boot@6642bf7:core/spring-boot-test/src/test/java/org/springframework/boot/test/system/OutputCaptureRuleTests.java#64-68", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "6642bf7beb33ca7590fa3f36430aaf9ab21bc800", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/test/java/org/springframework/boot/test/system/OutputCaptureRuleTests.java", "language": "Java"}, "method": {"name": "captureShouldBeAssertable", "qualified_name": "test.java.org.springframework.boot.test.system.OutputCaptureRuleTests#captureShouldBeAssertable", "start_line": 64, "end_line": 68, "signature": "captureShouldBeAssertable()", "original_code": "@Test\n\tpublic void captureShouldBeAssertable() {\n\t\tSystem.out.println(\"Hello World\");\n\t\tassertThat(this.output).contains(\"Hello World\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "captureShouldBeAssertable", "public", "(", ")", "{", "}", "@", "Test", ";", ";", ".", "println", ".", "contains", "System", ".", "out", "(", ")", "assertThat", "(", ")", "\"", "Hello World", "\"", "(", ")", "\"", "Hello World", "\"", "this", ".", "output"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 52, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 20, "n_whitespaces": 15, "n_words": 15, "nloc": 5, "token_counts": 34}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java#113-117", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java", "language": "Java"}, "method": {"name": "stringOrNumberMigrationVersionConverter", "qualified_name": "org.springframework.boot.flyway.autoconfigure.FlywayAutoConfiguration#stringOrNumberMigrationVersionConverter", "start_line": 113, "end_line": 117, "signature": "stringOrNumberMigrationVersionConverter()", "original_code": "@Bean\n\t@ConfigurationPropertiesBinding\n\tstatic StringOrNumberToMigrationVersionConverter stringOrNumberMigrationVersionConverter() {\n\t\treturn new StringOrNumberToMigrationVersionConverter();\n\t}", "doc_comment": ""}, "code_tokens": ["StringOrNumberToMigrationVersionConverter", "stringOrNumberMigrationVersionConverter", "static", "(", ")", "{", "}", "@", "Bean", "@", "ConfigurationPropertiesBinding", "return", ";", "new", "StringOrNumberToMigrationVersionConverter", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 27, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 13, "n_whitespaces": 14, "n_words": 8, "nloc": 5, "token_counts": 17}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java#119-122", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java", "language": "Java"}, "method": {"name": "flywayDefaultDdlModeProvider", "qualified_name": "org.springframework.boot.flyway.autoconfigure.FlywayAutoConfiguration#flywayDefaultDdlModeProvider", "start_line": 119, "end_line": 122, "signature": "flywayDefaultDdlModeProvider(ObjectProvider<Flyway> flyways)", "original_code": "@Bean\n\tFlywaySchemaManagementProvider flywayDefaultDdlModeProvider(ObjectProvider<Flyway> flyways) {\n\t\treturn new FlywaySchemaManagementProvider(flyways);\n\t}", "doc_comment": ""}, "code_tokens": ["FlywaySchemaManagementProvider", "flywayDefaultDdlModeProvider", "(", ")", "{", "}", "@", "Bean", "flyways", "return", ";", "ObjectProvider", "new", "FlywaySchemaManagementProvider", "<", "Flyway", ">", "(", "flyways", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 32, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 16, "n_whitespaces": 12, "n_words": 10, "nloc": 4, "token_counts": 20}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java#136-139", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java", "language": "Java"}, "method": {"name": "resourceProviderCustomizer", "qualified_name": "org.springframework.boot.flyway.autoconfigure.FlywayAutoConfiguration#resourceProviderCustomizer", "start_line": 136, "end_line": 139, "signature": "resourceProviderCustomizer()", "original_code": "@Bean\n\t\tResourceProviderCustomizer resourceProviderCustomizer() {\n\t\t\treturn new ResourceProviderCustomizer();\n\t\t}", "doc_comment": ""}, "code_tokens": ["ResourceProviderCustomizer", "resourceProviderCustomizer", "(", ")", "{", "}", "@", "Bean", "return", ";", "new", "ResourceProviderCustomizer", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 23, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 11, "n_whitespaces": 14, "n_words": 6, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java#141-145", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java", "language": "Java"}, "method": {"name": "flywayConnectionDetails", "qualified_name": "org.springframework.boot.flyway.autoconfigure.FlywayAutoConfiguration#flywayConnectionDetails", "start_line": 141, "end_line": 145, "signature": "flywayConnectionDetails()", "original_code": "@Bean\n\t\t@ConditionalOnMissingBean(FlywayConnectionDetails.class)\n\t\tPropertiesFlywayConnectionDetails flywayConnectionDetails() {\n\t\t\treturn new PropertiesFlywayConnectionDetails(this.properties);\n\t\t}", "doc_comment": ""}, "code_tokens": ["PropertiesFlywayConnectionDetails", "flywayConnectionDetails", "(", ")", "{", "}", "@", "Bean", "@", "ConditionalOnMissingBean", "return", ";", "(", ")", "new", "PropertiesFlywayConnectionDetails", "FlywayConnectionDetails", ".", "class", "(", ")", "this", ".", "properties"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 37, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 17, "n_whitespaces": 17, "n_words": 11, "nloc": 5, "token_counts": 24}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java#147-151", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java", "language": "Java"}, "method": {"name": "sqlServerFlywayConfigurationCustomizer", "qualified_name": "org.springframework.boot.flyway.autoconfigure.FlywayAutoConfiguration#sqlServerFlywayConfigurationCustomizer", "start_line": 147, "end_line": 151, "signature": "sqlServerFlywayConfigurationCustomizer()", "original_code": "@Bean\n\t\t@ConditionalOnClass(name = \"org.flywaydb.database.sqlserver.SQLServerConfigurationExtension\")\n\t\tSqlServerFlywayConfigurationCustomizer sqlServerFlywayConfigurationCustomizer() {\n\t\t\treturn new SqlServerFlywayConfigurationCustomizer(this.properties);\n\t\t}", "doc_comment": ""}, "code_tokens": ["SqlServerFlywayConfigurationCustomizer", "sqlServerFlywayConfigurationCustomizer", "(", ")", "{", "}", "@", "Bean", "@", "ConditionalOnClass", "return", ";", "(", ")", "new", "SqlServerFlywayConfigurationCustomizer", "name", "=", "(", ")", "\"", "org.flywaydb.database.sqlserver.SQLServerConfigurationExtension", "\"", "this", ".", "properties"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 40, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 19, "n_whitespaces": 19, "n_words": 15, "nloc": 5, "token_counts": 26}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java#153-157", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java", "language": "Java"}, "method": {"name": "oracleFlywayConfigurationCustomizer", "qualified_name": "org.springframework.boot.flyway.autoconfigure.FlywayAutoConfiguration#oracleFlywayConfigurationCustomizer", "start_line": 153, "end_line": 157, "signature": "oracleFlywayConfigurationCustomizer()", "original_code": "@Bean\n\t\t@ConditionalOnClass(name = \"org.flywaydb.database.oracle.OracleConfigurationExtension\")\n\t\tOracleFlywayConfigurationCustomizer oracleFlywayConfigurationCustomizer() {\n\t\t\treturn new OracleFlywayConfigurationCustomizer(this.properties);\n\t\t}", "doc_comment": ""}, "code_tokens": ["OracleFlywayConfigurationCustomizer", "oracleFlywayConfigurationCustomizer", "(", ")", "{", "}", "@", "Bean", "@", "ConditionalOnClass", "return", ";", "(", ")", "new", "OracleFlywayConfigurationCustomizer", "name", "=", "(", ")", "\"", "org.flywaydb.database.oracle.OracleConfigurationExtension", "\"", "this", ".", "properties"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 40, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 19, "n_whitespaces": 19, "n_words": 15, "nloc": 5, "token_counts": 26}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java#159-163", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java", "language": "Java"}, "method": {"name": "postgresqlFlywayConfigurationCustomizer", "qualified_name": "org.springframework.boot.flyway.autoconfigure.FlywayAutoConfiguration#postgresqlFlywayConfigurationCustomizer", "start_line": 159, "end_line": 163, "signature": "postgresqlFlywayConfigurationCustomizer()", "original_code": "@Bean\n\t\t@ConditionalOnClass(name = \"org.flywaydb.database.postgresql.PostgreSQLConfigurationExtension\")\n\t\tPostgresqlFlywayConfigurationCustomizer postgresqlFlywayConfigurationCustomizer() {\n\t\t\treturn new PostgresqlFlywayConfigurationCustomizer(this.properties);\n\t\t}", "doc_comment": ""}, "code_tokens": ["PostgresqlFlywayConfigurationCustomizer", "postgresqlFlywayConfigurationCustomizer", "(", ")", "{", "}", "@", "Bean", "@", "ConditionalOnClass", "return", ";", "(", ")", "new", "PostgresqlFlywayConfigurationCustomizer", "name", "=", "(", ")", "\"", "org.flywaydb.database.postgresql.PostgreSQLConfigurationExtension", "\"", "this", ".", "properties"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 40, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 19, "n_whitespaces": 19, "n_words": 15, "nloc": 5, "token_counts": 26}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java#165-180", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java", "language": "Java"}, "method": {"name": "flyway", "qualified_name": "org.springframework.boot.flyway.autoconfigure.FlywayAutoConfiguration#flyway", "start_line": 165, "end_line": 180, "signature": "flyway(FlywayConnectionDetails connectionDetails, ResourceLoader resourceLoader,\n\t\t\t\tObjectProvider<DataSource> dataSource, @FlywayDataSource ObjectProvider<DataSource> flywayDataSource,\n\t\t\t\tObjectProvider<FlywayConfigurationCustomizer> fluentConfigurationCustomizers,\n\t\t\t\tObjectProvider<JavaMigration> javaMigrations, ObjectProvider<Callback> callbacks,\n\t\t\t\tResourceProviderCustomizer resourceProviderCustomizer)", "original_code": "@Bean\n\t\tFlyway flyway(FlywayConnectionDetails connectionDetails, ResourceLoader resourceLoader,\n\t\t\t\tObjectProvider<DataSource> dataSource, @FlywayDataSource ObjectProvider<DataSource> flywayDataSource,\n\t\t\t\tObjectProvider<FlywayConfigurationCustomizer> fluentConfigurationCustomizers,\n\t\t\t\tObjectProvider<JavaMigration> javaMigrations, ObjectProvider<Callback> callbacks,\n\t\t\t\tResourceProviderCustomizer resourceProviderCustomizer) {\n\t\t\tFluentConfiguration configuration = new FluentConfiguration(resourceLoader.getClassLoader());\n\t\t\tconfigureDataSource(configuration, flywayDataSource.getIfAvailable(), dataSource.getIfUnique(),\n\t\t\t\t\tconnectionDetails);\n\t\t\tconfigureProperties(configuration, this.properties);\n\t\t\tconfigureCallbacks(configuration, callbacks.orderedStream().toList());\n\t\t\tconfigureJavaMigrations(configuration, javaMigrations.orderedStream().toList());\n\t\t\tfluentConfigurationCustomizers.orderedStream().forEach((customizer) -> customizer.customize(configuration));\n\t\t\tresourceProviderCustomizer.customize(configuration);\n\t\t\treturn configuration.load();\n\t\t}", "doc_comment": ""}, "code_tokens": ["Flyway", "flyway", "(", ",", ",", ",", ",", ",", ",", ",", ")", "{", "}", "@", "Bean", "FlywayConnectionDetails", "connectionDetails", "ResourceLoader", "resourceLoader", "dataSource", "flywayDataSource", "fluentConfigurationCustomizers", "javaMigrations", "callbacks", "ResourceProviderCustomizer", "resourceProviderCustomizer", "FluentConfiguration", ";", ";", ";", ";", ";", ";", ";", "return", ";", "ObjectProvider", "ObjectProvider", "ObjectProvider", "ObjectProvider", "ObjectProvider", "configuration", "=", "configureDataSource", "configureProperties", "configureCallbacks", "configureJavaMigrations", ".", "forEach", "resourceProviderCustomizer", ".", "customize", "configuration", ".", "load", "<", "DataSource", ">", "@", "FlywayDataSource", "<", "DataSource", ">", "<", "FlywayConfigurationCustomizer", ">", "<", "JavaMigration", ">", "<", "Callback", ">", "new", "FluentConfiguration", "(", "configuration", ",", ",", ",", "connectionDetails", ")", "(", "configuration", ",", ")", "(", "configuration", ",", ")", "(", "configuration", ",", ")", "fluentConfigurationCustomizers", ".", "orderedStream", "(", ")", "(", "configuration", ")", "(", ")", "(", ")", "flywayDataSource", ".", "getIfAvailable", "dataSource", ".", "getIfUnique", "this", ".", "properties", ".", "toList", ".", "toList", "(", ")", "->", "resourceLoader", ".", "getClassLoader", "(", ")", "(", ")", "callbacks", ".", "orderedStream", "(", ")", "javaMigrations", ".", "orderedStream", "(", ")", "(", "customizer", ")", "customizer", ".", "customize", "(", ")", "(", ")", "(", ")", "(", "configuration", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 225, "ast_depth": 10, "n_identifiers": 26, "vocab_size": 51, "n_whitespaces": 90, "n_words": 65, "nloc": 16, "token_counts": 153}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java#182-186", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java", "language": "Java"}, "method": {"name": "configureDataSource", "qualified_name": "org.springframework.boot.flyway.autoconfigure.FlywayAutoConfiguration#configureDataSource", "start_line": 182, "end_line": 186, "signature": "configureDataSource(FluentConfiguration configuration, @Nullable DataSource flywayDataSource,\n\t\t\t\t@Nullable DataSource dataSource, FlywayConnectionDetails connectionDetails)", "original_code": "private void configureDataSource(FluentConfiguration configuration, @Nullable DataSource flywayDataSource,\n\t\t\t\t@Nullable DataSource dataSource, FlywayConnectionDetails connectionDetails) {\n\t\t\tDataSource migrationDataSource = getMigrationDataSource(flywayDataSource, dataSource, connectionDetails);\n\t\t\tconfiguration.dataSource(migrationDataSource);\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "configureDataSource", "private", "(", ",", ",", ",", ")", "{", "}", "FluentConfiguration", "configuration", "DataSource", "flywayDataSource", "DataSource", "dataSource", "FlywayConnectionDetails", "connectionDetails", "DataSource", ";", ";", "migrationDataSource", "=", "configuration", ".", "dataSource", "@", "Nullable", "@", "Nullable", "getMigrationDataSource", "(", "migrationDataSource", ")", "(", "flywayDataSource", ",", "dataSource", ",", "connectionDetails", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 61, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 22, "n_whitespaces": 32, "n_words": 22, "nloc": 5, "token_counts": 41}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java#188-209", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java", "language": "Java"}, "method": {"name": "getMigrationDataSource", "qualified_name": "org.springframework.boot.flyway.autoconfigure.FlywayAutoConfiguration#getMigrationDataSource", "start_line": 188, "end_line": 209, "signature": "getMigrationDataSource(@Nullable DataSource flywayDataSource,\n\t\t\t\t@Nullable DataSource dataSource, FlywayConnectionDetails connectionDetails)", "original_code": "private DataSource getMigrationDataSource(@Nullable DataSource flywayDataSource,\n\t\t\t\t@Nullable DataSource dataSource, FlywayConnectionDetails connectionDetails) {\n\t\t\tif (flywayDataSource != null) {\n\t\t\t\treturn flywayDataSource;\n\t\t\t}\n\t\t\tString url = connectionDetails.getJdbcUrl();\n\t\t\tif (url != null) {\n\t\t\t\tDataSourceBuilder<?> builder = DataSourceBuilder.create().type(SimpleDriverDataSource.class);\n\t\t\t\tbuilder.url(url);\n\t\t\t\tapplyConnectionDetails(connectionDetails, builder);\n\t\t\t\treturn builder.build();\n\t\t\t}\n\t\t\tString user = connectionDetails.getUsername();\n\t\t\tif (user != null && dataSource != null) {\n\t\t\t\tDataSourceBuilder<?> builder = DataSourceBuilder.derivedFrom(dataSource)\n\t\t\t\t\t.type(SimpleDriverDataSource.class);\n\t\t\t\tapplyConnectionDetails(connectionDetails, builder);\n\t\t\t\treturn builder.build();\n\t\t\t}\n\t\t\tAssert.state(dataSource != null, \"Flyway migration DataSource missing\");\n\t\t\treturn dataSource;\n\t\t}", "doc_comment": ""}, "code_tokens": ["DataSource", "getMigrationDataSource", "private", "(", ",", ",", ")", "{", "}", "DataSource", "flywayDataSource", "DataSource", "dataSource", "FlywayConnectionDetails", "connectionDetails", "if", "String", ";", "if", "String", ";", "if", ";", "return", "dataSource", ";", "(", ")", "{", "}", "url", "=", "(", ")", "{", "}", "user", "=", "(", ")", "{", "}", "Assert", ".", "state", "@", "Nullable", "@", "Nullable", "flywayDataSource", "!=", "null", "return", "flywayDataSource", ";", "connectionDetails", ".", "getJdbcUrl", "url", "!=", "null", ";", ";", ";", "return", ";", "connectionDetails", ".", "getUsername", "&&", ";", ";", "return", ";", "(", ",", ")", "(", ")", "DataSourceBuilder", "builder", "=", "builder", ".", "url", "applyConnectionDetails", "builder", ".", "build", "(", ")", "user", "!=", "null", "dataSource", "!=", "null", "DataSourceBuilder", "builder", "=", "applyConnectionDetails", "builder", ".", "build", "dataSource", "!=", "null", "\"", "Flyway migration DataSource missing", "\"", "<", ">", ".", "type", "(", "url", ")", "(", "connectionDetails", ",", "builder", ")", "(", ")", "<", ">", ".", "type", "(", "connectionDetails", ",", "builder", ")", "(", ")", "?", "DataSourceBuilder", ".", "create", "(", ")", "?", "DataSourceBuilder", ".", "derivedFrom", "(", ")", "(", ")", "SimpleDriverDataSource", ".", "class", "(", "dataSource", ")", "SimpleDriverDataSource", ".", "class"], "metrics": {"cyclomatic_complexity": 5, "n_ast_nodes": 234, "ast_depth": 11, "n_identifiers": 18, "vocab_size": 43, "n_whitespaces": 143, "n_words": 72, "nloc": 22, "token_counts": 158}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java#211-218", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java", "language": "Java"}, "method": {"name": "applyConnectionDetails", "qualified_name": "org.springframework.boot.flyway.autoconfigure.FlywayAutoConfiguration#applyConnectionDetails", "start_line": 211, "end_line": 218, "signature": "applyConnectionDetails(FlywayConnectionDetails connectionDetails, DataSourceBuilder<?> builder)", "original_code": "private void applyConnectionDetails(FlywayConnectionDetails connectionDetails, DataSourceBuilder<?> builder) {\n\t\t\tbuilder.username(connectionDetails.getUsername());\n\t\t\tbuilder.password(connectionDetails.getPassword());\n\t\t\tString driverClassName = connectionDetails.getDriverClassName();\n\t\t\tif (StringUtils.hasText(driverClassName)) {\n\t\t\t\tbuilder.driverClassName(driverClassName);\n\t\t\t}\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "applyConnectionDetails", "private", "(", ",", ")", "{", "}", "FlywayConnectionDetails", "connectionDetails", "builder", ";", ";", "String", ";", "if", "DataSourceBuilder", "builder", ".", "username", "builder", ".", "password", "driverClassName", "=", "(", ")", "{", "}", "<", ">", "(", ")", "(", ")", "connectionDetails", ".", "getDriverClassName", "StringUtils", ".", "hasText", ";", "?", "connectionDetails", ".", "getUsername", "connectionDetails", ".", "getPassword", "(", ")", "(", "driverClassName", ")", "builder", ".", "driverClassName", "(", ")", "(", ")", "(", "driverClassName", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 96, "ast_depth": 9, "n_identifiers": 11, "vocab_size": 28, "n_whitespaces": 39, "n_words": 26, "nloc": 8, "token_counts": 64}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java#228-332", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java", "language": "Java"}, "method": {"name": "configureProperties", "qualified_name": "org.springframework.boot.flyway.autoconfigure.FlywayAutoConfiguration#configureProperties", "start_line": 228, "end_line": 332, "signature": "configureProperties(FluentConfiguration configuration, FlywayProperties properties)", "original_code": "@SuppressWarnings(\"removal\")\n\t\tprivate void configureProperties(FluentConfiguration configuration, FlywayProperties properties) {\n\t\t\t// NOTE: Using method references in the mapper methods can break\n\t\t\t// back-compatibility (see gh-38164)\n\t\t\tPropertyMapper map = PropertyMapper.get();\n\t\t\tString[] locations = new LocationResolver(configuration.getDataSource())\n\t\t\t\t.resolveLocations(properties.getLocations())\n\t\t\t\t.toArray(new String[0]);\n\t\t\tconfiguration.locations(locations);\n\t\t\tmap.from(properties.getCallbackLocations())\n\t\t\t\t.when((callbackLocations) -> !ObjectUtils.isEmpty(callbackLocations))\n\t\t\t\t.to((callbackLocations) -> configuration.callbackLocations(\n\t\t\t\t\t\tnew LocationResolver(configuration.getDataSource()).resolveLocations(callbackLocations)\n\t\t\t\t\t\t\t.toArray(new String[0])));\n\t\t\tmap.from(properties.isFailOnMissingLocations())\n\t\t\t\t.to((failOnMissingLocations) -> configuration.failOnMissingLocations(failOnMissingLocations));\n\t\t\tmap.from(properties.getEncoding()).to((encoding) -> configuration.encoding(encoding));\n\t\t\tmap.from(properties.getConnectRetries())\n\t\t\t\t.to((connectRetries) -> configuration.connectRetries(connectRetries));\n\t\t\tmap.from(properties.getConnectRetriesInterval())\n\t\t\t\t.as(Duration::getSeconds)\n\t\t\t\t.as(Long::intValue)\n\t\t\t\t.to((connectRetriesInterval) -> configuration.connectRetriesInterval(connectRetriesInterval));\n\t\t\tmap.from(properties.getLockRetryCount())\n\t\t\t\t.to((lockRetryCount) -> configuration.lockRetryCount(lockRetryCount));\n\t\t\tmap.from(properties.getDefaultSchema()).to((schema) -> configuration.defaultSchema(schema));\n\t\t\tmap.from(properties.getSchemas())\n\t\t\t\t.as(StringUtils::toStringArray)\n\t\t\t\t.to((schemas) -> configuration.schemas(schemas));\n\t\t\tmap.from(properties.isCreateSchemas()).to((createSchemas) -> configuration.createSchemas(createSchemas));\n\t\t\tmap.from(properties.getTable()).to((table) -> configuration.table(table));\n\t\t\tmap.from(properties.getTablespace()).to((tablespace) -> configuration.tablespace(tablespace));\n\t\t\tmap.from(properties.getBaselineDescription())\n\t\t\t\t.to((baselineDescription) -> configuration.baselineDescription(baselineDescription));\n\t\t\tmap.from(properties.getBaselineVersion())\n\t\t\t\t.to((baselineVersion) -> configuration.baselineVersion(baselineVersion));\n\t\t\tmap.from(properties.getInstalledBy()).to((installedBy) -> configuration.installedBy(installedBy));\n\t\t\tmap.from(properties.getPlaceholders()).to((placeholders) -> configuration.placeholders(placeholders));\n\t\t\tmap.from(properties.getPlaceholderPrefix())\n\t\t\t\t.to((placeholderPrefix) -> configuration.placeholderPrefix(placeholderPrefix));\n\t\t\tmap.from(properties.getPlaceholderSuffix())\n\t\t\t\t.to((placeholderSuffix) -> configuration.placeholderSuffix(placeholderSuffix));\n\t\t\tmap.from(properties.getPlaceholderSeparator())\n\t\t\t\t.to((placeHolderSeparator) -> configuration.placeholderSeparator(placeHolderSeparator));\n\t\t\tmap.from(properties.isPlaceholderReplacement())\n\t\t\t\t.to((placeholderReplacement) -> configuration.placeholderReplacement(placeholderReplacement));\n\t\t\tmap.from(properties.getSqlMigrationPrefix())\n\t\t\t\t.to((sqlMigrationPrefix) -> configuration.sqlMigrationPrefix(sqlMigrationPrefix));\n\t\t\tmap.from(properties.getSqlMigrationSuffixes())\n\t\t\t\t.as(StringUtils::toStringArray)\n\t\t\t\t.to((sqlMigrationSuffixes) -> configuration.sqlMigrationSuffixes(sqlMigrationSuffixes));\n\t\t\tmap.from(properties.getSqlMigrationSeparator())\n\t\t\t\t.to((sqlMigrationSeparator) -> configuration.sqlMigrationSeparator(sqlMigrationSeparator));\n\t\t\tmap.from(properties.getRepeatableSqlMigrationPrefix())\n\t\t\t\t.to((repeatableSqlMigrationPrefix) -> configuration\n\t\t\t\t\t.repeatableSqlMigrationPrefix(repeatableSqlMigrationPrefix));\n\t\t\tmap.from(properties.getTarget()).to((target) -> configuration.target(target));\n\t\t\tmap.from(properties.isBaselineOnMigrate())\n\t\t\t\t.to((baselineOnMigrate) -> configuration.baselineOnMigrate(baselineOnMigrate));\n\t\t\tmap.from(properties.isCleanDisabled()).to((cleanDisabled) -> configuration.cleanDisabled(cleanDisabled));\n\t\t\tmap.from(properties.isGroup()).to((group) -> configuration.group(group));\n\t\t\tmap.from(properties.isMixed()).to((mixed) -> configuration.mixed(mixed));\n\t\t\tmap.from(properties.isOutOfOrder()).to((outOfOrder) -> configuration.outOfOrder(outOfOrder));\n\t\t\tmap.from(properties.isSkipDefaultCallbacks())\n\t\t\t\t.to((skipDefaultCallbacks) -> configuration.skipDefaultCallbacks(skipDefaultCallbacks));\n\t\t\tmap.from(properties.isSkipDefaultResolvers())\n\t\t\t\t.to((skipDefaultResolvers) -> configuration.skipDefaultResolvers(skipDefaultResolvers));\n\t\t\tmap.from(properties.isValidateMigrationNaming())\n\t\t\t\t.to((validateMigrationNaming) -> configuration.validateMigrationNaming(validateMigrationNaming));\n\t\t\tmap.from(properties.isValidateOnMigrate())\n\t\t\t\t.to((validateOnMigrate) -> configuration.validateOnMigrate(validateOnMigrate));\n\t\t\tmap.from(properties.getInitSqls())\n\t\t\t\t.whenNot(CollectionUtils::isEmpty)\n\t\t\t\t.as((initSqls) -> StringUtils.collectionToDelimitedString(initSqls, \"\\n\"))\n\t\t\t\t.to((initSql) -> configuration.initSql(initSql));\n\t\t\tmap.from(properties.getScriptPlaceholderPrefix())\n\t\t\t\t.to((prefix) -> configuration.scriptPlaceholderPrefix(prefix));\n\t\t\tmap.from(properties.getScriptPlaceholderSuffix())\n\t\t\t\t.to((suffix) -> configuration.scriptPlaceholderSuffix(suffix));\n\t\t\tmap.from(properties.getPowershellExecutable())\n\t\t\t\t.to((powershellExecutable) -> configuration.powershellExecutable(powershellExecutable));\n\t\t\tconfigureExecuteInTransaction(configuration, properties, map);\n\t\t\tmap.from(properties::getLoggers).to((loggers) -> configuration.loggers(loggers));\n\t\t\tmap.from(properties::getCommunityDbSupportEnabled)\n\t\t\t\t.to((communityDbSupportEnabled) -> configuration.communityDBSupportEnabled(communityDbSupportEnabled));\n\t\t\tmap.from(properties.getBatch()).to((batch) -> configuration.batch(batch));\n\t\t\tmap.from(properties.getDryRunOutput()).to((dryRunOutput) -> configuration.dryRunOutput(dryRunOutput));\n\t\t\tmap.from(properties.getErrorOverrides())\n\t\t\t\t.to((errorOverrides) -> configuration.errorOverrides(errorOverrides));\n\t\t\tmap.from(properties.getStream()).to((stream) -> configuration.stream(stream));\n\t\t\tmap.from(properties.getJdbcProperties())\n\t\t\t\t.whenNot(Map::isEmpty)\n\t\t\t\t.to((jdbcProperties) -> configuration.jdbcProperties(jdbcProperties));\n\t\t\tmap.from(properties.getKerberosConfigFile())\n\t\t\t\t.to((configFile) -> configuration.kerberosConfigFile(configFile));\n\t\t\tmap.from(properties.getOutputQueryResults())\n\t\t\t\t.to((outputQueryResults) -> configuration.outputQueryResults(outputQueryResults));\n\t\t\tmap.from(properties.getSkipExecutingMigrations())\n\t\t\t\t.to((skipExecutingMigrations) -> configuration.skipExecutingMigrations(skipExecutingMigrations));\n\t\t\tmap.from(properties.getIgnoreMigrationPatterns())\n\t\t\t\t.to((ignoreMigrationPatterns) -> configuration\n\t\t\t\t\t.ignoreMigrationPatterns(ignoreMigrationPatterns.toArray(new String[0])));\n\t\t\tmap.from(properties.getDetectEncoding())\n\t\t\t\t.to((detectEncoding) -> configuration.detectEncoding(detectEncoding));\n\t\t}", "doc_comment": "/**\n\t\t * Configure the given {@code configuration} using the given {@code properties}.\n\t\t * <p>\n\t\t * To maximize forwards- and backwards-compatibility method references are not\n\t\t * used.\n\t\t * @param configuration the configuration\n\t\t * @param properties the properties\n\t\t */"}, "code_tokens": ["void", "configureProperties", "private", "(", ",", ")", "{", "// NOTE: Using method references in the mapper methods can break", "// back-compatibility (see gh-38164)", "}", "@", "SuppressWarnings", "FluentConfiguration", "configuration", "FlywayProperties", "properties", "PropertyMapper", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "(", ")", "map", "=", "String", "locations", "=", "configuration", ".", "locations", ".", "to", ".", "to", ".", "to", ".", "to", ".", "to", ".", "to", ".", "to", ".", "to", ".", "to", ".", "to", ".", "to", ".", "to", ".", "to", ".", "to", ".", "to", ".", "to", ".", "to", ".", "to", ".", "to", ".", "to", ".", "to", ".", "to", ".", "to", ".", "to", ".", "to", ".", "to", ".", "to", ".", "to", ".", "to", ".", "to", ".", "to", ".", "to", ".", "to", ".", "to", ".", "to", ".", "to", ".", "to", "configureExecuteInTransaction", ".", "to", ".", "to", ".", "to", ".", "to", ".", "to", ".", "to", ".", "to", ".", "to", ".", "to", ".", "to", ".", "to", ".", "to", "\"", "removal", "\"", "PropertyMapper", ".", "get", "[", "]", ".", "toArray", "(", "locations", ")", ".", "when", "(", ")", "map", ".", "from", "(", ")", "map", ".", "from", "(", ")", "map", ".", "from", "(", ")", ".", "as", "(", ")", "map", ".", "from", "(", ")", "map", ".", "from", "(", ")", ".", "as", "(", ")", "map", ".", "from", "(", ")", "map", ".", "from", "(", ")", "map", ".", "from", "(", ")", "map", ".", "from", "(", ")", "map", ".", "from", "(", ")", "map", ".", "from", "(", ")", "map", ".", "from", "(", ")", "map", ".", "from", "(", ")", "map", ".", "from", "(", ")", "map", ".", "from", "(", ")", "map", ".", "from", "(", ")", "map", ".", "from", "(", ")", ".", "as", "(", ")", "map", ".", "from", "(", ")", "map", ".", "from", "(", ")", "map", ".", "from", "(", ")", "map", ".", "from", "(", ")", "map", ".", "from", "(", ")", "map", ".", "from", "(", ")", "map", ".", "from", "(", ")", "map", ".", "from", "(", ")", "map", ".", "from", "(", ")", "map", ".", "from", "(", ")", "map", ".", "from", "(", ")", "map", ".", "from", "(", ")", ".", "as", "(", ")", "map", ".", "from", "(", ")", "map", ".", "from", "(", ")", "map", ".", "from", "(", ")", "(", "configuration", ",", "properties", ",", "map", ")", "map", ".", "from", "(", ")", "map", ".", "from", "(", ")", "map", ".", "from", "(", ")", "map", ".", "from", "(", ")", "map", ".", "from", "(", ")", "map", ".", "from", "(", ")", ".", "whenNot", "(", ")", "map", ".", "from", "(", ")", "map", ".", "from", "(", ")", "map", ".", "from", "(", ")", "map", ".", "from", "(", ")", "map", ".", "from", "(", ")", "(", ")", ".", "resolveLocations", "(", ")", "map", ".", "from", "(", ")", "->", "(", ")", "->", "(", ")", "->", "(", ")", "->", ".", "as", "(", ")", "->", "(", ")", "->", "(", ")", "->", "map", ".", "from", "(", ")", "->", "(", ")", "->", "(", ")", "->", "(", ")", "->", "(", ")", "->", "(", ")", "->", "(", ")", "->", "(", ")", "->", "(", ")", "->", "(", ")", "->", "(", ")", "->", "(", ")", "->", "(", ")", "->", "map", ".", "from", "(", ")", "->", "(", ")", "->", "(", ")", "->", "(", ")", "->", "(", ")", "->", "(", ")", "->", "(", ")", "->", "(", ")", "->", "(", ")", "->", "(", ")", "->", "(", ")", "->", "(", ")", "->", "(", ")", "->", ".", "whenNot", "(", ")", "->", "(", ")", "->", "(", ")", "->", "(", ")", "->", "(", ")", "->", "(", ")", "->", "(", ")", "->", "(", ")", "->", "(", ")", "->", "(", ")", "->", "map", ".", "from", "(", ")", "->", "(", ")", "->", "(", ")", "->", "(", ")", "->", "(", ")", "->", "(", ")", "->", "new", "LocationResolver", "(", ")", "new", "String", "(", ")", "->", "(", "callbackLocations", ")", "configuration", ".", "callbackLocations", "properties", ".", "isFailOnMissingLocations", "(", "failOnMissingLocations", ")", "configuration", ".", "failOnMissingLocations", "properties", ".", "getEncoding", "(", "encoding", ")", "configuration", ".", "encoding", "properties", ".", "getConnectRetries", "(", "connectRetries", ")", "configuration", ".", "connectRetries", "map", ".", "from", "(", ")", "Long", "::", "intValue", "(", "connectRetriesInterval", ")", "configuration", ".", "connectRetriesInterval", "properties", ".", "getLockRetryCount", "(", "lockRetryCount", ")", "configuration", ".", "lockRetryCount", "properties", ".", "getDefaultSchema", "(", "schema", ")", "configuration", ".", "defaultSchema", "(", ")", "StringUtils", "::", "toStringArray", "(", "schemas", ")", "configuration", ".", "schemas", "properties", ".", "isCreateSchemas", "(", "createSchemas", ")", "configuration", ".", "createSchemas", "properties", ".", "getTable", "(", "table", ")", "configuration", ".", "table", "properties", ".", "getTablespace", "(", "tablespace", ")", "configuration", ".", "tablespace", "properties", ".", "getBaselineDescription", "(", "baselineDescription", ")", "configuration", ".", "baselineDescription", "properties", ".", "getBaselineVersion", "(", "baselineVersion", ")", "configuration", ".", "baselineVersion", "properties", ".", "getInstalledBy", "(", "installedBy", ")", "configuration", ".", "installedBy", "properties", ".", "getPlaceholders", "(", "placeholders", ")", "configuration", ".", "placeholders", "properties", ".", "getPlaceholderPrefix", "(", "placeholderPrefix", ")", "configuration", ".", "placeholderPrefix", "properties", ".", "getPlaceholderSuffix", "(", "placeholderSuffix", ")", "configuration", ".", "placeholderSuffix", "properties", ".", "getPlaceholderSeparator", "(", "placeHolderSeparator", ")", "configuration", ".", "placeholderSeparator", "properties", ".", "isPlaceholderReplacement", "(", "placeholderReplacement", ")", "configuration", ".", "placeholderReplacement", "properties", ".", "getSqlMigrationPrefix", "(", "sqlMigrationPrefix", ")", "configuration", ".", "sqlMigrationPrefix", "(", ")", "StringUtils", "::", "toStringArray", "(", "sqlMigrationSuffixes", ")", "configuration", ".", "sqlMigrationSuffixes", "properties", ".", "getSqlMigrationSeparator", "(", "sqlMigrationSeparator", ")", "configuration", ".", "sqlMigrationSeparator", "properties", ".", "getRepeatableSqlMigrationPrefix", "(", "repeatableSqlMigrationPrefix", ")", "configuration", ".", "repeatableSqlMigrationPrefix", "properties", ".", "getTarget", "(", "target", ")", "configuration", ".", "target", "properties", ".", "isBaselineOnMigrate", "(", "baselineOnMigrate", ")", "configuration", ".", "baselineOnMigrate", "properties", ".", "isCleanDisabled", "(", "cleanDisabled", ")", "configuration", ".", "cleanDisabled", "properties", ".", "isGroup", "(", "group", ")", "configuration", ".", "group", "properties", ".", "isMixed", "(", "mixed", ")", "configuration", ".", "mixed", "properties", ".", "isOutOfOrder", "(", "outOfOrder", ")", "configuration", ".", "outOfOrder", "properties", ".", "isSkipDefaultCallbacks", "(", "skipDefaultCallbacks", ")", "configuration", ".", "skipDefaultCallbacks", "properties", ".", "isSkipDefaultResolvers", "(", "skipDefaultResolvers", ")", "configuration", ".", "skipDefaultResolvers", "properties", ".", "isValidateMigrationNaming", "(", "validateMigrationNaming", ")", "configuration", ".", "validateMigrationNaming", "properties", ".", "isValidateOnMigrate", "(", "validateOnMigrate", ")", "configuration", ".", "validateOnMigrate", "map", ".", "from", "(", ")", "->", "(", "initSql", ")", "configuration", ".", "initSql", "properties", ".", "getScriptPlaceholderPrefix", "(", "prefix", ")", "configuration", ".", "scriptPlaceholderPrefix", "properties", ".", "getScriptPlaceholderSuffix", "(", "suffix", ")", "configuration", ".", "scriptPlaceholderSuffix", "properties", ".", "getPowershellExecutable", "(", "powershellExecutable", ")", "configuration", ".", "powershellExecutable", "properties", "::", "getLoggers", "(", "loggers", ")", "configuration", ".", "loggers", "properties", "::", "getCommunityDbSupportEnabled", "(", "communityDbSupportEnabled", ")", "configuration", ".", "communityDBSupportEnabled", "properties", ".", "getBatch", "(", "batch", ")", "configuration", ".", "batch", "properties", ".", "getDryRunOutput", "(", "dryRunOutput", ")", "configuration", ".", "dryRunOutput", "properties", ".", "getErrorOverrides", "(", "errorOverrides", ")", "configuration", ".", "errorOverrides", "properties", ".", "getStream", "(", "stream", ")", "configuration", ".", "stream", "(", ")", "Map", "::", "isEmpty", "(", "jdbcProperties", ")", "configuration", ".", "jdbcProperties", "properties", ".", "getKerberosConfigFile", "(", "configFile", ")", "configuration", ".", "kerberosConfigFile", "properties", ".", "getOutputQueryResults", "(", "outputQueryResults", ")", "configuration", ".", "outputQueryResults", "properties", ".", "getSkipExecutingMigrations", "(", "skipExecutingMigrations", ")", "configuration", ".", "skipExecutingMigrations", "properties", ".", "getIgnoreMigrationPatterns", "(", "ignoreMigrationPatterns", ")", "configuration", ".", "ignoreMigrationPatterns", "properties", ".", "getDetectEncoding", "(", "detectEncoding", ")", "configuration", ".", "detectEncoding", "(", ")", "properties", ".", "getLocations", "[", "0", "]", "properties", ".", "getCallbackLocations", "(", "callbackLocations", ")", "!", "(", ")", "(", ")", "(", "failOnMissingLocations", ")", "(", ")", "(", "encoding", ")", "(", ")", "(", "connectRetries", ")", "(", ")", "Duration", "::", "getSeconds", "(", "connectRetriesInterval", ")", "(", ")", "(", "lockRetryCount", ")", "(", ")", "(", "schema", ")", "properties", ".", "getSchemas", "(", "schemas", ")", "(", ")", "(", "createSchemas", ")", "(", ")", "(", "table", ")", "(", ")", "(", "tablespace", ")", "(", ")", "(", "baselineDescription", ")", "(", ")", "(", "baselineVersion", ")", "(", ")", "(", "installedBy", ")", "(", ")", "(", "placeholders", ")", "(", ")", "(", "placeholderPrefix", ")", "(", ")", "(", "placeholderSuffix", ")", "(", ")", "(", "placeHolderSeparator", ")", "(", ")", "(", "placeholderReplacement", ")", "(", ")", "(", "sqlMigrationPrefix", ")", "properties", ".", "getSqlMigrationSuffixes", "(", "sqlMigrationSuffixes", ")", "(", ")", "(", "sqlMigrationSeparator", ")", "(", ")", "(", "repeatableSqlMigrationPrefix", ")", "(", ")", "(", "target", ")", "(", ")", "(", "baselineOnMigrate", ")", "(", ")", "(", "cleanDisabled", ")", "(", ")", "(", "group", ")", "(", ")", "(", "mixed", ")", "(", ")", "(", "outOfOrder", ")", "(", ")", "(", "skipDefaultCallbacks", ")", "(", ")", "(", "skipDefaultResolvers", ")", "(", ")", "(", "validateMigrationNaming", ")", "(", ")", "(", "validateOnMigrate", ")", "(", ")", "CollectionUtils", "::", "isEmpty", "(", "initSqls", ")", "StringUtils", ".", "collectionToDelimitedString", "(", "initSql", ")", "(", ")", "(", "prefix", ")", "(", ")", "(", "suffix", ")", "(", ")", "(", "powershellExecutable", ")", "(", "loggers", ")", "(", "communityDbSupportEnabled", ")", "(", ")", "(", "batch", ")", "(", ")", "(", "dryRunOutput", ")", "(", ")", "(", "errorOverrides", ")", "(", ")", "(", "stream", ")", "properties", ".", "getJdbcProperties", "(", "jdbcProperties", ")", "(", ")", "(", "configFile", ")", "(", ")", "(", "outputQueryResults", ")", "(", ")", "(", "skipExecutingMigrations", ")", "(", ")", "(", ")", "(", ")", "(", "detectEncoding", ")", "configuration", ".", "getDataSource", "(", ")", "(", ")", "ObjectUtils", ".", "isEmpty", ".", "toArray", "properties", ".", "getConnectRetriesInterval", "(", ")", "(", ")", "properties", ".", "getInitSqls", "(", "initSqls", ",", ")", "(", ")", "ignoreMigrationPatterns", ".", "toArray", "(", ")", "(", "callbackLocations", ")", ".", "resolveLocations", "(", ")", "(", ")", "(", ")", "\"", "\\n", "\"", "(", ")", "new", "LocationResolver", "(", "callbackLocations", ")", "new", "String", "new", "String", "(", ")", "[", "0", "]", "[", "0", "]", "configuration", ".", "getDataSource", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 2025, "ast_depth": 16, "n_identifiers": 134, "vocab_size": 161, "n_whitespaces": 603, "n_words": 531, "nloc": 105, "token_counts": 1406}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java#334-342", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java", "language": "Java"}, "method": {"name": "configureExecuteInTransaction", "qualified_name": "org.springframework.boot.flyway.autoconfigure.FlywayAutoConfiguration#configureExecuteInTransaction", "start_line": 334, "end_line": 342, "signature": "configureExecuteInTransaction(FluentConfiguration configuration, FlywayProperties properties,\n\t\t\t\tPropertyMapper map)", "original_code": "private void configureExecuteInTransaction(FluentConfiguration configuration, FlywayProperties properties,\n\t\t\t\tPropertyMapper map) {\n\t\t\ttry {\n\t\t\t\tmap.from(properties.isExecuteInTransaction()).to(configuration::executeInTransaction);\n\t\t\t}\n\t\t\tcatch (NoSuchMethodError ex) {\n\t\t\t\t// Flyway < 9.14\n\t\t\t}\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "configureExecuteInTransaction", "private", "(", ",", ",", ")", "{", "}", "FluentConfiguration", "configuration", "FlywayProperties", "properties", "PropertyMapper", "map", "try", "{", "}", "catch", "(", ")", ";", "ex", "{", "// Flyway < 9.14", "}", ".", "to", "NoSuchMethodError", "map", ".", "from", "(", ")", "(", ")", "configuration", "::", "executeInTransaction", "properties", ".", "isExecuteInTransaction", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 66, "ast_depth": 12, "n_identifiers": 9, "vocab_size": 26, "n_whitespaces": 48, "n_words": 23, "nloc": 9, "token_counts": 44}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java#344-348", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java", "language": "Java"}, "method": {"name": "configureCallbacks", "qualified_name": "org.springframework.boot.flyway.autoconfigure.FlywayAutoConfiguration#configureCallbacks", "start_line": 344, "end_line": 348, "signature": "configureCallbacks(FluentConfiguration configuration, List<Callback> callbacks)", "original_code": "private void configureCallbacks(FluentConfiguration configuration, List<Callback> callbacks) {\n\t\t\tif (!callbacks.isEmpty()) {\n\t\t\t\tconfiguration.callbacks(callbacks.toArray(new Callback[0]));\n\t\t\t}\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "configureCallbacks", "private", "(", ",", ")", "{", "}", "FluentConfiguration", "configuration", "callbacks", "if", "List", "(", ")", "{", "}", "<", "Callback", ">", "!", ";", "callbacks", ".", "isEmpty", "configuration", ".", "callbacks", "(", ")", "(", ")", "callbacks", ".", "toArray", "(", ")", "new", "Callback", "[", "0", "]"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 64, "ast_depth": 13, "n_identifiers": 5, "vocab_size": 25, "n_whitespaces": 25, "n_words": 18, "nloc": 5, "token_counts": 42}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java#350-354", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java", "language": "Java"}, "method": {"name": "configureJavaMigrations", "qualified_name": "org.springframework.boot.flyway.autoconfigure.FlywayAutoConfiguration#configureJavaMigrations", "start_line": 350, "end_line": 354, "signature": "configureJavaMigrations(FluentConfiguration flyway, List<JavaMigration> migrations)", "original_code": "private void configureJavaMigrations(FluentConfiguration flyway, List<JavaMigration> migrations) {\n\t\t\tif (!migrations.isEmpty()) {\n\t\t\t\tflyway.javaMigrations(migrations.toArray(new JavaMigration[0]));\n\t\t\t}\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "configureJavaMigrations", "private", "(", ",", ")", "{", "}", "FluentConfiguration", "flyway", "migrations", "if", "List", "(", ")", "{", "}", "<", "JavaMigration", ">", "!", ";", "migrations", ".", "isEmpty", "flyway", ".", "javaMigrations", "(", ")", "(", ")", "migrations", ".", "toArray", "(", ")", "new", "JavaMigration", "[", "0", "]"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 64, "ast_depth": 13, "n_identifiers": 6, "vocab_size": 26, "n_whitespaces": 25, "n_words": 18, "nloc": 5, "token_counts": 42}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java#356-361", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java", "language": "Java"}, "method": {"name": "flywayInitializer", "qualified_name": "org.springframework.boot.flyway.autoconfigure.FlywayAutoConfiguration#flywayInitializer", "start_line": 356, "end_line": 361, "signature": "flywayInitializer(Flyway flyway,\n\t\t\t\tObjectProvider<FlywayMigrationStrategy> migrationStrategy)", "original_code": "@Bean\n\t\t@ConditionalOnMissingBean\n\t\tFlywayMigrationInitializer flywayInitializer(Flyway flyway,\n\t\t\t\tObjectProvider<FlywayMigrationStrategy> migrationStrategy) {\n\t\t\treturn new FlywayMigrationInitializer(flyway, migrationStrategy.getIfAvailable());\n\t\t}", "doc_comment": ""}, "code_tokens": ["FlywayMigrationInitializer", "flywayInitializer", "(", ",", ")", "{", "}", "@", "Bean", "@", "ConditionalOnMissingBean", "Flyway", "flyway", "migrationStrategy", "return", ";", "ObjectProvider", "new", "FlywayMigrationInitializer", "<", "FlywayMigrationStrategy", ">", "(", "flyway", ",", ")", "migrationStrategy", ".", "getIfAvailable", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 47, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 22, "n_whitespaces": 25, "n_words": 15, "nloc": 6, "token_counts": 31}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java#375-381", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java", "language": "Java"}, "method": {"name": "resolveLocations", "qualified_name": "org.springframework.boot.flyway.autoconfigure.FlywayAutoConfiguration#resolveLocations", "start_line": 375, "end_line": 381, "signature": "resolveLocations(List<String> locations)", "original_code": "List<String> resolveLocations(List<String> locations) {\n\t\t\tif (usesVendorLocation(locations)) {\n\t\t\t\tDatabaseDriver databaseDriver = getDatabaseDriver();\n\t\t\t\treturn replaceVendorLocations(locations, databaseDriver);\n\t\t\t}\n\t\t\treturn locations;\n\t\t}", "doc_comment": ""}, "code_tokens": ["resolveLocations", "List", "(", ")", "{", "}", "<", "String", ">", "locations", "if", "return", "locations", ";", "List", "(", ")", "{", "}", "<", "String", ">", "usesVendorLocation", "DatabaseDriver", ";", "return", ";", "(", "locations", ")", "databaseDriver", "=", "replaceVendorLocations", "getDatabaseDriver", "(", "locations", ",", "databaseDriver", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 63, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 20, "n_whitespaces": 36, "n_words": 18, "nloc": 7, "token_counts": 41}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java#383-389", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java", "language": "Java"}, "method": {"name": "replaceVendorLocations", "qualified_name": "org.springframework.boot.flyway.autoconfigure.FlywayAutoConfiguration#replaceVendorLocations", "start_line": 383, "end_line": 389, "signature": "replaceVendorLocations(List<String> locations, DatabaseDriver databaseDriver)", "original_code": "private List<String> replaceVendorLocations(List<String> locations, DatabaseDriver databaseDriver) {\n\t\t\tif (databaseDriver == DatabaseDriver.UNKNOWN) {\n\t\t\t\treturn locations;\n\t\t\t}\n\t\t\tString vendor = databaseDriver.getId();\n\t\t\treturn locations.stream().map((location) -> location.replace(VENDOR_PLACEHOLDER, vendor)).toList();\n\t\t}", "doc_comment": ""}, "code_tokens": ["replaceVendorLocations", "private", "List", "(", ",", ")", "{", "}", "<", "String", ">", "locations", "DatabaseDriver", "databaseDriver", "if", "String", ";", "return", ";", "List", "(", ")", "{", "}", "vendor", "=", ".", "toList", "<", "String", ">", "databaseDriver", "==", "return", "locations", ";", "databaseDriver", ".", "getId", ".", "map", "(", ")", "DatabaseDriver", ".", "UNKNOWN", "(", ")", "locations", ".", "stream", "(", ")", "(", ")", "->", "(", "location", ")", "location", ".", "replace", "(", "VENDOR_PLACEHOLDER", ",", "vendor", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 99, "ast_depth": 11, "n_identifiers": 13, "vocab_size": 30, "n_whitespaces": 42, "n_words": 29, "nloc": 7, "token_counts": 67}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java#391-400", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java", "language": "Java"}, "method": {"name": "getDatabaseDriver", "qualified_name": "org.springframework.boot.flyway.autoconfigure.FlywayAutoConfiguration#getDatabaseDriver", "start_line": 391, "end_line": 400, "signature": "getDatabaseDriver()", "original_code": "private DatabaseDriver getDatabaseDriver() {\n\t\t\ttry {\n\t\t\t\tString url = JdbcUtils.extractDatabaseMetaData(this.dataSource, DatabaseMetaData::getURL);\n\t\t\t\treturn DatabaseDriver.fromJdbcUrl(url);\n\t\t\t}\n\t\t\tcatch (MetaDataAccessException ex) {\n\t\t\t\tthrow new IllegalStateException(ex);\n\t\t\t}\n\n\t\t}", "doc_comment": ""}, "code_tokens": ["DatabaseDriver", "getDatabaseDriver", "private", "(", ")", "{", "}", "try", "{", "}", "catch", "(", ")", "String", ";", "return", ";", "ex", "{", "}", "url", "=", "DatabaseDriver", ".", "fromJdbcUrl", "MetaDataAccessException", "throw", ";", "JdbcUtils", ".", "extractDatabaseMetaData", "(", "url", ")", "new", "IllegalStateException", "(", ",", ")", "(", "ex", ")", "this", ".", "dataSource", "DatabaseMetaData", "::", "getURL"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 71, "ast_depth": 11, "n_identifiers": 10, "vocab_size": 29, "n_whitespaces": 49, "n_words": 23, "nloc": 9, "token_counts": 48}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java#402-409", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java", "language": "Java"}, "method": {"name": "usesVendorLocation", "qualified_name": "org.springframework.boot.flyway.autoconfigure.FlywayAutoConfiguration#usesVendorLocation", "start_line": 402, "end_line": 409, "signature": "usesVendorLocation(Collection<String> locations)", "original_code": "private boolean usesVendorLocation(Collection<String> locations) {\n\t\t\tfor (String location : locations) {\n\t\t\t\tif (location.contains(VENDOR_PLACEHOLDER)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}", "doc_comment": ""}, "code_tokens": ["boolean", "usesVendorLocation", "private", "(", ")", "{", "}", "locations", "for", "(", "String", "location", ":", "locations", ")", "return", "false", ";", "Collection", "{", "}", "<", "String", ">", "if", "(", ")", "{", "}", "location", ".", "contains", "return", "true", ";", "(", "VENDOR_PLACEHOLDER", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 55, "ast_depth": 10, "n_identifiers": 5, "vocab_size": 23, "n_whitespaces": 44, "n_words": 18, "nloc": 8, "token_counts": 38}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java#427-430", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java", "language": "Java"}, "method": {"name": "getConvertibleTypes", "qualified_name": "org.springframework.boot.flyway.autoconfigure.FlywayAutoConfiguration#getConvertibleTypes", "start_line": 427, "end_line": 430, "signature": "getConvertibleTypes()", "original_code": "@Override\n\t\tpublic Set<ConvertiblePair> getConvertibleTypes() {\n\t\t\treturn CONVERTIBLE_TYPES;\n\t\t}", "doc_comment": ""}, "code_tokens": ["getConvertibleTypes", "public", "Set", "(", ")", "{", "}", "@", "Override", "<", "ConvertiblePair", ">", "return", "CONVERTIBLE_TYPES", ";"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 24, "ast_depth": 5, "n_identifiers": 3, "vocab_size": 15, "n_whitespaces": 14, "n_words": 7, "nloc": 4, "token_counts": 15}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java#432-436", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java", "language": "Java"}, "method": {"name": "convert", "qualified_name": "org.springframework.boot.flyway.autoconfigure.FlywayAutoConfiguration#convert", "start_line": 432, "end_line": 436, "signature": "convert(@Nullable Object source, TypeDescriptor sourceType, TypeDescriptor targetType)", "original_code": "@Override\n\t\tpublic Object convert(@Nullable Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {\n\t\t\tString value = ObjectUtils.nullSafeToString(source);\n\t\t\treturn MigrationVersion.fromVersion(value);\n\t\t}", "doc_comment": ""}, "code_tokens": ["Object", "convert", "public", "(", ",", ",", ")", "{", "}", "@", "Override", "Object", "source", "TypeDescriptor", "sourceType", "TypeDescriptor", "targetType", "String", ";", "return", ";", "value", "=", "MigrationVersion", ".", "fromVersion", "@", "Nullable", "ObjectUtils", ".", "nullSafeToString", "(", "value", ")", "(", "source", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 55, "ast_depth": 8, "n_identifiers": 11, "vocab_size": 25, "n_whitespaces": 27, "n_words": 20, "nloc": 5, "token_counts": 37}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java#465-468", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java", "language": "Java"}, "method": {"name": "registerHints", "qualified_name": "org.springframework.boot.flyway.autoconfigure.FlywayAutoConfiguration#registerHints", "start_line": 465, "end_line": 468, "signature": "registerHints(RuntimeHints hints, @Nullable ClassLoader classLoader)", "original_code": "@Override\n\t\tpublic void registerHints(RuntimeHints hints, @Nullable ClassLoader classLoader) {\n\t\t\thints.resources().registerPattern(\"db/migration/*\");\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "registerHints", "public", "(", ",", ")", "{", "}", "@", "Override", "RuntimeHints", "hints", "ClassLoader", "classLoader", ";", ".", "registerPattern", "@", "Nullable", "hints", ".", "resources", "(", ")", "(", ")", "\"", "db/migration/*", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 45, "ast_depth": 8, "n_identifiers": 7, "vocab_size": 21, "n_whitespaces": 17, "n_words": 14, "nloc": 4, "token_counts": 29}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java#483-486", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java", "language": "Java"}, "method": {"name": "getUsername", "qualified_name": "org.springframework.boot.flyway.autoconfigure.FlywayAutoConfiguration#getUsername", "start_line": 483, "end_line": 486, "signature": "getUsername()", "original_code": "@Override\n\t\tpublic @Nullable String getUsername() {\n\t\t\treturn this.properties.getUser();\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getUsername", "public", "(", ")", "{", "}", "@", "Override", "@", "Nullable", "return", ";", ".", "getUser", "this", ".", "properties", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 31, "ast_depth": 7, "n_identifiers": 5, "vocab_size": 16, "n_whitespaces": 15, "n_words": 9, "nloc": 4, "token_counts": 20}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java#488-491", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java", "language": "Java"}, "method": {"name": "getPassword", "qualified_name": "org.springframework.boot.flyway.autoconfigure.FlywayAutoConfiguration#getPassword", "start_line": 488, "end_line": 491, "signature": "getPassword()", "original_code": "@Override\n\t\tpublic @Nullable String getPassword() {\n\t\t\treturn this.properties.getPassword();\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getPassword", "public", "(", ")", "{", "}", "@", "Override", "@", "Nullable", "return", ";", ".", "getPassword", "this", ".", "properties", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 31, "ast_depth": 7, "n_identifiers": 4, "vocab_size": 15, "n_whitespaces": 15, "n_words": 9, "nloc": 4, "token_counts": 20}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java#493-496", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java", "language": "Java"}, "method": {"name": "getJdbcUrl", "qualified_name": "org.springframework.boot.flyway.autoconfigure.FlywayAutoConfiguration#getJdbcUrl", "start_line": 493, "end_line": 496, "signature": "getJdbcUrl()", "original_code": "@Override\n\t\tpublic @Nullable String getJdbcUrl() {\n\t\t\treturn this.properties.getUrl();\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getJdbcUrl", "public", "(", ")", "{", "}", "@", "Override", "@", "Nullable", "return", ";", ".", "getUrl", "this", ".", "properties", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 31, "ast_depth": 7, "n_identifiers": 5, "vocab_size": 16, "n_whitespaces": 15, "n_words": 9, "nloc": 4, "token_counts": 20}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java#498-501", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java", "language": "Java"}, "method": {"name": "getDriverClassName", "qualified_name": "org.springframework.boot.flyway.autoconfigure.FlywayAutoConfiguration#getDriverClassName", "start_line": 498, "end_line": 501, "signature": "getDriverClassName()", "original_code": "@Override\n\t\tpublic @Nullable String getDriverClassName() {\n\t\t\treturn this.properties.getDriverClassName();\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getDriverClassName", "public", "(", ")", "{", "}", "@", "Override", "@", "Nullable", "return", ";", ".", "getDriverClassName", "this", ".", "properties", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 31, "ast_depth": 7, "n_identifiers": 4, "vocab_size": 15, "n_whitespaces": 15, "n_words": 9, "nloc": 4, "token_counts": 20}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java#514-527", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java", "language": "Java"}, "method": {"name": "customize", "qualified_name": "org.springframework.boot.flyway.autoconfigure.FlywayAutoConfiguration#customize", "start_line": 514, "end_line": 527, "signature": "customize(FluentConfiguration configuration)", "original_code": "@Override\n\t\tpublic void customize(FluentConfiguration configuration) {\n\t\t\tExtension<OracleConfigurationExtension> extension = new Extension<>(configuration,\n\t\t\t\t\tOracleConfigurationExtension.class, \"Oracle\");\n\t\t\tOracle properties = this.properties.getOracle();\n\t\t\tPropertyMapper map = PropertyMapper.get();\n\t\t\tmap.from(properties::getSqlplus).to(extension.via((ext, sqlplus) -> ext.setSqlplus(sqlplus)));\n\t\t\tmap.from(properties::getSqlplusWarn)\n\t\t\t\t.to(extension.via((ext, sqlplusWarn) -> ext.setSqlplusWarn(sqlplusWarn)));\n\t\t\tmap.from(properties::getWalletLocation)\n\t\t\t\t.to(extension.via((ext, walletLocation) -> ext.setWalletLocation(walletLocation)));\n\t\t\tmap.from(properties::getKerberosCacheFile)\n\t\t\t\t.to(extension.via((ext, kerberosCacheFile) -> ext.setKerberosCacheFile(kerberosCacheFile)));\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "customize", "public", "(", ")", "{", "}", "@", "Override", "FluentConfiguration", "configuration", ";", "Oracle", ";", "PropertyMapper", ";", ";", ";", ";", ";", "Extension", "extension", "=", "properties", "=", "map", "=", ".", "to", ".", "to", ".", "to", ".", "to", "<", "OracleConfigurationExtension", ">", "new", ".", "getOracle", "PropertyMapper", ".", "get", "map", ".", "from", "(", ")", "map", ".", "from", "(", ")", "map", ".", "from", "(", ")", "map", ".", "from", "(", ")", "Extension", "(", "configuration", ",", ",", ")", "this", ".", "properties", "(", ")", "(", ")", "(", ")", "extension", ".", "via", "(", ")", "extension", ".", "via", "(", ")", "extension", ".", "via", "(", ")", "extension", ".", "via", "<", ">", "OracleConfigurationExtension", ".", "class", "\"", "Oracle", "\"", "properties", "::", "getSqlplus", "(", ")", "properties", "::", "getSqlplusWarn", "(", ")", "properties", "::", "getWalletLocation", "(", ")", "properties", "::", "getKerberosCacheFile", "(", ")", "->", "->", "->", "->", "(", "ext", ",", "sqlplus", ")", "ext", ".", "setSqlplus", "(", "ext", ",", "sqlplusWarn", ")", "ext", ".", "setSqlplusWarn", "(", "ext", ",", "walletLocation", ")", "ext", ".", "setWalletLocation", "(", "ext", ",", "kerberosCacheFile", ")", "ext", ".", "setKerberosCacheFile", "(", "sqlplus", ")", "(", "sqlplusWarn", ")", "(", "walletLocation", ")", "(", "kerberosCacheFile", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 247, "ast_depth": 12, "n_identifiers": 25, "vocab_size": 48, "n_whitespaces": 82, "n_words": 72, "nloc": 14, "token_counts": 173}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java#540-548", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java", "language": "Java"}, "method": {"name": "customize", "qualified_name": "org.springframework.boot.flyway.autoconfigure.FlywayAutoConfiguration#customize", "start_line": 540, "end_line": 548, "signature": "customize(FluentConfiguration configuration)", "original_code": "@Override\n\t\tpublic void customize(FluentConfiguration configuration) {\n\t\t\tExtension<PostgreSQLConfigurationExtension> extension = new Extension<>(configuration,\n\t\t\t\t\tPostgreSQLConfigurationExtension.class, \"PostgreSQL\");\n\t\t\tPostgresql properties = this.properties.getPostgresql();\n\t\t\tPropertyMapper map = PropertyMapper.get();\n\t\t\tmap.from(properties::getTransactionalLock)\n\t\t\t\t.to(extension.via((ext, transactionalLock) -> ext.setTransactionalLock(transactionalLock)));\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "customize", "public", "(", ")", "{", "}", "@", "Override", "FluentConfiguration", "configuration", ";", "Postgresql", ";", "PropertyMapper", ";", ";", "Extension", "extension", "=", "properties", "=", "map", "=", ".", "to", "<", "PostgreSQLConfigurationExtension", ">", "new", ".", "getPostgresql", "PropertyMapper", ".", "get", "map", ".", "from", "(", ")", "Extension", "(", "configuration", ",", ",", ")", "this", ".", "properties", "(", ")", "(", ")", "(", ")", "extension", ".", "via", "<", ">", "PostgreSQLConfigurationExtension", ".", "class", "\"", "PostgreSQL", "\"", "properties", "::", "getTransactionalLock", "(", ")", "->", "(", "ext", ",", "transactionalLock", ")", "ext", ".", "setTransactionalLock", "(", "transactionalLock", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 121, "ast_depth": 12, "n_identifiers": 16, "vocab_size": 40, "n_whitespaces": 51, "n_words": 36, "nloc": 9, "token_counts": 83}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java#561-568", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java", "language": "Java"}, "method": {"name": "customize", "qualified_name": "org.springframework.boot.flyway.autoconfigure.FlywayAutoConfiguration#customize", "start_line": 561, "end_line": 568, "signature": "customize(FluentConfiguration configuration)", "original_code": "@Override\n\t\tpublic void customize(FluentConfiguration configuration) {\n\t\t\tExtension<SQLServerConfigurationExtension> extension = new Extension<>(configuration,\n\t\t\t\t\tSQLServerConfigurationExtension.class, \"SQL Server\");\n\t\t\tSqlserver properties = this.properties.getSqlserver();\n\t\t\tPropertyMapper map = PropertyMapper.get();\n\t\t\tmap.from(properties::getKerberosLoginFile).to(extension.via(this::setKerberosLoginFile));\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "customize", "public", "(", ")", "{", "}", "@", "Override", "FluentConfiguration", "configuration", ";", "Sqlserver", ";", "PropertyMapper", ";", ";", "Extension", "extension", "=", "properties", "=", "map", "=", ".", "to", "<", "SQLServerConfigurationExtension", ">", "new", ".", "getSqlserver", "PropertyMapper", ".", "get", "map", ".", "from", "(", ")", "Extension", "(", "configuration", ",", ",", ")", "this", ".", "properties", "(", ")", "(", ")", "(", ")", "extension", ".", "via", "<", ">", "SQLServerConfigurationExtension", ".", "class", "\"", "SQL Server", "\"", "properties", "::", "getKerberosLoginFile", "(", ")", "this", "::", "setKerberosLoginFile"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 109, "ast_depth": 10, "n_identifiers": 14, "vocab_size": 37, "n_whitespaces": 44, "n_words": 34, "nloc": 8, "token_counts": 74}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java#570-572", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java", "language": "Java"}, "method": {"name": "setKerberosLoginFile", "qualified_name": "org.springframework.boot.flyway.autoconfigure.FlywayAutoConfiguration#setKerberosLoginFile", "start_line": 570, "end_line": 572, "signature": "setKerberosLoginFile(SQLServerConfigurationExtension configuration, String file)", "original_code": "private void setKerberosLoginFile(SQLServerConfigurationExtension configuration, String file) {\n\t\t\tconfiguration.getKerberos().getLogin().setFile(file);\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "setKerberosLoginFile", "private", "(", ",", ")", "{", "}", "SQLServerConfigurationExtension", "configuration", "String", "file", ";", ".", "setFile", ".", "getLogin", "(", "file", ")", "configuration", ".", "getKerberos", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 41, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 17, "n_whitespaces": 13, "n_words": 12, "nloc": 3, "token_counts": 27}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java#593-595", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/main/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfiguration.java", "language": "Java"}, "method": {"name": "via", "qualified_name": "org.springframework.boot.flyway.autoconfigure.FlywayAutoConfiguration#via", "start_line": 593, "end_line": 595, "signature": "via(BiConsumer<E, T> action)", "original_code": "<T> Consumer<T> via(BiConsumer<E, T> action) {\n\t\t\treturn (value) -> action.accept(this.extension.get(), value);\n\t\t}", "doc_comment": ""}, "code_tokens": ["via", "<", ">", "Consumer", "(", ")", "{", "}", "T", "<", "T", ">", "action", "return", ";", "BiConsumer", "->", "<", "E", ",", "T", ">", "(", "value", ")", "action", ".", "accept", "(", ",", "value", ")", ".", "get", "this", ".", "extension", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 58, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 22, "n_whitespaces": 16, "n_words": 16, "nloc": 3, "token_counts": 39}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#129-132", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "backsOffWithNoDataSourceBeanAndNoFlywayUrl", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#backsOffWithNoDataSourceBeanAndNoFlywayUrl", "start_line": 129, "end_line": 132, "signature": "backsOffWithNoDataSourceBeanAndNoFlywayUrl()", "original_code": "@Test\n\tvoid backsOffWithNoDataSourceBeanAndNoFlywayUrl() {\n\t\tthis.contextRunner.run((context) -> assertThat(context).doesNotHaveBean(Flyway.class));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "backsOffWithNoDataSourceBeanAndNoFlywayUrl", "(", ")", "{", "}", "@", "Test", ";", ".", "run", "this", ".", "contextRunner", "(", ")", "->", "(", "context", ")", ".", "doesNotHaveBean", "assertThat", "(", ")", "(", "context", ")", "Flyway", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 48, "ast_depth": 11, "n_identifiers": 7, "vocab_size": 19, "n_whitespaces": 11, "n_words": 12, "nloc": 4, "token_counts": 31}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#134-141", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "createsDataSourceWithNoDataSourceBeanAndFlywayUrl", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#createsDataSourceWithNoDataSourceBeanAndFlywayUrl", "start_line": 134, "end_line": 141, "signature": "createsDataSourceWithNoDataSourceBeanAndFlywayUrl()", "original_code": "@Test\n\tvoid createsDataSourceWithNoDataSourceBeanAndFlywayUrl() {\n\t\tthis.contextRunner.withPropertyValues(\"spring.flyway.url:jdbc:hsqldb:mem:\" + UUID.randomUUID())\n\t\t\t.run((context) -> {\n\t\t\t\tassertThat(context).hasSingleBean(Flyway.class);\n\t\t\t\tassertThat(context.getBean(Flyway.class).getConfiguration().getDataSource()).isNotNull();\n\t\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "createsDataSourceWithNoDataSourceBeanAndFlywayUrl", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withPropertyValues", "(", ")", "this", ".", "contextRunner", "(", ")", "->", "+", "(", "context", ")", "{", "}", "\"", "spring.flyway.url:jdbc:hsqldb:mem:", "\"", "UUID", ".", "randomUUID", ";", ";", "(", ")", ".", "hasSingleBean", ".", "isNotNull", "assertThat", "(", ")", "assertThat", "(", ")", "(", "context", ")", "Flyway", ".", "class", "(", ")", ".", "getDataSource", ".", "getConfiguration", "(", ")", "context", ".", "getBean", "(", ")", "(", ")", "Flyway", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 108, "ast_depth": 18, "n_identifiers": 14, "vocab_size": 29, "n_whitespaces": 31, "n_words": 29, "nloc": 8, "token_counts": 71}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#143-148", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "backsOffWithFlywayUrlAndNoSpringJdbc", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#backsOffWithFlywayUrlAndNoSpringJdbc", "start_line": 143, "end_line": 148, "signature": "backsOffWithFlywayUrlAndNoSpringJdbc()", "original_code": "@Test\n\tvoid backsOffWithFlywayUrlAndNoSpringJdbc() {\n\t\tthis.contextRunner.withPropertyValues(\"spring.flyway.url:jdbc:hsqldb:mem:\" + UUID.randomUUID())\n\t\t\t.withClassLoader(new FilteredClassLoader(\"org.springframework.jdbc\"))\n\t\t\t.run((context) -> assertThat(context).doesNotHaveBean(Flyway.class));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "backsOffWithFlywayUrlAndNoSpringJdbc", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withClassLoader", "(", ")", ".", "withPropertyValues", "(", ")", "->", "this", ".", "contextRunner", "(", ")", "new", "FilteredClassLoader", "(", "context", ")", ".", "doesNotHaveBean", "+", "(", ")", "assertThat", "(", ")", "\"", "spring.flyway.url:jdbc:hsqldb:mem:", "\"", "UUID", ".", "randomUUID", "\"", "org.springframework.jdbc", "\"", "(", "context", ")", "Flyway", ".", "class", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 83, "ast_depth": 12, "n_identifiers": 11, "vocab_size": 29, "n_whitespaces": 22, "n_words": 27, "nloc": 6, "token_counts": 55}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#150-158", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "createDataSourceWithUrl", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#createDataSourceWithUrl", "start_line": 150, "end_line": 158, "signature": "createDataSourceWithUrl()", "original_code": "@Test\n\tvoid createDataSourceWithUrl() {\n\t\tthis.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class)\n\t\t\t.withPropertyValues(\"spring.flyway.url:jdbc:hsqldb:mem:flywaytest\")\n\t\t\t.run((context) -> {\n\t\t\t\tassertThat(context).hasSingleBean(Flyway.class);\n\t\t\t\tassertThat(context.getBean(Flyway.class).getConfiguration().getDataSource()).isNotNull();\n\t\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "createDataSourceWithUrl", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withPropertyValues", "(", ")", ".", "withUserConfiguration", "(", ")", "->", "this", ".", "contextRunner", "(", ")", "\"", "spring.flyway.url:jdbc:hsqldb:mem:flywaytest", "\"", "(", "context", ")", "{", "}", "EmbeddedDataSourceConfiguration", ".", "class", ";", ";", ".", "hasSingleBean", ".", "isNotNull", "assertThat", "(", ")", "assertThat", "(", ")", "(", "context", ")", "Flyway", ".", "class", "(", ")", ".", "getDataSource", ".", "getConfiguration", "(", ")", "context", ".", "getBean", "(", ")", "(", ")", "Flyway", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 109, "ast_depth": 18, "n_identifiers": 13, "vocab_size": 28, "n_whitespaces": 33, "n_words": 31, "nloc": 9, "token_counts": 72}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#160-179", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "flywayPropertiesAreUsedOverJdbcConnectionDetails", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#flywayPropertiesAreUsedOverJdbcConnectionDetails", "start_line": 160, "end_line": 179, "signature": "flywayPropertiesAreUsedOverJdbcConnectionDetails()", "original_code": "@Test\n\tvoid flywayPropertiesAreUsedOverJdbcConnectionDetails() {\n\t\tthis.contextRunner\n\t\t\t.withUserConfiguration(EmbeddedDataSourceConfiguration.class, JdbcConnectionDetailsConfiguration.class,\n\t\t\t\t\tMockFlywayMigrationStrategy.class)\n\t\t\t.withPropertyValues(\"spring.flyway.url=jdbc:hsqldb:mem:flywaytest\", \"spring.flyway.user=some-user\",\n\t\t\t\t\t\"spring.flyway.password=some-password\",\n\t\t\t\t\t\"spring.flyway.driver-class-name=org.hsqldb.jdbc.JDBCDriver\")\n\t\t\t.run((context) -> {\n\t\t\t\tassertThat(context).hasSingleBean(Flyway.class);\n\t\t\t\tFlyway flyway = context.getBean(Flyway.class);\n\t\t\t\tDataSource dataSource = flyway.getConfiguration().getDataSource();\n\t\t\t\tassertThat(dataSource).isInstanceOf(SimpleDriverDataSource.class);\n\t\t\t\tSimpleDriverDataSource simpleDriverDataSource = (SimpleDriverDataSource) dataSource;\n\t\t\t\tassertThat(simpleDriverDataSource.getUrl()).isEqualTo(\"jdbc:hsqldb:mem:flywaytest\");\n\t\t\t\tassertThat(simpleDriverDataSource.getUsername()).isEqualTo(\"some-user\");\n\t\t\t\tassertThat(simpleDriverDataSource.getPassword()).isEqualTo(\"some-password\");\n\t\t\t\tassertThat(simpleDriverDataSource.getDriver()).isInstanceOf(org.hsqldb.jdbc.JDBCDriver.class);\n\t\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "flywayPropertiesAreUsedOverJdbcConnectionDetails", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withPropertyValues", "(", ")", ".", "withUserConfiguration", "(", ",", ",", ",", ")", "->", "this", ".", "contextRunner", "(", ",", ",", ")", "\"", "spring.flyway.url=jdbc:hsqldb:mem:flywaytest", "\"", "\"", "spring.flyway.user=some-user", "\"", "\"", "spring.flyway.password=some-password", "\"", "\"", "spring.flyway.driver-class-name=org.hsqldb.jdbc.JDBCDriver", "\"", "(", "context", ")", "{", "}", "EmbeddedDataSourceConfiguration", ".", "class", "JdbcConnectionDetailsConfiguration", ".", "class", "MockFlywayMigrationStrategy", ".", "class", ";", "Flyway", ";", "DataSource", ";", ";", "SimpleDriverDataSource", ";", ";", ";", ";", ";", ".", "hasSingleBean", "flyway", "=", "dataSource", "=", ".", "isInstanceOf", "simpleDriverDataSource", "=", ".", "isEqualTo", ".", "isEqualTo", ".", "isEqualTo", ".", "isInstanceOf", "assertThat", "(", ")", "context", ".", "getBean", ".", "getDataSource", "assertThat", "(", ")", "(", "SimpleDriverDataSource", ")", "dataSource", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "(", "context", ")", "Flyway", ".", "class", "(", ")", "flyway", ".", "getConfiguration", "(", ")", "(", "dataSource", ")", "SimpleDriverDataSource", ".", "class", "(", ")", "\"", "jdbc:hsqldb:mem:flywaytest", "\"", "(", ")", "\"", "some-user", "\"", "(", ")", "\"", "some-password", "\"", "(", ")", ".", "class", "Flyway", ".", "class", "(", ")", "simpleDriverDataSource", ".", "getUrl", "simpleDriverDataSource", ".", "getUsername", "simpleDriverDataSource", ".", "getPassword", "simpleDriverDataSource", ".", "getDriver", ".", "JDBCDriver", "(", ")", "(", ")", "(", ")", "(", ")", ".", "jdbc", "org", ".", "hsqldb"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 268, "ast_depth": 16, "n_identifiers": 21, "vocab_size": 52, "n_whitespaces": 102, "n_words": 95, "nloc": 20, "token_counts": 183}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#181-201", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "flywayConnectionDetailsAreUsedOverFlywayProperties", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#flywayConnectionDetailsAreUsedOverFlywayProperties", "start_line": 181, "end_line": 201, "signature": "flywayConnectionDetailsAreUsedOverFlywayProperties()", "original_code": "@Test\n\tvoid flywayConnectionDetailsAreUsedOverFlywayProperties() {\n\t\tthis.contextRunner\n\t\t\t.withUserConfiguration(EmbeddedDataSourceConfiguration.class, FlywayConnectionDetailsConfiguration.class,\n\t\t\t\t\tMockFlywayMigrationStrategy.class)\n\t\t\t.withPropertyValues(\"spring.flyway.url=jdbc:hsqldb:mem:flywaytest\", \"spring.flyway.user=some-user\",\n\t\t\t\t\t\"spring.flyway.password=some-password\",\n\t\t\t\t\t\"spring.flyway.driver-class-name=org.hsqldb.jdbc.JDBCDriver\")\n\t\t\t.run((context) -> {\n\t\t\t\tassertThat(context).hasSingleBean(Flyway.class);\n\t\t\t\tFlyway flyway = context.getBean(Flyway.class);\n\t\t\t\tDataSource dataSource = flyway.getConfiguration().getDataSource();\n\t\t\t\tassertThat(dataSource).isInstanceOf(SimpleDriverDataSource.class);\n\t\t\t\tSimpleDriverDataSource simpleDriverDataSource = (SimpleDriverDataSource) dataSource;\n\t\t\t\tassertThat(simpleDriverDataSource.getUrl())\n\t\t\t\t\t.isEqualTo(\"jdbc:postgresql://database.example.com:12345/database-1\");\n\t\t\t\tassertThat(simpleDriverDataSource.getUsername()).isEqualTo(\"user-1\");\n\t\t\t\tassertThat(simpleDriverDataSource.getPassword()).isEqualTo(\"secret-1\");\n\t\t\t\tassertThat(simpleDriverDataSource.getDriver()).isInstanceOf(Driver.class);\n\t\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "flywayConnectionDetailsAreUsedOverFlywayProperties", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withPropertyValues", "(", ")", ".", "withUserConfiguration", "(", ",", ",", ",", ")", "->", "this", ".", "contextRunner", "(", ",", ",", ")", "\"", "spring.flyway.url=jdbc:hsqldb:mem:flywaytest", "\"", "\"", "spring.flyway.user=some-user", "\"", "\"", "spring.flyway.password=some-password", "\"", "\"", "spring.flyway.driver-class-name=org.hsqldb.jdbc.JDBCDriver", "\"", "(", "context", ")", "{", "}", "EmbeddedDataSourceConfiguration", ".", "class", "FlywayConnectionDetailsConfiguration", ".", "class", "MockFlywayMigrationStrategy", ".", "class", ";", "Flyway", ";", "DataSource", ";", ";", "SimpleDriverDataSource", ";", ";", ";", ";", ";", ".", "hasSingleBean", "flyway", "=", "dataSource", "=", ".", "isInstanceOf", "simpleDriverDataSource", "=", ".", "isEqualTo", ".", "isEqualTo", ".", "isEqualTo", ".", "isInstanceOf", "assertThat", "(", ")", "context", ".", "getBean", ".", "getDataSource", "assertThat", "(", ")", "(", "SimpleDriverDataSource", ")", "dataSource", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "(", "context", ")", "Flyway", ".", "class", "(", ")", "flyway", ".", "getConfiguration", "(", ")", "(", "dataSource", ")", "SimpleDriverDataSource", ".", "class", "(", ")", "\"", "jdbc:postgresql://database.example.com:12345/database-1", "\"", "(", ")", "\"", "user-1", "\"", "(", ")", "\"", "secret-1", "\"", "(", ")", "Driver", ".", "class", "Flyway", ".", "class", "(", ")", "simpleDriverDataSource", ".", "getUrl", "simpleDriverDataSource", ".", "getUsername", "simpleDriverDataSource", ".", "getPassword", "simpleDriverDataSource", ".", "getDriver", "(", ")", "(", ")", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 259, "ast_depth": 15, "n_identifiers": 21, "vocab_size": 49, "n_whitespaces": 108, "n_words": 96, "nloc": 21, "token_counts": 177}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#203-215", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "shouldUseMainDataSourceWhenThereIsNoFlywaySpecificConfiguration", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#shouldUseMainDataSourceWhenThereIsNoFlywaySpecificConfiguration", "start_line": 203, "end_line": 215, "signature": "shouldUseMainDataSourceWhenThereIsNoFlywaySpecificConfiguration()", "original_code": "@Test\n\tvoid shouldUseMainDataSourceWhenThereIsNoFlywaySpecificConfiguration() {\n\t\tthis.contextRunner\n\t\t\t.withUserConfiguration(EmbeddedDataSourceConfiguration.class, JdbcConnectionDetailsConfiguration.class,\n\t\t\t\t\tMockFlywayMigrationStrategy.class)\n\t\t\t.withPropertyValues(\"spring.datasource.url=jdbc:hsqldb:mem:flywaytest\", \"spring.datasource.user=some-user\",\n\t\t\t\t\t\"spring.datasource.password=some-password\",\n\t\t\t\t\t\"spring.datasource.driver-class-name=org.hsqldb.jdbc.JDBCDriver\")\n\t\t\t.run((context) -> {\n\t\t\t\tFlyway flyway = context.getBean(Flyway.class);\n\t\t\t\tassertThat(flyway.getConfiguration().getDataSource()).isSameAs(context.getBean(DataSource.class));\n\t\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "shouldUseMainDataSourceWhenThereIsNoFlywaySpecificConfiguration", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withPropertyValues", "(", ")", ".", "withUserConfiguration", "(", ",", ",", ",", ")", "->", "this", ".", "contextRunner", "(", ",", ",", ")", "\"", "spring.datasource.url=jdbc:hsqldb:mem:flywaytest", "\"", "\"", "spring.datasource.user=some-user", "\"", "\"", "spring.datasource.password=some-password", "\"", "\"", "spring.datasource.driver-class-name=org.hsqldb.jdbc.JDBCDriver", "\"", "(", "context", ")", "{", "}", "EmbeddedDataSourceConfiguration", ".", "class", "JdbcConnectionDetailsConfiguration", ".", "class", "MockFlywayMigrationStrategy", ".", "class", "Flyway", ";", ";", "flyway", "=", ".", "isSameAs", "context", ".", "getBean", "assertThat", "(", ")", "(", ")", "(", ")", "context", ".", "getBean", "Flyway", ".", "class", ".", "getDataSource", "(", ")", "flyway", ".", "getConfiguration", "(", ")", "DataSource", ".", "class", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 134, "ast_depth": 16, "n_identifiers": 13, "vocab_size": 36, "n_whitespaces": 60, "n_words": 56, "nloc": 13, "token_counts": 93}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#217-225", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "createDataSourceWithUser", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#createDataSourceWithUser", "start_line": 217, "end_line": 225, "signature": "createDataSourceWithUser()", "original_code": "@Test\n\tvoid createDataSourceWithUser() {\n\t\tthis.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class)\n\t\t\t.withPropertyValues(\"spring.datasource.url:jdbc:hsqldb:mem:\" + UUID.randomUUID(), \"spring.flyway.user:sa\")\n\t\t\t.run((context) -> {\n\t\t\t\tassertThat(context).hasSingleBean(Flyway.class);\n\t\t\t\tassertThat(context.getBean(Flyway.class).getConfiguration().getDataSource()).isNotNull();\n\t\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "createDataSourceWithUser", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withPropertyValues", "(", ")", ".", "withUserConfiguration", "(", ",", ")", "->", "this", ".", "contextRunner", "(", ")", "+", "\"", "spring.flyway.user:sa", "\"", "(", "context", ")", "{", "}", "EmbeddedDataSourceConfiguration", ".", "class", "\"", "spring.datasource.url:jdbc:hsqldb:mem:", "\"", "UUID", ".", "randomUUID", ";", ";", "(", ")", ".", "hasSingleBean", ".", "isNotNull", "assertThat", "(", ")", "assertThat", "(", ")", "(", "context", ")", "Flyway", ".", "class", "(", ")", ".", "getDataSource", ".", "getConfiguration", "(", ")", "context", ".", "getBean", "(", ")", "(", ")", "Flyway", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 123, "ast_depth": 18, "n_identifiers": 15, "vocab_size": 33, "n_whitespaces": 36, "n_words": 36, "nloc": 9, "token_counts": 82}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#227-238", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "createDataSourceDoesNotFallbackToEmbeddedProperties", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#createDataSourceDoesNotFallbackToEmbeddedProperties", "start_line": 227, "end_line": 238, "signature": "createDataSourceDoesNotFallbackToEmbeddedProperties()", "original_code": "@Test\n\tvoid createDataSourceDoesNotFallbackToEmbeddedProperties() {\n\t\tthis.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class)\n\t\t\t.withPropertyValues(\"spring.flyway.url:jdbc:hsqldb:mem:flywaytest\")\n\t\t\t.run((context) -> {\n\t\t\t\tassertThat(context).hasSingleBean(Flyway.class);\n\t\t\t\tDataSource dataSource = context.getBean(Flyway.class).getConfiguration().getDataSource();\n\t\t\t\tassertThat(dataSource).isNotNull();\n\t\t\t\tassertThat(dataSource).hasFieldOrPropertyWithValue(\"username\", null);\n\t\t\t\tassertThat(dataSource).hasFieldOrPropertyWithValue(\"password\", null);\n\t\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "createDataSourceDoesNotFallbackToEmbeddedProperties", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withPropertyValues", "(", ")", ".", "withUserConfiguration", "(", ")", "->", "this", ".", "contextRunner", "(", ")", "\"", "spring.flyway.url:jdbc:hsqldb:mem:flywaytest", "\"", "(", "context", ")", "{", "}", "EmbeddedDataSourceConfiguration", ".", "class", ";", "DataSource", ";", ";", ";", ";", ".", "hasSingleBean", "dataSource", "=", ".", "isNotNull", ".", "hasFieldOrPropertyWithValue", ".", "hasFieldOrPropertyWithValue", "assertThat", "(", ")", ".", "getDataSource", "assertThat", "(", ")", "assertThat", "(", ",", "null", ")", "assertThat", "(", ",", "null", ")", "(", "context", ")", "Flyway", ".", "class", ".", "getConfiguration", "(", ")", "(", "dataSource", ")", "(", "dataSource", ")", "\"", "username", "\"", "(", "dataSource", ")", "\"", "password", "\"", "context", ".", "getBean", "(", ")", "(", ")", "Flyway", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 156, "ast_depth": 16, "n_identifiers": 15, "vocab_size": 36, "n_whitespaces": 53, "n_words": 44, "nloc": 12, "token_counts": 105}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#240-251", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "createDataSourceWithUserAndFallbackToEmbeddedProperties", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#createDataSourceWithUserAndFallbackToEmbeddedProperties", "start_line": 240, "end_line": 251, "signature": "createDataSourceWithUserAndFallbackToEmbeddedProperties()", "original_code": "@Test\n\tvoid createDataSourceWithUserAndFallbackToEmbeddedProperties() {\n\t\tthis.contextRunner.withUserConfiguration(PropertiesBackedH2DataSourceConfiguration.class)\n\t\t\t.withPropertyValues(\"spring.flyway.user:test\", \"spring.flyway.password:secret\")\n\t\t\t.run((context) -> {\n\t\t\t\tassertThat(context).hasSingleBean(Flyway.class);\n\t\t\t\tDataSource dataSource = context.getBean(Flyway.class).getConfiguration().getDataSource();\n\t\t\t\tassertThat(dataSource).isNotNull();\n\t\t\t\tassertThat(dataSource).extracting(\"url\").asString().startsWith(\"jdbc:h2:mem:\");\n\t\t\t\tassertThat(dataSource).extracting(\"username\").asString().isEqualTo(\"test\");\n\t\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "createDataSourceWithUserAndFallbackToEmbeddedProperties", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withPropertyValues", "(", ")", ".", "withUserConfiguration", "(", ",", ")", "->", "this", ".", "contextRunner", "(", ")", "\"", "spring.flyway.user:test", "\"", "\"", "spring.flyway.password:secret", "\"", "(", "context", ")", "{", "}", "PropertiesBackedH2DataSourceConfiguration", ".", "class", ";", "DataSource", ";", ";", ";", ";", ".", "hasSingleBean", "dataSource", "=", ".", "isNotNull", ".", "startsWith", ".", "isEqualTo", "assertThat", "(", ")", ".", "getDataSource", "assertThat", "(", ")", ".", "asString", "(", ")", ".", "asString", "(", ")", "(", "context", ")", "Flyway", ".", "class", ".", "getConfiguration", "(", ")", "(", "dataSource", ")", ".", "extracting", "(", ")", "\"", "jdbc:h2:mem:", "\"", ".", "extracting", "(", ")", "\"", "test", "\"", "context", ".", "getBean", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "(", ")", "(", "dataSource", ")", "\"", "url", "\"", "(", "dataSource", ")", "\"", "username", "\"", "Flyway", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 189, "ast_depth": 16, "n_identifiers": 18, "vocab_size": 41, "n_whitespaces": 52, "n_words": 51, "nloc": 12, "token_counts": 127}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#253-267", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "createDataSourceWithUserAndCustomEmbeddedProperties", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#createDataSourceWithUserAndCustomEmbeddedProperties", "start_line": 253, "end_line": 267, "signature": "createDataSourceWithUserAndCustomEmbeddedProperties()", "original_code": "@Test\n\tvoid createDataSourceWithUserAndCustomEmbeddedProperties() {\n\t\tthis.contextRunner.withUserConfiguration(CustomBackedH2DataSourceConfiguration.class)\n\t\t\t.withPropertyValues(\"spring.flyway.user:test\", \"spring.flyway.password:secret\")\n\t\t\t.run((context) -> {\n\t\t\t\tassertThat(context).hasSingleBean(Flyway.class);\n\t\t\t\tString expectedName = context.getBean(CustomBackedH2DataSourceConfiguration.class).name;\n\t\t\t\tString propertiesName = context.getBean(DataSourceProperties.class).determineDatabaseName();\n\t\t\t\tassertThat(expectedName).isNotEqualTo(propertiesName);\n\t\t\t\tDataSource dataSource = context.getBean(Flyway.class).getConfiguration().getDataSource();\n\t\t\t\tassertThat(dataSource).isNotNull();\n\t\t\t\tassertThat(dataSource).extracting(\"url\").asString().startsWith(\"jdbc:h2:mem:\").contains(expectedName);\n\t\t\t\tassertThat(dataSource).extracting(\"username\").asString().isEqualTo(\"test\");\n\t\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "createDataSourceWithUserAndCustomEmbeddedProperties", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withPropertyValues", "(", ")", ".", "withUserConfiguration", "(", ",", ")", "->", "this", ".", "contextRunner", "(", ")", "\"", "spring.flyway.user:test", "\"", "\"", "spring.flyway.password:secret", "\"", "(", "context", ")", "{", "}", "CustomBackedH2DataSourceConfiguration", ".", "class", ";", "String", ";", "String", ";", ";", "DataSource", ";", ";", ";", ";", ".", "hasSingleBean", "expectedName", "=", "propertiesName", "=", ".", "isNotEqualTo", "dataSource", "=", ".", "isNotNull", ".", "contains", ".", "isEqualTo", "assertThat", "(", ")", ".", "name", ".", "determineDatabaseName", "assertThat", "(", "propertiesName", ")", ".", "getDataSource", "assertThat", "(", ")", ".", "startsWith", "(", "expectedName", ")", ".", "asString", "(", ")", "(", "context", ")", "Flyway", ".", "class", "context", ".", "getBean", "context", ".", "getBean", "(", ")", "(", "expectedName", ")", ".", "getConfiguration", "(", ")", "(", "dataSource", ")", ".", "asString", "(", ")", ".", "extracting", "(", ")", "\"", "test", "\"", "(", ")", "(", ")", "context", ".", "getBean", "(", ")", ".", "extracting", "(", ")", "\"", "jdbc:h2:mem:", "\"", "assertThat", "(", ")", "CustomBackedH2DataSourceConfiguration", ".", "class", "DataSourceProperties", ".", "class", "(", ")", "assertThat", "(", ")", "(", "dataSource", ")", "\"", "username", "\"", "Flyway", ".", "class", "(", "dataSource", ")", "\"", "url", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 254, "ast_depth": 16, "n_identifiers": 24, "vocab_size": 49, "n_whitespaces": 73, "n_words": 71, "nloc": 15, "token_counts": 172}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#269-278", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "flywayDataSource", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#flywayDataSource", "start_line": 269, "end_line": 278, "signature": "flywayDataSource()", "original_code": "@Test\n\tvoid flywayDataSource() {\n\t\tthis.contextRunner\n\t\t\t.withUserConfiguration(FlywayDataSourceConfiguration.class, EmbeddedDataSourceConfiguration.class)\n\t\t\t.run((context) -> {\n\t\t\t\tassertThat(context).hasSingleBean(Flyway.class);\n\t\t\t\tassertThat(context.getBean(Flyway.class).getConfiguration().getDataSource())\n\t\t\t\t\t.isEqualTo(context.getBean(\"flywayDataSource\"));\n\t\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "flywayDataSource", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withUserConfiguration", "(", ")", "this", ".", "contextRunner", "(", ",", ")", "->", "FlywayDataSourceConfiguration", ".", "class", "EmbeddedDataSourceConfiguration", ".", "class", "(", "context", ")", "{", "}", ";", ";", ".", "hasSingleBean", ".", "isEqualTo", "assertThat", "(", ")", "assertThat", "(", ")", "(", "context", ")", "Flyway", ".", "class", "(", ")", "context", ".", "getBean", ".", "getDataSource", "(", ")", ".", "getConfiguration", "(", ")", "\"", "flywayDataSource", "\"", "context", ".", "getBean", "(", ")", "(", ")", "Flyway", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 115, "ast_depth": 18, "n_identifiers": 12, "vocab_size": 28, "n_whitespaces": 40, "n_words": 28, "nloc": 10, "token_counts": 77}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#280-291", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "flywayDataSourceIsUsedWhenJdbcConnectionDetailsIsAvailable", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#flywayDataSourceIsUsedWhenJdbcConnectionDetailsIsAvailable", "start_line": 280, "end_line": 291, "signature": "flywayDataSourceIsUsedWhenJdbcConnectionDetailsIsAvailable()", "original_code": "@Test\n\tvoid flywayDataSourceIsUsedWhenJdbcConnectionDetailsIsAvailable() {\n\t\tthis.contextRunner\n\t\t\t.withUserConfiguration(FlywayDataSourceConfiguration.class, EmbeddedDataSourceConfiguration.class,\n\t\t\t\t\tJdbcConnectionDetailsConfiguration.class)\n\t\t\t.run((context) -> {\n\t\t\t\tassertThat(context).hasSingleBean(JdbcConnectionDetails.class);\n\t\t\t\tassertThat(context).hasSingleBean(Flyway.class);\n\t\t\t\tassertThat(context.getBean(Flyway.class).getConfiguration().getDataSource())\n\t\t\t\t\t.isEqualTo(context.getBean(\"flywayDataSource\"));\n\t\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "flywayDataSourceIsUsedWhenJdbcConnectionDetailsIsAvailable", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withUserConfiguration", "(", ")", "this", ".", "contextRunner", "(", ",", ",", ")", "->", "FlywayDataSourceConfiguration", ".", "class", "EmbeddedDataSourceConfiguration", ".", "class", "JdbcConnectionDetailsConfiguration", ".", "class", "(", "context", ")", "{", "}", ";", ";", ";", ".", "hasSingleBean", ".", "hasSingleBean", ".", "isEqualTo", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "(", "context", ")", "JdbcConnectionDetails", ".", "class", "(", "context", ")", "Flyway", ".", "class", "(", ")", "context", ".", "getBean", ".", "getDataSource", "(", ")", ".", "getConfiguration", "(", ")", "\"", "flywayDataSource", "\"", "context", ".", "getBean", "(", ")", "(", ")", "Flyway", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 138, "ast_depth": 18, "n_identifiers": 12, "vocab_size": 31, "n_whitespaces": 51, "n_words": 35, "nloc": 12, "token_counts": 93}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#293-304", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "flywayDataSourceIsUsedWhenFlywayConnectionDetailsIsAvailable", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#flywayDataSourceIsUsedWhenFlywayConnectionDetailsIsAvailable", "start_line": 293, "end_line": 304, "signature": "flywayDataSourceIsUsedWhenFlywayConnectionDetailsIsAvailable()", "original_code": "@Test\n\tvoid flywayDataSourceIsUsedWhenFlywayConnectionDetailsIsAvailable() {\n\t\tthis.contextRunner\n\t\t\t.withUserConfiguration(FlywayDataSourceConfiguration.class, EmbeddedDataSourceConfiguration.class,\n\t\t\t\t\tFlywayConnectionDetailsConfiguration.class)\n\t\t\t.run((context) -> {\n\t\t\t\tassertThat(context).hasSingleBean(FlywayConnectionDetails.class);\n\t\t\t\tassertThat(context).hasSingleBean(Flyway.class);\n\t\t\t\tassertThat(context.getBean(Flyway.class).getConfiguration().getDataSource())\n\t\t\t\t\t.isEqualTo(context.getBean(\"flywayDataSource\"));\n\t\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "flywayDataSourceIsUsedWhenFlywayConnectionDetailsIsAvailable", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withUserConfiguration", "(", ")", "this", ".", "contextRunner", "(", ",", ",", ")", "->", "FlywayDataSourceConfiguration", ".", "class", "EmbeddedDataSourceConfiguration", ".", "class", "FlywayConnectionDetailsConfiguration", ".", "class", "(", "context", ")", "{", "}", ";", ";", ";", ".", "hasSingleBean", ".", "hasSingleBean", ".", "isEqualTo", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "(", "context", ")", "FlywayConnectionDetails", ".", "class", "(", "context", ")", "Flyway", ".", "class", "(", ")", "context", ".", "getBean", ".", "getDataSource", "(", ")", ".", "getConfiguration", "(", ")", "\"", "flywayDataSource", "\"", "context", ".", "getBean", "(", ")", "(", ")", "Flyway", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 138, "ast_depth": 18, "n_identifiers": 12, "vocab_size": 31, "n_whitespaces": 51, "n_words": 35, "nloc": 12, "token_counts": 93}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#306-313", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "flywayDataSourceWithoutDataSourceAutoConfiguration", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#flywayDataSourceWithoutDataSourceAutoConfiguration", "start_line": 306, "end_line": 313, "signature": "flywayDataSourceWithoutDataSourceAutoConfiguration()", "original_code": "@Test\n\tvoid flywayDataSourceWithoutDataSourceAutoConfiguration() {\n\t\tthis.contextRunner.withUserConfiguration(FlywayDataSourceConfiguration.class).run((context) -> {\n\t\t\tassertThat(context).hasSingleBean(Flyway.class);\n\t\t\tassertThat(context.getBean(Flyway.class).getConfiguration().getDataSource())\n\t\t\t\t.isEqualTo(context.getBean(\"flywayDataSource\"));\n\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "flywayDataSourceWithoutDataSourceAutoConfiguration", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withUserConfiguration", "(", ")", "this", ".", "contextRunner", "(", ")", "->", "FlywayDataSourceConfiguration", ".", "class", "(", "context", ")", "{", "}", ";", ";", ".", "hasSingleBean", ".", "isEqualTo", "assertThat", "(", ")", "assertThat", "(", ")", "(", "context", ")", "Flyway", ".", "class", "(", ")", "context", ".", "getBean", ".", "getDataSource", "(", ")", ".", "getConfiguration", "(", ")", "\"", "flywayDataSource", "\"", "context", ".", "getBean", "(", ")", "(", ")", "Flyway", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 110, "ast_depth": 18, "n_identifiers": 12, "vocab_size": 27, "n_whitespaces": 27, "n_words": 26, "nloc": 8, "token_counts": 73}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#315-322", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "flywayMultipleDataSources", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#flywayMultipleDataSources", "start_line": 315, "end_line": 322, "signature": "flywayMultipleDataSources()", "original_code": "@Test\n\tvoid flywayMultipleDataSources() {\n\t\tthis.contextRunner.withUserConfiguration(FlywayMultipleDataSourcesConfiguration.class).run((context) -> {\n\t\t\tassertThat(context).hasSingleBean(Flyway.class);\n\t\t\tassertThat(context.getBean(Flyway.class).getConfiguration().getDataSource())\n\t\t\t\t.isEqualTo(context.getBean(\"flywayDataSource\"));\n\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "flywayMultipleDataSources", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withUserConfiguration", "(", ")", "this", ".", "contextRunner", "(", ")", "->", "FlywayMultipleDataSourcesConfiguration", ".", "class", "(", "context", ")", "{", "}", ";", ";", ".", "hasSingleBean", ".", "isEqualTo", "assertThat", "(", ")", "assertThat", "(", ")", "(", "context", ")", "Flyway", ".", "class", "(", ")", "context", ".", "getBean", ".", "getDataSource", "(", ")", ".", "getConfiguration", "(", ")", "\"", "flywayDataSource", "\"", "context", ".", "getBean", "(", ")", "(", ")", "Flyway", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 110, "ast_depth": 18, "n_identifiers": 12, "vocab_size": 27, "n_whitespaces": 27, "n_words": 26, "nloc": 8, "token_counts": 73}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#324-338", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "schemaManagementProviderDetectsDataSource", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#schemaManagementProviderDetectsDataSource", "start_line": 324, "end_line": 338, "signature": "schemaManagementProviderDetectsDataSource()", "original_code": "@Test\n\tvoid schemaManagementProviderDetectsDataSource() {\n\t\tthis.contextRunner\n\t\t\t.withUserConfiguration(FlywayDataSourceConfiguration.class, EmbeddedDataSourceConfiguration.class)\n\t\t\t.run((context) -> {\n\t\t\t\tFlywaySchemaManagementProvider schemaManagementProvider = context\n\t\t\t\t\t.getBean(FlywaySchemaManagementProvider.class);\n\t\t\t\tassertThat(schemaManagementProvider\n\t\t\t\t\t.getSchemaManagement(context.getBean(\"normalDataSource\", DataSource.class)))\n\t\t\t\t\t.isEqualTo(SchemaManagement.UNMANAGED);\n\t\t\t\tassertThat(schemaManagementProvider\n\t\t\t\t\t.getSchemaManagement(context.getBean(\"flywayDataSource\", DataSource.class)))\n\t\t\t\t\t.isEqualTo(SchemaManagement.MANAGED);\n\t\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "schemaManagementProviderDetectsDataSource", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withUserConfiguration", "(", ")", "this", ".", "contextRunner", "(", ",", ")", "->", "FlywayDataSourceConfiguration", ".", "class", "EmbeddedDataSourceConfiguration", ".", "class", "(", "context", ")", "{", "}", "FlywaySchemaManagementProvider", ";", ";", ";", "schemaManagementProvider", "=", ".", "isEqualTo", ".", "isEqualTo", "context", ".", "getBean", "assertThat", "(", ")", "assertThat", "(", ")", "(", ")", "(", ")", "SchemaManagement", ".", "UNMANAGED", "(", ")", "SchemaManagement", ".", "MANAGED", "FlywaySchemaManagementProvider", ".", "class", "schemaManagementProvider", ".", "getSchemaManagement", "schemaManagementProvider", ".", "getSchemaManagement", "(", ")", "(", ")", "context", ".", "getBean", "context", ".", "getBean", "(", ",", ")", "(", ",", ")", "\"", "normalDataSource", "\"", "DataSource", ".", "class", "\"", "flywayDataSource", "\"", "DataSource", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 147, "ast_depth": 18, "n_identifiers": 14, "vocab_size": 34, "n_whitespaces": 74, "n_words": 40, "nloc": 15, "token_counts": 101}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#340-348", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "defaultFlyway", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#defaultFlyway", "start_line": 340, "end_line": 348, "signature": "defaultFlyway()", "original_code": "@Test\n\tvoid defaultFlyway() {\n\t\tthis.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class).run((context) -> {\n\t\t\tassertThat(context).hasSingleBean(Flyway.class);\n\t\t\tFlyway flyway = context.getBean(Flyway.class);\n\t\t\tassertThat(flyway.getConfiguration().getLocations())\n\t\t\t\t.containsExactly(new Location(\"classpath:db/migration\"));\n\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "defaultFlyway", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withUserConfiguration", "(", ")", "this", ".", "contextRunner", "(", ")", "->", "EmbeddedDataSourceConfiguration", ".", "class", "(", "context", ")", "{", "}", ";", "Flyway", ";", ";", ".", "hasSingleBean", "flyway", "=", ".", "containsExactly", "assertThat", "(", ")", "context", ".", "getBean", "assertThat", "(", ")", "(", "context", ")", "Flyway", ".", "class", "(", ")", "(", ")", "new", "Location", "Flyway", ".", "class", ".", "getLocations", "(", ")", "flyway", ".", "getConfiguration", "(", ")", "\"", "classpath:db/migration", "\"", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 116, "ast_depth": 16, "n_identifiers": 13, "vocab_size": 31, "n_whitespaces": 35, "n_words": 31, "nloc": 9, "token_counts": 77}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#350-360", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "overrideLocations", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#overrideLocations", "start_line": 350, "end_line": 360, "signature": "overrideLocations()", "original_code": "@Test\n\tvoid overrideLocations() {\n\t\tthis.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class)\n\t\t\t.withPropertyValues(\"spring.flyway.locations:classpath:db/changelog,classpath:db/migration\")\n\t\t\t.run((context) -> {\n\t\t\t\tassertThat(context).hasSingleBean(Flyway.class);\n\t\t\t\tFlyway flyway = context.getBean(Flyway.class);\n\t\t\t\tassertThat(flyway.getConfiguration().getLocations())\n\t\t\t\t\t.containsExactly(new Location(\"classpath:db/changelog\"), new Location(\"classpath:db/migration\"));\n\t\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "overrideLocations", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withPropertyValues", "(", ")", ".", "withUserConfiguration", "(", ")", "->", "this", ".", "contextRunner", "(", ")", "\"", "spring.flyway.locations:classpath:db/changelog,classpath:db/migration", "\"", "(", "context", ")", "{", "}", "EmbeddedDataSourceConfiguration", ".", "class", ";", "Flyway", ";", ";", ".", "hasSingleBean", "flyway", "=", ".", "containsExactly", "assertThat", "(", ")", "context", ".", "getBean", "assertThat", "(", ",", ")", "(", "context", ")", "Flyway", ".", "class", "(", ")", "(", ")", "new", "Location", "new", "Location", "Flyway", ".", "class", ".", "getLocations", "(", ")", "(", ")", "flyway", ".", "getConfiguration", "(", ")", "\"", "classpath:db/changelog", "\"", "\"", "classpath:db/migration", "\"", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 137, "ast_depth": 16, "n_identifiers": 14, "vocab_size": 35, "n_whitespaces": 50, "n_words": 46, "nloc": 11, "token_counts": 92}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#362-373", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "overrideLocationsList", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#overrideLocationsList", "start_line": 362, "end_line": 373, "signature": "overrideLocationsList()", "original_code": "@Test\n\tvoid overrideLocationsList() {\n\t\tthis.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class)\n\t\t\t.withPropertyValues(\"spring.flyway.locations[0]:classpath:db/changelog\",\n\t\t\t\t\t\"spring.flyway.locations[1]:classpath:db/migration\")\n\t\t\t.run((context) -> {\n\t\t\t\tassertThat(context).hasSingleBean(Flyway.class);\n\t\t\t\tFlyway flyway = context.getBean(Flyway.class);\n\t\t\t\tassertThat(flyway.getConfiguration().getLocations())\n\t\t\t\t\t.containsExactly(new Location(\"classpath:db/changelog\"), new Location(\"classpath:db/migration\"));\n\t\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "overrideLocationsList", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withPropertyValues", "(", ")", ".", "withUserConfiguration", "(", ",", ")", "->", "this", ".", "contextRunner", "(", ")", "\"", "spring.flyway.locations[0]:classpath:db/changelog", "\"", "\"", "spring.flyway.locations[1]:classpath:db/migration", "\"", "(", "context", ")", "{", "}", "EmbeddedDataSourceConfiguration", ".", "class", ";", "Flyway", ";", ";", ".", "hasSingleBean", "flyway", "=", ".", "containsExactly", "assertThat", "(", ")", "context", ".", "getBean", "assertThat", "(", ",", ")", "(", "context", ")", "Flyway", ".", "class", "(", ")", "(", ")", "new", "Location", "new", "Location", "Flyway", ".", "class", ".", "getLocations", "(", ")", "(", ")", "flyway", ".", "getConfiguration", "(", ")", "\"", "classpath:db/changelog", "\"", "\"", "classpath:db/migration", "\"", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 142, "ast_depth": 16, "n_identifiers": 14, "vocab_size": 36, "n_whitespaces": 56, "n_words": 51, "nloc": 12, "token_counts": 96}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#375-384", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "overrideSchemas", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#overrideSchemas", "start_line": 375, "end_line": 384, "signature": "overrideSchemas()", "original_code": "@Test\n\tvoid overrideSchemas() {\n\t\tthis.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class)\n\t\t\t.withPropertyValues(\"spring.flyway.schemas:public\")\n\t\t\t.run((context) -> {\n\t\t\t\tassertThat(context).hasSingleBean(Flyway.class);\n\t\t\t\tFlyway flyway = context.getBean(Flyway.class);\n\t\t\t\tassertThat(Arrays.asList(flyway.getConfiguration().getSchemas())).hasToString(\"[public]\");\n\t\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "overrideSchemas", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withPropertyValues", "(", ")", ".", "withUserConfiguration", "(", ")", "->", "this", ".", "contextRunner", "(", ")", "\"", "spring.flyway.schemas:public", "\"", "(", "context", ")", "{", "}", "EmbeddedDataSourceConfiguration", ".", "class", ";", "Flyway", ";", ";", ".", "hasSingleBean", "flyway", "=", ".", "hasToString", "assertThat", "(", ")", "context", ".", "getBean", "assertThat", "(", ")", "(", "context", ")", "Flyway", ".", "class", "(", ")", "(", ")", "\"", "[public]", "\"", "Flyway", ".", "class", "Arrays", ".", "asList", "(", ")", ".", "getSchemas", "flyway", ".", "getConfiguration", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 127, "ast_depth": 18, "n_identifiers": 16, "vocab_size": 33, "n_whitespaces": 41, "n_words": 34, "nloc": 10, "token_counts": 85}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#386-398", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "overrideDataSourceAndDriverClassName", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#overrideDataSourceAndDriverClassName", "start_line": 386, "end_line": 398, "signature": "overrideDataSourceAndDriverClassName()", "original_code": "@Test\n\tvoid overrideDataSourceAndDriverClassName() {\n\t\tString jdbcUrl = \"jdbc:hsqldb:mem:flyway\" + UUID.randomUUID();\n\t\tString driverClassName = \"org.hsqldb.jdbcDriver\";\n\t\tthis.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class)\n\t\t\t.withPropertyValues(\"spring.flyway.url:\" + jdbcUrl, \"spring.flyway.driver-class-name:\" + driverClassName)\n\t\t\t.run((context) -> {\n\t\t\t\tFlyway flyway = context.getBean(Flyway.class);\n\t\t\t\tSimpleDriverDataSource dataSource = (SimpleDriverDataSource) flyway.getConfiguration().getDataSource();\n\t\t\t\tassertThat(dataSource.getUrl()).isEqualTo(jdbcUrl);\n\t\t\t\tassertThat(dataSource.getDriver().getClass().getName()).isEqualTo(driverClassName);\n\t\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "overrideDataSourceAndDriverClassName", "(", ")", "{", "}", "@", "Test", "String", ";", "String", ";", ";", "jdbcUrl", "=", "driverClassName", "=", ".", "run", "+", "\"", "org.hsqldb.jdbcDriver", "\"", ".", "withPropertyValues", "(", ")", "\"", "jdbc:hsqldb:mem:flyway", "\"", "UUID", ".", "randomUUID", ".", "withUserConfiguration", "(", ",", ")", "->", "(", ")", "this", ".", "contextRunner", "(", ")", "+", "jdbcUrl", "+", "driverClassName", "(", "context", ")", "{", "}", "EmbeddedDataSourceConfiguration", ".", "class", "\"", "spring.flyway.url:", "\"", "\"", "spring.flyway.driver-class-name:", "\"", "Flyway", ";", "SimpleDriverDataSource", ";", ";", ";", "flyway", "=", "dataSource", "=", ".", "isEqualTo", ".", "isEqualTo", "context", ".", "getBean", "(", "SimpleDriverDataSource", ")", "assertThat", "(", "jdbcUrl", ")", "assertThat", "(", "driverClassName", ")", "(", ")", ".", "getDataSource", "(", ")", "(", ")", "Flyway", ".", "class", "flyway", ".", "getConfiguration", "(", ")", "dataSource", ".", "getUrl", ".", "getName", "(", ")", "(", ")", ".", "getClass", "(", ")", "dataSource", ".", "getDriver", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 189, "ast_depth": 17, "n_identifiers": 22, "vocab_size": 45, "n_whitespaces": 69, "n_words": 58, "nloc": 13, "token_counts": 128}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#400-409", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "changeLogDoesNotExist", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#changeLogDoesNotExist", "start_line": 400, "end_line": 409, "signature": "changeLogDoesNotExist()", "original_code": "@Test\n\tvoid changeLogDoesNotExist() {\n\t\tthis.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class)\n\t\t\t.withPropertyValues(\"spring.flyway.fail-on-missing-locations=true\",\n\t\t\t\t\t\"spring.flyway.locations:filesystem:no-such-dir\")\n\t\t\t.run((context) -> {\n\t\t\t\tassertThat(context).hasFailed();\n\t\t\t\tassertThat(context).getFailure().isInstanceOf(BeanCreationException.class);\n\t\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "changeLogDoesNotExist", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withPropertyValues", "(", ")", ".", "withUserConfiguration", "(", ",", ")", "->", "this", ".", "contextRunner", "(", ")", "\"", "spring.flyway.fail-on-missing-locations=true", "\"", "\"", "spring.flyway.locations:filesystem:no-such-dir", "\"", "(", "context", ")", "{", "}", "EmbeddedDataSourceConfiguration", ".", "class", ";", ";", ".", "hasFailed", ".", "isInstanceOf", "assertThat", "(", ")", ".", "getFailure", "(", ")", "(", "context", ")", "assertThat", "(", ")", "BeanCreationException", ".", "class", "(", "context", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 98, "ast_depth": 14, "n_identifiers": 11, "vocab_size": 28, "n_whitespaces": 39, "n_words": 34, "nloc": 10, "token_counts": 65}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#411-421", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "failOnMissingLocationsAllMissing", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#failOnMissingLocationsAllMissing", "start_line": 411, "end_line": 421, "signature": "failOnMissingLocationsAllMissing()", "original_code": "@Test\n\tvoid failOnMissingLocationsAllMissing() {\n\t\tthis.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class)\n\t\t\t.withPropertyValues(\"spring.flyway.fail-on-missing-locations=true\")\n\t\t\t.withPropertyValues(\"spring.flyway.locations:classpath:db/missing1,classpath:db/migration2\")\n\t\t\t.run((context) -> {\n\t\t\t\tassertThat(context).hasFailed();\n\t\t\t\tassertThat(context).getFailure().isInstanceOf(BeanCreationException.class);\n\t\t\t\tassertThat(context).getFailure().hasMessageContaining(\"Unable to resolve location\");\n\t\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "failOnMissingLocationsAllMissing", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withPropertyValues", "(", ")", ".", "withPropertyValues", "(", ")", "->", ".", "withUserConfiguration", "(", ")", "\"", "spring.flyway.locations:classpath:db/missing1,classpath:db/migration2", "\"", "(", "context", ")", "{", "}", "this", ".", "contextRunner", "(", ")", "\"", "spring.flyway.fail-on-missing-locations=true", "\"", ";", ";", ";", "EmbeddedDataSourceConfiguration", ".", "class", ".", "hasFailed", ".", "isInstanceOf", ".", "hasMessageContaining", "assertThat", "(", ")", ".", "getFailure", "(", ")", ".", "getFailure", "(", ")", "(", "context", ")", "assertThat", "(", ")", "BeanCreationException", ".", "class", "assertThat", "(", ")", "\"", "Unable to resolve location", "\"", "(", "context", ")", "(", "context", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 127, "ast_depth": 14, "n_identifiers": 12, "vocab_size": 29, "n_whitespaces": 45, "n_words": 45, "nloc": 11, "token_counts": 84}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#423-431", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "failOnMissingLocationsDoesNotFailWhenAllExist", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#failOnMissingLocationsDoesNotFailWhenAllExist", "start_line": 423, "end_line": 431, "signature": "failOnMissingLocationsDoesNotFailWhenAllExist()", "original_code": "@Test\n\t@WithResource(name = \"db/changelog/V1.1__refine.sql\")\n\t@WithResource(name = \"db/migration/V1__init.sql\", content = \"DROP TABLE IF EXISTS TEST\")\n\tvoid failOnMissingLocationsDoesNotFailWhenAllExist() {\n\t\tthis.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class)\n\t\t\t.withPropertyValues(\"spring.flyway.fail-on-missing-locations=true\")\n\t\t\t.withPropertyValues(\"spring.flyway.locations:classpath:db/changelog,classpath:db/migration\")\n\t\t\t.run((context) -> assertThat(context).hasNotFailed());\n\t}", "doc_comment": ""}, "code_tokens": ["void", "failOnMissingLocationsDoesNotFailWhenAllExist", "(", ")", "{", "}", "@", "Test", "@", "WithResource", "@", "WithResource", ";", "(", ")", "(", ",", ")", ".", "run", "name", "=", "name", "=", "content", "=", ".", "withPropertyValues", "(", ")", "\"", "db/changelog/V1.1__refine.sql", "\"", "\"", "db/migration/V1__init.sql", "\"", "\"", "DROP TABLE IF EXISTS TEST", "\"", ".", "withPropertyValues", "(", ")", "->", ".", "withUserConfiguration", "(", ")", "\"", "spring.flyway.locations:classpath:db/changelog,classpath:db/migration", "\"", "(", "context", ")", ".", "hasNotFailed", "this", ".", "contextRunner", "(", ")", "\"", "spring.flyway.fail-on-missing-locations=true", "\"", "assertThat", "(", ")", "EmbeddedDataSourceConfiguration", ".", "class", "(", "context", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 108, "ast_depth": 11, "n_identifiers": 12, "vocab_size": 32, "n_whitespaces": 38, "n_words": 50, "nloc": 9, "token_counts": 73}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#433-441", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "failOnMissingLocationsAllExistWithImplicitClasspathPrefix", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#failOnMissingLocationsAllExistWithImplicitClasspathPrefix", "start_line": 433, "end_line": 441, "signature": "failOnMissingLocationsAllExistWithImplicitClasspathPrefix()", "original_code": "@Test\n\t@WithResource(name = \"db/changelog/V1.1__refine.sql\")\n\t@WithResource(name = \"db/migration/V1__init.sql\", content = \"DROP TABLE IF EXISTS TEST\")\n\tvoid failOnMissingLocationsAllExistWithImplicitClasspathPrefix() {\n\t\tthis.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class)\n\t\t\t.withPropertyValues(\"spring.flyway.fail-on-missing-locations=true\")\n\t\t\t.withPropertyValues(\"spring.flyway.locations:db/changelog,db/migration\")\n\t\t\t.run((context) -> assertThat(context).hasNotFailed());\n\t}", "doc_comment": ""}, "code_tokens": ["void", "failOnMissingLocationsAllExistWithImplicitClasspathPrefix", "(", ")", "{", "}", "@", "Test", "@", "WithResource", "@", "WithResource", ";", "(", ")", "(", ",", ")", ".", "run", "name", "=", "name", "=", "content", "=", ".", "withPropertyValues", "(", ")", "\"", "db/changelog/V1.1__refine.sql", "\"", "\"", "db/migration/V1__init.sql", "\"", "\"", "DROP TABLE IF EXISTS TEST", "\"", ".", "withPropertyValues", "(", ")", "->", ".", "withUserConfiguration", "(", ")", "\"", "spring.flyway.locations:db/changelog,db/migration", "\"", "(", "context", ")", ".", "hasNotFailed", "this", ".", "contextRunner", "(", ")", "\"", "spring.flyway.fail-on-missing-locations=true", "\"", "assertThat", "(", ")", "EmbeddedDataSourceConfiguration", ".", "class", "(", "context", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 108, "ast_depth": 11, "n_identifiers": 12, "vocab_size": 32, "n_whitespaces": 38, "n_words": 48, "nloc": 9, "token_counts": 73}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#443-450", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "failOnMissingLocationsFilesystemPrefixDoesNotFailWhenAllExist", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#failOnMissingLocationsFilesystemPrefixDoesNotFailWhenAllExist", "start_line": 443, "end_line": 450, "signature": "failOnMissingLocationsFilesystemPrefixDoesNotFailWhenAllExist(@ResourcePath(\"db/migration\") String migration)", "original_code": "@Test\n\t@WithResource(name = \"db/migration/V1__init.sql\", content = \"DROP TABLE IF EXISTS TEST\")\n\tvoid failOnMissingLocationsFilesystemPrefixDoesNotFailWhenAllExist(@ResourcePath(\"db/migration\") String migration) {\n\t\tthis.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class)\n\t\t\t.withPropertyValues(\"spring.flyway.fail-on-missing-locations=true\")\n\t\t\t.withPropertyValues(\"spring.flyway.locations:filesystem:\" + migration)\n\t\t\t.run((context) -> assertThat(context).hasNotFailed());\n\t}", "doc_comment": ""}, "code_tokens": ["void", "failOnMissingLocationsFilesystemPrefixDoesNotFailWhenAllExist", "(", ")", "{", "}", "@", "Test", "@", "WithResource", "String", "migration", ";", "(", ",", ")", ".", "run", "name", "=", "content", "=", "@", "ResourcePath", ".", "withPropertyValues", "(", ")", "\"", "db/migration/V1__init.sql", "\"", "\"", "DROP TABLE IF EXISTS TEST", "\"", "(", ")", ".", "withPropertyValues", "(", ")", "->", "\"", "db/migration", "\"", ".", "withUserConfiguration", "(", ")", "+", "migration", "(", "context", ")", ".", "hasNotFailed", "this", ".", "contextRunner", "(", ")", "\"", "spring.flyway.fail-on-missing-locations=true", "\"", "\"", "spring.flyway.locations:filesystem:", "\"", "assertThat", "(", ")", "EmbeddedDataSourceConfiguration", ".", "class", "(", "context", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 112, "ast_depth": 11, "n_identifiers": 14, "vocab_size": 36, "n_whitespaces": 38, "n_words": 44, "nloc": 8, "token_counts": 75}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#452-460", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "customFlywayMigrationStrategy", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#customFlywayMigrationStrategy", "start_line": 452, "end_line": 460, "signature": "customFlywayMigrationStrategy()", "original_code": "@Test\n\tvoid customFlywayMigrationStrategy() {\n\t\tthis.contextRunner\n\t\t\t.withUserConfiguration(EmbeddedDataSourceConfiguration.class, MockFlywayMigrationStrategy.class)\n\t\t\t.run((context) -> {\n\t\t\t\tassertThat(context).hasSingleBean(Flyway.class);\n\t\t\t\tcontext.getBean(MockFlywayMigrationStrategy.class).assertCalled();\n\t\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "customFlywayMigrationStrategy", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withUserConfiguration", "(", ")", "this", ".", "contextRunner", "(", ",", ")", "->", "EmbeddedDataSourceConfiguration", ".", "class", "MockFlywayMigrationStrategy", ".", "class", "(", "context", ")", "{", "}", ";", ";", ".", "hasSingleBean", ".", "assertCalled", "assertThat", "(", ")", "context", ".", "getBean", "(", ")", "(", "context", ")", "Flyway", ".", "class", "(", ")", "MockFlywayMigrationStrategy", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 87, "ast_depth": 14, "n_identifiers": 10, "vocab_size": 25, "n_whitespaces": 34, "n_words": 22, "nloc": 9, "token_counts": 58}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#462-470", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "flywayJavaMigrations", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#flywayJavaMigrations", "start_line": 462, "end_line": 470, "signature": "flywayJavaMigrations()", "original_code": "@Test\n\tvoid flywayJavaMigrations() {\n\t\tthis.contextRunner\n\t\t\t.withUserConfiguration(EmbeddedDataSourceConfiguration.class, FlywayJavaMigrationsConfiguration.class)\n\t\t\t.run((context) -> {\n\t\t\t\tFlyway flyway = context.getBean(Flyway.class);\n\t\t\t\tassertThat(flyway.getConfiguration().getJavaMigrations()).hasSize(2);\n\t\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "flywayJavaMigrations", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withUserConfiguration", "(", ")", "this", ".", "contextRunner", "(", ",", ")", "->", "EmbeddedDataSourceConfiguration", ".", "class", "FlywayJavaMigrationsConfiguration", ".", "class", "(", "context", ")", "{", "}", "Flyway", ";", ";", "flyway", "=", ".", "hasSize", "context", ".", "getBean", "assertThat", "(", "2", ")", "(", ")", "(", ")", "Flyway", ".", "class", ".", "getJavaMigrations", "flyway", ".", "getConfiguration", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 94, "ast_depth": 16, "n_identifiers": 12, "vocab_size": 29, "n_whitespaces": 37, "n_words": 24, "nloc": 9, "token_counts": 63}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#472-481", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "customFlywayMigrationInitializer", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#customFlywayMigrationInitializer", "start_line": 472, "end_line": 481, "signature": "customFlywayMigrationInitializer()", "original_code": "@Test\n\tvoid customFlywayMigrationInitializer() {\n\t\tthis.contextRunner\n\t\t\t.withUserConfiguration(EmbeddedDataSourceConfiguration.class, CustomFlywayMigrationInitializer.class)\n\t\t\t.run((context) -> {\n\t\t\t\tassertThat(context).hasSingleBean(Flyway.class);\n\t\t\t\tFlywayMigrationInitializer initializer = context.getBean(FlywayMigrationInitializer.class);\n\t\t\t\tassertThat(initializer.getOrder()).isEqualTo(Ordered.HIGHEST_PRECEDENCE);\n\t\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "customFlywayMigrationInitializer", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withUserConfiguration", "(", ")", "this", ".", "contextRunner", "(", ",", ")", "->", "EmbeddedDataSourceConfiguration", ".", "class", "CustomFlywayMigrationInitializer", ".", "class", "(", "context", ")", "{", "}", ";", "FlywayMigrationInitializer", ";", ";", ".", "hasSingleBean", "initializer", "=", ".", "isEqualTo", "assertThat", "(", ")", "context", ".", "getBean", "assertThat", "(", ")", "(", "context", ")", "Flyway", ".", "class", "(", ")", "(", ")", "Ordered", ".", "HIGHEST_PRECEDENCE", "FlywayMigrationInitializer", ".", "class", "initializer", ".", "getOrder", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 109, "ast_depth": 15, "n_identifiers": 14, "vocab_size": 31, "n_whitespaces": 42, "n_words": 29, "nloc": 10, "token_counts": 73}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#483-489", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "customFlywayWithJpa", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#customFlywayWithJpa", "start_line": 483, "end_line": 489, "signature": "customFlywayWithJpa()", "original_code": "@Test\n\t@WithMetaInfPersistenceXmlResource\n\tvoid customFlywayWithJpa() {\n\t\tthis.contextRunner\n\t\t\t.withUserConfiguration(EmbeddedDataSourceConfiguration.class, CustomFlywayWithJpaConfiguration.class)\n\t\t\t.run((context) -> assertThat(context).hasNotFailed());\n\t}", "doc_comment": ""}, "code_tokens": ["void", "customFlywayWithJpa", "(", ")", "{", "}", "@", "Test", "@", "WithMetaInfPersistenceXmlResource", ";", ".", "run", ".", "withUserConfiguration", "(", ")", "this", ".", "contextRunner", "(", ",", ")", "->", "EmbeddedDataSourceConfiguration", ".", "class", "CustomFlywayWithJpaConfiguration", ".", "class", "(", "context", ")", ".", "hasNotFailed", "assertThat", "(", ")", "(", "context", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 62, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 23, "n_whitespaces": 22, "n_words": 16, "nloc": 7, "token_counts": 41}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#491-496", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "customFlywayWithJdbc", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#customFlywayWithJdbc", "start_line": 491, "end_line": 496, "signature": "customFlywayWithJdbc()", "original_code": "@Test\n\tvoid customFlywayWithJdbc() {\n\t\tthis.contextRunner\n\t\t\t.withUserConfiguration(EmbeddedDataSourceConfiguration.class, CustomFlywayWithJdbcConfiguration.class)\n\t\t\t.run((context) -> assertThat(context).hasNotFailed());\n\t}", "doc_comment": ""}, "code_tokens": ["void", "customFlywayWithJdbc", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withUserConfiguration", "(", ")", "this", ".", "contextRunner", "(", ",", ")", "->", "EmbeddedDataSourceConfiguration", ".", "class", "CustomFlywayWithJdbcConfiguration", ".", "class", "(", "context", ")", ".", "hasNotFailed", "assertThat", "(", ")", "(", "context", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 59, "ast_depth": 11, "n_identifiers": 8, "vocab_size": 22, "n_whitespaces": 20, "n_words": 15, "nloc": 6, "token_counts": 39}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#498-505", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "customFlywayMigrationInitializerWithJpa", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#customFlywayMigrationInitializerWithJpa", "start_line": 498, "end_line": 505, "signature": "customFlywayMigrationInitializerWithJpa()", "original_code": "@Test\n\t@WithMetaInfPersistenceXmlResource\n\tvoid customFlywayMigrationInitializerWithJpa() {\n\t\tthis.contextRunner\n\t\t\t.withUserConfiguration(EmbeddedDataSourceConfiguration.class,\n\t\t\t\t\tCustomFlywayMigrationInitializerWithJpaConfiguration.class)\n\t\t\t.run((context) -> assertThat(context).hasNotFailed());\n\t}", "doc_comment": ""}, "code_tokens": ["void", "customFlywayMigrationInitializerWithJpa", "(", ")", "{", "}", "@", "Test", "@", "WithMetaInfPersistenceXmlResource", ";", ".", "run", ".", "withUserConfiguration", "(", ")", "this", ".", "contextRunner", "(", ",", ")", "->", "EmbeddedDataSourceConfiguration", ".", "class", "CustomFlywayMigrationInitializerWithJpaConfiguration", ".", "class", "(", "context", ")", ".", "hasNotFailed", "assertThat", "(", ")", "(", "context", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 62, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 23, "n_whitespaces": 27, "n_words": 16, "nloc": 8, "token_counts": 41}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#507-513", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "customFlywayMigrationInitializerWithJdbc", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#customFlywayMigrationInitializerWithJdbc", "start_line": 507, "end_line": 513, "signature": "customFlywayMigrationInitializerWithJdbc()", "original_code": "@Test\n\tvoid customFlywayMigrationInitializerWithJdbc() {\n\t\tthis.contextRunner\n\t\t\t.withUserConfiguration(EmbeddedDataSourceConfiguration.class,\n\t\t\t\t\tCustomFlywayMigrationInitializerWithJdbcConfiguration.class)\n\t\t\t.run((context) -> assertThat(context).hasNotFailed());\n\t}", "doc_comment": ""}, "code_tokens": ["void", "customFlywayMigrationInitializerWithJdbc", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withUserConfiguration", "(", ")", "this", ".", "contextRunner", "(", ",", ")", "->", "EmbeddedDataSourceConfiguration", ".", "class", "CustomFlywayMigrationInitializerWithJdbcConfiguration", ".", "class", "(", "context", ")", ".", "hasNotFailed", "assertThat", "(", ")", "(", "context", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 59, "ast_depth": 11, "n_identifiers": 8, "vocab_size": 22, "n_whitespaces": 25, "n_words": 15, "nloc": 7, "token_counts": 39}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#515-524", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "overrideBaselineVersionString", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#overrideBaselineVersionString", "start_line": 515, "end_line": 524, "signature": "overrideBaselineVersionString()", "original_code": "@Test\n\tvoid overrideBaselineVersionString() {\n\t\tthis.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class)\n\t\t\t.withPropertyValues(\"spring.flyway.baseline-version=0\")\n\t\t\t.run((context) -> {\n\t\t\t\tassertThat(context).hasSingleBean(Flyway.class);\n\t\t\t\tFlyway flyway = context.getBean(Flyway.class);\n\t\t\t\tassertThat(flyway.getConfiguration().getBaselineVersion()).isEqualTo(MigrationVersion.fromVersion(\"0\"));\n\t\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "overrideBaselineVersionString", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withPropertyValues", "(", ")", ".", "withUserConfiguration", "(", ")", "->", "this", ".", "contextRunner", "(", ")", "\"", "spring.flyway.baseline-version=0", "\"", "(", "context", ")", "{", "}", "EmbeddedDataSourceConfiguration", ".", "class", ";", "Flyway", ";", ";", ".", "hasSingleBean", "flyway", "=", ".", "isEqualTo", "assertThat", "(", ")", "context", ".", "getBean", "assertThat", "(", ")", "(", "context", ")", "Flyway", ".", "class", "(", ")", "(", ")", "MigrationVersion", ".", "fromVersion", "Flyway", ".", "class", ".", "getBaselineVersion", "(", ")", "flyway", ".", "getConfiguration", "(", ")", "\"", "0", "\"", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 127, "ast_depth": 16, "n_identifiers": 16, "vocab_size": 33, "n_whitespaces": 41, "n_words": 35, "nloc": 10, "token_counts": 85}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#526-535", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "overrideBaselineVersionNumber", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#overrideBaselineVersionNumber", "start_line": 526, "end_line": 535, "signature": "overrideBaselineVersionNumber()", "original_code": "@Test\n\tvoid overrideBaselineVersionNumber() {\n\t\tthis.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class)\n\t\t\t.withPropertyValues(\"spring.flyway.baseline-version=1\")\n\t\t\t.run((context) -> {\n\t\t\t\tassertThat(context).hasSingleBean(Flyway.class);\n\t\t\t\tFlyway flyway = context.getBean(Flyway.class);\n\t\t\t\tassertThat(flyway.getConfiguration().getBaselineVersion()).isEqualTo(MigrationVersion.fromVersion(\"1\"));\n\t\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "overrideBaselineVersionNumber", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withPropertyValues", "(", ")", ".", "withUserConfiguration", "(", ")", "->", "this", ".", "contextRunner", "(", ")", "\"", "spring.flyway.baseline-version=1", "\"", "(", "context", ")", "{", "}", "EmbeddedDataSourceConfiguration", ".", "class", ";", "Flyway", ";", ";", ".", "hasSingleBean", "flyway", "=", ".", "isEqualTo", "assertThat", "(", ")", "context", ".", "getBean", "assertThat", "(", ")", "(", "context", ")", "Flyway", ".", "class", "(", ")", "(", ")", "MigrationVersion", ".", "fromVersion", "Flyway", ".", "class", ".", "getBaselineVersion", "(", ")", "flyway", ".", "getConfiguration", "(", ")", "\"", "1", "\"", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 127, "ast_depth": 16, "n_identifiers": 16, "vocab_size": 33, "n_whitespaces": 41, "n_words": 35, "nloc": 10, "token_counts": 85}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#537-548", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "useVendorDirectory", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#useVendorDirectory", "start_line": 537, "end_line": 548, "signature": "useVendorDirectory()", "original_code": "@Test\n\t@WithResource(name = \"db/vendors/h2/V1__init.sql\", content = \"DROP TABLE IF EXISTS TEST;\")\n\tvoid useVendorDirectory() {\n\t\tthis.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class)\n\t\t\t.withPropertyValues(\"spring.flyway.locations=classpath:db/vendors/{vendor},classpath:db/changelog\")\n\t\t\t.run((context) -> {\n\t\t\t\tassertThat(context).hasSingleBean(Flyway.class);\n\t\t\t\tFlyway flyway = context.getBean(Flyway.class);\n\t\t\t\tassertThat(flyway.getConfiguration().getLocations()).containsExactlyInAnyOrder(\n\t\t\t\t\t\tnew Location(\"classpath:db/vendors/h2\"), new Location(\"classpath:db/changelog\"));\n\t\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "useVendorDirectory", "(", ")", "{", "}", "@", "Test", "@", "WithResource", ";", "(", ",", ")", ".", "run", "name", "=", "content", "=", ".", "withPropertyValues", "(", ")", "\"", "db/vendors/h2/V1__init.sql", "\"", "\"", "DROP TABLE IF EXISTS TEST;", "\"", ".", "withUserConfiguration", "(", ")", "->", "this", ".", "contextRunner", "(", ")", "\"", "spring.flyway.locations=classpath:db/vendors/{vendor},classpath:db/changelog", "\"", "(", "context", ")", "{", "}", "EmbeddedDataSourceConfiguration", ".", "class", ";", "Flyway", ";", ";", ".", "hasSingleBean", "flyway", "=", ".", "containsExactlyInAnyOrder", "assertThat", "(", ")", "context", ".", "getBean", "assertThat", "(", ",", ")", "(", "context", ")", "Flyway", ".", "class", "(", ")", "(", ")", "new", "Location", "new", "Location", "Flyway", ".", "class", ".", "getLocations", "(", ")", "(", ")", "flyway", ".", "getConfiguration", "(", ")", "\"", "classpath:db/vendors/h2", "\"", "\"", "classpath:db/changelog", "\"", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 158, "ast_depth": 16, "n_identifiers": 17, "vocab_size": 40, "n_whitespaces": 62, "n_words": 61, "nloc": 12, "token_counts": 107}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#550-561", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "useOneLocationWithVendorDirectory", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#useOneLocationWithVendorDirectory", "start_line": 550, "end_line": 561, "signature": "useOneLocationWithVendorDirectory()", "original_code": "@Test\n\t@WithResource(name = \"db/vendors/h2/V1__init.sql\", content = \"DROP TABLE IF EXISTS TEST;\")\n\tvoid useOneLocationWithVendorDirectory() {\n\t\tthis.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class)\n\t\t\t.withPropertyValues(\"spring.flyway.locations=classpath:db/vendors/{vendor}\")\n\t\t\t.run((context) -> {\n\t\t\t\tassertThat(context).hasSingleBean(Flyway.class);\n\t\t\t\tFlyway flyway = context.getBean(Flyway.class);\n\t\t\t\tassertThat(flyway.getConfiguration().getLocations())\n\t\t\t\t\t.containsExactly(new Location(\"classpath:db/vendors/h2\"));\n\t\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "useOneLocationWithVendorDirectory", "(", ")", "{", "}", "@", "Test", "@", "WithResource", ";", "(", ",", ")", ".", "run", "name", "=", "content", "=", ".", "withPropertyValues", "(", ")", "\"", "db/vendors/h2/V1__init.sql", "\"", "\"", "DROP TABLE IF EXISTS TEST;", "\"", ".", "withUserConfiguration", "(", ")", "->", "this", ".", "contextRunner", "(", ")", "\"", "spring.flyway.locations=classpath:db/vendors/{vendor}", "\"", "(", "context", ")", "{", "}", "EmbeddedDataSourceConfiguration", ".", "class", ";", "Flyway", ";", ";", ".", "hasSingleBean", "flyway", "=", ".", "containsExactly", "assertThat", "(", ")", "context", ".", "getBean", "assertThat", "(", ")", "(", "context", ")", "Flyway", ".", "class", "(", ")", "(", ")", "new", "Location", "Flyway", ".", "class", ".", "getLocations", "(", ")", "flyway", ".", "getConfiguration", "(", ")", "\"", "classpath:db/vendors/h2", "\"", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 147, "ast_depth": 16, "n_identifiers": 17, "vocab_size": 39, "n_whitespaces": 59, "n_words": 53, "nloc": 12, "token_counts": 99}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#563-574", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "useOneCallbackLocationWithVendorSpecificPackage", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#useOneCallbackLocationWithVendorSpecificPackage", "start_line": 563, "end_line": 574, "signature": "useOneCallbackLocationWithVendorSpecificPackage()", "original_code": "@Test\n\t@WithResource(name = \"com/example/h2/beforeEachMigrate.sql\", content = \"DROP TABLE IF EXISTS TEMP;\")\n\tvoid useOneCallbackLocationWithVendorSpecificPackage() {\n\t\tthis.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class)\n\t\t\t.withPropertyValues(\"spring.flyway.callback-locations=classpath:com.example.{vendor}\")\n\t\t\t.run((context) -> {\n\t\t\t\tassertThat(context).hasSingleBean(Flyway.class);\n\t\t\t\tFlyway flyway = context.getBean(Flyway.class);\n\t\t\t\tassertThat(flyway.getConfiguration().getCallbackLocations())\n\t\t\t\t\t.containsExactly(new Location(\"classpath:com.example.h2\"));\n\t\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "useOneCallbackLocationWithVendorSpecificPackage", "(", ")", "{", "}", "@", "Test", "@", "WithResource", ";", "(", ",", ")", ".", "run", "name", "=", "content", "=", ".", "withPropertyValues", "(", ")", "\"", "com/example/h2/beforeEachMigrate.sql", "\"", "\"", "DROP TABLE IF EXISTS TEMP;", "\"", ".", "withUserConfiguration", "(", ")", "->", "this", ".", "contextRunner", "(", ")", "\"", "spring.flyway.callback-locations=classpath:com.example.{vendor}", "\"", "(", "context", ")", "{", "}", "EmbeddedDataSourceConfiguration", ".", "class", ";", "Flyway", ";", ";", ".", "hasSingleBean", "flyway", "=", ".", "containsExactly", "assertThat", "(", ")", "context", ".", "getBean", "assertThat", "(", ")", "(", "context", ")", "Flyway", ".", "class", "(", ")", "(", ")", "new", "Location", "Flyway", ".", "class", ".", "getCallbackLocations", "(", ")", "flyway", ".", "getConfiguration", "(", ")", "\"", "classpath:com.example.h2", "\"", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 147, "ast_depth": 16, "n_identifiers": 17, "vocab_size": 39, "n_whitespaces": 59, "n_words": 54, "nloc": 12, "token_counts": 99}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#576-589", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "callbacksAreConfiguredAndOrderedByName", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#callbacksAreConfiguredAndOrderedByName", "start_line": 576, "end_line": 589, "signature": "callbacksAreConfiguredAndOrderedByName()", "original_code": "@Test\n\tvoid callbacksAreConfiguredAndOrderedByName() {\n\t\tthis.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class, CallbackConfiguration.class)\n\t\t\t.run((context) -> {\n\t\t\t\tassertThat(context).hasSingleBean(Flyway.class);\n\t\t\t\tFlyway flyway = context.getBean(Flyway.class);\n\t\t\t\tCallback callbackOne = context.getBean(\"callbackOne\", Callback.class);\n\t\t\t\tCallback callbackTwo = context.getBean(\"callbackTwo\", Callback.class);\n\t\t\t\tassertThat(flyway.getConfiguration().getCallbacks()).hasSize(2);\n\t\t\t\tInOrder orderedCallbacks = inOrder(callbackOne, callbackTwo);\n\t\t\t\torderedCallbacks.verify(callbackTwo).handle(any(Event.class), any(Context.class));\n\t\t\t\torderedCallbacks.verify(callbackOne).handle(any(Event.class), any(Context.class));\n\t\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "callbacksAreConfiguredAndOrderedByName", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withUserConfiguration", "(", ")", "this", ".", "contextRunner", "(", ",", ")", "->", "EmbeddedDataSourceConfiguration", ".", "class", "CallbackConfiguration", ".", "class", "(", "context", ")", "{", "}", ";", "Flyway", ";", "Callback", ";", "Callback", ";", ";", "InOrder", ";", ";", ";", ".", "hasSingleBean", "flyway", "=", "callbackOne", "=", "callbackTwo", "=", ".", "hasSize", "orderedCallbacks", "=", ".", "handle", ".", "handle", "assertThat", "(", ")", "context", ".", "getBean", "context", ".", "getBean", "context", ".", "getBean", "assertThat", "(", "2", ")", "inOrder", "orderedCallbacks", ".", "verify", "(", ",", ")", "orderedCallbacks", ".", "verify", "(", ",", ")", "(", "context", ")", "Flyway", ".", "class", "(", ")", "(", ",", ")", "(", ",", ")", "(", ")", "(", "callbackOne", ",", "callbackTwo", ")", "(", "callbackTwo", ")", "any", "any", "(", "callbackOne", ")", "any", "any", "Flyway", ".", "class", "\"", "callbackOne", "\"", "Callback", ".", "class", "\"", "callbackTwo", "\"", "Callback", ".", "class", ".", "getCallbacks", "(", ")", "(", ")", "(", ")", "(", ")", "flyway", ".", "getConfiguration", "(", ")", "Event", ".", "class", "Context", ".", "class", "Event", ".", "class", "Context", ".", "class", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 240, "ast_depth": 16, "n_identifiers": 20, "vocab_size": 42, "n_whitespaces": 77, "n_words": 68, "nloc": 14, "token_counts": 165}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#591-602", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "configurationCustomizersAreConfiguredAndOrdered", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#configurationCustomizersAreConfiguredAndOrdered", "start_line": 591, "end_line": 602, "signature": "configurationCustomizersAreConfiguredAndOrdered()", "original_code": "@Test\n\tvoid configurationCustomizersAreConfiguredAndOrdered() {\n\t\tthis.contextRunner\n\t\t\t.withUserConfiguration(EmbeddedDataSourceConfiguration.class, ConfigurationCustomizerConfiguration.class)\n\t\t\t.run((context) -> {\n\t\t\t\tassertThat(context).hasSingleBean(Flyway.class);\n\t\t\t\tFlyway flyway = context.getBean(Flyway.class);\n\t\t\t\tassertThat(flyway.getConfiguration().getConnectRetries()).isEqualTo(5);\n\t\t\t\tassertThat(flyway.getConfiguration().getBaselineDescription()).isEqualTo(\"<< Custom baseline >>\");\n\t\t\t\tassertThat(flyway.getConfiguration().getBaselineVersion()).isEqualTo(MigrationVersion.fromVersion(\"1\"));\n\t\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "configurationCustomizersAreConfiguredAndOrdered", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withUserConfiguration", "(", ")", "this", ".", "contextRunner", "(", ",", ")", "->", "EmbeddedDataSourceConfiguration", ".", "class", "ConfigurationCustomizerConfiguration", ".", "class", "(", "context", ")", "{", "}", ";", "Flyway", ";", ";", ";", ";", ".", "hasSingleBean", "flyway", "=", ".", "isEqualTo", ".", "isEqualTo", ".", "isEqualTo", "assertThat", "(", ")", "context", ".", "getBean", "assertThat", "(", "5", ")", "assertThat", "(", ")", "assertThat", "(", ")", "(", "context", ")", "Flyway", ".", "class", "(", ")", "(", ")", "(", ")", "\"", "<< Custom baseline >>", "\"", "(", ")", "MigrationVersion", ".", "fromVersion", "Flyway", ".", "class", ".", "getConnectRetries", ".", "getBaselineDescription", ".", "getBaselineVersion", "(", ")", "flyway", ".", "getConfiguration", "(", ")", "flyway", ".", "getConfiguration", "(", ")", "flyway", ".", "getConfiguration", "(", ")", "\"", "1", "\"", "(", ")", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 179, "ast_depth": 16, "n_identifiers": 17, "vocab_size": 37, "n_whitespaces": 55, "n_words": 44, "nloc": 12, "token_counts": 120}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#604-614", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "callbackAndMigrationBeansAreAppliedToConfigurationBeforeCustomizersAreCalled", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#callbackAndMigrationBeansAreAppliedToConfigurationBeforeCustomizersAreCalled", "start_line": 604, "end_line": 614, "signature": "callbackAndMigrationBeansAreAppliedToConfigurationBeforeCustomizersAreCalled()", "original_code": "@Test\n\tvoid callbackAndMigrationBeansAreAppliedToConfigurationBeforeCustomizersAreCalled() {\n\t\tthis.contextRunner\n\t\t\t.withUserConfiguration(EmbeddedDataSourceConfiguration.class, FlywayJavaMigrationsConfiguration.class,\n\t\t\t\t\tCallbackConfiguration.class)\n\t\t\t.withBean(FlywayConfigurationCustomizer.class, () -> (configuration) -> {\n\t\t\t\tassertThat(configuration.getCallbacks()).isNotEmpty();\n\t\t\t\tassertThat(configuration.getJavaMigrations()).isNotEmpty();\n\t\t\t})\n\t\t\t.run((context) -> assertThat(context).hasNotFailed());\n\t}", "doc_comment": ""}, "code_tokens": ["void", "callbackAndMigrationBeansAreAppliedToConfigurationBeforeCustomizersAreCalled", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withBean", "(", ")", ".", "withUserConfiguration", "(", ",", ")", "->", "this", ".", "contextRunner", "(", ",", ",", ")", "FlywayConfigurationCustomizer", ".", "class", "->", "(", "context", ")", ".", "hasNotFailed", "EmbeddedDataSourceConfiguration", ".", "class", "FlywayJavaMigrationsConfiguration", ".", "class", "CallbackConfiguration", ".", "class", "(", ")", "->", "assertThat", "(", ")", "(", "configuration", ")", "{", "}", "(", "context", ")", ";", ";", ".", "isNotEmpty", ".", "isNotEmpty", "assertThat", "(", ")", "assertThat", "(", ")", "(", ")", "(", ")", "configuration", ".", "getCallbacks", "configuration", ".", "getJavaMigrations", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 129, "ast_depth": 17, "n_identifiers": 13, "vocab_size": 29, "n_whitespaces": 49, "n_words": 29, "nloc": 11, "token_counts": 86}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#616-624", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "batchIsCorrectlyMapped", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#batchIsCorrectlyMapped", "start_line": 616, "end_line": 624, "signature": "batchIsCorrectlyMapped()", "original_code": "@Test\n\tvoid batchIsCorrectlyMapped() {\n\t\tthis.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class)\n\t\t\t.withPropertyValues(\"spring.flyway.batch=true\")\n\t\t\t.run((context) -> {\n\t\t\t\tFlyway flyway = context.getBean(Flyway.class);\n\t\t\t\tassertThat(flyway.getConfiguration().getModernConfig().getFlyway().getBatch()).isTrue();\n\t\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "batchIsCorrectlyMapped", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withPropertyValues", "(", ")", ".", "withUserConfiguration", "(", ")", "->", "this", ".", "contextRunner", "(", ")", "\"", "spring.flyway.batch=true", "\"", "(", "context", ")", "{", "}", "EmbeddedDataSourceConfiguration", ".", "class", "Flyway", ";", ";", "flyway", "=", ".", "isTrue", "context", ".", "getBean", "assertThat", "(", ")", "(", ")", "(", ")", "Flyway", ".", "class", ".", "getBatch", ".", "getFlyway", "(", ")", ".", "getModernConfig", "(", ")", "flyway", ".", "getConfiguration", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 110, "ast_depth": 18, "n_identifiers": 15, "vocab_size": 31, "n_whitespaces": 36, "n_words": 28, "nloc": 9, "token_counts": 73}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#626-631", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "dryRunOutputIsCorrectlyMapped", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#dryRunOutputIsCorrectlyMapped", "start_line": 626, "end_line": 631, "signature": "dryRunOutputIsCorrectlyMapped()", "original_code": "@Test\n\tvoid dryRunOutputIsCorrectlyMapped() {\n\t\tthis.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class)\n\t\t\t.withPropertyValues(\"spring.flyway.dryRunOutput=dryrun.sql\")\n\t\t\t.run(validateFlywayTeamsPropertyOnly(\"dryRunOutput\"));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "dryRunOutputIsCorrectlyMapped", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withPropertyValues", "(", ")", ".", "withUserConfiguration", "(", ")", "validateFlywayTeamsPropertyOnly", "this", ".", "contextRunner", "(", ")", "\"", "spring.flyway.dryRunOutput=dryrun.sql", "\"", "(", ")", "EmbeddedDataSourceConfiguration", ".", "class", "\"", "dryRunOutput", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 55, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 21, "n_whitespaces": 17, "n_words": 17, "nloc": 6, "token_counts": 36}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#633-638", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "errorOverridesIsCorrectlyMapped", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#errorOverridesIsCorrectlyMapped", "start_line": 633, "end_line": 638, "signature": "errorOverridesIsCorrectlyMapped()", "original_code": "@Test\n\tvoid errorOverridesIsCorrectlyMapped() {\n\t\tthis.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class)\n\t\t\t.withPropertyValues(\"spring.flyway.errorOverrides=D12345\")\n\t\t\t.run(validateFlywayTeamsPropertyOnly(\"errorOverrides\"));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "errorOverridesIsCorrectlyMapped", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withPropertyValues", "(", ")", ".", "withUserConfiguration", "(", ")", "validateFlywayTeamsPropertyOnly", "this", ".", "contextRunner", "(", ")", "\"", "spring.flyway.errorOverrides=D12345", "\"", "(", ")", "EmbeddedDataSourceConfiguration", ".", "class", "\"", "errorOverrides", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 55, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 21, "n_whitespaces": 17, "n_words": 16, "nloc": 6, "token_counts": 36}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#640-645", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "oracleExtensionIsNotLoadedByDefault", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#oracleExtensionIsNotLoadedByDefault", "start_line": 640, "end_line": 645, "signature": "oracleExtensionIsNotLoadedByDefault()", "original_code": "@Test\n\tvoid oracleExtensionIsNotLoadedByDefault() {\n\t\tFluentConfiguration configuration = mock(FluentConfiguration.class);\n\t\tnew OracleFlywayConfigurationCustomizer(new FlywayProperties()).customize(configuration);\n\t\tthen(configuration).shouldHaveNoInteractions();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "oracleExtensionIsNotLoadedByDefault", "(", ")", "{", "}", "@", "Test", "FluentConfiguration", ";", ";", ";", "configuration", "=", ".", "customize", ".", "shouldHaveNoInteractions", "mock", "new", "OracleFlywayConfigurationCustomizer", "(", "configuration", ")", "then", "(", ")", "(", ")", "(", ")", "(", "configuration", ")", "FluentConfiguration", ".", "class", "new", "FlywayProperties", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 64, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 21, "n_whitespaces": 20, "n_words": 17, "nloc": 6, "token_counts": 41}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#647-657", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "oracleSqlplusIsCorrectlyMapped", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#oracleSqlplusIsCorrectlyMapped", "start_line": 647, "end_line": 657, "signature": "oracleSqlplusIsCorrectlyMapped()", "original_code": "@Test\n\tvoid oracleSqlplusIsCorrectlyMapped() {\n\t\tthis.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class)\n\t\t\t.withPropertyValues(\"spring.flyway.oracle.sqlplus=true\")\n\t\t\t.run((context) -> assertThat(context.getBean(Flyway.class)\n\t\t\t\t.getConfiguration()\n\t\t\t\t.getPluginRegister()\n\t\t\t\t.getExact(OracleConfigurationExtension.class)\n\t\t\t\t.getSqlplus()).isTrue());\n\n\t}", "doc_comment": ""}, "code_tokens": ["void", "oracleSqlplusIsCorrectlyMapped", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withPropertyValues", "(", ")", ".", "withUserConfiguration", "(", ")", "->", "this", ".", "contextRunner", "(", ")", "\"", "spring.flyway.oracle.sqlplus=true", "\"", "(", "context", ")", ".", "isTrue", "EmbeddedDataSourceConfiguration", ".", "class", "assertThat", "(", ")", "(", ")", ".", "getSqlplus", ".", "getExact", "(", ")", ".", "getPluginRegister", "(", ")", ".", "getConfiguration", "(", ")", "OracleConfigurationExtension", ".", "class", "context", ".", "getBean", "(", ")", "(", ")", "Flyway", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 102, "ast_depth": 18, "n_identifiers": 14, "vocab_size": 30, "n_whitespaces": 40, "n_words": 28, "nloc": 10, "token_counts": 68}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#659-668", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "oracleSqlplusWarnIsCorrectlyMapped", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#oracleSqlplusWarnIsCorrectlyMapped", "start_line": 659, "end_line": 668, "signature": "oracleSqlplusWarnIsCorrectlyMapped()", "original_code": "@Test\n\tvoid oracleSqlplusWarnIsCorrectlyMapped() {\n\t\tthis.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class)\n\t\t\t.withPropertyValues(\"spring.flyway.oracle.sqlplus-warn=true\")\n\t\t\t.run((context) -> assertThat(context.getBean(Flyway.class)\n\t\t\t\t.getConfiguration()\n\t\t\t\t.getPluginRegister()\n\t\t\t\t.getExact(OracleConfigurationExtension.class)\n\t\t\t\t.getSqlplusWarn()).isTrue());\n\t}", "doc_comment": ""}, "code_tokens": ["void", "oracleSqlplusWarnIsCorrectlyMapped", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withPropertyValues", "(", ")", ".", "withUserConfiguration", "(", ")", "->", "this", ".", "contextRunner", "(", ")", "\"", "spring.flyway.oracle.sqlplus-warn=true", "\"", "(", "context", ")", ".", "isTrue", "EmbeddedDataSourceConfiguration", ".", "class", "assertThat", "(", ")", "(", ")", ".", "getSqlplusWarn", ".", "getExact", "(", ")", ".", "getPluginRegister", "(", ")", ".", "getConfiguration", "(", ")", "OracleConfigurationExtension", ".", "class", "context", ".", "getBean", "(", ")", "(", ")", "Flyway", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 102, "ast_depth": 18, "n_identifiers": 14, "vocab_size": 30, "n_whitespaces": 39, "n_words": 29, "nloc": 10, "token_counts": 68}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#670-679", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "oracleWallerLocationIsCorrectlyMapped", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#oracleWallerLocationIsCorrectlyMapped", "start_line": 670, "end_line": 679, "signature": "oracleWallerLocationIsCorrectlyMapped()", "original_code": "@Test\n\tvoid oracleWallerLocationIsCorrectlyMapped() {\n\t\tthis.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class)\n\t\t\t.withPropertyValues(\"spring.flyway.oracle.wallet-location=/tmp/my.wallet\")\n\t\t\t.run((context) -> assertThat(context.getBean(Flyway.class)\n\t\t\t\t.getConfiguration()\n\t\t\t\t.getPluginRegister()\n\t\t\t\t.getExact(OracleConfigurationExtension.class)\n\t\t\t\t.getWalletLocation()).isEqualTo(\"/tmp/my.wallet\"));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "oracleWallerLocationIsCorrectlyMapped", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withPropertyValues", "(", ")", ".", "withUserConfiguration", "(", ")", "->", "this", ".", "contextRunner", "(", ")", "\"", "spring.flyway.oracle.wallet-location=/tmp/my.wallet", "\"", "(", "context", ")", ".", "isEqualTo", "EmbeddedDataSourceConfiguration", ".", "class", "assertThat", "(", ")", "(", ")", "\"", "/tmp/my.wallet", "\"", ".", "getWalletLocation", ".", "getExact", "(", ")", ".", "getPluginRegister", "(", ")", ".", "getConfiguration", "(", ")", "OracleConfigurationExtension", ".", "class", "context", ".", "getBean", "(", ")", "(", ")", "Flyway", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 106, "ast_depth": 18, "n_identifiers": 14, "vocab_size": 31, "n_whitespaces": 39, "n_words": 34, "nloc": 10, "token_counts": 71}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#681-690", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "oracleKerberosCacheFileIsCorrectlyMapped", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#oracleKerberosCacheFileIsCorrectlyMapped", "start_line": 681, "end_line": 690, "signature": "oracleKerberosCacheFileIsCorrectlyMapped()", "original_code": "@Test\n\tvoid oracleKerberosCacheFileIsCorrectlyMapped() {\n\t\tthis.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class)\n\t\t\t.withPropertyValues(\"spring.flyway.oracle.kerberos-cache-file=/tmp/cache\")\n\t\t\t.run((context) -> assertThat(context.getBean(Flyway.class)\n\t\t\t\t.getConfiguration()\n\t\t\t\t.getPluginRegister()\n\t\t\t\t.getExact(OracleConfigurationExtension.class)\n\t\t\t\t.getKerberosCacheFile()).isEqualTo(\"/tmp/cache\"));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "oracleKerberosCacheFileIsCorrectlyMapped", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withPropertyValues", "(", ")", ".", "withUserConfiguration", "(", ")", "->", "this", ".", "contextRunner", "(", ")", "\"", "spring.flyway.oracle.kerberos-cache-file=/tmp/cache", "\"", "(", "context", ")", ".", "isEqualTo", "EmbeddedDataSourceConfiguration", ".", "class", "assertThat", "(", ")", "(", ")", "\"", "/tmp/cache", "\"", ".", "getKerberosCacheFile", ".", "getExact", "(", ")", ".", "getPluginRegister", "(", ")", ".", "getConfiguration", "(", ")", "OracleConfigurationExtension", ".", "class", "context", ".", "getBean", "(", ")", "(", ")", "Flyway", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 106, "ast_depth": 18, "n_identifiers": 14, "vocab_size": 31, "n_whitespaces": 39, "n_words": 33, "nloc": 10, "token_counts": 71}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#692-700", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "streamIsCorrectlyMapped", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#streamIsCorrectlyMapped", "start_line": 692, "end_line": 700, "signature": "streamIsCorrectlyMapped()", "original_code": "@Test\n\tvoid streamIsCorrectlyMapped() {\n\t\tthis.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class)\n\t\t\t.withPropertyValues(\"spring.flyway.stream=true\")\n\t\t\t.run((context) -> {\n\t\t\t\tFlyway flyway = context.getBean(Flyway.class);\n\t\t\t\tassertThat(flyway.getConfiguration().getModernConfig().getFlyway().getStream()).isTrue();\n\t\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "streamIsCorrectlyMapped", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withPropertyValues", "(", ")", ".", "withUserConfiguration", "(", ")", "->", "this", ".", "contextRunner", "(", ")", "\"", "spring.flyway.stream=true", "\"", "(", "context", ")", "{", "}", "EmbeddedDataSourceConfiguration", ".", "class", "Flyway", ";", ";", "flyway", "=", ".", "isTrue", "context", ".", "getBean", "assertThat", "(", ")", "(", ")", "(", ")", "Flyway", ".", "class", ".", "getStream", ".", "getFlyway", "(", ")", ".", "getModernConfig", "(", ")", "flyway", ".", "getConfiguration", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 110, "ast_depth": 18, "n_identifiers": 15, "vocab_size": 31, "n_whitespaces": 36, "n_words": 28, "nloc": 9, "token_counts": 73}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#702-711", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "customFlywayClassLoader", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#customFlywayClassLoader", "start_line": 702, "end_line": 711, "signature": "customFlywayClassLoader()", "original_code": "@Test\n\tvoid customFlywayClassLoader() {\n\t\tthis.contextRunner\n\t\t\t.withUserConfiguration(EmbeddedDataSourceConfiguration.class, ResourceLoaderConfiguration.class)\n\t\t\t.run((context) -> {\n\t\t\t\tassertThat(context).hasSingleBean(Flyway.class);\n\t\t\t\tFlyway flyway = context.getBean(Flyway.class);\n\t\t\t\tassertThat(flyway.getConfiguration().getClassLoader()).isInstanceOf(CustomClassLoader.class);\n\t\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "customFlywayClassLoader", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withUserConfiguration", "(", ")", "this", ".", "contextRunner", "(", ",", ")", "->", "EmbeddedDataSourceConfiguration", ".", "class", "ResourceLoaderConfiguration", ".", "class", "(", "context", ")", "{", "}", ";", "Flyway", ";", ";", ".", "hasSingleBean", "flyway", "=", ".", "isInstanceOf", "assertThat", "(", ")", "context", ".", "getBean", "assertThat", "(", ")", "(", "context", ")", "Flyway", ".", "class", "(", ")", "(", ")", "CustomClassLoader", ".", "class", "Flyway", ".", "class", ".", "getClassLoader", "flyway", ".", "getConfiguration", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 115, "ast_depth": 16, "n_identifiers": 13, "vocab_size": 30, "n_whitespaces": 42, "n_words": 30, "nloc": 10, "token_counts": 77}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#713-721", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "initSqlsWithDataSource", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#initSqlsWithDataSource", "start_line": 713, "end_line": 721, "signature": "initSqlsWithDataSource()", "original_code": "@Test\n\tvoid initSqlsWithDataSource() {\n\t\tthis.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class)\n\t\t\t.withPropertyValues(\"spring.flyway.init-sqls=SELECT 1\")\n\t\t\t.run((context) -> {\n\t\t\t\tFlyway flyway = context.getBean(Flyway.class);\n\t\t\t\tassertThat(flyway.getConfiguration().getInitSql()).isEqualTo(\"SELECT 1\");\n\t\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "initSqlsWithDataSource", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withPropertyValues", "(", ")", ".", "withUserConfiguration", "(", ")", "->", "this", ".", "contextRunner", "(", ")", "\"", "spring.flyway.init-sqls=SELECT 1", "\"", "(", "context", ")", "{", "}", "EmbeddedDataSourceConfiguration", ".", "class", "Flyway", ";", ";", "flyway", "=", ".", "isEqualTo", "context", ".", "getBean", "assertThat", "(", ")", "(", ")", "(", ")", "\"", "SELECT 1", "\"", "Flyway", ".", "class", ".", "getInitSql", "flyway", ".", "getConfiguration", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 102, "ast_depth": 16, "n_identifiers": 13, "vocab_size": 30, "n_whitespaces": 38, "n_words": 30, "nloc": 9, "token_counts": 68}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#723-732", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "initSqlsWithFlywayUrl", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#initSqlsWithFlywayUrl", "start_line": 723, "end_line": 732, "signature": "initSqlsWithFlywayUrl()", "original_code": "@Test\n\tvoid initSqlsWithFlywayUrl() {\n\t\tthis.contextRunner\n\t\t\t.withPropertyValues(\"spring.flyway.url:jdbc:h2:mem:\" + UUID.randomUUID(),\n\t\t\t\t\t\"spring.flyway.init-sqls=SELECT 1\")\n\t\t\t.run((context) -> {\n\t\t\t\tFlyway flyway = context.getBean(Flyway.class);\n\t\t\t\tassertThat(flyway.getConfiguration().getInitSql()).isEqualTo(\"SELECT 1\");\n\t\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "initSqlsWithFlywayUrl", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withPropertyValues", "(", ")", "this", ".", "contextRunner", "(", ",", ")", "->", "+", "\"", "spring.flyway.init-sqls=SELECT 1", "\"", "(", "context", ")", "{", "}", "\"", "spring.flyway.url:jdbc:h2:mem:", "\"", "UUID", ".", "randomUUID", "Flyway", ";", ";", "(", ")", "flyway", "=", ".", "isEqualTo", "context", ".", "getBean", "assertThat", "(", ")", "(", ")", "(", ")", "\"", "SELECT 1", "\"", "Flyway", ".", "class", ".", "getInitSql", "flyway", ".", "getConfiguration", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 106, "ast_depth": 16, "n_identifiers": 14, "vocab_size": 33, "n_whitespaces": 46, "n_words": 35, "nloc": 10, "token_counts": 71}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#734-745", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "jdbcPropertiesAreCorrectlyMapped", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#jdbcPropertiesAreCorrectlyMapped", "start_line": 734, "end_line": 745, "signature": "jdbcPropertiesAreCorrectlyMapped()", "original_code": "@Test\n\tvoid jdbcPropertiesAreCorrectlyMapped() {\n\t\tthis.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class)\n\t\t\t.withPropertyValues(\"spring.flyway.jdbc-properties.prop=value\")\n\t\t\t.run((context) -> {\n\t\t\t\tFlyway flyway = context.getBean(Flyway.class);\n\t\t\t\tassertThat(flyway.getConfiguration()\n\t\t\t\t\t.getCachedResolvedEnvironments()\n\t\t\t\t\t.get(flyway.getConfiguration().getCurrentEnvironmentName())\n\t\t\t\t\t.getJdbcProperties()).containsEntry(\"prop\", \"value\");\n\t\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "jdbcPropertiesAreCorrectlyMapped", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withPropertyValues", "(", ")", ".", "withUserConfiguration", "(", ")", "->", "this", ".", "contextRunner", "(", ")", "\"", "spring.flyway.jdbc-properties.prop=value", "\"", "(", "context", ")", "{", "}", "EmbeddedDataSourceConfiguration", ".", "class", "Flyway", ";", ";", "flyway", "=", ".", "containsEntry", "context", ".", "getBean", "assertThat", "(", ",", ")", "(", ")", "(", ")", "\"", "prop", "\"", "\"", "value", "\"", "Flyway", ".", "class", ".", "getJdbcProperties", ".", "get", "(", ")", ".", "getCachedResolvedEnvironments", "(", ")", "flyway", ".", "getConfiguration", "(", ")", ".", "getCurrentEnvironmentName", "(", ")", "flyway", ".", "getConfiguration", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 132, "ast_depth": 19, "n_identifiers": 16, "vocab_size": 35, "n_whitespaces": 55, "n_words": 35, "nloc": 12, "token_counts": 89}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#747-752", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "kerberosConfigFileIsCorrectlyMapped", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#kerberosConfigFileIsCorrectlyMapped", "start_line": 747, "end_line": 752, "signature": "kerberosConfigFileIsCorrectlyMapped()", "original_code": "@Test\n\tvoid kerberosConfigFileIsCorrectlyMapped() {\n\t\tthis.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class)\n\t\t\t.withPropertyValues(\"spring.flyway.kerberos-config-file=/tmp/config\")\n\t\t\t.run(validateFlywayTeamsPropertyOnly(\"kerberosConfigFile\"));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "kerberosConfigFileIsCorrectlyMapped", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withPropertyValues", "(", ")", ".", "withUserConfiguration", "(", ")", "validateFlywayTeamsPropertyOnly", "this", ".", "contextRunner", "(", ")", "\"", "spring.flyway.kerberos-config-file=/tmp/config", "\"", "(", ")", "EmbeddedDataSourceConfiguration", ".", "class", "\"", "kerberosConfigFile", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 55, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 21, "n_whitespaces": 17, "n_words": 19, "nloc": 6, "token_counts": 36}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#754-762", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "outputQueryResultsIsCorrectlyMapped", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#outputQueryResultsIsCorrectlyMapped", "start_line": 754, "end_line": 762, "signature": "outputQueryResultsIsCorrectlyMapped()", "original_code": "@Test\n\tvoid outputQueryResultsIsCorrectlyMapped() {\n\t\tthis.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class)\n\t\t\t.withPropertyValues(\"spring.flyway.output-query-results=false\")\n\t\t\t.run((context) -> {\n\t\t\t\tFlyway flyway = context.getBean(Flyway.class);\n\t\t\t\tassertThat(flyway.getConfiguration().getModernConfig().getFlyway().getOutputQueryResults()).isFalse();\n\t\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "outputQueryResultsIsCorrectlyMapped", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withPropertyValues", "(", ")", ".", "withUserConfiguration", "(", ")", "->", "this", ".", "contextRunner", "(", ")", "\"", "spring.flyway.output-query-results=false", "\"", "(", "context", ")", "{", "}", "EmbeddedDataSourceConfiguration", ".", "class", "Flyway", ";", ";", "flyway", "=", ".", "isFalse", "context", ".", "getBean", "assertThat", "(", ")", "(", ")", "(", ")", "Flyway", ".", "class", ".", "getOutputQueryResults", ".", "getFlyway", "(", ")", ".", "getModernConfig", "(", ")", "flyway", ".", "getConfiguration", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 110, "ast_depth": 18, "n_identifiers": 15, "vocab_size": 31, "n_whitespaces": 36, "n_words": 30, "nloc": 9, "token_counts": 73}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#764-770", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "powershellExecutableIsCorrectlyMapped", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#powershellExecutableIsCorrectlyMapped", "start_line": 764, "end_line": 770, "signature": "powershellExecutableIsCorrectlyMapped()", "original_code": "@Test\n\tvoid powershellExecutableIsCorrectlyMapped() {\n\t\tthis.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class)\n\t\t\t.withPropertyValues(\"spring.flyway.powershell-executable=my-pwsh\")\n\t\t\t.run((context) -> assertThat(context.getBean(Flyway.class).getConfiguration().getPowershellExecutable())\n\t\t\t\t.isEqualTo(\"my-pwsh\"));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "powershellExecutableIsCorrectlyMapped", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withPropertyValues", "(", ")", ".", "withUserConfiguration", "(", ")", "->", "this", ".", "contextRunner", "(", ")", "\"", "spring.flyway.powershell-executable=my-pwsh", "\"", "(", "context", ")", ".", "isEqualTo", "EmbeddedDataSourceConfiguration", ".", "class", "assertThat", "(", ")", "(", ")", "\"", "my-pwsh", "\"", ".", "getPowershellExecutable", ".", "getConfiguration", "(", ")", "context", ".", "getBean", "(", ")", "(", ")", "Flyway", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 90, "ast_depth": 16, "n_identifiers": 12, "vocab_size": 28, "n_whitespaces": 24, "n_words": 27, "nloc": 7, "token_counts": 60}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#772-777", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "postgresqlExtensionIsNotLoadedByDefault", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#postgresqlExtensionIsNotLoadedByDefault", "start_line": 772, "end_line": 777, "signature": "postgresqlExtensionIsNotLoadedByDefault()", "original_code": "@Test\n\tvoid postgresqlExtensionIsNotLoadedByDefault() {\n\t\tFluentConfiguration configuration = mock(FluentConfiguration.class);\n\t\tnew PostgresqlFlywayConfigurationCustomizer(new FlywayProperties()).customize(configuration);\n\t\tthen(configuration).shouldHaveNoInteractions();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "postgresqlExtensionIsNotLoadedByDefault", "(", ")", "{", "}", "@", "Test", "FluentConfiguration", ";", ";", ";", "configuration", "=", ".", "customize", ".", "shouldHaveNoInteractions", "mock", "new", "PostgresqlFlywayConfigurationCustomizer", "(", "configuration", ")", "then", "(", ")", "(", ")", "(", ")", "(", "configuration", ")", "FluentConfiguration", ".", "class", "new", "FlywayProperties", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 64, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 21, "n_whitespaces": 20, "n_words": 17, "nloc": 6, "token_counts": 41}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#779-788", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "postgresqlTransactionalLockIsCorrectlyMapped", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#postgresqlTransactionalLockIsCorrectlyMapped", "start_line": 779, "end_line": 788, "signature": "postgresqlTransactionalLockIsCorrectlyMapped()", "original_code": "@Test\n\tvoid postgresqlTransactionalLockIsCorrectlyMapped() {\n\t\tthis.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class)\n\t\t\t.withPropertyValues(\"spring.flyway.postgresql.transactional-lock=false\")\n\t\t\t.run((context) -> assertThat(context.getBean(Flyway.class)\n\t\t\t\t.getConfiguration()\n\t\t\t\t.getPluginRegister()\n\t\t\t\t.getExact(PostgreSQLConfigurationExtension.class)\n\t\t\t\t.isTransactionalLock()).isFalse());\n\t}", "doc_comment": ""}, "code_tokens": ["void", "postgresqlTransactionalLockIsCorrectlyMapped", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withPropertyValues", "(", ")", ".", "withUserConfiguration", "(", ")", "->", "this", ".", "contextRunner", "(", ")", "\"", "spring.flyway.postgresql.transactional-lock=false", "\"", "(", "context", ")", ".", "isFalse", "EmbeddedDataSourceConfiguration", ".", "class", "assertThat", "(", ")", "(", ")", ".", "isTransactionalLock", ".", "getExact", "(", ")", ".", "getPluginRegister", "(", ")", ".", "getConfiguration", "(", ")", "PostgreSQLConfigurationExtension", ".", "class", "context", ".", "getBean", "(", ")", "(", ")", "Flyway", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 102, "ast_depth": 18, "n_identifiers": 14, "vocab_size": 30, "n_whitespaces": 39, "n_words": 29, "nloc": 10, "token_counts": 68}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#790-795", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "sqlServerExtensionIsNotLoadedByDefault", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#sqlServerExtensionIsNotLoadedByDefault", "start_line": 790, "end_line": 795, "signature": "sqlServerExtensionIsNotLoadedByDefault()", "original_code": "@Test\n\tvoid sqlServerExtensionIsNotLoadedByDefault() {\n\t\tFluentConfiguration configuration = mock(FluentConfiguration.class);\n\t\tnew SqlServerFlywayConfigurationCustomizer(new FlywayProperties()).customize(configuration);\n\t\tthen(configuration).shouldHaveNoInteractions();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "sqlServerExtensionIsNotLoadedByDefault", "(", ")", "{", "}", "@", "Test", "FluentConfiguration", ";", ";", ";", "configuration", "=", ".", "customize", ".", "shouldHaveNoInteractions", "mock", "new", "SqlServerFlywayConfigurationCustomizer", "(", "configuration", ")", "then", "(", ")", "(", ")", "(", ")", "(", "configuration", ")", "FluentConfiguration", ".", "class", "new", "FlywayProperties", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 64, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 21, "n_whitespaces": 20, "n_words": 17, "nloc": 6, "token_counts": 41}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#797-808", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "sqlServerKerberosLoginFileIsCorrectlyMapped", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#sqlServerKerberosLoginFileIsCorrectlyMapped", "start_line": 797, "end_line": 808, "signature": "sqlServerKerberosLoginFileIsCorrectlyMapped()", "original_code": "@Test\n\tvoid sqlServerKerberosLoginFileIsCorrectlyMapped() {\n\t\tthis.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class)\n\t\t\t.withPropertyValues(\"spring.flyway.sqlserver.kerberos-login-file=/tmp/config\")\n\t\t\t.run((context) -> assertThat(context.getBean(Flyway.class)\n\t\t\t\t.getConfiguration()\n\t\t\t\t.getPluginRegister()\n\t\t\t\t.getExact(SQLServerConfigurationExtension.class)\n\t\t\t\t.getKerberos()\n\t\t\t\t.getLogin()\n\t\t\t\t.getFile()).isEqualTo(\"/tmp/config\"));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "sqlServerKerberosLoginFileIsCorrectlyMapped", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withPropertyValues", "(", ")", ".", "withUserConfiguration", "(", ")", "->", "this", ".", "contextRunner", "(", ")", "\"", "spring.flyway.sqlserver.kerberos-login-file=/tmp/config", "\"", "(", "context", ")", ".", "isEqualTo", "EmbeddedDataSourceConfiguration", ".", "class", "assertThat", "(", ")", "(", ")", "\"", "/tmp/config", "\"", ".", "getFile", ".", "getLogin", "(", ")", ".", "getKerberos", "(", ")", ".", "getExact", "(", ")", ".", "getPluginRegister", "(", ")", ".", "getConfiguration", "(", ")", "SQLServerConfigurationExtension", ".", "class", "context", ".", "getBean", "(", ")", "(", ")", "Flyway", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 118, "ast_depth": 20, "n_identifiers": 16, "vocab_size": 33, "n_whitespaces": 49, "n_words": 35, "nloc": 12, "token_counts": 79}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#810-819", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "skipExecutingMigrationsIsCorrectlyMapped", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#skipExecutingMigrationsIsCorrectlyMapped", "start_line": 810, "end_line": 819, "signature": "skipExecutingMigrationsIsCorrectlyMapped()", "original_code": "@Test\n\tvoid skipExecutingMigrationsIsCorrectlyMapped() {\n\t\tthis.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class)\n\t\t\t.withPropertyValues(\"spring.flyway.skip-executing-migrations=true\")\n\t\t\t.run((context) -> {\n\t\t\t\tFlyway flyway = context.getBean(Flyway.class);\n\t\t\t\tassertThat(flyway.getConfiguration().getModernConfig().getFlyway().getSkipExecutingMigrations())\n\t\t\t\t\t.isTrue();\n\t\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "skipExecutingMigrationsIsCorrectlyMapped", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withPropertyValues", "(", ")", ".", "withUserConfiguration", "(", ")", "->", "this", ".", "contextRunner", "(", ")", "\"", "spring.flyway.skip-executing-migrations=true", "\"", "(", "context", ")", "{", "}", "EmbeddedDataSourceConfiguration", ".", "class", "Flyway", ";", ";", "flyway", "=", ".", "isTrue", "context", ".", "getBean", "assertThat", "(", ")", "(", ")", "(", ")", "Flyway", ".", "class", ".", "getSkipExecutingMigrations", ".", "getFlyway", "(", ")", ".", "getModernConfig", "(", ")", "flyway", ".", "getConfiguration", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 110, "ast_depth": 18, "n_identifiers": 15, "vocab_size": 31, "n_whitespaces": 42, "n_words": 30, "nloc": 10, "token_counts": 73}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#821-828", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "whenFlywayIsAutoConfiguredThenJooqDslContextDependsOnFlywayBeans", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#whenFlywayIsAutoConfiguredThenJooqDslContextDependsOnFlywayBeans", "start_line": 821, "end_line": 828, "signature": "whenFlywayIsAutoConfiguredThenJooqDslContextDependsOnFlywayBeans()", "original_code": "@Test\n\tvoid whenFlywayIsAutoConfiguredThenJooqDslContextDependsOnFlywayBeans() {\n\t\tthis.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class, JooqConfiguration.class)\n\t\t\t.run((context) -> {\n\t\t\t\tBeanDefinition beanDefinition = context.getBeanFactory().getBeanDefinition(\"dslContext\");\n\t\t\t\tassertThat(beanDefinition.getDependsOn()).containsExactlyInAnyOrder(\"flywayInitializer\", \"flyway\");\n\t\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "whenFlywayIsAutoConfiguredThenJooqDslContextDependsOnFlywayBeans", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withUserConfiguration", "(", ")", "this", ".", "contextRunner", "(", ",", ")", "->", "EmbeddedDataSourceConfiguration", ".", "class", "JooqConfiguration", ".", "class", "(", "context", ")", "{", "}", "BeanDefinition", ";", ";", "beanDefinition", "=", ".", "containsExactlyInAnyOrder", ".", "getBeanDefinition", "assertThat", "(", ",", ")", "context", ".", "getBeanFactory", "(", ")", "(", ")", "\"", "flywayInitializer", "\"", "\"", "flyway", "\"", "(", ")", "\"", "dslContext", "\"", "beanDefinition", ".", "getDependsOn", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 102, "ast_depth": 15, "n_identifiers": 12, "vocab_size": 32, "n_whitespaces": 34, "n_words": 24, "nloc": 8, "token_counts": 69}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#830-840", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "whenCustomMigrationInitializerIsDefinedThenJooqDslContextDependsOnIt", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#whenCustomMigrationInitializerIsDefinedThenJooqDslContextDependsOnIt", "start_line": 830, "end_line": 840, "signature": "whenCustomMigrationInitializerIsDefinedThenJooqDslContextDependsOnIt()", "original_code": "@Test\n\tvoid whenCustomMigrationInitializerIsDefinedThenJooqDslContextDependsOnIt() {\n\t\tthis.contextRunner\n\t\t\t.withUserConfiguration(EmbeddedDataSourceConfiguration.class, JooqConfiguration.class,\n\t\t\t\t\tCustomFlywayMigrationInitializer.class)\n\t\t\t.run((context) -> {\n\t\t\t\tBeanDefinition beanDefinition = context.getBeanFactory().getBeanDefinition(\"dslContext\");\n\t\t\t\tassertThat(beanDefinition.getDependsOn()).containsExactlyInAnyOrder(\"flywayMigrationInitializer\",\n\t\t\t\t\t\t\"flyway\");\n\t\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "whenCustomMigrationInitializerIsDefinedThenJooqDslContextDependsOnIt", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withUserConfiguration", "(", ")", "this", ".", "contextRunner", "(", ",", ",", ")", "->", "EmbeddedDataSourceConfiguration", ".", "class", "JooqConfiguration", ".", "class", "CustomFlywayMigrationInitializer", ".", "class", "(", "context", ")", "{", "}", "BeanDefinition", ";", ";", "beanDefinition", "=", ".", "containsExactlyInAnyOrder", ".", "getBeanDefinition", "assertThat", "(", ",", ")", "context", ".", "getBeanFactory", "(", ")", "(", ")", "\"", "flywayMigrationInitializer", "\"", "\"", "flyway", "\"", "(", ")", "\"", "dslContext", "\"", "beanDefinition", ".", "getDependsOn", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 107, "ast_depth": 15, "n_identifiers": 12, "vocab_size": 33, "n_whitespaces": 50, "n_words": 26, "nloc": 11, "token_counts": 73}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#842-850", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "whenCustomFlywayIsDefinedThenJooqDslContextDependsOnIt", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#whenCustomFlywayIsDefinedThenJooqDslContextDependsOnIt", "start_line": 842, "end_line": 850, "signature": "whenCustomFlywayIsDefinedThenJooqDslContextDependsOnIt()", "original_code": "@Test\n\tvoid whenCustomFlywayIsDefinedThenJooqDslContextDependsOnIt() {\n\t\tthis.contextRunner\n\t\t\t.withUserConfiguration(EmbeddedDataSourceConfiguration.class, JooqConfiguration.class, CustomFlyway.class)\n\t\t\t.run((context) -> {\n\t\t\t\tBeanDefinition beanDefinition = context.getBeanFactory().getBeanDefinition(\"dslContext\");\n\t\t\t\tassertThat(beanDefinition.getDependsOn()).containsExactlyInAnyOrder(\"customFlyway\");\n\t\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "whenCustomFlywayIsDefinedThenJooqDslContextDependsOnIt", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withUserConfiguration", "(", ")", "this", ".", "contextRunner", "(", ",", ",", ")", "->", "EmbeddedDataSourceConfiguration", ".", "class", "JooqConfiguration", ".", "class", "CustomFlyway", ".", "class", "(", "context", ")", "{", "}", "BeanDefinition", ";", ";", "beanDefinition", "=", ".", "containsExactlyInAnyOrder", ".", "getBeanDefinition", "assertThat", "(", ")", "context", ".", "getBeanFactory", "(", ")", "(", ")", "\"", "customFlyway", "\"", "(", ")", "\"", "dslContext", "\"", "beanDefinition", ".", "getDependsOn", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 102, "ast_depth": 15, "n_identifiers": 12, "vocab_size": 32, "n_whitespaces": 38, "n_words": 25, "nloc": 9, "token_counts": 69}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#852-858", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "scriptPlaceholderPrefixIsCorrectlyMapped", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#scriptPlaceholderPrefixIsCorrectlyMapped", "start_line": 852, "end_line": 858, "signature": "scriptPlaceholderPrefixIsCorrectlyMapped()", "original_code": "@Test\n\tvoid scriptPlaceholderPrefixIsCorrectlyMapped() {\n\t\tthis.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class)\n\t\t\t.withPropertyValues(\"spring.flyway.script-placeholder-prefix=SPP\")\n\t\t\t.run((context) -> assertThat(context.getBean(Flyway.class).getConfiguration().getScriptPlaceholderPrefix())\n\t\t\t\t.isEqualTo(\"SPP\"));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "scriptPlaceholderPrefixIsCorrectlyMapped", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withPropertyValues", "(", ")", ".", "withUserConfiguration", "(", ")", "->", "this", ".", "contextRunner", "(", ")", "\"", "spring.flyway.script-placeholder-prefix=SPP", "\"", "(", "context", ")", ".", "isEqualTo", "EmbeddedDataSourceConfiguration", ".", "class", "assertThat", "(", ")", "(", ")", "\"", "SPP", "\"", ".", "getScriptPlaceholderPrefix", ".", "getConfiguration", "(", ")", "context", ".", "getBean", "(", ")", "(", ")", "Flyway", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 90, "ast_depth": 16, "n_identifiers": 12, "vocab_size": 28, "n_whitespaces": 24, "n_words": 26, "nloc": 7, "token_counts": 60}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#860-866", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "scriptPlaceholderSuffixIsCorrectlyMapped", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#scriptPlaceholderSuffixIsCorrectlyMapped", "start_line": 860, "end_line": 866, "signature": "scriptPlaceholderSuffixIsCorrectlyMapped()", "original_code": "@Test\n\tvoid scriptPlaceholderSuffixIsCorrectlyMapped() {\n\t\tthis.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class)\n\t\t\t.withPropertyValues(\"spring.flyway.script-placeholder-suffix=SPS\")\n\t\t\t.run((context) -> assertThat(context.getBean(Flyway.class).getConfiguration().getScriptPlaceholderSuffix())\n\t\t\t\t.isEqualTo(\"SPS\"));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "scriptPlaceholderSuffixIsCorrectlyMapped", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withPropertyValues", "(", ")", ".", "withUserConfiguration", "(", ")", "->", "this", ".", "contextRunner", "(", ")", "\"", "spring.flyway.script-placeholder-suffix=SPS", "\"", "(", "context", ")", ".", "isEqualTo", "EmbeddedDataSourceConfiguration", ".", "class", "assertThat", "(", ")", "(", ")", "\"", "SPS", "\"", ".", "getScriptPlaceholderSuffix", ".", "getConfiguration", "(", ")", "context", ".", "getBean", "(", ")", "(", ")", "Flyway", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 90, "ast_depth": 16, "n_identifiers": 12, "vocab_size": 28, "n_whitespaces": 24, "n_words": 26, "nloc": 7, "token_counts": 60}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#868-872", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "containsResourceProviderCustomizer", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#containsResourceProviderCustomizer", "start_line": 868, "end_line": 872, "signature": "containsResourceProviderCustomizer()", "original_code": "@Test\n\tvoid containsResourceProviderCustomizer() {\n\t\tthis.contextRunner.withPropertyValues(\"spring.flyway.url:jdbc:hsqldb:mem:\" + UUID.randomUUID())\n\t\t\t.run((context) -> assertThat(context).hasSingleBean(ResourceProviderCustomizer.class));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "containsResourceProviderCustomizer", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withPropertyValues", "(", ")", "this", ".", "contextRunner", "(", ")", "->", "+", "(", "context", ")", ".", "hasSingleBean", "\"", "spring.flyway.url:jdbc:hsqldb:mem:", "\"", "UUID", ".", "randomUUID", "assertThat", "(", ")", "(", ")", "(", "context", ")", "ResourceProviderCustomizer", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 67, "ast_depth": 11, "n_identifiers": 10, "vocab_size": 25, "n_whitespaces": 17, "n_words": 21, "nloc": 5, "token_counts": 44}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#874-879", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "loggers", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#loggers", "start_line": 874, "end_line": 879, "signature": "loggers()", "original_code": "@Test\n\tvoid loggers() {\n\t\tthis.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class)\n\t\t\t.run((context) -> assertThat(context.getBean(Flyway.class).getConfiguration().getLoggers())\n\t\t\t\t.containsExactly(\"slf4j\"));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "loggers", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withUserConfiguration", "(", ")", "this", ".", "contextRunner", "(", ")", "->", "EmbeddedDataSourceConfiguration", ".", "class", "(", "context", ")", ".", "containsExactly", "assertThat", "(", ")", "(", ")", "\"", "slf4j", "\"", ".", "getLoggers", ".", "getConfiguration", "(", ")", "context", ".", "getBean", "(", ")", "(", ")", "Flyway", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 80, "ast_depth": 16, "n_identifiers": 11, "vocab_size": 26, "n_whitespaces": 20, "n_words": 19, "nloc": 6, "token_counts": 53}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#881-887", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "overrideLoggers", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#overrideLoggers", "start_line": 881, "end_line": 887, "signature": "overrideLoggers()", "original_code": "@Test\n\tvoid overrideLoggers() {\n\t\tthis.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class)\n\t\t\t.withPropertyValues(\"spring.flyway.loggers=apache-commons\")\n\t\t\t.run((context) -> assertThat(context.getBean(Flyway.class).getConfiguration().getLoggers())\n\t\t\t\t.containsExactly(\"apache-commons\"));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "overrideLoggers", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withPropertyValues", "(", ")", ".", "withUserConfiguration", "(", ")", "->", "this", ".", "contextRunner", "(", ")", "\"", "spring.flyway.loggers=apache-commons", "\"", "(", "context", ")", ".", "containsExactly", "EmbeddedDataSourceConfiguration", ".", "class", "assertThat", "(", ")", "(", ")", "\"", "apache-commons", "\"", ".", "getLoggers", ".", "getConfiguration", "(", ")", "context", ".", "getBean", "(", ")", "(", ")", "Flyway", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 90, "ast_depth": 16, "n_identifiers": 12, "vocab_size": 28, "n_whitespaces": 24, "n_words": 26, "nloc": 7, "token_counts": 60}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#889-895", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "shouldRegisterResourceHints", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#shouldRegisterResourceHints", "start_line": 889, "end_line": 895, "signature": "shouldRegisterResourceHints()", "original_code": "@Test\n\tvoid shouldRegisterResourceHints() {\n\t\tRuntimeHints runtimeHints = new RuntimeHints();\n\t\tnew FlywayAutoConfigurationRuntimeHints().registerHints(runtimeHints, getClass().getClassLoader());\n\t\tassertThat(RuntimeHintsPredicates.resource().forResource(\"db/migration/\")).accepts(runtimeHints);\n\t\tassertThat(RuntimeHintsPredicates.resource().forResource(\"db/migration/V1__init.sql\")).accepts(runtimeHints);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "shouldRegisterResourceHints", "(", ")", "{", "}", "@", "Test", "RuntimeHints", ";", ";", ";", ";", "runtimeHints", "=", ".", "registerHints", ".", "accepts", ".", "accepts", "new", "RuntimeHints", "new", "FlywayAutoConfigurationRuntimeHints", "(", "runtimeHints", ",", ")", "assertThat", "(", "runtimeHints", ")", "assertThat", "(", "runtimeHints", ")", "(", ")", "(", ")", ".", "getClassLoader", "(", ")", "(", ")", "getClass", "(", ")", ".", "forResource", ".", "forResource", "(", ")", "RuntimeHintsPredicates", ".", "resource", "(", ")", "RuntimeHintsPredicates", ".", "resource", "(", ")", "(", ")", "\"", "db/migration/", "\"", "(", ")", "\"", "db/migration/V1__init.sql", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 115, "ast_depth": 11, "n_identifiers": 11, "vocab_size": 27, "n_whitespaces": 24, "n_words": 31, "nloc": 7, "token_counts": 76}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#897-903", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "detectEncodingCorrectlyMapped", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#detectEncodingCorrectlyMapped", "start_line": 897, "end_line": 903, "signature": "detectEncodingCorrectlyMapped()", "original_code": "@Test\n\tvoid detectEncodingCorrectlyMapped() {\n\t\tthis.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class)\n\t\t\t.withPropertyValues(\"spring.flyway.detect-encoding=true\")\n\t\t\t.run((context) -> assertThat(context.getBean(Flyway.class).getConfiguration().isDetectEncoding())\n\t\t\t\t.isEqualTo(true));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "detectEncodingCorrectlyMapped", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withPropertyValues", "(", ")", ".", "withUserConfiguration", "(", ")", "->", "this", ".", "contextRunner", "(", ")", "\"", "spring.flyway.detect-encoding=true", "\"", "(", "context", ")", ".", "isEqualTo", "EmbeddedDataSourceConfiguration", ".", "class", "assertThat", "(", "true", ")", "(", ")", ".", "isDetectEncoding", ".", "getConfiguration", "(", ")", "context", ".", "getBean", "(", ")", "(", ")", "Flyway", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 87, "ast_depth": 16, "n_identifiers": 12, "vocab_size": 28, "n_whitespaces": 24, "n_words": 25, "nloc": 7, "token_counts": 58}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#905-911", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "ignoreMigrationPatternsCorrectlyMapped", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#ignoreMigrationPatternsCorrectlyMapped", "start_line": 905, "end_line": 911, "signature": "ignoreMigrationPatternsCorrectlyMapped()", "original_code": "@Test\n\tvoid ignoreMigrationPatternsCorrectlyMapped() {\n\t\tthis.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class)\n\t\t\t.withPropertyValues(\"spring.flyway.ignore-migration-patterns=*:missing\")\n\t\t\t.run((context) -> assertThat(context.getBean(Flyway.class).getConfiguration().getIgnoreMigrationPatterns())\n\t\t\t\t.containsExactly(ValidatePattern.fromPattern(\"*:missing\")));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "ignoreMigrationPatternsCorrectlyMapped", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withPropertyValues", "(", ")", ".", "withUserConfiguration", "(", ")", "->", "this", ".", "contextRunner", "(", ")", "\"", "spring.flyway.ignore-migration-patterns=*:missing", "\"", "(", "context", ")", ".", "containsExactly", "EmbeddedDataSourceConfiguration", ".", "class", "assertThat", "(", ")", "(", ")", "ValidatePattern", ".", "fromPattern", ".", "getIgnoreMigrationPatterns", "(", ")", ".", "getConfiguration", "(", ")", "\"", "*:missing", "\"", "context", ".", "getBean", "(", ")", "(", ")", "Flyway", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 97, "ast_depth": 16, "n_identifiers": 14, "vocab_size": 30, "n_whitespaces": 24, "n_words": 28, "nloc": 7, "token_counts": 65}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#913-918", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "ignoreMigrationPatternsUsesDefaultValuesWhenNotSet", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#ignoreMigrationPatternsUsesDefaultValuesWhenNotSet", "start_line": 913, "end_line": 918, "signature": "ignoreMigrationPatternsUsesDefaultValuesWhenNotSet()", "original_code": "@Test\n\tvoid ignoreMigrationPatternsUsesDefaultValuesWhenNotSet() {\n\t\tthis.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class)\n\t\t\t.run((context) -> assertThat(context.getBean(Flyway.class).getConfiguration().getIgnoreMigrationPatterns())\n\t\t\t\t.containsExactly(new FluentConfiguration().getIgnoreMigrationPatterns()));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "ignoreMigrationPatternsUsesDefaultValuesWhenNotSet", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withUserConfiguration", "(", ")", "this", ".", "contextRunner", "(", ")", "->", "EmbeddedDataSourceConfiguration", ".", "class", "(", "context", ")", ".", "containsExactly", "assertThat", "(", ")", "(", ")", ".", "getIgnoreMigrationPatterns", ".", "getIgnoreMigrationPatterns", "new", "FluentConfiguration", "(", ")", ".", "getConfiguration", "(", ")", "(", ")", "context", ".", "getBean", "(", ")", "(", ")", "Flyway", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 88, "ast_depth": 16, "n_identifiers": 11, "vocab_size": 26, "n_whitespaces": 21, "n_words": 21, "nloc": 6, "token_counts": 58}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#920-926", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "ignoreMigrationPatternsWhenEmpty", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#ignoreMigrationPatternsWhenEmpty", "start_line": 920, "end_line": 926, "signature": "ignoreMigrationPatternsWhenEmpty()", "original_code": "@Test\n\tvoid ignoreMigrationPatternsWhenEmpty() {\n\t\tthis.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class)\n\t\t\t.withPropertyValues(\"spring.flyway.ignore-migration-patterns=\")\n\t\t\t.run((context) -> assertThat(context.getBean(Flyway.class).getConfiguration().getIgnoreMigrationPatterns())\n\t\t\t\t.isEmpty());\n\t}", "doc_comment": ""}, "code_tokens": ["void", "ignoreMigrationPatternsWhenEmpty", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withPropertyValues", "(", ")", ".", "withUserConfiguration", "(", ")", "->", "this", ".", "contextRunner", "(", ")", "\"", "spring.flyway.ignore-migration-patterns=", "\"", "(", "context", ")", ".", "isEmpty", "EmbeddedDataSourceConfiguration", ".", "class", "assertThat", "(", ")", "(", ")", ".", "getIgnoreMigrationPatterns", ".", "getConfiguration", "(", ")", "context", ".", "getBean", "(", ")", "(", ")", "Flyway", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 86, "ast_depth": 16, "n_identifiers": 12, "vocab_size": 27, "n_whitespaces": 24, "n_words": 24, "nloc": 7, "token_counts": 57}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#928-935", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "validateFlywayTeamsPropertyOnly", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#validateFlywayTeamsPropertyOnly", "start_line": 928, "end_line": 935, "signature": "validateFlywayTeamsPropertyOnly(String propertyName)", "original_code": "private ContextConsumer<AssertableApplicationContext> validateFlywayTeamsPropertyOnly(String propertyName) {\n\t\treturn (context) -> {\n\t\t\tassertThat(context).hasFailed();\n\t\t\tThrowable failure = context.getStartupFailure();\n\t\t\tassertThat(failure).hasRootCauseInstanceOf(FlywayEditionUpgradeRequiredException.class);\n\t\t\tassertThat(failure).hasMessageContaining(String.format(\" %s \", propertyName));\n\t\t};\n\t}", "doc_comment": ""}, "code_tokens": ["validateFlywayTeamsPropertyOnly", "private", "ContextConsumer", "(", ")", "{", "}", "<", "AssertableApplicationContext", ">", "String", "propertyName", "return", ";", "->", "(", "context", ")", "{", "}", ";", "Throwable", ";", ";", ";", ".", "hasFailed", "failure", "=", ".", "hasRootCauseInstanceOf", ".", "hasMessageContaining", "assertThat", "(", ")", "context", ".", "getStartupFailure", "assertThat", "(", ")", "assertThat", "(", ")", "(", "context", ")", "(", ")", "(", "failure", ")", "FlywayEditionUpgradeRequiredException", ".", "class", "(", "failure", ")", "String", ".", "format", "(", ",", "propertyName", ")", "\"", " %s ", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 104, "ast_depth": 13, "n_identifiers": 11, "vocab_size": 31, "n_whitespaces": 37, "n_words": 27, "nloc": 8, "token_counts": 69}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#937-942", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "configureJpaProperties", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#configureJpaProperties", "start_line": 937, "end_line": 942, "signature": "configureJpaProperties()", "original_code": "private static Map<String, ?> configureJpaProperties() {\n\t\tMap<String, Object> properties = new HashMap<>();\n\t\tproperties.put(\"configured\", \"manually\");\n\t\tproperties.put(\"hibernate.transaction.jta.platform\", NoJtaPlatform.INSTANCE);\n\t\treturn properties;\n\t}", "doc_comment": ""}, "code_tokens": ["configureJpaProperties", "private", "static", "Map", "(", ")", "{", "}", "<", "String", ",", ">", ";", ";", ";", "return", "properties", ";", "?", "Map", "properties", "=", "properties", ".", "put", "properties", ".", "put", "<", "String", ",", "Object", ">", "new", "(", ",", ")", "(", ",", ")", "HashMap", "(", ")", "\"", "configured", "\"", "\"", "manually", "\"", "\"", "hibernate.transaction.jta.platform", "\"", "NoJtaPlatform", ".", "INSTANCE", "<", ">"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 84, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 28, "n_whitespaces": 27, "n_words": 25, "nloc": 6, "token_counts": 57}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#947-950", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "normalDataSource", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#normalDataSource", "start_line": 947, "end_line": 950, "signature": "normalDataSource()", "original_code": "@Bean\n\t\tDataSource normalDataSource() {\n\t\t\treturn DataSourceBuilder.create().url(\"jdbc:hsqldb:mem:normal\").username(\"sa\").build();\n\t\t}", "doc_comment": ""}, "code_tokens": ["DataSource", "normalDataSource", "(", ")", "{", "}", "@", "Bean", "return", ";", ".", "build", ".", "username", "(", ")", ".", "url", "(", ")", "DataSourceBuilder", ".", "create", "(", ")", "\"", "sa", "\"", "(", ")", "\"", "jdbc:hsqldb:mem:normal", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 50, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 19, "n_whitespaces": 13, "n_words": 14, "nloc": 4, "token_counts": 33}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#952-956", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "flywayDataSource", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#flywayDataSource", "start_line": 952, "end_line": 956, "signature": "flywayDataSource()", "original_code": "@FlywayDataSource\n\t\t@Bean(defaultCandidate = false)\n\t\tDataSource flywayDataSource() {\n\t\t\treturn DataSourceBuilder.create().url(\"jdbc:hsqldb:mem:flywaytest\").username(\"sa\").build();\n\t\t}", "doc_comment": ""}, "code_tokens": ["DataSource", "flywayDataSource", "(", ")", "{", "}", "@", "FlywayDataSource", "@", "Bean", "return", ";", "(", ")", ".", "build", "defaultCandidate", "=", "false", ".", "username", "(", ")", ".", "url", "(", ")", "DataSourceBuilder", ".", "create", "(", ")", "\"", "sa", "\"", "(", ")", "\"", "jdbc:hsqldb:mem:flywaytest", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 60, "ast_depth": 10, "n_identifiers": 9, "vocab_size": 23, "n_whitespaces": 18, "n_words": 17, "nloc": 5, "token_counts": 40}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#963-966", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "firstDataSource", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#firstDataSource", "start_line": 963, "end_line": 966, "signature": "firstDataSource()", "original_code": "@Bean\n\t\tDataSource firstDataSource() {\n\t\t\treturn DataSourceBuilder.create().url(\"jdbc:hsqldb:mem:first\").username(\"sa\").build();\n\t\t}", "doc_comment": ""}, "code_tokens": ["DataSource", "firstDataSource", "(", ")", "{", "}", "@", "Bean", "return", ";", ".", "build", ".", "username", "(", ")", ".", "url", "(", ")", "DataSourceBuilder", ".", "create", "(", ")", "\"", "sa", "\"", "(", ")", "\"", "jdbc:hsqldb:mem:first", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 50, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 19, "n_whitespaces": 13, "n_words": 14, "nloc": 4, "token_counts": 33}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#968-971", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "secondDataSource", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#secondDataSource", "start_line": 968, "end_line": 971, "signature": "secondDataSource()", "original_code": "@Bean\n\t\tDataSource secondDataSource() {\n\t\t\treturn DataSourceBuilder.create().url(\"jdbc:hsqldb:mem:second\").username(\"sa\").build();\n\t\t}", "doc_comment": ""}, "code_tokens": ["DataSource", "secondDataSource", "(", ")", "{", "}", "@", "Bean", "return", ";", ".", "build", ".", "username", "(", ")", ".", "url", "(", ")", "DataSourceBuilder", ".", "create", "(", ")", "\"", "sa", "\"", "(", ")", "\"", "jdbc:hsqldb:mem:second", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 50, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 19, "n_whitespaces": 13, "n_words": 14, "nloc": 4, "token_counts": 33}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#973-977", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "flywayDataSource", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#flywayDataSource", "start_line": 973, "end_line": 977, "signature": "flywayDataSource()", "original_code": "@FlywayDataSource\n\t\t@Bean(defaultCandidate = false)\n\t\tDataSource flywayDataSource() {\n\t\t\treturn DataSourceBuilder.create().url(\"jdbc:hsqldb:mem:flywaytest\").username(\"sa\").build();\n\t\t}", "doc_comment": ""}, "code_tokens": ["DataSource", "flywayDataSource", "(", ")", "{", "}", "@", "FlywayDataSource", "@", "Bean", "return", ";", "(", ")", ".", "build", "defaultCandidate", "=", "false", ".", "username", "(", ")", ".", "url", "(", ")", "DataSourceBuilder", ".", "create", "(", ")", "\"", "sa", "\"", "(", ")", "\"", "jdbc:hsqldb:mem:flywaytest", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 60, "ast_depth": 10, "n_identifiers": 9, "vocab_size": 23, "n_whitespaces": 18, "n_words": 17, "nloc": 5, "token_counts": 40}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#984-987", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "migration1", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#migration1", "start_line": 984, "end_line": 987, "signature": "migration1()", "original_code": "@Bean\n\t\tTestMigration migration1() {\n\t\t\treturn new TestMigration(\"2\", \"M1\");\n\t\t}", "doc_comment": ""}, "code_tokens": ["TestMigration", "migration1", "(", ")", "{", "}", "@", "Bean", "return", ";", "new", "TestMigration", "(", ",", ")", "\"", "2", "\"", "\"", "M1", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 32, "ast_depth": 8, "n_identifiers": 2, "vocab_size": 15, "n_whitespaces": 15, "n_words": 8, "nloc": 4, "token_counts": 21}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#989-992", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "migration2", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#migration2", "start_line": 989, "end_line": 992, "signature": "migration2()", "original_code": "@Bean\n\t\tTestMigration migration2() {\n\t\t\treturn new TestMigration(\"3\", \"M2\");\n\t\t}", "doc_comment": ""}, "code_tokens": ["TestMigration", "migration2", "(", ")", "{", "}", "@", "Bean", "return", ";", "new", "TestMigration", "(", ",", ")", "\"", "3", "\"", "\"", "M2", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 32, "ast_depth": 8, "n_identifiers": 2, "vocab_size": 15, "n_whitespaces": 15, "n_words": 8, "nloc": 4, "token_counts": 21}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#999-1003", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "customClassLoader", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#customClassLoader", "start_line": 999, "end_line": 1003, "signature": "customClassLoader()", "original_code": "@Bean\n\t\t@Primary\n\t\tResourceLoader customClassLoader() {\n\t\t\treturn new DefaultResourceLoader(new CustomClassLoader(getClass().getClassLoader()));\n\t\t}", "doc_comment": ""}, "code_tokens": ["ResourceLoader", "customClassLoader", "(", ")", "{", "}", "@", "Bean", "@", "Primary", "return", ";", "new", "DefaultResourceLoader", "(", ")", "new", "CustomClassLoader", "(", ")", ".", "getClassLoader", "getClass", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 43, "ast_depth": 12, "n_identifiers": 5, "vocab_size": 17, "n_whitespaces": 18, "n_words": 11, "nloc": 5, "token_counts": 27}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#1010-1015", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "flywayMigrationInitializer", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#flywayMigrationInitializer", "start_line": 1010, "end_line": 1015, "signature": "flywayMigrationInitializer(Flyway flyway)", "original_code": "@Bean\n\t\tFlywayMigrationInitializer flywayMigrationInitializer(Flyway flyway) {\n\t\t\tFlywayMigrationInitializer initializer = new FlywayMigrationInitializer(flyway);\n\t\t\tinitializer.setOrder(Ordered.HIGHEST_PRECEDENCE);\n\t\t\treturn initializer;\n\t\t}", "doc_comment": ""}, "code_tokens": ["FlywayMigrationInitializer", "flywayMigrationInitializer", "(", ")", "{", "}", "@", "Bean", "Flyway", "flyway", "FlywayMigrationInitializer", ";", ";", "return", "initializer", ";", "initializer", "=", "initializer", ".", "setOrder", "new", "FlywayMigrationInitializer", "(", ")", "(", "flyway", ")", "Ordered", ".", "HIGHEST_PRECEDENCE"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 47, "ast_depth": 8, "n_identifiers": 7, "vocab_size": 19, "n_whitespaces": 26, "n_words": 16, "nloc": 6, "token_counts": 31}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#1022-1025", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "customFlyway", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#customFlyway", "start_line": 1022, "end_line": 1025, "signature": "customFlyway()", "original_code": "@Bean\n\t\tFlyway customFlyway() {\n\t\t\treturn Flyway.configure().load();\n\t\t}", "doc_comment": ""}, "code_tokens": ["Flyway", "customFlyway", "(", ")", "{", "}", "@", "Bean", "return", ";", ".", "load", "Flyway", ".", "configure", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 30, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 13, "n_whitespaces": 13, "n_words": 7, "nloc": 4, "token_counts": 19}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#1032-1035", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "customFlywayMigrationInitializer", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#customFlywayMigrationInitializer", "start_line": 1032, "end_line": 1035, "signature": "customFlywayMigrationInitializer(Flyway flyway)", "original_code": "@Bean\n\t\tFlywayMigrationInitializer customFlywayMigrationInitializer(Flyway flyway) {\n\t\t\treturn new FlywayMigrationInitializer(flyway);\n\t\t}", "doc_comment": ""}, "code_tokens": ["FlywayMigrationInitializer", "customFlywayMigrationInitializer", "(", ")", "{", "}", "@", "Bean", "Flyway", "flyway", "return", ";", "new", "FlywayMigrationInitializer", "(", "flyway", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 27, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 13, "n_whitespaces": 15, "n_words": 9, "nloc": 4, "token_counts": 17}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#1037-1044", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "entityManagerFactoryBean", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#entityManagerFactoryBean", "start_line": 1037, "end_line": 1044, "signature": "entityManagerFactoryBean(DataSource dataSource)", "original_code": "@Bean\n\t\tLocalContainerEntityManagerFactoryBean entityManagerFactoryBean(DataSource dataSource) {\n\t\t\tLocalContainerEntityManagerFactoryBean localContainerEntityManagerFactoryBean = new LocalContainerEntityManagerFactoryBean();\n\t\t\tlocalContainerEntityManagerFactoryBean.setDataSource(dataSource);\n\t\t\tlocalContainerEntityManagerFactoryBean.setJpaVendorAdapter(new HibernateJpaVendorAdapter());\n\t\t\tlocalContainerEntityManagerFactoryBean.setJpaPropertyMap(configureJpaProperties());\n\t\t\treturn localContainerEntityManagerFactoryBean;\n\t\t}", "doc_comment": ""}, "code_tokens": ["LocalContainerEntityManagerFactoryBean", "entityManagerFactoryBean", "(", ")", "{", "}", "@", "Bean", "DataSource", "dataSource", "LocalContainerEntityManagerFactoryBean", ";", ";", ";", ";", "return", "localContainerEntityManagerFactoryBean", ";", "localContainerEntityManagerFactoryBean", "=", "localContainerEntityManagerFactoryBean", ".", "setDataSource", "localContainerEntityManagerFactoryBean", ".", "setJpaVendorAdapter", "localContainerEntityManagerFactoryBean", ".", "setJpaPropertyMap", "new", "LocalContainerEntityManagerFactoryBean", "(", "dataSource", ")", "(", ")", "(", ")", "(", ")", "new", "HibernateJpaVendorAdapter", "configureJpaProperties", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 72, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 21, "n_whitespaces": 35, "n_words": 21, "nloc": 8, "token_counts": 47}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#1057-1060", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "customFlyway", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#customFlyway", "start_line": 1057, "end_line": 1060, "signature": "customFlyway()", "original_code": "@Bean\n\t\tFlyway customFlyway() {\n\t\t\treturn Flyway.configure().load();\n\t\t}", "doc_comment": ""}, "code_tokens": ["Flyway", "customFlyway", "(", ")", "{", "}", "@", "Bean", "return", ";", ".", "load", "Flyway", ".", "configure", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 30, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 13, "n_whitespaces": 13, "n_words": 7, "nloc": 4, "token_counts": 19}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#1062-1069", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "entityManagerFactoryBean", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#entityManagerFactoryBean", "start_line": 1062, "end_line": 1069, "signature": "entityManagerFactoryBean()", "original_code": "@Bean\n\t\tLocalContainerEntityManagerFactoryBean entityManagerFactoryBean() {\n\t\t\tLocalContainerEntityManagerFactoryBean localContainerEntityManagerFactoryBean = new LocalContainerEntityManagerFactoryBean();\n\t\t\tlocalContainerEntityManagerFactoryBean.setDataSource(this.dataSource);\n\t\t\tlocalContainerEntityManagerFactoryBean.setJpaVendorAdapter(new HibernateJpaVendorAdapter());\n\t\t\tlocalContainerEntityManagerFactoryBean.setJpaPropertyMap(configureJpaProperties());\n\t\t\treturn localContainerEntityManagerFactoryBean;\n\t\t}", "doc_comment": ""}, "code_tokens": ["LocalContainerEntityManagerFactoryBean", "entityManagerFactoryBean", "(", ")", "{", "}", "@", "Bean", "LocalContainerEntityManagerFactoryBean", ";", ";", ";", ";", "return", "localContainerEntityManagerFactoryBean", ";", "localContainerEntityManagerFactoryBean", "=", "localContainerEntityManagerFactoryBean", ".", "setDataSource", "localContainerEntityManagerFactoryBean", ".", "setJpaVendorAdapter", "localContainerEntityManagerFactoryBean", ".", "setJpaPropertyMap", "new", "LocalContainerEntityManagerFactoryBean", "(", ")", "(", ")", "(", ")", "(", ")", "this", ".", "dataSource", "new", "HibernateJpaVendorAdapter", "configureJpaProperties", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 72, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 21, "n_whitespaces": 34, "n_words": 20, "nloc": 8, "token_counts": 47}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#1082-1085", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "customFlyway", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#customFlyway", "start_line": 1082, "end_line": 1085, "signature": "customFlyway()", "original_code": "@Bean\n\t\tFlyway customFlyway() {\n\t\t\treturn Flyway.configure().load();\n\t\t}", "doc_comment": ""}, "code_tokens": ["Flyway", "customFlyway", "(", ")", "{", "}", "@", "Bean", "return", ";", ".", "load", "Flyway", ".", "configure", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 30, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 13, "n_whitespaces": 13, "n_words": 7, "nloc": 4, "token_counts": 19}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#1087-1090", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "jdbcOperations", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#jdbcOperations", "start_line": 1087, "end_line": 1090, "signature": "jdbcOperations()", "original_code": "@Bean\n\t\tJdbcOperations jdbcOperations() {\n\t\t\treturn new JdbcTemplate(this.dataSource);\n\t\t}", "doc_comment": ""}, "code_tokens": ["JdbcOperations", "jdbcOperations", "(", ")", "{", "}", "@", "Bean", "return", ";", "new", "JdbcTemplate", "(", ")", "this", ".", "dataSource"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 27, "ast_depth": 8, "n_identifiers": 3, "vocab_size": 15, "n_whitespaces": 14, "n_words": 8, "nloc": 4, "token_counts": 17}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#1092-1095", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "namedParameterJdbcOperations", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#namedParameterJdbcOperations", "start_line": 1092, "end_line": 1095, "signature": "namedParameterJdbcOperations()", "original_code": "@Bean\n\t\tNamedParameterJdbcOperations namedParameterJdbcOperations() {\n\t\t\treturn new NamedParameterJdbcTemplate(this.dataSource);\n\t\t}", "doc_comment": ""}, "code_tokens": ["NamedParameterJdbcOperations", "namedParameterJdbcOperations", "(", ")", "{", "}", "@", "Bean", "return", ";", "new", "NamedParameterJdbcTemplate", "(", ")", "this", ".", "dataSource"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 27, "ast_depth": 8, "n_identifiers": 3, "vocab_size": 15, "n_whitespaces": 14, "n_words": 8, "nloc": 4, "token_counts": 17}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#1108-1111", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "customFlywayMigrationInitializer", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#customFlywayMigrationInitializer", "start_line": 1108, "end_line": 1111, "signature": "customFlywayMigrationInitializer(Flyway flyway)", "original_code": "@Bean\n\t\tpublic FlywayMigrationInitializer customFlywayMigrationInitializer(Flyway flyway) {\n\t\t\treturn new FlywayMigrationInitializer(flyway);\n\t\t}", "doc_comment": ""}, "code_tokens": ["FlywayMigrationInitializer", "customFlywayMigrationInitializer", "public", "(", ")", "{", "}", "@", "Bean", "Flyway", "flyway", "return", ";", "new", "FlywayMigrationInitializer", "(", "flyway", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 16, "n_words": 10, "nloc": 4, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#1113-1116", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "jdbcOperations", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#jdbcOperations", "start_line": 1113, "end_line": 1116, "signature": "jdbcOperations()", "original_code": "@Bean\n\t\tpublic JdbcOperations jdbcOperations() {\n\t\t\treturn new JdbcTemplate(this.dataSource);\n\t\t}", "doc_comment": ""}, "code_tokens": ["JdbcOperations", "jdbcOperations", "public", "(", ")", "{", "}", "@", "Bean", "return", ";", "new", "JdbcTemplate", "(", ")", "this", ".", "dataSource"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 8, "n_identifiers": 3, "vocab_size": 16, "n_whitespaces": 15, "n_words": 9, "nloc": 4, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#1118-1121", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "namedParameterJdbcOperations", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#namedParameterJdbcOperations", "start_line": 1118, "end_line": 1121, "signature": "namedParameterJdbcOperations()", "original_code": "@Bean\n\t\tpublic NamedParameterJdbcOperations namedParameterJdbcOperations() {\n\t\t\treturn new NamedParameterJdbcTemplate(this.dataSource);\n\t\t}", "doc_comment": ""}, "code_tokens": ["NamedParameterJdbcOperations", "namedParameterJdbcOperations", "public", "(", ")", "{", "}", "@", "Bean", "return", ";", "new", "NamedParameterJdbcTemplate", "(", ")", "this", ".", "dataSource"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 8, "n_identifiers": 3, "vocab_size": 16, "n_whitespaces": 15, "n_words": 9, "nloc": 4, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#1130-1133", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "migrate", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#migrate", "start_line": 1130, "end_line": 1133, "signature": "migrate(Flyway flyway)", "original_code": "@Override\n\t\tpublic void migrate(Flyway flyway) {\n\t\t\tthis.called = true;\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "migrate", "public", "(", ")", "{", "}", "@", "Override", "Flyway", "flyway", ";", "=", "true", "this", ".", "called"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 27, "ast_depth": 7, "n_identifiers": 4, "vocab_size": 17, "n_whitespaces": 16, "n_words": 9, "nloc": 4, "token_counts": 17}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#1135-1137", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "assertCalled", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#assertCalled", "start_line": 1135, "end_line": 1137, "signature": "assertCalled()", "original_code": "void assertCalled() {\n\t\t\tassertThat(this.called).isTrue();\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "assertCalled", "(", ")", "{", "}", ";", ".", "isTrue", "assertThat", "(", ")", "(", ")", "this", ".", "called"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 27, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 12, "n_whitespaces": 9, "n_words": 6, "nloc": 3, "token_counts": 17}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#1144-1147", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "callbackOne", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#callbackOne", "start_line": 1144, "end_line": 1147, "signature": "callbackOne()", "original_code": "@Bean\n\t\tCallback callbackOne() {\n\t\t\treturn mockCallback(\"b\");\n\t\t}", "doc_comment": ""}, "code_tokens": ["Callback", "callbackOne", "(", ")", "{", "}", "@", "Bean", "return", ";", "mockCallback", "(", ")", "\"", "b", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 26, "ast_depth": 8, "n_identifiers": 3, "vocab_size": 13, "n_whitespaces": 13, "n_words": 6, "nloc": 4, "token_counts": 16}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#1149-1152", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "callbackTwo", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#callbackTwo", "start_line": 1149, "end_line": 1152, "signature": "callbackTwo()", "original_code": "@Bean\n\t\tCallback callbackTwo() {\n\t\t\treturn mockCallback(\"a\");\n\t\t}", "doc_comment": ""}, "code_tokens": ["Callback", "callbackTwo", "(", ")", "{", "}", "@", "Bean", "return", ";", "mockCallback", "(", ")", "\"", "a", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 26, "ast_depth": 8, "n_identifiers": 3, "vocab_size": 13, "n_whitespaces": 13, "n_words": 6, "nloc": 4, "token_counts": 16}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#1154-1159", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "mockCallback", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#mockCallback", "start_line": 1154, "end_line": 1159, "signature": "mockCallback(String name)", "original_code": "private Callback mockCallback(String name) {\n\t\t\tCallback callback = mock(Callback.class);\n\t\t\tgiven(callback.supports(any(Event.class), any(Context.class))).willReturn(true);\n\t\t\tgiven(callback.getCallbackName()).willReturn(name);\n\t\t\treturn callback;\n\t\t}", "doc_comment": ""}, "code_tokens": ["Callback", "mockCallback", "private", "(", ")", "{", "}", "String", "name", "Callback", ";", ";", ";", "return", "callback", ";", "callback", "=", ".", "willReturn", ".", "willReturn", "mock", "given", "(", "true", ")", "given", "(", "name", ")", "(", ")", "(", ")", "(", ")", "Callback", ".", "class", "callback", ".", "supports", "callback", ".", "getCallbackName", "(", ",", ")", "(", ")", "any", "any", "(", ")", "(", ")", "Event", ".", "class", "Context", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 95, "ast_depth": 13, "n_identifiers": 9, "vocab_size": 25, "n_whitespaces": 28, "n_words": 28, "nloc": 6, "token_counts": 63}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#1166-1170", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "customizerOne", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#customizerOne", "start_line": 1166, "end_line": 1170, "signature": "customizerOne()", "original_code": "@Bean\n\t\t@Order(1)\n\t\tFlywayConfigurationCustomizer customizerOne() {\n\t\t\treturn (configuration) -> configuration.connectRetries(5).baselineVersion(\"1\");\n\t\t}", "doc_comment": ""}, "code_tokens": ["FlywayConfigurationCustomizer", "customizerOne", "(", ")", "{", "}", "@", "Bean", "@", "Order", "return", ";", "(", "1", ")", "->", "(", "configuration", ")", ".", "baselineVersion", "configuration", ".", "connectRetries", "(", ")", "(", "5", ")", "\"", "1", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 48, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 19, "n_whitespaces": 18, "n_words": 12, "nloc": 5, "token_counts": 32}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#1172-1176", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "customizerTwo", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#customizerTwo", "start_line": 1172, "end_line": 1176, "signature": "customizerTwo()", "original_code": "@Bean\n\t\t@Order(0)\n\t\tFlywayConfigurationCustomizer customizerTwo() {\n\t\t\treturn (configuration) -> configuration.connectRetries(10).baselineDescription(\"<< Custom baseline >>\");\n\t\t}", "doc_comment": ""}, "code_tokens": ["FlywayConfigurationCustomizer", "customizerTwo", "(", ")", "{", "}", "@", "Bean", "@", "Order", "return", ";", "(", "0", ")", "->", "(", "configuration", ")", ".", "baselineDescription", "configuration", ".", "connectRetries", "(", ")", "(", "10", ")", "\"", "<< Custom baseline >>", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 48, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 20, "n_whitespaces": 21, "n_words": 13, "nloc": 5, "token_counts": 32}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#1183-1186", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "dslContext", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#dslContext", "start_line": 1183, "end_line": 1186, "signature": "dslContext()", "original_code": "@Bean\n\t\tDSLContext dslContext() {\n\t\t\treturn new DefaultDSLContext(SQLDialect.H2);\n\t\t}", "doc_comment": ""}, "code_tokens": ["DSLContext", "dslContext", "(", ")", "{", "}", "@", "Bean", "return", ";", "new", "DefaultDSLContext", "(", ")", "SQLDialect", ".", "H2"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 27, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 15, "n_whitespaces": 14, "n_words": 8, "nloc": 4, "token_counts": 17}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#1194-1201", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "dataSource", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#dataSource", "start_line": 1194, "end_line": 1201, "signature": "dataSource(DataSourceProperties properties)", "original_code": "@Bean(destroyMethod = \"shutdown\")\n\t\tEmbeddedDatabase dataSource(DataSourceProperties properties) throws SQLException {\n\t\t\tEmbeddedDatabase database = new EmbeddedDatabaseBuilder().setType(EmbeddedDatabaseType.H2)\n\t\t\t\t.setName(getDatabaseName(properties))\n\t\t\t\t.build();\n\t\t\tinsertUser(database);\n\t\t\treturn database;\n\t\t}", "doc_comment": ""}, "code_tokens": ["EmbeddedDatabase", "dataSource", "(", ")", "throws", "SQLException", "{", "}", "@", "Bean", "DataSourceProperties", "properties", "EmbeddedDatabase", ";", ";", "return", "database", ";", "(", ")", "database", "=", "insertUser", "destroyMethod", "=", ".", "build", "(", "database", ")", "\"", "shutdown", "\"", ".", "setName", "(", ")", ".", "setType", "(", ")", "new", "EmbeddedDatabaseBuilder", "(", ")", "getDatabaseName", "(", ")", "EmbeddedDatabaseType", ".", "H2", "(", "properties", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 82, "ast_depth": 11, "n_identifiers": 12, "vocab_size": 29, "n_whitespaces": 40, "n_words": 24, "nloc": 8, "token_counts": 54}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#1203-1203", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "getDatabaseName", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#getDatabaseName", "start_line": 1203, "end_line": 1203, "signature": "getDatabaseName(DataSourceProperties properties)", "original_code": "protected abstract String getDatabaseName(DataSourceProperties properties);", "doc_comment": ""}, "code_tokens": ["String", "getDatabaseName", ";", "protected", "abstract", "(", ")", "DataSourceProperties", "properties"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 14, "ast_depth": 5, "n_identifiers": 2, "vocab_size": 9, "n_whitespaces": 4, "n_words": 6, "nloc": 1, "token_counts": 9}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#1205-1210", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "insertUser", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#insertUser", "start_line": 1205, "end_line": 1210, "signature": "insertUser(EmbeddedDatabase database)", "original_code": "private void insertUser(EmbeddedDatabase database) throws SQLException {\n\t\t\ttry (Connection connection = database.getConnection()) {\n\t\t\t\tconnection.prepareStatement(\"CREATE USER test password 'secret'\").execute();\n\t\t\t\tconnection.prepareStatement(\"ALTER USER test ADMIN TRUE\").execute();\n\t\t\t}\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "insertUser", "private", "(", ")", "throws", "SQLException", "{", "}", "EmbeddedDatabase", "database", "try", "(", ")", "{", "}", "Connection", "connection", "=", ";", ";", "database", ".", "getConnection", ".", "execute", ".", "execute", "(", ")", "connection", ".", "prepareStatement", "(", ")", "connection", ".", "prepareStatement", "(", ")", "(", ")", "(", ")", "\"", "CREATE USER test password 'secret'", "\"", "\"", "ALTER USER test ADMIN TRUE", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 75, "ast_depth": 11, "n_identifiers": 6, "vocab_size": 23, "n_whitespaces": 40, "n_words": 28, "nloc": 6, "token_counts": 50}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#1217-1220", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "getDatabaseName", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#getDatabaseName", "start_line": 1217, "end_line": 1220, "signature": "getDatabaseName(DataSourceProperties properties)", "original_code": "@Override\n\t\tprotected String getDatabaseName(DataSourceProperties properties) {\n\t\t\treturn properties.determineDatabaseName();\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getDatabaseName", "protected", "(", ")", "{", "}", "@", "Override", "DataSourceProperties", "properties", "return", ";", "properties", ".", "determineDatabaseName", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 7, "n_identifiers": 4, "vocab_size": 15, "n_whitespaces": 15, "n_words": 9, "nloc": 4, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#1229-1232", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "getDatabaseName", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#getDatabaseName", "start_line": 1229, "end_line": 1232, "signature": "getDatabaseName(DataSourceProperties properties)", "original_code": "@Override\n\t\tprotected String getDatabaseName(DataSourceProperties properties) {\n\t\t\treturn this.name;\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getDatabaseName", "protected", "(", ")", "{", "}", "@", "Override", "DataSourceProperties", "properties", "return", ";", "this", ".", "name"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 25, "ast_depth": 6, "n_identifiers": 4, "vocab_size": 16, "n_whitespaces": 15, "n_words": 9, "nloc": 4, "token_counts": 16}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#1255-1258", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "getVersion", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#getVersion", "start_line": 1255, "end_line": 1258, "signature": "getVersion()", "original_code": "@Override\n\t\tpublic MigrationVersion getVersion() {\n\t\t\treturn this.version;\n\t\t}", "doc_comment": ""}, "code_tokens": ["MigrationVersion", "getVersion", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "this", ".", "version"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#1260-1263", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "getDescription", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#getDescription", "start_line": 1260, "end_line": 1263, "signature": "getDescription()", "original_code": "@Override\n\t\tpublic String getDescription() {\n\t\t\treturn this.description;\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getDescription", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "this", ".", "description"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#1265-1268", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "getChecksum", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#getChecksum", "start_line": 1265, "end_line": 1268, "signature": "getChecksum()", "original_code": "@Override\n\t\tpublic Integer getChecksum() {\n\t\t\treturn 1;\n\t\t}", "doc_comment": ""}, "code_tokens": ["Integer", "getChecksum", "public", "(", ")", "{", "}", "@", "Override", "return", "1", ";"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 19, "ast_depth": 5, "n_identifiers": 2, "vocab_size": 12, "n_whitespaces": 14, "n_words": 6, "nloc": 4, "token_counts": 12}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#1270-1273", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "canExecuteInTransaction", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#canExecuteInTransaction", "start_line": 1270, "end_line": 1273, "signature": "canExecuteInTransaction()", "original_code": "@Override\n\t\tpublic boolean canExecuteInTransaction() {\n\t\t\treturn true;\n\t\t}", "doc_comment": ""}, "code_tokens": ["boolean", "canExecuteInTransaction", "public", "(", ")", "{", "}", "@", "Override", "return", "true", ";"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 19, "ast_depth": 5, "n_identifiers": 2, "vocab_size": 12, "n_whitespaces": 14, "n_words": 6, "nloc": 4, "token_counts": 12}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#1275-1278", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "migrate", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#migrate", "start_line": 1275, "end_line": 1278, "signature": "migrate(org.flywaydb.core.api.migration.Context context)", "original_code": "@Override\n\t\tpublic void migrate(org.flywaydb.core.api.migration.Context context) {\n\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "migrate", "public", "(", ")", "{", "}", "@", "Override", "context", ".", "Context", ".", "migration", ".", "api", ".", "core", "org", ".", "flywaydb"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 33, "ast_depth": 10, "n_identifiers": 3, "vocab_size": 17, "n_whitespaces": 11, "n_words": 11, "nloc": 3, "token_counts": 21}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#1285-1305", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "jdbcConnectionDetails", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#jdbcConnectionDetails", "start_line": 1285, "end_line": 1305, "signature": "jdbcConnectionDetails()", "original_code": "@Bean\n\t\tJdbcConnectionDetails jdbcConnectionDetails() {\n\t\t\treturn new JdbcConnectionDetails() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic String getJdbcUrl() {\n\t\t\t\t\treturn \"jdbc:postgresql://database.example.com:12345/database-1\";\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic String getUsername() {\n\t\t\t\t\treturn \"user-1\";\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic String getPassword() {\n\t\t\t\t\treturn \"secret-1\";\n\t\t\t\t}\n\n\t\t\t};\n\t\t}", "doc_comment": ""}, "code_tokens": ["JdbcConnectionDetails", "jdbcConnectionDetails", "(", ")", "{", "}", "@", "Bean", "return", ";", "new", "JdbcConnectionDetails", "(", ")", "{", "}", "String", "getJdbcUrl", "String", "getUsername", "String", "getPassword", "public", "(", ")", "{", "}", "public", "(", ")", "{", "}", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "@", "Override", "return", ";", "@", "Override", "return", ";", "\"", "jdbc:postgresql://database.example.com:12345/database-1", "\"", "\"", "user-1", "\"", "\"", "secret-1", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 89, "ast_depth": 11, "n_identifiers": 6, "vocab_size": 21, "n_whitespaces": 98, "n_words": 33, "nloc": 17, "token_counts": 58}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#1289-1292", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "getJdbcUrl", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#getJdbcUrl", "start_line": 1289, "end_line": 1292, "signature": "getJdbcUrl()", "original_code": "@Override\n\t\t\t\tpublic String getJdbcUrl() {\n\t\t\t\t\treturn \"jdbc:postgresql://database.example.com:12345/database-1\";\n\t\t\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getJdbcUrl", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "\"", "jdbc:postgresql://database.example.com:12345/database-1", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 13, "n_whitespaces": 20, "n_words": 13, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#1294-1297", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "getUsername", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#getUsername", "start_line": 1294, "end_line": 1297, "signature": "getUsername()", "original_code": "@Override\n\t\t\t\tpublic String getUsername() {\n\t\t\t\t\treturn \"user-1\";\n\t\t\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getUsername", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "\"", "user-1", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 13, "n_whitespaces": 20, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#1299-1302", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "getPassword", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#getPassword", "start_line": 1299, "end_line": 1302, "signature": "getPassword()", "original_code": "@Override\n\t\t\t\tpublic String getPassword() {\n\t\t\t\t\treturn \"secret-1\";\n\t\t\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getPassword", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "\"", "secret-1", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 13, "n_whitespaces": 20, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#1312-1332", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "flywayConnectionDetails", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#flywayConnectionDetails", "start_line": 1312, "end_line": 1332, "signature": "flywayConnectionDetails()", "original_code": "@Bean\n\t\tFlywayConnectionDetails flywayConnectionDetails() {\n\t\t\treturn new FlywayConnectionDetails() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic String getJdbcUrl() {\n\t\t\t\t\treturn \"jdbc:postgresql://database.example.com:12345/database-1\";\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic String getUsername() {\n\t\t\t\t\treturn \"user-1\";\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic String getPassword() {\n\t\t\t\t\treturn \"secret-1\";\n\t\t\t\t}\n\n\t\t\t};\n\t\t}", "doc_comment": ""}, "code_tokens": ["FlywayConnectionDetails", "flywayConnectionDetails", "(", ")", "{", "}", "@", "Bean", "return", ";", "new", "FlywayConnectionDetails", "(", ")", "{", "}", "String", "getJdbcUrl", "String", "getUsername", "String", "getPassword", "public", "(", ")", "{", "}", "public", "(", ")", "{", "}", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "@", "Override", "return", ";", "@", "Override", "return", ";", "\"", "jdbc:postgresql://database.example.com:12345/database-1", "\"", "\"", "user-1", "\"", "\"", "secret-1", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 89, "ast_depth": 11, "n_identifiers": 6, "vocab_size": 21, "n_whitespaces": 98, "n_words": 33, "nloc": 17, "token_counts": 58}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#1316-1319", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "getJdbcUrl", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#getJdbcUrl", "start_line": 1316, "end_line": 1319, "signature": "getJdbcUrl()", "original_code": "@Override\n\t\t\t\tpublic String getJdbcUrl() {\n\t\t\t\t\treturn \"jdbc:postgresql://database.example.com:12345/database-1\";\n\t\t\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getJdbcUrl", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "\"", "jdbc:postgresql://database.example.com:12345/database-1", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 13, "n_whitespaces": 20, "n_words": 13, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#1321-1324", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "getUsername", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#getUsername", "start_line": 1321, "end_line": 1324, "signature": "getUsername()", "original_code": "@Override\n\t\t\t\tpublic String getUsername() {\n\t\t\t\t\treturn \"user-1\";\n\t\t\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getUsername", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "\"", "user-1", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 13, "n_whitespaces": 20, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#1326-1329", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "getPassword", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#getPassword", "start_line": 1326, "end_line": 1329, "signature": "getPassword()", "original_code": "@Override\n\t\t\t\tpublic String getPassword() {\n\t\t\t\t\treturn \"secret-1\";\n\t\t\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getPassword", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "\"", "secret-1", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 13, "n_whitespaces": 20, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#1383-1385", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "getName", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#getName", "start_line": 1383, "end_line": 1385, "signature": "getName()", "original_code": "public String getName() {\n\t\t\treturn this.name;\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getName", "public", "(", ")", "{", "}", "return", ";", "this", ".", "name"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 19, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 12, "n_whitespaces": 11, "n_words": 6, "nloc": 3, "token_counts": 12}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#1387-1389", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "getState", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#getState", "start_line": 1387, "end_line": 1389, "signature": "getState()", "original_code": "public String getState() {\n\t\t\treturn this.state;\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getState", "public", "(", ")", "{", "}", "return", ";", "this", ".", "state"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 19, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 12, "n_whitespaces": 11, "n_words": 6, "nloc": 3, "token_counts": 12}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#1391-1393", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "getCountry", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#getCountry", "start_line": 1391, "end_line": 1393, "signature": "getCountry()", "original_code": "public String getCountry() {\n\t\t\treturn this.country;\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getCountry", "public", "(", ")", "{", "}", "return", ";", "this", ".", "country"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 19, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 12, "n_whitespaces": 11, "n_words": 6, "nloc": 3, "token_counts": 12}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#1395-1397", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "getMap", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#getMap", "start_line": 1395, "end_line": 1397, "signature": "getMap()", "original_code": "public String getMap() {\n\t\t\treturn this.map;\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getMap", "public", "(", ")", "{", "}", "return", ";", "this", ".", "map"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 19, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 12, "n_whitespaces": 11, "n_words": 6, "nloc": 3, "token_counts": 12}}
{"dataset_split": "train", "id": "spring-boot@2e76cda:module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java#1399-1402", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2e76cda4baf3f010348ee9f9554a634e90bd4161", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-flyway/src/test/java/org/springframework/boot/flyway/autoconfigure/FlywayAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "toString", "qualified_name": "test.java.org.springframework.boot.flyway.autoconfigure.FlywayAutoConfigurationTests#toString", "start_line": 1399, "end_line": 1402, "signature": "toString()", "original_code": "@Override\n\t\tpublic String toString() {\n\t\t\treturn getName() + \",\" + getState() + \",\" + getCountry();\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "toString", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "+", "+", "getCountry", "+", "\"", ",", "\"", "(", ")", "+", "getState", "getName", "\"", ",", "\"", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 49, "ast_depth": 11, "n_identifiers": 5, "vocab_size": 17, "n_whitespaces": 22, "n_words": 8, "nloc": 4, "token_counts": 30}}
{"dataset_split": "train", "id": "spring-boot@d9fce46:core/spring-boot-test/src/main/java/org/springframework/boot/test/system/OutputCaptureRule.java#62-84", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "d9fce4684801e968bf4ba661adb63e7d0c6b5c75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/system/OutputCaptureRule.java", "language": "Java"}, "method": {"name": "apply", "qualified_name": "org.springframework.boot.test.system.OutputCaptureRule#apply", "start_line": 62, "end_line": 84, "signature": "apply(Statement base, Description description)", "original_code": "@Override\n\tpublic Statement apply(Statement base, Description description) {\n\t\treturn new Statement() {\n\t\t\t@Override\n\t\t\tpublic void evaluate() throws Throwable {\n\t\t\t\tOutputCaptureRule.this.delegate.push();\n\t\t\t\ttry {\n\t\t\t\t\tbase.evaluate();\n\t\t\t\t}\n\t\t\t\tfinally {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (!OutputCaptureRule.this.matchers.isEmpty()) {\n\t\t\t\t\t\t\tString output = OutputCaptureRule.this.delegate.toString();\n\t\t\t\t\t\t\tMatcherAssert.assertThat(output, allOf(OutputCaptureRule.this.matchers));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfinally {\n\t\t\t\t\t\tOutputCaptureRule.this.delegate.pop();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}", "doc_comment": ""}, "code_tokens": ["Statement", "apply", "public", "(", ",", ")", "{", "}", "@", "Override", "Statement", "base", "Description", "description", "return", ";", "new", "Statement", "(", ")", "{", "}", "void", "evaluate", "public", "(", ")", "throws", "Throwable", "{", "}", "@", "Override", ";", "try", ".", "push", "{", "}", "finally", ".", "delegate", "(", ")", ";", "{", "}", "OutputCaptureRule", ".", "this", "base", ".", "evaluate", "try", "(", ")", "{", "}", "finally", "if", "{", "}", "(", ")", "{", "}", ";", "!", "String", ";", ";", ".", "pop", ".", "isEmpty", "output", "=", "MatcherAssert", ".", "assertThat", ".", "delegate", "(", ")", ".", "matchers", "(", ")", ".", "toString", "(", "output", ",", ")", "OutputCaptureRule", ".", "this", "OutputCaptureRule", ".", "this", ".", "delegate", "(", ")", "allOf", "OutputCaptureRule", ".", "this", "(", ")", ".", "matchers", "OutputCaptureRule", ".", "this"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 175, "ast_depth": 23, "n_identifiers": 16, "vocab_size": 39, "n_whitespaces": 138, "n_words": 49, "nloc": 23, "token_counts": 115}}
{"dataset_split": "train", "id": "spring-boot@d9fce46:core/spring-boot-test/src/main/java/org/springframework/boot/test/system/OutputCaptureRule.java#65-82", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "d9fce4684801e968bf4ba661adb63e7d0c6b5c75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/system/OutputCaptureRule.java", "language": "Java"}, "method": {"name": "evaluate", "qualified_name": "org.springframework.boot.test.system.OutputCaptureRule#evaluate", "start_line": 65, "end_line": 82, "signature": "evaluate()", "original_code": "@Override\n\t\t\tpublic void evaluate() throws Throwable {\n\t\t\t\tOutputCaptureRule.this.delegate.push();\n\t\t\t\ttry {\n\t\t\t\t\tbase.evaluate();\n\t\t\t\t}\n\t\t\t\tfinally {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (!OutputCaptureRule.this.matchers.isEmpty()) {\n\t\t\t\t\t\t\tString output = OutputCaptureRule.this.delegate.toString();\n\t\t\t\t\t\t\tMatcherAssert.assertThat(output, allOf(OutputCaptureRule.this.matchers));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfinally {\n\t\t\t\t\t\tOutputCaptureRule.this.delegate.pop();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}", "doc_comment": ""}, "code_tokens": ["void", "evaluate", "public", "(", ")", "throws", "Throwable", "{", "}", "@", "Override", ";", "try", ".", "push", "{", "}", "finally", ".", "delegate", "(", ")", ";", "{", "}", "OutputCaptureRule", ".", "this", "base", ".", "evaluate", "try", "(", ")", "{", "}", "finally", "if", "{", "}", "(", ")", "{", "}", ";", "!", "String", ";", ";", ".", "pop", ".", "isEmpty", "output", "=", "MatcherAssert", ".", "assertThat", ".", "delegate", "(", ")", ".", "matchers", "(", ")", ".", "toString", "(", "output", ",", ")", "OutputCaptureRule", ".", "this", "OutputCaptureRule", ".", "this", ".", "delegate", "(", ")", "allOf", "OutputCaptureRule", ".", "this", "(", ")", ".", "matchers", "OutputCaptureRule", ".", "this"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 142, "ast_depth": 18, "n_identifiers": 14, "vocab_size": 33, "n_whitespaces": 115, "n_words": 38, "nloc": 18, "token_counts": 93}}
{"dataset_split": "train", "id": "spring-boot@d9fce46:core/spring-boot-test/src/main/java/org/springframework/boot/test/system/OutputCaptureRule.java#86-89", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "d9fce4684801e968bf4ba661adb63e7d0c6b5c75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/system/OutputCaptureRule.java", "language": "Java"}, "method": {"name": "getAll", "qualified_name": "org.springframework.boot.test.system.OutputCaptureRule#getAll", "start_line": 86, "end_line": 89, "signature": "getAll()", "original_code": "@Override\n\tpublic String getAll() {\n\t\treturn this.delegate.getAll();\n\t}", "doc_comment": ""}, "code_tokens": ["String", "getAll", "public", "(", ")", "{", "}", "@", "Override", "return", ";", ".", "getAll", "this", ".", "delegate", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 11, "n_words": 8, "nloc": 4, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@d9fce46:core/spring-boot-test/src/main/java/org/springframework/boot/test/system/OutputCaptureRule.java#91-94", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "d9fce4684801e968bf4ba661adb63e7d0c6b5c75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/system/OutputCaptureRule.java", "language": "Java"}, "method": {"name": "getOut", "qualified_name": "org.springframework.boot.test.system.OutputCaptureRule#getOut", "start_line": 91, "end_line": 94, "signature": "getOut()", "original_code": "@Override\n\tpublic String getOut() {\n\t\treturn this.delegate.getOut();\n\t}", "doc_comment": ""}, "code_tokens": ["String", "getOut", "public", "(", ")", "{", "}", "@", "Override", "return", ";", ".", "getOut", "this", ".", "delegate", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 11, "n_words": 8, "nloc": 4, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@d9fce46:core/spring-boot-test/src/main/java/org/springframework/boot/test/system/OutputCaptureRule.java#96-99", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "d9fce4684801e968bf4ba661adb63e7d0c6b5c75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/system/OutputCaptureRule.java", "language": "Java"}, "method": {"name": "getErr", "qualified_name": "org.springframework.boot.test.system.OutputCaptureRule#getErr", "start_line": 96, "end_line": 99, "signature": "getErr()", "original_code": "@Override\n\tpublic String getErr() {\n\t\treturn this.delegate.getErr();\n\t}", "doc_comment": ""}, "code_tokens": ["String", "getErr", "public", "(", ")", "{", "}", "@", "Override", "return", ";", ".", "getErr", "this", ".", "delegate", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 11, "n_words": 8, "nloc": 4, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@d9fce46:core/spring-boot-test/src/main/java/org/springframework/boot/test/system/OutputCaptureRule.java#101-104", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "d9fce4684801e968bf4ba661adb63e7d0c6b5c75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/system/OutputCaptureRule.java", "language": "Java"}, "method": {"name": "toString", "qualified_name": "org.springframework.boot.test.system.OutputCaptureRule#toString", "start_line": 101, "end_line": 104, "signature": "toString()", "original_code": "@Override\n\tpublic String toString() {\n\t\treturn this.delegate.toString();\n\t}", "doc_comment": ""}, "code_tokens": ["String", "toString", "public", "(", ")", "{", "}", "@", "Override", "return", ";", ".", "toString", "this", ".", "delegate", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 11, "n_words": 8, "nloc": 4, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@d9fce46:core/spring-boot-test/src/main/java/org/springframework/boot/test/system/OutputCaptureRule.java#111-113", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "d9fce4684801e968bf4ba661adb63e7d0c6b5c75", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/system/OutputCaptureRule.java", "language": "Java"}, "method": {"name": "expect", "qualified_name": "org.springframework.boot.test.system.OutputCaptureRule#expect", "start_line": 111, "end_line": 113, "signature": "expect(Matcher<? super String> matcher)", "original_code": "public void expect(Matcher<? super String> matcher) {\n\t\tthis.matchers.add(matcher);\n\t}", "doc_comment": "/**\n\t * Verify that the output is matched by the supplied {@code matcher}. Verification is\n\t * performed after the test method has executed.\n\t * @param matcher the matcher\n\t */"}, "code_tokens": ["void", "expect", "public", "(", ")", "{", "}", "matcher", ";", "Matcher", ".", "add", "<", ">", "this", ".", "matchers", "(", "matcher", ")", "?", "super", "String"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 36, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 19, "n_whitespaces": 11, "n_words": 11, "nloc": 3, "token_counts": 23}}
{"dataset_split": "train", "id": "spring-boot@7689389:smoke-test/spring-boot-smoke-test-web-thymeleaf/src/main/java/smoketest/web/thymeleaf/Message.java#36-38", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "7689389349724d9360b47e0141e960267e4bc709", "license": "apache-2.0"}, "file": {"path": "smoke-test/spring-boot-smoke-test-web-thymeleaf/src/main/java/smoketest/web/thymeleaf/Message.java", "language": "Java"}, "method": {"name": "getId", "qualified_name": "smoketest.web.thymeleaf.Message#getId", "start_line": 36, "end_line": 38, "signature": "getId()", "original_code": "public @Nullable Long getId() {\n\t\treturn this.id;\n\t}", "doc_comment": ""}, "code_tokens": ["Long", "getId", "public", "(", ")", "{", "}", "@", "Nullable", "return", ";", "this", ".", "id"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 10, "n_words": 7, "nloc": 3, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@7689389:smoke-test/spring-boot-smoke-test-web-thymeleaf/src/main/java/smoketest/web/thymeleaf/Message.java#40-42", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "7689389349724d9360b47e0141e960267e4bc709", "license": "apache-2.0"}, "file": {"path": "smoke-test/spring-boot-smoke-test-web-thymeleaf/src/main/java/smoketest/web/thymeleaf/Message.java", "language": "Java"}, "method": {"name": "setId", "qualified_name": "smoketest.web.thymeleaf.Message#setId", "start_line": 40, "end_line": 42, "signature": "setId(@Nullable Long id)", "original_code": "public void setId(@Nullable Long id) {\n\t\tthis.id = id;\n\t}", "doc_comment": ""}, "code_tokens": ["void", "setId", "public", "(", ")", "{", "}", "Long", "id", ";", "=", "id", "@", "Nullable", "this", ".", "id"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 15, "n_whitespaces": 12, "n_words": 9, "nloc": 3, "token_counts": 17}}
{"dataset_split": "train", "id": "spring-boot@7689389:smoke-test/spring-boot-smoke-test-web-thymeleaf/src/main/java/smoketest/web/thymeleaf/Message.java#44-46", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "7689389349724d9360b47e0141e960267e4bc709", "license": "apache-2.0"}, "file": {"path": "smoke-test/spring-boot-smoke-test-web-thymeleaf/src/main/java/smoketest/web/thymeleaf/Message.java", "language": "Java"}, "method": {"name": "getCreated", "qualified_name": "smoketest.web.thymeleaf.Message#getCreated", "start_line": 44, "end_line": 46, "signature": "getCreated()", "original_code": "public Calendar getCreated() {\n\t\treturn this.created;\n\t}", "doc_comment": ""}, "code_tokens": ["Calendar", "getCreated", "public", "(", ")", "{", "}", "return", ";", "this", ".", "created"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 19, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 12, "n_whitespaces": 9, "n_words": 6, "nloc": 3, "token_counts": 12}}
{"dataset_split": "train", "id": "spring-boot@7689389:smoke-test/spring-boot-smoke-test-web-thymeleaf/src/main/java/smoketest/web/thymeleaf/Message.java#48-50", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "7689389349724d9360b47e0141e960267e4bc709", "license": "apache-2.0"}, "file": {"path": "smoke-test/spring-boot-smoke-test-web-thymeleaf/src/main/java/smoketest/web/thymeleaf/Message.java", "language": "Java"}, "method": {"name": "setCreated", "qualified_name": "smoketest.web.thymeleaf.Message#setCreated", "start_line": 48, "end_line": 50, "signature": "setCreated(Calendar created)", "original_code": "public void setCreated(Calendar created) {\n\t\tthis.created = created;\n\t}", "doc_comment": ""}, "code_tokens": ["void", "setCreated", "public", "(", ")", "{", "}", "Calendar", "created", ";", "=", "created", "this", ".", "created"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 24, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 13, "n_whitespaces": 11, "n_words": 8, "nloc": 3, "token_counts": 15}}
{"dataset_split": "train", "id": "spring-boot@7689389:smoke-test/spring-boot-smoke-test-web-thymeleaf/src/main/java/smoketest/web/thymeleaf/Message.java#52-54", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "7689389349724d9360b47e0141e960267e4bc709", "license": "apache-2.0"}, "file": {"path": "smoke-test/spring-boot-smoke-test-web-thymeleaf/src/main/java/smoketest/web/thymeleaf/Message.java", "language": "Java"}, "method": {"name": "getText", "qualified_name": "smoketest.web.thymeleaf.Message#getText", "start_line": 52, "end_line": 54, "signature": "getText()", "original_code": "public @Nullable String getText() {\n\t\treturn this.text;\n\t}", "doc_comment": ""}, "code_tokens": ["String", "getText", "public", "(", ")", "{", "}", "@", "Nullable", "return", ";", "this", ".", "text"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 10, "n_words": 7, "nloc": 3, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@7689389:smoke-test/spring-boot-smoke-test-web-thymeleaf/src/main/java/smoketest/web/thymeleaf/Message.java#56-58", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "7689389349724d9360b47e0141e960267e4bc709", "license": "apache-2.0"}, "file": {"path": "smoke-test/spring-boot-smoke-test-web-thymeleaf/src/main/java/smoketest/web/thymeleaf/Message.java", "language": "Java"}, "method": {"name": "setText", "qualified_name": "smoketest.web.thymeleaf.Message#setText", "start_line": 56, "end_line": 58, "signature": "setText(@Nullable String text)", "original_code": "public void setText(@Nullable String text) {\n\t\tthis.text = text;\n\t}", "doc_comment": ""}, "code_tokens": ["void", "setText", "public", "(", ")", "{", "}", "String", "text", ";", "=", "text", "@", "Nullable", "this", ".", "text"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 15, "n_whitespaces": 12, "n_words": 9, "nloc": 3, "token_counts": 17}}
{"dataset_split": "train", "id": "spring-boot@7689389:smoke-test/spring-boot-smoke-test-web-thymeleaf/src/main/java/smoketest/web/thymeleaf/Message.java#60-62", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "7689389349724d9360b47e0141e960267e4bc709", "license": "apache-2.0"}, "file": {"path": "smoke-test/spring-boot-smoke-test-web-thymeleaf/src/main/java/smoketest/web/thymeleaf/Message.java", "language": "Java"}, "method": {"name": "getSummary", "qualified_name": "smoketest.web.thymeleaf.Message#getSummary", "start_line": 60, "end_line": 62, "signature": "getSummary()", "original_code": "public @Nullable String getSummary() {\n\t\treturn this.summary;\n\t}", "doc_comment": ""}, "code_tokens": ["String", "getSummary", "public", "(", ")", "{", "}", "@", "Nullable", "return", ";", "this", ".", "summary"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 10, "n_words": 7, "nloc": 3, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@7689389:smoke-test/spring-boot-smoke-test-web-thymeleaf/src/main/java/smoketest/web/thymeleaf/Message.java#64-66", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "7689389349724d9360b47e0141e960267e4bc709", "license": "apache-2.0"}, "file": {"path": "smoke-test/spring-boot-smoke-test-web-thymeleaf/src/main/java/smoketest/web/thymeleaf/Message.java", "language": "Java"}, "method": {"name": "setSummary", "qualified_name": "smoketest.web.thymeleaf.Message#setSummary", "start_line": 64, "end_line": 66, "signature": "setSummary(@Nullable String summary)", "original_code": "public void setSummary(@Nullable String summary) {\n\t\tthis.summary = summary;\n\t}", "doc_comment": ""}, "code_tokens": ["void", "setSummary", "public", "(", ")", "{", "}", "String", "summary", ";", "=", "summary", "@", "Nullable", "this", ".", "summary"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 15, "n_whitespaces": 12, "n_words": 9, "nloc": 3, "token_counts": 17}}
{"dataset_split": "train", "id": "spring-boot@7689389:smoke-test/spring-boot-smoke-test-websocket-jetty/src/main/java/smoketest/websocket/jetty/snake/SnakeTimer.java#49-56", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "7689389349724d9360b47e0141e960267e4bc709", "license": "apache-2.0"}, "file": {"path": "smoke-test/spring-boot-smoke-test-websocket-jetty/src/main/java/smoketest/websocket/jetty/snake/SnakeTimer.java", "language": "Java"}, "method": {"name": "addSnake", "qualified_name": "smoketest.websocket.jetty.snake.SnakeTimer#addSnake", "start_line": 49, "end_line": 56, "signature": "addSnake(Snake snake)", "original_code": "public static void addSnake(Snake snake) {\n\t\tsynchronized (MONITOR) {\n\t\t\tif (snakes.isEmpty()) {\n\t\t\t\tstartTimer();\n\t\t\t}\n\t\t\tsnakes.put(snake.getId(), snake);\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "addSnake", "public", "static", "(", ")", "{", "}", "Snake", "snake", "synchronized", "(", "MONITOR", ")", "{", "}", "if", ";", "(", ")", "{", "}", "snakes", ".", "put", "snakes", ".", "isEmpty", ";", "(", ",", "snake", ")", "(", ")", "startTimer", "snake", ".", "getId", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 65, "ast_depth": 11, "n_identifiers": 8, "vocab_size": 21, "n_whitespaces": 35, "n_words": 17, "nloc": 8, "token_counts": 43}}
{"dataset_split": "train", "id": "spring-boot@7689389:smoke-test/spring-boot-smoke-test-websocket-jetty/src/main/java/smoketest/websocket/jetty/snake/SnakeTimer.java#58-60", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "7689389349724d9360b47e0141e960267e4bc709", "license": "apache-2.0"}, "file": {"path": "smoke-test/spring-boot-smoke-test-websocket-jetty/src/main/java/smoketest/websocket/jetty/snake/SnakeTimer.java", "language": "Java"}, "method": {"name": "getSnakes", "qualified_name": "smoketest.websocket.jetty.snake.SnakeTimer#getSnakes", "start_line": 58, "end_line": 60, "signature": "getSnakes()", "original_code": "public static Collection<Snake> getSnakes() {\n\t\treturn Collections.unmodifiableCollection(snakes.values());\n\t}", "doc_comment": ""}, "code_tokens": ["getSnakes", "public", "static", "Collection", "(", ")", "{", "}", "<", "Snake", ">", "return", ";", "Collections", ".", "unmodifiableCollection", "(", ")", "snakes", ".", "values", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 35, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 18, "n_whitespaces": 10, "n_words": 10, "nloc": 3, "token_counts": 23}}
{"dataset_split": "train", "id": "spring-boot@7689389:smoke-test/spring-boot-smoke-test-websocket-jetty/src/main/java/smoketest/websocket/jetty/snake/SnakeTimer.java#62-69", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "7689389349724d9360b47e0141e960267e4bc709", "license": "apache-2.0"}, "file": {"path": "smoke-test/spring-boot-smoke-test-websocket-jetty/src/main/java/smoketest/websocket/jetty/snake/SnakeTimer.java", "language": "Java"}, "method": {"name": "removeSnake", "qualified_name": "smoketest.websocket.jetty.snake.SnakeTimer#removeSnake", "start_line": 62, "end_line": 69, "signature": "removeSnake(Snake snake)", "original_code": "public static void removeSnake(Snake snake) {\n\t\tsynchronized (MONITOR) {\n\t\t\tsnakes.remove(snake.getId());\n\t\t\tif (snakes.isEmpty()) {\n\t\t\t\tstopTimer();\n\t\t\t}\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "removeSnake", "public", "static", "(", ")", "{", "}", "Snake", "snake", "synchronized", "(", "MONITOR", ")", "{", "}", ";", "if", "snakes", ".", "remove", "(", ")", "{", "}", "(", ")", "snakes", ".", "isEmpty", ";", "snake", ".", "getId", "(", ")", "stopTimer", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 63, "ast_depth": 11, "n_identifiers": 8, "vocab_size": 20, "n_whitespaces": 34, "n_words": 16, "nloc": 8, "token_counts": 41}}
{"dataset_split": "train", "id": "spring-boot@7689389:smoke-test/spring-boot-smoke-test-websocket-jetty/src/main/java/smoketest/websocket/jetty/snake/SnakeTimer.java#71-82", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "7689389349724d9360b47e0141e960267e4bc709", "license": "apache-2.0"}, "file": {"path": "smoke-test/spring-boot-smoke-test-websocket-jetty/src/main/java/smoketest/websocket/jetty/snake/SnakeTimer.java", "language": "Java"}, "method": {"name": "tick", "qualified_name": "smoketest.websocket.jetty.snake.SnakeTimer#tick", "start_line": 71, "end_line": 82, "signature": "tick()", "original_code": "public static void tick() throws Exception {\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor (Iterator<Snake> iterator = SnakeTimer.getSnakes().iterator(); iterator.hasNext();) {\n\t\t\tSnake snake = iterator.next();\n\t\t\tsnake.update(SnakeTimer.getSnakes());\n\t\t\tsb.append(snake.getLocationsJson());\n\t\t\tif (iterator.hasNext()) {\n\t\t\t\tsb.append(',');\n\t\t\t}\n\t\t}\n\t\tbroadcast(String.format(\"{'type': 'update', 'data' : [%s]}\", sb));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "tick", "public", "static", "(", ")", "throws", "Exception", "{", "}", "StringBuilder", ";", "for", "(", ";", ")", ";", "sb", "=", ";", "iterator", ".", "hasNext", "{", "}", "broadcast", "new", "StringBuilder", "Iterator", "iterator", "=", "(", ")", "Snake", ";", ";", ";", "if", "(", ")", "(", ")", "<", "Snake", ">", ".", "iterator", "snake", "=", "snake", ".", "update", "sb", ".", "append", "(", ")", "{", "}", "String", ".", "format", "SnakeTimer", ".", "getSnakes", "(", ")", "iterator", ".", "next", "(", ")", "(", ")", "iterator", ".", "hasNext", ";", "(", ",", "sb", ")", "(", ")", "(", ")", "SnakeTimer", ".", "getSnakes", "snake", ".", "getLocationsJson", "(", ")", "sb", ".", "append", "\"", "{'type': 'update', 'data' : [%s]}", "\"", "(", ")", "(", ")", "(", "','", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 157, "ast_depth": 11, "n_identifiers": 14, "vocab_size": 38, "n_whitespaces": 65, "n_words": 44, "nloc": 12, "token_counts": 107}}
{"dataset_split": "train", "id": "spring-boot@7689389:smoke-test/spring-boot-smoke-test-websocket-jetty/src/main/java/smoketest/websocket/jetty/snake/SnakeTimer.java#84-95", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "7689389349724d9360b47e0141e960267e4bc709", "license": "apache-2.0"}, "file": {"path": "smoke-test/spring-boot-smoke-test-websocket-jetty/src/main/java/smoketest/websocket/jetty/snake/SnakeTimer.java", "language": "Java"}, "method": {"name": "broadcast", "qualified_name": "smoketest.websocket.jetty.snake.SnakeTimer#broadcast", "start_line": 84, "end_line": 95, "signature": "broadcast(String message)", "original_code": "public static void broadcast(String message) {\n\t\tCollection<Snake> snakes = new CopyOnWriteArrayList<>(SnakeTimer.getSnakes());\n\t\tfor (Snake snake : snakes) {\n\t\t\ttry {\n\t\t\t\tsnake.sendMessage(message);\n\t\t\t}\n\t\t\tcatch (Throwable ex) {\n\t\t\t\t// if Snake#sendMessage fails the client is removed\n\t\t\t\tremoveSnake(snake);\n\t\t\t}\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "broadcast", "public", "static", "(", ")", "{", "}", "String", "message", ";", "for", "(", "Snake", "snake", ":", "snakes", ")", "Collection", "snakes", "=", "{", "}", "<", "Snake", ">", "new", "try", "CopyOnWriteArrayList", "(", ")", "{", "}", "catch", "(", ")", "<", ">", "SnakeTimer", ".", "getSnakes", ";", "ex", "{", "// if Snake#sendMessage fails the client is removed", "}", "(", ")", "snake", ".", "sendMessage", "Throwable", ";", "(", "message", ")", "removeSnake", "(", "snake", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 90, "ast_depth": 12, "n_identifiers": 9, "vocab_size": 32, "n_whitespaces": 67, "n_words": 34, "nloc": 12, "token_counts": 60}}
{"dataset_split": "train", "id": "spring-boot@7689389:smoke-test/spring-boot-smoke-test-websocket-jetty/src/main/java/smoketest/websocket/jetty/snake/SnakeTimer.java#97-110", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "7689389349724d9360b47e0141e960267e4bc709", "license": "apache-2.0"}, "file": {"path": "smoke-test/spring-boot-smoke-test-websocket-jetty/src/main/java/smoketest/websocket/jetty/snake/SnakeTimer.java", "language": "Java"}, "method": {"name": "startTimer", "qualified_name": "smoketest.websocket.jetty.snake.SnakeTimer#startTimer", "start_line": 97, "end_line": 110, "signature": "startTimer()", "original_code": "public static void startTimer() {\n\t\tgameTimer = new Timer(SnakeTimer.class.getSimpleName() + \" Timer\");\n\t\tgameTimer.scheduleAtFixedRate(new TimerTask() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\ttick();\n\t\t\t\t}\n\t\t\t\tcatch (Throwable ex) {\n\t\t\t\t\tlogger.error(\"Caught to prevent timer from shutting down\", ex);\n\t\t\t\t}\n\t\t\t}\n\t\t}, TICK_DELAY, TICK_DELAY);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "startTimer", "public", "static", "(", ")", "{", "}", ";", ";", "gameTimer", "=", "gameTimer", ".", "scheduleAtFixedRate", "new", "Timer", "(", ",", "TICK_DELAY", ",", "TICK_DELAY", ")", "(", ")", "new", "TimerTask", "+", "(", ")", "{", "}", ".", "getSimpleName", "\"", " Timer", "\"", "void", "run", "SnakeTimer", ".", "class", "(", ")", "public", "(", ")", "{", "}", "@", "Override", "try", "{", "}", "catch", "(", ")", ";", "ex", "{", "}", "tick", "Throwable", ";", "(", ")", "logger", ".", "error", "(", ",", "ex", ")", "\"", "Caught to prevent timer from shutting down", "\""], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 114, "ast_depth": 18, "n_identifiers": 11, "vocab_size": 35, "n_whitespaces": 83, "n_words": 36, "nloc": 14, "token_counts": 76}}
{"dataset_split": "train", "id": "spring-boot@7689389:smoke-test/spring-boot-smoke-test-websocket-jetty/src/main/java/smoketest/websocket/jetty/snake/SnakeTimer.java#100-108", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "7689389349724d9360b47e0141e960267e4bc709", "license": "apache-2.0"}, "file": {"path": "smoke-test/spring-boot-smoke-test-websocket-jetty/src/main/java/smoketest/websocket/jetty/snake/SnakeTimer.java", "language": "Java"}, "method": {"name": "run", "qualified_name": "smoketest.websocket.jetty.snake.SnakeTimer#run", "start_line": 100, "end_line": 108, "signature": "run()", "original_code": "@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\ttick();\n\t\t\t\t}\n\t\t\t\tcatch (Throwable ex) {\n\t\t\t\t\tlogger.error(\"Caught to prevent timer from shutting down\", ex);\n\t\t\t\t}\n\t\t\t}", "doc_comment": ""}, "code_tokens": ["void", "run", "public", "(", ")", "{", "}", "@", "Override", "try", "{", "}", "catch", "(", ")", ";", "ex", "{", "}", "tick", "Throwable", ";", "(", ")", "logger", ".", "error", "(", ",", "ex", ")", "\"", "Caught to prevent timer from shutting down", "\""], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 53, "ast_depth": 11, "n_identifiers": 6, "vocab_size": 21, "n_whitespaces": 54, "n_words": 19, "nloc": 9, "token_counts": 34}}
{"dataset_split": "train", "id": "spring-boot@7689389:smoke-test/spring-boot-smoke-test-websocket-jetty/src/main/java/smoketest/websocket/jetty/snake/SnakeTimer.java#112-116", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "7689389349724d9360b47e0141e960267e4bc709", "license": "apache-2.0"}, "file": {"path": "smoke-test/spring-boot-smoke-test-websocket-jetty/src/main/java/smoketest/websocket/jetty/snake/SnakeTimer.java", "language": "Java"}, "method": {"name": "stopTimer", "qualified_name": "smoketest.websocket.jetty.snake.SnakeTimer#stopTimer", "start_line": 112, "end_line": 116, "signature": "stopTimer()", "original_code": "public static void stopTimer() {\n\t\tif (gameTimer != null) {\n\t\t\tgameTimer.cancel();\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "stopTimer", "public", "static", "(", ")", "{", "}", "if", "(", ")", "{", "}", "gameTimer", "!=", "null", ";", "gameTimer", ".", "cancel", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 34, "ast_depth": 9, "n_identifiers": 3, "vocab_size": 15, "n_whitespaces": 20, "n_words": 9, "nloc": 5, "token_counts": 22}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesScanRegistrar.java#62-66", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesScanRegistrar.java", "language": "Java"}, "method": {"name": "registerBeanDefinitions", "qualified_name": "org.springframework.boot.context.properties.ConfigurationPropertiesScanRegistrar#registerBeanDefinitions", "start_line": 62, "end_line": 66, "signature": "registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)", "original_code": "@Override\n\tpublic void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {\n\t\tSet<String> packagesToScan = getPackagesToScan(importingClassMetadata);\n\t\tscan(registry, packagesToScan);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "registerBeanDefinitions", "public", "(", ",", ")", "{", "}", "@", "Override", "AnnotationMetadata", "importingClassMetadata", "BeanDefinitionRegistry", "registry", ";", ";", "Set", "packagesToScan", "=", "scan", "<", "String", ">", "getPackagesToScan", "(", "registry", ",", "packagesToScan", ")", "(", "importingClassMetadata", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 49, "ast_depth": 8, "n_identifiers": 7, "vocab_size": 23, "n_whitespaces": 20, "n_words": 16, "nloc": 5, "token_counts": 32}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesScanRegistrar.java#68-83", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesScanRegistrar.java", "language": "Java"}, "method": {"name": "getPackagesToScan", "qualified_name": "org.springframework.boot.context.properties.ConfigurationPropertiesScanRegistrar#getPackagesToScan", "start_line": 68, "end_line": 83, "signature": "getPackagesToScan(AnnotationMetadata metadata)", "original_code": "private Set<String> getPackagesToScan(AnnotationMetadata metadata) {\n\t\tAnnotationAttributes attributes = AnnotationAttributes\n\t\t\t.fromMap(metadata.getAnnotationAttributes(ConfigurationPropertiesScan.class.getName()));\n\t\tAssert.state(attributes != null, \"'attributes' must not be null\");\n\t\tString[] basePackages = attributes.getStringArray(\"basePackages\");\n\t\tClass<?>[] basePackageClasses = attributes.getClassArray(\"basePackageClasses\");\n\t\tSet<String> packagesToScan = new LinkedHashSet<>(Arrays.asList(basePackages));\n\t\tfor (Class<?> basePackageClass : basePackageClasses) {\n\t\t\tpackagesToScan.add(ClassUtils.getPackageName(basePackageClass));\n\t\t}\n\t\tif (packagesToScan.isEmpty()) {\n\t\t\tpackagesToScan.add(ClassUtils.getPackageName(metadata.getClassName()));\n\t\t}\n\t\tpackagesToScan.removeIf((candidate) -> !StringUtils.hasText(candidate));\n\t\treturn packagesToScan;\n\t}", "doc_comment": ""}, "code_tokens": ["getPackagesToScan", "private", "Set", "(", ")", "{", "}", "<", "String", ">", "AnnotationMetadata", "metadata", "AnnotationAttributes", ";", ";", ";", ";", ";", "for", "(", "basePackageClass", ":", "basePackageClasses", ")", "if", ";", "return", "packagesToScan", ";", "attributes", "=", "Assert", ".", "state", "String", "basePackages", "=", "basePackageClasses", "=", "Set", "packagesToScan", "=", "Class", "{", "}", "(", ")", "{", "}", "packagesToScan", ".", "removeIf", "AnnotationAttributes", ".", "fromMap", "(", ",", ")", "[", "]", "attributes", ".", "getStringArray", "Class", "[", "]", "attributes", ".", "getClassArray", "<", "String", ">", "new", "<", ">", ";", "packagesToScan", ".", "isEmpty", ";", "(", ")", "(", ")", "attributes", "!=", "null", "\"", "'attributes' must not be null", "\"", "(", ")", "<", ">", "(", ")", "LinkedHashSet", "(", ")", "?", "packagesToScan", ".", "add", "(", ")", "packagesToScan", ".", "add", "->", "metadata", ".", "getAnnotationAttributes", "\"", "basePackages", "\"", "?", "\"", "basePackageClasses", "\"", "<", ">", "Arrays", ".", "asList", "(", ")", "(", ")", "(", "candidate", ")", "!", "(", ")", "(", "basePackages", ")", "ClassUtils", ".", "getPackageName", "ClassUtils", ".", "getPackageName", "StringUtils", ".", "hasText", ".", "getName", "(", "basePackageClass", ")", "(", ")", "(", "candidate", ")", "ConfigurationPropertiesScan", ".", "class", "(", ")", "metadata", ".", "getClassName", "(", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 246, "ast_depth": 13, "n_identifiers": 26, "vocab_size": 58, "n_whitespaces": 81, "n_words": 68, "nloc": 16, "token_counts": 166}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesScanRegistrar.java#85-95", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesScanRegistrar.java", "language": "Java"}, "method": {"name": "scan", "qualified_name": "org.springframework.boot.context.properties.ConfigurationPropertiesScanRegistrar#scan", "start_line": 85, "end_line": 95, "signature": "scan(BeanDefinitionRegistry registry, Set<String> packages)", "original_code": "private void scan(BeanDefinitionRegistry registry, Set<String> packages) {\n\t\tConfigurationPropertiesBeanRegistrar registrar = new ConfigurationPropertiesBeanRegistrar(registry);\n\t\tClassPathScanningCandidateComponentProvider scanner = getScanner(registry);\n\t\tfor (String basePackage : packages) {\n\t\t\tfor (BeanDefinition candidate : scanner.findCandidateComponents(basePackage)) {\n\t\t\t\tString beanClassName = candidate.getBeanClassName();\n\t\t\t\tAssert.state(beanClassName != null, \"'beanClassName' must not be null\");\n\t\t\t\tregister(registrar, beanClassName);\n\t\t\t}\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "scan", "private", "(", ",", ")", "{", "}", "BeanDefinitionRegistry", "registry", "packages", "ConfigurationPropertiesBeanRegistrar", ";", "ClassPathScanningCandidateComponentProvider", ";", "for", "(", "String", "basePackage", ":", "packages", ")", "Set", "registrar", "=", "scanner", "=", "{", "}", "<", "String", ">", "new", "ConfigurationPropertiesBeanRegistrar", "getScanner", "for", "(", "BeanDefinition", "candidate", ":", ")", "(", "registry", ")", "(", "registry", ")", "scanner", ".", "findCandidateComponents", "{", "}", "(", "basePackage", ")", "String", ";", ";", ";", "beanClassName", "=", "Assert", ".", "state", "register", "candidate", ".", "getBeanClassName", "(", ",", ")", "(", "registrar", ",", "beanClassName", ")", "(", ")", "beanClassName", "!=", "null", "\"", "'beanClassName' must not be null", "\""], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 119, "ast_depth": 12, "n_identifiers": 14, "vocab_size": 39, "n_whitespaces": 71, "n_words": 43, "nloc": 11, "token_counts": 84}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesScanRegistrar.java#97-106", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesScanRegistrar.java", "language": "Java"}, "method": {"name": "getScanner", "qualified_name": "org.springframework.boot.context.properties.ConfigurationPropertiesScanRegistrar#getScanner", "start_line": 97, "end_line": 106, "signature": "getScanner(BeanDefinitionRegistry registry)", "original_code": "private ClassPathScanningCandidateComponentProvider getScanner(BeanDefinitionRegistry registry) {\n\t\tClassPathScanningCandidateComponentProvider scanner = new ClassPathScanningCandidateComponentProvider(false);\n\t\tscanner.setEnvironment(this.environment);\n\t\tscanner.setResourceLoader(this.resourceLoader);\n\t\tscanner.addIncludeFilter(new AnnotationTypeFilter(ConfigurationProperties.class));\n\t\tTypeExcludeFilter typeExcludeFilter = new TypeExcludeFilter();\n\t\ttypeExcludeFilter.setBeanFactory((BeanFactory) registry);\n\t\tscanner.addExcludeFilter(typeExcludeFilter);\n\t\treturn scanner;\n\t}", "doc_comment": ""}, "code_tokens": ["ClassPathScanningCandidateComponentProvider", "getScanner", "private", "(", ")", "{", "}", "BeanDefinitionRegistry", "registry", "ClassPathScanningCandidateComponentProvider", ";", ";", ";", ";", "TypeExcludeFilter", ";", ";", ";", "return", "scanner", ";", "scanner", "=", "scanner", ".", "setEnvironment", "scanner", ".", "setResourceLoader", "scanner", ".", "addIncludeFilter", "typeExcludeFilter", "=", "typeExcludeFilter", ".", "setBeanFactory", "scanner", ".", "addExcludeFilter", "new", "ClassPathScanningCandidateComponentProvider", "(", ")", "(", ")", "(", ")", "new", "TypeExcludeFilter", "(", ")", "(", "typeExcludeFilter", ")", "(", "false", ")", "this", ".", "environment", "this", ".", "resourceLoader", "new", "AnnotationTypeFilter", "(", ")", "(", "BeanFactory", ")", "registry", "(", ")", "ConfigurationProperties", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 113, "ast_depth": 10, "n_identifiers": 11, "vocab_size": 30, "n_whitespaces": 41, "n_words": 37, "nloc": 10, "token_counts": 77}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesScanRegistrar.java#108-115", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesScanRegistrar.java", "language": "Java"}, "method": {"name": "register", "qualified_name": "org.springframework.boot.context.properties.ConfigurationPropertiesScanRegistrar#register", "start_line": 108, "end_line": 115, "signature": "register(ConfigurationPropertiesBeanRegistrar registrar, String className)", "original_code": "private void register(ConfigurationPropertiesBeanRegistrar registrar, String className) throws LinkageError {\n\t\ttry {\n\t\t\tregister(registrar, ClassUtils.forName(className, null));\n\t\t}\n\t\tcatch (ClassNotFoundException ex) {\n\t\t\t// Ignore\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "register", "private", "(", ",", ")", "throws", "LinkageError", "{", "}", "ConfigurationPropertiesBeanRegistrar", "registrar", "String", "className", "try", "{", "}", "catch", "(", ")", ";", "ex", "{", "// Ignore", "}", "register", "ClassNotFoundException", "(", "registrar", ",", ")", "ClassUtils", ".", "forName", "(", "className", ",", "null", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 58, "ast_depth": 11, "n_identifiers": 6, "vocab_size": 24, "n_whitespaces": 37, "n_words": 20, "nloc": 8, "token_counts": 39}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesScanRegistrar.java#117-121", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesScanRegistrar.java", "language": "Java"}, "method": {"name": "register", "qualified_name": "org.springframework.boot.context.properties.ConfigurationPropertiesScanRegistrar#register", "start_line": 117, "end_line": 121, "signature": "register(ConfigurationPropertiesBeanRegistrar registrar, Class<?> type)", "original_code": "private void register(ConfigurationPropertiesBeanRegistrar registrar, Class<?> type) {\n\t\tif (!isComponent(type)) {\n\t\t\tregistrar.register(type);\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "register", "private", "(", ",", ")", "{", "}", "ConfigurationPropertiesBeanRegistrar", "registrar", "type", "if", "Class", "(", ")", "{", "}", "<", ">", "!", ";", "?", "isComponent", "registrar", ".", "register", "(", "type", ")", "(", "type", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 51, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 20, "n_whitespaces": 20, "n_words": 13, "nloc": 5, "token_counts": 32}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesScanRegistrar.java#123-125", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesScanRegistrar.java", "language": "Java"}, "method": {"name": "isComponent", "qualified_name": "org.springframework.boot.context.properties.ConfigurationPropertiesScanRegistrar#isComponent", "start_line": 123, "end_line": 125, "signature": "isComponent(Class<?> type)", "original_code": "private boolean isComponent(Class<?> type) {\n\t\treturn MergedAnnotations.from(type, SearchStrategy.TYPE_HIERARCHY).isPresent(Component.class);\n\t}", "doc_comment": ""}, "code_tokens": ["boolean", "isComponent", "private", "(", ")", "{", "}", "type", "return", ";", "Class", ".", "isPresent", "<", ">", "MergedAnnotations", ".", "from", "(", ")", "?", "(", "type", ",", ")", "Component", ".", "class", "SearchStrategy", ".", "TYPE_HIERARCHY"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 47, "ast_depth": 9, "n_identifiers": 7, "vocab_size": 23, "n_whitespaces": 11, "n_words": 14, "nloc": 3, "token_counts": 31}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/CachingConfigurationPropertySource.java#33-33", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/CachingConfigurationPropertySource.java", "language": "Java"}, "method": {"name": "getCaching", "qualified_name": "org.springframework.boot.context.properties.source.CachingConfigurationPropertySource#getCaching", "start_line": 33, "end_line": 33, "signature": "getCaching()", "original_code": "ConfigurationPropertyCaching getCaching();", "doc_comment": "/**\n\t * Return {@link ConfigurationPropertyCaching} for this source.\n\t * @return source caching\n\t */"}, "code_tokens": ["ConfigurationPropertyCaching", "getCaching", ";", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 8, "ast_depth": 4, "n_identifiers": 1, "vocab_size": 5, "n_whitespaces": 1, "n_words": 2, "nloc": 1, "token_counts": 5}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/CachingConfigurationPropertySource.java#41-46", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/CachingConfigurationPropertySource.java", "language": "Java"}, "method": {"name": "find", "qualified_name": "org.springframework.boot.context.properties.source.CachingConfigurationPropertySource#find", "start_line": 41, "end_line": 46, "signature": "find(@Nullable ConfigurationPropertySource source)", "original_code": "static @Nullable ConfigurationPropertyCaching find(@Nullable ConfigurationPropertySource source) {\n\t\tif (source instanceof CachingConfigurationPropertySource cachingSource) {\n\t\t\treturn cachingSource.getCaching();\n\t\t}\n\t\treturn null;\n\t}", "doc_comment": "/**\n\t * Find {@link ConfigurationPropertyCaching} for the given source.\n\t * @param source the configuration property source\n\t * @return a {@link ConfigurationPropertyCaching} instance or {@code null} if the\n\t * source does not support caching.\n\t */"}, "code_tokens": ["ConfigurationPropertyCaching", "find", "static", "(", ")", "{", "}", "@", "Nullable", "ConfigurationPropertySource", "source", "if", "return", "null", ";", "(", ")", "{", "}", "@", "Nullable", "source", "instanceof", "CachingConfigurationPropertySource", "cachingSource", "return", ";", "cachingSource", ".", "getCaching", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 49, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 20, "n_whitespaces": 28, "n_words": 17, "nloc": 6, "token_counts": 32}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationProperty.java#68-70", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationProperty.java", "language": "Java"}, "method": {"name": "getSource", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationProperty#getSource", "start_line": 68, "end_line": 70, "signature": "getSource()", "original_code": "public @Nullable ConfigurationPropertySource getSource() {\n\t\treturn this.source;\n\t}", "doc_comment": "/**\n\t * Return the {@link ConfigurationPropertySource} that provided the property or\n\t * {@code null} if the source is unknown.\n\t * @return the configuration property source\n\t * @since 2.6.0\n\t */"}, "code_tokens": ["ConfigurationPropertySource", "getSource", "public", "(", ")", "{", "}", "@", "Nullable", "return", ";", "this", ".", "source"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 10, "n_words": 7, "nloc": 3, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationProperty.java#76-78", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationProperty.java", "language": "Java"}, "method": {"name": "getName", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationProperty#getName", "start_line": 76, "end_line": 78, "signature": "getName()", "original_code": "public ConfigurationPropertyName getName() {\n\t\treturn this.name;\n\t}", "doc_comment": "/**\n\t * Return the name of the configuration property.\n\t * @return the configuration property name\n\t */"}, "code_tokens": ["ConfigurationPropertyName", "getName", "public", "(", ")", "{", "}", "return", ";", "this", ".", "name"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 19, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 12, "n_whitespaces": 9, "n_words": 6, "nloc": 3, "token_counts": 12}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationProperty.java#84-86", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationProperty.java", "language": "Java"}, "method": {"name": "getValue", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationProperty#getValue", "start_line": 84, "end_line": 86, "signature": "getValue()", "original_code": "public Object getValue() {\n\t\treturn this.value;\n\t}", "doc_comment": "/**\n\t * Return the value of the configuration property.\n\t * @return the configuration property value\n\t */"}, "code_tokens": ["Object", "getValue", "public", "(", ")", "{", "}", "return", ";", "this", ".", "value"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 19, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 12, "n_whitespaces": 9, "n_words": 6, "nloc": 3, "token_counts": 12}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationProperty.java#88-91", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationProperty.java", "language": "Java"}, "method": {"name": "getOrigin", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationProperty#getOrigin", "start_line": 88, "end_line": 91, "signature": "getOrigin()", "original_code": "@Override\n\tpublic @Nullable Origin getOrigin() {\n\t\treturn this.origin;\n\t}", "doc_comment": ""}, "code_tokens": ["Origin", "getOrigin", "public", "(", ")", "{", "}", "@", "Override", "@", "Nullable", "return", ";", "this", ".", "origin"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 25, "ast_depth": 6, "n_identifiers": 4, "vocab_size": 15, "n_whitespaces": 12, "n_words": 8, "nloc": 4, "token_counts": 16}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationProperty.java#93-106", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationProperty.java", "language": "Java"}, "method": {"name": "equals", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationProperty#equals", "start_line": 93, "end_line": 106, "signature": "equals(Object obj)", "original_code": "@Override\n\tpublic boolean equals(Object obj) {\n\t\tif (this == obj) {\n\t\t\treturn true;\n\t\t}\n\t\tif (obj == null || getClass() != obj.getClass()) {\n\t\t\treturn false;\n\t\t}\n\t\tConfigurationProperty other = (ConfigurationProperty) obj;\n\t\tboolean result = true;\n\t\tresult = result && ObjectUtils.nullSafeEquals(this.name, other.name);\n\t\tresult = result && ObjectUtils.nullSafeEquals(this.value, other.value);\n\t\treturn result;\n\t}", "doc_comment": ""}, "code_tokens": ["boolean", "equals", "public", "(", ")", "{", "}", "@", "Override", "Object", "obj", "if", "if", "ConfigurationProperty", ";", "boolean", ";", ";", ";", "return", "result", ";", "(", ")", "{", "}", "(", ")", "{", "}", "other", "=", "result", "=", "true", "result", "=", "result", "=", "this", "==", "obj", "return", "true", ";", "||", "return", "false", ";", "(", "ConfigurationProperty", ")", "obj", "result", "&&", "result", "&&", "obj", "==", "null", "!=", "ObjectUtils", ".", "nullSafeEquals", "ObjectUtils", ".", "nullSafeEquals", "getClass", "obj", ".", "getClass", "(", ",", ")", "(", ",", ")", "(", ")", "(", ")", "this", ".", "name", "other", ".", "name", "this", ".", "value", "other", ".", "value"], "metrics": {"cyclomatic_complexity": 6, "n_ast_nodes": 136, "ast_depth": 10, "n_identifiers": 10, "vocab_size": 33, "n_whitespaces": 75, "n_words": 44, "nloc": 14, "token_counts": 93}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationProperty.java#108-113", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationProperty.java", "language": "Java"}, "method": {"name": "hashCode", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationProperty#hashCode", "start_line": 108, "end_line": 113, "signature": "hashCode()", "original_code": "@Override\n\tpublic int hashCode() {\n\t\tint result = ObjectUtils.nullSafeHashCode(this.name);\n\t\tresult = 31 * result + ObjectUtils.nullSafeHashCode(this.value);\n\t\treturn result;\n\t}", "doc_comment": ""}, "code_tokens": ["hashCode", "public", "int", "(", ")", "{", "}", "@", "Override", ";", ";", "return", "result", ";", "int", "result", "=", "result", "=", "ObjectUtils", ".", "nullSafeHashCode", "+", "(", ")", "31", "*", "result", "ObjectUtils", ".", "nullSafeHashCode", "this", ".", "name", "(", ")", "this", ".", "value"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 60, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 22, "n_whitespaces": 26, "n_words": 19, "nloc": 6, "token_counts": 39}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationProperty.java#115-121", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationProperty.java", "language": "Java"}, "method": {"name": "toString", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationProperty#toString", "start_line": 115, "end_line": 121, "signature": "toString()", "original_code": "@Override\n\tpublic String toString() {\n\t\treturn new ToStringCreator(this).append(\"name\", this.name)\n\t\t\t.append(\"value\", this.value)\n\t\t\t.append(\"origin\", this.origin)\n\t\t\t.toString();\n\t}", "doc_comment": ""}, "code_tokens": ["String", "toString", "public", "(", ")", "{", "}", "@", "Override", "return", ";", ".", "toString", ".", "append", "(", ")", ".", "append", "(", ",", ")", ".", "append", "(", ",", ")", "\"", "origin", "\"", "this", ".", "origin", "new", "ToStringCreator", "(", ",", ")", "\"", "value", "\"", "this", ".", "value", "(", "this", ")", "\"", "name", "\"", "this", ".", "name"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 76, "ast_depth": 11, "n_identifiers": 6, "vocab_size": 21, "n_whitespaces": 27, "n_words": 21, "nloc": 7, "token_counts": 53}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationProperty.java#123-126", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationProperty.java", "language": "Java"}, "method": {"name": "compareTo", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationProperty#compareTo", "start_line": 123, "end_line": 126, "signature": "compareTo(ConfigurationProperty other)", "original_code": "@Override\n\tpublic int compareTo(ConfigurationProperty other) {\n\t\treturn this.name.compareTo(other.name);\n\t}", "doc_comment": ""}, "code_tokens": ["compareTo", "public", "int", "(", ")", "{", "}", "@", "Override", "ConfigurationProperty", "other", "return", ";", ".", "compareTo", "this", ".", "name", "(", ")", "other", ".", "name"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 36, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 16, "n_whitespaces": 12, "n_words": 12, "nloc": 4, "token_counts": 23}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationProperty.java#128-134", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationProperty.java", "language": "Java"}, "method": {"name": "of", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationProperty#of", "start_line": 128, "end_line": 134, "signature": "of(ConfigurationPropertyName name, @Nullable OriginTrackedValue value)", "original_code": "@Contract(\"_, !null -> !null\")\n\tstatic @Nullable ConfigurationProperty of(ConfigurationPropertyName name, @Nullable OriginTrackedValue value) {\n\t\tif (value == null) {\n\t\t\treturn null;\n\t\t}\n\t\treturn new ConfigurationProperty(name, value.getValue(), value.getOrigin());\n\t}", "doc_comment": ""}, "code_tokens": ["ConfigurationProperty", "of", "static", "(", ",", ")", "{", "}", "@", "Contract", "@", "Nullable", "ConfigurationPropertyName", "name", "OriginTrackedValue", "value", "if", "return", ";", "(", ")", "(", ")", "{", "}", "new", "ConfigurationProperty", "\"", "_, !null -> !null", "\"", "@", "Nullable", "value", "==", "null", "return", "null", ";", "(", "name", ",", ",", ")", "value", ".", "getValue", "value", ".", "getOrigin", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 78, "ast_depth": 9, "n_identifiers": 7, "vocab_size": 26, "n_whitespaces": 37, "n_words": 26, "nloc": 7, "token_counts": 53}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationProperty.java#136-143", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationProperty.java", "language": "Java"}, "method": {"name": "of", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationProperty#of", "start_line": 136, "end_line": 143, "signature": "of(@Nullable ConfigurationPropertySource source,\n\t\t\tConfigurationPropertyName name, @Nullable Object value, @Nullable Origin origin)", "original_code": "@Contract(\"_, _, !null, _ -> !null\")\n\tstatic @Nullable ConfigurationProperty of(@Nullable ConfigurationPropertySource source,\n\t\t\tConfigurationPropertyName name, @Nullable Object value, @Nullable Origin origin) {\n\t\tif (value == null) {\n\t\t\treturn null;\n\t\t}\n\t\treturn new ConfigurationProperty(source, name, value, origin);\n\t}", "doc_comment": ""}, "code_tokens": ["ConfigurationProperty", "of", "static", "(", ",", ",", ",", ")", "{", "}", "@", "Contract", "@", "Nullable", "ConfigurationPropertySource", "source", "ConfigurationPropertyName", "name", "Object", "value", "Origin", "origin", "if", "return", ";", "(", ")", "(", ")", "{", "}", "new", "ConfigurationProperty", "\"", "_, _, !null, _ -> !null", "\"", "@", "Nullable", "@", "Nullable", "@", "Nullable", "value", "==", "null", "return", "null", ";", "(", "source", ",", "name", ",", "value", ",", "origin", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 84, "ast_depth": 7, "n_identifiers": 7, "vocab_size": 27, "n_whitespaces": 49, "n_words": 33, "nloc": 8, "token_counts": 57}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#88-90", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "isEmpty", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#isEmpty", "start_line": 88, "end_line": 90, "signature": "isEmpty()", "original_code": "public boolean isEmpty() {\n\t\treturn this.elements.getSize() == 0;\n\t}", "doc_comment": "/**\n\t * Returns {@code true} if this {@link ConfigurationPropertyName} is empty.\n\t * @return {@code true} if the name is empty\n\t */"}, "code_tokens": ["boolean", "isEmpty", "public", "(", ")", "{", "}", "return", ";", "==", "0", ".", "getSize", "this", ".", "elements", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 8, "n_identifiers": 3, "vocab_size": 15, "n_whitespaces": 11, "n_words": 8, "nloc": 3, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#96-99", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "isLastElementIndexed", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#isLastElementIndexed", "start_line": 96, "end_line": 99, "signature": "isLastElementIndexed()", "original_code": "public boolean isLastElementIndexed() {\n\t\tint size = getNumberOfElements();\n\t\treturn (size > 0 && isIndexed(size - 1));\n\t}", "doc_comment": "/**\n\t * Return if the last element in the name is indexed.\n\t * @return {@code true} if the last element is indexed\n\t */"}, "code_tokens": ["boolean", "isLastElementIndexed", "public", "(", ")", "{", "}", ";", "return", ";", "int", "size", "=", "(", ")", "getNumberOfElements", "&&", "(", ")", "size", ">", "0", "isIndexed", "(", ")", "size", "-", "1"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 45, "ast_depth": 10, "n_identifiers": 4, "vocab_size": 19, "n_whitespaces": 21, "n_words": 12, "nloc": 4, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#106-113", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "hasIndexedElement", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#hasIndexedElement", "start_line": 106, "end_line": 113, "signature": "hasIndexedElement()", "original_code": "public boolean hasIndexedElement() {\n\t\tfor (int i = 0; i < getNumberOfElements(); i++) {\n\t\t\tif (isIndexed(i)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}", "doc_comment": "/**\n\t * Return {@code true} if any element in the name is indexed.\n\t * @return if the element has one or more indexed elements\n\t * @since 2.2.10\n\t */"}, "code_tokens": ["boolean", "hasIndexedElement", "public", "(", ")", "{", "}", "for", "(", ";", ")", "return", "false", ";", ";", "i", "<", "i", "++", "{", "}", "int", "i", "=", "0", "getNumberOfElements", "if", "(", ")", "(", ")", "{", "}", "isIndexed", "return", "true", ";", "(", "i", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 61, "ast_depth": 10, "n_identifiers": 4, "vocab_size": 21, "n_whitespaces": 40, "n_words": 17, "nloc": 8, "token_counts": 40}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#120-122", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "isIndexed", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#isIndexed", "start_line": 120, "end_line": 122, "signature": "isIndexed(int elementIndex)", "original_code": "boolean isIndexed(int elementIndex) {\n\t\treturn this.elements.getType(elementIndex).isIndexed();\n\t}", "doc_comment": "/**\n\t * Return if the element in the name is indexed.\n\t * @param elementIndex the index of the element\n\t * @return {@code true} if the element is indexed\n\t */"}, "code_tokens": ["boolean", "isIndexed", "(", ")", "{", "}", "elementIndex", "return", ";", "int", ".", "isIndexed", ".", "getType", "(", ")", "this", ".", "elements", "(", "elementIndex", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 34, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 14, "n_whitespaces": 9, "n_words": 10, "nloc": 3, "token_counts": 22}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#129-131", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "isNumericIndex", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#isNumericIndex", "start_line": 129, "end_line": 131, "signature": "isNumericIndex(int elementIndex)", "original_code": "public boolean isNumericIndex(int elementIndex) {\n\t\treturn this.elements.getType(elementIndex) == ElementType.NUMERICALLY_INDEXED;\n\t}", "doc_comment": "/**\n\t * Return if the element in the name is indexed and numeric.\n\t * @param elementIndex the index of the element\n\t * @return {@code true} if the element is indexed and numeric\n\t */"}, "code_tokens": ["boolean", "isNumericIndex", "public", "(", ")", "{", "}", "elementIndex", "return", ";", "int", "==", ".", "getType", "ElementType", ".", "NUMERICALLY_INDEXED", "this", ".", "elements", "(", "elementIndex", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 36, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 18, "n_whitespaces": 12, "n_words": 12, "nloc": 3, "token_counts": 23}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#138-141", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "getLastElement", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#getLastElement", "start_line": 138, "end_line": 141, "signature": "getLastElement(Form form)", "original_code": "public String getLastElement(Form form) {\n\t\tint size = getNumberOfElements();\n\t\treturn (size != 0) ? getElement(size - 1, form) : EMPTY_STRING;\n\t}", "doc_comment": "/**\n\t * Return the last element in the name in the given form.\n\t * @param form the form to return\n\t * @return the last element\n\t */"}, "code_tokens": ["String", "getLastElement", "public", "(", ")", "{", "}", "Form", "form", ";", "return", ";", "int", "size", "=", "?", ":", "EMPTY_STRING", "getNumberOfElements", "(", ")", "getElement", "(", ")", "size", "!=", "0", "(", ",", "form", ")", "size", "-", "1"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 52, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 24, "n_whitespaces": 25, "n_words": 16, "nloc": 4, "token_counts": 34}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#149-173", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "getElement", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#getElement", "start_line": 149, "end_line": 173, "signature": "getElement(int elementIndex, Form form)", "original_code": "public String getElement(int elementIndex, Form form) {\n\t\tCharSequence element = this.elements.get(elementIndex);\n\t\tElementType type = this.elements.getType(elementIndex);\n\t\tif (type.isIndexed()) {\n\t\t\treturn element.toString();\n\t\t}\n\t\tif (form == Form.ORIGINAL) {\n\t\t\tif (type != ElementType.NON_UNIFORM) {\n\t\t\t\treturn element.toString();\n\t\t\t}\n\t\t\treturn convertToOriginalForm(element).toString();\n\t\t}\n\t\tif (form == Form.DASHED) {\n\t\t\tif (type == ElementType.UNIFORM || type == ElementType.DASHED) {\n\t\t\t\treturn element.toString();\n\t\t\t}\n\t\t\treturn convertToDashedElement(element).toString();\n\t\t}\n\t\tCharSequence uniformElement = this.uniformElements[elementIndex];\n\t\tif (uniformElement == null) {\n\t\t\tuniformElement = (type != ElementType.UNIFORM) ? convertToUniformElement(element) : element;\n\t\t\tthis.uniformElements[elementIndex] = uniformElement.toString();\n\t\t}\n\t\treturn uniformElement.toString();\n\t}", "doc_comment": "/**\n\t * Return an element in the name in the given form.\n\t * @param elementIndex the element index\n\t * @param form the form to return\n\t * @return the last element\n\t */"}, "code_tokens": ["String", "getElement", "public", "(", ",", ")", "{", "}", "elementIndex", "Form", "form", "CharSequence", ";", "ElementType", ";", "if", "if", "if", "CharSequence", ";", "if", "return", ";", "int", "element", "=", "type", "=", "(", ")", "{", "}", "(", ")", "{", "}", "(", ")", "{", "}", "uniformElement", "=", "(", ")", "{", "}", "uniformElement", ".", "toString", ".", "get", ".", "getType", "type", ".", "isIndexed", "return", ";", "form", "==", "if", "return", ";", "form", "==", "if", "return", ";", "[", "elementIndex", "]", "uniformElement", "==", "null", ";", ";", "(", ")", "this", ".", "elements", "(", "elementIndex", ")", "this", ".", "elements", "(", "elementIndex", ")", "(", ")", "element", ".", "toString", "Form", ".", "ORIGINAL", "(", ")", "{", "}", ".", "toString", "Form", ".", "DASHED", "(", ")", "{", "}", ".", "toString", "this", ".", "uniformElements", "uniformElement", "=", "=", "(", ")", "type", "!=", "return", ";", "convertToOriginalForm", "(", ")", "||", "return", ";", "convertToDashedElement", "(", ")", "?", ":", "element", "[", "elementIndex", "]", "uniformElement", ".", "toString", "ElementType", ".", "NON_UNIFORM", "element", ".", "toString", "(", "element", ")", "type", "==", "type", "==", "element", ".", "toString", "(", "element", ")", "(", ")", "convertToUniformElement", "this", ".", "uniformElements", "(", ")", "(", ")", "ElementType", ".", "UNIFORM", "ElementType", ".", "DASHED", "(", ")", "type", "!=", "(", "element", ")", "ElementType", ".", "UNIFORM"], "metrics": {"cyclomatic_complexity": 8, "n_ast_nodes": 278, "ast_depth": 12, "n_identifiers": 21, "vocab_size": 44, "n_whitespaces": 141, "n_words": 81, "nloc": 25, "token_counts": 188}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#175-178", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "convertToOriginalForm", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#convertToOriginalForm", "start_line": 175, "end_line": 178, "signature": "convertToOriginalForm(CharSequence element)", "original_code": "private CharSequence convertToOriginalForm(CharSequence element) {\n\t\treturn convertElement(element, false,\n\t\t\t\t(ch, i) -> ch == '_' || ElementsParser.isValidChar(Character.toLowerCase(ch), i));\n\t}", "doc_comment": ""}, "code_tokens": ["CharSequence", "convertToOriginalForm", "private", "(", ")", "{", "}", "CharSequence", "element", "return", ";", "convertElement", "(", "element", ",", "false", ",", ")", "->", "(", "ch", ",", "i", ")", "||", "ch", "==", "'_'", "ElementsParser", ".", "isValidChar", "(", ",", "i", ")", "Character", ".", "toLowerCase", "(", "ch", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 58, "ast_depth": 13, "n_identifiers": 9, "vocab_size": 24, "n_whitespaces": 24, "n_words": 19, "nloc": 4, "token_counts": 41}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#180-182", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "convertToDashedElement", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#convertToDashedElement", "start_line": 180, "end_line": 182, "signature": "convertToDashedElement(CharSequence element)", "original_code": "private CharSequence convertToDashedElement(CharSequence element) {\n\t\treturn convertElement(element, true, ElementsParser::isValidChar);\n\t}", "doc_comment": ""}, "code_tokens": ["CharSequence", "convertToDashedElement", "private", "(", ")", "{", "}", "CharSequence", "element", "return", ";", "convertElement", "(", "element", ",", "true", ",", ")", "ElementsParser", "::", "isValidChar"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 31, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 16, "n_whitespaces": 12, "n_words": 11, "nloc": 3, "token_counts": 21}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#184-186", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "convertToUniformElement", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#convertToUniformElement", "start_line": 184, "end_line": 186, "signature": "convertToUniformElement(CharSequence element)", "original_code": "private CharSequence convertToUniformElement(CharSequence element) {\n\t\treturn convertElement(element, true, (ch, i) -> ElementsParser.isAlphaNumeric(ch));\n\t}", "doc_comment": ""}, "code_tokens": ["CharSequence", "convertToUniformElement", "private", "(", ")", "{", "}", "CharSequence", "element", "return", ";", "convertElement", "(", "element", ",", "true", ",", ")", "->", "(", "ch", ",", "i", ")", "ElementsParser", ".", "isAlphaNumeric", "(", "ch", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 43, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 19, "n_whitespaces": 15, "n_words": 14, "nloc": 3, "token_counts": 30}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#188-197", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "convertElement", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#convertElement", "start_line": 188, "end_line": 197, "signature": "convertElement(CharSequence element, boolean lowercase, ElementCharPredicate filter)", "original_code": "private CharSequence convertElement(CharSequence element, boolean lowercase, ElementCharPredicate filter) {\n\t\tStringBuilder result = new StringBuilder(element.length());\n\t\tfor (int i = 0; i < element.length(); i++) {\n\t\t\tchar ch = lowercase ? Character.toLowerCase(element.charAt(i)) : element.charAt(i);\n\t\t\tif (filter.test(ch, i)) {\n\t\t\t\tresult.append(ch);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}", "doc_comment": ""}, "code_tokens": ["CharSequence", "convertElement", "private", "(", ",", ",", ")", "{", "}", "CharSequence", "element", "boolean", "lowercase", "ElementCharPredicate", "filter", "StringBuilder", ";", "for", "(", ";", ")", "return", "result", ";", "result", "=", ";", "i", "<", "i", "++", "{", "}", "new", "StringBuilder", "int", "i", "=", "0", "element", ".", "length", ";", "if", "(", ")", "(", ")", "char", "ch", "=", "(", ")", "{", "}", "element", ".", "length", "lowercase", "?", ":", "filter", ".", "test", ";", "(", ")", "Character", ".", "toLowerCase", "element", ".", "charAt", "(", "ch", ",", "i", ")", "result", ".", "append", "(", ")", "(", "i", ")", "(", "ch", ")", "element", ".", "charAt", "(", "i", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 137, "ast_depth": 13, "n_identifiers": 13, "vocab_size": 37, "n_whitespaces": 63, "n_words": 44, "nloc": 10, "token_counts": 95}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#203-205", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "getNumberOfElements", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#getNumberOfElements", "start_line": 203, "end_line": 205, "signature": "getNumberOfElements()", "original_code": "public int getNumberOfElements() {\n\t\treturn this.elements.getSize();\n\t}", "doc_comment": "/**\n\t * Return the total number of elements in the name.\n\t * @return the number of elements\n\t */"}, "code_tokens": ["getNumberOfElements", "public", "int", "(", ")", "{", "}", "return", ";", ".", "getSize", "this", ".", "elements", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 26, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 13, "n_whitespaces": 9, "n_words": 7, "nloc": 3, "token_counts": 16}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#213-219", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "append", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#append", "start_line": 213, "end_line": 219, "signature": "append(@Nullable String suffix)", "original_code": "public ConfigurationPropertyName append(@Nullable String suffix) {\n\t\tif (!StringUtils.hasLength(suffix)) {\n\t\t\treturn this;\n\t\t}\n\t\tElements additionalElements = probablySingleElementOf(suffix);\n\t\treturn new ConfigurationPropertyName(this.elements.append(additionalElements));\n\t}", "doc_comment": "/**\n\t * Create a new {@link ConfigurationPropertyName} by appending the given suffix.\n\t * @param suffix the elements to append\n\t * @return a new {@link ConfigurationPropertyName}\n\t * @throws InvalidConfigurationPropertyNameException if the result is not valid\n\t */"}, "code_tokens": ["ConfigurationPropertyName", "append", "public", "(", ")", "{", "}", "String", "suffix", "if", "Elements", ";", "return", ";", "(", ")", "{", "}", "additionalElements", "=", "new", "ConfigurationPropertyName", "@", "Nullable", "!", "return", "this", ";", "probablySingleElementOf", "(", ")", "StringUtils", ".", "hasLength", "(", "suffix", ")", ".", "append", "(", "suffix", ")", "this", ".", "elements", "(", "additionalElements", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 73, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 25, "n_whitespaces": 31, "n_words": 23, "nloc": 7, "token_counts": 48}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#227-232", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "append", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#append", "start_line": 227, "end_line": 232, "signature": "append(@Nullable ConfigurationPropertyName suffix)", "original_code": "public ConfigurationPropertyName append(@Nullable ConfigurationPropertyName suffix) {\n\t\tif (suffix == null) {\n\t\t\treturn this;\n\t\t}\n\t\treturn new ConfigurationPropertyName(this.elements.append(suffix.elements));\n\t}", "doc_comment": "/**\n\t * Create a new {@link ConfigurationPropertyName} by appending the given suffix.\n\t * @param suffix the elements to append\n\t * @return a new {@link ConfigurationPropertyName}\n\t * @since 2.5.0\n\t */"}, "code_tokens": ["ConfigurationPropertyName", "append", "public", "(", ")", "{", "}", "ConfigurationPropertyName", "suffix", "if", "return", ";", "(", ")", "{", "}", "new", "ConfigurationPropertyName", "@", "Nullable", "suffix", "==", "null", "return", "this", ";", "(", ")", ".", "append", "this", ".", "elements", "(", ")", "suffix", ".", "elements"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 58, "ast_depth": 10, "n_identifiers": 4, "vocab_size": 19, "n_whitespaces": 27, "n_words": 19, "nloc": 6, "token_counts": 38}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#239-242", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "getParent", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#getParent", "start_line": 239, "end_line": 242, "signature": "getParent()", "original_code": "public ConfigurationPropertyName getParent() {\n\t\tint numberOfElements = getNumberOfElements();\n\t\treturn (numberOfElements <= 1) ? EMPTY : chop(numberOfElements - 1);\n\t}", "doc_comment": "/**\n\t * Return the parent of this {@link ConfigurationPropertyName} or\n\t * {@link ConfigurationPropertyName#EMPTY} if there is no parent.\n\t * @return the parent name\n\t */"}, "code_tokens": ["ConfigurationPropertyName", "getParent", "public", "(", ")", "{", "}", ";", "return", ";", "int", "numberOfElements", "=", "?", "EMPTY", ":", "getNumberOfElements", "(", ")", "chop", "(", ")", "numberOfElements", "<=", "1", "(", ")", "numberOfElements", "-", "1"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 47, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 20, "n_whitespaces": 23, "n_words": 13, "nloc": 4, "token_counts": 30}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#251-256", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "chop", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#chop", "start_line": 251, "end_line": 256, "signature": "chop(int size)", "original_code": "public ConfigurationPropertyName chop(int size) {\n\t\tif (size >= getNumberOfElements()) {\n\t\t\treturn this;\n\t\t}\n\t\treturn new ConfigurationPropertyName(this.elements.chop(size));\n\t}", "doc_comment": "/**\n\t * Return a new {@link ConfigurationPropertyName} by chopping this name to the given\n\t * {@code size}. For example, {@code chop(1)} on the name {@code foo.bar} will return\n\t * {@code foo}.\n\t * @param size the size to chop\n\t * @return the chopped name\n\t */"}, "code_tokens": ["ConfigurationPropertyName", "chop", "public", "(", ")", "{", "}", "size", "if", "return", ";", "int", "(", ")", "{", "}", "new", "ConfigurationPropertyName", "size", ">=", "return", "this", ";", "(", ")", "getNumberOfElements", ".", "chop", "(", ")", "this", ".", "elements", "(", "size", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 56, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 18, "n_whitespaces": 26, "n_words": 17, "nloc": 6, "token_counts": 36}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#266-277", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "subName", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#subName", "start_line": 266, "end_line": 277, "signature": "subName(int offset)", "original_code": "public ConfigurationPropertyName subName(int offset) {\n\t\tif (offset == 0) {\n\t\t\treturn this;\n\t\t}\n\t\tif (offset == getNumberOfElements()) {\n\t\t\treturn EMPTY;\n\t\t}\n\t\tif (offset < 0 || offset > getNumberOfElements()) {\n\t\t\tthrow new IndexOutOfBoundsException(\"Offset: \" + offset + \", NumberOfElements: \" + getNumberOfElements());\n\t\t}\n\t\treturn new ConfigurationPropertyName(this.elements.subElements(offset));\n\t}", "doc_comment": "/**\n\t * Return a new {@link ConfigurationPropertyName} by based on this name offset by\n\t * specific element index. For example, {@code subName(1)} on the name {@code foo.bar}\n\t * will return {@code bar}.\n\t * @param offset the element offset\n\t * @return the sub name\n\t * @since 2.5.0\n\t */"}, "code_tokens": ["ConfigurationPropertyName", "subName", "public", "(", ")", "{", "}", "offset", "if", "if", "if", "return", ";", "int", "(", ")", "{", "}", "(", ")", "{", "}", "(", ")", "{", "}", "new", "ConfigurationPropertyName", "offset", "==", "0", "return", "this", ";", "offset", "==", "return", "EMPTY", ";", "||", "throw", ";", "(", ")", "getNumberOfElements", "offset", "<", "0", "offset", ">", "new", "IndexOutOfBoundsException", ".", "subElements", "(", ")", "getNumberOfElements", "(", ")", "this", ".", "elements", "(", "offset", ")", "(", ")", "+", "+", "getNumberOfElements", "+", "offset", "\"", ", NumberOfElements: ", "\"", "(", ")", "\"", "Offset: ", "\""], "metrics": {"cyclomatic_complexity": 5, "n_ast_nodes": 123, "ast_depth": 13, "n_identifiers": 6, "vocab_size": 30, "n_whitespaces": 70, "n_words": 34, "nloc": 12, "token_counts": 80}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#284-290", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "isParentOf", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#isParentOf", "start_line": 284, "end_line": 290, "signature": "isParentOf(ConfigurationPropertyName name)", "original_code": "public boolean isParentOf(ConfigurationPropertyName name) {\n\t\tAssert.notNull(name, \"'name' must not be null\");\n\t\tif (getNumberOfElements() != name.getNumberOfElements() - 1) {\n\t\t\treturn false;\n\t\t}\n\t\treturn isAncestorOf(name);\n\t}", "doc_comment": "/**\n\t * Returns {@code true} if this element is an immediate parent of the specified name.\n\t * @param name the name to check\n\t * @return {@code true} if this name is an ancestor\n\t */"}, "code_tokens": ["boolean", "isParentOf", "public", "(", ")", "{", "}", "ConfigurationPropertyName", "name", ";", "if", "return", ";", "Assert", ".", "notNull", "(", ")", "{", "}", "isAncestorOf", "(", "name", ",", ")", "!=", "return", "false", ";", "(", "name", ")", "\"", "'name' must not be null", "\"", "getNumberOfElements", "-", "1", "(", ")", "name", ".", "getNumberOfElements", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 68, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 24, "n_whitespaces": 35, "n_words": 23, "nloc": 7, "token_counts": 45}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#298-304", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "isAncestorOf", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#isAncestorOf", "start_line": 298, "end_line": 304, "signature": "isAncestorOf(ConfigurationPropertyName name)", "original_code": "public boolean isAncestorOf(ConfigurationPropertyName name) {\n\t\tAssert.notNull(name, \"'name' must not be null\");\n\t\tif (getNumberOfElements() >= name.getNumberOfElements()) {\n\t\t\treturn false;\n\t\t}\n\t\treturn endsWithElementsEqualTo(name);\n\t}", "doc_comment": "/**\n\t * Returns {@code true} if this element is an ancestor (immediate or nested parent) of\n\t * the specified name.\n\t * @param name the name to check\n\t * @return {@code true} if this name is an ancestor\n\t */"}, "code_tokens": ["boolean", "isAncestorOf", "public", "(", ")", "{", "}", "ConfigurationPropertyName", "name", ";", "if", "return", ";", "Assert", ".", "notNull", "(", ")", "{", "}", "endsWithElementsEqualTo", "(", "name", ",", ")", ">=", "return", "false", ";", "(", "name", ")", "\"", "'name' must not be null", "\"", "getNumberOfElements", "name", ".", "getNumberOfElements", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 65, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 22, "n_whitespaces": 33, "n_words": 22, "nloc": 7, "token_counts": 43}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#306-309", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "compareTo", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#compareTo", "start_line": 306, "end_line": 309, "signature": "compareTo(ConfigurationPropertyName other)", "original_code": "@Override\n\tpublic int compareTo(ConfigurationPropertyName other) {\n\t\treturn compare(this, other);\n\t}", "doc_comment": ""}, "code_tokens": ["compareTo", "public", "int", "(", ")", "{", "}", "@", "Override", "ConfigurationPropertyName", "other", "return", ";", "compare", "(", "this", ",", "other", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 30, "ast_depth": 7, "n_identifiers": 4, "vocab_size": 16, "n_whitespaces": 13, "n_words": 10, "nloc": 4, "token_counts": 19}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#311-332", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "compare", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#compare", "start_line": 311, "end_line": 332, "signature": "compare(ConfigurationPropertyName n1, ConfigurationPropertyName n2)", "original_code": "private int compare(ConfigurationPropertyName n1, ConfigurationPropertyName n2) {\n\t\tint l1 = n1.getNumberOfElements();\n\t\tint l2 = n2.getNumberOfElements();\n\t\tint i1 = 0;\n\t\tint i2 = 0;\n\t\twhile (i1 < l1 || i2 < l2) {\n\t\t\ttry {\n\t\t\t\tElementType type1 = (i1 < l1) ? n1.elements.getType(i1) : null;\n\t\t\t\tElementType type2 = (i2 < l2) ? n2.elements.getType(i2) : null;\n\t\t\t\tString e1 = (i1 < l1) ? n1.getElement(i1++, Form.UNIFORM) : null;\n\t\t\t\tString e2 = (i2 < l2) ? n2.getElement(i2++, Form.UNIFORM) : null;\n\t\t\t\tint result = compare(e1, type1, e2, type2);\n\t\t\t\tif (result != 0) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (ArrayIndexOutOfBoundsException ex) {\n\t\t\t\tthrow new RuntimeException(ex);\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}", "doc_comment": ""}, "code_tokens": ["compare", "private", "int", "(", ",", ")", "{", "}", "ConfigurationPropertyName", "n1", "ConfigurationPropertyName", "n2", ";", ";", ";", ";", "while", "return", "0", ";", "int", "l1", "=", "int", "l2", "=", "int", "i1", "=", "0", "int", "i2", "=", "0", "(", ")", "{", "}", "n1", ".", "getNumberOfElements", "n2", ".", "getNumberOfElements", "||", "try", "(", ")", "(", ")", "i1", "<", "l1", "i2", "<", "l2", "{", "}", "catch", "(", ")", "ElementType", ";", "ElementType", ";", "String", ";", "String", ";", ";", "if", "ex", "{", "}", "type1", "=", "type2", "=", "e1", "=", "e2", "=", "int", "result", "=", "(", ")", "{", "}", "ArrayIndexOutOfBoundsException", "throw", ";", "?", ":", "null", "?", ":", "null", "?", ":", "null", "?", ":", "null", "compare", "result", "!=", "0", "return", "result", ";", "new", "RuntimeException", "(", ")", ".", "getType", "(", ")", ".", "getType", "(", ")", "n1", ".", "getElement", "(", ")", "n2", ".", "getElement", "(", "e1", ",", "type1", ",", "e2", ",", "type2", ")", "(", "ex", ")", "i1", "<", "l1", "n1", ".", "elements", "(", "i1", ")", "i2", "<", "l2", "n2", ".", "elements", "(", "i2", ")", "i1", "<", "l1", "(", ",", ")", "i2", "<", "l2", "(", ",", ")", "i1", "++", "Form", ".", "UNIFORM", "i2", "++", "Form", ".", "UNIFORM"], "metrics": {"cyclomatic_complexity": 5, "n_ast_nodes": 267, "ast_depth": 14, "n_identifiers": 19, "vocab_size": 49, "n_whitespaces": 167, "n_words": 86, "nloc": 22, "token_counts": 183}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#334-354", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "compare", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#compare", "start_line": 334, "end_line": 354, "signature": "compare(@Nullable String e1, @Nullable ElementType type1, @Nullable String e2,\n\t\t\t@Nullable ElementType type2)", "original_code": "private int compare(@Nullable String e1, @Nullable ElementType type1, @Nullable String e2,\n\t\t\t@Nullable ElementType type2) {\n\t\tif (e1 == null) {\n\t\t\treturn -1;\n\t\t}\n\t\tif (e2 == null) {\n\t\t\treturn 1;\n\t\t}\n\t\tAssert.state(type1 != null, \"'type1' must not be null\");\n\t\tAssert.state(type2 != null, \"'type2' must not be null\");\n\t\tint result = Boolean.compare(type2.isIndexed(), type1.isIndexed());\n\t\tif (result != 0) {\n\t\t\treturn result;\n\t\t}\n\t\tif (type1 == ElementType.NUMERICALLY_INDEXED && type2 == ElementType.NUMERICALLY_INDEXED) {\n\t\t\tlong v1 = Long.parseLong(e1);\n\t\t\tlong v2 = Long.parseLong(e2);\n\t\t\treturn Long.compare(v1, v2);\n\t\t}\n\t\treturn e1.compareTo(e2);\n\t}", "doc_comment": ""}, "code_tokens": ["compare", "private", "int", "(", ",", ",", ",", ")", "{", "}", "String", "e1", "ElementType", "type1", "String", "e2", "ElementType", "type2", "if", "if", ";", ";", ";", "if", "if", "return", ";", "(", ")", "{", "}", "(", ")", "{", "}", "Assert", ".", "state", "Assert", ".", "state", "int", "result", "=", "(", ")", "{", "}", "(", ")", "{", "}", "e1", ".", "compareTo", "@", "Nullable", "@", "Nullable", "@", "Nullable", "@", "Nullable", "e1", "==", "null", "return", ";", "e2", "==", "null", "return", "1", ";", "(", ",", ")", "(", ",", ")", "Boolean", ".", "compare", "result", "!=", "0", "return", "result", ";", "&&", ";", ";", "return", ";", "(", "e2", ")", "-", "1", "type1", "!=", "null", "\"", "'type1' must not be null", "\"", "type2", "!=", "null", "\"", "'type2' must not be null", "\"", "(", ",", ")", "type1", "==", "type2", "==", "long", "v1", "=", "long", "v2", "=", "Long", ".", "compare", "type2", ".", "isIndexed", "type1", ".", "isIndexed", "ElementType", ".", "NUMERICALLY_INDEXED", "ElementType", ".", "NUMERICALLY_INDEXED", "Long", ".", "parseLong", "Long", ".", "parseLong", "(", "v1", ",", "v2", ")", "(", ")", "(", ")", "(", "e1", ")", "(", "e2", ")"], "metrics": {"cyclomatic_complexity": 6, "n_ast_nodes": 237, "ast_depth": 10, "n_identifiers": 18, "vocab_size": 43, "n_whitespaces": 129, "n_words": 82, "nloc": 21, "token_counts": 160}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#356-379", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "equals", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#equals", "start_line": 356, "end_line": 379, "signature": "equals(Object obj)", "original_code": "@Override\n\tpublic boolean equals(Object obj) {\n\t\tif (obj == this) {\n\t\t\treturn true;\n\t\t}\n\t\tif (obj == null || obj.getClass() != getClass()) {\n\t\t\treturn false;\n\t\t}\n\t\tConfigurationPropertyName other = (ConfigurationPropertyName) obj;\n\t\tif (getNumberOfElements() != other.getNumberOfElements()) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this.elements.canShortcutWithSource(ElementType.UNIFORM)\n\t\t\t\t&& other.elements.canShortcutWithSource(ElementType.UNIFORM)) {\n\t\t\treturn toString().equals(other.toString());\n\t\t}\n\t\tif (hashCode() != other.hashCode()) {\n\t\t\treturn false;\n\t\t}\n\t\tif (toStringMatches(toString(), other.toString())) {\n\t\t\treturn true;\n\t\t}\n\t\treturn endsWithElementsEqualTo(other);\n\t}", "doc_comment": ""}, "code_tokens": ["boolean", "equals", "public", "(", ")", "{", "}", "@", "Override", "Object", "obj", "if", "if", "ConfigurationPropertyName", ";", "if", "if", "if", "if", "return", ";", "(", ")", "{", "}", "(", ")", "{", "}", "other", "=", "(", ")", "{", "}", "(", ")", "{", "}", "(", ")", "{", "}", "(", ")", "{", "}", "endsWithElementsEqualTo", "obj", "==", "this", "return", "true", ";", "||", "return", "false", ";", "(", "ConfigurationPropertyName", ")", "obj", "!=", "return", "false", ";", "&&", "return", ";", "!=", "return", "false", ";", "toStringMatches", "return", "true", ";", "(", "other", ")", "obj", "==", "null", "!=", "getNumberOfElements", "other", ".", "getNumberOfElements", ".", "canShortcutWithSource", ".", "canShortcutWithSource", ".", "equals", "hashCode", "other", ".", "hashCode", "(", ",", ")", "obj", ".", "getClass", "getClass", "(", ")", "(", ")", "this", ".", "elements", "(", ")", "other", ".", "elements", "(", ")", "toString", "(", ")", "(", ")", "(", ")", "toString", "other", ".", "toString", "(", ")", "(", ")", "ElementType", ".", "UNIFORM", "ElementType", ".", "UNIFORM", "(", ")", "other", ".", "toString", "(", ")", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 9, "n_ast_nodes": 227, "ast_depth": 11, "n_identifiers": 14, "vocab_size": 37, "n_whitespaces": 116, "n_words": 61, "nloc": 24, "token_counts": 151}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#381-383", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "toStringMatches", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#toStringMatches", "start_line": 381, "end_line": 383, "signature": "toStringMatches(String s1, String s2)", "original_code": "private boolean toStringMatches(String s1, String s2) {\n\t\treturn s1.hashCode() == s2.hashCode() && s1.equals(s2);\n\t}", "doc_comment": ""}, "code_tokens": ["boolean", "toStringMatches", "private", "(", ",", ")", "{", "}", "String", "s1", "String", "s2", "return", ";", "&&", "==", "s1", ".", "equals", "s1", ".", "hashCode", "s2", ".", "hashCode", "(", "s2", ")", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 48, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 18, "n_whitespaces": 16, "n_words": 15, "nloc": 3, "token_counts": 32}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#385-392", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "endsWithElementsEqualTo", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#endsWithElementsEqualTo", "start_line": 385, "end_line": 392, "signature": "endsWithElementsEqualTo(ConfigurationPropertyName name)", "original_code": "private boolean endsWithElementsEqualTo(ConfigurationPropertyName name) {\n\t\tfor (int i = this.elements.getSize() - 1; i >= 0; i--) {\n\t\t\tif (elementDiffers(this.elements, name.elements, i)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}", "doc_comment": ""}, "code_tokens": ["boolean", "endsWithElementsEqualTo", "private", "(", ")", "{", "}", "ConfigurationPropertyName", "name", "for", "(", ";", ")", "return", "true", ";", ";", "i", ">=", "0", "i", "--", "{", "}", "int", "i", "=", "if", "-", "1", "(", ")", "{", "}", ".", "getSize", "elementDiffers", "return", "false", ";", "this", ".", "elements", "(", ")", "(", ",", ",", "i", ")", "this", ".", "elements", "name", ".", "elements"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 82, "ast_depth": 11, "n_identifiers": 6, "vocab_size": 29, "n_whitespaces": 45, "n_words": 26, "nloc": 8, "token_counts": 56}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#394-404", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "elementDiffers", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#elementDiffers", "start_line": 394, "end_line": 404, "signature": "elementDiffers(Elements e1, Elements e2, int i)", "original_code": "private boolean elementDiffers(Elements e1, Elements e2, int i) {\n\t\tElementType type1 = e1.getType(i);\n\t\tElementType type2 = e2.getType(i);\n\t\tif (type1.allowsFastEqualityCheck() && type2.allowsFastEqualityCheck()) {\n\t\t\treturn !fastElementEquals(e1, e2, i);\n\t\t}\n\t\tif (type1.allowsDashIgnoringEqualityCheck() && type2.allowsDashIgnoringEqualityCheck()) {\n\t\t\treturn !dashIgnoringElementEquals(e1, e2, i);\n\t\t}\n\t\treturn !defaultElementEquals(e1, e2, i);\n\t}", "doc_comment": ""}, "code_tokens": ["boolean", "elementDiffers", "private", "(", ",", ",", ")", "{", "}", "Elements", "e1", "Elements", "e2", "i", "ElementType", ";", "ElementType", ";", "if", "if", "return", ";", "int", "type1", "=", "type2", "=", "(", ")", "{", "}", "(", ")", "{", "}", "!", "e1", ".", "getType", "e2", ".", "getType", "&&", "return", ";", "&&", "return", ";", "defaultElementEquals", "(", "i", ")", "(", "i", ")", "type1", ".", "allowsFastEqualityCheck", "type2", ".", "allowsFastEqualityCheck", "!", "type1", ".", "allowsDashIgnoringEqualityCheck", "type2", ".", "allowsDashIgnoringEqualityCheck", "!", "(", "e1", ",", "e2", ",", "i", ")", "(", ")", "(", ")", "fastElementEquals", "(", ")", "(", ")", "dashIgnoringElementEquals", "(", "e1", ",", "e2", ",", "i", ")", "(", "e1", ",", "e2", ",", "i", ")"], "metrics": {"cyclomatic_complexity": 5, "n_ast_nodes": 145, "ast_depth": 10, "n_identifiers": 12, "vocab_size": 29, "n_whitespaces": 62, "n_words": 44, "nloc": 11, "token_counts": 100}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#406-422", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "fastElementEquals", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#fastElementEquals", "start_line": 406, "end_line": 422, "signature": "fastElementEquals(Elements e1, Elements e2, int i)", "original_code": "private boolean fastElementEquals(Elements e1, Elements e2, int i) {\n\t\tint length1 = e1.getLength(i);\n\t\tint length2 = e2.getLength(i);\n\t\tif (length1 == length2) {\n\t\t\tint i1 = 0;\n\t\t\twhile (length1-- != 0) {\n\t\t\t\tchar ch1 = e1.charAt(i, i1);\n\t\t\t\tchar ch2 = e2.charAt(i, i1);\n\t\t\t\tif (ch1 != ch2) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\ti1++;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}", "doc_comment": ""}, "code_tokens": ["boolean", "fastElementEquals", "private", "(", ",", ",", ")", "{", "}", "Elements", "e1", "Elements", "e2", "i", ";", ";", "if", "return", "false", ";", "int", "int", "length1", "=", "int", "length2", "=", "(", ")", "{", "}", "e1", ".", "getLength", "e2", ".", "getLength", "length1", "==", "length2", ";", "while", "return", "true", ";", "(", "i", ")", "(", "i", ")", "int", "i1", "=", "0", "(", ")", "{", "}", "!=", "0", ";", ";", "if", ";", "length1", "--", "char", "ch1", "=", "char", "ch2", "=", "(", ")", "{", "}", "i1", "++", "e1", ".", "charAt", "e2", ".", "charAt", "ch1", "!=", "ch2", "return", "false", ";", "(", "i", ",", "i1", ")", "(", "i", ",", "i1", ")"], "metrics": {"cyclomatic_complexity": 4, "n_ast_nodes": 151, "ast_depth": 12, "n_identifiers": 11, "vocab_size": 34, "n_whitespaces": 104, "n_words": 50, "nloc": 17, "token_counts": 101}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#424-462", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "dashIgnoringElementEquals", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#dashIgnoringElementEquals", "start_line": 424, "end_line": 462, "signature": "dashIgnoringElementEquals(Elements e1, Elements e2, int i)", "original_code": "private boolean dashIgnoringElementEquals(Elements e1, Elements e2, int i) {\n\t\tint l1 = e1.getLength(i);\n\t\tint l2 = e2.getLength(i);\n\t\tint i1 = 0;\n\t\tint i2 = 0;\n\t\twhile (i1 < l1) {\n\t\t\tif (i2 >= l2) {\n\t\t\t\treturn remainderIsDashes(e1, i, i1);\n\t\t\t}\n\t\t\tchar ch1 = e1.charAt(i, i1);\n\t\t\tchar ch2 = e2.charAt(i, i2);\n\t\t\tif (ch1 == '-') {\n\t\t\t\ti1++;\n\t\t\t}\n\t\t\telse if (ch2 == '-') {\n\t\t\t\ti2++;\n\t\t\t}\n\t\t\telse if (ch1 != ch2) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\ti1++;\n\t\t\t\ti2++;\n\t\t\t}\n\t\t}\n\t\tif (i2 < l2) {\n\t\t\tif (e2.getType(i).isIndexed()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tdo {\n\t\t\t\tchar ch2 = e2.charAt(i, i2++);\n\t\t\t\tif (ch2 != '-') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile (i2 < l2);\n\t\t}\n\t\treturn true;\n\t}", "doc_comment": ""}, "code_tokens": ["boolean", "dashIgnoringElementEquals", "private", "(", ",", ",", ")", "{", "}", "Elements", "e1", "Elements", "e2", "i", ";", ";", ";", ";", "while", "if", "return", "true", ";", "int", "int", "l1", "=", "int", "l2", "=", "int", "i1", "=", "0", "int", "i2", "=", "0", "(", ")", "{", "}", "(", ")", "{", "}", "e1", ".", "getLength", "e2", ".", "getLength", "i1", "<", "l1", "if", ";", ";", "if", "else", "i2", "<", "l2", "if", "do", "while", ";", "(", "i", ")", "(", "i", ")", "(", ")", "{", "}", "char", "ch1", "=", "char", "ch2", "=", "(", ")", "{", "}", "if", "else", "(", ")", "{", "}", "{", "}", "(", ")", "i2", ">=", "l2", "return", ";", "e1", ".", "charAt", "e2", ".", "charAt", "ch1", "==", "'-'", ";", "(", ")", "{", "}", "if", "else", ".", "isIndexed", "return", "false", ";", ";", "if", "i2", "<", "l2", "remainderIsDashes", "(", "i", ",", "i1", ")", "(", "i", ",", "i2", ")", "i1", "++", "ch2", "==", "'-'", ";", "(", ")", "{", "}", "{", "}", "e2", ".", "getType", "(", ")", "char", "ch2", "=", "(", ")", "{", "}", "(", "e1", ",", "i", ",", "i1", ")", "i2", "++", "ch1", "!=", "ch2", "return", "false", ";", ";", ";", "(", "i", ")", "e2", ".", "charAt", "ch2", "!=", "'-'", "return", "false", ";", "i1", "++", "i2", "++", "(", "i", ",", ")", "i2", "++"], "metrics": {"cyclomatic_complexity": 10, "n_ast_nodes": 298, "ast_depth": 13, "n_identifiers": 15, "vocab_size": 42, "n_whitespaces": 229, "n_words": 90, "nloc": 39, "token_counts": 202}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#464-495", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "defaultElementEquals", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#defaultElementEquals", "start_line": 464, "end_line": 495, "signature": "defaultElementEquals(Elements e1, Elements e2, int i)", "original_code": "private boolean defaultElementEquals(Elements e1, Elements e2, int i) {\n\t\tint l1 = e1.getLength(i);\n\t\tint l2 = e2.getLength(i);\n\t\tboolean indexed1 = e1.getType(i).isIndexed();\n\t\tboolean indexed2 = e2.getType(i).isIndexed();\n\t\tint i1 = 0;\n\t\tint i2 = 0;\n\t\twhile (i1 < l1) {\n\t\t\tif (i2 >= l2) {\n\t\t\t\treturn remainderIsNotAlphanumeric(e1, i, i1);\n\t\t\t}\n\t\t\tchar ch1 = indexed1 ? e1.charAt(i, i1) : Character.toLowerCase(e1.charAt(i, i1));\n\t\t\tchar ch2 = indexed2 ? e2.charAt(i, i2) : Character.toLowerCase(e2.charAt(i, i2));\n\t\t\tif (!indexed1 && !ElementsParser.isAlphaNumeric(ch1)) {\n\t\t\t\ti1++;\n\t\t\t}\n\t\t\telse if (!indexed2 && !ElementsParser.isAlphaNumeric(ch2)) {\n\t\t\t\ti2++;\n\t\t\t}\n\t\t\telse if (ch1 != ch2) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\ti1++;\n\t\t\t\ti2++;\n\t\t\t}\n\t\t}\n\t\tif (i2 < l2) {\n\t\t\treturn remainderIsNotAlphanumeric(e2, i, i2);\n\t\t}\n\t\treturn true;\n\t}", "doc_comment": ""}, "code_tokens": ["boolean", "defaultElementEquals", "private", "(", ",", ",", ")", "{", "}", "Elements", "e1", "Elements", "e2", "i", ";", ";", "boolean", ";", "boolean", ";", ";", ";", "while", "if", "return", "true", ";", "int", "int", "l1", "=", "int", "l2", "=", "indexed1", "=", "indexed2", "=", "int", "i1", "=", "0", "int", "i2", "=", "0", "(", ")", "{", "}", "(", ")", "{", "}", "e1", ".", "getLength", "e2", ".", "getLength", ".", "isIndexed", ".", "isIndexed", "i1", "<", "l1", "if", ";", ";", "if", "else", "i2", "<", "l2", "return", ";", "(", "i", ")", "(", "i", ")", "e1", ".", "getType", "(", ")", "e2", ".", "getType", "(", ")", "(", ")", "{", "}", "char", "ch1", "=", "char", "ch2", "=", "(", ")", "{", "}", "if", "else", "remainderIsNotAlphanumeric", "(", "i", ")", "(", "i", ")", "i2", ">=", "l2", "return", ";", "indexed1", "?", ":", "indexed2", "?", ":", "&&", ";", "(", ")", "{", "}", "if", "else", "(", "e2", ",", "i", ",", "i2", ")", "remainderIsNotAlphanumeric", "e1", ".", "charAt", "Character", ".", "toLowerCase", "e2", ".", "charAt", "Character", ".", "toLowerCase", "!", "indexed1", "!", "i1", "++", "&&", ";", "(", ")", "{", "}", "{", "}", "(", "e1", ",", "i", ",", "i1", ")", "(", "i", ",", "i1", ")", "(", ")", "(", "i", ",", "i2", ")", "(", ")", "ElementsParser", ".", "isAlphaNumeric", "!", "indexed2", "!", "i2", "++", "ch1", "!=", "ch2", "return", "false", ";", ";", ";", "e1", ".", "charAt", "e2", ".", "charAt", "(", "ch1", ")", "ElementsParser", ".", "isAlphaNumeric", "i1", "++", "i2", "++", "(", "i", ",", "i1", ")", "(", "i", ",", "i2", ")", "(", "ch2", ")"], "metrics": {"cyclomatic_complexity": 9, "n_ast_nodes": 340, "ast_depth": 13, "n_identifiers": 21, "vocab_size": 49, "n_whitespaces": 196, "n_words": 106, "nloc": 32, "token_counts": 234}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#497-510", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "remainderIsNotAlphanumeric", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#remainderIsNotAlphanumeric", "start_line": 497, "end_line": 510, "signature": "remainderIsNotAlphanumeric(Elements elements, int element, int index)", "original_code": "private boolean remainderIsNotAlphanumeric(Elements elements, int element, int index) {\n\t\tif (elements.getType(element).isIndexed()) {\n\t\t\treturn false;\n\t\t}\n\t\tint length = elements.getLength(element);\n\t\tdo {\n\t\t\tchar c = Character.toLowerCase(elements.charAt(element, index++));\n\t\t\tif (ElementsParser.isAlphaNumeric(c)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\twhile (index < length);\n\t\treturn true;\n\t}", "doc_comment": ""}, "code_tokens": ["boolean", "remainderIsNotAlphanumeric", "private", "(", ",", ",", ")", "{", "}", "Elements", "elements", "element", "index", "if", ";", "do", "while", ";", "return", "true", ";", "int", "int", "(", ")", "{", "}", "int", "length", "=", "{", "}", "(", ")", ".", "isIndexed", "return", "false", ";", "elements", ".", "getLength", ";", "if", "index", "<", "length", "elements", ".", "getType", "(", ")", "(", "element", ")", "char", "c", "=", "(", ")", "{", "}", "(", "element", ")", "Character", ".", "toLowerCase", "ElementsParser", ".", "isAlphaNumeric", "return", "false", ";", "(", ")", "(", "c", ")", "elements", ".", "charAt", "(", "element", ",", ")", "index", "++"], "metrics": {"cyclomatic_complexity": 4, "n_ast_nodes": 130, "ast_depth": 13, "n_identifiers": 14, "vocab_size": 35, "n_whitespaces": 70, "n_words": 41, "nloc": 14, "token_counts": 88}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#512-525", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "remainderIsDashes", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#remainderIsDashes", "start_line": 512, "end_line": 525, "signature": "remainderIsDashes(Elements elements, int element, int index)", "original_code": "private boolean remainderIsDashes(Elements elements, int element, int index) {\n\t\tif (elements.getType(element).isIndexed()) {\n\t\t\treturn false;\n\t\t}\n\t\tint length = elements.getLength(element);\n\t\tdo {\n\t\t\tchar c = elements.charAt(element, index++);\n\t\t\tif (c != '-') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\twhile (index < length);\n\t\treturn true;\n\t}", "doc_comment": ""}, "code_tokens": ["boolean", "remainderIsDashes", "private", "(", ",", ",", ")", "{", "}", "Elements", "elements", "element", "index", "if", ";", "do", "while", ";", "return", "true", ";", "int", "int", "(", ")", "{", "}", "int", "length", "=", "{", "}", "(", ")", ".", "isIndexed", "return", "false", ";", "elements", ".", "getLength", ";", "if", "index", "<", "length", "elements", ".", "getType", "(", ")", "(", "element", ")", "char", "c", "=", "(", ")", "{", "}", "(", "element", ")", "elements", ".", "charAt", "c", "!=", "'-'", "return", "false", ";", "(", "element", ",", ")", "index", "++"], "metrics": {"cyclomatic_complexity": 4, "n_ast_nodes": 119, "ast_depth": 11, "n_identifiers": 10, "vocab_size": 33, "n_whitespaces": 72, "n_words": 37, "nloc": 14, "token_counts": 80}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#527-538", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "hashCode", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#hashCode", "start_line": 527, "end_line": 538, "signature": "hashCode()", "original_code": "@Override\n\tpublic int hashCode() {\n\t\tint hashCode = this.hashCode;\n\t\tElements elements = this.elements;\n\t\tif (hashCode == 0 && elements.getSize() != 0) {\n\t\t\tfor (int elementIndex = 0; elementIndex < elements.getSize(); elementIndex++) {\n\t\t\t\thashCode = 31 * hashCode + elements.hashCode(elementIndex);\n\t\t\t}\n\t\t\tthis.hashCode = hashCode;\n\t\t}\n\t\treturn hashCode;\n\t}", "doc_comment": ""}, "code_tokens": ["hashCode", "public", "int", "(", ")", "{", "}", "@", "Override", ";", "Elements", ";", "if", "return", "hashCode", ";", "int", "hashCode", "=", "elements", "=", "(", ")", "{", "}", "this", ".", "hashCode", "this", ".", "elements", "&&", "for", "(", ";", ")", ";", "hashCode", "==", "0", "!=", "0", ";", "elementIndex", "<", "elementIndex", "++", "{", "}", "=", "hashCode", "elements", ".", "getSize", "int", "elementIndex", "=", "0", "elements", ".", "getSize", ";", "this", ".", "hashCode", "(", ")", "(", ")", "hashCode", "=", "+", "31", "*", "hashCode", "elements", ".", "hashCode", "(", "elementIndex", ")"], "metrics": {"cyclomatic_complexity": 4, "n_ast_nodes": 122, "ast_depth": 13, "n_identifiers": 5, "vocab_size": 29, "n_whitespaces": 71, "n_words": 37, "nloc": 12, "token_counts": 81}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#540-548", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "asSystemEnvironmentLegacyName", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#asSystemEnvironmentLegacyName", "start_line": 540, "end_line": 548, "signature": "asSystemEnvironmentLegacyName()", "original_code": "@Nullable ConfigurationPropertyName asSystemEnvironmentLegacyName() {\n\t\tConfigurationPropertyName name = this.systemEnvironmentLegacyName;\n\t\tif (name == null) {\n\t\t\tname = ConfigurationPropertyName\n\t\t\t\t.ofIfValid(buildSimpleToString('.', (i) -> getElement(i, Form.DASHED).replace('-', '.')));\n\t\t\tthis.systemEnvironmentLegacyName = (name != null) ? name : EMPTY;\n\t\t}\n\t\treturn (name != EMPTY) ? name : null;\n\t}", "doc_comment": ""}, "code_tokens": ["ConfigurationPropertyName", "asSystemEnvironmentLegacyName", "(", ")", "{", "}", "@", "Nullable", "ConfigurationPropertyName", ";", "if", "return", ";", "name", "=", "(", ")", "{", "}", "?", "name", ":", "null", "this", ".", "systemEnvironmentLegacyName", "name", "==", "null", ";", ";", "(", ")", "name", "=", "=", "name", "!=", "EMPTY", "ConfigurationPropertyName", ".", "ofIfValid", "this", ".", "systemEnvironmentLegacyName", "?", "name", ":", "EMPTY", "(", ")", "(", ")", "buildSimpleToString", "name", "!=", "null", "(", "'.'", ",", ")", "->", "(", "i", ")", ".", "replace", "getElement", "(", "'-'", ",", "'.'", ")", "(", "i", ",", ")", "Form", ".", "DASHED"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 116, "ast_depth": 17, "n_identifiers": 13, "vocab_size": 33, "n_whitespaces": 59, "n_words": 31, "nloc": 9, "token_counts": 80}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#550-553", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "toString", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#toString", "start_line": 550, "end_line": 553, "signature": "toString()", "original_code": "@Override\n\tpublic String toString() {\n\t\treturn toString(ToStringFormat.DEFAULT, false);\n\t}", "doc_comment": ""}, "code_tokens": ["String", "toString", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "toString", "(", ",", "false", ")", "ToStringFormat", ".", "DEFAULT"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 29, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 16, "n_whitespaces": 12, "n_words": 9, "nloc": 4, "token_counts": 19}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#555-562", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "toString", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#toString", "start_line": 555, "end_line": 562, "signature": "toString(ToStringFormat format, boolean upperCase)", "original_code": "String toString(ToStringFormat format, boolean upperCase) {\n\t\tString string = this.string[format.ordinal()];\n\t\tif (string == null) {\n\t\t\tstring = buildToString(format);\n\t\t\tthis.string[format.ordinal()] = string;\n\t\t}\n\t\treturn (!upperCase) ? string : string.toUpperCase(Locale.ENGLISH);\n\t}", "doc_comment": ""}, "code_tokens": ["String", "toString", "(", ",", ")", "{", "}", "ToStringFormat", "format", "boolean", "upperCase", "String", ";", "if", "return", ";", "string", "=", "(", ")", "{", "}", "?", "string", ":", "[", "]", "string", "==", "null", ";", ";", "(", ")", "string", ".", "toUpperCase", "this", ".", "string", "format", ".", "ordinal", "string", "=", "=", "string", "!", "upperCase", "(", ")", "(", ")", "buildToString", "[", "]", "Locale", ".", "ENGLISH", "(", "format", ")", "this", ".", "string", "format", ".", "ordinal", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 103, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 30, "n_whitespaces": 43, "n_words": 30, "nloc": 8, "token_counts": 70}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#564-571", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "buildToString", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#buildToString", "start_line": 564, "end_line": 571, "signature": "buildToString(ToStringFormat format)", "original_code": "private String buildToString(ToStringFormat format) {\n\t\treturn switch (format) {\n\t\t\tcase DEFAULT -> buildDefaultToString();\n\t\t\tcase SYSTEM_ENVIRONMENT -> buildSimpleToString('_', (i) -> getElement(i, Form.UNIFORM));\n\t\t\tcase LEGACY_SYSTEM_ENVIRONMENT ->\n\t\t\t\tbuildSimpleToString('_', (i) -> getElement(i, Form.ORIGINAL).replace('-', '_'));\n\t\t};\n\t}", "doc_comment": ""}, "code_tokens": ["String", "buildToString", "private", "(", ")", "{", "}", "ToStringFormat", "format", "return", ";", "switch", "(", "format", ")", "{", "}", "->", "->", "->", "case", "DEFAULT", ";", "case", "SYSTEM_ENVIRONMENT", ";", "case", "LEGACY_SYSTEM_ENVIRONMENT", ";", "buildDefaultToString", "buildSimpleToString", "buildSimpleToString", "(", ")", "(", "'_'", ",", ")", "(", "'_'", ",", ")", "->", "->", "(", "i", ")", "getElement", "(", "i", ")", ".", "replace", "(", "i", ",", ")", "getElement", "(", "'-'", ",", "'_'", ")", "Form", ".", "UNIFORM", "(", "i", ",", ")", "Form", ".", "ORIGINAL"], "metrics": {"cyclomatic_complexity": 4, "n_ast_nodes": 110, "ast_depth": 16, "n_identifiers": 13, "vocab_size": 29, "n_whitespaces": 49, "n_words": 31, "nloc": 8, "token_counts": 73}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#573-594", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "buildDefaultToString", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#buildDefaultToString", "start_line": 573, "end_line": 594, "signature": "buildDefaultToString()", "original_code": "private String buildDefaultToString() {\n\t\tif (this.elements.canShortcutWithSource(ElementType.UNIFORM, ElementType.DASHED)) {\n\t\t\treturn this.elements.getSource().toString();\n\t\t}\n\t\tint elements = getNumberOfElements();\n\t\tStringBuilder result = new StringBuilder(elements * 8);\n\t\tfor (int i = 0; i < elements; i++) {\n\t\t\tboolean indexed = isIndexed(i);\n\t\t\tif (!result.isEmpty() && !indexed) {\n\t\t\t\tresult.append('.');\n\t\t\t}\n\t\t\tif (indexed) {\n\t\t\t\tresult.append('[');\n\t\t\t\tresult.append(getElement(i, Form.ORIGINAL));\n\t\t\t\tresult.append(']');\n\t\t\t}\n\t\t\telse {\n\t\t\t\tresult.append(getElement(i, Form.DASHED));\n\t\t\t}\n\t\t}\n\t\treturn result.toString();\n\t}", "doc_comment": ""}, "code_tokens": ["String", "buildDefaultToString", "private", "(", ")", "{", "}", "if", ";", "StringBuilder", ";", "for", "(", ";", ")", "return", ";", "(", ")", "{", "}", "int", "elements", "=", "result", "=", ";", "i", "<", "elements", "i", "++", "{", "}", "result", ".", "toString", ".", "canShortcutWithSource", "return", ";", "getNumberOfElements", "new", "StringBuilder", "int", "i", "=", "0", "boolean", ";", "if", "if", "else", "(", ")", "this", ".", "elements", "(", ",", ")", ".", "toString", "(", ")", "(", ")", "indexed", "=", "(", ")", "{", "}", "(", "indexed", ")", "{", "}", "{", "}", "ElementType", ".", "UNIFORM", "ElementType", ".", "DASHED", ".", "getSource", "(", ")", "elements", "*", "8", "isIndexed", "&&", ";", ";", ";", ";", ";", "this", ".", "elements", "(", ")", "(", "i", ")", "!", "!", "indexed", "result", ".", "append", "result", ".", "append", "result", ".", "append", "result", ".", "append", "result", ".", "append", "result", ".", "isEmpty", "(", "'.'", ")", "(", "'['", ")", "(", ")", "(", "']'", ")", "(", ")", "(", ")", "getElement", "getElement", "(", "i", ",", ")", "(", "i", ",", ")", "Form", ".", "ORIGINAL", "Form", ".", "DASHED"], "metrics": {"cyclomatic_complexity": 6, "n_ast_nodes": 236, "ast_depth": 14, "n_identifiers": 18, "vocab_size": 47, "n_whitespaces": 118, "n_words": 64, "nloc": 22, "token_counts": 160}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#596-605", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "buildSimpleToString", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#buildSimpleToString", "start_line": 596, "end_line": 605, "signature": "buildSimpleToString(char joinChar, IntFunction<String> elementConverter)", "original_code": "private String buildSimpleToString(char joinChar, IntFunction<String> elementConverter) {\n\t\tStringBuilder result = new StringBuilder();\n\t\tfor (int i = 0; i < getNumberOfElements(); i++) {\n\t\t\tif (!result.isEmpty()) {\n\t\t\t\tresult.append(joinChar);\n\t\t\t}\n\t\t\tresult.append(elementConverter.apply(i));\n\t\t}\n\t\treturn result.toString();\n\t}", "doc_comment": ""}, "code_tokens": ["String", "buildSimpleToString", "private", "(", ",", ")", "{", "}", "joinChar", "elementConverter", "StringBuilder", ";", "for", "(", ";", ")", "return", ";", "char", "IntFunction", "result", "=", ";", "i", "<", "i", "++", "{", "}", "result", ".", "toString", "<", "String", ">", "new", "StringBuilder", "int", "i", "=", "0", "getNumberOfElements", "if", ";", "(", ")", "(", ")", "(", ")", "(", ")", "{", "}", "result", ".", "append", "!", ";", "(", ")", "result", ".", "isEmpty", "result", ".", "append", "elementConverter", ".", "apply", "(", ")", "(", "joinChar", ")", "(", "i", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 118, "ast_depth": 11, "n_identifiers": 10, "vocab_size": 33, "n_whitespaces": 53, "n_words": 33, "nloc": 10, "token_counts": 78}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#607-620", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "hasDashedElement", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#hasDashedElement", "start_line": 607, "end_line": 620, "signature": "hasDashedElement()", "original_code": "boolean hasDashedElement() {\n\t\tBoolean hasDashedElement = this.hasDashedElement;\n\t\tif (hasDashedElement != null) {\n\t\t\treturn hasDashedElement;\n\t\t}\n\t\tfor (int i = 0; i < getNumberOfElements(); i++) {\n\t\t\tif (getElement(i, Form.DASHED).indexOf('-') != -1) {\n\t\t\t\tthis.hasDashedElement = true;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\tthis.hasDashedElement = false;\n\t\treturn false;\n\t}", "doc_comment": ""}, "code_tokens": ["boolean", "hasDashedElement", "(", ")", "{", "}", "Boolean", ";", "if", "for", "(", ";", ")", ";", "return", "false", ";", "hasDashedElement", "=", "(", ")", "{", "}", ";", "i", "<", "i", "++", "{", "}", "=", "false", "this", ".", "hasDashedElement", "hasDashedElement", "!=", "null", "return", "hasDashedElement", ";", "int", "i", "=", "0", "getNumberOfElements", "if", "this", ".", "hasDashedElement", "(", ")", "(", ")", "{", "}", "!=", ";", "return", "true", ";", ".", "indexOf", "-", "1", "=", "true", "getElement", "(", "'-'", ")", "this", ".", "hasDashedElement", "(", "i", ",", ")", "Form", ".", "DASHED"], "metrics": {"cyclomatic_complexity": 4, "n_ast_nodes": 120, "ast_depth": 13, "n_identifiers": 7, "vocab_size": 32, "n_whitespaces": 75, "n_words": 35, "nloc": 14, "token_counts": 81}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#628-630", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "isValid", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#isValid", "start_line": 628, "end_line": 630, "signature": "isValid(@Nullable CharSequence name)", "original_code": "public static boolean isValid(@Nullable CharSequence name) {\n\t\treturn of(name, true) != null;\n\t}", "doc_comment": "/**\n\t * Returns if the given name is valid. If this method returns {@code true} then the\n\t * name may be used with {@link #of(CharSequence)} without throwing an exception.\n\t * @param name the name to test\n\t * @return {@code true} if the name is valid\n\t */"}, "code_tokens": ["boolean", "isValid", "public", "static", "(", ")", "{", "}", "CharSequence", "name", "return", ";", "!=", "null", "@", "Nullable", "of", "(", "name", ",", "true", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 34, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 19, "n_whitespaces": 15, "n_words": 12, "nloc": 3, "token_counts": 22}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#638-641", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "of", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#of", "start_line": 638, "end_line": 641, "signature": "of(@Nullable CharSequence name)", "original_code": "@SuppressWarnings(\"NullAway\") // See https://github.com/uber/NullAway/issues/1232\n\tpublic static ConfigurationPropertyName of(@Nullable CharSequence name) {\n\t\treturn of(name, false);\n\t}", "doc_comment": "/**\n\t * Return a {@link ConfigurationPropertyName} for the specified string.\n\t * @param name the source name\n\t * @return a {@link ConfigurationPropertyName} instance\n\t * @throws InvalidConfigurationPropertyNameException if the name is not valid\n\t */"}, "code_tokens": ["ConfigurationPropertyName", "of", "// See https://github.com/uber/NullAway/issues/1232", "public", "static", "(", ")", "{", "}", "@", "SuppressWarnings", "CharSequence", "name", "return", ";", "(", ")", "of", "\"", "NullAway", "\"", "@", "Nullable", "(", "name", ",", "false", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 42, "ast_depth": 7, "n_identifiers": 4, "vocab_size": 20, "n_whitespaces": 18, "n_words": 21, "nloc": 4, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#650-652", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "ofIfValid", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#ofIfValid", "start_line": 650, "end_line": 652, "signature": "ofIfValid(@Nullable CharSequence name)", "original_code": "public static @Nullable ConfigurationPropertyName ofIfValid(@Nullable CharSequence name) {\n\t\treturn of(name, true);\n\t}", "doc_comment": "/**\n\t * Return a {@link ConfigurationPropertyName} for the specified string or {@code null}\n\t * if the name is not valid.\n\t * @param name the source name\n\t * @return a {@link ConfigurationPropertyName} instance\n\t * @since 2.3.1\n\t */"}, "code_tokens": ["ConfigurationPropertyName", "ofIfValid", "public", "static", "(", ")", "{", "}", "@", "Nullable", "CharSequence", "name", "return", ";", "of", "@", "Nullable", "(", "name", ",", "true", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 34, "ast_depth": 7, "n_identifiers": 4, "vocab_size": 17, "n_whitespaces": 14, "n_words": 12, "nloc": 3, "token_counts": 22}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#662-666", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "of", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#of", "start_line": 662, "end_line": 666, "signature": "of(@Nullable CharSequence name, boolean returnNullIfInvalid)", "original_code": "@Contract(\"_, false -> !null\")\n\tstatic @Nullable ConfigurationPropertyName of(@Nullable CharSequence name, boolean returnNullIfInvalid) {\n\t\tElements elements = elementsOf(name, returnNullIfInvalid, ElementsParser.DEFAULT_CAPACITY);\n\t\treturn (elements != null) ? new ConfigurationPropertyName(elements) : null;\n\t}", "doc_comment": "/**\n\t * Return a {@link ConfigurationPropertyName} for the specified string.\n\t * @param name the source name\n\t * @param returnNullIfInvalid if null should be returned if the name is not valid\n\t * @return a {@link ConfigurationPropertyName} instance\n\t * @throws InvalidConfigurationPropertyNameException if the name is not valid and\n\t * {@code returnNullIfInvalid} is {@code false}\n\t */"}, "code_tokens": ["ConfigurationPropertyName", "of", "static", "(", ",", ")", "{", "}", "@", "Contract", "@", "Nullable", "CharSequence", "name", "boolean", "returnNullIfInvalid", "Elements", ";", "return", ";", "(", ")", "elements", "=", "?", ":", "null", "\"", "_, false -> !null", "\"", "@", "Nullable", "elementsOf", "(", ")", "new", "ConfigurationPropertyName", "(", "name", ",", "returnNullIfInvalid", ",", ")", "elements", "!=", "null", "(", "elements", ")", "ElementsParser", ".", "DEFAULT_CAPACITY"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 76, "ast_depth": 9, "n_identifiers": 9, "vocab_size": 31, "n_whitespaces": 34, "n_words": 27, "nloc": 5, "token_counts": 52}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#668-671", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "probablySingleElementOf", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#probablySingleElementOf", "start_line": 668, "end_line": 671, "signature": "probablySingleElementOf(CharSequence name)", "original_code": "@SuppressWarnings(\"NullAway\") // See https://github.com/uber/NullAway/issues/1232\n\tprivate static Elements probablySingleElementOf(CharSequence name) {\n\t\treturn elementsOf(name, false, 1);\n\t}", "doc_comment": ""}, "code_tokens": ["Elements", "probablySingleElementOf", "// See https://github.com/uber/NullAway/issues/1232", "private", "static", "(", ")", "{", "}", "@", "SuppressWarnings", "CharSequence", "name", "return", ";", "(", ")", "elementsOf", "\"", "NullAway", "\"", "(", "name", ",", "false", ",", "1", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 40, "ast_depth": 7, "n_identifiers": 4, "vocab_size": 21, "n_whitespaces": 18, "n_words": 21, "nloc": 4, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#673-699", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "elementsOf", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#elementsOf", "start_line": 673, "end_line": 699, "signature": "elementsOf(@Nullable CharSequence name, boolean returnNullIfInvalid,\n\t\t\tint parserCapacity)", "original_code": "@Contract(\"_, false, _ -> !null\")\n\tprivate static @Nullable Elements elementsOf(@Nullable CharSequence name, boolean returnNullIfInvalid,\n\t\t\tint parserCapacity) {\n\t\tif (name == null) {\n\t\t\tAssert.isTrue(returnNullIfInvalid, \"'name' must not be null\");\n\t\t\treturn null;\n\t\t}\n\t\tif (name.isEmpty()) {\n\t\t\treturn Elements.EMPTY;\n\t\t}\n\t\tif (name.charAt(0) == '.' || name.charAt(name.length() - 1) == '.') {\n\t\t\tif (returnNullIfInvalid) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tthrow new InvalidConfigurationPropertyNameException(name, Collections.singletonList('.'));\n\t\t}\n\t\tElements elements = new ElementsParser(name, '.', parserCapacity).parse();\n\t\tfor (int i = 0; i < elements.getSize(); i++) {\n\t\t\tif (elements.getType(i) == ElementType.NON_UNIFORM) {\n\t\t\t\tif (returnNullIfInvalid) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tthrow new InvalidConfigurationPropertyNameException(name, getInvalidChars(elements, i));\n\t\t\t}\n\t\t}\n\t\treturn elements;\n\t}", "doc_comment": ""}, "code_tokens": ["Elements", "elementsOf", "private", "static", "(", ",", ",", ")", "{", "}", "@", "Contract", "@", "Nullable", "CharSequence", "name", "boolean", "returnNullIfInvalid", "parserCapacity", "if", "if", "if", "Elements", ";", "for", "(", ";", ")", "return", "elements", ";", "(", ")", "int", "(", ")", "{", "}", "(", ")", "{", "}", "(", ")", "{", "}", "elements", "=", ";", "i", "<", "i", "++", "{", "}", "\"", "_, false, _ -> !null", "\"", "@", "Nullable", "name", "==", "null", ";", "return", "null", ";", "name", ".", "isEmpty", "return", ";", "||", "if", "throw", ";", ".", "parse", "int", "i", "=", "0", "elements", ".", "getSize", "if", "Assert", ".", "isTrue", "(", ")", "Elements", ".", "EMPTY", "==", "'.'", "==", "'.'", "(", "returnNullIfInvalid", ")", "{", "}", "new", "InvalidConfigurationPropertyNameException", "new", "ElementsParser", "(", ")", "(", ")", "(", ")", "{", "}", "(", "returnNullIfInvalid", ",", ")", "name", ".", "charAt", "name", ".", "charAt", "return", "null", ";", "(", "name", ",", ")", "(", "name", ",", "'.'", ",", "parserCapacity", ")", "==", "if", "throw", ";", "\"", "'name' must not be null", "\"", "(", "0", ")", "(", ")", "Collections", ".", "singletonList", "elements", ".", "getType", "ElementType", ".", "NON_UNIFORM", "(", "returnNullIfInvalid", ")", "{", "}", "new", "InvalidConfigurationPropertyNameException", "-", "1", "(", "'.'", ")", "(", "i", ")", "return", "null", ";", "(", "name", ",", ")", "name", ".", "length", "getInvalidChars", "(", ")", "(", "elements", ",", "i", ")"], "metrics": {"cyclomatic_complexity": 9, "n_ast_nodes": 278, "ast_depth": 13, "n_identifiers": 23, "vocab_size": 56, "n_whitespaces": 166, "n_words": 89, "nloc": 27, "token_counts": 193}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#701-710", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "getInvalidChars", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#getInvalidChars", "start_line": 701, "end_line": 710, "signature": "getInvalidChars(Elements elements, int index)", "original_code": "private static List<Character> getInvalidChars(Elements elements, int index) {\n\t\tList<Character> invalidChars = new ArrayList<>();\n\t\tfor (int charIndex = 0; charIndex < elements.getLength(index); charIndex++) {\n\t\t\tchar ch = elements.charAt(index, charIndex);\n\t\t\tif (!ElementsParser.isValidChar(ch, charIndex)) {\n\t\t\t\tinvalidChars.add(ch);\n\t\t\t}\n\t\t}\n\t\treturn invalidChars;\n\t}", "doc_comment": ""}, "code_tokens": ["getInvalidChars", "private", "static", "List", "(", ",", ")", "{", "}", "<", "Character", ">", "Elements", "elements", "index", ";", "for", "(", ";", ")", "return", "invalidChars", ";", "int", "List", "invalidChars", "=", ";", "charIndex", "<", "charIndex", "++", "{", "}", "<", "Character", ">", "new", "int", "charIndex", "=", "0", "elements", ".", "getLength", ";", "if", "ArrayList", "(", ")", "(", "index", ")", "char", "ch", "=", "(", ")", "{", "}", "<", ">", "elements", ".", "charAt", "!", ";", "(", "index", ",", "charIndex", ")", "ElementsParser", ".", "isValidChar", "invalidChars", ".", "add", "(", "ch", ",", "charIndex", ")", "(", "ch", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 128, "ast_depth": 11, "n_identifiers": 11, "vocab_size": 36, "n_whitespaces": 59, "n_words": 39, "nloc": 10, "token_counts": 86}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#719-721", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "adapt", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#adapt", "start_line": 719, "end_line": 721, "signature": "adapt(CharSequence name, char separator)", "original_code": "public static ConfigurationPropertyName adapt(CharSequence name, char separator) {\n\t\treturn adapt(name, separator, null);\n\t}", "doc_comment": "/**\n\t * Create a {@link ConfigurationPropertyName} by adapting the given source. See\n\t * {@link #adapt(CharSequence, char, Function)} for details.\n\t * @param name the name to parse\n\t * @param separator the separator used to split the name\n\t * @return a {@link ConfigurationPropertyName}\n\t */"}, "code_tokens": ["ConfigurationPropertyName", "adapt", "public", "static", "(", ",", ")", "{", "}", "CharSequence", "name", "separator", "return", ";", "char", "adapt", "(", "name", ",", "separator", ",", "null", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 34, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 16, "n_whitespaces": 15, "n_words": 13, "nloc": 3, "token_counts": 23}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#736-747", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "adapt", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#adapt", "start_line": 736, "end_line": 747, "signature": "adapt(CharSequence name, char separator,\n\t\t\t@Nullable Function<CharSequence, CharSequence> elementValueProcessor)", "original_code": "static ConfigurationPropertyName adapt(CharSequence name, char separator,\n\t\t\t@Nullable Function<CharSequence, CharSequence> elementValueProcessor) {\n\t\tAssert.notNull(name, \"Name must not be null\");\n\t\tif (name.isEmpty()) {\n\t\t\treturn EMPTY;\n\t\t}\n\t\tElements elements = new ElementsParser(name, separator).parse(elementValueProcessor);\n\t\tif (elements.getSize() == 0) {\n\t\t\treturn EMPTY;\n\t\t}\n\t\treturn new ConfigurationPropertyName(elements);\n\t}", "doc_comment": "/**\n\t * Create a {@link ConfigurationPropertyName} by adapting the given source. The name\n\t * is split into elements around the given {@code separator}. This method is more\n\t * lenient than {@link #of} in that it allows mixed case names and '{@code _}'\n\t * characters. Other invalid characters are stripped out during parsing.\n\t * <p>\n\t * The {@code elementValueProcessor} function may be used if additional processing is\n\t * required on the extracted element values.\n\t * @param name the name to parse\n\t * @param separator the separator used to split the name\n\t * @param elementValueProcessor a function to process element values\n\t * @return a {@link ConfigurationPropertyName}\n\t */"}, "code_tokens": ["ConfigurationPropertyName", "adapt", "static", "(", ",", ",", ")", "{", "}", "CharSequence", "name", "separator", "elementValueProcessor", ";", "if", "Elements", ";", "if", "return", ";", "char", "Function", "Assert", ".", "notNull", "(", ")", "{", "}", "elements", "=", "(", ")", "{", "}", "new", "ConfigurationPropertyName", "@", "Nullable", "<", "CharSequence", ",", "CharSequence", ">", "(", "name", ",", ")", "name", ".", "isEmpty", "return", "EMPTY", ";", ".", "parse", "==", "0", "return", "EMPTY", ";", "(", "elements", ")", "\"", "Name must not be null", "\"", "(", ")", "new", "ElementsParser", "(", "elementValueProcessor", ")", "elements", ".", "getSize", "(", "name", ",", "separator", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 123, "ast_depth": 9, "n_identifiers": 12, "vocab_size": 37, "n_whitespaces": 64, "n_words": 43, "nloc": 12, "token_counts": 84}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#837-850", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "append", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#append", "start_line": 837, "end_line": 850, "signature": "append(Elements additional)", "original_code": "Elements append(Elements additional) {\n\t\t\tint size = this.size + additional.size;\n\t\t\tElementType[] type = new ElementType[size];\n\t\t\tint[] hashCode = new int[size];\n\t\t\tSystem.arraycopy(this.type, 0, type, 0, this.size);\n\t\t\tSystem.arraycopy(additional.type, 0, type, this.size, additional.size);\n\t\t\tSystem.arraycopy(this.hashCode, 0, hashCode, 0, this.size);\n\t\t\tSystem.arraycopy(additional.hashCode, 0, hashCode, this.size, additional.size);\n\t\t\tCharSequence[] resolved = newResolved(0, size);\n\t\t\tfor (int i = 0; i < additional.size; i++) {\n\t\t\t\tresolved[this.size + i] = additional.get(i);\n\t\t\t}\n\t\t\treturn new Elements(this.source, size, this.start, this.end, type, hashCode, resolved);\n\t\t}", "doc_comment": ""}, "code_tokens": ["Elements", "append", "(", ")", "{", "}", "Elements", "additional", ";", ";", ";", ";", ";", ";", ";", ";", "for", "(", ";", ")", "return", ";", "int", "size", "=", "ElementType", "type", "=", "hashCode", "=", "System", ".", "arraycopy", "System", ".", "arraycopy", "System", ".", "arraycopy", "System", ".", "arraycopy", "CharSequence", "resolved", "=", ";", "i", "<", "i", "++", "{", "}", "new", "Elements", "+", "[", "]", "new", "ElementType", "int", "[", "]", "new", "(", ",", "0", ",", "type", ",", "0", ",", ")", "(", ",", "0", ",", "type", ",", ",", ")", "(", ",", "0", ",", "hashCode", ",", "0", ",", ")", "(", ",", "0", ",", "hashCode", ",", ",", ")", "[", "]", "newResolved", "int", "i", "=", "0", "additional", ".", "size", ";", "(", ",", "size", ",", ",", ",", "type", ",", "hashCode", ",", "resolved", ")", "this", ".", "size", "additional", ".", "size", "[", "size", "]", "int", "[", "size", "]", "this", ".", "type", "this", ".", "size", "additional", ".", "type", "this", ".", "size", "additional", ".", "size", "this", ".", "hashCode", "this", ".", "size", "additional", ".", "hashCode", "this", ".", "size", "additional", ".", "size", "(", "0", ",", "size", ")", "=", "this", ".", "source", "this", ".", "start", "this", ".", "end", "resolved", "[", "]", "additional", ".", "get", "+", "i", "(", "i", ")", "this", ".", "size"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 266, "ast_depth": 11, "n_identifiers": 14, "vocab_size": 36, "n_whitespaces": 109, "n_words": 91, "nloc": 14, "token_counts": 192}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#852-855", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "chop", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#chop", "start_line": 852, "end_line": 855, "signature": "chop(int size)", "original_code": "Elements chop(int size) {\n\t\t\tCharSequence[] resolved = newResolved(0, size);\n\t\t\treturn new Elements(this.source, size, this.start, this.end, this.type, this.hashCode, resolved);\n\t\t}", "doc_comment": ""}, "code_tokens": ["Elements", "chop", "(", ")", "{", "}", "size", ";", "return", ";", "int", "CharSequence", "resolved", "=", "new", "Elements", "[", "]", "newResolved", "(", ",", "size", ",", ",", ",", ",", ",", "resolved", ")", "(", "0", ",", "size", ")", "this", ".", "source", "this", ".", "start", "this", ".", "end", "this", ".", "type", "this", ".", "hashCode"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 69, "ast_depth": 8, "n_identifiers": 9, "vocab_size": 26, "n_whitespaces": 26, "n_words": 24, "nloc": 4, "token_counts": 49}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#857-869", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "subElements", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#subElements", "start_line": 857, "end_line": 869, "signature": "subElements(int offset)", "original_code": "Elements subElements(int offset) {\n\t\t\tint size = this.size - offset;\n\t\t\tCharSequence[] resolved = newResolved(offset, size);\n\t\t\tint[] start = new int[size];\n\t\t\tSystem.arraycopy(this.start, offset, start, 0, size);\n\t\t\tint[] end = new int[size];\n\t\t\tSystem.arraycopy(this.end, offset, end, 0, size);\n\t\t\tElementType[] type = new ElementType[size];\n\t\t\tSystem.arraycopy(this.type, offset, type, 0, size);\n\t\t\tint[] hashCode = new int[size];\n\t\t\tSystem.arraycopy(this.hashCode, offset, hashCode, 0, size);\n\t\t\treturn new Elements(this.source, size, start, end, type, hashCode, resolved);\n\t\t}", "doc_comment": ""}, "code_tokens": ["Elements", "subElements", "(", ")", "{", "}", "offset", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "return", ";", "int", "int", "size", "=", "CharSequence", "resolved", "=", "start", "=", "System", ".", "arraycopy", "end", "=", "System", ".", "arraycopy", "ElementType", "type", "=", "System", ".", "arraycopy", "hashCode", "=", "System", ".", "arraycopy", "new", "Elements", "-", "offset", "[", "]", "newResolved", "int", "[", "]", "new", "(", ",", "offset", ",", "start", ",", "0", ",", "size", ")", "int", "[", "]", "new", "(", ",", "offset", ",", "end", ",", "0", ",", "size", ")", "[", "]", "new", "ElementType", "(", ",", "offset", ",", "type", ",", "0", ",", "size", ")", "int", "[", "]", "new", "(", ",", "offset", ",", "hashCode", ",", "0", ",", "size", ")", "(", ",", "size", ",", "start", ",", "end", ",", "type", ",", "hashCode", ",", "resolved", ")", "this", ".", "size", "(", "offset", ",", "size", ")", "int", "[", "size", "]", "this", ".", "start", "int", "[", "size", "]", "this", ".", "end", "[", "size", "]", "this", ".", "type", "int", "[", "size", "]", "this", ".", "hashCode", "this", ".", "source"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 229, "ast_depth": 8, "n_identifiers": 12, "vocab_size": 31, "n_whitespaces": 99, "n_words": 77, "nloc": 13, "token_counts": 162}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#871-877", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "newResolved", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#newResolved", "start_line": 871, "end_line": 877, "signature": "newResolved(int offset, int size)", "original_code": "private CharSequence[] newResolved(int offset, int size) {\n\t\t\tCharSequence[] resolved = new CharSequence[size];\n\t\t\tif (this.resolved != null) {\n\t\t\t\tSystem.arraycopy(this.resolved, offset, resolved, 0, Math.min(size, this.size));\n\t\t\t}\n\t\t\treturn resolved;\n\t\t}", "doc_comment": ""}, "code_tokens": ["newResolved", "private", "CharSequence", "(", ",", ")", "{", "}", "[", "]", "offset", "size", ";", "if", "return", "resolved", ";", "int", "int", "CharSequence", "resolved", "=", "(", ")", "{", "}", "[", "]", "new", "CharSequence", "!=", "null", ";", "[", "size", "]", "this", ".", "resolved", "System", ".", "arraycopy", "(", ",", "offset", ",", "resolved", ",", "0", ",", ")", "this", ".", "resolved", "Math", ".", "min", "(", "size", ",", ")", "this", ".", "size"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 94, "ast_depth": 12, "n_identifiers": 8, "vocab_size": 28, "n_whitespaces": 44, "n_words": 30, "nloc": 7, "token_counts": 64}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#879-881", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "getSize", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#getSize", "start_line": 879, "end_line": 881, "signature": "getSize()", "original_code": "int getSize() {\n\t\t\treturn this.size;\n\t\t}", "doc_comment": ""}, "code_tokens": ["getSize", "int", "(", ")", "{", "}", "return", ";", "this", ".", "size"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 18, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 11, "n_whitespaces": 10, "n_words": 5, "nloc": 3, "token_counts": 11}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#883-893", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "get", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#get", "start_line": 883, "end_line": 893, "signature": "get(int index)", "original_code": "CharSequence get(int index) {\n\t\t\tif (this.resolved != null) {\n\t\t\t\tCharSequence element = this.resolved[index];\n\t\t\t\tif (element != null) {\n\t\t\t\t\treturn element;\n\t\t\t\t}\n\t\t\t}\n\t\t\tint start = this.start[index];\n\t\t\tint end = this.end[index];\n\t\t\treturn this.source.subSequence(start, end);\n\t\t}", "doc_comment": ""}, "code_tokens": ["CharSequence", "get", "(", ")", "{", "}", "index", "if", ";", ";", "return", ";", "int", "(", ")", "{", "}", "int", "start", "=", "int", "end", "=", ".", "subSequence", "!=", "null", "CharSequence", ";", "if", "[", "index", "]", "[", "index", "]", "this", ".", "source", "(", "start", ",", "end", ")", "this", ".", "resolved", "element", "=", "(", ")", "{", "}", "this", ".", "start", "this", ".", "end", "[", "index", "]", "element", "!=", "null", "return", "element", ";", "this", ".", "resolved"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 105, "ast_depth": 10, "n_identifiers": 8, "vocab_size": 25, "n_whitespaces": 67, "n_words": 34, "nloc": 11, "token_counts": 71}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#895-905", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "getLength", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#getLength", "start_line": 895, "end_line": 905, "signature": "getLength(int index)", "original_code": "int getLength(int index) {\n\t\t\tif (this.resolved != null) {\n\t\t\t\tCharSequence element = this.resolved[index];\n\t\t\t\tif (element != null) {\n\t\t\t\t\treturn element.length();\n\t\t\t\t}\n\t\t\t}\n\t\t\tint start = this.start[index];\n\t\t\tint end = this.end[index];\n\t\t\treturn end - start;\n\t\t}", "doc_comment": ""}, "code_tokens": ["getLength", "int", "(", ")", "{", "}", "index", "if", ";", ";", "return", ";", "int", "(", ")", "{", "}", "int", "start", "=", "int", "end", "=", "end", "-", "start", "!=", "null", "CharSequence", ";", "if", "[", "index", "]", "[", "index", "]", "this", ".", "resolved", "element", "=", "(", ")", "{", "}", "this", ".", "start", "this", ".", "end", "[", "index", "]", "element", "!=", "null", "return", ";", "this", ".", "resolved", "element", ".", "length", "(", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 103, "ast_depth": 11, "n_identifiers": 7, "vocab_size": 24, "n_whitespaces": 68, "n_words": 32, "nloc": 11, "token_counts": 68}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#907-916", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "charAt", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#charAt", "start_line": 907, "end_line": 916, "signature": "charAt(int index, int charIndex)", "original_code": "char charAt(int index, int charIndex) {\n\t\t\tif (this.resolved != null) {\n\t\t\t\tCharSequence element = this.resolved[index];\n\t\t\t\tif (element != null) {\n\t\t\t\t\treturn element.charAt(charIndex);\n\t\t\t\t}\n\t\t\t}\n\t\t\tint start = this.start[index];\n\t\t\treturn this.source.charAt(start + charIndex);\n\t\t}", "doc_comment": ""}, "code_tokens": ["charAt", "char", "(", ",", ")", "{", "}", "index", "charIndex", "if", ";", "return", ";", "int", "int", "(", ")", "{", "}", "int", "start", "=", ".", "charAt", "!=", "null", "CharSequence", ";", "if", "[", "index", "]", "this", ".", "source", "(", ")", "this", ".", "resolved", "element", "=", "(", ")", "{", "}", "this", ".", "start", "start", "+", "charIndex", "[", "index", "]", "element", "!=", "null", "return", ";", "this", ".", "resolved", "element", ".", "charAt", "(", "charIndex", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 104, "ast_depth": 11, "n_identifiers": 7, "vocab_size": 26, "n_whitespaces": 63, "n_words": 33, "nloc": 10, "token_counts": 69}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#918-920", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "getType", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#getType", "start_line": 918, "end_line": 920, "signature": "getType(int index)", "original_code": "ElementType getType(int index) {\n\t\t\treturn this.type[index];\n\t\t}", "doc_comment": ""}, "code_tokens": ["ElementType", "getType", "(", ")", "{", "}", "index", "return", ";", "int", "[", "index", "]", "this", ".", "type"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 25, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 15, "n_whitespaces": 11, "n_words": 8, "nloc": 3, "token_counts": 16}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#922-939", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "hashCode", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#hashCode", "start_line": 922, "end_line": 939, "signature": "hashCode(int index)", "original_code": "int hashCode(int index) {\n\t\t\tint hashCode = this.hashCode[index];\n\t\t\tif (hashCode == 0) {\n\t\t\t\tboolean indexed = getType(index).isIndexed();\n\t\t\t\tint length = getLength(index);\n\t\t\t\tfor (int i = 0; i < length; i++) {\n\t\t\t\t\tchar ch = charAt(index, i);\n\t\t\t\t\tif (!indexed) {\n\t\t\t\t\t\tch = Character.toLowerCase(ch);\n\t\t\t\t\t}\n\t\t\t\t\tif (ElementsParser.isAlphaNumeric(ch)) {\n\t\t\t\t\t\thashCode = 31 * hashCode + ch;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.hashCode[index] = hashCode;\n\t\t\t}\n\t\t\treturn hashCode;\n\t\t}", "doc_comment": ""}, "code_tokens": ["hashCode", "int", "(", ")", "{", "}", "index", ";", "if", "return", "hashCode", ";", "int", "int", "hashCode", "=", "(", ")", "{", "}", "[", "index", "]", "hashCode", "==", "0", "boolean", ";", ";", "for", "(", ";", ")", ";", "this", ".", "hashCode", "indexed", "=", "int", "length", "=", ";", "i", "<", "length", "i", "++", "{", "}", "=", "hashCode", ".", "isIndexed", "getLength", "int", "i", "=", "0", ";", "if", "if", "[", "index", "]", "getType", "(", ")", "(", "index", ")", "char", "ch", "=", "(", ")", "{", "}", "(", ")", "{", "}", "this", ".", "hashCode", "(", "index", ")", "charAt", "!", "indexed", ";", "ElementsParser", ".", "isAlphaNumeric", ";", "(", "index", ",", "i", ")", "ch", "=", "(", "ch", ")", "hashCode", "=", "Character", ".", "toLowerCase", "+", "ch", "(", "ch", ")", "31", "*", "hashCode"], "metrics": {"cyclomatic_complexity": 5, "n_ast_nodes": 180, "ast_depth": 14, "n_identifiers": 14, "vocab_size": 39, "n_whitespaces": 132, "n_words": 53, "nloc": 18, "token_counts": 119}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#941-943", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "getSource", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#getSource", "start_line": 941, "end_line": 943, "signature": "getSource()", "original_code": "CharSequence getSource() {\n\t\t\treturn this.source;\n\t\t}", "doc_comment": ""}, "code_tokens": ["CharSequence", "getSource", "(", ")", "{", "}", "return", ";", "this", ".", "source"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 17, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 11, "n_whitespaces": 10, "n_words": 5, "nloc": 3, "token_counts": 11}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#951-953", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "canShortcutWithSource", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#canShortcutWithSource", "start_line": 951, "end_line": 953, "signature": "canShortcutWithSource(ElementType requiredType)", "original_code": "boolean canShortcutWithSource(ElementType requiredType) {\n\t\t\treturn canShortcutWithSource(requiredType, requiredType);\n\t\t}", "doc_comment": "/**\n\t\t * Returns if the element source can be used as a shortcut for an operation such\n\t\t * as {@code equals} or {@code toString}.\n\t\t * @param requiredType the required type\n\t\t * @return {@code true} if all elements match at least one of the types\n\t\t */"}, "code_tokens": ["boolean", "canShortcutWithSource", "(", ")", "{", "}", "ElementType", "requiredType", "return", ";", "canShortcutWithSource", "(", "requiredType", ",", "requiredType", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 24, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 11, "n_whitespaces": 12, "n_words": 8, "nloc": 3, "token_counts": 16}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#962-976", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "canShortcutWithSource", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#canShortcutWithSource", "start_line": 962, "end_line": 976, "signature": "canShortcutWithSource(ElementType requiredType, ElementType alternativeType)", "original_code": "boolean canShortcutWithSource(ElementType requiredType, ElementType alternativeType) {\n\t\t\tif (this.resolved != null) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfor (int i = 0; i < this.size; i++) {\n\t\t\t\tElementType type = this.type[i];\n\t\t\t\tif (type != requiredType && type != alternativeType) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif (i > 0 && this.end[i - 1] + 1 != this.start[i]) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}", "doc_comment": "/**\n\t\t * Returns if the element source can be used as a shortcut for an operation such\n\t\t * as {@code equals} or {@code toString}.\n\t\t * @param requiredType the required type\n\t\t * @param alternativeType and alternative required type\n\t\t * @return {@code true} if all elements match at least one of the types\n\t\t */"}, "code_tokens": ["boolean", "canShortcutWithSource", "(", ",", ")", "{", "}", "ElementType", "requiredType", "ElementType", "alternativeType", "if", "for", "(", ";", ")", "return", "true", ";", "(", ")", "{", "}", ";", "i", "<", "i", "++", "{", "}", "!=", "null", "return", "false", ";", "int", "i", "=", "0", "this", ".", "size", "ElementType", ";", "if", "if", "this", ".", "resolved", "type", "=", "(", ")", "{", "}", "(", ")", "{", "}", "[", "i", "]", "&&", "return", "false", ";", "&&", "return", "false", ";", "this", ".", "type", "type", "!=", "requiredType", "type", "!=", "alternativeType", "i", ">", "0", "!=", "+", "1", "[", "i", "]", "[", "]", "this", ".", "start", "this", ".", "end", "i", "-", "1"], "metrics": {"cyclomatic_complexity": 7, "n_ast_nodes": 144, "ast_depth": 13, "n_identifiers": 9, "vocab_size": 38, "n_whitespaces": 110, "n_words": 47, "nloc": 15, "token_counts": 99}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#1013-1015", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "parse", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#parse", "start_line": 1013, "end_line": 1015, "signature": "parse()", "original_code": "Elements parse() {\n\t\t\treturn parse(null);\n\t\t}", "doc_comment": ""}, "code_tokens": ["Elements", "parse", "(", ")", "{", "}", "return", ";", "parse", "(", "null", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 19, "ast_depth": 7, "n_identifiers": 1, "vocab_size": 9, "n_whitespaces": 10, "n_words": 5, "nloc": 3, "token_counts": 12}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#1017-1054", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "parse", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#parse", "start_line": 1017, "end_line": 1054, "signature": "parse(@Nullable Function<CharSequence, CharSequence> valueProcessor)", "original_code": "Elements parse(@Nullable Function<CharSequence, CharSequence> valueProcessor) {\n\t\t\tint length = this.source.length();\n\t\t\tint openBracketCount = 0;\n\t\t\tint start = 0;\n\t\t\tElementType type = ElementType.EMPTY;\n\t\t\tfor (int i = 0; i < length; i++) {\n\t\t\t\tchar ch = this.source.charAt(i);\n\t\t\t\tif (ch == '[') {\n\t\t\t\t\tif (openBracketCount == 0) {\n\t\t\t\t\t\tadd(start, i, type, valueProcessor);\n\t\t\t\t\t\tstart = i + 1;\n\t\t\t\t\t\ttype = ElementType.NUMERICALLY_INDEXED;\n\t\t\t\t\t}\n\t\t\t\t\topenBracketCount++;\n\t\t\t\t}\n\t\t\t\telse if (ch == ']') {\n\t\t\t\t\topenBracketCount--;\n\t\t\t\t\tif (openBracketCount == 0) {\n\t\t\t\t\t\tadd(start, i, type, valueProcessor);\n\t\t\t\t\t\tstart = i + 1;\n\t\t\t\t\t\ttype = ElementType.EMPTY;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (!type.isIndexed() && ch == this.separator) {\n\t\t\t\t\tadd(start, i, type, valueProcessor);\n\t\t\t\t\tstart = i + 1;\n\t\t\t\t\ttype = ElementType.EMPTY;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttype = updateType(type, ch, i - start);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (openBracketCount != 0) {\n\t\t\t\ttype = ElementType.NON_UNIFORM;\n\t\t\t}\n\t\t\tadd(start, length, type, valueProcessor);\n\t\t\treturn new Elements(this.source, this.size, this.start, this.end, this.type, null, this.resolved);\n\t\t}", "doc_comment": ""}, "code_tokens": ["Elements", "parse", "(", ")", "{", "}", "valueProcessor", ";", ";", ";", "ElementType", ";", "for", "(", ";", ")", "if", ";", "return", ";", "Function", "int", "length", "=", "int", "openBracketCount", "=", "0", "int", "start", "=", "0", "type", "=", ";", "i", "<", "length", "i", "++", "{", "}", "(", ")", "{", "}", "add", "new", "Elements", "@", "Nullable", "<", "CharSequence", ",", "CharSequence", ">", ".", "length", "ElementType", ".", "EMPTY", "int", "i", "=", "0", ";", "if", "else", "openBracketCount", "!=", "0", ";", "(", "start", ",", "length", ",", "type", ",", "valueProcessor", ")", "(", ",", ",", ",", ",", ",", "null", ",", ")", "this", ".", "source", "(", ")", "char", "ch", "=", "(", ")", "{", "}", "if", "else", "type", "=", "this", ".", "source", "this", ".", "size", "this", ".", "start", "this", ".", "end", "this", ".", "type", "this", ".", "resolved", ".", "charAt", "ch", "==", "'['", "if", ";", "(", ")", "{", "}", "if", "else", "ElementType", ".", "NON_UNIFORM", "this", ".", "source", "(", "i", ")", "(", ")", "{", "}", "openBracketCount", "++", "ch", "==", "']'", ";", "if", "(", ")", "{", "}", "{", "}", "openBracketCount", "==", "0", ";", ";", ";", "openBracketCount", "--", "(", ")", "{", "}", "&&", ";", ";", ";", ";", "add", "start", "=", "type", "=", "openBracketCount", "==", "0", ";", ";", ";", "!", "ch", "==", "add", "start", "=", "type", "=", "type", "=", "(", "start", ",", "i", ",", "type", ",", "valueProcessor", ")", "i", "+", "1", "ElementType", ".", "NUMERICALLY_INDEXED", "add", "start", "=", "type", "=", "type", ".", "isIndexed", "this", ".", "separator", "(", "start", ",", "i", ",", "type", ",", "valueProcessor", ")", "i", "+", "1", "ElementType", ".", "EMPTY", "updateType", "(", "start", ",", "i", ",", "type", ",", "valueProcessor", ")", "i", "+", "1", "ElementType", ".", "EMPTY", "(", ")", "(", "type", ",", "ch", ",", ")", "i", "-", "start"], "metrics": {"cyclomatic_complexity": 9, "n_ast_nodes": 387, "ast_depth": 15, "n_identifiers": 22, "vocab_size": 57, "n_whitespaces": 299, "n_words": 122, "nloc": 38, "token_counts": 269}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#1056-1076", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "updateType", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#updateType", "start_line": 1056, "end_line": 1076, "signature": "updateType(ElementType existingType, char ch, int index)", "original_code": "private ElementType updateType(ElementType existingType, char ch, int index) {\n\t\t\tif (existingType.isIndexed()) {\n\t\t\t\tif (existingType == ElementType.NUMERICALLY_INDEXED && !isNumeric(ch)) {\n\t\t\t\t\treturn ElementType.INDEXED;\n\t\t\t\t}\n\t\t\t\treturn existingType;\n\t\t\t}\n\t\t\tif (existingType == ElementType.EMPTY && isValidChar(ch, index)) {\n\t\t\t\treturn (index == 0) ? ElementType.UNIFORM : ElementType.NON_UNIFORM;\n\t\t\t}\n\t\t\tif (existingType == ElementType.UNIFORM && ch == '-') {\n\t\t\t\treturn ElementType.DASHED;\n\t\t\t}\n\t\t\tif (!isValidChar(ch, index)) {\n\t\t\t\tif (existingType == ElementType.EMPTY && !isValidChar(Character.toLowerCase(ch), index)) {\n\t\t\t\t\treturn ElementType.EMPTY;\n\t\t\t\t}\n\t\t\t\treturn ElementType.NON_UNIFORM;\n\t\t\t}\n\t\t\treturn existingType;\n\t\t}", "doc_comment": ""}, "code_tokens": ["ElementType", "updateType", "private", "(", ",", ",", ")", "{", "}", "ElementType", "existingType", "ch", "index", "if", "if", "if", "if", "return", "existingType", ";", "char", "int", "(", ")", "{", "}", "(", ")", "{", "}", "(", ")", "{", "}", "(", ")", "{", "}", "existingType", ".", "isIndexed", "if", "return", "existingType", ";", "&&", "return", ";", "&&", "return", ";", "!", "if", "return", ";", "(", ")", "(", ")", "{", "}", "existingType", "==", "isValidChar", "?", ":", "existingType", "==", "ch", "==", "'-'", "ElementType", ".", "DASHED", "isValidChar", "(", ")", "{", "}", "ElementType", ".", "NON_UNIFORM", "&&", "return", ";", "ElementType", ".", "EMPTY", "(", "ch", ",", "index", ")", "(", ")", "ElementType", ".", "UNIFORM", "ElementType", ".", "NON_UNIFORM", "ElementType", ".", "UNIFORM", "(", "ch", ",", "index", ")", "&&", "return", ";", "existingType", "==", "!", "ElementType", ".", "INDEXED", "index", "==", "0", "existingType", "==", "!", "ElementType", ".", "EMPTY", "ElementType", ".", "NUMERICALLY_INDEXED", "isNumeric", "ElementType", ".", "EMPTY", "isValidChar", "(", "ch", ")", "(", ",", "index", ")", "Character", ".", "toLowerCase", "(", "ch", ")"], "metrics": {"cyclomatic_complexity": 11, "n_ast_nodes": 220, "ast_depth": 14, "n_identifiers": 16, "vocab_size": 35, "n_whitespaces": 145, "n_words": 66, "nloc": 21, "token_counts": 148}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#1078-1103", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "add", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#add", "start_line": 1078, "end_line": 1103, "signature": "add(int start, int end, ElementType type,\n\t\t\t\t@Nullable Function<CharSequence, CharSequence> valueProcessor)", "original_code": "private void add(int start, int end, ElementType type,\n\t\t\t\t@Nullable Function<CharSequence, CharSequence> valueProcessor) {\n\t\t\tif ((end - start) < 1 || type == ElementType.EMPTY) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (this.start.length == this.size) {\n\t\t\t\tthis.start = expand(this.start);\n\t\t\t\tthis.end = expand(this.end);\n\t\t\t\tthis.type = expand(this.type);\n\t\t\t\tthis.resolved = expand(this.resolved);\n\t\t\t}\n\t\t\tif (valueProcessor != null) {\n\t\t\t\tif (this.resolved == null) {\n\t\t\t\t\tthis.resolved = new CharSequence[this.start.length];\n\t\t\t\t}\n\t\t\t\tCharSequence resolved = valueProcessor.apply(this.source.subSequence(start, end));\n\t\t\t\tElements resolvedElements = new ElementsParser(resolved, '.').parse();\n\t\t\t\tAssert.state(resolvedElements.getSize() == 1, \"Resolved element must not contain multiple elements\");\n\t\t\t\tthis.resolved[this.size] = resolvedElements.get(0);\n\t\t\t\ttype = resolvedElements.getType(0);\n\t\t\t}\n\t\t\tthis.start[this.size] = start;\n\t\t\tthis.end[this.size] = end;\n\t\t\tthis.type[this.size] = type;\n\t\t\tthis.size++;\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "add", "private", "(", ",", ",", ",", ")", "{", "}", "start", "end", "ElementType", "type", "valueProcessor", "if", "if", "if", ";", ";", ";", ";", "int", "int", "Function", "(", ")", "{", "}", "(", ")", "{", "}", "(", ")", "{", "}", "=", "start", "=", "end", "=", "type", "++", "@", "Nullable", "<", "CharSequence", ",", "CharSequence", ">", "||", "return", ";", "==", ";", ";", ";", ";", "valueProcessor", "!=", "null", "if", "CharSequence", ";", "Elements", ";", ";", ";", ";", "[", "]", "[", "]", "[", "]", "this", ".", "size", "<", "1", "type", "==", ".", "length", "this", ".", "size", "=", "=", "=", "=", "(", ")", "{", "}", "resolved", "=", "resolvedElements", "=", "Assert", ".", "state", "=", "type", "=", "this", ".", "start", "this", ".", "size", "this", ".", "end", "this", ".", "size", "this", ".", "type", "this", ".", "size", "(", ")", "ElementType", ".", "EMPTY", "this", ".", "start", "this", ".", "start", "expand", "this", ".", "end", "expand", "this", ".", "type", "expand", "this", ".", "resolved", "expand", "==", "null", ";", "valueProcessor", ".", "apply", ".", "parse", "(", ",", ")", "[", "]", "resolvedElements", ".", "get", "resolvedElements", ".", "getType", "end", "-", "start", "(", ")", "(", ")", "(", ")", "(", ")", "this", ".", "resolved", "=", "(", ")", "new", "ElementsParser", "(", ")", "==", "1", "\"", "Resolved element must not contain multiple elements", "\"", "this", ".", "resolved", "this", ".", "size", "(", "0", ")", "(", "0", ")", "this", ".", "start", "this", ".", "end", "this", ".", "type", "this", ".", "resolved", "this", ".", "resolved", "new", "CharSequence", ".", "subSequence", "(", "resolved", ",", "'.'", ")", "resolvedElements", ".", "getSize", "[", "]", "this", ".", "source", "(", "start", ",", "end", ")", "(", ")", ".", "length", "this", ".", "start"], "metrics": {"cyclomatic_complexity": 6, "n_ast_nodes": 370, "ast_depth": 14, "n_identifiers": 22, "vocab_size": 57, "n_whitespaces": 186, "n_words": 117, "nloc": 26, "token_counts": 249}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#1105-1109", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "expand", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#expand", "start_line": 1105, "end_line": 1109, "signature": "expand(int[] src)", "original_code": "private int[] expand(int[] src) {\n\t\t\tint[] dest = new int[src.length + DEFAULT_CAPACITY];\n\t\t\tSystem.arraycopy(src, 0, dest, 0, src.length);\n\t\t\treturn dest;\n\t\t}", "doc_comment": ""}, "code_tokens": ["expand", "private", "(", ")", "{", "}", "int", "[", "]", "src", ";", ";", "return", "dest", ";", "dest", "=", "System", ".", "arraycopy", "int", "[", "]", "int", "[", "]", "new", "(", "src", ",", "0", ",", "dest", ",", "0", ",", ")", "int", "[", "]", "src", ".", "length", "+", "DEFAULT_CAPACITY", "src", ".", "length"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 75, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 23, "n_whitespaces": 30, "n_words": 22, "nloc": 5, "token_counts": 48}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#1111-1115", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "expand", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#expand", "start_line": 1111, "end_line": 1115, "signature": "expand(ElementType[] src)", "original_code": "private ElementType[] expand(ElementType[] src) {\n\t\t\tElementType[] dest = new ElementType[src.length + DEFAULT_CAPACITY];\n\t\t\tSystem.arraycopy(src, 0, dest, 0, src.length);\n\t\t\treturn dest;\n\t\t}", "doc_comment": ""}, "code_tokens": ["expand", "private", "ElementType", "(", ")", "{", "}", "[", "]", "src", ";", ";", "return", "dest", ";", "ElementType", "ElementType", "dest", "=", "System", ".", "arraycopy", "[", "]", "[", "]", "new", "ElementType", "(", "src", ",", "0", ",", "dest", ",", "0", ",", ")", "[", "]", "src", ".", "length", "+", "DEFAULT_CAPACITY", "src", ".", "length"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 71, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 23, "n_whitespaces": 30, "n_words": 22, "nloc": 5, "token_counts": 48}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#1117-1124", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "expand", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#expand", "start_line": 1117, "end_line": 1124, "signature": "expand(CharSequence @Nullable [] src)", "original_code": "private CharSequence @Nullable [] expand(CharSequence @Nullable [] src) {\n\t\t\tif (src == null) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tCharSequence[] dest = new CharSequence[src.length + DEFAULT_CAPACITY];\n\t\t\tSystem.arraycopy(src, 0, dest, 0, src.length);\n\t\t\treturn dest;\n\t\t}", "doc_comment": ""}, "code_tokens": ["expand", "private", "CharSequence", "(", ")", "{", "}", "[", "]", "src", "if", ";", ";", "return", "dest", ";", "@", "Nullable", "CharSequence", "(", ")", "{", "}", "CharSequence", "dest", "=", "System", ".", "arraycopy", "[", "]", "src", "==", "null", "return", "null", ";", "[", "]", "new", "CharSequence", "(", "src", ",", "0", ",", "dest", ",", "0", ",", ")", "@", "Nullable", "[", "]", "src", ".", "length", "+", "DEFAULT_CAPACITY", "src", ".", "length"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 93, "ast_depth": 10, "n_identifiers": 8, "vocab_size": 28, "n_whitespaces": 52, "n_words": 29, "nloc": 8, "token_counts": 63}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#1126-1128", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "isValidChar", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#isValidChar", "start_line": 1126, "end_line": 1128, "signature": "isValidChar(char ch, int index)", "original_code": "static boolean isValidChar(char ch, int index) {\n\t\t\treturn isAlpha(ch) || isNumeric(ch) || (index != 0 && ch == '-');\n\t\t}", "doc_comment": ""}, "code_tokens": ["boolean", "isValidChar", "static", "(", ",", ")", "{", "}", "ch", "index", "return", ";", "char", "int", "||", "||", "(", ")", "isAlpha", "isNumeric", "&&", "(", "ch", ")", "(", "ch", ")", "index", "!=", "0", "ch", "==", "'-'"], "metrics": {"cyclomatic_complexity": 4, "n_ast_nodes": 53, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 22, "n_whitespaces": 24, "n_words": 15, "nloc": 3, "token_counts": 33}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#1130-1132", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "isAlphaNumeric", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#isAlphaNumeric", "start_line": 1130, "end_line": 1132, "signature": "isAlphaNumeric(char ch)", "original_code": "static boolean isAlphaNumeric(char ch) {\n\t\t\treturn isAlpha(ch) || isNumeric(ch);\n\t\t}", "doc_comment": ""}, "code_tokens": ["boolean", "isAlphaNumeric", "static", "(", ")", "{", "}", "ch", "return", ";", "char", "||", "isAlpha", "isNumeric", "(", "ch", ")", "(", "ch", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 33, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 14, "n_whitespaces": 14, "n_words": 10, "nloc": 3, "token_counts": 20}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#1134-1136", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "isAlpha", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#isAlpha", "start_line": 1134, "end_line": 1136, "signature": "isAlpha(char ch)", "original_code": "private static boolean isAlpha(char ch) {\n\t\t\treturn ch >= 'a' && ch <= 'z';\n\t\t}", "doc_comment": ""}, "code_tokens": ["boolean", "isAlpha", "private", "static", "(", ")", "{", "}", "ch", "return", ";", "char", "&&", "ch", ">=", "'a'", "ch", "<=", "'z'"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 30, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 17, "n_whitespaces": 19, "n_words": 11, "nloc": 3, "token_counts": 19}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#1138-1140", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "isNumeric", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#isNumeric", "start_line": 1138, "end_line": 1140, "signature": "isNumeric(char ch)", "original_code": "private static boolean isNumeric(char ch) {\n\t\t\treturn ch >= '0' && ch <= '9';\n\t\t}", "doc_comment": ""}, "code_tokens": ["boolean", "isNumeric", "private", "static", "(", ")", "{", "}", "ch", "return", ";", "char", "&&", "ch", ">=", "'0'", "ch", "<=", "'9'"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 30, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 17, "n_whitespaces": 19, "n_words": 11, "nloc": 3, "token_counts": 19}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#1186-1188", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "isIndexed", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#isIndexed", "start_line": 1186, "end_line": 1188, "signature": "isIndexed()", "original_code": "public boolean isIndexed() {\n\t\t\treturn this.indexed;\n\t\t}", "doc_comment": ""}, "code_tokens": ["boolean", "isIndexed", "public", "(", ")", "{", "}", "return", ";", "this", ".", "indexed"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 19, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 12, "n_whitespaces": 11, "n_words": 6, "nloc": 3, "token_counts": 12}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#1190-1192", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "allowsFastEqualityCheck", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#allowsFastEqualityCheck", "start_line": 1190, "end_line": 1192, "signature": "allowsFastEqualityCheck()", "original_code": "public boolean allowsFastEqualityCheck() {\n\t\t\treturn this == UNIFORM || this == NUMERICALLY_INDEXED;\n\t\t}", "doc_comment": ""}, "code_tokens": ["boolean", "allowsFastEqualityCheck", "public", "(", ")", "{", "}", "return", ";", "||", "this", "==", "UNIFORM", "this", "==", "NUMERICALLY_INDEXED"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 25, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 17, "n_words": 8, "nloc": 3, "token_counts": 16}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#1194-1196", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "allowsDashIgnoringEqualityCheck", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#allowsDashIgnoringEqualityCheck", "start_line": 1194, "end_line": 1196, "signature": "allowsDashIgnoringEqualityCheck()", "original_code": "public boolean allowsDashIgnoringEqualityCheck() {\n\t\t\treturn allowsFastEqualityCheck() || this == DASHED;\n\t\t}", "doc_comment": ""}, "code_tokens": ["boolean", "allowsDashIgnoringEqualityCheck", "public", "(", ")", "{", "}", "return", ";", "||", "allowsFastEqualityCheck", "this", "==", "DASHED", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 26, "ast_depth": 8, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 15, "n_words": 7, "nloc": 3, "token_counts": 16}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#1205-1205", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "language": "Java"}, "method": {"name": "test", "qualified_name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName#test", "start_line": 1205, "end_line": 1205, "signature": "test(char ch, int index)", "original_code": "boolean test(char ch, int index);", "doc_comment": ""}, "code_tokens": ["boolean", "test", ";", "(", ",", ")", "ch", "index", "char", "int"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 17, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 10, "n_whitespaces": 4, "n_words": 6, "nloc": 1, "token_counts": 10}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/diagnostics/AbstractFailureAnalyzer.java#34-38", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/diagnostics/AbstractFailureAnalyzer.java", "language": "Java"}, "method": {"name": "analyze", "qualified_name": "org.springframework.boot.diagnostics.AbstractFailureAnalyzer#analyze", "start_line": 34, "end_line": 38, "signature": "analyze(Throwable failure)", "original_code": "@Override\n\tpublic @Nullable FailureAnalysis analyze(Throwable failure) {\n\t\tT cause = findCause(failure, getCauseType());\n\t\treturn (cause != null) ? analyze(failure, cause) : null;\n\t}", "doc_comment": ""}, "code_tokens": ["FailureAnalysis", "analyze", "public", "(", ")", "{", "}", "@", "Override", "@", "Nullable", "Throwable", "failure", "T", ";", "return", ";", "cause", "=", "?", ":", "null", "findCause", "(", ")", "analyze", "(", "failure", ",", ")", "cause", "!=", "null", "(", "failure", ",", "cause", ")", "getCauseType", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 61, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 24, "n_whitespaces": 27, "n_words": 19, "nloc": 5, "token_counts": 41}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/diagnostics/AbstractFailureAnalyzer.java#47-47", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/diagnostics/AbstractFailureAnalyzer.java", "language": "Java"}, "method": {"name": "analyze", "qualified_name": "org.springframework.boot.diagnostics.AbstractFailureAnalyzer#analyze", "start_line": 47, "end_line": 47, "signature": "analyze(Throwable rootFailure, T cause)", "original_code": "protected abstract @Nullable FailureAnalysis analyze(Throwable rootFailure, T cause);", "doc_comment": "/**\n\t * Returns an analysis of the given {@code rootFailure}, or {@code null} if no\n\t * analysis was possible.\n\t * @param rootFailure the root failure passed to the analyzer\n\t * @param cause the actual found cause\n\t * @return the analysis or {@code null}\n\t */"}, "code_tokens": ["FailureAnalysis", "analyze", ";", "protected", "abstract", "(", ",", ")", "@", "Nullable", "Throwable", "rootFailure", "T", "cause"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 21, "ast_depth": 5, "n_identifiers": 4, "vocab_size": 14, "n_whitespaces": 7, "n_words": 9, "nloc": 1, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/diagnostics/AbstractFailureAnalyzer.java#54-61", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/diagnostics/AbstractFailureAnalyzer.java", "language": "Java"}, "method": {"name": "getCauseType", "qualified_name": "org.springframework.boot.diagnostics.AbstractFailureAnalyzer#getCauseType", "start_line": 54, "end_line": 61, "signature": "getCauseType()", "original_code": "@SuppressWarnings(\"unchecked\")\n\tprotected Class<? extends T> getCauseType() {\n\t\tClass<? extends T> type = (Class<? extends T>) ResolvableType\n\t\t\t.forClass(AbstractFailureAnalyzer.class, getClass())\n\t\t\t.resolveGeneric();\n\t\tAssert.state(type != null, \"Unable to resolve generic\");\n\t\treturn type;\n\t}", "doc_comment": "/**\n\t * Return the cause type being handled by the analyzer. By default the class generic\n\t * is used.\n\t * @return the cause type\n\t */"}, "code_tokens": ["getCauseType", "protected", "Class", "(", ")", "{", "}", "@", "SuppressWarnings", "<", ">", ";", ";", "return", "type", ";", "(", ")", "?", "extends", "T", "Class", "type", "=", "Assert", ".", "state", "\"", "unchecked", "\"", "<", ">", "(", ")", "(", ",", ")", "?", "extends", "T", "Class", ".", "resolveGeneric", "type", "!=", "null", "\"", "Unable to resolve generic", "\"", "<", ">", "ResolvableType", ".", "forClass", "(", ")", "?", "extends", "T", "(", ",", ")", "AbstractFailureAnalyzer", ".", "class", "getClass", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 101, "ast_depth": 12, "n_identifiers": 9, "vocab_size": 33, "n_whitespaces": 42, "n_words": 30, "nloc": 8, "token_counts": 68}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/diagnostics/AbstractFailureAnalyzer.java#63-72", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/diagnostics/AbstractFailureAnalyzer.java", "language": "Java"}, "method": {"name": "findCause", "qualified_name": "org.springframework.boot.diagnostics.AbstractFailureAnalyzer#findCause", "start_line": 63, "end_line": 72, "signature": "findCause(@Nullable Throwable failure, Class<E> type)", "original_code": "@SuppressWarnings(\"unchecked\")\n\tprotected final <E extends Throwable> @Nullable E findCause(@Nullable Throwable failure, Class<E> type) {\n\t\twhile (failure != null) {\n\t\t\tif (type.isInstance(failure)) {\n\t\t\t\treturn (E) failure;\n\t\t\t}\n\t\t\tfailure = failure.getCause();\n\t\t}\n\t\treturn null;\n\t}", "doc_comment": ""}, "code_tokens": ["E", "findCause", "protected", "final", "<", ">", "@", "Nullable", "(", ",", ")", "{", "}", "@", "SuppressWarnings", "E", "Throwable", "failure", "type", "while", "return", "null", ";", "(", ")", "extends", "Throwable", "Class", "(", ")", "{", "}", "\"", "unchecked", "\"", "@", "Nullable", "<", "E", ">", "failure", "!=", "null", "if", ";", "(", ")", "{", "}", "failure", "=", "type", ".", "isInstance", "return", ";", "failure", ".", "getCause", "(", "failure", ")", "(", "E", ")", "failure", "(", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 102, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 31, "n_whitespaces": 53, "n_words": 31, "nloc": 10, "token_counts": 68}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/diagnostics/analyzer/MutuallyExclusiveConfigurationPropertiesFailureAnalyzer.java#57-73", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/diagnostics/analyzer/MutuallyExclusiveConfigurationPropertiesFailureAnalyzer.java", "language": "Java"}, "method": {"name": "analyze", "qualified_name": "org.springframework.boot.diagnostics.analyzer.MutuallyExclusiveConfigurationPropertiesFailureAnalyzer#analyze", "start_line": 57, "end_line": 73, "signature": "analyze(Throwable rootFailure,\n\t\t\tMutuallyExclusiveConfigurationPropertiesException cause)", "original_code": "@Override\n\tprotected @Nullable FailureAnalysis analyze(Throwable rootFailure,\n\t\t\tMutuallyExclusiveConfigurationPropertiesException cause) {\n\t\tList<Descriptor> descriptors = new ArrayList<>();\n\t\tfor (String name : cause.getConfiguredNames()) {\n\t\t\tList<Descriptor> descriptorsForName = getDescriptors(name);\n\t\t\tif (descriptorsForName.isEmpty()) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tdescriptors.addAll(descriptorsForName);\n\t\t}\n\t\tStringBuilder description = new StringBuilder();\n\t\tappendDetails(description, cause, descriptors);\n\t\treturn new FailureAnalysis(description.toString(),\n\t\t\t\t\"Update your configuration so that only one of the mutually exclusive properties is configured.\",\n\t\t\t\tcause);\n\t}", "doc_comment": ""}, "code_tokens": ["FailureAnalysis", "analyze", "protected", "(", ",", ")", "{", "}", "@", "Override", "@", "Nullable", "Throwable", "rootFailure", "MutuallyExclusiveConfigurationPropertiesException", "cause", ";", "for", "(", "String", "name", ":", ")", "StringBuilder", ";", ";", "return", ";", "List", "descriptors", "=", "cause", ".", "getConfiguredNames", "{", "}", "description", "=", "appendDetails", "new", "FailureAnalysis", "<", "Descriptor", ">", "new", "(", ")", ";", "if", ";", "new", "StringBuilder", "(", "description", ",", "cause", ",", "descriptors", ")", "(", ",", ",", "cause", ")", "ArrayList", "(", ")", "List", "descriptorsForName", "=", "(", ")", "{", "}", "descriptors", ".", "addAll", "(", ")", "description", ".", "toString", "\"", "Update your configuration so that only one of the mutually exclusive properties is configured.", "\"", "<", ">", "<", "Descriptor", ">", "getDescriptors", "descriptorsForName", ".", "isEmpty", "return", "null", ";", "(", "descriptorsForName", ")", "(", ")", "(", "name", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 156, "ast_depth": 10, "n_identifiers": 15, "vocab_size": 43, "n_whitespaces": 99, "n_words": 60, "nloc": 17, "token_counts": 107}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/diagnostics/analyzer/MutuallyExclusiveConfigurationPropertiesFailureAnalyzer.java#75-79", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/diagnostics/analyzer/MutuallyExclusiveConfigurationPropertiesFailureAnalyzer.java", "language": "Java"}, "method": {"name": "getDescriptors", "qualified_name": "org.springframework.boot.diagnostics.analyzer.MutuallyExclusiveConfigurationPropertiesFailureAnalyzer#getDescriptors", "start_line": 75, "end_line": 79, "signature": "getDescriptors(String propertyName)", "original_code": "private List<Descriptor> getDescriptors(String propertyName) {\n\t\treturn getPropertySources().filter((source) -> source.containsProperty(propertyName))\n\t\t\t.map((source) -> Descriptor.get(source, propertyName))\n\t\t\t.toList();\n\t}", "doc_comment": ""}, "code_tokens": ["getDescriptors", "private", "List", "(", ")", "{", "}", "<", "Descriptor", ">", "String", "propertyName", "return", ";", ".", "toList", ".", "map", "(", ")", ".", "filter", "(", ")", "getPropertySources", "(", ")", "->", "(", ")", "->", "(", "source", ")", "Descriptor", ".", "get", "(", "source", ")", "source", ".", "containsProperty", "(", "source", ",", "propertyName", ")", "(", "propertyName", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 76, "ast_depth": 12, "n_identifiers": 10, "vocab_size": 24, "n_whitespaces": 23, "n_words": 20, "nloc": 5, "token_counts": 51}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/diagnostics/analyzer/MutuallyExclusiveConfigurationPropertiesFailureAnalyzer.java#81-88", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/diagnostics/analyzer/MutuallyExclusiveConfigurationPropertiesFailureAnalyzer.java", "language": "Java"}, "method": {"name": "getPropertySources", "qualified_name": "org.springframework.boot.diagnostics.analyzer.MutuallyExclusiveConfigurationPropertiesFailureAnalyzer#getPropertySources", "start_line": 81, "end_line": 88, "signature": "getPropertySources()", "original_code": "private Stream<PropertySource<?>> getPropertySources() {\n\t\tif (this.environment == null) {\n\t\t\treturn Stream.empty();\n\t\t}\n\t\treturn this.environment.getPropertySources()\n\t\t\t.stream()\n\t\t\t.filter((source) -> !ConfigurationPropertySources.isAttachedConfigurationPropertySource(source));\n\t}", "doc_comment": ""}, "code_tokens": ["getPropertySources", "private", "Stream", "(", ")", "{", "}", "<", ">", "if", "return", ";", "PropertySource", "(", ")", "{", "}", ".", "filter", "<", ">", "==", "null", "return", ";", ".", "stream", "(", ")", "?", "this", ".", "environment", "Stream", ".", "empty", ".", "getPropertySources", "(", ")", "->", "(", ")", "this", ".", "environment", "(", ")", "(", "source", ")", "!", "ConfigurationPropertySources", ".", "isAttachedConfigurationPropertySource", "(", "source", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 89, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 27, "n_whitespaces": 34, "n_words": 21, "nloc": 8, "token_counts": 58}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/diagnostics/analyzer/MutuallyExclusiveConfigurationPropertiesFailureAnalyzer.java#90-103", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/diagnostics/analyzer/MutuallyExclusiveConfigurationPropertiesFailureAnalyzer.java", "language": "Java"}, "method": {"name": "appendDetails", "qualified_name": "org.springframework.boot.diagnostics.analyzer.MutuallyExclusiveConfigurationPropertiesFailureAnalyzer#appendDetails", "start_line": 90, "end_line": 103, "signature": "appendDetails(StringBuilder message, MutuallyExclusiveConfigurationPropertiesException cause,\n\t\t\tList<Descriptor> descriptors)", "original_code": "private void appendDetails(StringBuilder message, MutuallyExclusiveConfigurationPropertiesException cause,\n\t\t\tList<Descriptor> descriptors) {\n\t\tdescriptors.sort(Comparator.comparing((descriptor) -> descriptor.propertyName));\n\t\tmessage.append(String.format(\"The following configuration properties are mutually exclusive:%n%n\"));\n\t\tsortedStrings(cause.getMutuallyExclusiveNames())\n\t\t\t.forEach((name) -> message.append(String.format(\"\\t%s%n\", name)));\n\t\tmessage.append(String.format(\"%n\"));\n\t\tmessage.append(\n\t\t\t\tString.format(\"However, more than one of those properties has been configured at the same time:%n%n\"));\n\t\tSet<String> configuredDescriptions = sortedStrings(descriptors,\n\t\t\t\t(descriptor) -> String.format(\"\\t%s%s%n\", descriptor.propertyName,\n\t\t\t\t\t\t(descriptor.origin != null) ? \" (originating from '\" + descriptor.origin + \"')\" : \"\"));\n\t\tconfiguredDescriptions.forEach(message::append);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "appendDetails", "private", "(", ",", ",", ")", "{", "}", "StringBuilder", "message", "MutuallyExclusiveConfigurationPropertiesException", "cause", "descriptors", ";", ";", ";", ";", ";", ";", ";", "List", "descriptors", ".", "sort", "message", ".", "append", ".", "forEach", "message", ".", "append", "message", ".", "append", "Set", "configuredDescriptions", "=", "configuredDescriptions", ".", "forEach", "<", "Descriptor", ">", "(", ")", "(", ")", "sortedStrings", "(", ")", "(", ")", "(", ")", "<", "String", ">", "sortedStrings", "(", ")", "Comparator", ".", "comparing", "String", ".", "format", "(", ")", "->", "String", ".", "format", "String", ".", "format", "(", "descriptors", ",", ")", "message", "::", "append", "(", ")", "(", ")", "cause", ".", "getMutuallyExclusiveNames", "(", "name", ")", "message", ".", "append", "(", ")", "(", ")", "->", "->", "\"", "The following configuration properties are mutually exclusive:%n%n", "\"", "(", ")", "(", ")", "\"", "%n", "\"", "\"", "However, more than one of those properties has been configured at the same time:%n%n", "\"", "(", "descriptor", ")", "String", ".", "format", "(", "descriptor", ")", "descriptor", ".", "propertyName", "String", ".", "format", "(", ",", ",", ")", "(", ",", "name", ")", "\"", "\\t", "%s%s%n", "\"", "descriptor", ".", "propertyName", "?", ":", "\"", "\\t", "%s%n", "\"", "(", ")", "+", "\"", "\"", "!=", "null", "+", "\"", "')", "\"", "descriptor", ".", "origin", "\"", " (originating from '", "\"", "descriptor", ".", "origin"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 248, "ast_depth": 15, "n_identifiers": 18, "vocab_size": 51, "n_whitespaces": 98, "n_words": 93, "nloc": 14, "token_counts": 172}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/diagnostics/analyzer/MutuallyExclusiveConfigurationPropertiesFailureAnalyzer.java#105-107", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/diagnostics/analyzer/MutuallyExclusiveConfigurationPropertiesFailureAnalyzer.java", "language": "Java"}, "method": {"name": "sortedStrings", "qualified_name": "org.springframework.boot.diagnostics.analyzer.MutuallyExclusiveConfigurationPropertiesFailureAnalyzer#sortedStrings", "start_line": 105, "end_line": 107, "signature": "sortedStrings(Collection<String> input)", "original_code": "private Set<String> sortedStrings(Collection<String> input) {\n\t\treturn sortedStrings(input, Function.identity());\n\t}", "doc_comment": ""}, "code_tokens": ["sortedStrings", "private", "Set", "(", ")", "{", "}", "<", "String", ">", "input", "return", ";", "Collection", "sortedStrings", "<", "String", ">", "(", "input", ",", ")", "Function", ".", "identity", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 42, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 18, "n_whitespaces": 11, "n_words": 12, "nloc": 3, "token_counts": 27}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/diagnostics/analyzer/MutuallyExclusiveConfigurationPropertiesFailureAnalyzer.java#109-115", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/diagnostics/analyzer/MutuallyExclusiveConfigurationPropertiesFailureAnalyzer.java", "language": "Java"}, "method": {"name": "sortedStrings", "qualified_name": "org.springframework.boot.diagnostics.analyzer.MutuallyExclusiveConfigurationPropertiesFailureAnalyzer#sortedStrings", "start_line": 109, "end_line": 115, "signature": "sortedStrings(Collection<S> input, Function<S, String> converter)", "original_code": "private <S> Set<String> sortedStrings(Collection<S> input, Function<S, String> converter) {\n\t\tTreeSet<String> results = new TreeSet<>();\n\t\tfor (S item : input) {\n\t\t\tresults.add(converter.apply(item));\n\t\t}\n\t\treturn results;\n\t}", "doc_comment": ""}, "code_tokens": ["sortedStrings", "private", "<", ">", "Set", "(", ",", ")", "{", "}", "S", "<", "String", ">", "input", "converter", ";", "for", "(", "S", "item", ":", "input", ")", "return", "results", ";", "Collection", "Function", "TreeSet", "results", "=", "{", "}", "<", "S", ">", "<", "S", ",", "String", ">", "<", "String", ">", "new", ";", "TreeSet", "(", ")", "results", ".", "add", "<", ">", "(", ")", "converter", ".", "apply", "(", "item", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 94, "ast_depth": 11, "n_identifiers": 7, "vocab_size": 28, "n_whitespaces": 36, "n_words": 28, "nloc": 7, "token_counts": 63}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/diagnostics/analyzer/MutuallyExclusiveConfigurationPropertiesFailureAnalyzer.java#128-131", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/diagnostics/analyzer/MutuallyExclusiveConfigurationPropertiesFailureAnalyzer.java", "language": "Java"}, "method": {"name": "get", "qualified_name": "org.springframework.boot.diagnostics.analyzer.MutuallyExclusiveConfigurationPropertiesFailureAnalyzer#get", "start_line": 128, "end_line": 131, "signature": "get(PropertySource<?> source, String propertyName)", "original_code": "static Descriptor get(PropertySource<?> source, String propertyName) {\n\t\t\tOrigin origin = OriginLookup.getOrigin(source, propertyName);\n\t\t\treturn new Descriptor(propertyName, origin);\n\t\t}", "doc_comment": ""}, "code_tokens": ["Descriptor", "get", "static", "(", ",", ")", "{", "}", "source", "String", "propertyName", "Origin", ";", "return", ";", "PropertySource", "origin", "=", "new", "Descriptor", "<", ">", "OriginLookup", ".", "getOrigin", "(", "propertyName", ",", "origin", ")", "?", "(", "source", ",", "propertyName", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 53, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 24, "n_whitespaces": 24, "n_words": 18, "nloc": 4, "token_counts": 36}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/json/AbstractJsonParser.java#37-39", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/json/AbstractJsonParser.java", "language": "Java"}, "method": {"name": "parseMap", "qualified_name": "org.springframework.boot.json.AbstractJsonParser#parseMap", "start_line": 37, "end_line": 39, "signature": "parseMap(@Nullable String json, Function<String, Map<String, Object>> parser)", "original_code": "protected final Map<String, Object> parseMap(@Nullable String json, Function<String, Map<String, Object>> parser) {\n\t\treturn trimParse(json, \"{\", parser);\n\t}", "doc_comment": ""}, "code_tokens": ["parseMap", "protected", "final", "Map", "(", ",", ")", "{", "}", "<", "String", ",", "Object", ">", "String", "json", "parser", "return", ";", "Function", "trimParse", "@", "Nullable", "<", "String", ",", ">", "(", "json", ",", ",", "parser", ")", "Map", "\"", "{", "\"", "<", "String", ",", "Object", ">"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 61, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 22, "n_whitespaces": 19, "n_words": 19, "nloc": 3, "token_counts": 42}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/json/AbstractJsonParser.java#41-43", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/json/AbstractJsonParser.java", "language": "Java"}, "method": {"name": "parseList", "qualified_name": "org.springframework.boot.json.AbstractJsonParser#parseList", "start_line": 41, "end_line": 43, "signature": "parseList(@Nullable String json, Function<String, List<Object>> parser)", "original_code": "protected final List<Object> parseList(@Nullable String json, Function<String, List<Object>> parser) {\n\t\treturn trimParse(json, \"[\", parser);\n\t}", "doc_comment": ""}, "code_tokens": ["parseList", "protected", "final", "List", "(", ",", ")", "{", "}", "<", "Object", ">", "String", "json", "parser", "return", ";", "Function", "trimParse", "@", "Nullable", "<", "String", ",", ">", "(", "json", ",", ",", "parser", ")", "List", "\"", "[", "\"", "<", "Object", ">"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 57, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 23, "n_whitespaces": 17, "n_words": 17, "nloc": 3, "token_counts": 38}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/json/AbstractJsonParser.java#45-51", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/json/AbstractJsonParser.java", "language": "Java"}, "method": {"name": "trimParse", "qualified_name": "org.springframework.boot.json.AbstractJsonParser#trimParse", "start_line": 45, "end_line": 51, "signature": "trimParse(@Nullable String json, String prefix, Function<String, T> parser)", "original_code": "protected final <T> T trimParse(@Nullable String json, String prefix, Function<String, T> parser) {\n\t\tString trimmed = (json != null) ? json.trim() : \"\";\n\t\tif (trimmed.startsWith(prefix)) {\n\t\t\treturn parser.apply(trimmed);\n\t\t}\n\t\tthrow new JsonParseException();\n\t}", "doc_comment": ""}, "code_tokens": ["T", "trimParse", "protected", "final", "<", ">", "(", ",", ",", ")", "{", "}", "T", "String", "json", "String", "prefix", "parser", "String", ";", "if", "throw", ";", "Function", "trimmed", "=", "(", ")", "{", "}", "new", "JsonParseException", "@", "Nullable", "<", "String", ",", "T", ">", "?", ":", "trimmed", ".", "startsWith", "return", ";", "(", ")", "(", ")", "json", ".", "trim", "\"", "\"", "(", "prefix", ")", "parser", ".", "apply", "json", "!=", "null", "(", ")", "(", "trimmed", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 102, "ast_depth": 9, "n_identifiers": 9, "vocab_size": 35, "n_whitespaces": 44, "n_words": 31, "nloc": 7, "token_counts": 69}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/json/AbstractJsonParser.java#53-64", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/json/AbstractJsonParser.java", "language": "Java"}, "method": {"name": "tryParse", "qualified_name": "org.springframework.boot.json.AbstractJsonParser#tryParse", "start_line": 53, "end_line": 64, "signature": "tryParse(Callable<T> parser, Class<? extends Exception> check)", "original_code": "protected final <T> T tryParse(Callable<T> parser, Class<? extends Exception> check) {\n\t\ttry {\n\t\t\treturn parser.call();\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tif (check.isAssignableFrom(ex.getClass())) {\n\t\t\t\tthrow new JsonParseException(ex);\n\t\t\t}\n\t\t\tReflectionUtils.rethrowRuntimeException(ex);\n\t\t\tthrow new IllegalStateException(ex);\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["T", "tryParse", "protected", "final", "<", ">", "(", ",", ")", "{", "}", "T", "parser", "check", "try", "Callable", "Class", "{", "}", "catch", "(", ")", "<", "T", ">", "<", ">", "return", ";", "ex", "{", "}", "?", "extends", "Exception", "parser", ".", "call", "Exception", "if", ";", "throw", ";", "(", ")", "(", ")", "{", "}", "ReflectionUtils", ".", "rethrowRuntimeException", "new", "IllegalStateException", "check", ".", "isAssignableFrom", "throw", ";", "(", "ex", ")", "(", "ex", ")", "(", ")", "new", "JsonParseException", "ex", ".", "getClass", "(", "ex", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 116, "ast_depth": 13, "n_identifiers": 9, "vocab_size": 34, "n_whitespaces": 60, "n_words": 35, "nloc": 12, "token_counts": 77}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/json/BasicJsonParser.java#46-49", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/json/BasicJsonParser.java", "language": "Java"}, "method": {"name": "parseMap", "qualified_name": "org.springframework.boot.json.BasicJsonParser#parseMap", "start_line": 46, "end_line": 49, "signature": "parseMap(@Nullable String json)", "original_code": "@Override\n\tpublic Map<String, Object> parseMap(@Nullable String json) {\n\t\treturn tryParse(() -> parseMap(json, (jsonToParse) -> parseMapInternal(0, jsonToParse)), Exception.class);\n\t}", "doc_comment": ""}, "code_tokens": ["parseMap", "public", "Map", "(", ")", "{", "}", "@", "Override", "<", "String", ",", "Object", ">", "String", "json", "return", ";", "tryParse", "@", "Nullable", "(", ",", ")", "->", "Exception", ".", "class", "(", ")", "parseMap", "(", "json", ",", ")", "->", "(", "jsonToParse", ")", "parseMapInternal", "(", "0", ",", "jsonToParse", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 68, "ast_depth": 13, "n_identifiers": 7, "vocab_size": 26, "n_whitespaces": 21, "n_words": 19, "nloc": 4, "token_counts": 45}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/json/BasicJsonParser.java#51-54", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/json/BasicJsonParser.java", "language": "Java"}, "method": {"name": "parseList", "qualified_name": "org.springframework.boot.json.BasicJsonParser#parseList", "start_line": 51, "end_line": 54, "signature": "parseList(@Nullable String json)", "original_code": "@Override\n\tpublic List<Object> parseList(@Nullable String json) {\n\t\treturn tryParse(() -> parseList(json, (jsonToParse) -> parseListInternal(0, jsonToParse)), Exception.class);\n\t}", "doc_comment": ""}, "code_tokens": ["parseList", "public", "List", "(", ")", "{", "}", "@", "Override", "<", "Object", ">", "String", "json", "return", ";", "tryParse", "@", "Nullable", "(", ",", ")", "->", "Exception", ".", "class", "(", ")", "parseList", "(", "json", ",", ")", "->", "(", "jsonToParse", ")", "parseListInternal", "(", "0", ",", "jsonToParse", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 66, "ast_depth": 13, "n_identifiers": 7, "vocab_size": 26, "n_whitespaces": 20, "n_words": 18, "nloc": 4, "token_counts": 43}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/json/BasicJsonParser.java#56-63", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/json/BasicJsonParser.java", "language": "Java"}, "method": {"name": "parseListInternal", "qualified_name": "org.springframework.boot.json.BasicJsonParser#parseListInternal", "start_line": 56, "end_line": 63, "signature": "parseListInternal(int nesting, String json)", "original_code": "private List<Object> parseListInternal(int nesting, String json) {\n\t\tList<Object> list = new ArrayList<>();\n\t\tjson = trimEdges(json, '[', ']').trim();\n\t\tfor (String value : tokenize(json)) {\n\t\t\tlist.add(parseInternal(nesting + 1, value));\n\t\t}\n\t\treturn list;\n\t}", "doc_comment": ""}, "code_tokens": ["parseListInternal", "private", "List", "(", ",", ")", "{", "}", "<", "Object", ">", "nesting", "String", "json", ";", ";", "for", "(", "String", "value", ":", ")", "return", "list", ";", "int", "List", "list", "=", "json", "=", "tokenize", "{", "}", "<", "Object", ">", "new", ".", "trim", "(", "json", ")", ";", "ArrayList", "(", ")", "trimEdges", "(", ")", "list", ".", "add", "<", ">", "(", "json", ",", "'['", ",", "']'", ")", "(", ")", "parseInternal", "(", ",", "value", ")", "nesting", "+", "1"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 107, "ast_depth": 12, "n_identifiers": 10, "vocab_size": 34, "n_whitespaces": 44, "n_words": 30, "nloc": 8, "token_counts": 72}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/json/BasicJsonParser.java#65-79", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/json/BasicJsonParser.java", "language": "Java"}, "method": {"name": "parseInternal", "qualified_name": "org.springframework.boot.json.BasicJsonParser#parseInternal", "start_line": 65, "end_line": 79, "signature": "parseInternal(int nesting, String json)", "original_code": "private Object parseInternal(int nesting, String json) {\n\t\tif (nesting > MAX_DEPTH) {\n\t\t\tthrow new IllegalStateException(\"JSON is too deeply nested\");\n\t\t}\n\t\tif (json.startsWith(\"[\")) {\n\t\t\treturn parseListInternal(nesting + 1, json);\n\t\t}\n\t\tif (json.startsWith(\"{\")) {\n\t\t\treturn parseMapInternal(nesting + 1, json);\n\t\t}\n\t\tif (json.startsWith(\"\\\"\")) {\n\t\t\treturn trimEdges(json, '\"', '\"');\n\t\t}\n\t\treturn parseNumber(json);\n\t}", "doc_comment": ""}, "code_tokens": ["Object", "parseInternal", "private", "(", ",", ")", "{", "}", "nesting", "String", "json", "if", "if", "if", "if", "return", ";", "int", "(", ")", "{", "}", "(", ")", "{", "}", "(", ")", "{", "}", "(", ")", "{", "}", "parseNumber", "nesting", ">", "MAX_DEPTH", "throw", ";", "json", ".", "startsWith", "return", ";", "json", ".", "startsWith", "return", ";", "json", ".", "startsWith", "return", ";", "(", "json", ")", "new", "IllegalStateException", "(", ")", "parseListInternal", "(", ")", "parseMapInternal", "(", ")", "trimEdges", "(", ")", "\"", "[", "\"", "(", ",", "json", ")", "\"", "{", "\"", "(", ",", "json", ")", "\"", "\\\"", "\"", "(", "json", ",", "'\"'", ",", "'\"'", ")", "\"", "JSON is too deeply nested", "\"", "nesting", "+", "1", "nesting", "+", "1"], "metrics": {"cyclomatic_complexity": 5, "n_ast_nodes": 152, "ast_depth": 10, "n_identifiers": 9, "vocab_size": 33, "n_whitespaces": 79, "n_words": 43, "nloc": 15, "token_counts": 104}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/json/BasicJsonParser.java#81-99", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/json/BasicJsonParser.java", "language": "Java"}, "method": {"name": "parseMapInternal", "qualified_name": "org.springframework.boot.json.BasicJsonParser#parseMapInternal", "start_line": 81, "end_line": 99, "signature": "parseMapInternal(int nesting, String json)", "original_code": "private Map<String, Object> parseMapInternal(int nesting, String json) {\n\t\tMap<String, Object> map = new LinkedHashMap<>();\n\t\tjson = trimEdges(json, '{', '}').trim();\n\t\tfor (String pair : tokenize(json)) {\n\t\t\tString[] split = StringUtils.split(pair, \":\");\n\t\t\t@Nullable String[] values = (split != null) ? StringUtils.trimArrayElements(split) : null;\n\t\t\tAssert.state(values != null, () -> \"Unable to parse '%s'\".formatted(pair));\n\t\t\tString rawKey = values[0];\n\t\t\tString rawValue = values[1];\n\t\t\tAssert.state(rawKey != null, () -> \"rawKew is null in '%s'\".formatted(pair));\n\t\t\tAssert.state(rawKey.startsWith(\"\\\"\") && rawKey.endsWith(\"\\\"\"),\n\t\t\t\t\t\"Expecting double-quotes around field names\");\n\t\t\tString key = trimEdges(rawKey, '\"', '\"');\n\t\t\tAssert.state(rawValue != null, () -> \"rawValue is null in '%s'\".formatted(pair));\n\t\t\tObject value = parseInternal(nesting, rawValue);\n\t\t\tmap.put(key, value);\n\t\t}\n\t\treturn map;\n\t}", "doc_comment": ""}, "code_tokens": ["parseMapInternal", "private", "Map", "(", ",", ")", "{", "}", "<", "String", ",", "Object", ">", "nesting", "String", "json", ";", ";", "for", "(", "String", "pair", ":", ")", "return", "map", ";", "int", "Map", "map", "=", "json", "=", "tokenize", "{", "}", "<", "String", ",", "Object", ">", "new", ".", "trim", "(", "json", ")", ";", ";", ";", "String", ";", "String", ";", ";", ";", "String", ";", ";", "Object", ";", ";", "LinkedHashMap", "(", ")", "trimEdges", "(", ")", "String", "split", "=", "String", "values", "=", "Assert", ".", "state", "rawKey", "=", "rawValue", "=", "Assert", ".", "state", "Assert", ".", "state", "key", "=", "Assert", ".", "state", "value", "=", "map", ".", "put", "<", ">", "(", "json", ",", "'{'", ",", "'}'", ")", "[", "]", "StringUtils", ".", "split", "@", "Nullable", "[", "]", "?", ":", "null", "(", ",", ")", "values", "[", "0", "]", "values", "[", "1", "]", "(", ",", ")", "(", ",", ")", "trimEdges", "(", ",", ")", "parseInternal", "(", "key", ",", "value", ")", "(", "pair", ",", ")", "(", ")", "StringUtils", ".", "trimArrayElements", "values", "!=", "null", "->", "rawKey", "!=", "null", "->", "&&", "\"", "Expecting double-quotes around field names", "\"", "(", "rawKey", ",", "'\"'", ",", "'\"'", ")", "rawValue", "!=", "null", "->", "(", "nesting", ",", "rawValue", ")", "\"", ":", "\"", "split", "!=", "null", "(", "split", ")", "(", ")", ".", "formatted", "(", ")", ".", "formatted", "rawKey", ".", "startsWith", "rawKey", ".", "endsWith", "(", ")", ".", "formatted", "\"", "Unable to parse '%s'", "\"", "(", "pair", ")", "\"", "rawKew is null in '%s'", "\"", "(", "pair", ")", "(", ")", "(", ")", "\"", "rawValue is null in '%s'", "\"", "(", "pair", ")", "\"", "\\\"", "\"", "\"", "\\\"", "\""], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 339, "ast_depth": 13, "n_identifiers": 24, "vocab_size": 63, "n_whitespaces": 151, "n_words": 105, "nloc": 19, "token_counts": 237}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/json/BasicJsonParser.java#101-113", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/json/BasicJsonParser.java", "language": "Java"}, "method": {"name": "parseNumber", "qualified_name": "org.springframework.boot.json.BasicJsonParser#parseNumber", "start_line": 101, "end_line": 113, "signature": "parseNumber(String json)", "original_code": "private Object parseNumber(String json) {\n\t\ttry {\n\t\t\treturn Long.valueOf(json);\n\t\t}\n\t\tcatch (NumberFormatException ex) {\n\t\t\ttry {\n\t\t\t\treturn Double.valueOf(json);\n\t\t\t}\n\t\t\tcatch (NumberFormatException ex2) {\n\t\t\t\treturn json;\n\t\t\t}\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["Object", "parseNumber", "private", "(", ")", "{", "}", "String", "json", "try", "{", "}", "catch", "(", ")", "return", ";", "ex", "{", "}", "Long", ".", "valueOf", "NumberFormatException", "try", "(", "json", ")", "{", "}", "catch", "(", ")", "return", ";", "ex2", "{", "}", "Double", ".", "valueOf", "NumberFormatException", "return", "json", ";", "(", "json", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 73, "ast_depth": 12, "n_identifiers": 7, "vocab_size": 20, "n_whitespaces": 59, "n_words": 23, "nloc": 13, "token_counts": 48}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/json/BasicJsonParser.java#115-120", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/json/BasicJsonParser.java", "language": "Java"}, "method": {"name": "trimTrailingCharacter", "qualified_name": "org.springframework.boot.json.BasicJsonParser#trimTrailingCharacter", "start_line": 115, "end_line": 120, "signature": "trimTrailingCharacter(String string, char c)", "original_code": "private static String trimTrailingCharacter(String string, char c) {\n\t\tif (!string.isEmpty() && string.charAt(string.length() - 1) == c) {\n\t\t\treturn string.substring(0, string.length() - 1);\n\t\t}\n\t\treturn string;\n\t}", "doc_comment": ""}, "code_tokens": ["String", "trimTrailingCharacter", "private", "static", "(", ",", ")", "{", "}", "String", "string", "c", "if", "return", "string", ";", "char", "(", ")", "{", "}", "&&", "return", ";", "!", "==", "c", "string", ".", "substring", "string", ".", "isEmpty", "string", ".", "charAt", "(", "0", ",", ")", "(", ")", "(", ")", "-", "1", "-", "1", "string", ".", "length", "string", ".", "length", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 86, "ast_depth": 13, "n_identifiers": 7, "vocab_size": 26, "n_whitespaces": 35, "n_words": 26, "nloc": 6, "token_counts": 58}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/json/BasicJsonParser.java#122-127", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/json/BasicJsonParser.java", "language": "Java"}, "method": {"name": "trimLeadingCharacter", "qualified_name": "org.springframework.boot.json.BasicJsonParser#trimLeadingCharacter", "start_line": 122, "end_line": 127, "signature": "trimLeadingCharacter(String string, char c)", "original_code": "private static String trimLeadingCharacter(String string, char c) {\n\t\tif (!string.isEmpty() && string.charAt(0) == c) {\n\t\t\treturn string.substring(1);\n\t\t}\n\t\treturn string;\n\t}", "doc_comment": ""}, "code_tokens": ["String", "trimLeadingCharacter", "private", "static", "(", ",", ")", "{", "}", "String", "string", "c", "if", "return", "string", ";", "char", "(", ")", "{", "}", "&&", "return", ";", "!", "==", "c", "string", ".", "substring", "string", ".", "isEmpty", "string", ".", "charAt", "(", "1", ")", "(", ")", "(", "0", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 66, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 24, "n_whitespaces": 30, "n_words": 21, "nloc": 6, "token_counts": 44}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/json/BasicJsonParser.java#129-131", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/json/BasicJsonParser.java", "language": "Java"}, "method": {"name": "trimEdges", "qualified_name": "org.springframework.boot.json.BasicJsonParser#trimEdges", "start_line": 129, "end_line": 131, "signature": "trimEdges(String string, char leadingChar, char trailingChar)", "original_code": "private static String trimEdges(String string, char leadingChar, char trailingChar) {\n\t\treturn trimTrailingCharacter(trimLeadingCharacter(string, leadingChar), trailingChar);\n\t}", "doc_comment": ""}, "code_tokens": ["String", "trimEdges", "private", "static", "(", ",", ",", ")", "{", "}", "String", "string", "leadingChar", "trailingChar", "return", ";", "char", "char", "trimTrailingCharacter", "(", ",", "trailingChar", ")", "trimLeadingCharacter", "(", "string", ",", "leadingChar", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 44, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 17, "n_whitespaces": 17, "n_words": 16, "nloc": 3, "token_counts": 29}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/json/BasicJsonParser.java#133-169", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/json/BasicJsonParser.java", "language": "Java"}, "method": {"name": "tokenize", "qualified_name": "org.springframework.boot.json.BasicJsonParser#tokenize", "start_line": 133, "end_line": 169, "signature": "tokenize(String json)", "original_code": "private List<String> tokenize(String json) {\n\t\tList<String> list = new ArrayList<>();\n\t\tTracking tracking = new Tracking();\n\t\tStringBuilder build = new StringBuilder();\n\t\tint index = 0;\n\t\twhile (index < json.length()) {\n\t\t\tchar ch = json.charAt(index);\n\t\t\tif (tracking.in(Tracked.ESCAPE)) {\n\t\t\t\tbuild.append(ch);\n\t\t\t\tindex++;\n\t\t\t\ttracking.set(Tracked.ESCAPE, 0);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tswitch (ch) {\n\t\t\t\tcase '{' -> tracking.update(Tracked.OBJECT, +1);\n\t\t\t\tcase '}' -> tracking.update(Tracked.OBJECT, -1);\n\t\t\t\tcase '[' -> tracking.update(Tracked.LIST, +1);\n\t\t\t\tcase ']' -> tracking.update(Tracked.LIST, -1);\n\t\t\t\tcase '\"' -> tracking.toggle(Tracked.VALUE);\n\t\t\t}\n\t\t\tif (ch == ',' && !tracking.in(Tracked.OBJECT, Tracked.LIST, Tracked.VALUE)) {\n\t\t\t\tlist.add(build.toString());\n\t\t\t\tbuild.setLength(0);\n\t\t\t}\n\t\t\telse if (ch == '\\\\') {\n\t\t\t\ttracking.set(Tracked.ESCAPE, 1);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tbuild.append(ch);\n\t\t\t}\n\t\t\tindex++;\n\t\t}\n\t\tif (!build.isEmpty()) {\n\t\t\tlist.add(build.toString().trim());\n\t\t}\n\t\treturn list;\n\t}", "doc_comment": ""}, "code_tokens": ["tokenize", "private", "List", "(", ")", "{", "}", "<", "String", ">", "String", "json", ";", "Tracking", ";", "StringBuilder", ";", ";", "while", "if", "return", "list", ";", "List", "list", "=", "tracking", "=", "build", "=", "int", "index", "=", "0", "(", ")", "{", "}", "(", ")", "{", "}", "<", "String", ">", "new", "new", "Tracking", "new", "StringBuilder", "index", "<", ";", "if", "switch", "if", "else", ";", "!", ";", "ArrayList", "(", ")", "(", ")", "(", ")", "json", ".", "length", "char", "ch", "=", "(", ")", "{", "}", "(", "ch", ")", "{", "}", "(", ")", "{", "}", "if", "else", "index", "++", "build", ".", "isEmpty", "list", ".", "add", "<", ">", "(", ")", "json", ".", "charAt", "tracking", ".", "in", ";", ";", ";", "continue", ";", "->", "->", "->", "->", "->", "&&", ";", ";", "(", ")", "{", "}", "{", "}", "(", ")", "(", ")", "(", "index", ")", "(", ")", "build", ".", "append", "index", "++", "tracking", ".", "set", "case", "'{'", ";", "case", "'}'", ";", "case", "'['", ";", "case", "']'", ";", "case", "'\"'", ";", "ch", "==", "','", "!", "list", ".", "add", "build", ".", "setLength", "ch", "==", "'\\\\'", ";", ";", ".", "trim", "Tracked", ".", "ESCAPE", "(", "ch", ")", "(", ",", "0", ")", "tracking", ".", "update", "tracking", ".", "update", "tracking", ".", "update", "tracking", ".", "update", "tracking", ".", "toggle", "tracking", ".", "in", "(", ")", "(", "0", ")", "tracking", ".", "set", "build", ".", "append", "build", ".", "toString", "(", ")", "Tracked", ".", "ESCAPE", "(", ",", ")", "(", ",", ")", "(", ",", ")", "(", ",", ")", "(", ")", "(", ",", ",", ")", "build", ".", "toString", "(", ",", "1", ")", "(", "ch", ")", "(", ")", "Tracked", ".", "OBJECT", "+", "1", "Tracked", ".", "OBJECT", "-", "1", "Tracked", ".", "LIST", "+", "1", "Tracked", ".", "LIST", "-", "1", "Tracked", ".", "VALUE", "Tracked", ".", "OBJECT", "Tracked", ".", "LIST", "Tracked", ".", "VALUE", "(", ")", "Tracked", ".", "ESCAPE"], "metrics": {"cyclomatic_complexity": 12, "n_ast_nodes": 426, "ast_depth": 13, "n_identifiers": 24, "vocab_size": 66, "n_whitespaces": 214, "n_words": 117, "nloc": 37, "token_counts": 288}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/json/BasicJsonParser.java#175-177", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/json/BasicJsonParser.java", "language": "Java"}, "method": {"name": "in", "qualified_name": "org.springframework.boot.json.BasicJsonParser#in", "start_line": 175, "end_line": 177, "signature": "in(Tracked... tracked)", "original_code": "boolean in(Tracked... tracked) {\n\t\t\treturn Arrays.stream(tracked).mapToInt(this::get).anyMatch((i) -> i > 0);\n\t\t}", "doc_comment": ""}, "code_tokens": ["boolean", "in", "(", ")", "{", "}", "Tracked", "...", "return", ";", "tracked", ".", "anyMatch", ".", "mapToInt", "(", ")", "Arrays", ".", "stream", "(", ")", "->", "(", "tracked", ")", "this", "::", "get", "(", "i", ")", "i", ">", "0"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 52, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 23, "n_whitespaces": 15, "n_words": 15, "nloc": 3, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/json/BasicJsonParser.java#179-181", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/json/BasicJsonParser.java", "language": "Java"}, "method": {"name": "toggle", "qualified_name": "org.springframework.boot.json.BasicJsonParser#toggle", "start_line": 179, "end_line": 181, "signature": "toggle(Tracked tracked)", "original_code": "void toggle(Tracked tracked) {\n\t\t\tset(tracked, (get(tracked) != 0) ? 0 : 1);\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "toggle", "(", ")", "{", "}", "Tracked", "tracked", ";", "set", "(", "tracked", ",", ")", "?", "0", ":", "1", "(", ")", "!=", "0", "get", "(", "tracked", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 39, "ast_depth": 12, "n_identifiers": 4, "vocab_size": 17, "n_whitespaces": 17, "n_words": 11, "nloc": 3, "token_counts": 26}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/json/BasicJsonParser.java#183-185", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/json/BasicJsonParser.java", "language": "Java"}, "method": {"name": "update", "qualified_name": "org.springframework.boot.json.BasicJsonParser#update", "start_line": 183, "end_line": 185, "signature": "update(Tracked tracked, int delta)", "original_code": "void update(Tracked tracked, int delta) {\n\t\t\tset(tracked, get(tracked) + delta);\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "update", "(", ",", ")", "{", "}", "Tracked", "tracked", "delta", ";", "int", "set", "(", "tracked", ",", ")", "+", "delta", "get", "(", "tracked", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 36, "ast_depth": 10, "n_identifiers": 5, "vocab_size": 15, "n_whitespaces": 15, "n_words": 11, "nloc": 3, "token_counts": 23}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/json/BasicJsonParser.java#187-189", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/json/BasicJsonParser.java", "language": "Java"}, "method": {"name": "get", "qualified_name": "org.springframework.boot.json.BasicJsonParser#get", "start_line": 187, "end_line": 189, "signature": "get(Tracked tracked)", "original_code": "private int get(Tracked tracked) {\n\t\t\treturn this.counts[tracked.ordinal()];\n\t\t}", "doc_comment": ""}, "code_tokens": ["get", "private", "int", "(", ")", "{", "}", "Tracked", "tracked", "return", ";", "[", "]", "this", ".", "counts", "tracked", ".", "ordinal", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 33, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 17, "n_whitespaces": 12, "n_words": 10, "nloc": 3, "token_counts": 21}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/json/BasicJsonParser.java#191-193", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/json/BasicJsonParser.java", "language": "Java"}, "method": {"name": "set", "qualified_name": "org.springframework.boot.json.BasicJsonParser#set", "start_line": 191, "end_line": 193, "signature": "set(Tracked tracked, int count)", "original_code": "void set(Tracked tracked, int count) {\n\t\t\tthis.counts[tracked.ordinal()] = count;\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "set", "(", ",", ")", "{", "}", "Tracked", "tracked", "count", ";", "int", "=", "count", "[", "]", "this", ".", "counts", "tracked", ".", "ordinal", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 37, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 19, "n_whitespaces": 14, "n_words": 11, "nloc": 3, "token_counts": 24}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/json/GsonJsonParser.java#43-47", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/json/GsonJsonParser.java", "language": "Java"}, "method": {"name": "parseMap", "qualified_name": "org.springframework.boot.json.GsonJsonParser#parseMap", "start_line": 43, "end_line": 47, "signature": "parseMap(@Nullable String json)", "original_code": "@Override\n\tpublic Map<String, Object> parseMap(@Nullable String json) {\n\t\treturn tryParse(() -> parseMap(json, (trimmed) -> this.gson.fromJson(trimmed, MAP_TYPE.getType())),\n\t\t\t\tException.class);\n\t}", "doc_comment": ""}, "code_tokens": ["parseMap", "public", "Map", "(", ")", "{", "}", "@", "Override", "<", "String", ",", "Object", ">", "String", "json", "return", ";", "tryParse", "@", "Nullable", "(", ",", ")", "->", "Exception", ".", "class", "(", ")", "parseMap", "(", "json", ",", ")", "->", "(", "trimmed", ")", ".", "fromJson", "this", ".", "gson", "(", "trimmed", ",", ")", "MAP_TYPE", ".", "getType", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 79, "ast_depth": 15, "n_identifiers": 10, "vocab_size": 29, "n_whitespaces": 25, "n_words": 22, "nloc": 5, "token_counts": 53}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/json/GsonJsonParser.java#49-53", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/json/GsonJsonParser.java", "language": "Java"}, "method": {"name": "parseList", "qualified_name": "org.springframework.boot.json.GsonJsonParser#parseList", "start_line": 49, "end_line": 53, "signature": "parseList(@Nullable String json)", "original_code": "@Override\n\tpublic List<Object> parseList(@Nullable String json) {\n\t\treturn tryParse(() -> parseList(json, (trimmed) -> this.gson.fromJson(trimmed, LIST_TYPE.getType())),\n\t\t\t\tException.class);\n\t}", "doc_comment": ""}, "code_tokens": ["parseList", "public", "List", "(", ")", "{", "}", "@", "Override", "<", "Object", ">", "String", "json", "return", ";", "tryParse", "@", "Nullable", "(", ",", ")", "->", "Exception", ".", "class", "(", ")", "parseList", "(", "json", ",", ")", "->", "(", "trimmed", ")", ".", "fromJson", "this", ".", "gson", "(", "trimmed", ",", ")", "LIST_TYPE", ".", "getType", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 77, "ast_depth": 15, "n_identifiers": 10, "vocab_size": 29, "n_whitespaces": 24, "n_words": 21, "nloc": 5, "token_counts": 51}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/json/JacksonJsonParser.java#55-58", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/json/JacksonJsonParser.java", "language": "Java"}, "method": {"name": "parseMap", "qualified_name": "org.springframework.boot.json.JacksonJsonParser#parseMap", "start_line": 55, "end_line": 58, "signature": "parseMap(@Nullable String json)", "original_code": "@Override\n\tpublic Map<String, Object> parseMap(@Nullable String json) {\n\t\treturn tryParse(() -> getObjectMapper().readValue(json, MAP_TYPE), Exception.class);\n\t}", "doc_comment": ""}, "code_tokens": ["parseMap", "public", "Map", "(", ")", "{", "}", "@", "Override", "<", "String", ",", "Object", ">", "String", "json", "return", ";", "tryParse", "@", "Nullable", "(", ",", ")", "->", "Exception", ".", "class", "(", ")", ".", "readValue", "getObjectMapper", "(", "json", ",", "MAP_TYPE", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 61, "ast_depth": 11, "n_identifiers": 8, "vocab_size": 26, "n_whitespaces": 18, "n_words": 17, "nloc": 4, "token_counts": 40}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/json/JacksonJsonParser.java#60-63", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/json/JacksonJsonParser.java", "language": "Java"}, "method": {"name": "parseList", "qualified_name": "org.springframework.boot.json.JacksonJsonParser#parseList", "start_line": 60, "end_line": 63, "signature": "parseList(@Nullable String json)", "original_code": "@Override\n\tpublic List<Object> parseList(@Nullable String json) {\n\t\treturn tryParse(() -> getObjectMapper().readValue(json, LIST_TYPE), Exception.class);\n\t}", "doc_comment": ""}, "code_tokens": ["parseList", "public", "List", "(", ")", "{", "}", "@", "Override", "<", "Object", ">", "String", "json", "return", ";", "tryParse", "@", "Nullable", "(", ",", ")", "->", "Exception", ".", "class", "(", ")", ".", "readValue", "getObjectMapper", "(", "json", ",", "LIST_TYPE", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 59, "ast_depth": 11, "n_identifiers": 8, "vocab_size": 26, "n_whitespaces": 17, "n_words": 16, "nloc": 4, "token_counts": 38}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/json/JacksonJsonParser.java#65-70", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/json/JacksonJsonParser.java", "language": "Java"}, "method": {"name": "getObjectMapper", "qualified_name": "org.springframework.boot.json.JacksonJsonParser#getObjectMapper", "start_line": 65, "end_line": 70, "signature": "getObjectMapper()", "original_code": "private ObjectMapper getObjectMapper() {\n\t\tif (this.objectMapper == null) {\n\t\t\tthis.objectMapper = new ObjectMapper();\n\t\t}\n\t\treturn this.objectMapper;\n\t}", "doc_comment": ""}, "code_tokens": ["ObjectMapper", "getObjectMapper", "private", "(", ")", "{", "}", "if", "return", ";", "(", ")", "{", "}", "this", ".", "objectMapper", "==", "null", ";", "this", ".", "objectMapper", "=", "this", ".", "objectMapper", "new", "ObjectMapper", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 48, "ast_depth": 10, "n_identifiers": 2, "vocab_size": 17, "n_whitespaces": 26, "n_words": 14, "nloc": 6, "token_counts": 31}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/json/JsonParser.java#42-42", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/json/JsonParser.java", "language": "Java"}, "method": {"name": "parseMap", "qualified_name": "org.springframework.boot.json.JsonParser#parseMap", "start_line": 42, "end_line": 42, "signature": "parseMap(@Nullable String json)", "original_code": "Map<String, Object> parseMap(@Nullable String json) throws JsonParseException;", "doc_comment": "/**\n\t * Parse the specified JSON string into a Map.\n\t * @param json the JSON to parse\n\t * @return the parsed JSON as a map\n\t * @throws JsonParseException if the JSON cannot be parsed\n\t */"}, "code_tokens": ["parseMap", ";", "Map", "(", ")", "throws", "JsonParseException", "<", "String", ",", "Object", ">", "String", "json", "@", "Nullable"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 25, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 15, "n_whitespaces": 6, "n_words": 9, "nloc": 1, "token_counts": 16}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/json/JsonParser.java#50-50", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/json/JsonParser.java", "language": "Java"}, "method": {"name": "parseList", "qualified_name": "org.springframework.boot.json.JsonParser#parseList", "start_line": 50, "end_line": 50, "signature": "parseList(@Nullable String json)", "original_code": "List<Object> parseList(@Nullable String json) throws JsonParseException;", "doc_comment": "/**\n\t * Parse the specified JSON string into a List.\n\t * @param json the JSON to parse\n\t * @return the parsed JSON as a list\n\t * @throws JsonParseException if the JSON cannot be parsed\n\t */"}, "code_tokens": ["parseList", ";", "List", "(", ")", "throws", "JsonParseException", "<", "Object", ">", "String", "json", "@", "Nullable"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 23, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 5, "n_words": 8, "nloc": 1, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/logging/DelegatingLoggingSystemFactory.java#41-53", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/DelegatingLoggingSystemFactory.java", "language": "Java"}, "method": {"name": "getLoggingSystem", "qualified_name": "org.springframework.boot.logging.DelegatingLoggingSystemFactory#getLoggingSystem", "start_line": 41, "end_line": 53, "signature": "getLoggingSystem(ClassLoader classLoader)", "original_code": "@Override\n\tpublic @Nullable LoggingSystem getLoggingSystem(ClassLoader classLoader) {\n\t\tList<LoggingSystemFactory> delegates = (this.delegates != null) ? this.delegates.apply(classLoader) : null;\n\t\tif (delegates != null) {\n\t\t\tfor (LoggingSystemFactory delegate : delegates) {\n\t\t\t\tLoggingSystem loggingSystem = delegate.getLoggingSystem(classLoader);\n\t\t\t\tif (loggingSystem != null) {\n\t\t\t\t\treturn loggingSystem;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}", "doc_comment": ""}, "code_tokens": ["LoggingSystem", "getLoggingSystem", "public", "(", ")", "{", "}", "@", "Override", "@", "Nullable", "ClassLoader", "classLoader", ";", "if", "return", "null", ";", "List", "delegates", "=", "(", ")", "{", "}", "<", "LoggingSystemFactory", ">", "?", ":", "null", "delegates", "!=", "null", "for", "(", "LoggingSystemFactory", "delegate", ":", "delegates", ")", "(", ")", ".", "apply", "{", "}", "!=", "null", "this", ".", "delegates", "(", "classLoader", ")", "LoggingSystem", ";", "if", "this", ".", "delegates", "loggingSystem", "=", "(", ")", "{", "}", "delegate", ".", "getLoggingSystem", "loggingSystem", "!=", "null", "return", "loggingSystem", ";", "(", "classLoader", ")"], "metrics": {"cyclomatic_complexity": 4, "n_ast_nodes": 114, "ast_depth": 12, "n_identifiers": 8, "vocab_size": 31, "n_whitespaces": 77, "n_words": 37, "nloc": 13, "token_counts": 79}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/ColorConverter.java#86-94", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/ColorConverter.java", "language": "Java"}, "method": {"name": "handlesThrowable", "qualified_name": "org.springframework.boot.logging.log4j2.ColorConverter#handlesThrowable", "start_line": 86, "end_line": 94, "signature": "handlesThrowable()", "original_code": "@Override\n\tpublic boolean handlesThrowable() {\n\t\tfor (PatternFormatter formatter : this.formatters) {\n\t\t\tif (formatter.handlesThrowable()) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn super.handlesThrowable();\n\t}", "doc_comment": ""}, "code_tokens": ["boolean", "handlesThrowable", "public", "(", ")", "{", "}", "@", "Override", "for", "(", "PatternFormatter", "formatter", ":", ")", "return", ";", "this", ".", "formatters", "{", "}", "super", ".", "handlesThrowable", "if", "(", ")", "(", ")", "{", "}", "formatter", ".", "handlesThrowable", "return", "true", ";", "(", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 58, "ast_depth": 10, "n_identifiers": 4, "vocab_size": 21, "n_whitespaces": 38, "n_words": 17, "nloc": 9, "token_counts": 40}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/ColorConverter.java#96-111", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/ColorConverter.java", "language": "Java"}, "method": {"name": "format", "qualified_name": "org.springframework.boot.logging.log4j2.ColorConverter#format", "start_line": 96, "end_line": 111, "signature": "format(LogEvent event, StringBuilder toAppendTo)", "original_code": "@Override\n\tpublic void format(LogEvent event, StringBuilder toAppendTo) {\n\t\tStringBuilder buf = new StringBuilder();\n\t\tfor (PatternFormatter formatter : this.formatters) {\n\t\t\tformatter.format(event, buf);\n\t\t}\n\t\tif (!buf.isEmpty()) {\n\t\t\tAnsiElement element = this.styling;\n\t\t\tif (element == null) {\n\t\t\t\t// Assume highlighting\n\t\t\t\telement = LEVELS.get(event.getLevel().intLevel());\n\t\t\t\telement = (element != null) ? element : AnsiColor.GREEN;\n\t\t\t}\n\t\t\tappendAnsiString(toAppendTo, buf.toString(), element);\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "format", "public", "(", ",", ")", "{", "}", "@", "Override", "LogEvent", "event", "StringBuilder", "toAppendTo", "StringBuilder", ";", "for", "(", "PatternFormatter", "formatter", ":", ")", "if", "buf", "=", "this", ".", "formatters", "{", "}", "(", ")", "{", "}", "new", "StringBuilder", ";", "!", "AnsiElement", ";", "if", ";", "(", ")", "formatter", ".", "format", "buf", ".", "isEmpty", "element", "=", "(", ")", "{", "// Assume highlighting", "}", "appendAnsiString", "(", "event", ",", "buf", ")", "(", ")", "this", ".", "styling", "element", "==", "null", ";", ";", "(", "toAppendTo", ",", ",", "element", ")", "element", "=", "element", "=", "buf", ".", "toString", "LEVELS", ".", "get", "?", "element", ":", "(", ")", "(", ")", "(", ")", "AnsiColor", ".", "GREEN", ".", "intLevel", "element", "!=", "null", "event", ".", "getLevel", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 4, "n_ast_nodes": 163, "ast_depth": 15, "n_identifiers": 18, "vocab_size": 44, "n_whitespaces": 93, "n_words": 50, "nloc": 16, "token_counts": 113}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/ColorConverter.java#113-115", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/ColorConverter.java", "language": "Java"}, "method": {"name": "appendAnsiString", "qualified_name": "org.springframework.boot.logging.log4j2.ColorConverter#appendAnsiString", "start_line": 113, "end_line": 115, "signature": "appendAnsiString(StringBuilder toAppendTo, String in, AnsiElement element)", "original_code": "protected void appendAnsiString(StringBuilder toAppendTo, String in, AnsiElement element) {\n\t\ttoAppendTo.append(AnsiOutput.toString(element, in));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "appendAnsiString", "protected", "(", ",", ",", ")", "{", "}", "StringBuilder", "toAppendTo", "String", "in", "AnsiElement", "element", ";", "toAppendTo", ".", "append", "(", ")", "AnsiOutput", ".", "toString", "(", "element", ",", "in", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 42, "ast_depth": 9, "n_identifiers": 7, "vocab_size": 19, "n_whitespaces": 14, "n_words": 15, "nloc": 3, "token_counts": 29}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/ColorConverter.java#123-136", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/ColorConverter.java", "language": "Java"}, "method": {"name": "newInstance", "qualified_name": "org.springframework.boot.logging.log4j2.ColorConverter#newInstance", "start_line": 123, "end_line": 136, "signature": "newInstance(@Nullable Configuration config, @Nullable String[] options)", "original_code": "public static @Nullable ColorConverter newInstance(@Nullable Configuration config, @Nullable String[] options) {\n\t\tif (options.length < 1) {\n\t\t\tLOGGER.error(\"Incorrect number of options on style. Expected at least 1, received {}\", options.length);\n\t\t\treturn null;\n\t\t}\n\t\tif (options[0] == null) {\n\t\t\tLOGGER.error(\"No pattern supplied on style\");\n\t\t\treturn null;\n\t\t}\n\t\tPatternParser parser = PatternLayout.createPatternParser(config);\n\t\tList<PatternFormatter> formatters = parser.parse(options[0]);\n\t\tAnsiElement element = (options.length != 1) ? ELEMENTS.get(options[1]) : null;\n\t\treturn new ColorConverter(formatters, element);\n\t}", "doc_comment": "/**\n\t * Creates a new instance of the class. Required by Log4J2.\n\t * @param config the configuration\n\t * @param options the options\n\t * @return a new instance, or {@code null} if the options are invalid\n\t */"}, "code_tokens": ["ColorConverter", "newInstance", "public", "static", "(", ",", ")", "{", "}", "@", "Nullable", "Configuration", "config", "options", "if", "if", "PatternParser", ";", ";", "AnsiElement", ";", "return", ";", "String", "(", ")", "{", "}", "(", ")", "{", "}", "parser", "=", "List", "formatters", "=", "element", "=", "new", "ColorConverter", "@", "Nullable", "@", "Nullable", "[", "]", "<", "1", ";", "return", "null", ";", "==", "null", ";", "return", "null", ";", "PatternLayout", ".", "createPatternParser", "<", "PatternFormatter", ">", "parser", ".", "parse", "?", ":", "null", "(", "formatters", ",", "element", ")", "options", ".", "length", "LOGGER", ".", "error", "options", "[", "0", "]", "LOGGER", ".", "error", "(", "config", ")", "(", ")", "(", ")", "ELEMENTS", ".", "get", "(", ",", ")", "(", ")", "options", "[", "0", "]", "!=", "1", "(", ")", "\"", "Incorrect number of options on style. Expected at least 1, received {}", "\"", "options", ".", "length", "\"", "No pattern supplied on style", "\"", "options", ".", "length", "options", "[", "1", "]"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 186, "ast_depth": 10, "n_identifiers": 15, "vocab_size": 50, "n_whitespaces": 96, "n_words": 72, "nloc": 14, "token_counts": 128}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/EnclosedInSquareBracketsConverter.java#50-62", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/EnclosedInSquareBracketsConverter.java", "language": "Java"}, "method": {"name": "format", "qualified_name": "org.springframework.boot.logging.log4j2.EnclosedInSquareBracketsConverter#format", "start_line": 50, "end_line": 62, "signature": "format(LogEvent event, StringBuilder toAppendTo)", "original_code": "@Override\n\tpublic void format(LogEvent event, StringBuilder toAppendTo) {\n\t\tStringBuilder buf = new StringBuilder();\n\t\tfor (PatternFormatter formatter : this.formatters) {\n\t\t\tformatter.format(event, buf);\n\t\t}\n\t\tif (buf.isEmpty()) {\n\t\t\treturn;\n\t\t}\n\t\ttoAppendTo.append(\"[\");\n\t\ttoAppendTo.append(buf);\n\t\ttoAppendTo.append(\"] \");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "format", "public", "(", ",", ")", "{", "}", "@", "Override", "LogEvent", "event", "StringBuilder", "toAppendTo", "StringBuilder", ";", "for", "(", "PatternFormatter", "formatter", ":", ")", "if", ";", ";", ";", "buf", "=", "this", ".", "formatters", "{", "}", "(", ")", "{", "}", "toAppendTo", ".", "append", "toAppendTo", ".", "append", "toAppendTo", ".", "append", "new", "StringBuilder", ";", "buf", ".", "isEmpty", "return", ";", "(", ")", "(", "buf", ")", "(", ")", "(", ")", "formatter", ".", "format", "(", ")", "\"", "[", "\"", "\"", "] ", "\"", "(", "event", ",", "buf", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 114, "ast_depth": 9, "n_identifiers": 9, "vocab_size": 32, "n_whitespaces": 55, "n_words": 32, "nloc": 13, "token_counts": 79}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/EnclosedInSquareBracketsConverter.java#70-79", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/EnclosedInSquareBracketsConverter.java", "language": "Java"}, "method": {"name": "newInstance", "qualified_name": "org.springframework.boot.logging.log4j2.EnclosedInSquareBracketsConverter#newInstance", "start_line": 70, "end_line": 79, "signature": "newInstance(@Nullable Configuration config,\n\t\t\tString[] options)", "original_code": "public static @Nullable EnclosedInSquareBracketsConverter newInstance(@Nullable Configuration config,\n\t\t\tString[] options) {\n\t\tif (options.length < 1) {\n\t\t\tLOGGER.error(\"Incorrect number of options on style. Expected at least 1, received {}\", options.length);\n\t\t\treturn null;\n\t\t}\n\t\tPatternParser parser = PatternLayout.createPatternParser(config);\n\t\tList<PatternFormatter> formatters = parser.parse(options[0]);\n\t\treturn new EnclosedInSquareBracketsConverter(formatters);\n\t}", "doc_comment": "/**\n\t * Creates a new instance of the class. Required by Log4J2.\n\t * @param config the configuration\n\t * @param options the options\n\t * @return a new instance, or {@code null} if the options are invalid\n\t */"}, "code_tokens": ["EnclosedInSquareBracketsConverter", "newInstance", "public", "static", "(", ",", ")", "{", "}", "@", "Nullable", "Configuration", "config", "options", "if", "PatternParser", ";", ";", "return", ";", "String", "(", ")", "{", "}", "parser", "=", "List", "formatters", "=", "new", "EnclosedInSquareBracketsConverter", "@", "Nullable", "[", "]", "<", "1", ";", "return", "null", ";", "PatternLayout", ".", "createPatternParser", "<", "PatternFormatter", ">", "parser", ".", "parse", "(", "formatters", ")", "options", ".", "length", "LOGGER", ".", "error", "(", "config", ")", "(", ")", "(", ",", ")", "options", "[", "0", "]", "\"", "Incorrect number of options on style. Expected at least 1, received {}", "\"", "options", ".", "length"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 115, "ast_depth": 10, "n_identifiers": 12, "vocab_size": 41, "n_whitespaces": 62, "n_words": 47, "nloc": 10, "token_counts": 78}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/logging/logback/EnclosedInSquareBracketsConverter.java#34-38", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/logback/EnclosedInSquareBracketsConverter.java", "language": "Java"}, "method": {"name": "transform", "qualified_name": "org.springframework.boot.logging.logback.EnclosedInSquareBracketsConverter#transform", "start_line": 34, "end_line": 38, "signature": "transform(ILoggingEvent event, @Nullable String in)", "original_code": "@Override\n\tprotected String transform(ILoggingEvent event, @Nullable String in) {\n\t\tin = (!StringUtils.hasLength(in)) ? resolveFromFirstOption(event) : in;\n\t\treturn (!StringUtils.hasLength(in)) ? \"\" : \"[%s] \".formatted(in);\n\t}", "doc_comment": ""}, "code_tokens": ["String", "transform", "protected", "(", ",", ")", "{", "}", "@", "Override", "ILoggingEvent", "event", "String", "in", ";", "return", ";", "in", "=", "?", ":", "@", "Nullable", "?", ":", "in", "(", ")", "\"", "\"", ".", "formatted", "(", ")", "resolveFromFirstOption", "!", "\"", "[%s] ", "\"", "(", "in", ")", "!", "(", "event", ")", "StringUtils", ".", "hasLength", "StringUtils", ".", "hasLength", "(", "in", ")", "(", "in", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 87, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 27, "n_whitespaces": 29, "n_words": 23, "nloc": 5, "token_counts": 58}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/logging/logback/EnclosedInSquareBracketsConverter.java#40-47", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/logback/EnclosedInSquareBracketsConverter.java", "language": "Java"}, "method": {"name": "resolveFromFirstOption", "qualified_name": "org.springframework.boot.logging.logback.EnclosedInSquareBracketsConverter#resolveFromFirstOption", "start_line": 40, "end_line": 47, "signature": "resolveFromFirstOption(ILoggingEvent event)", "original_code": "private @Nullable String resolveFromFirstOption(ILoggingEvent event) {\n\t\tString name = getFirstOption();\n\t\tif (name == null) {\n\t\t\treturn null;\n\t\t}\n\t\tString value = event.getLoggerContextVO().getPropertyMap().get(name);\n\t\treturn (value != null) ? value : System.getProperty(name);\n\t}", "doc_comment": ""}, "code_tokens": ["String", "resolveFromFirstOption", "private", "(", ")", "{", "}", "@", "Nullable", "ILoggingEvent", "event", "String", ";", "if", "String", ";", "return", ";", "name", "=", "(", ")", "{", "}", "value", "=", "?", "value", ":", "getFirstOption", "name", "==", "null", "return", "null", ";", ".", "get", "(", ")", "System", ".", "getProperty", "(", ")", ".", "getPropertyMap", "(", "name", ")", "value", "!=", "null", "(", "name", ")", "event", ".", "getLoggerContextVO", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 93, "ast_depth": 10, "n_identifiers": 11, "vocab_size": 29, "n_whitespaces": 44, "n_words": 28, "nloc": 8, "token_counts": 63}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystemProperties.java#76-79", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystemProperties.java", "language": "Java"}, "method": {"name": "getConsole", "qualified_name": "org.springframework.boot.logging.logback.LogbackLoggingSystemProperties#getConsole", "start_line": 76, "end_line": 79, "signature": "getConsole()", "original_code": "@Override\n\tprotected @Nullable Console getConsole() {\n\t\treturn super.getConsole();\n\t}", "doc_comment": ""}, "code_tokens": ["Console", "getConsole", "protected", "(", ")", "{", "}", "@", "Override", "@", "Nullable", "return", ";", "super", ".", "getConsole", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 12, "n_words": 8, "nloc": 4, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystemProperties.java#81-86", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystemProperties.java", "language": "Java"}, "method": {"name": "apply", "qualified_name": "org.springframework.boot.logging.logback.LogbackLoggingSystemProperties#apply", "start_line": 81, "end_line": 86, "signature": "apply(@Nullable LogFile logFile, PropertyResolver resolver)", "original_code": "@Override\n\tprotected void apply(@Nullable LogFile logFile, PropertyResolver resolver) {\n\t\tsuper.apply(logFile, resolver);\n\t\tapplyJBossLoggingProperties();\n\t\tapplyRollingPolicyProperties(resolver);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "apply", "protected", "(", ",", ")", "{", "}", "@", "Override", "LogFile", "logFile", "PropertyResolver", "resolver", ";", ";", ";", "super", ".", "apply", "applyJBossLoggingProperties", "applyRollingPolicyProperties", "@", "Nullable", "(", "logFile", ",", "resolver", ")", "(", ")", "(", "resolver", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 53, "ast_depth": 7, "n_identifiers": 7, "vocab_size": 20, "n_whitespaces": 21, "n_words": 16, "nloc": 6, "token_counts": 34}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystemProperties.java#88-92", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystemProperties.java", "language": "Java"}, "method": {"name": "applyJBossLoggingProperties", "qualified_name": "org.springframework.boot.logging.logback.LogbackLoggingSystemProperties#applyJBossLoggingProperties", "start_line": 88, "end_line": 92, "signature": "applyJBossLoggingProperties()", "original_code": "private void applyJBossLoggingProperties() {\n\t\tif (JBOSS_LOGGING_PRESENT) {\n\t\t\tsetSystemProperty(\"org.jboss.logging.provider\", \"slf4j\");\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "applyJBossLoggingProperties", "private", "(", ")", "{", "}", "if", "(", "JBOSS_LOGGING_PRESENT", ")", "{", "}", ";", "setSystemProperty", "(", ",", ")", "\"", "org.jboss.logging.provider", "\"", "\"", "slf4j", "\""], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 37, "ast_depth": 10, "n_identifiers": 3, "vocab_size": 15, "n_whitespaces": 18, "n_words": 11, "nloc": 5, "token_counts": 24}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystemProperties.java#94-100", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystemProperties.java", "language": "Java"}, "method": {"name": "applyRollingPolicyProperties", "qualified_name": "org.springframework.boot.logging.logback.LogbackLoggingSystemProperties#applyRollingPolicyProperties", "start_line": 94, "end_line": 100, "signature": "applyRollingPolicyProperties(PropertyResolver resolver)", "original_code": "private void applyRollingPolicyProperties(PropertyResolver resolver) {\n\t\tapplyRollingPolicy(RollingPolicySystemProperty.FILE_NAME_PATTERN, resolver);\n\t\tapplyRollingPolicy(RollingPolicySystemProperty.CLEAN_HISTORY_ON_START, resolver);\n\t\tapplyRollingPolicy(RollingPolicySystemProperty.MAX_FILE_SIZE, resolver, DataSize.class);\n\t\tapplyRollingPolicy(RollingPolicySystemProperty.TOTAL_SIZE_CAP, resolver, DataSize.class);\n\t\tapplyRollingPolicy(RollingPolicySystemProperty.MAX_HISTORY, resolver);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "applyRollingPolicyProperties", "private", "(", ")", "{", "}", "PropertyResolver", "resolver", ";", ";", ";", ";", ";", "applyRollingPolicy", "applyRollingPolicy", "applyRollingPolicy", "applyRollingPolicy", "applyRollingPolicy", "(", ",", "resolver", ")", "(", ",", "resolver", ")", "(", ",", "resolver", ",", ")", "(", ",", "resolver", ",", ")", "(", ",", "resolver", ")", "RollingPolicySystemProperty", ".", "FILE_NAME_PATTERN", "RollingPolicySystemProperty", ".", "CLEAN_HISTORY_ON_START", "RollingPolicySystemProperty", ".", "MAX_FILE_SIZE", "DataSize", ".", "class", "RollingPolicySystemProperty", ".", "TOTAL_SIZE_CAP", "DataSize", ".", "class", "RollingPolicySystemProperty", ".", "MAX_HISTORY"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 90, "ast_depth": 8, "n_identifiers": 9, "vocab_size": 21, "n_whitespaces": 28, "n_words": 29, "nloc": 7, "token_counts": 62}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystemProperties.java#102-104", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystemProperties.java", "language": "Java"}, "method": {"name": "applyRollingPolicy", "qualified_name": "org.springframework.boot.logging.logback.LogbackLoggingSystemProperties#applyRollingPolicy", "start_line": 102, "end_line": 104, "signature": "applyRollingPolicy(RollingPolicySystemProperty property, PropertyResolver resolver)", "original_code": "private void applyRollingPolicy(RollingPolicySystemProperty property, PropertyResolver resolver) {\n\t\tapplyRollingPolicy(property, resolver, String.class);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "applyRollingPolicy", "private", "(", ",", ")", "{", "}", "RollingPolicySystemProperty", "property", "PropertyResolver", "resolver", ";", "applyRollingPolicy", "(", "property", ",", "resolver", ",", ")", "String", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 34, "ast_depth": 8, "n_identifiers": 3, "vocab_size": 16, "n_whitespaces": 13, "n_words": 12, "nloc": 3, "token_counts": 23}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystemProperties.java#106-114", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystemProperties.java", "language": "Java"}, "method": {"name": "applyRollingPolicy", "qualified_name": "org.springframework.boot.logging.logback.LogbackLoggingSystemProperties#applyRollingPolicy", "start_line": 106, "end_line": 114, "signature": "applyRollingPolicy(RollingPolicySystemProperty property, PropertyResolver resolver,\n\t\t\tClass<T> type)", "original_code": "private <T> void applyRollingPolicy(RollingPolicySystemProperty property, PropertyResolver resolver,\n\t\t\tClass<T> type) {\n\t\tT value = getProperty(resolver, property.getApplicationPropertyName(), type);\n\t\tvalue = (value != null) ? value : getProperty(resolver, property.getDeprecatedApplicationPropertyName(), type);\n\t\tif (value != null) {\n\t\t\tString stringValue = String.valueOf((value instanceof DataSize dataSize) ? dataSize.toBytes() : value);\n\t\t\tsetSystemProperty(property.getEnvironmentVariableName(), stringValue);\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "applyRollingPolicy", "private", "<", ">", "(", ",", ",", ")", "{", "}", "T", "RollingPolicySystemProperty", "property", "PropertyResolver", "resolver", "type", "T", ";", ";", "if", "Class", "value", "=", "value", "=", "(", ")", "{", "}", "<", "T", ">", "getProperty", "?", "value", ":", "value", "!=", "null", "String", ";", ";", "(", "resolver", ",", ",", "type", ")", "(", ")", "getProperty", "stringValue", "=", "setSystemProperty", "property", ".", "getApplicationPropertyName", "value", "!=", "null", "(", "resolver", ",", ",", "type", ")", "String", ".", "valueOf", "(", ",", "stringValue", ")", "(", ")", "property", ".", "getDeprecatedApplicationPropertyName", "(", ")", "property", ".", "getEnvironmentVariableName", "(", ")", "?", ":", "value", "(", ")", "(", ")", "dataSize", ".", "toBytes", "value", "instanceof", "DataSize", "dataSize", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 147, "ast_depth": 13, "n_identifiers": 15, "vocab_size": 38, "n_whitespaces": 64, "n_words": 45, "nloc": 9, "token_counts": 102}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystemProperties.java#116-128", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystemProperties.java", "language": "Java"}, "method": {"name": "getProperty", "qualified_name": "org.springframework.boot.logging.logback.LogbackLoggingSystemProperties#getProperty", "start_line": 116, "end_line": 128, "signature": "getProperty(PropertyResolver resolver, String key, Class<T> type)", "original_code": "@SuppressWarnings(\"unchecked\")\n\tprivate <T> @Nullable T getProperty(PropertyResolver resolver, String key, Class<T> type) {\n\t\ttry {\n\t\t\treturn resolver.getProperty(key, type);\n\t\t}\n\t\tcatch (ConversionFailedException | ConverterNotFoundException ex) {\n\t\t\tif (type != DataSize.class) {\n\t\t\t\tthrow ex;\n\t\t\t}\n\t\t\tString value = resolver.getProperty(key);\n\t\t\treturn (T) DataSize.ofBytes(FileSize.valueOf(value).getSize());\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["T", "getProperty", "private", "<", ">", "@", "Nullable", "(", ",", ",", ")", "{", "}", "@", "SuppressWarnings", "T", "PropertyResolver", "resolver", "String", "key", "type", "try", "(", ")", "Class", "{", "}", "catch", "(", ")", "\"", "unchecked", "\"", "<", "T", ">", "return", ";", "ex", "{", "}", "resolver", ".", "getProperty", "ConversionFailedException", "|", "ConverterNotFoundException", "if", "String", ";", "return", ";", "(", "key", ",", "type", ")", "(", ")", "{", "}", "value", "=", "(", "T", ")", "type", "!=", "throw", "ex", ";", "resolver", ".", "getProperty", "DataSize", ".", "ofBytes", "DataSize", ".", "class", "(", "key", ")", "(", ")", ".", "getSize", "FileSize", ".", "valueOf", "(", ")", "(", "value", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 138, "ast_depth": 14, "n_identifiers": 13, "vocab_size": 41, "n_whitespaces": 69, "n_words": 43, "nloc": 13, "token_counts": 95}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/logging/structured/StructuredLoggingJsonProperties.java#74-77", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/structured/StructuredLoggingJsonProperties.java", "language": "Java"}, "method": {"name": "customizers", "qualified_name": "org.springframework.boot.logging.structured.StructuredLoggingJsonProperties#customizers", "start_line": 74, "end_line": 77, "signature": "customizers(Instantiator<?> instantiator)", "original_code": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n\tCollection<StructuredLoggingJsonMembersCustomizer<Object>> customizers(Instantiator<?> instantiator) {\n\t\treturn (List) customizer().stream().map(instantiator::instantiateType).toList();\n\t}", "doc_comment": ""}, "code_tokens": ["customizers", "Collection", "(", ")", "{", "}", "@", "SuppressWarnings", "<", ">", "instantiator", "return", ";", "(", ")", "StructuredLoggingJsonMembersCustomizer", "Instantiator", "(", "List", ")", "{", ",", "}", "<", "Object", ">", "<", ">", ".", "toList", "\"", "unchecked", "\"", "\"", "rawtypes", "\"", "?", ".", "map", "(", ")", ".", "stream", "(", ")", "customizer", "(", ")", "instantiator", "::", "instantiateType", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 82, "ast_depth": 11, "n_identifiers": 8, "vocab_size": 29, "n_whitespaces": 15, "n_words": 17, "nloc": 4, "token_counts": 53}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/logging/structured/StructuredLoggingJsonProperties.java#79-83", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/structured/StructuredLoggingJsonProperties.java", "language": "Java"}, "method": {"name": "get", "qualified_name": "org.springframework.boot.logging.structured.StructuredLoggingJsonProperties#get", "start_line": 79, "end_line": 83, "signature": "get(Environment environment)", "original_code": "static @Nullable StructuredLoggingJsonProperties get(Environment environment) {\n\t\treturn Binder.get(environment)\n\t\t\t.bind(\"logging.structured.json\", StructuredLoggingJsonProperties.class)\n\t\t\t.orElse(null);\n\t}", "doc_comment": ""}, "code_tokens": ["StructuredLoggingJsonProperties", "get", "static", "(", ")", "{", "}", "@", "Nullable", "Environment", "environment", "return", ";", ".", "orElse", ".", "bind", "(", "null", ")", "Binder", ".", "get", "(", ",", ")", "(", "environment", ")", "\"", "logging.structured.json", "\"", "StructuredLoggingJsonProperties", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 51, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 22, "n_whitespaces": 20, "n_words": 18, "nloc": 5, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/logging/structured/StructuredLoggingJsonProperties.java#105-118", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/structured/StructuredLoggingJsonProperties.java", "language": "Java"}, "method": {"name": "createPrinter", "qualified_name": "org.springframework.boot.logging.structured.StructuredLoggingJsonProperties#createPrinter", "start_line": 105, "end_line": 118, "signature": "createPrinter()", "original_code": "@Nullable StackTracePrinter createPrinter() {\n\t\t\tString name = sanitizePrinter();\n\t\t\tif (\"loggingsystem\".equals(name) || (name.isEmpty() && !hasAnyOtherProperty())) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tStandardStackTracePrinter standardPrinter = createStandardPrinter();\n\t\t\tif (\"standard\".equals(name) || name.isEmpty()) {\n\t\t\t\treturn standardPrinter;\n\t\t\t}\n\t\t\tAssert.state(printer() != null, \"'printer' must not be null\");\n\t\t\treturn (StackTracePrinter) new Instantiator<>(StackTracePrinter.class,\n\t\t\t\t\t(parameters) -> parameters.add(StandardStackTracePrinter.class, standardPrinter))\n\t\t\t\t.instantiate(printer());\n\t\t}", "doc_comment": ""}, "code_tokens": ["StackTracePrinter", "createPrinter", "(", ")", "{", "}", "@", "Nullable", "String", ";", "if", "StandardStackTracePrinter", ";", "if", ";", "return", ";", "name", "=", "(", ")", "{", "}", "standardPrinter", "=", "(", ")", "{", "}", "Assert", ".", "state", "(", "StackTracePrinter", ")", "sanitizePrinter", "||", "return", "null", ";", "createStandardPrinter", "||", "return", "standardPrinter", ";", "(", ",", ")", ".", "instantiate", "(", ")", ".", "equals", "(", ")", "(", ")", ".", "equals", "name", ".", "isEmpty", "!=", "null", "\"", "'printer' must not be null", "\"", "new", "(", ")", "\"", "loggingsystem", "\"", "(", "name", ")", "&&", "\"", "standard", "\"", "(", "name", ")", "(", ")", "printer", "Instantiator", "(", ",", ")", "printer", "name", ".", "isEmpty", "!", "(", ")", "<", ">", "StackTracePrinter", ".", "class", "->", "(", ")", "(", ")", "hasAnyOtherProperty", "(", "parameters", ")", "parameters", ".", "add", "(", ")", "(", ",", "standardPrinter", ")", "StandardStackTracePrinter", ".", "class"], "metrics": {"cyclomatic_complexity": 6, "n_ast_nodes": 186, "ast_depth": 13, "n_identifiers": 15, "vocab_size": 44, "n_whitespaces": 90, "n_words": 49, "nloc": 14, "token_counts": 124}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/logging/structured/StructuredLoggingJsonProperties.java#120-126", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/structured/StructuredLoggingJsonProperties.java", "language": "Java"}, "method": {"name": "hasCustomPrinter", "qualified_name": "org.springframework.boot.logging.structured.StructuredLoggingJsonProperties#hasCustomPrinter", "start_line": 120, "end_line": 126, "signature": "hasCustomPrinter()", "original_code": "boolean hasCustomPrinter() {\n\t\t\tString name = sanitizePrinter();\n\t\t\tif (name.isEmpty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn !(\"loggingsystem\".equals(name) || \"standard\".equals(name));\n\t\t}", "doc_comment": ""}, "code_tokens": ["boolean", "hasCustomPrinter", "(", ")", "{", "}", "String", ";", "if", "return", ";", "name", "=", "(", ")", "{", "}", "!", "sanitizePrinter", "name", ".", "isEmpty", "return", "false", ";", "(", ")", "(", ")", "(", ")", "||", ".", "equals", ".", "equals", "\"", "loggingsystem", "\"", "(", "name", ")", "\"", "standard", "\"", "(", "name", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 72, "ast_depth": 10, "n_identifiers": 5, "vocab_size": 22, "n_whitespaces": 35, "n_words": 17, "nloc": 7, "token_counts": 48}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/logging/structured/StructuredLoggingJsonProperties.java#128-130", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/structured/StructuredLoggingJsonProperties.java", "language": "Java"}, "method": {"name": "sanitizePrinter", "qualified_name": "org.springframework.boot.logging.structured.StructuredLoggingJsonProperties#sanitizePrinter", "start_line": 128, "end_line": 130, "signature": "sanitizePrinter()", "original_code": "private String sanitizePrinter() {\n\t\t\treturn Objects.toString(printer(), \"\").toLowerCase(Locale.ROOT).replace(\"-\", \"\");\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "sanitizePrinter", "private", "(", ")", "{", "}", "return", ";", ".", "replace", ".", "toLowerCase", "(", ",", ")", "Objects", ".", "toString", "(", ")", "\"", "-", "\"", "\"", "\"", "(", ",", ")", "Locale", ".", "ROOT", "printer", "\"", "\"", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 55, "ast_depth": 11, "n_identifiers": 8, "vocab_size": 20, "n_whitespaces": 13, "n_words": 11, "nloc": 3, "token_counts": 37}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/logging/structured/StructuredLoggingJsonProperties.java#132-135", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/structured/StructuredLoggingJsonProperties.java", "language": "Java"}, "method": {"name": "hasAnyOtherProperty", "qualified_name": "org.springframework.boot.logging.structured.StructuredLoggingJsonProperties#hasAnyOtherProperty", "start_line": 132, "end_line": 135, "signature": "hasAnyOtherProperty()", "original_code": "private boolean hasAnyOtherProperty() {\n\t\t\treturn Stream.of(root(), maxLength(), maxThrowableDepth(), includeCommonFrames(), includeHashes())\n\t\t\t\t.anyMatch(Objects::nonNull);\n\t\t}", "doc_comment": ""}, "code_tokens": ["boolean", "hasAnyOtherProperty", "private", "(", ")", "{", "}", "return", ";", ".", "anyMatch", "Stream", ".", "of", "(", ")", "(", ",", ",", ",", ",", ")", "Objects", "::", "nonNull", "root", "maxLength", "maxThrowableDepth", "includeCommonFrames", "includeHashes", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 61, "ast_depth": 10, "n_identifiers": 11, "vocab_size": 22, "n_whitespaces": 20, "n_words": 14, "nloc": 4, "token_counts": 40}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/logging/structured/StructuredLoggingJsonProperties.java#137-148", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/structured/StructuredLoggingJsonProperties.java", "language": "Java"}, "method": {"name": "createStandardPrinter", "qualified_name": "org.springframework.boot.logging.structured.StructuredLoggingJsonProperties#createStandardPrinter", "start_line": 137, "end_line": 148, "signature": "createStandardPrinter()", "original_code": "private StandardStackTracePrinter createStandardPrinter() {\n\t\t\tStandardStackTracePrinter printer = (root() == Root.FIRST) ? StandardStackTracePrinter.rootFirst()\n\t\t\t\t\t: StandardStackTracePrinter.rootLast();\n\t\t\tPropertyMapper map = PropertyMapper.get();\n\t\t\tprinter = map.from(this::maxLength).to(printer, StandardStackTracePrinter::withMaximumLength);\n\t\t\tprinter = map.from(this::maxThrowableDepth)\n\t\t\t\t.to(printer, StandardStackTracePrinter::withMaximumThrowableDepth);\n\t\t\tprinter = map.from(this::includeCommonFrames)\n\t\t\t\t.to(printer, apply(StandardStackTracePrinter::withCommonFrames));\n\t\t\tprinter = map.from(this::includeHashes).to(printer, apply(StandardStackTracePrinter::withHashes));\n\t\t\treturn printer;\n\t\t}", "doc_comment": ""}, "code_tokens": ["StandardStackTracePrinter", "createStandardPrinter", "private", "(", ")", "{", "}", "StandardStackTracePrinter", ";", "PropertyMapper", ";", ";", ";", ";", ";", "return", "printer", ";", "printer", "=", "map", "=", "printer", "=", "printer", "=", "printer", "=", "printer", "=", "?", ":", "PropertyMapper", ".", "get", ".", "to", ".", "to", ".", "to", ".", "to", "(", ")", "StandardStackTracePrinter", ".", "rootFirst", "StandardStackTracePrinter", ".", "rootLast", "(", ")", "map", ".", "from", "(", "printer", ",", ")", "map", ".", "from", "(", "printer", ",", ")", "map", ".", "from", "(", "printer", ",", ")", "map", ".", "from", "(", "printer", ",", ")", "==", "(", ")", "(", ")", "(", ")", "StandardStackTracePrinter", "::", "withMaximumLength", "(", ")", "StandardStackTracePrinter", "::", "withMaximumThrowableDepth", "(", ")", "apply", "(", ")", "apply", "root", "Root", ".", "FIRST", "this", "::", "maxLength", "this", "::", "maxThrowableDepth", "this", "::", "includeCommonFrames", "(", ")", "this", "::", "includeHashes", "(", ")", "(", ")", "StandardStackTracePrinter", "::", "withCommonFrames", "StandardStackTracePrinter", "::", "withHashes"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 188, "ast_depth": 11, "n_identifiers": 22, "vocab_size": 37, "n_whitespaces": 74, "n_words": 56, "nloc": 12, "token_counts": 130}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/logging/structured/StructuredLoggingJsonProperties.java#150-153", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/structured/StructuredLoggingJsonProperties.java", "language": "Java"}, "method": {"name": "apply", "qualified_name": "org.springframework.boot.logging.structured.StructuredLoggingJsonProperties#apply", "start_line": 150, "end_line": 153, "signature": "apply(\n\t\t\t\tUnaryOperator<StandardStackTracePrinter> action)", "original_code": "private BiFunction<StandardStackTracePrinter, Boolean, StandardStackTracePrinter> apply(\n\t\t\t\tUnaryOperator<StandardStackTracePrinter> action) {\n\t\t\treturn (printer, value) -> (!value) ? printer : action.apply(printer);\n\t\t}", "doc_comment": ""}, "code_tokens": ["apply", "private", "BiFunction", "(", ")", "{", "}", "<", "StandardStackTracePrinter", ",", "Boolean", ",", "StandardStackTracePrinter", ">", "action", "return", ";", "UnaryOperator", "->", "<", "StandardStackTracePrinter", ">", "(", "printer", ",", "value", ")", "?", "printer", ":", "(", ")", "action", ".", "apply", "!", "value", "(", "printer", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 58, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 23, "n_whitespaces": 26, "n_words": 17, "nloc": 4, "token_counts": 40}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/logging/structured/StructuredLoggingJsonProperties.java#180-184", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/structured/StructuredLoggingJsonProperties.java", "language": "Java"}, "method": {"name": "registerHints", "qualified_name": "org.springframework.boot.logging.structured.StructuredLoggingJsonProperties#registerHints", "start_line": 180, "end_line": 184, "signature": "registerHints(RuntimeHints hints, @Nullable ClassLoader classLoader)", "original_code": "@Override\n\t\tpublic void registerHints(RuntimeHints hints, @Nullable ClassLoader classLoader) {\n\t\t\tBindableRuntimeHintsRegistrar.forTypes(StructuredLoggingJsonProperties.class)\n\t\t\t\t.registerHints(hints, classLoader);\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "registerHints", "public", "(", ",", ")", "{", "}", "@", "Override", "RuntimeHints", "hints", "ClassLoader", "classLoader", ";", ".", "registerHints", "@", "Nullable", "BindableRuntimeHintsRegistrar", ".", "forTypes", "(", "hints", ",", "classLoader", ")", "(", ")", "StructuredLoggingJsonProperties", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 48, "ast_depth": 9, "n_identifiers": 7, "vocab_size": 21, "n_whitespaces": 23, "n_words": 16, "nloc": 5, "token_counts": 32}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/origin/OriginLookup.java#38-38", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/origin/OriginLookup.java", "language": "Java"}, "method": {"name": "getOrigin", "qualified_name": "org.springframework.boot.origin.OriginLookup#getOrigin", "start_line": 38, "end_line": 38, "signature": "getOrigin(K key)", "original_code": "@Nullable Origin getOrigin(K key);", "doc_comment": "/**\n\t * Return the origin of the given key or {@code null} if the origin cannot be\n\t * determined.\n\t * @param key the key to lookup\n\t * @return the origin of the key or {@code null}\n\t */"}, "code_tokens": ["Origin", "getOrigin", ";", "(", ")", "@", "Nullable", "K", "key"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 15, "ast_depth": 5, "n_identifiers": 3, "vocab_size": 9, "n_whitespaces": 3, "n_words": 5, "nloc": 1, "token_counts": 9}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/origin/OriginLookup.java#49-60", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/origin/OriginLookup.java", "language": "Java"}, "method": {"name": "getOrigin", "qualified_name": "org.springframework.boot.origin.OriginLookup#getOrigin", "start_line": 49, "end_line": 60, "signature": "getOrigin(@Nullable Object source, K key)", "original_code": "@SuppressWarnings(\"unchecked\")\n\tstatic <K> @Nullable Origin getOrigin(@Nullable Object source, K key) {\n\t\tif (!(source instanceof OriginLookup)) {\n\t\t\treturn null;\n\t\t}\n\t\ttry {\n\t\t\treturn ((OriginLookup<K>) source).getOrigin(key);\n\t\t}\n\t\tcatch (Throwable ex) {\n\t\t\treturn null;\n\t\t}\n\t}", "doc_comment": "/**\n\t * Attempt to look up the origin from the given source. If the source is not a\n\t * {@link OriginLookup} or if an exception occurs during lookup then {@code null} is\n\t * returned.\n\t * @param source the source object\n\t * @param key the key to lookup\n\t * @param <K> the key type\n\t * @return an {@link Origin} or {@code null}\n\t */"}, "code_tokens": ["Origin", "getOrigin", "static", "<", ">", "@", "Nullable", "(", ",", ")", "{", "}", "@", "SuppressWarnings", "K", "Object", "source", "K", "key", "if", "try", "(", ")", "(", ")", "{", "}", "{", "}", "catch", "(", ")", "\"", "unchecked", "\"", "@", "Nullable", "!", "return", "null", ";", "return", ";", "ex", "{", "}", "(", ")", ".", "getOrigin", "Throwable", "return", "null", ";", "source", "instanceof", "OriginLookup", "(", ")", "(", "key", ")", "(", ")", "source", "OriginLookup", "<", "K", ">"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 105, "ast_depth": 12, "n_identifiers": 6, "vocab_size": 31, "n_whitespaces": 55, "n_words": 30, "nloc": 12, "token_counts": 69}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/ssl/jks/JksSslStoreDetails.java#46-48", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/ssl/jks/JksSslStoreDetails.java", "language": "Java"}, "method": {"name": "withPassword", "qualified_name": "org.springframework.boot.ssl.jks.JksSslStoreDetails#withPassword", "start_line": 46, "end_line": 48, "signature": "withPassword(String password)", "original_code": "public JksSslStoreDetails withPassword(String password) {\n\t\treturn new JksSslStoreDetails(this.type, this.provider, this.location, password);\n\t}", "doc_comment": "/**\n\t * Return a new {@link JksSslStoreDetails} instance with a new password.\n\t * @param password the new password\n\t * @return a new {@link JksSslStoreDetails} instance\n\t */"}, "code_tokens": ["JksSslStoreDetails", "withPassword", "public", "(", ")", "{", "}", "String", "password", "return", ";", "new", "JksSslStoreDetails", "(", ",", ",", ",", "password", ")", "this", ".", "type", "this", ".", "provider", "this", ".", "location"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 40, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 18, "n_whitespaces": 14, "n_words": 15, "nloc": 3, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/ssl/jks/JksSslStoreDetails.java#50-52", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/ssl/jks/JksSslStoreDetails.java", "language": "Java"}, "method": {"name": "isEmpty", "qualified_name": "org.springframework.boot.ssl.jks.JksSslStoreDetails#isEmpty", "start_line": 50, "end_line": 52, "signature": "isEmpty()", "original_code": "boolean isEmpty() {\n\t\treturn isEmpty(this.type) && isEmpty(this.provider) && isEmpty(this.location);\n\t}", "doc_comment": ""}, "code_tokens": ["boolean", "isEmpty", "(", ")", "{", "}", "return", ";", "&&", "&&", "isEmpty", "isEmpty", "isEmpty", "(", ")", "(", ")", "(", ")", "this", ".", "location", "this", ".", "type", "this", ".", "provider"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 44, "ast_depth": 10, "n_identifiers": 4, "vocab_size": 14, "n_whitespaces": 12, "n_words": 12, "nloc": 3, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/ssl/jks/JksSslStoreDetails.java#54-56", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/ssl/jks/JksSslStoreDetails.java", "language": "Java"}, "method": {"name": "isEmpty", "qualified_name": "org.springframework.boot.ssl.jks.JksSslStoreDetails#isEmpty", "start_line": 54, "end_line": 56, "signature": "isEmpty(@Nullable String value)", "original_code": "private boolean isEmpty(@Nullable String value) {\n\t\treturn !StringUtils.hasText(value);\n\t}", "doc_comment": ""}, "code_tokens": ["boolean", "isEmpty", "private", "(", ")", "{", "}", "String", "value", "return", ";", "!", "@", "Nullable", "StringUtils", ".", "hasText", "(", "value", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 32, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 17, "n_whitespaces": 11, "n_words": 10, "nloc": 3, "token_counts": 20}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/ssl/jks/JksSslStoreDetails.java#64-66", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/ssl/jks/JksSslStoreDetails.java", "language": "Java"}, "method": {"name": "forLocation", "qualified_name": "org.springframework.boot.ssl.jks.JksSslStoreDetails#forLocation", "start_line": 64, "end_line": 66, "signature": "forLocation(@Nullable String location)", "original_code": "public static JksSslStoreDetails forLocation(@Nullable String location) {\n\t\treturn new JksSslStoreDetails(null, null, location, null);\n\t}", "doc_comment": "/**\n\t * Factory method to create a new {@link JksSslStoreDetails} instance for the given\n\t * location.\n\t * @param location the location\n\t * @return a new {@link JksSslStoreDetails} instance.\n\t */"}, "code_tokens": ["JksSslStoreDetails", "forLocation", "public", "static", "(", ")", "{", "}", "String", "location", "return", ";", "new", "JksSslStoreDetails", "@", "Nullable", "(", "null", ",", "null", ",", "location", ",", "null", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 36, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 17, "n_whitespaces": 16, "n_words": 14, "nloc": 3, "token_counts": 25}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/ssl/pem/PemSslStore.java#45-45", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/ssl/pem/PemSslStore.java", "language": "Java"}, "method": {"name": "type", "qualified_name": "org.springframework.boot.ssl.pem.PemSslStore#type", "start_line": 45, "end_line": 45, "signature": "type()", "original_code": "@Nullable String type();", "doc_comment": "/**\n\t * The key store type, for example {@code JKS} or {@code PKCS11}. A {@code null} value\n\t * will use {@link KeyStore#getDefaultType()}).\n\t * @return the key store type\n\t */"}, "code_tokens": ["String", "type", ";", "(", ")", "@", "Nullable"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 12, "ast_depth": 5, "n_identifiers": 2, "vocab_size": 7, "n_whitespaces": 2, "n_words": 3, "nloc": 1, "token_counts": 7}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/ssl/pem/PemSslStore.java#51-51", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/ssl/pem/PemSslStore.java", "language": "Java"}, "method": {"name": "alias", "qualified_name": "org.springframework.boot.ssl.pem.PemSslStore#alias", "start_line": 51, "end_line": 51, "signature": "alias()", "original_code": "@Nullable String alias();", "doc_comment": "/**\n\t * The alias used when setting entries in the {@link KeyStore}.\n\t * @return the alias\n\t */"}, "code_tokens": ["String", "alias", ";", "(", ")", "@", "Nullable"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 12, "ast_depth": 5, "n_identifiers": 2, "vocab_size": 7, "n_whitespaces": 2, "n_words": 3, "nloc": 1, "token_counts": 7}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/ssl/pem/PemSslStore.java#59-59", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/ssl/pem/PemSslStore.java", "language": "Java"}, "method": {"name": "password", "qualified_name": "org.springframework.boot.ssl.pem.PemSslStore#password", "start_line": 59, "end_line": 59, "signature": "password()", "original_code": "@Nullable String password();", "doc_comment": "/**\n\t * The password used when\n\t * {@link KeyStore#setKeyEntry(String, java.security.Key, char[], java.security.cert.Certificate[])\n\t * setting key entries} in the {@link KeyStore}.\n\t * @return the password\n\t */"}, "code_tokens": ["String", "password", ";", "(", ")", "@", "Nullable"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 12, "ast_depth": 5, "n_identifiers": 2, "vocab_size": 7, "n_whitespaces": 2, "n_words": 3, "nloc": 1, "token_counts": 7}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/ssl/pem/PemSslStore.java#67-67", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/ssl/pem/PemSslStore.java", "language": "Java"}, "method": {"name": "certificates", "qualified_name": "org.springframework.boot.ssl.pem.PemSslStore#certificates", "start_line": 67, "end_line": 67, "signature": "certificates()", "original_code": "@Nullable List<X509Certificate> certificates();", "doc_comment": "/**\n\t * The certificates for this store. When a {@link #privateKey() private key} is\n\t * present the returned value is treated as a certificate chain, otherwise it is\n\t * treated a list of certificates that should all be registered.\n\t * @return the X509 certificates\n\t */"}, "code_tokens": ["certificates", ";", "List", "(", ")", "@", "Nullable", "<", "X509Certificate", ">"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 17, "ast_depth": 5, "n_identifiers": 2, "vocab_size": 10, "n_whitespaces": 2, "n_words": 4, "nloc": 1, "token_counts": 10}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/ssl/pem/PemSslStore.java#73-73", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/ssl/pem/PemSslStore.java", "language": "Java"}, "method": {"name": "privateKey", "qualified_name": "org.springframework.boot.ssl.pem.PemSslStore#privateKey", "start_line": 73, "end_line": 73, "signature": "privateKey()", "original_code": "@Nullable PrivateKey privateKey();", "doc_comment": "/**\n\t * The private key for this store or {@code null}.\n\t * @return the private key\n\t */"}, "code_tokens": ["PrivateKey", "privateKey", ";", "(", ")", "@", "Nullable"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 12, "ast_depth": 5, "n_identifiers": 2, "vocab_size": 7, "n_whitespaces": 2, "n_words": 3, "nloc": 1, "token_counts": 7}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/ssl/pem/PemSslStore.java#80-84", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/ssl/pem/PemSslStore.java", "language": "Java"}, "method": {"name": "withAlias", "qualified_name": "org.springframework.boot.ssl.pem.PemSslStore#withAlias", "start_line": 80, "end_line": 84, "signature": "withAlias(@Nullable String alias)", "original_code": "default PemSslStore withAlias(@Nullable String alias) {\n\t\tList<X509Certificate> certificates = certificates();\n\t\tAssert.notNull(certificates, \"'certificates' must not be null\");\n\t\treturn of(type(), alias, password(), certificates, privateKey());\n\t}", "doc_comment": "/**\n\t * Return a new {@link PemSslStore} instance with a new alias.\n\t * @param alias the new alias\n\t * @return a new {@link PemSslStore} instance\n\t */"}, "code_tokens": ["PemSslStore", "withAlias", "default", "(", ")", "{", "}", "String", "alias", ";", ";", "return", ";", "List", "certificates", "=", "Assert", ".", "notNull", "of", "@", "Nullable", "<", "X509Certificate", ">", "certificates", "(", "certificates", ",", ")", "(", ",", "alias", ",", ",", "certificates", ",", ")", "(", ")", "\"", "'certificates' must not be null", "\"", "type", "password", "privateKey", "(", ")", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 79, "ast_depth": 9, "n_identifiers": 10, "vocab_size": 29, "n_whitespaces": 29, "n_words": 25, "nloc": 5, "token_counts": 52}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/ssl/pem/PemSslStore.java#91-95", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/ssl/pem/PemSslStore.java", "language": "Java"}, "method": {"name": "withPassword", "qualified_name": "org.springframework.boot.ssl.pem.PemSslStore#withPassword", "start_line": 91, "end_line": 95, "signature": "withPassword(@Nullable String password)", "original_code": "default PemSslStore withPassword(@Nullable String password) {\n\t\tList<X509Certificate> certificates = certificates();\n\t\tAssert.notNull(certificates, \"'certificates' must not be null\");\n\t\treturn of(type(), alias(), password, certificates, privateKey());\n\t}", "doc_comment": "/**\n\t * Return a new {@link PemSslStore} instance with a new password.\n\t * @param password the new password\n\t * @return a new {@link PemSslStore} instance\n\t */"}, "code_tokens": ["PemSslStore", "withPassword", "default", "(", ")", "{", "}", "String", "password", ";", ";", "return", ";", "List", "certificates", "=", "Assert", ".", "notNull", "of", "@", "Nullable", "<", "X509Certificate", ">", "certificates", "(", "certificates", ",", ")", "(", ",", ",", "password", ",", "certificates", ",", ")", "(", ")", "\"", "'certificates' must not be null", "\"", "type", "alias", "privateKey", "(", ")", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 79, "ast_depth": 9, "n_identifiers": 10, "vocab_size": 29, "n_whitespaces": 29, "n_words": 25, "nloc": 5, "token_counts": 52}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/ssl/pem/PemSslStore.java#103-105", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/ssl/pem/PemSslStore.java", "language": "Java"}, "method": {"name": "load", "qualified_name": "org.springframework.boot.ssl.pem.PemSslStore#load", "start_line": 103, "end_line": 105, "signature": "load(@Nullable PemSslStoreDetails details)", "original_code": "static @Nullable PemSslStore load(@Nullable PemSslStoreDetails details) {\n\t\treturn load(details, ApplicationResourceLoader.get());\n\t}", "doc_comment": "/**\n\t * Return a {@link PemSslStore} instance loaded using the given\n\t * {@link PemSslStoreDetails}.\n\t * @param details the PEM store details\n\t * @return a loaded {@link PemSslStore} or {@code null}.\n\t */"}, "code_tokens": ["PemSslStore", "load", "static", "(", ")", "{", "}", "@", "Nullable", "PemSslStoreDetails", "details", "return", ";", "load", "@", "Nullable", "(", "details", ",", ")", "ApplicationResourceLoader", ".", "get", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 39, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 17, "n_whitespaces": 13, "n_words": 12, "nloc": 3, "token_counts": 25}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/ssl/pem/PemSslStore.java#115-120", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/ssl/pem/PemSslStore.java", "language": "Java"}, "method": {"name": "load", "qualified_name": "org.springframework.boot.ssl.pem.PemSslStore#load", "start_line": 115, "end_line": 120, "signature": "load(@Nullable PemSslStoreDetails details, ResourceLoader resourceLoader)", "original_code": "static @Nullable PemSslStore load(@Nullable PemSslStoreDetails details, ResourceLoader resourceLoader) {\n\t\tif (details == null || details.isEmpty()) {\n\t\t\treturn null;\n\t\t}\n\t\treturn new LoadedPemSslStore(details, resourceLoader);\n\t}", "doc_comment": "/**\n\t * Return a {@link PemSslStore} instance loaded using the given\n\t * {@link PemSslStoreDetails}.\n\t * @param details the PEM store details\n\t * @param resourceLoader the resource loader used to load content\n\t * @return a loaded {@link PemSslStore} or {@code null}.\n\t * @since 3.3.5\n\t */"}, "code_tokens": ["PemSslStore", "load", "static", "(", ",", ")", "{", "}", "@", "Nullable", "PemSslStoreDetails", "details", "ResourceLoader", "resourceLoader", "if", "return", ";", "(", ")", "{", "}", "new", "LoadedPemSslStore", "@", "Nullable", "||", "return", "null", ";", "(", "details", ",", "resourceLoader", ")", "details", "==", "null", "details", ".", "isEmpty", "(", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 63, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 24, "n_whitespaces": 33, "n_words": 21, "nloc": 6, "token_counts": 42}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/ssl/pem/PemSslStore.java#130-132", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/ssl/pem/PemSslStore.java", "language": "Java"}, "method": {"name": "of", "qualified_name": "org.springframework.boot.ssl.pem.PemSslStore#of", "start_line": 130, "end_line": 132, "signature": "of(@Nullable String type, List<X509Certificate> certificates, @Nullable PrivateKey privateKey)", "original_code": "static PemSslStore of(@Nullable String type, List<X509Certificate> certificates, @Nullable PrivateKey privateKey) {\n\t\treturn of(type, null, null, certificates, privateKey);\n\t}", "doc_comment": "/**\n\t * Factory method that can be used to create a new {@link PemSslStore} with the given\n\t * values.\n\t * @param type the key store type\n\t * @param certificates the certificates for this store\n\t * @param privateKey the private key\n\t * @return a new {@link PemSslStore} instance\n\t */"}, "code_tokens": ["PemSslStore", "of", "static", "(", ",", ",", ")", "{", "}", "String", "type", "certificates", "PrivateKey", "privateKey", "return", ";", "List", "of", "@", "Nullable", "<", "X509Certificate", ">", "@", "Nullable", "(", "type", ",", "null", ",", "null", ",", "certificates", ",", "privateKey", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 53, "ast_depth": 7, "n_identifiers": 5, "vocab_size": 22, "n_whitespaces": 20, "n_words": 19, "nloc": 3, "token_counts": 36}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/ssl/pem/PemSslStore.java#141-143", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/ssl/pem/PemSslStore.java", "language": "Java"}, "method": {"name": "of", "qualified_name": "org.springframework.boot.ssl.pem.PemSslStore#of", "start_line": 141, "end_line": 143, "signature": "of(List<X509Certificate> certificates, @Nullable PrivateKey privateKey)", "original_code": "static PemSslStore of(List<X509Certificate> certificates, @Nullable PrivateKey privateKey) {\n\t\treturn of(null, null, null, certificates, privateKey);\n\t}", "doc_comment": "/**\n\t * Factory method that can be used to create a new {@link PemSslStore} with the given\n\t * values.\n\t * @param certificates the certificates for this store\n\t * @param privateKey the private key\n\t * @return a new {@link PemSslStore} instance\n\t */"}, "code_tokens": ["PemSslStore", "of", "static", "(", ",", ")", "{", "}", "certificates", "PrivateKey", "privateKey", "return", ";", "List", "of", "<", "X509Certificate", ">", "@", "Nullable", "(", "null", ",", "null", ",", "null", ",", "certificates", ",", "privateKey", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 45, "ast_depth": 7, "n_identifiers": 4, "vocab_size": 20, "n_whitespaces": 17, "n_words": 16, "nloc": 3, "token_counts": 31}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/ssl/pem/PemSslStore.java#157-188", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/ssl/pem/PemSslStore.java", "language": "Java"}, "method": {"name": "of", "qualified_name": "org.springframework.boot.ssl.pem.PemSslStore#of", "start_line": 157, "end_line": 188, "signature": "of(@Nullable String type, @Nullable String alias, @Nullable String password,\n\t\t\tList<X509Certificate> certificates, @Nullable PrivateKey privateKey)", "original_code": "static PemSslStore of(@Nullable String type, @Nullable String alias, @Nullable String password,\n\t\t\tList<X509Certificate> certificates, @Nullable PrivateKey privateKey) {\n\t\tAssert.notEmpty(certificates, \"'certificates' must not be empty\");\n\t\treturn new PemSslStore() {\n\n\t\t\t@Override\n\t\t\tpublic @Nullable String type() {\n\t\t\t\treturn type;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic @Nullable String alias() {\n\t\t\t\treturn alias;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic @Nullable String password() {\n\t\t\t\treturn password;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic List<X509Certificate> certificates() {\n\t\t\t\treturn certificates;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic @Nullable PrivateKey privateKey() {\n\t\t\t\treturn privateKey;\n\t\t\t}\n\n\t\t};\n\t}", "doc_comment": "/**\n\t * Factory method that can be used to create a new {@link PemSslStore} with the given\n\t * values.\n\t * @param type the key store type\n\t * @param alias the alias used when setting entries in the {@link KeyStore}\n\t * @param password the password used\n\t * {@link KeyStore#setKeyEntry(String, java.security.Key, char[], java.security.cert.Certificate[])\n\t * setting key entries} in the {@link KeyStore}\n\t * @param certificates the certificates for this store\n\t * @param privateKey the private key\n\t * @return a new {@link PemSslStore} instance\n\t */"}, "code_tokens": ["PemSslStore", "of", "static", "(", ",", ",", ",", ",", ")", "{", "}", "String", "type", "String", "alias", "String", "password", "certificates", "PrivateKey", "privateKey", ";", "return", ";", "List", "Assert", ".", "notEmpty", "new", "PemSslStore", "@", "Nullable", "@", "Nullable", "@", "Nullable", "<", "X509Certificate", ">", "@", "Nullable", "(", "certificates", ",", ")", "(", ")", "{", "}", "\"", "'certificates' must not be empty", "\"", "String", "type", "String", "alias", "String", "password", "certificates", "PrivateKey", "privateKey", "public", "(", ")", "{", "}", "public", "(", ")", "{", "}", "public", "(", ")", "{", "}", "public", "List", "(", ")", "{", "}", "public", "(", ")", "{", "}", "@", "Override", "@", "Nullable", "return", "type", ";", "@", "Override", "@", "Nullable", "return", "alias", ";", "@", "Override", "@", "Nullable", "return", "password", ";", "@", "Override", "<", "X509Certificate", ">", "return", "certificates", ";", "@", "Override", "@", "Nullable", "return", "privateKey", ";"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 186, "ast_depth": 10, "n_identifiers": 10, "vocab_size": 31, "n_whitespaces": 153, "n_words": 64, "nloc": 26, "token_counts": 122}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/ssl/pem/PemSslStore.java#162-165", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/ssl/pem/PemSslStore.java", "language": "Java"}, "method": {"name": "type", "qualified_name": "org.springframework.boot.ssl.pem.PemSslStore#type", "start_line": 162, "end_line": 165, "signature": "type()", "original_code": "@Override\n\t\t\tpublic @Nullable String type() {\n\t\t\t\treturn type;\n\t\t\t}", "doc_comment": ""}, "code_tokens": ["String", "type", "public", "(", ")", "{", "}", "@", "Override", "@", "Nullable", "return", "type", ";"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 5, "n_identifiers": 3, "vocab_size": 12, "n_whitespaces": 18, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/ssl/pem/PemSslStore.java#167-170", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/ssl/pem/PemSslStore.java", "language": "Java"}, "method": {"name": "alias", "qualified_name": "org.springframework.boot.ssl.pem.PemSslStore#alias", "start_line": 167, "end_line": 170, "signature": "alias()", "original_code": "@Override\n\t\t\tpublic @Nullable String alias() {\n\t\t\t\treturn alias;\n\t\t\t}", "doc_comment": ""}, "code_tokens": ["String", "alias", "public", "(", ")", "{", "}", "@", "Override", "@", "Nullable", "return", "alias", ";"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 5, "n_identifiers": 3, "vocab_size": 12, "n_whitespaces": 18, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/ssl/pem/PemSslStore.java#172-175", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/ssl/pem/PemSslStore.java", "language": "Java"}, "method": {"name": "password", "qualified_name": "org.springframework.boot.ssl.pem.PemSslStore#password", "start_line": 172, "end_line": 175, "signature": "password()", "original_code": "@Override\n\t\t\tpublic @Nullable String password() {\n\t\t\t\treturn password;\n\t\t\t}", "doc_comment": ""}, "code_tokens": ["String", "password", "public", "(", ")", "{", "}", "@", "Override", "@", "Nullable", "return", "password", ";"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 5, "n_identifiers": 3, "vocab_size": 12, "n_whitespaces": 18, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/ssl/pem/PemSslStore.java#177-180", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/ssl/pem/PemSslStore.java", "language": "Java"}, "method": {"name": "certificates", "qualified_name": "org.springframework.boot.ssl.pem.PemSslStore#certificates", "start_line": 177, "end_line": 180, "signature": "certificates()", "original_code": "@Override\n\t\t\tpublic List<X509Certificate> certificates() {\n\t\t\t\treturn certificates;\n\t\t\t}", "doc_comment": ""}, "code_tokens": ["certificates", "public", "List", "(", ")", "{", "}", "@", "Override", "<", "X509Certificate", ">", "return", "certificates", ";"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 24, "ast_depth": 5, "n_identifiers": 2, "vocab_size": 14, "n_whitespaces": 17, "n_words": 7, "nloc": 4, "token_counts": 15}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/ssl/pem/PemSslStore.java#182-185", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/ssl/pem/PemSslStore.java", "language": "Java"}, "method": {"name": "privateKey", "qualified_name": "org.springframework.boot.ssl.pem.PemSslStore#privateKey", "start_line": 182, "end_line": 185, "signature": "privateKey()", "original_code": "@Override\n\t\t\tpublic @Nullable PrivateKey privateKey() {\n\t\t\t\treturn privateKey;\n\t\t\t}", "doc_comment": ""}, "code_tokens": ["PrivateKey", "privateKey", "public", "(", ")", "{", "}", "@", "Override", "@", "Nullable", "return", "privateKey", ";"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 5, "n_identifiers": 3, "vocab_size": 12, "n_whitespaces": 18, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/ssl/pem/PemSslStoreDetails.java#101-104", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/ssl/pem/PemSslStoreDetails.java", "language": "Java"}, "method": {"name": "withAlias", "qualified_name": "org.springframework.boot.ssl.pem.PemSslStoreDetails#withAlias", "start_line": 101, "end_line": 104, "signature": "withAlias(@Nullable String alias)", "original_code": "public PemSslStoreDetails withAlias(@Nullable String alias) {\n\t\treturn new PemSslStoreDetails(this.type, alias, this.password, this.certificates, this.privateKey,\n\t\t\t\tthis.privateKeyPassword);\n\t}", "doc_comment": "/**\n\t * Return a new {@link PemSslStoreDetails} instance with a new alias.\n\t * @param alias the new alias\n\t * @return a new {@link PemSslStoreDetails} instance\n\t * @since 3.2.0\n\t */"}, "code_tokens": ["PemSslStoreDetails", "withAlias", "public", "(", ")", "{", "}", "String", "alias", "return", ";", "new", "PemSslStoreDetails", "@", "Nullable", "(", ",", "alias", ",", ",", ",", ",", ")", "this", ".", "type", "this", ".", "password", "this", ".", "certificates", "this", ".", "privateKey", "this", ".", "privateKeyPassword"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 54, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 22, "n_whitespaces": 21, "n_words": 20, "nloc": 4, "token_counts": 38}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/ssl/pem/PemSslStoreDetails.java#112-115", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/ssl/pem/PemSslStoreDetails.java", "language": "Java"}, "method": {"name": "withPassword", "qualified_name": "org.springframework.boot.ssl.pem.PemSslStoreDetails#withPassword", "start_line": 112, "end_line": 115, "signature": "withPassword(@Nullable String password)", "original_code": "public PemSslStoreDetails withPassword(@Nullable String password) {\n\t\treturn new PemSslStoreDetails(this.type, this.alias, password, this.certificates, this.privateKey,\n\t\t\t\tthis.privateKeyPassword);\n\t}", "doc_comment": "/**\n\t * Return a new {@link PemSslStoreDetails} instance with a new password.\n\t * @param password the new password\n\t * @return a new {@link PemSslStoreDetails} instance\n\t * @since 3.2.0\n\t */"}, "code_tokens": ["PemSslStoreDetails", "withPassword", "public", "(", ")", "{", "}", "String", "password", "return", ";", "new", "PemSslStoreDetails", "@", "Nullable", "(", ",", ",", "password", ",", ",", ",", ")", "this", ".", "type", "this", ".", "alias", "this", ".", "certificates", "this", ".", "privateKey", "this", ".", "privateKeyPassword"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 54, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 22, "n_whitespaces": 21, "n_words": 20, "nloc": 4, "token_counts": 38}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/ssl/pem/PemSslStoreDetails.java#122-125", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/ssl/pem/PemSslStoreDetails.java", "language": "Java"}, "method": {"name": "withPrivateKey", "qualified_name": "org.springframework.boot.ssl.pem.PemSslStoreDetails#withPrivateKey", "start_line": 122, "end_line": 125, "signature": "withPrivateKey(@Nullable String privateKey)", "original_code": "public PemSslStoreDetails withPrivateKey(@Nullable String privateKey) {\n\t\treturn new PemSslStoreDetails(this.type, this.alias, this.password, this.certificates, privateKey,\n\t\t\t\tthis.privateKeyPassword);\n\t}", "doc_comment": "/**\n\t * Return a new {@link PemSslStoreDetails} instance with a new private key.\n\t * @param privateKey the new private key\n\t * @return a new {@link PemSslStoreDetails} instance\n\t */"}, "code_tokens": ["PemSslStoreDetails", "withPrivateKey", "public", "(", ")", "{", "}", "String", "privateKey", "return", ";", "new", "PemSslStoreDetails", "@", "Nullable", "(", ",", ",", ",", ",", "privateKey", ",", ")", "this", ".", "type", "this", ".", "alias", "this", ".", "password", "this", ".", "certificates", "this", ".", "privateKeyPassword"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 54, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 22, "n_whitespaces": 21, "n_words": 20, "nloc": 4, "token_counts": 38}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/ssl/pem/PemSslStoreDetails.java#132-135", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/ssl/pem/PemSslStoreDetails.java", "language": "Java"}, "method": {"name": "withPrivateKeyPassword", "qualified_name": "org.springframework.boot.ssl.pem.PemSslStoreDetails#withPrivateKeyPassword", "start_line": 132, "end_line": 135, "signature": "withPrivateKeyPassword(@Nullable String privateKeyPassword)", "original_code": "public PemSslStoreDetails withPrivateKeyPassword(@Nullable String privateKeyPassword) {\n\t\treturn new PemSslStoreDetails(this.type, this.alias, this.password, this.certificates, this.privateKey,\n\t\t\t\tprivateKeyPassword);\n\t}", "doc_comment": "/**\n\t * Return a new {@link PemSslStoreDetails} instance with a new private key password.\n\t * @param privateKeyPassword the new private key password\n\t * @return a new {@link PemSslStoreDetails} instance\n\t */"}, "code_tokens": ["PemSslStoreDetails", "withPrivateKeyPassword", "public", "(", ")", "{", "}", "String", "privateKeyPassword", "return", ";", "new", "PemSslStoreDetails", "@", "Nullable", "(", ",", ",", ",", ",", ",", "privateKeyPassword", ")", "this", ".", "type", "this", ".", "alias", "this", ".", "password", "this", ".", "certificates", "this", ".", "privateKey"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 54, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 22, "n_whitespaces": 21, "n_words": 20, "nloc": 4, "token_counts": 38}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/ssl/pem/PemSslStoreDetails.java#137-139", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/ssl/pem/PemSslStoreDetails.java", "language": "Java"}, "method": {"name": "isEmpty", "qualified_name": "org.springframework.boot.ssl.pem.PemSslStoreDetails#isEmpty", "start_line": 137, "end_line": 139, "signature": "isEmpty()", "original_code": "boolean isEmpty() {\n\t\treturn isEmpty(this.type) && isEmpty(this.certificates) && isEmpty(this.privateKey);\n\t}", "doc_comment": ""}, "code_tokens": ["boolean", "isEmpty", "(", ")", "{", "}", "return", ";", "&&", "&&", "isEmpty", "isEmpty", "isEmpty", "(", ")", "(", ")", "(", ")", "this", ".", "privateKey", "this", ".", "type", "this", ".", "certificates"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 44, "ast_depth": 10, "n_identifiers": 4, "vocab_size": 14, "n_whitespaces": 12, "n_words": 12, "nloc": 3, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/ssl/pem/PemSslStoreDetails.java#141-143", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/ssl/pem/PemSslStoreDetails.java", "language": "Java"}, "method": {"name": "isEmpty", "qualified_name": "org.springframework.boot.ssl.pem.PemSslStoreDetails#isEmpty", "start_line": 141, "end_line": 143, "signature": "isEmpty(@Nullable String value)", "original_code": "private boolean isEmpty(@Nullable String value) {\n\t\treturn !StringUtils.hasText(value);\n\t}", "doc_comment": ""}, "code_tokens": ["boolean", "isEmpty", "private", "(", ")", "{", "}", "String", "value", "return", ";", "!", "@", "Nullable", "StringUtils", ".", "hasText", "(", "value", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 32, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 17, "n_whitespaces": 11, "n_words": 10, "nloc": 3, "token_counts": 20}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/ssl/pem/PemSslStoreDetails.java#154-156", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/ssl/pem/PemSslStoreDetails.java", "language": "Java"}, "method": {"name": "forCertificate", "qualified_name": "org.springframework.boot.ssl.pem.PemSslStoreDetails#forCertificate", "start_line": 154, "end_line": 156, "signature": "forCertificate(@Nullable String certificate)", "original_code": "public static PemSslStoreDetails forCertificate(@Nullable String certificate) {\n\t\treturn forCertificates(certificate);\n\t}", "doc_comment": "/**\n\t * Factory method to create a new {@link PemSslStoreDetails} instance for the given\n\t * certificate. <b>Note:</b> This method doesn't actually check if the provided value\n\t * only contains a single certificate. It is functionally equivalent to\n\t * {@link #forCertificates(String)}.\n\t * @param certificate the certificate content (either the PEM content itself or a\n\t * reference to the resource to load)\n\t * @return a new {@link PemSslStoreDetails} instance.\n\t */"}, "code_tokens": ["PemSslStoreDetails", "forCertificate", "public", "static", "(", ")", "{", "}", "String", "certificate", "return", ";", "forCertificates", "@", "Nullable", "(", "certificate", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 29, "ast_depth": 7, "n_identifiers": 4, "vocab_size": 15, "n_whitespaces": 12, "n_words": 10, "nloc": 3, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/ssl/pem/PemSslStoreDetails.java#166-168", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/ssl/pem/PemSslStoreDetails.java", "language": "Java"}, "method": {"name": "forCertificates", "qualified_name": "org.springframework.boot.ssl.pem.PemSslStoreDetails#forCertificates", "start_line": 166, "end_line": 168, "signature": "forCertificates(@Nullable String certificates)", "original_code": "public static PemSslStoreDetails forCertificates(@Nullable String certificates) {\n\t\treturn new PemSslStoreDetails(null, certificates, null);\n\t}", "doc_comment": "/**\n\t * Factory method to create a new {@link PemSslStoreDetails} instance for the given\n\t * certificates.\n\t * @param certificates the certificates content (either the PEM content itself or a\n\t * reference to the resource to load)\n\t * @return a new {@link PemSslStoreDetails} instance.\n\t * @since 3.2.0\n\t */"}, "code_tokens": ["PemSslStoreDetails", "forCertificates", "public", "static", "(", ")", "{", "}", "String", "certificates", "return", ";", "new", "PemSslStoreDetails", "@", "Nullable", "(", "null", ",", "certificates", ",", "null", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 34, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 17, "n_whitespaces": 15, "n_words": 13, "nloc": 3, "token_counts": 23}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/system/ApplicationPid.java#53-60", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/system/ApplicationPid.java", "language": "Java"}, "method": {"name": "currentProcessPid", "qualified_name": "org.springframework.boot.system.ApplicationPid#currentProcessPid", "start_line": 53, "end_line": 60, "signature": "currentProcessPid()", "original_code": "private @Nullable Long currentProcessPid() {\n\t\ttry {\n\t\t\treturn ProcessHandle.current().pid();\n\t\t}\n\t\tcatch (Throwable ex) {\n\t\t\treturn null;\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["Long", "currentProcessPid", "private", "(", ")", "{", "}", "@", "Nullable", "try", "{", "}", "catch", "(", ")", "return", ";", "ex", "{", "}", ".", "pid", "Throwable", "return", "null", ";", "ProcessHandle", ".", "current", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 51, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 20, "n_whitespaces": 32, "n_words": 14, "nloc": 8, "token_counts": 33}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/system/ApplicationPid.java#67-69", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/system/ApplicationPid.java", "language": "Java"}, "method": {"name": "isAvailable", "qualified_name": "org.springframework.boot.system.ApplicationPid#isAvailable", "start_line": 67, "end_line": 69, "signature": "isAvailable()", "original_code": "public boolean isAvailable() {\n\t\treturn this.pid != null;\n\t}", "doc_comment": "/**\n\t * Return if the application PID is available.\n\t * @return {@code true} if the PID is available\n\t * @since 3.4.0\n\t */"}, "code_tokens": ["boolean", "isAvailable", "public", "(", ")", "{", "}", "return", ";", "!=", "null", "this", ".", "pid"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 14, "n_whitespaces": 11, "n_words": 7, "nloc": 3, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/system/ApplicationPid.java#76-78", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/system/ApplicationPid.java", "language": "Java"}, "method": {"name": "toLong", "qualified_name": "org.springframework.boot.system.ApplicationPid#toLong", "start_line": 76, "end_line": 78, "signature": "toLong()", "original_code": "public @Nullable Long toLong() {\n\t\treturn this.pid;\n\t}", "doc_comment": "/**\n\t * Return the application PID as a {@link Long}.\n\t * @return the application PID or {@code null}\n\t * @since 3.4.0\n\t */"}, "code_tokens": ["Long", "toLong", "public", "(", ")", "{", "}", "@", "Nullable", "return", ";", "this", ".", "pid"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 10, "n_words": 7, "nloc": 3, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/system/ApplicationPid.java#80-89", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/system/ApplicationPid.java", "language": "Java"}, "method": {"name": "equals", "qualified_name": "org.springframework.boot.system.ApplicationPid#equals", "start_line": 80, "end_line": 89, "signature": "equals(Object obj)", "original_code": "@Override\n\tpublic boolean equals(Object obj) {\n\t\tif (obj == this) {\n\t\t\treturn true;\n\t\t}\n\t\tif (obj instanceof ApplicationPid other) {\n\t\t\treturn ObjectUtils.nullSafeEquals(this.pid, other.pid);\n\t\t}\n\t\treturn false;\n\t}", "doc_comment": ""}, "code_tokens": ["boolean", "equals", "public", "(", ")", "{", "}", "@", "Override", "Object", "obj", "if", "if", "return", "false", ";", "(", ")", "{", "}", "(", ")", "{", "}", "obj", "==", "this", "return", "true", ";", "obj", "instanceof", "ApplicationPid", "other", "return", ";", "ObjectUtils", ".", "nullSafeEquals", "(", ",", ")", "this", ".", "pid", "other", ".", "pid"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 70, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 26, "n_whitespaces": 44, "n_words": 25, "nloc": 10, "token_counts": 48}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/system/ApplicationPid.java#91-94", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/system/ApplicationPid.java", "language": "Java"}, "method": {"name": "hashCode", "qualified_name": "org.springframework.boot.system.ApplicationPid#hashCode", "start_line": 91, "end_line": 94, "signature": "hashCode()", "original_code": "@Override\n\tpublic int hashCode() {\n\t\treturn ObjectUtils.nullSafeHashCode(this.pid);\n\t}", "doc_comment": ""}, "code_tokens": ["hashCode", "public", "int", "(", ")", "{", "}", "@", "Override", "return", ";", "ObjectUtils", ".", "nullSafeHashCode", "(", ")", "this", ".", "pid"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 30, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 16, "n_whitespaces": 11, "n_words": 9, "nloc": 4, "token_counts": 19}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/system/ApplicationPid.java#96-99", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/system/ApplicationPid.java", "language": "Java"}, "method": {"name": "toString", "qualified_name": "org.springframework.boot.system.ApplicationPid#toString", "start_line": 96, "end_line": 99, "signature": "toString()", "original_code": "@Override\n\tpublic String toString() {\n\t\treturn (this.pid != null) ? String.valueOf(this.pid) : \"???\";\n\t}", "doc_comment": ""}, "code_tokens": ["String", "toString", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "?", ":", "(", ")", "String", ".", "valueOf", "\"", "???", "\"", "!=", "null", "(", ")", "this", ".", "pid", "this", ".", "pid"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 46, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 21, "n_whitespaces": 17, "n_words": 12, "nloc": 4, "token_counts": 31}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/system/ApplicationPid.java#107-116", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/system/ApplicationPid.java", "language": "Java"}, "method": {"name": "write", "qualified_name": "org.springframework.boot.system.ApplicationPid#write", "start_line": 107, "end_line": 116, "signature": "write(File file)", "original_code": "public void write(File file) throws IOException {\n\t\tAssert.state(this.pid != null, \"No PID available\");\n\t\tcreateParentDirectory(file);\n\t\tif (file.exists()) {\n\t\t\tassertCanOverwrite(file);\n\t\t}\n\t\ttry (FileWriter writer = new FileWriter(file)) {\n\t\t\twriter.append(String.valueOf(this.pid));\n\t\t}\n\t}", "doc_comment": "/**\n\t * Write the PID to the specified file.\n\t * @param file the PID file\n\t * @throws IllegalStateException if no PID is available.\n\t * @throws IOException if the file cannot be written\n\t */"}, "code_tokens": ["void", "write", "public", "(", ")", "throws", "IOException", "{", "}", "File", "file", ";", ";", "if", "try", "Assert", ".", "state", "createParentDirectory", "(", ")", "{", "}", "(", ")", "{", "}", "(", ",", ")", "(", "file", ")", "file", ".", "exists", ";", "FileWriter", "writer", "=", ";", "!=", "null", "\"", "No PID available", "\"", "(", ")", "assertCanOverwrite", "new", "FileWriter", "writer", ".", "append", "this", ".", "pid", "(", "file", ")", "(", "file", ")", "(", ")", "String", ".", "valueOf", "(", ")", "this", ".", "pid"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 109, "ast_depth": 12, "n_identifiers": 12, "vocab_size": 34, "n_whitespaces": 47, "n_words": 34, "nloc": 10, "token_counts": 73}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/system/ApplicationPid.java#118-123", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/system/ApplicationPid.java", "language": "Java"}, "method": {"name": "createParentDirectory", "qualified_name": "org.springframework.boot.system.ApplicationPid#createParentDirectory", "start_line": 118, "end_line": 123, "signature": "createParentDirectory(File file)", "original_code": "private void createParentDirectory(File file) {\n\t\tFile parent = file.getParentFile();\n\t\tif (parent != null) {\n\t\t\tparent.mkdirs();\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "createParentDirectory", "private", "(", ")", "{", "}", "File", "file", "File", ";", "if", "parent", "=", "(", ")", "{", "}", "file", ".", "getParentFile", "parent", "!=", "null", ";", "(", ")", "parent", ".", "mkdirs", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 49, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 18, "n_whitespaces": 26, "n_words": 14, "nloc": 6, "token_counts": 32}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/system/ApplicationPid.java#125-129", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/system/ApplicationPid.java", "language": "Java"}, "method": {"name": "assertCanOverwrite", "qualified_name": "org.springframework.boot.system.ApplicationPid#assertCanOverwrite", "start_line": 125, "end_line": 129, "signature": "assertCanOverwrite(File file)", "original_code": "private void assertCanOverwrite(File file) throws IOException {\n\t\tif (!file.canWrite() || !canWritePosixFile(file)) {\n\t\t\tthrow new FileNotFoundException(file + \" (permission denied)\");\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "assertCanOverwrite", "private", "(", ")", "throws", "IOException", "{", "}", "File", "file", "if", "(", ")", "{", "}", "||", "throw", ";", "!", "!", "new", "FileNotFoundException", "file", ".", "canWrite", "canWritePosixFile", "(", ")", "(", ")", "(", "file", ")", "file", "+", "\"", " (permission denied)", "\""], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 61, "ast_depth": 11, "n_identifiers": 4, "vocab_size": 24, "n_whitespaces": 28, "n_words": 18, "nloc": 5, "token_counts": 39}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/system/ApplicationPid.java#131-145", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/system/ApplicationPid.java", "language": "Java"}, "method": {"name": "canWritePosixFile", "qualified_name": "org.springframework.boot.system.ApplicationPid#canWritePosixFile", "start_line": 131, "end_line": 145, "signature": "canWritePosixFile(File file)", "original_code": "private boolean canWritePosixFile(File file) throws IOException {\n\t\ttry {\n\t\t\tSet<PosixFilePermission> permissions = Files.getPosixFilePermissions(file.toPath());\n\t\t\tfor (PosixFilePermission permission : WRITE_PERMISSIONS) {\n\t\t\t\tif (permissions.contains(permission)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\tcatch (UnsupportedOperationException ex) {\n\t\t\t// Assume that we can\n\t\t\treturn true;\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["boolean", "canWritePosixFile", "private", "(", ")", "throws", "IOException", "{", "}", "File", "file", "try", "{", "}", "catch", "(", ")", ";", "for", "(", "PosixFilePermission", "permission", ":", "WRITE_PERMISSIONS", ")", "return", "false", ";", "ex", "{", "// Assume that we can", "}", "Set", "permissions", "=", "{", "}", "UnsupportedOperationException", "return", "true", ";", "<", "PosixFilePermission", ">", "Files", ".", "getPosixFilePermissions", "if", "(", ")", "(", ")", "{", "}", "file", ".", "toPath", "permissions", ".", "contains", "return", "true", ";", "(", ")", "(", "permission", ")"], "metrics": {"cyclomatic_complexity": 4, "n_ast_nodes": 99, "ast_depth": 12, "n_identifiers": 10, "vocab_size": 36, "n_whitespaces": 81, "n_words": 36, "nloc": 15, "token_counts": 68}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/web/servlet/support/SpringBootServletInitializer.java#98-100", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/web/servlet/support/SpringBootServletInitializer.java", "language": "Java"}, "method": {"name": "setRegisterErrorPageFilter", "qualified_name": "org.springframework.boot.web.servlet.support.SpringBootServletInitializer#setRegisterErrorPageFilter", "start_line": 98, "end_line": 100, "signature": "setRegisterErrorPageFilter(boolean registerErrorPageFilter)", "original_code": "protected final void setRegisterErrorPageFilter(boolean registerErrorPageFilter) {\n\t\tthis.registerErrorPageFilter = registerErrorPageFilter;\n\t}", "doc_comment": "/**\n\t * Set if the {@link ErrorPageFilter} should be registered. Set to {@code false} if\n\t * error page mappings should be handled through the server and not Spring Boot.\n\t * @param registerErrorPageFilter if the {@link ErrorPageFilter} should be registered.\n\t */"}, "code_tokens": ["void", "setRegisterErrorPageFilter", "protected", "final", "(", ")", "{", "}", "boolean", "registerErrorPageFilter", ";", "=", "registerErrorPageFilter", "this", ".", "registerErrorPageFilter"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 25, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 14, "n_whitespaces": 12, "n_words": 9, "nloc": 3, "token_counts": 16}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/web/servlet/support/SpringBootServletInitializer.java#102-116", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/web/servlet/support/SpringBootServletInitializer.java", "language": "Java"}, "method": {"name": "onStartup", "qualified_name": "org.springframework.boot.web.servlet.support.SpringBootServletInitializer#onStartup", "start_line": 102, "end_line": 116, "signature": "onStartup(ServletContext servletContext)", "original_code": "@Override\n\tpublic void onStartup(ServletContext servletContext) throws ServletException {\n\t\tservletContext.setAttribute(LoggingApplicationListener.REGISTER_SHUTDOWN_HOOK_PROPERTY, false);\n\t\t// Logger initialization is deferred in case an ordered\n\t\t// LogServletContextInitializer is being used\n\t\tthis.logger = LogFactory.getLog(getClass());\n\t\tWebApplicationContext rootApplicationContext = createRootApplicationContext(servletContext);\n\t\tif (rootApplicationContext != null) {\n\t\t\tservletContext.addListener(new SpringBootContextLoaderListener(rootApplicationContext, servletContext));\n\t\t}\n\t\telse {\n\t\t\tthis.logger.debug(\"No ContextLoaderListener registered, as createRootApplicationContext() did not \"\n\t\t\t\t\t+ \"return an application context\");\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "onStartup", "public", "(", ")", "throws", "ServletException", "{", "// Logger initialization is deferred in case an ordered", "// LogServletContextInitializer is being used", "}", "@", "Override", "ServletContext", "servletContext", ";", ";", "WebApplicationContext", ";", "if", "else", "servletContext", ".", "setAttribute", "=", "rootApplicationContext", "=", "(", ")", "{", "}", "{", "}", "(", ",", "false", ")", "this", ".", "logger", "LogFactory", ".", "getLog", "createRootApplicationContext", "rootApplicationContext", "!=", "null", ";", ";", "LoggingApplicationListener", ".", "REGISTER_SHUTDOWN_HOOK_PROPERTY", "(", ")", "(", "servletContext", ")", "servletContext", ".", "addListener", ".", "debug", "getClass", "(", ")", "this", ".", "logger", "(", ")", "(", ")", "new", "SpringBootContextLoaderListener", "+", "(", "rootApplicationContext", ",", "servletContext", ")", "\"", "No ContextLoaderListener registered, as createRootApplicationContext() did not ", "\"", "\"", "return an application context", "\""], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 126, "ast_depth": 11, "n_identifiers": 14, "vocab_size": 43, "n_whitespaces": 87, "n_words": 58, "nloc": 15, "token_counts": 86}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/web/servlet/support/SpringBootServletInitializer.java#127-138", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/web/servlet/support/SpringBootServletInitializer.java", "language": "Java"}, "method": {"name": "deregisterJdbcDrivers", "qualified_name": "org.springframework.boot.web.servlet.support.SpringBootServletInitializer#deregisterJdbcDrivers", "start_line": 127, "end_line": 138, "signature": "deregisterJdbcDrivers(ServletContext servletContext)", "original_code": "protected void deregisterJdbcDrivers(ServletContext servletContext) {\n\t\tfor (Driver driver : Collections.list(DriverManager.getDrivers())) {\n\t\t\tif (driver.getClass().getClassLoader() == servletContext.getClassLoader()) {\n\t\t\t\ttry {\n\t\t\t\t\tDriverManager.deregisterDriver(driver);\n\t\t\t\t}\n\t\t\t\tcatch (SQLException ex) {\n\t\t\t\t\t// Continue\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "doc_comment": "/**\n\t * Deregisters the JDBC drivers that were registered by the application represented by\n\t * the given {@code servletContext}. The default implementation\n\t * {@link DriverManager#deregisterDriver(Driver) deregisters} every {@link Driver}\n\t * that was loaded by the {@link ServletContext#getClassLoader web application's class\n\t * loader}.\n\t * @param servletContext the web application's servlet context\n\t * @since 2.3.0\n\t */"}, "code_tokens": ["void", "deregisterJdbcDrivers", "protected", "(", ")", "{", "}", "ServletContext", "servletContext", "for", "(", "Driver", "driver", ":", ")", "Collections", ".", "list", "{", "}", "(", ")", "if", "DriverManager", ".", "getDrivers", "(", ")", "{", "}", "(", ")", "==", "try", ".", "getClassLoader", "servletContext", ".", "getClassLoader", "{", "}", "catch", "(", ")", "driver", ".", "getClass", "(", ")", "(", ")", ";", "ex", "{", "// Continue", "}", "(", ")", "DriverManager", ".", "deregisterDriver", "SQLException", "(", "driver", ")"], "metrics": {"cyclomatic_complexity": 4, "n_ast_nodes": 96, "ast_depth": 13, "n_identifiers": 11, "vocab_size": 29, "n_whitespaces": 66, "n_words": 26, "nloc": 12, "token_counts": 65}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/web/servlet/support/SpringBootServletInitializer.java#148-152", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/web/servlet/support/SpringBootServletInitializer.java", "language": "Java"}, "method": {"name": "shutDownSharedReactorSchedulers", "qualified_name": "org.springframework.boot.web.servlet.support.SpringBootServletInitializer#shutDownSharedReactorSchedulers", "start_line": 148, "end_line": 152, "signature": "shutDownSharedReactorSchedulers(ServletContext servletContext)", "original_code": "protected void shutDownSharedReactorSchedulers(ServletContext servletContext) {\n\t\tif (Schedulers.class.getClassLoader() == servletContext.getClassLoader()) {\n\t\t\tSchedulers.shutdownNow();\n\t\t}\n\t}", "doc_comment": "/**\n\t * Shuts down the reactor {@link Schedulers} that were initialized by\n\t * {@code Schedulers.boundedElastic()} (or similar). The default implementation\n\t * {@link Schedulers#shutdownNow()} schedulers if they were initialized on this web\n\t * application's class loader.\n\t * @param servletContext the web application's servlet context\n\t * @since 3.4.0\n\t */"}, "code_tokens": ["void", "shutDownSharedReactorSchedulers", "protected", "(", ")", "{", "}", "ServletContext", "servletContext", "if", "(", ")", "{", "}", "==", ";", ".", "getClassLoader", "servletContext", ".", "getClassLoader", "Schedulers", ".", "shutdownNow", "Schedulers", ".", "class", "(", ")", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 51, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 17, "n_whitespaces": 20, "n_words": 13, "nloc": 5, "token_counts": 33}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/web/servlet/support/SpringBootServletInitializer.java#154-181", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/web/servlet/support/SpringBootServletInitializer.java", "language": "Java"}, "method": {"name": "createRootApplicationContext", "qualified_name": "org.springframework.boot.web.servlet.support.SpringBootServletInitializer#createRootApplicationContext", "start_line": 154, "end_line": 181, "signature": "createRootApplicationContext(ServletContext servletContext)", "original_code": "protected @Nullable WebApplicationContext createRootApplicationContext(ServletContext servletContext) {\n\t\tSpringApplicationBuilder builder = createSpringApplicationBuilder();\n\t\tbuilder.main(getClass());\n\t\tApplicationContext parent = getExistingRootWebApplicationContext(servletContext);\n\t\tif (parent != null) {\n\t\t\tgetLogger().info(\"Root context already created (using as parent).\");\n\t\t\tservletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, null);\n\t\t\tbuilder.initializers(new ParentContextApplicationContextInitializer(parent));\n\t\t}\n\t\tbuilder.initializers(new ServletContextApplicationContextInitializer(servletContext));\n\t\tbuilder.contextFactory(new WarDeploymentApplicationContextFactory(servletContext));\n\t\tbuilder = configure(builder);\n\t\tbuilder.listeners(new WebEnvironmentPropertySourceInitializer(servletContext));\n\t\tSpringApplication application = builder.build();\n\t\tif (application.getAllSources().isEmpty()\n\t\t\t\t&& MergedAnnotations.from(getClass(), SearchStrategy.TYPE_HIERARCHY).isPresent(Configuration.class)) {\n\t\t\tapplication.addPrimarySources(Collections.singleton(getClass()));\n\t\t}\n\t\tAssert.state(!application.getAllSources().isEmpty(),\n\t\t\t\t\"No SpringApplication sources have been defined. Either override the \"\n\t\t\t\t\t\t+ \"configure method or add an @Configuration annotation\");\n\t\t// Ensure error pages are registered\n\t\tif (this.registerErrorPageFilter) {\n\t\t\tapplication.addPrimarySources(Collections.singleton(ErrorPageFilterConfiguration.class));\n\t\t}\n\t\tapplication.setRegisterShutdownHook(false);\n\t\treturn run(application);\n\t}", "doc_comment": ""}, "code_tokens": ["WebApplicationContext", "createRootApplicationContext", "protected", "(", ")", "{", "// Ensure error pages are registered", "}", "@", "Nullable", "ServletContext", "servletContext", "SpringApplicationBuilder", ";", ";", "ApplicationContext", ";", "if", ";", ";", ";", ";", "SpringApplication", ";", "if", ";", "if", ";", "return", ";", "builder", "=", "builder", ".", "main", "parent", "=", "(", ")", "{", "}", "builder", ".", "initializers", "builder", ".", "contextFactory", "builder", "=", "builder", ".", "listeners", "application", "=", "(", ")", "{", "}", "Assert", ".", "state", "(", ")", "{", "}", "application", ".", "setRegisterShutdownHook", "run", "createSpringApplicationBuilder", "(", ")", "getExistingRootWebApplicationContext", "parent", "!=", "null", ";", ";", ";", "(", ")", "(", ")", "configure", "(", ")", "builder", ".", "build", "&&", ";", "(", ",", ")", "this", ".", "registerErrorPageFilter", ";", "(", "false", ")", "(", "application", ")", "(", ")", "getClass", "(", "servletContext", ")", ".", "info", "servletContext", ".", "setAttribute", "builder", ".", "initializers", "new", "ServletContextApplicationContextInitializer", "new", "WarDeploymentApplicationContextFactory", "(", "builder", ")", "new", "WebEnvironmentPropertySourceInitializer", "(", ")", ".", "isEmpty", ".", "isPresent", "application", ".", "addPrimarySources", "!", "+", "application", ".", "addPrimarySources", "(", ")", "getLogger", "(", ")", "(", ",", "null", ")", "(", ")", "(", "servletContext", ")", "(", "servletContext", ")", "(", "servletContext", ")", "application", ".", "getAllSources", "(", ")", "MergedAnnotations", ".", "from", "(", ")", "(", ")", ".", "isEmpty", "\"", "No SpringApplication sources have been defined. Either override the ", "\"", "\"", "configure method or add an @Configuration annotation", "\"", "(", ")", "(", ")", "\"", "Root context already created (using as parent).", "\"", "WebApplicationContext", ".", "ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE", "new", "ParentContextApplicationContextInitializer", "(", ")", "(", ",", ")", "Configuration", ".", "class", "Collections", ".", "singleton", "application", ".", "getAllSources", "(", ")", "Collections", ".", "singleton", "(", "parent", ")", "getClass", "SearchStrategy", ".", "TYPE_HIERARCHY", "(", ")", "(", ")", "(", ")", "(", ")", "getClass", "ErrorPageFilterConfiguration", ".", "class", "(", ")"], "metrics": {"cyclomatic_complexity": 5, "n_ast_nodes": 345, "ast_depth": 13, "n_identifiers": 35, "vocab_size": 71, "n_whitespaces": 152, "n_words": 118, "nloc": 28, "token_counts": 233}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/web/servlet/support/SpringBootServletInitializer.java#183-186", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/web/servlet/support/SpringBootServletInitializer.java", "language": "Java"}, "method": {"name": "getLogger", "qualified_name": "org.springframework.boot.web.servlet.support.SpringBootServletInitializer#getLogger", "start_line": 183, "end_line": 186, "signature": "getLogger()", "original_code": "private Log getLogger() {\n\t\tAssert.state(this.logger != null, \"Logger not set\");\n\t\treturn this.logger;\n\t}", "doc_comment": ""}, "code_tokens": ["Log", "getLogger", "private", "(", ")", "{", "}", ";", "return", ";", "Assert", ".", "state", "this", ".", "logger", "(", ",", ")", "!=", "null", "\"", "Logger not set", "\"", "this", ".", "logger"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 40, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 19, "n_whitespaces": 17, "n_words": 14, "nloc": 4, "token_counts": 27}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/web/servlet/support/SpringBootServletInitializer.java#195-197", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/web/servlet/support/SpringBootServletInitializer.java", "language": "Java"}, "method": {"name": "createSpringApplicationBuilder", "qualified_name": "org.springframework.boot.web.servlet.support.SpringBootServletInitializer#createSpringApplicationBuilder", "start_line": 195, "end_line": 197, "signature": "createSpringApplicationBuilder()", "original_code": "protected SpringApplicationBuilder createSpringApplicationBuilder() {\n\t\treturn new SpringApplicationBuilder();\n\t}", "doc_comment": "/**\n\t * Returns the {@code SpringApplicationBuilder} that is used to configure and create\n\t * the {@link SpringApplication}. The default implementation returns a new\n\t * {@code SpringApplicationBuilder} in its default state.\n\t * @return the {@code SpringApplicationBuilder}.\n\t * @since 1.3.0\n\t */"}, "code_tokens": ["SpringApplicationBuilder", "createSpringApplicationBuilder", "protected", "(", ")", "{", "}", "return", ";", "new", "SpringApplicationBuilder", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 21, "ast_depth": 7, "n_identifiers": 1, "vocab_size": 10, "n_whitespaces": 10, "n_words": 6, "nloc": 3, "token_counts": 13}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/web/servlet/support/SpringBootServletInitializer.java#204-206", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/web/servlet/support/SpringBootServletInitializer.java", "language": "Java"}, "method": {"name": "run", "qualified_name": "org.springframework.boot.web.servlet.support.SpringBootServletInitializer#run", "start_line": 204, "end_line": 206, "signature": "run(SpringApplication application)", "original_code": "protected @Nullable WebApplicationContext run(SpringApplication application) {\n\t\treturn (WebApplicationContext) application.run();\n\t}", "doc_comment": "/**\n\t * Called to run a fully configured {@link SpringApplication}.\n\t * @param application the application to run\n\t * @return the {@link WebApplicationContext}\n\t */"}, "code_tokens": ["WebApplicationContext", "run", "protected", "(", ")", "{", "}", "@", "Nullable", "SpringApplication", "application", "return", ";", "(", "WebApplicationContext", ")", "application", ".", "run", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 32, "ast_depth": 8, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 12, "n_words": 10, "nloc": 3, "token_counts": 21}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/web/servlet/support/SpringBootServletInitializer.java#208-214", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/web/servlet/support/SpringBootServletInitializer.java", "language": "Java"}, "method": {"name": "getExistingRootWebApplicationContext", "qualified_name": "org.springframework.boot.web.servlet.support.SpringBootServletInitializer#getExistingRootWebApplicationContext", "start_line": 208, "end_line": 214, "signature": "getExistingRootWebApplicationContext(ServletContext servletContext)", "original_code": "private @Nullable ApplicationContext getExistingRootWebApplicationContext(ServletContext servletContext) {\n\t\tObject context = servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE);\n\t\tif (context instanceof ApplicationContext applicationContext) {\n\t\t\treturn applicationContext;\n\t\t}\n\t\treturn null;\n\t}", "doc_comment": ""}, "code_tokens": ["ApplicationContext", "getExistingRootWebApplicationContext", "private", "(", ")", "{", "}", "@", "Nullable", "ServletContext", "servletContext", "Object", ";", "if", "return", "null", ";", "context", "=", "(", ")", "{", "}", "servletContext", ".", "getAttribute", "context", "instanceof", "ApplicationContext", "applicationContext", "return", "applicationContext", ";", "(", ")", "WebApplicationContext", ".", "ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 56, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 24, "n_whitespaces": 33, "n_words": 21, "nloc": 7, "token_counts": 38}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/web/servlet/support/SpringBootServletInitializer.java#225-227", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/web/servlet/support/SpringBootServletInitializer.java", "language": "Java"}, "method": {"name": "configure", "qualified_name": "org.springframework.boot.web.servlet.support.SpringBootServletInitializer#configure", "start_line": 225, "end_line": 227, "signature": "configure(SpringApplicationBuilder builder)", "original_code": "protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) {\n\t\treturn builder;\n\t}", "doc_comment": "/**\n\t * Configure the application. Normally all you would need to do is to add sources\n\t * (e.g. config classes) because other settings have sensible defaults. You might\n\t * choose (for instance) to add default command line arguments, or set an active\n\t * Spring profile.\n\t * @param builder a builder for the application context\n\t * @return the application builder\n\t * @see SpringApplicationBuilder\n\t */"}, "code_tokens": ["SpringApplicationBuilder", "configure", "protected", "(", ")", "{", "}", "SpringApplicationBuilder", "builder", "return", "builder", ";"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 19, "ast_depth": 5, "n_identifiers": 2, "vocab_size": 10, "n_whitespaces": 10, "n_words": 7, "nloc": 3, "token_counts": 12}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/web/servlet/support/SpringBootServletInitializer.java#242-248", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/web/servlet/support/SpringBootServletInitializer.java", "language": "Java"}, "method": {"name": "onApplicationEvent", "qualified_name": "org.springframework.boot.web.servlet.support.SpringBootServletInitializer#onApplicationEvent", "start_line": 242, "end_line": 248, "signature": "onApplicationEvent(ApplicationEnvironmentPreparedEvent event)", "original_code": "@Override\n\t\tpublic void onApplicationEvent(ApplicationEnvironmentPreparedEvent event) {\n\t\t\tConfigurableEnvironment environment = event.getEnvironment();\n\t\t\tif (environment instanceof ConfigurableWebEnvironment configurableWebEnvironment) {\n\t\t\t\tconfigurableWebEnvironment.initPropertySources(this.servletContext, null);\n\t\t\t}\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "onApplicationEvent", "public", "(", ")", "{", "}", "@", "Override", "ApplicationEnvironmentPreparedEvent", "event", "ConfigurableEnvironment", ";", "if", "environment", "=", "(", ")", "{", "}", "event", ".", "getEnvironment", "environment", "instanceof", "ConfigurableWebEnvironment", "configurableWebEnvironment", ";", "(", ")", "configurableWebEnvironment", ".", "initPropertySources", "(", ",", "null", ")", "this", ".", "servletContext"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 59, "ast_depth": 10, "n_identifiers": 8, "vocab_size": 26, "n_whitespaces": 36, "n_words": 20, "nloc": 7, "token_counts": 40}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/web/servlet/support/SpringBootServletInitializer.java#250-253", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/web/servlet/support/SpringBootServletInitializer.java", "language": "Java"}, "method": {"name": "getOrder", "qualified_name": "org.springframework.boot.web.servlet.support.SpringBootServletInitializer#getOrder", "start_line": 250, "end_line": 253, "signature": "getOrder()", "original_code": "@Override\n\t\tpublic int getOrder() {\n\t\t\treturn Ordered.HIGHEST_PRECEDENCE;\n\t\t}", "doc_comment": ""}, "code_tokens": ["getOrder", "public", "int", "(", ")", "{", "}", "@", "Override", "return", ";", "Ordered", ".", "HIGHEST_PRECEDENCE"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 23, "ast_depth": 6, "n_identifiers": 4, "vocab_size": 14, "n_whitespaces": 14, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/web/servlet/support/SpringBootServletInitializer.java#269-272", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/web/servlet/support/SpringBootServletInitializer.java", "language": "Java"}, "method": {"name": "contextInitialized", "qualified_name": "org.springframework.boot.web.servlet.support.SpringBootServletInitializer#contextInitialized", "start_line": 269, "end_line": 272, "signature": "contextInitialized(ServletContextEvent event)", "original_code": "@Override\n\t\tpublic void contextInitialized(ServletContextEvent event) {\n\t\t\t// no-op because the application context is already initialized\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "contextInitialized", "public", "(", ")", "{", "// no-op because the application context is already initialized", "}", "@", "Override", "ServletContextEvent", "event"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 19, "ast_depth": 5, "n_identifiers": 3, "vocab_size": 12, "n_whitespaces": 22, "n_words": 15, "nloc": 4, "token_counts": 12}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/web/servlet/support/SpringBootServletInitializer.java#274-287", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/web/servlet/support/SpringBootServletInitializer.java", "language": "Java"}, "method": {"name": "contextDestroyed", "qualified_name": "org.springframework.boot.web.servlet.support.SpringBootServletInitializer#contextDestroyed", "start_line": 274, "end_line": 287, "signature": "contextDestroyed(ServletContextEvent event)", "original_code": "@Override\n\t\tpublic void contextDestroyed(ServletContextEvent event) {\n\t\t\ttry {\n\t\t\t\tsuper.contextDestroyed(event);\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\t// Use original context so that the classloader can be accessed\n\t\t\t\tderegisterJdbcDrivers(this.servletContext);\n\t\t\t\t// Shut down shared reactor schedulers tied to this classloader\n\t\t\t\tif (REACTOR_PRESENT) {\n\t\t\t\t\tshutDownSharedReactorSchedulers(this.servletContext);\n\t\t\t\t}\n\t\t\t}\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "contextDestroyed", "public", "(", ")", "{", "}", "@", "Override", "ServletContextEvent", "event", "try", "{", "}", "finally", ";", "{", "// Use original context so that the classloader can be accessed", "// Shut down shared reactor schedulers tied to this classloader", "}", "super", ".", "contextDestroyed", ";", "if", "(", "event", ")", "deregisterJdbcDrivers", "(", "REACTOR_PRESENT", ")", "{", "}", "(", ")", ";", "this", ".", "servletContext", "shutDownSharedReactorSchedulers", "(", ")", "this", ".", "servletContext"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 71, "ast_depth": 13, "n_identifiers": 7, "vocab_size": 24, "n_whitespaces": 85, "n_words": 38, "nloc": 14, "token_counts": 46}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/web/servlet/support/SpringBootServletInitializer.java#299-316", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/web/servlet/support/SpringBootServletInitializer.java", "language": "Java"}, "method": {"name": "create", "qualified_name": "org.springframework.boot.web.servlet.support.SpringBootServletInitializer#create", "start_line": 299, "end_line": 316, "signature": "create(@Nullable WebApplicationType webApplicationType)", "original_code": "@Override\n\t\tpublic ConfigurableApplicationContext create(@Nullable WebApplicationType webApplicationType) {\n\t\t\treturn new AnnotationConfigServletWebApplicationContext() {\n\n\t\t\t\t@Override\n\t\t\t\tprotected void onRefresh() {\n\t\t\t\t\tsuper.onRefresh();\n\t\t\t\t\ttry {\n\t\t\t\t\t\tnew WebApplicationContextInitializer(this)\n\t\t\t\t\t\t\t.initialize(WarDeploymentApplicationContextFactory.this.servletContext);\n\t\t\t\t\t}\n\t\t\t\t\tcatch (ServletException ex) {\n\t\t\t\t\t\tthrow new RuntimeException(ex);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t};\n\t\t}", "doc_comment": ""}, "code_tokens": ["ConfigurableApplicationContext", "create", "public", "(", ")", "{", "}", "@", "Override", "WebApplicationType", "webApplicationType", "return", ";", "new", "AnnotationConfigServletWebApplicationContext", "@", "Nullable", "(", ")", "{", "}", "void", "onRefresh", "protected", "(", ")", "{", "}", "@", "Override", ";", "try", "super", ".", "onRefresh", "{", "}", "catch", "(", ")", "(", ")", ";", "ex", "{", "}", ".", "initialize", "ServletException", "throw", ";", "new", "WebApplicationContextInitializer", "(", ")", "new", "RuntimeException", "(", "this", ")", ".", "servletContext", "(", "ex", ")", "WarDeploymentApplicationContextFactory", ".", "this"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 105, "ast_depth": 16, "n_identifiers": 9, "vocab_size": 32, "n_whitespaces": 101, "n_words": 31, "nloc": 16, "token_counts": 68}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/web/servlet/support/SpringBootServletInitializer.java#303-313", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/web/servlet/support/SpringBootServletInitializer.java", "language": "Java"}, "method": {"name": "onRefresh", "qualified_name": "org.springframework.boot.web.servlet.support.SpringBootServletInitializer#onRefresh", "start_line": 303, "end_line": 313, "signature": "onRefresh()", "original_code": "@Override\n\t\t\t\tprotected void onRefresh() {\n\t\t\t\t\tsuper.onRefresh();\n\t\t\t\t\ttry {\n\t\t\t\t\t\tnew WebApplicationContextInitializer(this)\n\t\t\t\t\t\t\t.initialize(WarDeploymentApplicationContextFactory.this.servletContext);\n\t\t\t\t\t}\n\t\t\t\t\tcatch (ServletException ex) {\n\t\t\t\t\t\tthrow new RuntimeException(ex);\n\t\t\t\t\t}\n\t\t\t\t}", "doc_comment": ""}, "code_tokens": ["void", "onRefresh", "protected", "(", ")", "{", "}", "@", "Override", ";", "try", "super", ".", "onRefresh", "{", "}", "catch", "(", ")", "(", ")", ";", "ex", "{", "}", ".", "initialize", "ServletException", "throw", ";", "new", "WebApplicationContextInitializer", "(", ")", "new", "RuntimeException", "(", "this", ")", ".", "servletContext", "(", "ex", ")", "WarDeploymentApplicationContextFactory", ".", "this"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 72, "ast_depth": 11, "n_identifiers": 6, "vocab_size": 24, "n_whitespaces": 72, "n_words": 21, "nloc": 11, "token_counts": 47}}
{"dataset_split": "train", "id": "spring-boot@aac1845:core/spring-boot/src/main/java/org/springframework/boot/web/servlet/support/SpringBootServletInitializer.java#318-321", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "aac1845cacf398a89f5ab6144eae3cfd02bb7537", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/web/servlet/support/SpringBootServletInitializer.java", "language": "Java"}, "method": {"name": "createEnvironment", "qualified_name": "org.springframework.boot.web.servlet.support.SpringBootServletInitializer#createEnvironment", "start_line": 318, "end_line": 321, "signature": "createEnvironment(@Nullable WebApplicationType webApplicationType)", "original_code": "@Override\n\t\tpublic ConfigurableEnvironment createEnvironment(@Nullable WebApplicationType webApplicationType) {\n\t\t\treturn new ApplicationServletEnvironment();\n\t\t}", "doc_comment": ""}, "code_tokens": ["ConfigurableEnvironment", "createEnvironment", "public", "(", ")", "{", "}", "@", "Override", "WebApplicationType", "webApplicationType", "return", ";", "new", "ApplicationServletEnvironment", "@", "Nullable", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 31, "ast_depth": 7, "n_identifiers": 4, "vocab_size": 16, "n_whitespaces": 17, "n_words": 10, "nloc": 4, "token_counts": 19}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#103-122", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "isEqualTo", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#isEqualTo", "start_line": 103, "end_line": 122, "signature": "isEqualTo(@Nullable Object expected)", "original_code": "@Override\n\tpublic JsonContentAssert isEqualTo(@Nullable Object expected) {\n\t\tif (expected == null || expected instanceof CharSequence) {\n\t\t\treturn isEqualToJson((CharSequence) expected);\n\t\t}\n\t\tif (expected instanceof byte[] bytes) {\n\t\t\treturn isEqualToJson(bytes);\n\t\t}\n\t\tif (expected instanceof File file) {\n\t\t\treturn isEqualToJson(file);\n\t\t}\n\t\tif (expected instanceof InputStream inputStream) {\n\t\t\treturn isEqualToJson(inputStream);\n\t\t}\n\t\tif (expected instanceof Resource resource) {\n\t\t\treturn isEqualToJson(resource);\n\t\t}\n\t\tfailWithMessage(\"Unsupported type for JSON assert %s\", expected.getClass());\n\t\treturn this;\n\t}", "doc_comment": "/**\n\t * Overridden version of {@code isEqualTo} to perform JSON tests based on the object\n\t * type.\n\t * @see org.assertj.core.api.AbstractAssert#isEqualTo(java.lang.Object)\n\t */"}, "code_tokens": ["JsonContentAssert", "isEqualTo", "public", "(", ")", "{", "}", "@", "Override", "Object", "expected", "if", "if", "if", "if", "if", ";", "return", "this", ";", "(", ")", "{", "}", "(", ")", "{", "}", "(", ")", "{", "}", "(", ")", "{", "}", "(", ")", "{", "}", "failWithMessage", "@", "Nullable", "||", "return", ";", "expected", "instanceof", "bytes", "return", ";", "expected", "instanceof", "File", "file", "return", ";", "expected", "instanceof", "InputStream", "inputStream", "return", ";", "expected", "instanceof", "Resource", "resource", "return", ";", "(", ",", ")", "expected", "==", "null", "expected", "instanceof", "CharSequence", "isEqualToJson", "isEqualToJson", "isEqualToJson", "isEqualToJson", "isEqualToJson", "\"", "Unsupported type for JSON assert %s", "\"", "expected", ".", "getClass", "(", ")", "byte", "[", "]", "(", "bytes", ")", "(", "file", ")", "(", "inputStream", ")", "(", "resource", ")", "(", ")", "(", "CharSequence", ")", "expected"], "metrics": {"cyclomatic_complexity": 7, "n_ast_nodes": 169, "ast_depth": 10, "n_identifiers": 11, "vocab_size": 38, "n_whitespaces": 106, "n_words": 60, "nloc": 20, "token_counts": 112}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#134-137", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "isEqualToJson", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#isEqualToJson", "start_line": 134, "end_line": 137, "signature": "isEqualToJson(@Nullable CharSequence expected)", "original_code": "public JsonContentAssert isEqualToJson(@Nullable CharSequence expected) {\n\t\tString expectedJson = this.loader.getJson(expected);\n\t\treturn assertNotFailed(compare(expectedJson, JSONCompareMode.LENIENT));\n\t}", "doc_comment": "/**\n\t * Verifies that the actual value is {@link JSONCompareMode#LENIENT leniently} equal\n\t * to the specified JSON. The {@code expected} value can contain the JSON itself or,\n\t * if it ends with {@code .json}, the name of a resource to be loaded using\n\t * {@code resourceLoadClass}.\n\t * @param expected the expected JSON or the name of a resource containing the expected\n\t * JSON\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the actual JSON value is not equal to the given one\n\t */"}, "code_tokens": ["JsonContentAssert", "isEqualToJson", "public", "(", ")", "{", "}", "CharSequence", "expected", "String", ";", "return", ";", "expectedJson", "=", "assertNotFailed", "@", "Nullable", ".", "getJson", "(", ")", "this", ".", "loader", "(", "expected", ")", "compare", "(", "expectedJson", ",", ")", "JSONCompareMode", ".", "LENIENT"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 55, "ast_depth": 10, "n_identifiers": 10, "vocab_size": 25, "n_whitespaces": 18, "n_words": 18, "nloc": 4, "token_counts": 36}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#147-150", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "isEqualToJson", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#isEqualToJson", "start_line": 147, "end_line": 150, "signature": "isEqualToJson(String path, Class<?> resourceLoadClass)", "original_code": "public JsonContentAssert isEqualToJson(String path, Class<?> resourceLoadClass) {\n\t\tString expectedJson = this.loader.getJson(path, resourceLoadClass);\n\t\treturn assertNotFailed(compare(expectedJson, JSONCompareMode.LENIENT));\n\t}", "doc_comment": "/**\n\t * Verifies that the actual value is {@link JSONCompareMode#LENIENT leniently} equal\n\t * to the specified JSON resource.\n\t * @param path the name of a resource containing the expected JSON\n\t * @param resourceLoadClass the source class used to load the resource\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the actual JSON value is not equal to the given one\n\t */"}, "code_tokens": ["JsonContentAssert", "isEqualToJson", "public", "(", ",", ")", "{", "}", "String", "path", "resourceLoadClass", "String", ";", "return", ";", "Class", "expectedJson", "=", "assertNotFailed", "<", ">", ".", "getJson", "(", ")", "?", "this", ".", "loader", "(", "path", ",", "resourceLoadClass", ")", "compare", "(", "expectedJson", ",", ")", "JSONCompareMode", ".", "LENIENT"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 63, "ast_depth": 10, "n_identifiers": 10, "vocab_size": 27, "n_whitespaces": 20, "n_words": 20, "nloc": 4, "token_counts": 42}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#159-162", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "isEqualToJson", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#isEqualToJson", "start_line": 159, "end_line": 162, "signature": "isEqualToJson(byte[] expected)", "original_code": "public JsonContentAssert isEqualToJson(byte[] expected) {\n\t\tString expectedJson = this.loader.getJson(expected);\n\t\treturn assertNotFailed(compare(expectedJson, JSONCompareMode.LENIENT));\n\t}", "doc_comment": "/**\n\t * Verifies that the actual value is {@link JSONCompareMode#LENIENT leniently} equal\n\t * to the specified JSON bytes.\n\t * @param expected the expected JSON bytes\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the actual JSON value is not equal to the given one\n\t */"}, "code_tokens": ["JsonContentAssert", "isEqualToJson", "public", "(", ")", "{", "}", "expected", "String", ";", "return", ";", "expectedJson", "=", "assertNotFailed", "byte", "[", "]", ".", "getJson", "(", ")", "this", ".", "loader", "(", "expected", ")", "compare", "(", "expectedJson", ",", ")", "JSONCompareMode", ".", "LENIENT"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 56, "ast_depth": 10, "n_identifiers": 9, "vocab_size": 25, "n_whitespaces": 17, "n_words": 17, "nloc": 4, "token_counts": 36}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#171-174", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "isEqualToJson", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#isEqualToJson", "start_line": 171, "end_line": 174, "signature": "isEqualToJson(File expected)", "original_code": "public JsonContentAssert isEqualToJson(File expected) {\n\t\tString expectedJson = this.loader.getJson(expected);\n\t\treturn assertNotFailed(compare(expectedJson, JSONCompareMode.LENIENT));\n\t}", "doc_comment": "/**\n\t * Verifies that the actual value is {@link JSONCompareMode#LENIENT leniently} equal\n\t * to the specified JSON file.\n\t * @param expected a file containing the expected JSON\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the actual JSON value is not equal to the given one\n\t */"}, "code_tokens": ["JsonContentAssert", "isEqualToJson", "public", "(", ")", "{", "}", "File", "expected", "String", ";", "return", ";", "expectedJson", "=", "assertNotFailed", ".", "getJson", "(", ")", "this", ".", "loader", "(", "expected", ")", "compare", "(", "expectedJson", ",", ")", "JSONCompareMode", ".", "LENIENT"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 51, "ast_depth": 10, "n_identifiers": 9, "vocab_size": 23, "n_whitespaces": 17, "n_words": 17, "nloc": 4, "token_counts": 34}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#183-186", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "isEqualToJson", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#isEqualToJson", "start_line": 183, "end_line": 186, "signature": "isEqualToJson(InputStream expected)", "original_code": "public JsonContentAssert isEqualToJson(InputStream expected) {\n\t\tString expectedJson = this.loader.getJson(expected);\n\t\treturn assertNotFailed(compare(expectedJson, JSONCompareMode.LENIENT));\n\t}", "doc_comment": "/**\n\t * Verifies that the actual value is {@link JSONCompareMode#LENIENT leniently} equal\n\t * to the specified JSON input stream.\n\t * @param expected an input stream containing the expected JSON\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the actual JSON value is not equal to the given one\n\t */"}, "code_tokens": ["JsonContentAssert", "isEqualToJson", "public", "(", ")", "{", "}", "InputStream", "expected", "String", ";", "return", ";", "expectedJson", "=", "assertNotFailed", ".", "getJson", "(", ")", "this", ".", "loader", "(", "expected", ")", "compare", "(", "expectedJson", ",", ")", "JSONCompareMode", ".", "LENIENT"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 51, "ast_depth": 10, "n_identifiers": 9, "vocab_size": 23, "n_whitespaces": 17, "n_words": 17, "nloc": 4, "token_counts": 34}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#195-198", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "isEqualToJson", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#isEqualToJson", "start_line": 195, "end_line": 198, "signature": "isEqualToJson(Resource expected)", "original_code": "public JsonContentAssert isEqualToJson(Resource expected) {\n\t\tString expectedJson = this.loader.getJson(expected);\n\t\treturn assertNotFailed(compare(expectedJson, JSONCompareMode.LENIENT));\n\t}", "doc_comment": "/**\n\t * Verifies that the actual value is {@link JSONCompareMode#LENIENT leniently} equal\n\t * to the specified JSON resource.\n\t * @param expected a resource containing the expected JSON\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the actual JSON value is not equal to the given one\n\t */"}, "code_tokens": ["JsonContentAssert", "isEqualToJson", "public", "(", ")", "{", "}", "Resource", "expected", "String", ";", "return", ";", "expectedJson", "=", "assertNotFailed", ".", "getJson", "(", ")", "this", ".", "loader", "(", "expected", ")", "compare", "(", "expectedJson", ",", ")", "JSONCompareMode", ".", "LENIENT"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 51, "ast_depth": 10, "n_identifiers": 9, "vocab_size": 23, "n_whitespaces": 17, "n_words": 17, "nloc": 4, "token_counts": 34}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#210-213", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "isStrictlyEqualToJson", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#isStrictlyEqualToJson", "start_line": 210, "end_line": 213, "signature": "isStrictlyEqualToJson(CharSequence expected)", "original_code": "public JsonContentAssert isStrictlyEqualToJson(CharSequence expected) {\n\t\tString expectedJson = this.loader.getJson(expected);\n\t\treturn assertNotFailed(compare(expectedJson, JSONCompareMode.STRICT));\n\t}", "doc_comment": "/**\n\t * Verifies that the actual value is {@link JSONCompareMode#STRICT strictly} equal to\n\t * the specified JSON. The {@code expected} value can contain the JSON itself or, if\n\t * it ends with {@code .json}, the name of a resource to be loaded using\n\t * {@code resourceLoadClass}.\n\t * @param expected the expected JSON or the name of a resource containing the expected\n\t * JSON\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the actual JSON value is not equal to the given one\n\t */"}, "code_tokens": ["JsonContentAssert", "isStrictlyEqualToJson", "public", "(", ")", "{", "}", "CharSequence", "expected", "String", ";", "return", ";", "expectedJson", "=", "assertNotFailed", ".", "getJson", "(", ")", "this", ".", "loader", "(", "expected", ")", "compare", "(", "expectedJson", ",", ")", "JSONCompareMode", ".", "STRICT"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 51, "ast_depth": 10, "n_identifiers": 9, "vocab_size": 23, "n_whitespaces": 17, "n_words": 17, "nloc": 4, "token_counts": 34}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#223-226", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "isStrictlyEqualToJson", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#isStrictlyEqualToJson", "start_line": 223, "end_line": 226, "signature": "isStrictlyEqualToJson(String path, Class<?> resourceLoadClass)", "original_code": "public JsonContentAssert isStrictlyEqualToJson(String path, Class<?> resourceLoadClass) {\n\t\tString expectedJson = this.loader.getJson(path, resourceLoadClass);\n\t\treturn assertNotFailed(compare(expectedJson, JSONCompareMode.STRICT));\n\t}", "doc_comment": "/**\n\t * Verifies that the actual value is {@link JSONCompareMode#STRICT strictly} equal to\n\t * the specified JSON resource.\n\t * @param path the name of a resource containing the expected JSON\n\t * @param resourceLoadClass the source class used to load the resource\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the actual JSON value is not equal to the given one\n\t */"}, "code_tokens": ["JsonContentAssert", "isStrictlyEqualToJson", "public", "(", ",", ")", "{", "}", "String", "path", "resourceLoadClass", "String", ";", "return", ";", "Class", "expectedJson", "=", "assertNotFailed", "<", ">", ".", "getJson", "(", ")", "?", "this", ".", "loader", "(", "path", ",", "resourceLoadClass", ")", "compare", "(", "expectedJson", ",", ")", "JSONCompareMode", ".", "STRICT"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 63, "ast_depth": 10, "n_identifiers": 10, "vocab_size": 27, "n_whitespaces": 20, "n_words": 20, "nloc": 4, "token_counts": 42}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#235-237", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "isStrictlyEqualToJson", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#isStrictlyEqualToJson", "start_line": 235, "end_line": 237, "signature": "isStrictlyEqualToJson(byte[] expected)", "original_code": "public JsonContentAssert isStrictlyEqualToJson(byte[] expected) {\n\t\treturn assertNotFailed(compare(this.loader.getJson(expected), JSONCompareMode.STRICT));\n\t}", "doc_comment": "/**\n\t * Verifies that the actual value is {@link JSONCompareMode#STRICT strictly} equal to\n\t * the specified JSON bytes.\n\t * @param expected the expected JSON bytes\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the actual JSON value is not equal to the given one\n\t */"}, "code_tokens": ["JsonContentAssert", "isStrictlyEqualToJson", "public", "(", ")", "{", "}", "expected", "return", ";", "assertNotFailed", "byte", "[", "]", "(", ")", "compare", "(", ",", ")", ".", "getJson", "JSONCompareMode", ".", "STRICT", "this", ".", "loader", "(", "expected", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 49, "ast_depth": 11, "n_identifiers": 8, "vocab_size": 22, "n_whitespaces": 11, "n_words": 14, "nloc": 3, "token_counts": 31}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#246-249", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "isStrictlyEqualToJson", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#isStrictlyEqualToJson", "start_line": 246, "end_line": 249, "signature": "isStrictlyEqualToJson(File expected)", "original_code": "public JsonContentAssert isStrictlyEqualToJson(File expected) {\n\t\tString expectedJson = this.loader.getJson(expected);\n\t\treturn assertNotFailed(compare(expectedJson, JSONCompareMode.STRICT));\n\t}", "doc_comment": "/**\n\t * Verifies that the actual value is {@link JSONCompareMode#STRICT strictly} equal to\n\t * the specified JSON file.\n\t * @param expected a file containing the expected JSON\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the actual JSON value is not equal to the given one\n\t */"}, "code_tokens": ["JsonContentAssert", "isStrictlyEqualToJson", "public", "(", ")", "{", "}", "File", "expected", "String", ";", "return", ";", "expectedJson", "=", "assertNotFailed", ".", "getJson", "(", ")", "this", ".", "loader", "(", "expected", ")", "compare", "(", "expectedJson", ",", ")", "JSONCompareMode", ".", "STRICT"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 51, "ast_depth": 10, "n_identifiers": 9, "vocab_size": 23, "n_whitespaces": 17, "n_words": 17, "nloc": 4, "token_counts": 34}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#258-261", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "isStrictlyEqualToJson", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#isStrictlyEqualToJson", "start_line": 258, "end_line": 261, "signature": "isStrictlyEqualToJson(InputStream expected)", "original_code": "public JsonContentAssert isStrictlyEqualToJson(InputStream expected) {\n\t\tString expectedJson = this.loader.getJson(expected);\n\t\treturn assertNotFailed(compare(expectedJson, JSONCompareMode.STRICT));\n\t}", "doc_comment": "/**\n\t * Verifies that the actual value is {@link JSONCompareMode#STRICT strictly} equal to\n\t * the specified JSON input stream.\n\t * @param expected an input stream containing the expected JSON\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the actual JSON value is not equal to the given one\n\t */"}, "code_tokens": ["JsonContentAssert", "isStrictlyEqualToJson", "public", "(", ")", "{", "}", "InputStream", "expected", "String", ";", "return", ";", "expectedJson", "=", "assertNotFailed", ".", "getJson", "(", ")", "this", ".", "loader", "(", "expected", ")", "compare", "(", "expectedJson", ",", ")", "JSONCompareMode", ".", "STRICT"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 51, "ast_depth": 10, "n_identifiers": 9, "vocab_size": 23, "n_whitespaces": 17, "n_words": 17, "nloc": 4, "token_counts": 34}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#270-273", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "isStrictlyEqualToJson", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#isStrictlyEqualToJson", "start_line": 270, "end_line": 273, "signature": "isStrictlyEqualToJson(Resource expected)", "original_code": "public JsonContentAssert isStrictlyEqualToJson(Resource expected) {\n\t\tString expectedJson = this.loader.getJson(expected);\n\t\treturn assertNotFailed(compare(expectedJson, JSONCompareMode.STRICT));\n\t}", "doc_comment": "/**\n\t * Verifies that the actual value is {@link JSONCompareMode#STRICT strictly} equal to\n\t * the specified JSON resource.\n\t * @param expected a resource containing the expected JSON\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the actual JSON value is not equal to the given one\n\t */"}, "code_tokens": ["JsonContentAssert", "isStrictlyEqualToJson", "public", "(", ")", "{", "}", "Resource", "expected", "String", ";", "return", ";", "expectedJson", "=", "assertNotFailed", ".", "getJson", "(", ")", "this", ".", "loader", "(", "expected", ")", "compare", "(", "expectedJson", ",", ")", "JSONCompareMode", ".", "STRICT"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 51, "ast_depth": 10, "n_identifiers": 9, "vocab_size": 23, "n_whitespaces": 17, "n_words": 17, "nloc": 4, "token_counts": 34}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#285-288", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "isEqualToJson", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#isEqualToJson", "start_line": 285, "end_line": 288, "signature": "isEqualToJson(CharSequence expected, JSONCompareMode compareMode)", "original_code": "public JsonContentAssert isEqualToJson(CharSequence expected, JSONCompareMode compareMode) {\n\t\tString expectedJson = this.loader.getJson(expected);\n\t\treturn assertNotFailed(compare(expectedJson, compareMode));\n\t}", "doc_comment": "/**\n\t * Verifies that the actual value is equal to the specified JSON. The {@code expected}\n\t * value can contain the JSON itself or, if it ends with {@code .json}, the name of a\n\t * resource to be loaded using {@code resourceLoadClass}.\n\t * @param expected the expected JSON or the name of a resource containing the expected\n\t * JSON\n\t * @param compareMode the compare mode used when checking\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the actual JSON value is not equal to the given one\n\t */"}, "code_tokens": ["JsonContentAssert", "isEqualToJson", "public", "(", ",", ")", "{", "}", "CharSequence", "expected", "JSONCompareMode", "compareMode", "String", ";", "return", ";", "expectedJson", "=", "assertNotFailed", ".", "getJson", "(", ")", "this", ".", "loader", "(", "expected", ")", "compare", "(", "expectedJson", ",", "compareMode", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 52, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 23, "n_whitespaces": 19, "n_words": 18, "nloc": 4, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#298-301", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "isEqualToJson", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#isEqualToJson", "start_line": 298, "end_line": 301, "signature": "isEqualToJson(String path, Class<?> resourceLoadClass, JSONCompareMode compareMode)", "original_code": "public JsonContentAssert isEqualToJson(String path, Class<?> resourceLoadClass, JSONCompareMode compareMode) {\n\t\tString expectedJson = this.loader.getJson(path, resourceLoadClass);\n\t\treturn assertNotFailed(compare(expectedJson, compareMode));\n\t}", "doc_comment": "/**\n\t * Verifies that the actual value is equal to the specified JSON resource.\n\t * @param path the name of a resource containing the expected JSON\n\t * @param resourceLoadClass the source class used to load the resource\n\t * @param compareMode the compare mode used when checking\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the actual JSON value is not equal to the given one\n\t */"}, "code_tokens": ["JsonContentAssert", "isEqualToJson", "public", "(", ",", ",", ")", "{", "}", "String", "path", "resourceLoadClass", "JSONCompareMode", "compareMode", "String", ";", "return", ";", "Class", "expectedJson", "=", "assertNotFailed", "<", ">", ".", "getJson", "(", ")", "?", "this", ".", "loader", "(", "path", ",", "resourceLoadClass", ")", "compare", "(", "expectedJson", ",", "compareMode", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 64, "ast_depth": 9, "n_identifiers": 9, "vocab_size": 27, "n_whitespaces": 22, "n_words": 21, "nloc": 4, "token_counts": 43}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#310-313", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "isEqualToJson", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#isEqualToJson", "start_line": 310, "end_line": 313, "signature": "isEqualToJson(byte[] expected, JSONCompareMode compareMode)", "original_code": "public JsonContentAssert isEqualToJson(byte[] expected, JSONCompareMode compareMode) {\n\t\tString expectedJson = this.loader.getJson(expected);\n\t\treturn assertNotFailed(compare(expectedJson, compareMode));\n\t}", "doc_comment": "/**\n\t * Verifies that the actual value is equal to the specified JSON bytes.\n\t * @param expected the expected JSON bytes\n\t * @param compareMode the compare mode used when checking\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the actual JSON value is not equal to the given one\n\t */"}, "code_tokens": ["JsonContentAssert", "isEqualToJson", "public", "(", ",", ")", "{", "}", "expected", "JSONCompareMode", "compareMode", "String", ";", "return", ";", "expectedJson", "=", "assertNotFailed", "byte", "[", "]", ".", "getJson", "(", ")", "this", ".", "loader", "(", "expected", ")", "compare", "(", "expectedJson", ",", "compareMode", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 57, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 25, "n_whitespaces": 19, "n_words": 18, "nloc": 4, "token_counts": 37}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#322-325", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "isEqualToJson", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#isEqualToJson", "start_line": 322, "end_line": 325, "signature": "isEqualToJson(File expected, JSONCompareMode compareMode)", "original_code": "public JsonContentAssert isEqualToJson(File expected, JSONCompareMode compareMode) {\n\t\tString expectedJson = this.loader.getJson(expected);\n\t\treturn assertNotFailed(compare(expectedJson, compareMode));\n\t}", "doc_comment": "/**\n\t * Verifies that the actual value is equal to the specified JSON file.\n\t * @param expected a file containing the expected JSON\n\t * @param compareMode the compare mode used when checking\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the actual JSON value is not equal to the given one\n\t */"}, "code_tokens": ["JsonContentAssert", "isEqualToJson", "public", "(", ",", ")", "{", "}", "File", "expected", "JSONCompareMode", "compareMode", "String", ";", "return", ";", "expectedJson", "=", "assertNotFailed", ".", "getJson", "(", ")", "this", ".", "loader", "(", "expected", ")", "compare", "(", "expectedJson", ",", "compareMode", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 52, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 23, "n_whitespaces": 19, "n_words": 18, "nloc": 4, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#334-336", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "isEqualToJson", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#isEqualToJson", "start_line": 334, "end_line": 336, "signature": "isEqualToJson(InputStream expected, JSONCompareMode compareMode)", "original_code": "public JsonContentAssert isEqualToJson(InputStream expected, JSONCompareMode compareMode) {\n\t\treturn assertNotFailed(compare(this.loader.getJson(expected), compareMode));\n\t}", "doc_comment": "/**\n\t * Verifies that the actual value is equal to the specified JSON input stream.\n\t * @param expected an input stream containing the expected JSON\n\t * @param compareMode the compare mode used when checking\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the actual JSON value is not equal to the given one\n\t */"}, "code_tokens": ["JsonContentAssert", "isEqualToJson", "public", "(", ",", ")", "{", "}", "InputStream", "expected", "JSONCompareMode", "compareMode", "return", ";", "assertNotFailed", "(", ")", "compare", "(", ",", "compareMode", ")", ".", "getJson", "this", ".", "loader", "(", "expected", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 45, "ast_depth": 11, "n_identifiers": 7, "vocab_size": 20, "n_whitespaces": 13, "n_words": 15, "nloc": 3, "token_counts": 30}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#345-348", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "isEqualToJson", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#isEqualToJson", "start_line": 345, "end_line": 348, "signature": "isEqualToJson(Resource expected, JSONCompareMode compareMode)", "original_code": "public JsonContentAssert isEqualToJson(Resource expected, JSONCompareMode compareMode) {\n\t\tString expectedJson = this.loader.getJson(expected);\n\t\treturn assertNotFailed(compare(expectedJson, compareMode));\n\t}", "doc_comment": "/**\n\t * Verifies that the actual value is equal to the specified JSON resource.\n\t * @param expected a resource containing the expected JSON\n\t * @param compareMode the compare mode used when checking\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the actual JSON value is not equal to the given one\n\t */"}, "code_tokens": ["JsonContentAssert", "isEqualToJson", "public", "(", ",", ")", "{", "}", "Resource", "expected", "JSONCompareMode", "compareMode", "String", ";", "return", ";", "expectedJson", "=", "assertNotFailed", ".", "getJson", "(", ")", "this", ".", "loader", "(", "expected", ")", "compare", "(", "expectedJson", ",", "compareMode", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 52, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 23, "n_whitespaces": 19, "n_words": 18, "nloc": 4, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#360-363", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "isEqualToJson", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#isEqualToJson", "start_line": 360, "end_line": 363, "signature": "isEqualToJson(CharSequence expected, JSONComparator comparator)", "original_code": "public JsonContentAssert isEqualToJson(CharSequence expected, JSONComparator comparator) {\n\t\tString expectedJson = this.loader.getJson(expected);\n\t\treturn assertNotFailed(compare(expectedJson, comparator));\n\t}", "doc_comment": "/**\n\t * Verifies that the actual value is equal to the specified JSON. The {@code expected}\n\t * value can contain the JSON itself or, if it ends with {@code .json}, the name of a\n\t * resource to be loaded using {@code resourceLoadClass}.\n\t * @param expected the expected JSON or the name of a resource containing the expected\n\t * JSON\n\t * @param comparator the comparator used when checking\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the actual JSON value is not equal to the given one\n\t */"}, "code_tokens": ["JsonContentAssert", "isEqualToJson", "public", "(", ",", ")", "{", "}", "CharSequence", "expected", "JSONComparator", "comparator", "String", ";", "return", ";", "expectedJson", "=", "assertNotFailed", ".", "getJson", "(", ")", "this", ".", "loader", "(", "expected", ")", "compare", "(", "expectedJson", ",", "comparator", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 52, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 23, "n_whitespaces": 19, "n_words": 18, "nloc": 4, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#373-376", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "isEqualToJson", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#isEqualToJson", "start_line": 373, "end_line": 376, "signature": "isEqualToJson(String path, Class<?> resourceLoadClass, JSONComparator comparator)", "original_code": "public JsonContentAssert isEqualToJson(String path, Class<?> resourceLoadClass, JSONComparator comparator) {\n\t\tString expectedJson = this.loader.getJson(path, resourceLoadClass);\n\t\treturn assertNotFailed(compare(expectedJson, comparator));\n\t}", "doc_comment": "/**\n\t * Verifies that the actual value is equal to the specified JSON resource.\n\t * @param path the name of a resource containing the expected JSON\n\t * @param resourceLoadClass the source class used to load the resource\n\t * @param comparator the comparator used when checking\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the actual JSON value is not equal to the given one\n\t */"}, "code_tokens": ["JsonContentAssert", "isEqualToJson", "public", "(", ",", ",", ")", "{", "}", "String", "path", "resourceLoadClass", "JSONComparator", "comparator", "String", ";", "return", ";", "Class", "expectedJson", "=", "assertNotFailed", "<", ">", ".", "getJson", "(", ")", "?", "this", ".", "loader", "(", "path", ",", "resourceLoadClass", ")", "compare", "(", "expectedJson", ",", "comparator", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 64, "ast_depth": 9, "n_identifiers": 9, "vocab_size": 27, "n_whitespaces": 22, "n_words": 21, "nloc": 4, "token_counts": 43}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#385-388", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "isEqualToJson", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#isEqualToJson", "start_line": 385, "end_line": 388, "signature": "isEqualToJson(byte[] expected, JSONComparator comparator)", "original_code": "public JsonContentAssert isEqualToJson(byte[] expected, JSONComparator comparator) {\n\t\tString expectedJson = this.loader.getJson(expected);\n\t\treturn assertNotFailed(compare(expectedJson, comparator));\n\t}", "doc_comment": "/**\n\t * Verifies that the actual value is equal to the specified JSON bytes.\n\t * @param expected the expected JSON bytes\n\t * @param comparator the comparator used when checking\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the actual JSON value is not equal to the given one\n\t */"}, "code_tokens": ["JsonContentAssert", "isEqualToJson", "public", "(", ",", ")", "{", "}", "expected", "JSONComparator", "comparator", "String", ";", "return", ";", "expectedJson", "=", "assertNotFailed", "byte", "[", "]", ".", "getJson", "(", ")", "this", ".", "loader", "(", "expected", ")", "compare", "(", "expectedJson", ",", "comparator", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 57, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 25, "n_whitespaces": 19, "n_words": 18, "nloc": 4, "token_counts": 37}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#397-400", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "isEqualToJson", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#isEqualToJson", "start_line": 397, "end_line": 400, "signature": "isEqualToJson(File expected, JSONComparator comparator)", "original_code": "public JsonContentAssert isEqualToJson(File expected, JSONComparator comparator) {\n\t\tString expectedJson = this.loader.getJson(expected);\n\t\treturn assertNotFailed(compare(expectedJson, comparator));\n\t}", "doc_comment": "/**\n\t * Verifies that the actual value is equal to the specified JSON file.\n\t * @param expected a file containing the expected JSON\n\t * @param comparator the comparator used when checking\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the actual JSON value is not equal to the given one\n\t */"}, "code_tokens": ["JsonContentAssert", "isEqualToJson", "public", "(", ",", ")", "{", "}", "File", "expected", "JSONComparator", "comparator", "String", ";", "return", ";", "expectedJson", "=", "assertNotFailed", ".", "getJson", "(", ")", "this", ".", "loader", "(", "expected", ")", "compare", "(", "expectedJson", ",", "comparator", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 52, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 23, "n_whitespaces": 19, "n_words": 18, "nloc": 4, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#409-412", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "isEqualToJson", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#isEqualToJson", "start_line": 409, "end_line": 412, "signature": "isEqualToJson(InputStream expected, JSONComparator comparator)", "original_code": "public JsonContentAssert isEqualToJson(InputStream expected, JSONComparator comparator) {\n\t\tString expectedJson = this.loader.getJson(expected);\n\t\treturn assertNotFailed(compare(expectedJson, comparator));\n\t}", "doc_comment": "/**\n\t * Verifies that the actual value is equal to the specified JSON input stream.\n\t * @param expected an input stream containing the expected JSON\n\t * @param comparator the comparator used when checking\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the actual JSON value is not equal to the given one\n\t */"}, "code_tokens": ["JsonContentAssert", "isEqualToJson", "public", "(", ",", ")", "{", "}", "InputStream", "expected", "JSONComparator", "comparator", "String", ";", "return", ";", "expectedJson", "=", "assertNotFailed", ".", "getJson", "(", ")", "this", ".", "loader", "(", "expected", ")", "compare", "(", "expectedJson", ",", "comparator", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 52, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 23, "n_whitespaces": 19, "n_words": 18, "nloc": 4, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#421-424", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "isEqualToJson", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#isEqualToJson", "start_line": 421, "end_line": 424, "signature": "isEqualToJson(Resource expected, JSONComparator comparator)", "original_code": "public JsonContentAssert isEqualToJson(Resource expected, JSONComparator comparator) {\n\t\tString expectedJson = this.loader.getJson(expected);\n\t\treturn assertNotFailed(compare(expectedJson, comparator));\n\t}", "doc_comment": "/**\n\t * Verifies that the actual value is equal to the specified JSON resource.\n\t * @param expected a resource containing the expected JSON\n\t * @param comparator the comparator used when checking\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the actual JSON value is not equal to the given one\n\t */"}, "code_tokens": ["JsonContentAssert", "isEqualToJson", "public", "(", ",", ")", "{", "}", "Resource", "expected", "JSONComparator", "comparator", "String", ";", "return", ";", "expectedJson", "=", "assertNotFailed", ".", "getJson", "(", ")", "this", ".", "loader", "(", "expected", ")", "compare", "(", "expectedJson", ",", "comparator", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 52, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 23, "n_whitespaces": 19, "n_words": 18, "nloc": 4, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#431-450", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "isNotEqualTo", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#isNotEqualTo", "start_line": 431, "end_line": 450, "signature": "isNotEqualTo(@Nullable Object expected)", "original_code": "@Override\n\tpublic JsonContentAssert isNotEqualTo(@Nullable Object expected) {\n\t\tif (expected == null || expected instanceof CharSequence) {\n\t\t\treturn isNotEqualToJson((CharSequence) expected);\n\t\t}\n\t\tif (expected instanceof byte[] bytes) {\n\t\t\treturn isNotEqualToJson(bytes);\n\t\t}\n\t\tif (expected instanceof File file) {\n\t\t\treturn isNotEqualToJson(file);\n\t\t}\n\t\tif (expected instanceof InputStream inputStream) {\n\t\t\treturn isNotEqualToJson(inputStream);\n\t\t}\n\t\tif (expected instanceof Resource resource) {\n\t\t\treturn isNotEqualToJson(resource);\n\t\t}\n\t\tfailWithMessage(\"Unsupported type for JSON assert %s\", expected.getClass());\n\t\treturn this;\n\t}", "doc_comment": "/**\n\t * Overridden version of {@code isNotEqualTo} to perform JSON tests based on the\n\t * object type.\n\t * @see org.assertj.core.api.AbstractAssert#isEqualTo(java.lang.Object)\n\t */"}, "code_tokens": ["JsonContentAssert", "isNotEqualTo", "public", "(", ")", "{", "}", "@", "Override", "Object", "expected", "if", "if", "if", "if", "if", ";", "return", "this", ";", "(", ")", "{", "}", "(", ")", "{", "}", "(", ")", "{", "}", "(", ")", "{", "}", "(", ")", "{", "}", "failWithMessage", "@", "Nullable", "||", "return", ";", "expected", "instanceof", "bytes", "return", ";", "expected", "instanceof", "File", "file", "return", ";", "expected", "instanceof", "InputStream", "inputStream", "return", ";", "expected", "instanceof", "Resource", "resource", "return", ";", "(", ",", ")", "expected", "==", "null", "expected", "instanceof", "CharSequence", "isNotEqualToJson", "isNotEqualToJson", "isNotEqualToJson", "isNotEqualToJson", "isNotEqualToJson", "\"", "Unsupported type for JSON assert %s", "\"", "expected", ".", "getClass", "(", ")", "byte", "[", "]", "(", "bytes", ")", "(", "file", ")", "(", "inputStream", ")", "(", "resource", ")", "(", ")", "(", "CharSequence", ")", "expected"], "metrics": {"cyclomatic_complexity": 7, "n_ast_nodes": 169, "ast_depth": 10, "n_identifiers": 11, "vocab_size": 38, "n_whitespaces": 106, "n_words": 60, "nloc": 20, "token_counts": 112}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#462-465", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "isNotEqualToJson", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#isNotEqualToJson", "start_line": 462, "end_line": 465, "signature": "isNotEqualToJson(@Nullable CharSequence expected)", "original_code": "public JsonContentAssert isNotEqualToJson(@Nullable CharSequence expected) {\n\t\tString expectedJson = this.loader.getJson(expected);\n\t\treturn assertNotPassed(compare(expectedJson, JSONCompareMode.LENIENT));\n\t}", "doc_comment": "/**\n\t * Verifies that the actual value is not {@link JSONCompareMode#LENIENT leniently}\n\t * equal to the specified JSON. The {@code expected} value can contain the JSON itself\n\t * or, if it ends with {@code .json}, the name of a resource to be loaded using\n\t * {@code resourceLoadClass}.\n\t * @param expected the expected JSON or the name of a resource containing the expected\n\t * JSON\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the actual JSON value is equal to the given one\n\t */"}, "code_tokens": ["JsonContentAssert", "isNotEqualToJson", "public", "(", ")", "{", "}", "CharSequence", "expected", "String", ";", "return", ";", "expectedJson", "=", "assertNotPassed", "@", "Nullable", ".", "getJson", "(", ")", "this", ".", "loader", "(", "expected", ")", "compare", "(", "expectedJson", ",", ")", "JSONCompareMode", ".", "LENIENT"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 55, "ast_depth": 10, "n_identifiers": 10, "vocab_size": 25, "n_whitespaces": 18, "n_words": 18, "nloc": 4, "token_counts": 36}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#475-478", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "isNotEqualToJson", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#isNotEqualToJson", "start_line": 475, "end_line": 478, "signature": "isNotEqualToJson(String path, Class<?> resourceLoadClass)", "original_code": "public JsonContentAssert isNotEqualToJson(String path, Class<?> resourceLoadClass) {\n\t\tString expectedJson = this.loader.getJson(path, resourceLoadClass);\n\t\treturn assertNotPassed(compare(expectedJson, JSONCompareMode.LENIENT));\n\t}", "doc_comment": "/**\n\t * Verifies that the actual value is not {@link JSONCompareMode#LENIENT leniently}\n\t * equal to the specified JSON resource.\n\t * @param path the name of a resource containing the expected JSON\n\t * @param resourceLoadClass the source class used to load the resource\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the actual JSON value is equal to the given one\n\t */"}, "code_tokens": ["JsonContentAssert", "isNotEqualToJson", "public", "(", ",", ")", "{", "}", "String", "path", "resourceLoadClass", "String", ";", "return", ";", "Class", "expectedJson", "=", "assertNotPassed", "<", ">", ".", "getJson", "(", ")", "?", "this", ".", "loader", "(", "path", ",", "resourceLoadClass", ")", "compare", "(", "expectedJson", ",", ")", "JSONCompareMode", ".", "LENIENT"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 63, "ast_depth": 10, "n_identifiers": 10, "vocab_size": 27, "n_whitespaces": 20, "n_words": 20, "nloc": 4, "token_counts": 42}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#487-490", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "isNotEqualToJson", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#isNotEqualToJson", "start_line": 487, "end_line": 490, "signature": "isNotEqualToJson(byte[] expected)", "original_code": "public JsonContentAssert isNotEqualToJson(byte[] expected) {\n\t\tString expectedJson = this.loader.getJson(expected);\n\t\treturn assertNotPassed(compare(expectedJson, JSONCompareMode.LENIENT));\n\t}", "doc_comment": "/**\n\t * Verifies that the actual value is not {@link JSONCompareMode#LENIENT leniently}\n\t * equal to the specified JSON bytes.\n\t * @param expected the expected JSON bytes\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the actual JSON value is equal to the given one\n\t */"}, "code_tokens": ["JsonContentAssert", "isNotEqualToJson", "public", "(", ")", "{", "}", "expected", "String", ";", "return", ";", "expectedJson", "=", "assertNotPassed", "byte", "[", "]", ".", "getJson", "(", ")", "this", ".", "loader", "(", "expected", ")", "compare", "(", "expectedJson", ",", ")", "JSONCompareMode", ".", "LENIENT"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 56, "ast_depth": 10, "n_identifiers": 9, "vocab_size": 25, "n_whitespaces": 17, "n_words": 17, "nloc": 4, "token_counts": 36}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#499-502", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "isNotEqualToJson", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#isNotEqualToJson", "start_line": 499, "end_line": 502, "signature": "isNotEqualToJson(File expected)", "original_code": "public JsonContentAssert isNotEqualToJson(File expected) {\n\t\tString expectedJson = this.loader.getJson(expected);\n\t\treturn assertNotPassed(compare(expectedJson, JSONCompareMode.LENIENT));\n\t}", "doc_comment": "/**\n\t * Verifies that the actual value is not {@link JSONCompareMode#LENIENT leniently}\n\t * equal to the specified JSON file.\n\t * @param expected a file containing the expected JSON\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the actual JSON value is equal to the given one\n\t */"}, "code_tokens": ["JsonContentAssert", "isNotEqualToJson", "public", "(", ")", "{", "}", "File", "expected", "String", ";", "return", ";", "expectedJson", "=", "assertNotPassed", ".", "getJson", "(", ")", "this", ".", "loader", "(", "expected", ")", "compare", "(", "expectedJson", ",", ")", "JSONCompareMode", ".", "LENIENT"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 51, "ast_depth": 10, "n_identifiers": 9, "vocab_size": 23, "n_whitespaces": 17, "n_words": 17, "nloc": 4, "token_counts": 34}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#511-514", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "isNotEqualToJson", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#isNotEqualToJson", "start_line": 511, "end_line": 514, "signature": "isNotEqualToJson(InputStream expected)", "original_code": "public JsonContentAssert isNotEqualToJson(InputStream expected) {\n\t\tString expectedJson = this.loader.getJson(expected);\n\t\treturn assertNotPassed(compare(expectedJson, JSONCompareMode.LENIENT));\n\t}", "doc_comment": "/**\n\t * Verifies that the actual value is not {@link JSONCompareMode#LENIENT leniently}\n\t * equal to the specified JSON input stream.\n\t * @param expected an input stream containing the expected JSON\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the actual JSON value is equal to the given one\n\t */"}, "code_tokens": ["JsonContentAssert", "isNotEqualToJson", "public", "(", ")", "{", "}", "InputStream", "expected", "String", ";", "return", ";", "expectedJson", "=", "assertNotPassed", ".", "getJson", "(", ")", "this", ".", "loader", "(", "expected", ")", "compare", "(", "expectedJson", ",", ")", "JSONCompareMode", ".", "LENIENT"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 51, "ast_depth": 10, "n_identifiers": 9, "vocab_size": 23, "n_whitespaces": 17, "n_words": 17, "nloc": 4, "token_counts": 34}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#523-525", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "isNotEqualToJson", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#isNotEqualToJson", "start_line": 523, "end_line": 525, "signature": "isNotEqualToJson(Resource expected)", "original_code": "public JsonContentAssert isNotEqualToJson(Resource expected) {\n\t\treturn assertNotPassed(compare(this.loader.getJson(expected), JSONCompareMode.LENIENT));\n\t}", "doc_comment": "/**\n\t * Verifies that the actual value is not {@link JSONCompareMode#LENIENT leniently}\n\t * equal to the specified JSON resource.\n\t * @param expected a resource containing the expected JSON\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the actual JSON value is equal to the given one\n\t */"}, "code_tokens": ["JsonContentAssert", "isNotEqualToJson", "public", "(", ")", "{", "}", "Resource", "expected", "return", ";", "assertNotPassed", "(", ")", "compare", "(", ",", ")", ".", "getJson", "JSONCompareMode", ".", "LENIENT", "this", ".", "loader", "(", "expected", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 44, "ast_depth": 11, "n_identifiers": 8, "vocab_size": 20, "n_whitespaces": 11, "n_words": 14, "nloc": 3, "token_counts": 29}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#537-540", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "isNotStrictlyEqualToJson", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#isNotStrictlyEqualToJson", "start_line": 537, "end_line": 540, "signature": "isNotStrictlyEqualToJson(CharSequence expected)", "original_code": "public JsonContentAssert isNotStrictlyEqualToJson(CharSequence expected) {\n\t\tString expectedJson = this.loader.getJson(expected);\n\t\treturn assertNotPassed(compare(expectedJson, JSONCompareMode.STRICT));\n\t}", "doc_comment": "/**\n\t * Verifies that the actual value is not {@link JSONCompareMode#STRICT strictly} equal\n\t * to the specified JSON. The {@code expected} value can contain the JSON itself or,\n\t * if it ends with {@code .json}, the name of a resource to be loaded using\n\t * {@code resourceLoadClass}.\n\t * @param expected the expected JSON or the name of a resource containing the expected\n\t * JSON\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the actual JSON value is equal to the given one\n\t */"}, "code_tokens": ["JsonContentAssert", "isNotStrictlyEqualToJson", "public", "(", ")", "{", "}", "CharSequence", "expected", "String", ";", "return", ";", "expectedJson", "=", "assertNotPassed", ".", "getJson", "(", ")", "this", ".", "loader", "(", "expected", ")", "compare", "(", "expectedJson", ",", ")", "JSONCompareMode", ".", "STRICT"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 51, "ast_depth": 10, "n_identifiers": 9, "vocab_size": 23, "n_whitespaces": 17, "n_words": 17, "nloc": 4, "token_counts": 34}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#550-553", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "isNotStrictlyEqualToJson", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#isNotStrictlyEqualToJson", "start_line": 550, "end_line": 553, "signature": "isNotStrictlyEqualToJson(String path, Class<?> resourceLoadClass)", "original_code": "public JsonContentAssert isNotStrictlyEqualToJson(String path, Class<?> resourceLoadClass) {\n\t\tString expectedJson = this.loader.getJson(path, resourceLoadClass);\n\t\treturn assertNotPassed(compare(expectedJson, JSONCompareMode.STRICT));\n\t}", "doc_comment": "/**\n\t * Verifies that the actual value is not {@link JSONCompareMode#STRICT strictly} equal\n\t * to the specified JSON resource.\n\t * @param path the name of a resource containing the expected JSON\n\t * @param resourceLoadClass the source class used to load the resource\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the actual JSON value is equal to the given one\n\t */"}, "code_tokens": ["JsonContentAssert", "isNotStrictlyEqualToJson", "public", "(", ",", ")", "{", "}", "String", "path", "resourceLoadClass", "String", ";", "return", ";", "Class", "expectedJson", "=", "assertNotPassed", "<", ">", ".", "getJson", "(", ")", "?", "this", ".", "loader", "(", "path", ",", "resourceLoadClass", ")", "compare", "(", "expectedJson", ",", ")", "JSONCompareMode", ".", "STRICT"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 63, "ast_depth": 10, "n_identifiers": 10, "vocab_size": 27, "n_whitespaces": 20, "n_words": 20, "nloc": 4, "token_counts": 42}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#562-565", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "isNotStrictlyEqualToJson", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#isNotStrictlyEqualToJson", "start_line": 562, "end_line": 565, "signature": "isNotStrictlyEqualToJson(byte[] expected)", "original_code": "public JsonContentAssert isNotStrictlyEqualToJson(byte[] expected) {\n\t\tString expectedJson = this.loader.getJson(expected);\n\t\treturn assertNotPassed(compare(expectedJson, JSONCompareMode.STRICT));\n\t}", "doc_comment": "/**\n\t * Verifies that the actual value is not {@link JSONCompareMode#STRICT strictly} equal\n\t * to the specified JSON bytes.\n\t * @param expected the expected JSON bytes\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the actual JSON value is equal to the given one\n\t */"}, "code_tokens": ["JsonContentAssert", "isNotStrictlyEqualToJson", "public", "(", ")", "{", "}", "expected", "String", ";", "return", ";", "expectedJson", "=", "assertNotPassed", "byte", "[", "]", ".", "getJson", "(", ")", "this", ".", "loader", "(", "expected", ")", "compare", "(", "expectedJson", ",", ")", "JSONCompareMode", ".", "STRICT"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 56, "ast_depth": 10, "n_identifiers": 9, "vocab_size": 25, "n_whitespaces": 17, "n_words": 17, "nloc": 4, "token_counts": 36}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#574-577", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "isNotStrictlyEqualToJson", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#isNotStrictlyEqualToJson", "start_line": 574, "end_line": 577, "signature": "isNotStrictlyEqualToJson(File expected)", "original_code": "public JsonContentAssert isNotStrictlyEqualToJson(File expected) {\n\t\tString expectedJson = this.loader.getJson(expected);\n\t\treturn assertNotPassed(compare(expectedJson, JSONCompareMode.STRICT));\n\t}", "doc_comment": "/**\n\t * Verifies that the actual value is not {@link JSONCompareMode#STRICT strictly} equal\n\t * to the specified JSON file.\n\t * @param expected a file containing the expected JSON\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the actual JSON value is equal to the given one\n\t */"}, "code_tokens": ["JsonContentAssert", "isNotStrictlyEqualToJson", "public", "(", ")", "{", "}", "File", "expected", "String", ";", "return", ";", "expectedJson", "=", "assertNotPassed", ".", "getJson", "(", ")", "this", ".", "loader", "(", "expected", ")", "compare", "(", "expectedJson", ",", ")", "JSONCompareMode", ".", "STRICT"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 51, "ast_depth": 10, "n_identifiers": 9, "vocab_size": 23, "n_whitespaces": 17, "n_words": 17, "nloc": 4, "token_counts": 34}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#586-589", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "isNotStrictlyEqualToJson", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#isNotStrictlyEqualToJson", "start_line": 586, "end_line": 589, "signature": "isNotStrictlyEqualToJson(InputStream expected)", "original_code": "public JsonContentAssert isNotStrictlyEqualToJson(InputStream expected) {\n\t\tString expectedJson = this.loader.getJson(expected);\n\t\treturn assertNotPassed(compare(expectedJson, JSONCompareMode.STRICT));\n\t}", "doc_comment": "/**\n\t * Verifies that the actual value is not {@link JSONCompareMode#STRICT strictly} equal\n\t * to the specified JSON input stream.\n\t * @param expected an input stream containing the expected JSON\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the actual JSON value is equal to the given one\n\t */"}, "code_tokens": ["JsonContentAssert", "isNotStrictlyEqualToJson", "public", "(", ")", "{", "}", "InputStream", "expected", "String", ";", "return", ";", "expectedJson", "=", "assertNotPassed", ".", "getJson", "(", ")", "this", ".", "loader", "(", "expected", ")", "compare", "(", "expectedJson", ",", ")", "JSONCompareMode", ".", "STRICT"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 51, "ast_depth": 10, "n_identifiers": 9, "vocab_size": 23, "n_whitespaces": 17, "n_words": 17, "nloc": 4, "token_counts": 34}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#598-601", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "isNotStrictlyEqualToJson", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#isNotStrictlyEqualToJson", "start_line": 598, "end_line": 601, "signature": "isNotStrictlyEqualToJson(Resource expected)", "original_code": "public JsonContentAssert isNotStrictlyEqualToJson(Resource expected) {\n\t\tString expectedJson = this.loader.getJson(expected);\n\t\treturn assertNotPassed(compare(expectedJson, JSONCompareMode.STRICT));\n\t}", "doc_comment": "/**\n\t * Verifies that the actual value is not {@link JSONCompareMode#STRICT strictly} equal\n\t * to the specified JSON resource.\n\t * @param expected a resource containing the expected JSON\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the actual JSON value is equal to the given one\n\t */"}, "code_tokens": ["JsonContentAssert", "isNotStrictlyEqualToJson", "public", "(", ")", "{", "}", "Resource", "expected", "String", ";", "return", ";", "expectedJson", "=", "assertNotPassed", ".", "getJson", "(", ")", "this", ".", "loader", "(", "expected", ")", "compare", "(", "expectedJson", ",", ")", "JSONCompareMode", ".", "STRICT"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 51, "ast_depth": 10, "n_identifiers": 9, "vocab_size": 23, "n_whitespaces": 17, "n_words": 17, "nloc": 4, "token_counts": 34}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#613-616", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "isNotEqualToJson", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#isNotEqualToJson", "start_line": 613, "end_line": 616, "signature": "isNotEqualToJson(CharSequence expected, JSONCompareMode compareMode)", "original_code": "public JsonContentAssert isNotEqualToJson(CharSequence expected, JSONCompareMode compareMode) {\n\t\tString expectedJson = this.loader.getJson(expected);\n\t\treturn assertNotPassed(compare(expectedJson, compareMode));\n\t}", "doc_comment": "/**\n\t * Verifies that the actual value is not equal to the specified JSON. The\n\t * {@code expected} value can contain the JSON itself or, if it ends with\n\t * {@code .json}, the name of a resource to be loaded using {@code resourceLoadClass}.\n\t * @param expected the expected JSON or the name of a resource containing the expected\n\t * JSON\n\t * @param compareMode the compare mode used when checking\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the actual JSON value is equal to the given one\n\t */"}, "code_tokens": ["JsonContentAssert", "isNotEqualToJson", "public", "(", ",", ")", "{", "}", "CharSequence", "expected", "JSONCompareMode", "compareMode", "String", ";", "return", ";", "expectedJson", "=", "assertNotPassed", ".", "getJson", "(", ")", "this", ".", "loader", "(", "expected", ")", "compare", "(", "expectedJson", ",", "compareMode", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 52, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 23, "n_whitespaces": 19, "n_words": 18, "nloc": 4, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#626-629", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "isNotEqualToJson", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#isNotEqualToJson", "start_line": 626, "end_line": 629, "signature": "isNotEqualToJson(String path, Class<?> resourceLoadClass, JSONCompareMode compareMode)", "original_code": "public JsonContentAssert isNotEqualToJson(String path, Class<?> resourceLoadClass, JSONCompareMode compareMode) {\n\t\tString expectedJson = this.loader.getJson(path, resourceLoadClass);\n\t\treturn assertNotPassed(compare(expectedJson, compareMode));\n\t}", "doc_comment": "/**\n\t * Verifies that the actual value is not equal to the specified JSON resource.\n\t * @param path the name of a resource containing the expected JSON\n\t * @param resourceLoadClass the source class used to load the resource\n\t * @param compareMode the compare mode used when checking\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the actual JSON value is equal to the given one\n\t */"}, "code_tokens": ["JsonContentAssert", "isNotEqualToJson", "public", "(", ",", ",", ")", "{", "}", "String", "path", "resourceLoadClass", "JSONCompareMode", "compareMode", "String", ";", "return", ";", "Class", "expectedJson", "=", "assertNotPassed", "<", ">", ".", "getJson", "(", ")", "?", "this", ".", "loader", "(", "path", ",", "resourceLoadClass", ")", "compare", "(", "expectedJson", ",", "compareMode", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 64, "ast_depth": 9, "n_identifiers": 9, "vocab_size": 27, "n_whitespaces": 22, "n_words": 21, "nloc": 4, "token_counts": 43}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#638-641", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "isNotEqualToJson", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#isNotEqualToJson", "start_line": 638, "end_line": 641, "signature": "isNotEqualToJson(byte[] expected, JSONCompareMode compareMode)", "original_code": "public JsonContentAssert isNotEqualToJson(byte[] expected, JSONCompareMode compareMode) {\n\t\tString expectedJson = this.loader.getJson(expected);\n\t\treturn assertNotPassed(compare(expectedJson, compareMode));\n\t}", "doc_comment": "/**\n\t * Verifies that the actual value is not equal to the specified JSON bytes.\n\t * @param expected the expected JSON bytes\n\t * @param compareMode the compare mode used when checking\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the actual JSON value is equal to the given one\n\t */"}, "code_tokens": ["JsonContentAssert", "isNotEqualToJson", "public", "(", ",", ")", "{", "}", "expected", "JSONCompareMode", "compareMode", "String", ";", "return", ";", "expectedJson", "=", "assertNotPassed", "byte", "[", "]", ".", "getJson", "(", ")", "this", ".", "loader", "(", "expected", ")", "compare", "(", "expectedJson", ",", "compareMode", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 57, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 25, "n_whitespaces": 19, "n_words": 18, "nloc": 4, "token_counts": 37}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#650-653", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "isNotEqualToJson", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#isNotEqualToJson", "start_line": 650, "end_line": 653, "signature": "isNotEqualToJson(File expected, JSONCompareMode compareMode)", "original_code": "public JsonContentAssert isNotEqualToJson(File expected, JSONCompareMode compareMode) {\n\t\tString expectedJson = this.loader.getJson(expected);\n\t\treturn assertNotPassed(compare(expectedJson, compareMode));\n\t}", "doc_comment": "/**\n\t * Verifies that the actual value is not equal to the specified JSON file.\n\t * @param expected a file containing the expected JSON\n\t * @param compareMode the compare mode used when checking\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the actual JSON value is equal to the given one\n\t */"}, "code_tokens": ["JsonContentAssert", "isNotEqualToJson", "public", "(", ",", ")", "{", "}", "File", "expected", "JSONCompareMode", "compareMode", "String", ";", "return", ";", "expectedJson", "=", "assertNotPassed", ".", "getJson", "(", ")", "this", ".", "loader", "(", "expected", ")", "compare", "(", "expectedJson", ",", "compareMode", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 52, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 23, "n_whitespaces": 19, "n_words": 18, "nloc": 4, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#662-665", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "isNotEqualToJson", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#isNotEqualToJson", "start_line": 662, "end_line": 665, "signature": "isNotEqualToJson(InputStream expected, JSONCompareMode compareMode)", "original_code": "public JsonContentAssert isNotEqualToJson(InputStream expected, JSONCompareMode compareMode) {\n\t\tString expectedJson = this.loader.getJson(expected);\n\t\treturn assertNotPassed(compare(expectedJson, compareMode));\n\t}", "doc_comment": "/**\n\t * Verifies that the actual value is not equal to the specified JSON input stream.\n\t * @param expected an input stream containing the expected JSON\n\t * @param compareMode the compare mode used when checking\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the actual JSON value is equal to the given one\n\t */"}, "code_tokens": ["JsonContentAssert", "isNotEqualToJson", "public", "(", ",", ")", "{", "}", "InputStream", "expected", "JSONCompareMode", "compareMode", "String", ";", "return", ";", "expectedJson", "=", "assertNotPassed", ".", "getJson", "(", ")", "this", ".", "loader", "(", "expected", ")", "compare", "(", "expectedJson", ",", "compareMode", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 52, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 23, "n_whitespaces": 19, "n_words": 18, "nloc": 4, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#674-677", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "isNotEqualToJson", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#isNotEqualToJson", "start_line": 674, "end_line": 677, "signature": "isNotEqualToJson(Resource expected, JSONCompareMode compareMode)", "original_code": "public JsonContentAssert isNotEqualToJson(Resource expected, JSONCompareMode compareMode) {\n\t\tString expectedJson = this.loader.getJson(expected);\n\t\treturn assertNotPassed(compare(expectedJson, compareMode));\n\t}", "doc_comment": "/**\n\t * Verifies that the actual value is not equal to the specified JSON resource.\n\t * @param expected a resource containing the expected JSON\n\t * @param compareMode the compare mode used when checking\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the actual JSON value is equal to the given one\n\t */"}, "code_tokens": ["JsonContentAssert", "isNotEqualToJson", "public", "(", ",", ")", "{", "}", "Resource", "expected", "JSONCompareMode", "compareMode", "String", ";", "return", ";", "expectedJson", "=", "assertNotPassed", ".", "getJson", "(", ")", "this", ".", "loader", "(", "expected", ")", "compare", "(", "expectedJson", ",", "compareMode", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 52, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 23, "n_whitespaces": 19, "n_words": 18, "nloc": 4, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#689-692", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "isNotEqualToJson", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#isNotEqualToJson", "start_line": 689, "end_line": 692, "signature": "isNotEqualToJson(CharSequence expected, JSONComparator comparator)", "original_code": "public JsonContentAssert isNotEqualToJson(CharSequence expected, JSONComparator comparator) {\n\t\tString expectedJson = this.loader.getJson(expected);\n\t\treturn assertNotPassed(compare(expectedJson, comparator));\n\t}", "doc_comment": "/**\n\t * Verifies that the actual value is not equal to the specified JSON. The\n\t * {@code expected} value can contain the JSON itself or, if it ends with\n\t * {@code .json}, the name of a resource to be loaded using {@code resourceLoadClass}.\n\t * @param expected the expected JSON or the name of a resource containing the expected\n\t * JSON\n\t * @param comparator the comparator used when checking\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the actual JSON value is equal to the given one\n\t */"}, "code_tokens": ["JsonContentAssert", "isNotEqualToJson", "public", "(", ",", ")", "{", "}", "CharSequence", "expected", "JSONComparator", "comparator", "String", ";", "return", ";", "expectedJson", "=", "assertNotPassed", ".", "getJson", "(", ")", "this", ".", "loader", "(", "expected", ")", "compare", "(", "expectedJson", ",", "comparator", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 52, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 23, "n_whitespaces": 19, "n_words": 18, "nloc": 4, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#702-705", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "isNotEqualToJson", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#isNotEqualToJson", "start_line": 702, "end_line": 705, "signature": "isNotEqualToJson(String path, Class<?> resourceLoadClass, JSONComparator comparator)", "original_code": "public JsonContentAssert isNotEqualToJson(String path, Class<?> resourceLoadClass, JSONComparator comparator) {\n\t\tString expectedJson = this.loader.getJson(path, resourceLoadClass);\n\t\treturn assertNotPassed(compare(expectedJson, comparator));\n\t}", "doc_comment": "/**\n\t * Verifies that the actual value is not equal to the specified JSON resource.\n\t * @param path the name of a resource containing the expected JSON\n\t * @param resourceLoadClass the source class used to load the resource\n\t * @param comparator the comparator used when checking\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the actual JSON value is equal to the given one\n\t */"}, "code_tokens": ["JsonContentAssert", "isNotEqualToJson", "public", "(", ",", ",", ")", "{", "}", "String", "path", "resourceLoadClass", "JSONComparator", "comparator", "String", ";", "return", ";", "Class", "expectedJson", "=", "assertNotPassed", "<", ">", ".", "getJson", "(", ")", "?", "this", ".", "loader", "(", "path", ",", "resourceLoadClass", ")", "compare", "(", "expectedJson", ",", "comparator", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 64, "ast_depth": 9, "n_identifiers": 9, "vocab_size": 27, "n_whitespaces": 22, "n_words": 21, "nloc": 4, "token_counts": 43}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#714-717", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "isNotEqualToJson", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#isNotEqualToJson", "start_line": 714, "end_line": 717, "signature": "isNotEqualToJson(byte[] expected, JSONComparator comparator)", "original_code": "public JsonContentAssert isNotEqualToJson(byte[] expected, JSONComparator comparator) {\n\t\tString expectedJson = this.loader.getJson(expected);\n\t\treturn assertNotPassed(compare(expectedJson, comparator));\n\t}", "doc_comment": "/**\n\t * Verifies that the actual value is not equal to the specified JSON bytes.\n\t * @param expected the expected JSON bytes\n\t * @param comparator the comparator used when checking\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the actual JSON value is equal to the given one\n\t */"}, "code_tokens": ["JsonContentAssert", "isNotEqualToJson", "public", "(", ",", ")", "{", "}", "expected", "JSONComparator", "comparator", "String", ";", "return", ";", "expectedJson", "=", "assertNotPassed", "byte", "[", "]", ".", "getJson", "(", ")", "this", ".", "loader", "(", "expected", ")", "compare", "(", "expectedJson", ",", "comparator", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 57, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 25, "n_whitespaces": 19, "n_words": 18, "nloc": 4, "token_counts": 37}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#726-729", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "isNotEqualToJson", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#isNotEqualToJson", "start_line": 726, "end_line": 729, "signature": "isNotEqualToJson(File expected, JSONComparator comparator)", "original_code": "public JsonContentAssert isNotEqualToJson(File expected, JSONComparator comparator) {\n\t\tString expectedJson = this.loader.getJson(expected);\n\t\treturn assertNotPassed(compare(expectedJson, comparator));\n\t}", "doc_comment": "/**\n\t * Verifies that the actual value is not equal to the specified JSON file.\n\t * @param expected a file containing the expected JSON\n\t * @param comparator the comparator used when checking\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the actual JSON value is equal to the given one\n\t */"}, "code_tokens": ["JsonContentAssert", "isNotEqualToJson", "public", "(", ",", ")", "{", "}", "File", "expected", "JSONComparator", "comparator", "String", ";", "return", ";", "expectedJson", "=", "assertNotPassed", ".", "getJson", "(", ")", "this", ".", "loader", "(", "expected", ")", "compare", "(", "expectedJson", ",", "comparator", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 52, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 23, "n_whitespaces": 19, "n_words": 18, "nloc": 4, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#738-741", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "isNotEqualToJson", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#isNotEqualToJson", "start_line": 738, "end_line": 741, "signature": "isNotEqualToJson(InputStream expected, JSONComparator comparator)", "original_code": "public JsonContentAssert isNotEqualToJson(InputStream expected, JSONComparator comparator) {\n\t\tString expectedJson = this.loader.getJson(expected);\n\t\treturn assertNotPassed(compare(expectedJson, comparator));\n\t}", "doc_comment": "/**\n\t * Verifies that the actual value is not equal to the specified JSON input stream.\n\t * @param expected an input stream containing the expected JSON\n\t * @param comparator the comparator used when checking\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the actual JSON value is equal to the given one\n\t */"}, "code_tokens": ["JsonContentAssert", "isNotEqualToJson", "public", "(", ",", ")", "{", "}", "InputStream", "expected", "JSONComparator", "comparator", "String", ";", "return", ";", "expectedJson", "=", "assertNotPassed", ".", "getJson", "(", ")", "this", ".", "loader", "(", "expected", ")", "compare", "(", "expectedJson", ",", "comparator", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 52, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 23, "n_whitespaces": 19, "n_words": 18, "nloc": 4, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#750-753", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "isNotEqualToJson", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#isNotEqualToJson", "start_line": 750, "end_line": 753, "signature": "isNotEqualToJson(Resource expected, JSONComparator comparator)", "original_code": "public JsonContentAssert isNotEqualToJson(Resource expected, JSONComparator comparator) {\n\t\tString expectedJson = this.loader.getJson(expected);\n\t\treturn assertNotPassed(compare(expectedJson, comparator));\n\t}", "doc_comment": "/**\n\t * Verifies that the actual value is not equal to the specified JSON resource.\n\t * @param expected a resource containing the expected JSON\n\t * @param comparator the comparator used when checking\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the actual JSON value is equal to the given one\n\t */"}, "code_tokens": ["JsonContentAssert", "isNotEqualToJson", "public", "(", ",", ")", "{", "}", "Resource", "expected", "JSONComparator", "comparator", "String", ";", "return", ";", "expectedJson", "=", "assertNotPassed", ".", "getJson", "(", ")", "this", ".", "loader", "(", "expected", ")", "compare", "(", "expectedJson", ",", "comparator", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 52, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 23, "n_whitespaces": 19, "n_words": 18, "nloc": 4, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#765-768", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "hasJsonPath", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#hasJsonPath", "start_line": 765, "end_line": 768, "signature": "hasJsonPath(CharSequence expression, Object... args)", "original_code": "public JsonContentAssert hasJsonPath(CharSequence expression, Object... args) {\n\t\tnew JsonPathValue(expression, args).assertHasPath();\n\t\treturn this;\n\t}", "doc_comment": "/**\n\t * Verify that the JSON path is present without checking if it has a value.\n\t * @param expression the {@link JsonPath} expression\n\t * @param args arguments to parameterize the {@code JsonPath} expression with, using\n\t * formatting specifiers defined in {@link String#format(String, Object...)}\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the value at the given path is missing\n\t * @since 2.2.0\n\t * @see #hasJsonPathValue(CharSequence, Object...)\n\t */"}, "code_tokens": ["JsonContentAssert", "hasJsonPath", "public", "(", ",", ")", "{", "}", "CharSequence", "expression", "Object", "...", ";", "return", "this", ";", "args", ".", "assertHasPath", "new", "JsonPathValue", "(", ")", "(", "expression", ",", "args", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 42, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 20, "n_whitespaces": 17, "n_words": 14, "nloc": 4, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#780-783", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "hasJsonPathValue", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#hasJsonPathValue", "start_line": 780, "end_line": 783, "signature": "hasJsonPathValue(CharSequence expression, Object... args)", "original_code": "public JsonContentAssert hasJsonPathValue(CharSequence expression, Object... args) {\n\t\tnew JsonPathValue(expression, args).assertHasValue(Object.class, \"an object\");\n\t\treturn this;\n\t}", "doc_comment": "/**\n\t * Verify that the actual value at the given JSON path produces a non-null result. If\n\t * the JSON path expression is not {@linkplain JsonPath#isDefinite() definite}, this\n\t * method verifies that the value at the given path is not <em>empty</em>.\n\t * @param expression the {@link JsonPath} expression\n\t * @param args arguments to parameterize the {@code JsonPath} expression with, using\n\t * formatting specifiers defined in {@link String#format(String, Object...)}\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the value at the given path is missing\n\t */"}, "code_tokens": ["JsonContentAssert", "hasJsonPathValue", "public", "(", ",", ")", "{", "}", "CharSequence", "expression", "Object", "...", ";", "return", "this", ";", "args", ".", "assertHasValue", "new", "JsonPathValue", "(", ",", ")", "(", "expression", ",", "args", ")", "Object", ".", "class", "\"", "an object", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 51, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 23, "n_whitespaces": 19, "n_words": 18, "nloc": 4, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#794-797", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "hasJsonPathStringValue", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#hasJsonPathStringValue", "start_line": 794, "end_line": 797, "signature": "hasJsonPathStringValue(CharSequence expression, Object... args)", "original_code": "public JsonContentAssert hasJsonPathStringValue(CharSequence expression, Object... args) {\n\t\tnew JsonPathValue(expression, args).assertHasValue(String.class, \"a string\");\n\t\treturn this;\n\t}", "doc_comment": "/**\n\t * Verify that the actual value at the given JSON path produces a non-null string\n\t * result.\n\t * @param expression the {@link JsonPath} expression\n\t * @param args arguments to parameterize the {@code JsonPath} expression with, using\n\t * formatting specifiers defined in {@link String#format(String, Object...)}\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the value at the given path is missing or not a string\n\t */"}, "code_tokens": ["JsonContentAssert", "hasJsonPathStringValue", "public", "(", ",", ")", "{", "}", "CharSequence", "expression", "Object", "...", ";", "return", "this", ";", "args", ".", "assertHasValue", "new", "JsonPathValue", "(", ",", ")", "(", "expression", ",", "args", ")", "String", ".", "class", "\"", "a string", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 51, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 24, "n_whitespaces": 19, "n_words": 18, "nloc": 4, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#808-811", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "hasJsonPathNumberValue", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#hasJsonPathNumberValue", "start_line": 808, "end_line": 811, "signature": "hasJsonPathNumberValue(CharSequence expression, Object... args)", "original_code": "public JsonContentAssert hasJsonPathNumberValue(CharSequence expression, Object... args) {\n\t\tnew JsonPathValue(expression, args).assertHasValue(Number.class, \"a number\");\n\t\treturn this;\n\t}", "doc_comment": "/**\n\t * Verify that the actual value at the given JSON path produces a non-null number\n\t * result.\n\t * @param expression the {@link JsonPath} expression\n\t * @param args arguments to parameterize the {@code JsonPath} expression with, using\n\t * formatting specifiers defined in {@link String#format(String, Object...)}\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the value at the given path is missing or not a number\n\t */"}, "code_tokens": ["JsonContentAssert", "hasJsonPathNumberValue", "public", "(", ",", ")", "{", "}", "CharSequence", "expression", "Object", "...", ";", "return", "this", ";", "args", ".", "assertHasValue", "new", "JsonPathValue", "(", ",", ")", "(", "expression", ",", "args", ")", "Number", ".", "class", "\"", "a number", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 51, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 24, "n_whitespaces": 19, "n_words": 18, "nloc": 4, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#822-825", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "hasJsonPathBooleanValue", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#hasJsonPathBooleanValue", "start_line": 822, "end_line": 825, "signature": "hasJsonPathBooleanValue(CharSequence expression, Object... args)", "original_code": "public JsonContentAssert hasJsonPathBooleanValue(CharSequence expression, Object... args) {\n\t\tnew JsonPathValue(expression, args).assertHasValue(Boolean.class, \"a boolean\");\n\t\treturn this;\n\t}", "doc_comment": "/**\n\t * Verify that the actual value at the given JSON path produces a non-null boolean\n\t * result.\n\t * @param expression the {@link JsonPath} expression\n\t * @param args arguments to parameterize the {@code JsonPath} expression with, using\n\t * formatting specifiers defined in {@link String#format(String, Object...)}\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the value at the given path is missing or not a boolean\n\t */"}, "code_tokens": ["JsonContentAssert", "hasJsonPathBooleanValue", "public", "(", ",", ")", "{", "}", "CharSequence", "expression", "Object", "...", ";", "return", "this", ";", "args", ".", "assertHasValue", "new", "JsonPathValue", "(", ",", ")", "(", "expression", ",", "args", ")", "Boolean", ".", "class", "\"", "a boolean", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 51, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 24, "n_whitespaces": 19, "n_words": 18, "nloc": 4, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#836-839", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "hasJsonPathArrayValue", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#hasJsonPathArrayValue", "start_line": 836, "end_line": 839, "signature": "hasJsonPathArrayValue(CharSequence expression, Object... args)", "original_code": "public JsonContentAssert hasJsonPathArrayValue(CharSequence expression, Object... args) {\n\t\tnew JsonPathValue(expression, args).assertHasValue(List.class, \"an array\");\n\t\treturn this;\n\t}", "doc_comment": "/**\n\t * Verify that the actual value at the given JSON path produces a non-null array\n\t * result.\n\t * @param expression the {@link JsonPath} expression\n\t * @param args arguments to parameterize the {@code JsonPath} expression with, using\n\t * formatting specifiers defined in {@link String#format(String, Object...)}\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the value at the given path is missing or not an array\n\t */"}, "code_tokens": ["JsonContentAssert", "hasJsonPathArrayValue", "public", "(", ",", ")", "{", "}", "CharSequence", "expression", "Object", "...", ";", "return", "this", ";", "args", ".", "assertHasValue", "new", "JsonPathValue", "(", ",", ")", "(", "expression", ",", "args", ")", "List", ".", "class", "\"", "an array", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 51, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 24, "n_whitespaces": 19, "n_words": 18, "nloc": 4, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#849-852", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "hasJsonPathMapValue", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#hasJsonPathMapValue", "start_line": 849, "end_line": 852, "signature": "hasJsonPathMapValue(CharSequence expression, Object... args)", "original_code": "public JsonContentAssert hasJsonPathMapValue(CharSequence expression, Object... args) {\n\t\tnew JsonPathValue(expression, args).assertHasValue(Map.class, \"a map\");\n\t\treturn this;\n\t}", "doc_comment": "/**\n\t * Verify that the actual value at the given JSON path produces a non-null map result.\n\t * @param expression the {@link JsonPath} expression\n\t * @param args arguments to parameterize the {@code JsonPath} expression with, using\n\t * formatting specifiers defined in {@link String#format(String, Object...)}\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the value at the given path is missing or not a map\n\t */"}, "code_tokens": ["JsonContentAssert", "hasJsonPathMapValue", "public", "(", ",", ")", "{", "}", "CharSequence", "expression", "Object", "...", ";", "return", "this", ";", "args", ".", "assertHasValue", "new", "JsonPathValue", "(", ",", ")", "(", "expression", ",", "args", ")", "Map", ".", "class", "\"", "a map", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 51, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 24, "n_whitespaces": 19, "n_words": 18, "nloc": 4, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#863-866", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "hasEmptyJsonPathValue", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#hasEmptyJsonPathValue", "start_line": 863, "end_line": 866, "signature": "hasEmptyJsonPathValue(CharSequence expression, Object... args)", "original_code": "public JsonContentAssert hasEmptyJsonPathValue(CharSequence expression, Object... args) {\n\t\tnew JsonPathValue(expression, args).assertHasEmptyValue();\n\t\treturn this;\n\t}", "doc_comment": "/**\n\t * Verify that the actual value at the given JSON path produces an\n\t * {@link ObjectUtils#isEmpty(Object) empty} result.\n\t * @param expression the {@link JsonPath} expression\n\t * @param args arguments to parameterize the {@code JsonPath} expression with, using\n\t * formatting specifiers defined in {@link String#format(String, Object...)}\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the value at the given path is not empty\n\t */"}, "code_tokens": ["JsonContentAssert", "hasEmptyJsonPathValue", "public", "(", ",", ")", "{", "}", "CharSequence", "expression", "Object", "...", ";", "return", "this", ";", "args", ".", "assertHasEmptyValue", "new", "JsonPathValue", "(", ")", "(", "expression", ",", "args", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 42, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 20, "n_whitespaces": 17, "n_words": 14, "nloc": 4, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#878-881", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "doesNotHaveJsonPath", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#doesNotHaveJsonPath", "start_line": 878, "end_line": 881, "signature": "doesNotHaveJsonPath(CharSequence expression, Object... args)", "original_code": "public JsonContentAssert doesNotHaveJsonPath(CharSequence expression, Object... args) {\n\t\tnew JsonPathValue(expression, args).assertDoesNotHavePath();\n\t\treturn this;\n\t}", "doc_comment": "/**\n\t * Verify that the JSON path is not present, even if it has a {@code null} value.\n\t * @param expression the {@link JsonPath} expression\n\t * @param args arguments to parameterize the {@code JsonPath} expression with, using\n\t * formatting specifiers defined in {@link String#format(String, Object...)}\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the value at the given path is not missing\n\t * @since 2.2.0\n\t * @see #doesNotHaveJsonPathValue(CharSequence, Object...)\n\t */"}, "code_tokens": ["JsonContentAssert", "doesNotHaveJsonPath", "public", "(", ",", ")", "{", "}", "CharSequence", "expression", "Object", "...", ";", "return", "this", ";", "args", ".", "assertDoesNotHavePath", "new", "JsonPathValue", "(", ")", "(", "expression", ",", "args", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 42, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 20, "n_whitespaces": 17, "n_words": 14, "nloc": 4, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#893-896", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "doesNotHaveJsonPathValue", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#doesNotHaveJsonPathValue", "start_line": 893, "end_line": 896, "signature": "doesNotHaveJsonPathValue(CharSequence expression, Object... args)", "original_code": "public JsonContentAssert doesNotHaveJsonPathValue(CharSequence expression, Object... args) {\n\t\tnew JsonPathValue(expression, args).assertDoesNotHaveValue();\n\t\treturn this;\n\t}", "doc_comment": "/**\n\t * Verify that the actual value at the given JSON path produces no result. If the JSON\n\t * path expression is not {@linkplain JsonPath#isDefinite() definite}, this method\n\t * verifies that the value at the given path is <em>empty</em>.\n\t * @param expression the {@link JsonPath} expression\n\t * @param args arguments to parameterize the {@code JsonPath} expression with, using\n\t * formatting specifiers defined in {@link String#format(String, Object...)}\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the value at the given path is not missing\n\t */"}, "code_tokens": ["JsonContentAssert", "doesNotHaveJsonPathValue", "public", "(", ",", ")", "{", "}", "CharSequence", "expression", "Object", "...", ";", "return", "this", ";", "args", ".", "assertDoesNotHaveValue", "new", "JsonPathValue", "(", ")", "(", "expression", ",", "args", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 42, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 20, "n_whitespaces": 17, "n_words": 14, "nloc": 4, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#907-910", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "doesNotHaveEmptyJsonPathValue", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#doesNotHaveEmptyJsonPathValue", "start_line": 907, "end_line": 910, "signature": "doesNotHaveEmptyJsonPathValue(CharSequence expression, Object... args)", "original_code": "public JsonContentAssert doesNotHaveEmptyJsonPathValue(CharSequence expression, Object... args) {\n\t\tnew JsonPathValue(expression, args).assertDoesNotHaveEmptyValue();\n\t\treturn this;\n\t}", "doc_comment": "/**\n\t * Verify that the actual value at the given JSON path does not produce an\n\t * {@link ObjectUtils#isEmpty(Object) empty} result.\n\t * @param expression the {@link JsonPath} expression\n\t * @param args arguments to parameterize the {@code JsonPath} expression with, using\n\t * formatting specifiers defined in {@link String#format(String, Object...)}\n\t * @return {@code this} assertion object\n\t * @throws AssertionError if the value at the given path is empty\n\t */"}, "code_tokens": ["JsonContentAssert", "doesNotHaveEmptyJsonPathValue", "public", "(", ",", ")", "{", "}", "CharSequence", "expression", "Object", "...", ";", "return", "this", ";", "args", ".", "assertDoesNotHaveEmptyValue", "new", "JsonPathValue", "(", ")", "(", "expression", ",", "args", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 42, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 20, "n_whitespaces": 17, "n_words": 14, "nloc": 4, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#920-922", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "extractingJsonPathValue", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#extractingJsonPathValue", "start_line": 920, "end_line": 922, "signature": "extractingJsonPathValue(CharSequence expression, Object... args)", "original_code": "public AbstractObjectAssert<?, Object> extractingJsonPathValue(CharSequence expression, Object... args) {\n\t\treturn Assertions.assertThat(new JsonPathValue(expression, args).getValue(false));\n\t}", "doc_comment": "/**\n\t * Extract the value at the given JSON path for further object assertions.\n\t * @param expression the {@link JsonPath} expression\n\t * @param args arguments to parameterize the {@code JsonPath} expression with, using\n\t * formatting specifiers defined in {@link String#format(String, Object...)}\n\t * @return a new assertion object whose object under test is the extracted item\n\t * @throws AssertionError if the path is not valid\n\t */"}, "code_tokens": ["extractingJsonPathValue", "public", "AbstractObjectAssert", "(", ",", ")", "{", "}", "<", ",", "Object", ">", "CharSequence", "expression", "Object", "...", "return", ";", "?", "args", "Assertions", ".", "assertThat", "(", ")", ".", "getValue", "new", "JsonPathValue", "(", "false", ")", "(", "expression", ",", "args", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 55, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 25, "n_whitespaces": 15, "n_words": 17, "nloc": 3, "token_counts": 37}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#932-935", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "extractingJsonPathStringValue", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#extractingJsonPathStringValue", "start_line": 932, "end_line": 935, "signature": "extractingJsonPathStringValue(CharSequence expression,\n\t\t\tObject... args)", "original_code": "public AbstractCharSequenceAssert<?, String> extractingJsonPathStringValue(CharSequence expression,\n\t\t\tObject... args) {\n\t\treturn Assertions.assertThat(extractingJsonPathValue(expression, args, String.class, \"a string\"));\n\t}", "doc_comment": "/**\n\t * Extract the string value at the given JSON path for further object assertions.\n\t * @param expression the {@link JsonPath} expression\n\t * @param args arguments to parameterize the {@code JsonPath} expression with, using\n\t * formatting specifiers defined in {@link String#format(String, Object...)}\n\t * @return a new assertion object whose object under test is the extracted item\n\t * @throws AssertionError if the path is not valid or does not result in a string\n\t */"}, "code_tokens": ["extractingJsonPathStringValue", "public", "AbstractCharSequenceAssert", "(", ",", ")", "{", "}", "<", ",", "String", ">", "CharSequence", "expression", "Object", "...", "return", ";", "?", "args", "Assertions", ".", "assertThat", "(", ")", "extractingJsonPathValue", "(", "expression", ",", "args", ",", ",", ")", "String", ".", "class", "\"", "a string", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 57, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 26, "n_whitespaces": 20, "n_words": 18, "nloc": 4, "token_counts": 39}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#945-947", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "extractingJsonPathNumberValue", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#extractingJsonPathNumberValue", "start_line": 945, "end_line": 947, "signature": "extractingJsonPathNumberValue(CharSequence expression, Object... args)", "original_code": "public AbstractObjectAssert<?, Number> extractingJsonPathNumberValue(CharSequence expression, Object... args) {\n\t\treturn Assertions.assertThat(extractingJsonPathValue(expression, args, Number.class, \"a number\"));\n\t}", "doc_comment": "/**\n\t * Extract the number value at the given JSON path for further object assertions.\n\t * @param expression the {@link JsonPath} expression\n\t * @param args arguments to parameterize the {@code JsonPath} expression with, using\n\t * formatting specifiers defined in {@link String#format(String, Object...)}\n\t * @return a new assertion object whose object under test is the extracted item\n\t * @throws AssertionError if the path is not valid or does not result in a number\n\t */"}, "code_tokens": ["extractingJsonPathNumberValue", "public", "AbstractObjectAssert", "(", ",", ")", "{", "}", "<", ",", "Number", ">", "CharSequence", "expression", "Object", "...", "return", ";", "?", "args", "Assertions", ".", "assertThat", "(", ")", "extractingJsonPathValue", "(", "expression", ",", "args", ",", ",", ")", "Number", ".", "class", "\"", "a number", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 57, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 26, "n_whitespaces": 17, "n_words": 18, "nloc": 3, "token_counts": 39}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#957-959", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "extractingJsonPathBooleanValue", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#extractingJsonPathBooleanValue", "start_line": 957, "end_line": 959, "signature": "extractingJsonPathBooleanValue(CharSequence expression, Object... args)", "original_code": "public AbstractBooleanAssert<?> extractingJsonPathBooleanValue(CharSequence expression, Object... args) {\n\t\treturn Assertions.assertThat(extractingJsonPathValue(expression, args, Boolean.class, \"a boolean\"));\n\t}", "doc_comment": "/**\n\t * Extract the boolean value at the given JSON path for further object assertions.\n\t * @param expression the {@link JsonPath} expression\n\t * @param args arguments to parameterize the {@code JsonPath} expression with, using\n\t * formatting specifiers defined in {@link String#format(String, Object...)}\n\t * @return a new assertion object whose object under test is the extracted item\n\t * @throws AssertionError if the path is not valid or does not result in a boolean\n\t */"}, "code_tokens": ["extractingJsonPathBooleanValue", "public", "AbstractBooleanAssert", "(", ",", ")", "{", "}", "<", ">", "CharSequence", "expression", "Object", "...", "return", ";", "?", "args", "Assertions", ".", "assertThat", "(", ")", "extractingJsonPathValue", "(", "expression", ",", "args", ",", ",", ")", "Boolean", ".", "class", "\"", "a boolean", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 55, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 26, "n_whitespaces": 16, "n_words": 17, "nloc": 3, "token_counts": 37}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#970-973", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "extractingJsonPathArrayValue", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#extractingJsonPathArrayValue", "start_line": 970, "end_line": 973, "signature": "extractingJsonPathArrayValue(CharSequence expression, Object... args)", "original_code": "@SuppressWarnings(\"unchecked\")\n\tpublic <E> ListAssert<E> extractingJsonPathArrayValue(CharSequence expression, Object... args) {\n\t\treturn Assertions.assertThat(extractingJsonPathValue(expression, args, List.class, \"an array\"));\n\t}", "doc_comment": "/**\n\t * Extract the array value at the given JSON path for further object assertions.\n\t * @param expression the {@link JsonPath} expression\n\t * @param args arguments to parameterize the {@code JsonPath} expression with, using\n\t * formatting specifiers defined in {@link String#format(String, Object...)}\n\t * @param <E> element type\n\t * @return a new assertion object whose object under test is the extracted item\n\t * @throws AssertionError if the path is not valid or does not result in an array\n\t */"}, "code_tokens": ["extractingJsonPathArrayValue", "public", "<", ">", "ListAssert", "(", ",", ")", "{", "}", "@", "SuppressWarnings", "E", "<", "E", ">", "CharSequence", "expression", "Object", "...", "return", ";", "(", ")", "args", "Assertions", ".", "assertThat", "\"", "unchecked", "\"", "(", ")", "extractingJsonPathValue", "(", "expression", ",", "args", ",", ",", ")", "List", ".", "class", "\"", "an array", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 69, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 29, "n_whitespaces": 19, "n_words": 21, "nloc": 4, "token_counts": 47}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#985-988", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "extractingJsonPathMapValue", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#extractingJsonPathMapValue", "start_line": 985, "end_line": 988, "signature": "extractingJsonPathMapValue(CharSequence expression, Object... args)", "original_code": "@SuppressWarnings(\"unchecked\")\n\tpublic <K, V> MapAssert<K, V> extractingJsonPathMapValue(CharSequence expression, Object... args) {\n\t\treturn Assertions.assertThat(extractingJsonPathValue(expression, args, Map.class, \"a map\"));\n\t}", "doc_comment": "/**\n\t * Extract the map value at the given JSON path for further object assertions.\n\t * @param expression the {@link JsonPath} expression\n\t * @param args arguments to parameterize the {@code JsonPath} expression with, using\n\t * formatting specifiers defined in {@link String#format(String, Object...)}\n\t * @param <K> key type\n\t * @param <V> value type\n\t * @return a new assertion object whose object under test is the extracted item\n\t * @throws AssertionError if the path is not valid or does not result in a map\n\t */"}, "code_tokens": ["extractingJsonPathMapValue", "public", "<", ",", ">", "MapAssert", "(", ",", ")", "{", "}", "@", "SuppressWarnings", "K", "V", "<", "K", ",", "V", ">", "CharSequence", "expression", "Object", "...", "return", ";", "(", ")", "args", "Assertions", ".", "assertThat", "\"", "unchecked", "\"", "(", ")", "extractingJsonPathValue", "(", "expression", ",", "args", ",", ",", ")", "Map", ".", "class", "\"", "a map", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 74, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 30, "n_whitespaces": 21, "n_words": 23, "nloc": 4, "token_counts": 51}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#990-998", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "extractingJsonPathValue", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#extractingJsonPathValue", "start_line": 990, "end_line": 998, "signature": "extractingJsonPathValue(CharSequence expression, Object[] args, Class<T> type,\n\t\t\tString expectedDescription)", "original_code": "@SuppressWarnings(\"unchecked\")\n\tprivate <T> @Nullable T extractingJsonPathValue(CharSequence expression, Object[] args, Class<T> type,\n\t\t\tString expectedDescription) {\n\t\tJsonPathValue value = new JsonPathValue(expression, args);\n\t\tif (value.getValue(false) != null) {\n\t\t\tvalue.assertHasValue(type, expectedDescription);\n\t\t}\n\t\treturn (T) value.getValue(false);\n\t}", "doc_comment": ""}, "code_tokens": ["T", "extractingJsonPathValue", "private", "<", ">", "@", "Nullable", "(", ",", ",", ",", ")", "{", "}", "@", "SuppressWarnings", "T", "CharSequence", "expression", "args", "type", "String", "expectedDescription", "JsonPathValue", ";", "if", "return", ";", "(", ")", "Object", "Class", "value", "=", "(", ")", "{", "}", "(", "T", ")", "\"", "unchecked", "\"", "[", "]", "<", "T", ">", "new", "JsonPathValue", "!=", "null", ";", "value", ".", "getValue", "(", "expression", ",", "args", ")", "value", ".", "getValue", "value", ".", "assertHasValue", "(", "false", ")", "(", "false", ")", "(", "type", ",", "expectedDescription", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 115, "ast_depth": 9, "n_identifiers": 10, "vocab_size": 38, "n_whitespaces": 47, "n_words": 36, "nloc": 9, "token_counts": 79}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#1000-1003", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "compare", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#compare", "start_line": 1000, "end_line": 1003, "signature": "compare(@Nullable CharSequence expectedJson, JSONCompareMode compareMode)", "original_code": "private JSONCompareResult compare(@Nullable CharSequence expectedJson, JSONCompareMode compareMode) {\n\t\treturn compare(expectedJson,\n\t\t\t\t(expected) -> JSONCompare.compareJSON(expected, this.actual.toString(), compareMode));\n\t}", "doc_comment": ""}, "code_tokens": ["JSONCompareResult", "compare", "private", "(", ",", ")", "{", "}", "CharSequence", "expectedJson", "JSONCompareMode", "compareMode", "return", ";", "compare", "@", "Nullable", "(", "expectedJson", ",", ")", "->", "(", "expected", ")", "JSONCompare", ".", "compareJSON", "(", "expected", ",", ",", "compareMode", ")", ".", "toString", "this", ".", "actual", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 60, "ast_depth": 12, "n_identifiers": 9, "vocab_size": 24, "n_whitespaces": 22, "n_words": 19, "nloc": 4, "token_counts": 41}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#1005-1008", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "compare", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#compare", "start_line": 1005, "end_line": 1008, "signature": "compare(@Nullable CharSequence expectedJson, JSONComparator comparator)", "original_code": "private JSONCompareResult compare(@Nullable CharSequence expectedJson, JSONComparator comparator) {\n\t\treturn compare(expectedJson,\n\t\t\t\t(expected) -> JSONCompare.compareJSON(expected, this.actual.toString(), comparator));\n\t}", "doc_comment": ""}, "code_tokens": ["JSONCompareResult", "compare", "private", "(", ",", ")", "{", "}", "CharSequence", "expectedJson", "JSONComparator", "comparator", "return", ";", "compare", "@", "Nullable", "(", "expectedJson", ",", ")", "->", "(", "expected", ")", "JSONCompare", ".", "compareJSON", "(", "expected", ",", ",", "comparator", ")", ".", "toString", "this", ".", "actual", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 60, "ast_depth": 12, "n_identifiers": 9, "vocab_size": 24, "n_whitespaces": 22, "n_words": 19, "nloc": 4, "token_counts": 41}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#1010-1027", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "compare", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#compare", "start_line": 1010, "end_line": 1027, "signature": "compare(@Nullable CharSequence expectedJson,\n\t\t\tThrowingFunction<String, JSONCompareResult> compareAction)", "original_code": "private JSONCompareResult compare(@Nullable CharSequence expectedJson,\n\t\t\tThrowingFunction<String, JSONCompareResult> compareAction) {\n\t\tif (this.actual == null) {\n\t\t\treturn compareForNull(expectedJson);\n\t\t}\n\t\tif (expectedJson == null) {\n\t\t\treturn fail(\"Expected JSON but got null\");\n\t\t}\n\t\ttry {\n\t\t\treturn compareAction.applyWithException(expectedJson.toString());\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tif (ex instanceof RuntimeException runtimeException) {\n\t\t\t\tthrow runtimeException;\n\t\t\t}\n\t\t\tthrow new IllegalStateException(ex);\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["JSONCompareResult", "compare", "private", "(", ",", ")", "{", "}", "CharSequence", "expectedJson", "compareAction", "if", "if", "try", "ThrowingFunction", "(", ")", "{", "}", "(", ")", "{", "}", "{", "}", "catch", "(", ")", "@", "Nullable", "<", "String", ",", "JSONCompareResult", ">", "==", "null", "return", ";", "expectedJson", "==", "null", "return", ";", "return", ";", "ex", "{", "}", "this", ".", "actual", "compareForNull", "fail", "compareAction", ".", "applyWithException", "Exception", "if", "throw", ";", "(", "expectedJson", ")", "(", ")", "(", ")", "(", ")", "{", "}", "new", "IllegalStateException", "\"", "Expected JSON but got null", "\"", "expectedJson", ".", "toString", "ex", "instanceof", "RuntimeException", "runtimeException", "throw", "runtimeException", ";", "(", "ex", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 5, "n_ast_nodes": 138, "ast_depth": 11, "n_identifiers": 11, "vocab_size": 41, "n_whitespaces": 93, "n_words": 47, "nloc": 18, "token_counts": 92}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#1029-1036", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "compareForNull", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#compareForNull", "start_line": 1029, "end_line": 1036, "signature": "compareForNull(@Nullable CharSequence expectedJson)", "original_code": "private JSONCompareResult compareForNull(@Nullable CharSequence expectedJson) {\n\t\tJSONCompareResult result = new JSONCompareResult();\n\t\tresult.passed();\n\t\tif (expectedJson != null) {\n\t\t\tresult.fail(\"Expected null JSON\");\n\t\t}\n\t\treturn result;\n\t}", "doc_comment": ""}, "code_tokens": ["JSONCompareResult", "compareForNull", "private", "(", ")", "{", "}", "CharSequence", "expectedJson", "JSONCompareResult", ";", ";", "if", "return", "result", ";", "result", "=", "result", ".", "passed", "(", ")", "{", "}", "@", "Nullable", "new", "JSONCompareResult", "(", ")", "expectedJson", "!=", "null", ";", "(", ")", "result", ".", "fail", "(", ")", "\"", "Expected null JSON", "\""], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 69, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 24, "n_whitespaces": 37, "n_words": 22, "nloc": 8, "token_counts": 45}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#1038-1042", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "fail", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#fail", "start_line": 1038, "end_line": 1042, "signature": "fail(String message)", "original_code": "private JSONCompareResult fail(String message) {\n\t\tJSONCompareResult result = new JSONCompareResult();\n\t\tresult.fail(message);\n\t\treturn result;\n\t}", "doc_comment": ""}, "code_tokens": ["JSONCompareResult", "fail", "private", "(", ")", "{", "}", "String", "message", "JSONCompareResult", ";", ";", "return", "result", ";", "result", "=", "result", ".", "fail", "new", "JSONCompareResult", "(", "message", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 41, "ast_depth": 8, "n_identifiers": 3, "vocab_size": 15, "n_whitespaces": 20, "n_words": 14, "nloc": 5, "token_counts": 27}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#1044-1049", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "assertNotFailed", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#assertNotFailed", "start_line": 1044, "end_line": 1049, "signature": "assertNotFailed(JSONCompareResult result)", "original_code": "private JsonContentAssert assertNotFailed(JSONCompareResult result) {\n\t\tif (result.failed()) {\n\t\t\tfailWithMessage(\"JSON Comparison failure: %s\", result.getMessage());\n\t\t}\n\t\treturn this;\n\t}", "doc_comment": ""}, "code_tokens": ["JsonContentAssert", "assertNotFailed", "private", "(", ")", "{", "}", "JSONCompareResult", "result", "if", "return", "this", ";", "(", ")", "{", "}", "result", ".", "failed", ";", "(", ")", "failWithMessage", "(", ",", ")", "\"", "JSON Comparison failure: %s", "\"", "result", ".", "getMessage", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 53, "ast_depth": 11, "n_identifiers": 5, "vocab_size": 20, "n_whitespaces": 26, "n_words": 17, "nloc": 6, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#1051-1056", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "assertNotPassed", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#assertNotPassed", "start_line": 1051, "end_line": 1056, "signature": "assertNotPassed(JSONCompareResult result)", "original_code": "private JsonContentAssert assertNotPassed(JSONCompareResult result) {\n\t\tif (result.passed()) {\n\t\t\tfailWithMessage(\"JSON Comparison failure: %s\", result.getMessage());\n\t\t}\n\t\treturn this;\n\t}", "doc_comment": ""}, "code_tokens": ["JsonContentAssert", "assertNotPassed", "private", "(", ")", "{", "}", "JSONCompareResult", "result", "if", "return", "this", ";", "(", ")", "{", "}", "result", ".", "passed", ";", "(", ")", "failWithMessage", "(", ",", ")", "\"", "JSON Comparison failure: %s", "\"", "result", ".", "getMessage", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 53, "ast_depth": 11, "n_identifiers": 5, "vocab_size": 20, "n_whitespaces": 26, "n_words": 17, "nloc": 6, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#1074-1079", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "assertHasEmptyValue", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#assertHasEmptyValue", "start_line": 1074, "end_line": 1079, "signature": "assertHasEmptyValue()", "original_code": "void assertHasEmptyValue() {\n\t\t\tif (ObjectUtils.isEmpty(getValue(false)) || isIndefiniteAndEmpty()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tfailWithMessage(getExpectedValueMessage(\"an empty value\"));\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "assertHasEmptyValue", "(", ")", "{", "}", "if", ";", "(", ")", "{", "}", "failWithMessage", "||", "return", ";", "(", ")", "ObjectUtils", ".", "isEmpty", "isIndefiniteAndEmpty", "getExpectedValueMessage", "(", ")", "(", ")", "(", ")", "getValue", "\"", "an empty value", "\"", "(", "false", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 57, "ast_depth": 11, "n_identifiers": 7, "vocab_size": 20, "n_whitespaces": 28, "n_words": 14, "nloc": 6, "token_counts": 36}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#1081-1087", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "assertDoesNotHaveEmptyValue", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#assertDoesNotHaveEmptyValue", "start_line": 1081, "end_line": 1087, "signature": "assertDoesNotHaveEmptyValue()", "original_code": "void assertDoesNotHaveEmptyValue() {\n\t\t\tif (!ObjectUtils.isEmpty(getValue(false))) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tfailWithMessage(getExpectedValueMessage(\"a non-empty value\"));\n\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "assertDoesNotHaveEmptyValue", "(", ")", "{", "}", "if", ";", "(", ")", "{", "}", "failWithMessage", "!", "return", ";", "(", ")", "ObjectUtils", ".", "isEmpty", "getExpectedValueMessage", "(", ")", "(", ")", "getValue", "\"", "a non-empty value", "\"", "(", "false", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 52, "ast_depth": 11, "n_identifiers": 6, "vocab_size": 19, "n_whitespaces": 27, "n_words": 14, "nloc": 6, "token_counts": 33}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#1089-1096", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "assertHasPath", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#assertHasPath", "start_line": 1089, "end_line": 1096, "signature": "assertHasPath()", "original_code": "void assertHasPath() {\n\t\t\ttry {\n\t\t\t\tread();\n\t\t\t}\n\t\t\tcatch (PathNotFoundException ex) {\n\t\t\t\tfailWithMessage(\"No JSON path \\\"%s\\\" found\", this.expression);\n\t\t\t}\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "assertHasPath", "(", ")", "{", "}", "try", "{", "}", "catch", "(", ")", ";", "ex", "{", "}", "read", "PathNotFoundException", ";", "(", ")", "failWithMessage", "(", ",", ")", "\"", "No JSON path ", "\\\"", "%s", "\\\"", " found", "\"", "this", ".", "expression"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 53, "ast_depth": 11, "n_identifiers": 5, "vocab_size": 22, "n_whitespaces": 40, "n_words": 15, "nloc": 8, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#1098-1106", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "assertDoesNotHavePath", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#assertDoesNotHavePath", "start_line": 1098, "end_line": 1106, "signature": "assertDoesNotHavePath()", "original_code": "void assertDoesNotHavePath() {\n\t\t\ttry {\n\t\t\t\tread();\n\t\t\t\tfailWithMessage(\"Expecting no JSON path \\\"%s\\\"\", this.expression);\n\t\t\t}\n\t\t\tcatch (PathNotFoundException ex) {\n\t\t\t\t// Ignore\n\t\t\t}\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "assertDoesNotHavePath", "(", ")", "{", "}", "try", "{", "}", "catch", "(", ")", ";", ";", "ex", "{", "// Ignore", "}", "read", "failWithMessage", "PathNotFoundException", "(", ")", "(", ",", ")", "\"", "Expecting no JSON path ", "\\\"", "%s", "\\\"", "\"", "this", ".", "expression"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 53, "ast_depth": 10, "n_identifiers": 5, "vocab_size": 22, "n_whitespaces": 46, "n_words": 16, "nloc": 9, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#1108-1116", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "assertHasValue", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#assertHasValue", "start_line": 1108, "end_line": 1116, "signature": "assertHasValue(@Nullable Class<?> type, String expectedDescription)", "original_code": "void assertHasValue(@Nullable Class<?> type, String expectedDescription) {\n\t\t\tObject value = getValue(true);\n\t\t\tif (value == null || isIndefiniteAndEmpty()) {\n\t\t\t\tfailWithNoValueMessage();\n\t\t\t}\n\t\t\tif (type != null && !type.isInstance(value)) {\n\t\t\t\tfailWithMessage(getExpectedValueMessage(expectedDescription));\n\t\t\t}\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "assertHasValue", "(", ",", ")", "{", "}", "type", "String", "expectedDescription", "Object", ";", "if", "if", "Class", "value", "=", "(", ")", "{", "}", "(", ")", "{", "}", "@", "Nullable", "<", ">", "getValue", "||", ";", "&&", ";", "?", "(", "true", ")", "value", "==", "null", "isIndefiniteAndEmpty", "failWithNoValueMessage", "type", "!=", "null", "!", "failWithMessage", "(", ")", "(", ")", "type", ".", "isInstance", "(", ")", "(", "value", ")", "getExpectedValueMessage", "(", "expectedDescription", ")"], "metrics": {"cyclomatic_complexity": 5, "n_ast_nodes": 102, "ast_depth": 11, "n_identifiers": 11, "vocab_size": 35, "n_whitespaces": 54, "n_words": 25, "nloc": 9, "token_counts": 64}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#1118-1123", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "assertDoesNotHaveValue", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#assertDoesNotHaveValue", "start_line": 1118, "end_line": 1123, "signature": "assertDoesNotHaveValue()", "original_code": "void assertDoesNotHaveValue() {\n\t\t\tif (getValue(false) == null || isIndefiniteAndEmpty()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tfailWithMessage(getExpectedValueMessage(\"no value\"));\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "assertDoesNotHaveValue", "(", ")", "{", "}", "if", ";", "(", ")", "{", "}", "failWithMessage", "||", "return", ";", "(", ")", "==", "null", "isIndefiniteAndEmpty", "getExpectedValueMessage", "getValue", "(", ")", "(", ")", "(", "false", ")", "\"", "no value", "\""], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 53, "ast_depth": 10, "n_identifiers": 5, "vocab_size": 19, "n_whitespaces": 29, "n_words": 12, "nloc": 6, "token_counts": 33}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#1125-1127", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "isIndefiniteAndEmpty", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#isIndefiniteAndEmpty", "start_line": 1125, "end_line": 1127, "signature": "isIndefiniteAndEmpty()", "original_code": "private boolean isIndefiniteAndEmpty() {\n\t\t\treturn !isDefinite() && isEmpty();\n\t\t}", "doc_comment": ""}, "code_tokens": ["boolean", "isIndefiniteAndEmpty", "private", "(", ")", "{", "}", "return", ";", "&&", "!", "isEmpty", "isDefinite", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 29, "ast_depth": 9, "n_identifiers": 3, "vocab_size": 13, "n_whitespaces": 13, "n_words": 6, "nloc": 3, "token_counts": 17}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#1129-1131", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "isDefinite", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#isDefinite", "start_line": 1129, "end_line": 1131, "signature": "isDefinite()", "original_code": "private boolean isDefinite() {\n\t\t\treturn this.jsonPath.isDefinite();\n\t\t}", "doc_comment": ""}, "code_tokens": ["boolean", "isDefinite", "private", "(", ")", "{", "}", "return", ";", ".", "isDefinite", "this", ".", "jsonPath", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 25, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 12, "n_whitespaces": 11, "n_words": 7, "nloc": 3, "token_counts": 16}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#1133-1135", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "isEmpty", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#isEmpty", "start_line": 1133, "end_line": 1135, "signature": "isEmpty()", "original_code": "private boolean isEmpty() {\n\t\t\treturn ObjectUtils.isEmpty(getValue(false));\n\t\t}", "doc_comment": ""}, "code_tokens": ["boolean", "isEmpty", "private", "(", ")", "{", "}", "return", ";", "ObjectUtils", ".", "isEmpty", "(", ")", "getValue", "(", "false", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 9, "n_identifiers": 3, "vocab_size": 13, "n_whitespaces": 11, "n_words": 8, "nloc": 3, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#1137-1147", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "getValue", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#getValue", "start_line": 1137, "end_line": 1147, "signature": "getValue(boolean required)", "original_code": "@Nullable Object getValue(boolean required) {\n\t\t\ttry {\n\t\t\t\treturn read();\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\tif (required) {\n\t\t\t\t\tfailWithNoValueMessage();\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}", "doc_comment": ""}, "code_tokens": ["Object", "getValue", "(", ")", "{", "}", "@", "Nullable", "boolean", "required", "try", "{", "}", "catch", "(", ")", "return", ";", "ex", "{", "}", "read", "Exception", "if", "return", "null", ";", "(", ")", "(", "required", ")", "{", "}", ";", "failWithNoValueMessage", "(", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 61, "ast_depth": 12, "n_identifiers": 6, "vocab_size": 20, "n_whitespaces": 57, "n_words": 16, "nloc": 11, "token_counts": 38}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#1149-1151", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "failWithNoValueMessage", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#failWithNoValueMessage", "start_line": 1149, "end_line": 1151, "signature": "failWithNoValueMessage()", "original_code": "private void failWithNoValueMessage() {\n\t\t\tfailWithMessage(\"No value at JSON path \\\"%s\\\"\", this.expression);\n\t\t}", "doc_comment": ""}, "code_tokens": ["void", "failWithNoValueMessage", "private", "(", ")", "{", "}", ";", "failWithMessage", "(", ",", ")", "\"", "No value at JSON path ", "\\\"", "%s", "\\\"", "\"", "this", ".", "expression"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 31, "ast_depth": 8, "n_identifiers": 3, "vocab_size": 17, "n_whitespaces": 16, "n_words": 12, "nloc": 3, "token_counts": 21}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#1153-1156", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "read", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#read", "start_line": 1153, "end_line": 1156, "signature": "read()", "original_code": "private Object read() {\n\t\t\tCharSequence json = JsonContentAssert.this.actual;\n\t\t\treturn this.jsonPath.read((json != null) ? json.toString() : null, JsonContentAssert.this.configuration);\n\t\t}", "doc_comment": ""}, "code_tokens": ["Object", "read", "private", "(", ")", "{", "}", "CharSequence", ";", "return", ";", "json", "=", ".", "read", ".", "actual", "this", ".", "jsonPath", "(", ",", ")", "JsonContentAssert", ".", "this", "?", ":", "null", ".", "configuration", "(", ")", "json", ".", "toString", "JsonContentAssert", ".", "this", "json", "!=", "null", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 64, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 24, "n_whitespaces": 25, "n_words": 20, "nloc": 4, "token_counts": 44}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java#1158-1161", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "language": "Java"}, "method": {"name": "getExpectedValueMessage", "qualified_name": "org.springframework.boot.test.json.JsonContentAssert#getExpectedValueMessage", "start_line": 1158, "end_line": 1161, "signature": "getExpectedValueMessage(String expectedDescription)", "original_code": "private String getExpectedValueMessage(String expectedDescription) {\n\t\t\treturn String.format(\"Expected %s at JSON path \\\"%s\\\" but found: %s\", expectedDescription, this.expression,\n\t\t\t\t\tObjectUtils.nullSafeToString(StringUtils.quoteIfString(getValue(false))));\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getExpectedValueMessage", "private", "(", ")", "{", "}", "String", "expectedDescription", "return", ";", "String", ".", "format", "(", ",", "expectedDescription", ",", ",", ")", "\"", "Expected %s at JSON path ", "\\\"", "%s", "\\\"", " but found: %s", "\"", "this", ".", "expression", "ObjectUtils", ".", "nullSafeToString", "(", ")", "StringUtils", ".", "quoteIfString", "(", ")", "getValue", "(", "false", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 61, "ast_depth": 13, "n_identifiers": 10, "vocab_size": 26, "n_whitespaces": 28, "n_words": 26, "nloc": 4, "token_counts": 44}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/system/OutputCaptureRule.java#62-84", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/system/OutputCaptureRule.java", "language": "Java"}, "method": {"name": "apply", "qualified_name": "org.springframework.boot.test.system.OutputCaptureRule#apply", "start_line": 62, "end_line": 84, "signature": "apply(Statement base, Description description)", "original_code": "@Override\n\tpublic Statement apply(Statement base, Description description) {\n\t\treturn new Statement() {\n\t\t\t@Override\n\t\t\tpublic void evaluate() throws Throwable {\n\t\t\t\tOutputCaptureRule.this.delegate.push();\n\t\t\t\ttry {\n\t\t\t\t\tbase.evaluate();\n\t\t\t\t}\n\t\t\t\tfinally {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (!OutputCaptureRule.this.matchers.isEmpty()) {\n\t\t\t\t\t\t\tString output = OutputCaptureRule.this.delegate.toString();\n\t\t\t\t\t\t\tMatcherAssert.assertThat(output, allOf(OutputCaptureRule.this.matchers));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfinally {\n\t\t\t\t\t\tOutputCaptureRule.this.delegate.pop();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}", "doc_comment": ""}, "code_tokens": ["Statement", "apply", "public", "(", ",", ")", "{", "}", "@", "Override", "Statement", "base", "Description", "description", "return", ";", "new", "Statement", "(", ")", "{", "}", "void", "evaluate", "public", "(", ")", "throws", "Throwable", "{", "}", "@", "Override", ";", "try", ".", "push", "{", "}", "finally", ".", "delegate", "(", ")", ";", "{", "}", "OutputCaptureRule", ".", "this", "base", ".", "evaluate", "try", "(", ")", "{", "}", "finally", "if", "{", "}", "(", ")", "{", "}", ";", "!", "String", ";", ";", ".", "pop", ".", "isEmpty", "output", "=", "MatcherAssert", ".", "assertThat", ".", "delegate", "(", ")", ".", "matchers", "(", ")", ".", "toString", "(", "output", ",", ")", "OutputCaptureRule", ".", "this", "OutputCaptureRule", ".", "this", ".", "delegate", "(", ")", "allOf", "OutputCaptureRule", ".", "this", "(", ")", ".", "matchers", "OutputCaptureRule", ".", "this"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 175, "ast_depth": 23, "n_identifiers": 16, "vocab_size": 39, "n_whitespaces": 138, "n_words": 49, "nloc": 23, "token_counts": 115}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/system/OutputCaptureRule.java#65-82", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/system/OutputCaptureRule.java", "language": "Java"}, "method": {"name": "evaluate", "qualified_name": "org.springframework.boot.test.system.OutputCaptureRule#evaluate", "start_line": 65, "end_line": 82, "signature": "evaluate()", "original_code": "@Override\n\t\t\tpublic void evaluate() throws Throwable {\n\t\t\t\tOutputCaptureRule.this.delegate.push();\n\t\t\t\ttry {\n\t\t\t\t\tbase.evaluate();\n\t\t\t\t}\n\t\t\t\tfinally {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (!OutputCaptureRule.this.matchers.isEmpty()) {\n\t\t\t\t\t\t\tString output = OutputCaptureRule.this.delegate.toString();\n\t\t\t\t\t\t\tMatcherAssert.assertThat(output, allOf(OutputCaptureRule.this.matchers));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfinally {\n\t\t\t\t\t\tOutputCaptureRule.this.delegate.pop();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}", "doc_comment": ""}, "code_tokens": ["void", "evaluate", "public", "(", ")", "throws", "Throwable", "{", "}", "@", "Override", ";", "try", ".", "push", "{", "}", "finally", ".", "delegate", "(", ")", ";", "{", "}", "OutputCaptureRule", ".", "this", "base", ".", "evaluate", "try", "(", ")", "{", "}", "finally", "if", "{", "}", "(", ")", "{", "}", ";", "!", "String", ";", ";", ".", "pop", ".", "isEmpty", "output", "=", "MatcherAssert", ".", "assertThat", ".", "delegate", "(", ")", ".", "matchers", "(", ")", ".", "toString", "(", "output", ",", ")", "OutputCaptureRule", ".", "this", "OutputCaptureRule", ".", "this", ".", "delegate", "(", ")", "allOf", "OutputCaptureRule", ".", "this", "(", ")", ".", "matchers", "OutputCaptureRule", ".", "this"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 142, "ast_depth": 18, "n_identifiers": 14, "vocab_size": 33, "n_whitespaces": 115, "n_words": 38, "nloc": 18, "token_counts": 93}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/system/OutputCaptureRule.java#86-89", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/system/OutputCaptureRule.java", "language": "Java"}, "method": {"name": "getAll", "qualified_name": "org.springframework.boot.test.system.OutputCaptureRule#getAll", "start_line": 86, "end_line": 89, "signature": "getAll()", "original_code": "@Override\n\tpublic String getAll() {\n\t\treturn this.delegate.getAll();\n\t}", "doc_comment": ""}, "code_tokens": ["String", "getAll", "public", "(", ")", "{", "}", "@", "Override", "return", ";", ".", "getAll", "this", ".", "delegate", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 11, "n_words": 8, "nloc": 4, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/system/OutputCaptureRule.java#91-94", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/system/OutputCaptureRule.java", "language": "Java"}, "method": {"name": "getOut", "qualified_name": "org.springframework.boot.test.system.OutputCaptureRule#getOut", "start_line": 91, "end_line": 94, "signature": "getOut()", "original_code": "@Override\n\tpublic String getOut() {\n\t\treturn this.delegate.getOut();\n\t}", "doc_comment": ""}, "code_tokens": ["String", "getOut", "public", "(", ")", "{", "}", "@", "Override", "return", ";", ".", "getOut", "this", ".", "delegate", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 11, "n_words": 8, "nloc": 4, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/system/OutputCaptureRule.java#96-99", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/system/OutputCaptureRule.java", "language": "Java"}, "method": {"name": "getErr", "qualified_name": "org.springframework.boot.test.system.OutputCaptureRule#getErr", "start_line": 96, "end_line": 99, "signature": "getErr()", "original_code": "@Override\n\tpublic String getErr() {\n\t\treturn this.delegate.getErr();\n\t}", "doc_comment": ""}, "code_tokens": ["String", "getErr", "public", "(", ")", "{", "}", "@", "Override", "return", ";", ".", "getErr", "this", ".", "delegate", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 11, "n_words": 8, "nloc": 4, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/system/OutputCaptureRule.java#101-104", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/system/OutputCaptureRule.java", "language": "Java"}, "method": {"name": "toString", "qualified_name": "org.springframework.boot.test.system.OutputCaptureRule#toString", "start_line": 101, "end_line": 104, "signature": "toString()", "original_code": "@Override\n\tpublic String toString() {\n\t\treturn this.delegate.toString();\n\t}", "doc_comment": ""}, "code_tokens": ["String", "toString", "public", "(", ")", "{", "}", "@", "Override", "return", ";", ".", "toString", "this", ".", "delegate", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 11, "n_words": 8, "nloc": 4, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/main/java/org/springframework/boot/test/system/OutputCaptureRule.java#111-113", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/main/java/org/springframework/boot/test/system/OutputCaptureRule.java", "language": "Java"}, "method": {"name": "expect", "qualified_name": "org.springframework.boot.test.system.OutputCaptureRule#expect", "start_line": 111, "end_line": 113, "signature": "expect(Matcher<? super String> matcher)", "original_code": "public void expect(Matcher<? super String> matcher) {\n\t\tthis.matchers.add(matcher);\n\t}", "doc_comment": "/**\n\t * Verify that the output is matched by the supplied {@code matcher}. Verification is\n\t * performed after the test method has executed.\n\t * @param matcher the matcher\n\t */"}, "code_tokens": ["void", "expect", "public", "(", ")", "{", "}", "matcher", ";", "Matcher", ".", "add", "<", ">", "this", ".", "matchers", "(", "matcher", ")", "?", "super", "String"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 36, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 19, "n_whitespaces": 11, "n_words": 11, "nloc": 3, "token_counts": 23}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/test/java/org/springframework/boot/test/system/OutputCaptureRuleTests.java#35-39", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/test/java/org/springframework/boot/test/system/OutputCaptureRuleTests.java", "language": "Java"}, "method": {"name": "toStringShouldReturnAllCapturedOutput", "qualified_name": "test.java.org.springframework.boot.test.system.OutputCaptureRuleTests#toStringShouldReturnAllCapturedOutput", "start_line": 35, "end_line": 39, "signature": "toStringShouldReturnAllCapturedOutput()", "original_code": "@Test\n\tpublic void toStringShouldReturnAllCapturedOutput() {\n\t\tSystem.out.println(\"Hello World\");\n\t\tassertThat(this.output.toString()).contains(\"Hello World\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "toStringShouldReturnAllCapturedOutput", "public", "(", ")", "{", "}", "@", "Test", ";", ";", ".", "println", ".", "contains", "System", ".", "out", "(", ")", "assertThat", "(", ")", "\"", "Hello World", "\"", "(", ")", "\"", "Hello World", "\"", ".", "toString", "this", ".", "output", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 58, "ast_depth": 10, "n_identifiers": 9, "vocab_size": 21, "n_whitespaces": 15, "n_words": 16, "nloc": 5, "token_counts": 38}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/test/java/org/springframework/boot/test/system/OutputCaptureRuleTests.java#41-46", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/test/java/org/springframework/boot/test/system/OutputCaptureRuleTests.java", "language": "Java"}, "method": {"name": "getAllShouldReturnAllCapturedOutput", "qualified_name": "test.java.org.springframework.boot.test.system.OutputCaptureRuleTests#getAllShouldReturnAllCapturedOutput", "start_line": 41, "end_line": 46, "signature": "getAllShouldReturnAllCapturedOutput()", "original_code": "@Test\n\tpublic void getAllShouldReturnAllCapturedOutput() {\n\t\tSystem.out.println(\"Hello World\");\n\t\tSystem.err.println(\"Hello Error\");\n\t\tassertThat(this.output.getAll()).contains(\"Hello World\", \"Hello Error\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "getAllShouldReturnAllCapturedOutput", "public", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ".", "println", ".", "println", ".", "contains", "System", ".", "out", "(", ")", "System", ".", "err", "(", ")", "assertThat", "(", ",", ")", "\"", "Hello World", "\"", "\"", "Hello Error", "\"", "(", ")", "\"", "Hello World", "\"", "\"", "Hello Error", "\"", ".", "getAll", "this", ".", "output", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 79, "ast_depth": 10, "n_identifiers": 10, "vocab_size": 24, "n_whitespaces": 21, "n_words": 23, "nloc": 6, "token_counts": 53}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/test/java/org/springframework/boot/test/system/OutputCaptureRuleTests.java#48-54", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/test/java/org/springframework/boot/test/system/OutputCaptureRuleTests.java", "language": "Java"}, "method": {"name": "getOutShouldOnlyReturnOutputCapturedFromSystemOut", "qualified_name": "test.java.org.springframework.boot.test.system.OutputCaptureRuleTests#getOutShouldOnlyReturnOutputCapturedFromSystemOut", "start_line": 48, "end_line": 54, "signature": "getOutShouldOnlyReturnOutputCapturedFromSystemOut()", "original_code": "@Test\n\tpublic void getOutShouldOnlyReturnOutputCapturedFromSystemOut() {\n\t\tSystem.out.println(\"Hello World\");\n\t\tSystem.err.println(\"Hello Error\");\n\t\tassertThat(this.output.getOut()).contains(\"Hello World\");\n\t\tassertThat(this.output.getOut()).doesNotContain(\"Hello Error\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "getOutShouldOnlyReturnOutputCapturedFromSystemOut", "public", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ";", ".", "println", ".", "println", ".", "contains", ".", "doesNotContain", "System", ".", "out", "(", ")", "System", ".", "err", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "\"", "Hello World", "\"", "\"", "Hello Error", "\"", "(", ")", "\"", "Hello World", "\"", "(", ")", "\"", "Hello Error", "\"", ".", "getOut", ".", "getOut", "this", ".", "output", "(", ")", "this", ".", "output", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 101, "ast_depth": 10, "n_identifiers": 11, "vocab_size": 24, "n_whitespaces": 23, "n_words": 28, "nloc": 7, "token_counts": 67}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/test/java/org/springframework/boot/test/system/OutputCaptureRuleTests.java#56-62", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/test/java/org/springframework/boot/test/system/OutputCaptureRuleTests.java", "language": "Java"}, "method": {"name": "getErrShouldOnlyReturnOutputCapturedFromSystemErr", "qualified_name": "test.java.org.springframework.boot.test.system.OutputCaptureRuleTests#getErrShouldOnlyReturnOutputCapturedFromSystemErr", "start_line": 56, "end_line": 62, "signature": "getErrShouldOnlyReturnOutputCapturedFromSystemErr()", "original_code": "@Test\n\tpublic void getErrShouldOnlyReturnOutputCapturedFromSystemErr() {\n\t\tSystem.out.println(\"Hello World\");\n\t\tSystem.err.println(\"Hello Error\");\n\t\tassertThat(this.output.getErr()).contains(\"Hello Error\");\n\t\tassertThat(this.output.getErr()).doesNotContain(\"Hello World\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "getErrShouldOnlyReturnOutputCapturedFromSystemErr", "public", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ";", ".", "println", ".", "println", ".", "contains", ".", "doesNotContain", "System", ".", "out", "(", ")", "System", ".", "err", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "\"", "Hello World", "\"", "\"", "Hello Error", "\"", "(", ")", "\"", "Hello Error", "\"", "(", ")", "\"", "Hello World", "\"", ".", "getErr", ".", "getErr", "this", ".", "output", "(", ")", "this", ".", "output", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 101, "ast_depth": 10, "n_identifiers": 11, "vocab_size": 24, "n_whitespaces": 23, "n_words": 28, "nloc": 7, "token_counts": 67}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot-test/src/test/java/org/springframework/boot/test/system/OutputCaptureRuleTests.java#64-68", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/test/java/org/springframework/boot/test/system/OutputCaptureRuleTests.java", "language": "Java"}, "method": {"name": "captureShouldBeAssertable", "qualified_name": "test.java.org.springframework.boot.test.system.OutputCaptureRuleTests#captureShouldBeAssertable", "start_line": 64, "end_line": 68, "signature": "captureShouldBeAssertable()", "original_code": "@Test\n\tpublic void captureShouldBeAssertable() {\n\t\tSystem.out.println(\"Hello World\");\n\t\tassertThat(this.output).contains(\"Hello World\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "captureShouldBeAssertable", "public", "(", ")", "{", "}", "@", "Test", ";", ";", ".", "println", ".", "contains", "System", ".", "out", "(", ")", "assertThat", "(", ")", "\"", "Hello World", "\"", "(", ")", "\"", "Hello World", "\"", "this", ".", "output"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 52, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 20, "n_whitespaces": 15, "n_words": 15, "nloc": 5, "token_counts": 34}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java#158-164", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java", "language": "Java"}, "method": {"name": "getStandardConfigLocations", "qualified_name": "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem#getStandardConfigLocations", "start_line": 158, "end_line": 164, "signature": "getStandardConfigLocations()", "original_code": "@Override\n\tprotected String[] getStandardConfigLocations() {\n\t\tList<String> locations = new ArrayList<>();\n\t\taddLocationsFromProperties(locations);\n\t\taddStandardLocations(locations);\n\t\treturn StringUtils.toStringArray(locations);\n\t}", "doc_comment": ""}, "code_tokens": ["getStandardConfigLocations", "protected", "String", "(", ")", "{", "}", "@", "Override", "[", "]", ";", ";", ";", "return", ";", "List", "locations", "=", "addLocationsFromProperties", "addStandardLocations", "StringUtils", ".", "toStringArray", "<", "String", ">", "new", "(", "locations", ")", "(", "locations", ")", "(", "locations", ")", "ArrayList", "(", ")", "<", ">"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 67, "ast_depth": 9, "n_identifiers": 7, "vocab_size": 25, "n_whitespaces": 24, "n_words": 17, "nloc": 7, "token_counts": 42}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java#166-173", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java", "language": "Java"}, "method": {"name": "addLocationsFromProperties", "qualified_name": "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem#addLocationsFromProperties", "start_line": 166, "end_line": 173, "signature": "addLocationsFromProperties(List<String> locations)", "original_code": "private void addLocationsFromProperties(List<String> locations) {\n\t\tfor (String property : List.of(\"log4j2.configurationFile\", \"log4j.configuration.location\")) {\n\t\t\tString propertyDefinedLocation = PropertiesUtil.getProperties().getStringProperty(property);\n\t\t\tif (propertyDefinedLocation != null) {\n\t\t\t\tlocations.add(propertyDefinedLocation);\n\t\t\t}\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "addLocationsFromProperties", "private", "(", ")", "{", "}", "locations", "for", "(", "String", "property", ":", ")", "List", "List", ".", "of", "{", "}", "<", "String", ">", "(", ",", ")", "String", ";", "if", "\"", "log4j2.configurationFile", "\"", "\"", "log4j.configuration.location", "\"", "propertyDefinedLocation", "=", "(", ")", "{", "}", ".", "getStringProperty", "propertyDefinedLocation", "!=", "null", ";", "PropertiesUtil", ".", "getProperties", "(", "property", ")", "locations", ".", "add", "(", ")", "(", "propertyDefinedLocation", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 88, "ast_depth": 11, "n_identifiers": 10, "vocab_size": 31, "n_whitespaces": 42, "n_words": 28, "nloc": 8, "token_counts": 61}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java#175-183", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java", "language": "Java"}, "method": {"name": "addStandardLocations", "qualified_name": "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem#addStandardLocations", "start_line": 175, "end_line": 183, "signature": "addStandardLocations(List<String> locations)", "original_code": "private void addStandardLocations(List<String> locations) {\n\t\tLoggerContext loggerContext = getLoggerContext();\n\t\tString contextName = loggerContext.getName();\n\t\tList<String> extensions = getStandardConfigExtensions();\n\t\taddLocation(locations, \"log4j2-test\" + contextName, extensions);\n\t\taddLocation(locations, \"log4j2-test\", extensions);\n\t\taddLocation(locations, \"log4j2\" + contextName, extensions);\n\t\taddLocation(locations, \"log4j2\", extensions);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "addStandardLocations", "private", "(", ")", "{", "}", "locations", "LoggerContext", ";", "String", ";", ";", ";", ";", ";", ";", "List", "loggerContext", "=", "contextName", "=", "List", "extensions", "=", "addLocation", "addLocation", "addLocation", "addLocation", "<", "String", ">", "getLoggerContext", "loggerContext", ".", "getName", "<", "String", ">", "getStandardConfigExtensions", "(", "locations", ",", ",", "extensions", ")", "(", "locations", ",", ",", "extensions", ")", "(", "locations", ",", ",", "extensions", ")", "(", "locations", ",", ",", "extensions", ")", "(", ")", "(", ")", "(", ")", "+", "contextName", "\"", "log4j2-test", "\"", "+", "contextName", "\"", "log4j2", "\"", "\"", "log4j2-test", "\"", "\"", "log4j2", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 126, "ast_depth": 9, "n_identifiers": 9, "vocab_size": 28, "n_whitespaces": 48, "n_words": 37, "nloc": 9, "token_counts": 86}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java#185-204", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java", "language": "Java"}, "method": {"name": "getStandardConfigExtensions", "qualified_name": "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem#getStandardConfigExtensions", "start_line": 185, "end_line": 204, "signature": "getStandardConfigExtensions()", "original_code": "private List<String> getStandardConfigExtensions() {\n\t\tList<String> extensions = new ArrayList<>();\n\t\t// These classes need to be visible by the classloader that loads Log4j Core.\n\t\tClassLoader classLoader = LoggerContext.class.getClassLoader();\n\t\t// The order of the extensions corresponds to the order in which Log4j Core 2 and\n\t\t// 3 will try to load them, in decreasing value of @Order.\n\t\tif (isPresent(classLoader, PROPS_CONFIGURATION_FACTORY_V2)\n\t\t\t\t|| isPresent(classLoader, PROPS_CONFIGURATION_FACTORY_V3)) {\n\t\t\textensions.add(\".properties\");\n\t\t}\n\t\tif (isPresent(classLoader, YAML_CONFIGURATION_FACTORY_V2, YAML_TREE_PARSER_V2)\n\t\t\t\t|| isPresent(classLoader, YAML_CONFIGURATION_FACTORY_V3)) {\n\t\t\tCollections.addAll(extensions, \".yaml\", \".yml\");\n\t\t}\n\t\tif (isPresent(classLoader, JSON_TREE_PARSER_V2) || isPresent(classLoader, JSON_TREE_PARSER_V3)) {\n\t\t\tCollections.addAll(extensions, \".json\", \".jsn\");\n\t\t}\n\t\textensions.add(\".xml\");\n\t\treturn extensions;\n\t}", "doc_comment": ""}, "code_tokens": ["getStandardConfigExtensions", "private", "List", "(", ")", "{", "// These classes need to be visible by the classloader that loads Log4j Core.", "// The order of the extensions corresponds to the order in which Log4j Core 2 and", "// 3 will try to load them, in decreasing value of @Order.", "}", "<", "String", ">", ";", "ClassLoader", ";", "if", "if", "if", ";", "return", "extensions", ";", "List", "extensions", "=", "classLoader", "=", "(", ")", "{", "}", "(", ")", "{", "}", "(", ")", "{", "}", "extensions", ".", "add", "<", "String", ">", "new", ".", "getClassLoader", "||", ";", "||", ";", "||", ";", "(", ")", "ArrayList", "(", ")", "LoggerContext", ".", "class", "(", ")", "isPresent", "isPresent", "extensions", ".", "add", "isPresent", "isPresent", "Collections", ".", "addAll", "isPresent", "isPresent", "Collections", ".", "addAll", "\"", ".xml", "\"", "<", ">", "(", "classLoader", ",", "PROPS_CONFIGURATION_FACTORY_V2", ")", "(", "classLoader", ",", "PROPS_CONFIGURATION_FACTORY_V3", ")", "(", ")", "(", "classLoader", ",", "YAML_CONFIGURATION_FACTORY_V2", ",", "YAML_TREE_PARSER_V2", ")", "(", "classLoader", ",", "YAML_CONFIGURATION_FACTORY_V3", ")", "(", "extensions", ",", ",", ")", "(", "classLoader", ",", "JSON_TREE_PARSER_V2", ")", "(", "classLoader", ",", "JSON_TREE_PARSER_V3", ")", "(", "extensions", ",", ",", ")", "\"", ".properties", "\"", "\"", ".yaml", "\"", "\"", ".yml", "\"", "\"", ".json", "\"", "\"", ".jsn", "\""], "metrics": {"cyclomatic_complexity": 7, "n_ast_nodes": 207, "ast_depth": 10, "n_identifiers": 15, "vocab_size": 46, "n_whitespaces": 134, "n_words": 93, "nloc": 20, "token_counts": 144}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java#206-208", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java", "language": "Java"}, "method": {"name": "addLocation", "qualified_name": "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem#addLocation", "start_line": 206, "end_line": 208, "signature": "addLocation(List<String> locations, String location, List<String> extensions)", "original_code": "private void addLocation(List<String> locations, String location, List<String> extensions) {\n\t\textensions.forEach((extension) -> locations.add(location + extension));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "addLocation", "private", "(", ",", ",", ")", "{", "}", "locations", "String", "location", "extensions", ";", "List", "List", "extensions", ".", "forEach", "<", "String", ">", "<", "String", ">", "(", ")", "->", "(", "extension", ")", "locations", ".", "add", "(", ")", "location", "+", "extension"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 59, "ast_depth": 11, "n_identifiers": 7, "vocab_size": 22, "n_whitespaces": 17, "n_words": 18, "nloc": 3, "token_counts": 39}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java#210-217", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java", "language": "Java"}, "method": {"name": "isPresent", "qualified_name": "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem#isPresent", "start_line": 210, "end_line": 217, "signature": "isPresent(ClassLoader classLoader, String... classNames)", "original_code": "private boolean isPresent(ClassLoader classLoader, String... classNames) {\n\t\tfor (String className : classNames) {\n\t\t\tif (!isClassAvailable(classLoader, className)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}", "doc_comment": ""}, "code_tokens": ["boolean", "isPresent", "private", "(", ",", ")", "{", "}", "ClassLoader", "classLoader", "String", "...", "for", "(", "String", "className", ":", "classNames", ")", "return", "true", ";", "classNames", "{", "}", "if", "(", ")", "{", "}", "!", "return", "false", ";", "isClassAvailable", "(", "classLoader", ",", "className", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 58, "ast_depth": 11, "n_identifiers": 5, "vocab_size": 23, "n_whitespaces": 40, "n_words": 19, "nloc": 8, "token_counts": 40}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java#219-221", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java", "language": "Java"}, "method": {"name": "isClassAvailable", "qualified_name": "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem#isClassAvailable", "start_line": 219, "end_line": 221, "signature": "isClassAvailable(ClassLoader classLoader, String className)", "original_code": "protected boolean isClassAvailable(ClassLoader classLoader, String className) {\n\t\treturn ClassUtils.isPresent(className, classLoader);\n\t}", "doc_comment": ""}, "code_tokens": ["boolean", "isClassAvailable", "protected", "(", ",", ")", "{", "}", "ClassLoader", "classLoader", "String", "className", "return", ";", "ClassUtils", ".", "isPresent", "(", "className", ",", "classLoader", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 32, "ast_depth": 7, "n_identifiers": 5, "vocab_size": 17, "n_whitespaces": 13, "n_words": 12, "nloc": 3, "token_counts": 22}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java#223-226", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java", "language": "Java"}, "method": {"name": "isClassAvailable", "qualified_name": "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem#isClassAvailable", "start_line": 223, "end_line": 226, "signature": "isClassAvailable(String className)", "original_code": "@Deprecated(since = \"4.0.0\", forRemoval = true)\n\tprotected boolean isClassAvailable(String className) {\n\t\treturn ClassUtils.isPresent(className, getClassLoader());\n\t}", "doc_comment": ""}, "code_tokens": ["boolean", "isClassAvailable", "protected", "(", ")", "{", "}", "@", "Deprecated", "String", "className", "return", ";", "(", ",", ")", "ClassUtils", ".", "isPresent", "since", "=", "forRemoval", "=", "true", "(", "className", ",", ")", "\"", "4.0.0", "\"", "getClassLoader", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 50, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 24, "n_whitespaces": 18, "n_words": 17, "nloc": 4, "token_counts": 34}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java#228-238", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java", "language": "Java"}, "method": {"name": "beforeInitialize", "qualified_name": "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem#beforeInitialize", "start_line": 228, "end_line": 238, "signature": "beforeInitialize()", "original_code": "@Override\n\tpublic void beforeInitialize() {\n\t\tLoggerContext loggerContext = getLoggerContext();\n\t\tif (isAlreadyInitialized(loggerContext)) {\n\t\t\treturn;\n\t\t}\n\t\tif (!configureJdkLoggingBridgeHandler()) {\n\t\t\tsuper.beforeInitialize();\n\t\t}\n\t\tloggerContext.getConfiguration().addFilter(FILTER);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "beforeInitialize", "public", "(", ")", "{", "}", "@", "Override", "LoggerContext", ";", "if", "if", ";", "loggerContext", "=", "(", ")", "{", "}", "(", ")", "{", "}", ".", "addFilter", "getLoggerContext", "isAlreadyInitialized", "return", ";", "!", ";", "loggerContext", ".", "getConfiguration", "(", "FILTER", ")", "(", ")", "(", "loggerContext", ")", "configureJdkLoggingBridgeHandler", "super", ".", "beforeInitialize", "(", ")", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 83, "ast_depth": 9, "n_identifiers": 9, "vocab_size": 24, "n_whitespaces": 40, "n_words": 19, "nloc": 11, "token_counts": 53}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java#240-253", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java", "language": "Java"}, "method": {"name": "configureJdkLoggingBridgeHandler", "qualified_name": "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem#configureJdkLoggingBridgeHandler", "start_line": 240, "end_line": 253, "signature": "configureJdkLoggingBridgeHandler()", "original_code": "private boolean configureJdkLoggingBridgeHandler() {\n\t\ttry {\n\t\t\tif (isJulUsingASingleConsoleHandlerAtMost() && !isLog4jLogManagerInstalled()\n\t\t\t\t\t&& isLog4jBridgeHandlerAvailable()) {\n\t\t\t\tremoveDefaultRootHandler();\n\t\t\t\tLog4jBridgeHandler.install(false, null, true);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\tcatch (Throwable ex) {\n\t\t\t// Ignore. No java.util.logging bridge is installed.\n\t\t}\n\t\treturn false;\n\t}", "doc_comment": ""}, "code_tokens": ["boolean", "configureJdkLoggingBridgeHandler", "private", "(", ")", "{", "}", "try", "return", "false", ";", "{", "}", "catch", "(", ")", "if", "ex", "{", "// Ignore. No java.util.logging bridge is installed.", "}", "(", ")", "{", "}", "Throwable", "&&", ";", ";", "return", "true", ";", "&&", "isLog4jBridgeHandlerAvailable", "removeDefaultRootHandler", "Log4jBridgeHandler", ".", "install", "isJulUsingASingleConsoleHandlerAtMost", "!", "(", ")", "(", ")", "(", "false", ",", "null", ",", "true", ")", "(", ")", "isLog4jLogManagerInstalled", "(", ")"], "metrics": {"cyclomatic_complexity": 5, "n_ast_nodes": 87, "ast_depth": 13, "n_identifiers": 8, "vocab_size": 28, "n_whitespaces": 72, "n_words": 29, "nloc": 14, "token_counts": 56}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java#255-259", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java", "language": "Java"}, "method": {"name": "isJulUsingASingleConsoleHandlerAtMost", "qualified_name": "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem#isJulUsingASingleConsoleHandlerAtMost", "start_line": 255, "end_line": 259, "signature": "isJulUsingASingleConsoleHandlerAtMost()", "original_code": "private boolean isJulUsingASingleConsoleHandlerAtMost() {\n\t\tjava.util.logging.Logger rootLogger = java.util.logging.LogManager.getLogManager().getLogger(\"\");\n\t\tHandler[] handlers = rootLogger.getHandlers();\n\t\treturn handlers.length == 0 || (handlers.length == 1 && handlers[0] instanceof ConsoleHandler);\n\t}", "doc_comment": ""}, "code_tokens": ["boolean", "isJulUsingASingleConsoleHandlerAtMost", "private", "(", ")", "{", "}", ";", ";", "return", ";", ".", "Logger", "rootLogger", "=", "Handler", "handlers", "=", "||", ".", "logging", ".", "getLogger", "[", "]", "rootLogger", ".", "getHandlers", "==", "0", "(", ")", "java", ".", "util", ".", "getLogManager", "(", ")", "(", ")", "handlers", ".", "length", "&&", ".", "LogManager", "(", ")", "\"", "\"", "==", "1", "instanceof", "ConsoleHandler", ".", "logging", "handlers", ".", "length", "handlers", "[", "0", "]", "java", ".", "util"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 101, "ast_depth": 11, "n_identifiers": 11, "vocab_size": 33, "n_whitespaces": 31, "n_words": 29, "nloc": 5, "token_counts": 67}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java#261-264", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java", "language": "Java"}, "method": {"name": "isLog4jLogManagerInstalled", "qualified_name": "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem#isLog4jLogManagerInstalled", "start_line": 261, "end_line": 264, "signature": "isLog4jLogManagerInstalled()", "original_code": "private boolean isLog4jLogManagerInstalled() {\n\t\tfinal String logManagerClassName = java.util.logging.LogManager.getLogManager().getClass().getName();\n\t\treturn LOG4J_LOG_MANAGER.equals(logManagerClassName);\n\t}", "doc_comment": ""}, "code_tokens": ["boolean", "isLog4jLogManagerInstalled", "private", "(", ")", "{", "}", "String", ";", "return", ";", "final", "logManagerClassName", "=", "LOG4J_LOG_MANAGER", ".", "equals", ".", "getName", "(", "logManagerClassName", ")", ".", "getClass", "(", ")", ".", "getLogManager", "(", ")", ".", "LogManager", "(", ")", ".", "logging", "java", ".", "util"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 59, "ast_depth": 12, "n_identifiers": 11, "vocab_size": 23, "n_whitespaces": 16, "n_words": 17, "nloc": 4, "token_counts": 39}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java#266-268", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java", "language": "Java"}, "method": {"name": "isLog4jBridgeHandlerAvailable", "qualified_name": "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem#isLog4jBridgeHandlerAvailable", "start_line": 266, "end_line": 268, "signature": "isLog4jBridgeHandlerAvailable()", "original_code": "private boolean isLog4jBridgeHandlerAvailable() {\n\t\treturn ClassUtils.isPresent(LOG4J_BRIDGE_HANDLER, getClassLoader());\n\t}", "doc_comment": ""}, "code_tokens": ["boolean", "isLog4jBridgeHandlerAvailable", "private", "(", ")", "{", "}", "return", ";", "ClassUtils", ".", "isPresent", "(", "LOG4J_BRIDGE_HANDLER", ",", ")", "getClassLoader", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 29, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 15, "n_whitespaces": 10, "n_words": 8, "nloc": 3, "token_counts": 19}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java#270-279", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java", "language": "Java"}, "method": {"name": "removeLog4jBridgeHandler", "qualified_name": "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem#removeLog4jBridgeHandler", "start_line": 270, "end_line": 279, "signature": "removeLog4jBridgeHandler()", "original_code": "private void removeLog4jBridgeHandler() {\n\t\tremoveDefaultRootHandler();\n\t\tjava.util.logging.Logger rootLogger = java.util.logging.LogManager.getLogManager().getLogger(\"\");\n\t\tfor (final Handler handler : rootLogger.getHandlers()) {\n\t\t\tif (handler instanceof Log4jBridgeHandler) {\n\t\t\t\thandler.close();\n\t\t\t\trootLogger.removeHandler(handler);\n\t\t\t}\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "removeLog4jBridgeHandler", "private", "(", ")", "{", "}", ";", ";", "for", "(", "Handler", "handler", ":", ")", "removeDefaultRootHandler", ".", "Logger", "rootLogger", "=", "final", "rootLogger", ".", "getHandlers", "{", "}", "(", ")", ".", "logging", ".", "getLogger", "(", ")", "if", "java", ".", "util", ".", "getLogManager", "(", ")", "(", ")", "{", "}", ".", "LogManager", "(", ")", "\"", "\"", "handler", "instanceof", "Log4jBridgeHandler", ";", ";", ".", "logging", "handler", ".", "close", "rootLogger", ".", "removeHandler", "java", ".", "util", "(", ")", "(", "handler", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 109, "ast_depth": 11, "n_identifiers": 13, "vocab_size": 31, "n_whitespaces": 48, "n_words": 30, "nloc": 10, "token_counts": 73}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java#281-292", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java", "language": "Java"}, "method": {"name": "removeDefaultRootHandler", "qualified_name": "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem#removeDefaultRootHandler", "start_line": 281, "end_line": 292, "signature": "removeDefaultRootHandler()", "original_code": "private void removeDefaultRootHandler() {\n\t\ttry {\n\t\t\tjava.util.logging.Logger rootLogger = java.util.logging.LogManager.getLogManager().getLogger(\"\");\n\t\t\tHandler[] handlers = rootLogger.getHandlers();\n\t\t\tif (handlers.length == 1 && handlers[0] instanceof ConsoleHandler) {\n\t\t\t\trootLogger.removeHandler(handlers[0]);\n\t\t\t}\n\t\t}\n\t\tcatch (Throwable ex) {\n\t\t\t// Ignore and continue\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "removeDefaultRootHandler", "private", "(", ")", "{", "}", "try", "{", "}", "catch", "(", ")", ";", ";", "if", "ex", "{", "// Ignore and continue", "}", ".", "Logger", "rootLogger", "=", "Handler", "handlers", "=", "(", ")", "{", "}", "Throwable", ".", "logging", ".", "getLogger", "[", "]", "rootLogger", ".", "getHandlers", "&&", ";", "java", ".", "util", ".", "getLogManager", "(", ")", "(", ")", "==", "1", "instanceof", "ConsoleHandler", "rootLogger", ".", "removeHandler", ".", "LogManager", "(", ")", "\"", "\"", "handlers", ".", "length", "handlers", "[", "0", "]", "(", ")", ".", "logging", "handlers", "[", "0", "]", "java", ".", "util"], "metrics": {"cyclomatic_complexity": 4, "n_ast_nodes": 125, "ast_depth": 13, "n_identifiers": 13, "vocab_size": 38, "n_whitespaces": 63, "n_words": 37, "nloc": 12, "token_counts": 83}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java#294-313", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java", "language": "Java"}, "method": {"name": "initialize", "qualified_name": "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem#initialize", "start_line": 294, "end_line": 313, "signature": "initialize(LoggingInitializationContext initializationContext, @Nullable String configLocation,\n\t\t\t@Nullable LogFile logFile)", "original_code": "@Override\n\tpublic void initialize(LoggingInitializationContext initializationContext, @Nullable String configLocation,\n\t\t\t@Nullable LogFile logFile) {\n\t\tLoggerContext loggerContext = getLoggerContext();\n\t\tif (isAlreadyInitialized(loggerContext)) {\n\t\t\treturn;\n\t\t}\n\t\tStatusConsoleListener listener = new StatusConsoleListener(Level.WARN);\n\t\tStatusLogger.getLogger().registerListener(listener);\n\t\tloggerContext.putObject(STATUS_LISTENER_KEY, listener);\n\t\tEnvironment environment = initializationContext.getEnvironment();\n\t\tif (environment != null) {\n\t\t\tloggerContext.putObject(ENVIRONMENT_KEY, environment);\n\t\t\tLog4J2LoggingSystem.propertySource.setEnvironment(environment);\n\t\t\tPropertiesUtil.getProperties().addPropertySource(Log4J2LoggingSystem.propertySource);\n\t\t}\n\t\tloggerContext.getConfiguration().removeFilter(FILTER);\n\t\tsuper.initialize(initializationContext, configLocation, logFile);\n\t\tmarkAsInitialized(loggerContext);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "initialize", "public", "(", ",", ",", ")", "{", "}", "@", "Override", "LoggingInitializationContext", "initializationContext", "String", "configLocation", "LogFile", "logFile", "LoggerContext", ";", "if", "StatusConsoleListener", ";", ";", ";", "Environment", ";", "if", ";", ";", ";", "loggerContext", "=", "(", ")", "{", "}", "listener", "=", ".", "registerListener", "loggerContext", ".", "putObject", "environment", "=", "(", ")", "{", "}", ".", "removeFilter", "super", ".", "initialize", "markAsInitialized", "@", "Nullable", "@", "Nullable", "getLoggerContext", "isAlreadyInitialized", "return", ";", "new", "StatusConsoleListener", "StatusLogger", ".", "getLogger", "(", "listener", ")", "(", "STATUS_LISTENER_KEY", ",", "listener", ")", "initializationContext", ".", "getEnvironment", "environment", "!=", "null", ";", ";", ";", "loggerContext", ".", "getConfiguration", "(", "FILTER", ")", "(", "initializationContext", ",", "configLocation", ",", "logFile", ")", "(", "loggerContext", ")", "(", ")", "(", "loggerContext", ")", "(", ")", "(", ")", "(", ")", "loggerContext", ".", "putObject", ".", "setEnvironment", ".", "addPropertySource", "(", ")", "Level", ".", "WARN", "(", "ENVIRONMENT_KEY", ",", "environment", ")", "Log4J2LoggingSystem", ".", "propertySource", "(", "environment", ")", "PropertiesUtil", ".", "getProperties", "(", ")", "(", ")", "Log4J2LoggingSystem", ".", "propertySource"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 213, "ast_depth": 10, "n_identifiers": 30, "vocab_size": 53, "n_whitespaces": 89, "n_words": 64, "nloc": 20, "token_counts": 145}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java#315-319", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java", "language": "Java"}, "method": {"name": "loadDefaults", "qualified_name": "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem#loadDefaults", "start_line": 315, "end_line": 319, "signature": "loadDefaults(LoggingInitializationContext initializationContext, @Nullable LogFile logFile)", "original_code": "@Override\n\tprotected void loadDefaults(LoggingInitializationContext initializationContext, @Nullable LogFile logFile) {\n\t\tString location = getPackagedConfigFile((logFile != null) ? \"log4j2-file.xml\" : \"log4j2.xml\");\n\t\tload(initializationContext, location, logFile);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "loadDefaults", "protected", "(", ",", ")", "{", "}", "@", "Override", "LoggingInitializationContext", "initializationContext", "LogFile", "logFile", "String", ";", ";", "location", "=", "load", "@", "Nullable", "getPackagedConfigFile", "(", "initializationContext", ",", "location", ",", "logFile", ")", "(", ")", "?", ":", "(", ")", "\"", "log4j2-file.xml", "\"", "\"", "log4j2.xml", "\"", "logFile", "!=", "null"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 67, "ast_depth": 11, "n_identifiers": 8, "vocab_size": 28, "n_whitespaces": 28, "n_words": 23, "nloc": 5, "token_counts": 45}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java#321-325", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java", "language": "Java"}, "method": {"name": "loadConfiguration", "qualified_name": "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem#loadConfiguration", "start_line": 321, "end_line": 325, "signature": "loadConfiguration(LoggingInitializationContext initializationContext, String location,\n\t\t\t@Nullable LogFile logFile)", "original_code": "@Override\n\tprotected void loadConfiguration(LoggingInitializationContext initializationContext, String location,\n\t\t\t@Nullable LogFile logFile) {\n\t\tload(initializationContext, location, logFile);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "loadConfiguration", "protected", "(", ",", ",", ")", "{", "}", "@", "Override", "LoggingInitializationContext", "initializationContext", "String", "location", "LogFile", "logFile", ";", "load", "@", "Nullable", "(", "initializationContext", ",", "location", ",", "logFile", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 42, "ast_depth": 7, "n_identifiers": 7, "vocab_size": 19, "n_whitespaces": 21, "n_words": 15, "nloc": 5, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java#327-333", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java", "language": "Java"}, "method": {"name": "load", "qualified_name": "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem#load", "start_line": 327, "end_line": 333, "signature": "load(LoggingInitializationContext initializationContext, String location, @Nullable LogFile logFile)", "original_code": "private void load(LoggingInitializationContext initializationContext, String location, @Nullable LogFile logFile) {\n\t\tList<String> overrides = getOverrides(initializationContext);\n\t\tEnvironment environment = initializationContext.getEnvironment();\n\t\tAssert.state(environment != null, \"'environment' must not be null\");\n\t\tapplySystemProperties(environment, logFile);\n\t\tloadConfiguration(location, logFile, overrides);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "load", "private", "(", ",", ",", ")", "{", "}", "LoggingInitializationContext", "initializationContext", "String", "location", "LogFile", "logFile", ";", "Environment", ";", ";", ";", ";", "List", "overrides", "=", "environment", "=", "Assert", ".", "state", "applySystemProperties", "loadConfiguration", "@", "Nullable", "<", "String", ">", "getOverrides", "initializationContext", ".", "getEnvironment", "(", ",", ")", "(", "environment", ",", "logFile", ")", "(", "location", ",", "logFile", ",", "overrides", ")", "(", "initializationContext", ")", "(", ")", "environment", "!=", "null", "\"", "'environment' must not be null", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 97, "ast_depth": 8, "n_identifiers": 13, "vocab_size": 35, "n_whitespaces": 42, "n_words": 35, "nloc": 7, "token_counts": 66}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java#335-341", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java", "language": "Java"}, "method": {"name": "getOverrides", "qualified_name": "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem#getOverrides", "start_line": 335, "end_line": 341, "signature": "getOverrides(LoggingInitializationContext initializationContext)", "original_code": "private List<String> getOverrides(LoggingInitializationContext initializationContext) {\n\t\tEnvironment environment = initializationContext.getEnvironment();\n\t\tAssert.state(environment != null, \"'environment' must not be null\");\n\t\tBindResult<List<String>> overrides = Binder.get(environment)\n\t\t\t.bind(\"logging.log4j2.config.override\", Bindable.listOf(String.class));\n\t\treturn overrides.orElse(Collections.emptyList());\n\t}", "doc_comment": ""}, "code_tokens": ["getOverrides", "private", "List", "(", ")", "{", "}", "<", "String", ">", "LoggingInitializationContext", "initializationContext", "Environment", ";", ";", ";", "return", ";", "environment", "=", "Assert", ".", "state", "BindResult", "overrides", "=", "overrides", ".", "orElse", "initializationContext", ".", "getEnvironment", "(", ",", ")", "<", ">", ".", "bind", "(", ")", "(", ")", "environment", "!=", "null", "\"", "'environment' must not be null", "\"", "List", "Binder", ".", "get", "(", ",", ")", "Collections", ".", "emptyList", "<", "String", ">", "(", "environment", ")", "\"", "logging.log4j2.config.override", "\"", "Bindable", ".", "listOf", "(", ")", "(", ")", "String", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 114, "ast_depth": 11, "n_identifiers": 15, "vocab_size": 38, "n_whitespaces": 37, "n_words": 40, "nloc": 7, "token_counts": 78}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java#351-369", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java", "language": "Java"}, "method": {"name": "loadConfiguration", "qualified_name": "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem#loadConfiguration", "start_line": 351, "end_line": 369, "signature": "loadConfiguration(String location, @Nullable LogFile logFile, List<String> overrides)", "original_code": "protected void loadConfiguration(String location, @Nullable LogFile logFile, List<String> overrides) {\n\t\tAssert.notNull(location, \"'location' must not be null\");\n\t\ttry {\n\t\t\tList<Configuration> configurations = new ArrayList<>();\n\t\t\tLoggerContext context = getLoggerContext();\n\t\t\tResourceLoader resourceLoader = ApplicationResourceLoader.get();\n\t\t\tconfigurations.add(load(resourceLoader.getResource(location), context));\n\t\t\tfor (String override : overrides) {\n\t\t\t\tConfiguration overrideConfiguration = loadOverride(resourceLoader, override, context);\n\t\t\t\tif (overrideConfiguration != null) {\n\t\t\t\t\tconfigurations.add(overrideConfiguration);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcontext.start(mergeConfigurations(configurations));\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tthrow new IllegalStateException(\"Could not initialize Log4J2 logging from \" + location, ex);\n\t\t}\n\t}", "doc_comment": "/**\n\t * Load the configuration from the given {@code location}, creating a composite using\n\t * the configuration from the given {@code overrides}.\n\t * @param location the location\n\t * @param logFile log file configuration\n\t * @param overrides the overriding locations\n\t * @since 2.6.0\n\t */"}, "code_tokens": ["void", "loadConfiguration", "protected", "(", ",", ",", ")", "{", "}", "String", "location", "LogFile", "logFile", "overrides", ";", "try", "List", "Assert", ".", "notNull", "{", "}", "catch", "(", ")", "@", "Nullable", "<", "String", ">", "(", "location", ",", ")", ";", "LoggerContext", ";", "ResourceLoader", ";", ";", "for", "(", "String", "override", ":", "overrides", ")", ";", "ex", "{", "}", "\"", "'location' must not be null", "\"", "List", "configurations", "=", "context", "=", "resourceLoader", "=", "configurations", ".", "add", "{", "}", "context", ".", "start", "Exception", "throw", ";", "<", "Configuration", ">", "new", "getLoggerContext", "ApplicationResourceLoader", ".", "get", "(", ")", "Configuration", ";", "if", "(", ")", "new", "IllegalStateException", "ArrayList", "(", ")", "(", ")", "(", ")", "load", "overrideConfiguration", "=", "(", ")", "{", "}", "mergeConfigurations", "(", ",", "ex", ")", "<", ">", "(", ",", "context", ")", "loadOverride", "overrideConfiguration", "!=", "null", ";", "(", "configurations", ")", "+", "location", "resourceLoader", ".", "getResource", "(", "resourceLoader", ",", "override", ",", "context", ")", "configurations", ".", "add", "\"", "Could not initialize Log4J2 logging from ", "\"", "(", "location", ")", "(", "overrideConfiguration", ")"], "metrics": {"cyclomatic_complexity": 4, "n_ast_nodes": 214, "ast_depth": 13, "n_identifiers": 22, "vocab_size": 57, "n_whitespaces": 124, "n_words": 73, "nloc": 19, "token_counts": 146}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java#371-389", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java", "language": "Java"}, "method": {"name": "load", "qualified_name": "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem#load", "start_line": 371, "end_line": 389, "signature": "load(Resource resource, LoggerContext context)", "original_code": "private Configuration load(Resource resource, LoggerContext context) throws IOException {\n\t\tConfigurationFactory factory = ConfigurationFactory.getInstance();\n\t\tif (resource.isFile()) {\n\t\t\ttry (InputStream inputStream = resource.getInputStream()) {\n\t\t\t\treturn factory.getConfiguration(context, new ConfigurationSource(inputStream, resource.getFile()));\n\t\t\t}\n\t\t}\n\t\tURL url = resource.getURL();\n\t\tAuthorizationProvider authorizationProvider = ConfigurationFactory\n\t\t\t.authorizationProvider(PropertiesUtil.getProperties());\n\t\tSslConfiguration sslConfiguration = url.getProtocol().equals(\"https\")\n\t\t\t\t? SslConfigurationFactory.getSslConfiguration() : null;\n\t\tURLConnection connection = UrlConnectionFactory.createConnection(url, 0, sslConfiguration,\n\t\t\t\tauthorizationProvider);\n\t\ttry (InputStream inputStream = connection.getInputStream()) {\n\t\t\treturn factory.getConfiguration(context,\n\t\t\t\t\tnew ConfigurationSource(inputStream, url, connection.getLastModified()));\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["Configuration", "load", "private", "(", ",", ")", "throws", "IOException", "{", "}", "Resource", "resource", "LoggerContext", "context", "ConfigurationFactory", ";", "if", "URL", ";", "AuthorizationProvider", ";", "SslConfiguration", ";", "URLConnection", ";", "try", "factory", "=", "(", ")", "{", "}", "url", "=", "authorizationProvider", "=", "sslConfiguration", "=", "connection", "=", "(", ")", "{", "}", "ConfigurationFactory", ".", "getInstance", "resource", ".", "isFile", "try", "resource", ".", "getURL", "ConfigurationFactory", ".", "authorizationProvider", "?", ":", "null", "UrlConnectionFactory", ".", "createConnection", "InputStream", "inputStream", "=", "return", ";", "(", ")", "(", ")", "(", ")", "{", "}", "(", ")", "(", ")", ".", "equals", "SslConfigurationFactory", ".", "getSslConfiguration", "(", "url", ",", "0", ",", "sslConfiguration", ",", "authorizationProvider", ")", "connection", ".", "getInputStream", "factory", ".", "getConfiguration", "InputStream", "inputStream", "=", "return", ";", "PropertiesUtil", ".", "getProperties", "url", ".", "getProtocol", "(", ")", "(", ")", "(", ")", "(", "context", ",", ")", "resource", ".", "getInputStream", "factory", ".", "getConfiguration", "(", ")", "(", ")", "\"", "https", "\"", "new", "ConfigurationSource", "(", ")", "(", "context", ",", ")", "(", "inputStream", ",", "url", ",", ")", "new", "ConfigurationSource", "connection", ".", "getLastModified", "(", "inputStream", ",", ")", "(", ")", "resource", ".", "getFile", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 231, "ast_depth": 15, "n_identifiers": 25, "vocab_size": 55, "n_whitespaces": 114, "n_words": 72, "nloc": 19, "token_counts": 164}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java#391-403", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java", "language": "Java"}, "method": {"name": "loadOverride", "qualified_name": "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem#loadOverride", "start_line": 391, "end_line": 403, "signature": "loadOverride(ResourceLoader resourceLoader, String location, LoggerContext context)", "original_code": "private @Nullable Configuration loadOverride(ResourceLoader resourceLoader, String location, LoggerContext context)\n\t\t\tthrows IOException {\n\t\tif (location.startsWith(OPTIONAL_PREFIX)) {\n\t\t\tResource resource = resourceLoader.getResource(location.substring(OPTIONAL_PREFIX.length()));\n\t\t\ttry {\n\t\t\t\treturn (resource.exists()) ? load(resource, context) : null;\n\t\t\t}\n\t\t\tcatch (FileNotFoundException ex) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn load(resourceLoader.getResource(location), context);\n\t}", "doc_comment": ""}, "code_tokens": ["Configuration", "loadOverride", "private", "(", ",", ",", ")", "throws", "IOException", "{", "}", "@", "Nullable", "ResourceLoader", "resourceLoader", "String", "location", "LoggerContext", "context", "if", "return", ";", "(", ")", "{", "}", "load", "location", ".", "startsWith", "Resource", ";", "try", "(", ",", "context", ")", "(", "OPTIONAL_PREFIX", ")", "resource", "=", "{", "}", "catch", "(", ")", "resourceLoader", ".", "getResource", "resourceLoader", ".", "getResource", "return", ";", "ex", "{", "}", "(", "location", ")", "(", ")", "?", ":", "null", "FileNotFoundException", "return", "null", ";", "location", ".", "substring", "(", ")", "load", "(", ")", "resource", ".", "exists", "(", "resource", ",", "context", ")", "OPTIONAL_PREFIX", ".", "length", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 135, "ast_depth": 14, "n_identifiers": 14, "vocab_size": 39, "n_whitespaces": 73, "n_words": 43, "nloc": 13, "token_counts": 93}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java#405-410", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java", "language": "Java"}, "method": {"name": "mergeConfigurations", "qualified_name": "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem#mergeConfigurations", "start_line": 405, "end_line": 410, "signature": "mergeConfigurations(List<Configuration> configurations)", "original_code": "private Configuration mergeConfigurations(List<Configuration> configurations) {\n\t\tif (configurations.size() == 1) {\n\t\t\treturn configurations.iterator().next();\n\t\t}\n\t\treturn new CompositeConfiguration(configurations.stream().map(AbstractConfiguration.class::cast).toList());\n\t}", "doc_comment": ""}, "code_tokens": ["Configuration", "mergeConfigurations", "private", "(", ")", "{", "}", "configurations", "if", "return", ";", "List", "(", ")", "{", "}", "new", "CompositeConfiguration", "<", "Configuration", ">", "==", "1", "return", ";", "(", ")", "configurations", ".", "size", ".", "next", ".", "toList", "(", ")", "configurations", ".", "iterator", "(", ")", ".", "map", "(", ")", "(", ")", "configurations", ".", "stream", "(", ")", "(", ")", "::", "cast", "AbstractConfiguration", ".", "class"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 89, "ast_depth": 12, "n_identifiers": 9, "vocab_size": 29, "n_whitespaces": 26, "n_words": 24, "nloc": 6, "token_counts": 59}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java#412-422", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java", "language": "Java"}, "method": {"name": "reinitialize", "qualified_name": "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem#reinitialize", "start_line": 412, "end_line": 422, "signature": "reinitialize(LoggingInitializationContext initializationContext)", "original_code": "@Override\n\tprotected void reinitialize(LoggingInitializationContext initializationContext) {\n\t\tList<String> overrides = getOverrides(initializationContext);\n\t\tif (!CollectionUtils.isEmpty(overrides)) {\n\t\t\treinitializeWithOverrides(overrides);\n\t\t}\n\t\telse {\n\t\t\tLoggerContext context = getLoggerContext();\n\t\t\tcontext.reconfigure();\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "reinitialize", "protected", "(", ")", "{", "}", "@", "Override", "LoggingInitializationContext", "initializationContext", ";", "if", "else", "List", "overrides", "=", "(", ")", "{", "}", "{", "}", "<", "String", ">", "getOverrides", "!", ";", "LoggerContext", ";", ";", "(", "initializationContext", ")", "CollectionUtils", ".", "isEmpty", "reinitializeWithOverrides", "context", "=", "context", ".", "reconfigure", "(", "overrides", ")", "(", "overrides", ")", "getLoggerContext", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 85, "ast_depth": 10, "n_identifiers": 11, "vocab_size": 30, "n_whitespaces": 44, "n_words": 23, "nloc": 11, "token_counts": 55}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java#424-441", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java", "language": "Java"}, "method": {"name": "reinitializeWithOverrides", "qualified_name": "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem#reinitializeWithOverrides", "start_line": 424, "end_line": 441, "signature": "reinitializeWithOverrides(List<String> overrides)", "original_code": "private void reinitializeWithOverrides(List<String> overrides) {\n\t\tLoggerContext context = getLoggerContext();\n\t\tList<Configuration> configurations = new ArrayList<>();\n\t\tconfigurations.add(context.getConfiguration());\n\t\tResourceLoader resourceLoader = ApplicationResourceLoader.get();\n\t\tfor (String override : overrides) {\n\t\t\ttry {\n\t\t\t\tConfiguration overrideConfiguration = loadOverride(resourceLoader, override, context);\n\t\t\t\tif (overrideConfiguration != null) {\n\t\t\t\t\tconfigurations.add(overrideConfiguration);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (IOException ex) {\n\t\t\t\tthrow new RuntimeException(\"Failed to load overriding configuration from '\" + override + \"'\", ex);\n\t\t\t}\n\t\t}\n\t\tcontext.reconfigure(mergeConfigurations(configurations));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "reinitializeWithOverrides", "private", "(", ")", "{", "}", "overrides", "LoggerContext", ";", ";", ";", "ResourceLoader", ";", "for", "(", "String", "override", ":", "overrides", ")", ";", "List", "context", "=", "List", "configurations", "=", "configurations", ".", "add", "resourceLoader", "=", "{", "}", "context", ".", "reconfigure", "<", "String", ">", "getLoggerContext", "<", "Configuration", ">", "new", "(", ")", "ApplicationResourceLoader", ".", "get", "try", "(", ")", "(", ")", "ArrayList", "(", ")", "context", ".", "getConfiguration", "(", ")", "{", "}", "catch", "(", ")", "mergeConfigurations", "<", ">", "(", ")", "Configuration", ";", "if", "ex", "{", "}", "(", "configurations", ")", "overrideConfiguration", "=", "(", ")", "{", "}", "IOException", "throw", ";", "loadOverride", "overrideConfiguration", "!=", "null", ";", "new", "RuntimeException", "(", "resourceLoader", ",", "override", ",", "context", ")", "configurations", ".", "add", "(", ",", "ex", ")", "(", "overrideConfiguration", ")", "+", "+", "override", "\"", "'", "\"", "\"", "Failed to load overriding configuration from '", "\""], "metrics": {"cyclomatic_complexity": 4, "n_ast_nodes": 185, "ast_depth": 15, "n_identifiers": 16, "vocab_size": 49, "n_whitespaces": 110, "n_words": 57, "nloc": 18, "token_counts": 125}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java#443-446", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java", "language": "Java"}, "method": {"name": "getSupportedLogLevels", "qualified_name": "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem#getSupportedLogLevels", "start_line": 443, "end_line": 446, "signature": "getSupportedLogLevels()", "original_code": "@Override\n\tpublic Set<LogLevel> getSupportedLogLevels() {\n\t\treturn LEVELS.getSupported();\n\t}", "doc_comment": ""}, "code_tokens": ["getSupportedLogLevels", "public", "Set", "(", ")", "{", "}", "@", "Override", "<", "LogLevel", ">", "return", ";", "LEVELS", ".", "getSupported", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 30, "ast_depth": 7, "n_identifiers": 4, "vocab_size": 17, "n_whitespaces": 11, "n_words": 8, "nloc": 4, "token_counts": 19}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java#448-451", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java", "language": "Java"}, "method": {"name": "setLogLevel", "qualified_name": "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem#setLogLevel", "start_line": 448, "end_line": 451, "signature": "setLogLevel(@Nullable String loggerName, @Nullable LogLevel logLevel)", "original_code": "@Override\n\tpublic void setLogLevel(@Nullable String loggerName, @Nullable LogLevel logLevel) {\n\t\tsetLogLevel(loggerName, LEVELS.convertSystemToNative(logLevel));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "setLogLevel", "public", "(", ",", ")", "{", "}", "@", "Override", "String", "loggerName", "LogLevel", "logLevel", ";", "setLogLevel", "@", "Nullable", "@", "Nullable", "(", "loggerName", ",", ")", "LEVELS", ".", "convertSystemToNative", "(", "logLevel", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 47, "ast_depth": 9, "n_identifiers": 7, "vocab_size": 19, "n_whitespaces": 16, "n_words": 15, "nloc": 4, "token_counts": 30}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java#453-462", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java", "language": "Java"}, "method": {"name": "setLogLevel", "qualified_name": "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem#setLogLevel", "start_line": 453, "end_line": 462, "signature": "setLogLevel(@Nullable String loggerName, @Nullable Level level)", "original_code": "private void setLogLevel(@Nullable String loggerName, @Nullable Level level) {\n\t\tLoggerConfig logger = getLogger(loggerName);\n\t\tif (level == null) {\n\t\t\tclearLogLevel(loggerName, logger);\n\t\t}\n\t\telse {\n\t\t\tsetLogLevel(loggerName, logger, level);\n\t\t}\n\t\tgetLoggerContext().updateLoggers();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "setLogLevel", "private", "(", ",", ")", "{", "}", "String", "loggerName", "Level", "level", "LoggerConfig", ";", "if", "else", ";", "logger", "=", "(", ")", "{", "}", "{", "}", ".", "updateLoggers", "@", "Nullable", "@", "Nullable", "getLogger", "level", "==", "null", ";", ";", "getLoggerContext", "(", ")", "(", "loggerName", ")", "clearLogLevel", "setLogLevel", "(", ")", "(", "loggerName", ",", "logger", ")", "(", "loggerName", ",", "logger", ",", "level", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 90, "ast_depth": 9, "n_identifiers": 9, "vocab_size": 27, "n_whitespaces": 47, "n_words": 26, "nloc": 10, "token_counts": 59}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java#464-474", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java", "language": "Java"}, "method": {"name": "clearLogLevel", "qualified_name": "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem#clearLogLevel", "start_line": 464, "end_line": 474, "signature": "clearLogLevel(@Nullable String loggerName, @Nullable LoggerConfig logger)", "original_code": "private void clearLogLevel(@Nullable String loggerName, @Nullable LoggerConfig logger) {\n\t\tif (logger == null) {\n\t\t\treturn;\n\t\t}\n\t\tif (logger instanceof LevelSetLoggerConfig) {\n\t\t\tgetLoggerContext().getConfiguration().removeLogger(loggerName);\n\t\t}\n\t\telse {\n\t\t\tlogger.setLevel(null);\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "clearLogLevel", "private", "(", ",", ")", "{", "}", "String", "loggerName", "LoggerConfig", "logger", "if", "if", "else", "(", ")", "{", "}", "(", ")", "{", "}", "{", "}", "@", "Nullable", "@", "Nullable", "logger", "==", "null", "return", ";", "logger", "instanceof", "LevelSetLoggerConfig", ";", ";", ".", "removeLogger", "logger", ".", "setLevel", ".", "getConfiguration", "(", "loggerName", ")", "(", "null", ")", "getLoggerContext", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 88, "ast_depth": 11, "n_identifiers": 8, "vocab_size": 27, "n_whitespaces": 49, "n_words": 25, "nloc": 11, "token_counts": 57}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java#476-484", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java", "language": "Java"}, "method": {"name": "setLogLevel", "qualified_name": "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem#setLogLevel", "start_line": 476, "end_line": 484, "signature": "setLogLevel(@Nullable String loggerName, @Nullable LoggerConfig logger, Level level)", "original_code": "private void setLogLevel(@Nullable String loggerName, @Nullable LoggerConfig logger, Level level) {\n\t\tif (logger == null) {\n\t\t\tgetLoggerContext().getConfiguration()\n\t\t\t\t.addLogger(loggerName, new LevelSetLoggerConfig(loggerName, level, true));\n\t\t}\n\t\telse {\n\t\t\tlogger.setLevel(level);\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "setLogLevel", "private", "(", ",", ",", ")", "{", "}", "String", "loggerName", "LoggerConfig", "logger", "Level", "level", "if", "else", "(", ")", "{", "}", "{", "}", "@", "Nullable", "@", "Nullable", "logger", "==", "null", ";", ";", ".", "addLogger", "logger", ".", "setLevel", ".", "getConfiguration", "(", "loggerName", ",", ")", "(", "level", ")", "getLoggerContext", "(", ")", "new", "LevelSetLoggerConfig", "(", ")", "(", "loggerName", ",", "level", ",", "true", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 89, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 29, "n_whitespaces": 46, "n_words": 27, "nloc": 9, "token_counts": 60}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java#486-492", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java", "language": "Java"}, "method": {"name": "getLoggerConfigurations", "qualified_name": "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem#getLoggerConfigurations", "start_line": 486, "end_line": 492, "signature": "getLoggerConfigurations()", "original_code": "@Override\n\tpublic List<LoggerConfiguration> getLoggerConfigurations() {\n\t\tList<LoggerConfiguration> result = new ArrayList<>();\n\t\tgetAllLoggers().forEach((name, loggerConfig) -> result.add(convertLoggerConfig(name, loggerConfig)));\n\t\tresult.sort(CONFIGURATION_COMPARATOR);\n\t\treturn result;\n\t}", "doc_comment": ""}, "code_tokens": ["getLoggerConfigurations", "public", "List", "(", ")", "{", "}", "@", "Override", "<", "LoggerConfiguration", ">", ";", ";", ";", "return", "result", ";", "List", "result", "=", ".", "forEach", "result", ".", "sort", "<", "LoggerConfiguration", ">", "new", "getAllLoggers", "(", ")", "(", "CONFIGURATION_COMPARATOR", ")", "ArrayList", "(", ")", "(", ")", "->", "<", ">", "(", "name", ",", "loggerConfig", ")", "result", ".", "add", "(", ")", "convertLoggerConfig", "(", "name", ",", "loggerConfig", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 91, "ast_depth": 12, "n_identifiers": 11, "vocab_size": 29, "n_whitespaces": 28, "n_words": 24, "nloc": 7, "token_counts": 60}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java#494-498", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java", "language": "Java"}, "method": {"name": "getLoggerConfiguration", "qualified_name": "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem#getLoggerConfiguration", "start_line": 494, "end_line": 498, "signature": "getLoggerConfiguration(String loggerName)", "original_code": "@Override\n\tpublic @Nullable LoggerConfiguration getLoggerConfiguration(String loggerName) {\n\t\tLoggerConfig loggerConfig = getAllLoggers().get(loggerName);\n\t\treturn (loggerConfig != null) ? convertLoggerConfig(loggerName, loggerConfig) : null;\n\t}", "doc_comment": ""}, "code_tokens": ["LoggerConfiguration", "getLoggerConfiguration", "public", "(", ")", "{", "}", "@", "Override", "@", "Nullable", "String", "loggerName", "LoggerConfig", ";", "return", ";", "loggerConfig", "=", "?", ":", "null", ".", "get", "(", ")", "convertLoggerConfig", "getAllLoggers", "(", "loggerName", ")", "loggerConfig", "!=", "null", "(", "loggerName", ",", "loggerConfig", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 61, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 26, "n_whitespaces": 26, "n_words": 19, "nloc": 5, "token_counts": 41}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java#500-507", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java", "language": "Java"}, "method": {"name": "getAllLoggers", "qualified_name": "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem#getAllLoggers", "start_line": 500, "end_line": 507, "signature": "getAllLoggers()", "original_code": "private Map<String, LoggerConfig> getAllLoggers() {\n\t\tMap<String, LoggerConfig> loggers = new LinkedHashMap<>();\n\t\tfor (Logger logger : getLoggerContext().getLoggers()) {\n\t\t\taddLogger(loggers, logger.getName());\n\t\t}\n\t\tgetLoggerContext().getConfiguration().getLoggers().keySet().forEach((name) -> addLogger(loggers, name));\n\t\treturn loggers;\n\t}", "doc_comment": ""}, "code_tokens": ["getAllLoggers", "private", "Map", "(", ")", "{", "}", "<", "String", ",", "LoggerConfig", ">", ";", "for", "(", "Logger", "logger", ":", ")", ";", "return", "loggers", ";", "Map", "loggers", "=", ".", "getLoggers", "{", "}", ".", "forEach", "<", "String", ",", "LoggerConfig", ">", "new", "getLoggerContext", "(", ")", ";", ".", "keySet", "(", ")", "LinkedHashMap", "(", ")", "(", ")", "addLogger", ".", "getLoggers", "(", ")", "->", "<", ">", "(", "loggers", ",", ")", ".", "getConfiguration", "(", ")", "(", "name", ")", "addLogger", "logger", ".", "getName", "getLoggerContext", "(", ")", "(", "loggers", ",", "name", ")", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 128, "ast_depth": 11, "n_identifiers": 11, "vocab_size": 32, "n_whitespaces": 40, "n_words": 31, "nloc": 8, "token_counts": 86}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java#509-515", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java", "language": "Java"}, "method": {"name": "addLogger", "qualified_name": "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem#addLogger", "start_line": 509, "end_line": 515, "signature": "addLogger(Map<String, LoggerConfig> loggers, String name)", "original_code": "private void addLogger(Map<String, LoggerConfig> loggers, String name) {\n\t\tConfiguration configuration = getLoggerContext().getConfiguration();\n\t\twhile (name != null) {\n\t\t\tloggers.computeIfAbsent(name, configuration::getLoggerConfig);\n\t\t\tname = getSubName(name);\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "addLogger", "private", "(", ",", ")", "{", "}", "loggers", "String", "name", "Configuration", ";", "while", "Map", "configuration", "=", "(", ")", "{", "}", "<", "String", ",", "LoggerConfig", ">", ".", "getConfiguration", "name", "!=", "null", ";", ";", "getLoggerContext", "(", ")", "loggers", ".", "computeIfAbsent", "name", "=", "(", ")", "(", "name", ",", ")", "getSubName", "configuration", "::", "getLoggerConfig", "(", "name", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 81, "ast_depth": 10, "n_identifiers": 9, "vocab_size": 29, "n_whitespaces": 36, "n_words": 24, "nloc": 7, "token_counts": 54}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java#517-523", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java", "language": "Java"}, "method": {"name": "getSubName", "qualified_name": "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem#getSubName", "start_line": 517, "end_line": 523, "signature": "getSubName(String name)", "original_code": "private @Nullable String getSubName(String name) {\n\t\tif (!StringUtils.hasLength(name)) {\n\t\t\treturn null;\n\t\t}\n\t\tint nested = name.lastIndexOf('$');\n\t\treturn (nested != -1) ? name.substring(0, nested) : NameUtil.getSubName(name);\n\t}", "doc_comment": ""}, "code_tokens": ["String", "getSubName", "private", "(", ")", "{", "}", "@", "Nullable", "String", "name", "if", ";", "return", ";", "(", ")", "{", "}", "int", "nested", "=", "?", ":", "!", "return", "null", ";", "name", ".", "lastIndexOf", "(", ")", "name", ".", "substring", "NameUtil", ".", "getSubName", "StringUtils", ".", "hasLength", "(", "'$'", ")", "nested", "!=", "(", "0", ",", "nested", ")", "(", "name", ")", "(", "name", ")", "-", "1"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 88, "ast_depth": 9, "n_identifiers": 9, "vocab_size": 32, "n_whitespaces": 37, "n_words": 26, "nloc": 7, "token_counts": 60}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java#525-536", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java", "language": "Java"}, "method": {"name": "convertLoggerConfig", "qualified_name": "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem#convertLoggerConfig", "start_line": 525, "end_line": 536, "signature": "convertLoggerConfig(String name, @Nullable LoggerConfig loggerConfig)", "original_code": "private @Nullable LoggerConfiguration convertLoggerConfig(String name, @Nullable LoggerConfig loggerConfig) {\n\t\tif (loggerConfig == null) {\n\t\t\treturn null;\n\t\t}\n\t\tLevelConfiguration effectiveLevelConfiguration = getLevelConfiguration(loggerConfig.getLevel());\n\t\tif (!StringUtils.hasLength(name) || LogManager.ROOT_LOGGER_NAME.equals(name)) {\n\t\t\tname = ROOT_LOGGER_NAME;\n\t\t}\n\t\tboolean isAssigned = loggerConfig.getName().equals(name);\n\t\tLevelConfiguration assignedLevelConfiguration = (!isAssigned) ? null : effectiveLevelConfiguration;\n\t\treturn new LoggerConfiguration(name, assignedLevelConfiguration, effectiveLevelConfiguration);\n\t}", "doc_comment": ""}, "code_tokens": ["LoggerConfiguration", "convertLoggerConfig", "private", "(", ",", ")", "{", "}", "@", "Nullable", "String", "name", "LoggerConfig", "loggerConfig", "if", "LevelConfiguration", ";", "if", "boolean", ";", "LevelConfiguration", ";", "return", ";", "(", ")", "{", "}", "effectiveLevelConfiguration", "=", "(", ")", "{", "}", "isAssigned", "=", "assignedLevelConfiguration", "=", "new", "LoggerConfiguration", "@", "Nullable", "loggerConfig", "==", "null", "return", "null", ";", "getLevelConfiguration", "||", ";", ".", "equals", "?", "null", ":", "effectiveLevelConfiguration", "(", "name", ",", "assignedLevelConfiguration", ",", "effectiveLevelConfiguration", ")", "(", ")", "!", ".", "equals", "name", "=", "ROOT_LOGGER_NAME", "loggerConfig", ".", "getName", "(", "name", ")", "(", ")", "loggerConfig", ".", "getLevel", "StringUtils", ".", "hasLength", "LogManager", ".", "ROOT_LOGGER_NAME", "(", "name", ")", "(", ")", "!", "isAssigned", "(", ")", "(", "name", ")"], "metrics": {"cyclomatic_complexity": 4, "n_ast_nodes": 148, "ast_depth": 10, "n_identifiers": 15, "vocab_size": 39, "n_whitespaces": 70, "n_words": 46, "nloc": 12, "token_counts": 101}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java#538-541", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java", "language": "Java"}, "method": {"name": "getLevelConfiguration", "qualified_name": "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem#getLevelConfiguration", "start_line": 538, "end_line": 541, "signature": "getLevelConfiguration(Level level)", "original_code": "private LevelConfiguration getLevelConfiguration(Level level) {\n\t\tLogLevel logLevel = LEVELS.convertNativeToSystem(level);\n\t\treturn (logLevel != null) ? LevelConfiguration.of(logLevel) : LevelConfiguration.ofCustom(level.name());\n\t}", "doc_comment": ""}, "code_tokens": ["LevelConfiguration", "getLevelConfiguration", "private", "(", ")", "{", "}", "Level", "level", "LogLevel", ";", "return", ";", "logLevel", "=", "?", ":", "LEVELS", ".", "convertNativeToSystem", "(", ")", "LevelConfiguration", ".", "of", "LevelConfiguration", ".", "ofCustom", "(", "level", ")", "logLevel", "!=", "null", "(", "logLevel", ")", "(", ")", "level", ".", "name", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 64, "ast_depth": 10, "n_identifiers": 9, "vocab_size": 24, "n_whitespaces": 22, "n_words": 20, "nloc": 4, "token_counts": 44}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java#543-546", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java", "language": "Java"}, "method": {"name": "getShutdownHandler", "qualified_name": "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem#getShutdownHandler", "start_line": 543, "end_line": 546, "signature": "getShutdownHandler()", "original_code": "@Override\n\tpublic Runnable getShutdownHandler() {\n\t\treturn () -> getLoggerContext().stop();\n\t}", "doc_comment": ""}, "code_tokens": ["Runnable", "getShutdownHandler", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "->", "(", ")", ".", "stop", "getLoggerContext", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 34, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 15, "n_whitespaces": 13, "n_words": 7, "nloc": 4, "token_counts": 21}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java#548-564", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java", "language": "Java"}, "method": {"name": "cleanUp", "qualified_name": "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem#cleanUp", "start_line": 548, "end_line": 564, "signature": "cleanUp()", "original_code": "@Override\n\tpublic void cleanUp() {\n\t\tif (isLog4jBridgeHandlerAvailable()) {\n\t\t\tremoveLog4jBridgeHandler();\n\t\t}\n\t\tsuper.cleanUp();\n\t\tLoggerContext loggerContext = getLoggerContext();\n\t\tmarkAsUninitialized(loggerContext);\n\t\tStatusConsoleListener listener = (StatusConsoleListener) loggerContext.getObject(STATUS_LISTENER_KEY);\n\t\tif (listener != null) {\n\t\t\tStatusLogger.getLogger().removeListener(listener);\n\t\t\tloggerContext.removeObject(STATUS_LISTENER_KEY);\n\t\t}\n\t\tloggerContext.getConfiguration().removeFilter(FILTER);\n\t\tLog4J2LoggingSystem.propertySource.setEnvironment(null);\n\t\tloggerContext.removeObject(ENVIRONMENT_KEY);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "cleanUp", "public", "(", ")", "{", "}", "@", "Override", "if", ";", "LoggerContext", ";", ";", "StatusConsoleListener", ";", "if", ";", ";", ";", "(", ")", "{", "}", "super", ".", "cleanUp", "loggerContext", "=", "markAsUninitialized", "listener", "=", "(", ")", "{", "}", ".", "removeFilter", ".", "setEnvironment", "loggerContext", ".", "removeObject", "isLog4jBridgeHandlerAvailable", ";", "(", ")", "getLoggerContext", "(", "loggerContext", ")", "(", "StatusConsoleListener", ")", "listener", "!=", "null", ";", ";", "loggerContext", ".", "getConfiguration", "(", "FILTER", ")", "Log4J2LoggingSystem", ".", "propertySource", "(", "null", ")", "(", "ENVIRONMENT_KEY", ")", "(", ")", "removeLog4jBridgeHandler", "(", ")", "loggerContext", ".", "getObject", ".", "removeListener", "loggerContext", ".", "removeObject", "(", ")", "(", ")", "(", "STATUS_LISTENER_KEY", ")", "StatusLogger", ".", "getLogger", "(", "listener", ")", "(", "STATUS_LISTENER_KEY", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 158, "ast_depth": 10, "n_identifiers": 21, "vocab_size": 37, "n_whitespaces": 65, "n_words": 41, "nloc": 17, "token_counts": 105}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java#566-571", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java", "language": "Java"}, "method": {"name": "getLogger", "qualified_name": "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem#getLogger", "start_line": 566, "end_line": 571, "signature": "getLogger(@Nullable String name)", "original_code": "private @Nullable LoggerConfig getLogger(@Nullable String name) {\n\t\tif (!StringUtils.hasLength(name) || ROOT_LOGGER_NAME.equals(name)) {\n\t\t\treturn findLogger(LogManager.ROOT_LOGGER_NAME);\n\t\t}\n\t\treturn findLogger(name);\n\t}", "doc_comment": ""}, "code_tokens": ["LoggerConfig", "getLogger", "private", "(", ")", "{", "}", "@", "Nullable", "String", "name", "if", "return", ";", "(", ")", "{", "}", "findLogger", "@", "Nullable", "||", "return", ";", "(", "name", ")", "!", "ROOT_LOGGER_NAME", ".", "equals", "findLogger", "StringUtils", ".", "hasLength", "(", "name", ")", "(", ")", "(", "name", ")", "LogManager", ".", "ROOT_LOGGER_NAME"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 71, "ast_depth": 10, "n_identifiers": 9, "vocab_size": 23, "n_whitespaces": 27, "n_words": 21, "nloc": 6, "token_counts": 46}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java#573-579", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java", "language": "Java"}, "method": {"name": "findLogger", "qualified_name": "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem#findLogger", "start_line": 573, "end_line": 579, "signature": "findLogger(String name)", "original_code": "private @Nullable LoggerConfig findLogger(String name) {\n\t\tConfiguration configuration = getLoggerContext().getConfiguration();\n\t\tif (configuration instanceof AbstractConfiguration abstractConfiguration) {\n\t\t\treturn abstractConfiguration.getLogger(name);\n\t\t}\n\t\treturn configuration.getLoggers().get(name);\n\t}", "doc_comment": ""}, "code_tokens": ["LoggerConfig", "findLogger", "private", "(", ")", "{", "}", "@", "Nullable", "String", "name", "Configuration", ";", "if", "return", ";", "configuration", "=", "(", ")", "{", "}", ".", "get", ".", "getConfiguration", "configuration", "instanceof", "AbstractConfiguration", "abstractConfiguration", "return", ";", "configuration", ".", "getLoggers", "(", "name", ")", "getLoggerContext", "(", ")", "abstractConfiguration", ".", "getLogger", "(", ")", "(", ")", "(", "name", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 76, "ast_depth": 9, "n_identifiers": 10, "vocab_size": 26, "n_whitespaces": 33, "n_words": 24, "nloc": 7, "token_counts": 51}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java#581-583", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java", "language": "Java"}, "method": {"name": "getLoggerContext", "qualified_name": "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem#getLoggerContext", "start_line": 581, "end_line": 583, "signature": "getLoggerContext()", "original_code": "private LoggerContext getLoggerContext() {\n\t\treturn (LoggerContext) LogManager.getContext(false);\n\t}", "doc_comment": ""}, "code_tokens": ["LoggerContext", "getLoggerContext", "private", "(", ")", "{", "}", "return", ";", "(", "LoggerContext", ")", "LogManager", ".", "getContext", "(", "false", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 27, "ast_depth": 8, "n_identifiers": 3, "vocab_size": 13, "n_whitespaces": 10, "n_words": 8, "nloc": 3, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java#585-587", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java", "language": "Java"}, "method": {"name": "isAlreadyInitialized", "qualified_name": "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem#isAlreadyInitialized", "start_line": 585, "end_line": 587, "signature": "isAlreadyInitialized(LoggerContext loggerContext)", "original_code": "private boolean isAlreadyInitialized(LoggerContext loggerContext) {\n\t\treturn LoggingSystem.class.getName().equals(loggerContext.getExternalContext());\n\t}", "doc_comment": ""}, "code_tokens": ["boolean", "isAlreadyInitialized", "private", "(", ")", "{", "}", "LoggerContext", "loggerContext", "return", ";", ".", "equals", ".", "getName", "(", ")", "LoggingSystem", ".", "class", "(", ")", "loggerContext", ".", "getExternalContext", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 41, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 17, "n_whitespaces": 10, "n_words": 12, "nloc": 3, "token_counts": 27}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java#589-591", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java", "language": "Java"}, "method": {"name": "markAsInitialized", "qualified_name": "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem#markAsInitialized", "start_line": 589, "end_line": 591, "signature": "markAsInitialized(LoggerContext loggerContext)", "original_code": "private void markAsInitialized(LoggerContext loggerContext) {\n\t\tloggerContext.setExternalContext(LoggingSystem.class.getName());\n\t}", "doc_comment": ""}, "code_tokens": ["void", "markAsInitialized", "private", "(", ")", "{", "}", "LoggerContext", "loggerContext", ";", "loggerContext", ".", "setExternalContext", "(", ")", ".", "getName", "LoggingSystem", ".", "class", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 34, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 15, "n_whitespaces": 9, "n_words": 10, "nloc": 3, "token_counts": 22}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java#593-595", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java", "language": "Java"}, "method": {"name": "markAsUninitialized", "qualified_name": "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem#markAsUninitialized", "start_line": 593, "end_line": 595, "signature": "markAsUninitialized(LoggerContext loggerContext)", "original_code": "private void markAsUninitialized(LoggerContext loggerContext) {\n\t\tloggerContext.setExternalContext(null);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "markAsUninitialized", "private", "(", ")", "{", "}", "LoggerContext", "loggerContext", ";", "loggerContext", ".", "setExternalContext", "(", "null", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 25, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 13, "n_whitespaces": 9, "n_words": 8, "nloc": 3, "token_counts": 16}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java#597-600", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java", "language": "Java"}, "method": {"name": "getDefaultLogCorrelationPattern", "qualified_name": "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem#getDefaultLogCorrelationPattern", "start_line": 597, "end_line": 600, "signature": "getDefaultLogCorrelationPattern()", "original_code": "@Override\n\tprotected String getDefaultLogCorrelationPattern() {\n\t\treturn \"%correlationId\";\n\t}", "doc_comment": ""}, "code_tokens": ["String", "getDefaultLogCorrelationPattern", "protected", "(", ")", "{", "}", "@", "Override", "return", ";", "\"", "%correlationId", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 13, "n_whitespaces": 11, "n_words": 6, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java#609-611", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java", "language": "Java"}, "method": {"name": "getEnvironment", "qualified_name": "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem#getEnvironment", "start_line": 609, "end_line": 611, "signature": "getEnvironment(@Nullable LoggerContext loggerContext)", "original_code": "public static @Nullable Environment getEnvironment(@Nullable LoggerContext loggerContext) {\n\t\treturn (Environment) ((loggerContext != null) ? loggerContext.getObject(ENVIRONMENT_KEY) : null);\n\t}", "doc_comment": "/**\n\t * Get the Spring {@link Environment} attached to the given {@link LoggerContext} or\n\t * {@code null} if no environment is available.\n\t * @param loggerContext the logger context\n\t * @return the Spring {@link Environment} or {@code null}\n\t * @since 3.0.0\n\t */"}, "code_tokens": ["Environment", "getEnvironment", "public", "static", "(", ")", "{", "}", "@", "Nullable", "LoggerContext", "loggerContext", "return", ";", "(", "Environment", ")", "@", "Nullable", "(", ")", "?", ":", "null", "(", ")", "loggerContext", ".", "getObject", "loggerContext", "!=", "null", "(", "ENVIRONMENT_KEY", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 52, "ast_depth": 10, "n_identifiers": 5, "vocab_size": 21, "n_whitespaces": 20, "n_words": 16, "nloc": 3, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java#622-628", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java", "language": "Java"}, "method": {"name": "getLoggingSystem", "qualified_name": "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem#getLoggingSystem", "start_line": 622, "end_line": 628, "signature": "getLoggingSystem(ClassLoader classLoader)", "original_code": "@Override\n\t\tpublic @Nullable LoggingSystem getLoggingSystem(ClassLoader classLoader) {\n\t\t\tif (PRESENT) {\n\t\t\t\treturn new Log4J2LoggingSystem(classLoader);\n\t\t\t}\n\t\t\treturn null;\n\t\t}", "doc_comment": ""}, "code_tokens": ["LoggingSystem", "getLoggingSystem", "public", "(", ")", "{", "}", "@", "Override", "@", "Nullable", "ClassLoader", "classLoader", "if", "return", "null", ";", "(", "PRESENT", ")", "{", "}", "return", ";", "new", "Log4J2LoggingSystem", "(", "classLoader", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 44, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 19, "n_whitespaces": 33, "n_words": 15, "nloc": 7, "token_counts": 29}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:module/spring-boot-data-mongodb/src/main/java/org/springframework/boot/data/mongodb/autoconfigure/MongoDataConfiguration.java#56-60", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-data-mongodb/src/main/java/org/springframework/boot/data/mongodb/autoconfigure/MongoDataConfiguration.java", "language": "Java"}, "method": {"name": "mongoManagedTypes", "qualified_name": "org.springframework.boot.data.mongodb.autoconfigure.MongoDataConfiguration#mongoManagedTypes", "start_line": 56, "end_line": 60, "signature": "mongoManagedTypes(ApplicationContext applicationContext)", "original_code": "@Bean\n\t@ConditionalOnMissingBean\n\tstatic MongoManagedTypes mongoManagedTypes(ApplicationContext applicationContext) throws ClassNotFoundException {\n\t\treturn MongoManagedTypes.fromIterable(new EntityScanner(applicationContext).scan(Document.class));\n\t}", "doc_comment": ""}, "code_tokens": ["MongoManagedTypes", "mongoManagedTypes", "static", "(", ")", "throws", "ClassNotFoundException", "{", "}", "@", "Bean", "@", "ConditionalOnMissingBean", "ApplicationContext", "applicationContext", "return", ";", "MongoManagedTypes", ".", "fromIterable", "(", ")", ".", "scan", "new", "EntityScanner", "(", ")", "(", "applicationContext", ")", "Document", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 51, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 23, "n_whitespaces": 17, "n_words": 18, "nloc": 5, "token_counts": 34}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:module/spring-boot-data-mongodb/src/main/java/org/springframework/boot/data/mongodb/autoconfigure/MongoDataConfiguration.java#62-75", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-data-mongodb/src/main/java/org/springframework/boot/data/mongodb/autoconfigure/MongoDataConfiguration.java", "language": "Java"}, "method": {"name": "mongoMappingContext", "qualified_name": "org.springframework.boot.data.mongodb.autoconfigure.MongoDataConfiguration#mongoMappingContext", "start_line": 62, "end_line": 75, "signature": "mongoMappingContext(MongoCustomConversions conversions, MongoManagedTypes managedTypes)", "original_code": "@Bean\n\t@ConditionalOnMissingBean\n\tMongoMappingContext mongoMappingContext(MongoCustomConversions conversions, MongoManagedTypes managedTypes) {\n\t\tPropertyMapper map = PropertyMapper.get();\n\t\tMongoMappingContext context = new MongoMappingContext();\n\t\tmap.from(this.properties.isAutoIndexCreation()).to(context::setAutoIndexCreation);\n\t\tcontext.setManagedTypes(managedTypes);\n\t\tClass<?> strategyClass = this.properties.getFieldNamingStrategy();\n\t\tif (strategyClass != null) {\n\t\t\tcontext.setFieldNamingStrategy((FieldNamingStrategy) BeanUtils.instantiateClass(strategyClass));\n\t\t}\n\t\tcontext.setSimpleTypeHolder(conversions.getSimpleTypeHolder());\n\t\treturn context;\n\t}", "doc_comment": ""}, "code_tokens": ["MongoMappingContext", "mongoMappingContext", "(", ",", ")", "{", "}", "@", "Bean", "@", "ConditionalOnMissingBean", "MongoCustomConversions", "conversions", "MongoManagedTypes", "managedTypes", "PropertyMapper", ";", "MongoMappingContext", ";", ";", ";", ";", "if", ";", "return", "context", ";", "map", "=", "context", "=", ".", "to", "context", ".", "setManagedTypes", "Class", "strategyClass", "=", "(", ")", "{", "}", "context", ".", "setSimpleTypeHolder", "PropertyMapper", ".", "get", "new", "MongoMappingContext", "map", ".", "from", "(", ")", "(", "managedTypes", ")", "<", ">", ".", "getFieldNamingStrategy", "strategyClass", "!=", "null", ";", "(", ")", "(", ")", "(", ")", "(", ")", "context", "::", "setAutoIndexCreation", "?", "this", ".", "properties", "(", ")", "context", ".", "setFieldNamingStrategy", "conversions", ".", "getSimpleTypeHolder", ".", "isAutoIndexCreation", "(", ")", "(", ")", "this", ".", "properties", "(", ")", "(", "FieldNamingStrategy", ")", "BeanUtils", ".", "instantiateClass", "(", "strategyClass", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 163, "ast_depth": 12, "n_identifiers": 22, "vocab_size": 46, "n_whitespaces": 58, "n_words": 47, "nloc": 14, "token_counts": 110}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:module/spring-boot-data-mongodb/src/main/java/org/springframework/boot/data/mongodb/autoconfigure/MongoDataConfiguration.java#77-81", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-data-mongodb/src/main/java/org/springframework/boot/data/mongodb/autoconfigure/MongoDataConfiguration.java", "language": "Java"}, "method": {"name": "mongoCustomConversions", "qualified_name": "org.springframework.boot.data.mongodb.autoconfigure.MongoDataConfiguration#mongoCustomConversions", "start_line": 77, "end_line": 81, "signature": "mongoCustomConversions()", "original_code": "@Bean\n\t@ConditionalOnMissingBean\n\tMongoCustomConversions mongoCustomConversions() {\n\t\treturn MongoCustomConversions.create(this::configureConversions);\n\t}", "doc_comment": ""}, "code_tokens": ["MongoCustomConversions", "mongoCustomConversions", "(", ")", "{", "}", "@", "Bean", "@", "ConditionalOnMissingBean", "return", ";", "MongoCustomConversions", ".", "create", "(", ")", "this", "::", "configureConversions"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 31, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 16, "n_whitespaces": 12, "n_words": 9, "nloc": 5, "token_counts": 20}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:module/spring-boot-data-mongodb/src/main/java/org/springframework/boot/data/mongodb/autoconfigure/MongoDataConfiguration.java#83-85", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-data-mongodb/src/main/java/org/springframework/boot/data/mongodb/autoconfigure/MongoDataConfiguration.java", "language": "Java"}, "method": {"name": "configureConversions", "qualified_name": "org.springframework.boot.data.mongodb.autoconfigure.MongoDataConfiguration#configureConversions", "start_line": 83, "end_line": 85, "signature": "configureConversions(MongoConverterConfigurationAdapter configurer)", "original_code": "private void configureConversions(MongoConverterConfigurationAdapter configurer) {\n\t\tPropertyMapper.get().from(this.properties.getRepresentation()::getBigDecimal).to(configurer::bigDecimal);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "configureConversions", "private", "(", ")", "{", "}", "MongoConverterConfigurationAdapter", "configurer", ";", ".", "to", ".", "from", "(", ")", "PropertyMapper", ".", "get", "(", ")", "configurer", "::", "bigDecimal", "(", ")", "::", "getBigDecimal", ".", "getRepresentation", "this", ".", "properties", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 53, "ast_depth": 11, "n_identifiers": 10, "vocab_size": 21, "n_whitespaces": 9, "n_words": 15, "nloc": 3, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:module/spring-boot-data-mongodb/src/main/java/org/springframework/boot/data/mongodb/autoconfigure/MongoDataConfiguration.java#87-97", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-data-mongodb/src/main/java/org/springframework/boot/data/mongodb/autoconfigure/MongoDataConfiguration.java", "language": "Java"}, "method": {"name": "mappingMongoConverter", "qualified_name": "org.springframework.boot.data.mongodb.autoconfigure.MongoDataConfiguration#mappingMongoConverter", "start_line": 87, "end_line": 97, "signature": "mappingMongoConverter(ObjectProvider<MongoDatabaseFactory> factory,\n\t\t\tMongoMappingContext context, MongoCustomConversions conversions)", "original_code": "@Bean\n\t@ConditionalOnMissingBean(MongoConverter.class)\n\tMappingMongoConverter mappingMongoConverter(ObjectProvider<MongoDatabaseFactory> factory,\n\t\t\tMongoMappingContext context, MongoCustomConversions conversions) {\n\t\tMongoDatabaseFactory mongoDatabaseFactory = factory.getIfAvailable();\n\t\tDbRefResolver dbRefResolver = (mongoDatabaseFactory != null) ? new DefaultDbRefResolver(mongoDatabaseFactory)\n\t\t\t\t: NoOpDbRefResolver.INSTANCE;\n\t\tMappingMongoConverter mappingConverter = new MappingMongoConverter(dbRefResolver, context);\n\t\tmappingConverter.setCustomConversions(conversions);\n\t\treturn mappingConverter;\n\t}", "doc_comment": ""}, "code_tokens": ["MappingMongoConverter", "mappingMongoConverter", "(", ",", ",", ")", "{", "}", "@", "Bean", "@", "ConditionalOnMissingBean", "factory", "MongoMappingContext", "context", "MongoCustomConversions", "conversions", "MongoDatabaseFactory", ";", "DbRefResolver", ";", "MappingMongoConverter", ";", ";", "return", "mappingConverter", ";", "(", ")", "ObjectProvider", "mongoDatabaseFactory", "=", "dbRefResolver", "=", "mappingConverter", "=", "mappingConverter", ".", "setCustomConversions", "MongoConverter", ".", "class", "<", "MongoDatabaseFactory", ">", "factory", ".", "getIfAvailable", "?", ":", "new", "MappingMongoConverter", "(", "conversions", ")", "(", ")", "(", ")", "new", "DefaultDbRefResolver", "NoOpDbRefResolver", ".", "INSTANCE", "(", "dbRefResolver", ",", "context", ")", "mongoDatabaseFactory", "!=", "null", "(", "mongoDatabaseFactory", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 109, "ast_depth": 9, "n_identifiers": 13, "vocab_size": 39, "n_whitespaces": 54, "n_words": 37, "nloc": 11, "token_counts": 75}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java#74-81", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "jacksonNotAvailable", "qualified_name": "test.java.org.springframework.boot.http.converter.autoconfigure.HttpMessageConvertersAutoConfigurationTests#jacksonNotAvailable", "start_line": 74, "end_line": 81, "signature": "jacksonNotAvailable()", "original_code": "@Test\n\tvoid jacksonNotAvailable() {\n\t\tthis.contextRunner.run((context) -> {\n\t\t\tassertThat(context).doesNotHaveBean(ObjectMapper.class);\n\t\t\tassertThat(context).doesNotHaveBean(JacksonJsonHttpMessageConverter.class);\n\t\t\tassertThat(context).doesNotHaveBean(JacksonXmlHttpMessageConverter.class);\n\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "jacksonNotAvailable", "(", ")", "{", "}", "@", "Test", ";", ".", "run", "this", ".", "contextRunner", "(", ")", "->", "(", "context", ")", "{", "}", ";", ";", ";", ".", "doesNotHaveBean", ".", "doesNotHaveBean", ".", "doesNotHaveBean", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "(", "context", ")", "ObjectMapper", ".", "class", "(", "context", ")", "JacksonJsonHttpMessageConverter", ".", "class", "(", "context", ")", "JacksonXmlHttpMessageConverter", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 89, "ast_depth": 13, "n_identifiers": 7, "vocab_size": 21, "n_whitespaces": 26, "n_words": 22, "nloc": 8, "token_counts": 58}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java#83-87", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "jacksonDefaultConverter", "qualified_name": "test.java.org.springframework.boot.http.converter.autoconfigure.HttpMessageConvertersAutoConfigurationTests#jacksonDefaultConverter", "start_line": 83, "end_line": 87, "signature": "jacksonDefaultConverter()", "original_code": "@Test\n\tvoid jacksonDefaultConverter() {\n\t\tthis.contextRunner.withUserConfiguration(JacksonJsonMapperConfig.class)\n\t\t\t.run(assertConverter(JacksonJsonHttpMessageConverter.class, \"jacksonJsonHttpMessageConverter\"));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "jacksonDefaultConverter", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withUserConfiguration", "(", ")", "this", ".", "contextRunner", "(", ")", "assertConverter", "JacksonJsonMapperConfig", ".", "class", "(", ",", ")", "JacksonJsonHttpMessageConverter", ".", "class", "\"", "jacksonJsonHttpMessageConverter", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 50, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 21, "n_whitespaces": 14, "n_words": 13, "nloc": 5, "token_counts": 33}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java#89-93", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "jacksonConverterWithBuilder", "qualified_name": "test.java.org.springframework.boot.http.converter.autoconfigure.HttpMessageConvertersAutoConfigurationTests#jacksonConverterWithBuilder", "start_line": 89, "end_line": 93, "signature": "jacksonConverterWithBuilder()", "original_code": "@Test\n\tvoid jacksonConverterWithBuilder() {\n\t\tthis.contextRunner.withUserConfiguration(JacksonJsonMapperBuilderConfig.class)\n\t\t\t.run(assertConverter(JacksonJsonHttpMessageConverter.class, \"jacksonJsonHttpMessageConverter\"));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "jacksonConverterWithBuilder", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withUserConfiguration", "(", ")", "this", ".", "contextRunner", "(", ")", "assertConverter", "JacksonJsonMapperBuilderConfig", ".", "class", "(", ",", ")", "JacksonJsonHttpMessageConverter", ".", "class", "\"", "jacksonJsonHttpMessageConverter", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 50, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 21, "n_whitespaces": 14, "n_words": 13, "nloc": 5, "token_counts": 33}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java#95-99", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "jacksonXmlConverterWithBuilder", "qualified_name": "test.java.org.springframework.boot.http.converter.autoconfigure.HttpMessageConvertersAutoConfigurationTests#jacksonXmlConverterWithBuilder", "start_line": 95, "end_line": 99, "signature": "jacksonXmlConverterWithBuilder()", "original_code": "@Test\n\tvoid jacksonXmlConverterWithBuilder() {\n\t\tthis.contextRunner.withUserConfiguration(JacksonXmlMapperBuilderConfig.class)\n\t\t\t.run(assertConverter(JacksonXmlHttpMessageConverter.class, \"jacksonXmlHttpMessageConverter\"));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "jacksonXmlConverterWithBuilder", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withUserConfiguration", "(", ")", "this", ".", "contextRunner", "(", ")", "assertConverter", "JacksonXmlMapperBuilderConfig", ".", "class", "(", ",", ")", "JacksonXmlHttpMessageConverter", ".", "class", "\"", "jacksonXmlHttpMessageConverter", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 50, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 21, "n_whitespaces": 14, "n_words": 13, "nloc": 5, "token_counts": 33}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java#101-105", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "jacksonCustomConverter", "qualified_name": "test.java.org.springframework.boot.http.converter.autoconfigure.HttpMessageConvertersAutoConfigurationTests#jacksonCustomConverter", "start_line": 101, "end_line": 105, "signature": "jacksonCustomConverter()", "original_code": "@Test\n\tvoid jacksonCustomConverter() {\n\t\tthis.contextRunner.withUserConfiguration(JacksonJsonMapperConfig.class, JacksonConverterConfig.class)\n\t\t\t.run(assertConverter(JacksonJsonHttpMessageConverter.class, \"customJacksonMessageConverter\"));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "jacksonCustomConverter", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withUserConfiguration", "(", ")", "this", ".", "contextRunner", "(", ",", ")", "assertConverter", "JacksonJsonMapperConfig", ".", "class", "JacksonConverterConfig", ".", "class", "(", ",", ")", "JacksonJsonHttpMessageConverter", ".", "class", "\"", "customJacksonMessageConverter", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 55, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 22, "n_whitespaces": 15, "n_words": 15, "nloc": 5, "token_counts": 37}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java#107-113", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "gsonNotAvailable", "qualified_name": "test.java.org.springframework.boot.http.converter.autoconfigure.HttpMessageConvertersAutoConfigurationTests#gsonNotAvailable", "start_line": 107, "end_line": 113, "signature": "gsonNotAvailable()", "original_code": "@Test\n\tvoid gsonNotAvailable() {\n\t\tthis.contextRunner.run((context) -> {\n\t\t\tassertThat(context).doesNotHaveBean(Gson.class);\n\t\t\tassertThat(context).doesNotHaveBean(GsonHttpMessageConverter.class);\n\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "gsonNotAvailable", "(", ")", "{", "}", "@", "Test", ";", ".", "run", "this", ".", "contextRunner", "(", ")", "->", "(", "context", ")", "{", "}", ";", ";", ".", "doesNotHaveBean", ".", "doesNotHaveBean", "assertThat", "(", ")", "assertThat", "(", ")", "(", "context", ")", "Gson", ".", "class", "(", "context", ")", "GsonHttpMessageConverter", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 71, "ast_depth": 13, "n_identifiers": 7, "vocab_size": 20, "n_whitespaces": 22, "n_words": 17, "nloc": 7, "token_counts": 46}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java#115-119", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "gsonDefaultConverter", "qualified_name": "test.java.org.springframework.boot.http.converter.autoconfigure.HttpMessageConvertersAutoConfigurationTests#gsonDefaultConverter", "start_line": 115, "end_line": 119, "signature": "gsonDefaultConverter()", "original_code": "@Test\n\tvoid gsonDefaultConverter() {\n\t\tthis.contextRunner.withBean(Gson.class)\n\t\t\t.run(assertConverter(GsonHttpMessageConverter.class, \"gsonHttpMessageConverter\"));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "gsonDefaultConverter", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withBean", "(", ")", "this", ".", "contextRunner", "(", ")", "assertConverter", "Gson", ".", "class", "(", ",", ")", "GsonHttpMessageConverter", ".", "class", "\"", "gsonHttpMessageConverter", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 50, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 21, "n_whitespaces": 14, "n_words": 13, "nloc": 5, "token_counts": 33}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java#121-126", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "gsonCustomConverter", "qualified_name": "test.java.org.springframework.boot.http.converter.autoconfigure.HttpMessageConvertersAutoConfigurationTests#gsonCustomConverter", "start_line": 121, "end_line": 126, "signature": "gsonCustomConverter()", "original_code": "@Test\n\tvoid gsonCustomConverter() {\n\t\tthis.contextRunner.withUserConfiguration(GsonConverterConfig.class)\n\t\t\t.withBean(Gson.class)\n\t\t\t.run(assertConverter(GsonHttpMessageConverter.class, \"customGsonMessageConverter\"));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "gsonCustomConverter", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withBean", "(", ")", ".", "withUserConfiguration", "(", ")", "assertConverter", "this", ".", "contextRunner", "(", ")", "Gson", ".", "class", "(", ",", ")", "GsonConverterConfig", ".", "class", "GsonHttpMessageConverter", ".", "class", "\"", "customGsonMessageConverter", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 60, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 23, "n_whitespaces": 18, "n_words": 16, "nloc": 6, "token_counts": 40}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java#128-136", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "gsonCanBePreferred", "qualified_name": "test.java.org.springframework.boot.http.converter.autoconfigure.HttpMessageConvertersAutoConfigurationTests#gsonCanBePreferred", "start_line": 128, "end_line": 136, "signature": "gsonCanBePreferred()", "original_code": "@Test\n\tvoid gsonCanBePreferred() {\n\t\tallOptionsRunner().withPropertyValues(\"spring.http.converters.preferred-json-mapper:gson\").run((context) -> {\n\t\t\tassertConverterBeanExists(context, GsonHttpMessageConverter.class, \"gsonHttpMessageConverter\");\n\t\t\tassertConverterBeanRegisteredWithHttpMessageConverters(context, GsonHttpMessageConverter.class);\n\t\t\tassertThat(context).doesNotHaveBean(JsonbHttpMessageConverter.class);\n\t\t\tassertThat(context).doesNotHaveBean(JacksonJsonHttpMessageConverter.class);\n\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "gsonCanBePreferred", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withPropertyValues", "(", ")", "allOptionsRunner", "(", ")", "->", "(", ")", "\"", "spring.http.converters.preferred-json-mapper:gson", "\"", "(", "context", ")", "{", "}", ";", ";", ";", ";", "assertConverterBeanExists", "assertConverterBeanRegisteredWithHttpMessageConverters", ".", "doesNotHaveBean", ".", "doesNotHaveBean", "(", "context", ",", ",", ")", "(", "context", ",", ")", "assertThat", "(", ")", "assertThat", "(", ")", "GsonHttpMessageConverter", ".", "class", "\"", "gsonHttpMessageConverter", "\"", "GsonHttpMessageConverter", ".", "class", "(", "context", ")", "JsonbHttpMessageConverter", ".", "class", "(", "context", ")", "JacksonJsonHttpMessageConverter", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 113, "ast_depth": 13, "n_identifiers": 10, "vocab_size": 27, "n_whitespaces": 33, "n_words": 33, "nloc": 9, "token_counts": 75}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java#138-144", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "jsonbNotAvailable", "qualified_name": "test.java.org.springframework.boot.http.converter.autoconfigure.HttpMessageConvertersAutoConfigurationTests#jsonbNotAvailable", "start_line": 138, "end_line": 144, "signature": "jsonbNotAvailable()", "original_code": "@Test\n\tvoid jsonbNotAvailable() {\n\t\tthis.contextRunner.run((context) -> {\n\t\t\tassertThat(context).doesNotHaveBean(Jsonb.class);\n\t\t\tassertThat(context).doesNotHaveBean(JsonbHttpMessageConverter.class);\n\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "jsonbNotAvailable", "(", ")", "{", "}", "@", "Test", ";", ".", "run", "this", ".", "contextRunner", "(", ")", "->", "(", "context", ")", "{", "}", ";", ";", ".", "doesNotHaveBean", ".", "doesNotHaveBean", "assertThat", "(", ")", "assertThat", "(", ")", "(", "context", ")", "Jsonb", ".", "class", "(", "context", ")", "JsonbHttpMessageConverter", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 71, "ast_depth": 13, "n_identifiers": 7, "vocab_size": 20, "n_whitespaces": 22, "n_words": 17, "nloc": 7, "token_counts": 46}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java#146-150", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "jsonbDefaultConverter", "qualified_name": "test.java.org.springframework.boot.http.converter.autoconfigure.HttpMessageConvertersAutoConfigurationTests#jsonbDefaultConverter", "start_line": 146, "end_line": 150, "signature": "jsonbDefaultConverter()", "original_code": "@Test\n\tvoid jsonbDefaultConverter() {\n\t\tthis.contextRunner.withBean(Jsonb.class, JsonbBuilder::create)\n\t\t\t.run(assertConverter(JsonbHttpMessageConverter.class, \"jsonbHttpMessageConverter\"));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "jsonbDefaultConverter", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withBean", "(", ")", "this", ".", "contextRunner", "(", ",", ")", "assertConverter", "Jsonb", ".", "class", "JsonbBuilder", "::", "create", "(", ",", ")", "JsonbHttpMessageConverter", ".", "class", "\"", "jsonbHttpMessageConverter", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 55, "ast_depth": 10, "n_identifiers": 8, "vocab_size": 24, "n_whitespaces": 15, "n_words": 15, "nloc": 5, "token_counts": 37}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java#152-157", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "jsonbCustomConverter", "qualified_name": "test.java.org.springframework.boot.http.converter.autoconfigure.HttpMessageConvertersAutoConfigurationTests#jsonbCustomConverter", "start_line": 152, "end_line": 157, "signature": "jsonbCustomConverter()", "original_code": "@Test\n\tvoid jsonbCustomConverter() {\n\t\tthis.contextRunner.withUserConfiguration(JsonbConverterConfig.class)\n\t\t\t.withBean(Jsonb.class, JsonbBuilder::create)\n\t\t\t.run(assertConverter(JsonbHttpMessageConverter.class, \"customJsonbMessageConverter\"));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "jsonbCustomConverter", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withBean", "(", ")", ".", "withUserConfiguration", "(", ",", ")", "assertConverter", "this", ".", "contextRunner", "(", ")", "Jsonb", ".", "class", "JsonbBuilder", "::", "create", "(", ",", ")", "JsonbConverterConfig", ".", "class", "JsonbHttpMessageConverter", ".", "class", "\"", "customJsonbMessageConverter", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 65, "ast_depth": 10, "n_identifiers": 9, "vocab_size": 26, "n_whitespaces": 19, "n_words": 18, "nloc": 6, "token_counts": 44}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java#159-167", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "jsonbCanBePreferred", "qualified_name": "test.java.org.springframework.boot.http.converter.autoconfigure.HttpMessageConvertersAutoConfigurationTests#jsonbCanBePreferred", "start_line": 159, "end_line": 167, "signature": "jsonbCanBePreferred()", "original_code": "@Test\n\tvoid jsonbCanBePreferred() {\n\t\tallOptionsRunner().withPropertyValues(\"spring.http.converters.preferred-json-mapper:jsonb\").run((context) -> {\n\t\t\tassertConverterBeanExists(context, JsonbHttpMessageConverter.class, \"jsonbHttpMessageConverter\");\n\t\t\tassertConverterBeanRegisteredWithHttpMessageConverters(context, JsonbHttpMessageConverter.class);\n\t\t\tassertThat(context).doesNotHaveBean(GsonHttpMessageConverter.class);\n\t\t\tassertThat(context).doesNotHaveBean(JacksonJsonHttpMessageConverter.class);\n\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "jsonbCanBePreferred", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withPropertyValues", "(", ")", "allOptionsRunner", "(", ")", "->", "(", ")", "\"", "spring.http.converters.preferred-json-mapper:jsonb", "\"", "(", "context", ")", "{", "}", ";", ";", ";", ";", "assertConverterBeanExists", "assertConverterBeanRegisteredWithHttpMessageConverters", ".", "doesNotHaveBean", ".", "doesNotHaveBean", "(", "context", ",", ",", ")", "(", "context", ",", ")", "assertThat", "(", ")", "assertThat", "(", ")", "JsonbHttpMessageConverter", ".", "class", "\"", "jsonbHttpMessageConverter", "\"", "JsonbHttpMessageConverter", ".", "class", "(", "context", ")", "GsonHttpMessageConverter", ".", "class", "(", "context", ")", "JacksonJsonHttpMessageConverter", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 113, "ast_depth": 13, "n_identifiers": 10, "vocab_size": 27, "n_whitespaces": 33, "n_words": 33, "nloc": 9, "token_counts": 75}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java#169-175", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "kotlinSerializationNotAvailable", "qualified_name": "test.java.org.springframework.boot.http.converter.autoconfigure.HttpMessageConvertersAutoConfigurationTests#kotlinSerializationNotAvailable", "start_line": 169, "end_line": 175, "signature": "kotlinSerializationNotAvailable()", "original_code": "@Test\n\tvoid kotlinSerializationNotAvailable() {\n\t\tthis.contextRunner.run((context) -> {\n\t\t\tassertThat(context).doesNotHaveBean(Json.class);\n\t\t\tassertThat(context).doesNotHaveBean(KotlinSerializationJsonHttpMessageConverter.class);\n\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "kotlinSerializationNotAvailable", "(", ")", "{", "}", "@", "Test", ";", ".", "run", "this", ".", "contextRunner", "(", ")", "->", "(", "context", ")", "{", "}", ";", ";", ".", "doesNotHaveBean", ".", "doesNotHaveBean", "assertThat", "(", ")", "assertThat", "(", ")", "(", "context", ")", "Json", ".", "class", "(", "context", ")", "KotlinSerializationJsonHttpMessageConverter", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 71, "ast_depth": 13, "n_identifiers": 7, "vocab_size": 20, "n_whitespaces": 22, "n_words": 17, "nloc": 7, "token_counts": 46}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java#177-183", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "kotlinSerializationCustomConverter", "qualified_name": "test.java.org.springframework.boot.http.converter.autoconfigure.HttpMessageConvertersAutoConfigurationTests#kotlinSerializationCustomConverter", "start_line": 177, "end_line": 183, "signature": "kotlinSerializationCustomConverter()", "original_code": "@Test\n\tvoid kotlinSerializationCustomConverter() {\n\t\tthis.contextRunner.withUserConfiguration(KotlinSerializationConverterConfig.class)\n\t\t\t.withBean(Json.class, () -> Json.Default)\n\t\t\t.run(assertConverter(KotlinSerializationJsonHttpMessageConverter.class,\n\t\t\t\t\t\"customKotlinSerializationJsonHttpMessageConverter\"));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "kotlinSerializationCustomConverter", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withBean", "(", ")", ".", "withUserConfiguration", "(", ",", ")", "assertConverter", "this", ".", "contextRunner", "(", ")", "Json", ".", "class", "->", "(", ",", ")", "KotlinSerializationConverterConfig", ".", "class", "(", ")", "Json", ".", "Default", "KotlinSerializationJsonHttpMessageConverter", ".", "class", "\"", "customKotlinSerializationJsonHttpMessageConverter", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 70, "ast_depth": 10, "n_identifiers": 9, "vocab_size": 25, "n_whitespaces": 26, "n_words": 18, "nloc": 7, "token_counts": 47}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java#185-195", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "kotlinSerializationOrderedAheadOfJsonConverter", "qualified_name": "test.java.org.springframework.boot.http.converter.autoconfigure.HttpMessageConvertersAutoConfigurationTests#kotlinSerializationOrderedAheadOfJsonConverter", "start_line": 185, "end_line": 195, "signature": "kotlinSerializationOrderedAheadOfJsonConverter()", "original_code": "@Test\n\tvoid kotlinSerializationOrderedAheadOfJsonConverter() {\n\t\tallOptionsRunner().run((context) -> {\n\t\t\tassertConverterBeanExists(context, KotlinSerializationJsonHttpMessageConverter.class,\n\t\t\t\t\t\"kotlinSerializationJsonHttpMessageConverter\");\n\t\t\tassertConverterBeanRegisteredWithHttpMessageConverters(context,\n\t\t\t\t\tKotlinSerializationJsonHttpMessageConverter.class);\n\t\t\tassertConvertersBeanRegisteredWithHttpMessageConverters(context,\n\t\t\t\t\tList.of(KotlinSerializationJsonHttpMessageConverter.class, JacksonJsonHttpMessageConverter.class));\n\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "kotlinSerializationOrderedAheadOfJsonConverter", "(", ")", "{", "}", "@", "Test", ";", ".", "run", "allOptionsRunner", "(", ")", "(", ")", "->", "(", "context", ")", "{", "}", ";", ";", ";", "assertConverterBeanExists", "assertConverterBeanRegisteredWithHttpMessageConverters", "assertConvertersBeanRegisteredWithHttpMessageConverters", "(", "context", ",", ",", ")", "(", "context", ",", ")", "(", "context", ",", ")", "KotlinSerializationJsonHttpMessageConverter", ".", "class", "\"", "kotlinSerializationJsonHttpMessageConverter", "\"", "KotlinSerializationJsonHttpMessageConverter", ".", "class", "List", ".", "of", "(", ",", ")", "KotlinSerializationJsonHttpMessageConverter", ".", "class", "JacksonJsonHttpMessageConverter", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 92, "ast_depth": 15, "n_identifiers": 10, "vocab_size": 25, "n_whitespaces": 46, "n_words": 23, "nloc": 11, "token_counts": 62}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java#197-200", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "stringDefaultConverter", "qualified_name": "test.java.org.springframework.boot.http.converter.autoconfigure.HttpMessageConvertersAutoConfigurationTests#stringDefaultConverter", "start_line": 197, "end_line": 200, "signature": "stringDefaultConverter()", "original_code": "@Test\n\tvoid stringDefaultConverter() {\n\t\tthis.contextRunner.run(assertConverter(StringHttpMessageConverter.class, \"stringHttpMessageConverter\"));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "stringDefaultConverter", "(", ")", "{", "}", "@", "Test", ";", ".", "run", "this", ".", "contextRunner", "(", ")", "assertConverter", "(", ",", ")", "StringHttpMessageConverter", ".", "class", "\"", "stringHttpMessageConverter", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 40, "ast_depth": 10, "n_identifiers": 5, "vocab_size": 19, "n_whitespaces": 10, "n_words": 10, "nloc": 4, "token_counts": 26}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java#202-206", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "stringCustomConverter", "qualified_name": "test.java.org.springframework.boot.http.converter.autoconfigure.HttpMessageConvertersAutoConfigurationTests#stringCustomConverter", "start_line": 202, "end_line": 206, "signature": "stringCustomConverter()", "original_code": "@Test\n\tvoid stringCustomConverter() {\n\t\tthis.contextRunner.withUserConfiguration(StringConverterConfig.class)\n\t\t\t.run(assertConverter(StringHttpMessageConverter.class, \"customStringMessageConverter\"));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "stringCustomConverter", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withUserConfiguration", "(", ")", "this", ".", "contextRunner", "(", ")", "assertConverter", "StringConverterConfig", ".", "class", "(", ",", ")", "StringHttpMessageConverter", ".", "class", "\"", "customStringMessageConverter", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 50, "ast_depth": 10, "n_identifiers": 6, "vocab_size": 21, "n_whitespaces": 14, "n_words": 13, "nloc": 5, "token_counts": 33}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java#208-218", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "typeConstrainedConverterDoesNotPreventAutoConfigurationOfJacksonConverter", "qualified_name": "test.java.org.springframework.boot.http.converter.autoconfigure.HttpMessageConvertersAutoConfigurationTests#typeConstrainedConverterDoesNotPreventAutoConfigurationOfJacksonConverter", "start_line": 208, "end_line": 218, "signature": "typeConstrainedConverterDoesNotPreventAutoConfigurationOfJacksonConverter()", "original_code": "@Test\n\tvoid typeConstrainedConverterDoesNotPreventAutoConfigurationOfJacksonConverter() {\n\t\tthis.contextRunner\n\t\t\t.withUserConfiguration(JacksonJsonMapperBuilderConfig.class, TypeConstrainedConverterConfiguration.class)\n\t\t\t.run((context) -> {\n\t\t\t\tBeanDefinition beanDefinition = ((GenericApplicationContext) context.getSourceApplicationContext())\n\t\t\t\t\t.getBeanDefinition(\"jacksonJsonHttpMessageConverter\");\n\t\t\t\tassertThat(beanDefinition.getFactoryBeanName())\n\t\t\t\t\t.isEqualTo(JacksonJsonHttpMessageConverterConfiguration.class.getName());\n\t\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "typeConstrainedConverterDoesNotPreventAutoConfigurationOfJacksonConverter", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withUserConfiguration", "(", ")", "this", ".", "contextRunner", "(", ",", ")", "->", "JacksonJsonMapperBuilderConfig", ".", "class", "TypeConstrainedConverterConfiguration", ".", "class", "(", "context", ")", "{", "}", "BeanDefinition", ";", ";", "beanDefinition", "=", ".", "isEqualTo", ".", "getBeanDefinition", "assertThat", "(", ")", "(", ")", "(", ")", "(", ")", ".", "getName", "(", "GenericApplicationContext", ")", "\"", "jacksonJsonHttpMessageConverter", "\"", "beanDefinition", ".", "getFactoryBeanName", "JacksonJsonHttpMessageConverterConfiguration", ".", "class", "(", ")", "context", ".", "getSourceApplicationContext", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 110, "ast_depth": 16, "n_identifiers": 13, "vocab_size": 33, "n_whitespaces": 50, "n_words": 26, "nloc": 11, "token_counts": 74}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java#220-230", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "typeConstrainedConverterFromSpringDataDoesNotPreventAutoConfigurationOfJacksonConverter", "qualified_name": "test.java.org.springframework.boot.http.converter.autoconfigure.HttpMessageConvertersAutoConfigurationTests#typeConstrainedConverterFromSpringDataDoesNotPreventAutoConfigurationOfJacksonConverter", "start_line": 220, "end_line": 230, "signature": "typeConstrainedConverterFromSpringDataDoesNotPreventAutoConfigurationOfJacksonConverter()", "original_code": "@Test\n\tvoid typeConstrainedConverterFromSpringDataDoesNotPreventAutoConfigurationOfJacksonConverter() {\n\t\tthis.contextRunner\n\t\t\t.withUserConfiguration(JacksonJsonMapperBuilderConfig.class, RepositoryRestMvcConfiguration.class)\n\t\t\t.run((context) -> {\n\t\t\t\tBeanDefinition beanDefinition = ((GenericApplicationContext) context.getSourceApplicationContext())\n\t\t\t\t\t.getBeanDefinition(\"jacksonJsonHttpMessageConverter\");\n\t\t\t\tassertThat(beanDefinition.getFactoryBeanName())\n\t\t\t\t\t.isEqualTo(JacksonJsonHttpMessageConverterConfiguration.class.getName());\n\t\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "typeConstrainedConverterFromSpringDataDoesNotPreventAutoConfigurationOfJacksonConverter", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withUserConfiguration", "(", ")", "this", ".", "contextRunner", "(", ",", ")", "->", "JacksonJsonMapperBuilderConfig", ".", "class", "RepositoryRestMvcConfiguration", ".", "class", "(", "context", ")", "{", "}", "BeanDefinition", ";", ";", "beanDefinition", "=", ".", "isEqualTo", ".", "getBeanDefinition", "assertThat", "(", ")", "(", ")", "(", ")", "(", ")", ".", "getName", "(", "GenericApplicationContext", ")", "\"", "jacksonJsonHttpMessageConverter", "\"", "beanDefinition", ".", "getFactoryBeanName", "JacksonJsonHttpMessageConverterConfiguration", ".", "class", "(", ")", "context", ".", "getSourceApplicationContext", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 110, "ast_depth": 16, "n_identifiers": 13, "vocab_size": 33, "n_whitespaces": 50, "n_words": 26, "nloc": 11, "token_counts": 74}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java#232-241", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "jacksonIsPreferredByDefault", "qualified_name": "test.java.org.springframework.boot.http.converter.autoconfigure.HttpMessageConvertersAutoConfigurationTests#jacksonIsPreferredByDefault", "start_line": 232, "end_line": 241, "signature": "jacksonIsPreferredByDefault()", "original_code": "@Test\n\tvoid jacksonIsPreferredByDefault() {\n\t\tallOptionsRunner().run((context) -> {\n\t\t\tassertConverterBeanExists(context, JacksonJsonHttpMessageConverter.class,\n\t\t\t\t\t\"jacksonJsonHttpMessageConverter\");\n\t\t\tassertConverterBeanRegisteredWithHttpMessageConverters(context, JacksonJsonHttpMessageConverter.class);\n\t\t\tassertThat(context).doesNotHaveBean(GsonHttpMessageConverter.class);\n\t\t\tassertThat(context).doesNotHaveBean(JsonbHttpMessageConverter.class);\n\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "jacksonIsPreferredByDefault", "(", ")", "{", "}", "@", "Test", ";", ".", "run", "allOptionsRunner", "(", ")", "(", ")", "->", "(", "context", ")", "{", "}", ";", ";", ";", ";", "assertConverterBeanExists", "assertConverterBeanRegisteredWithHttpMessageConverters", ".", "doesNotHaveBean", ".", "doesNotHaveBean", "(", "context", ",", ",", ")", "(", "context", ",", ")", "assertThat", "(", ")", "assertThat", "(", ")", "JacksonJsonHttpMessageConverter", ".", "class", "\"", "jacksonJsonHttpMessageConverter", "\"", "JacksonJsonHttpMessageConverter", ".", "class", "(", "context", ")", "GsonHttpMessageConverter", ".", "class", "(", "context", ")", "JsonbHttpMessageConverter", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 103, "ast_depth": 13, "n_identifiers": 9, "vocab_size": 25, "n_whitespaces": 38, "n_words": 25, "nloc": 10, "token_counts": 68}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java#243-251", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "gsonIsPreferredIfJacksonIsNotAvailable", "qualified_name": "test.java.org.springframework.boot.http.converter.autoconfigure.HttpMessageConvertersAutoConfigurationTests#gsonIsPreferredIfJacksonIsNotAvailable", "start_line": 243, "end_line": 251, "signature": "gsonIsPreferredIfJacksonIsNotAvailable()", "original_code": "@Test\n\tvoid gsonIsPreferredIfJacksonIsNotAvailable() {\n\t\tallOptionsRunner().withClassLoader(new FilteredClassLoader(ObjectMapper.class.getPackage().getName()))\n\t\t\t.run((context) -> {\n\t\t\t\tassertConverterBeanExists(context, GsonHttpMessageConverter.class, \"gsonHttpMessageConverter\");\n\t\t\t\tassertConverterBeanRegisteredWithHttpMessageConverters(context, GsonHttpMessageConverter.class);\n\t\t\t\tassertThat(context).doesNotHaveBean(JsonbHttpMessageConverter.class);\n\t\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "gsonIsPreferredIfJacksonIsNotAvailable", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withClassLoader", "(", ")", "allOptionsRunner", "(", ")", "->", "(", ")", "new", "FilteredClassLoader", "(", "context", ")", "{", "}", "(", ")", ";", ";", ";", ".", "getName", "assertConverterBeanExists", "assertConverterBeanRegisteredWithHttpMessageConverters", ".", "doesNotHaveBean", ".", "getPackage", "(", ")", "(", "context", ",", ",", ")", "(", "context", ",", ")", "assertThat", "(", ")", "ObjectMapper", ".", "class", "(", ")", "GsonHttpMessageConverter", ".", "class", "\"", "gsonHttpMessageConverter", "\"", "GsonHttpMessageConverter", ".", "class", "(", "context", ")", "JsonbHttpMessageConverter", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 113, "ast_depth": 13, "n_identifiers": 12, "vocab_size": 30, "n_whitespaces": 38, "n_words": 27, "nloc": 9, "token_counts": 75}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java#253-259", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "jsonbIsPreferredIfJacksonAndGsonAreNotAvailable", "qualified_name": "test.java.org.springframework.boot.http.converter.autoconfigure.HttpMessageConvertersAutoConfigurationTests#jsonbIsPreferredIfJacksonAndGsonAreNotAvailable", "start_line": 253, "end_line": 259, "signature": "jsonbIsPreferredIfJacksonAndGsonAreNotAvailable()", "original_code": "@Test\n\tvoid jsonbIsPreferredIfJacksonAndGsonAreNotAvailable() {\n\t\tallOptionsRunner()\n\t\t\t.withClassLoader(new FilteredClassLoader(ObjectMapper.class.getPackage().getName(),\n\t\t\t\t\tGson.class.getPackage().getName()))\n\t\t\t.run(assertConverter(JsonbHttpMessageConverter.class, \"jsonbHttpMessageConverter\"));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "jsonbIsPreferredIfJacksonAndGsonAreNotAvailable", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withClassLoader", "(", ")", "allOptionsRunner", "(", ")", "assertConverter", "(", ")", "new", "FilteredClassLoader", "(", ",", ")", "(", ",", ")", "JsonbHttpMessageConverter", ".", "class", "\"", "jsonbHttpMessageConverter", "\"", ".", "getName", ".", "getName", ".", "getPackage", "(", ")", ".", "getPackage", "(", ")", "ObjectMapper", ".", "class", "(", ")", "Gson", ".", "class", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 86, "ast_depth": 13, "n_identifiers": 8, "vocab_size": 25, "n_whitespaces": 25, "n_words": 20, "nloc": 7, "token_counts": 57}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java#261-266", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "whenServletWebApplicationHttpMessageConvertersIsConfigured", "qualified_name": "test.java.org.springframework.boot.http.converter.autoconfigure.HttpMessageConvertersAutoConfigurationTests#whenServletWebApplicationHttpMessageConvertersIsConfigured", "start_line": 261, "end_line": 266, "signature": "whenServletWebApplicationHttpMessageConvertersIsConfigured()", "original_code": "@Test\n\tvoid whenServletWebApplicationHttpMessageConvertersIsConfigured() {\n\t\tnew WebApplicationContextRunner()\n\t\t\t.withConfiguration(AutoConfigurations.of(HttpMessageConvertersAutoConfiguration.class))\n\t\t\t.run((context) -> assertThat(context).hasSingleBean(HttpMessageConverters.class));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "whenServletWebApplicationHttpMessageConvertersIsConfigured", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withConfiguration", "(", ")", "new", "WebApplicationContextRunner", "(", ")", "->", "(", ")", "AutoConfigurations", ".", "of", "(", "context", ")", ".", "hasSingleBean", "(", ")", "assertThat", "(", ")", "HttpMessageConvertersAutoConfiguration", ".", "class", "(", "context", ")", "HttpMessageConverters", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 67, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 23, "n_whitespaces": 20, "n_words": 17, "nloc": 6, "token_counts": 44}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java#268-273", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "whenReactiveWebApplicationHttpMessageConvertersIsNotConfigured", "qualified_name": "test.java.org.springframework.boot.http.converter.autoconfigure.HttpMessageConvertersAutoConfigurationTests#whenReactiveWebApplicationHttpMessageConvertersIsNotConfigured", "start_line": 268, "end_line": 273, "signature": "whenReactiveWebApplicationHttpMessageConvertersIsNotConfigured()", "original_code": "@Test\n\tvoid whenReactiveWebApplicationHttpMessageConvertersIsNotConfigured() {\n\t\tnew ReactiveWebApplicationContextRunner()\n\t\t\t.withConfiguration(AutoConfigurations.of(HttpMessageConvertersAutoConfiguration.class))\n\t\t\t.run((context) -> assertThat(context).doesNotHaveBean(HttpMessageConverters.class));\n\t}", "doc_comment": ""}, "code_tokens": ["void", "whenReactiveWebApplicationHttpMessageConvertersIsNotConfigured", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withConfiguration", "(", ")", "new", "ReactiveWebApplicationContextRunner", "(", ")", "->", "(", ")", "AutoConfigurations", ".", "of", "(", "context", ")", ".", "doesNotHaveBean", "(", ")", "assertThat", "(", ")", "HttpMessageConvertersAutoConfiguration", ".", "class", "(", "context", ")", "HttpMessageConverters", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 67, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 23, "n_whitespaces": 20, "n_words": 17, "nloc": 6, "token_counts": 44}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java#275-284", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "whenEncodingCharsetIsNotConfiguredThenStringMessageConverterUsesUtf8", "qualified_name": "test.java.org.springframework.boot.http.converter.autoconfigure.HttpMessageConvertersAutoConfigurationTests#whenEncodingCharsetIsNotConfiguredThenStringMessageConverterUsesUtf8", "start_line": 275, "end_line": 284, "signature": "whenEncodingCharsetIsNotConfiguredThenStringMessageConverterUsesUtf8()", "original_code": "@Test\n\tvoid whenEncodingCharsetIsNotConfiguredThenStringMessageConverterUsesUtf8() {\n\t\tnew WebApplicationContextRunner()\n\t\t\t.withConfiguration(AutoConfigurations.of(HttpMessageConvertersAutoConfiguration.class))\n\t\t\t.run((context) -> {\n\t\t\t\tassertThat(context).hasSingleBean(StringHttpMessageConverter.class);\n\t\t\t\tassertThat(context.getBean(StringHttpMessageConverter.class).getDefaultCharset())\n\t\t\t\t\t.isEqualTo(StandardCharsets.UTF_8);\n\t\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "whenEncodingCharsetIsNotConfiguredThenStringMessageConverterUsesUtf8", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withConfiguration", "(", ")", "new", "WebApplicationContextRunner", "(", ")", "->", "(", ")", "AutoConfigurations", ".", "of", "(", "context", ")", "{", "}", "(", ")", ";", ";", "HttpMessageConvertersAutoConfiguration", ".", "class", ".", "hasSingleBean", ".", "isEqualTo", "assertThat", "(", ")", "assertThat", "(", ")", "(", "context", ")", "StringHttpMessageConverter", ".", "class", "(", ")", "StandardCharsets", ".", "UTF_8", ".", "getDefaultCharset", "context", ".", "getBean", "(", ")", "(", ")", "StringHttpMessageConverter", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 106, "ast_depth": 17, "n_identifiers": 14, "vocab_size": 28, "n_whitespaces": 40, "n_words": 26, "nloc": 10, "token_counts": 70}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java#286-296", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "whenEncodingCharsetIsConfiguredThenStringMessageConverterUsesSpecificCharset", "qualified_name": "test.java.org.springframework.boot.http.converter.autoconfigure.HttpMessageConvertersAutoConfigurationTests#whenEncodingCharsetIsConfiguredThenStringMessageConverterUsesSpecificCharset", "start_line": 286, "end_line": 296, "signature": "whenEncodingCharsetIsConfiguredThenStringMessageConverterUsesSpecificCharset()", "original_code": "@Test\n\tvoid whenEncodingCharsetIsConfiguredThenStringMessageConverterUsesSpecificCharset() {\n\t\tnew WebApplicationContextRunner()\n\t\t\t.withConfiguration(AutoConfigurations.of(HttpMessageConvertersAutoConfiguration.class))\n\t\t\t.withPropertyValues(\"spring.http.converters.string-encoding-charset=UTF-16\")\n\t\t\t.run((context) -> {\n\t\t\t\tassertThat(context).hasSingleBean(StringHttpMessageConverter.class);\n\t\t\t\tassertThat(context.getBean(StringHttpMessageConverter.class).getDefaultCharset())\n\t\t\t\t\t.isEqualTo(StandardCharsets.UTF_16);\n\t\t\t});\n\t}", "doc_comment": ""}, "code_tokens": ["void", "whenEncodingCharsetIsConfiguredThenStringMessageConverterUsesSpecificCharset", "(", ")", "{", "}", "@", "Test", ";", ".", "run", ".", "withPropertyValues", "(", ")", ".", "withConfiguration", "(", ")", "->", "new", "WebApplicationContextRunner", "(", ")", "\"", "spring.http.converters.string-encoding-charset=UTF-16", "\"", "(", "context", ")", "{", "}", "(", ")", "AutoConfigurations", ".", "of", ";", ";", "(", ")", ".", "hasSingleBean", ".", "isEqualTo", "HttpMessageConvertersAutoConfiguration", ".", "class", "assertThat", "(", ")", "assertThat", "(", ")", "(", "context", ")", "StringHttpMessageConverter", ".", "class", "(", ")", "StandardCharsets", ".", "UTF_16", ".", "getDefaultCharset", "context", ".", "getBean", "(", ")", "(", ")", "StringHttpMessageConverter", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 116, "ast_depth": 17, "n_identifiers": 15, "vocab_size": 31, "n_whitespaces": 44, "n_words": 35, "nloc": 11, "token_counts": 77}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java#298-303", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "allOptionsRunner", "qualified_name": "test.java.org.springframework.boot.http.converter.autoconfigure.HttpMessageConvertersAutoConfigurationTests#allOptionsRunner", "start_line": 298, "end_line": 303, "signature": "allOptionsRunner()", "original_code": "private ApplicationContextRunner allOptionsRunner() {\n\t\treturn this.contextRunner.withBean(Gson.class)\n\t\t\t.withBean(JsonMapper.class)\n\t\t\t.withBean(Jsonb.class, JsonbBuilder::create)\n\t\t\t.withBean(Json.class, () -> Json.Default);\n\t}", "doc_comment": ""}, "code_tokens": ["ApplicationContextRunner", "allOptionsRunner", "private", "(", ")", "{", "}", "return", ";", ".", "withBean", ".", "withBean", "(", ",", ")", ".", "withBean", "(", ",", ")", "Json", ".", "class", "->", ".", "withBean", "(", ")", "Jsonb", ".", "class", "JsonbBuilder", "::", "create", "(", ")", "Json", ".", "Default", "this", ".", "contextRunner", "(", ")", "JsonMapper", ".", "class", "Gson", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 74, "ast_depth": 11, "n_identifiers": 7, "vocab_size": 24, "n_whitespaces": 25, "n_words": 22, "nloc": 6, "token_counts": 51}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java#305-311", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "assertConverter", "qualified_name": "test.java.org.springframework.boot.http.converter.autoconfigure.HttpMessageConvertersAutoConfigurationTests#assertConverter", "start_line": 305, "end_line": 311, "signature": "assertConverter(\n\t\t\tClass<? extends HttpMessageConverter<?>> converterType, String beanName)", "original_code": "private ContextConsumer<AssertableApplicationContext> assertConverter(\n\t\t\tClass<? extends HttpMessageConverter<?>> converterType, String beanName) {\n\t\treturn (context) -> {\n\t\t\tassertConverterBeanExists(context, converterType, beanName);\n\t\t\tassertConverterBeanRegisteredWithHttpMessageConverters(context, converterType);\n\t\t};\n\t}", "doc_comment": ""}, "code_tokens": ["assertConverter", "private", "ContextConsumer", "(", ",", ")", "{", "}", "<", "AssertableApplicationContext", ">", "converterType", "String", "beanName", "return", ";", "Class", "->", "<", ">", "(", "context", ")", "{", "}", "?", "extends", ";", ";", "HttpMessageConverter", "assertConverterBeanExists", "assertConverterBeanRegisteredWithHttpMessageConverters", "<", ">", "(", "context", ",", "converterType", ",", "beanName", ")", "(", "context", ",", "converterType", ")", "?"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 72, "ast_depth": 11, "n_identifiers": 6, "vocab_size": 24, "n_whitespaces": 34, "n_words": 19, "nloc": 7, "token_counts": 47}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java#313-316", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "assertConverterBeanExists", "qualified_name": "test.java.org.springframework.boot.http.converter.autoconfigure.HttpMessageConvertersAutoConfigurationTests#assertConverterBeanExists", "start_line": 313, "end_line": 316, "signature": "assertConverterBeanExists(AssertableApplicationContext context, Class<?> type, String beanName)", "original_code": "private void assertConverterBeanExists(AssertableApplicationContext context, Class<?> type, String beanName) {\n\t\tassertThat(context).hasSingleBean(type);\n\t\tassertThat(context).hasBean(beanName);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "assertConverterBeanExists", "private", "(", ",", ",", ")", "{", "}", "AssertableApplicationContext", "context", "type", "String", "beanName", ";", ";", "Class", ".", "hasSingleBean", ".", "hasBean", "<", ">", "assertThat", "(", "type", ")", "assertThat", "(", "beanName", ")", "?", "(", "context", ")", "(", "context", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 59, "ast_depth": 8, "n_identifiers": 7, "vocab_size": 22, "n_whitespaces": 16, "n_words": 17, "nloc": 4, "token_counts": 38}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java#318-323", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "assertConverterBeanRegisteredWithHttpMessageConverters", "qualified_name": "test.java.org.springframework.boot.http.converter.autoconfigure.HttpMessageConvertersAutoConfigurationTests#assertConverterBeanRegisteredWithHttpMessageConverters", "start_line": 318, "end_line": 323, "signature": "assertConverterBeanRegisteredWithHttpMessageConverters(AssertableApplicationContext context,\n\t\t\tClass<? extends HttpMessageConverter<?>> type)", "original_code": "private void assertConverterBeanRegisteredWithHttpMessageConverters(AssertableApplicationContext context,\n\t\t\tClass<? extends HttpMessageConverter<?>> type) {\n\t\tHttpMessageConverter<?> converter = context.getBean(type);\n\t\tHttpMessageConverters converters = context.getBean(HttpMessageConverters.class);\n\t\tassertThat(converters.getConverters()).contains(converter);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "assertConverterBeanRegisteredWithHttpMessageConverters", "private", "(", ",", ")", "{", "}", "AssertableApplicationContext", "context", "type", ";", "HttpMessageConverters", ";", ";", "Class", "HttpMessageConverter", "converter", "=", "converters", "=", ".", "contains", "<", ">", "<", ">", "context", ".", "getBean", "context", ".", "getBean", "assertThat", "(", "converter", ")", "?", "extends", "?", "(", "type", ")", "(", ")", "(", ")", "HttpMessageConverter", "HttpMessageConverters", ".", "class", "converters", ".", "getConverters", "<", ">", "(", ")", "?"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 91, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 28, "n_whitespaces": 28, "n_words": 25, "nloc": 6, "token_counts": 59}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java#325-330", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "assertConvertersBeanRegisteredWithHttpMessageConverters", "qualified_name": "test.java.org.springframework.boot.http.converter.autoconfigure.HttpMessageConvertersAutoConfigurationTests#assertConvertersBeanRegisteredWithHttpMessageConverters", "start_line": 325, "end_line": 330, "signature": "assertConvertersBeanRegisteredWithHttpMessageConverters(AssertableApplicationContext context,\n\t\t\tList<Class<? extends HttpMessageConverter<?>>> types)", "original_code": "private void assertConvertersBeanRegisteredWithHttpMessageConverters(AssertableApplicationContext context,\n\t\t\tList<Class<? extends HttpMessageConverter<?>>> types) {\n\t\tList<? extends HttpMessageConverter<?>> converterInstances = types.stream().map(context::getBean).toList();\n\t\tHttpMessageConverters converters = context.getBean(HttpMessageConverters.class);\n\t\tassertThat(converters.getConverters()).containsSubsequence(converterInstances);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "assertConvertersBeanRegisteredWithHttpMessageConverters", "private", "(", ",", ")", "{", "}", "AssertableApplicationContext", "context", "types", ";", "HttpMessageConverters", ";", ";", "List", "List", "converterInstances", "=", "converters", "=", ".", "containsSubsequence", "<", ">", "<", ">", ".", "toList", "context", ".", "getBean", "assertThat", "(", "converterInstances", ")", "Class", "?", "extends", ".", "map", "(", ")", "(", ")", "(", ")", "<", ">", "HttpMessageConverter", "types", ".", "stream", "(", ")", "HttpMessageConverters", ".", "class", "converters", ".", "getConverters", "?", "extends", "<", ">", "(", ")", "context", "::", "getBean", "(", ")", "HttpMessageConverter", "?", "<", ">", "?"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 119, "ast_depth": 13, "n_identifiers": 12, "vocab_size": 33, "n_whitespaces": 30, "n_words": 31, "nloc": 6, "token_counts": 77}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java#335-338", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "jsonMapper", "qualified_name": "test.java.org.springframework.boot.http.converter.autoconfigure.HttpMessageConvertersAutoConfigurationTests#jsonMapper", "start_line": 335, "end_line": 338, "signature": "jsonMapper()", "original_code": "@Bean\n\t\tJsonMapper jsonMapper() {\n\t\t\treturn new JsonMapper();\n\t\t}", "doc_comment": ""}, "code_tokens": ["JsonMapper", "jsonMapper", "(", ")", "{", "}", "@", "Bean", "return", ";", "new", "JsonMapper", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 23, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 11, "n_whitespaces": 14, "n_words": 6, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java#345-348", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "jsonMapper", "qualified_name": "test.java.org.springframework.boot.http.converter.autoconfigure.HttpMessageConvertersAutoConfigurationTests#jsonMapper", "start_line": 345, "end_line": 348, "signature": "jsonMapper()", "original_code": "@Bean\n\t\tJsonMapper jsonMapper() {\n\t\t\treturn new JsonMapper();\n\t\t}", "doc_comment": ""}, "code_tokens": ["JsonMapper", "jsonMapper", "(", ")", "{", "}", "@", "Bean", "return", ";", "new", "JsonMapper", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 23, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 11, "n_whitespaces": 14, "n_words": 6, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java#350-353", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "builder", "qualified_name": "test.java.org.springframework.boot.http.converter.autoconfigure.HttpMessageConvertersAutoConfigurationTests#builder", "start_line": 350, "end_line": 353, "signature": "builder()", "original_code": "@Bean\n\t\tJsonMapper.Builder builder() {\n\t\t\treturn JsonMapper.builder();\n\t\t}", "doc_comment": ""}, "code_tokens": ["builder", "JsonMapper", ".", "Builder", "(", ")", "{", "}", "@", "Bean", "return", ";", "JsonMapper", ".", "builder", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 27, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 12, "n_whitespaces": 13, "n_words": 7, "nloc": 4, "token_counts": 17}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java#360-363", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "xmlMapper", "qualified_name": "test.java.org.springframework.boot.http.converter.autoconfigure.HttpMessageConvertersAutoConfigurationTests#xmlMapper", "start_line": 360, "end_line": 363, "signature": "xmlMapper()", "original_code": "@Bean\n\t\tXmlMapper xmlMapper() {\n\t\t\treturn new XmlMapper();\n\t\t}", "doc_comment": ""}, "code_tokens": ["XmlMapper", "xmlMapper", "(", ")", "{", "}", "@", "Bean", "return", ";", "new", "XmlMapper", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 23, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 11, "n_whitespaces": 14, "n_words": 6, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java#365-368", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "builder", "qualified_name": "test.java.org.springframework.boot.http.converter.autoconfigure.HttpMessageConvertersAutoConfigurationTests#builder", "start_line": 365, "end_line": 368, "signature": "builder()", "original_code": "@Bean\n\t\tXmlMapper.Builder builder() {\n\t\t\treturn XmlMapper.builder();\n\t\t}", "doc_comment": ""}, "code_tokens": ["builder", "XmlMapper", ".", "Builder", "(", ")", "{", "}", "@", "Bean", "return", ";", "XmlMapper", ".", "builder", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 27, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 12, "n_whitespaces": 13, "n_words": 7, "nloc": 4, "token_counts": 17}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java#375-379", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "customJacksonMessageConverter", "qualified_name": "test.java.org.springframework.boot.http.converter.autoconfigure.HttpMessageConvertersAutoConfigurationTests#customJacksonMessageConverter", "start_line": 375, "end_line": 379, "signature": "customJacksonMessageConverter(JsonMapper jsonMapperMapper)", "original_code": "@Bean\n\t\tJacksonJsonHttpMessageConverter customJacksonMessageConverter(JsonMapper jsonMapperMapper) {\n\t\t\tJacksonJsonHttpMessageConverter converter = new JacksonJsonHttpMessageConverter(jsonMapperMapper);\n\t\t\treturn converter;\n\t\t}", "doc_comment": ""}, "code_tokens": ["JacksonJsonHttpMessageConverter", "customJacksonMessageConverter", "(", ")", "{", "}", "@", "Bean", "JsonMapper", "jsonMapperMapper", "JacksonJsonHttpMessageConverter", ";", "return", "converter", ";", "converter", "=", "new", "JacksonJsonHttpMessageConverter", "(", "jsonMapperMapper", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 34, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 15, "n_whitespaces": 22, "n_words": 12, "nloc": 5, "token_counts": 22}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java#386-391", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "customGsonMessageConverter", "qualified_name": "test.java.org.springframework.boot.http.converter.autoconfigure.HttpMessageConvertersAutoConfigurationTests#customGsonMessageConverter", "start_line": 386, "end_line": 391, "signature": "customGsonMessageConverter(Gson gson)", "original_code": "@Bean\n\t\tGsonHttpMessageConverter customGsonMessageConverter(Gson gson) {\n\t\t\tGsonHttpMessageConverter converter = new GsonHttpMessageConverter();\n\t\t\tconverter.setGson(gson);\n\t\t\treturn converter;\n\t\t}", "doc_comment": ""}, "code_tokens": ["GsonHttpMessageConverter", "customGsonMessageConverter", "(", ")", "{", "}", "@", "Bean", "Gson", "gson", "GsonHttpMessageConverter", ";", ";", "return", "converter", ";", "converter", "=", "converter", ".", "setGson", "new", "GsonHttpMessageConverter", "(", "gson", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 43, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 17, "n_whitespaces": 26, "n_words": 14, "nloc": 6, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java#398-403", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "customJsonbMessageConverter", "qualified_name": "test.java.org.springframework.boot.http.converter.autoconfigure.HttpMessageConvertersAutoConfigurationTests#customJsonbMessageConverter", "start_line": 398, "end_line": 403, "signature": "customJsonbMessageConverter(Jsonb jsonb)", "original_code": "@Bean\n\t\tJsonbHttpMessageConverter customJsonbMessageConverter(Jsonb jsonb) {\n\t\t\tJsonbHttpMessageConverter converter = new JsonbHttpMessageConverter();\n\t\t\tconverter.setJsonb(jsonb);\n\t\t\treturn converter;\n\t\t}", "doc_comment": ""}, "code_tokens": ["JsonbHttpMessageConverter", "customJsonbMessageConverter", "(", ")", "{", "}", "@", "Bean", "Jsonb", "jsonb", "JsonbHttpMessageConverter", ";", ";", "return", "converter", ";", "converter", "=", "converter", ".", "setJsonb", "new", "JsonbHttpMessageConverter", "(", "jsonb", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 43, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 17, "n_whitespaces": 26, "n_words": 14, "nloc": 6, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java#410-413", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "customKotlinSerializationJsonHttpMessageConverter", "qualified_name": "test.java.org.springframework.boot.http.converter.autoconfigure.HttpMessageConvertersAutoConfigurationTests#customKotlinSerializationJsonHttpMessageConverter", "start_line": 410, "end_line": 413, "signature": "customKotlinSerializationJsonHttpMessageConverter(Json json)", "original_code": "@Bean\n\t\tKotlinSerializationJsonHttpMessageConverter customKotlinSerializationJsonHttpMessageConverter(Json json) {\n\t\t\treturn new KotlinSerializationJsonHttpMessageConverter(json);\n\t\t}", "doc_comment": ""}, "code_tokens": ["KotlinSerializationJsonHttpMessageConverter", "customKotlinSerializationJsonHttpMessageConverter", "(", ")", "{", "}", "@", "Bean", "Json", "json", "return", ";", "new", "KotlinSerializationJsonHttpMessageConverter", "(", "json", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 27, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 13, "n_whitespaces": 15, "n_words": 9, "nloc": 4, "token_counts": 17}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java#420-423", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "customStringMessageConverter", "qualified_name": "test.java.org.springframework.boot.http.converter.autoconfigure.HttpMessageConvertersAutoConfigurationTests#customStringMessageConverter", "start_line": 420, "end_line": 423, "signature": "customStringMessageConverter()", "original_code": "@Bean\n\t\tStringHttpMessageConverter customStringMessageConverter() {\n\t\t\treturn new StringHttpMessageConverter();\n\t\t}", "doc_comment": ""}, "code_tokens": ["StringHttpMessageConverter", "customStringMessageConverter", "(", ")", "{", "}", "@", "Bean", "return", ";", "new", "StringHttpMessageConverter", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 23, "ast_depth": 7, "n_identifiers": 2, "vocab_size": 11, "n_whitespaces": 14, "n_words": 6, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@2cf854c:module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java#430-433", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "2cf854c5b6acca6ef0ca26bb896113c57d71701d", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-converter/src/test/java/org/springframework/boot/http/converter/autoconfigure/HttpMessageConvertersAutoConfigurationTests.java", "language": "Java"}, "method": {"name": "typeConstrainedConverter", "qualified_name": "test.java.org.springframework.boot.http.converter.autoconfigure.HttpMessageConvertersAutoConfigurationTests#typeConstrainedConverter", "start_line": 430, "end_line": 433, "signature": "typeConstrainedConverter()", "original_code": "@Bean\n\t\tTypeConstrainedJacksonJsonHttpMessageConverter typeConstrainedConverter() {\n\t\t\treturn new TypeConstrainedJacksonJsonHttpMessageConverter(RepresentationModel.class);\n\t\t}", "doc_comment": ""}, "code_tokens": ["TypeConstrainedJacksonJsonHttpMessageConverter", "typeConstrainedConverter", "(", ")", "{", "}", "@", "Bean", "return", ";", "new", "TypeConstrainedJacksonJsonHttpMessageConverter", "(", ")", "RepresentationModel", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 27, "ast_depth": 8, "n_identifiers": 2, "vocab_size": 14, "n_whitespaces": 14, "n_words": 8, "nloc": 4, "token_counts": 17}}
{"dataset_split": "train", "id": "spring-boot@255ea92:module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/JettyClientHttpRequestFactoryBuilder.java#59-62", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "255ea92a574236205766ec267efe84bb2b1dcd7a", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/JettyClientHttpRequestFactoryBuilder.java", "language": "Java"}, "method": {"name": "withCustomizer", "qualified_name": "org.springframework.boot.http.client.JettyClientHttpRequestFactoryBuilder#withCustomizer", "start_line": 59, "end_line": 62, "signature": "withCustomizer(Consumer<JettyClientHttpRequestFactory> customizer)", "original_code": "@Override\n\tpublic JettyClientHttpRequestFactoryBuilder withCustomizer(Consumer<JettyClientHttpRequestFactory> customizer) {\n\t\treturn new JettyClientHttpRequestFactoryBuilder(mergedCustomizers(customizer), this.httpClientBuilder);\n\t}", "doc_comment": ""}, "code_tokens": ["JettyClientHttpRequestFactoryBuilder", "withCustomizer", "public", "(", ")", "{", "}", "@", "Override", "customizer", "return", ";", "Consumer", "new", "JettyClientHttpRequestFactoryBuilder", "<", "JettyClientHttpRequestFactory", ">", "(", ",", ")", "mergedCustomizers", "this", ".", "httpClientBuilder", "(", "customizer", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 43, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 22, "n_whitespaces": 14, "n_words": 14, "nloc": 4, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@255ea92:module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/JettyClientHttpRequestFactoryBuilder.java#64-68", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "255ea92a574236205766ec267efe84bb2b1dcd7a", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/JettyClientHttpRequestFactoryBuilder.java", "language": "Java"}, "method": {"name": "withCustomizers", "qualified_name": "org.springframework.boot.http.client.JettyClientHttpRequestFactoryBuilder#withCustomizers", "start_line": 64, "end_line": 68, "signature": "withCustomizers(\n\t\t\tCollection<Consumer<JettyClientHttpRequestFactory>> customizers)", "original_code": "@Override\n\tpublic JettyClientHttpRequestFactoryBuilder withCustomizers(\n\t\t\tCollection<Consumer<JettyClientHttpRequestFactory>> customizers) {\n\t\treturn new JettyClientHttpRequestFactoryBuilder(mergedCustomizers(customizers), this.httpClientBuilder);\n\t}", "doc_comment": ""}, "code_tokens": ["JettyClientHttpRequestFactoryBuilder", "withCustomizers", "public", "(", ")", "{", "}", "@", "Override", "customizers", "return", ";", "Collection", "new", "JettyClientHttpRequestFactoryBuilder", "<", ">", "(", ",", ")", "Consumer", "mergedCustomizers", "this", ".", "httpClientBuilder", "<", "JettyClientHttpRequestFactory", ">", "(", "customizers", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 48, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 23, "n_whitespaces": 18, "n_words": 15, "nloc": 5, "token_counts": 31}}
{"dataset_split": "train", "id": "spring-boot@255ea92:module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/JettyClientHttpRequestFactoryBuilder.java#76-80", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "255ea92a574236205766ec267efe84bb2b1dcd7a", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/JettyClientHttpRequestFactoryBuilder.java", "language": "Java"}, "method": {"name": "withHttpClientCustomizer", "qualified_name": "org.springframework.boot.http.client.JettyClientHttpRequestFactoryBuilder#withHttpClientCustomizer", "start_line": 76, "end_line": 80, "signature": "withHttpClientCustomizer(Consumer<HttpClient> httpClientCustomizer)", "original_code": "public JettyClientHttpRequestFactoryBuilder withHttpClientCustomizer(Consumer<HttpClient> httpClientCustomizer) {\n\t\tAssert.notNull(httpClientCustomizer, \"'httpClientCustomizer' must not be null\");\n\t\treturn new JettyClientHttpRequestFactoryBuilder(getCustomizers(),\n\t\t\t\tthis.httpClientBuilder.withCustomizer(httpClientCustomizer));\n\t}", "doc_comment": "/**\n\t * Return a new {@link JettyClientHttpRequestFactoryBuilder} that applies additional\n\t * customization to the underlying {@link HttpClient}.\n\t * @param httpClientCustomizer the customizer to apply\n\t * @return a new {@link JettyClientHttpRequestFactoryBuilder} instance\n\t */"}, "code_tokens": ["JettyClientHttpRequestFactoryBuilder", "withHttpClientCustomizer", "public", "(", ")", "{", "}", "httpClientCustomizer", ";", "return", ";", "Consumer", "Assert", ".", "notNull", "new", "JettyClientHttpRequestFactoryBuilder", "<", "HttpClient", ">", "(", "httpClientCustomizer", ",", ")", "(", ",", ")", "\"", "'httpClientCustomizer' must not be null", "\"", "getCustomizers", ".", "withCustomizer", "(", ")", "this", ".", "httpClientBuilder", "(", "httpClientCustomizer", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 61, "ast_depth": 9, "n_identifiers": 7, "vocab_size": 25, "n_whitespaces": 24, "n_words": 22, "nloc": 5, "token_counts": 41}}
{"dataset_split": "train", "id": "spring-boot@255ea92:module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/JettyClientHttpRequestFactoryBuilder.java#89-94", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "255ea92a574236205766ec267efe84bb2b1dcd7a", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/JettyClientHttpRequestFactoryBuilder.java", "language": "Java"}, "method": {"name": "withHttpClientTransportFactory", "qualified_name": "org.springframework.boot.http.client.JettyClientHttpRequestFactoryBuilder#withHttpClientTransportFactory", "start_line": 89, "end_line": 94, "signature": "withHttpClientTransportFactory(\n\t\t\tFunction<ClientConnector, HttpClientTransport> httpClientTransportFactory)", "original_code": "public JettyClientHttpRequestFactoryBuilder withHttpClientTransportFactory(\n\t\t\tFunction<ClientConnector, HttpClientTransport> httpClientTransportFactory) {\n\t\tAssert.notNull(httpClientTransportFactory, \"'httpClientTransportFactory' must not be null\");\n\t\treturn new JettyClientHttpRequestFactoryBuilder(getCustomizers(),\n\t\t\t\tthis.httpClientBuilder.withHttpClientTransportFactory(httpClientTransportFactory));\n\t}", "doc_comment": "/**\n\t * Return a new {@link JettyClientHttpRequestFactoryBuilder} that uses the given\n\t * factory to create the {@link HttpClientTransport}.\n\t * @param httpClientTransportFactory the {@link HttpClientTransport} factory to use\n\t * @return a new {@link JettyClientHttpRequestFactoryBuilder} instance\n\t * @since 4.0.0\n\t */"}, "code_tokens": ["JettyClientHttpRequestFactoryBuilder", "withHttpClientTransportFactory", "public", "(", ")", "{", "}", "httpClientTransportFactory", ";", "return", ";", "Function", "Assert", ".", "notNull", "new", "JettyClientHttpRequestFactoryBuilder", "<", "ClientConnector", ",", "HttpClientTransport", ">", "(", "httpClientTransportFactory", ",", ")", "(", ",", ")", "\"", "'httpClientTransportFactory' must not be null", "\"", "getCustomizers", ".", "withHttpClientTransportFactory", "(", ")", "this", ".", "httpClientBuilder", "(", "httpClientTransportFactory", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 63, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 25, "n_whitespaces": 29, "n_words": 23, "nloc": 6, "token_counts": 43}}
{"dataset_split": "train", "id": "spring-boot@255ea92:module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/JettyClientHttpRequestFactoryBuilder.java#102-107", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "255ea92a574236205766ec267efe84bb2b1dcd7a", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/JettyClientHttpRequestFactoryBuilder.java", "language": "Java"}, "method": {"name": "withHttpClientTransportCustomizer", "qualified_name": "org.springframework.boot.http.client.JettyClientHttpRequestFactoryBuilder#withHttpClientTransportCustomizer", "start_line": 102, "end_line": 107, "signature": "withHttpClientTransportCustomizer(\n\t\t\tConsumer<HttpClientTransport> httpClientTransportCustomizer)", "original_code": "public JettyClientHttpRequestFactoryBuilder withHttpClientTransportCustomizer(\n\t\t\tConsumer<HttpClientTransport> httpClientTransportCustomizer) {\n\t\tAssert.notNull(httpClientTransportCustomizer, \"'httpClientTransportCustomizer' must not be null\");\n\t\treturn new JettyClientHttpRequestFactoryBuilder(getCustomizers(),\n\t\t\t\tthis.httpClientBuilder.withHttpClientTransportCustomizer(httpClientTransportCustomizer));\n\t}", "doc_comment": "/**\n\t * Return a new {@link JettyClientHttpRequestFactoryBuilder} that applies additional\n\t * customization to the underlying {@link HttpClientTransport}.\n\t * @param httpClientTransportCustomizer the customizer to apply\n\t * @return a new {@link JettyClientHttpRequestFactoryBuilder} instance\n\t */"}, "code_tokens": ["JettyClientHttpRequestFactoryBuilder", "withHttpClientTransportCustomizer", "public", "(", ")", "{", "}", "httpClientTransportCustomizer", ";", "return", ";", "Consumer", "Assert", ".", "notNull", "new", "JettyClientHttpRequestFactoryBuilder", "<", "HttpClientTransport", ">", "(", "httpClientTransportCustomizer", ",", ")", "(", ",", ")", "\"", "'httpClientTransportCustomizer' must not be null", "\"", "getCustomizers", ".", "withHttpClientTransportCustomizer", "(", ")", "this", ".", "httpClientBuilder", "(", "httpClientTransportCustomizer", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 61, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 24, "n_whitespaces": 28, "n_words": 22, "nloc": 6, "token_counts": 41}}
{"dataset_split": "train", "id": "spring-boot@255ea92:module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/JettyClientHttpRequestFactoryBuilder.java#115-120", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "255ea92a574236205766ec267efe84bb2b1dcd7a", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/JettyClientHttpRequestFactoryBuilder.java", "language": "Java"}, "method": {"name": "withClientConnectorCustomizerCustomizer", "qualified_name": "org.springframework.boot.http.client.JettyClientHttpRequestFactoryBuilder#withClientConnectorCustomizerCustomizer", "start_line": 115, "end_line": 120, "signature": "withClientConnectorCustomizerCustomizer(\n\t\t\tConsumer<ClientConnector> clientConnectorCustomizerCustomizer)", "original_code": "public JettyClientHttpRequestFactoryBuilder withClientConnectorCustomizerCustomizer(\n\t\t\tConsumer<ClientConnector> clientConnectorCustomizerCustomizer) {\n\t\tAssert.notNull(clientConnectorCustomizerCustomizer, \"'clientConnectorCustomizerCustomizer' must not be null\");\n\t\treturn new JettyClientHttpRequestFactoryBuilder(getCustomizers(),\n\t\t\t\tthis.httpClientBuilder.withClientConnectorCustomizerCustomizer(clientConnectorCustomizerCustomizer));\n\t}", "doc_comment": "/**\n\t * Return a new {@link JettyClientHttpRequestFactoryBuilder} that applies additional\n\t * customization to the underlying {@link ClientConnector}.\n\t * @param clientConnectorCustomizerCustomizer the customizer to apply\n\t * @return a new {@link JettyClientHttpRequestFactoryBuilder} instance\n\t */"}, "code_tokens": ["JettyClientHttpRequestFactoryBuilder", "withClientConnectorCustomizerCustomizer", "public", "(", ")", "{", "}", "clientConnectorCustomizerCustomizer", ";", "return", ";", "Consumer", "Assert", ".", "notNull", "new", "JettyClientHttpRequestFactoryBuilder", "<", "ClientConnector", ">", "(", "clientConnectorCustomizerCustomizer", ",", ")", "(", ",", ")", "\"", "'clientConnectorCustomizerCustomizer' must not be null", "\"", "getCustomizers", ".", "withClientConnectorCustomizerCustomizer", "(", ")", "this", ".", "httpClientBuilder", "(", "clientConnectorCustomizerCustomizer", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 61, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 24, "n_whitespaces": 28, "n_words": 22, "nloc": 6, "token_counts": 41}}
{"dataset_split": "train", "id": "spring-boot@255ea92:module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/JettyClientHttpRequestFactoryBuilder.java#129-131", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "255ea92a574236205766ec267efe84bb2b1dcd7a", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/JettyClientHttpRequestFactoryBuilder.java", "language": "Java"}, "method": {"name": "with", "qualified_name": "org.springframework.boot.http.client.JettyClientHttpRequestFactoryBuilder#with", "start_line": 129, "end_line": 131, "signature": "with(UnaryOperator<JettyClientHttpRequestFactoryBuilder> customizer)", "original_code": "public JettyClientHttpRequestFactoryBuilder with(UnaryOperator<JettyClientHttpRequestFactoryBuilder> customizer) {\n\t\treturn customizer.apply(this);\n\t}", "doc_comment": "/**\n\t * Return a new {@link JettyClientHttpRequestFactoryBuilder} that applies the given\n\t * customizer. This can be useful for applying pre-packaged customizations.\n\t * @param customizer the customizer to apply\n\t * @return a new {@link JettyClientHttpRequestFactoryBuilder}\n\t * @since 4.0.0\n\t */"}, "code_tokens": ["JettyClientHttpRequestFactoryBuilder", "with", "public", "(", ")", "{", "}", "customizer", "return", ";", "UnaryOperator", "customizer", ".", "apply", "<", "JettyClientHttpRequestFactoryBuilder", ">", "(", "this", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 31, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 16, "n_whitespaces": 10, "n_words": 10, "nloc": 3, "token_counts": 20}}
{"dataset_split": "train", "id": "spring-boot@255ea92:module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/JettyClientHttpRequestFactoryBuilder.java#133-141", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "255ea92a574236205766ec267efe84bb2b1dcd7a", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/JettyClientHttpRequestFactoryBuilder.java", "language": "Java"}, "method": {"name": "createClientHttpRequestFactory", "qualified_name": "org.springframework.boot.http.client.JettyClientHttpRequestFactoryBuilder#createClientHttpRequestFactory", "start_line": 133, "end_line": 141, "signature": "createClientHttpRequestFactory(ClientHttpRequestFactorySettings settings)", "original_code": "@Override\n\tprotected JettyClientHttpRequestFactory createClientHttpRequestFactory(ClientHttpRequestFactorySettings settings) {\n\t\tHttpClient httpClient = this.httpClientBuilder.build(asHttpClientSettings(settings.withTimeouts(null, null)));\n\t\tJettyClientHttpRequestFactory requestFactory = new JettyClientHttpRequestFactory(httpClient);\n\t\tPropertyMapper map = PropertyMapper.get();\n\t\tmap.from(settings::connectTimeout).asInt(Duration::toMillis).to(requestFactory::setConnectTimeout);\n\t\tmap.from(settings::readTimeout).asInt(Duration::toMillis).to(requestFactory::setReadTimeout);\n\t\treturn requestFactory;\n\t}", "doc_comment": ""}, "code_tokens": ["JettyClientHttpRequestFactory", "createClientHttpRequestFactory", "protected", "(", ")", "{", "}", "@", "Override", "ClientHttpRequestFactorySettings", "settings", "HttpClient", ";", "JettyClientHttpRequestFactory", ";", "PropertyMapper", ";", ";", ";", "return", "requestFactory", ";", "httpClient", "=", "requestFactory", "=", "map", "=", ".", "to", ".", "to", ".", "build", "new", "JettyClientHttpRequestFactory", "PropertyMapper", ".", "get", ".", "asInt", "(", ")", ".", "asInt", "(", ")", "this", ".", "httpClientBuilder", "(", ")", "(", "httpClient", ")", "(", ")", "map", ".", "from", "(", ")", "requestFactory", "::", "setConnectTimeout", "map", ".", "from", "(", ")", "requestFactory", "::", "setReadTimeout", "asHttpClientSettings", "(", ")", "Duration", "::", "toMillis", "(", ")", "Duration", "::", "toMillis", "(", ")", "settings", "::", "connectTimeout", "settings", "::", "readTimeout", "settings", ".", "withTimeouts", "(", "null", ",", "null", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 145, "ast_depth": 12, "n_identifiers": 21, "vocab_size": 39, "n_whitespaces": 38, "n_words": 47, "nloc": 9, "token_counts": 100}}
{"dataset_split": "train", "id": "spring-boot@255ea92:module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/JettyClientHttpRequestFactoryBuilder.java#147-149", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "255ea92a574236205766ec267efe84bb2b1dcd7a", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/JettyClientHttpRequestFactoryBuilder.java", "language": "Java"}, "method": {"name": "present", "qualified_name": "org.springframework.boot.http.client.JettyClientHttpRequestFactoryBuilder#present", "start_line": 147, "end_line": 149, "signature": "present(@Nullable ClassLoader classLoader)", "original_code": "static boolean present(@Nullable ClassLoader classLoader) {\n\t\t\treturn ClassUtils.isPresent(HTTP_CLIENT, classLoader);\n\t\t}", "doc_comment": ""}, "code_tokens": ["boolean", "present", "static", "(", ")", "{", "}", "ClassLoader", "classLoader", "return", ";", "ClassUtils", ".", "isPresent", "@", "Nullable", "(", "HTTP_CLIENT", ",", "classLoader", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 32, "ast_depth": 7, "n_identifiers": 6, "vocab_size": 18, "n_whitespaces": 14, "n_words": 11, "nloc": 3, "token_counts": 21}}
{"dataset_split": "train", "id": "spring-boot@255ea92:module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/JettyHttpClientBuilder.java#72-75", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "255ea92a574236205766ec267efe84bb2b1dcd7a", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/JettyHttpClientBuilder.java", "language": "Java"}, "method": {"name": "createHttpClientTransport", "qualified_name": "org.springframework.boot.http.client.JettyHttpClientBuilder#createHttpClientTransport", "start_line": 72, "end_line": 75, "signature": "createHttpClientTransport(ClientConnector connector)", "original_code": "private static HttpClientTransport createHttpClientTransport(ClientConnector connector) {\n\t\treturn (connector.getSslContextFactory() != null) ? new HttpClientTransportDynamic(connector)\n\t\t\t\t: new HttpClientTransportOverHTTP(connector);\n\t}", "doc_comment": ""}, "code_tokens": ["HttpClientTransport", "createHttpClientTransport", "private", "static", "(", ")", "{", "}", "ClientConnector", "connector", "return", ";", "?", ":", "(", ")", "new", "HttpClientTransportDynamic", "new", "HttpClientTransportOverHTTP", "!=", "null", "(", "connector", ")", "(", "connector", ")", "connector", ".", "getSslContextFactory", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 49, "ast_depth": 10, "n_identifiers": 3, "vocab_size": 21, "n_whitespaces": 23, "n_words": 16, "nloc": 4, "token_counts": 33}}
{"dataset_split": "train", "id": "spring-boot@255ea92:module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/JettyHttpClientBuilder.java#83-87", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "255ea92a574236205766ec267efe84bb2b1dcd7a", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/JettyHttpClientBuilder.java", "language": "Java"}, "method": {"name": "withCustomizer", "qualified_name": "org.springframework.boot.http.client.JettyHttpClientBuilder#withCustomizer", "start_line": 83, "end_line": 87, "signature": "withCustomizer(Consumer<HttpClient> customizer)", "original_code": "public JettyHttpClientBuilder withCustomizer(Consumer<HttpClient> customizer) {\n\t\tAssert.notNull(customizer, \"'customizer' must not be null\");\n\t\treturn new JettyHttpClientBuilder(this.customizer.andThen(customizer), this.httpClientTransportFactory,\n\t\t\t\tthis.httpClientTransportCustomizer, this.clientConnectorCustomizerCustomizer);\n\t}", "doc_comment": "/**\n\t * Return a new {@link JettyClientHttpRequestFactoryBuilder} that applies additional\n\t * customization to the underlying {@link HttpClient}.\n\t * @param customizer the customizer to apply\n\t * @return a new {@link JettyClientHttpRequestFactoryBuilder} instance\n\t */"}, "code_tokens": ["JettyHttpClientBuilder", "withCustomizer", "public", "(", ")", "{", "}", "customizer", ";", "return", ";", "Consumer", "Assert", ".", "notNull", "new", "JettyHttpClientBuilder", "<", "HttpClient", ">", "(", "customizer", ",", ")", "(", ",", ",", ",", ")", "\"", "'customizer' must not be null", "\"", ".", "andThen", "this", ".", "httpClientTransportFactory", "this", ".", "httpClientTransportCustomizer", "this", ".", "clientConnectorCustomizerCustomizer", "this", ".", "customizer", "(", "customizer", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 70, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 26, "n_whitespaces": 26, "n_words": 27, "nloc": 5, "token_counts": 49}}
{"dataset_split": "train", "id": "spring-boot@255ea92:module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/JettyHttpClientBuilder.java#96-101", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "255ea92a574236205766ec267efe84bb2b1dcd7a", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/JettyHttpClientBuilder.java", "language": "Java"}, "method": {"name": "withHttpClientTransportFactory", "qualified_name": "org.springframework.boot.http.client.JettyHttpClientBuilder#withHttpClientTransportFactory", "start_line": 96, "end_line": 101, "signature": "withHttpClientTransportFactory(\n\t\t\tFunction<ClientConnector, HttpClientTransport> httpClientTransportFactory)", "original_code": "public JettyHttpClientBuilder withHttpClientTransportFactory(\n\t\t\tFunction<ClientConnector, HttpClientTransport> httpClientTransportFactory) {\n\t\tAssert.notNull(httpClientTransportFactory, \"'httpClientTransportFactory' must not be null\");\n\t\treturn new JettyHttpClientBuilder(this.customizer, httpClientTransportFactory,\n\t\t\t\tthis.httpClientTransportCustomizer, this.clientConnectorCustomizerCustomizer);\n\t}", "doc_comment": "/**\n\t * Return a new {@link JettyClientHttpRequestFactoryBuilder} that uses the given\n\t * factory to create the {@link HttpClientTransport}.\n\t * @param httpClientTransportFactory the {@link HttpClientTransport} factory to use\n\t * @return a new {@link JettyClientHttpRequestFactoryBuilder} instance\n\t * @since 4.0.0\n\t */"}, "code_tokens": ["JettyHttpClientBuilder", "withHttpClientTransportFactory", "public", "(", ")", "{", "}", "httpClientTransportFactory", ";", "return", ";", "Function", "Assert", ".", "notNull", "new", "JettyHttpClientBuilder", "<", "ClientConnector", ",", "HttpClientTransport", ">", "(", "httpClientTransportFactory", ",", ")", "(", ",", "httpClientTransportFactory", ",", ",", ")", "\"", "'httpClientTransportFactory' must not be null", "\"", "this", ".", "customizer", "this", ".", "httpClientTransportCustomizer", "this", ".", "clientConnectorCustomizerCustomizer"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 62, "ast_depth": 8, "n_identifiers": 7, "vocab_size": 26, "n_whitespaces": 31, "n_words": 25, "nloc": 6, "token_counts": 44}}
{"dataset_split": "train", "id": "spring-boot@255ea92:module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/JettyHttpClientBuilder.java#109-115", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "255ea92a574236205766ec267efe84bb2b1dcd7a", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/JettyHttpClientBuilder.java", "language": "Java"}, "method": {"name": "withHttpClientTransportCustomizer", "qualified_name": "org.springframework.boot.http.client.JettyHttpClientBuilder#withHttpClientTransportCustomizer", "start_line": 109, "end_line": 115, "signature": "withHttpClientTransportCustomizer(\n\t\t\tConsumer<HttpClientTransport> httpClientTransportCustomizer)", "original_code": "public JettyHttpClientBuilder withHttpClientTransportCustomizer(\n\t\t\tConsumer<HttpClientTransport> httpClientTransportCustomizer) {\n\t\tAssert.notNull(httpClientTransportCustomizer, \"'httpClientTransportCustomizer' must not be null\");\n\t\treturn new JettyHttpClientBuilder(this.customizer, this.httpClientTransportFactory,\n\t\t\t\tthis.httpClientTransportCustomizer.andThen(httpClientTransportCustomizer),\n\t\t\t\tthis.clientConnectorCustomizerCustomizer);\n\t}", "doc_comment": "/**\n\t * Return a new {@link JettyClientHttpRequestFactoryBuilder} that applies additional\n\t * customization to the underlying {@link HttpClientTransport}.\n\t * @param httpClientTransportCustomizer the customizer to apply\n\t * @return a new {@link JettyClientHttpRequestFactoryBuilder} instance\n\t */"}, "code_tokens": ["JettyHttpClientBuilder", "withHttpClientTransportCustomizer", "public", "(", ")", "{", "}", "httpClientTransportCustomizer", ";", "return", ";", "Consumer", "Assert", ".", "notNull", "new", "JettyHttpClientBuilder", "<", "HttpClientTransport", ">", "(", "httpClientTransportCustomizer", ",", ")", "(", ",", ",", ",", ")", "\"", "'httpClientTransportCustomizer' must not be null", "\"", "this", ".", "customizer", "this", ".", "httpClientTransportFactory", ".", "andThen", "this", ".", "clientConnectorCustomizerCustomizer", "this", ".", "httpClientTransportCustomizer", "(", "httpClientTransportCustomizer", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 70, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 26, "n_whitespaces": 34, "n_words": 27, "nloc": 7, "token_counts": 49}}
{"dataset_split": "train", "id": "spring-boot@255ea92:module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/JettyHttpClientBuilder.java#123-129", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "255ea92a574236205766ec267efe84bb2b1dcd7a", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/JettyHttpClientBuilder.java", "language": "Java"}, "method": {"name": "withClientConnectorCustomizerCustomizer", "qualified_name": "org.springframework.boot.http.client.JettyHttpClientBuilder#withClientConnectorCustomizerCustomizer", "start_line": 123, "end_line": 129, "signature": "withClientConnectorCustomizerCustomizer(\n\t\t\tConsumer<ClientConnector> clientConnectorCustomizerCustomizer)", "original_code": "public JettyHttpClientBuilder withClientConnectorCustomizerCustomizer(\n\t\t\tConsumer<ClientConnector> clientConnectorCustomizerCustomizer) {\n\t\tAssert.notNull(clientConnectorCustomizerCustomizer, \"'clientConnectorCustomizerCustomizer' must not be null\");\n\t\treturn new JettyHttpClientBuilder(this.customizer, this.httpClientTransportFactory,\n\t\t\t\tthis.httpClientTransportCustomizer,\n\t\t\t\tthis.clientConnectorCustomizerCustomizer.andThen(clientConnectorCustomizerCustomizer));\n\t}", "doc_comment": "/**\n\t * Return a new {@link JettyClientHttpRequestFactoryBuilder} that applies additional\n\t * customization to the underlying {@link ClientConnector}.\n\t * @param clientConnectorCustomizerCustomizer the customizer to apply\n\t * @return a new {@link JettyClientHttpRequestFactoryBuilder} instance\n\t */"}, "code_tokens": ["JettyHttpClientBuilder", "withClientConnectorCustomizerCustomizer", "public", "(", ")", "{", "}", "clientConnectorCustomizerCustomizer", ";", "return", ";", "Consumer", "Assert", ".", "notNull", "new", "JettyHttpClientBuilder", "<", "ClientConnector", ">", "(", "clientConnectorCustomizerCustomizer", ",", ")", "(", ",", ",", ",", ")", "\"", "'clientConnectorCustomizerCustomizer' must not be null", "\"", "this", ".", "customizer", "this", ".", "httpClientTransportFactory", "this", ".", "httpClientTransportCustomizer", ".", "andThen", "this", ".", "clientConnectorCustomizerCustomizer", "(", "clientConnectorCustomizerCustomizer", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 70, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 26, "n_whitespaces": 34, "n_words": 27, "nloc": 7, "token_counts": 49}}
{"dataset_split": "train", "id": "spring-boot@255ea92:module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/JettyHttpClientBuilder.java#136-146", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "255ea92a574236205766ec267efe84bb2b1dcd7a", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/JettyHttpClientBuilder.java", "language": "Java"}, "method": {"name": "build", "qualified_name": "org.springframework.boot.http.client.JettyHttpClientBuilder#build", "start_line": 136, "end_line": 146, "signature": "build(@Nullable HttpClientSettings settings)", "original_code": "public HttpClient build(@Nullable HttpClientSettings settings) {\n\t\tsettings = (settings != null) ? settings : HttpClientSettings.DEFAULTS;\n\t\tHttpClientTransport transport = createTransport(settings);\n\t\tthis.httpClientTransportCustomizer.accept(transport);\n\t\tHttpClient httpClient = createHttpClient(settings.readTimeout(), transport);\n\t\tPropertyMapper map = PropertyMapper.get();\n\t\tmap.from(settings::connectTimeout).as(Duration::toMillis).to(httpClient::setConnectTimeout);\n\t\tmap.from(settings::redirects).as(this::followRedirects).to(httpClient::setFollowRedirects);\n\t\tthis.customizer.accept(httpClient);\n\t\treturn httpClient;\n\t}", "doc_comment": "/**\n\t * Build a new {@link HttpClient} instance with the given settings applied.\n\t * @param settings the settings to apply\n\t * @return a new {@link HttpClient} instance\n\t */"}, "code_tokens": ["HttpClient", "build", "public", "(", ")", "{", "}", "HttpClientSettings", "settings", ";", "HttpClientTransport", ";", ";", "HttpClient", ";", "PropertyMapper", ";", ";", ";", ";", "return", "httpClient", ";", "settings", "=", "transport", "=", ".", "accept", "httpClient", "=", "map", "=", ".", "to", ".", "to", ".", "accept", "@", "Nullable", "?", "settings", ":", "createTransport", "this", ".", "httpClientTransportCustomizer", "(", "transport", ")", "createHttpClient", "PropertyMapper", ".", "get", ".", "as", "(", ")", ".", "as", "(", ")", "this", ".", "customizer", "(", "httpClient", ")", "(", ")", "HttpClientSettings", ".", "DEFAULTS", "(", "settings", ")", "(", ",", "transport", ")", "(", ")", "map", ".", "from", "(", ")", "httpClient", "::", "setConnectTimeout", "map", ".", "from", "(", ")", "httpClient", "::", "setFollowRedirects", "settings", "!=", "null", "settings", ".", "readTimeout", "(", ")", "Duration", "::", "toMillis", "(", ")", "this", "::", "followRedirects", "(", ")", "settings", "::", "connectTimeout", "settings", "::", "redirects"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 180, "ast_depth": 10, "n_identifiers": 26, "vocab_size": 45, "n_whitespaces": 53, "n_words": 56, "nloc": 11, "token_counts": 123}}
{"dataset_split": "train", "id": "spring-boot@255ea92:module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/JettyHttpClientBuilder.java#148-151", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "255ea92a574236205766ec267efe84bb2b1dcd7a", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/JettyHttpClientBuilder.java", "language": "Java"}, "method": {"name": "createHttpClient", "qualified_name": "org.springframework.boot.http.client.JettyHttpClientBuilder#createHttpClient", "start_line": 148, "end_line": 151, "signature": "createHttpClient(@Nullable Duration readTimeout, HttpClientTransport transport)", "original_code": "private HttpClient createHttpClient(@Nullable Duration readTimeout, HttpClientTransport transport) {\n\t\treturn (readTimeout != null) ? new HttpClientWithReadTimeout(transport, readTimeout)\n\t\t\t\t: new HttpClient(transport);\n\t}", "doc_comment": ""}, "code_tokens": ["HttpClient", "createHttpClient", "private", "(", ",", ")", "{", "}", "Duration", "readTimeout", "HttpClientTransport", "transport", "return", ";", "?", ":", "@", "Nullable", "(", ")", "new", "HttpClientWithReadTimeout", "new", "HttpClient", "readTimeout", "!=", "null", "(", "transport", ",", "readTimeout", ")", "(", "transport", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 52, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 22, "n_whitespaces": 26, "n_words": 18, "nloc": 4, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@255ea92:module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/JettyHttpClientBuilder.java#153-158", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "255ea92a574236205766ec267efe84bb2b1dcd7a", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/JettyHttpClientBuilder.java", "language": "Java"}, "method": {"name": "createTransport", "qualified_name": "org.springframework.boot.http.client.JettyHttpClientBuilder#createTransport", "start_line": 153, "end_line": 158, "signature": "createTransport(HttpClientSettings settings)", "original_code": "private HttpClientTransport createTransport(HttpClientSettings settings) {\n\t\tClientConnector connector = createClientConnector(settings.sslBundle());\n\t\tHttpClientTransport clientTransport = this.httpClientTransportFactory.apply(connector);\n\t\tAssert.state(clientTransport != null, \"'httpClientTransportFactory' did not return a client transport\");\n\t\treturn clientTransport;\n\t}", "doc_comment": ""}, "code_tokens": ["HttpClientTransport", "createTransport", "private", "(", ")", "{", "}", "HttpClientSettings", "settings", "ClientConnector", ";", "HttpClientTransport", ";", ";", "return", "clientTransport", ";", "connector", "=", "clientTransport", "=", "Assert", ".", "state", "createClientConnector", ".", "apply", "(", ",", ")", "(", ")", "this", ".", "httpClientTransportFactory", "(", "connector", ")", "clientTransport", "!=", "null", "\"", "'httpClientTransportFactory' did not return a client transport", "\"", "settings", ".", "sslBundle", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 72, "ast_depth": 10, "n_identifiers": 10, "vocab_size": 28, "n_whitespaces": 34, "n_words": 29, "nloc": 6, "token_counts": 49}}
{"dataset_split": "train", "id": "spring-boot@255ea92:module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/JettyHttpClientBuilder.java#160-167", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "255ea92a574236205766ec267efe84bb2b1dcd7a", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/JettyHttpClientBuilder.java", "language": "Java"}, "method": {"name": "createClientConnector", "qualified_name": "org.springframework.boot.http.client.JettyHttpClientBuilder#createClientConnector", "start_line": 160, "end_line": 167, "signature": "createClientConnector(@Nullable SslBundle sslBundle)", "original_code": "private ClientConnector createClientConnector(@Nullable SslBundle sslBundle) {\n\t\tClientConnector connector = new ClientConnector();\n\t\tif (sslBundle != null) {\n\t\t\tconnector.setSslContextFactory(createSslContextFactory(sslBundle));\n\t\t}\n\t\tthis.clientConnectorCustomizerCustomizer.accept(connector);\n\t\treturn connector;\n\t}", "doc_comment": ""}, "code_tokens": ["ClientConnector", "createClientConnector", "private", "(", ")", "{", "}", "SslBundle", "sslBundle", "ClientConnector", ";", "if", ";", "return", "connector", ";", "connector", "=", "(", ")", "{", "}", ".", "accept", "@", "Nullable", "new", "ClientConnector", "sslBundle", "!=", "null", ";", "this", ".", "clientConnectorCustomizerCustomizer", "(", "connector", ")", "(", ")", "connector", ".", "setSslContextFactory", "(", ")", "createSslContextFactory", "(", "sslBundle", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 75, "ast_depth": 11, "n_identifiers": 8, "vocab_size": 25, "n_whitespaces": 35, "n_words": 23, "nloc": 8, "token_counts": 49}}
{"dataset_split": "train", "id": "spring-boot@255ea92:module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/JettyHttpClientBuilder.java#169-183", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "255ea92a574236205766ec267efe84bb2b1dcd7a", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/JettyHttpClientBuilder.java", "language": "Java"}, "method": {"name": "createSslContextFactory", "qualified_name": "org.springframework.boot.http.client.JettyHttpClientBuilder#createSslContextFactory", "start_line": 169, "end_line": 183, "signature": "createSslContextFactory(SslBundle sslBundle)", "original_code": "private SslContextFactory.Client createSslContextFactory(SslBundle sslBundle) {\n\t\tSslOptions options = sslBundle.getOptions();\n\t\tSSLContext sslContext = sslBundle.createSslContext();\n\t\tSslContextFactory.Client factory = new SslContextFactory.Client();\n\t\tfactory.setSslContext(sslContext);\n\t\tif (options.getCiphers() != null) {\n\t\t\tfactory.setIncludeCipherSuites(options.getCiphers());\n\t\t\tfactory.setExcludeCipherSuites();\n\t\t}\n\t\tif (options.getEnabledProtocols() != null) {\n\t\t\tfactory.setIncludeProtocols(options.getEnabledProtocols());\n\t\t\tfactory.setExcludeProtocols();\n\t\t}\n\t\treturn factory;\n\t}", "doc_comment": ""}, "code_tokens": ["createSslContextFactory", "private", "SslContextFactory", ".", "Client", "(", ")", "{", "}", "SslBundle", "sslBundle", "SslOptions", ";", "SSLContext", ";", ";", ";", "if", "if", "return", "factory", ";", "options", "=", "sslContext", "=", "SslContextFactory", ".", "Client", "factory", "=", "factory", ".", "setSslContext", "(", ")", "{", "}", "(", ")", "{", "}", "sslBundle", ".", "getOptions", "sslBundle", ".", "createSslContext", "new", "(", "sslContext", ")", "!=", "null", ";", ";", "!=", "null", ";", ";", "(", ")", "(", ")", "SslContextFactory", ".", "Client", "(", ")", "options", ".", "getCiphers", "factory", ".", "setIncludeCipherSuites", "factory", ".", "setExcludeCipherSuites", "options", ".", "getEnabledProtocols", "factory", ".", "setIncludeProtocols", "factory", ".", "setExcludeProtocols", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "options", ".", "getCiphers", "options", ".", "getEnabledProtocols", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 162, "ast_depth": 11, "n_identifiers": 14, "vocab_size": 32, "n_whitespaces": 68, "n_words": 45, "nloc": 15, "token_counts": 109}}
{"dataset_split": "train", "id": "spring-boot@255ea92:module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/JettyHttpClientBuilder.java#185-190", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "255ea92a574236205766ec267efe84bb2b1dcd7a", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/JettyHttpClientBuilder.java", "language": "Java"}, "method": {"name": "followRedirects", "qualified_name": "org.springframework.boot.http.client.JettyHttpClientBuilder#followRedirects", "start_line": 185, "end_line": 190, "signature": "followRedirects(HttpRedirects redirects)", "original_code": "private boolean followRedirects(HttpRedirects redirects) {\n\t\treturn switch (redirects) {\n\t\t\tcase FOLLOW_WHEN_POSSIBLE, FOLLOW -> true;\n\t\t\tcase DONT_FOLLOW -> false;\n\t\t};\n\t}", "doc_comment": ""}, "code_tokens": ["boolean", "followRedirects", "private", "(", ")", "{", "}", "HttpRedirects", "redirects", "return", ";", "switch", "(", "redirects", ")", "{", "}", "->", "->", "case", "FOLLOW_WHEN_POSSIBLE", ",", "FOLLOW", "true", ";", "case", "DONT_FOLLOW", "false", ";"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 45, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 20, "n_whitespaces": 30, "n_words": 15, "nloc": 6, "token_counts": 29}}
{"dataset_split": "train", "id": "spring-boot@255ea92:module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/JettyHttpClientBuilder.java#204-209", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "255ea92a574236205766ec267efe84bb2b1dcd7a", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/JettyHttpClientBuilder.java", "language": "Java"}, "method": {"name": "newRequest", "qualified_name": "org.springframework.boot.http.client.JettyHttpClientBuilder#newRequest", "start_line": 204, "end_line": 209, "signature": "newRequest(java.net.URI uri)", "original_code": "@Override\n\t\tpublic org.eclipse.jetty.client.Request newRequest(java.net.URI uri) {\n\t\t\tRequest request = super.newRequest(uri);\n\t\t\trequest.timeout(this.readTimeout.toMillis(), TimeUnit.MILLISECONDS);\n\t\t\treturn request;\n\t\t}", "doc_comment": ""}, "code_tokens": ["newRequest", "public", ".", "Request", "(", ")", "{", "}", "@", "Override", ".", "client", "uri", "Request", ";", ";", "return", "request", ";", ".", "jetty", ".", "URI", "request", "=", "request", ".", "timeout", "org", ".", "eclipse", "java", ".", "net", "super", ".", "newRequest", "(", ",", ")", "(", "uri", ")", ".", "toMillis", "TimeUnit", ".", "MILLISECONDS", "this", ".", "readTimeout", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 78, "ast_depth": 9, "n_identifiers": 9, "vocab_size": 30, "n_whitespaces": 27, "n_words": 26, "nloc": 6, "token_counts": 53}}
{"dataset_split": "train", "id": "spring-boot@255ea92:module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/reactive/JettyClientHttpConnectorBuilder.java#56-59", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "255ea92a574236205766ec267efe84bb2b1dcd7a", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/reactive/JettyClientHttpConnectorBuilder.java", "language": "Java"}, "method": {"name": "withCustomizer", "qualified_name": "org.springframework.boot.http.client.reactive.JettyClientHttpConnectorBuilder#withCustomizer", "start_line": 56, "end_line": 59, "signature": "withCustomizer(Consumer<JettyClientHttpConnector> customizer)", "original_code": "@Override\n\tpublic JettyClientHttpConnectorBuilder withCustomizer(Consumer<JettyClientHttpConnector> customizer) {\n\t\treturn new JettyClientHttpConnectorBuilder(mergedCustomizers(customizer), this.httpClientBuilder);\n\t}", "doc_comment": ""}, "code_tokens": ["JettyClientHttpConnectorBuilder", "withCustomizer", "public", "(", ")", "{", "}", "@", "Override", "customizer", "return", ";", "Consumer", "new", "JettyClientHttpConnectorBuilder", "<", "JettyClientHttpConnector", ">", "(", ",", ")", "mergedCustomizers", "this", ".", "httpClientBuilder", "(", "customizer", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 43, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 22, "n_whitespaces": 14, "n_words": 14, "nloc": 4, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@255ea92:module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/reactive/JettyClientHttpConnectorBuilder.java#61-64", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "255ea92a574236205766ec267efe84bb2b1dcd7a", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/reactive/JettyClientHttpConnectorBuilder.java", "language": "Java"}, "method": {"name": "withCustomizers", "qualified_name": "org.springframework.boot.http.client.reactive.JettyClientHttpConnectorBuilder#withCustomizers", "start_line": 61, "end_line": 64, "signature": "withCustomizers(Collection<Consumer<JettyClientHttpConnector>> customizers)", "original_code": "@Override\n\tpublic JettyClientHttpConnectorBuilder withCustomizers(Collection<Consumer<JettyClientHttpConnector>> customizers) {\n\t\treturn new JettyClientHttpConnectorBuilder(mergedCustomizers(customizers), this.httpClientBuilder);\n\t}", "doc_comment": ""}, "code_tokens": ["JettyClientHttpConnectorBuilder", "withCustomizers", "public", "(", ")", "{", "}", "@", "Override", "customizers", "return", ";", "Collection", "new", "JettyClientHttpConnectorBuilder", "<", ">", "(", ",", ")", "Consumer", "mergedCustomizers", "this", ".", "httpClientBuilder", "<", "JettyClientHttpConnector", ">", "(", "customizers", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 48, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 23, "n_whitespaces": 14, "n_words": 15, "nloc": 4, "token_counts": 31}}
{"dataset_split": "train", "id": "spring-boot@255ea92:module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/reactive/JettyClientHttpConnectorBuilder.java#73-78", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "255ea92a574236205766ec267efe84bb2b1dcd7a", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/reactive/JettyClientHttpConnectorBuilder.java", "language": "Java"}, "method": {"name": "withHttpClientTransportFactory", "qualified_name": "org.springframework.boot.http.client.reactive.JettyClientHttpConnectorBuilder#withHttpClientTransportFactory", "start_line": 73, "end_line": 78, "signature": "withHttpClientTransportFactory(\n\t\t\tFunction<ClientConnector, HttpClientTransport> httpClientTransportFactory)", "original_code": "public JettyClientHttpConnectorBuilder withHttpClientTransportFactory(\n\t\t\tFunction<ClientConnector, HttpClientTransport> httpClientTransportFactory) {\n\t\tAssert.notNull(httpClientTransportFactory, \"'httpClientTransportFactory' must not be null\");\n\t\treturn new JettyClientHttpConnectorBuilder(getCustomizers(),\n\t\t\t\tthis.httpClientBuilder.withHttpClientTransportFactory(httpClientTransportFactory));\n\t}", "doc_comment": "/**\n\t * Return a new {@link JettyClientHttpConnectorBuilder} that uses the given factory to\n\t * create the {@link HttpClientTransport}.\n\t * @param httpClientTransportFactory the {@link HttpClientTransport} factory to use\n\t * @return a new {@link JettyClientHttpConnectorBuilder} instance\n\t * @since 4.0.0\n\t */"}, "code_tokens": ["JettyClientHttpConnectorBuilder", "withHttpClientTransportFactory", "public", "(", ")", "{", "}", "httpClientTransportFactory", ";", "return", ";", "Function", "Assert", ".", "notNull", "new", "JettyClientHttpConnectorBuilder", "<", "ClientConnector", ",", "HttpClientTransport", ">", "(", "httpClientTransportFactory", ",", ")", "(", ",", ")", "\"", "'httpClientTransportFactory' must not be null", "\"", "getCustomizers", ".", "withHttpClientTransportFactory", "(", ")", "this", ".", "httpClientBuilder", "(", "httpClientTransportFactory", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 63, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 25, "n_whitespaces": 29, "n_words": 23, "nloc": 6, "token_counts": 43}}
{"dataset_split": "train", "id": "spring-boot@255ea92:module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/reactive/JettyClientHttpConnectorBuilder.java#86-90", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "255ea92a574236205766ec267efe84bb2b1dcd7a", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/reactive/JettyClientHttpConnectorBuilder.java", "language": "Java"}, "method": {"name": "withHttpClientCustomizer", "qualified_name": "org.springframework.boot.http.client.reactive.JettyClientHttpConnectorBuilder#withHttpClientCustomizer", "start_line": 86, "end_line": 90, "signature": "withHttpClientCustomizer(Consumer<HttpClient> httpClientCustomizer)", "original_code": "public JettyClientHttpConnectorBuilder withHttpClientCustomizer(Consumer<HttpClient> httpClientCustomizer) {\n\t\tAssert.notNull(httpClientCustomizer, \"'httpClientCustomizer' must not be null\");\n\t\treturn new JettyClientHttpConnectorBuilder(getCustomizers(),\n\t\t\t\tthis.httpClientBuilder.withCustomizer(httpClientCustomizer));\n\t}", "doc_comment": "/**\n\t * Return a new {@link JettyClientHttpConnectorBuilder} that applies additional\n\t * customization to the underlying {@link HttpClient}.\n\t * @param httpClientCustomizer the customizer to apply\n\t * @return a new {@link JettyClientHttpConnectorBuilder} instance\n\t */"}, "code_tokens": ["JettyClientHttpConnectorBuilder", "withHttpClientCustomizer", "public", "(", ")", "{", "}", "httpClientCustomizer", ";", "return", ";", "Consumer", "Assert", ".", "notNull", "new", "JettyClientHttpConnectorBuilder", "<", "HttpClient", ">", "(", "httpClientCustomizer", ",", ")", "(", ",", ")", "\"", "'httpClientCustomizer' must not be null", "\"", "getCustomizers", ".", "withCustomizer", "(", ")", "this", ".", "httpClientBuilder", "(", "httpClientCustomizer", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 61, "ast_depth": 9, "n_identifiers": 7, "vocab_size": 25, "n_whitespaces": 24, "n_words": 22, "nloc": 5, "token_counts": 41}}
{"dataset_split": "train", "id": "spring-boot@255ea92:module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/reactive/JettyClientHttpConnectorBuilder.java#98-103", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "255ea92a574236205766ec267efe84bb2b1dcd7a", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/reactive/JettyClientHttpConnectorBuilder.java", "language": "Java"}, "method": {"name": "withHttpClientTransportCustomizer", "qualified_name": "org.springframework.boot.http.client.reactive.JettyClientHttpConnectorBuilder#withHttpClientTransportCustomizer", "start_line": 98, "end_line": 103, "signature": "withHttpClientTransportCustomizer(\n\t\t\tConsumer<HttpClientTransport> httpClientTransportCustomizer)", "original_code": "public JettyClientHttpConnectorBuilder withHttpClientTransportCustomizer(\n\t\t\tConsumer<HttpClientTransport> httpClientTransportCustomizer) {\n\t\tAssert.notNull(httpClientTransportCustomizer, \"'httpClientTransportCustomizer' must not be null\");\n\t\treturn new JettyClientHttpConnectorBuilder(getCustomizers(),\n\t\t\t\tthis.httpClientBuilder.withHttpClientTransportCustomizer(httpClientTransportCustomizer));\n\t}", "doc_comment": "/**\n\t * Return a new {@link JettyClientHttpConnectorBuilder} that applies additional\n\t * customization to the underlying {@link HttpClientTransport}.\n\t * @param httpClientTransportCustomizer the customizer to apply\n\t * @return a new {@link JettyClientHttpConnectorBuilder} instance\n\t */"}, "code_tokens": ["JettyClientHttpConnectorBuilder", "withHttpClientTransportCustomizer", "public", "(", ")", "{", "}", "httpClientTransportCustomizer", ";", "return", ";", "Consumer", "Assert", ".", "notNull", "new", "JettyClientHttpConnectorBuilder", "<", "HttpClientTransport", ">", "(", "httpClientTransportCustomizer", ",", ")", "(", ",", ")", "\"", "'httpClientTransportCustomizer' must not be null", "\"", "getCustomizers", ".", "withHttpClientTransportCustomizer", "(", ")", "this", ".", "httpClientBuilder", "(", "httpClientTransportCustomizer", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 61, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 24, "n_whitespaces": 28, "n_words": 22, "nloc": 6, "token_counts": 41}}
{"dataset_split": "train", "id": "spring-boot@255ea92:module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/reactive/JettyClientHttpConnectorBuilder.java#111-116", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "255ea92a574236205766ec267efe84bb2b1dcd7a", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/reactive/JettyClientHttpConnectorBuilder.java", "language": "Java"}, "method": {"name": "withClientConnectorCustomizerCustomizer", "qualified_name": "org.springframework.boot.http.client.reactive.JettyClientHttpConnectorBuilder#withClientConnectorCustomizerCustomizer", "start_line": 111, "end_line": 116, "signature": "withClientConnectorCustomizerCustomizer(\n\t\t\tConsumer<ClientConnector> clientConnectorCustomizerCustomizer)", "original_code": "public JettyClientHttpConnectorBuilder withClientConnectorCustomizerCustomizer(\n\t\t\tConsumer<ClientConnector> clientConnectorCustomizerCustomizer) {\n\t\tAssert.notNull(clientConnectorCustomizerCustomizer, \"'clientConnectorCustomizerCustomizer' must not be null\");\n\t\treturn new JettyClientHttpConnectorBuilder(getCustomizers(),\n\t\t\t\tthis.httpClientBuilder.withClientConnectorCustomizerCustomizer(clientConnectorCustomizerCustomizer));\n\t}", "doc_comment": "/**\n\t * Return a new {@link JettyClientHttpConnectorBuilder} that applies additional\n\t * customization to the underlying {@link ClientConnector}.\n\t * @param clientConnectorCustomizerCustomizer the customizer to apply\n\t * @return a new {@link JettyClientHttpConnectorBuilder} instance\n\t */"}, "code_tokens": ["JettyClientHttpConnectorBuilder", "withClientConnectorCustomizerCustomizer", "public", "(", ")", "{", "}", "clientConnectorCustomizerCustomizer", ";", "return", ";", "Consumer", "Assert", ".", "notNull", "new", "JettyClientHttpConnectorBuilder", "<", "ClientConnector", ">", "(", "clientConnectorCustomizerCustomizer", ",", ")", "(", ",", ")", "\"", "'clientConnectorCustomizerCustomizer' must not be null", "\"", "getCustomizers", ".", "withClientConnectorCustomizerCustomizer", "(", ")", "this", ".", "httpClientBuilder", "(", "clientConnectorCustomizerCustomizer", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 61, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 24, "n_whitespaces": 28, "n_words": 22, "nloc": 6, "token_counts": 41}}
{"dataset_split": "train", "id": "spring-boot@255ea92:module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/reactive/JettyClientHttpConnectorBuilder.java#125-127", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "255ea92a574236205766ec267efe84bb2b1dcd7a", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/reactive/JettyClientHttpConnectorBuilder.java", "language": "Java"}, "method": {"name": "with", "qualified_name": "org.springframework.boot.http.client.reactive.JettyClientHttpConnectorBuilder#with", "start_line": 125, "end_line": 127, "signature": "with(UnaryOperator<JettyClientHttpConnectorBuilder> customizer)", "original_code": "public JettyClientHttpConnectorBuilder with(UnaryOperator<JettyClientHttpConnectorBuilder> customizer) {\n\t\treturn customizer.apply(this);\n\t}", "doc_comment": "/**\n\t * Return a new {@link JettyClientHttpConnectorBuilder} that applies the given\n\t * customizer. This can be useful for applying pre-packaged customizations.\n\t * @param customizer the customizer to apply\n\t * @return a new {@link JettyClientHttpConnectorBuilder}\n\t * @since 4.0.0\n\t */"}, "code_tokens": ["JettyClientHttpConnectorBuilder", "with", "public", "(", ")", "{", "}", "customizer", "return", ";", "UnaryOperator", "customizer", ".", "apply", "<", "JettyClientHttpConnectorBuilder", ">", "(", "this", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 31, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 16, "n_whitespaces": 10, "n_words": 10, "nloc": 3, "token_counts": 20}}
{"dataset_split": "train", "id": "spring-boot@255ea92:module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/reactive/JettyClientHttpConnectorBuilder.java#129-133", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "255ea92a574236205766ec267efe84bb2b1dcd7a", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/reactive/JettyClientHttpConnectorBuilder.java", "language": "Java"}, "method": {"name": "createClientHttpConnector", "qualified_name": "org.springframework.boot.http.client.reactive.JettyClientHttpConnectorBuilder#createClientHttpConnector", "start_line": 129, "end_line": 133, "signature": "createClientHttpConnector(ClientHttpConnectorSettings settings)", "original_code": "@Override\n\tprotected JettyClientHttpConnector createClientHttpConnector(ClientHttpConnectorSettings settings) {\n\t\tHttpClient httpClient = this.httpClientBuilder.build(asHttpClientSettings(settings));\n\t\treturn new JettyClientHttpConnector(httpClient);\n\t}", "doc_comment": ""}, "code_tokens": ["JettyClientHttpConnector", "createClientHttpConnector", "protected", "(", ")", "{", "}", "@", "Override", "ClientHttpConnectorSettings", "settings", "HttpClient", ";", "return", ";", "httpClient", "=", "new", "JettyClientHttpConnector", ".", "build", "(", "httpClient", ")", "this", ".", "httpClientBuilder", "(", ")", "asHttpClientSettings", "(", "settings", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 50, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 22, "n_whitespaces": 19, "n_words": 17, "nloc": 5, "token_counts": 33}}
{"dataset_split": "train", "id": "spring-boot@255ea92:module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/reactive/JettyClientHttpConnectorBuilder.java#141-144", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "255ea92a574236205766ec267efe84bb2b1dcd7a", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-client/src/main/java/org/springframework/boot/http/client/reactive/JettyClientHttpConnectorBuilder.java", "language": "Java"}, "method": {"name": "present", "qualified_name": "org.springframework.boot.http.client.reactive.JettyClientHttpConnectorBuilder#present", "start_line": 141, "end_line": 144, "signature": "present(@Nullable ClassLoader classLoader)", "original_code": "static boolean present(@Nullable ClassLoader classLoader) {\n\t\t\treturn ClassUtils.isPresent(HTTP_CLIENT, classLoader)\n\t\t\t\t\t&& ClassUtils.isPresent(REACTIVE_REQUEST, classLoader);\n\t\t}", "doc_comment": ""}, "code_tokens": ["boolean", "present", "static", "(", ")", "{", "}", "ClassLoader", "classLoader", "return", ";", "&&", "@", "Nullable", "ClassUtils", ".", "isPresent", "ClassUtils", ".", "isPresent", "(", "HTTP_CLIENT", ",", "classLoader", ")", "(", "REACTIVE_REQUEST", ",", "classLoader", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 44, "ast_depth": 8, "n_identifiers": 7, "vocab_size": 20, "n_whitespaces": 22, "n_words": 15, "nloc": 4, "token_counts": 30}}
{"dataset_split": "train", "id": "spring-boot@255ea92:module/spring-boot-http-client/src/test/java/org/springframework/boot/http/client/JettyClientHttpRequestFactoryBuilderTests.java#43-59", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "255ea92a574236205766ec267efe84bb2b1dcd7a", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-client/src/test/java/org/springframework/boot/http/client/JettyClientHttpRequestFactoryBuilderTests.java", "language": "Java"}, "method": {"name": "withCustomizers", "qualified_name": "test.java.org.springframework.boot.http.client.JettyClientHttpRequestFactoryBuilderTests#withCustomizers", "start_line": 43, "end_line": 59, "signature": "withCustomizers()", "original_code": "@Test\n\tvoid withCustomizers() {\n\t\tTestCustomizer<HttpClient> httpClientCustomizer1 = new TestCustomizer<>();\n\t\tTestCustomizer<HttpClient> httpClientCustomizer2 = new TestCustomizer<>();\n\t\tTestCustomizer<HttpClientTransport> httpClientTransportCustomizer = new TestCustomizer<>();\n\t\tTestCustomizer<ClientConnector> clientConnectorCustomizerCustomizer = new TestCustomizer<>();\n\t\tClientHttpRequestFactoryBuilder.jetty()\n\t\t\t.withHttpClientCustomizer(httpClientCustomizer1)\n\t\t\t.withHttpClientCustomizer(httpClientCustomizer2)\n\t\t\t.withHttpClientTransportCustomizer(httpClientTransportCustomizer)\n\t\t\t.withClientConnectorCustomizerCustomizer(clientConnectorCustomizerCustomizer)\n\t\t\t.build();\n\t\thttpClientCustomizer1.assertCalled();\n\t\thttpClientCustomizer2.assertCalled();\n\t\thttpClientTransportCustomizer.assertCalled();\n\t\tclientConnectorCustomizerCustomizer.assertCalled();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "withCustomizers", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ";", ";", ";", ";", ";", ";", "TestCustomizer", "httpClientCustomizer1", "=", "TestCustomizer", "httpClientCustomizer2", "=", "TestCustomizer", "httpClientTransportCustomizer", "=", "TestCustomizer", "clientConnectorCustomizerCustomizer", "=", ".", "build", "httpClientCustomizer1", ".", "assertCalled", "httpClientCustomizer2", ".", "assertCalled", "httpClientTransportCustomizer", ".", "assertCalled", "clientConnectorCustomizerCustomizer", ".", "assertCalled", "<", "HttpClient", ">", "new", "<", "HttpClient", ">", "new", "<", "HttpClientTransport", ">", "new", "<", "ClientConnector", ">", "new", ".", "withClientConnectorCustomizerCustomizer", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "TestCustomizer", "(", ")", "TestCustomizer", "(", ")", "TestCustomizer", "(", ")", "TestCustomizer", "(", ")", ".", "withHttpClientTransportCustomizer", "(", "clientConnectorCustomizerCustomizer", ")", "<", ">", "<", ">", "<", ">", "<", ">", ".", "withHttpClientCustomizer", "(", "httpClientTransportCustomizer", ")", ".", "withHttpClientCustomizer", "(", "httpClientCustomizer2", ")", "ClientHttpRequestFactoryBuilder", ".", "jetty", "(", "httpClientCustomizer1", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 177, "ast_depth": 12, "n_identifiers": 13, "vocab_size": 29, "n_whitespaces": 69, "n_words": 42, "nloc": 17, "token_counts": 114}}
{"dataset_split": "train", "id": "spring-boot@255ea92:module/spring-boot-http-client/src/test/java/org/springframework/boot/http/client/JettyClientHttpRequestFactoryBuilderTests.java#61-66", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "255ea92a574236205766ec267efe84bb2b1dcd7a", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-client/src/test/java/org/springframework/boot/http/client/JettyClientHttpRequestFactoryBuilderTests.java", "language": "Java"}, "method": {"name": "with", "qualified_name": "test.java.org.springframework.boot.http.client.JettyClientHttpRequestFactoryBuilderTests#with", "start_line": 61, "end_line": 66, "signature": "with()", "original_code": "@Test\n\tvoid with() {\n\t\tTestCustomizer<HttpClient> customizer = new TestCustomizer<>();\n\t\tClientHttpRequestFactoryBuilder.jetty().with((builder) -> builder.withHttpClientCustomizer(customizer)).build();\n\t\tcustomizer.assertCalled();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "with", "(", ")", "{", "}", "@", "Test", ";", ";", ";", "TestCustomizer", "customizer", "=", ".", "build", "customizer", ".", "assertCalled", "<", "HttpClient", ">", "new", ".", "with", "(", ")", "(", ")", "TestCustomizer", "(", ")", "ClientHttpRequestFactoryBuilder", ".", "jetty", "(", ")", "<", ">", "(", ")", "->", "(", "builder", ")", "builder", ".", "withHttpClientCustomizer", "(", "customizer", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 79, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 24, "n_whitespaces": 21, "n_words": 18, "nloc": 6, "token_counts": 51}}
{"dataset_split": "train", "id": "spring-boot@255ea92:module/spring-boot-http-client/src/test/java/org/springframework/boot/http/client/JettyClientHttpRequestFactoryBuilderTests.java#68-76", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "255ea92a574236205766ec267efe84bb2b1dcd7a", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-client/src/test/java/org/springframework/boot/http/client/JettyClientHttpRequestFactoryBuilderTests.java", "language": "Java"}, "method": {"name": "withHttpClientTransportFactory", "qualified_name": "test.java.org.springframework.boot.http.client.JettyClientHttpRequestFactoryBuilderTests#withHttpClientTransportFactory", "start_line": 68, "end_line": 76, "signature": "withHttpClientTransportFactory()", "original_code": "@Test\n\tvoid withHttpClientTransportFactory() {\n\t\tJettyClientHttpRequestFactory factory = ClientHttpRequestFactoryBuilder.jetty()\n\t\t\t.withHttpClientTransportFactory(TestHttpClientTransport::new)\n\t\t\t.build();\n\t\tassertThat(factory).extracting(\"httpClient\")\n\t\t\t.extracting(\"transport\")\n\t\t\t.isInstanceOf(TestHttpClientTransport.class);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "withHttpClientTransportFactory", "(", ")", "{", "}", "@", "Test", "JettyClientHttpRequestFactory", ";", ";", "factory", "=", ".", "isInstanceOf", ".", "build", ".", "extracting", "(", ")", ".", "withHttpClientTransportFactory", "(", ")", ".", "extracting", "(", ")", "TestHttpClientTransport", ".", "class", "ClientHttpRequestFactoryBuilder", ".", "jetty", "(", ")", "assertThat", "(", ")", "\"", "transport", "\"", "(", ")", "TestHttpClientTransport", "::", "new", "(", "factory", ")", "\"", "httpClient", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 81, "ast_depth": 10, "n_identifiers": 10, "vocab_size": 26, "n_whitespaces": 31, "n_words": 20, "nloc": 9, "token_counts": 54}}
{"dataset_split": "train", "id": "spring-boot@255ea92:module/spring-boot-http-client/src/test/java/org/springframework/boot/http/client/JettyClientHttpRequestFactoryBuilderTests.java#78-81", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "255ea92a574236205766ec267efe84bb2b1dcd7a", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-client/src/test/java/org/springframework/boot/http/client/JettyClientHttpRequestFactoryBuilderTests.java", "language": "Java"}, "method": {"name": "connectTimeout", "qualified_name": "test.java.org.springframework.boot.http.client.JettyClientHttpRequestFactoryBuilderTests#connectTimeout", "start_line": 78, "end_line": 81, "signature": "connectTimeout(JettyClientHttpRequestFactory requestFactory)", "original_code": "@Override\n\tprotected long connectTimeout(JettyClientHttpRequestFactory requestFactory) {\n\t\treturn ((HttpClient) ReflectionTestUtils.getField(requestFactory, \"httpClient\")).getConnectTimeout();\n\t}", "doc_comment": ""}, "code_tokens": ["connectTimeout", "protected", "long", "(", ")", "{", "}", "@", "Override", "JettyClientHttpRequestFactory", "requestFactory", "return", ";", ".", "getConnectTimeout", "(", ")", "(", ")", "(", "HttpClient", ")", "ReflectionTestUtils", ".", "getField", "(", "requestFactory", ",", ")", "\"", "httpClient", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 48, "ast_depth": 11, "n_identifiers": 6, "vocab_size": 21, "n_whitespaces": 14, "n_words": 13, "nloc": 4, "token_counts": 32}}
{"dataset_split": "train", "id": "spring-boot@255ea92:module/spring-boot-http-client/src/test/java/org/springframework/boot/http/client/JettyClientHttpRequestFactoryBuilderTests.java#83-86", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "255ea92a574236205766ec267efe84bb2b1dcd7a", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-client/src/test/java/org/springframework/boot/http/client/JettyClientHttpRequestFactoryBuilderTests.java", "language": "Java"}, "method": {"name": "readTimeout", "qualified_name": "test.java.org.springframework.boot.http.client.JettyClientHttpRequestFactoryBuilderTests#readTimeout", "start_line": 83, "end_line": 86, "signature": "readTimeout(JettyClientHttpRequestFactory requestFactory)", "original_code": "@Override\n\tprotected long readTimeout(JettyClientHttpRequestFactory requestFactory) {\n\t\treturn (long) ReflectionTestUtils.getField(requestFactory, \"readTimeout\");\n\t}", "doc_comment": ""}, "code_tokens": ["readTimeout", "protected", "long", "(", ")", "{", "}", "@", "Override", "JettyClientHttpRequestFactory", "requestFactory", "return", ";", "(", ")", "long", "ReflectionTestUtils", ".", "getField", "(", "requestFactory", ",", ")", "\"", "readTimeout", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 40, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 18, "n_whitespaces": 14, "n_words": 12, "nloc": 4, "token_counts": 26}}
{"dataset_split": "train", "id": "spring-boot@255ea92:module/spring-boot-http-client/src/test/java/org/springframework/boot/http/client/reactive/JettyClientHttpConnectorBuilderTests.java#44-60", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "255ea92a574236205766ec267efe84bb2b1dcd7a", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-client/src/test/java/org/springframework/boot/http/client/reactive/JettyClientHttpConnectorBuilderTests.java", "language": "Java"}, "method": {"name": "withCustomizers", "qualified_name": "test.java.org.springframework.boot.http.client.reactive.JettyClientHttpConnectorBuilderTests#withCustomizers", "start_line": 44, "end_line": 60, "signature": "withCustomizers()", "original_code": "@Test\n\tvoid withCustomizers() {\n\t\tTestCustomizer<HttpClient> httpClientCustomizer1 = new TestCustomizer<>();\n\t\tTestCustomizer<HttpClient> httpClientCustomizer2 = new TestCustomizer<>();\n\t\tTestCustomizer<HttpClientTransport> httpClientTransportCustomizer = new TestCustomizer<>();\n\t\tTestCustomizer<ClientConnector> clientConnectorCustomizerCustomizer = new TestCustomizer<>();\n\t\tClientHttpConnectorBuilder.jetty()\n\t\t\t.withHttpClientCustomizer(httpClientCustomizer1)\n\t\t\t.withHttpClientCustomizer(httpClientCustomizer2)\n\t\t\t.withHttpClientTransportCustomizer(httpClientTransportCustomizer)\n\t\t\t.withClientConnectorCustomizerCustomizer(clientConnectorCustomizerCustomizer)\n\t\t\t.build();\n\t\thttpClientCustomizer1.assertCalled();\n\t\thttpClientCustomizer2.assertCalled();\n\t\thttpClientTransportCustomizer.assertCalled();\n\t\tclientConnectorCustomizerCustomizer.assertCalled();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "withCustomizers", "(", ")", "{", "}", "@", "Test", ";", ";", ";", ";", ";", ";", ";", ";", ";", "TestCustomizer", "httpClientCustomizer1", "=", "TestCustomizer", "httpClientCustomizer2", "=", "TestCustomizer", "httpClientTransportCustomizer", "=", "TestCustomizer", "clientConnectorCustomizerCustomizer", "=", ".", "build", "httpClientCustomizer1", ".", "assertCalled", "httpClientCustomizer2", ".", "assertCalled", "httpClientTransportCustomizer", ".", "assertCalled", "clientConnectorCustomizerCustomizer", ".", "assertCalled", "<", "HttpClient", ">", "new", "<", "HttpClient", ">", "new", "<", "HttpClientTransport", ">", "new", "<", "ClientConnector", ">", "new", ".", "withClientConnectorCustomizerCustomizer", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "TestCustomizer", "(", ")", "TestCustomizer", "(", ")", "TestCustomizer", "(", ")", "TestCustomizer", "(", ")", ".", "withHttpClientTransportCustomizer", "(", "clientConnectorCustomizerCustomizer", ")", "<", ">", "<", ">", "<", ">", "<", ">", ".", "withHttpClientCustomizer", "(", "httpClientTransportCustomizer", ")", ".", "withHttpClientCustomizer", "(", "httpClientCustomizer2", ")", "ClientHttpConnectorBuilder", ".", "jetty", "(", "httpClientCustomizer1", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 177, "ast_depth": 12, "n_identifiers": 13, "vocab_size": 29, "n_whitespaces": 69, "n_words": 42, "nloc": 17, "token_counts": 114}}
{"dataset_split": "train", "id": "spring-boot@255ea92:module/spring-boot-http-client/src/test/java/org/springframework/boot/http/client/reactive/JettyClientHttpConnectorBuilderTests.java#62-67", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "255ea92a574236205766ec267efe84bb2b1dcd7a", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-client/src/test/java/org/springframework/boot/http/client/reactive/JettyClientHttpConnectorBuilderTests.java", "language": "Java"}, "method": {"name": "with", "qualified_name": "test.java.org.springframework.boot.http.client.reactive.JettyClientHttpConnectorBuilderTests#with", "start_line": 62, "end_line": 67, "signature": "with()", "original_code": "@Test\n\tvoid with() {\n\t\tTestCustomizer<HttpClient> customizer = new TestCustomizer<>();\n\t\tClientHttpConnectorBuilder.jetty().with((builder) -> builder.withHttpClientCustomizer(customizer)).build();\n\t\tcustomizer.assertCalled();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "with", "(", ")", "{", "}", "@", "Test", ";", ";", ";", "TestCustomizer", "customizer", "=", ".", "build", "customizer", ".", "assertCalled", "<", "HttpClient", ">", "new", ".", "with", "(", ")", "(", ")", "TestCustomizer", "(", ")", "ClientHttpConnectorBuilder", ".", "jetty", "(", ")", "<", ">", "(", ")", "->", "(", "builder", ")", "builder", ".", "withHttpClientCustomizer", "(", "customizer", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 79, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 24, "n_whitespaces": 21, "n_words": 18, "nloc": 6, "token_counts": 51}}
{"dataset_split": "train", "id": "spring-boot@255ea92:module/spring-boot-http-client/src/test/java/org/springframework/boot/http/client/reactive/JettyClientHttpConnectorBuilderTests.java#69-77", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "255ea92a574236205766ec267efe84bb2b1dcd7a", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-client/src/test/java/org/springframework/boot/http/client/reactive/JettyClientHttpConnectorBuilderTests.java", "language": "Java"}, "method": {"name": "withHttpClientTransportFactory", "qualified_name": "test.java.org.springframework.boot.http.client.reactive.JettyClientHttpConnectorBuilderTests#withHttpClientTransportFactory", "start_line": 69, "end_line": 77, "signature": "withHttpClientTransportFactory()", "original_code": "@Test\n\tvoid withHttpClientTransportFactory() {\n\t\tJettyClientHttpConnector connector = ClientHttpConnectorBuilder.jetty()\n\t\t\t.withHttpClientTransportFactory(TestHttpClientTransport::new)\n\t\t\t.build();\n\t\tassertThat(connector).extracting(\"httpClient\")\n\t\t\t.extracting(\"transport\")\n\t\t\t.isInstanceOf(TestHttpClientTransport.class);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "withHttpClientTransportFactory", "(", ")", "{", "}", "@", "Test", "JettyClientHttpConnector", ";", ";", "connector", "=", ".", "isInstanceOf", ".", "build", ".", "extracting", "(", ")", ".", "withHttpClientTransportFactory", "(", ")", ".", "extracting", "(", ")", "TestHttpClientTransport", ".", "class", "ClientHttpConnectorBuilder", ".", "jetty", "(", ")", "assertThat", "(", ")", "\"", "transport", "\"", "(", ")", "TestHttpClientTransport", "::", "new", "(", "connector", ")", "\"", "httpClient", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 81, "ast_depth": 10, "n_identifiers": 10, "vocab_size": 26, "n_whitespaces": 31, "n_words": 20, "nloc": 9, "token_counts": 54}}
{"dataset_split": "train", "id": "spring-boot@255ea92:module/spring-boot-http-client/src/test/java/org/springframework/boot/http/client/reactive/JettyClientHttpConnectorBuilderTests.java#79-82", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "255ea92a574236205766ec267efe84bb2b1dcd7a", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-client/src/test/java/org/springframework/boot/http/client/reactive/JettyClientHttpConnectorBuilderTests.java", "language": "Java"}, "method": {"name": "connectTimeout", "qualified_name": "test.java.org.springframework.boot.http.client.reactive.JettyClientHttpConnectorBuilderTests#connectTimeout", "start_line": 79, "end_line": 82, "signature": "connectTimeout(JettyClientHttpConnector connector)", "original_code": "@Override\n\tprotected long connectTimeout(JettyClientHttpConnector connector) {\n\t\treturn ((HttpClient) ReflectionTestUtils.getField(connector, \"httpClient\")).getConnectTimeout();\n\t}", "doc_comment": ""}, "code_tokens": ["connectTimeout", "protected", "long", "(", ")", "{", "}", "@", "Override", "JettyClientHttpConnector", "connector", "return", ";", ".", "getConnectTimeout", "(", ")", "(", ")", "(", "HttpClient", ")", "ReflectionTestUtils", ".", "getField", "(", "connector", ",", ")", "\"", "httpClient", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 48, "ast_depth": 11, "n_identifiers": 6, "vocab_size": 21, "n_whitespaces": 14, "n_words": 13, "nloc": 4, "token_counts": 32}}
{"dataset_split": "train", "id": "spring-boot@255ea92:module/spring-boot-http-client/src/test/java/org/springframework/boot/http/client/reactive/JettyClientHttpConnectorBuilderTests.java#84-88", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "255ea92a574236205766ec267efe84bb2b1dcd7a", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-http-client/src/test/java/org/springframework/boot/http/client/reactive/JettyClientHttpConnectorBuilderTests.java", "language": "Java"}, "method": {"name": "readTimeout", "qualified_name": "test.java.org.springframework.boot.http.client.reactive.JettyClientHttpConnectorBuilderTests#readTimeout", "start_line": 84, "end_line": 88, "signature": "readTimeout(JettyClientHttpConnector connector)", "original_code": "@Override\n\tprotected long readTimeout(JettyClientHttpConnector connector) {\n\t\tHttpClient httpClient = (HttpClient) ReflectionTestUtils.getField(connector, \"httpClient\");\n\t\treturn ((Duration) ReflectionTestUtils.getField(httpClient, \"readTimeout\")).toMillis();\n\t}", "doc_comment": ""}, "code_tokens": ["readTimeout", "protected", "long", "(", ")", "{", "}", "@", "Override", "JettyClientHttpConnector", "connector", "HttpClient", ";", "return", ";", "httpClient", "=", ".", "toMillis", "(", "HttpClient", ")", "(", ")", "(", ")", "ReflectionTestUtils", ".", "getField", "(", "Duration", ")", "(", "connector", ",", ")", "ReflectionTestUtils", ".", "getField", "\"", "httpClient", "\"", "(", "httpClient", ",", ")", "\"", "readTimeout", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 71, "ast_depth": 11, "n_identifiers": 7, "vocab_size": 23, "n_whitespaces": 22, "n_words": 20, "nloc": 5, "token_counts": 49}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-amqp/src/dockerTest/java/org/springframework/boot/amqp/docker/compose/RabbitDockerComposeConnectionDetailsFactoryIntegrationTests.java#36-39", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-amqp/src/dockerTest/java/org/springframework/boot/amqp/docker/compose/RabbitDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "runCreatesConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.amqp.docker.compose.RabbitDockerComposeConnectionDetailsFactoryIntegrationTests#runCreatesConnectionDetails", "start_line": 36, "end_line": 39, "signature": "runCreatesConnectionDetails(RabbitConnectionDetails connectionDetails)", "original_code": "@DockerComposeTest(composeFile = \"rabbit-compose.yaml\", image = TestImage.RABBITMQ)\n\tvoid runCreatesConnectionDetails(RabbitConnectionDetails connectionDetails) {\n\t\tassertConnectionDetails(connectionDetails);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runCreatesConnectionDetails", "(", ")", "{", "}", "@", "DockerComposeTest", "RabbitConnectionDetails", "connectionDetails", ";", "(", ",", ")", "assertConnectionDetails", "composeFile", "=", "image", "=", "(", "connectionDetails", ")", "\"", "rabbit-compose.yaml", "\"", "TestImage", ".", "RABBITMQ"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 43, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 21, "n_whitespaces": 15, "n_words": 14, "nloc": 4, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-amqp/src/dockerTest/java/org/springframework/boot/amqp/docker/compose/RabbitDockerComposeConnectionDetailsFactoryIntegrationTests.java#41-49", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-amqp/src/dockerTest/java/org/springframework/boot/amqp/docker/compose/RabbitDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "assertConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.amqp.docker.compose.RabbitDockerComposeConnectionDetailsFactoryIntegrationTests#assertConnectionDetails", "start_line": 41, "end_line": 49, "signature": "assertConnectionDetails(RabbitConnectionDetails connectionDetails)", "original_code": "private void assertConnectionDetails(RabbitConnectionDetails connectionDetails) {\n\t\tassertThat(connectionDetails.getUsername()).isEqualTo(\"myuser\");\n\t\tassertThat(connectionDetails.getPassword()).isEqualTo(\"secret\");\n\t\tassertThat(connectionDetails.getVirtualHost()).isEqualTo(\"/\");\n\t\tassertThat(connectionDetails.getAddresses()).hasSize(1);\n\t\tAddress address = connectionDetails.getFirstAddress();\n\t\tassertThat(address.host()).isNotNull();\n\t\tassertThat(address.port()).isGreaterThan(0);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "assertConnectionDetails", "private", "(", ")", "{", "}", "RabbitConnectionDetails", "connectionDetails", ";", ";", ";", ";", "Address", ";", ";", ";", ".", "isEqualTo", ".", "isEqualTo", ".", "isEqualTo", ".", "hasSize", "address", "=", ".", "isNotNull", ".", "isGreaterThan", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", "1", ")", "connectionDetails", ".", "getFirstAddress", "assertThat", "(", ")", "assertThat", "(", "0", ")", "(", ")", "\"", "myuser", "\"", "(", ")", "\"", "secret", "\"", "(", ")", "\"", "/", "\"", "(", ")", "(", ")", "(", ")", "(", ")", "connectionDetails", ".", "getUsername", "connectionDetails", ".", "getPassword", "connectionDetails", ".", "getVirtualHost", "connectionDetails", ".", "getAddresses", "address", ".", "host", "address", ".", "port", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 162, "ast_depth": 10, "n_identifiers": 15, "vocab_size": 32, "n_whitespaces": 30, "n_words": 37, "nloc": 9, "token_counts": 107}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-amqp/src/main/java/org/springframework/boot/amqp/docker/compose/RabbitDockerComposeConnectionDetailsFactory.java#46-49", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-amqp/src/main/java/org/springframework/boot/amqp/docker/compose/RabbitDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getDockerComposeConnectionDetails", "qualified_name": "org.springframework.boot.amqp.docker.compose.RabbitDockerComposeConnectionDetailsFactory#getDockerComposeConnectionDetails", "start_line": 46, "end_line": 49, "signature": "getDockerComposeConnectionDetails(DockerComposeConnectionSource source)", "original_code": "@Override\n\tprotected RabbitConnectionDetails getDockerComposeConnectionDetails(DockerComposeConnectionSource source) {\n\t\treturn new RabbitDockerComposeConnectionDetails(source.getRunningService());\n\t}", "doc_comment": ""}, "code_tokens": ["RabbitConnectionDetails", "getDockerComposeConnectionDetails", "protected", "(", ")", "{", "}", "@", "Override", "DockerComposeConnectionSource", "source", "return", ";", "new", "RabbitDockerComposeConnectionDetails", "(", ")", "source", ".", "getRunningService", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 34, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 17, "n_whitespaces": 13, "n_words": 11, "nloc": 4, "token_counts": 22}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-amqp/src/main/java/org/springframework/boot/amqp/docker/compose/RabbitDockerComposeConnectionDetailsFactory.java#68-71", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-amqp/src/main/java/org/springframework/boot/amqp/docker/compose/RabbitDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getUsername", "qualified_name": "org.springframework.boot.amqp.docker.compose.RabbitDockerComposeConnectionDetailsFactory#getUsername", "start_line": 68, "end_line": 71, "signature": "getUsername()", "original_code": "@Override\n\t\tpublic @Nullable String getUsername() {\n\t\t\treturn this.environment.getUsername();\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getUsername", "public", "(", ")", "{", "}", "@", "Override", "@", "Nullable", "return", ";", ".", "getUsername", "this", ".", "environment", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 31, "ast_depth": 7, "n_identifiers": 4, "vocab_size": 15, "n_whitespaces": 15, "n_words": 9, "nloc": 4, "token_counts": 20}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-amqp/src/main/java/org/springframework/boot/amqp/docker/compose/RabbitDockerComposeConnectionDetailsFactory.java#73-76", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-amqp/src/main/java/org/springframework/boot/amqp/docker/compose/RabbitDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getPassword", "qualified_name": "org.springframework.boot.amqp.docker.compose.RabbitDockerComposeConnectionDetailsFactory#getPassword", "start_line": 73, "end_line": 76, "signature": "getPassword()", "original_code": "@Override\n\t\tpublic @Nullable String getPassword() {\n\t\t\treturn this.environment.getPassword();\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getPassword", "public", "(", ")", "{", "}", "@", "Override", "@", "Nullable", "return", ";", ".", "getPassword", "this", ".", "environment", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 31, "ast_depth": 7, "n_identifiers": 4, "vocab_size": 15, "n_whitespaces": 15, "n_words": 9, "nloc": 4, "token_counts": 20}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-amqp/src/main/java/org/springframework/boot/amqp/docker/compose/RabbitDockerComposeConnectionDetailsFactory.java#78-81", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-amqp/src/main/java/org/springframework/boot/amqp/docker/compose/RabbitDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getVirtualHost", "qualified_name": "org.springframework.boot.amqp.docker.compose.RabbitDockerComposeConnectionDetailsFactory#getVirtualHost", "start_line": 78, "end_line": 81, "signature": "getVirtualHost()", "original_code": "@Override\n\t\tpublic String getVirtualHost() {\n\t\t\treturn \"/\";\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getVirtualHost", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "\"", "/", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 13, "n_whitespaces": 14, "n_words": 5, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-amqp/src/main/java/org/springframework/boot/amqp/docker/compose/RabbitDockerComposeConnectionDetailsFactory.java#83-86", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-amqp/src/main/java/org/springframework/boot/amqp/docker/compose/RabbitDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getAddresses", "qualified_name": "org.springframework.boot.amqp.docker.compose.RabbitDockerComposeConnectionDetailsFactory#getAddresses", "start_line": 83, "end_line": 86, "signature": "getAddresses()", "original_code": "@Override\n\t\tpublic List<Address> getAddresses() {\n\t\t\treturn this.addresses;\n\t\t}", "doc_comment": ""}, "code_tokens": ["getAddresses", "public", "List", "(", ")", "{", "}", "@", "Override", "<", "Address", ">", "return", ";", "this", ".", "addresses"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 27, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 17, "n_whitespaces": 14, "n_words": 8, "nloc": 4, "token_counts": 17}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-cassandra/src/dockerTest/java/org/springframework/boot/cassandra/docker/compose/CassandraDockerComposeConnectionDetailsFactoryIntegrationTests.java#35-38", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-cassandra/src/dockerTest/java/org/springframework/boot/cassandra/docker/compose/CassandraDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "runCreatesConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.cassandra.docker.compose.CassandraDockerComposeConnectionDetailsFactoryIntegrationTests#runCreatesConnectionDetails", "start_line": 35, "end_line": 38, "signature": "runCreatesConnectionDetails(CassandraConnectionDetails connectionDetails)", "original_code": "@DockerComposeTest(composeFile = \"cassandra-compose.yaml\", image = TestImage.CASSANDRA)\n\tvoid runCreatesConnectionDetails(CassandraConnectionDetails connectionDetails) {\n\t\tassertConnectionDetails(connectionDetails);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runCreatesConnectionDetails", "(", ")", "{", "}", "@", "DockerComposeTest", "CassandraConnectionDetails", "connectionDetails", ";", "(", ",", ")", "assertConnectionDetails", "composeFile", "=", "image", "=", "(", "connectionDetails", ")", "\"", "cassandra-compose.yaml", "\"", "TestImage", ".", "CASSANDRA"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 43, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 21, "n_whitespaces": 15, "n_words": 14, "nloc": 4, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-cassandra/src/dockerTest/java/org/springframework/boot/cassandra/docker/compose/CassandraDockerComposeConnectionDetailsFactoryIntegrationTests.java#40-49", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-cassandra/src/dockerTest/java/org/springframework/boot/cassandra/docker/compose/CassandraDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "assertConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.cassandra.docker.compose.CassandraDockerComposeConnectionDetailsFactoryIntegrationTests#assertConnectionDetails", "start_line": 40, "end_line": 49, "signature": "assertConnectionDetails(CassandraConnectionDetails connectionDetails)", "original_code": "private void assertConnectionDetails(CassandraConnectionDetails connectionDetails) {\n\t\tList<Node> contactPoints = connectionDetails.getContactPoints();\n\t\tassertThat(contactPoints).hasSize(1);\n\t\tNode node = contactPoints.get(0);\n\t\tassertThat(node.host()).isNotNull();\n\t\tassertThat(node.port()).isGreaterThan(0);\n\t\tassertThat(connectionDetails.getUsername()).isNull();\n\t\tassertThat(connectionDetails.getPassword()).isNull();\n\t\tassertThat(connectionDetails.getLocalDatacenter()).isEqualTo(\"testdc1\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "assertConnectionDetails", "private", "(", ")", "{", "}", "CassandraConnectionDetails", "connectionDetails", ";", ";", "Node", ";", ";", ";", ";", ";", ";", "List", "contactPoints", "=", ".", "hasSize", "node", "=", ".", "isNotNull", ".", "isGreaterThan", ".", "isNull", ".", "isNull", ".", "isEqualTo", "<", "Node", ">", "connectionDetails", ".", "getContactPoints", "assertThat", "(", "1", ")", "contactPoints", ".", "get", "assertThat", "(", ")", "assertThat", "(", "0", ")", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "(", ")", "(", "contactPoints", ")", "(", "0", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "\"", "testdc1", "\"", "node", ".", "host", "node", ".", "port", "connectionDetails", ".", "getUsername", "connectionDetails", ".", "getPassword", "connectionDetails", ".", "getLocalDatacenter", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 167, "ast_depth": 10, "n_identifiers": 17, "vocab_size": 35, "n_whitespaces": 36, "n_words": 41, "nloc": 10, "token_counts": 110}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-cassandra/src/main/java/org/springframework/boot/cassandra/docker/compose/CassandraDockerComposeConnectionDetailsFactory.java#41-44", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-cassandra/src/main/java/org/springframework/boot/cassandra/docker/compose/CassandraDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getDockerComposeConnectionDetails", "qualified_name": "org.springframework.boot.cassandra.docker.compose.CassandraDockerComposeConnectionDetailsFactory#getDockerComposeConnectionDetails", "start_line": 41, "end_line": 44, "signature": "getDockerComposeConnectionDetails(DockerComposeConnectionSource source)", "original_code": "@Override\n\tprotected CassandraConnectionDetails getDockerComposeConnectionDetails(DockerComposeConnectionSource source) {\n\t\treturn new CassandraDockerComposeConnectionDetails(source.getRunningService());\n\t}", "doc_comment": ""}, "code_tokens": ["CassandraConnectionDetails", "getDockerComposeConnectionDetails", "protected", "(", ")", "{", "}", "@", "Override", "DockerComposeConnectionSource", "source", "return", ";", "new", "CassandraDockerComposeConnectionDetails", "(", ")", "source", ".", "getRunningService", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 34, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 17, "n_whitespaces": 13, "n_words": 11, "nloc": 4, "token_counts": 22}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-cassandra/src/main/java/org/springframework/boot/cassandra/docker/compose/CassandraDockerComposeConnectionDetailsFactory.java#64-67", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-cassandra/src/main/java/org/springframework/boot/cassandra/docker/compose/CassandraDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getContactPoints", "qualified_name": "org.springframework.boot.cassandra.docker.compose.CassandraDockerComposeConnectionDetailsFactory#getContactPoints", "start_line": 64, "end_line": 67, "signature": "getContactPoints()", "original_code": "@Override\n\t\tpublic List<Node> getContactPoints() {\n\t\t\treturn this.contactPoints;\n\t\t}", "doc_comment": ""}, "code_tokens": ["getContactPoints", "public", "List", "(", ")", "{", "}", "@", "Override", "<", "Node", ">", "return", ";", "this", ".", "contactPoints"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 27, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 17, "n_whitespaces": 14, "n_words": 8, "nloc": 4, "token_counts": 17}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-cassandra/src/main/java/org/springframework/boot/cassandra/docker/compose/CassandraDockerComposeConnectionDetailsFactory.java#69-72", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-cassandra/src/main/java/org/springframework/boot/cassandra/docker/compose/CassandraDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getLocalDatacenter", "qualified_name": "org.springframework.boot.cassandra.docker.compose.CassandraDockerComposeConnectionDetailsFactory#getLocalDatacenter", "start_line": 69, "end_line": 72, "signature": "getLocalDatacenter()", "original_code": "@Override\n\t\tpublic String getLocalDatacenter() {\n\t\t\treturn this.datacenter;\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getLocalDatacenter", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "this", ".", "datacenter"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-data-redis/src/dockerTest/java/org/springframework/boot/data/redis/docker/compose/RedisDockerComposeConnectionDetailsFactoryIntegrationTests.java#40-43", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-data-redis/src/dockerTest/java/org/springframework/boot/data/redis/docker/compose/RedisDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "runCreatesConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.data.redis.docker.compose.RedisDockerComposeConnectionDetailsFactoryIntegrationTests#runCreatesConnectionDetails", "start_line": 40, "end_line": 43, "signature": "runCreatesConnectionDetails(RedisConnectionDetails connectionDetails)", "original_code": "@DockerComposeTest(composeFile = \"redis-compose.yaml\", image = TestImage.REDIS)\n\tvoid runCreatesConnectionDetails(RedisConnectionDetails connectionDetails) {\n\t\tassertConnectionDetails(connectionDetails);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runCreatesConnectionDetails", "(", ")", "{", "}", "@", "DockerComposeTest", "RedisConnectionDetails", "connectionDetails", ";", "(", ",", ")", "assertConnectionDetails", "composeFile", "=", "image", "=", "(", "connectionDetails", ")", "\"", "redis-compose.yaml", "\"", "TestImage", ".", "REDIS"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 43, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 21, "n_whitespaces": 15, "n_words": 14, "nloc": 4, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-data-redis/src/dockerTest/java/org/springframework/boot/data/redis/docker/compose/RedisDockerComposeConnectionDetailsFactoryIntegrationTests.java#45-54", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-data-redis/src/dockerTest/java/org/springframework/boot/data/redis/docker/compose/RedisDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "runWithSslCreatesConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.data.redis.docker.compose.RedisDockerComposeConnectionDetailsFactoryIntegrationTests#runWithSslCreatesConnectionDetails", "start_line": 45, "end_line": 54, "signature": "runWithSslCreatesConnectionDetails(RedisConnectionDetails connectionDetails)", "original_code": "@DockerComposeTest(composeFile = \"redis-ssl-compose.yaml\", image = TestImage.REDIS,\n\t\t\tadditionalResources = { \"ca.crt\", \"server.crt\", \"server.key\", \"client.crt\", \"client.key\" })\n\tvoid runWithSslCreatesConnectionDetails(RedisConnectionDetails connectionDetails) {\n\t\tassertConnectionDetails(connectionDetails);\n\t\tStandalone standalone = connectionDetails.getStandalone();\n\t\tSslBundle sslBundle = standalone.getSslBundle();\n\t\tassertThat(sslBundle).isNotNull();\n\t\tSSLContext sslContext = sslBundle.createSslContext();\n\t\tassertThat(sslContext).isNotNull();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runWithSslCreatesConnectionDetails", "(", ")", "{", "}", "@", "DockerComposeTest", "RedisConnectionDetails", "connectionDetails", ";", "Standalone", ";", "SslBundle", ";", ";", "SSLContext", ";", ";", "(", ",", ",", ")", "assertConnectionDetails", "standalone", "=", "sslBundle", "=", ".", "isNotNull", "sslContext", "=", ".", "isNotNull", "composeFile", "=", "image", "=", "additionalResources", "=", "(", "connectionDetails", ")", "connectionDetails", ".", "getStandalone", "standalone", ".", "getSslBundle", "assertThat", "(", ")", "sslBundle", ".", "createSslContext", "assertThat", "(", ")", "\"", "redis-ssl-compose.yaml", "\"", "TestImage", ".", "REDIS", "{", ",", ",", ",", ",", "}", "(", ")", "(", ")", "(", "sslBundle", ")", "(", ")", "(", "sslContext", ")", "\"", "ca.crt", "\"", "\"", "server.crt", "\"", "\"", "server.key", "\"", "\"", "client.crt", "\"", "\"", "client.key", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 141, "ast_depth": 9, "n_identifiers": 17, "vocab_size": 38, "n_whitespaces": 51, "n_words": 44, "nloc": 10, "token_counts": 97}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-data-redis/src/dockerTest/java/org/springframework/boot/data/redis/docker/compose/RedisDockerComposeConnectionDetailsFactoryIntegrationTests.java#56-59", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-data-redis/src/dockerTest/java/org/springframework/boot/data/redis/docker/compose/RedisDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "runWithRedisStackCreatesConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.data.redis.docker.compose.RedisDockerComposeConnectionDetailsFactoryIntegrationTests#runWithRedisStackCreatesConnectionDetails", "start_line": 56, "end_line": 59, "signature": "runWithRedisStackCreatesConnectionDetails(RedisConnectionDetails connectionDetails)", "original_code": "@DockerComposeTest(composeFile = \"redis-compose.yaml\", image = TestImage.REDIS_STACK)\n\tvoid runWithRedisStackCreatesConnectionDetails(RedisConnectionDetails connectionDetails) {\n\t\tassertConnectionDetails(connectionDetails);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runWithRedisStackCreatesConnectionDetails", "(", ")", "{", "}", "@", "DockerComposeTest", "RedisConnectionDetails", "connectionDetails", ";", "(", ",", ")", "assertConnectionDetails", "composeFile", "=", "image", "=", "(", "connectionDetails", ")", "\"", "redis-compose.yaml", "\"", "TestImage", ".", "REDIS_STACK"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 43, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 21, "n_whitespaces": 15, "n_words": 14, "nloc": 4, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-data-redis/src/dockerTest/java/org/springframework/boot/data/redis/docker/compose/RedisDockerComposeConnectionDetailsFactoryIntegrationTests.java#61-64", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-data-redis/src/dockerTest/java/org/springframework/boot/data/redis/docker/compose/RedisDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "runWithRedisStackServerCreatesConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.data.redis.docker.compose.RedisDockerComposeConnectionDetailsFactoryIntegrationTests#runWithRedisStackServerCreatesConnectionDetails", "start_line": 61, "end_line": 64, "signature": "runWithRedisStackServerCreatesConnectionDetails(RedisConnectionDetails connectionDetails)", "original_code": "@DockerComposeTest(composeFile = \"redis-compose.yaml\", image = TestImage.REDIS_STACK_SERVER)\n\tvoid runWithRedisStackServerCreatesConnectionDetails(RedisConnectionDetails connectionDetails) {\n\t\tassertConnectionDetails(connectionDetails);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runWithRedisStackServerCreatesConnectionDetails", "(", ")", "{", "}", "@", "DockerComposeTest", "RedisConnectionDetails", "connectionDetails", ";", "(", ",", ")", "assertConnectionDetails", "composeFile", "=", "image", "=", "(", "connectionDetails", ")", "\"", "redis-compose.yaml", "\"", "TestImage", ".", "REDIS_STACK_SERVER"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 43, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 21, "n_whitespaces": 15, "n_words": 14, "nloc": 4, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-data-redis/src/dockerTest/java/org/springframework/boot/data/redis/docker/compose/RedisDockerComposeConnectionDetailsFactoryIntegrationTests.java#66-76", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-data-redis/src/dockerTest/java/org/springframework/boot/data/redis/docker/compose/RedisDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "assertConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.data.redis.docker.compose.RedisDockerComposeConnectionDetailsFactoryIntegrationTests#assertConnectionDetails", "start_line": 66, "end_line": 76, "signature": "assertConnectionDetails(RedisConnectionDetails connectionDetails)", "original_code": "private void assertConnectionDetails(RedisConnectionDetails connectionDetails) {\n\t\tassertThat(connectionDetails.getUsername()).isNull();\n\t\tassertThat(connectionDetails.getPassword()).isNull();\n\t\tassertThat(connectionDetails.getCluster()).isNull();\n\t\tassertThat(connectionDetails.getSentinel()).isNull();\n\t\tStandalone standalone = connectionDetails.getStandalone();\n\t\tassertThat(standalone).isNotNull();\n\t\tassertThat(standalone.getDatabase()).isZero();\n\t\tassertThat(standalone.getPort()).isGreaterThan(0);\n\t\tassertThat(standalone.getHost()).isNotNull();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "assertConnectionDetails", "private", "(", ")", "{", "}", "RedisConnectionDetails", "connectionDetails", ";", ";", ";", ";", "Standalone", ";", ";", ";", ";", ";", ".", "isNull", ".", "isNull", ".", "isNull", ".", "isNull", "standalone", "=", ".", "isNotNull", ".", "isZero", ".", "isGreaterThan", ".", "isNotNull", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "connectionDetails", ".", "getStandalone", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", "0", ")", "assertThat", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", "standalone", ")", "(", ")", "(", ")", "(", ")", "connectionDetails", ".", "getUsername", "connectionDetails", ".", "getPassword", "connectionDetails", ".", "getCluster", "connectionDetails", ".", "getSentinel", "standalone", ".", "getDatabase", "standalone", ".", "getPort", "standalone", ".", "getHost", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 183, "ast_depth": 10, "n_identifiers": 16, "vocab_size": 28, "n_whitespaces": 36, "n_words": 41, "nloc": 11, "token_counts": 119}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-data-redis/src/main/java/org/springframework/boot/data/redis/docker/compose/RedisDockerComposeConnectionDetailsFactory.java#44-47", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-data-redis/src/main/java/org/springframework/boot/data/redis/docker/compose/RedisDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getDockerComposeConnectionDetails", "qualified_name": "org.springframework.boot.data.redis.docker.compose.RedisDockerComposeConnectionDetailsFactory#getDockerComposeConnectionDetails", "start_line": 44, "end_line": 47, "signature": "getDockerComposeConnectionDetails(DockerComposeConnectionSource source)", "original_code": "@Override\n\tprotected RedisConnectionDetails getDockerComposeConnectionDetails(DockerComposeConnectionSource source) {\n\t\treturn new RedisDockerComposeConnectionDetails(source.getRunningService());\n\t}", "doc_comment": ""}, "code_tokens": ["RedisConnectionDetails", "getDockerComposeConnectionDetails", "protected", "(", ")", "{", "}", "@", "Override", "DockerComposeConnectionSource", "source", "return", ";", "new", "RedisDockerComposeConnectionDetails", "(", ")", "source", ".", "getRunningService", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 34, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 17, "n_whitespaces": 13, "n_words": 11, "nloc": 4, "token_counts": 22}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-data-redis/src/main/java/org/springframework/boot/data/redis/docker/compose/RedisDockerComposeConnectionDetailsFactory.java#62-65", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-data-redis/src/main/java/org/springframework/boot/data/redis/docker/compose/RedisDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getStandalone", "qualified_name": "org.springframework.boot.data.redis.docker.compose.RedisDockerComposeConnectionDetailsFactory#getStandalone", "start_line": 62, "end_line": 65, "signature": "getStandalone()", "original_code": "@Override\n\t\tpublic Standalone getStandalone() {\n\t\t\treturn this.standalone;\n\t\t}", "doc_comment": ""}, "code_tokens": ["Standalone", "getStandalone", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "this", ".", "standalone"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-data-redis/src/main/java/org/springframework/boot/data/redis/testcontainers/RedisContainerConnectionDetailsFactory.java#53-61", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-data-redis/src/main/java/org/springframework/boot/data/redis/testcontainers/RedisContainerConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "sourceAccepts", "qualified_name": "org.springframework.boot.data.redis.testcontainers.RedisContainerConnectionDetailsFactory#sourceAccepts", "start_line": 53, "end_line": 61, "signature": "sourceAccepts(ContainerConnectionSource<Container<?>> source, Class<?> requiredContainerType,\n\t\t\tClass<?> requiredConnectionDetailsType)", "original_code": "@Override\n\tprotected boolean sourceAccepts(ContainerConnectionSource<Container<?>> source, Class<?> requiredContainerType,\n\t\t\tClass<?> requiredConnectionDetailsType) {\n\t\treturn super.sourceAccepts(source, requiredContainerType, requiredConnectionDetailsType)\n\t\t\t\t|| source.accepts(ContainerConnectionDetailsFactory.ANY_CONNECTION_NAME, RedisContainer.class,\n\t\t\t\t\t\trequiredConnectionDetailsType)\n\t\t\t\t|| source.accepts(ContainerConnectionDetailsFactory.ANY_CONNECTION_NAME, RedisStackContainer.class,\n\t\t\t\t\t\trequiredConnectionDetailsType);\n\t}", "doc_comment": ""}, "code_tokens": ["boolean", "sourceAccepts", "protected", "(", ",", ",", ")", "{", "}", "@", "Override", "source", "requiredContainerType", "requiredConnectionDetailsType", "return", ";", "ContainerConnectionSource", "Class", "Class", "||", "<", ">", "<", ">", "<", ">", "||", "source", ".", "accepts", "Container", "?", "?", "super", ".", "sourceAccepts", "source", ".", "accepts", "(", ",", ",", "requiredConnectionDetailsType", ")", "<", ">", "(", "source", ",", "requiredContainerType", ",", "requiredConnectionDetailsType", ")", "(", ",", ",", "requiredConnectionDetailsType", ")", "ContainerConnectionDetailsFactory", ".", "ANY_CONNECTION_NAME", "RedisStackContainer", ".", "class", "?", "ContainerConnectionDetailsFactory", ".", "ANY_CONNECTION_NAME", "RedisContainer", ".", "class"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 104, "ast_depth": 10, "n_identifiers": 8, "vocab_size": 30, "n_whitespaces": 49, "n_words": 31, "nloc": 9, "token_counts": 71}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-data-redis/src/main/java/org/springframework/boot/data/redis/testcontainers/RedisContainerConnectionDetailsFactory.java#63-66", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-data-redis/src/main/java/org/springframework/boot/data/redis/testcontainers/RedisContainerConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getContainerConnectionDetails", "qualified_name": "org.springframework.boot.data.redis.testcontainers.RedisContainerConnectionDetailsFactory#getContainerConnectionDetails", "start_line": 63, "end_line": 66, "signature": "getContainerConnectionDetails(ContainerConnectionSource<Container<?>> source)", "original_code": "@Override\n\tprotected RedisConnectionDetails getContainerConnectionDetails(ContainerConnectionSource<Container<?>> source) {\n\t\treturn new RedisContainerConnectionDetails(source);\n\t}", "doc_comment": ""}, "code_tokens": ["RedisConnectionDetails", "getContainerConnectionDetails", "protected", "(", ")", "{", "}", "@", "Override", "source", "return", ";", "ContainerConnectionSource", "new", "RedisContainerConnectionDetails", "<", ">", "(", "source", ")", "Container", "<", ">", "?"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 39, "ast_depth": 10, "n_identifiers": 3, "vocab_size": 19, "n_whitespaces": 13, "n_words": 11, "nloc": 4, "token_counts": 24}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-data-redis/src/main/java/org/springframework/boot/data/redis/testcontainers/RedisContainerConnectionDetailsFactory.java#78-82", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-data-redis/src/main/java/org/springframework/boot/data/redis/testcontainers/RedisContainerConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getStandalone", "qualified_name": "org.springframework.boot.data.redis.testcontainers.RedisContainerConnectionDetailsFactory#getStandalone", "start_line": 78, "end_line": 82, "signature": "getStandalone()", "original_code": "@Override\n\t\tpublic Standalone getStandalone() {\n\t\t\treturn Standalone.of(getContainer().getHost(), getContainer().getMappedPort(REDIS_PORT),\n\t\t\t\t\tsuper.getSslBundle());\n\t\t}", "doc_comment": ""}, "code_tokens": ["Standalone", "getStandalone", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "Standalone", ".", "of", "(", ",", ",", ")", ".", "getHost", ".", "getMappedPort", "super", ".", "getSslBundle", "getContainer", "(", ")", "getContainer", "(", "REDIS_PORT", ")", "(", ")", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 57, "ast_depth": 10, "n_identifiers": 9, "vocab_size": 20, "n_whitespaces": 21, "n_words": 14, "nloc": 5, "token_counts": 38}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-elasticsearch/src/dockerTest/java/org/springframework/boot/elasticsearch/docker/compose/ElasticsearchDockerComposeConnectionDetailsFactoryIntegrationTests.java#37-40", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-elasticsearch/src/dockerTest/java/org/springframework/boot/elasticsearch/docker/compose/ElasticsearchDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "runCreatesConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.elasticsearch.docker.compose.ElasticsearchDockerComposeConnectionDetailsFactoryIntegrationTests#runCreatesConnectionDetails", "start_line": 37, "end_line": 40, "signature": "runCreatesConnectionDetails(ElasticsearchConnectionDetails connectionDetails)", "original_code": "@DockerComposeTest(composeFile = \"elasticsearch-compose.yaml\", image = TestImage.ELASTICSEARCH_9)\n\tvoid runCreatesConnectionDetails(ElasticsearchConnectionDetails connectionDetails) {\n\t\tassertConnectionDetails(connectionDetails);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runCreatesConnectionDetails", "(", ")", "{", "}", "@", "DockerComposeTest", "ElasticsearchConnectionDetails", "connectionDetails", ";", "(", ",", ")", "assertConnectionDetails", "composeFile", "=", "image", "=", "(", "connectionDetails", ")", "\"", "elasticsearch-compose.yaml", "\"", "TestImage", ".", "ELASTICSEARCH_9"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 43, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 21, "n_whitespaces": 15, "n_words": 14, "nloc": 4, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-elasticsearch/src/dockerTest/java/org/springframework/boot/elasticsearch/docker/compose/ElasticsearchDockerComposeConnectionDetailsFactoryIntegrationTests.java#42-53", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-elasticsearch/src/dockerTest/java/org/springframework/boot/elasticsearch/docker/compose/ElasticsearchDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "assertConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.elasticsearch.docker.compose.ElasticsearchDockerComposeConnectionDetailsFactoryIntegrationTests#assertConnectionDetails", "start_line": 42, "end_line": 53, "signature": "assertConnectionDetails(ElasticsearchConnectionDetails connectionDetails)", "original_code": "private void assertConnectionDetails(ElasticsearchConnectionDetails connectionDetails) {\n\t\tassertThat(connectionDetails.getUsername()).isEqualTo(\"elastic\");\n\t\tassertThat(connectionDetails.getPassword()).isEqualTo(\"secret\");\n\t\tassertThat(connectionDetails.getPathPrefix()).isNull();\n\t\tassertThat(connectionDetails.getNodes()).hasSize(1);\n\t\tNode node = connectionDetails.getNodes().get(0);\n\t\tassertThat(node.hostname()).isNotNull();\n\t\tassertThat(node.port()).isGreaterThan(0);\n\t\tassertThat(node.protocol()).isEqualTo(Protocol.HTTP);\n\t\tassertThat(node.username()).isEqualTo(\"elastic\");\n\t\tassertThat(node.password()).isEqualTo(\"secret\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "assertConnectionDetails", "private", "(", ")", "{", "}", "ElasticsearchConnectionDetails", "connectionDetails", ";", ";", ";", ";", "Node", ";", ";", ";", ";", ";", ";", ".", "isEqualTo", ".", "isEqualTo", ".", "isNull", ".", "hasSize", "node", "=", ".", "isNotNull", ".", "isGreaterThan", ".", "isEqualTo", ".", "isEqualTo", ".", "isEqualTo", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", "1", ")", ".", "get", "assertThat", "(", ")", "assertThat", "(", "0", ")", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "(", ")", "\"", "elastic", "\"", "(", ")", "\"", "secret", "\"", "(", ")", "(", ")", "connectionDetails", ".", "getNodes", "(", "0", ")", "(", ")", "(", ")", "(", ")", "Protocol", ".", "HTTP", "(", ")", "\"", "elastic", "\"", "(", ")", "\"", "secret", "\"", "connectionDetails", ".", "getUsername", "connectionDetails", ".", "getPassword", "connectionDetails", ".", "getPathPrefix", "connectionDetails", ".", "getNodes", "(", ")", "node", ".", "hostname", "node", ".", "port", "node", ".", "protocol", "node", ".", "username", "node", ".", "password", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 237, "ast_depth": 10, "n_identifiers": 21, "vocab_size": 37, "n_whitespaces": 39, "n_words": 55, "nloc": 12, "token_counts": 157}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-elasticsearch/src/main/java/org/springframework/boot/elasticsearch/docker/compose/ElasticsearchDockerComposeConnectionDetailsFactory.java#47-50", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-elasticsearch/src/main/java/org/springframework/boot/elasticsearch/docker/compose/ElasticsearchDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getDockerComposeConnectionDetails", "qualified_name": "org.springframework.boot.elasticsearch.docker.compose.ElasticsearchDockerComposeConnectionDetailsFactory#getDockerComposeConnectionDetails", "start_line": 47, "end_line": 50, "signature": "getDockerComposeConnectionDetails(DockerComposeConnectionSource source)", "original_code": "@Override\n\tprotected ElasticsearchConnectionDetails getDockerComposeConnectionDetails(DockerComposeConnectionSource source) {\n\t\treturn new ElasticsearchDockerComposeConnectionDetails(source.getRunningService());\n\t}", "doc_comment": ""}, "code_tokens": ["ElasticsearchConnectionDetails", "getDockerComposeConnectionDetails", "protected", "(", ")", "{", "}", "@", "Override", "DockerComposeConnectionSource", "source", "return", ";", "new", "ElasticsearchDockerComposeConnectionDetails", "(", ")", "source", ".", "getRunningService", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 34, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 17, "n_whitespaces": 13, "n_words": 11, "nloc": 4, "token_counts": 22}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-elasticsearch/src/main/java/org/springframework/boot/elasticsearch/docker/compose/ElasticsearchDockerComposeConnectionDetailsFactory.java#70-73", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-elasticsearch/src/main/java/org/springframework/boot/elasticsearch/docker/compose/ElasticsearchDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getUsername", "qualified_name": "org.springframework.boot.elasticsearch.docker.compose.ElasticsearchDockerComposeConnectionDetailsFactory#getUsername", "start_line": 70, "end_line": 73, "signature": "getUsername()", "original_code": "@Override\n\t\tpublic String getUsername() {\n\t\t\treturn \"elastic\";\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getUsername", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "\"", "elastic", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 13, "n_whitespaces": 14, "n_words": 6, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-elasticsearch/src/main/java/org/springframework/boot/elasticsearch/docker/compose/ElasticsearchDockerComposeConnectionDetailsFactory.java#75-78", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-elasticsearch/src/main/java/org/springframework/boot/elasticsearch/docker/compose/ElasticsearchDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getPassword", "qualified_name": "org.springframework.boot.elasticsearch.docker.compose.ElasticsearchDockerComposeConnectionDetailsFactory#getPassword", "start_line": 75, "end_line": 78, "signature": "getPassword()", "original_code": "@Override\n\t\tpublic @Nullable String getPassword() {\n\t\t\treturn this.environment.getPassword();\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getPassword", "public", "(", ")", "{", "}", "@", "Override", "@", "Nullable", "return", ";", ".", "getPassword", "this", ".", "environment", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 31, "ast_depth": 7, "n_identifiers": 4, "vocab_size": 15, "n_whitespaces": 15, "n_words": 9, "nloc": 4, "token_counts": 20}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-elasticsearch/src/main/java/org/springframework/boot/elasticsearch/docker/compose/ElasticsearchDockerComposeConnectionDetailsFactory.java#80-83", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-elasticsearch/src/main/java/org/springframework/boot/elasticsearch/docker/compose/ElasticsearchDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getNodes", "qualified_name": "org.springframework.boot.elasticsearch.docker.compose.ElasticsearchDockerComposeConnectionDetailsFactory#getNodes", "start_line": 80, "end_line": 83, "signature": "getNodes()", "original_code": "@Override\n\t\tpublic List<Node> getNodes() {\n\t\t\treturn this.nodes;\n\t\t}", "doc_comment": ""}, "code_tokens": ["getNodes", "public", "List", "(", ")", "{", "}", "@", "Override", "<", "Node", ">", "return", ";", "this", ".", "nodes"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 27, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 17, "n_whitespaces": 14, "n_words": 8, "nloc": 4, "token_counts": 17}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-jdbc/src/dockerTest/java/org/springframework/boot/jdbc/docker/compose/ClickHouseJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#38-42", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-jdbc/src/dockerTest/java/org/springframework/boot/jdbc/docker/compose/ClickHouseJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "runCreatesConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.jdbc.docker.compose.ClickHouseJdbcDockerComposeConnectionDetailsFactoryIntegrationTests#runCreatesConnectionDetails", "start_line": 38, "end_line": 42, "signature": "runCreatesConnectionDetails(JdbcConnectionDetails connectionDetails)", "original_code": "@DockerComposeTest(composeFile = \"clickhouse-compose.yaml\", image = TestImage.CLICKHOUSE)\n\tvoid runCreatesConnectionDetails(JdbcConnectionDetails connectionDetails) throws ClassNotFoundException {\n\t\tassertConnectionDetails(connectionDetails);\n\t\tcheckDatabaseAccess(connectionDetails);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runCreatesConnectionDetails", "(", ")", "throws", "ClassNotFoundException", "{", "}", "@", "DockerComposeTest", "JdbcConnectionDetails", "connectionDetails", ";", ";", "(", ",", ")", "assertConnectionDetails", "checkDatabaseAccess", "composeFile", "=", "image", "=", "(", "connectionDetails", ")", "(", "connectionDetails", ")", "\"", "clickhouse-compose.yaml", "\"", "TestImage", ".", "CLICKHOUSE"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 54, "ast_depth": 8, "n_identifiers": 9, "vocab_size": 24, "n_whitespaces": 20, "n_words": 18, "nloc": 5, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-jdbc/src/dockerTest/java/org/springframework/boot/jdbc/docker/compose/ClickHouseJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#44-48", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-jdbc/src/dockerTest/java/org/springframework/boot/jdbc/docker/compose/ClickHouseJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "assertConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.jdbc.docker.compose.ClickHouseJdbcDockerComposeConnectionDetailsFactoryIntegrationTests#assertConnectionDetails", "start_line": 44, "end_line": 48, "signature": "assertConnectionDetails(JdbcConnectionDetails connectionDetails)", "original_code": "private void assertConnectionDetails(JdbcConnectionDetails connectionDetails) {\n\t\tassertThat(connectionDetails.getUsername()).isEqualTo(\"myuser\");\n\t\tassertThat(connectionDetails.getPassword()).isEqualTo(\"secret\");\n\t\tassertThat(connectionDetails.getJdbcUrl()).startsWith(\"jdbc:clickhouse://\").endsWith(\"/mydatabase\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "assertConnectionDetails", "private", "(", ")", "{", "}", "JdbcConnectionDetails", "connectionDetails", ";", ";", ";", ".", "isEqualTo", ".", "isEqualTo", ".", "endsWith", "assertThat", "(", ")", "assertThat", "(", ")", ".", "startsWith", "(", ")", "(", ")", "\"", "myuser", "\"", "(", ")", "\"", "secret", "\"", "assertThat", "(", ")", "\"", "/mydatabase", "\"", "connectionDetails", ".", "getUsername", "connectionDetails", ".", "getPassword", "(", ")", "\"", "jdbc:clickhouse://", "\"", "(", ")", "(", ")", "connectionDetails", ".", "getJdbcUrl", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 97, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 23, "n_whitespaces": 15, "n_words": 23, "nloc": 5, "token_counts": 64}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-jdbc/src/dockerTest/java/org/springframework/boot/jdbc/docker/compose/ClickHouseJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#50-60", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-jdbc/src/dockerTest/java/org/springframework/boot/jdbc/docker/compose/ClickHouseJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "checkDatabaseAccess", "qualified_name": "dockerTest.java.org.springframework.boot.jdbc.docker.compose.ClickHouseJdbcDockerComposeConnectionDetailsFactoryIntegrationTests#checkDatabaseAccess", "start_line": 50, "end_line": 60, "signature": "checkDatabaseAccess(JdbcConnectionDetails connectionDetails)", "original_code": "@SuppressWarnings(\"unchecked\")\n\tprivate void checkDatabaseAccess(JdbcConnectionDetails connectionDetails) throws ClassNotFoundException {\n\t\tSimpleDriverDataSource dataSource = new SimpleDriverDataSource();\n\t\tdataSource.setUrl(connectionDetails.getJdbcUrl());\n\t\tdataSource.setUsername(connectionDetails.getUsername());\n\t\tdataSource.setPassword(connectionDetails.getPassword());\n\t\tdataSource.setDriverClass((Class<? extends Driver>) ClassUtils.forName(connectionDetails.getDriverClassName(),\n\t\t\t\tgetClass().getClassLoader()));\n\t\tJdbcTemplate template = new JdbcTemplate(dataSource);\n\t\tassertThat(template.queryForObject(DatabaseDriver.CLICKHOUSE.getValidationQuery(), Integer.class)).isEqualTo(1);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "checkDatabaseAccess", "private", "(", ")", "throws", "ClassNotFoundException", "{", "}", "@", "SuppressWarnings", "JdbcConnectionDetails", "connectionDetails", "SimpleDriverDataSource", ";", ";", ";", ";", ";", "JdbcTemplate", ";", ";", "(", ")", "dataSource", "=", "dataSource", ".", "setUrl", "dataSource", ".", "setUsername", "dataSource", ".", "setPassword", "dataSource", ".", "setDriverClass", "template", "=", ".", "isEqualTo", "\"", "unchecked", "\"", "new", "SimpleDriverDataSource", "(", ")", "(", ")", "(", ")", "(", ")", "new", "JdbcTemplate", "assertThat", "(", "1", ")", "(", ")", "connectionDetails", ".", "getJdbcUrl", "connectionDetails", ".", "getUsername", "connectionDetails", ".", "getPassword", "(", ")", "(", "dataSource", ")", "(", ")", "(", ")", "(", ")", "(", ")", "Class", "ClassUtils", ".", "forName", "template", ".", "queryForObject", "<", ">", "(", ",", ")", "(", ",", ")", "?", "extends", "Driver", "connectionDetails", ".", "getDriverClassName", ".", "getClassLoader", ".", "getValidationQuery", "Integer", ".", "class", "(", ")", "getClass", "(", ")", "DatabaseDriver", ".", "CLICKHOUSE", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 184, "ast_depth": 13, "n_identifiers": 23, "vocab_size": 51, "n_whitespaces": 48, "n_words": 51, "nloc": 11, "token_counts": 125}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-jdbc/src/dockerTest/java/org/springframework/boot/jdbc/docker/compose/MariaDbJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#35-38", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-jdbc/src/dockerTest/java/org/springframework/boot/jdbc/docker/compose/MariaDbJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "runCreatesConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.jdbc.docker.compose.MariaDbJdbcDockerComposeConnectionDetailsFactoryIntegrationTests#runCreatesConnectionDetails", "start_line": 35, "end_line": 38, "signature": "runCreatesConnectionDetails(JdbcConnectionDetails connectionDetails)", "original_code": "@DockerComposeTest(composeFile = \"mariadb-compose.yaml\", image = TestImage.MARIADB)\n\tvoid runCreatesConnectionDetails(JdbcConnectionDetails connectionDetails) {\n\t\tassertConnectionDetails(connectionDetails);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runCreatesConnectionDetails", "(", ")", "{", "}", "@", "DockerComposeTest", "JdbcConnectionDetails", "connectionDetails", ";", "(", ",", ")", "assertConnectionDetails", "composeFile", "=", "image", "=", "(", "connectionDetails", ")", "\"", "mariadb-compose.yaml", "\"", "TestImage", ".", "MARIADB"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 43, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 21, "n_whitespaces": 15, "n_words": 14, "nloc": 4, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-jdbc/src/dockerTest/java/org/springframework/boot/jdbc/docker/compose/MariaDbJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#40-44", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-jdbc/src/dockerTest/java/org/springframework/boot/jdbc/docker/compose/MariaDbJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "assertConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.jdbc.docker.compose.MariaDbJdbcDockerComposeConnectionDetailsFactoryIntegrationTests#assertConnectionDetails", "start_line": 40, "end_line": 44, "signature": "assertConnectionDetails(JdbcConnectionDetails connectionDetails)", "original_code": "private void assertConnectionDetails(JdbcConnectionDetails connectionDetails) {\n\t\tassertThat(connectionDetails.getUsername()).isEqualTo(\"myuser\");\n\t\tassertThat(connectionDetails.getPassword()).isEqualTo(\"secret\");\n\t\tassertThat(connectionDetails.getJdbcUrl()).startsWith(\"jdbc:mariadb://\").endsWith(\"/mydatabase\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "assertConnectionDetails", "private", "(", ")", "{", "}", "JdbcConnectionDetails", "connectionDetails", ";", ";", ";", ".", "isEqualTo", ".", "isEqualTo", ".", "endsWith", "assertThat", "(", ")", "assertThat", "(", ")", ".", "startsWith", "(", ")", "(", ")", "\"", "myuser", "\"", "(", ")", "\"", "secret", "\"", "assertThat", "(", ")", "\"", "/mydatabase", "\"", "connectionDetails", ".", "getUsername", "connectionDetails", ".", "getPassword", "(", ")", "\"", "jdbc:mariadb://", "\"", "(", ")", "(", ")", "connectionDetails", ".", "getJdbcUrl", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 97, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 23, "n_whitespaces": 15, "n_words": 23, "nloc": 5, "token_counts": 64}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-jdbc/src/dockerTest/java/org/springframework/boot/jdbc/docker/compose/MySqlJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#35-38", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-jdbc/src/dockerTest/java/org/springframework/boot/jdbc/docker/compose/MySqlJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "runCreatesConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.jdbc.docker.compose.MySqlJdbcDockerComposeConnectionDetailsFactoryIntegrationTests#runCreatesConnectionDetails", "start_line": 35, "end_line": 38, "signature": "runCreatesConnectionDetails(JdbcConnectionDetails connectionDetails)", "original_code": "@DockerComposeTest(composeFile = \"mysql-compose.yaml\", image = TestImage.MYSQL)\n\tvoid runCreatesConnectionDetails(JdbcConnectionDetails connectionDetails) {\n\t\tassertConnectionDetails(connectionDetails);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runCreatesConnectionDetails", "(", ")", "{", "}", "@", "DockerComposeTest", "JdbcConnectionDetails", "connectionDetails", ";", "(", ",", ")", "assertConnectionDetails", "composeFile", "=", "image", "=", "(", "connectionDetails", ")", "\"", "mysql-compose.yaml", "\"", "TestImage", ".", "MYSQL"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 43, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 21, "n_whitespaces": 15, "n_words": 14, "nloc": 4, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-jdbc/src/dockerTest/java/org/springframework/boot/jdbc/docker/compose/MySqlJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#40-44", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-jdbc/src/dockerTest/java/org/springframework/boot/jdbc/docker/compose/MySqlJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "assertConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.jdbc.docker.compose.MySqlJdbcDockerComposeConnectionDetailsFactoryIntegrationTests#assertConnectionDetails", "start_line": 40, "end_line": 44, "signature": "assertConnectionDetails(JdbcConnectionDetails connectionDetails)", "original_code": "private void assertConnectionDetails(JdbcConnectionDetails connectionDetails) {\n\t\tassertThat(connectionDetails.getUsername()).isEqualTo(\"myuser\");\n\t\tassertThat(connectionDetails.getPassword()).isEqualTo(\"secret\");\n\t\tassertThat(connectionDetails.getJdbcUrl()).startsWith(\"jdbc:mysql://\").endsWith(\"/mydatabase\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "assertConnectionDetails", "private", "(", ")", "{", "}", "JdbcConnectionDetails", "connectionDetails", ";", ";", ";", ".", "isEqualTo", ".", "isEqualTo", ".", "endsWith", "assertThat", "(", ")", "assertThat", "(", ")", ".", "startsWith", "(", ")", "(", ")", "\"", "myuser", "\"", "(", ")", "\"", "secret", "\"", "assertThat", "(", ")", "\"", "/mydatabase", "\"", "connectionDetails", ".", "getUsername", "connectionDetails", ".", "getPassword", "(", ")", "\"", "jdbc:mysql://", "\"", "(", ")", "(", ")", "connectionDetails", ".", "getJdbcUrl", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 97, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 23, "n_whitespaces": 15, "n_words": 23, "nloc": 5, "token_counts": 64}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-jdbc/src/dockerTest/java/org/springframework/boot/jdbc/docker/compose/PostgresJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#42-46", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-jdbc/src/dockerTest/java/org/springframework/boot/jdbc/docker/compose/PostgresJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "runCreatesConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.jdbc.docker.compose.PostgresJdbcDockerComposeConnectionDetailsFactoryIntegrationTests#runCreatesConnectionDetails", "start_line": 42, "end_line": 46, "signature": "runCreatesConnectionDetails(JdbcConnectionDetails connectionDetails)", "original_code": "@DockerComposeTest(composeFile = \"postgres-compose.yaml\", image = TestImage.POSTGRESQL)\n\tvoid runCreatesConnectionDetails(JdbcConnectionDetails connectionDetails) throws ClassNotFoundException {\n\t\tassertConnectionDetails(connectionDetails);\n\t\tcheckDatabaseAccess(connectionDetails);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runCreatesConnectionDetails", "(", ")", "throws", "ClassNotFoundException", "{", "}", "@", "DockerComposeTest", "JdbcConnectionDetails", "connectionDetails", ";", ";", "(", ",", ")", "assertConnectionDetails", "checkDatabaseAccess", "composeFile", "=", "image", "=", "(", "connectionDetails", ")", "(", "connectionDetails", ")", "\"", "postgres-compose.yaml", "\"", "TestImage", ".", "POSTGRESQL"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 54, "ast_depth": 8, "n_identifiers": 9, "vocab_size": 24, "n_whitespaces": 20, "n_words": 18, "nloc": 5, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-jdbc/src/dockerTest/java/org/springframework/boot/jdbc/docker/compose/PostgresJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#48-55", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-jdbc/src/dockerTest/java/org/springframework/boot/jdbc/docker/compose/PostgresJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "runCreatesConnectionDetailsThatCanAccessDatabaseWhenHostAuthMethodIsTrust", "qualified_name": "dockerTest.java.org.springframework.boot.jdbc.docker.compose.PostgresJdbcDockerComposeConnectionDetailsFactoryIntegrationTests#runCreatesConnectionDetailsThatCanAccessDatabaseWhenHostAuthMethodIsTrust", "start_line": 48, "end_line": 55, "signature": "runCreatesConnectionDetailsThatCanAccessDatabaseWhenHostAuthMethodIsTrust(\n\t\t\tJdbcConnectionDetails connectionDetails)", "original_code": "@DockerComposeTest(composeFile = \"postgres-with-trust-host-auth-method-compose.yaml\", image = TestImage.POSTGRESQL)\n\tvoid runCreatesConnectionDetailsThatCanAccessDatabaseWhenHostAuthMethodIsTrust(\n\t\t\tJdbcConnectionDetails connectionDetails) throws ClassNotFoundException {\n\t\tassertThat(connectionDetails.getUsername()).isEqualTo(\"myuser\");\n\t\tassertThat(connectionDetails.getPassword()).isNull();\n\t\tassertThat(connectionDetails.getJdbcUrl()).startsWith(\"jdbc:postgresql://\").endsWith(\"/mydatabase\");\n\t\tcheckDatabaseAccess(connectionDetails);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runCreatesConnectionDetailsThatCanAccessDatabaseWhenHostAuthMethodIsTrust", "(", ")", "throws", "ClassNotFoundException", "{", "}", "@", "DockerComposeTest", "JdbcConnectionDetails", "connectionDetails", ";", ";", ";", ";", "(", ",", ")", ".", "isEqualTo", ".", "isNull", ".", "endsWith", "checkDatabaseAccess", "composeFile", "=", "image", "=", "assertThat", "(", ")", "assertThat", "(", ")", ".", "startsWith", "(", ")", "(", "connectionDetails", ")", "\"", "postgres-with-trust-host-auth-method-compose.yaml", "\"", "TestImage", ".", "POSTGRESQL", "(", ")", "\"", "myuser", "\"", "(", ")", "assertThat", "(", ")", "\"", "/mydatabase", "\"", "connectionDetails", ".", "getUsername", "connectionDetails", ".", "getPassword", "(", ")", "\"", "jdbc:postgresql://", "\"", "(", ")", "(", ")", "connectionDetails", ".", "getJdbcUrl", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 124, "ast_depth": 11, "n_identifiers": 16, "vocab_size": 34, "n_whitespaces": 30, "n_words": 38, "nloc": 8, "token_counts": 82}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-jdbc/src/dockerTest/java/org/springframework/boot/jdbc/docker/compose/PostgresJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#57-66", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-jdbc/src/dockerTest/java/org/springframework/boot/jdbc/docker/compose/PostgresJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "runCreatesConnectionDetailsApplicationName", "qualified_name": "dockerTest.java.org.springframework.boot.jdbc.docker.compose.PostgresJdbcDockerComposeConnectionDetailsFactoryIntegrationTests#runCreatesConnectionDetailsApplicationName", "start_line": 57, "end_line": 66, "signature": "runCreatesConnectionDetailsApplicationName(JdbcConnectionDetails connectionDetails)", "original_code": "@DockerComposeTest(composeFile = \"postgres-application-name-compose.yaml\", image = TestImage.POSTGRESQL)\n\tvoid runCreatesConnectionDetailsApplicationName(JdbcConnectionDetails connectionDetails)\n\t\t\tthrows ClassNotFoundException {\n\t\tassertThat(connectionDetails.getUsername()).isEqualTo(\"myuser\");\n\t\tassertThat(connectionDetails.getPassword()).isEqualTo(\"secret\");\n\t\tassertThat(connectionDetails.getJdbcUrl()).startsWith(\"jdbc:postgresql://\")\n\t\t\t.endsWith(\"?ApplicationName=spring+boot\");\n\t\tassertThat(executeQuery(connectionDetails, \"select current_setting('application_name')\", String.class))\n\t\t\t.isEqualTo(\"spring boot\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runCreatesConnectionDetailsApplicationName", "(", ")", "throws", "ClassNotFoundException", "{", "}", "@", "DockerComposeTest", "JdbcConnectionDetails", "connectionDetails", ";", ";", ";", ";", "(", ",", ")", ".", "isEqualTo", ".", "isEqualTo", ".", "endsWith", ".", "isEqualTo", "composeFile", "=", "image", "=", "assertThat", "(", ")", "assertThat", "(", ")", ".", "startsWith", "(", ")", "assertThat", "(", ")", "\"", "postgres-application-name-compose.yaml", "\"", "TestImage", ".", "POSTGRESQL", "(", ")", "\"", "myuser", "\"", "(", ")", "\"", "secret", "\"", "assertThat", "(", ")", "\"", "?ApplicationName=spring+boot", "\"", "(", ")", "\"", "spring boot", "\"", "connectionDetails", ".", "getUsername", "connectionDetails", ".", "getPassword", "(", ")", "\"", "jdbc:postgresql://", "\"", "executeQuery", "(", ")", "(", ")", "connectionDetails", ".", "getJdbcUrl", "(", "connectionDetails", ",", ",", ")", "(", ")", "\"", "select current_setting('application_name')", "\"", "String", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 153, "ast_depth": 11, "n_identifiers": 15, "vocab_size": 38, "n_whitespaces": 41, "n_words": 47, "nloc": 10, "token_counts": 103}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-jdbc/src/dockerTest/java/org/springframework/boot/jdbc/docker/compose/PostgresJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#68-72", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-jdbc/src/dockerTest/java/org/springframework/boot/jdbc/docker/compose/PostgresJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "assertConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.jdbc.docker.compose.PostgresJdbcDockerComposeConnectionDetailsFactoryIntegrationTests#assertConnectionDetails", "start_line": 68, "end_line": 72, "signature": "assertConnectionDetails(JdbcConnectionDetails connectionDetails)", "original_code": "private void assertConnectionDetails(JdbcConnectionDetails connectionDetails) {\n\t\tassertThat(connectionDetails.getUsername()).isEqualTo(\"myuser\");\n\t\tassertThat(connectionDetails.getPassword()).isEqualTo(\"secret\");\n\t\tassertThat(connectionDetails.getJdbcUrl()).startsWith(\"jdbc:postgresql://\").endsWith(\"/mydatabase\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "assertConnectionDetails", "private", "(", ")", "{", "}", "JdbcConnectionDetails", "connectionDetails", ";", ";", ";", ".", "isEqualTo", ".", "isEqualTo", ".", "endsWith", "assertThat", "(", ")", "assertThat", "(", ")", ".", "startsWith", "(", ")", "(", ")", "\"", "myuser", "\"", "(", ")", "\"", "secret", "\"", "assertThat", "(", ")", "\"", "/mydatabase", "\"", "connectionDetails", ".", "getUsername", "connectionDetails", ".", "getPassword", "(", ")", "\"", "jdbc:postgresql://", "\"", "(", ")", "(", ")", "connectionDetails", ".", "getJdbcUrl", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 97, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 23, "n_whitespaces": 15, "n_words": 23, "nloc": 5, "token_counts": 64}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-jdbc/src/dockerTest/java/org/springframework/boot/jdbc/docker/compose/PostgresJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#74-77", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-jdbc/src/dockerTest/java/org/springframework/boot/jdbc/docker/compose/PostgresJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "checkDatabaseAccess", "qualified_name": "dockerTest.java.org.springframework.boot.jdbc.docker.compose.PostgresJdbcDockerComposeConnectionDetailsFactoryIntegrationTests#checkDatabaseAccess", "start_line": 74, "end_line": 77, "signature": "checkDatabaseAccess(JdbcConnectionDetails connectionDetails)", "original_code": "private void checkDatabaseAccess(JdbcConnectionDetails connectionDetails) throws ClassNotFoundException {\n\t\tassertThat(executeQuery(connectionDetails, DatabaseDriver.POSTGRESQL.getValidationQuery(), Integer.class))\n\t\t\t.isEqualTo(1);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "checkDatabaseAccess", "private", "(", ")", "throws", "ClassNotFoundException", "{", "}", "JdbcConnectionDetails", "connectionDetails", ";", ".", "isEqualTo", "assertThat", "(", "1", ")", "(", ")", "executeQuery", "(", "connectionDetails", ",", ",", ")", ".", "getValidationQuery", "Integer", ".", "class", "DatabaseDriver", ".", "POSTGRESQL", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 54, "ast_depth": 12, "n_identifiers": 8, "vocab_size": 23, "n_whitespaces": 17, "n_words": 17, "nloc": 4, "token_counts": 36}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-jdbc/src/dockerTest/java/org/springframework/boot/jdbc/docker/compose/PostgresJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#79-89", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-jdbc/src/dockerTest/java/org/springframework/boot/jdbc/docker/compose/PostgresJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "executeQuery", "qualified_name": "dockerTest.java.org.springframework.boot.jdbc.docker.compose.PostgresJdbcDockerComposeConnectionDetailsFactoryIntegrationTests#executeQuery", "start_line": 79, "end_line": 89, "signature": "executeQuery(JdbcConnectionDetails connectionDetails, String sql, Class<T> resultClass)", "original_code": "@SuppressWarnings(\"unchecked\")\n\tprivate <T> T executeQuery(JdbcConnectionDetails connectionDetails, String sql, Class<T> resultClass)\n\t\t\tthrows ClassNotFoundException {\n\t\tSimpleDriverDataSource dataSource = new SimpleDriverDataSource();\n\t\tdataSource.setUrl(connectionDetails.getJdbcUrl());\n\t\tdataSource.setUsername(connectionDetails.getUsername());\n\t\tdataSource.setPassword(connectionDetails.getPassword());\n\t\tdataSource.setDriverClass((Class<? extends Driver>) ClassUtils.forName(connectionDetails.getDriverClassName(),\n\t\t\t\tgetClass().getClassLoader()));\n\t\treturn new JdbcTemplate(dataSource).queryForObject(sql, resultClass);\n\t}", "doc_comment": ""}, "code_tokens": ["T", "executeQuery", "private", "<", ">", "(", ",", ",", ")", "throws", "ClassNotFoundException", "{", "}", "@", "SuppressWarnings", "T", "JdbcConnectionDetails", "connectionDetails", "String", "sql", "resultClass", "SimpleDriverDataSource", ";", ";", ";", ";", ";", "return", ";", "(", ")", "Class", "dataSource", "=", "dataSource", ".", "setUrl", "dataSource", ".", "setUsername", "dataSource", ".", "setPassword", "dataSource", ".", "setDriverClass", ".", "queryForObject", "\"", "unchecked", "\"", "<", "T", ">", "new", "SimpleDriverDataSource", "(", ")", "(", ")", "(", ")", "(", ")", "new", "JdbcTemplate", "(", "sql", ",", "resultClass", ")", "(", ")", "connectionDetails", ".", "getJdbcUrl", "connectionDetails", ".", "getUsername", "connectionDetails", ".", "getPassword", "(", ")", "(", "dataSource", ")", "(", ")", "(", ")", "(", ")", "Class", "ClassUtils", ".", "forName", "<", ">", "(", ",", ")", "?", "extends", "Driver", "connectionDetails", ".", "getDriverClassName", ".", "getClassLoader", "(", ")", "getClass", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 172, "ast_depth": 13, "n_identifiers": 19, "vocab_size": 46, "n_whitespaces": 51, "n_words": 49, "nloc": 11, "token_counts": 117}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-jdbc/src/main/java/org/springframework/boot/jdbc/docker/compose/ClickHouseJdbcDockerComposeConnectionDetailsFactory.java#37-40", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-jdbc/src/main/java/org/springframework/boot/jdbc/docker/compose/ClickHouseJdbcDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getDockerComposeConnectionDetails", "qualified_name": "org.springframework.boot.jdbc.docker.compose.ClickHouseJdbcDockerComposeConnectionDetailsFactory#getDockerComposeConnectionDetails", "start_line": 37, "end_line": 40, "signature": "getDockerComposeConnectionDetails(DockerComposeConnectionSource source)", "original_code": "@Override\n\tprotected JdbcConnectionDetails getDockerComposeConnectionDetails(DockerComposeConnectionSource source) {\n\t\treturn new ClickhouseJdbcDockerComposeConnectionDetails(source.getRunningService());\n\t}", "doc_comment": ""}, "code_tokens": ["JdbcConnectionDetails", "getDockerComposeConnectionDetails", "protected", "(", ")", "{", "}", "@", "Override", "DockerComposeConnectionSource", "source", "return", ";", "new", "ClickhouseJdbcDockerComposeConnectionDetails", "(", ")", "source", ".", "getRunningService", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 34, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 17, "n_whitespaces": 13, "n_words": 11, "nloc": 4, "token_counts": 22}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-jdbc/src/main/java/org/springframework/boot/jdbc/docker/compose/ClickHouseJdbcDockerComposeConnectionDetailsFactory.java#61-64", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-jdbc/src/main/java/org/springframework/boot/jdbc/docker/compose/ClickHouseJdbcDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getUsername", "qualified_name": "org.springframework.boot.jdbc.docker.compose.ClickHouseJdbcDockerComposeConnectionDetailsFactory#getUsername", "start_line": 61, "end_line": 64, "signature": "getUsername()", "original_code": "@Override\n\t\tpublic String getUsername() {\n\t\t\treturn this.environment.getUsername();\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getUsername", "public", "(", ")", "{", "}", "@", "Override", "return", ";", ".", "getUsername", "this", ".", "environment", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 8, "nloc": 4, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-jdbc/src/main/java/org/springframework/boot/jdbc/docker/compose/ClickHouseJdbcDockerComposeConnectionDetailsFactory.java#66-69", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-jdbc/src/main/java/org/springframework/boot/jdbc/docker/compose/ClickHouseJdbcDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getPassword", "qualified_name": "org.springframework.boot.jdbc.docker.compose.ClickHouseJdbcDockerComposeConnectionDetailsFactory#getPassword", "start_line": 66, "end_line": 69, "signature": "getPassword()", "original_code": "@Override\n\t\tpublic String getPassword() {\n\t\t\treturn this.environment.getPassword();\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getPassword", "public", "(", ")", "{", "}", "@", "Override", "return", ";", ".", "getPassword", "this", ".", "environment", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 8, "nloc": 4, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-jdbc/src/main/java/org/springframework/boot/jdbc/docker/compose/ClickHouseJdbcDockerComposeConnectionDetailsFactory.java#71-74", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-jdbc/src/main/java/org/springframework/boot/jdbc/docker/compose/ClickHouseJdbcDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getJdbcUrl", "qualified_name": "org.springframework.boot.jdbc.docker.compose.ClickHouseJdbcDockerComposeConnectionDetailsFactory#getJdbcUrl", "start_line": 71, "end_line": 74, "signature": "getJdbcUrl()", "original_code": "@Override\n\t\tpublic String getJdbcUrl() {\n\t\t\treturn this.jdbcUrl;\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getJdbcUrl", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "this", ".", "jdbcUrl"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-jdbc/src/main/java/org/springframework/boot/jdbc/docker/compose/MariaDbJdbcDockerComposeConnectionDetailsFactory.java#40-43", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-jdbc/src/main/java/org/springframework/boot/jdbc/docker/compose/MariaDbJdbcDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getDockerComposeConnectionDetails", "qualified_name": "org.springframework.boot.jdbc.docker.compose.MariaDbJdbcDockerComposeConnectionDetailsFactory#getDockerComposeConnectionDetails", "start_line": 40, "end_line": 43, "signature": "getDockerComposeConnectionDetails(DockerComposeConnectionSource source)", "original_code": "@Override\n\tprotected JdbcConnectionDetails getDockerComposeConnectionDetails(DockerComposeConnectionSource source) {\n\t\treturn new MariaDbJdbcDockerComposeConnectionDetails(source.getRunningService());\n\t}", "doc_comment": ""}, "code_tokens": ["JdbcConnectionDetails", "getDockerComposeConnectionDetails", "protected", "(", ")", "{", "}", "@", "Override", "DockerComposeConnectionSource", "source", "return", ";", "new", "MariaDbJdbcDockerComposeConnectionDetails", "(", ")", "source", ".", "getRunningService", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 34, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 17, "n_whitespaces": 13, "n_words": 11, "nloc": 4, "token_counts": 22}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-jdbc/src/main/java/org/springframework/boot/jdbc/docker/compose/MariaDbJdbcDockerComposeConnectionDetailsFactory.java#63-66", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-jdbc/src/main/java/org/springframework/boot/jdbc/docker/compose/MariaDbJdbcDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getUsername", "qualified_name": "org.springframework.boot.jdbc.docker.compose.MariaDbJdbcDockerComposeConnectionDetailsFactory#getUsername", "start_line": 63, "end_line": 66, "signature": "getUsername()", "original_code": "@Override\n\t\tpublic String getUsername() {\n\t\t\treturn this.environment.getUsername();\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getUsername", "public", "(", ")", "{", "}", "@", "Override", "return", ";", ".", "getUsername", "this", ".", "environment", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 8, "nloc": 4, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-jdbc/src/main/java/org/springframework/boot/jdbc/docker/compose/MariaDbJdbcDockerComposeConnectionDetailsFactory.java#68-71", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-jdbc/src/main/java/org/springframework/boot/jdbc/docker/compose/MariaDbJdbcDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getPassword", "qualified_name": "org.springframework.boot.jdbc.docker.compose.MariaDbJdbcDockerComposeConnectionDetailsFactory#getPassword", "start_line": 68, "end_line": 71, "signature": "getPassword()", "original_code": "@Override\n\t\tpublic String getPassword() {\n\t\t\treturn this.environment.getPassword();\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getPassword", "public", "(", ")", "{", "}", "@", "Override", "return", ";", ".", "getPassword", "this", ".", "environment", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 8, "nloc": 4, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-jdbc/src/main/java/org/springframework/boot/jdbc/docker/compose/MariaDbJdbcDockerComposeConnectionDetailsFactory.java#73-76", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-jdbc/src/main/java/org/springframework/boot/jdbc/docker/compose/MariaDbJdbcDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getJdbcUrl", "qualified_name": "org.springframework.boot.jdbc.docker.compose.MariaDbJdbcDockerComposeConnectionDetailsFactory#getJdbcUrl", "start_line": 73, "end_line": 76, "signature": "getJdbcUrl()", "original_code": "@Override\n\t\tpublic String getJdbcUrl() {\n\t\t\treturn this.jdbcUrl;\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getJdbcUrl", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "this", ".", "jdbcUrl"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-jdbc/src/main/java/org/springframework/boot/jdbc/docker/compose/MySqlJdbcDockerComposeConnectionDetailsFactory.java#40-43", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-jdbc/src/main/java/org/springframework/boot/jdbc/docker/compose/MySqlJdbcDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getDockerComposeConnectionDetails", "qualified_name": "org.springframework.boot.jdbc.docker.compose.MySqlJdbcDockerComposeConnectionDetailsFactory#getDockerComposeConnectionDetails", "start_line": 40, "end_line": 43, "signature": "getDockerComposeConnectionDetails(DockerComposeConnectionSource source)", "original_code": "@Override\n\tprotected JdbcConnectionDetails getDockerComposeConnectionDetails(DockerComposeConnectionSource source) {\n\t\treturn new MySqlJdbcDockerComposeConnectionDetails(source.getRunningService());\n\t}", "doc_comment": ""}, "code_tokens": ["JdbcConnectionDetails", "getDockerComposeConnectionDetails", "protected", "(", ")", "{", "}", "@", "Override", "DockerComposeConnectionSource", "source", "return", ";", "new", "MySqlJdbcDockerComposeConnectionDetails", "(", ")", "source", ".", "getRunningService", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 34, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 17, "n_whitespaces": 13, "n_words": 11, "nloc": 4, "token_counts": 22}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-jdbc/src/main/java/org/springframework/boot/jdbc/docker/compose/MySqlJdbcDockerComposeConnectionDetailsFactory.java#63-66", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-jdbc/src/main/java/org/springframework/boot/jdbc/docker/compose/MySqlJdbcDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getUsername", "qualified_name": "org.springframework.boot.jdbc.docker.compose.MySqlJdbcDockerComposeConnectionDetailsFactory#getUsername", "start_line": 63, "end_line": 66, "signature": "getUsername()", "original_code": "@Override\n\t\tpublic String getUsername() {\n\t\t\treturn this.environment.getUsername();\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getUsername", "public", "(", ")", "{", "}", "@", "Override", "return", ";", ".", "getUsername", "this", ".", "environment", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 8, "nloc": 4, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-jdbc/src/main/java/org/springframework/boot/jdbc/docker/compose/MySqlJdbcDockerComposeConnectionDetailsFactory.java#68-71", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-jdbc/src/main/java/org/springframework/boot/jdbc/docker/compose/MySqlJdbcDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getPassword", "qualified_name": "org.springframework.boot.jdbc.docker.compose.MySqlJdbcDockerComposeConnectionDetailsFactory#getPassword", "start_line": 68, "end_line": 71, "signature": "getPassword()", "original_code": "@Override\n\t\tpublic String getPassword() {\n\t\t\treturn this.environment.getPassword();\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getPassword", "public", "(", ")", "{", "}", "@", "Override", "return", ";", ".", "getPassword", "this", ".", "environment", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 8, "nloc": 4, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-jdbc/src/main/java/org/springframework/boot/jdbc/docker/compose/MySqlJdbcDockerComposeConnectionDetailsFactory.java#73-76", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-jdbc/src/main/java/org/springframework/boot/jdbc/docker/compose/MySqlJdbcDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getJdbcUrl", "qualified_name": "org.springframework.boot.jdbc.docker.compose.MySqlJdbcDockerComposeConnectionDetailsFactory#getJdbcUrl", "start_line": 73, "end_line": 76, "signature": "getJdbcUrl()", "original_code": "@Override\n\t\tpublic String getJdbcUrl() {\n\t\t\treturn this.jdbcUrl;\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getJdbcUrl", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "this", ".", "jdbcUrl"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-jdbc/src/main/java/org/springframework/boot/jdbc/docker/compose/PostgresJdbcDockerComposeConnectionDetailsFactory.java#47-50", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-jdbc/src/main/java/org/springframework/boot/jdbc/docker/compose/PostgresJdbcDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getDockerComposeConnectionDetails", "qualified_name": "org.springframework.boot.jdbc.docker.compose.PostgresJdbcDockerComposeConnectionDetailsFactory#getDockerComposeConnectionDetails", "start_line": 47, "end_line": 50, "signature": "getDockerComposeConnectionDetails(DockerComposeConnectionSource source)", "original_code": "@Override\n\tprotected JdbcConnectionDetails getDockerComposeConnectionDetails(DockerComposeConnectionSource source) {\n\t\treturn new PostgresJdbcDockerComposeConnectionDetails(source.getRunningService(), source.getEnvironment());\n\t}", "doc_comment": ""}, "code_tokens": ["JdbcConnectionDetails", "getDockerComposeConnectionDetails", "protected", "(", ")", "{", "}", "@", "Override", "DockerComposeConnectionSource", "source", "return", ";", "new", "PostgresJdbcDockerComposeConnectionDetails", "(", ",", ")", "source", ".", "getRunningService", "source", ".", "getEnvironment", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 42, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 19, "n_whitespaces": 14, "n_words": 13, "nloc": 4, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-jdbc/src/main/java/org/springframework/boot/jdbc/docker/compose/PostgresJdbcDockerComposeConnectionDetailsFactory.java#71-74", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-jdbc/src/main/java/org/springframework/boot/jdbc/docker/compose/PostgresJdbcDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getUsername", "qualified_name": "org.springframework.boot.jdbc.docker.compose.PostgresJdbcDockerComposeConnectionDetailsFactory#getUsername", "start_line": 71, "end_line": 74, "signature": "getUsername()", "original_code": "@Override\n\t\tpublic String getUsername() {\n\t\t\treturn this.environment.getUsername();\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getUsername", "public", "(", ")", "{", "}", "@", "Override", "return", ";", ".", "getUsername", "this", ".", "environment", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 8, "nloc": 4, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-jdbc/src/main/java/org/springframework/boot/jdbc/docker/compose/PostgresJdbcDockerComposeConnectionDetailsFactory.java#76-79", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-jdbc/src/main/java/org/springframework/boot/jdbc/docker/compose/PostgresJdbcDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getPassword", "qualified_name": "org.springframework.boot.jdbc.docker.compose.PostgresJdbcDockerComposeConnectionDetailsFactory#getPassword", "start_line": 76, "end_line": 79, "signature": "getPassword()", "original_code": "@Override\n\t\tpublic @Nullable String getPassword() {\n\t\t\treturn this.environment.getPassword();\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getPassword", "public", "(", ")", "{", "}", "@", "Override", "@", "Nullable", "return", ";", ".", "getPassword", "this", ".", "environment", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 31, "ast_depth": 7, "n_identifiers": 4, "vocab_size": 15, "n_whitespaces": 15, "n_words": 9, "nloc": 4, "token_counts": 20}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-jdbc/src/main/java/org/springframework/boot/jdbc/docker/compose/PostgresJdbcDockerComposeConnectionDetailsFactory.java#81-84", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-jdbc/src/main/java/org/springframework/boot/jdbc/docker/compose/PostgresJdbcDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getJdbcUrl", "qualified_name": "org.springframework.boot.jdbc.docker.compose.PostgresJdbcDockerComposeConnectionDetailsFactory#getJdbcUrl", "start_line": 81, "end_line": 84, "signature": "getJdbcUrl()", "original_code": "@Override\n\t\tpublic String getJdbcUrl() {\n\t\t\treturn this.jdbcUrl;\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getJdbcUrl", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "this", ".", "jdbcUrl"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-jdbc/src/main/java/org/springframework/boot/jdbc/docker/compose/PostgresJdbcDockerComposeConnectionDetailsFactory.java#86-105", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-jdbc/src/main/java/org/springframework/boot/jdbc/docker/compose/PostgresJdbcDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "addApplicationNameIfNecessary", "qualified_name": "org.springframework.boot.jdbc.docker.compose.PostgresJdbcDockerComposeConnectionDetailsFactory#addApplicationNameIfNecessary", "start_line": 86, "end_line": 105, "signature": "addApplicationNameIfNecessary(String jdbcUrl, Environment environment)", "original_code": "private static String addApplicationNameIfNecessary(String jdbcUrl, Environment environment) {\n\t\t\tif (jdbcUrl.contains(\"&ApplicationName=\") || jdbcUrl.contains(\"?ApplicationName=\")) {\n\t\t\t\treturn jdbcUrl;\n\t\t\t}\n\t\t\tString applicationName = environment.getProperty(\"spring.application.name\");\n\t\t\tif (!StringUtils.hasText(applicationName)) {\n\t\t\t\treturn jdbcUrl;\n\t\t\t}\n\t\t\tStringBuilder jdbcUrlBuilder = new StringBuilder(jdbcUrl);\n\t\t\tif (!jdbcUrl.contains(\"?\")) {\n\t\t\t\tjdbcUrlBuilder.append(\"?\");\n\t\t\t}\n\t\t\telse if (!jdbcUrl.endsWith(\"&\")) {\n\t\t\t\tjdbcUrlBuilder.append(\"&\");\n\t\t\t}\n\t\t\treturn jdbcUrlBuilder.append(\"ApplicationName\")\n\t\t\t\t.append('=')\n\t\t\t\t.append(URLEncoder.encode(applicationName, StandardCharsets.UTF_8))\n\t\t\t\t.toString();\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "addApplicationNameIfNecessary", "private", "static", "(", ",", ")", "{", "}", "String", "jdbcUrl", "Environment", "environment", "if", "String", ";", "if", "StringBuilder", ";", "if", "else", "return", ";", "(", ")", "{", "}", "applicationName", "=", "(", ")", "{", "}", "jdbcUrlBuilder", "=", "(", ")", "{", "}", "if", ".", "toString", "||", "return", "jdbcUrl", ";", "environment", ".", "getProperty", "!", "return", "jdbcUrl", ";", "new", "StringBuilder", "!", ";", "(", ")", "{", "}", ".", "append", "(", ")", "jdbcUrl", ".", "contains", "jdbcUrl", ".", "contains", "(", ")", "StringUtils", ".", "hasText", "(", "jdbcUrl", ")", "jdbcUrl", ".", "contains", "jdbcUrlBuilder", ".", "append", "!", ";", ".", "append", "(", ")", "(", ")", "(", ")", "\"", "spring.application.name", "\"", "(", "applicationName", ")", "(", ")", "(", ")", "jdbcUrl", ".", "endsWith", "jdbcUrlBuilder", ".", "append", "jdbcUrlBuilder", ".", "append", "(", "'='", ")", "URLEncoder", ".", "encode", "\"", "&ApplicationName=", "\"", "\"", "?ApplicationName=", "\"", "\"", "?", "\"", "\"", "?", "\"", "(", ")", "(", ")", "(", ")", "(", "applicationName", ",", ")", "\"", "&", "\"", "\"", "&", "\"", "\"", "ApplicationName", "\"", "StandardCharsets", ".", "UTF_8"], "metrics": {"cyclomatic_complexity": 6, "n_ast_nodes": 223, "ast_depth": 11, "n_identifiers": 16, "vocab_size": 43, "n_whitespaces": 111, "n_words": 58, "nloc": 20, "token_counts": 154}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-mongodb/src/dockerTest/java/org/springframework/boot/mongodb/docker/compose/MongoDockerComposeConnectionDetailsFactoryIntegrationTests.java#37-40", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-mongodb/src/dockerTest/java/org/springframework/boot/mongodb/docker/compose/MongoDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "runCreatesConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.mongodb.docker.compose.MongoDockerComposeConnectionDetailsFactoryIntegrationTests#runCreatesConnectionDetails", "start_line": 37, "end_line": 40, "signature": "runCreatesConnectionDetails(MongoConnectionDetails connectionDetails)", "original_code": "@DockerComposeTest(composeFile = \"mongo-compose.yaml\", image = TestImage.MONGODB)\n\tvoid runCreatesConnectionDetails(MongoConnectionDetails connectionDetails) {\n\t\tassertConnectionDetailsWithDatabase(connectionDetails, \"mydatabase\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runCreatesConnectionDetails", "(", ")", "{", "}", "@", "DockerComposeTest", "MongoConnectionDetails", "connectionDetails", ";", "(", ",", ")", "assertConnectionDetailsWithDatabase", "composeFile", "=", "image", "=", "(", "connectionDetails", ",", ")", "\"", "mongo-compose.yaml", "\"", "TestImage", ".", "MONGODB", "\"", "mydatabase", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 48, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 22, "n_whitespaces": 16, "n_words": 15, "nloc": 4, "token_counts": 32}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-mongodb/src/dockerTest/java/org/springframework/boot/mongodb/docker/compose/MongoDockerComposeConnectionDetailsFactoryIntegrationTests.java#42-48", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-mongodb/src/dockerTest/java/org/springframework/boot/mongodb/docker/compose/MongoDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "assertConnectionDetailsWithDatabase", "qualified_name": "dockerTest.java.org.springframework.boot.mongodb.docker.compose.MongoDockerComposeConnectionDetailsFactoryIntegrationTests#assertConnectionDetailsWithDatabase", "start_line": 42, "end_line": 48, "signature": "assertConnectionDetailsWithDatabase(MongoConnectionDetails connectionDetails, String database)", "original_code": "private void assertConnectionDetailsWithDatabase(MongoConnectionDetails connectionDetails, String database) {\n\t\tConnectionString connectionString = connectionDetails.getConnectionString();\n\t\tassertThat(connectionString.getCredential().getUserName()).isEqualTo(\"root\");\n\t\tassertThat(connectionString.getCredential().getPassword()).isEqualTo(\"secret\".toCharArray());\n\t\tassertThat(connectionString.getCredential().getSource()).isEqualTo(\"admin\");\n\t\tassertThat(connectionString.getDatabase()).isEqualTo(database);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "assertConnectionDetailsWithDatabase", "private", "(", ",", ")", "{", "}", "MongoConnectionDetails", "connectionDetails", "String", "database", "ConnectionString", ";", ";", ";", ";", ";", "connectionString", "=", ".", "isEqualTo", ".", "isEqualTo", ".", "isEqualTo", ".", "isEqualTo", "connectionDetails", ".", "getConnectionString", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", "database", ")", "(", ")", "(", ")", "\"", "root", "\"", "(", ")", ".", "toCharArray", "(", ")", "\"", "admin", "\"", "(", ")", ".", "getUserName", ".", "getPassword", "\"", "secret", "\"", "(", ")", ".", "getSource", "connectionString", ".", "getDatabase", "connectionString", ".", "getCredential", "(", ")", "connectionString", ".", "getCredential", "(", ")", "connectionString", ".", "getCredential", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 149, "ast_depth": 11, "n_identifiers": 13, "vocab_size": 30, "n_whitespaces": 26, "n_words": 35, "nloc": 7, "token_counts": 99}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-mongodb/src/main/java/org/springframework/boot/mongodb/docker/compose/MongoDockerComposeConnectionDetailsFactory.java#43-47", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-mongodb/src/main/java/org/springframework/boot/mongodb/docker/compose/MongoDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getDockerComposeConnectionDetails", "qualified_name": "org.springframework.boot.mongodb.docker.compose.MongoDockerComposeConnectionDetailsFactory#getDockerComposeConnectionDetails", "start_line": 43, "end_line": 47, "signature": "getDockerComposeConnectionDetails(\n\t\t\tDockerComposeConnectionSource source)", "original_code": "@Override\n\tprotected MongoDockerComposeConnectionDetails getDockerComposeConnectionDetails(\n\t\t\tDockerComposeConnectionSource source) {\n\t\treturn new MongoDockerComposeConnectionDetails(source.getRunningService());\n\t}", "doc_comment": ""}, "code_tokens": ["MongoDockerComposeConnectionDetails", "getDockerComposeConnectionDetails", "protected", "(", ")", "{", "}", "@", "Override", "DockerComposeConnectionSource", "source", "return", ";", "new", "MongoDockerComposeConnectionDetails", "(", ")", "source", ".", "getRunningService", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 34, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 16, "n_whitespaces": 17, "n_words": 11, "nloc": 5, "token_counts": 22}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-mongodb/src/main/java/org/springframework/boot/mongodb/docker/compose/MongoDockerComposeConnectionDetailsFactory.java#63-81", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-mongodb/src/main/java/org/springframework/boot/mongodb/docker/compose/MongoDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "buildConnectionString", "qualified_name": "org.springframework.boot.mongodb.docker.compose.MongoDockerComposeConnectionDetailsFactory#buildConnectionString", "start_line": 63, "end_line": 81, "signature": "buildConnectionString(RunningService service)", "original_code": "private ConnectionString buildConnectionString(RunningService service) {\n\t\t\tMongoEnvironment environment = new MongoEnvironment(service.env());\n\t\t\tStringBuilder builder = new StringBuilder(\"mongodb://\");\n\t\t\tif (environment.getUsername() != null) {\n\t\t\t\tbuilder.append(environment.getUsername());\n\t\t\t\tbuilder.append(\":\");\n\t\t\t\tbuilder.append((environment.getPassword() != null) ? environment.getPassword() : \"\");\n\t\t\t\tbuilder.append(\"@\");\n\t\t\t}\n\t\t\tbuilder.append(service.host());\n\t\t\tbuilder.append(\":\");\n\t\t\tbuilder.append(service.ports().get(MONGODB_PORT));\n\t\t\tbuilder.append(\"/\");\n\t\t\tbuilder.append((environment.getDatabase() != null) ? environment.getDatabase() : \"test\");\n\t\t\tif (environment.getUsername() != null) {\n\t\t\t\tbuilder.append(\"?authSource=admin\");\n\t\t\t}\n\t\t\treturn new ConnectionString(builder.toString());\n\t\t}", "doc_comment": ""}, "code_tokens": ["ConnectionString", "buildConnectionString", "private", "(", ")", "{", "}", "RunningService", "service", "MongoEnvironment", ";", "StringBuilder", ";", "if", ";", ";", ";", ";", ";", "if", "return", ";", "environment", "=", "builder", "=", "(", ")", "{", "}", "builder", ".", "append", "builder", ".", "append", "builder", ".", "append", "builder", ".", "append", "builder", ".", "append", "(", ")", "{", "}", "new", "ConnectionString", "new", "MongoEnvironment", "new", "StringBuilder", "!=", "null", ";", ";", ";", ";", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "!=", "null", ";", "(", ")", "(", ")", "(", ")", "environment", ".", "getUsername", "builder", ".", "append", "builder", ".", "append", "builder", ".", "append", "builder", ".", "append", "service", ".", "host", "\"", ":", "\"", ".", "get", "\"", "/", "\"", "?", ":", "environment", ".", "getUsername", "builder", ".", "append", "builder", ".", "toString", "service", ".", "env", "\"", "mongodb://", "\"", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "service", ".", "ports", "(", "MONGODB_PORT", ")", "(", ")", "environment", ".", "getDatabase", "\"", "test", "\"", "(", ")", "(", ")", "(", ")", "(", ")", "environment", ".", "getUsername", "\"", ":", "\"", "?", ":", "\"", "@", "\"", "(", ")", "!=", "null", "(", ")", "\"", "?authSource=admin", "\"", "(", ")", "(", ")", "environment", ".", "getPassword", "\"", "\"", "environment", ".", "getDatabase", "!=", "null", "(", ")", "(", ")", "environment", ".", "getPassword", "(", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 293, "ast_depth": 14, "n_identifiers": 14, "vocab_size": 39, "n_whitespaces": 110, "n_words": 70, "nloc": 19, "token_counts": 200}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-mongodb/src/main/java/org/springframework/boot/mongodb/docker/compose/MongoDockerComposeConnectionDetailsFactory.java#83-86", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-mongodb/src/main/java/org/springframework/boot/mongodb/docker/compose/MongoDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getConnectionString", "qualified_name": "org.springframework.boot.mongodb.docker.compose.MongoDockerComposeConnectionDetailsFactory#getConnectionString", "start_line": 83, "end_line": 86, "signature": "getConnectionString()", "original_code": "@Override\n\t\tpublic ConnectionString getConnectionString() {\n\t\t\treturn this.connectionString;\n\t\t}", "doc_comment": ""}, "code_tokens": ["ConnectionString", "getConnectionString", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "this", ".", "connectionString"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-neo4j/src/dockerTest/java/org/springframework/boot/neo4j/docker/compose/Neo4jDockerComposeConnectionDetailsFactoryIntegrationTests.java#38-41", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-neo4j/src/dockerTest/java/org/springframework/boot/neo4j/docker/compose/Neo4jDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "runCreatesConnectionDetailsThatCanAccessNeo4j", "qualified_name": "dockerTest.java.org.springframework.boot.neo4j.docker.compose.Neo4jDockerComposeConnectionDetailsFactoryIntegrationTests#runCreatesConnectionDetailsThatCanAccessNeo4j", "start_line": 38, "end_line": 41, "signature": "runCreatesConnectionDetailsThatCanAccessNeo4j(Neo4jConnectionDetails connectionDetails)", "original_code": "@DockerComposeTest(composeFile = \"neo4j-compose.yaml\", image = TestImage.NEO4J)\n\tvoid runCreatesConnectionDetailsThatCanAccessNeo4j(Neo4jConnectionDetails connectionDetails) {\n\t\tassertConnectionDetailsWithPassword(connectionDetails, \"absolutelysecret\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runCreatesConnectionDetailsThatCanAccessNeo4j", "(", ")", "{", "}", "@", "DockerComposeTest", "Neo4jConnectionDetails", "connectionDetails", ";", "(", ",", ")", "assertConnectionDetailsWithPassword", "composeFile", "=", "image", "=", "(", "connectionDetails", ",", ")", "\"", "neo4j-compose.yaml", "\"", "TestImage", ".", "NEO4J", "\"", "absolutelysecret", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 48, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 22, "n_whitespaces": 16, "n_words": 15, "nloc": 4, "token_counts": 32}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-neo4j/src/dockerTest/java/org/springframework/boot/neo4j/docker/compose/Neo4jDockerComposeConnectionDetailsFactoryIntegrationTests.java#43-48", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-neo4j/src/dockerTest/java/org/springframework/boot/neo4j/docker/compose/Neo4jDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "assertConnectionDetailsWithPassword", "qualified_name": "dockerTest.java.org.springframework.boot.neo4j.docker.compose.Neo4jDockerComposeConnectionDetailsFactoryIntegrationTests#assertConnectionDetailsWithPassword", "start_line": 43, "end_line": 48, "signature": "assertConnectionDetailsWithPassword(Neo4jConnectionDetails connectionDetails, String password)", "original_code": "private void assertConnectionDetailsWithPassword(Neo4jConnectionDetails connectionDetails, String password) {\n\t\tassertThat(connectionDetails.getAuthToken()).isEqualTo(AuthTokens.basic(\"neo4j\", password));\n\t\ttry (Driver driver = GraphDatabase.driver(connectionDetails.getUri(), connectionDetails.getAuthToken())) {\n\t\t\tassertThatNoException().isThrownBy(driver::verifyConnectivity);\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "assertConnectionDetailsWithPassword", "private", "(", ",", ")", "{", "}", "Neo4jConnectionDetails", "connectionDetails", "String", "password", ";", "try", ".", "isEqualTo", "(", ")", "{", "}", "assertThat", "(", ")", "Driver", "driver", "=", ";", "(", ")", "AuthTokens", ".", "basic", "GraphDatabase", ".", "driver", ".", "isThrownBy", "connectionDetails", ".", "getAuthToken", "(", ",", "password", ")", "(", ",", ")", "assertThatNoException", "(", ")", "(", ")", "\"", "neo4j", "\"", "connectionDetails", ".", "getUri", "connectionDetails", ".", "getAuthToken", "(", ")", "driver", "::", "verifyConnectivity", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 103, "ast_depth": 11, "n_identifiers": 14, "vocab_size": 31, "n_whitespaces": 28, "n_words": 28, "nloc": 6, "token_counts": 70}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-neo4j/src/main/java/org/springframework/boot/neo4j/docker/compose/Neo4jDockerComposeConnectionDetailsFactory.java#43-46", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-neo4j/src/main/java/org/springframework/boot/neo4j/docker/compose/Neo4jDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getDockerComposeConnectionDetails", "qualified_name": "org.springframework.boot.neo4j.docker.compose.Neo4jDockerComposeConnectionDetailsFactory#getDockerComposeConnectionDetails", "start_line": 43, "end_line": 46, "signature": "getDockerComposeConnectionDetails(DockerComposeConnectionSource source)", "original_code": "@Override\n\tprotected Neo4jConnectionDetails getDockerComposeConnectionDetails(DockerComposeConnectionSource source) {\n\t\treturn new Neo4jDockerComposeConnectionDetails(source.getRunningService());\n\t}", "doc_comment": ""}, "code_tokens": ["Neo4jConnectionDetails", "getDockerComposeConnectionDetails", "protected", "(", ")", "{", "}", "@", "Override", "DockerComposeConnectionSource", "source", "return", ";", "new", "Neo4jDockerComposeConnectionDetails", "(", ")", "source", ".", "getRunningService", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 34, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 17, "n_whitespaces": 13, "n_words": 11, "nloc": 4, "token_counts": 22}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-neo4j/src/main/java/org/springframework/boot/neo4j/docker/compose/Neo4jDockerComposeConnectionDetailsFactory.java#67-70", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-neo4j/src/main/java/org/springframework/boot/neo4j/docker/compose/Neo4jDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getUri", "qualified_name": "org.springframework.boot.neo4j.docker.compose.Neo4jDockerComposeConnectionDetailsFactory#getUri", "start_line": 67, "end_line": 70, "signature": "getUri()", "original_code": "@Override\n\t\tpublic URI getUri() {\n\t\t\treturn this.uri;\n\t\t}", "doc_comment": ""}, "code_tokens": ["URI", "getUri", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "this", ".", "uri"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-neo4j/src/main/java/org/springframework/boot/neo4j/docker/compose/Neo4jDockerComposeConnectionDetailsFactory.java#72-75", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-neo4j/src/main/java/org/springframework/boot/neo4j/docker/compose/Neo4jDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getAuthToken", "qualified_name": "org.springframework.boot.neo4j.docker.compose.Neo4jDockerComposeConnectionDetailsFactory#getAuthToken", "start_line": 72, "end_line": 75, "signature": "getAuthToken()", "original_code": "@Override\n\t\tpublic AuthToken getAuthToken() {\n\t\t\treturn (this.authToken != null) ? this.authToken : AuthTokens.none();\n\t\t}", "doc_comment": ""}, "code_tokens": ["AuthToken", "getAuthToken", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "?", ":", "(", ")", "this", ".", "authToken", "AuthTokens", ".", "none", "!=", "null", "(", ")", "this", ".", "authToken"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 42, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 20, "n_whitespaces": 20, "n_words": 12, "nloc": 4, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-r2dbc/src/dockerTest/java/org/springframework/boot/r2dbc/docker/compose/ClickHouseR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#40-44", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-r2dbc/src/dockerTest/java/org/springframework/boot/r2dbc/docker/compose/ClickHouseR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "runCreatesConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.r2dbc.docker.compose.ClickHouseR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests#runCreatesConnectionDetails", "start_line": 40, "end_line": 44, "signature": "runCreatesConnectionDetails(R2dbcConnectionDetails connectionDetails)", "original_code": "@DockerComposeTest(composeFile = \"clickhouse-compose.yaml\", image = TestImage.CLICKHOUSE)\n\tvoid runCreatesConnectionDetails(R2dbcConnectionDetails connectionDetails) {\n\t\tassertConnectionDetails(connectionDetails);\n\t\tcheckDatabaseAccess(connectionDetails);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runCreatesConnectionDetails", "(", ")", "{", "}", "@", "DockerComposeTest", "R2dbcConnectionDetails", "connectionDetails", ";", ";", "(", ",", ")", "assertConnectionDetails", "checkDatabaseAccess", "composeFile", "=", "image", "=", "(", "connectionDetails", ")", "(", "connectionDetails", ")", "\"", "clickhouse-compose.yaml", "\"", "TestImage", ".", "CLICKHOUSE"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 51, "ast_depth": 8, "n_identifiers": 9, "vocab_size": 22, "n_whitespaces": 18, "n_words": 16, "nloc": 5, "token_counts": 33}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-r2dbc/src/dockerTest/java/org/springframework/boot/r2dbc/docker/compose/ClickHouseR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#46-51", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-r2dbc/src/dockerTest/java/org/springframework/boot/r2dbc/docker/compose/ClickHouseR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "assertConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.r2dbc.docker.compose.ClickHouseR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests#assertConnectionDetails", "start_line": 46, "end_line": 51, "signature": "assertConnectionDetails(R2dbcConnectionDetails connectionDetails)", "original_code": "private void assertConnectionDetails(R2dbcConnectionDetails connectionDetails) {\n\t\tConnectionFactoryOptions connectionFactoryOptions = connectionDetails.getConnectionFactoryOptions();\n\t\tassertThat(connectionFactoryOptions.toString()).contains(\"database=mydatabase\", \"driver=clickhouse\",\n\t\t\t\t\"password=REDACTED\", \"user=myuser\");\n\t\tassertThat(connectionFactoryOptions.getRequiredValue(ConnectionFactoryOptions.PASSWORD)).isEqualTo(\"secret\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "assertConnectionDetails", "private", "(", ")", "{", "}", "R2dbcConnectionDetails", "connectionDetails", "ConnectionFactoryOptions", ";", ";", ";", "connectionFactoryOptions", "=", ".", "contains", ".", "isEqualTo", "connectionDetails", ".", "getConnectionFactoryOptions", "assertThat", "(", ",", ",", ",", ")", "assertThat", "(", ")", "(", ")", "(", ")", "\"", "database=mydatabase", "\"", "\"", "driver=clickhouse", "\"", "\"", "password=REDACTED", "\"", "\"", "user=myuser", "\"", "(", ")", "\"", "secret", "\"", "connectionFactoryOptions", ".", "toString", "connectionFactoryOptions", ".", "getRequiredValue", "(", ")", "(", ")", "ConnectionFactoryOptions", ".", "PASSWORD"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 95, "ast_depth": 11, "n_identifiers": 11, "vocab_size": 28, "n_whitespaces": 25, "n_words": 28, "nloc": 6, "token_counts": 65}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-r2dbc/src/dockerTest/java/org/springframework/boot/r2dbc/docker/compose/ClickHouseR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#53-62", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-r2dbc/src/dockerTest/java/org/springframework/boot/r2dbc/docker/compose/ClickHouseR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "checkDatabaseAccess", "qualified_name": "dockerTest.java.org.springframework.boot.r2dbc.docker.compose.ClickHouseR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests#checkDatabaseAccess", "start_line": 53, "end_line": 62, "signature": "checkDatabaseAccess(R2dbcConnectionDetails connectionDetails)", "original_code": "private void checkDatabaseAccess(R2dbcConnectionDetails connectionDetails) {\n\t\tConnectionFactoryOptions connectionFactoryOptions = connectionDetails.getConnectionFactoryOptions();\n\t\tConnectionFactory connectionFactory = ConnectionFactories.get(connectionFactoryOptions);\n\t\tString sql = DatabaseDriver.CLICKHOUSE.getValidationQuery();\n\t\tInteger result = Mono.from(connectionFactory.create())\n\t\t\t.flatMapMany((connection) -> connection.createStatement(sql).execute())\n\t\t\t.flatMap((r) -> r.map((row, rowMetadata) -> row.get(0, Integer.class)))\n\t\t\t.blockFirst(Duration.ofSeconds(30));\n\t\tassertThat(result).isEqualTo(1);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "checkDatabaseAccess", "private", "(", ")", "{", "}", "R2dbcConnectionDetails", "connectionDetails", "ConnectionFactoryOptions", ";", "ConnectionFactory", ";", "String", ";", "Integer", ";", ";", "connectionFactoryOptions", "=", "connectionFactory", "=", "sql", "=", "result", "=", ".", "isEqualTo", "connectionDetails", ".", "getConnectionFactoryOptions", "ConnectionFactories", ".", "get", ".", "getValidationQuery", ".", "blockFirst", "assertThat", "(", "1", ")", "(", ")", "(", "connectionFactoryOptions", ")", "DatabaseDriver", ".", "CLICKHOUSE", "(", ")", ".", "flatMap", "(", ")", "(", "result", ")", ".", "flatMapMany", "(", ")", "Duration", ".", "ofSeconds", "Mono", ".", "from", "(", ")", "->", "(", "30", ")", "(", ")", "->", "(", "r", ")", "r", ".", "map", "connectionFactory", ".", "create", "(", "connection", ")", ".", "execute", "(", ")", "(", ")", "connection", ".", "createStatement", "(", ")", "->", "(", "sql", ")", "(", "row", ",", "rowMetadata", ")", "row", ".", "get", "(", "0", ",", ")", "Integer", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 173, "ast_depth": 16, "n_identifiers": 29, "vocab_size": 49, "n_whitespaces": 53, "n_words": 50, "nloc": 10, "token_counts": 120}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-r2dbc/src/dockerTest/java/org/springframework/boot/r2dbc/docker/compose/MariaDbR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#37-40", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-r2dbc/src/dockerTest/java/org/springframework/boot/r2dbc/docker/compose/MariaDbR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "runCreatesConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.r2dbc.docker.compose.MariaDbR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests#runCreatesConnectionDetails", "start_line": 37, "end_line": 40, "signature": "runCreatesConnectionDetails(R2dbcConnectionDetails connectionDetails)", "original_code": "@DockerComposeTest(composeFile = \"mariadb-compose.yaml\", image = TestImage.MARIADB)\n\tvoid runCreatesConnectionDetails(R2dbcConnectionDetails connectionDetails) {\n\t\tassertConnectionDetails(connectionDetails);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runCreatesConnectionDetails", "(", ")", "{", "}", "@", "DockerComposeTest", "R2dbcConnectionDetails", "connectionDetails", ";", "(", ",", ")", "assertConnectionDetails", "composeFile", "=", "image", "=", "(", "connectionDetails", ")", "\"", "mariadb-compose.yaml", "\"", "TestImage", ".", "MARIADB"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 43, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 21, "n_whitespaces": 15, "n_words": 14, "nloc": 4, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-r2dbc/src/dockerTest/java/org/springframework/boot/r2dbc/docker/compose/MariaDbR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#42-47", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-r2dbc/src/dockerTest/java/org/springframework/boot/r2dbc/docker/compose/MariaDbR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "assertConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.r2dbc.docker.compose.MariaDbR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests#assertConnectionDetails", "start_line": 42, "end_line": 47, "signature": "assertConnectionDetails(R2dbcConnectionDetails connectionDetails)", "original_code": "private void assertConnectionDetails(R2dbcConnectionDetails connectionDetails) {\n\t\tConnectionFactoryOptions connectionFactoryOptions = connectionDetails.getConnectionFactoryOptions();\n\t\tassertThat(connectionFactoryOptions.toString()).contains(\"database=mydatabase\", \"driver=mariadb\",\n\t\t\t\t\"password=REDACTED\", \"user=myuser\");\n\t\tassertThat(connectionFactoryOptions.getRequiredValue(ConnectionFactoryOptions.PASSWORD)).isEqualTo(\"secret\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "assertConnectionDetails", "private", "(", ")", "{", "}", "R2dbcConnectionDetails", "connectionDetails", "ConnectionFactoryOptions", ";", ";", ";", "connectionFactoryOptions", "=", ".", "contains", ".", "isEqualTo", "connectionDetails", ".", "getConnectionFactoryOptions", "assertThat", "(", ",", ",", ",", ")", "assertThat", "(", ")", "(", ")", "(", ")", "\"", "database=mydatabase", "\"", "\"", "driver=mariadb", "\"", "\"", "password=REDACTED", "\"", "\"", "user=myuser", "\"", "(", ")", "\"", "secret", "\"", "connectionFactoryOptions", ".", "toString", "connectionFactoryOptions", ".", "getRequiredValue", "(", ")", "(", ")", "ConnectionFactoryOptions", ".", "PASSWORD"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 95, "ast_depth": 11, "n_identifiers": 11, "vocab_size": 28, "n_whitespaces": 25, "n_words": 28, "nloc": 6, "token_counts": 65}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-r2dbc/src/dockerTest/java/org/springframework/boot/r2dbc/docker/compose/MySqlR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#36-39", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-r2dbc/src/dockerTest/java/org/springframework/boot/r2dbc/docker/compose/MySqlR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "runCreatesConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.r2dbc.docker.compose.MySqlR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests#runCreatesConnectionDetails", "start_line": 36, "end_line": 39, "signature": "runCreatesConnectionDetails(R2dbcConnectionDetails connectionDetails)", "original_code": "@DockerComposeTest(composeFile = \"mysql-compose.yaml\", image = TestImage.MYSQL)\n\tvoid runCreatesConnectionDetails(R2dbcConnectionDetails connectionDetails) {\n\t\tassertConnectionDetails(connectionDetails);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runCreatesConnectionDetails", "(", ")", "{", "}", "@", "DockerComposeTest", "R2dbcConnectionDetails", "connectionDetails", ";", "(", ",", ")", "assertConnectionDetails", "composeFile", "=", "image", "=", "(", "connectionDetails", ")", "\"", "mysql-compose.yaml", "\"", "TestImage", ".", "MYSQL"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 43, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 21, "n_whitespaces": 15, "n_words": 14, "nloc": 4, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-r2dbc/src/dockerTest/java/org/springframework/boot/r2dbc/docker/compose/MySqlR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#41-46", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-r2dbc/src/dockerTest/java/org/springframework/boot/r2dbc/docker/compose/MySqlR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "assertConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.r2dbc.docker.compose.MySqlR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests#assertConnectionDetails", "start_line": 41, "end_line": 46, "signature": "assertConnectionDetails(R2dbcConnectionDetails connectionDetails)", "original_code": "private void assertConnectionDetails(R2dbcConnectionDetails connectionDetails) {\n\t\tConnectionFactoryOptions connectionFactoryOptions = connectionDetails.getConnectionFactoryOptions();\n\t\tassertThat(connectionFactoryOptions.toString()).contains(\"database=mydatabase\", \"driver=mysql\",\n\t\t\t\t\"password=REDACTED\", \"user=myuser\");\n\t\tassertThat(connectionFactoryOptions.getRequiredValue(ConnectionFactoryOptions.PASSWORD)).isEqualTo(\"secret\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "assertConnectionDetails", "private", "(", ")", "{", "}", "R2dbcConnectionDetails", "connectionDetails", "ConnectionFactoryOptions", ";", ";", ";", "connectionFactoryOptions", "=", ".", "contains", ".", "isEqualTo", "connectionDetails", ".", "getConnectionFactoryOptions", "assertThat", "(", ",", ",", ",", ")", "assertThat", "(", ")", "(", ")", "(", ")", "\"", "database=mydatabase", "\"", "\"", "driver=mysql", "\"", "\"", "password=REDACTED", "\"", "\"", "user=myuser", "\"", "(", ")", "\"", "secret", "\"", "connectionFactoryOptions", ".", "toString", "connectionFactoryOptions", ".", "getRequiredValue", "(", ")", "(", ")", "ConnectionFactoryOptions", ".", "PASSWORD"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 95, "ast_depth": 11, "n_identifiers": 11, "vocab_size": 28, "n_whitespaces": 25, "n_words": 28, "nloc": 6, "token_counts": 65}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-r2dbc/src/dockerTest/java/org/springframework/boot/r2dbc/docker/compose/PostgresR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#44-48", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-r2dbc/src/dockerTest/java/org/springframework/boot/r2dbc/docker/compose/PostgresR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "runCreatesConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.r2dbc.docker.compose.PostgresR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests#runCreatesConnectionDetails", "start_line": 44, "end_line": 48, "signature": "runCreatesConnectionDetails(R2dbcConnectionDetails connectionDetails)", "original_code": "@DockerComposeTest(composeFile = \"postgres-compose.yaml\", image = TestImage.POSTGRESQL)\n\tvoid runCreatesConnectionDetails(R2dbcConnectionDetails connectionDetails) {\n\t\tassertConnectionDetails(connectionDetails);\n\t\tcheckDatabaseAccess(connectionDetails);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runCreatesConnectionDetails", "(", ")", "{", "}", "@", "DockerComposeTest", "R2dbcConnectionDetails", "connectionDetails", ";", ";", "(", ",", ")", "assertConnectionDetails", "checkDatabaseAccess", "composeFile", "=", "image", "=", "(", "connectionDetails", ")", "(", "connectionDetails", ")", "\"", "postgres-compose.yaml", "\"", "TestImage", ".", "POSTGRESQL"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 51, "ast_depth": 8, "n_identifiers": 9, "vocab_size": 22, "n_whitespaces": 18, "n_words": 16, "nloc": 5, "token_counts": 33}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-r2dbc/src/dockerTest/java/org/springframework/boot/r2dbc/docker/compose/PostgresR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#50-59", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-r2dbc/src/dockerTest/java/org/springframework/boot/r2dbc/docker/compose/PostgresR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "runCreatesConnectionDetailsThatCanAccessDatabaseWhenHostAuthMethodIsTrust", "qualified_name": "dockerTest.java.org.springframework.boot.r2dbc.docker.compose.PostgresR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests#runCreatesConnectionDetailsThatCanAccessDatabaseWhenHostAuthMethodIsTrust", "start_line": 50, "end_line": 59, "signature": "runCreatesConnectionDetailsThatCanAccessDatabaseWhenHostAuthMethodIsTrust(\n\t\t\tR2dbcConnectionDetails connectionDetails)", "original_code": "@DockerComposeTest(composeFile = \"postgres-with-trust-host-auth-method-compose.yaml\", image = TestImage.POSTGRESQL)\n\tvoid runCreatesConnectionDetailsThatCanAccessDatabaseWhenHostAuthMethodIsTrust(\n\t\t\tR2dbcConnectionDetails connectionDetails) {\n\t\tConnectionFactoryOptions connectionFactoryOptions = connectionDetails.getConnectionFactoryOptions();\n\t\tassertThat(connectionFactoryOptions.getRequiredValue(ConnectionFactoryOptions.USER)).isEqualTo(\"myuser\");\n\t\tassertThat(connectionFactoryOptions.getValue(ConnectionFactoryOptions.PASSWORD)).isNull();\n\t\tassertThat(connectionFactoryOptions.getRequiredValue(ConnectionFactoryOptions.DATABASE))\n\t\t\t.isEqualTo(\"mydatabase\");\n\t\tcheckDatabaseAccess(connectionDetails);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runCreatesConnectionDetailsThatCanAccessDatabaseWhenHostAuthMethodIsTrust", "(", ")", "{", "}", "@", "DockerComposeTest", "R2dbcConnectionDetails", "connectionDetails", "ConnectionFactoryOptions", ";", ";", ";", ";", ";", "(", ",", ")", "connectionFactoryOptions", "=", ".", "isEqualTo", ".", "isNull", ".", "isEqualTo", "checkDatabaseAccess", "composeFile", "=", "image", "=", "connectionDetails", ".", "getConnectionFactoryOptions", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "(", "connectionDetails", ")", "\"", "postgres-with-trust-host-auth-method-compose.yaml", "\"", "TestImage", ".", "POSTGRESQL", "(", ")", "(", ")", "\"", "myuser", "\"", "(", ")", "(", ")", "\"", "mydatabase", "\"", "connectionFactoryOptions", ".", "getRequiredValue", "connectionFactoryOptions", ".", "getValue", "connectionFactoryOptions", ".", "getRequiredValue", "(", ")", "(", ")", "(", ")", "ConnectionFactoryOptions", ".", "USER", "ConnectionFactoryOptions", ".", "PASSWORD", "ConnectionFactoryOptions", ".", "DATABASE"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 136, "ast_depth": 11, "n_identifiers": 19, "vocab_size": 34, "n_whitespaces": 38, "n_words": 43, "nloc": 10, "token_counts": 91}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-r2dbc/src/dockerTest/java/org/springframework/boot/r2dbc/docker/compose/PostgresR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#61-68", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-r2dbc/src/dockerTest/java/org/springframework/boot/r2dbc/docker/compose/PostgresR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "runCreatesConnectionDetailsApplicationName", "qualified_name": "dockerTest.java.org.springframework.boot.r2dbc.docker.compose.PostgresR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests#runCreatesConnectionDetailsApplicationName", "start_line": 61, "end_line": 68, "signature": "runCreatesConnectionDetailsApplicationName(R2dbcConnectionDetails connectionDetails)", "original_code": "@DockerComposeTest(composeFile = \"postgres-application-name-compose.yaml\", image = TestImage.POSTGRESQL)\n\tvoid runCreatesConnectionDetailsApplicationName(R2dbcConnectionDetails connectionDetails) {\n\t\tassertConnectionDetails(connectionDetails);\n\t\tConnectionFactoryOptions options = connectionDetails.getConnectionFactoryOptions();\n\t\tassertThat(options.getValue(Option.valueOf(\"applicationName\"))).isEqualTo(\"spring boot\");\n\t\tassertThat(executeQuery(connectionDetails, \"select current_setting('application_name')\", String.class))\n\t\t\t.isEqualTo(\"spring boot\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runCreatesConnectionDetailsApplicationName", "(", ")", "{", "}", "@", "DockerComposeTest", "R2dbcConnectionDetails", "connectionDetails", ";", "ConnectionFactoryOptions", ";", ";", ";", "(", ",", ")", "assertConnectionDetails", "options", "=", ".", "isEqualTo", ".", "isEqualTo", "composeFile", "=", "image", "=", "(", "connectionDetails", ")", "connectionDetails", ".", "getConnectionFactoryOptions", "assertThat", "(", ")", "assertThat", "(", ")", "\"", "postgres-application-name-compose.yaml", "\"", "TestImage", ".", "POSTGRESQL", "(", ")", "(", ")", "\"", "spring boot", "\"", "(", ")", "\"", "spring boot", "\"", "options", ".", "getValue", "executeQuery", "(", ")", "(", "connectionDetails", ",", ",", ")", "Option", ".", "valueOf", "\"", "select current_setting('application_name')", "\"", "String", ".", "class", "(", ")", "\"", "applicationName", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 124, "ast_depth": 13, "n_identifiers": 16, "vocab_size": 35, "n_whitespaces": 36, "n_words": 40, "nloc": 8, "token_counts": 84}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-r2dbc/src/dockerTest/java/org/springframework/boot/r2dbc/docker/compose/PostgresR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#70-78", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-r2dbc/src/dockerTest/java/org/springframework/boot/r2dbc/docker/compose/PostgresR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "assertConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.r2dbc.docker.compose.PostgresR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests#assertConnectionDetails", "start_line": 70, "end_line": 78, "signature": "assertConnectionDetails(R2dbcConnectionDetails connectionDetails)", "original_code": "private void assertConnectionDetails(R2dbcConnectionDetails connectionDetails) {\n\t\tConnectionFactoryOptions options = connectionDetails.getConnectionFactoryOptions();\n\t\tassertThat(options.getRequiredValue(ConnectionFactoryOptions.HOST)).isNotNull();\n\t\tassertThat(options.getRequiredValue(ConnectionFactoryOptions.PORT)).isNotNull();\n\t\tassertThat(options.getRequiredValue(ConnectionFactoryOptions.DATABASE)).isEqualTo(\"mydatabase\");\n\t\tassertThat(options.getRequiredValue(ConnectionFactoryOptions.USER)).isEqualTo(\"myuser\");\n\t\tassertThat(options.getRequiredValue(ConnectionFactoryOptions.PASSWORD)).isEqualTo(\"secret\");\n\t\tassertThat(options.getRequiredValue(ConnectionFactoryOptions.DRIVER)).isEqualTo(\"postgresql\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "assertConnectionDetails", "private", "(", ")", "{", "}", "R2dbcConnectionDetails", "connectionDetails", "ConnectionFactoryOptions", ";", ";", ";", ";", ";", ";", ";", "options", "=", ".", "isNotNull", ".", "isNotNull", ".", "isEqualTo", ".", "isEqualTo", ".", "isEqualTo", ".", "isEqualTo", "connectionDetails", ".", "getConnectionFactoryOptions", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "\"", "mydatabase", "\"", "(", ")", "\"", "myuser", "\"", "(", ")", "\"", "secret", "\"", "(", ")", "\"", "postgresql", "\"", "options", ".", "getRequiredValue", "options", ".", "getRequiredValue", "options", ".", "getRequiredValue", "options", ".", "getRequiredValue", "options", ".", "getRequiredValue", "options", ".", "getRequiredValue", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "ConnectionFactoryOptions", ".", "HOST", "ConnectionFactoryOptions", ".", "PORT", "ConnectionFactoryOptions", ".", "DATABASE", "ConnectionFactoryOptions", ".", "USER", "ConnectionFactoryOptions", ".", "PASSWORD", "ConnectionFactoryOptions", ".", "DRIVER"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 188, "ast_depth": 11, "n_identifiers": 15, "vocab_size": 30, "n_whitespaces": 30, "n_words": 49, "nloc": 9, "token_counts": 126}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-r2dbc/src/dockerTest/java/org/springframework/boot/r2dbc/docker/compose/PostgresR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#80-83", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-r2dbc/src/dockerTest/java/org/springframework/boot/r2dbc/docker/compose/PostgresR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "checkDatabaseAccess", "qualified_name": "dockerTest.java.org.springframework.boot.r2dbc.docker.compose.PostgresR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests#checkDatabaseAccess", "start_line": 80, "end_line": 83, "signature": "checkDatabaseAccess(R2dbcConnectionDetails connectionDetails)", "original_code": "private void checkDatabaseAccess(R2dbcConnectionDetails connectionDetails) {\n\t\tassertThat(executeQuery(connectionDetails, DatabaseDriver.POSTGRESQL.getValidationQuery(), Integer.class))\n\t\t\t.isEqualTo(1);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "checkDatabaseAccess", "private", "(", ")", "{", "}", "R2dbcConnectionDetails", "connectionDetails", ";", ".", "isEqualTo", "assertThat", "(", "1", ")", "(", ")", "executeQuery", "(", "connectionDetails", ",", ",", ")", ".", "getValidationQuery", "Integer", ".", "class", "DatabaseDriver", ".", "POSTGRESQL", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 51, "ast_depth": 12, "n_identifiers": 8, "vocab_size": 21, "n_whitespaces": 15, "n_words": 15, "nloc": 4, "token_counts": 34}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-r2dbc/src/dockerTest/java/org/springframework/boot/r2dbc/docker/compose/PostgresR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#85-92", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-r2dbc/src/dockerTest/java/org/springframework/boot/r2dbc/docker/compose/PostgresR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "executeQuery", "qualified_name": "dockerTest.java.org.springframework.boot.r2dbc.docker.compose.PostgresR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests#executeQuery", "start_line": 85, "end_line": 92, "signature": "executeQuery(R2dbcConnectionDetails connectionDetails, String sql, Class<T> resultClass)", "original_code": "private <T> T executeQuery(R2dbcConnectionDetails connectionDetails, String sql, Class<T> resultClass) {\n\t\tConnectionFactoryOptions connectionFactoryOptions = connectionDetails.getConnectionFactoryOptions();\n\t\treturn DatabaseClient.create(ConnectionFactories.get(connectionFactoryOptions))\n\t\t\t.sql(sql)\n\t\t\t.mapValue(resultClass)\n\t\t\t.first()\n\t\t\t.block(Duration.ofSeconds(30));\n\t}", "doc_comment": ""}, "code_tokens": ["T", "executeQuery", "private", "<", ">", "(", ",", ",", ")", "{", "}", "T", "R2dbcConnectionDetails", "connectionDetails", "String", "sql", "resultClass", "ConnectionFactoryOptions", ";", "return", ";", "Class", "connectionFactoryOptions", "=", ".", "block", "<", "T", ">", "connectionDetails", ".", "getConnectionFactoryOptions", ".", "first", "(", ")", "(", ")", ".", "mapValue", "(", ")", "Duration", ".", "ofSeconds", ".", "sql", "(", "resultClass", ")", "(", "30", ")", "DatabaseClient", ".", "create", "(", "sql", ")", "(", ")", "ConnectionFactories", ".", "get", "(", "connectionFactoryOptions", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 98, "ast_depth": 13, "n_identifiers": 15, "vocab_size": 33, "n_whitespaces": 37, "n_words": 30, "nloc": 8, "token_counts": 67}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-r2dbc/src/main/java/org/springframework/boot/r2dbc/docker/compose/ClickHouseR2dbcDockerComposeConnectionDetailsFactory.java#39-42", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-r2dbc/src/main/java/org/springframework/boot/r2dbc/docker/compose/ClickHouseR2dbcDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getDockerComposeConnectionDetails", "qualified_name": "org.springframework.boot.r2dbc.docker.compose.ClickHouseR2dbcDockerComposeConnectionDetailsFactory#getDockerComposeConnectionDetails", "start_line": 39, "end_line": 42, "signature": "getDockerComposeConnectionDetails(DockerComposeConnectionSource source)", "original_code": "@Override\n\tprotected R2dbcConnectionDetails getDockerComposeConnectionDetails(DockerComposeConnectionSource source) {\n\t\treturn new ClickhouseDbR2dbcDockerComposeConnectionDetails(source.getRunningService());\n\t}", "doc_comment": ""}, "code_tokens": ["R2dbcConnectionDetails", "getDockerComposeConnectionDetails", "protected", "(", ")", "{", "}", "@", "Override", "DockerComposeConnectionSource", "source", "return", ";", "new", "ClickhouseDbR2dbcDockerComposeConnectionDetails", "(", ")", "source", ".", "getRunningService", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 34, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 17, "n_whitespaces": 13, "n_words": 11, "nloc": 4, "token_counts": 22}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-r2dbc/src/main/java/org/springframework/boot/r2dbc/docker/compose/ClickHouseR2dbcDockerComposeConnectionDetailsFactory.java#63-66", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-r2dbc/src/main/java/org/springframework/boot/r2dbc/docker/compose/ClickHouseR2dbcDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getConnectionFactoryOptions", "qualified_name": "org.springframework.boot.r2dbc.docker.compose.ClickHouseR2dbcDockerComposeConnectionDetailsFactory#getConnectionFactoryOptions", "start_line": 63, "end_line": 66, "signature": "getConnectionFactoryOptions()", "original_code": "@Override\n\t\tpublic ConnectionFactoryOptions getConnectionFactoryOptions() {\n\t\t\treturn this.connectionFactoryOptions;\n\t\t}", "doc_comment": ""}, "code_tokens": ["ConnectionFactoryOptions", "getConnectionFactoryOptions", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "this", ".", "connectionFactoryOptions"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-r2dbc/src/main/java/org/springframework/boot/r2dbc/docker/compose/MariaDbR2dbcDockerComposeConnectionDetailsFactory.java#42-45", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-r2dbc/src/main/java/org/springframework/boot/r2dbc/docker/compose/MariaDbR2dbcDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getDockerComposeConnectionDetails", "qualified_name": "org.springframework.boot.r2dbc.docker.compose.MariaDbR2dbcDockerComposeConnectionDetailsFactory#getDockerComposeConnectionDetails", "start_line": 42, "end_line": 45, "signature": "getDockerComposeConnectionDetails(DockerComposeConnectionSource source)", "original_code": "@Override\n\tprotected R2dbcConnectionDetails getDockerComposeConnectionDetails(DockerComposeConnectionSource source) {\n\t\treturn new MariaDbR2dbcDockerComposeConnectionDetails(source.getRunningService());\n\t}", "doc_comment": ""}, "code_tokens": ["R2dbcConnectionDetails", "getDockerComposeConnectionDetails", "protected", "(", ")", "{", "}", "@", "Override", "DockerComposeConnectionSource", "source", "return", ";", "new", "MariaDbR2dbcDockerComposeConnectionDetails", "(", ")", "source", ".", "getRunningService", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 34, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 17, "n_whitespaces": 13, "n_words": 11, "nloc": 4, "token_counts": 22}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-r2dbc/src/main/java/org/springframework/boot/r2dbc/docker/compose/MariaDbR2dbcDockerComposeConnectionDetailsFactory.java#65-68", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-r2dbc/src/main/java/org/springframework/boot/r2dbc/docker/compose/MariaDbR2dbcDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getConnectionFactoryOptions", "qualified_name": "org.springframework.boot.r2dbc.docker.compose.MariaDbR2dbcDockerComposeConnectionDetailsFactory#getConnectionFactoryOptions", "start_line": 65, "end_line": 68, "signature": "getConnectionFactoryOptions()", "original_code": "@Override\n\t\tpublic ConnectionFactoryOptions getConnectionFactoryOptions() {\n\t\t\treturn this.connectionFactoryOptions;\n\t\t}", "doc_comment": ""}, "code_tokens": ["ConnectionFactoryOptions", "getConnectionFactoryOptions", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "this", ".", "connectionFactoryOptions"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-r2dbc/src/main/java/org/springframework/boot/r2dbc/docker/compose/MySqlR2dbcDockerComposeConnectionDetailsFactory.java#42-45", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-r2dbc/src/main/java/org/springframework/boot/r2dbc/docker/compose/MySqlR2dbcDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getDockerComposeConnectionDetails", "qualified_name": "org.springframework.boot.r2dbc.docker.compose.MySqlR2dbcDockerComposeConnectionDetailsFactory#getDockerComposeConnectionDetails", "start_line": 42, "end_line": 45, "signature": "getDockerComposeConnectionDetails(DockerComposeConnectionSource source)", "original_code": "@Override\n\tprotected R2dbcConnectionDetails getDockerComposeConnectionDetails(DockerComposeConnectionSource source) {\n\t\treturn new MySqlR2dbcDockerComposeConnectionDetails(source.getRunningService());\n\t}", "doc_comment": ""}, "code_tokens": ["R2dbcConnectionDetails", "getDockerComposeConnectionDetails", "protected", "(", ")", "{", "}", "@", "Override", "DockerComposeConnectionSource", "source", "return", ";", "new", "MySqlR2dbcDockerComposeConnectionDetails", "(", ")", "source", ".", "getRunningService", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 34, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 17, "n_whitespaces": 13, "n_words": 11, "nloc": 4, "token_counts": 22}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-r2dbc/src/main/java/org/springframework/boot/r2dbc/docker/compose/MySqlR2dbcDockerComposeConnectionDetailsFactory.java#65-68", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-r2dbc/src/main/java/org/springframework/boot/r2dbc/docker/compose/MySqlR2dbcDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getConnectionFactoryOptions", "qualified_name": "org.springframework.boot.r2dbc.docker.compose.MySqlR2dbcDockerComposeConnectionDetailsFactory#getConnectionFactoryOptions", "start_line": 65, "end_line": 68, "signature": "getConnectionFactoryOptions()", "original_code": "@Override\n\t\tpublic ConnectionFactoryOptions getConnectionFactoryOptions() {\n\t\t\treturn this.connectionFactoryOptions;\n\t\t}", "doc_comment": ""}, "code_tokens": ["ConnectionFactoryOptions", "getConnectionFactoryOptions", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "this", ".", "connectionFactoryOptions"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-r2dbc/src/main/java/org/springframework/boot/r2dbc/docker/compose/PostgresR2dbcDockerComposeConnectionDetailsFactory.java#45-48", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-r2dbc/src/main/java/org/springframework/boot/r2dbc/docker/compose/PostgresR2dbcDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getDockerComposeConnectionDetails", "qualified_name": "org.springframework.boot.r2dbc.docker.compose.PostgresR2dbcDockerComposeConnectionDetailsFactory#getDockerComposeConnectionDetails", "start_line": 45, "end_line": 48, "signature": "getDockerComposeConnectionDetails(DockerComposeConnectionSource source)", "original_code": "@Override\n\tprotected R2dbcConnectionDetails getDockerComposeConnectionDetails(DockerComposeConnectionSource source) {\n\t\treturn new PostgresDbR2dbcDockerComposeConnectionDetails(source.getRunningService(), source.getEnvironment());\n\t}", "doc_comment": ""}, "code_tokens": ["R2dbcConnectionDetails", "getDockerComposeConnectionDetails", "protected", "(", ")", "{", "}", "@", "Override", "DockerComposeConnectionSource", "source", "return", ";", "new", "PostgresDbR2dbcDockerComposeConnectionDetails", "(", ",", ")", "source", ".", "getRunningService", "source", ".", "getEnvironment", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 42, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 19, "n_whitespaces": 14, "n_words": 13, "nloc": 4, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-r2dbc/src/main/java/org/springframework/boot/r2dbc/docker/compose/PostgresR2dbcDockerComposeConnectionDetailsFactory.java#68-71", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-r2dbc/src/main/java/org/springframework/boot/r2dbc/docker/compose/PostgresR2dbcDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getConnectionFactoryOptions", "qualified_name": "org.springframework.boot.r2dbc.docker.compose.PostgresR2dbcDockerComposeConnectionDetailsFactory#getConnectionFactoryOptions", "start_line": 68, "end_line": 71, "signature": "getConnectionFactoryOptions()", "original_code": "@Override\n\t\tpublic ConnectionFactoryOptions getConnectionFactoryOptions() {\n\t\t\treturn this.connectionFactoryOptions;\n\t\t}", "doc_comment": ""}, "code_tokens": ["ConnectionFactoryOptions", "getConnectionFactoryOptions", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "this", ".", "connectionFactoryOptions"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-r2dbc/src/main/java/org/springframework/boot/r2dbc/docker/compose/PostgresR2dbcDockerComposeConnectionDetailsFactory.java#73-79", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-r2dbc/src/main/java/org/springframework/boot/r2dbc/docker/compose/PostgresR2dbcDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getConnectionFactoryOptions", "qualified_name": "org.springframework.boot.r2dbc.docker.compose.PostgresR2dbcDockerComposeConnectionDetailsFactory#getConnectionFactoryOptions", "start_line": 73, "end_line": 79, "signature": "getConnectionFactoryOptions(RunningService service,\n\t\t\t\tEnvironment environment)", "original_code": "private static ConnectionFactoryOptions getConnectionFactoryOptions(RunningService service,\n\t\t\t\tEnvironment environment) {\n\t\t\tPostgresEnvironment env = new PostgresEnvironment(service.env());\n\t\t\tConnectionFactoryOptions connectionFactoryOptions = connectionFactoryOptionsBuilder.build(service,\n\t\t\t\t\tenv.getDatabase(), env.getUsername(), env.getPassword());\n\t\t\treturn addApplicationNameIfNecessary(connectionFactoryOptions, environment);\n\t\t}", "doc_comment": ""}, "code_tokens": ["ConnectionFactoryOptions", "getConnectionFactoryOptions", "private", "static", "(", ",", ")", "{", "}", "RunningService", "service", "Environment", "environment", "PostgresEnvironment", ";", "ConnectionFactoryOptions", ";", "return", ";", "env", "=", "connectionFactoryOptions", "=", "addApplicationNameIfNecessary", "new", "PostgresEnvironment", "connectionFactoryOptionsBuilder", ".", "build", "(", "connectionFactoryOptions", ",", "environment", ")", "(", ")", "(", "service", ",", ",", ",", ")", "service", ".", "env", "env", ".", "getDatabase", "env", ".", "getUsername", "env", ".", "getPassword", "(", ")", "(", ")", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 88, "ast_depth": 10, "n_identifiers": 11, "vocab_size": 27, "n_whitespaces": 43, "n_words": 29, "nloc": 7, "token_counts": 62}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:module/spring-boot-r2dbc/src/main/java/org/springframework/boot/r2dbc/docker/compose/PostgresR2dbcDockerComposeConnectionDetailsFactory.java#81-91", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "module/spring-boot-r2dbc/src/main/java/org/springframework/boot/r2dbc/docker/compose/PostgresR2dbcDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "addApplicationNameIfNecessary", "qualified_name": "org.springframework.boot.r2dbc.docker.compose.PostgresR2dbcDockerComposeConnectionDetailsFactory#addApplicationNameIfNecessary", "start_line": 81, "end_line": 91, "signature": "addApplicationNameIfNecessary(\n\t\t\t\tConnectionFactoryOptions connectionFactoryOptions, Environment environment)", "original_code": "private static ConnectionFactoryOptions addApplicationNameIfNecessary(\n\t\t\t\tConnectionFactoryOptions connectionFactoryOptions, Environment environment) {\n\t\t\tif (connectionFactoryOptions.hasOption(APPLICATION_NAME)) {\n\t\t\t\treturn connectionFactoryOptions;\n\t\t\t}\n\t\t\tString applicationName = environment.getProperty(\"spring.application.name\");\n\t\t\tif (!StringUtils.hasText(applicationName)) {\n\t\t\t\treturn connectionFactoryOptions;\n\t\t\t}\n\t\t\treturn connectionFactoryOptions.mutate().option(APPLICATION_NAME, applicationName).build();\n\t\t}", "doc_comment": ""}, "code_tokens": ["ConnectionFactoryOptions", "addApplicationNameIfNecessary", "private", "static", "(", ",", ")", "{", "}", "ConnectionFactoryOptions", "connectionFactoryOptions", "Environment", "environment", "if", "String", ";", "if", "return", ";", "(", ")", "{", "}", "applicationName", "=", "(", ")", "{", "}", ".", "build", "connectionFactoryOptions", ".", "hasOption", "return", "connectionFactoryOptions", ";", "environment", ".", "getProperty", "!", "return", "connectionFactoryOptions", ";", ".", "option", "(", ")", "(", "APPLICATION_NAME", ")", "(", ")", "StringUtils", ".", "hasText", "connectionFactoryOptions", ".", "mutate", "(", "APPLICATION_NAME", ",", "applicationName", ")", "\"", "spring.application.name", "\"", "(", "applicationName", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 104, "ast_depth": 9, "n_identifiers": 12, "vocab_size": 30, "n_whitespaces": 60, "n_words": 34, "nloc": 11, "token_counts": 72}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:test-support/spring-boot-docker-test-support/src/main/java/org/springframework/boot/testsupport/container/TestImage.java#292-299", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "test-support/spring-boot-docker-test-support/src/main/java/org/springframework/boot/testsupport/container/TestImage.java", "language": "Java"}, "method": {"name": "getIfPossible", "qualified_name": "org.springframework.boot.testsupport.container.TestImage#getIfPossible", "start_line": 292, "end_line": 299, "signature": "getIfPossible(Supplier<Class<?>> supplier)", "original_code": "static Class<?> getIfPossible(Supplier<Class<?>> supplier) {\n\t\ttry {\n\t\t\treturn (supplier != null) ? supplier.get() : null;\n\t\t}\n\t\tcatch (NoClassDefFoundError ex) {\n\t\t\treturn null;\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["getIfPossible", "static", "Class", "(", ")", "{", "}", "<", ">", "supplier", "try", "?", "Supplier", "{", "}", "catch", "(", ")", "<", ">", "return", ";", "ex", "{", "}", "Class", "?", ":", "null", "NoClassDefFoundError", "return", "null", ";", "<", ">", "(", ")", "supplier", ".", "get", "?", "supplier", "!=", "null", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 73, "ast_depth": 10, "n_identifiers": 4, "vocab_size": 23, "n_whitespaces": 38, "n_words": 18, "nloc": 8, "token_counts": 46}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:test-support/spring-boot-docker-test-support/src/main/java/org/springframework/boot/testsupport/container/TestImage.java#301-303", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "test-support/spring-boot-docker-test-support/src/main/java/org/springframework/boot/testsupport/container/TestImage.java", "language": "Java"}, "method": {"name": "matchesContainerClass", "qualified_name": "org.springframework.boot.testsupport.container.TestImage#matchesContainerClass", "start_line": 301, "end_line": 303, "signature": "matchesContainerClass(Class<?> containerClass)", "original_code": "private boolean matchesContainerClass(Class<?> containerClass) {\n\t\treturn this.containerClass != null && this.containerClass.isAssignableFrom(containerClass);\n\t}", "doc_comment": ""}, "code_tokens": ["boolean", "matchesContainerClass", "private", "(", ")", "{", "}", "containerClass", "return", ";", "Class", "&&", "<", ">", "!=", "null", ".", "isAssignableFrom", "?", "this", ".", "containerClass", "this", ".", "containerClass", "(", "containerClass", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 44, "ast_depth": 8, "n_identifiers": 3, "vocab_size": 20, "n_whitespaces": 14, "n_words": 13, "nloc": 3, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:test-support/spring-boot-docker-test-support/src/main/java/org/springframework/boot/testsupport/container/TestImage.java#309-311", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "test-support/spring-boot-docker-test-support/src/main/java/org/springframework/boot/testsupport/container/TestImage.java", "language": "Java"}, "method": {"name": "genericContainer", "qualified_name": "org.springframework.boot.testsupport.container.TestImage#genericContainer", "start_line": 309, "end_line": 311, "signature": "genericContainer()", "original_code": "public GenericContainer<?> genericContainer() {\n\t\treturn createContainer(GenericContainer.class);\n\t}", "doc_comment": "/**\n\t * Create a {@link GenericContainer} for the given {@link TestImage}.\n\t * @return a generic container for the test image\n\t */"}, "code_tokens": ["genericContainer", "public", "GenericContainer", "(", ")", "{", "}", "<", ">", "return", ";", "?", "createContainer", "(", ")", "GenericContainer", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 30, "ast_depth": 8, "n_identifiers": 2, "vocab_size": 15, "n_whitespaces": 9, "n_words": 7, "nloc": 3, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:test-support/spring-boot-docker-test-support/src/main/java/org/springframework/boot/testsupport/container/TestImage.java#313-328", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "test-support/spring-boot-docker-test-support/src/main/java/org/springframework/boot/testsupport/container/TestImage.java", "language": "Java"}, "method": {"name": "createContainer", "qualified_name": "org.springframework.boot.testsupport.container.TestImage#createContainer", "start_line": 313, "end_line": 328, "signature": "createContainer(Class<C> containerClass)", "original_code": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n\tprivate <C extends Container<?>> C createContainer(Class<C> containerClass) {\n\t\tDockerImageName dockerImageName = DockerImageName.parse(toString());\n\t\ttry {\n\t\t\tConstructor<C> constructor = containerClass.getDeclaredConstructor(DockerImageName.class);\n\t\t\tconstructor.setAccessible(true);\n\t\t\tC container = constructor.newInstance(dockerImageName);\n\t\t\tif (this.containerSetup != null) {\n\t\t\t\t((Consumer) this.containerSetup).accept(container);\n\t\t\t}\n\t\t\treturn container;\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tthrow new IllegalStateException(\"Unable to create container \" + containerClass, ex);\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["C", "createContainer", "private", "<", ">", "(", ")", "{", "}", "@", "SuppressWarnings", "C", "containerClass", "DockerImageName", ";", "try", "(", ")", "extends", "Class", "dockerImageName", "=", "{", "}", "catch", "(", ")", "{", ",", "}", "Container", "<", "C", ">", "DockerImageName", ".", "parse", ";", ";", "C", ";", "if", "return", "container", ";", "ex", "{", "}", "\"", "rawtypes", "\"", "\"", "unchecked", "\"", "<", ">", "(", ")", "Constructor", "constructor", "=", "constructor", ".", "setAccessible", "container", "=", "(", ")", "{", "}", "Exception", "throw", ";", "?", "toString", "<", "C", ">", "containerClass", ".", "getDeclaredConstructor", "(", "true", ")", "constructor", ".", "newInstance", "!=", "null", ";", "new", "IllegalStateException", "(", ")", "(", ")", "(", "dockerImageName", ")", "this", ".", "containerSetup", ".", "accept", "(", ",", "ex", ")", "DockerImageName", ".", "class", "(", ")", "(", "container", ")", "+", "containerClass", "(", "Consumer", ")", "\"", "Unable to create container ", "\"", "this", ".", "containerSetup"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 189, "ast_depth": 13, "n_identifiers": 15, "vocab_size": 52, "n_whitespaces": 90, "n_words": 56, "nloc": 16, "token_counts": 127}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:test-support/spring-boot-docker-test-support/src/main/java/org/springframework/boot/testsupport/container/TestImage.java#330-332", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "test-support/spring-boot-docker-test-support/src/main/java/org/springframework/boot/testsupport/container/TestImage.java", "language": "Java"}, "method": {"name": "getTag", "qualified_name": "org.springframework.boot.testsupport.container.TestImage#getTag", "start_line": 330, "end_line": 332, "signature": "getTag()", "original_code": "public String getTag() {\n\t\treturn this.tag;\n\t}", "doc_comment": ""}, "code_tokens": ["String", "getTag", "public", "(", ")", "{", "}", "return", ";", "this", ".", "tag"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 19, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 12, "n_whitespaces": 9, "n_words": 6, "nloc": 3, "token_counts": 12}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:test-support/spring-boot-docker-test-support/src/main/java/org/springframework/boot/testsupport/container/TestImage.java#334-337", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "test-support/spring-boot-docker-test-support/src/main/java/org/springframework/boot/testsupport/container/TestImage.java", "language": "Java"}, "method": {"name": "toString", "qualified_name": "org.springframework.boot.testsupport.container.TestImage#toString", "start_line": 334, "end_line": 337, "signature": "toString()", "original_code": "@Override\n\tpublic String toString() {\n\t\treturn (this.tag != null) ? this.name + \":\" + this.tag : this.name;\n\t}", "doc_comment": ""}, "code_tokens": ["String", "toString", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "?", ":", "(", ")", "+", "this", ".", "name", "!=", "null", "+", "this", ".", "tag", "this", ".", "tag", "this", ".", "name", "\"", ":", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 51, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 21, "n_whitespaces": 21, "n_words": 14, "nloc": 4, "token_counts": 34}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:test-support/spring-boot-docker-test-support/src/main/java/org/springframework/boot/testsupport/container/TestImage.java#346-348", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "test-support/spring-boot-docker-test-support/src/main/java/org/springframework/boot/testsupport/container/TestImage.java", "language": "Java"}, "method": {"name": "container", "qualified_name": "org.springframework.boot.testsupport.container.TestImage#container", "start_line": 346, "end_line": 348, "signature": "container(Class<C> containerClass)", "original_code": "public static <C extends Container<?>> C container(Class<C> containerClass) {\n\t\treturn forContainerClass(containerClass).createContainer(containerClass);\n\t}", "doc_comment": "/**\n\t * Factory method to create and configure a {@link Container} using a deduced\n\t * {@link TestImage}.\n\t * @param <C> the container type\n\t * @param containerClass the container type\n\t * @return a container instance\n\t */"}, "code_tokens": ["C", "container", "public", "static", "<", ">", "(", ")", "{", "}", "C", "containerClass", "return", ";", "extends", "Class", ".", "createContainer", "Container", "<", "C", ">", "forContainerClass", "(", "containerClass", ")", "<", ">", "(", "containerClass", ")", "?"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 51, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 20, "n_whitespaces": 14, "n_words": 15, "nloc": 3, "token_counts": 32}}
{"dataset_split": "train", "id": "spring-boot@c1d51f8:test-support/spring-boot-docker-test-support/src/main/java/org/springframework/boot/testsupport/container/TestImage.java#350-357", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "c1d51f868785b0cb8bb0534d9f0620a0cd47e9e0", "license": "apache-2.0"}, "file": {"path": "test-support/spring-boot-docker-test-support/src/main/java/org/springframework/boot/testsupport/container/TestImage.java", "language": "Java"}, "method": {"name": "forContainerClass", "qualified_name": "org.springframework.boot.testsupport.container.TestImage#forContainerClass", "start_line": 350, "end_line": 357, "signature": "forContainerClass(Class<?> containerClass)", "original_code": "private static TestImage forContainerClass(Class<?> containerClass) {\n\t\tList<TestImage> images = Arrays.stream(values())\n\t\t\t.filter((image) -> image.matchesContainerClass(containerClass))\n\t\t\t.toList();\n\t\tAssert.state(!images.isEmpty(), () -> \"Unknown container class \" + containerClass);\n\t\tAssert.state(images.size() == 1, () -> \"Multiple test images match container class \" + containerClass);\n\t\treturn images.get(0);\n\t}", "doc_comment": ""}, "code_tokens": ["TestImage", "forContainerClass", "private", "static", "(", ")", "{", "}", "containerClass", ";", ";", ";", "return", ";", "Class", "List", "images", "=", "Assert", ".", "state", "Assert", ".", "state", "images", ".", "get", "<", ">", "<", "TestImage", ">", ".", "toList", "(", ",", ")", "(", ",", ")", "(", "0", ")", "?", ".", "filter", "(", ")", "!", "->", "==", "1", "->", "Arrays", ".", "stream", "(", ")", "images", ".", "isEmpty", "(", ")", "+", "containerClass", "images", ".", "size", "(", ")", "+", "containerClass", "(", ")", "->", "(", ")", "\"", "Unknown container class ", "\"", "(", ")", "\"", "Multiple test images match container class ", "\"", "values", "(", "image", ")", "image", ".", "matchesContainerClass", "(", ")", "(", "containerClass", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 145, "ast_depth": 12, "n_identifiers": 15, "vocab_size": 41, "n_whitespaces": 54, "n_words": 42, "nloc": 8, "token_counts": 97}}
{"dataset_split": "train", "id": "spring-boot@630bb33:spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/cassandra/CassandraDockerComposeConnectionDetailsFactoryIntegrationTests.java#35-38", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "630bb335ea710e45de8e48fd9fe1352a98d8e293", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/cassandra/CassandraDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "runCreatesConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.docker.compose.service.connection.cassandra.CassandraDockerComposeConnectionDetailsFactoryIntegrationTests#runCreatesConnectionDetails", "start_line": 35, "end_line": 38, "signature": "runCreatesConnectionDetails(CassandraConnectionDetails connectionDetails)", "original_code": "@DockerComposeTest(composeFile = \"cassandra-compose.yaml\", image = TestImage.CASSANDRA)\n\tvoid runCreatesConnectionDetails(CassandraConnectionDetails connectionDetails) {\n\t\tassertConnectionDetails(connectionDetails);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runCreatesConnectionDetails", "(", ")", "{", "}", "@", "DockerComposeTest", "CassandraConnectionDetails", "connectionDetails", ";", "(", ",", ")", "assertConnectionDetails", "composeFile", "=", "image", "=", "(", "connectionDetails", ")", "\"", "cassandra-compose.yaml", "\"", "TestImage", ".", "CASSANDRA"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 43, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 21, "n_whitespaces": 15, "n_words": 14, "nloc": 4, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@630bb33:spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/cassandra/CassandraDockerComposeConnectionDetailsFactoryIntegrationTests.java#40-43", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "630bb335ea710e45de8e48fd9fe1352a98d8e293", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/cassandra/CassandraDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "runWithBitnamiImageCreatesConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.docker.compose.service.connection.cassandra.CassandraDockerComposeConnectionDetailsFactoryIntegrationTests#runWithBitnamiImageCreatesConnectionDetails", "start_line": 40, "end_line": 43, "signature": "runWithBitnamiImageCreatesConnectionDetails(CassandraConnectionDetails connectionDetails)", "original_code": "@DockerComposeTest(composeFile = \"cassandra-bitnami-compose.yaml\", image = TestImage.BITNAMI_CASSANDRA)\n\tvoid runWithBitnamiImageCreatesConnectionDetails(CassandraConnectionDetails connectionDetails) {\n\t\tassertConnectionDetails(connectionDetails);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runWithBitnamiImageCreatesConnectionDetails", "(", ")", "{", "}", "@", "DockerComposeTest", "CassandraConnectionDetails", "connectionDetails", ";", "(", ",", ")", "assertConnectionDetails", "composeFile", "=", "image", "=", "(", "connectionDetails", ")", "\"", "cassandra-bitnami-compose.yaml", "\"", "TestImage", ".", "BITNAMI_CASSANDRA"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 43, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 21, "n_whitespaces": 15, "n_words": 15, "nloc": 4, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@630bb33:spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/cassandra/CassandraDockerComposeConnectionDetailsFactoryIntegrationTests.java#45-54", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "630bb335ea710e45de8e48fd9fe1352a98d8e293", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/cassandra/CassandraDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "assertConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.docker.compose.service.connection.cassandra.CassandraDockerComposeConnectionDetailsFactoryIntegrationTests#assertConnectionDetails", "start_line": 45, "end_line": 54, "signature": "assertConnectionDetails(CassandraConnectionDetails connectionDetails)", "original_code": "private void assertConnectionDetails(CassandraConnectionDetails connectionDetails) {\n\t\tList<Node> contactPoints = connectionDetails.getContactPoints();\n\t\tassertThat(contactPoints).hasSize(1);\n\t\tNode node = contactPoints.get(0);\n\t\tassertThat(node.host()).isNotNull();\n\t\tassertThat(node.port()).isGreaterThan(0);\n\t\tassertThat(connectionDetails.getUsername()).isNull();\n\t\tassertThat(connectionDetails.getPassword()).isNull();\n\t\tassertThat(connectionDetails.getLocalDatacenter()).isEqualTo(\"testdc1\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "assertConnectionDetails", "private", "(", ")", "{", "}", "CassandraConnectionDetails", "connectionDetails", ";", ";", "Node", ";", ";", ";", ";", ";", ";", "List", "contactPoints", "=", ".", "hasSize", "node", "=", ".", "isNotNull", ".", "isGreaterThan", ".", "isNull", ".", "isNull", ".", "isEqualTo", "<", "Node", ">", "connectionDetails", ".", "getContactPoints", "assertThat", "(", "1", ")", "contactPoints", ".", "get", "assertThat", "(", ")", "assertThat", "(", "0", ")", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "(", ")", "(", "contactPoints", ")", "(", "0", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "\"", "testdc1", "\"", "node", ".", "host", "node", ".", "port", "connectionDetails", ".", "getUsername", "connectionDetails", ".", "getPassword", "connectionDetails", ".", "getLocalDatacenter", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 167, "ast_depth": 10, "n_identifiers": 17, "vocab_size": 35, "n_whitespaces": 36, "n_words": 41, "nloc": 10, "token_counts": 110}}
{"dataset_split": "train", "id": "spring-boot@630bb33:spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/clickhouse/ClickHouseJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#38-42", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "630bb335ea710e45de8e48fd9fe1352a98d8e293", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/clickhouse/ClickHouseJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "runCreatesConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.docker.compose.service.connection.clickhouse.ClickHouseJdbcDockerComposeConnectionDetailsFactoryIntegrationTests#runCreatesConnectionDetails", "start_line": 38, "end_line": 42, "signature": "runCreatesConnectionDetails(JdbcConnectionDetails connectionDetails)", "original_code": "@DockerComposeTest(composeFile = \"clickhouse-compose.yaml\", image = TestImage.CLICKHOUSE)\n\tvoid runCreatesConnectionDetails(JdbcConnectionDetails connectionDetails) throws ClassNotFoundException {\n\t\tassertConnectionDetails(connectionDetails);\n\t\tcheckDatabaseAccess(connectionDetails);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runCreatesConnectionDetails", "(", ")", "throws", "ClassNotFoundException", "{", "}", "@", "DockerComposeTest", "JdbcConnectionDetails", "connectionDetails", ";", ";", "(", ",", ")", "assertConnectionDetails", "checkDatabaseAccess", "composeFile", "=", "image", "=", "(", "connectionDetails", ")", "(", "connectionDetails", ")", "\"", "clickhouse-compose.yaml", "\"", "TestImage", ".", "CLICKHOUSE"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 54, "ast_depth": 8, "n_identifiers": 9, "vocab_size": 24, "n_whitespaces": 20, "n_words": 18, "nloc": 5, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@630bb33:spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/clickhouse/ClickHouseJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#44-49", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "630bb335ea710e45de8e48fd9fe1352a98d8e293", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/clickhouse/ClickHouseJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "runWithBitnamiImageCreatesConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.docker.compose.service.connection.clickhouse.ClickHouseJdbcDockerComposeConnectionDetailsFactoryIntegrationTests#runWithBitnamiImageCreatesConnectionDetails", "start_line": 44, "end_line": 49, "signature": "runWithBitnamiImageCreatesConnectionDetails(JdbcConnectionDetails connectionDetails)", "original_code": "@DockerComposeTest(composeFile = \"clickhouse-bitnami-compose.yaml\", image = TestImage.BITNAMI_CLICKHOUSE)\n\tvoid runWithBitnamiImageCreatesConnectionDetails(JdbcConnectionDetails connectionDetails) {\n\t\tassertConnectionDetails(connectionDetails);\n\t\t// See https://github.com/bitnami/containers/issues/73550\n\t\t// checkDatabaseAccess(connectionDetails);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runWithBitnamiImageCreatesConnectionDetails", "(", ")", "{", "// See https://github.com/bitnami/containers/issues/73550", "// checkDatabaseAccess(connectionDetails);", "}", "@", "DockerComposeTest", "JdbcConnectionDetails", "connectionDetails", ";", "(", ",", ")", "assertConnectionDetails", "composeFile", "=", "image", "=", "(", "connectionDetails", ")", "\"", "clickhouse-bitnami-compose.yaml", "\"", "TestImage", ".", "BITNAMI_CLICKHOUSE"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 45, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 23, "n_whitespaces": 24, "n_words": 25, "nloc": 6, "token_counts": 30}}
{"dataset_split": "train", "id": "spring-boot@630bb33:spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/clickhouse/ClickHouseJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#51-55", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "630bb335ea710e45de8e48fd9fe1352a98d8e293", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/clickhouse/ClickHouseJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "assertConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.docker.compose.service.connection.clickhouse.ClickHouseJdbcDockerComposeConnectionDetailsFactoryIntegrationTests#assertConnectionDetails", "start_line": 51, "end_line": 55, "signature": "assertConnectionDetails(JdbcConnectionDetails connectionDetails)", "original_code": "private void assertConnectionDetails(JdbcConnectionDetails connectionDetails) {\n\t\tassertThat(connectionDetails.getUsername()).isEqualTo(\"myuser\");\n\t\tassertThat(connectionDetails.getPassword()).isEqualTo(\"secret\");\n\t\tassertThat(connectionDetails.getJdbcUrl()).startsWith(\"jdbc:clickhouse://\").endsWith(\"/mydatabase\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "assertConnectionDetails", "private", "(", ")", "{", "}", "JdbcConnectionDetails", "connectionDetails", ";", ";", ";", ".", "isEqualTo", ".", "isEqualTo", ".", "endsWith", "assertThat", "(", ")", "assertThat", "(", ")", ".", "startsWith", "(", ")", "(", ")", "\"", "myuser", "\"", "(", ")", "\"", "secret", "\"", "assertThat", "(", ")", "\"", "/mydatabase", "\"", "connectionDetails", ".", "getUsername", "connectionDetails", ".", "getPassword", "(", ")", "\"", "jdbc:clickhouse://", "\"", "(", ")", "(", ")", "connectionDetails", ".", "getJdbcUrl", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 97, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 23, "n_whitespaces": 15, "n_words": 23, "nloc": 5, "token_counts": 64}}
{"dataset_split": "train", "id": "spring-boot@630bb33:spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/clickhouse/ClickHouseJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#57-67", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "630bb335ea710e45de8e48fd9fe1352a98d8e293", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/clickhouse/ClickHouseJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "checkDatabaseAccess", "qualified_name": "dockerTest.java.org.springframework.boot.docker.compose.service.connection.clickhouse.ClickHouseJdbcDockerComposeConnectionDetailsFactoryIntegrationTests#checkDatabaseAccess", "start_line": 57, "end_line": 67, "signature": "checkDatabaseAccess(JdbcConnectionDetails connectionDetails)", "original_code": "@SuppressWarnings(\"unchecked\")\n\tprivate void checkDatabaseAccess(JdbcConnectionDetails connectionDetails) throws ClassNotFoundException {\n\t\tSimpleDriverDataSource dataSource = new SimpleDriverDataSource();\n\t\tdataSource.setUrl(connectionDetails.getJdbcUrl());\n\t\tdataSource.setUsername(connectionDetails.getUsername());\n\t\tdataSource.setPassword(connectionDetails.getPassword());\n\t\tdataSource.setDriverClass((Class<? extends Driver>) ClassUtils.forName(connectionDetails.getDriverClassName(),\n\t\t\t\tgetClass().getClassLoader()));\n\t\tJdbcTemplate template = new JdbcTemplate(dataSource);\n\t\tassertThat(template.queryForObject(DatabaseDriver.CLICKHOUSE.getValidationQuery(), Integer.class)).isEqualTo(1);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "checkDatabaseAccess", "private", "(", ")", "throws", "ClassNotFoundException", "{", "}", "@", "SuppressWarnings", "JdbcConnectionDetails", "connectionDetails", "SimpleDriverDataSource", ";", ";", ";", ";", ";", "JdbcTemplate", ";", ";", "(", ")", "dataSource", "=", "dataSource", ".", "setUrl", "dataSource", ".", "setUsername", "dataSource", ".", "setPassword", "dataSource", ".", "setDriverClass", "template", "=", ".", "isEqualTo", "\"", "unchecked", "\"", "new", "SimpleDriverDataSource", "(", ")", "(", ")", "(", ")", "(", ")", "new", "JdbcTemplate", "assertThat", "(", "1", ")", "(", ")", "connectionDetails", ".", "getJdbcUrl", "connectionDetails", ".", "getUsername", "connectionDetails", ".", "getPassword", "(", ")", "(", "dataSource", ")", "(", ")", "(", ")", "(", ")", "(", ")", "Class", "ClassUtils", ".", "forName", "template", ".", "queryForObject", "<", ">", "(", ",", ")", "(", ",", ")", "?", "extends", "Driver", "connectionDetails", ".", "getDriverClassName", ".", "getClassLoader", ".", "getValidationQuery", "Integer", ".", "class", "(", ")", "getClass", "(", ")", "DatabaseDriver", ".", "CLICKHOUSE", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 184, "ast_depth": 13, "n_identifiers": 23, "vocab_size": 51, "n_whitespaces": 48, "n_words": 51, "nloc": 11, "token_counts": 125}}
{"dataset_split": "train", "id": "spring-boot@630bb33:spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/clickhouse/ClickHouseR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#40-44", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "630bb335ea710e45de8e48fd9fe1352a98d8e293", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/clickhouse/ClickHouseR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "runCreatesConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.docker.compose.service.connection.clickhouse.ClickHouseR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests#runCreatesConnectionDetails", "start_line": 40, "end_line": 44, "signature": "runCreatesConnectionDetails(R2dbcConnectionDetails connectionDetails)", "original_code": "@DockerComposeTest(composeFile = \"clickhouse-compose.yaml\", image = TestImage.CLICKHOUSE)\n\tvoid runCreatesConnectionDetails(R2dbcConnectionDetails connectionDetails) {\n\t\tassertConnectionDetails(connectionDetails);\n\t\tcheckDatabaseAccess(connectionDetails);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runCreatesConnectionDetails", "(", ")", "{", "}", "@", "DockerComposeTest", "R2dbcConnectionDetails", "connectionDetails", ";", ";", "(", ",", ")", "assertConnectionDetails", "checkDatabaseAccess", "composeFile", "=", "image", "=", "(", "connectionDetails", ")", "(", "connectionDetails", ")", "\"", "clickhouse-compose.yaml", "\"", "TestImage", ".", "CLICKHOUSE"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 51, "ast_depth": 8, "n_identifiers": 9, "vocab_size": 22, "n_whitespaces": 18, "n_words": 16, "nloc": 5, "token_counts": 33}}
{"dataset_split": "train", "id": "spring-boot@630bb33:spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/clickhouse/ClickHouseR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#46-51", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "630bb335ea710e45de8e48fd9fe1352a98d8e293", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/clickhouse/ClickHouseR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "runWithBitnamiImageCreatesConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.docker.compose.service.connection.clickhouse.ClickHouseR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests#runWithBitnamiImageCreatesConnectionDetails", "start_line": 46, "end_line": 51, "signature": "runWithBitnamiImageCreatesConnectionDetails(R2dbcConnectionDetails connectionDetails)", "original_code": "@DockerComposeTest(composeFile = \"clickhouse-bitnami-compose.yaml\", image = TestImage.BITNAMI_CLICKHOUSE)\n\tvoid runWithBitnamiImageCreatesConnectionDetails(R2dbcConnectionDetails connectionDetails) {\n\t\tassertConnectionDetails(connectionDetails);\n\t\t// See https://github.com/bitnami/containers/issues/73550\n\t\t// checkDatabaseAccess(connectionDetails);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runWithBitnamiImageCreatesConnectionDetails", "(", ")", "{", "// See https://github.com/bitnami/containers/issues/73550", "// checkDatabaseAccess(connectionDetails);", "}", "@", "DockerComposeTest", "R2dbcConnectionDetails", "connectionDetails", ";", "(", ",", ")", "assertConnectionDetails", "composeFile", "=", "image", "=", "(", "connectionDetails", ")", "\"", "clickhouse-bitnami-compose.yaml", "\"", "TestImage", ".", "BITNAMI_CLICKHOUSE"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 45, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 23, "n_whitespaces": 24, "n_words": 25, "nloc": 6, "token_counts": 30}}
{"dataset_split": "train", "id": "spring-boot@630bb33:spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/clickhouse/ClickHouseR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#53-58", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "630bb335ea710e45de8e48fd9fe1352a98d8e293", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/clickhouse/ClickHouseR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "assertConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.docker.compose.service.connection.clickhouse.ClickHouseR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests#assertConnectionDetails", "start_line": 53, "end_line": 58, "signature": "assertConnectionDetails(R2dbcConnectionDetails connectionDetails)", "original_code": "private void assertConnectionDetails(R2dbcConnectionDetails connectionDetails) {\n\t\tConnectionFactoryOptions connectionFactoryOptions = connectionDetails.getConnectionFactoryOptions();\n\t\tassertThat(connectionFactoryOptions.toString()).contains(\"database=mydatabase\", \"driver=clickhouse\",\n\t\t\t\t\"password=REDACTED\", \"user=myuser\");\n\t\tassertThat(connectionFactoryOptions.getRequiredValue(ConnectionFactoryOptions.PASSWORD)).isEqualTo(\"secret\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "assertConnectionDetails", "private", "(", ")", "{", "}", "R2dbcConnectionDetails", "connectionDetails", "ConnectionFactoryOptions", ";", ";", ";", "connectionFactoryOptions", "=", ".", "contains", ".", "isEqualTo", "connectionDetails", ".", "getConnectionFactoryOptions", "assertThat", "(", ",", ",", ",", ")", "assertThat", "(", ")", "(", ")", "(", ")", "\"", "database=mydatabase", "\"", "\"", "driver=clickhouse", "\"", "\"", "password=REDACTED", "\"", "\"", "user=myuser", "\"", "(", ")", "\"", "secret", "\"", "connectionFactoryOptions", ".", "toString", "connectionFactoryOptions", ".", "getRequiredValue", "(", ")", "(", ")", "ConnectionFactoryOptions", ".", "PASSWORD"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 95, "ast_depth": 11, "n_identifiers": 11, "vocab_size": 28, "n_whitespaces": 25, "n_words": 28, "nloc": 6, "token_counts": 65}}
{"dataset_split": "train", "id": "spring-boot@630bb33:spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/clickhouse/ClickHouseR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#60-69", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "630bb335ea710e45de8e48fd9fe1352a98d8e293", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/clickhouse/ClickHouseR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "checkDatabaseAccess", "qualified_name": "dockerTest.java.org.springframework.boot.docker.compose.service.connection.clickhouse.ClickHouseR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests#checkDatabaseAccess", "start_line": 60, "end_line": 69, "signature": "checkDatabaseAccess(R2dbcConnectionDetails connectionDetails)", "original_code": "private void checkDatabaseAccess(R2dbcConnectionDetails connectionDetails) {\n\t\tConnectionFactoryOptions connectionFactoryOptions = connectionDetails.getConnectionFactoryOptions();\n\t\tConnectionFactory connectionFactory = ConnectionFactories.get(connectionFactoryOptions);\n\t\tString sql = DatabaseDriver.CLICKHOUSE.getValidationQuery();\n\t\tInteger result = Mono.from(connectionFactory.create())\n\t\t\t.flatMapMany((connection) -> connection.createStatement(sql).execute())\n\t\t\t.flatMap((r) -> r.map((row, rowMetadata) -> row.get(0, Integer.class)))\n\t\t\t.blockFirst(Duration.ofSeconds(30));\n\t\tassertThat(result).isEqualTo(1);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "checkDatabaseAccess", "private", "(", ")", "{", "}", "R2dbcConnectionDetails", "connectionDetails", "ConnectionFactoryOptions", ";", "ConnectionFactory", ";", "String", ";", "Integer", ";", ";", "connectionFactoryOptions", "=", "connectionFactory", "=", "sql", "=", "result", "=", ".", "isEqualTo", "connectionDetails", ".", "getConnectionFactoryOptions", "ConnectionFactories", ".", "get", ".", "getValidationQuery", ".", "blockFirst", "assertThat", "(", "1", ")", "(", ")", "(", "connectionFactoryOptions", ")", "DatabaseDriver", ".", "CLICKHOUSE", "(", ")", ".", "flatMap", "(", ")", "(", "result", ")", ".", "flatMapMany", "(", ")", "Duration", ".", "ofSeconds", "Mono", ".", "from", "(", ")", "->", "(", "30", ")", "(", ")", "->", "(", "r", ")", "r", ".", "map", "connectionFactory", ".", "create", "(", "connection", ")", ".", "execute", "(", ")", "(", ")", "connection", ".", "createStatement", "(", ")", "->", "(", "sql", ")", "(", "row", ",", "rowMetadata", ")", "row", ".", "get", "(", "0", ",", ")", "Integer", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 173, "ast_depth": 16, "n_identifiers": 29, "vocab_size": 49, "n_whitespaces": 53, "n_words": 50, "nloc": 10, "token_counts": 120}}
{"dataset_split": "train", "id": "spring-boot@630bb33:spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/elasticsearch/ElasticsearchDockerComposeConnectionDetailsFactoryIntegrationTests.java#37-40", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "630bb335ea710e45de8e48fd9fe1352a98d8e293", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/elasticsearch/ElasticsearchDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "runCreatesConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.docker.compose.service.connection.elasticsearch.ElasticsearchDockerComposeConnectionDetailsFactoryIntegrationTests#runCreatesConnectionDetails", "start_line": 37, "end_line": 40, "signature": "runCreatesConnectionDetails(ElasticsearchConnectionDetails connectionDetails)", "original_code": "@DockerComposeTest(composeFile = \"elasticsearch-compose.yaml\", image = TestImage.ELASTICSEARCH_8)\n\tvoid runCreatesConnectionDetails(ElasticsearchConnectionDetails connectionDetails) {\n\t\tassertConnectionDetails(connectionDetails);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runCreatesConnectionDetails", "(", ")", "{", "}", "@", "DockerComposeTest", "ElasticsearchConnectionDetails", "connectionDetails", ";", "(", ",", ")", "assertConnectionDetails", "composeFile", "=", "image", "=", "(", "connectionDetails", ")", "\"", "elasticsearch-compose.yaml", "\"", "TestImage", ".", "ELASTICSEARCH_8"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 43, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 21, "n_whitespaces": 15, "n_words": 14, "nloc": 4, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@630bb33:spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/elasticsearch/ElasticsearchDockerComposeConnectionDetailsFactoryIntegrationTests.java#42-45", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "630bb335ea710e45de8e48fd9fe1352a98d8e293", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/elasticsearch/ElasticsearchDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "runWithBitnamiImageCreatesConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.docker.compose.service.connection.elasticsearch.ElasticsearchDockerComposeConnectionDetailsFactoryIntegrationTests#runWithBitnamiImageCreatesConnectionDetails", "start_line": 42, "end_line": 45, "signature": "runWithBitnamiImageCreatesConnectionDetails(ElasticsearchConnectionDetails connectionDetails)", "original_code": "@DockerComposeTest(composeFile = \"elasticsearch-bitnami-compose.yaml\", image = TestImage.BITNAMI_ELASTICSEARCH)\n\tvoid runWithBitnamiImageCreatesConnectionDetails(ElasticsearchConnectionDetails connectionDetails) {\n\t\tassertConnectionDetails(connectionDetails);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runWithBitnamiImageCreatesConnectionDetails", "(", ")", "{", "}", "@", "DockerComposeTest", "ElasticsearchConnectionDetails", "connectionDetails", ";", "(", ",", ")", "assertConnectionDetails", "composeFile", "=", "image", "=", "(", "connectionDetails", ")", "\"", "elasticsearch-bitnami-compose.yaml", "\"", "TestImage", ".", "BITNAMI_ELASTICSEARCH"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 43, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 21, "n_whitespaces": 15, "n_words": 15, "nloc": 4, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@630bb33:spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/elasticsearch/ElasticsearchDockerComposeConnectionDetailsFactoryIntegrationTests.java#47-58", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "630bb335ea710e45de8e48fd9fe1352a98d8e293", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/elasticsearch/ElasticsearchDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "assertConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.docker.compose.service.connection.elasticsearch.ElasticsearchDockerComposeConnectionDetailsFactoryIntegrationTests#assertConnectionDetails", "start_line": 47, "end_line": 58, "signature": "assertConnectionDetails(ElasticsearchConnectionDetails connectionDetails)", "original_code": "private void assertConnectionDetails(ElasticsearchConnectionDetails connectionDetails) {\n\t\tassertThat(connectionDetails.getUsername()).isEqualTo(\"elastic\");\n\t\tassertThat(connectionDetails.getPassword()).isEqualTo(\"secret\");\n\t\tassertThat(connectionDetails.getPathPrefix()).isNull();\n\t\tassertThat(connectionDetails.getNodes()).hasSize(1);\n\t\tNode node = connectionDetails.getNodes().get(0);\n\t\tassertThat(node.hostname()).isNotNull();\n\t\tassertThat(node.port()).isGreaterThan(0);\n\t\tassertThat(node.protocol()).isEqualTo(Protocol.HTTP);\n\t\tassertThat(node.username()).isEqualTo(\"elastic\");\n\t\tassertThat(node.password()).isEqualTo(\"secret\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "assertConnectionDetails", "private", "(", ")", "{", "}", "ElasticsearchConnectionDetails", "connectionDetails", ";", ";", ";", ";", "Node", ";", ";", ";", ";", ";", ";", ".", "isEqualTo", ".", "isEqualTo", ".", "isNull", ".", "hasSize", "node", "=", ".", "isNotNull", ".", "isGreaterThan", ".", "isEqualTo", ".", "isEqualTo", ".", "isEqualTo", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", "1", ")", ".", "get", "assertThat", "(", ")", "assertThat", "(", "0", ")", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "(", ")", "\"", "elastic", "\"", "(", ")", "\"", "secret", "\"", "(", ")", "(", ")", "connectionDetails", ".", "getNodes", "(", "0", ")", "(", ")", "(", ")", "(", ")", "Protocol", ".", "HTTP", "(", ")", "\"", "elastic", "\"", "(", ")", "\"", "secret", "\"", "connectionDetails", ".", "getUsername", "connectionDetails", ".", "getPassword", "connectionDetails", ".", "getPathPrefix", "connectionDetails", ".", "getNodes", "(", ")", "node", ".", "hostname", "node", ".", "port", "node", ".", "protocol", "node", ".", "username", "node", ".", "password", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 237, "ast_depth": 10, "n_identifiers": 21, "vocab_size": 37, "n_whitespaces": 39, "n_words": 55, "nloc": 12, "token_counts": 157}}
{"dataset_split": "train", "id": "spring-boot@630bb33:spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/mariadb/MariaDbJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#35-38", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "630bb335ea710e45de8e48fd9fe1352a98d8e293", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/mariadb/MariaDbJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "runCreatesConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.docker.compose.service.connection.mariadb.MariaDbJdbcDockerComposeConnectionDetailsFactoryIntegrationTests#runCreatesConnectionDetails", "start_line": 35, "end_line": 38, "signature": "runCreatesConnectionDetails(JdbcConnectionDetails connectionDetails)", "original_code": "@DockerComposeTest(composeFile = \"mariadb-compose.yaml\", image = TestImage.MARIADB)\n\tvoid runCreatesConnectionDetails(JdbcConnectionDetails connectionDetails) {\n\t\tassertConnectionDetails(connectionDetails);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runCreatesConnectionDetails", "(", ")", "{", "}", "@", "DockerComposeTest", "JdbcConnectionDetails", "connectionDetails", ";", "(", ",", ")", "assertConnectionDetails", "composeFile", "=", "image", "=", "(", "connectionDetails", ")", "\"", "mariadb-compose.yaml", "\"", "TestImage", ".", "MARIADB"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 43, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 21, "n_whitespaces": 15, "n_words": 14, "nloc": 4, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@630bb33:spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/mariadb/MariaDbJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#40-43", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "630bb335ea710e45de8e48fd9fe1352a98d8e293", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/mariadb/MariaDbJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "runWithBitnamiImageCreatesConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.docker.compose.service.connection.mariadb.MariaDbJdbcDockerComposeConnectionDetailsFactoryIntegrationTests#runWithBitnamiImageCreatesConnectionDetails", "start_line": 40, "end_line": 43, "signature": "runWithBitnamiImageCreatesConnectionDetails(JdbcConnectionDetails connectionDetails)", "original_code": "@DockerComposeTest(composeFile = \"mariadb-bitnami-compose.yaml\", image = TestImage.BITNAMI_MARIADB)\n\tvoid runWithBitnamiImageCreatesConnectionDetails(JdbcConnectionDetails connectionDetails) {\n\t\tassertConnectionDetails(connectionDetails);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runWithBitnamiImageCreatesConnectionDetails", "(", ")", "{", "}", "@", "DockerComposeTest", "JdbcConnectionDetails", "connectionDetails", ";", "(", ",", ")", "assertConnectionDetails", "composeFile", "=", "image", "=", "(", "connectionDetails", ")", "\"", "mariadb-bitnami-compose.yaml", "\"", "TestImage", ".", "BITNAMI_MARIADB"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 43, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 21, "n_whitespaces": 15, "n_words": 15, "nloc": 4, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@630bb33:spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/mariadb/MariaDbJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#45-49", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "630bb335ea710e45de8e48fd9fe1352a98d8e293", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/mariadb/MariaDbJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "assertConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.docker.compose.service.connection.mariadb.MariaDbJdbcDockerComposeConnectionDetailsFactoryIntegrationTests#assertConnectionDetails", "start_line": 45, "end_line": 49, "signature": "assertConnectionDetails(JdbcConnectionDetails connectionDetails)", "original_code": "private void assertConnectionDetails(JdbcConnectionDetails connectionDetails) {\n\t\tassertThat(connectionDetails.getUsername()).isEqualTo(\"myuser\");\n\t\tassertThat(connectionDetails.getPassword()).isEqualTo(\"secret\");\n\t\tassertThat(connectionDetails.getJdbcUrl()).startsWith(\"jdbc:mariadb://\").endsWith(\"/mydatabase\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "assertConnectionDetails", "private", "(", ")", "{", "}", "JdbcConnectionDetails", "connectionDetails", ";", ";", ";", ".", "isEqualTo", ".", "isEqualTo", ".", "endsWith", "assertThat", "(", ")", "assertThat", "(", ")", ".", "startsWith", "(", ")", "(", ")", "\"", "myuser", "\"", "(", ")", "\"", "secret", "\"", "assertThat", "(", ")", "\"", "/mydatabase", "\"", "connectionDetails", ".", "getUsername", "connectionDetails", ".", "getPassword", "(", ")", "\"", "jdbc:mariadb://", "\"", "(", ")", "(", ")", "connectionDetails", ".", "getJdbcUrl", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 97, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 23, "n_whitespaces": 15, "n_words": 23, "nloc": 5, "token_counts": 64}}
{"dataset_split": "train", "id": "spring-boot@630bb33:spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/mariadb/MariaDbR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#37-40", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "630bb335ea710e45de8e48fd9fe1352a98d8e293", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/mariadb/MariaDbR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "runCreatesConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.docker.compose.service.connection.mariadb.MariaDbR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests#runCreatesConnectionDetails", "start_line": 37, "end_line": 40, "signature": "runCreatesConnectionDetails(R2dbcConnectionDetails connectionDetails)", "original_code": "@DockerComposeTest(composeFile = \"mariadb-compose.yaml\", image = TestImage.MARIADB)\n\tvoid runCreatesConnectionDetails(R2dbcConnectionDetails connectionDetails) {\n\t\tassertConnectionDetails(connectionDetails);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runCreatesConnectionDetails", "(", ")", "{", "}", "@", "DockerComposeTest", "R2dbcConnectionDetails", "connectionDetails", ";", "(", ",", ")", "assertConnectionDetails", "composeFile", "=", "image", "=", "(", "connectionDetails", ")", "\"", "mariadb-compose.yaml", "\"", "TestImage", ".", "MARIADB"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 43, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 21, "n_whitespaces": 15, "n_words": 14, "nloc": 4, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@630bb33:spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/mariadb/MariaDbR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#42-45", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "630bb335ea710e45de8e48fd9fe1352a98d8e293", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/mariadb/MariaDbR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "runWithBitnamiImageCreatesConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.docker.compose.service.connection.mariadb.MariaDbR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests#runWithBitnamiImageCreatesConnectionDetails", "start_line": 42, "end_line": 45, "signature": "runWithBitnamiImageCreatesConnectionDetails(R2dbcConnectionDetails connectionDetails)", "original_code": "@DockerComposeTest(composeFile = \"mariadb-bitnami-compose.yaml\", image = TestImage.BITNAMI_MARIADB)\n\tvoid runWithBitnamiImageCreatesConnectionDetails(R2dbcConnectionDetails connectionDetails) {\n\t\tassertConnectionDetails(connectionDetails);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runWithBitnamiImageCreatesConnectionDetails", "(", ")", "{", "}", "@", "DockerComposeTest", "R2dbcConnectionDetails", "connectionDetails", ";", "(", ",", ")", "assertConnectionDetails", "composeFile", "=", "image", "=", "(", "connectionDetails", ")", "\"", "mariadb-bitnami-compose.yaml", "\"", "TestImage", ".", "BITNAMI_MARIADB"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 43, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 21, "n_whitespaces": 15, "n_words": 15, "nloc": 4, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@630bb33:spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/mariadb/MariaDbR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#47-52", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "630bb335ea710e45de8e48fd9fe1352a98d8e293", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/mariadb/MariaDbR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "assertConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.docker.compose.service.connection.mariadb.MariaDbR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests#assertConnectionDetails", "start_line": 47, "end_line": 52, "signature": "assertConnectionDetails(R2dbcConnectionDetails connectionDetails)", "original_code": "private void assertConnectionDetails(R2dbcConnectionDetails connectionDetails) {\n\t\tConnectionFactoryOptions connectionFactoryOptions = connectionDetails.getConnectionFactoryOptions();\n\t\tassertThat(connectionFactoryOptions.toString()).contains(\"database=mydatabase\", \"driver=mariadb\",\n\t\t\t\t\"password=REDACTED\", \"user=myuser\");\n\t\tassertThat(connectionFactoryOptions.getRequiredValue(ConnectionFactoryOptions.PASSWORD)).isEqualTo(\"secret\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "assertConnectionDetails", "private", "(", ")", "{", "}", "R2dbcConnectionDetails", "connectionDetails", "ConnectionFactoryOptions", ";", ";", ";", "connectionFactoryOptions", "=", ".", "contains", ".", "isEqualTo", "connectionDetails", ".", "getConnectionFactoryOptions", "assertThat", "(", ",", ",", ",", ")", "assertThat", "(", ")", "(", ")", "(", ")", "\"", "database=mydatabase", "\"", "\"", "driver=mariadb", "\"", "\"", "password=REDACTED", "\"", "\"", "user=myuser", "\"", "(", ")", "\"", "secret", "\"", "connectionFactoryOptions", ".", "toString", "connectionFactoryOptions", ".", "getRequiredValue", "(", ")", "(", ")", "ConnectionFactoryOptions", ".", "PASSWORD"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 95, "ast_depth": 11, "n_identifiers": 11, "vocab_size": 28, "n_whitespaces": 25, "n_words": 28, "nloc": 6, "token_counts": 65}}
{"dataset_split": "train", "id": "spring-boot@630bb33:spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/mongo/MongoDockerComposeConnectionDetailsFactoryIntegrationTests.java#39-42", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "630bb335ea710e45de8e48fd9fe1352a98d8e293", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/mongo/MongoDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "runCreatesConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.docker.compose.service.connection.mongo.MongoDockerComposeConnectionDetailsFactoryIntegrationTests#runCreatesConnectionDetails", "start_line": 39, "end_line": 42, "signature": "runCreatesConnectionDetails(MongoConnectionDetails connectionDetails)", "original_code": "@DockerComposeTest(composeFile = \"mongo-compose.yaml\", image = TestImage.MONGODB)\n\tvoid runCreatesConnectionDetails(MongoConnectionDetails connectionDetails) {\n\t\tassertConnectionDetailsWithDatabase(connectionDetails, \"mydatabase\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runCreatesConnectionDetails", "(", ")", "{", "}", "@", "DockerComposeTest", "MongoConnectionDetails", "connectionDetails", ";", "(", ",", ")", "assertConnectionDetailsWithDatabase", "composeFile", "=", "image", "=", "(", "connectionDetails", ",", ")", "\"", "mongo-compose.yaml", "\"", "TestImage", ".", "MONGODB", "\"", "mydatabase", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 48, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 22, "n_whitespaces": 16, "n_words": 15, "nloc": 4, "token_counts": 32}}
{"dataset_split": "train", "id": "spring-boot@630bb33:spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/mongo/MongoDockerComposeConnectionDetailsFactoryIntegrationTests.java#44-48", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "630bb335ea710e45de8e48fd9fe1352a98d8e293", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/mongo/MongoDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "runWithBitnamiImageCreatesConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.docker.compose.service.connection.mongo.MongoDockerComposeConnectionDetailsFactoryIntegrationTests#runWithBitnamiImageCreatesConnectionDetails", "start_line": 44, "end_line": 48, "signature": "runWithBitnamiImageCreatesConnectionDetails(MongoConnectionDetails connectionDetails)", "original_code": "@DisabledOnOs(os = { OS.LINUX, OS.MAC }, architecture = \"aarch64\", disabledReason = \"The image has no ARM support\")\n\t@DockerComposeTest(composeFile = \"mongo-bitnami-compose.yaml\", image = TestImage.BITNAMI_MONGODB)\n\tvoid runWithBitnamiImageCreatesConnectionDetails(MongoConnectionDetails connectionDetails) {\n\t\tassertConnectionDetailsWithDatabase(connectionDetails, \"testdb\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runWithBitnamiImageCreatesConnectionDetails", "(", ")", "{", "}", "@", "DisabledOnOs", "@", "DockerComposeTest", "MongoConnectionDetails", "connectionDetails", ";", "(", ",", ",", ")", "(", ",", ")", "assertConnectionDetailsWithDatabase", "os", "=", "architecture", "=", "disabledReason", "=", "composeFile", "=", "image", "=", "(", "connectionDetails", ",", ")", "{", ",", "}", "\"", "aarch64", "\"", "\"", "The image has no ARM support", "\"", "\"", "mongo-bitnami-compose.yaml", "\"", "TestImage", ".", "BITNAMI_MONGODB", "\"", "testdb", "\"", "OS", ".", "LINUX", "OS", ".", "MAC"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 85, "ast_depth": 9, "n_identifiers": 15, "vocab_size": 31, "n_whitespaces": 34, "n_words": 31, "nloc": 5, "token_counts": 59}}
{"dataset_split": "train", "id": "spring-boot@630bb33:spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/mongo/MongoDockerComposeConnectionDetailsFactoryIntegrationTests.java#50-57", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "630bb335ea710e45de8e48fd9fe1352a98d8e293", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/mongo/MongoDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "assertConnectionDetailsWithDatabase", "qualified_name": "dockerTest.java.org.springframework.boot.docker.compose.service.connection.mongo.MongoDockerComposeConnectionDetailsFactoryIntegrationTests#assertConnectionDetailsWithDatabase", "start_line": 50, "end_line": 57, "signature": "assertConnectionDetailsWithDatabase(MongoConnectionDetails connectionDetails, String database)", "original_code": "private void assertConnectionDetailsWithDatabase(MongoConnectionDetails connectionDetails, String database) {\n\t\tConnectionString connectionString = connectionDetails.getConnectionString();\n\t\tassertThat(connectionString.getCredential().getUserName()).isEqualTo(\"root\");\n\t\tassertThat(connectionString.getCredential().getPassword()).isEqualTo(\"secret\".toCharArray());\n\t\tassertThat(connectionString.getCredential().getSource()).isEqualTo(\"admin\");\n\t\tassertThat(connectionString.getDatabase()).isEqualTo(database);\n\t\tassertThat(connectionDetails.getGridFs()).isNull();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "assertConnectionDetailsWithDatabase", "private", "(", ",", ")", "{", "}", "MongoConnectionDetails", "connectionDetails", "String", "database", "ConnectionString", ";", ";", ";", ";", ";", ";", "connectionString", "=", ".", "isEqualTo", ".", "isEqualTo", ".", "isEqualTo", ".", "isEqualTo", ".", "isNull", "connectionDetails", ".", "getConnectionString", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", "database", ")", "assertThat", "(", ")", "(", ")", "(", ")", "\"", "root", "\"", "(", ")", ".", "toCharArray", "(", ")", "\"", "admin", "\"", "(", ")", "(", ")", ".", "getUserName", ".", "getPassword", "\"", "secret", "\"", "(", ")", ".", "getSource", "connectionString", ".", "getDatabase", "connectionDetails", ".", "getGridFs", "connectionString", ".", "getCredential", "(", ")", "connectionString", ".", "getCredential", "(", ")", "connectionString", ".", "getCredential", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 169, "ast_depth": 11, "n_identifiers": 15, "vocab_size": 32, "n_whitespaces": 29, "n_words": 39, "nloc": 8, "token_counts": 112}}
{"dataset_split": "train", "id": "spring-boot@630bb33:spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/mysql/MySqlJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#35-38", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "630bb335ea710e45de8e48fd9fe1352a98d8e293", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/mysql/MySqlJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "runCreatesConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.docker.compose.service.connection.mysql.MySqlJdbcDockerComposeConnectionDetailsFactoryIntegrationTests#runCreatesConnectionDetails", "start_line": 35, "end_line": 38, "signature": "runCreatesConnectionDetails(JdbcConnectionDetails connectionDetails)", "original_code": "@DockerComposeTest(composeFile = \"mysql-compose.yaml\", image = TestImage.MYSQL)\n\tvoid runCreatesConnectionDetails(JdbcConnectionDetails connectionDetails) {\n\t\tassertConnectionDetails(connectionDetails);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runCreatesConnectionDetails", "(", ")", "{", "}", "@", "DockerComposeTest", "JdbcConnectionDetails", "connectionDetails", ";", "(", ",", ")", "assertConnectionDetails", "composeFile", "=", "image", "=", "(", "connectionDetails", ")", "\"", "mysql-compose.yaml", "\"", "TestImage", ".", "MYSQL"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 43, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 21, "n_whitespaces": 15, "n_words": 14, "nloc": 4, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@630bb33:spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/mysql/MySqlJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#40-43", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "630bb335ea710e45de8e48fd9fe1352a98d8e293", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/mysql/MySqlJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "runWithBitnamiImageCreatesConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.docker.compose.service.connection.mysql.MySqlJdbcDockerComposeConnectionDetailsFactoryIntegrationTests#runWithBitnamiImageCreatesConnectionDetails", "start_line": 40, "end_line": 43, "signature": "runWithBitnamiImageCreatesConnectionDetails(JdbcConnectionDetails connectionDetails)", "original_code": "@DockerComposeTest(composeFile = \"mysql-bitnami-compose.yaml\", image = TestImage.BITNAMI_MYSQL)\n\tvoid runWithBitnamiImageCreatesConnectionDetails(JdbcConnectionDetails connectionDetails) {\n\t\tassertConnectionDetails(connectionDetails);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runWithBitnamiImageCreatesConnectionDetails", "(", ")", "{", "}", "@", "DockerComposeTest", "JdbcConnectionDetails", "connectionDetails", ";", "(", ",", ")", "assertConnectionDetails", "composeFile", "=", "image", "=", "(", "connectionDetails", ")", "\"", "mysql-bitnami-compose.yaml", "\"", "TestImage", ".", "BITNAMI_MYSQL"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 43, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 21, "n_whitespaces": 15, "n_words": 15, "nloc": 4, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@630bb33:spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/mysql/MySqlJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#45-49", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "630bb335ea710e45de8e48fd9fe1352a98d8e293", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/mysql/MySqlJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "assertConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.docker.compose.service.connection.mysql.MySqlJdbcDockerComposeConnectionDetailsFactoryIntegrationTests#assertConnectionDetails", "start_line": 45, "end_line": 49, "signature": "assertConnectionDetails(JdbcConnectionDetails connectionDetails)", "original_code": "private void assertConnectionDetails(JdbcConnectionDetails connectionDetails) {\n\t\tassertThat(connectionDetails.getUsername()).isEqualTo(\"myuser\");\n\t\tassertThat(connectionDetails.getPassword()).isEqualTo(\"secret\");\n\t\tassertThat(connectionDetails.getJdbcUrl()).startsWith(\"jdbc:mysql://\").endsWith(\"/mydatabase\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "assertConnectionDetails", "private", "(", ")", "{", "}", "JdbcConnectionDetails", "connectionDetails", ";", ";", ";", ".", "isEqualTo", ".", "isEqualTo", ".", "endsWith", "assertThat", "(", ")", "assertThat", "(", ")", ".", "startsWith", "(", ")", "(", ")", "\"", "myuser", "\"", "(", ")", "\"", "secret", "\"", "assertThat", "(", ")", "\"", "/mydatabase", "\"", "connectionDetails", ".", "getUsername", "connectionDetails", ".", "getPassword", "(", ")", "\"", "jdbc:mysql://", "\"", "(", ")", "(", ")", "connectionDetails", ".", "getJdbcUrl", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 97, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 23, "n_whitespaces": 15, "n_words": 23, "nloc": 5, "token_counts": 64}}
{"dataset_split": "train", "id": "spring-boot@630bb33:spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/mysql/MySqlR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#36-39", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "630bb335ea710e45de8e48fd9fe1352a98d8e293", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/mysql/MySqlR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "runCreatesConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.docker.compose.service.connection.mysql.MySqlR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests#runCreatesConnectionDetails", "start_line": 36, "end_line": 39, "signature": "runCreatesConnectionDetails(R2dbcConnectionDetails connectionDetails)", "original_code": "@DockerComposeTest(composeFile = \"mysql-compose.yaml\", image = TestImage.MYSQL)\n\tvoid runCreatesConnectionDetails(R2dbcConnectionDetails connectionDetails) {\n\t\tassertConnectionDetails(connectionDetails);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runCreatesConnectionDetails", "(", ")", "{", "}", "@", "DockerComposeTest", "R2dbcConnectionDetails", "connectionDetails", ";", "(", ",", ")", "assertConnectionDetails", "composeFile", "=", "image", "=", "(", "connectionDetails", ")", "\"", "mysql-compose.yaml", "\"", "TestImage", ".", "MYSQL"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 43, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 21, "n_whitespaces": 15, "n_words": 14, "nloc": 4, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@630bb33:spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/mysql/MySqlR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#41-44", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "630bb335ea710e45de8e48fd9fe1352a98d8e293", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/mysql/MySqlR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "runWithBitnamiImageCreatesConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.docker.compose.service.connection.mysql.MySqlR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests#runWithBitnamiImageCreatesConnectionDetails", "start_line": 41, "end_line": 44, "signature": "runWithBitnamiImageCreatesConnectionDetails(R2dbcConnectionDetails connectionDetails)", "original_code": "@DockerComposeTest(composeFile = \"mysql-bitnami-compose.yaml\", image = TestImage.BITNAMI_MYSQL)\n\tvoid runWithBitnamiImageCreatesConnectionDetails(R2dbcConnectionDetails connectionDetails) {\n\t\tassertConnectionDetails(connectionDetails);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runWithBitnamiImageCreatesConnectionDetails", "(", ")", "{", "}", "@", "DockerComposeTest", "R2dbcConnectionDetails", "connectionDetails", ";", "(", ",", ")", "assertConnectionDetails", "composeFile", "=", "image", "=", "(", "connectionDetails", ")", "\"", "mysql-bitnami-compose.yaml", "\"", "TestImage", ".", "BITNAMI_MYSQL"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 43, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 21, "n_whitespaces": 15, "n_words": 15, "nloc": 4, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@630bb33:spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/mysql/MySqlR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#46-51", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "630bb335ea710e45de8e48fd9fe1352a98d8e293", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/mysql/MySqlR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "assertConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.docker.compose.service.connection.mysql.MySqlR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests#assertConnectionDetails", "start_line": 46, "end_line": 51, "signature": "assertConnectionDetails(R2dbcConnectionDetails connectionDetails)", "original_code": "private void assertConnectionDetails(R2dbcConnectionDetails connectionDetails) {\n\t\tConnectionFactoryOptions connectionFactoryOptions = connectionDetails.getConnectionFactoryOptions();\n\t\tassertThat(connectionFactoryOptions.toString()).contains(\"database=mydatabase\", \"driver=mysql\",\n\t\t\t\t\"password=REDACTED\", \"user=myuser\");\n\t\tassertThat(connectionFactoryOptions.getRequiredValue(ConnectionFactoryOptions.PASSWORD)).isEqualTo(\"secret\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "assertConnectionDetails", "private", "(", ")", "{", "}", "R2dbcConnectionDetails", "connectionDetails", "ConnectionFactoryOptions", ";", ";", ";", "connectionFactoryOptions", "=", ".", "contains", ".", "isEqualTo", "connectionDetails", ".", "getConnectionFactoryOptions", "assertThat", "(", ",", ",", ",", ")", "assertThat", "(", ")", "(", ")", "(", ")", "\"", "database=mydatabase", "\"", "\"", "driver=mysql", "\"", "\"", "password=REDACTED", "\"", "\"", "user=myuser", "\"", "(", ")", "\"", "secret", "\"", "connectionFactoryOptions", ".", "toString", "connectionFactoryOptions", ".", "getRequiredValue", "(", ")", "(", ")", "ConnectionFactoryOptions", ".", "PASSWORD"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 95, "ast_depth": 11, "n_identifiers": 11, "vocab_size": 28, "n_whitespaces": 25, "n_words": 28, "nloc": 6, "token_counts": 65}}
{"dataset_split": "train", "id": "spring-boot@630bb33:spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/neo4j/Neo4jDockerComposeConnectionDetailsFactoryIntegrationTests.java#38-41", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "630bb335ea710e45de8e48fd9fe1352a98d8e293", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/neo4j/Neo4jDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "runCreatesConnectionDetailsThatCanAccessNeo4j", "qualified_name": "dockerTest.java.org.springframework.boot.docker.compose.service.connection.neo4j.Neo4jDockerComposeConnectionDetailsFactoryIntegrationTests#runCreatesConnectionDetailsThatCanAccessNeo4j", "start_line": 38, "end_line": 41, "signature": "runCreatesConnectionDetailsThatCanAccessNeo4j(Neo4jConnectionDetails connectionDetails)", "original_code": "@DockerComposeTest(composeFile = \"neo4j-compose.yaml\", image = TestImage.NEO4J)\n\tvoid runCreatesConnectionDetailsThatCanAccessNeo4j(Neo4jConnectionDetails connectionDetails) {\n\t\tassertConnectionDetailsWithPassword(connectionDetails, \"secret\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runCreatesConnectionDetailsThatCanAccessNeo4j", "(", ")", "{", "}", "@", "DockerComposeTest", "Neo4jConnectionDetails", "connectionDetails", ";", "(", ",", ")", "assertConnectionDetailsWithPassword", "composeFile", "=", "image", "=", "(", "connectionDetails", ",", ")", "\"", "neo4j-compose.yaml", "\"", "TestImage", ".", "NEO4J", "\"", "secret", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 48, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 22, "n_whitespaces": 16, "n_words": 15, "nloc": 4, "token_counts": 32}}
{"dataset_split": "train", "id": "spring-boot@630bb33:spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/neo4j/Neo4jDockerComposeConnectionDetailsFactoryIntegrationTests.java#43-46", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "630bb335ea710e45de8e48fd9fe1352a98d8e293", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/neo4j/Neo4jDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "runWithBitnamiImageCreatesConnectionDetailsThatCanAccessNeo4j", "qualified_name": "dockerTest.java.org.springframework.boot.docker.compose.service.connection.neo4j.Neo4jDockerComposeConnectionDetailsFactoryIntegrationTests#runWithBitnamiImageCreatesConnectionDetailsThatCanAccessNeo4j", "start_line": 43, "end_line": 46, "signature": "runWithBitnamiImageCreatesConnectionDetailsThatCanAccessNeo4j(Neo4jConnectionDetails connectionDetails)", "original_code": "@DockerComposeTest(composeFile = \"neo4j-bitnami-compose.yaml\", image = TestImage.BITNAMI_NEO4J)\n\tvoid runWithBitnamiImageCreatesConnectionDetailsThatCanAccessNeo4j(Neo4jConnectionDetails connectionDetails) {\n\t\tassertConnectionDetailsWithPassword(connectionDetails, \"bitnami2\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runWithBitnamiImageCreatesConnectionDetailsThatCanAccessNeo4j", "(", ")", "{", "}", "@", "DockerComposeTest", "Neo4jConnectionDetails", "connectionDetails", ";", "(", ",", ")", "assertConnectionDetailsWithPassword", "composeFile", "=", "image", "=", "(", "connectionDetails", ",", ")", "\"", "neo4j-bitnami-compose.yaml", "\"", "TestImage", ".", "BITNAMI_NEO4J", "\"", "bitnami2", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 48, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 22, "n_whitespaces": 16, "n_words": 16, "nloc": 4, "token_counts": 32}}
{"dataset_split": "train", "id": "spring-boot@630bb33:spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/neo4j/Neo4jDockerComposeConnectionDetailsFactoryIntegrationTests.java#48-53", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "630bb335ea710e45de8e48fd9fe1352a98d8e293", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/neo4j/Neo4jDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "assertConnectionDetailsWithPassword", "qualified_name": "dockerTest.java.org.springframework.boot.docker.compose.service.connection.neo4j.Neo4jDockerComposeConnectionDetailsFactoryIntegrationTests#assertConnectionDetailsWithPassword", "start_line": 48, "end_line": 53, "signature": "assertConnectionDetailsWithPassword(Neo4jConnectionDetails connectionDetails, String password)", "original_code": "private void assertConnectionDetailsWithPassword(Neo4jConnectionDetails connectionDetails, String password) {\n\t\tassertThat(connectionDetails.getAuthToken()).isEqualTo(AuthTokens.basic(\"neo4j\", password));\n\t\ttry (Driver driver = GraphDatabase.driver(connectionDetails.getUri(), connectionDetails.getAuthToken())) {\n\t\t\tassertThatNoException().isThrownBy(driver::verifyConnectivity);\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "assertConnectionDetailsWithPassword", "private", "(", ",", ")", "{", "}", "Neo4jConnectionDetails", "connectionDetails", "String", "password", ";", "try", ".", "isEqualTo", "(", ")", "{", "}", "assertThat", "(", ")", "Driver", "driver", "=", ";", "(", ")", "AuthTokens", ".", "basic", "GraphDatabase", ".", "driver", ".", "isThrownBy", "connectionDetails", ".", "getAuthToken", "(", ",", "password", ")", "(", ",", ")", "assertThatNoException", "(", ")", "(", ")", "\"", "neo4j", "\"", "connectionDetails", ".", "getUri", "connectionDetails", ".", "getAuthToken", "(", ")", "driver", "::", "verifyConnectivity", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 103, "ast_depth": 11, "n_identifiers": 14, "vocab_size": 31, "n_whitespaces": 28, "n_words": 28, "nloc": 6, "token_counts": 70}}
{"dataset_split": "train", "id": "spring-boot@630bb33:spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/postgres/PostgresJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#41-45", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "630bb335ea710e45de8e48fd9fe1352a98d8e293", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/postgres/PostgresJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "runCreatesConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.docker.compose.service.connection.postgres.PostgresJdbcDockerComposeConnectionDetailsFactoryIntegrationTests#runCreatesConnectionDetails", "start_line": 41, "end_line": 45, "signature": "runCreatesConnectionDetails(JdbcConnectionDetails connectionDetails)", "original_code": "@DockerComposeTest(composeFile = \"postgres-compose.yaml\", image = TestImage.POSTGRESQL)\n\tvoid runCreatesConnectionDetails(JdbcConnectionDetails connectionDetails) throws ClassNotFoundException {\n\t\tassertConnectionDetails(connectionDetails);\n\t\tcheckDatabaseAccess(connectionDetails);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runCreatesConnectionDetails", "(", ")", "throws", "ClassNotFoundException", "{", "}", "@", "DockerComposeTest", "JdbcConnectionDetails", "connectionDetails", ";", ";", "(", ",", ")", "assertConnectionDetails", "checkDatabaseAccess", "composeFile", "=", "image", "=", "(", "connectionDetails", ")", "(", "connectionDetails", ")", "\"", "postgres-compose.yaml", "\"", "TestImage", ".", "POSTGRESQL"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 54, "ast_depth": 8, "n_identifiers": 9, "vocab_size": 24, "n_whitespaces": 20, "n_words": 18, "nloc": 5, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@630bb33:spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/postgres/PostgresJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#47-54", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "630bb335ea710e45de8e48fd9fe1352a98d8e293", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/postgres/PostgresJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "runCreatesConnectionDetailsThatCanAccessDatabaseWhenHostAuthMethodIsTrust", "qualified_name": "dockerTest.java.org.springframework.boot.docker.compose.service.connection.postgres.PostgresJdbcDockerComposeConnectionDetailsFactoryIntegrationTests#runCreatesConnectionDetailsThatCanAccessDatabaseWhenHostAuthMethodIsTrust", "start_line": 47, "end_line": 54, "signature": "runCreatesConnectionDetailsThatCanAccessDatabaseWhenHostAuthMethodIsTrust(\n\t\t\tJdbcConnectionDetails connectionDetails)", "original_code": "@DockerComposeTest(composeFile = \"postgres-with-trust-host-auth-method-compose.yaml\", image = TestImage.POSTGRESQL)\n\tvoid runCreatesConnectionDetailsThatCanAccessDatabaseWhenHostAuthMethodIsTrust(\n\t\t\tJdbcConnectionDetails connectionDetails) throws ClassNotFoundException {\n\t\tassertThat(connectionDetails.getUsername()).isEqualTo(\"myuser\");\n\t\tassertThat(connectionDetails.getPassword()).isNull();\n\t\tassertThat(connectionDetails.getJdbcUrl()).startsWith(\"jdbc:postgresql://\").endsWith(\"/mydatabase\");\n\t\tcheckDatabaseAccess(connectionDetails);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runCreatesConnectionDetailsThatCanAccessDatabaseWhenHostAuthMethodIsTrust", "(", ")", "throws", "ClassNotFoundException", "{", "}", "@", "DockerComposeTest", "JdbcConnectionDetails", "connectionDetails", ";", ";", ";", ";", "(", ",", ")", ".", "isEqualTo", ".", "isNull", ".", "endsWith", "checkDatabaseAccess", "composeFile", "=", "image", "=", "assertThat", "(", ")", "assertThat", "(", ")", ".", "startsWith", "(", ")", "(", "connectionDetails", ")", "\"", "postgres-with-trust-host-auth-method-compose.yaml", "\"", "TestImage", ".", "POSTGRESQL", "(", ")", "\"", "myuser", "\"", "(", ")", "assertThat", "(", ")", "\"", "/mydatabase", "\"", "connectionDetails", ".", "getUsername", "connectionDetails", ".", "getPassword", "(", ")", "\"", "jdbc:postgresql://", "\"", "(", ")", "(", ")", "connectionDetails", ".", "getJdbcUrl", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 124, "ast_depth": 11, "n_identifiers": 16, "vocab_size": 34, "n_whitespaces": 30, "n_words": 38, "nloc": 8, "token_counts": 82}}
{"dataset_split": "train", "id": "spring-boot@630bb33:spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/postgres/PostgresJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#56-61", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "630bb335ea710e45de8e48fd9fe1352a98d8e293", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/postgres/PostgresJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "runWithBitnamiImageCreatesConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.docker.compose.service.connection.postgres.PostgresJdbcDockerComposeConnectionDetailsFactoryIntegrationTests#runWithBitnamiImageCreatesConnectionDetails", "start_line": 56, "end_line": 61, "signature": "runWithBitnamiImageCreatesConnectionDetails(JdbcConnectionDetails connectionDetails)", "original_code": "@DockerComposeTest(composeFile = \"postgres-bitnami-compose.yaml\", image = TestImage.BITNAMI_POSTGRESQL)\n\tvoid runWithBitnamiImageCreatesConnectionDetails(JdbcConnectionDetails connectionDetails)\n\t\t\tthrows ClassNotFoundException {\n\t\tassertConnectionDetails(connectionDetails);\n\t\tcheckDatabaseAccess(connectionDetails);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runWithBitnamiImageCreatesConnectionDetails", "(", ")", "throws", "ClassNotFoundException", "{", "}", "@", "DockerComposeTest", "JdbcConnectionDetails", "connectionDetails", ";", ";", "(", ",", ")", "assertConnectionDetails", "checkDatabaseAccess", "composeFile", "=", "image", "=", "(", "connectionDetails", ")", "(", "connectionDetails", ")", "\"", "postgres-bitnami-compose.yaml", "\"", "TestImage", ".", "BITNAMI_POSTGRESQL"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 54, "ast_depth": 8, "n_identifiers": 9, "vocab_size": 24, "n_whitespaces": 23, "n_words": 19, "nloc": 6, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@630bb33:spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/postgres/PostgresJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#63-67", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "630bb335ea710e45de8e48fd9fe1352a98d8e293", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/postgres/PostgresJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "assertConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.docker.compose.service.connection.postgres.PostgresJdbcDockerComposeConnectionDetailsFactoryIntegrationTests#assertConnectionDetails", "start_line": 63, "end_line": 67, "signature": "assertConnectionDetails(JdbcConnectionDetails connectionDetails)", "original_code": "private void assertConnectionDetails(JdbcConnectionDetails connectionDetails) {\n\t\tassertThat(connectionDetails.getUsername()).isEqualTo(\"myuser\");\n\t\tassertThat(connectionDetails.getPassword()).isEqualTo(\"secret\");\n\t\tassertThat(connectionDetails.getJdbcUrl()).startsWith(\"jdbc:postgresql://\").endsWith(\"/mydatabase\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "assertConnectionDetails", "private", "(", ")", "{", "}", "JdbcConnectionDetails", "connectionDetails", ";", ";", ";", ".", "isEqualTo", ".", "isEqualTo", ".", "endsWith", "assertThat", "(", ")", "assertThat", "(", ")", ".", "startsWith", "(", ")", "(", ")", "\"", "myuser", "\"", "(", ")", "\"", "secret", "\"", "assertThat", "(", ")", "\"", "/mydatabase", "\"", "connectionDetails", ".", "getUsername", "connectionDetails", ".", "getPassword", "(", ")", "\"", "jdbc:postgresql://", "\"", "(", ")", "(", ")", "connectionDetails", ".", "getJdbcUrl", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 97, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 23, "n_whitespaces": 15, "n_words": 23, "nloc": 5, "token_counts": 64}}
{"dataset_split": "train", "id": "spring-boot@630bb33:spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/postgres/PostgresJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#69-79", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "630bb335ea710e45de8e48fd9fe1352a98d8e293", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/postgres/PostgresJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "checkDatabaseAccess", "qualified_name": "dockerTest.java.org.springframework.boot.docker.compose.service.connection.postgres.PostgresJdbcDockerComposeConnectionDetailsFactoryIntegrationTests#checkDatabaseAccess", "start_line": 69, "end_line": 79, "signature": "checkDatabaseAccess(JdbcConnectionDetails connectionDetails)", "original_code": "@SuppressWarnings(\"unchecked\")\n\tprivate void checkDatabaseAccess(JdbcConnectionDetails connectionDetails) throws ClassNotFoundException {\n\t\tSimpleDriverDataSource dataSource = new SimpleDriverDataSource();\n\t\tdataSource.setUrl(connectionDetails.getJdbcUrl());\n\t\tdataSource.setUsername(connectionDetails.getUsername());\n\t\tdataSource.setPassword(connectionDetails.getPassword());\n\t\tdataSource.setDriverClass((Class<? extends Driver>) ClassUtils.forName(connectionDetails.getDriverClassName(),\n\t\t\t\tgetClass().getClassLoader()));\n\t\tJdbcTemplate template = new JdbcTemplate(dataSource);\n\t\tassertThat(template.queryForObject(DatabaseDriver.POSTGRESQL.getValidationQuery(), Integer.class)).isEqualTo(1);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "checkDatabaseAccess", "private", "(", ")", "throws", "ClassNotFoundException", "{", "}", "@", "SuppressWarnings", "JdbcConnectionDetails", "connectionDetails", "SimpleDriverDataSource", ";", ";", ";", ";", ";", "JdbcTemplate", ";", ";", "(", ")", "dataSource", "=", "dataSource", ".", "setUrl", "dataSource", ".", "setUsername", "dataSource", ".", "setPassword", "dataSource", ".", "setDriverClass", "template", "=", ".", "isEqualTo", "\"", "unchecked", "\"", "new", "SimpleDriverDataSource", "(", ")", "(", ")", "(", ")", "(", ")", "new", "JdbcTemplate", "assertThat", "(", "1", ")", "(", ")", "connectionDetails", ".", "getJdbcUrl", "connectionDetails", ".", "getUsername", "connectionDetails", ".", "getPassword", "(", ")", "(", "dataSource", ")", "(", ")", "(", ")", "(", ")", "(", ")", "Class", "ClassUtils", ".", "forName", "template", ".", "queryForObject", "<", ">", "(", ",", ")", "(", ",", ")", "?", "extends", "Driver", "connectionDetails", ".", "getDriverClassName", ".", "getClassLoader", ".", "getValidationQuery", "Integer", ".", "class", "(", ")", "getClass", "(", ")", "DatabaseDriver", ".", "POSTGRESQL", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 184, "ast_depth": 13, "n_identifiers": 23, "vocab_size": 51, "n_whitespaces": 48, "n_words": 51, "nloc": 11, "token_counts": 125}}
{"dataset_split": "train", "id": "spring-boot@630bb33:spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/postgres/PostgresR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#42-46", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "630bb335ea710e45de8e48fd9fe1352a98d8e293", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/postgres/PostgresR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "runCreatesConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.docker.compose.service.connection.postgres.PostgresR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests#runCreatesConnectionDetails", "start_line": 42, "end_line": 46, "signature": "runCreatesConnectionDetails(R2dbcConnectionDetails connectionDetails)", "original_code": "@DockerComposeTest(composeFile = \"postgres-compose.yaml\", image = TestImage.POSTGRESQL)\n\tvoid runCreatesConnectionDetails(R2dbcConnectionDetails connectionDetails) {\n\t\tassertConnectionDetails(connectionDetails);\n\t\tcheckDatabaseAccess(connectionDetails);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runCreatesConnectionDetails", "(", ")", "{", "}", "@", "DockerComposeTest", "R2dbcConnectionDetails", "connectionDetails", ";", ";", "(", ",", ")", "assertConnectionDetails", "checkDatabaseAccess", "composeFile", "=", "image", "=", "(", "connectionDetails", ")", "(", "connectionDetails", ")", "\"", "postgres-compose.yaml", "\"", "TestImage", ".", "POSTGRESQL"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 51, "ast_depth": 8, "n_identifiers": 9, "vocab_size": 22, "n_whitespaces": 18, "n_words": 16, "nloc": 5, "token_counts": 33}}
{"dataset_split": "train", "id": "spring-boot@630bb33:spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/postgres/PostgresR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#48-57", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "630bb335ea710e45de8e48fd9fe1352a98d8e293", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/postgres/PostgresR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "runCreatesConnectionDetailsThatCanAccessDatabaseWhenHostAuthMethodIsTrust", "qualified_name": "dockerTest.java.org.springframework.boot.docker.compose.service.connection.postgres.PostgresR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests#runCreatesConnectionDetailsThatCanAccessDatabaseWhenHostAuthMethodIsTrust", "start_line": 48, "end_line": 57, "signature": "runCreatesConnectionDetailsThatCanAccessDatabaseWhenHostAuthMethodIsTrust(\n\t\t\tR2dbcConnectionDetails connectionDetails)", "original_code": "@DockerComposeTest(composeFile = \"postgres-with-trust-host-auth-method-compose.yaml\", image = TestImage.POSTGRESQL)\n\tvoid runCreatesConnectionDetailsThatCanAccessDatabaseWhenHostAuthMethodIsTrust(\n\t\t\tR2dbcConnectionDetails connectionDetails) {\n\t\tConnectionFactoryOptions connectionFactoryOptions = connectionDetails.getConnectionFactoryOptions();\n\t\tassertThat(connectionFactoryOptions.getRequiredValue(ConnectionFactoryOptions.USER)).isEqualTo(\"myuser\");\n\t\tassertThat(connectionFactoryOptions.getValue(ConnectionFactoryOptions.PASSWORD)).isNull();\n\t\tassertThat(connectionFactoryOptions.getRequiredValue(ConnectionFactoryOptions.DATABASE))\n\t\t\t.isEqualTo(\"mydatabase\");\n\t\tcheckDatabaseAccess(connectionDetails);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runCreatesConnectionDetailsThatCanAccessDatabaseWhenHostAuthMethodIsTrust", "(", ")", "{", "}", "@", "DockerComposeTest", "R2dbcConnectionDetails", "connectionDetails", "ConnectionFactoryOptions", ";", ";", ";", ";", ";", "(", ",", ")", "connectionFactoryOptions", "=", ".", "isEqualTo", ".", "isNull", ".", "isEqualTo", "checkDatabaseAccess", "composeFile", "=", "image", "=", "connectionDetails", ".", "getConnectionFactoryOptions", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "(", "connectionDetails", ")", "\"", "postgres-with-trust-host-auth-method-compose.yaml", "\"", "TestImage", ".", "POSTGRESQL", "(", ")", "(", ")", "\"", "myuser", "\"", "(", ")", "(", ")", "\"", "mydatabase", "\"", "connectionFactoryOptions", ".", "getRequiredValue", "connectionFactoryOptions", ".", "getValue", "connectionFactoryOptions", ".", "getRequiredValue", "(", ")", "(", ")", "(", ")", "ConnectionFactoryOptions", ".", "USER", "ConnectionFactoryOptions", ".", "PASSWORD", "ConnectionFactoryOptions", ".", "DATABASE"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 136, "ast_depth": 11, "n_identifiers": 19, "vocab_size": 34, "n_whitespaces": 38, "n_words": 43, "nloc": 10, "token_counts": 91}}
{"dataset_split": "train", "id": "spring-boot@630bb33:spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/postgres/PostgresR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#59-63", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "630bb335ea710e45de8e48fd9fe1352a98d8e293", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/postgres/PostgresR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "runWithBitnamiImageCreatesConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.docker.compose.service.connection.postgres.PostgresR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests#runWithBitnamiImageCreatesConnectionDetails", "start_line": 59, "end_line": 63, "signature": "runWithBitnamiImageCreatesConnectionDetails(R2dbcConnectionDetails connectionDetails)", "original_code": "@DockerComposeTest(composeFile = \"postgres-bitnami-compose.yaml\", image = TestImage.BITNAMI_POSTGRESQL)\n\tvoid runWithBitnamiImageCreatesConnectionDetails(R2dbcConnectionDetails connectionDetails) {\n\t\tassertConnectionDetails(connectionDetails);\n\t\tcheckDatabaseAccess(connectionDetails);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runWithBitnamiImageCreatesConnectionDetails", "(", ")", "{", "}", "@", "DockerComposeTest", "R2dbcConnectionDetails", "connectionDetails", ";", ";", "(", ",", ")", "assertConnectionDetails", "checkDatabaseAccess", "composeFile", "=", "image", "=", "(", "connectionDetails", ")", "(", "connectionDetails", ")", "\"", "postgres-bitnami-compose.yaml", "\"", "TestImage", ".", "BITNAMI_POSTGRESQL"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 51, "ast_depth": 8, "n_identifiers": 9, "vocab_size": 22, "n_whitespaces": 18, "n_words": 17, "nloc": 5, "token_counts": 33}}
{"dataset_split": "train", "id": "spring-boot@630bb33:spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/postgres/PostgresR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#65-70", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "630bb335ea710e45de8e48fd9fe1352a98d8e293", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/postgres/PostgresR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "assertConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.docker.compose.service.connection.postgres.PostgresR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests#assertConnectionDetails", "start_line": 65, "end_line": 70, "signature": "assertConnectionDetails(R2dbcConnectionDetails connectionDetails)", "original_code": "private void assertConnectionDetails(R2dbcConnectionDetails connectionDetails) {\n\t\tConnectionFactoryOptions connectionFactoryOptions = connectionDetails.getConnectionFactoryOptions();\n\t\tassertThat(connectionFactoryOptions.toString()).contains(\"database=mydatabase\", \"driver=postgresql\",\n\t\t\t\t\"password=REDACTED\", \"user=myuser\");\n\t\tassertThat(connectionFactoryOptions.getRequiredValue(ConnectionFactoryOptions.PASSWORD)).isEqualTo(\"secret\");\n\t}", "doc_comment": ""}, "code_tokens": ["void", "assertConnectionDetails", "private", "(", ")", "{", "}", "R2dbcConnectionDetails", "connectionDetails", "ConnectionFactoryOptions", ";", ";", ";", "connectionFactoryOptions", "=", ".", "contains", ".", "isEqualTo", "connectionDetails", ".", "getConnectionFactoryOptions", "assertThat", "(", ",", ",", ",", ")", "assertThat", "(", ")", "(", ")", "(", ")", "\"", "database=mydatabase", "\"", "\"", "driver=postgresql", "\"", "\"", "password=REDACTED", "\"", "\"", "user=myuser", "\"", "(", ")", "\"", "secret", "\"", "connectionFactoryOptions", ".", "toString", "connectionFactoryOptions", ".", "getRequiredValue", "(", ")", "(", ")", "ConnectionFactoryOptions", ".", "PASSWORD"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 95, "ast_depth": 11, "n_identifiers": 11, "vocab_size": 28, "n_whitespaces": 25, "n_words": 28, "nloc": 6, "token_counts": 65}}
{"dataset_split": "train", "id": "spring-boot@630bb33:spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/postgres/PostgresR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java#72-80", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "630bb335ea710e45de8e48fd9fe1352a98d8e293", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/postgres/PostgresR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "checkDatabaseAccess", "qualified_name": "dockerTest.java.org.springframework.boot.docker.compose.service.connection.postgres.PostgresR2dbcDockerComposeConnectionDetailsFactoryIntegrationTests#checkDatabaseAccess", "start_line": 72, "end_line": 80, "signature": "checkDatabaseAccess(R2dbcConnectionDetails connectionDetails)", "original_code": "private void checkDatabaseAccess(R2dbcConnectionDetails connectionDetails) {\n\t\tConnectionFactoryOptions connectionFactoryOptions = connectionDetails.getConnectionFactoryOptions();\n\t\tObject result = DatabaseClient.create(ConnectionFactories.get(connectionFactoryOptions))\n\t\t\t.sql(DatabaseDriver.POSTGRESQL.getValidationQuery())\n\t\t\t.map((row, metadata) -> row.get(0))\n\t\t\t.first()\n\t\t\t.block(Duration.ofSeconds(30));\n\t\tassertThat(result).isEqualTo(1);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "checkDatabaseAccess", "private", "(", ")", "{", "}", "R2dbcConnectionDetails", "connectionDetails", "ConnectionFactoryOptions", ";", "Object", ";", ";", "connectionFactoryOptions", "=", "result", "=", ".", "isEqualTo", "connectionDetails", ".", "getConnectionFactoryOptions", ".", "block", "assertThat", "(", "1", ")", "(", ")", ".", "first", "(", ")", "(", "result", ")", ".", "map", "(", ")", "Duration", ".", "ofSeconds", ".", "sql", "(", ")", "(", "30", ")", "DatabaseClient", ".", "create", "(", ")", "->", "(", ")", ".", "getValidationQuery", "(", "row", ",", "metadata", ")", "row", ".", "get", "ConnectionFactories", ".", "get", "DatabaseDriver", ".", "POSTGRESQL", "(", ")", "(", "0", ")", "(", "connectionFactoryOptions", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 122, "ast_depth": 14, "n_identifiers": 22, "vocab_size": 39, "n_whitespaces": 40, "n_words": 35, "nloc": 9, "token_counts": 84}}
{"dataset_split": "train", "id": "spring-boot@630bb33:spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/rabbit/RabbitDockerComposeConnectionDetailsFactoryIntegrationTests.java#36-39", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "630bb335ea710e45de8e48fd9fe1352a98d8e293", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/rabbit/RabbitDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "runCreatesConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.docker.compose.service.connection.rabbit.RabbitDockerComposeConnectionDetailsFactoryIntegrationTests#runCreatesConnectionDetails", "start_line": 36, "end_line": 39, "signature": "runCreatesConnectionDetails(RabbitConnectionDetails connectionDetails)", "original_code": "@DockerComposeTest(composeFile = \"rabbit-compose.yaml\", image = TestImage.RABBITMQ)\n\tvoid runCreatesConnectionDetails(RabbitConnectionDetails connectionDetails) {\n\t\tassertConnectionDetails(connectionDetails);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runCreatesConnectionDetails", "(", ")", "{", "}", "@", "DockerComposeTest", "RabbitConnectionDetails", "connectionDetails", ";", "(", ",", ")", "assertConnectionDetails", "composeFile", "=", "image", "=", "(", "connectionDetails", ")", "\"", "rabbit-compose.yaml", "\"", "TestImage", ".", "RABBITMQ"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 43, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 21, "n_whitespaces": 15, "n_words": 14, "nloc": 4, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@630bb33:spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/rabbit/RabbitDockerComposeConnectionDetailsFactoryIntegrationTests.java#41-44", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "630bb335ea710e45de8e48fd9fe1352a98d8e293", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/rabbit/RabbitDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "runWithBitnamiImageCreatesConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.docker.compose.service.connection.rabbit.RabbitDockerComposeConnectionDetailsFactoryIntegrationTests#runWithBitnamiImageCreatesConnectionDetails", "start_line": 41, "end_line": 44, "signature": "runWithBitnamiImageCreatesConnectionDetails(RabbitConnectionDetails connectionDetails)", "original_code": "@DockerComposeTest(composeFile = \"rabbit-bitnami-compose.yaml\", image = TestImage.BITNAMI_RABBITMQ)\n\tvoid runWithBitnamiImageCreatesConnectionDetails(RabbitConnectionDetails connectionDetails) {\n\t\tassertConnectionDetails(connectionDetails);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runWithBitnamiImageCreatesConnectionDetails", "(", ")", "{", "}", "@", "DockerComposeTest", "RabbitConnectionDetails", "connectionDetails", ";", "(", ",", ")", "assertConnectionDetails", "composeFile", "=", "image", "=", "(", "connectionDetails", ")", "\"", "rabbit-bitnami-compose.yaml", "\"", "TestImage", ".", "BITNAMI_RABBITMQ"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 43, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 21, "n_whitespaces": 15, "n_words": 15, "nloc": 4, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@630bb33:spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/rabbit/RabbitDockerComposeConnectionDetailsFactoryIntegrationTests.java#46-54", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "630bb335ea710e45de8e48fd9fe1352a98d8e293", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/rabbit/RabbitDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "assertConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.docker.compose.service.connection.rabbit.RabbitDockerComposeConnectionDetailsFactoryIntegrationTests#assertConnectionDetails", "start_line": 46, "end_line": 54, "signature": "assertConnectionDetails(RabbitConnectionDetails connectionDetails)", "original_code": "private void assertConnectionDetails(RabbitConnectionDetails connectionDetails) {\n\t\tassertThat(connectionDetails.getUsername()).isEqualTo(\"myuser\");\n\t\tassertThat(connectionDetails.getPassword()).isEqualTo(\"secret\");\n\t\tassertThat(connectionDetails.getVirtualHost()).isEqualTo(\"/\");\n\t\tassertThat(connectionDetails.getAddresses()).hasSize(1);\n\t\tAddress address = connectionDetails.getFirstAddress();\n\t\tassertThat(address.host()).isNotNull();\n\t\tassertThat(address.port()).isGreaterThan(0);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "assertConnectionDetails", "private", "(", ")", "{", "}", "RabbitConnectionDetails", "connectionDetails", ";", ";", ";", ";", "Address", ";", ";", ";", ".", "isEqualTo", ".", "isEqualTo", ".", "isEqualTo", ".", "hasSize", "address", "=", ".", "isNotNull", ".", "isGreaterThan", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", "1", ")", "connectionDetails", ".", "getFirstAddress", "assertThat", "(", ")", "assertThat", "(", "0", ")", "(", ")", "\"", "myuser", "\"", "(", ")", "\"", "secret", "\"", "(", ")", "\"", "/", "\"", "(", ")", "(", ")", "(", ")", "(", ")", "connectionDetails", ".", "getUsername", "connectionDetails", ".", "getPassword", "connectionDetails", ".", "getVirtualHost", "connectionDetails", ".", "getAddresses", "address", ".", "host", "address", ".", "port", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 162, "ast_depth": 10, "n_identifiers": 15, "vocab_size": 32, "n_whitespaces": 30, "n_words": 37, "nloc": 9, "token_counts": 107}}
{"dataset_split": "train", "id": "spring-boot@630bb33:spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/redis/RedisDockerComposeConnectionDetailsFactoryIntegrationTests.java#37-40", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "630bb335ea710e45de8e48fd9fe1352a98d8e293", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/redis/RedisDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "runCreatesConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.docker.compose.service.connection.redis.RedisDockerComposeConnectionDetailsFactoryIntegrationTests#runCreatesConnectionDetails", "start_line": 37, "end_line": 40, "signature": "runCreatesConnectionDetails(RedisConnectionDetails connectionDetails)", "original_code": "@DockerComposeTest(composeFile = \"redis-compose.yaml\", image = TestImage.REDIS)\n\tvoid runCreatesConnectionDetails(RedisConnectionDetails connectionDetails) {\n\t\tassertConnectionDetails(connectionDetails);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runCreatesConnectionDetails", "(", ")", "{", "}", "@", "DockerComposeTest", "RedisConnectionDetails", "connectionDetails", ";", "(", ",", ")", "assertConnectionDetails", "composeFile", "=", "image", "=", "(", "connectionDetails", ")", "\"", "redis-compose.yaml", "\"", "TestImage", ".", "REDIS"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 43, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 21, "n_whitespaces": 15, "n_words": 14, "nloc": 4, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@630bb33:spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/redis/RedisDockerComposeConnectionDetailsFactoryIntegrationTests.java#42-45", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "630bb335ea710e45de8e48fd9fe1352a98d8e293", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/redis/RedisDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "runWithBitnamiImageCreatesConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.docker.compose.service.connection.redis.RedisDockerComposeConnectionDetailsFactoryIntegrationTests#runWithBitnamiImageCreatesConnectionDetails", "start_line": 42, "end_line": 45, "signature": "runWithBitnamiImageCreatesConnectionDetails(RedisConnectionDetails connectionDetails)", "original_code": "@DockerComposeTest(composeFile = \"redis-bitnami-compose.yaml\", image = TestImage.BITNAMI_REDIS)\n\tvoid runWithBitnamiImageCreatesConnectionDetails(RedisConnectionDetails connectionDetails) {\n\t\tassertConnectionDetails(connectionDetails);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runWithBitnamiImageCreatesConnectionDetails", "(", ")", "{", "}", "@", "DockerComposeTest", "RedisConnectionDetails", "connectionDetails", ";", "(", ",", ")", "assertConnectionDetails", "composeFile", "=", "image", "=", "(", "connectionDetails", ")", "\"", "redis-bitnami-compose.yaml", "\"", "TestImage", ".", "BITNAMI_REDIS"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 43, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 21, "n_whitespaces": 15, "n_words": 15, "nloc": 4, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@630bb33:spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/redis/RedisDockerComposeConnectionDetailsFactoryIntegrationTests.java#47-50", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "630bb335ea710e45de8e48fd9fe1352a98d8e293", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/redis/RedisDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "runWithRedisStackCreatesConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.docker.compose.service.connection.redis.RedisDockerComposeConnectionDetailsFactoryIntegrationTests#runWithRedisStackCreatesConnectionDetails", "start_line": 47, "end_line": 50, "signature": "runWithRedisStackCreatesConnectionDetails(RedisConnectionDetails connectionDetails)", "original_code": "@DockerComposeTest(composeFile = \"redis-compose.yaml\", image = TestImage.REDIS_STACK)\n\tvoid runWithRedisStackCreatesConnectionDetails(RedisConnectionDetails connectionDetails) {\n\t\tassertConnectionDetails(connectionDetails);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runWithRedisStackCreatesConnectionDetails", "(", ")", "{", "}", "@", "DockerComposeTest", "RedisConnectionDetails", "connectionDetails", ";", "(", ",", ")", "assertConnectionDetails", "composeFile", "=", "image", "=", "(", "connectionDetails", ")", "\"", "redis-compose.yaml", "\"", "TestImage", ".", "REDIS_STACK"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 43, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 21, "n_whitespaces": 15, "n_words": 14, "nloc": 4, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@630bb33:spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/redis/RedisDockerComposeConnectionDetailsFactoryIntegrationTests.java#52-55", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "630bb335ea710e45de8e48fd9fe1352a98d8e293", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/redis/RedisDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "runWithRedisStackServerCreatesConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.docker.compose.service.connection.redis.RedisDockerComposeConnectionDetailsFactoryIntegrationTests#runWithRedisStackServerCreatesConnectionDetails", "start_line": 52, "end_line": 55, "signature": "runWithRedisStackServerCreatesConnectionDetails(RedisConnectionDetails connectionDetails)", "original_code": "@DockerComposeTest(composeFile = \"redis-compose.yaml\", image = TestImage.REDIS_STACK_SERVER)\n\tvoid runWithRedisStackServerCreatesConnectionDetails(RedisConnectionDetails connectionDetails) {\n\t\tassertConnectionDetails(connectionDetails);\n\t}", "doc_comment": ""}, "code_tokens": ["void", "runWithRedisStackServerCreatesConnectionDetails", "(", ")", "{", "}", "@", "DockerComposeTest", "RedisConnectionDetails", "connectionDetails", ";", "(", ",", ")", "assertConnectionDetails", "composeFile", "=", "image", "=", "(", "connectionDetails", ")", "\"", "redis-compose.yaml", "\"", "TestImage", ".", "REDIS_STACK_SERVER"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 43, "ast_depth": 8, "n_identifiers": 8, "vocab_size": 21, "n_whitespaces": 15, "n_words": 14, "nloc": 4, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@630bb33:spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/redis/RedisDockerComposeConnectionDetailsFactoryIntegrationTests.java#57-67", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "630bb335ea710e45de8e48fd9fe1352a98d8e293", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/redis/RedisDockerComposeConnectionDetailsFactoryIntegrationTests.java", "language": "Java"}, "method": {"name": "assertConnectionDetails", "qualified_name": "dockerTest.java.org.springframework.boot.docker.compose.service.connection.redis.RedisDockerComposeConnectionDetailsFactoryIntegrationTests#assertConnectionDetails", "start_line": 57, "end_line": 67, "signature": "assertConnectionDetails(RedisConnectionDetails connectionDetails)", "original_code": "private void assertConnectionDetails(RedisConnectionDetails connectionDetails) {\n\t\tassertThat(connectionDetails.getUsername()).isNull();\n\t\tassertThat(connectionDetails.getPassword()).isNull();\n\t\tassertThat(connectionDetails.getCluster()).isNull();\n\t\tassertThat(connectionDetails.getSentinel()).isNull();\n\t\tStandalone standalone = connectionDetails.getStandalone();\n\t\tassertThat(standalone).isNotNull();\n\t\tassertThat(standalone.getDatabase()).isZero();\n\t\tassertThat(standalone.getPort()).isGreaterThan(0);\n\t\tassertThat(standalone.getHost()).isNotNull();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "assertConnectionDetails", "private", "(", ")", "{", "}", "RedisConnectionDetails", "connectionDetails", ";", ";", ";", ";", "Standalone", ";", ";", ";", ";", ";", ".", "isNull", ".", "isNull", ".", "isNull", ".", "isNull", "standalone", "=", ".", "isNotNull", ".", "isZero", ".", "isGreaterThan", ".", "isNotNull", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", ")", "connectionDetails", ".", "getStandalone", "assertThat", "(", ")", "assertThat", "(", ")", "assertThat", "(", "0", ")", "assertThat", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", "standalone", ")", "(", ")", "(", ")", "(", ")", "connectionDetails", ".", "getUsername", "connectionDetails", ".", "getPassword", "connectionDetails", ".", "getCluster", "connectionDetails", ".", "getSentinel", "standalone", ".", "getDatabase", "standalone", ".", "getPort", "standalone", ".", "getHost", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 183, "ast_depth": 10, "n_identifiers": 16, "vocab_size": 28, "n_whitespaces": 36, "n_words": 41, "nloc": 11, "token_counts": 119}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/cassandra/CassandraDockerComposeConnectionDetailsFactory.java#44-47", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/cassandra/CassandraDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getDockerComposeConnectionDetails", "qualified_name": "org.springframework.boot.docker.compose.service.connection.cassandra.CassandraDockerComposeConnectionDetailsFactory#getDockerComposeConnectionDetails", "start_line": 44, "end_line": 47, "signature": "getDockerComposeConnectionDetails(DockerComposeConnectionSource source)", "original_code": "@Override\n\tprotected CassandraConnectionDetails getDockerComposeConnectionDetails(DockerComposeConnectionSource source) {\n\t\treturn new CassandraDockerComposeConnectionDetails(source.getRunningService());\n\t}", "doc_comment": ""}, "code_tokens": ["CassandraConnectionDetails", "getDockerComposeConnectionDetails", "protected", "(", ")", "{", "}", "@", "Override", "DockerComposeConnectionSource", "source", "return", ";", "new", "CassandraDockerComposeConnectionDetails", "(", ")", "source", ".", "getRunningService", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 34, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 17, "n_whitespaces": 13, "n_words": 11, "nloc": 4, "token_counts": 22}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/cassandra/CassandraDockerComposeConnectionDetailsFactory.java#67-70", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/cassandra/CassandraDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getContactPoints", "qualified_name": "org.springframework.boot.docker.compose.service.connection.cassandra.CassandraDockerComposeConnectionDetailsFactory#getContactPoints", "start_line": 67, "end_line": 70, "signature": "getContactPoints()", "original_code": "@Override\n\t\tpublic List<Node> getContactPoints() {\n\t\t\treturn this.contactPoints;\n\t\t}", "doc_comment": ""}, "code_tokens": ["getContactPoints", "public", "List", "(", ")", "{", "}", "@", "Override", "<", "Node", ">", "return", ";", "this", ".", "contactPoints"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 27, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 17, "n_whitespaces": 14, "n_words": 8, "nloc": 4, "token_counts": 17}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/cassandra/CassandraDockerComposeConnectionDetailsFactory.java#72-75", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/cassandra/CassandraDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getLocalDatacenter", "qualified_name": "org.springframework.boot.docker.compose.service.connection.cassandra.CassandraDockerComposeConnectionDetailsFactory#getLocalDatacenter", "start_line": 72, "end_line": 75, "signature": "getLocalDatacenter()", "original_code": "@Override\n\t\tpublic String getLocalDatacenter() {\n\t\t\treturn this.datacenter;\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getLocalDatacenter", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "this", ".", "datacenter"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/clickhouse/ClickHouseJdbcDockerComposeConnectionDetailsFactory.java#41-44", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/clickhouse/ClickHouseJdbcDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getDockerComposeConnectionDetails", "qualified_name": "org.springframework.boot.docker.compose.service.connection.clickhouse.ClickHouseJdbcDockerComposeConnectionDetailsFactory#getDockerComposeConnectionDetails", "start_line": 41, "end_line": 44, "signature": "getDockerComposeConnectionDetails(DockerComposeConnectionSource source)", "original_code": "@Override\n\tprotected JdbcConnectionDetails getDockerComposeConnectionDetails(DockerComposeConnectionSource source) {\n\t\treturn new ClickhouseJdbcDockerComposeConnectionDetails(source.getRunningService());\n\t}", "doc_comment": ""}, "code_tokens": ["JdbcConnectionDetails", "getDockerComposeConnectionDetails", "protected", "(", ")", "{", "}", "@", "Override", "DockerComposeConnectionSource", "source", "return", ";", "new", "ClickhouseJdbcDockerComposeConnectionDetails", "(", ")", "source", ".", "getRunningService", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 34, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 17, "n_whitespaces": 13, "n_words": 11, "nloc": 4, "token_counts": 22}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/clickhouse/ClickHouseJdbcDockerComposeConnectionDetailsFactory.java#65-68", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/clickhouse/ClickHouseJdbcDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getUsername", "qualified_name": "org.springframework.boot.docker.compose.service.connection.clickhouse.ClickHouseJdbcDockerComposeConnectionDetailsFactory#getUsername", "start_line": 65, "end_line": 68, "signature": "getUsername()", "original_code": "@Override\n\t\tpublic String getUsername() {\n\t\t\treturn this.environment.getUsername();\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getUsername", "public", "(", ")", "{", "}", "@", "Override", "return", ";", ".", "getUsername", "this", ".", "environment", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 8, "nloc": 4, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/clickhouse/ClickHouseJdbcDockerComposeConnectionDetailsFactory.java#70-73", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/clickhouse/ClickHouseJdbcDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getPassword", "qualified_name": "org.springframework.boot.docker.compose.service.connection.clickhouse.ClickHouseJdbcDockerComposeConnectionDetailsFactory#getPassword", "start_line": 70, "end_line": 73, "signature": "getPassword()", "original_code": "@Override\n\t\tpublic String getPassword() {\n\t\t\treturn this.environment.getPassword();\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getPassword", "public", "(", ")", "{", "}", "@", "Override", "return", ";", ".", "getPassword", "this", ".", "environment", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 8, "nloc": 4, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/clickhouse/ClickHouseJdbcDockerComposeConnectionDetailsFactory.java#75-78", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/clickhouse/ClickHouseJdbcDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getJdbcUrl", "qualified_name": "org.springframework.boot.docker.compose.service.connection.clickhouse.ClickHouseJdbcDockerComposeConnectionDetailsFactory#getJdbcUrl", "start_line": 75, "end_line": 78, "signature": "getJdbcUrl()", "original_code": "@Override\n\t\tpublic String getJdbcUrl() {\n\t\t\treturn this.jdbcUrl;\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getJdbcUrl", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "this", ".", "jdbcUrl"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/clickhouse/ClickHouseR2dbcDockerComposeConnectionDetailsFactory.java#43-46", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/clickhouse/ClickHouseR2dbcDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getDockerComposeConnectionDetails", "qualified_name": "org.springframework.boot.docker.compose.service.connection.clickhouse.ClickHouseR2dbcDockerComposeConnectionDetailsFactory#getDockerComposeConnectionDetails", "start_line": 43, "end_line": 46, "signature": "getDockerComposeConnectionDetails(DockerComposeConnectionSource source)", "original_code": "@Override\n\tprotected R2dbcConnectionDetails getDockerComposeConnectionDetails(DockerComposeConnectionSource source) {\n\t\treturn new ClickhouseDbR2dbcDockerComposeConnectionDetails(source.getRunningService());\n\t}", "doc_comment": ""}, "code_tokens": ["R2dbcConnectionDetails", "getDockerComposeConnectionDetails", "protected", "(", ")", "{", "}", "@", "Override", "DockerComposeConnectionSource", "source", "return", ";", "new", "ClickhouseDbR2dbcDockerComposeConnectionDetails", "(", ")", "source", ".", "getRunningService", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 34, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 17, "n_whitespaces": 13, "n_words": 11, "nloc": 4, "token_counts": 22}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/clickhouse/ClickHouseR2dbcDockerComposeConnectionDetailsFactory.java#67-70", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/clickhouse/ClickHouseR2dbcDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getConnectionFactoryOptions", "qualified_name": "org.springframework.boot.docker.compose.service.connection.clickhouse.ClickHouseR2dbcDockerComposeConnectionDetailsFactory#getConnectionFactoryOptions", "start_line": 67, "end_line": 70, "signature": "getConnectionFactoryOptions()", "original_code": "@Override\n\t\tpublic ConnectionFactoryOptions getConnectionFactoryOptions() {\n\t\t\treturn this.connectionFactoryOptions;\n\t\t}", "doc_comment": ""}, "code_tokens": ["ConnectionFactoryOptions", "getConnectionFactoryOptions", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "this", ".", "connectionFactoryOptions"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/elasticsearch/ElasticsearchDockerComposeConnectionDetailsFactory.java#48-51", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/elasticsearch/ElasticsearchDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getDockerComposeConnectionDetails", "qualified_name": "org.springframework.boot.docker.compose.service.connection.elasticsearch.ElasticsearchDockerComposeConnectionDetailsFactory#getDockerComposeConnectionDetails", "start_line": 48, "end_line": 51, "signature": "getDockerComposeConnectionDetails(DockerComposeConnectionSource source)", "original_code": "@Override\n\tprotected ElasticsearchConnectionDetails getDockerComposeConnectionDetails(DockerComposeConnectionSource source) {\n\t\treturn new ElasticsearchDockerComposeConnectionDetails(source.getRunningService());\n\t}", "doc_comment": ""}, "code_tokens": ["ElasticsearchConnectionDetails", "getDockerComposeConnectionDetails", "protected", "(", ")", "{", "}", "@", "Override", "DockerComposeConnectionSource", "source", "return", ";", "new", "ElasticsearchDockerComposeConnectionDetails", "(", ")", "source", ".", "getRunningService", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 34, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 17, "n_whitespaces": 13, "n_words": 11, "nloc": 4, "token_counts": 22}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/elasticsearch/ElasticsearchDockerComposeConnectionDetailsFactory.java#71-74", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/elasticsearch/ElasticsearchDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getUsername", "qualified_name": "org.springframework.boot.docker.compose.service.connection.elasticsearch.ElasticsearchDockerComposeConnectionDetailsFactory#getUsername", "start_line": 71, "end_line": 74, "signature": "getUsername()", "original_code": "@Override\n\t\tpublic String getUsername() {\n\t\t\treturn \"elastic\";\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getUsername", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "\"", "elastic", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 13, "n_whitespaces": 14, "n_words": 6, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/elasticsearch/ElasticsearchDockerComposeConnectionDetailsFactory.java#76-79", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/elasticsearch/ElasticsearchDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getPassword", "qualified_name": "org.springframework.boot.docker.compose.service.connection.elasticsearch.ElasticsearchDockerComposeConnectionDetailsFactory#getPassword", "start_line": 76, "end_line": 79, "signature": "getPassword()", "original_code": "@Override\n\t\tpublic String getPassword() {\n\t\t\treturn this.environment.getPassword();\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getPassword", "public", "(", ")", "{", "}", "@", "Override", "return", ";", ".", "getPassword", "this", ".", "environment", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 8, "nloc": 4, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/elasticsearch/ElasticsearchDockerComposeConnectionDetailsFactory.java#81-84", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/elasticsearch/ElasticsearchDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getNodes", "qualified_name": "org.springframework.boot.docker.compose.service.connection.elasticsearch.ElasticsearchDockerComposeConnectionDetailsFactory#getNodes", "start_line": 81, "end_line": 84, "signature": "getNodes()", "original_code": "@Override\n\t\tpublic List<Node> getNodes() {\n\t\t\treturn this.nodes;\n\t\t}", "doc_comment": ""}, "code_tokens": ["getNodes", "public", "List", "(", ")", "{", "}", "@", "Override", "<", "Node", ">", "return", ";", "this", ".", "nodes"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 27, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 17, "n_whitespaces": 14, "n_words": 8, "nloc": 4, "token_counts": 17}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/mariadb/MariaDbJdbcDockerComposeConnectionDetailsFactory.java#43-46", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/mariadb/MariaDbJdbcDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getDockerComposeConnectionDetails", "qualified_name": "org.springframework.boot.docker.compose.service.connection.mariadb.MariaDbJdbcDockerComposeConnectionDetailsFactory#getDockerComposeConnectionDetails", "start_line": 43, "end_line": 46, "signature": "getDockerComposeConnectionDetails(DockerComposeConnectionSource source)", "original_code": "@Override\n\tprotected JdbcConnectionDetails getDockerComposeConnectionDetails(DockerComposeConnectionSource source) {\n\t\treturn new MariaDbJdbcDockerComposeConnectionDetails(source.getRunningService());\n\t}", "doc_comment": ""}, "code_tokens": ["JdbcConnectionDetails", "getDockerComposeConnectionDetails", "protected", "(", ")", "{", "}", "@", "Override", "DockerComposeConnectionSource", "source", "return", ";", "new", "MariaDbJdbcDockerComposeConnectionDetails", "(", ")", "source", ".", "getRunningService", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 34, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 17, "n_whitespaces": 13, "n_words": 11, "nloc": 4, "token_counts": 22}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/mariadb/MariaDbJdbcDockerComposeConnectionDetailsFactory.java#66-69", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/mariadb/MariaDbJdbcDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getUsername", "qualified_name": "org.springframework.boot.docker.compose.service.connection.mariadb.MariaDbJdbcDockerComposeConnectionDetailsFactory#getUsername", "start_line": 66, "end_line": 69, "signature": "getUsername()", "original_code": "@Override\n\t\tpublic String getUsername() {\n\t\t\treturn this.environment.getUsername();\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getUsername", "public", "(", ")", "{", "}", "@", "Override", "return", ";", ".", "getUsername", "this", ".", "environment", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 8, "nloc": 4, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/mariadb/MariaDbJdbcDockerComposeConnectionDetailsFactory.java#71-74", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/mariadb/MariaDbJdbcDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getPassword", "qualified_name": "org.springframework.boot.docker.compose.service.connection.mariadb.MariaDbJdbcDockerComposeConnectionDetailsFactory#getPassword", "start_line": 71, "end_line": 74, "signature": "getPassword()", "original_code": "@Override\n\t\tpublic String getPassword() {\n\t\t\treturn this.environment.getPassword();\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getPassword", "public", "(", ")", "{", "}", "@", "Override", "return", ";", ".", "getPassword", "this", ".", "environment", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 8, "nloc": 4, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/mariadb/MariaDbJdbcDockerComposeConnectionDetailsFactory.java#76-79", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/mariadb/MariaDbJdbcDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getJdbcUrl", "qualified_name": "org.springframework.boot.docker.compose.service.connection.mariadb.MariaDbJdbcDockerComposeConnectionDetailsFactory#getJdbcUrl", "start_line": 76, "end_line": 79, "signature": "getJdbcUrl()", "original_code": "@Override\n\t\tpublic String getJdbcUrl() {\n\t\t\treturn this.jdbcUrl;\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getJdbcUrl", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "this", ".", "jdbcUrl"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/mariadb/MariaDbR2dbcDockerComposeConnectionDetailsFactory.java#45-48", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/mariadb/MariaDbR2dbcDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getDockerComposeConnectionDetails", "qualified_name": "org.springframework.boot.docker.compose.service.connection.mariadb.MariaDbR2dbcDockerComposeConnectionDetailsFactory#getDockerComposeConnectionDetails", "start_line": 45, "end_line": 48, "signature": "getDockerComposeConnectionDetails(DockerComposeConnectionSource source)", "original_code": "@Override\n\tprotected R2dbcConnectionDetails getDockerComposeConnectionDetails(DockerComposeConnectionSource source) {\n\t\treturn new MariaDbR2dbcDockerComposeConnectionDetails(source.getRunningService());\n\t}", "doc_comment": ""}, "code_tokens": ["R2dbcConnectionDetails", "getDockerComposeConnectionDetails", "protected", "(", ")", "{", "}", "@", "Override", "DockerComposeConnectionSource", "source", "return", ";", "new", "MariaDbR2dbcDockerComposeConnectionDetails", "(", ")", "source", ".", "getRunningService", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 34, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 17, "n_whitespaces": 13, "n_words": 11, "nloc": 4, "token_counts": 22}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/mariadb/MariaDbR2dbcDockerComposeConnectionDetailsFactory.java#68-71", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/mariadb/MariaDbR2dbcDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getConnectionFactoryOptions", "qualified_name": "org.springframework.boot.docker.compose.service.connection.mariadb.MariaDbR2dbcDockerComposeConnectionDetailsFactory#getConnectionFactoryOptions", "start_line": 68, "end_line": 71, "signature": "getConnectionFactoryOptions()", "original_code": "@Override\n\t\tpublic ConnectionFactoryOptions getConnectionFactoryOptions() {\n\t\t\treturn this.connectionFactoryOptions;\n\t\t}", "doc_comment": ""}, "code_tokens": ["ConnectionFactoryOptions", "getConnectionFactoryOptions", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "this", ".", "connectionFactoryOptions"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/mongo/MongoDockerComposeConnectionDetailsFactory.java#45-49", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/mongo/MongoDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getDockerComposeConnectionDetails", "qualified_name": "org.springframework.boot.docker.compose.service.connection.mongo.MongoDockerComposeConnectionDetailsFactory#getDockerComposeConnectionDetails", "start_line": 45, "end_line": 49, "signature": "getDockerComposeConnectionDetails(\n\t\t\tDockerComposeConnectionSource source)", "original_code": "@Override\n\tprotected MongoDockerComposeConnectionDetails getDockerComposeConnectionDetails(\n\t\t\tDockerComposeConnectionSource source) {\n\t\treturn new MongoDockerComposeConnectionDetails(source.getRunningService());\n\t}", "doc_comment": ""}, "code_tokens": ["MongoDockerComposeConnectionDetails", "getDockerComposeConnectionDetails", "protected", "(", ")", "{", "}", "@", "Override", "DockerComposeConnectionSource", "source", "return", ";", "new", "MongoDockerComposeConnectionDetails", "(", ")", "source", ".", "getRunningService", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 34, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 16, "n_whitespaces": 17, "n_words": 11, "nloc": 5, "token_counts": 22}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/mongo/MongoDockerComposeConnectionDetailsFactory.java#65-83", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/mongo/MongoDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "buildConnectionString", "qualified_name": "org.springframework.boot.docker.compose.service.connection.mongo.MongoDockerComposeConnectionDetailsFactory#buildConnectionString", "start_line": 65, "end_line": 83, "signature": "buildConnectionString(RunningService service)", "original_code": "private ConnectionString buildConnectionString(RunningService service) {\n\t\t\tMongoEnvironment environment = new MongoEnvironment(service.env());\n\t\t\tStringBuilder builder = new StringBuilder(\"mongodb://\");\n\t\t\tif (environment.getUsername() != null) {\n\t\t\t\tbuilder.append(environment.getUsername());\n\t\t\t\tbuilder.append(\":\");\n\t\t\t\tbuilder.append((environment.getPassword() != null) ? environment.getPassword() : \"\");\n\t\t\t\tbuilder.append(\"@\");\n\t\t\t}\n\t\t\tbuilder.append(service.host());\n\t\t\tbuilder.append(\":\");\n\t\t\tbuilder.append(service.ports().get(MONGODB_PORT));\n\t\t\tbuilder.append(\"/\");\n\t\t\tbuilder.append((environment.getDatabase() != null) ? environment.getDatabase() : \"test\");\n\t\t\tif (environment.getUsername() != null) {\n\t\t\t\tbuilder.append(\"?authSource=admin\");\n\t\t\t}\n\t\t\treturn new ConnectionString(builder.toString());\n\t\t}", "doc_comment": ""}, "code_tokens": ["ConnectionString", "buildConnectionString", "private", "(", ")", "{", "}", "RunningService", "service", "MongoEnvironment", ";", "StringBuilder", ";", "if", ";", ";", ";", ";", ";", "if", "return", ";", "environment", "=", "builder", "=", "(", ")", "{", "}", "builder", ".", "append", "builder", ".", "append", "builder", ".", "append", "builder", ".", "append", "builder", ".", "append", "(", ")", "{", "}", "new", "ConnectionString", "new", "MongoEnvironment", "new", "StringBuilder", "!=", "null", ";", ";", ";", ";", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "!=", "null", ";", "(", ")", "(", ")", "(", ")", "environment", ".", "getUsername", "builder", ".", "append", "builder", ".", "append", "builder", ".", "append", "builder", ".", "append", "service", ".", "host", "\"", ":", "\"", ".", "get", "\"", "/", "\"", "?", ":", "environment", ".", "getUsername", "builder", ".", "append", "builder", ".", "toString", "service", ".", "env", "\"", "mongodb://", "\"", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "service", ".", "ports", "(", "MONGODB_PORT", ")", "(", ")", "environment", ".", "getDatabase", "\"", "test", "\"", "(", ")", "(", ")", "(", ")", "(", ")", "environment", ".", "getUsername", "\"", ":", "\"", "?", ":", "\"", "@", "\"", "(", ")", "!=", "null", "(", ")", "\"", "?authSource=admin", "\"", "(", ")", "(", ")", "environment", ".", "getPassword", "\"", "\"", "environment", ".", "getDatabase", "!=", "null", "(", ")", "(", ")", "environment", ".", "getPassword", "(", ")"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 293, "ast_depth": 14, "n_identifiers": 14, "vocab_size": 39, "n_whitespaces": 110, "n_words": 70, "nloc": 19, "token_counts": 200}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/mongo/MongoDockerComposeConnectionDetailsFactory.java#85-88", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/mongo/MongoDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getConnectionString", "qualified_name": "org.springframework.boot.docker.compose.service.connection.mongo.MongoDockerComposeConnectionDetailsFactory#getConnectionString", "start_line": 85, "end_line": 88, "signature": "getConnectionString()", "original_code": "@Override\n\t\tpublic ConnectionString getConnectionString() {\n\t\t\treturn this.connectionString;\n\t\t}", "doc_comment": ""}, "code_tokens": ["ConnectionString", "getConnectionString", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "this", ".", "connectionString"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/mysql/MySqlJdbcDockerComposeConnectionDetailsFactory.java#43-46", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/mysql/MySqlJdbcDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getDockerComposeConnectionDetails", "qualified_name": "org.springframework.boot.docker.compose.service.connection.mysql.MySqlJdbcDockerComposeConnectionDetailsFactory#getDockerComposeConnectionDetails", "start_line": 43, "end_line": 46, "signature": "getDockerComposeConnectionDetails(DockerComposeConnectionSource source)", "original_code": "@Override\n\tprotected JdbcConnectionDetails getDockerComposeConnectionDetails(DockerComposeConnectionSource source) {\n\t\treturn new MySqlJdbcDockerComposeConnectionDetails(source.getRunningService());\n\t}", "doc_comment": ""}, "code_tokens": ["JdbcConnectionDetails", "getDockerComposeConnectionDetails", "protected", "(", ")", "{", "}", "@", "Override", "DockerComposeConnectionSource", "source", "return", ";", "new", "MySqlJdbcDockerComposeConnectionDetails", "(", ")", "source", ".", "getRunningService", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 34, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 17, "n_whitespaces": 13, "n_words": 11, "nloc": 4, "token_counts": 22}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/mysql/MySqlJdbcDockerComposeConnectionDetailsFactory.java#66-69", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/mysql/MySqlJdbcDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getUsername", "qualified_name": "org.springframework.boot.docker.compose.service.connection.mysql.MySqlJdbcDockerComposeConnectionDetailsFactory#getUsername", "start_line": 66, "end_line": 69, "signature": "getUsername()", "original_code": "@Override\n\t\tpublic String getUsername() {\n\t\t\treturn this.environment.getUsername();\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getUsername", "public", "(", ")", "{", "}", "@", "Override", "return", ";", ".", "getUsername", "this", ".", "environment", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 8, "nloc": 4, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/mysql/MySqlJdbcDockerComposeConnectionDetailsFactory.java#71-74", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/mysql/MySqlJdbcDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getPassword", "qualified_name": "org.springframework.boot.docker.compose.service.connection.mysql.MySqlJdbcDockerComposeConnectionDetailsFactory#getPassword", "start_line": 71, "end_line": 74, "signature": "getPassword()", "original_code": "@Override\n\t\tpublic String getPassword() {\n\t\t\treturn this.environment.getPassword();\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getPassword", "public", "(", ")", "{", "}", "@", "Override", "return", ";", ".", "getPassword", "this", ".", "environment", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 8, "nloc": 4, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/mysql/MySqlJdbcDockerComposeConnectionDetailsFactory.java#76-79", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/mysql/MySqlJdbcDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getJdbcUrl", "qualified_name": "org.springframework.boot.docker.compose.service.connection.mysql.MySqlJdbcDockerComposeConnectionDetailsFactory#getJdbcUrl", "start_line": 76, "end_line": 79, "signature": "getJdbcUrl()", "original_code": "@Override\n\t\tpublic String getJdbcUrl() {\n\t\t\treturn this.jdbcUrl;\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getJdbcUrl", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "this", ".", "jdbcUrl"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/mysql/MySqlR2dbcDockerComposeConnectionDetailsFactory.java#45-48", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/mysql/MySqlR2dbcDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getDockerComposeConnectionDetails", "qualified_name": "org.springframework.boot.docker.compose.service.connection.mysql.MySqlR2dbcDockerComposeConnectionDetailsFactory#getDockerComposeConnectionDetails", "start_line": 45, "end_line": 48, "signature": "getDockerComposeConnectionDetails(DockerComposeConnectionSource source)", "original_code": "@Override\n\tprotected R2dbcConnectionDetails getDockerComposeConnectionDetails(DockerComposeConnectionSource source) {\n\t\treturn new MySqlR2dbcDockerComposeConnectionDetails(source.getRunningService());\n\t}", "doc_comment": ""}, "code_tokens": ["R2dbcConnectionDetails", "getDockerComposeConnectionDetails", "protected", "(", ")", "{", "}", "@", "Override", "DockerComposeConnectionSource", "source", "return", ";", "new", "MySqlR2dbcDockerComposeConnectionDetails", "(", ")", "source", ".", "getRunningService", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 34, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 17, "n_whitespaces": 13, "n_words": 11, "nloc": 4, "token_counts": 22}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/mysql/MySqlR2dbcDockerComposeConnectionDetailsFactory.java#68-71", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/mysql/MySqlR2dbcDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getConnectionFactoryOptions", "qualified_name": "org.springframework.boot.docker.compose.service.connection.mysql.MySqlR2dbcDockerComposeConnectionDetailsFactory#getConnectionFactoryOptions", "start_line": 68, "end_line": 71, "signature": "getConnectionFactoryOptions()", "original_code": "@Override\n\t\tpublic ConnectionFactoryOptions getConnectionFactoryOptions() {\n\t\t\treturn this.connectionFactoryOptions;\n\t\t}", "doc_comment": ""}, "code_tokens": ["ConnectionFactoryOptions", "getConnectionFactoryOptions", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "this", ".", "connectionFactoryOptions"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/neo4j/Neo4jDockerComposeConnectionDetailsFactory.java#43-46", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/neo4j/Neo4jDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getDockerComposeConnectionDetails", "qualified_name": "org.springframework.boot.docker.compose.service.connection.neo4j.Neo4jDockerComposeConnectionDetailsFactory#getDockerComposeConnectionDetails", "start_line": 43, "end_line": 46, "signature": "getDockerComposeConnectionDetails(DockerComposeConnectionSource source)", "original_code": "@Override\n\tprotected Neo4jConnectionDetails getDockerComposeConnectionDetails(DockerComposeConnectionSource source) {\n\t\treturn new Neo4jDockerComposeConnectionDetails(source.getRunningService());\n\t}", "doc_comment": ""}, "code_tokens": ["Neo4jConnectionDetails", "getDockerComposeConnectionDetails", "protected", "(", ")", "{", "}", "@", "Override", "DockerComposeConnectionSource", "source", "return", ";", "new", "Neo4jDockerComposeConnectionDetails", "(", ")", "source", ".", "getRunningService", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 34, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 17, "n_whitespaces": 13, "n_words": 11, "nloc": 4, "token_counts": 22}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/neo4j/Neo4jDockerComposeConnectionDetailsFactory.java#67-70", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/neo4j/Neo4jDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getUri", "qualified_name": "org.springframework.boot.docker.compose.service.connection.neo4j.Neo4jDockerComposeConnectionDetailsFactory#getUri", "start_line": 67, "end_line": 70, "signature": "getUri()", "original_code": "@Override\n\t\tpublic URI getUri() {\n\t\t\treturn this.uri;\n\t\t}", "doc_comment": ""}, "code_tokens": ["URI", "getUri", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "this", ".", "uri"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/neo4j/Neo4jDockerComposeConnectionDetailsFactory.java#72-75", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/neo4j/Neo4jDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getAuthToken", "qualified_name": "org.springframework.boot.docker.compose.service.connection.neo4j.Neo4jDockerComposeConnectionDetailsFactory#getAuthToken", "start_line": 72, "end_line": 75, "signature": "getAuthToken()", "original_code": "@Override\n\t\tpublic AuthToken getAuthToken() {\n\t\t\treturn this.authToken;\n\t\t}", "doc_comment": ""}, "code_tokens": ["AuthToken", "getAuthToken", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "this", ".", "authToken"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/postgres/PostgresJdbcDockerComposeConnectionDetailsFactory.java#44-47", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/postgres/PostgresJdbcDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getDockerComposeConnectionDetails", "qualified_name": "org.springframework.boot.docker.compose.service.connection.postgres.PostgresJdbcDockerComposeConnectionDetailsFactory#getDockerComposeConnectionDetails", "start_line": 44, "end_line": 47, "signature": "getDockerComposeConnectionDetails(DockerComposeConnectionSource source)", "original_code": "@Override\n\tprotected JdbcConnectionDetails getDockerComposeConnectionDetails(DockerComposeConnectionSource source) {\n\t\treturn new PostgresJdbcDockerComposeConnectionDetails(source.getRunningService());\n\t}", "doc_comment": ""}, "code_tokens": ["JdbcConnectionDetails", "getDockerComposeConnectionDetails", "protected", "(", ")", "{", "}", "@", "Override", "DockerComposeConnectionSource", "source", "return", ";", "new", "PostgresJdbcDockerComposeConnectionDetails", "(", ")", "source", ".", "getRunningService", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 34, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 17, "n_whitespaces": 13, "n_words": 11, "nloc": 4, "token_counts": 22}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/postgres/PostgresJdbcDockerComposeConnectionDetailsFactory.java#67-70", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/postgres/PostgresJdbcDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getUsername", "qualified_name": "org.springframework.boot.docker.compose.service.connection.postgres.PostgresJdbcDockerComposeConnectionDetailsFactory#getUsername", "start_line": 67, "end_line": 70, "signature": "getUsername()", "original_code": "@Override\n\t\tpublic String getUsername() {\n\t\t\treturn this.environment.getUsername();\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getUsername", "public", "(", ")", "{", "}", "@", "Override", "return", ";", ".", "getUsername", "this", ".", "environment", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 8, "nloc": 4, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/postgres/PostgresJdbcDockerComposeConnectionDetailsFactory.java#72-75", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/postgres/PostgresJdbcDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getPassword", "qualified_name": "org.springframework.boot.docker.compose.service.connection.postgres.PostgresJdbcDockerComposeConnectionDetailsFactory#getPassword", "start_line": 72, "end_line": 75, "signature": "getPassword()", "original_code": "@Override\n\t\tpublic String getPassword() {\n\t\t\treturn this.environment.getPassword();\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getPassword", "public", "(", ")", "{", "}", "@", "Override", "return", ";", ".", "getPassword", "this", ".", "environment", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 8, "nloc": 4, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/postgres/PostgresJdbcDockerComposeConnectionDetailsFactory.java#77-80", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/postgres/PostgresJdbcDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getJdbcUrl", "qualified_name": "org.springframework.boot.docker.compose.service.connection.postgres.PostgresJdbcDockerComposeConnectionDetailsFactory#getJdbcUrl", "start_line": 77, "end_line": 80, "signature": "getJdbcUrl()", "original_code": "@Override\n\t\tpublic String getJdbcUrl() {\n\t\t\treturn this.jdbcUrl;\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getJdbcUrl", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "this", ".", "jdbcUrl"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/postgres/PostgresR2dbcDockerComposeConnectionDetailsFactory.java#46-49", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/postgres/PostgresR2dbcDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getDockerComposeConnectionDetails", "qualified_name": "org.springframework.boot.docker.compose.service.connection.postgres.PostgresR2dbcDockerComposeConnectionDetailsFactory#getDockerComposeConnectionDetails", "start_line": 46, "end_line": 49, "signature": "getDockerComposeConnectionDetails(DockerComposeConnectionSource source)", "original_code": "@Override\n\tprotected R2dbcConnectionDetails getDockerComposeConnectionDetails(DockerComposeConnectionSource source) {\n\t\treturn new PostgresDbR2dbcDockerComposeConnectionDetails(source.getRunningService());\n\t}", "doc_comment": ""}, "code_tokens": ["R2dbcConnectionDetails", "getDockerComposeConnectionDetails", "protected", "(", ")", "{", "}", "@", "Override", "DockerComposeConnectionSource", "source", "return", ";", "new", "PostgresDbR2dbcDockerComposeConnectionDetails", "(", ")", "source", ".", "getRunningService", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 34, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 17, "n_whitespaces": 13, "n_words": 11, "nloc": 4, "token_counts": 22}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/postgres/PostgresR2dbcDockerComposeConnectionDetailsFactory.java#69-72", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/postgres/PostgresR2dbcDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getConnectionFactoryOptions", "qualified_name": "org.springframework.boot.docker.compose.service.connection.postgres.PostgresR2dbcDockerComposeConnectionDetailsFactory#getConnectionFactoryOptions", "start_line": 69, "end_line": 72, "signature": "getConnectionFactoryOptions()", "original_code": "@Override\n\t\tpublic ConnectionFactoryOptions getConnectionFactoryOptions() {\n\t\t\treturn this.connectionFactoryOptions;\n\t\t}", "doc_comment": ""}, "code_tokens": ["ConnectionFactoryOptions", "getConnectionFactoryOptions", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "this", ".", "connectionFactoryOptions"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/rabbit/RabbitDockerComposeConnectionDetailsFactory.java#47-50", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/rabbit/RabbitDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getDockerComposeConnectionDetails", "qualified_name": "org.springframework.boot.docker.compose.service.connection.rabbit.RabbitDockerComposeConnectionDetailsFactory#getDockerComposeConnectionDetails", "start_line": 47, "end_line": 50, "signature": "getDockerComposeConnectionDetails(DockerComposeConnectionSource source)", "original_code": "@Override\n\tprotected RabbitConnectionDetails getDockerComposeConnectionDetails(DockerComposeConnectionSource source) {\n\t\treturn new RabbitDockerComposeConnectionDetails(source.getRunningService());\n\t}", "doc_comment": ""}, "code_tokens": ["RabbitConnectionDetails", "getDockerComposeConnectionDetails", "protected", "(", ")", "{", "}", "@", "Override", "DockerComposeConnectionSource", "source", "return", ";", "new", "RabbitDockerComposeConnectionDetails", "(", ")", "source", ".", "getRunningService", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 34, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 17, "n_whitespaces": 13, "n_words": 11, "nloc": 4, "token_counts": 22}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/rabbit/RabbitDockerComposeConnectionDetailsFactory.java#69-72", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/rabbit/RabbitDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getUsername", "qualified_name": "org.springframework.boot.docker.compose.service.connection.rabbit.RabbitDockerComposeConnectionDetailsFactory#getUsername", "start_line": 69, "end_line": 72, "signature": "getUsername()", "original_code": "@Override\n\t\tpublic String getUsername() {\n\t\t\treturn this.environment.getUsername();\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getUsername", "public", "(", ")", "{", "}", "@", "Override", "return", ";", ".", "getUsername", "this", ".", "environment", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 8, "nloc": 4, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/rabbit/RabbitDockerComposeConnectionDetailsFactory.java#74-77", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/rabbit/RabbitDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getPassword", "qualified_name": "org.springframework.boot.docker.compose.service.connection.rabbit.RabbitDockerComposeConnectionDetailsFactory#getPassword", "start_line": 74, "end_line": 77, "signature": "getPassword()", "original_code": "@Override\n\t\tpublic String getPassword() {\n\t\t\treturn this.environment.getPassword();\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getPassword", "public", "(", ")", "{", "}", "@", "Override", "return", ";", ".", "getPassword", "this", ".", "environment", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 28, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 8, "nloc": 4, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/rabbit/RabbitDockerComposeConnectionDetailsFactory.java#79-82", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/rabbit/RabbitDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getVirtualHost", "qualified_name": "org.springframework.boot.docker.compose.service.connection.rabbit.RabbitDockerComposeConnectionDetailsFactory#getVirtualHost", "start_line": 79, "end_line": 82, "signature": "getVirtualHost()", "original_code": "@Override\n\t\tpublic String getVirtualHost() {\n\t\t\treturn \"/\";\n\t\t}", "doc_comment": ""}, "code_tokens": ["String", "getVirtualHost", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "\"", "/", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 13, "n_whitespaces": 14, "n_words": 5, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/rabbit/RabbitDockerComposeConnectionDetailsFactory.java#84-87", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/rabbit/RabbitDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getAddresses", "qualified_name": "org.springframework.boot.docker.compose.service.connection.rabbit.RabbitDockerComposeConnectionDetailsFactory#getAddresses", "start_line": 84, "end_line": 87, "signature": "getAddresses()", "original_code": "@Override\n\t\tpublic List<Address> getAddresses() {\n\t\t\treturn this.addresses;\n\t\t}", "doc_comment": ""}, "code_tokens": ["getAddresses", "public", "List", "(", ")", "{", "}", "@", "Override", "<", "Address", ">", "return", ";", "this", ".", "addresses"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 27, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 17, "n_whitespaces": 14, "n_words": 8, "nloc": 4, "token_counts": 17}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/redis/RedisDockerComposeConnectionDetailsFactory.java#45-48", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/redis/RedisDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getDockerComposeConnectionDetails", "qualified_name": "org.springframework.boot.docker.compose.service.connection.redis.RedisDockerComposeConnectionDetailsFactory#getDockerComposeConnectionDetails", "start_line": 45, "end_line": 48, "signature": "getDockerComposeConnectionDetails(DockerComposeConnectionSource source)", "original_code": "@Override\n\tprotected RedisConnectionDetails getDockerComposeConnectionDetails(DockerComposeConnectionSource source) {\n\t\treturn new RedisDockerComposeConnectionDetails(source.getRunningService());\n\t}", "doc_comment": ""}, "code_tokens": ["RedisConnectionDetails", "getDockerComposeConnectionDetails", "protected", "(", ")", "{", "}", "@", "Override", "DockerComposeConnectionSource", "source", "return", ";", "new", "RedisDockerComposeConnectionDetails", "(", ")", "source", ".", "getRunningService", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 34, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 17, "n_whitespaces": 13, "n_words": 11, "nloc": 4, "token_counts": 22}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/redis/RedisDockerComposeConnectionDetailsFactory.java#63-66", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/redis/RedisDockerComposeConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getStandalone", "qualified_name": "org.springframework.boot.docker.compose.service.connection.redis.RedisDockerComposeConnectionDetailsFactory#getStandalone", "start_line": 63, "end_line": 66, "signature": "getStandalone()", "original_code": "@Override\n\t\tpublic Standalone getStandalone() {\n\t\t\treturn this.standalone;\n\t\t}", "doc_comment": ""}, "code_tokens": ["Standalone", "getStandalone", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "this", ".", "standalone"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 22, "ast_depth": 6, "n_identifiers": 3, "vocab_size": 14, "n_whitespaces": 14, "n_words": 7, "nloc": 4, "token_counts": 14}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-testcontainers/src/main/java/org/springframework/boot/testcontainers/service/connection/redis/RedisContainerConnectionDetailsFactory.java#53-59", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-testcontainers/src/main/java/org/springframework/boot/testcontainers/service/connection/redis/RedisContainerConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "sourceAccepts", "qualified_name": "org.springframework.boot.testcontainers.service.connection.redis.RedisContainerConnectionDetailsFactory#sourceAccepts", "start_line": 53, "end_line": 59, "signature": "sourceAccepts(ContainerConnectionSource<Container<?>> source, Class<?> requiredContainerType,\n\t\t\tClass<?> requiredConnectionDetailsType)", "original_code": "@Override\n\tprotected boolean sourceAccepts(ContainerConnectionSource<Container<?>> source, Class<?> requiredContainerType,\n\t\t\tClass<?> requiredConnectionDetailsType) {\n\t\treturn super.sourceAccepts(source, requiredContainerType, requiredConnectionDetailsType)\n\t\t\t\t|| source.accepts(ANY_CONNECTION_NAME, RedisContainer.class, requiredConnectionDetailsType)\n\t\t\t\t|| source.accepts(ANY_CONNECTION_NAME, RedisStackContainer.class, requiredConnectionDetailsType);\n\t}", "doc_comment": ""}, "code_tokens": ["boolean", "sourceAccepts", "protected", "(", ",", ",", ")", "{", "}", "@", "Override", "source", "requiredContainerType", "requiredConnectionDetailsType", "return", ";", "ContainerConnectionSource", "Class", "Class", "||", "<", ">", "<", ">", "<", ">", "||", "source", ".", "accepts", "Container", "?", "?", "super", ".", "sourceAccepts", "source", ".", "accepts", "(", "ANY_CONNECTION_NAME", ",", ",", "requiredConnectionDetailsType", ")", "<", ">", "(", "source", ",", "requiredContainerType", ",", "requiredConnectionDetailsType", ")", "(", "ANY_CONNECTION_NAME", ",", ",", "requiredConnectionDetailsType", ")", "RedisStackContainer", ".", "class", "?", "RedisContainer", ".", "class"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 98, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 29, "n_whitespaces": 37, "n_words": 29, "nloc": 7, "token_counts": 67}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-testcontainers/src/main/java/org/springframework/boot/testcontainers/service/connection/redis/RedisContainerConnectionDetailsFactory.java#61-64", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-testcontainers/src/main/java/org/springframework/boot/testcontainers/service/connection/redis/RedisContainerConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getContainerConnectionDetails", "qualified_name": "org.springframework.boot.testcontainers.service.connection.redis.RedisContainerConnectionDetailsFactory#getContainerConnectionDetails", "start_line": 61, "end_line": 64, "signature": "getContainerConnectionDetails(ContainerConnectionSource<Container<?>> source)", "original_code": "@Override\n\tprotected RedisConnectionDetails getContainerConnectionDetails(ContainerConnectionSource<Container<?>> source) {\n\t\treturn new RedisContainerConnectionDetails(source);\n\t}", "doc_comment": ""}, "code_tokens": ["RedisConnectionDetails", "getContainerConnectionDetails", "protected", "(", ")", "{", "}", "@", "Override", "source", "return", ";", "ContainerConnectionSource", "new", "RedisContainerConnectionDetails", "<", ">", "(", "source", ")", "Container", "<", ">", "?"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 39, "ast_depth": 10, "n_identifiers": 3, "vocab_size": 19, "n_whitespaces": 13, "n_words": 11, "nloc": 4, "token_counts": 24}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-testcontainers/src/main/java/org/springframework/boot/testcontainers/service/connection/redis/RedisContainerConnectionDetailsFactory.java#76-79", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-testcontainers/src/main/java/org/springframework/boot/testcontainers/service/connection/redis/RedisContainerConnectionDetailsFactory.java", "language": "Java"}, "method": {"name": "getStandalone", "qualified_name": "org.springframework.boot.testcontainers.service.connection.redis.RedisContainerConnectionDetailsFactory#getStandalone", "start_line": 76, "end_line": 79, "signature": "getStandalone()", "original_code": "@Override\n\t\tpublic Standalone getStandalone() {\n\t\t\treturn Standalone.of(getContainer().getHost(), getContainer().getMappedPort(REDIS_PORT));\n\t\t}", "doc_comment": ""}, "code_tokens": ["Standalone", "getStandalone", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "Standalone", ".", "of", "(", ",", ")", ".", "getHost", ".", "getMappedPort", "getContainer", "(", ")", "getContainer", "(", "REDIS_PORT", ")", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 49, "ast_depth": 10, "n_identifiers": 8, "vocab_size": 18, "n_whitespaces": 15, "n_words": 12, "nloc": 4, "token_counts": 32}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-tools/spring-boot-test-support-docker/src/main/java/org/springframework/boot/testsupport/container/TestImage.java#344-351", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-tools/spring-boot-test-support-docker/src/main/java/org/springframework/boot/testsupport/container/TestImage.java", "language": "Java"}, "method": {"name": "getIfPossible", "qualified_name": "org.springframework.boot.testsupport.container.TestImage#getIfPossible", "start_line": 344, "end_line": 351, "signature": "getIfPossible(Supplier<Class<?>> supplier)", "original_code": "static Class<?> getIfPossible(Supplier<Class<?>> supplier) {\n\t\ttry {\n\t\t\treturn (supplier != null) ? supplier.get() : null;\n\t\t}\n\t\tcatch (NoClassDefFoundError ex) {\n\t\t\treturn null;\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["getIfPossible", "static", "Class", "(", ")", "{", "}", "<", ">", "supplier", "try", "?", "Supplier", "{", "}", "catch", "(", ")", "<", ">", "return", ";", "ex", "{", "}", "Class", "?", ":", "null", "NoClassDefFoundError", "return", "null", ";", "<", ">", "(", ")", "supplier", ".", "get", "?", "supplier", "!=", "null", "(", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 73, "ast_depth": 10, "n_identifiers": 4, "vocab_size": 23, "n_whitespaces": 38, "n_words": 18, "nloc": 8, "token_counts": 46}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-tools/spring-boot-test-support-docker/src/main/java/org/springframework/boot/testsupport/container/TestImage.java#353-355", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-tools/spring-boot-test-support-docker/src/main/java/org/springframework/boot/testsupport/container/TestImage.java", "language": "Java"}, "method": {"name": "matchesContainerClass", "qualified_name": "org.springframework.boot.testsupport.container.TestImage#matchesContainerClass", "start_line": 353, "end_line": 355, "signature": "matchesContainerClass(Class<?> containerClass)", "original_code": "private boolean matchesContainerClass(Class<?> containerClass) {\n\t\treturn this.containerClass != null && this.containerClass.isAssignableFrom(containerClass);\n\t}", "doc_comment": ""}, "code_tokens": ["boolean", "matchesContainerClass", "private", "(", ")", "{", "}", "containerClass", "return", ";", "Class", "&&", "<", ">", "!=", "null", ".", "isAssignableFrom", "?", "this", ".", "containerClass", "this", ".", "containerClass", "(", "containerClass", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 44, "ast_depth": 8, "n_identifiers": 3, "vocab_size": 20, "n_whitespaces": 14, "n_words": 13, "nloc": 3, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-tools/spring-boot-test-support-docker/src/main/java/org/springframework/boot/testsupport/container/TestImage.java#361-363", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-tools/spring-boot-test-support-docker/src/main/java/org/springframework/boot/testsupport/container/TestImage.java", "language": "Java"}, "method": {"name": "genericContainer", "qualified_name": "org.springframework.boot.testsupport.container.TestImage#genericContainer", "start_line": 361, "end_line": 363, "signature": "genericContainer()", "original_code": "public GenericContainer<?> genericContainer() {\n\t\treturn createContainer(GenericContainer.class);\n\t}", "doc_comment": "/**\n\t * Create a {@link GenericContainer} for the given {@link TestImage}.\n\t * @return a generic container for the test image\n\t */"}, "code_tokens": ["genericContainer", "public", "GenericContainer", "(", ")", "{", "}", "<", ">", "return", ";", "?", "createContainer", "(", ")", "GenericContainer", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 30, "ast_depth": 8, "n_identifiers": 2, "vocab_size": 15, "n_whitespaces": 9, "n_words": 7, "nloc": 3, "token_counts": 18}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-tools/spring-boot-test-support-docker/src/main/java/org/springframework/boot/testsupport/container/TestImage.java#365-380", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-tools/spring-boot-test-support-docker/src/main/java/org/springframework/boot/testsupport/container/TestImage.java", "language": "Java"}, "method": {"name": "createContainer", "qualified_name": "org.springframework.boot.testsupport.container.TestImage#createContainer", "start_line": 365, "end_line": 380, "signature": "createContainer(Class<C> containerClass)", "original_code": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n\tprivate <C extends Container<?>> C createContainer(Class<C> containerClass) {\n\t\tDockerImageName dockerImageName = DockerImageName.parse(toString());\n\t\ttry {\n\t\t\tConstructor<C> constructor = containerClass.getDeclaredConstructor(DockerImageName.class);\n\t\t\tconstructor.setAccessible(true);\n\t\t\tC container = constructor.newInstance(dockerImageName);\n\t\t\tif (this.containerSetup != null) {\n\t\t\t\t((Consumer) this.containerSetup).accept(container);\n\t\t\t}\n\t\t\treturn container;\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tthrow new IllegalStateException(\"Unable to create container \" + containerClass, ex);\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["C", "createContainer", "private", "<", ">", "(", ")", "{", "}", "@", "SuppressWarnings", "C", "containerClass", "DockerImageName", ";", "try", "(", ")", "extends", "Class", "dockerImageName", "=", "{", "}", "catch", "(", ")", "{", ",", "}", "Container", "<", "C", ">", "DockerImageName", ".", "parse", ";", ";", "C", ";", "if", "return", "container", ";", "ex", "{", "}", "\"", "rawtypes", "\"", "\"", "unchecked", "\"", "<", ">", "(", ")", "Constructor", "constructor", "=", "constructor", ".", "setAccessible", "container", "=", "(", ")", "{", "}", "Exception", "throw", ";", "?", "toString", "<", "C", ">", "containerClass", ".", "getDeclaredConstructor", "(", "true", ")", "constructor", ".", "newInstance", "!=", "null", ";", "new", "IllegalStateException", "(", ")", "(", ")", "(", "dockerImageName", ")", "this", ".", "containerSetup", ".", "accept", "(", ",", "ex", ")", "DockerImageName", ".", "class", "(", ")", "(", "container", ")", "+", "containerClass", "(", "Consumer", ")", "\"", "Unable to create container ", "\"", "this", ".", "containerSetup"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 189, "ast_depth": 13, "n_identifiers": 15, "vocab_size": 52, "n_whitespaces": 90, "n_words": 56, "nloc": 16, "token_counts": 127}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-tools/spring-boot-test-support-docker/src/main/java/org/springframework/boot/testsupport/container/TestImage.java#382-384", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-tools/spring-boot-test-support-docker/src/main/java/org/springframework/boot/testsupport/container/TestImage.java", "language": "Java"}, "method": {"name": "getTag", "qualified_name": "org.springframework.boot.testsupport.container.TestImage#getTag", "start_line": 382, "end_line": 384, "signature": "getTag()", "original_code": "public String getTag() {\n\t\treturn this.tag;\n\t}", "doc_comment": ""}, "code_tokens": ["String", "getTag", "public", "(", ")", "{", "}", "return", ";", "this", ".", "tag"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 19, "ast_depth": 6, "n_identifiers": 2, "vocab_size": 12, "n_whitespaces": 9, "n_words": 6, "nloc": 3, "token_counts": 12}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-tools/spring-boot-test-support-docker/src/main/java/org/springframework/boot/testsupport/container/TestImage.java#386-389", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-tools/spring-boot-test-support-docker/src/main/java/org/springframework/boot/testsupport/container/TestImage.java", "language": "Java"}, "method": {"name": "toString", "qualified_name": "org.springframework.boot.testsupport.container.TestImage#toString", "start_line": 386, "end_line": 389, "signature": "toString()", "original_code": "@Override\n\tpublic String toString() {\n\t\treturn (this.tag != null) ? this.name + \":\" + this.tag : this.name;\n\t}", "doc_comment": ""}, "code_tokens": ["String", "toString", "public", "(", ")", "{", "}", "@", "Override", "return", ";", "?", ":", "(", ")", "+", "this", ".", "name", "!=", "null", "+", "this", ".", "tag", "this", ".", "tag", "this", ".", "name", "\"", ":", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 51, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 21, "n_whitespaces": 21, "n_words": 14, "nloc": 4, "token_counts": 34}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-tools/spring-boot-test-support-docker/src/main/java/org/springframework/boot/testsupport/container/TestImage.java#398-400", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-tools/spring-boot-test-support-docker/src/main/java/org/springframework/boot/testsupport/container/TestImage.java", "language": "Java"}, "method": {"name": "container", "qualified_name": "org.springframework.boot.testsupport.container.TestImage#container", "start_line": 398, "end_line": 400, "signature": "container(Class<C> containerClass)", "original_code": "public static <C extends Container<?>> C container(Class<C> containerClass) {\n\t\treturn forContainerClass(containerClass).createContainer(containerClass);\n\t}", "doc_comment": "/**\n\t * Factory method to create and configure a {@link Container} using a deduced\n\t * {@link TestImage}.\n\t * @param <C> the container type\n\t * @param containerClass the container type\n\t * @return a container instance\n\t */"}, "code_tokens": ["C", "container", "public", "static", "<", ">", "(", ")", "{", "}", "C", "containerClass", "return", ";", "extends", "Class", ".", "createContainer", "Container", "<", "C", ">", "forContainerClass", "(", "containerClass", ")", "<", ">", "(", "containerClass", ")", "?"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 51, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 20, "n_whitespaces": 14, "n_words": 15, "nloc": 3, "token_counts": 32}}
{"dataset_split": "train", "id": "spring-boot@4a1de85:spring-boot-project/spring-boot-tools/spring-boot-test-support-docker/src/main/java/org/springframework/boot/testsupport/container/TestImage.java#402-409", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "4a1de8534f8c8a5d83b196ce29c71cfc38d52180", "license": "apache-2.0"}, "file": {"path": "spring-boot-project/spring-boot-tools/spring-boot-test-support-docker/src/main/java/org/springframework/boot/testsupport/container/TestImage.java", "language": "Java"}, "method": {"name": "forContainerClass", "qualified_name": "org.springframework.boot.testsupport.container.TestImage#forContainerClass", "start_line": 402, "end_line": 409, "signature": "forContainerClass(Class<?> containerClass)", "original_code": "private static TestImage forContainerClass(Class<?> containerClass) {\n\t\tList<TestImage> images = Arrays.stream(values())\n\t\t\t.filter((image) -> image.matchesContainerClass(containerClass))\n\t\t\t.toList();\n\t\tAssert.state(!images.isEmpty(), () -> \"Unknown container class \" + containerClass);\n\t\tAssert.state(images.size() == 1, () -> \"Multiple test images match container class \" + containerClass);\n\t\treturn images.get(0);\n\t}", "doc_comment": ""}, "code_tokens": ["TestImage", "forContainerClass", "private", "static", "(", ")", "{", "}", "containerClass", ";", ";", ";", "return", ";", "Class", "List", "images", "=", "Assert", ".", "state", "Assert", ".", "state", "images", ".", "get", "<", ">", "<", "TestImage", ">", ".", "toList", "(", ",", ")", "(", ",", ")", "(", "0", ")", "?", ".", "filter", "(", ")", "!", "->", "==", "1", "->", "Arrays", ".", "stream", "(", ")", "images", ".", "isEmpty", "(", ")", "+", "containerClass", "images", ".", "size", "(", ")", "+", "containerClass", "(", ")", "->", "(", ")", "\"", "Unknown container class ", "\"", "(", ")", "\"", "Multiple test images match container class ", "\"", "values", "(", "image", ")", "image", ".", "matchesContainerClass", "(", ")", "(", "containerClass", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 145, "ast_depth": 12, "n_identifiers": 15, "vocab_size": 41, "n_whitespaces": 54, "n_words": 42, "nloc": 8, "token_counts": 97}}
{"dataset_split": "train", "id": "spring-boot@3b98af3:core/spring-boot-test/src/test/java/org/springframework/boot/test/context/filter/TestTypeExcludeFilterTests.java#42-47", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "3b98af30f5f91ee56260f9e2d640dfd590876ff9", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/test/java/org/springframework/boot/test/context/filter/TestTypeExcludeFilterTests.java", "language": "Java"}, "method": {"name": "matchesJUnit4TestClass", "qualified_name": "test.java.org.springframework.boot.test.context.filter.TestTypeExcludeFilterTests#matchesJUnit4TestClass", "start_line": 42, "end_line": 47, "signature": "matchesJUnit4TestClass()", "original_code": "@Test\n\t@Deprecated(since = \"4.0.0\")\n\tvoid matchesJUnit4TestClass() throws Exception {\n\t\tassertThat(this.filter.match(getMetadataReader(TestTypeExcludeFilterTests.class), this.metadataReaderFactory))\n\t\t\t.isTrue();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "matchesJUnit4TestClass", "(", ")", "throws", "Exception", "{", "}", "@", "Test", "@", "Deprecated", ";", "(", ")", ".", "isTrue", "since", "=", "assertThat", "(", ")", "\"", "4.0.0", "\"", "(", ")", ".", "match", "this", ".", "filter", "(", ",", ")", "getMetadataReader", "this", ".", "metadataReaderFactory", "(", ")", "TestTypeExcludeFilterTests", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 67, "ast_depth": 13, "n_identifiers": 10, "vocab_size": 27, "n_whitespaces": 20, "n_words": 20, "nloc": 6, "token_counts": 44}}
{"dataset_split": "train", "id": "spring-boot@3b98af3:core/spring-boot-test/src/test/java/org/springframework/boot/test/context/filter/TestTypeExcludeFilterTests.java#49-52", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "3b98af30f5f91ee56260f9e2d640dfd590876ff9", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/test/java/org/springframework/boot/test/context/filter/TestTypeExcludeFilterTests.java", "language": "Java"}, "method": {"name": "matchesJUnitJupiterTestClass", "qualified_name": "test.java.org.springframework.boot.test.context.filter.TestTypeExcludeFilterTests#matchesJUnitJupiterTestClass", "start_line": 49, "end_line": 52, "signature": "matchesJUnitJupiterTestClass()", "original_code": "@Test\n\tvoid matchesJUnitJupiterTestClass() throws Exception {\n\t\tassertThat(this.filter.match(getMetadataReader(JupiterTestExample.class), this.metadataReaderFactory)).isTrue();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "matchesJUnitJupiterTestClass", "(", ")", "throws", "Exception", "{", "}", "@", "Test", ";", ".", "isTrue", "assertThat", "(", ")", "(", ")", ".", "match", "this", ".", "filter", "(", ",", ")", "getMetadataReader", "this", ".", "metadataReaderFactory", "(", ")", "JupiterTestExample", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 54, "ast_depth": 13, "n_identifiers": 8, "vocab_size": 22, "n_whitespaces": 12, "n_words": 15, "nloc": 4, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@3b98af3:core/spring-boot-test/src/test/java/org/springframework/boot/test/context/filter/TestTypeExcludeFilterTests.java#54-58", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "3b98af30f5f91ee56260f9e2d640dfd590876ff9", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/test/java/org/springframework/boot/test/context/filter/TestTypeExcludeFilterTests.java", "language": "Java"}, "method": {"name": "matchesJUnitJupiterRepeatedTestClass", "qualified_name": "test.java.org.springframework.boot.test.context.filter.TestTypeExcludeFilterTests#matchesJUnitJupiterRepeatedTestClass", "start_line": 54, "end_line": 58, "signature": "matchesJUnitJupiterRepeatedTestClass()", "original_code": "@Test\n\tvoid matchesJUnitJupiterRepeatedTestClass() throws Exception {\n\t\tassertThat(this.filter.match(getMetadataReader(JupiterRepeatedTestExample.class), this.metadataReaderFactory))\n\t\t\t.isTrue();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "matchesJUnitJupiterRepeatedTestClass", "(", ")", "throws", "Exception", "{", "}", "@", "Test", ";", ".", "isTrue", "assertThat", "(", ")", "(", ")", ".", "match", "this", ".", "filter", "(", ",", ")", "getMetadataReader", "this", ".", "metadataReaderFactory", "(", ")", "JupiterRepeatedTestExample", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 54, "ast_depth": 13, "n_identifiers": 8, "vocab_size": 22, "n_whitespaces": 16, "n_words": 15, "nloc": 5, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@3b98af3:core/spring-boot-test/src/test/java/org/springframework/boot/test/context/filter/TestTypeExcludeFilterTests.java#60-64", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "3b98af30f5f91ee56260f9e2d640dfd590876ff9", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/test/java/org/springframework/boot/test/context/filter/TestTypeExcludeFilterTests.java", "language": "Java"}, "method": {"name": "matchesJUnitJupiterTestFactoryClass", "qualified_name": "test.java.org.springframework.boot.test.context.filter.TestTypeExcludeFilterTests#matchesJUnitJupiterTestFactoryClass", "start_line": 60, "end_line": 64, "signature": "matchesJUnitJupiterTestFactoryClass()", "original_code": "@Test\n\tvoid matchesJUnitJupiterTestFactoryClass() throws Exception {\n\t\tassertThat(this.filter.match(getMetadataReader(JupiterTestFactoryExample.class), this.metadataReaderFactory))\n\t\t\t.isTrue();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "matchesJUnitJupiterTestFactoryClass", "(", ")", "throws", "Exception", "{", "}", "@", "Test", ";", ".", "isTrue", "assertThat", "(", ")", "(", ")", ".", "match", "this", ".", "filter", "(", ",", ")", "getMetadataReader", "this", ".", "metadataReaderFactory", "(", ")", "JupiterTestFactoryExample", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 54, "ast_depth": 13, "n_identifiers": 8, "vocab_size": 22, "n_whitespaces": 16, "n_words": 15, "nloc": 5, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@3b98af3:core/spring-boot-test/src/test/java/org/springframework/boot/test/context/filter/TestTypeExcludeFilterTests.java#66-69", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "3b98af30f5f91ee56260f9e2d640dfd590876ff9", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/test/java/org/springframework/boot/test/context/filter/TestTypeExcludeFilterTests.java", "language": "Java"}, "method": {"name": "matchesNestedConfiguration", "qualified_name": "test.java.org.springframework.boot.test.context.filter.TestTypeExcludeFilterTests#matchesNestedConfiguration", "start_line": 66, "end_line": 69, "signature": "matchesNestedConfiguration()", "original_code": "@Test\n\tvoid matchesNestedConfiguration() throws Exception {\n\t\tassertThat(this.filter.match(getMetadataReader(NestedConfig.class), this.metadataReaderFactory)).isTrue();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "matchesNestedConfiguration", "(", ")", "throws", "Exception", "{", "}", "@", "Test", ";", ".", "isTrue", "assertThat", "(", ")", "(", ")", ".", "match", "this", ".", "filter", "(", ",", ")", "getMetadataReader", "this", ".", "metadataReaderFactory", "(", ")", "NestedConfig", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 54, "ast_depth": 13, "n_identifiers": 8, "vocab_size": 22, "n_whitespaces": 12, "n_words": 15, "nloc": 4, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@3b98af3:core/spring-boot-test/src/test/java/org/springframework/boot/test/context/filter/TestTypeExcludeFilterTests.java#71-76", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "3b98af30f5f91ee56260f9e2d640dfd590876ff9", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/test/java/org/springframework/boot/test/context/filter/TestTypeExcludeFilterTests.java", "language": "Java"}, "method": {"name": "matchesNestedConfigurationClassWithoutTestMethodsIfItHasRunWith", "qualified_name": "test.java.org.springframework.boot.test.context.filter.TestTypeExcludeFilterTests#matchesNestedConfigurationClassWithoutTestMethodsIfItHasRunWith", "start_line": 71, "end_line": 76, "signature": "matchesNestedConfigurationClassWithoutTestMethodsIfItHasRunWith()", "original_code": "@Test\n\tvoid matchesNestedConfigurationClassWithoutTestMethodsIfItHasRunWith() throws Exception {\n\t\tassertThat(this.filter.match(getMetadataReader(AbstractTestWithConfigAndRunWith.Config.class),\n\t\t\t\tthis.metadataReaderFactory))\n\t\t\t.isTrue();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "matchesNestedConfigurationClassWithoutTestMethodsIfItHasRunWith", "(", ")", "throws", "Exception", "{", "}", "@", "Test", ";", ".", "isTrue", "assertThat", "(", ")", "(", ")", ".", "match", "this", ".", "filter", "(", ",", ")", "getMetadataReader", "this", ".", "metadataReaderFactory", "(", ")", ".", "class", "AbstractTestWithConfigAndRunWith", ".", "Config"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 57, "ast_depth": 14, "n_identifiers": 8, "vocab_size": 23, "n_whitespaces": 20, "n_words": 16, "nloc": 6, "token_counts": 37}}
{"dataset_split": "train", "id": "spring-boot@3b98af3:core/spring-boot-test/src/test/java/org/springframework/boot/test/context/filter/TestTypeExcludeFilterTests.java#78-83", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "3b98af30f5f91ee56260f9e2d640dfd590876ff9", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/test/java/org/springframework/boot/test/context/filter/TestTypeExcludeFilterTests.java", "language": "Java"}, "method": {"name": "matchesNestedConfigurationClassWithoutTestMethodsIfItHasExtendWith", "qualified_name": "test.java.org.springframework.boot.test.context.filter.TestTypeExcludeFilterTests#matchesNestedConfigurationClassWithoutTestMethodsIfItHasExtendWith", "start_line": 78, "end_line": 83, "signature": "matchesNestedConfigurationClassWithoutTestMethodsIfItHasExtendWith()", "original_code": "@Test\n\tvoid matchesNestedConfigurationClassWithoutTestMethodsIfItHasExtendWith() throws Exception {\n\t\tassertThat(this.filter.match(getMetadataReader(AbstractJupiterTestWithConfigAndExtendWith.Config.class),\n\t\t\t\tthis.metadataReaderFactory))\n\t\t\t.isTrue();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "matchesNestedConfigurationClassWithoutTestMethodsIfItHasExtendWith", "(", ")", "throws", "Exception", "{", "}", "@", "Test", ";", ".", "isTrue", "assertThat", "(", ")", "(", ")", ".", "match", "this", ".", "filter", "(", ",", ")", "getMetadataReader", "this", ".", "metadataReaderFactory", "(", ")", ".", "class", "AbstractJupiterTestWithConfigAndExtendWith", ".", "Config"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 57, "ast_depth": 14, "n_identifiers": 8, "vocab_size": 23, "n_whitespaces": 20, "n_words": 16, "nloc": 6, "token_counts": 37}}
{"dataset_split": "train", "id": "spring-boot@3b98af3:core/spring-boot-test/src/test/java/org/springframework/boot/test/context/filter/TestTypeExcludeFilterTests.java#85-90", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "3b98af30f5f91ee56260f9e2d640dfd590876ff9", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/test/java/org/springframework/boot/test/context/filter/TestTypeExcludeFilterTests.java", "language": "Java"}, "method": {"name": "matchesNestedConfigurationClassWithoutTestMethodsIfItHasTestable", "qualified_name": "test.java.org.springframework.boot.test.context.filter.TestTypeExcludeFilterTests#matchesNestedConfigurationClassWithoutTestMethodsIfItHasTestable", "start_line": 85, "end_line": 90, "signature": "matchesNestedConfigurationClassWithoutTestMethodsIfItHasTestable()", "original_code": "@Test\n\tvoid matchesNestedConfigurationClassWithoutTestMethodsIfItHasTestable() throws Exception {\n\t\tassertThat(this.filter.match(getMetadataReader(AbstractJupiterTestWithConfigAndTestable.Config.class),\n\t\t\t\tthis.metadataReaderFactory))\n\t\t\t.isTrue();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "matchesNestedConfigurationClassWithoutTestMethodsIfItHasTestable", "(", ")", "throws", "Exception", "{", "}", "@", "Test", ";", ".", "isTrue", "assertThat", "(", ")", "(", ")", ".", "match", "this", ".", "filter", "(", ",", ")", "getMetadataReader", "this", ".", "metadataReaderFactory", "(", ")", ".", "class", "AbstractJupiterTestWithConfigAndTestable", ".", "Config"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 57, "ast_depth": 14, "n_identifiers": 8, "vocab_size": 23, "n_whitespaces": 20, "n_words": 16, "nloc": 6, "token_counts": 37}}
{"dataset_split": "train", "id": "spring-boot@3b98af3:core/spring-boot-test/src/test/java/org/springframework/boot/test/context/filter/TestTypeExcludeFilterTests.java#92-95", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "3b98af30f5f91ee56260f9e2d640dfd590876ff9", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/test/java/org/springframework/boot/test/context/filter/TestTypeExcludeFilterTests.java", "language": "Java"}, "method": {"name": "matchesTestConfiguration", "qualified_name": "test.java.org.springframework.boot.test.context.filter.TestTypeExcludeFilterTests#matchesTestConfiguration", "start_line": 92, "end_line": 95, "signature": "matchesTestConfiguration()", "original_code": "@Test\n\tvoid matchesTestConfiguration() throws Exception {\n\t\tassertThat(this.filter.match(getMetadataReader(SampleTestConfig.class), this.metadataReaderFactory)).isTrue();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "matchesTestConfiguration", "(", ")", "throws", "Exception", "{", "}", "@", "Test", ";", ".", "isTrue", "assertThat", "(", ")", "(", ")", ".", "match", "this", ".", "filter", "(", ",", ")", "getMetadataReader", "this", ".", "metadataReaderFactory", "(", ")", "SampleTestConfig", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 54, "ast_depth": 13, "n_identifiers": 8, "vocab_size": 22, "n_whitespaces": 12, "n_words": 15, "nloc": 4, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@3b98af3:core/spring-boot-test/src/test/java/org/springframework/boot/test/context/filter/TestTypeExcludeFilterTests.java#97-100", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "3b98af30f5f91ee56260f9e2d640dfd590876ff9", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/test/java/org/springframework/boot/test/context/filter/TestTypeExcludeFilterTests.java", "language": "Java"}, "method": {"name": "doesNotMatchRegularConfiguration", "qualified_name": "test.java.org.springframework.boot.test.context.filter.TestTypeExcludeFilterTests#doesNotMatchRegularConfiguration", "start_line": 97, "end_line": 100, "signature": "doesNotMatchRegularConfiguration()", "original_code": "@Test\n\tvoid doesNotMatchRegularConfiguration() throws Exception {\n\t\tassertThat(this.filter.match(getMetadataReader(SampleConfig.class), this.metadataReaderFactory)).isFalse();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "doesNotMatchRegularConfiguration", "(", ")", "throws", "Exception", "{", "}", "@", "Test", ";", ".", "isFalse", "assertThat", "(", ")", "(", ")", ".", "match", "this", ".", "filter", "(", ",", ")", "getMetadataReader", "this", ".", "metadataReaderFactory", "(", ")", "SampleConfig", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 54, "ast_depth": 13, "n_identifiers": 8, "vocab_size": 22, "n_whitespaces": 12, "n_words": 15, "nloc": 4, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@3b98af3:core/spring-boot-test/src/test/java/org/springframework/boot/test/context/filter/TestTypeExcludeFilterTests.java#102-107", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "3b98af30f5f91ee56260f9e2d640dfd590876ff9", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/test/java/org/springframework/boot/test/context/filter/TestTypeExcludeFilterTests.java", "language": "Java"}, "method": {"name": "matchesNestedConfigurationClassWithoutTestNgAnnotation", "qualified_name": "test.java.org.springframework.boot.test.context.filter.TestTypeExcludeFilterTests#matchesNestedConfigurationClassWithoutTestNgAnnotation", "start_line": 102, "end_line": 107, "signature": "matchesNestedConfigurationClassWithoutTestNgAnnotation()", "original_code": "@Test\n\tvoid matchesNestedConfigurationClassWithoutTestNgAnnotation() throws Exception {\n\t\tassertThat(this.filter.match(getMetadataReader(AbstractTestNgTestWithConfig.Config.class),\n\t\t\t\tthis.metadataReaderFactory))\n\t\t\t.isTrue();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "matchesNestedConfigurationClassWithoutTestNgAnnotation", "(", ")", "throws", "Exception", "{", "}", "@", "Test", ";", ".", "isTrue", "assertThat", "(", ")", "(", ")", ".", "match", "this", ".", "filter", "(", ",", ")", "getMetadataReader", "this", ".", "metadataReaderFactory", "(", ")", ".", "class", "AbstractTestNgTestWithConfig", ".", "Config"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 57, "ast_depth": 14, "n_identifiers": 8, "vocab_size": 23, "n_whitespaces": 20, "n_words": 16, "nloc": 6, "token_counts": 37}}
{"dataset_split": "train", "id": "spring-boot@3b98af3:core/spring-boot-test/src/test/java/org/springframework/boot/test/context/filter/TestTypeExcludeFilterTests.java#109-111", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "3b98af30f5f91ee56260f9e2d640dfd590876ff9", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/test/java/org/springframework/boot/test/context/filter/TestTypeExcludeFilterTests.java", "language": "Java"}, "method": {"name": "getMetadataReader", "qualified_name": "test.java.org.springframework.boot.test.context.filter.TestTypeExcludeFilterTests#getMetadataReader", "start_line": 109, "end_line": 111, "signature": "getMetadataReader(Class<?> source)", "original_code": "private MetadataReader getMetadataReader(Class<?> source) throws IOException {\n\t\treturn this.metadataReaderFactory.getMetadataReader(source.getName());\n\t}", "doc_comment": ""}, "code_tokens": ["MetadataReader", "getMetadataReader", "private", "(", ")", "throws", "IOException", "{", "}", "source", "return", ";", "Class", ".", "getMetadataReader", "<", ">", "this", ".", "metadataReaderFactory", "(", ")", "?", "source", ".", "getName", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 44, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 20, "n_whitespaces": 12, "n_words": 13, "nloc": 3, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@3b98af3:core/spring-boot/src/main/java/org/springframework/boot/context/annotation/Configurations.java#99-101", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "3b98af30f5f91ee56260f9e2d640dfd590876ff9", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/annotation/Configurations.java", "language": "Java"}, "method": {"name": "getClasses", "qualified_name": "org.springframework.boot.context.annotation.Configurations#getClasses", "start_line": 99, "end_line": 101, "signature": "getClasses()", "original_code": "protected final Set<Class<?>> getClasses() {\n\t\treturn this.classes;\n\t}", "doc_comment": ""}, "code_tokens": ["getClasses", "protected", "final", "Set", "(", ")", "{", "}", "<", ">", "return", ";", "Class", "this", ".", "classes", "<", ">", "?"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 31, "ast_depth": 8, "n_identifiers": 2, "vocab_size": 17, "n_whitespaces": 10, "n_words": 8, "nloc": 3, "token_counts": 19}}
{"dataset_split": "train", "id": "spring-boot@3b98af3:core/spring-boot/src/main/java/org/springframework/boot/context/annotation/Configurations.java#109-116", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "3b98af30f5f91ee56260f9e2d640dfd590876ff9", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/annotation/Configurations.java", "language": "Java"}, "method": {"name": "merge", "qualified_name": "org.springframework.boot.context.annotation.Configurations#merge", "start_line": 109, "end_line": 116, "signature": "merge(Configurations other)", "original_code": "protected Configurations merge(Configurations other) {\n\t\tSet<Class<?>> mergedClasses = new LinkedHashSet<>(getClasses());\n\t\tmergedClasses.addAll(other.getClasses());\n\t\tif (this.sorter != null) {\n\t\t\tmergedClasses = new LinkedHashSet<>(this.sorter.apply(mergedClasses));\n\t\t}\n\t\treturn merge(mergedClasses);\n\t}", "doc_comment": "/**\n\t * Merge configurations from another source of the same type.\n\t * @param other the other {@link Configurations} (must be of the same type as this\n\t * instance)\n\t * @return a new configurations instance (must be of the same type as this instance)\n\t */"}, "code_tokens": ["Configurations", "merge", "protected", "(", ")", "{", "}", "Configurations", "other", ";", ";", "if", "return", ";", "Set", "mergedClasses", "=", "mergedClasses", ".", "addAll", "(", ")", "{", "}", "merge", "<", ">", "new", "(", ")", "!=", "null", ";", "(", "mergedClasses", ")", "Class", "LinkedHashSet", "(", ")", "other", ".", "getClasses", "this", ".", "sorter", "mergedClasses", "=", "<", ">", "<", ">", "getClasses", "(", ")", "new", "?", "(", ")", "LinkedHashSet", "(", ")", "<", ">", ".", "apply", "this", ".", "sorter", "(", "mergedClasses", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 113, "ast_depth": 12, "n_identifiers": 7, "vocab_size": 28, "n_whitespaces": 37, "n_words": 29, "nloc": 8, "token_counts": 72}}
{"dataset_split": "train", "id": "spring-boot@3b98af3:core/spring-boot/src/main/java/org/springframework/boot/context/annotation/Configurations.java#123-123", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "3b98af30f5f91ee56260f9e2d640dfd590876ff9", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/annotation/Configurations.java", "language": "Java"}, "method": {"name": "merge", "qualified_name": "org.springframework.boot.context.annotation.Configurations#merge", "start_line": 123, "end_line": 123, "signature": "merge(Set<Class<?>> mergedClasses)", "original_code": "protected abstract Configurations merge(Set<Class<?>> mergedClasses);", "doc_comment": "/**\n\t * Merge configurations.\n\t * @param mergedClasses the merged classes\n\t * @return a new configurations instance (must be of the same type as this instance)\n\t */"}, "code_tokens": ["Configurations", "merge", ";", "protected", "abstract", "(", ")", "mergedClasses", "Set", "<", ">", "Class", "<", ">", "?"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 25, "ast_depth": 10, "n_identifiers": 2, "vocab_size": 13, "n_whitespaces": 4, "n_words": 7, "nloc": 1, "token_counts": 15}}
{"dataset_split": "train", "id": "spring-boot@3b98af3:core/spring-boot/src/main/java/org/springframework/boot/context/annotation/Configurations.java#132-134", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "3b98af30f5f91ee56260f9e2d640dfd590876ff9", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/annotation/Configurations.java", "language": "Java"}, "method": {"name": "getBeanName", "qualified_name": "org.springframework.boot.context.annotation.Configurations#getBeanName", "start_line": 132, "end_line": 134, "signature": "getBeanName(Class<?> beanClass)", "original_code": "public @Nullable String getBeanName(Class<?> beanClass) {\n\t\treturn (this.beanNameGenerator != null) ? this.beanNameGenerator.apply(beanClass) : null;\n\t}", "doc_comment": "/**\n\t * Return the bean name that should be used for the given configuration class or\n\t * {@code null} to use the default name.\n\t * @param beanClass the bean class\n\t * @return the bean name\n\t * @since 3.4.0\n\t */"}, "code_tokens": ["String", "getBeanName", "public", "(", ")", "{", "}", "@", "Nullable", "beanClass", "return", ";", "Class", "?", ":", "null", "<", ">", "(", ")", ".", "apply", "?", "!=", "null", "this", ".", "beanNameGenerator", "(", "beanClass", ")", "this", ".", "beanNameGenerator"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 52, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 23, "n_whitespaces": 17, "n_words": 15, "nloc": 3, "token_counts": 34}}
{"dataset_split": "train", "id": "spring-boot@3b98af3:core/spring-boot/src/main/java/org/springframework/boot/context/annotation/Configurations.java#142-144", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "3b98af30f5f91ee56260f9e2d640dfd590876ff9", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/annotation/Configurations.java", "language": "Java"}, "method": {"name": "getClasses", "qualified_name": "org.springframework.boot.context.annotation.Configurations#getClasses", "start_line": 142, "end_line": 144, "signature": "getClasses(Configurations... configurations)", "original_code": "public static Class<?>[] getClasses(Configurations... configurations) {\n\t\treturn getClasses(Arrays.asList(configurations));\n\t}", "doc_comment": "/**\n\t * Return the classes from all the specified configurations in the order that they\n\t * would be registered.\n\t * @param configurations the source configuration\n\t * @return configuration classes in registration order\n\t */"}, "code_tokens": ["getClasses", "public", "static", "(", ")", "{", "}", "Class", "[", "]", "Configurations", "...", "return", ";", "<", ">", "configurations", "getClasses", "?", "(", ")", "Arrays", ".", "asList", "(", "configurations", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 44, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 21, "n_whitespaces": 11, "n_words": 11, "nloc": 3, "token_counts": 27}}
{"dataset_split": "train", "id": "spring-boot@3b98af3:core/spring-boot/src/main/java/org/springframework/boot/context/annotation/Configurations.java#152-158", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "3b98af30f5f91ee56260f9e2d640dfd590876ff9", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/annotation/Configurations.java", "language": "Java"}, "method": {"name": "getClasses", "qualified_name": "org.springframework.boot.context.annotation.Configurations#getClasses", "start_line": 152, "end_line": 158, "signature": "getClasses(Collection<Configurations> configurations)", "original_code": "public static Class<?>[] getClasses(Collection<Configurations> configurations) {\n\t\tList<Configurations> collated = collate(configurations);\n\t\tLinkedHashSet<Class<?>> classes = collated.stream()\n\t\t\t.flatMap(Configurations::streamClasses)\n\t\t\t.collect(Collectors.toCollection(LinkedHashSet::new));\n\t\treturn ClassUtils.toClassArray(classes);\n\t}", "doc_comment": "/**\n\t * Return the classes from all the specified configurations in the order that they\n\t * would be registered.\n\t * @param configurations the source configuration\n\t * @return configuration classes in registration order\n\t */"}, "code_tokens": ["getClasses", "public", "static", "(", ")", "{", "}", "Class", "[", "]", "configurations", ";", ";", "return", ";", "<", ">", "Collection", "List", "collated", "=", "LinkedHashSet", "classes", "=", "ClassUtils", ".", "toClassArray", "?", "<", "Configurations", ">", "<", "Configurations", ">", "collate", "<", ">", ".", "collect", "(", "classes", ")", "(", "configurations", ")", "Class", ".", "flatMap", "(", ")", "<", ">", "collated", ".", "stream", "(", ")", "Collectors", ".", "toCollection", "?", "(", ")", "Configurations", "::", "streamClasses", "(", ")", "LinkedHashSet", "::", "new"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 110, "ast_depth": 11, "n_identifiers": 15, "vocab_size": 35, "n_whitespaces": 31, "n_words": 29, "nloc": 7, "token_counts": 71}}
{"dataset_split": "train", "id": "spring-boot@3b98af3:core/spring-boot/src/main/java/org/springframework/boot/context/annotation/Configurations.java#166-177", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "3b98af30f5f91ee56260f9e2d640dfd590876ff9", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/annotation/Configurations.java", "language": "Java"}, "method": {"name": "collate", "qualified_name": "org.springframework.boot.context.annotation.Configurations#collate", "start_line": 166, "end_line": 177, "signature": "collate(Collection<Configurations> configurations)", "original_code": "public static List<Configurations> collate(Collection<Configurations> configurations) {\n\t\tLinkedList<Configurations> collated = new LinkedList<>();\n\t\tfor (Configurations configuration : sortConfigurations(configurations)) {\n\t\t\tif (collated.isEmpty() || collated.getLast().getClass() != configuration.getClass()) {\n\t\t\t\tcollated.add(configuration);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcollated.set(collated.size() - 1, collated.getLast().merge(configuration));\n\t\t\t}\n\t\t}\n\t\treturn collated;\n\t}", "doc_comment": "/**\n\t * Collate the given configuration by sorting and merging them.\n\t * @param configurations the source configuration\n\t * @return the collated configurations\n\t * @since 3.4.0\n\t */"}, "code_tokens": ["collate", "public", "static", "List", "(", ")", "{", "}", "<", "Configurations", ">", "configurations", ";", "for", "(", "Configurations", "configuration", ":", ")", "return", "collated", ";", "Collection", "LinkedList", "collated", "=", "sortConfigurations", "{", "}", "<", "Configurations", ">", "<", "Configurations", ">", "new", "(", "configurations", ")", "if", "else", "LinkedList", "(", ")", "(", ")", "{", "}", "{", "}", "<", ">", "||", ";", ";", "collated", ".", "isEmpty", "!=", "collated", ".", "add", "collated", ".", "set", "(", ")", ".", "getClass", "configuration", ".", "getClass", "(", "configuration", ")", "(", ",", ")", "collated", ".", "getLast", "(", ")", "(", ")", "-", "1", ".", "merge", "(", ")", "collated", ".", "size", "collated", ".", "getLast", "(", "configuration", ")", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 4, "n_ast_nodes": 154, "ast_depth": 14, "n_identifiers": 12, "vocab_size": 38, "n_whitespaces": 65, "n_words": 41, "nloc": 12, "token_counts": 104}}
{"dataset_split": "train", "id": "spring-boot@3b98af3:core/spring-boot/src/main/java/org/springframework/boot/context/annotation/Configurations.java#179-183", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "3b98af30f5f91ee56260f9e2d640dfd590876ff9", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/annotation/Configurations.java", "language": "Java"}, "method": {"name": "sortConfigurations", "qualified_name": "org.springframework.boot.context.annotation.Configurations#sortConfigurations", "start_line": 179, "end_line": 183, "signature": "sortConfigurations(Collection<Configurations> configurations)", "original_code": "private static List<Configurations> sortConfigurations(Collection<Configurations> configurations) {\n\t\tList<Configurations> sorted = new ArrayList<>(configurations);\n\t\tsorted.sort(COMPARATOR);\n\t\treturn sorted;\n\t}", "doc_comment": ""}, "code_tokens": ["sortConfigurations", "private", "static", "List", "(", ")", "{", "}", "<", "Configurations", ">", "configurations", ";", ";", "return", "sorted", ";", "Collection", "List", "sorted", "=", "sorted", ".", "sort", "<", "Configurations", ">", "<", "Configurations", ">", "new", "(", "COMPARATOR", ")", "ArrayList", "(", "configurations", ")", "<", ">"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 62, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 22, "n_whitespaces": 21, "n_words": 19, "nloc": 5, "token_counts": 40}}
{"dataset_split": "train", "id": "spring-boot@3b98af3:core/spring-boot/src/main/java/org/springframework/boot/context/annotation/Configurations.java#185-187", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "3b98af30f5f91ee56260f9e2d640dfd590876ff9", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/annotation/Configurations.java", "language": "Java"}, "method": {"name": "streamClasses", "qualified_name": "org.springframework.boot.context.annotation.Configurations#streamClasses", "start_line": 185, "end_line": 187, "signature": "streamClasses(Configurations configurations)", "original_code": "private static Stream<Class<?>> streamClasses(Configurations configurations) {\n\t\treturn configurations.getClasses().stream();\n\t}", "doc_comment": ""}, "code_tokens": ["streamClasses", "private", "static", "Stream", "(", ")", "{", "}", "<", ">", "Configurations", "configurations", "return", ";", "Class", ".", "stream", "<", ">", "configurations", ".", "getClasses", "(", ")", "?", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 43, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 19, "n_whitespaces": 11, "n_words": 11, "nloc": 3, "token_counts": 27}}
{"dataset_split": "train", "id": "spring-boot@3b98af3:loader/spring-boot-loader-classic/src/test/java/org/springframework/boot/loader/jar/JarUrlProtocolHandler.java#39-42", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "3b98af30f5f91ee56260f9e2d640dfd590876ff9", "license": "apache-2.0"}, "file": {"path": "loader/spring-boot-loader-classic/src/test/java/org/springframework/boot/loader/jar/JarUrlProtocolHandler.java", "language": "Java"}, "method": {"name": "beforeEach", "qualified_name": "test.java.org.springframework.boot.loader.jar.JarUrlProtocolHandler#beforeEach", "start_line": 39, "end_line": 42, "signature": "beforeEach(ExtensionContext context)", "original_code": "@Override\n\tpublic void beforeEach(ExtensionContext context) throws Exception {\n\t\tJarFile.registerUrlProtocolHandler();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "beforeEach", "public", "(", ")", "throws", "Exception", "{", "}", "@", "Override", "ExtensionContext", "context", ";", "JarFile", ".", "registerUrlProtocolHandler", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 30, "ast_depth": 7, "n_identifiers": 5, "vocab_size": 17, "n_whitespaces": 13, "n_words": 10, "nloc": 4, "token_counts": 19}}
{"dataset_split": "train", "id": "spring-boot@3b98af3:loader/spring-boot-loader-classic/src/test/java/org/springframework/boot/loader/jar/JarUrlProtocolHandler.java#44-55", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "3b98af30f5f91ee56260f9e2d640dfd590876ff9", "license": "apache-2.0"}, "file": {"path": "loader/spring-boot-loader-classic/src/test/java/org/springframework/boot/loader/jar/JarUrlProtocolHandler.java", "language": "Java"}, "method": {"name": "afterEach", "qualified_name": "test.java.org.springframework.boot.loader.jar.JarUrlProtocolHandler#afterEach", "start_line": 44, "end_line": 55, "signature": "afterEach(ExtensionContext context)", "original_code": "@Override\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void afterEach(ExtensionContext context) throws Exception {\n\t\tMap<File, JarFile> rootFileCache = ((SoftReference<Map<File, JarFile>>) ReflectionTestUtils\n\t\t\t.getField(Handler.class, \"rootFileCache\")).get();\n\t\tif (rootFileCache != null) {\n\t\t\tfor (JarFile rootJarFile : rootFileCache.values()) {\n\t\t\t\trootJarFile.close();\n\t\t\t}\n\t\t\trootFileCache.clear();\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "afterEach", "public", "(", ")", "throws", "Exception", "{", "}", "@", "Override", "@", "SuppressWarnings", "ExtensionContext", "context", ";", "if", "(", ")", "Map", "rootFileCache", "=", "(", ")", "{", "}", "\"", "unchecked", "\"", "<", "File", ",", "JarFile", ">", ".", "get", "rootFileCache", "!=", "null", "for", "(", "JarFile", "rootJarFile", ":", ")", ";", "(", ")", "(", ")", "rootFileCache", ".", "values", "{", "}", "rootFileCache", ".", "clear", "(", ")", "(", ")", ";", "(", ")", "SoftReference", "ReflectionTestUtils", ".", "getField", "rootJarFile", ".", "close", "<", ">", "(", ",", ")", "(", ")", "Map", "Handler", ".", "class", "\"", "rootFileCache", "\"", "<", "File", ",", "JarFile", ">"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 132, "ast_depth": 13, "n_identifiers": 12, "vocab_size": 41, "n_whitespaces": 58, "n_words": 36, "nloc": 12, "token_counts": 91}}
{"dataset_split": "train", "id": "spring-boot@14703cb:core/spring-boot-test/src/test/java/org/springframework/boot/test/context/filter/TestTypeExcludeFilterTests.java#42-46", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "14703cbafdd8849d30c41ff89b003e44f277566c", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/test/java/org/springframework/boot/test/context/filter/TestTypeExcludeFilterTests.java", "language": "Java"}, "method": {"name": "matchesJUnit4TestClass", "qualified_name": "test.java.org.springframework.boot.test.context.filter.TestTypeExcludeFilterTests#matchesJUnit4TestClass", "start_line": 42, "end_line": 46, "signature": "matchesJUnit4TestClass()", "original_code": "@Test\n\tvoid matchesJUnit4TestClass() throws Exception {\n\t\tassertThat(this.filter.match(getMetadataReader(TestTypeExcludeFilterTests.class), this.metadataReaderFactory))\n\t\t\t.isTrue();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "matchesJUnit4TestClass", "(", ")", "throws", "Exception", "{", "}", "@", "Test", ";", ".", "isTrue", "assertThat", "(", ")", "(", ")", ".", "match", "this", ".", "filter", "(", ",", ")", "getMetadataReader", "this", ".", "metadataReaderFactory", "(", ")", "TestTypeExcludeFilterTests", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 54, "ast_depth": 13, "n_identifiers": 8, "vocab_size": 22, "n_whitespaces": 16, "n_words": 15, "nloc": 5, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@14703cb:core/spring-boot-test/src/test/java/org/springframework/boot/test/context/filter/TestTypeExcludeFilterTests.java#48-51", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "14703cbafdd8849d30c41ff89b003e44f277566c", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/test/java/org/springframework/boot/test/context/filter/TestTypeExcludeFilterTests.java", "language": "Java"}, "method": {"name": "matchesJUnitJupiterTestClass", "qualified_name": "test.java.org.springframework.boot.test.context.filter.TestTypeExcludeFilterTests#matchesJUnitJupiterTestClass", "start_line": 48, "end_line": 51, "signature": "matchesJUnitJupiterTestClass()", "original_code": "@Test\n\tvoid matchesJUnitJupiterTestClass() throws Exception {\n\t\tassertThat(this.filter.match(getMetadataReader(JupiterTestExample.class), this.metadataReaderFactory)).isTrue();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "matchesJUnitJupiterTestClass", "(", ")", "throws", "Exception", "{", "}", "@", "Test", ";", ".", "isTrue", "assertThat", "(", ")", "(", ")", ".", "match", "this", ".", "filter", "(", ",", ")", "getMetadataReader", "this", ".", "metadataReaderFactory", "(", ")", "JupiterTestExample", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 54, "ast_depth": 13, "n_identifiers": 8, "vocab_size": 22, "n_whitespaces": 12, "n_words": 15, "nloc": 4, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@14703cb:core/spring-boot-test/src/test/java/org/springframework/boot/test/context/filter/TestTypeExcludeFilterTests.java#53-57", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "14703cbafdd8849d30c41ff89b003e44f277566c", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/test/java/org/springframework/boot/test/context/filter/TestTypeExcludeFilterTests.java", "language": "Java"}, "method": {"name": "matchesJUnitJupiterRepeatedTestClass", "qualified_name": "test.java.org.springframework.boot.test.context.filter.TestTypeExcludeFilterTests#matchesJUnitJupiterRepeatedTestClass", "start_line": 53, "end_line": 57, "signature": "matchesJUnitJupiterRepeatedTestClass()", "original_code": "@Test\n\tvoid matchesJUnitJupiterRepeatedTestClass() throws Exception {\n\t\tassertThat(this.filter.match(getMetadataReader(JupiterRepeatedTestExample.class), this.metadataReaderFactory))\n\t\t\t.isTrue();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "matchesJUnitJupiterRepeatedTestClass", "(", ")", "throws", "Exception", "{", "}", "@", "Test", ";", ".", "isTrue", "assertThat", "(", ")", "(", ")", ".", "match", "this", ".", "filter", "(", ",", ")", "getMetadataReader", "this", ".", "metadataReaderFactory", "(", ")", "JupiterRepeatedTestExample", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 54, "ast_depth": 13, "n_identifiers": 8, "vocab_size": 22, "n_whitespaces": 16, "n_words": 15, "nloc": 5, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@14703cb:core/spring-boot-test/src/test/java/org/springframework/boot/test/context/filter/TestTypeExcludeFilterTests.java#59-63", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "14703cbafdd8849d30c41ff89b003e44f277566c", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/test/java/org/springframework/boot/test/context/filter/TestTypeExcludeFilterTests.java", "language": "Java"}, "method": {"name": "matchesJUnitJupiterTestFactoryClass", "qualified_name": "test.java.org.springframework.boot.test.context.filter.TestTypeExcludeFilterTests#matchesJUnitJupiterTestFactoryClass", "start_line": 59, "end_line": 63, "signature": "matchesJUnitJupiterTestFactoryClass()", "original_code": "@Test\n\tvoid matchesJUnitJupiterTestFactoryClass() throws Exception {\n\t\tassertThat(this.filter.match(getMetadataReader(JupiterTestFactoryExample.class), this.metadataReaderFactory))\n\t\t\t.isTrue();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "matchesJUnitJupiterTestFactoryClass", "(", ")", "throws", "Exception", "{", "}", "@", "Test", ";", ".", "isTrue", "assertThat", "(", ")", "(", ")", ".", "match", "this", ".", "filter", "(", ",", ")", "getMetadataReader", "this", ".", "metadataReaderFactory", "(", ")", "JupiterTestFactoryExample", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 54, "ast_depth": 13, "n_identifiers": 8, "vocab_size": 22, "n_whitespaces": 16, "n_words": 15, "nloc": 5, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@14703cb:core/spring-boot-test/src/test/java/org/springframework/boot/test/context/filter/TestTypeExcludeFilterTests.java#65-68", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "14703cbafdd8849d30c41ff89b003e44f277566c", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/test/java/org/springframework/boot/test/context/filter/TestTypeExcludeFilterTests.java", "language": "Java"}, "method": {"name": "matchesNestedConfiguration", "qualified_name": "test.java.org.springframework.boot.test.context.filter.TestTypeExcludeFilterTests#matchesNestedConfiguration", "start_line": 65, "end_line": 68, "signature": "matchesNestedConfiguration()", "original_code": "@Test\n\tvoid matchesNestedConfiguration() throws Exception {\n\t\tassertThat(this.filter.match(getMetadataReader(NestedConfig.class), this.metadataReaderFactory)).isTrue();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "matchesNestedConfiguration", "(", ")", "throws", "Exception", "{", "}", "@", "Test", ";", ".", "isTrue", "assertThat", "(", ")", "(", ")", ".", "match", "this", ".", "filter", "(", ",", ")", "getMetadataReader", "this", ".", "metadataReaderFactory", "(", ")", "NestedConfig", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 54, "ast_depth": 13, "n_identifiers": 8, "vocab_size": 22, "n_whitespaces": 12, "n_words": 15, "nloc": 4, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@14703cb:core/spring-boot-test/src/test/java/org/springframework/boot/test/context/filter/TestTypeExcludeFilterTests.java#70-75", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "14703cbafdd8849d30c41ff89b003e44f277566c", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/test/java/org/springframework/boot/test/context/filter/TestTypeExcludeFilterTests.java", "language": "Java"}, "method": {"name": "matchesNestedConfigurationClassWithoutTestMethodsIfItHasRunWith", "qualified_name": "test.java.org.springframework.boot.test.context.filter.TestTypeExcludeFilterTests#matchesNestedConfigurationClassWithoutTestMethodsIfItHasRunWith", "start_line": 70, "end_line": 75, "signature": "matchesNestedConfigurationClassWithoutTestMethodsIfItHasRunWith()", "original_code": "@Test\n\tvoid matchesNestedConfigurationClassWithoutTestMethodsIfItHasRunWith() throws Exception {\n\t\tassertThat(this.filter.match(getMetadataReader(AbstractTestWithConfigAndRunWith.Config.class),\n\t\t\t\tthis.metadataReaderFactory))\n\t\t\t.isTrue();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "matchesNestedConfigurationClassWithoutTestMethodsIfItHasRunWith", "(", ")", "throws", "Exception", "{", "}", "@", "Test", ";", ".", "isTrue", "assertThat", "(", ")", "(", ")", ".", "match", "this", ".", "filter", "(", ",", ")", "getMetadataReader", "this", ".", "metadataReaderFactory", "(", ")", ".", "class", "AbstractTestWithConfigAndRunWith", ".", "Config"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 57, "ast_depth": 14, "n_identifiers": 8, "vocab_size": 23, "n_whitespaces": 20, "n_words": 16, "nloc": 6, "token_counts": 37}}
{"dataset_split": "train", "id": "spring-boot@14703cb:core/spring-boot-test/src/test/java/org/springframework/boot/test/context/filter/TestTypeExcludeFilterTests.java#77-82", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "14703cbafdd8849d30c41ff89b003e44f277566c", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/test/java/org/springframework/boot/test/context/filter/TestTypeExcludeFilterTests.java", "language": "Java"}, "method": {"name": "matchesNestedConfigurationClassWithoutTestMethodsIfItHasExtendWith", "qualified_name": "test.java.org.springframework.boot.test.context.filter.TestTypeExcludeFilterTests#matchesNestedConfigurationClassWithoutTestMethodsIfItHasExtendWith", "start_line": 77, "end_line": 82, "signature": "matchesNestedConfigurationClassWithoutTestMethodsIfItHasExtendWith()", "original_code": "@Test\n\tvoid matchesNestedConfigurationClassWithoutTestMethodsIfItHasExtendWith() throws Exception {\n\t\tassertThat(this.filter.match(getMetadataReader(AbstractJupiterTestWithConfigAndExtendWith.Config.class),\n\t\t\t\tthis.metadataReaderFactory))\n\t\t\t.isTrue();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "matchesNestedConfigurationClassWithoutTestMethodsIfItHasExtendWith", "(", ")", "throws", "Exception", "{", "}", "@", "Test", ";", ".", "isTrue", "assertThat", "(", ")", "(", ")", ".", "match", "this", ".", "filter", "(", ",", ")", "getMetadataReader", "this", ".", "metadataReaderFactory", "(", ")", ".", "class", "AbstractJupiterTestWithConfigAndExtendWith", ".", "Config"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 57, "ast_depth": 14, "n_identifiers": 8, "vocab_size": 23, "n_whitespaces": 20, "n_words": 16, "nloc": 6, "token_counts": 37}}
{"dataset_split": "train", "id": "spring-boot@14703cb:core/spring-boot-test/src/test/java/org/springframework/boot/test/context/filter/TestTypeExcludeFilterTests.java#84-89", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "14703cbafdd8849d30c41ff89b003e44f277566c", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/test/java/org/springframework/boot/test/context/filter/TestTypeExcludeFilterTests.java", "language": "Java"}, "method": {"name": "matchesNestedConfigurationClassWithoutTestMethodsIfItHasTestable", "qualified_name": "test.java.org.springframework.boot.test.context.filter.TestTypeExcludeFilterTests#matchesNestedConfigurationClassWithoutTestMethodsIfItHasTestable", "start_line": 84, "end_line": 89, "signature": "matchesNestedConfigurationClassWithoutTestMethodsIfItHasTestable()", "original_code": "@Test\n\tvoid matchesNestedConfigurationClassWithoutTestMethodsIfItHasTestable() throws Exception {\n\t\tassertThat(this.filter.match(getMetadataReader(AbstractJupiterTestWithConfigAndTestable.Config.class),\n\t\t\t\tthis.metadataReaderFactory))\n\t\t\t.isTrue();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "matchesNestedConfigurationClassWithoutTestMethodsIfItHasTestable", "(", ")", "throws", "Exception", "{", "}", "@", "Test", ";", ".", "isTrue", "assertThat", "(", ")", "(", ")", ".", "match", "this", ".", "filter", "(", ",", ")", "getMetadataReader", "this", ".", "metadataReaderFactory", "(", ")", ".", "class", "AbstractJupiterTestWithConfigAndTestable", ".", "Config"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 57, "ast_depth": 14, "n_identifiers": 8, "vocab_size": 23, "n_whitespaces": 20, "n_words": 16, "nloc": 6, "token_counts": 37}}
{"dataset_split": "train", "id": "spring-boot@14703cb:core/spring-boot-test/src/test/java/org/springframework/boot/test/context/filter/TestTypeExcludeFilterTests.java#91-94", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "14703cbafdd8849d30c41ff89b003e44f277566c", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/test/java/org/springframework/boot/test/context/filter/TestTypeExcludeFilterTests.java", "language": "Java"}, "method": {"name": "matchesTestConfiguration", "qualified_name": "test.java.org.springframework.boot.test.context.filter.TestTypeExcludeFilterTests#matchesTestConfiguration", "start_line": 91, "end_line": 94, "signature": "matchesTestConfiguration()", "original_code": "@Test\n\tvoid matchesTestConfiguration() throws Exception {\n\t\tassertThat(this.filter.match(getMetadataReader(SampleTestConfig.class), this.metadataReaderFactory)).isTrue();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "matchesTestConfiguration", "(", ")", "throws", "Exception", "{", "}", "@", "Test", ";", ".", "isTrue", "assertThat", "(", ")", "(", ")", ".", "match", "this", ".", "filter", "(", ",", ")", "getMetadataReader", "this", ".", "metadataReaderFactory", "(", ")", "SampleTestConfig", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 54, "ast_depth": 13, "n_identifiers": 8, "vocab_size": 22, "n_whitespaces": 12, "n_words": 15, "nloc": 4, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@14703cb:core/spring-boot-test/src/test/java/org/springframework/boot/test/context/filter/TestTypeExcludeFilterTests.java#96-99", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "14703cbafdd8849d30c41ff89b003e44f277566c", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/test/java/org/springframework/boot/test/context/filter/TestTypeExcludeFilterTests.java", "language": "Java"}, "method": {"name": "doesNotMatchRegularConfiguration", "qualified_name": "test.java.org.springframework.boot.test.context.filter.TestTypeExcludeFilterTests#doesNotMatchRegularConfiguration", "start_line": 96, "end_line": 99, "signature": "doesNotMatchRegularConfiguration()", "original_code": "@Test\n\tvoid doesNotMatchRegularConfiguration() throws Exception {\n\t\tassertThat(this.filter.match(getMetadataReader(SampleConfig.class), this.metadataReaderFactory)).isFalse();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "doesNotMatchRegularConfiguration", "(", ")", "throws", "Exception", "{", "}", "@", "Test", ";", ".", "isFalse", "assertThat", "(", ")", "(", ")", ".", "match", "this", ".", "filter", "(", ",", ")", "getMetadataReader", "this", ".", "metadataReaderFactory", "(", ")", "SampleConfig", ".", "class"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 54, "ast_depth": 13, "n_identifiers": 8, "vocab_size": 22, "n_whitespaces": 12, "n_words": 15, "nloc": 4, "token_counts": 35}}
{"dataset_split": "train", "id": "spring-boot@14703cb:core/spring-boot-test/src/test/java/org/springframework/boot/test/context/filter/TestTypeExcludeFilterTests.java#101-106", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "14703cbafdd8849d30c41ff89b003e44f277566c", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/test/java/org/springframework/boot/test/context/filter/TestTypeExcludeFilterTests.java", "language": "Java"}, "method": {"name": "matchesNestedConfigurationClassWithoutTestNgAnnotation", "qualified_name": "test.java.org.springframework.boot.test.context.filter.TestTypeExcludeFilterTests#matchesNestedConfigurationClassWithoutTestNgAnnotation", "start_line": 101, "end_line": 106, "signature": "matchesNestedConfigurationClassWithoutTestNgAnnotation()", "original_code": "@Test\n\tvoid matchesNestedConfigurationClassWithoutTestNgAnnotation() throws Exception {\n\t\tassertThat(this.filter.match(getMetadataReader(AbstractTestNgTestWithConfig.Config.class),\n\t\t\t\tthis.metadataReaderFactory))\n\t\t\t.isTrue();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "matchesNestedConfigurationClassWithoutTestNgAnnotation", "(", ")", "throws", "Exception", "{", "}", "@", "Test", ";", ".", "isTrue", "assertThat", "(", ")", "(", ")", ".", "match", "this", ".", "filter", "(", ",", ")", "getMetadataReader", "this", ".", "metadataReaderFactory", "(", ")", ".", "class", "AbstractTestNgTestWithConfig", ".", "Config"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 57, "ast_depth": 14, "n_identifiers": 8, "vocab_size": 23, "n_whitespaces": 20, "n_words": 16, "nloc": 6, "token_counts": 37}}
{"dataset_split": "train", "id": "spring-boot@14703cb:core/spring-boot-test/src/test/java/org/springframework/boot/test/context/filter/TestTypeExcludeFilterTests.java#108-110", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "14703cbafdd8849d30c41ff89b003e44f277566c", "license": "apache-2.0"}, "file": {"path": "core/spring-boot-test/src/test/java/org/springframework/boot/test/context/filter/TestTypeExcludeFilterTests.java", "language": "Java"}, "method": {"name": "getMetadataReader", "qualified_name": "test.java.org.springframework.boot.test.context.filter.TestTypeExcludeFilterTests#getMetadataReader", "start_line": 108, "end_line": 110, "signature": "getMetadataReader(Class<?> source)", "original_code": "private MetadataReader getMetadataReader(Class<?> source) throws IOException {\n\t\treturn this.metadataReaderFactory.getMetadataReader(source.getName());\n\t}", "doc_comment": ""}, "code_tokens": ["MetadataReader", "getMetadataReader", "private", "(", ")", "throws", "IOException", "{", "}", "source", "return", ";", "Class", ".", "getMetadataReader", "<", ">", "this", ".", "metadataReaderFactory", "(", ")", "?", "source", ".", "getName", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 44, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 20, "n_whitespaces": 12, "n_words": 13, "nloc": 3, "token_counts": 28}}
{"dataset_split": "train", "id": "spring-boot@14703cb:core/spring-boot/src/main/java/org/springframework/boot/context/annotation/Configurations.java#99-101", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "14703cbafdd8849d30c41ff89b003e44f277566c", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/annotation/Configurations.java", "language": "Java"}, "method": {"name": "getClasses", "qualified_name": "org.springframework.boot.context.annotation.Configurations#getClasses", "start_line": 99, "end_line": 101, "signature": "getClasses()", "original_code": "protected final Set<Class<?>> getClasses() {\n\t\treturn this.classes;\n\t}", "doc_comment": ""}, "code_tokens": ["getClasses", "protected", "final", "Set", "(", ")", "{", "}", "<", ">", "return", ";", "Class", "this", ".", "classes", "<", ">", "?"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 31, "ast_depth": 8, "n_identifiers": 2, "vocab_size": 17, "n_whitespaces": 10, "n_words": 8, "nloc": 3, "token_counts": 19}}
{"dataset_split": "train", "id": "spring-boot@14703cb:core/spring-boot/src/main/java/org/springframework/boot/context/annotation/Configurations.java#109-116", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "14703cbafdd8849d30c41ff89b003e44f277566c", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/annotation/Configurations.java", "language": "Java"}, "method": {"name": "merge", "qualified_name": "org.springframework.boot.context.annotation.Configurations#merge", "start_line": 109, "end_line": 116, "signature": "merge(Configurations other)", "original_code": "protected Configurations merge(Configurations other) {\n\t\tSet<Class<?>> mergedClasses = new LinkedHashSet<>(getClasses());\n\t\tmergedClasses.addAll(other.getClasses());\n\t\tif (this.sorter != null) {\n\t\t\tmergedClasses = new LinkedHashSet<>(this.sorter.apply(mergedClasses));\n\t\t}\n\t\treturn merge(mergedClasses);\n\t}", "doc_comment": "/**\n\t * Merge configurations from another source of the same type.\n\t * @param other the other {@link Configurations} (must be of the same type as this\n\t * instance)\n\t * @return a new configurations instance (must be of the same type as this instance)\n\t */"}, "code_tokens": ["Configurations", "merge", "protected", "(", ")", "{", "}", "Configurations", "other", ";", ";", "if", "return", ";", "Set", "mergedClasses", "=", "mergedClasses", ".", "addAll", "(", ")", "{", "}", "merge", "<", ">", "new", "(", ")", "!=", "null", ";", "(", "mergedClasses", ")", "Class", "LinkedHashSet", "(", ")", "other", ".", "getClasses", "this", ".", "sorter", "mergedClasses", "=", "<", ">", "<", ">", "getClasses", "(", ")", "new", "?", "(", ")", "LinkedHashSet", "(", ")", "<", ">", ".", "apply", "this", ".", "sorter", "(", "mergedClasses", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 113, "ast_depth": 12, "n_identifiers": 7, "vocab_size": 28, "n_whitespaces": 37, "n_words": 29, "nloc": 8, "token_counts": 72}}
{"dataset_split": "train", "id": "spring-boot@14703cb:core/spring-boot/src/main/java/org/springframework/boot/context/annotation/Configurations.java#123-123", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "14703cbafdd8849d30c41ff89b003e44f277566c", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/annotation/Configurations.java", "language": "Java"}, "method": {"name": "merge", "qualified_name": "org.springframework.boot.context.annotation.Configurations#merge", "start_line": 123, "end_line": 123, "signature": "merge(Set<Class<?>> mergedClasses)", "original_code": "protected abstract Configurations merge(Set<Class<?>> mergedClasses);", "doc_comment": "/**\n\t * Merge configurations.\n\t * @param mergedClasses the merged classes\n\t * @return a new configurations instance (must be of the same type as this instance)\n\t */"}, "code_tokens": ["Configurations", "merge", ";", "protected", "abstract", "(", ")", "mergedClasses", "Set", "<", ">", "Class", "<", ">", "?"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 25, "ast_depth": 10, "n_identifiers": 2, "vocab_size": 13, "n_whitespaces": 4, "n_words": 7, "nloc": 1, "token_counts": 15}}
{"dataset_split": "train", "id": "spring-boot@14703cb:core/spring-boot/src/main/java/org/springframework/boot/context/annotation/Configurations.java#132-134", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "14703cbafdd8849d30c41ff89b003e44f277566c", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/annotation/Configurations.java", "language": "Java"}, "method": {"name": "getBeanName", "qualified_name": "org.springframework.boot.context.annotation.Configurations#getBeanName", "start_line": 132, "end_line": 134, "signature": "getBeanName(Class<?> beanClass)", "original_code": "public @Nullable String getBeanName(Class<?> beanClass) {\n\t\treturn (this.beanNameGenerator != null) ? this.beanNameGenerator.apply(beanClass) : null;\n\t}", "doc_comment": "/**\n\t * Return the bean name that should be used for the given configuration class or\n\t * {@code null} to use the default name.\n\t * @param beanClass the bean class\n\t * @return the bean name\n\t * @since 3.4.0\n\t */"}, "code_tokens": ["String", "getBeanName", "public", "(", ")", "{", "}", "@", "Nullable", "beanClass", "return", ";", "Class", "?", ":", "null", "<", ">", "(", ")", ".", "apply", "?", "!=", "null", "this", ".", "beanNameGenerator", "(", "beanClass", ")", "this", ".", "beanNameGenerator"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 52, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 23, "n_whitespaces": 17, "n_words": 15, "nloc": 3, "token_counts": 34}}
{"dataset_split": "train", "id": "spring-boot@14703cb:core/spring-boot/src/main/java/org/springframework/boot/context/annotation/Configurations.java#142-144", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "14703cbafdd8849d30c41ff89b003e44f277566c", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/annotation/Configurations.java", "language": "Java"}, "method": {"name": "getClasses", "qualified_name": "org.springframework.boot.context.annotation.Configurations#getClasses", "start_line": 142, "end_line": 144, "signature": "getClasses(Configurations... configurations)", "original_code": "public static Class<?>[] getClasses(Configurations... configurations) {\n\t\treturn getClasses(Arrays.asList(configurations));\n\t}", "doc_comment": "/**\n\t * Return the classes from all the specified configurations in the order that they\n\t * would be registered.\n\t * @param configurations the source configuration\n\t * @return configuration classes in registration order\n\t */"}, "code_tokens": ["getClasses", "public", "static", "(", ")", "{", "}", "Class", "[", "]", "Configurations", "...", "return", ";", "<", ">", "configurations", "getClasses", "?", "(", ")", "Arrays", ".", "asList", "(", "configurations", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 44, "ast_depth": 9, "n_identifiers": 4, "vocab_size": 21, "n_whitespaces": 11, "n_words": 11, "nloc": 3, "token_counts": 27}}
{"dataset_split": "train", "id": "spring-boot@14703cb:core/spring-boot/src/main/java/org/springframework/boot/context/annotation/Configurations.java#152-158", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "14703cbafdd8849d30c41ff89b003e44f277566c", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/annotation/Configurations.java", "language": "Java"}, "method": {"name": "getClasses", "qualified_name": "org.springframework.boot.context.annotation.Configurations#getClasses", "start_line": 152, "end_line": 158, "signature": "getClasses(Collection<Configurations> configurations)", "original_code": "public static Class<?>[] getClasses(Collection<Configurations> configurations) {\n\t\tList<Configurations> collated = collate(configurations);\n\t\tLinkedHashSet<Class<?>> classes = collated.stream()\n\t\t\t.flatMap(Configurations::streamClasses)\n\t\t\t.collect(Collectors.toCollection(LinkedHashSet::new));\n\t\treturn ClassUtils.toClassArray(classes);\n\t}", "doc_comment": "/**\n\t * Return the classes from all the specified configurations in the order that they\n\t * would be registered.\n\t * @param configurations the source configuration\n\t * @return configuration classes in registration order\n\t */"}, "code_tokens": ["getClasses", "public", "static", "(", ")", "{", "}", "Class", "[", "]", "configurations", ";", ";", "return", ";", "<", ">", "Collection", "List", "collated", "=", "LinkedHashSet", "classes", "=", "ClassUtils", ".", "toClassArray", "?", "<", "Configurations", ">", "<", "Configurations", ">", "collate", "<", ">", ".", "collect", "(", "classes", ")", "(", "configurations", ")", "Class", ".", "flatMap", "(", ")", "<", ">", "collated", ".", "stream", "(", ")", "Collectors", ".", "toCollection", "?", "(", ")", "Configurations", "::", "streamClasses", "(", ")", "LinkedHashSet", "::", "new"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 110, "ast_depth": 11, "n_identifiers": 15, "vocab_size": 35, "n_whitespaces": 31, "n_words": 29, "nloc": 7, "token_counts": 71}}
{"dataset_split": "train", "id": "spring-boot@14703cb:core/spring-boot/src/main/java/org/springframework/boot/context/annotation/Configurations.java#166-177", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "14703cbafdd8849d30c41ff89b003e44f277566c", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/annotation/Configurations.java", "language": "Java"}, "method": {"name": "collate", "qualified_name": "org.springframework.boot.context.annotation.Configurations#collate", "start_line": 166, "end_line": 177, "signature": "collate(Collection<Configurations> configurations)", "original_code": "public static List<Configurations> collate(Collection<Configurations> configurations) {\n\t\tLinkedList<Configurations> collated = new LinkedList<>();\n\t\tfor (Configurations configuration : sortConfigurations(configurations)) {\n\t\t\tif (collated.isEmpty() || collated.getLast().getClass() != configuration.getClass()) {\n\t\t\t\tcollated.add(configuration);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcollated.set(collated.size() - 1, collated.getLast().merge(configuration));\n\t\t\t}\n\t\t}\n\t\treturn collated;\n\t}", "doc_comment": "/**\n\t * Collate the given configuration by sorting and merging them.\n\t * @param configurations the source configuration\n\t * @return the collated configurations\n\t * @since 3.4.0\n\t */"}, "code_tokens": ["collate", "public", "static", "List", "(", ")", "{", "}", "<", "Configurations", ">", "configurations", ";", "for", "(", "Configurations", "configuration", ":", ")", "return", "collated", ";", "Collection", "LinkedList", "collated", "=", "sortConfigurations", "{", "}", "<", "Configurations", ">", "<", "Configurations", ">", "new", "(", "configurations", ")", "if", "else", "LinkedList", "(", ")", "(", ")", "{", "}", "{", "}", "<", ">", "||", ";", ";", "collated", ".", "isEmpty", "!=", "collated", ".", "add", "collated", ".", "set", "(", ")", ".", "getClass", "configuration", ".", "getClass", "(", "configuration", ")", "(", ",", ")", "collated", ".", "getLast", "(", ")", "(", ")", "-", "1", ".", "merge", "(", ")", "collated", ".", "size", "collated", ".", "getLast", "(", "configuration", ")", "(", ")", "(", ")"], "metrics": {"cyclomatic_complexity": 4, "n_ast_nodes": 154, "ast_depth": 14, "n_identifiers": 12, "vocab_size": 38, "n_whitespaces": 65, "n_words": 41, "nloc": 12, "token_counts": 104}}
{"dataset_split": "train", "id": "spring-boot@14703cb:core/spring-boot/src/main/java/org/springframework/boot/context/annotation/Configurations.java#179-183", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "14703cbafdd8849d30c41ff89b003e44f277566c", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/annotation/Configurations.java", "language": "Java"}, "method": {"name": "sortConfigurations", "qualified_name": "org.springframework.boot.context.annotation.Configurations#sortConfigurations", "start_line": 179, "end_line": 183, "signature": "sortConfigurations(Collection<Configurations> configurations)", "original_code": "private static List<Configurations> sortConfigurations(Collection<Configurations> configurations) {\n\t\tList<Configurations> sorted = new ArrayList<>(configurations);\n\t\tsorted.sort(COMPARATOR);\n\t\treturn sorted;\n\t}", "doc_comment": ""}, "code_tokens": ["sortConfigurations", "private", "static", "List", "(", ")", "{", "}", "<", "Configurations", ">", "configurations", ";", ";", "return", "sorted", ";", "Collection", "List", "sorted", "=", "sorted", ".", "sort", "<", "Configurations", ">", "<", "Configurations", ">", "new", "(", "COMPARATOR", ")", "ArrayList", "(", "configurations", ")", "<", ">"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 62, "ast_depth": 9, "n_identifiers": 5, "vocab_size": 22, "n_whitespaces": 21, "n_words": 19, "nloc": 5, "token_counts": 40}}
{"dataset_split": "train", "id": "spring-boot@14703cb:core/spring-boot/src/main/java/org/springframework/boot/context/annotation/Configurations.java#185-187", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "14703cbafdd8849d30c41ff89b003e44f277566c", "license": "apache-2.0"}, "file": {"path": "core/spring-boot/src/main/java/org/springframework/boot/context/annotation/Configurations.java", "language": "Java"}, "method": {"name": "streamClasses", "qualified_name": "org.springframework.boot.context.annotation.Configurations#streamClasses", "start_line": 185, "end_line": 187, "signature": "streamClasses(Configurations configurations)", "original_code": "private static Stream<Class<?>> streamClasses(Configurations configurations) {\n\t\treturn configurations.getClasses().stream();\n\t}", "doc_comment": ""}, "code_tokens": ["streamClasses", "private", "static", "Stream", "(", ")", "{", "}", "<", ">", "Configurations", "configurations", "return", ";", "Class", ".", "stream", "<", ">", "configurations", ".", "getClasses", "(", ")", "?", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 43, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 19, "n_whitespaces": 11, "n_words": 11, "nloc": 3, "token_counts": 27}}
{"dataset_split": "train", "id": "spring-boot@14703cb:loader/spring-boot-loader-classic/src/test/java/org/springframework/boot/loader/jar/JarUrlProtocolHandler.java#39-42", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "14703cbafdd8849d30c41ff89b003e44f277566c", "license": "apache-2.0"}, "file": {"path": "loader/spring-boot-loader-classic/src/test/java/org/springframework/boot/loader/jar/JarUrlProtocolHandler.java", "language": "Java"}, "method": {"name": "beforeEach", "qualified_name": "test.java.org.springframework.boot.loader.jar.JarUrlProtocolHandler#beforeEach", "start_line": 39, "end_line": 42, "signature": "beforeEach(ExtensionContext context)", "original_code": "@Override\n\tpublic void beforeEach(ExtensionContext context) throws Exception {\n\t\tJarFile.registerUrlProtocolHandler();\n\t}", "doc_comment": ""}, "code_tokens": ["void", "beforeEach", "public", "(", ")", "throws", "Exception", "{", "}", "@", "Override", "ExtensionContext", "context", ";", "JarFile", ".", "registerUrlProtocolHandler", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 30, "ast_depth": 7, "n_identifiers": 5, "vocab_size": 17, "n_whitespaces": 13, "n_words": 10, "nloc": 4, "token_counts": 19}}
{"dataset_split": "train", "id": "spring-boot@14703cb:loader/spring-boot-loader-classic/src/test/java/org/springframework/boot/loader/jar/JarUrlProtocolHandler.java#44-55", "repo": {"name": "spring-boot", "url": "https://github.com/spring-projects/spring-boot", "commit_sha": "14703cbafdd8849d30c41ff89b003e44f277566c", "license": "apache-2.0"}, "file": {"path": "loader/spring-boot-loader-classic/src/test/java/org/springframework/boot/loader/jar/JarUrlProtocolHandler.java", "language": "Java"}, "method": {"name": "afterEach", "qualified_name": "test.java.org.springframework.boot.loader.jar.JarUrlProtocolHandler#afterEach", "start_line": 44, "end_line": 55, "signature": "afterEach(ExtensionContext context)", "original_code": "@Override\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void afterEach(ExtensionContext context) throws Exception {\n\t\tMap<File, JarFile> rootFileCache = ((SoftReference<Map<File, JarFile>>) ReflectionTestUtils\n\t\t\t.getField(Handler.class, \"rootFileCache\")).get();\n\t\tif (rootFileCache != null) {\n\t\t\tfor (JarFile rootJarFile : rootFileCache.values()) {\n\t\t\t\trootJarFile.close();\n\t\t\t}\n\t\t\trootFileCache.clear();\n\t\t}\n\t}", "doc_comment": ""}, "code_tokens": ["void", "afterEach", "public", "(", ")", "throws", "Exception", "{", "}", "@", "Override", "@", "SuppressWarnings", "ExtensionContext", "context", ";", "if", "(", ")", "Map", "rootFileCache", "=", "(", ")", "{", "}", "\"", "unchecked", "\"", "<", "File", ",", "JarFile", ">", ".", "get", "rootFileCache", "!=", "null", "for", "(", "JarFile", "rootJarFile", ":", ")", ";", "(", ")", "(", ")", "rootFileCache", ".", "values", "{", "}", "rootFileCache", ".", "clear", "(", ")", "(", ")", ";", "(", ")", "SoftReference", "ReflectionTestUtils", ".", "getField", "rootJarFile", ".", "close", "<", ">", "(", ",", ")", "(", ")", "Map", "Handler", ".", "class", "\"", "rootFileCache", "\"", "<", "File", ",", "JarFile", ">"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 132, "ast_depth": 13, "n_identifiers": 12, "vocab_size": 41, "n_whitespaces": 58, "n_words": 36, "nloc": 12, "token_counts": 91}}
