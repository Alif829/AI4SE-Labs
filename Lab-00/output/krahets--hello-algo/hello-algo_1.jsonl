{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/c/chapter_sorting/quick_sort.c#10-14", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/c/chapter_sorting/quick_sort.c", "language": "Java"}, "method": {"name": "swap", "qualified_name": "codes.c.chapter_sorting.quick_sort.c#swap", "start_line": 10, "end_line": 14, "signature": "swap(int nums[], int i, int j)", "original_code": "void swap(int nums[], int i, int j) {\n    int tmp = nums[i];\n    nums[i] = nums[j];\n    nums[j] = tmp;\n}", "doc_comment": "/* \u5143\u7d20\u4ea4\u6362 */"}, "code_tokens": ["void", "swap", "(", ",", ",", ")", "{", "}", "nums", "i", "j", ";", ";", ";", "int", "[", "]", "int", "int", "int", "tmp", "=", "=", "=", "tmp", "nums", "[", "i", "]", "nums", "[", "i", "]", "nums", "[", "j", "]", "nums", "[", "j", "]"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 63, "ast_depth": 7, "n_identifiers": 5, "vocab_size": 16, "n_whitespaces": 30, "n_words": 19, "nloc": 5, "token_counts": 41}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/c/chapter_sorting/quick_sort.c#17-34", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/c/chapter_sorting/quick_sort.c", "language": "Java"}, "method": {"name": "partition", "qualified_name": "codes.c.chapter_sorting.quick_sort.c#partition", "start_line": 17, "end_line": 34, "signature": "partition(int nums[], int left, int right)", "original_code": "int partition(int nums[], int left, int right) {\n    // \u4ee5 nums[left] \u4e3a\u57fa\u51c6\u6570\n    int i = left, j = right;\n    while (i < j) {\n        while (i < j && nums[j] >= nums[left]) {\n            j--; // \u4ece\u53f3\u5411\u5de6\u627e\u9996\u4e2a\u5c0f\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20\n        }\n        while (i < j && nums[i] <= nums[left]) {\n            i++; // \u4ece\u5de6\u5411\u53f3\u627e\u9996\u4e2a\u5927\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20\n        }\n        // \u4ea4\u6362\u8fd9\u4e24\u4e2a\u5143\u7d20\n        swap(nums, i, j);\n    }\n    // \u5c06\u57fa\u51c6\u6570\u4ea4\u6362\u81f3\u4e24\u5b50\u6570\u7ec4\u7684\u5206\u754c\u7ebf\n    swap(nums, i, left);\n    // \u8fd4\u56de\u57fa\u51c6\u6570\u7684\u7d22\u5f15\n    return i;\n}", "doc_comment": "/* \u54e8\u5175\u5212\u5206 */"}, "code_tokens": ["partition", "int", "(", ",", ",", ")", "{", "// \u4ee5 nums[left] \u4e3a\u57fa\u51c6\u6570", "// \u5c06\u57fa\u51c6\u6570\u4ea4\u6362\u81f3\u4e24\u5b50\u6570\u7ec4\u7684\u5206\u754c\u7ebf", "// \u8fd4\u56de\u57fa\u51c6\u6570\u7684\u7d22\u5f15", "}", "nums", "left", "right", ",", ";", "while", ";", "return", "i", ";", "int", "[", "]", "int", "int", "int", "i", "=", "left", "j", "=", "right", "(", ")", "{", "// \u4ea4\u6362\u8fd9\u4e24\u4e2a\u5143\u7d20", "}", "swap", "i", "<", "j", "while", "while", ";", "(", "nums", ",", "i", ",", "left", ")", "(", ")", "{", "// \u4ece\u53f3\u5411\u5de6\u627e\u9996\u4e2a\u5c0f\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20", "}", "(", ")", "{", "// \u4ece\u5de6\u5411\u53f3\u627e\u9996\u4e2a\u5927\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20", "}", "swap", "&&", ";", "&&", ";", "(", "nums", ",", "i", ",", "j", ")", "i", "<", "j", ">=", "j", "--", "i", "<", "j", "<=", "i", "++", "nums", "[", "j", "]", "nums", "[", "left", "]", "nums", "[", "i", "]", "nums", "[", "left", "]"], "metrics": {"cyclomatic_complexity": 6, "n_ast_nodes": 149, "ast_depth": 11, "n_identifiers": 7, "vocab_size": 31, "n_whitespaces": 169, "n_words": 51, "nloc": 18, "token_counts": 102}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/c/chapter_sorting/quick_sort.c#37-47", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/c/chapter_sorting/quick_sort.c", "language": "Java"}, "method": {"name": "quickSort", "qualified_name": "codes.c.chapter_sorting.quick_sort.c#quickSort", "start_line": 37, "end_line": 47, "signature": "quickSort(int nums[], int left, int right)", "original_code": "void quickSort(int nums[], int left, int right) {\n    // \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52\n    if (left >= right) {\n        return;\n    }\n    // \u54e8\u5175\u5212\u5206\n    int pivot = partition(nums, left, right);\n    // \u9012\u5f52\u5de6\u5b50\u6570\u7ec4\u3001\u53f3\u5b50\u6570\u7ec4\n    quickSort(nums, left, pivot - 1);\n    quickSort(nums, pivot + 1, right);\n}", "doc_comment": "/* \u5feb\u901f\u6392\u5e8f */"}, "code_tokens": ["void", "quickSort", "(", ",", ",", ")", "{", "// \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52", "// \u54e8\u5175\u5212\u5206", "// \u9012\u5f52\u5de6\u5b50\u6570\u7ec4\u3001\u53f3\u5b50\u6570\u7ec4", "}", "nums", "left", "right", "if", ";", ";", ";", "int", "[", "]", "int", "int", "(", ")", "{", "}", "int", "pivot", "=", "quickSort", "quickSort", "left", ">=", "right", "return", ";", "partition", "(", "nums", ",", "left", ",", ")", "(", "nums", ",", ",", "right", ")", "(", "nums", ",", "left", ",", "right", ")", "pivot", "-", "1", "pivot", "+", "1"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 92, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 26, "n_whitespaces": 79, "n_words": 34, "nloc": 11, "token_counts": 63}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/c/chapter_sorting/quick_sort.c#52-59", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/c/chapter_sorting/quick_sort.c", "language": "Java"}, "method": {"name": "medianThree", "qualified_name": "codes.c.chapter_sorting.quick_sort.c#medianThree", "start_line": 52, "end_line": 59, "signature": "medianThree(int nums[], int left, int mid, int right)", "original_code": "int medianThree(int nums[], int left, int mid, int right) {\n    int l = nums[left], m = nums[mid], r = nums[right];\n    if ((l <= m && m <= r) || (r <= m && m <= l))\n        return mid; // m \u5728 l \u548c r \u4e4b\u95f4\n    if ((m <= l && l <= r) || (r <= l && l <= m))\n        return left; // l \u5728 m \u548c r \u4e4b\u95f4\n    return right;\n}", "doc_comment": "/* \u9009\u53d6\u4e09\u4e2a\u5019\u9009\u5143\u7d20\u7684\u4e2d\u4f4d\u6570 */"}, "code_tokens": ["medianThree", "int", "(", ",", ",", ",", ")", "{", "// m \u5728 l \u548c r \u4e4b\u95f4", "// l \u5728 m \u548c r \u4e4b\u95f4", "}", "nums", "left", "mid", "right", ",", ",", ";", "if", "if", "return", "right", ";", "int", "[", "]", "int", "int", "int", "int", "l", "=", "m", "=", "r", "=", "(", ")", "return", "mid", ";", "(", ")", "return", "left", ";", "nums", "[", "left", "]", "nums", "[", "mid", "]", "nums", "[", "right", "]", "||", "||", "(", ")", "(", ")", "(", ")", "(", ")", "&&", "&&", "&&", "&&", "l", "<=", "m", "m", "<=", "r", "r", "<=", "m", "m", "<=", "l", "m", "<=", "l", "l", "<=", "r", "r", "<=", "l", "l", "<=", "m"], "metrics": {"cyclomatic_complexity": 9, "n_ast_nodes": 143, "ast_depth": 10, "n_identifiers": 8, "vocab_size": 25, "n_whitespaces": 104, "n_words": 56, "nloc": 8, "token_counts": 96}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/c/chapter_sorting/quick_sort.c#62-78", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/c/chapter_sorting/quick_sort.c", "language": "Java"}, "method": {"name": "partitionMedian", "qualified_name": "codes.c.chapter_sorting.quick_sort.c#partitionMedian", "start_line": 62, "end_line": 78, "signature": "partitionMedian(int nums[], int left, int right)", "original_code": "int partitionMedian(int nums[], int left, int right) {\n    // \u9009\u53d6\u4e09\u4e2a\u5019\u9009\u5143\u7d20\u7684\u4e2d\u4f4d\u6570\n    int med = medianThree(nums, left, (left + right) / 2, right);\n    // \u5c06\u4e2d\u4f4d\u6570\u4ea4\u6362\u81f3\u6570\u7ec4\u6700\u5de6\u7aef\n    swap(nums, left, med);\n    // \u4ee5 nums[left] \u4e3a\u57fa\u51c6\u6570\n    int i = left, j = right;\n    while (i < j) {\n        while (i < j && nums[j] >= nums[left])\n            j--; // \u4ece\u53f3\u5411\u5de6\u627e\u9996\u4e2a\u5c0f\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20\n        while (i < j && nums[i] <= nums[left])\n            i++;          // \u4ece\u5de6\u5411\u53f3\u627e\u9996\u4e2a\u5927\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20\n        swap(nums, i, j); // \u4ea4\u6362\u8fd9\u4e24\u4e2a\u5143\u7d20\n    }\n    swap(nums, i, left); // \u5c06\u57fa\u51c6\u6570\u4ea4\u6362\u81f3\u4e24\u5b50\u6570\u7ec4\u7684\u5206\u754c\u7ebf\n    return i;            // \u8fd4\u56de\u57fa\u51c6\u6570\u7684\u7d22\u5f15\n}", "doc_comment": "/* \u54e8\u5175\u5212\u5206\uff08\u4e09\u6570\u53d6\u4e2d\u503c\uff09 */"}, "code_tokens": ["partitionMedian", "int", "(", ",", ",", ")", "{", "// \u9009\u53d6\u4e09\u4e2a\u5019\u9009\u5143\u7d20\u7684\u4e2d\u4f4d\u6570", "// \u5c06\u4e2d\u4f4d\u6570\u4ea4\u6362\u81f3\u6570\u7ec4\u6700\u5de6\u7aef", "// \u4ee5 nums[left] \u4e3a\u57fa\u51c6\u6570", "// \u5c06\u57fa\u51c6\u6570\u4ea4\u6362\u81f3\u4e24\u5b50\u6570\u7ec4\u7684\u5206\u754c\u7ebf", "// \u8fd4\u56de\u57fa\u51c6\u6570\u7684\u7d22\u5f15", "}", "nums", "left", "right", ";", ";", ",", ";", "while", ";", "return", "i", ";", "int", "[", "]", "int", "int", "int", "med", "=", "swap", "int", "i", "=", "left", "j", "=", "right", "(", ")", "{", "// \u4ece\u53f3\u5411\u5de6\u627e\u9996\u4e2a\u5c0f\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20", "// \u4ece\u5de6\u5411\u53f3\u627e\u9996\u4e2a\u5927\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20", "// \u4ea4\u6362\u8fd9\u4e24\u4e2a\u5143\u7d20", "}", "swap", "medianThree", "(", "nums", ",", "left", ",", "med", ")", "i", "<", "j", "while", "while", ";", "(", "nums", ",", "i", ",", "left", ")", "(", "nums", ",", "left", ",", ",", "right", ")", "(", ")", ";", "(", ")", ";", "swap", "/", "2", "&&", "j", "--", "&&", "i", "++", "(", "nums", ",", "i", ",", "j", ")", "(", ")", "i", "<", "j", ">=", "i", "<", "j", "<=", "left", "+", "right", "nums", "[", "j", "]", "nums", "[", "left", "]", "nums", "[", "i", "]", "nums", "[", "left", "]"], "metrics": {"cyclomatic_complexity": 6, "n_ast_nodes": 185, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 38, "n_whitespaces": 187, "n_words": 66, "nloc": 17, "token_counts": 129}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/c/chapter_sorting/quick_sort.c#81-90", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/c/chapter_sorting/quick_sort.c", "language": "Java"}, "method": {"name": "quickSortMedian", "qualified_name": "codes.c.chapter_sorting.quick_sort.c#quickSortMedian", "start_line": 81, "end_line": 90, "signature": "quickSortMedian(int nums[], int left, int right)", "original_code": "void quickSortMedian(int nums[], int left, int right) {\n    // \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52\n    if (left >= right)\n        return;\n    // \u54e8\u5175\u5212\u5206\n    int pivot = partitionMedian(nums, left, right);\n    // \u9012\u5f52\u5de6\u5b50\u6570\u7ec4\u3001\u53f3\u5b50\u6570\u7ec4\n    quickSortMedian(nums, left, pivot - 1);\n    quickSortMedian(nums, pivot + 1, right);\n}", "doc_comment": "/* \u5feb\u901f\u6392\u5e8f\uff08\u4e09\u6570\u53d6\u4e2d\u503c\uff09 */"}, "code_tokens": ["void", "quickSortMedian", "(", ",", ",", ")", "{", "// \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52", "// \u54e8\u5175\u5212\u5206", "// \u9012\u5f52\u5de6\u5b50\u6570\u7ec4\u3001\u53f3\u5b50\u6570\u7ec4", "}", "nums", "left", "right", "if", ";", ";", ";", "int", "[", "]", "int", "int", "(", ")", "return", ";", "int", "pivot", "=", "quickSortMedian", "quickSortMedian", "left", ">=", "right", "partitionMedian", "(", "nums", ",", "left", ",", ")", "(", "nums", ",", ",", "right", ")", "(", "nums", ",", "left", ",", "right", ")", "pivot", "-", "1", "pivot", "+", "1"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 89, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 26, "n_whitespaces": 73, "n_words": 34, "nloc": 10, "token_counts": 61}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/c/chapter_sorting/quick_sort.c#95-113", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/c/chapter_sorting/quick_sort.c", "language": "Java"}, "method": {"name": "quickSortTailCall", "qualified_name": "codes.c.chapter_sorting.quick_sort.c#quickSortTailCall", "start_line": 95, "end_line": 113, "signature": "quickSortTailCall(int nums[], int left, int right)", "original_code": "void quickSortTailCall(int nums[], int left, int right) {\n    // \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\n    while (left < right) {\n        // \u54e8\u5175\u5212\u5206\u64cd\u4f5c\n        int pivot = partition(nums, left, right);\n        // \u5bf9\u4e24\u4e2a\u5b50\u6570\u7ec4\u4e2d\u8f83\u77ed\u7684\u90a3\u4e2a\u6267\u884c\u5feb\u901f\u6392\u5e8f\n        if (pivot - left < right - pivot) {\n            // \u9012\u5f52\u6392\u5e8f\u5de6\u5b50\u6570\u7ec4\n            quickSortTailCall(nums, left, pivot - 1);\n            // \u5269\u4f59\u672a\u6392\u5e8f\u533a\u95f4\u4e3a [pivot + 1, right]\n            left = pivot + 1;\n        } else {\n            // \u9012\u5f52\u6392\u5e8f\u53f3\u5b50\u6570\u7ec4\n            quickSortTailCall(nums, pivot + 1, right);\n            // \u5269\u4f59\u672a\u6392\u5e8f\u533a\u95f4\u4e3a [left, pivot - 1]\n            right = pivot - 1;\n        }\n    }\n}", "doc_comment": "/* \u5feb\u901f\u6392\u5e8f\uff08\u9012\u5f52\u6df1\u5ea6\u4f18\u5316\uff09 */"}, "code_tokens": ["void", "quickSortTailCall", "(", ",", ",", ")", "{", "// \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62", "}", "nums", "left", "right", "while", "int", "[", "]", "int", "int", "(", ")", "{", "// \u54e8\u5175\u5212\u5206\u64cd\u4f5c", "// \u5bf9\u4e24\u4e2a\u5b50\u6570\u7ec4\u4e2d\u8f83\u77ed\u7684\u90a3\u4e2a\u6267\u884c\u5feb\u901f\u6392\u5e8f", "}", "left", "<", "right", ";", "if", "else", "int", "pivot", "=", "(", ")", "{", "// \u9012\u5f52\u6392\u5e8f\u5de6\u5b50\u6570\u7ec4", "// \u5269\u4f59\u672a\u6392\u5e8f\u533a\u95f4\u4e3a [pivot + 1, right]", "}", "{", "// \u9012\u5f52\u6392\u5e8f\u53f3\u5b50\u6570\u7ec4", "// \u5269\u4f59\u672a\u6392\u5e8f\u533a\u95f4\u4e3a [left, pivot - 1]", "}", "partition", "<", ";", ";", ";", ";", "(", "nums", ",", "left", ",", "right", ")", "pivot", "-", "left", "right", "-", "pivot", "quickSortTailCall", "left", "=", "quickSortTailCall", "right", "=", "(", "nums", ",", "left", ",", ")", "pivot", "+", "1", "(", "nums", ",", ",", "right", ")", "pivot", "-", "1", "pivot", "-", "1", "pivot", "+", "1"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 133, "ast_depth": 12, "n_identifiers": 6, "vocab_size": 31, "n_whitespaces": 233, "n_words": 54, "nloc": 19, "token_counts": 92}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/c/chapter_sorting/quick_sort.c#116-137", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/c/chapter_sorting/quick_sort.c", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.c.chapter_sorting.quick_sort.c#main", "start_line": 116, "end_line": 137, "signature": "main()", "original_code": "int main() {\n    /* \u5feb\u901f\u6392\u5e8f */\n    int nums[] = {2, 4, 1, 0, 3, 5};\n    int size = sizeof(nums) / sizeof(int);\n    quickSort(nums, 0, size - 1);\n    printf(\"\u5feb\u901f\u6392\u5e8f\u5b8c\u6210\u540e nums = \");\n    printArray(nums, size);\n\n    /* \u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u51c6\u6570\u4f18\u5316\uff09 */\n    int nums1[] = {2, 4, 1, 0, 3, 5};\n    quickSortMedian(nums1, 0, size - 1);\n    printf(\"\u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u51c6\u6570\u4f18\u5316\uff09\u5b8c\u6210\u540e nums = \");\n    printArray(nums1, size);\n\n    /* \u5feb\u901f\u6392\u5e8f\uff08\u9012\u5f52\u6df1\u5ea6\u4f18\u5316\uff09 */\n    int nums2[] = {2, 4, 1, 0, 3, 5};\n    quickSortTailCall(nums2, 0, size - 1);\n    printf(\"\u5feb\u901f\u6392\u5e8f\uff08\u9012\u5f52\u6df1\u5ea6\u4f18\u5316\uff09\u5b8c\u6210\u540e nums = \");\n    printArray(nums1, size);\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "/* \u5feb\u901f\u6392\u5e8f */", "/* \u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u51c6\u6570\u4f18\u5316\uff09 */", "/* \u5feb\u901f\u6392\u5e8f\uff08\u9012\u5f52\u6df1\u5ea6\u4f18\u5316\uff09 */", "}", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "return", "0", ";", "int", "nums", "=", "int", "size", "=", "quickSort", "printf", "printArray", "int", "nums1", "=", "quickSortMedian", "printf", "printArray", "int", "nums2", "=", "quickSortTailCall", "printf", "printArray", "[", "]", "{", "2", ",", "4", ",", "1", ",", "0", ",", "3", ",", "5", "}", "/", "(", "nums", ",", "0", ",", ")", "(", ")", "(", "nums", ",", "size", ")", "[", "]", "{", "2", ",", "4", ",", "1", ",", "0", ",", "3", ",", "5", "}", "(", "nums1", ",", "0", ",", ")", "(", ")", "(", "nums1", ",", "size", ")", "[", "]", "{", "2", ",", "4", ",", "1", ",", "0", ",", "3", ",", "5", "}", "(", "nums2", ",", "0", ",", ")", "(", ")", "(", "nums1", ",", "size", ")", "sizeof", "sizeof", "size", "-", "1", "\"", "\u5feb\u901f\u6392\u5e8f\u5b8c\u6210\u540e nums = ", "\"", "size", "-", "1", "\"", "\u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u51c6\u6570\u4f18\u5316\uff09\u5b8c\u6210\u540e nums = ", "\"", "size", "-", "1", "\"", "\u5feb\u901f\u6392\u5e8f\uff08\u9012\u5f52\u6df1\u5ea6\u4f18\u5316\uff09\u5b8c\u6210\u540e nums = ", "\"", "(", "nums", ")", "(", ")", "int"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 221, "ast_depth": 11, "n_identifiers": 11, "vocab_size": 37, "n_whitespaces": 151, "n_words": 76, "nloc": 19, "token_counts": 157}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/cpp/chapter_sorting/quick_sort.cpp#11-25", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/cpp/chapter_sorting/quick_sort.cpp", "language": "Java"}, "method": {"name": "partition", "qualified_name": "codes.cpp.chapter_sorting.quick_sort.cpp#partition", "start_line": 11, "end_line": 25, "signature": "partition(vector<int> &nums, int left, int right)", "original_code": "private:\n    /* \u54e8\u5175\u5212\u5206 */\n    static int partition(vector<int> &nums, int left, int right) {\n        // \u4ee5 nums[left] \u4e3a\u57fa\u51c6\u6570\n        int i = left, j = right;\n        while (i < j) {\n            while (i < j && nums[j] >= nums[left])\n                j--;                // \u4ece\u53f3\u5411\u5de6\u627e\u9996\u4e2a\u5c0f\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20\n            while (i < j && nums[i] <= nums[left])\n                i++;                // \u4ece\u5de6\u5411\u53f3\u627e\u9996\u4e2a\u5927\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20\n            swap(nums[i], nums[j]); // \u4ea4\u6362\u8fd9\u4e24\u4e2a\u5143\u7d20\n        }\n        swap(nums[i], nums[left]);  // \u5c06\u57fa\u51c6\u6570\u4ea4\u6362\u81f3\u4e24\u5b50\u6570\u7ec4\u7684\u5206\u754c\u7ebf\n        return i;                   // \u8fd4\u56de\u57fa\u51c6\u6570\u7684\u7d22\u5f15\n    }", "doc_comment": ""}, "code_tokens": ["partition", "private", "/* \u54e8\u5175\u5212\u5206 */", "static", "int", "(", ",", ",", ")", "{", "// \u4ee5 nums[left] \u4e3a\u57fa\u51c6\u6570", "// \u5c06\u57fa\u51c6\u6570\u4ea4\u6362\u81f3\u4e24\u5b50\u6570\u7ec4\u7684\u5206\u754c\u7ebf", "// \u8fd4\u56de\u57fa\u51c6\u6570\u7684\u7d22\u5f15", "}", ":", "nums", "left", "right", ",", ";", "while", ";", "return", "i", ";", "vector", "&", "int", "int", "int", "i", "=", "left", "j", "=", "right", "(", ")", "{", "// \u4ece\u53f3\u5411\u5de6\u627e\u9996\u4e2a\u5c0f\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20", "// \u4ece\u5de6\u5411\u53f3\u627e\u9996\u4e2a\u5927\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20", "// \u4ea4\u6362\u8fd9\u4e24\u4e2a\u5143\u7d20", "}", "swap", "<", ">", "i", "<", "j", "while", "while", ";", "(", ",", ")", "int", "(", ")", ";", "(", ")", ";", "swap", "nums", "[", "i", "]", "nums", "[", "left", "]", "&&", "j", "--", "&&", "i", "++", "(", ",", ")", "i", "<", "j", ">=", "i", "<", "j", "<=", "nums", "[", "i", "]", "nums", "[", "j", "]", "nums", "[", "j", "]", "nums", "[", "left", "]", "nums", "[", "i", "]", "nums", "[", "left", "]"], "metrics": {"cyclomatic_complexity": 6, "n_ast_nodes": 165, "ast_depth": 11, "n_identifiers": 7, "vocab_size": 38, "n_whitespaces": 241, "n_words": 57, "nloc": 15, "token_counts": 112}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/cpp/chapter_sorting/quick_sort.cpp#27-38", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/cpp/chapter_sorting/quick_sort.cpp", "language": "Java"}, "method": {"name": "quickSort", "qualified_name": "codes.cpp.chapter_sorting.quick_sort.cpp#quickSort", "start_line": 27, "end_line": 38, "signature": "quickSort(vector<int> &nums, int left, int right)", "original_code": "public:\n    /* \u5feb\u901f\u6392\u5e8f */\n    static void quickSort(vector<int> &nums, int left, int right) {\n        // \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52\n        if (left >= right)\n            return;\n        // \u54e8\u5175\u5212\u5206\n        int pivot = partition(nums, left, right);\n        // \u9012\u5f52\u5de6\u5b50\u6570\u7ec4\u3001\u53f3\u5b50\u6570\u7ec4\n        quickSort(nums, left, pivot - 1);\n        quickSort(nums, pivot + 1, right);\n    }", "doc_comment": ""}, "code_tokens": ["void", "quickSort", "public", "/* \u5feb\u901f\u6392\u5e8f */", "static", "(", ",", ",", ")", "{", "// \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52", "// \u54e8\u5175\u5212\u5206", "// \u9012\u5f52\u5de6\u5b50\u6570\u7ec4\u3001\u53f3\u5b50\u6570\u7ec4", "}", ":", "nums", "left", "right", "if", ";", ";", ";", "vector", "&", "int", "int", "(", ")", "return", ";", "int", "pivot", "=", "quickSort", "quickSort", "<", ">", "left", ">=", "right", "partition", "(", "nums", ",", "left", ",", ")", "(", "nums", ",", ",", "right", ")", "int", "(", "nums", ",", "left", ",", "right", ")", "pivot", "-", "1", "pivot", "+", "1"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 99, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 32, "n_whitespaces": 122, "n_words": 38, "nloc": 12, "token_counts": 67}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/cpp/chapter_sorting/quick_sort.cpp#43-52", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/cpp/chapter_sorting/quick_sort.cpp", "language": "Java"}, "method": {"name": "medianThree", "qualified_name": "codes.cpp.chapter_sorting.quick_sort.cpp#medianThree", "start_line": 43, "end_line": 52, "signature": "medianThree(vector<int> &nums, int left, int mid, int right)", "original_code": "private:\n    /* \u9009\u53d6\u4e09\u4e2a\u5019\u9009\u5143\u7d20\u7684\u4e2d\u4f4d\u6570 */\n    static int medianThree(vector<int> &nums, int left, int mid, int right) {\n        int l = nums[left], m = nums[mid], r = nums[right];\n        if ((l <= m && m <= r) || (r <= m && m <= l))\n            return mid; // m \u5728 l \u548c r \u4e4b\u95f4\n        if ((m <= l && l <= r) || (r <= l && l <= m))\n            return left; // l \u5728 m \u548c r \u4e4b\u95f4\n        return right;\n    }", "doc_comment": ""}, "code_tokens": ["medianThree", "private", "/* \u9009\u53d6\u4e09\u4e2a\u5019\u9009\u5143\u7d20\u7684\u4e2d\u4f4d\u6570 */", "static", "int", "(", ",", ",", ",", ")", "{", "// m \u5728 l \u548c r \u4e4b\u95f4", "// l \u5728 m \u548c r \u4e4b\u95f4", "}", ":", "nums", "left", "mid", "right", ",", ",", ";", "if", "if", "return", "right", ";", "vector", "&", "int", "int", "int", "int", "l", "=", "m", "=", "r", "=", "(", ")", "return", "mid", ";", "(", ")", "return", "left", ";", "<", ">", "nums", "[", "left", "]", "nums", "[", "mid", "]", "nums", "[", "right", "]", "||", "||", "int", "(", ")", "(", ")", "(", ")", "(", ")", "&&", "&&", "&&", "&&", "l", "<=", "m", "m", "<=", "r", "r", "<=", "m", "m", "<=", "l", "m", "<=", "l", "l", "<=", "r", "r", "<=", "l", "l", "<=", "m"], "metrics": {"cyclomatic_complexity": 9, "n_ast_nodes": 153, "ast_depth": 10, "n_identifiers": 8, "vocab_size": 33, "n_whitespaces": 145, "n_words": 60, "nloc": 10, "token_counts": 102}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/cpp/chapter_sorting/quick_sort.cpp#55-71", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/cpp/chapter_sorting/quick_sort.cpp", "language": "Java"}, "method": {"name": "partition", "qualified_name": "codes.cpp.chapter_sorting.quick_sort.cpp#partition", "start_line": 55, "end_line": 71, "signature": "partition(vector<int> &nums, int left, int right)", "original_code": "static int partition(vector<int> &nums, int left, int right) {\n        // \u9009\u53d6\u4e09\u4e2a\u5019\u9009\u5143\u7d20\u7684\u4e2d\u4f4d\u6570\n        int med = medianThree(nums, left, (left + right) / 2, right);\n        // \u5c06\u4e2d\u4f4d\u6570\u4ea4\u6362\u81f3\u6570\u7ec4\u6700\u5de6\u7aef\n        swap(nums[left], nums[med]);\n        // \u4ee5 nums[left] \u4e3a\u57fa\u51c6\u6570\n        int i = left, j = right;\n        while (i < j) {\n            while (i < j && nums[j] >= nums[left])\n                j--;                // \u4ece\u53f3\u5411\u5de6\u627e\u9996\u4e2a\u5c0f\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20\n            while (i < j && nums[i] <= nums[left])\n                i++;                // \u4ece\u5de6\u5411\u53f3\u627e\u9996\u4e2a\u5927\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20\n            swap(nums[i], nums[j]); // \u4ea4\u6362\u8fd9\u4e24\u4e2a\u5143\u7d20\n        }\n        swap(nums[i], nums[left]);  // \u5c06\u57fa\u51c6\u6570\u4ea4\u6362\u81f3\u4e24\u5b50\u6570\u7ec4\u7684\u5206\u754c\u7ebf\n        return i;                   // \u8fd4\u56de\u57fa\u51c6\u6570\u7684\u7d22\u5f15\n    }", "doc_comment": "/* \u54e8\u5175\u5212\u5206\uff08\u4e09\u6570\u53d6\u4e2d\u503c\uff09 */"}, "code_tokens": ["partition", "static", "int", "(", ",", ",", ")", "{", "// \u9009\u53d6\u4e09\u4e2a\u5019\u9009\u5143\u7d20\u7684\u4e2d\u4f4d\u6570", "// \u5c06\u4e2d\u4f4d\u6570\u4ea4\u6362\u81f3\u6570\u7ec4\u6700\u5de6\u7aef", "// \u4ee5 nums[left] \u4e3a\u57fa\u51c6\u6570", "// \u5c06\u57fa\u51c6\u6570\u4ea4\u6362\u81f3\u4e24\u5b50\u6570\u7ec4\u7684\u5206\u754c\u7ebf", "// \u8fd4\u56de\u57fa\u51c6\u6570\u7684\u7d22\u5f15", "}", "nums", "left", "right", ";", ";", ",", ";", "while", ";", "return", "i", ";", "vector", "&", "int", "int", "int", "med", "=", "swap", "int", "i", "=", "left", "j", "=", "right", "(", ")", "{", "// \u4ece\u53f3\u5411\u5de6\u627e\u9996\u4e2a\u5c0f\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20", "// \u4ece\u5de6\u5411\u53f3\u627e\u9996\u4e2a\u5927\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20", "// \u4ea4\u6362\u8fd9\u4e24\u4e2a\u5143\u7d20", "}", "swap", "<", ">", "medianThree", "(", ",", ")", "i", "<", "j", "while", "while", ";", "(", ",", ")", "int", "(", "nums", ",", "left", ",", ",", "right", ")", "nums", "[", "left", "]", "nums", "[", "med", "]", "(", ")", ";", "(", ")", ";", "swap", "nums", "[", "i", "]", "nums", "[", "left", "]", "/", "2", "&&", "j", "--", "&&", "i", "++", "(", ",", ")", "(", ")", "i", "<", "j", ">=", "i", "<", "j", "<=", "nums", "[", "i", "]", "nums", "[", "j", "]", "left", "+", "right", "nums", "[", "j", "]", "nums", "[", "left", "]", "nums", "[", "i", "]", "nums", "[", "left", "]"], "metrics": {"cyclomatic_complexity": 6, "n_ast_nodes": 209, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 42, "n_whitespaces": 278, "n_words": 71, "nloc": 17, "token_counts": 144}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/cpp/chapter_sorting/quick_sort.cpp#73-84", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/cpp/chapter_sorting/quick_sort.cpp", "language": "Java"}, "method": {"name": "quickSort", "qualified_name": "codes.cpp.chapter_sorting.quick_sort.cpp#quickSort", "start_line": 73, "end_line": 84, "signature": "quickSort(vector<int> &nums, int left, int right)", "original_code": "public:\n    /* \u5feb\u901f\u6392\u5e8f */\n    static void quickSort(vector<int> &nums, int left, int right) {\n        // \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52\n        if (left >= right)\n            return;\n        // \u54e8\u5175\u5212\u5206\n        int pivot = partition(nums, left, right);\n        // \u9012\u5f52\u5de6\u5b50\u6570\u7ec4\u3001\u53f3\u5b50\u6570\u7ec4\n        quickSort(nums, left, pivot - 1);\n        quickSort(nums, pivot + 1, right);\n    }", "doc_comment": ""}, "code_tokens": ["void", "quickSort", "public", "/* \u5feb\u901f\u6392\u5e8f */", "static", "(", ",", ",", ")", "{", "// \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52", "// \u54e8\u5175\u5212\u5206", "// \u9012\u5f52\u5de6\u5b50\u6570\u7ec4\u3001\u53f3\u5b50\u6570\u7ec4", "}", ":", "nums", "left", "right", "if", ";", ";", ";", "vector", "&", "int", "int", "(", ")", "return", ";", "int", "pivot", "=", "quickSort", "quickSort", "<", ">", "left", ">=", "right", "partition", "(", "nums", ",", "left", ",", ")", "(", "nums", ",", ",", "right", ")", "int", "(", "nums", ",", "left", ",", "right", ")", "pivot", "-", "1", "pivot", "+", "1"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 99, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 32, "n_whitespaces": 122, "n_words": 38, "nloc": 12, "token_counts": 67}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/cpp/chapter_sorting/quick_sort.cpp#89-103", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/cpp/chapter_sorting/quick_sort.cpp", "language": "Java"}, "method": {"name": "partition", "qualified_name": "codes.cpp.chapter_sorting.quick_sort.cpp#partition", "start_line": 89, "end_line": 103, "signature": "partition(vector<int> &nums, int left, int right)", "original_code": "private:\n    /* \u54e8\u5175\u5212\u5206 */\n    static int partition(vector<int> &nums, int left, int right) {\n        // \u4ee5 nums[left] \u4e3a\u57fa\u51c6\u6570\n        int i = left, j = right;\n        while (i < j) {\n            while (i < j && nums[j] >= nums[left])\n                j--;                // \u4ece\u53f3\u5411\u5de6\u627e\u9996\u4e2a\u5c0f\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20\n            while (i < j && nums[i] <= nums[left])\n                i++;                // \u4ece\u5de6\u5411\u53f3\u627e\u9996\u4e2a\u5927\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20\n            swap(nums[i], nums[j]); // \u4ea4\u6362\u8fd9\u4e24\u4e2a\u5143\u7d20\n        }\n        swap(nums[i], nums[left]);  // \u5c06\u57fa\u51c6\u6570\u4ea4\u6362\u81f3\u4e24\u5b50\u6570\u7ec4\u7684\u5206\u754c\u7ebf\n        return i;                   // \u8fd4\u56de\u57fa\u51c6\u6570\u7684\u7d22\u5f15\n    }", "doc_comment": ""}, "code_tokens": ["partition", "private", "/* \u54e8\u5175\u5212\u5206 */", "static", "int", "(", ",", ",", ")", "{", "// \u4ee5 nums[left] \u4e3a\u57fa\u51c6\u6570", "// \u5c06\u57fa\u51c6\u6570\u4ea4\u6362\u81f3\u4e24\u5b50\u6570\u7ec4\u7684\u5206\u754c\u7ebf", "// \u8fd4\u56de\u57fa\u51c6\u6570\u7684\u7d22\u5f15", "}", ":", "nums", "left", "right", ",", ";", "while", ";", "return", "i", ";", "vector", "&", "int", "int", "int", "i", "=", "left", "j", "=", "right", "(", ")", "{", "// \u4ece\u53f3\u5411\u5de6\u627e\u9996\u4e2a\u5c0f\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20", "// \u4ece\u5de6\u5411\u53f3\u627e\u9996\u4e2a\u5927\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20", "// \u4ea4\u6362\u8fd9\u4e24\u4e2a\u5143\u7d20", "}", "swap", "<", ">", "i", "<", "j", "while", "while", ";", "(", ",", ")", "int", "(", ")", ";", "(", ")", ";", "swap", "nums", "[", "i", "]", "nums", "[", "left", "]", "&&", "j", "--", "&&", "i", "++", "(", ",", ")", "i", "<", "j", ">=", "i", "<", "j", "<=", "nums", "[", "i", "]", "nums", "[", "j", "]", "nums", "[", "j", "]", "nums", "[", "left", "]", "nums", "[", "i", "]", "nums", "[", "left", "]"], "metrics": {"cyclomatic_complexity": 6, "n_ast_nodes": 165, "ast_depth": 11, "n_identifiers": 7, "vocab_size": 38, "n_whitespaces": 241, "n_words": 57, "nloc": 15, "token_counts": 112}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/cpp/chapter_sorting/quick_sort.cpp#105-121", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/cpp/chapter_sorting/quick_sort.cpp", "language": "Java"}, "method": {"name": "quickSort", "qualified_name": "codes.cpp.chapter_sorting.quick_sort.cpp#quickSort", "start_line": 105, "end_line": 121, "signature": "quickSort(vector<int> &nums, int left, int right)", "original_code": "public:\n    /* \u5feb\u901f\u6392\u5e8f\uff08\u9012\u5f52\u6df1\u5ea6\u4f18\u5316\uff09 */\n    static void quickSort(vector<int> &nums, int left, int right) {\n        // \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\n        while (left < right) {\n            // \u54e8\u5175\u5212\u5206\u64cd\u4f5c\n            int pivot = partition(nums, left, right);\n            // \u5bf9\u4e24\u4e2a\u5b50\u6570\u7ec4\u4e2d\u8f83\u77ed\u7684\u90a3\u4e2a\u6267\u884c\u5feb\u901f\u6392\u5e8f\n            if (pivot - left < right - pivot) {\n                quickSort(nums, left, pivot - 1); // \u9012\u5f52\u6392\u5e8f\u5de6\u5b50\u6570\u7ec4\n                left = pivot + 1;                 // \u5269\u4f59\u672a\u6392\u5e8f\u533a\u95f4\u4e3a [pivot + 1, right]\n            } else {\n                quickSort(nums, pivot + 1, right); // \u9012\u5f52\u6392\u5e8f\u53f3\u5b50\u6570\u7ec4\n                right = pivot - 1;                 // \u5269\u4f59\u672a\u6392\u5e8f\u533a\u95f4\u4e3a [left, pivot - 1]\n            }\n        }\n    }", "doc_comment": ""}, "code_tokens": ["void", "quickSort", "public", "/* \u5feb\u901f\u6392\u5e8f\uff08\u9012\u5f52\u6df1\u5ea6\u4f18\u5316\uff09 */", "static", "(", ",", ",", ")", "{", "// \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62", "}", ":", "nums", "left", "right", "while", "vector", "&", "int", "int", "(", ")", "{", "// \u54e8\u5175\u5212\u5206\u64cd\u4f5c", "// \u5bf9\u4e24\u4e2a\u5b50\u6570\u7ec4\u4e2d\u8f83\u77ed\u7684\u90a3\u4e2a\u6267\u884c\u5feb\u901f\u6392\u5e8f", "}", "<", ">", "left", "<", "right", ";", "if", "else", "int", "int", "pivot", "=", "(", ")", "{", "// \u9012\u5f52\u6392\u5e8f\u5de6\u5b50\u6570\u7ec4", "// \u5269\u4f59\u672a\u6392\u5e8f\u533a\u95f4\u4e3a [pivot + 1, right]", "}", "{", "// \u9012\u5f52\u6392\u5e8f\u53f3\u5b50\u6570\u7ec4", "// \u5269\u4f59\u672a\u6392\u5e8f\u533a\u95f4\u4e3a [left, pivot - 1]", "}", "partition", "<", ";", ";", ";", ";", "(", "nums", ",", "left", ",", "right", ")", "pivot", "-", "left", "right", "-", "pivot", "quickSort", "left", "=", "quickSort", "right", "=", "(", "nums", ",", "left", ",", ")", "pivot", "+", "1", "(", "nums", ",", ",", "right", ")", "pivot", "-", "1", "pivot", "-", "1", "pivot", "+", "1"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 143, "ast_depth": 12, "n_identifiers": 6, "vocab_size": 36, "n_whitespaces": 286, "n_words": 59, "nloc": 17, "token_counts": 98}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/cpp/chapter_sorting/quick_sort.cpp#125-145", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/cpp/chapter_sorting/quick_sort.cpp", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.cpp.chapter_sorting.quick_sort.cpp#main", "start_line": 125, "end_line": 145, "signature": "main()", "original_code": "int main() {\n    /* \u5feb\u901f\u6392\u5e8f */\n    vector<int> nums{2, 4, 1, 0, 3, 5};\n    QuickSort::quickSort(nums, 0, nums.size() - 1);\n    cout << \"\u5feb\u901f\u6392\u5e8f\u5b8c\u6210\u540e nums = \";\n    printVector(nums);\n\n    /* \u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u51c6\u6570\u4f18\u5316\uff09 */\n    vector<int> nums1 = {2, 4, 1, 0, 3, 5};\n    QuickSortMedian::quickSort(nums1, 0, nums1.size() - 1);\n    cout << \"\u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u51c6\u6570\u4f18\u5316\uff09\u5b8c\u6210\u540e nums = \";\n    printVector(nums1);\n\n    /* \u5feb\u901f\u6392\u5e8f\uff08\u9012\u5f52\u6df1\u5ea6\u4f18\u5316\uff09 */\n    vector<int> nums2 = {2, 4, 1, 0, 3, 5};\n    QuickSortTailCall::quickSort(nums2, 0, nums2.size() - 1);\n    cout << \"\u5feb\u901f\u6392\u5e8f\uff08\u9012\u5f52\u6df1\u5ea6\u4f18\u5316\uff09\u5b8c\u6210\u540e nums = \";\n    printVector(nums2);\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "/* \u5feb\u901f\u6392\u5e8f */", ";", "/* \u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u51c6\u6570\u4f18\u5316\uff09 */", "/* \u5feb\u901f\u6392\u5e8f\uff08\u9012\u5f52\u6df1\u5ea6\u4f18\u5316\uff09 */", "}", "", "{", "}", "", ";", ";", ";", ";", "", ";", ";", ";", ";", "", ";", ";", ";", "return", "0", ";", "vector", "nums", "2", ",", "4", ",", "1", ",", "0", ",", "3", ",", "5", "QuickSort", "::", "quickSort", "(", ")", "cout", "<<", "printVector", "vector", "nums1", "=", "QuickSortMedian", "::", "quickSort", "(", ")", "cout", "<<", "printVector", "vector", "nums2", "=", "QuickSortTailCall", "::", "quickSort", "(", ")", "cout", "<<", "printVector", "<", ">", "-", "1", "\"", "\u5feb\u901f\u6392\u5e8f\u5b8c\u6210\u540e nums = ", "\"", "(", "nums", ")", "<", ">", "{", "2", ",", "4", ",", "1", ",", "0", ",", "3", ",", "5", "}", "-", "1", "\"", "\u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u51c6\u6570\u4f18\u5316\uff09\u5b8c\u6210\u540e nums = ", "\"", "(", "nums1", ")", "<", ">", "{", "2", ",", "4", ",", "1", ",", "0", ",", "3", ",", "5", "}", "-", "1", "\"", "\u5feb\u901f\u6392\u5e8f\uff08\u9012\u5f52\u6df1\u5ea6\u4f18\u5316\uff09\u5b8c\u6210\u540e nums = ", "\"", "(", "nums2", ")", "int", "nums", ".", "size", "int", "nums1", ".", "size", "int", "nums2", ".", "size", ",", "nums", "(", ")", ",", "nums1", "(", ")", ",", "nums2", "(", ")", "0", ",", "0", ",", "0", ","], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 229, "ast_depth": 10, "n_identifiers": 11, "vocab_size": 41, "n_whitespaces": 142, "n_words": 76, "nloc": 18, "token_counts": 159}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/csharp/chapter_sorting/quick_sort.cs#11-13", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/csharp/chapter_sorting/quick_sort.cs", "language": "Java"}, "method": {"name": "Swap", "qualified_name": "codes.csharp.chapter_sorting.quick_sort.cs#Swap", "start_line": 11, "end_line": 13, "signature": "Swap(int[] nums, int i, int j)", "original_code": "static void Swap(int[] nums, int i, int j) {\n        (nums[j], nums[i]) = (nums[i], nums[j]);\n    }", "doc_comment": "/* \u5143\u7d20\u4ea4\u6362 */"}, "code_tokens": ["void", "Swap", "static", "(", ",", ",", ")", "{", "}", "nums", "i", "j", "=", ";", "int", "int", "(", ")", "(", ")", "int", "[", "]", ",", "nums", "[", "i", "]", ",", "nums", "[", "j", "]", "nums", "[", "j", "]", "nums", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 64, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 16, "n_whitespaces": 26, "n_words": 17, "nloc": 3, "token_counts": 41}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/csharp/chapter_sorting/quick_sort.cs#16-28", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/csharp/chapter_sorting/quick_sort.cs", "language": "Java"}, "method": {"name": "Partition", "qualified_name": "codes.csharp.chapter_sorting.quick_sort.cs#Partition", "start_line": 16, "end_line": 28, "signature": "Partition(int[] nums, int left, int right)", "original_code": "static int Partition(int[] nums, int left, int right) {\n        // \u4ee5 nums[left] \u4e3a\u57fa\u51c6\u6570\n        int i = left, j = right;\n        while (i < j) {\n            while (i < j && nums[j] >= nums[left])\n                j--;          // \u4ece\u53f3\u5411\u5de6\u627e\u9996\u4e2a\u5c0f\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20\n            while (i < j && nums[i] <= nums[left])\n                i++;          // \u4ece\u5de6\u5411\u53f3\u627e\u9996\u4e2a\u5927\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20\n            Swap(nums, i, j); // \u4ea4\u6362\u8fd9\u4e24\u4e2a\u5143\u7d20\n        }\n        Swap(nums, i, left);  // \u5c06\u57fa\u51c6\u6570\u4ea4\u6362\u81f3\u4e24\u5b50\u6570\u7ec4\u7684\u5206\u754c\u7ebf\n        return i;             // \u8fd4\u56de\u57fa\u51c6\u6570\u7684\u7d22\u5f15\n    }", "doc_comment": "/* \u54e8\u5175\u5212\u5206 */"}, "code_tokens": ["Partition", "static", "int", "(", ",", ",", ")", "{", "// \u4ee5 nums[left] \u4e3a\u57fa\u51c6\u6570", "// \u5c06\u57fa\u51c6\u6570\u4ea4\u6362\u81f3\u4e24\u5b50\u6570\u7ec4\u7684\u5206\u754c\u7ebf", "// \u8fd4\u56de\u57fa\u51c6\u6570\u7684\u7d22\u5f15", "}", "nums", "left", "right", ",", ";", "while", ";", "return", "i", ";", "int", "int", "int", "i", "=", "left", "j", "=", "right", "(", ")", "{", "// \u4ece\u53f3\u5411\u5de6\u627e\u9996\u4e2a\u5c0f\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20", "// \u4ece\u5de6\u5411\u53f3\u627e\u9996\u4e2a\u5927\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20", "// \u4ea4\u6362\u8fd9\u4e24\u4e2a\u5143\u7d20", "}", "Swap", "int", "[", "]", "i", "<", "j", "while", "while", ";", "(", "nums", ",", "i", ",", "left", ")", "(", ")", ";", "(", ")", ";", "Swap", "&&", "j", "--", "&&", "i", "++", "(", "nums", ",", "i", ",", "j", ")", "i", "<", "j", ">=", "i", "<", "j", "<=", "nums", "[", "j", "]", "nums", "[", "left", "]", "nums", "[", "i", "]", "nums", "[", "left", "]"], "metrics": {"cyclomatic_complexity": 6, "n_ast_nodes": 146, "ast_depth": 11, "n_identifiers": 7, "vocab_size": 32, "n_whitespaces": 213, "n_words": 52, "nloc": 13, "token_counts": 99}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/csharp/chapter_sorting/quick_sort.cs#31-40", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/csharp/chapter_sorting/quick_sort.cs", "language": "Java"}, "method": {"name": "QuickSort", "qualified_name": "codes.csharp.chapter_sorting.quick_sort.cs#QuickSort", "start_line": 31, "end_line": 40, "signature": "QuickSort(int[] nums, int left, int right)", "original_code": "public static void QuickSort(int[] nums, int left, int right) {\n        // \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52\n        if (left >= right)\n            return;\n        // \u54e8\u5175\u5212\u5206\n        int pivot = Partition(nums, left, right);\n        // \u9012\u5f52\u5de6\u5b50\u6570\u7ec4\u3001\u53f3\u5b50\u6570\u7ec4\n        QuickSort(nums, left, pivot - 1);\n        QuickSort(nums, pivot + 1, right);\n    }", "doc_comment": "/* \u5feb\u901f\u6392\u5e8f */"}, "code_tokens": ["void", "QuickSort", "public", "static", "(", ",", ",", ")", "{", "// \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52", "// \u54e8\u5175\u5212\u5206", "// \u9012\u5f52\u5de6\u5b50\u6570\u7ec4\u3001\u53f3\u5b50\u6570\u7ec4", "}", "nums", "left", "right", "if", ";", ";", ";", "int", "int", "(", ")", "return", ";", "int", "pivot", "=", "QuickSort", "QuickSort", "int", "[", "]", "left", ">=", "right", "Partition", "(", "nums", ",", "left", ",", ")", "(", "nums", ",", ",", "right", ")", "(", "nums", ",", "left", ",", "right", ")", "pivot", "-", "1", "pivot", "+", "1"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 93, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 28, "n_whitespaces": 111, "n_words": 36, "nloc": 10, "token_counts": 63}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/csharp/chapter_sorting/quick_sort.cs#46-48", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/csharp/chapter_sorting/quick_sort.cs", "language": "Java"}, "method": {"name": "Swap", "qualified_name": "codes.csharp.chapter_sorting.quick_sort.cs#Swap", "start_line": 46, "end_line": 48, "signature": "Swap(int[] nums, int i, int j)", "original_code": "static void Swap(int[] nums, int i, int j) {\n        (nums[j], nums[i]) = (nums[i], nums[j]);\n    }", "doc_comment": "/* \u5143\u7d20\u4ea4\u6362 */"}, "code_tokens": ["void", "Swap", "static", "(", ",", ",", ")", "{", "}", "nums", "i", "j", "=", ";", "int", "int", "(", ")", "(", ")", "int", "[", "]", ",", "nums", "[", "i", "]", ",", "nums", "[", "j", "]", "nums", "[", "j", "]", "nums", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 64, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 16, "n_whitespaces": 26, "n_words": 17, "nloc": 3, "token_counts": 41}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/csharp/chapter_sorting/quick_sort.cs#51-58", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/csharp/chapter_sorting/quick_sort.cs", "language": "Java"}, "method": {"name": "MedianThree", "qualified_name": "codes.csharp.chapter_sorting.quick_sort.cs#MedianThree", "start_line": 51, "end_line": 58, "signature": "MedianThree(int[] nums, int left, int mid, int right)", "original_code": "static int MedianThree(int[] nums, int left, int mid, int right) {\n        int l = nums[left], m = nums[mid], r = nums[right];\n        if ((l <= m && m <= r) || (r <= m && m <= l))\n            return mid; // m \u5728 l \u548c r \u4e4b\u95f4\n        if ((m <= l && l <= r) || (r <= l && l <= m))\n            return left; // l \u5728 m \u548c r \u4e4b\u95f4\n        return right;\n    }", "doc_comment": "/* \u9009\u53d6\u4e09\u4e2a\u5019\u9009\u5143\u7d20\u7684\u4e2d\u4f4d\u6570 */"}, "code_tokens": ["MedianThree", "static", "int", "(", ",", ",", ",", ")", "{", "// m \u5728 l \u548c r \u4e4b\u95f4", "// l \u5728 m \u548c r \u4e4b\u95f4", "}", "nums", "left", "mid", "right", ",", ",", ";", "if", "if", "return", "right", ";", "int", "int", "int", "int", "l", "=", "m", "=", "r", "=", "(", ")", "return", "mid", ";", "(", ")", "return", "left", ";", "int", "[", "]", "nums", "[", "left", "]", "nums", "[", "mid", "]", "nums", "[", "right", "]", "||", "||", "(", ")", "(", ")", "(", ")", "(", ")", "&&", "&&", "&&", "&&", "l", "<=", "m", "m", "<=", "r", "r", "<=", "m", "m", "<=", "l", "m", "<=", "l", "l", "<=", "r", "r", "<=", "l", "l", "<=", "m"], "metrics": {"cyclomatic_complexity": 9, "n_ast_nodes": 146, "ast_depth": 10, "n_identifiers": 8, "vocab_size": 26, "n_whitespaces": 133, "n_words": 57, "nloc": 8, "token_counts": 97}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/csharp/chapter_sorting/quick_sort.cs#61-77", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/csharp/chapter_sorting/quick_sort.cs", "language": "Java"}, "method": {"name": "Partition", "qualified_name": "codes.csharp.chapter_sorting.quick_sort.cs#Partition", "start_line": 61, "end_line": 77, "signature": "Partition(int[] nums, int left, int right)", "original_code": "static int Partition(int[] nums, int left, int right) {\n        // \u9009\u53d6\u4e09\u4e2a\u5019\u9009\u5143\u7d20\u7684\u4e2d\u4f4d\u6570\n        int med = MedianThree(nums, left, (left + right) / 2, right);\n        // \u5c06\u4e2d\u4f4d\u6570\u4ea4\u6362\u81f3\u6570\u7ec4\u6700\u5de6\u7aef\n        Swap(nums, left, med);\n        // \u4ee5 nums[left] \u4e3a\u57fa\u51c6\u6570\n        int i = left, j = right;\n        while (i < j) {\n            while (i < j && nums[j] >= nums[left])\n                j--;          // \u4ece\u53f3\u5411\u5de6\u627e\u9996\u4e2a\u5c0f\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20\n            while (i < j && nums[i] <= nums[left])\n                i++;          // \u4ece\u5de6\u5411\u53f3\u627e\u9996\u4e2a\u5927\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20\n            Swap(nums, i, j); // \u4ea4\u6362\u8fd9\u4e24\u4e2a\u5143\u7d20\n        }\n        Swap(nums, i, left);  // \u5c06\u57fa\u51c6\u6570\u4ea4\u6362\u81f3\u4e24\u5b50\u6570\u7ec4\u7684\u5206\u754c\u7ebf\n        return i;             // \u8fd4\u56de\u57fa\u51c6\u6570\u7684\u7d22\u5f15\n    }", "doc_comment": "/* \u54e8\u5175\u5212\u5206\uff08\u4e09\u6570\u53d6\u4e2d\u503c\uff09 */"}, "code_tokens": ["Partition", "static", "int", "(", ",", ",", ")", "{", "// \u9009\u53d6\u4e09\u4e2a\u5019\u9009\u5143\u7d20\u7684\u4e2d\u4f4d\u6570", "// \u5c06\u4e2d\u4f4d\u6570\u4ea4\u6362\u81f3\u6570\u7ec4\u6700\u5de6\u7aef", "// \u4ee5 nums[left] \u4e3a\u57fa\u51c6\u6570", "// \u5c06\u57fa\u51c6\u6570\u4ea4\u6362\u81f3\u4e24\u5b50\u6570\u7ec4\u7684\u5206\u754c\u7ebf", "// \u8fd4\u56de\u57fa\u51c6\u6570\u7684\u7d22\u5f15", "}", "nums", "left", "right", ";", ";", ",", ";", "while", ";", "return", "i", ";", "int", "int", "int", "med", "=", "Swap", "int", "i", "=", "left", "j", "=", "right", "(", ")", "{", "// \u4ece\u53f3\u5411\u5de6\u627e\u9996\u4e2a\u5c0f\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20", "// \u4ece\u5de6\u5411\u53f3\u627e\u9996\u4e2a\u5927\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20", "// \u4ea4\u6362\u8fd9\u4e24\u4e2a\u5143\u7d20", "}", "Swap", "int", "[", "]", "MedianThree", "(", "nums", ",", "left", ",", "med", ")", "i", "<", "j", "while", "while", ";", "(", "nums", ",", "i", ",", "left", ")", "(", "nums", ",", "left", ",", ",", "right", ")", "(", ")", ";", "(", ")", ";", "Swap", "/", "2", "&&", "j", "--", "&&", "i", "++", "(", "nums", ",", "i", ",", "j", ")", "(", ")", "i", "<", "j", ">=", "i", "<", "j", "<=", "left", "+", "right", "nums", "[", "j", "]", "nums", "[", "left", "]", "nums", "[", "i", "]", "nums", "[", "left", "]"], "metrics": {"cyclomatic_complexity": 6, "n_ast_nodes": 188, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 39, "n_whitespaces": 263, "n_words": 67, "nloc": 17, "token_counts": 130}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/csharp/chapter_sorting/quick_sort.cs#80-89", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/csharp/chapter_sorting/quick_sort.cs", "language": "Java"}, "method": {"name": "QuickSort", "qualified_name": "codes.csharp.chapter_sorting.quick_sort.cs#QuickSort", "start_line": 80, "end_line": 89, "signature": "QuickSort(int[] nums, int left, int right)", "original_code": "public static void QuickSort(int[] nums, int left, int right) {\n        // \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52\n        if (left >= right)\n            return;\n        // \u54e8\u5175\u5212\u5206\n        int pivot = Partition(nums, left, right);\n        // \u9012\u5f52\u5de6\u5b50\u6570\u7ec4\u3001\u53f3\u5b50\u6570\u7ec4\n        QuickSort(nums, left, pivot - 1);\n        QuickSort(nums, pivot + 1, right);\n    }", "doc_comment": "/* \u5feb\u901f\u6392\u5e8f */"}, "code_tokens": ["void", "QuickSort", "public", "static", "(", ",", ",", ")", "{", "// \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52", "// \u54e8\u5175\u5212\u5206", "// \u9012\u5f52\u5de6\u5b50\u6570\u7ec4\u3001\u53f3\u5b50\u6570\u7ec4", "}", "nums", "left", "right", "if", ";", ";", ";", "int", "int", "(", ")", "return", ";", "int", "pivot", "=", "QuickSort", "QuickSort", "int", "[", "]", "left", ">=", "right", "Partition", "(", "nums", ",", "left", ",", ")", "(", "nums", ",", ",", "right", ")", "(", "nums", ",", "left", ",", "right", ")", "pivot", "-", "1", "pivot", "+", "1"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 93, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 28, "n_whitespaces": 111, "n_words": 36, "nloc": 10, "token_counts": 63}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/csharp/chapter_sorting/quick_sort.cs#95-97", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/csharp/chapter_sorting/quick_sort.cs", "language": "Java"}, "method": {"name": "Swap", "qualified_name": "codes.csharp.chapter_sorting.quick_sort.cs#Swap", "start_line": 95, "end_line": 97, "signature": "Swap(int[] nums, int i, int j)", "original_code": "static void Swap(int[] nums, int i, int j) {\n        (nums[j], nums[i]) = (nums[i], nums[j]);\n    }", "doc_comment": "/* \u5143\u7d20\u4ea4\u6362 */"}, "code_tokens": ["void", "Swap", "static", "(", ",", ",", ")", "{", "}", "nums", "i", "j", "=", ";", "int", "int", "(", ")", "(", ")", "int", "[", "]", ",", "nums", "[", "i", "]", ",", "nums", "[", "j", "]", "nums", "[", "j", "]", "nums", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 64, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 16, "n_whitespaces": 26, "n_words": 17, "nloc": 3, "token_counts": 41}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/csharp/chapter_sorting/quick_sort.cs#100-112", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/csharp/chapter_sorting/quick_sort.cs", "language": "Java"}, "method": {"name": "Partition", "qualified_name": "codes.csharp.chapter_sorting.quick_sort.cs#Partition", "start_line": 100, "end_line": 112, "signature": "Partition(int[] nums, int left, int right)", "original_code": "static int Partition(int[] nums, int left, int right) {\n        // \u4ee5 nums[left] \u4e3a\u57fa\u51c6\u6570\n        int i = left, j = right;\n        while (i < j) {\n            while (i < j && nums[j] >= nums[left])\n                j--;          // \u4ece\u53f3\u5411\u5de6\u627e\u9996\u4e2a\u5c0f\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20\n            while (i < j && nums[i] <= nums[left])\n                i++;          // \u4ece\u5de6\u5411\u53f3\u627e\u9996\u4e2a\u5927\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20\n            Swap(nums, i, j); // \u4ea4\u6362\u8fd9\u4e24\u4e2a\u5143\u7d20\n        }\n        Swap(nums, i, left);  // \u5c06\u57fa\u51c6\u6570\u4ea4\u6362\u81f3\u4e24\u5b50\u6570\u7ec4\u7684\u5206\u754c\u7ebf\n        return i; // \u8fd4\u56de\u57fa\u51c6\u6570\u7684\u7d22\u5f15\n    }", "doc_comment": "/* \u54e8\u5175\u5212\u5206 */"}, "code_tokens": ["Partition", "static", "int", "(", ",", ",", ")", "{", "// \u4ee5 nums[left] \u4e3a\u57fa\u51c6\u6570", "// \u5c06\u57fa\u51c6\u6570\u4ea4\u6362\u81f3\u4e24\u5b50\u6570\u7ec4\u7684\u5206\u754c\u7ebf", "// \u8fd4\u56de\u57fa\u51c6\u6570\u7684\u7d22\u5f15", "}", "nums", "left", "right", ",", ";", "while", ";", "return", "i", ";", "int", "int", "int", "i", "=", "left", "j", "=", "right", "(", ")", "{", "// \u4ece\u53f3\u5411\u5de6\u627e\u9996\u4e2a\u5c0f\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20", "// \u4ece\u5de6\u5411\u53f3\u627e\u9996\u4e2a\u5927\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20", "// \u4ea4\u6362\u8fd9\u4e24\u4e2a\u5143\u7d20", "}", "Swap", "int", "[", "]", "i", "<", "j", "while", "while", ";", "(", "nums", ",", "i", ",", "left", ")", "(", ")", ";", "(", ")", ";", "Swap", "&&", "j", "--", "&&", "i", "++", "(", "nums", ",", "i", ",", "j", ")", "i", "<", "j", ">=", "i", "<", "j", "<=", "nums", "[", "j", "]", "nums", "[", "left", "]", "nums", "[", "i", "]", "nums", "[", "left", "]"], "metrics": {"cyclomatic_complexity": 6, "n_ast_nodes": 146, "ast_depth": 11, "n_identifiers": 7, "vocab_size": 32, "n_whitespaces": 201, "n_words": 52, "nloc": 13, "token_counts": 99}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/csharp/chapter_sorting/quick_sort.cs#115-129", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/csharp/chapter_sorting/quick_sort.cs", "language": "Java"}, "method": {"name": "QuickSort", "qualified_name": "codes.csharp.chapter_sorting.quick_sort.cs#QuickSort", "start_line": 115, "end_line": 129, "signature": "QuickSort(int[] nums, int left, int right)", "original_code": "public static void QuickSort(int[] nums, int left, int right) {\n        // \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\n        while (left < right) {\n            // \u54e8\u5175\u5212\u5206\u64cd\u4f5c\n            int pivot = Partition(nums, left, right);\n            // \u5bf9\u4e24\u4e2a\u5b50\u6570\u7ec4\u4e2d\u8f83\u77ed\u7684\u90a3\u4e2a\u6267\u884c\u5feb\u901f\u6392\u5e8f\n            if (pivot - left < right - pivot) {\n                QuickSort(nums, left, pivot - 1);  // \u9012\u5f52\u6392\u5e8f\u5de6\u5b50\u6570\u7ec4\n                left = pivot + 1;  // \u5269\u4f59\u672a\u6392\u5e8f\u533a\u95f4\u4e3a [pivot + 1, right]\n            } else {\n                QuickSort(nums, pivot + 1, right); // \u9012\u5f52\u6392\u5e8f\u53f3\u5b50\u6570\u7ec4\n                right = pivot - 1; // \u5269\u4f59\u672a\u6392\u5e8f\u533a\u95f4\u4e3a [left, pivot - 1]\n            }\n        }\n    }", "doc_comment": "/* \u5feb\u901f\u6392\u5e8f\uff08\u9012\u5f52\u6df1\u5ea6\u4f18\u5316\uff09 */"}, "code_tokens": ["void", "QuickSort", "public", "static", "(", ",", ",", ")", "{", "// \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62", "}", "nums", "left", "right", "while", "int", "int", "(", ")", "{", "// \u54e8\u5175\u5212\u5206\u64cd\u4f5c", "// \u5bf9\u4e24\u4e2a\u5b50\u6570\u7ec4\u4e2d\u8f83\u77ed\u7684\u90a3\u4e2a\u6267\u884c\u5feb\u901f\u6392\u5e8f", "}", "int", "[", "]", "left", "<", "right", ";", "if", "else", "int", "pivot", "=", "(", ")", "{", "// \u9012\u5f52\u6392\u5e8f\u5de6\u5b50\u6570\u7ec4", "// \u5269\u4f59\u672a\u6392\u5e8f\u533a\u95f4\u4e3a [pivot + 1, right]", "}", "{", "// \u9012\u5f52\u6392\u5e8f\u53f3\u5b50\u6570\u7ec4", "// \u5269\u4f59\u672a\u6392\u5e8f\u533a\u95f4\u4e3a [left, pivot - 1]", "}", "Partition", "<", ";", ";", ";", ";", "(", "nums", ",", "left", ",", "right", ")", "pivot", "-", "left", "right", "-", "pivot", "QuickSort", "left", "=", "QuickSort", "right", "=", "(", "nums", ",", "left", ",", ")", "pivot", "+", "1", "(", "nums", ",", ",", "right", ")", "pivot", "-", "1", "pivot", "-", "1", "pivot", "+", "1"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 137, "ast_depth": 12, "n_identifiers": 6, "vocab_size": 33, "n_whitespaces": 245, "n_words": 56, "nloc": 15, "token_counts": 94}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/csharp/chapter_sorting/quick_sort.cs#134-149", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/csharp/chapter_sorting/quick_sort.cs", "language": "Java"}, "method": {"name": "Test", "qualified_name": "codes.csharp.chapter_sorting.quick_sort.cs#Test", "start_line": 134, "end_line": 149, "signature": "Test()", "original_code": "public void Test() {\n        /* \u5feb\u901f\u6392\u5e8f */\n        int[] nums = [2, 4, 1, 0, 3, 5];\n        quickSort.QuickSort(nums, 0, nums.Length - 1);\n        Console.WriteLine(\"\u5feb\u901f\u6392\u5e8f\u5b8c\u6210\u540e nums = \" + string.Join(\",\", nums));\n\n        /* \u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u51c6\u6570\u4f18\u5316\uff09 */\n        int[] nums1 = [2, 4, 1, 0, 3, 5];\n        QuickSortMedian.QuickSort(nums1, 0, nums1.Length - 1);\n        Console.WriteLine(\"\u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u51c6\u6570\u4f18\u5316\uff09\u5b8c\u6210\u540e nums1 = \" + string.Join(\",\", nums1));\n\n        /* \u5feb\u901f\u6392\u5e8f\uff08\u9012\u5f52\u6df1\u5ea6\u4f18\u5316\uff09 */\n        int[] nums2 = [2, 4, 1, 0, 3, 5];\n        QuickSortTailCall.QuickSort(nums2, 0, nums2.Length - 1);\n        Console.WriteLine(\"\u5feb\u901f\u6392\u5e8f\uff08\u9012\u5f52\u6df1\u5ea6\u4f18\u5316\uff09\u5b8c\u6210\u540e nums2 = \" + string.Join(\",\", nums2));\n    }", "doc_comment": ""}, "code_tokens": ["void", "Test", "public", "(", ")", "{", "/* \u5feb\u901f\u6392\u5e8f */", "/* \u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u51c6\u6570\u4f18\u5316\uff09 */", "/* \u5feb\u901f\u6392\u5e8f\uff08\u9012\u5f52\u6df1\u5ea6\u4f18\u5316\uff09 */", "}", ";", ";", ";", ";", ";", ";", ";", ";", ";", "nums", "=", "2", ",", "4", ",", "1", ",", "0", ",", "3", ",", "5", "]", "quickSort", ".", "QuickSort", "Console", ".", "WriteLine", "nums1", "=", "2", ",", "4", ",", "1", ",", "0", ",", "3", ",", "5", "]", "QuickSortMedian", ".", "QuickSort", "Console", ".", "WriteLine", "nums2", "=", "2", ",", "4", ",", "1", ",", "0", ",", "3", ",", "5", "]", "QuickSortTailCall", ".", "QuickSort", "Console", ".", "WriteLine", "int", "[", "]", "[", "(", "nums", ",", "0", ",", ")", "(", ")", "int", "[", "]", "[", "(", "nums1", ",", "0", ",", ")", "(", ")", "int", "[", "]", "[", "(", "nums2", ",", "0", ",", ")", "(", ")", "-", "1", "+", "-", "1", "+", "-", "1", "+", "nums", ".", "Length", "\"", "\u5feb\u901f\u6392\u5e8f\u5b8c\u6210\u540e nums = ", "\"", "string", ".", "Join", "nums1", ".", "Length", "\"", "\u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u51c6\u6570\u4f18\u5316\uff09\u5b8c\u6210\u540e nums1 = ", "\"", "string", ".", "Join", "nums2", ".", "Length", "\"", "\u5feb\u901f\u6392\u5e8f\uff08\u9012\u5f52\u6df1\u5ea6\u4f18\u5316\uff09\u5b8c\u6210\u540e nums2 = ", "\"", "string", ".", "Join", "(", ",", "nums", ")", "(", ",", "nums1", ")", "(", ",", "nums2", ")", "\"", ",", "\"", "\"", ",", "\"", "\"", ",", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 237, "ast_depth": 11, "n_identifiers": 13, "vocab_size": 41, "n_whitespaces": 178, "n_words": 78, "nloc": 14, "token_counts": 172}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/dart/chapter_sorting/quick_sort.dart#10-14", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/dart/chapter_sorting/quick_sort.dart", "language": "Java"}, "method": {"name": "_swap", "qualified_name": "codes.dart.chapter_sorting.quick_sort.dart#_swap", "start_line": 10, "end_line": 14, "signature": "_swap(List<int> nums, int i, int j)", "original_code": "static void _swap(List<int> nums, int i, int j) {\n    int tmp = nums[i];\n    nums[i] = nums[j];\n    nums[j] = tmp;\n  }", "doc_comment": "/* \u5143\u7d20\u4ea4\u6362 */"}, "code_tokens": ["void", "_swap", "static", "(", ",", ",", ")", "{", "}", "nums", "i", "j", ";", ";", ";", "List", "int", "int", "int", "tmp", "=", "=", "=", "tmp", "<", ">", "nums", "[", "i", "]", "nums", "[", "i", "]", "nums", "[", "j", "]", "nums", "[", "j", "]", "int"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 67, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 20, "n_whitespaces": 33, "n_words": 21, "nloc": 5, "token_counts": 43}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/dart/chapter_sorting/quick_sort.dart#17-27", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/dart/chapter_sorting/quick_sort.dart", "language": "Java"}, "method": {"name": "_partition", "qualified_name": "codes.dart.chapter_sorting.quick_sort.dart#_partition", "start_line": 17, "end_line": 27, "signature": "_partition(List<int> nums, int left, int right)", "original_code": "static int _partition(List<int> nums, int left, int right) {\n    // \u4ee5 nums[left] \u4e3a\u57fa\u51c6\u6570\n    int i = left, j = right;\n    while (i < j) {\n      while (i < j && nums[j] >= nums[left]) j--; // \u4ece\u53f3\u5411\u5de6\u627e\u9996\u4e2a\u5c0f\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20\n      while (i < j && nums[i] <= nums[left]) i++; // \u4ece\u5de6\u5411\u53f3\u627e\u9996\u4e2a\u5927\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20\n      _swap(nums, i, j); // \u4ea4\u6362\u8fd9\u4e24\u4e2a\u5143\u7d20\n    }\n    _swap(nums, i, left); // \u5c06\u57fa\u51c6\u6570\u4ea4\u6362\u81f3\u4e24\u5b50\u6570\u7ec4\u7684\u5206\u754c\u7ebf\n    return i; // \u8fd4\u56de\u57fa\u51c6\u6570\u7684\u7d22\u5f15\n  }", "doc_comment": "/* \u54e8\u5175\u5212\u5206 */"}, "code_tokens": ["_partition", "static", "int", "(", ",", ",", ")", "{", "// \u4ee5 nums[left] \u4e3a\u57fa\u51c6\u6570", "// \u5c06\u57fa\u51c6\u6570\u4ea4\u6362\u81f3\u4e24\u5b50\u6570\u7ec4\u7684\u5206\u754c\u7ebf", "// \u8fd4\u56de\u57fa\u51c6\u6570\u7684\u7d22\u5f15", "}", "nums", "left", "right", ",", ";", "while", ";", "return", "i", ";", "List", "int", "int", "int", "i", "=", "left", "j", "=", "right", "(", ")", "{", "// \u4ece\u53f3\u5411\u5de6\u627e\u9996\u4e2a\u5c0f\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20", "// \u4ece\u5de6\u5411\u53f3\u627e\u9996\u4e2a\u5927\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20", "// \u4ea4\u6362\u8fd9\u4e24\u4e2a\u5143\u7d20", "}", "_swap", "<", ">", "i", "<", "j", "while", "while", ";", "(", "nums", ",", "i", ",", "left", ")", "int", "(", ")", ";", "(", ")", ";", "_swap", "&&", "j", "--", "&&", "i", "++", "(", "nums", ",", "i", ",", "j", ")", "i", "<", "j", ">=", "i", "<", "j", "<=", "nums", "[", "j", "]", "nums", "[", "left", "]", "nums", "[", "i", "]", "nums", "[", "left", "]"], "metrics": {"cyclomatic_complexity": 6, "n_ast_nodes": 147, "ast_depth": 11, "n_identifiers": 7, "vocab_size": 34, "n_whitespaces": 106, "n_words": 53, "nloc": 11, "token_counts": 100}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/dart/chapter_sorting/quick_sort.dart#30-38", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/dart/chapter_sorting/quick_sort.dart", "language": "Java"}, "method": {"name": "quickSort", "qualified_name": "codes.dart.chapter_sorting.quick_sort.dart#quickSort", "start_line": 30, "end_line": 38, "signature": "quickSort(List<int> nums, int left, int right)", "original_code": "static void quickSort(List<int> nums, int left, int right) {\n    // \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52\n    if (left >= right) return;\n    // \u54e8\u5175\u5212\u5206\n    int pivot = _partition(nums, left, right);\n    // \u9012\u5f52\u5de6\u5b50\u6570\u7ec4\u3001\u53f3\u5b50\u6570\u7ec4\n    quickSort(nums, left, pivot - 1);\n    quickSort(nums, pivot + 1, right);\n  }", "doc_comment": "/* \u5feb\u901f\u6392\u5e8f */"}, "code_tokens": ["void", "quickSort", "static", "(", ",", ",", ")", "{", "// \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52", "// \u54e8\u5175\u5212\u5206", "// \u9012\u5f52\u5de6\u5b50\u6570\u7ec4\u3001\u53f3\u5b50\u6570\u7ec4", "}", "nums", "left", "right", "if", ";", ";", ";", "List", "int", "int", "(", ")", "return", ";", "int", "pivot", "=", "quickSort", "quickSort", "<", ">", "left", ">=", "right", "_partition", "(", "nums", ",", "left", ",", ")", "(", "nums", ",", ",", "right", ")", "int", "(", "nums", ",", "left", ",", "right", ")", "pivot", "-", "1", "pivot", "+", "1"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 93, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 28, "n_whitespaces": 68, "n_words": 36, "nloc": 9, "token_counts": 63}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/dart/chapter_sorting/quick_sort.dart#44-48", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/dart/chapter_sorting/quick_sort.dart", "language": "Java"}, "method": {"name": "_swap", "qualified_name": "codes.dart.chapter_sorting.quick_sort.dart#_swap", "start_line": 44, "end_line": 48, "signature": "_swap(List<int> nums, int i, int j)", "original_code": "static void _swap(List<int> nums, int i, int j) {\n    int tmp = nums[i];\n    nums[i] = nums[j];\n    nums[j] = tmp;\n  }", "doc_comment": "/* \u5143\u7d20\u4ea4\u6362 */"}, "code_tokens": ["void", "_swap", "static", "(", ",", ",", ")", "{", "}", "nums", "i", "j", ";", ";", ";", "List", "int", "int", "int", "tmp", "=", "=", "=", "tmp", "<", ">", "nums", "[", "i", "]", "nums", "[", "i", "]", "nums", "[", "j", "]", "nums", "[", "j", "]", "int"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 67, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 20, "n_whitespaces": 33, "n_words": 21, "nloc": 5, "token_counts": 43}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/dart/chapter_sorting/quick_sort.dart#51-58", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/dart/chapter_sorting/quick_sort.dart", "language": "Java"}, "method": {"name": "_medianThree", "qualified_name": "codes.dart.chapter_sorting.quick_sort.dart#_medianThree", "start_line": 51, "end_line": 58, "signature": "_medianThree(List<int> nums, int left, int mid, int right)", "original_code": "static int _medianThree(List<int> nums, int left, int mid, int right) {\n    int l = nums[left], m = nums[mid], r = nums[right];\n    if ((l <= m && m <= r) || (r <= m && m <= l))\n      return mid; // m \u5728 l \u548c r \u4e4b\u95f4\n    if ((m <= l && l <= r) || (r <= l && l <= m))\n      return left; // l \u5728 m \u548c r \u4e4b\u95f4\n    return right;\n  }", "doc_comment": "/* \u9009\u53d6\u4e09\u4e2a\u5019\u9009\u5143\u7d20\u7684\u4e2d\u4f4d\u6570 */"}, "code_tokens": ["_medianThree", "static", "int", "(", ",", ",", ",", ")", "{", "// m \u5728 l \u548c r \u4e4b\u95f4", "// l \u5728 m \u548c r \u4e4b\u95f4", "}", "nums", "left", "mid", "right", ",", ",", ";", "if", "if", "return", "right", ";", "List", "int", "int", "int", "int", "l", "=", "m", "=", "r", "=", "(", ")", "return", "mid", ";", "(", ")", "return", "left", ";", "<", ">", "nums", "[", "left", "]", "nums", "[", "mid", "]", "nums", "[", "right", "]", "||", "||", "int", "(", ")", "(", ")", "(", ")", "(", ")", "&&", "&&", "&&", "&&", "l", "<=", "m", "m", "<=", "r", "r", "<=", "m", "m", "<=", "l", "m", "<=", "l", "l", "<=", "r", "r", "<=", "l", "l", "<=", "m"], "metrics": {"cyclomatic_complexity": 9, "n_ast_nodes": 147, "ast_depth": 10, "n_identifiers": 8, "vocab_size": 29, "n_whitespaces": 103, "n_words": 58, "nloc": 8, "token_counts": 98}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/dart/chapter_sorting/quick_sort.dart#61-75", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/dart/chapter_sorting/quick_sort.dart", "language": "Java"}, "method": {"name": "_partition", "qualified_name": "codes.dart.chapter_sorting.quick_sort.dart#_partition", "start_line": 61, "end_line": 75, "signature": "_partition(List<int> nums, int left, int right)", "original_code": "static int _partition(List<int> nums, int left, int right) {\n    // \u9009\u53d6\u4e09\u4e2a\u5019\u9009\u5143\u7d20\u7684\u4e2d\u4f4d\u6570\n    int med = _medianThree(nums, left, (left + right) ~/ 2, right);\n    // \u5c06\u4e2d\u4f4d\u6570\u4ea4\u6362\u81f3\u6570\u7ec4\u6700\u5de6\u7aef\n    _swap(nums, left, med);\n    // \u4ee5 nums[left] \u4e3a\u57fa\u51c6\u6570\n    int i = left, j = right;\n    while (i < j) {\n      while (i < j && nums[j] >= nums[left]) j--; // \u4ece\u53f3\u5411\u5de6\u627e\u9996\u4e2a\u5c0f\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20\n      while (i < j && nums[i] <= nums[left]) i++; // \u4ece\u5de6\u5411\u53f3\u627e\u9996\u4e2a\u5927\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20\n      _swap(nums, i, j); // \u4ea4\u6362\u8fd9\u4e24\u4e2a\u5143\u7d20\n    }\n    _swap(nums, i, left); // \u5c06\u57fa\u51c6\u6570\u4ea4\u6362\u81f3\u4e24\u5b50\u6570\u7ec4\u7684\u5206\u754c\u7ebf\n    return i; // \u8fd4\u56de\u57fa\u51c6\u6570\u7684\u7d22\u5f15\n  }", "doc_comment": "/* \u54e8\u5175\u5212\u5206\uff08\u4e09\u6570\u53d6\u4e2d\u503c\uff09 */"}, "code_tokens": ["_partition", "static", "int", "(", ",", ",", ")", "{", "// \u9009\u53d6\u4e09\u4e2a\u5019\u9009\u5143\u7d20\u7684\u4e2d\u4f4d\u6570", "// \u5c06\u4e2d\u4f4d\u6570\u4ea4\u6362\u81f3\u6570\u7ec4\u6700\u5de6\u7aef", "// \u4ee5 nums[left] \u4e3a\u57fa\u51c6\u6570", "// \u5c06\u57fa\u51c6\u6570\u4ea4\u6362\u81f3\u4e24\u5b50\u6570\u7ec4\u7684\u5206\u754c\u7ebf", "// \u8fd4\u56de\u57fa\u51c6\u6570\u7684\u7d22\u5f15", "}", "nums", "left", "right", ";", ";", ",", ";", "while", ";", "return", "i", ";", "List", "int", "int", "int", "med", "=", "_swap", "int", "i", "=", "left", "j", "=", "right", "(", ")", "{", "// \u4ece\u53f3\u5411\u5de6\u627e\u9996\u4e2a\u5c0f\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20", "// \u4ece\u5de6\u5411\u53f3\u627e\u9996\u4e2a\u5927\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20", "// \u4ea4\u6362\u8fd9\u4e24\u4e2a\u5143\u7d20", "}", "_swap", "<", ">", "_medianThree", "(", "nums", ",", "left", ",", "med", ")", "i", "<", "j", "while", "while", ";", "(", "nums", ",", "i", ",", "left", ")", "int", "(", "nums", ",", "left", ",", ",", "right", ")", "(", ")", ";", "(", ")", ";", "_swap", "/", "2", "&&", "j", "--", "&&", "i", "++", "(", "nums", ",", "i", ",", "j", ")", "(", ")", "~", "i", "<", "j", ">=", "i", "<", "j", "<=", "left", "+", "right", "nums", "[", "j", "]", "nums", "[", "left", "]", "nums", "[", "i", "]", "nums", "[", "left", "]"], "metrics": {"cyclomatic_complexity": 6, "n_ast_nodes": 191, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 42, "n_whitespaces": 140, "n_words": 68, "nloc": 15, "token_counts": 132}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/dart/chapter_sorting/quick_sort.dart#78-86", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/dart/chapter_sorting/quick_sort.dart", "language": "Java"}, "method": {"name": "quickSort", "qualified_name": "codes.dart.chapter_sorting.quick_sort.dart#quickSort", "start_line": 78, "end_line": 86, "signature": "quickSort(List<int> nums, int left, int right)", "original_code": "static void quickSort(List<int> nums, int left, int right) {\n    // \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52\n    if (left >= right) return;\n    // \u54e8\u5175\u5212\u5206\n    int pivot = _partition(nums, left, right);\n    // \u9012\u5f52\u5de6\u5b50\u6570\u7ec4\u3001\u53f3\u5b50\u6570\u7ec4\n    quickSort(nums, left, pivot - 1);\n    quickSort(nums, pivot + 1, right);\n  }", "doc_comment": "/* \u5feb\u901f\u6392\u5e8f */"}, "code_tokens": ["void", "quickSort", "static", "(", ",", ",", ")", "{", "// \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52", "// \u54e8\u5175\u5212\u5206", "// \u9012\u5f52\u5de6\u5b50\u6570\u7ec4\u3001\u53f3\u5b50\u6570\u7ec4", "}", "nums", "left", "right", "if", ";", ";", ";", "List", "int", "int", "(", ")", "return", ";", "int", "pivot", "=", "quickSort", "quickSort", "<", ">", "left", ">=", "right", "_partition", "(", "nums", ",", "left", ",", ")", "(", "nums", ",", ",", "right", ")", "int", "(", "nums", ",", "left", ",", "right", ")", "pivot", "-", "1", "pivot", "+", "1"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 93, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 28, "n_whitespaces": 68, "n_words": 36, "nloc": 9, "token_counts": 63}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/dart/chapter_sorting/quick_sort.dart#92-96", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/dart/chapter_sorting/quick_sort.dart", "language": "Java"}, "method": {"name": "_swap", "qualified_name": "codes.dart.chapter_sorting.quick_sort.dart#_swap", "start_line": 92, "end_line": 96, "signature": "_swap(List<int> nums, int i, int j)", "original_code": "static void _swap(List<int> nums, int i, int j) {\n    int tmp = nums[i];\n    nums[i] = nums[j];\n    nums[j] = tmp;\n  }", "doc_comment": "/* \u5143\u7d20\u4ea4\u6362 */"}, "code_tokens": ["void", "_swap", "static", "(", ",", ",", ")", "{", "}", "nums", "i", "j", ";", ";", ";", "List", "int", "int", "int", "tmp", "=", "=", "=", "tmp", "<", ">", "nums", "[", "i", "]", "nums", "[", "i", "]", "nums", "[", "j", "]", "nums", "[", "j", "]", "int"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 67, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 20, "n_whitespaces": 33, "n_words": 21, "nloc": 5, "token_counts": 43}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/dart/chapter_sorting/quick_sort.dart#99-109", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/dart/chapter_sorting/quick_sort.dart", "language": "Java"}, "method": {"name": "_partition", "qualified_name": "codes.dart.chapter_sorting.quick_sort.dart#_partition", "start_line": 99, "end_line": 109, "signature": "_partition(List<int> nums, int left, int right)", "original_code": "static int _partition(List<int> nums, int left, int right) {\n    // \u4ee5 nums[left] \u4e3a\u57fa\u51c6\u6570\n    int i = left, j = right;\n    while (i < j) {\n      while (i < j && nums[j] >= nums[left]) j--; // \u4ece\u53f3\u5411\u5de6\u627e\u9996\u4e2a\u5c0f\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20\n      while (i < j && nums[i] <= nums[left]) i++; // \u4ece\u5de6\u5411\u53f3\u627e\u9996\u4e2a\u5927\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20\n      _swap(nums, i, j); // \u4ea4\u6362\u8fd9\u4e24\u4e2a\u5143\u7d20\n    }\n    _swap(nums, i, left); // \u5c06\u57fa\u51c6\u6570\u4ea4\u6362\u81f3\u4e24\u5b50\u6570\u7ec4\u7684\u5206\u754c\u7ebf\n    return i; // \u8fd4\u56de\u57fa\u51c6\u6570\u7684\u7d22\u5f15\n  }", "doc_comment": "/* \u54e8\u5175\u5212\u5206 */"}, "code_tokens": ["_partition", "static", "int", "(", ",", ",", ")", "{", "// \u4ee5 nums[left] \u4e3a\u57fa\u51c6\u6570", "// \u5c06\u57fa\u51c6\u6570\u4ea4\u6362\u81f3\u4e24\u5b50\u6570\u7ec4\u7684\u5206\u754c\u7ebf", "// \u8fd4\u56de\u57fa\u51c6\u6570\u7684\u7d22\u5f15", "}", "nums", "left", "right", ",", ";", "while", ";", "return", "i", ";", "List", "int", "int", "int", "i", "=", "left", "j", "=", "right", "(", ")", "{", "// \u4ece\u53f3\u5411\u5de6\u627e\u9996\u4e2a\u5c0f\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20", "// \u4ece\u5de6\u5411\u53f3\u627e\u9996\u4e2a\u5927\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20", "// \u4ea4\u6362\u8fd9\u4e24\u4e2a\u5143\u7d20", "}", "_swap", "<", ">", "i", "<", "j", "while", "while", ";", "(", "nums", ",", "i", ",", "left", ")", "int", "(", ")", ";", "(", ")", ";", "_swap", "&&", "j", "--", "&&", "i", "++", "(", "nums", ",", "i", ",", "j", ")", "i", "<", "j", ">=", "i", "<", "j", "<=", "nums", "[", "j", "]", "nums", "[", "left", "]", "nums", "[", "i", "]", "nums", "[", "left", "]"], "metrics": {"cyclomatic_complexity": 6, "n_ast_nodes": 147, "ast_depth": 11, "n_identifiers": 7, "vocab_size": 34, "n_whitespaces": 106, "n_words": 53, "nloc": 11, "token_counts": 100}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/dart/chapter_sorting/quick_sort.dart#112-126", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/dart/chapter_sorting/quick_sort.dart", "language": "Java"}, "method": {"name": "quickSort", "qualified_name": "codes.dart.chapter_sorting.quick_sort.dart#quickSort", "start_line": 112, "end_line": 126, "signature": "quickSort(List<int> nums, int left, int right)", "original_code": "static void quickSort(List<int> nums, int left, int right) {\n    // \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\n    while (left < right) {\n      // \u54e8\u5175\u5212\u5206\u64cd\u4f5c\n      int pivot = _partition(nums, left, right);\n      // \u5bf9\u4e24\u4e2a\u5b50\u6570\u7ec4\u4e2d\u8f83\u77ed\u7684\u90a3\u4e2a\u6267\u884c\u5feb\u901f\u6392\u5e8f\n      if (pivot - left < right - pivot) {\n        quickSort(nums, left, pivot - 1); // \u9012\u5f52\u6392\u5e8f\u5de6\u5b50\u6570\u7ec4\n        left = pivot + 1; // \u5269\u4f59\u672a\u6392\u5e8f\u533a\u95f4\u4e3a [pivot + 1, right]\n      } else {\n        quickSort(nums, pivot + 1, right); // \u9012\u5f52\u6392\u5e8f\u53f3\u5b50\u6570\u7ec4\n        right = pivot - 1; // \u5269\u4f59\u672a\u6392\u5e8f\u533a\u95f4\u4e3a [left, pivot - 1]\n      }\n    }\n  }", "doc_comment": "/* \u5feb\u901f\u6392\u5e8f\uff08\u9012\u5f52\u6df1\u5ea6\u4f18\u5316\uff09 */"}, "code_tokens": ["void", "quickSort", "static", "(", ",", ",", ")", "{", "// \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62", "}", "nums", "left", "right", "while", "List", "int", "int", "(", ")", "{", "// \u54e8\u5175\u5212\u5206\u64cd\u4f5c", "// \u5bf9\u4e24\u4e2a\u5b50\u6570\u7ec4\u4e2d\u8f83\u77ed\u7684\u90a3\u4e2a\u6267\u884c\u5feb\u901f\u6392\u5e8f", "}", "<", ">", "left", "<", "right", ";", "if", "else", "int", "int", "pivot", "=", "(", ")", "{", "// \u9012\u5f52\u6392\u5e8f\u5de6\u5b50\u6570\u7ec4", "// \u5269\u4f59\u672a\u6392\u5e8f\u533a\u95f4\u4e3a [pivot + 1, right]", "}", "{", "// \u9012\u5f52\u6392\u5e8f\u53f3\u5b50\u6570\u7ec4", "// \u5269\u4f59\u672a\u6392\u5e8f\u533a\u95f4\u4e3a [left, pivot - 1]", "}", "_partition", "<", ";", ";", ";", ";", "(", "nums", ",", "left", ",", "right", ")", "pivot", "-", "left", "right", "-", "pivot", "quickSort", "left", "=", "quickSort", "right", "=", "(", "nums", ",", "left", ",", ")", "pivot", "+", "1", "(", "nums", ",", ",", "right", ")", "pivot", "-", "1", "pivot", "-", "1", "pivot", "+", "1"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 137, "ast_depth": 12, "n_identifiers": 6, "vocab_size": 32, "n_whitespaces": 160, "n_words": 56, "nloc": 15, "token_counts": 94}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/dart/chapter_sorting/quick_sort.dart#130-145", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/dart/chapter_sorting/quick_sort.dart", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.dart.chapter_sorting.quick_sort.dart#main", "start_line": 130, "end_line": 145, "signature": "main()", "original_code": "void main() {\n  /* \u5feb\u901f\u6392\u5e8f */\n  List<int> nums = [2, 4, 1, 0, 3, 5];\n  QuickSort.quickSort(nums, 0, nums.length - 1);\n  print(\"\u5feb\u901f\u6392\u5e8f\u5b8c\u6210\u540e nums = $nums\");\n\n  /* \u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u51c6\u6570\u4f18\u5316\uff09 */\n  List<int> nums1 = [2, 4, 1, 0, 3, 5];\n  QuickSortMedian.quickSort(nums1, 0, nums1.length - 1);\n  print(\"\u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u51c6\u6570\u4f18\u5316\uff09\u5b8c\u6210\u540e nums1 = $nums1\");\n\n  /* \u5feb\u901f\u6392\u5e8f\uff08\u9012\u5f52\u6df1\u5ea6\u4f18\u5316\uff09 */\n  List<int> nums2 = [2, 4, 1, 0, 3, 5];\n  QuickSortTailCall.quickSort(nums2, 0, nums2.length - 1);\n  print(\"\u5feb\u901f\u6392\u5e8f\uff08\u9012\u5f52\u6df1\u5ea6\u4f18\u5316\uff09\u5b8c\u6210\u540e nums2 = $nums2\");\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["void", "main", "(", ")", "{", "/* \u5feb\u901f\u6392\u5e8f */", "/* \u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u51c6\u6570\u4f18\u5316\uff09 */", "/* \u5feb\u901f\u6392\u5e8f\uff08\u9012\u5f52\u6df1\u5ea6\u4f18\u5316\uff09 */", "}", ";", ";", ";", ";", ";", ";", ";", ";", ";", "List", "nums", "=", "2", ",", "4", ",", "1", ",", "0", ",", "3", ",", "5", "]", "QuickSort", ".", "quickSort", "print", "List", "nums1", "=", "2", ",", "4", ",", "1", ",", "0", ",", "3", ",", "5", "]", "QuickSortMedian", ".", "quickSort", "print", "List", "nums2", "=", "2", ",", "4", ",", "1", ",", "0", ",", "3", ",", "5", "]", "QuickSortTailCall", ".", "quickSort", "print", "<", ">", "[", "(", "nums", ",", "0", ",", ")", "(", ")", "<", ">", "[", "(", "nums1", ",", "0", ",", ")", "(", ")", "<", ">", "[", "(", "nums2", ",", "0", ",", ")", "(", ")", "int", "-", "1", "\"", "\u5feb\u901f\u6392\u5e8f\u5b8c\u6210\u540e nums = $nums", "\"", "int", "-", "1", "\"", "\u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u51c6\u6570\u4f18\u5316\uff09\u5b8c\u6210\u540e nums1 = $nums1", "\"", "int", "-", "1", "\"", "\u5feb\u901f\u6392\u5e8f\uff08\u9012\u5f52\u6df1\u5ea6\u4f18\u5316\uff09\u5b8c\u6210\u540e nums2 = $nums2", "\"", "nums", ".", "length", "nums1", ".", "length", "nums2", ".", "length"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 187, "ast_depth": 9, "n_identifiers": 10, "vocab_size": 39, "n_whitespaces": 92, "n_words": 71, "nloc": 14, "token_counts": 135}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/go/chapter_sorting/quick_sort.go#32-46", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/go/chapter_sorting/quick_sort.go", "language": "Java"}, "method": {"name": "quickSort", "qualified_name": "codes.go.chapter_sorting.quick_sort.go#quickSort", "start_line": 32, "end_line": 46, "signature": "quickSort(nums []int, left, right int)", "original_code": "i // \u8fd4\u56de\u57fa\u51c6\u6570\u7684\u7d22\u5f15\n}\n\n/* \u5feb\u901f\u6392\u5e8f */\nfunc (q *quickSort) quickSort(nums []int, left, right int) {\n\t// \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52\n\tif left >= right {\n\t\treturn\n\t}\n\t// \u54e8\u5175\u5212\u5206\n\tpivot := q.partition(nums, left, right)\n\t// \u9012\u5f52\u5de6\u5b50\u6570\u7ec4\u3001\u53f3\u5b50\u6570\u7ec4\n\tq.quickSort(nums, left, pivot-1)\n\tq.quickSort(nums, pivot+1, right)\n}", "doc_comment": ""}, "code_tokens": ["i", "// \u8fd4\u56de\u57fa\u51c6\u6570\u7684\u7d22\u5f15", "/* \u5feb\u901f\u6392\u5e8f */", "quickSort", "}", "func", "(", ",", ",", ")", "{", "// \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52", "// \u54e8\u5175\u5212\u5206", "}", "(", ")", "int", "left", "", "right", "int", "if", "{", "}", "", "q", "quickSort", "nums", "left", ">=", "right", "return", "pivot", "=", "*", "[", "]", ":", ".", "quickSort", "// \u9012\u5f52\u5de6\u5b50\u6570\u7ec4\u3001\u53f3\u5b50\u6570\u7ec4", ".", "quickSort", "q", "(", "nums", ",", ",", "right", ")", "q", ".", "partition", "q", "(", "nums", ",", "left", ",", ")", "pivot", "+", "1", "(", "nums", ",", "left", ",", "right", ")", "pivot", "-", "1"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 104, "ast_depth": 10, "n_identifiers": 10, "vocab_size": 33, "n_whitespaces": 53, "n_words": 40, "nloc": 14, "token_counts": 73}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/go/chapter_sorting/quick_sort.go#80-94", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/go/chapter_sorting/quick_sort.go", "language": "Java"}, "method": {"name": "quickSort", "qualified_name": "codes.go.chapter_sorting.quick_sort.go#quickSort", "start_line": 80, "end_line": 94, "signature": "quickSort(nums []int, left, right int)", "original_code": "i //\u8fd4\u56de\u57fa\u51c6\u6570\u7684\u7d22\u5f15\n}\n\n/* \u5feb\u901f\u6392\u5e8f */\nfunc (q *quickSortMedian) quickSort(nums []int, left, right int) {\n\t// \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52\n\tif left >= right {\n\t\treturn\n\t}\n\t// \u54e8\u5175\u5212\u5206\n\tpivot := q.partition(nums, left, right)\n\t// \u9012\u5f52\u5de6\u5b50\u6570\u7ec4\u3001\u53f3\u5b50\u6570\u7ec4\n\tq.quickSort(nums, left, pivot-1)\n\tq.quickSort(nums, pivot+1, right)\n}", "doc_comment": ""}, "code_tokens": ["i", "//\u8fd4\u56de\u57fa\u51c6\u6570\u7684\u7d22\u5f15", "/* \u5feb\u901f\u6392\u5e8f */", "quickSort", "}", "func", "(", ",", ",", ")", "{", "// \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52", "// \u54e8\u5175\u5212\u5206", "}", "(", ")", "int", "left", "", "right", "int", "if", "{", "}", "", "q", "quickSortMedian", "nums", "left", ">=", "right", "return", "pivot", "=", "*", "[", "]", ":", ".", "quickSort", "// \u9012\u5f52\u5de6\u5b50\u6570\u7ec4\u3001\u53f3\u5b50\u6570\u7ec4", ".", "quickSort", "q", "(", "nums", ",", ",", "right", ")", "q", ".", "partition", "q", "(", "nums", ",", "left", ",", ")", "pivot", "+", "1", "(", "nums", ",", "left", ",", "right", ")", "pivot", "-", "1"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 104, "ast_depth": 10, "n_identifiers": 11, "vocab_size": 34, "n_whitespaces": 52, "n_words": 40, "nloc": 14, "token_counts": 73}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/go/chapter_sorting/quick_sort.go#112-130", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/go/chapter_sorting/quick_sort.go", "language": "Java"}, "method": {"name": "quickSort", "qualified_name": "codes.go.chapter_sorting.quick_sort.go#quickSort", "start_line": 112, "end_line": 130, "signature": "quickSort(nums []int, left, right int)", "original_code": "i // \u8fd4\u56de\u57fa\u51c6\u6570\u7684\u7d22\u5f15\n}\n\n/* \u5feb\u901f\u6392\u5e8f\uff08\u9012\u5f52\u6df1\u5ea6\u4f18\u5316\uff09*/\nfunc (q *quickSortTailCall) quickSort(nums []int, left, right int) {\n\t// \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\n\tfor left < right {\n\t\t// \u54e8\u5175\u5212\u5206\u64cd\u4f5c\n\t\tpivot := q.partition(nums, left, right)\n\t\t// \u5bf9\u4e24\u4e2a\u5b50\u6570\u7ec4\u4e2d\u8f83\u77ed\u7684\u90a3\u4e2a\u6267\u884c\u5feb\u901f\u6392\u5e8f\n\t\tif pivot-left < right-pivot {\n\t\t\tq.quickSort(nums, left, pivot-1) // \u9012\u5f52\u6392\u5e8f\u5de6\u5b50\u6570\u7ec4\n\t\t\tleft = pivot + 1                 // \u5269\u4f59\u672a\u6392\u5e8f\u533a\u95f4\u4e3a [pivot + 1, right]\n\t\t} else {\n\t\t\tq.quickSort(nums, pivot+1, right) // \u9012\u5f52\u6392\u5e8f\u53f3\u5b50\u6570\u7ec4\n\t\t\tright = pivot - 1                 // \u5269\u4f59\u672a\u6392\u5e8f\u533a\u95f4\u4e3a [left, pivot - 1]\n\t\t}\n\t}\n}", "doc_comment": ""}, "code_tokens": ["i", "// \u8fd4\u56de\u57fa\u51c6\u6570\u7684\u7d22\u5f15", "/* \u5feb\u901f\u6392\u5e8f\uff08\u9012\u5f52\u6df1\u5ea6\u4f18\u5316\uff09*/", "quickSort", "}", "func", "(", ",", ",", ")", "{", "// \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62", "}", "(", ")", "int", "left", "", "right", "int", "for", "left", "<", "right", "{", "// \u54e8\u5175\u5212\u5206\u64cd\u4f5c", "}", "q", "quickSortTailCall", "nums", "pivot", ":", "else", "", "{", "}", "*", "[", "]", "=", "{", "}", "// \u9012\u5f52\u6392\u5e8f\u53f3\u5b50\u6570\u7ec4", "", "// \u5269\u4f59\u672a\u6392\u5e8f\u533a\u95f4\u4e3a [left, pivot - 1]", "", "<", "// \u9012\u5f52\u6392\u5e8f\u5de6\u5b50\u6570\u7ec4", "", "// \u5269\u4f59\u672a\u6392\u5e8f\u533a\u95f4\u4e3a [pivot + 1, right]", "", "q", ".", "quickSort", "right", "=", "// \u5bf9\u4e24\u4e2a\u5b50\u6570\u7ec4\u4e2d\u8f83\u77ed\u7684\u90a3\u4e2a\u6267\u884c\u5feb\u901f\u6392\u5e8f", "-", "left", "right", "-", "pivot", "q", ".", "quickSort", "left", "=", "(", "nums", ",", ",", "right", ")", "pivot", "-", "1", "q", ".", "partition", "if", "pivot", "(", "nums", ",", "left", ",", ")", "pivot", "+", "1", "pivot", "+", "1", "(", "nums", ",", "left", ",", "right", ")", "pivot", "-", "1"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 144, "ast_depth": 11, "n_identifiers": 13, "vocab_size": 39, "n_whitespaces": 135, "n_words": 61, "nloc": 18, "token_counts": 103}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/go/chapter_sorting/quick_sort_test.go#21-26", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/go/chapter_sorting/quick_sort_test.go", "language": "Java"}, "method": {"name": "TestQuickSortMedian", "qualified_name": "codes.go.chapter_sorting.quick_sort_test.go#TestQuickSortMedian", "start_line": 21, "end_line": 26, "signature": "TestQuickSortMedian(t *testing.T)", "original_code": "func TestQuickSortMedian(t *testing.T) {\n\tq := quickSortMedian{}\n\tnums := []int{4, 1, 3, 1, 5, 2}\n\tq.quickSort(nums, 0, len(nums)-1)\n\tfmt.Println(\"\u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u51c6\u6570\u4f18\u5316\uff09\u5b8c\u6210\u540e nums = \", nums)\n}", "doc_comment": "// \u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u51c6\u6570\u4f18\u5316\uff09"}, "code_tokens": ["func", "TestQuickSortMedian", "(", ")", "{", "}", "t", "testing", ".", "T", "", "{", "}", "", "{", "}", "", "*", "q", "=", "quickSortMedian", "nums", "int", "4", ",", "1", ",", "3", ",", "1", ",", "5", ",", "2", ".", "Println", ":", ":", "=", "[", "]", "q", ".", "quickSort", "fmt", "(", ",", "nums", ")", "(", "nums", ",", "0", ",", ")", "\"", "\u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u51c6\u6570\u4f18\u5316\uff09\u5b8c\u6210\u540e nums = ", "\"", "-", "1", "len", "(", "nums", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 91, "ast_depth": 11, "n_identifiers": 11, "vocab_size": 34, "n_whitespaces": 27, "n_words": 29, "nloc": 6, "token_counts": 64}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/go/chapter_sorting/quick_sort_test.go#29-34", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/go/chapter_sorting/quick_sort_test.go", "language": "Java"}, "method": {"name": "TestQuickSortTailCall", "qualified_name": "codes.go.chapter_sorting.quick_sort_test.go#TestQuickSortTailCall", "start_line": 29, "end_line": 34, "signature": "TestQuickSortTailCall(t *testing.T)", "original_code": "func TestQuickSortTailCall(t *testing.T) {\n\tq := quickSortTailCall{}\n\tnums := []int{4, 1, 3, 1, 5, 2}\n\tq.quickSort(nums, 0, len(nums)-1)\n\tfmt.Println(\"\u5feb\u901f\u6392\u5e8f\uff08\u9012\u5f52\u6df1\u5ea6\u4f18\u5316\uff09\u5b8c\u6210\u540e nums = \", nums)\n}", "doc_comment": "// \u5feb\u901f\u6392\u5e8f\uff08\u9012\u5f52\u6df1\u5ea6\u4f18\u5316\uff09"}, "code_tokens": ["func", "TestQuickSortTailCall", "(", ")", "{", "}", "t", "testing", ".", "T", "", "{", "}", "", "{", "}", "", "*", "q", "=", "quickSortTailCall", "nums", "int", "4", ",", "1", ",", "3", ",", "1", ",", "5", ",", "2", ".", "Println", ":", ":", "=", "[", "]", "q", ".", "quickSort", "fmt", "(", ",", "nums", ")", "(", "nums", ",", "0", ",", ")", "\"", "\u5feb\u901f\u6392\u5e8f\uff08\u9012\u5f52\u6df1\u5ea6\u4f18\u5316\uff09\u5b8c\u6210\u540e nums = ", "\"", "-", "1", "len", "(", "nums", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 91, "ast_depth": 11, "n_identifiers": 11, "vocab_size": 34, "n_whitespaces": 27, "n_words": 29, "nloc": 6, "token_counts": 64}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/java/chapter_sorting/quick_sort.java#14-18", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/java/chapter_sorting/quick_sort.java", "language": "Java"}, "method": {"name": "swap", "qualified_name": "codes.java.chapter_sorting.quick_sort#swap", "start_line": 14, "end_line": 18, "signature": "swap(int[] nums, int i, int j)", "original_code": "static void swap(int[] nums, int i, int j) {\n        int tmp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = tmp;\n    }", "doc_comment": "/* \u5143\u7d20\u4ea4\u6362 */"}, "code_tokens": ["void", "swap", "static", "(", ",", ",", ")", "{", "}", "nums", "i", "j", ";", ";", ";", "int", "int", "int", "tmp", "=", "=", "=", "tmp", "int", "[", "]", "nums", "[", "i", "]", "nums", "[", "i", "]", "nums", "[", "j", "]", "nums", "[", "j", "]"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 66, "ast_depth": 7, "n_identifiers": 5, "vocab_size": 17, "n_whitespaces": 47, "n_words": 20, "nloc": 5, "token_counts": 42}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/java/chapter_sorting/quick_sort.java#21-33", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/java/chapter_sorting/quick_sort.java", "language": "Java"}, "method": {"name": "partition", "qualified_name": "codes.java.chapter_sorting.quick_sort#partition", "start_line": 21, "end_line": 33, "signature": "partition(int[] nums, int left, int right)", "original_code": "static int partition(int[] nums, int left, int right) {\n        // \u4ee5 nums[left] \u4e3a\u57fa\u51c6\u6570\n        int i = left, j = right;\n        while (i < j) {\n            while (i < j && nums[j] >= nums[left])\n                j--;          // \u4ece\u53f3\u5411\u5de6\u627e\u9996\u4e2a\u5c0f\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20\n            while (i < j && nums[i] <= nums[left])\n                i++;          // \u4ece\u5de6\u5411\u53f3\u627e\u9996\u4e2a\u5927\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20\n            swap(nums, i, j); // \u4ea4\u6362\u8fd9\u4e24\u4e2a\u5143\u7d20\n        }\n        swap(nums, i, left);  // \u5c06\u57fa\u51c6\u6570\u4ea4\u6362\u81f3\u4e24\u5b50\u6570\u7ec4\u7684\u5206\u754c\u7ebf\n        return i;             // \u8fd4\u56de\u57fa\u51c6\u6570\u7684\u7d22\u5f15\n    }", "doc_comment": "/* \u54e8\u5175\u5212\u5206 */"}, "code_tokens": ["partition", "static", "int", "(", ",", ",", ")", "{", "// \u4ee5 nums[left] \u4e3a\u57fa\u51c6\u6570", "// \u5c06\u57fa\u51c6\u6570\u4ea4\u6362\u81f3\u4e24\u5b50\u6570\u7ec4\u7684\u5206\u754c\u7ebf", "// \u8fd4\u56de\u57fa\u51c6\u6570\u7684\u7d22\u5f15", "}", "nums", "left", "right", ",", ";", "while", ";", "return", "i", ";", "int", "int", "int", "i", "=", "left", "j", "=", "right", "(", ")", "{", "// \u4ece\u53f3\u5411\u5de6\u627e\u9996\u4e2a\u5c0f\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20", "// \u4ece\u5de6\u5411\u53f3\u627e\u9996\u4e2a\u5927\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20", "// \u4ea4\u6362\u8fd9\u4e24\u4e2a\u5143\u7d20", "}", "swap", "int", "[", "]", "i", "<", "j", "while", "while", ";", "(", "nums", ",", "i", ",", "left", ")", "(", ")", ";", "(", ")", ";", "swap", "&&", "j", "--", "&&", "i", "++", "(", "nums", ",", "i", ",", "j", ")", "i", "<", "j", ">=", "i", "<", "j", "<=", "nums", "[", "j", "]", "nums", "[", "left", "]", "nums", "[", "i", "]", "nums", "[", "left", "]"], "metrics": {"cyclomatic_complexity": 6, "n_ast_nodes": 146, "ast_depth": 11, "n_identifiers": 7, "vocab_size": 32, "n_whitespaces": 213, "n_words": 52, "nloc": 13, "token_counts": 99}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/java/chapter_sorting/quick_sort.java#36-45", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/java/chapter_sorting/quick_sort.java", "language": "Java"}, "method": {"name": "quickSort", "qualified_name": "codes.java.chapter_sorting.quick_sort#quickSort", "start_line": 36, "end_line": 45, "signature": "quickSort(int[] nums, int left, int right)", "original_code": "public static void quickSort(int[] nums, int left, int right) {\n        // \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52\n        if (left >= right)\n            return;\n        // \u54e8\u5175\u5212\u5206\n        int pivot = partition(nums, left, right);\n        // \u9012\u5f52\u5de6\u5b50\u6570\u7ec4\u3001\u53f3\u5b50\u6570\u7ec4\n        quickSort(nums, left, pivot - 1);\n        quickSort(nums, pivot + 1, right);\n    }", "doc_comment": "/* \u5feb\u901f\u6392\u5e8f */"}, "code_tokens": ["void", "quickSort", "public", "static", "(", ",", ",", ")", "{", "// \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52", "// \u54e8\u5175\u5212\u5206", "// \u9012\u5f52\u5de6\u5b50\u6570\u7ec4\u3001\u53f3\u5b50\u6570\u7ec4", "}", "nums", "left", "right", "if", ";", ";", ";", "int", "int", "(", ")", "return", ";", "int", "pivot", "=", "quickSort", "quickSort", "int", "[", "]", "left", ">=", "right", "partition", "(", "nums", ",", "left", ",", ")", "(", "nums", ",", ",", "right", ")", "(", "nums", ",", "left", ",", "right", ")", "pivot", "-", "1", "pivot", "+", "1"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 93, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 28, "n_whitespaces": 111, "n_words": 36, "nloc": 10, "token_counts": 63}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/java/chapter_sorting/quick_sort.java#51-55", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/java/chapter_sorting/quick_sort.java", "language": "Java"}, "method": {"name": "swap", "qualified_name": "codes.java.chapter_sorting.quick_sort#swap", "start_line": 51, "end_line": 55, "signature": "swap(int[] nums, int i, int j)", "original_code": "static void swap(int[] nums, int i, int j) {\n        int tmp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = tmp;\n    }", "doc_comment": "/* \u5143\u7d20\u4ea4\u6362 */"}, "code_tokens": ["void", "swap", "static", "(", ",", ",", ")", "{", "}", "nums", "i", "j", ";", ";", ";", "int", "int", "int", "tmp", "=", "=", "=", "tmp", "int", "[", "]", "nums", "[", "i", "]", "nums", "[", "i", "]", "nums", "[", "j", "]", "nums", "[", "j", "]"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 66, "ast_depth": 7, "n_identifiers": 5, "vocab_size": 17, "n_whitespaces": 47, "n_words": 20, "nloc": 5, "token_counts": 42}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/java/chapter_sorting/quick_sort.java#58-65", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/java/chapter_sorting/quick_sort.java", "language": "Java"}, "method": {"name": "medianThree", "qualified_name": "codes.java.chapter_sorting.quick_sort#medianThree", "start_line": 58, "end_line": 65, "signature": "medianThree(int[] nums, int left, int mid, int right)", "original_code": "static int medianThree(int[] nums, int left, int mid, int right) {\n        int l = nums[left], m = nums[mid], r = nums[right];\n        if ((l <= m && m <= r) || (r <= m && m <= l))\n            return mid; // m \u5728 l \u548c r \u4e4b\u95f4\n        if ((m <= l && l <= r) || (r <= l && l <= m))\n            return left; // l \u5728 m \u548c r \u4e4b\u95f4\n        return right;\n    }", "doc_comment": "/* \u9009\u53d6\u4e09\u4e2a\u5019\u9009\u5143\u7d20\u7684\u4e2d\u4f4d\u6570 */"}, "code_tokens": ["medianThree", "static", "int", "(", ",", ",", ",", ")", "{", "// m \u5728 l \u548c r \u4e4b\u95f4", "// l \u5728 m \u548c r \u4e4b\u95f4", "}", "nums", "left", "mid", "right", ",", ",", ";", "if", "if", "return", "right", ";", "int", "int", "int", "int", "l", "=", "m", "=", "r", "=", "(", ")", "return", "mid", ";", "(", ")", "return", "left", ";", "int", "[", "]", "nums", "[", "left", "]", "nums", "[", "mid", "]", "nums", "[", "right", "]", "||", "||", "(", ")", "(", ")", "(", ")", "(", ")", "&&", "&&", "&&", "&&", "l", "<=", "m", "m", "<=", "r", "r", "<=", "m", "m", "<=", "l", "m", "<=", "l", "l", "<=", "r", "r", "<=", "l", "l", "<=", "m"], "metrics": {"cyclomatic_complexity": 9, "n_ast_nodes": 146, "ast_depth": 10, "n_identifiers": 8, "vocab_size": 26, "n_whitespaces": 133, "n_words": 57, "nloc": 8, "token_counts": 97}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/java/chapter_sorting/quick_sort.java#68-84", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/java/chapter_sorting/quick_sort.java", "language": "Java"}, "method": {"name": "partition", "qualified_name": "codes.java.chapter_sorting.quick_sort#partition", "start_line": 68, "end_line": 84, "signature": "partition(int[] nums, int left, int right)", "original_code": "static int partition(int[] nums, int left, int right) {\n        // \u9009\u53d6\u4e09\u4e2a\u5019\u9009\u5143\u7d20\u7684\u4e2d\u4f4d\u6570\n        int med = medianThree(nums, left, (left + right) / 2, right);\n        // \u5c06\u4e2d\u4f4d\u6570\u4ea4\u6362\u81f3\u6570\u7ec4\u6700\u5de6\u7aef\n        swap(nums, left, med);\n        // \u4ee5 nums[left] \u4e3a\u57fa\u51c6\u6570\n        int i = left, j = right;\n        while (i < j) {\n            while (i < j && nums[j] >= nums[left])\n                j--;          // \u4ece\u53f3\u5411\u5de6\u627e\u9996\u4e2a\u5c0f\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20\n            while (i < j && nums[i] <= nums[left])\n                i++;          // \u4ece\u5de6\u5411\u53f3\u627e\u9996\u4e2a\u5927\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20\n            swap(nums, i, j); // \u4ea4\u6362\u8fd9\u4e24\u4e2a\u5143\u7d20\n        }\n        swap(nums, i, left);  // \u5c06\u57fa\u51c6\u6570\u4ea4\u6362\u81f3\u4e24\u5b50\u6570\u7ec4\u7684\u5206\u754c\u7ebf\n        return i;             // \u8fd4\u56de\u57fa\u51c6\u6570\u7684\u7d22\u5f15\n    }", "doc_comment": "/* \u54e8\u5175\u5212\u5206\uff08\u4e09\u6570\u53d6\u4e2d\u503c\uff09 */"}, "code_tokens": ["partition", "static", "int", "(", ",", ",", ")", "{", "// \u9009\u53d6\u4e09\u4e2a\u5019\u9009\u5143\u7d20\u7684\u4e2d\u4f4d\u6570", "// \u5c06\u4e2d\u4f4d\u6570\u4ea4\u6362\u81f3\u6570\u7ec4\u6700\u5de6\u7aef", "// \u4ee5 nums[left] \u4e3a\u57fa\u51c6\u6570", "// \u5c06\u57fa\u51c6\u6570\u4ea4\u6362\u81f3\u4e24\u5b50\u6570\u7ec4\u7684\u5206\u754c\u7ebf", "// \u8fd4\u56de\u57fa\u51c6\u6570\u7684\u7d22\u5f15", "}", "nums", "left", "right", ";", ";", ",", ";", "while", ";", "return", "i", ";", "int", "int", "int", "med", "=", "swap", "int", "i", "=", "left", "j", "=", "right", "(", ")", "{", "// \u4ece\u53f3\u5411\u5de6\u627e\u9996\u4e2a\u5c0f\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20", "// \u4ece\u5de6\u5411\u53f3\u627e\u9996\u4e2a\u5927\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20", "// \u4ea4\u6362\u8fd9\u4e24\u4e2a\u5143\u7d20", "}", "swap", "int", "[", "]", "medianThree", "(", "nums", ",", "left", ",", "med", ")", "i", "<", "j", "while", "while", ";", "(", "nums", ",", "i", ",", "left", ")", "(", "nums", ",", "left", ",", ",", "right", ")", "(", ")", ";", "(", ")", ";", "swap", "/", "2", "&&", "j", "--", "&&", "i", "++", "(", "nums", ",", "i", ",", "j", ")", "(", ")", "i", "<", "j", ">=", "i", "<", "j", "<=", "left", "+", "right", "nums", "[", "j", "]", "nums", "[", "left", "]", "nums", "[", "i", "]", "nums", "[", "left", "]"], "metrics": {"cyclomatic_complexity": 6, "n_ast_nodes": 188, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 39, "n_whitespaces": 263, "n_words": 67, "nloc": 17, "token_counts": 130}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/java/chapter_sorting/quick_sort.java#87-96", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/java/chapter_sorting/quick_sort.java", "language": "Java"}, "method": {"name": "quickSort", "qualified_name": "codes.java.chapter_sorting.quick_sort#quickSort", "start_line": 87, "end_line": 96, "signature": "quickSort(int[] nums, int left, int right)", "original_code": "public static void quickSort(int[] nums, int left, int right) {\n        // \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52\n        if (left >= right)\n            return;\n        // \u54e8\u5175\u5212\u5206\n        int pivot = partition(nums, left, right);\n        // \u9012\u5f52\u5de6\u5b50\u6570\u7ec4\u3001\u53f3\u5b50\u6570\u7ec4\n        quickSort(nums, left, pivot - 1);\n        quickSort(nums, pivot + 1, right);\n    }", "doc_comment": "/* \u5feb\u901f\u6392\u5e8f */"}, "code_tokens": ["void", "quickSort", "public", "static", "(", ",", ",", ")", "{", "// \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52", "// \u54e8\u5175\u5212\u5206", "// \u9012\u5f52\u5de6\u5b50\u6570\u7ec4\u3001\u53f3\u5b50\u6570\u7ec4", "}", "nums", "left", "right", "if", ";", ";", ";", "int", "int", "(", ")", "return", ";", "int", "pivot", "=", "quickSort", "quickSort", "int", "[", "]", "left", ">=", "right", "partition", "(", "nums", ",", "left", ",", ")", "(", "nums", ",", ",", "right", ")", "(", "nums", ",", "left", ",", "right", ")", "pivot", "-", "1", "pivot", "+", "1"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 93, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 28, "n_whitespaces": 111, "n_words": 36, "nloc": 10, "token_counts": 63}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/java/chapter_sorting/quick_sort.java#102-106", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/java/chapter_sorting/quick_sort.java", "language": "Java"}, "method": {"name": "swap", "qualified_name": "codes.java.chapter_sorting.quick_sort#swap", "start_line": 102, "end_line": 106, "signature": "swap(int[] nums, int i, int j)", "original_code": "static void swap(int[] nums, int i, int j) {\n        int tmp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = tmp;\n    }", "doc_comment": "/* \u5143\u7d20\u4ea4\u6362 */"}, "code_tokens": ["void", "swap", "static", "(", ",", ",", ")", "{", "}", "nums", "i", "j", ";", ";", ";", "int", "int", "int", "tmp", "=", "=", "=", "tmp", "int", "[", "]", "nums", "[", "i", "]", "nums", "[", "i", "]", "nums", "[", "j", "]", "nums", "[", "j", "]"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 66, "ast_depth": 7, "n_identifiers": 5, "vocab_size": 17, "n_whitespaces": 47, "n_words": 20, "nloc": 5, "token_counts": 42}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/java/chapter_sorting/quick_sort.java#109-121", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/java/chapter_sorting/quick_sort.java", "language": "Java"}, "method": {"name": "partition", "qualified_name": "codes.java.chapter_sorting.quick_sort#partition", "start_line": 109, "end_line": 121, "signature": "partition(int[] nums, int left, int right)", "original_code": "static int partition(int[] nums, int left, int right) {\n        // \u4ee5 nums[left] \u4e3a\u57fa\u51c6\u6570\n        int i = left, j = right;\n        while (i < j) {\n            while (i < j && nums[j] >= nums[left])\n                j--;          // \u4ece\u53f3\u5411\u5de6\u627e\u9996\u4e2a\u5c0f\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20\n            while (i < j && nums[i] <= nums[left])\n                i++;          // \u4ece\u5de6\u5411\u53f3\u627e\u9996\u4e2a\u5927\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20\n            swap(nums, i, j); // \u4ea4\u6362\u8fd9\u4e24\u4e2a\u5143\u7d20\n        }\n        swap(nums, i, left);  // \u5c06\u57fa\u51c6\u6570\u4ea4\u6362\u81f3\u4e24\u5b50\u6570\u7ec4\u7684\u5206\u754c\u7ebf\n        return i;             // \u8fd4\u56de\u57fa\u51c6\u6570\u7684\u7d22\u5f15\n    }", "doc_comment": "/* \u54e8\u5175\u5212\u5206 */"}, "code_tokens": ["partition", "static", "int", "(", ",", ",", ")", "{", "// \u4ee5 nums[left] \u4e3a\u57fa\u51c6\u6570", "// \u5c06\u57fa\u51c6\u6570\u4ea4\u6362\u81f3\u4e24\u5b50\u6570\u7ec4\u7684\u5206\u754c\u7ebf", "// \u8fd4\u56de\u57fa\u51c6\u6570\u7684\u7d22\u5f15", "}", "nums", "left", "right", ",", ";", "while", ";", "return", "i", ";", "int", "int", "int", "i", "=", "left", "j", "=", "right", "(", ")", "{", "// \u4ece\u53f3\u5411\u5de6\u627e\u9996\u4e2a\u5c0f\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20", "// \u4ece\u5de6\u5411\u53f3\u627e\u9996\u4e2a\u5927\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20", "// \u4ea4\u6362\u8fd9\u4e24\u4e2a\u5143\u7d20", "}", "swap", "int", "[", "]", "i", "<", "j", "while", "while", ";", "(", "nums", ",", "i", ",", "left", ")", "(", ")", ";", "(", ")", ";", "swap", "&&", "j", "--", "&&", "i", "++", "(", "nums", ",", "i", ",", "j", ")", "i", "<", "j", ">=", "i", "<", "j", "<=", "nums", "[", "j", "]", "nums", "[", "left", "]", "nums", "[", "i", "]", "nums", "[", "left", "]"], "metrics": {"cyclomatic_complexity": 6, "n_ast_nodes": 146, "ast_depth": 11, "n_identifiers": 7, "vocab_size": 32, "n_whitespaces": 213, "n_words": 52, "nloc": 13, "token_counts": 99}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/java/chapter_sorting/quick_sort.java#124-138", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/java/chapter_sorting/quick_sort.java", "language": "Java"}, "method": {"name": "quickSort", "qualified_name": "codes.java.chapter_sorting.quick_sort#quickSort", "start_line": 124, "end_line": 138, "signature": "quickSort(int[] nums, int left, int right)", "original_code": "public static void quickSort(int[] nums, int left, int right) {\n        // \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\n        while (left < right) {\n            // \u54e8\u5175\u5212\u5206\u64cd\u4f5c\n            int pivot = partition(nums, left, right);\n            // \u5bf9\u4e24\u4e2a\u5b50\u6570\u7ec4\u4e2d\u8f83\u77ed\u7684\u90a3\u4e2a\u6267\u884c\u5feb\u901f\u6392\u5e8f\n            if (pivot - left < right - pivot) {\n                quickSort(nums, left, pivot - 1); // \u9012\u5f52\u6392\u5e8f\u5de6\u5b50\u6570\u7ec4\n                left = pivot + 1; // \u5269\u4f59\u672a\u6392\u5e8f\u533a\u95f4\u4e3a [pivot + 1, right]\n            } else {\n                quickSort(nums, pivot + 1, right); // \u9012\u5f52\u6392\u5e8f\u53f3\u5b50\u6570\u7ec4\n                right = pivot - 1; // \u5269\u4f59\u672a\u6392\u5e8f\u533a\u95f4\u4e3a [left, pivot - 1]\n            }\n        }\n    }", "doc_comment": "/* \u5feb\u901f\u6392\u5e8f\uff08\u9012\u5f52\u6df1\u5ea6\u4f18\u5316\uff09 */"}, "code_tokens": ["void", "quickSort", "public", "static", "(", ",", ",", ")", "{", "// \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62", "}", "nums", "left", "right", "while", "int", "int", "(", ")", "{", "// \u54e8\u5175\u5212\u5206\u64cd\u4f5c", "// \u5bf9\u4e24\u4e2a\u5b50\u6570\u7ec4\u4e2d\u8f83\u77ed\u7684\u90a3\u4e2a\u6267\u884c\u5feb\u901f\u6392\u5e8f", "}", "int", "[", "]", "left", "<", "right", ";", "if", "else", "int", "pivot", "=", "(", ")", "{", "// \u9012\u5f52\u6392\u5e8f\u5de6\u5b50\u6570\u7ec4", "// \u5269\u4f59\u672a\u6392\u5e8f\u533a\u95f4\u4e3a [pivot + 1, right]", "}", "{", "// \u9012\u5f52\u6392\u5e8f\u53f3\u5b50\u6570\u7ec4", "// \u5269\u4f59\u672a\u6392\u5e8f\u533a\u95f4\u4e3a [left, pivot - 1]", "}", "partition", "<", ";", ";", ";", ";", "(", "nums", ",", "left", ",", "right", ")", "pivot", "-", "left", "right", "-", "pivot", "quickSort", "left", "=", "quickSort", "right", "=", "(", "nums", ",", "left", ",", ")", "pivot", "+", "1", "(", "nums", ",", ",", "right", ")", "pivot", "-", "1", "pivot", "-", "1", "pivot", "+", "1"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 137, "ast_depth": 12, "n_identifiers": 6, "vocab_size": 33, "n_whitespaces": 243, "n_words": 56, "nloc": 15, "token_counts": 94}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/java/chapter_sorting/quick_sort.java#142-157", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/java/chapter_sorting/quick_sort.java", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.java.chapter_sorting.quick_sort#main", "start_line": 142, "end_line": 157, "signature": "main(String[] args)", "original_code": "public static void main(String[] args) {\n        /* \u5feb\u901f\u6392\u5e8f */\n        int[] nums = { 2, 4, 1, 0, 3, 5 };\n        QuickSort.quickSort(nums, 0, nums.length - 1);\n        System.out.println(\"\u5feb\u901f\u6392\u5e8f\u5b8c\u6210\u540e nums = \" + Arrays.toString(nums));\n\n        /* \u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u51c6\u6570\u4f18\u5316\uff09 */\n        int[] nums1 = { 2, 4, 1, 0, 3, 5 };\n        QuickSortMedian.quickSort(nums1, 0, nums1.length - 1);\n        System.out.println(\"\u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u51c6\u6570\u4f18\u5316\uff09\u5b8c\u6210\u540e nums1 = \" + Arrays.toString(nums1));\n\n        /* \u5feb\u901f\u6392\u5e8f\uff08\u9012\u5f52\u6df1\u5ea6\u4f18\u5316\uff09 */\n        int[] nums2 = { 2, 4, 1, 0, 3, 5 };\n        QuickSortTailCall.quickSort(nums2, 0, nums2.length - 1);\n        System.out.println(\"\u5feb\u901f\u6392\u5e8f\uff08\u9012\u5f52\u6df1\u5ea6\u4f18\u5316\uff09\u5b8c\u6210\u540e nums2 = \" + Arrays.toString(nums2));\n    }", "doc_comment": ""}, "code_tokens": ["void", "main", "public", "static", "(", ")", "{", "/* \u5feb\u901f\u6392\u5e8f */", "/* \u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u51c6\u6570\u4f18\u5316\uff09 */", "/* \u5feb\u901f\u6392\u5e8f\uff08\u9012\u5f52\u6df1\u5ea6\u4f18\u5316\uff09 */", "}", "args", ";", ";", ";", ";", ";", ";", ";", ";", ";", "String", "nums", "=", "QuickSort", ".", "quickSort", ".", "println", "nums1", "=", "QuickSortMedian", ".", "quickSort", ".", "println", "nums2", "=", "QuickSortTailCall", ".", "quickSort", ".", "println", "[", "]", "int", "[", "]", "{", "2", ",", "4", ",", "1", ",", "0", ",", "3", ",", "5", "}", "(", "nums", ",", "0", ",", ")", "System", ".", "out", "(", ")", "int", "[", "]", "{", "2", ",", "4", ",", "1", ",", "0", ",", "3", ",", "5", "}", "(", "nums1", ",", "0", ",", ")", "System", ".", "out", "(", ")", "int", "[", "]", "{", "2", ",", "4", ",", "1", ",", "0", ",", "3", ",", "5", "}", "(", "nums2", ",", "0", ",", ")", "System", ".", "out", "(", ")", "-", "1", "+", "-", "1", "+", "-", "1", "+", "nums", ".", "length", "\"", "\u5feb\u901f\u6392\u5e8f\u5b8c\u6210\u540e nums = ", "\"", "Arrays", ".", "toString", "nums1", ".", "length", "\"", "\u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u51c6\u6570\u4f18\u5316\uff09\u5b8c\u6210\u540e nums1 = ", "\"", "Arrays", ".", "toString", "nums2", ".", "length", "\"", "\u5feb\u901f\u6392\u5e8f\uff08\u9012\u5f52\u6df1\u5ea6\u4f18\u5316\uff09\u5b8c\u6210\u540e nums2 = ", "\"", "Arrays", ".", "toString", "(", "nums", ")", "(", "nums1", ")", "(", "nums2", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 236, "ast_depth": 10, "n_identifiers": 15, "vocab_size": 45, "n_whitespaces": 183, "n_words": 84, "nloc": 14, "token_counts": 171}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/kotlin/chapter_sorting/quick_sort.kt#10-14", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/kotlin/chapter_sorting/quick_sort.kt", "language": "Java"}, "method": {"name": "swap", "qualified_name": "codes.kotlin.chapter_sorting.quick_sort.kt#swap", "start_line": 10, "end_line": 14, "signature": "swap(nums: IntArray, i: Int, j: Int)", "original_code": "fun swap(nums: IntArray, i: Int, j: Int) {\n    val temp = nums[i]\n    nums[i] = nums[j]\n    nums[j] = temp\n}", "doc_comment": ""}, "code_tokens": ["fun", "swap", "(", ",", ",", ")", "{", "}", "nums", "IntArray", "i", "Int", "j", "Int", "val", "", ":", ":", ":", "temp", "=", "=", "[", "i", "]", "=", "temp", "nums", "[", "i", "]", "nums", "[", "j", "]", "nums", "[", "j", "]", "nums"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 60, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 19, "n_whitespaces": 30, "n_words": 19, "nloc": 5, "token_counts": 40}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/kotlin/chapter_sorting/quick_sort.kt#17-30", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/kotlin/chapter_sorting/quick_sort.kt", "language": "Java"}, "method": {"name": "partition", "qualified_name": "codes.kotlin.chapter_sorting.quick_sort.kt#partition", "start_line": 17, "end_line": 30, "signature": "partition(nums: IntArray, left: Int, right: Int)", "original_code": "fun partition(nums: IntArray, left: Int, right: Int): Int {\n    // \u4ee5 nums[left] \u4e3a\u57fa\u51c6\u6570\n    var i = left\n    var j = right\n    while (i < j) {\n        while (i < j && nums[j] >= nums[left])\n            j--           // \u4ece\u53f3\u5411\u5de6\u627e\u9996\u4e2a\u5c0f\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20\n        while (i < j && nums[i] <= nums[left])\n            i++           // \u4ece\u5de6\u5411\u53f3\u627e\u9996\u4e2a\u5927\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20\n        swap(nums, i, j)  // \u4ea4\u6362\u8fd9\u4e24\u4e2a\u5143\u7d20\n    }\n    swap(nums, i, left)   // \u5c06\u57fa\u51c6\u6570\u4ea4\u6362\u81f3\u4e24\u5b50\u6570\u7ec4\u7684\u5206\u754c\u7ebf\n    return i              // \u8fd4\u56de\u57fa\u51c6\u6570\u7684\u7d22\u5f15\n}", "doc_comment": "/* \u54e8\u5175\u5212\u5206 */"}, "code_tokens": ["fun", "partition", "(", ",", ",", ")", ":", "Int", "{", "// \u4ee5 nums[left] \u4e3a\u57fa\u51c6\u6570", "}", "nums", "IntArray", "left", "Int", "right", "Int", "var", "", "// \u5c06\u57fa\u51c6\u6570\u4ea4\u6362\u81f3\u4e24\u5b50\u6570\u7ec4\u7684\u5206\u754c\u7ebf", "", "return", "i", "// \u8fd4\u56de\u57fa\u51c6\u6570\u7684\u7d22\u5f15", "", ":", ":", ":", "i", "=", "swap", "left", "var", "{", "// \u4ece\u53f3\u5411\u5de6\u627e\u9996\u4e2a\u5c0f\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20", "// \u4ece\u5de6\u5411\u53f3\u627e\u9996\u4e2a\u5927\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20", "// \u4ea4\u6362\u8fd9\u4e24\u4e2a\u5143\u7d20", "}", "(", "nums", ",", "i", ",", "left", ")", "j", "=", "swap", "right", "while", "--", "++", "(", "nums", ",", "i", ",", "j", ")", "(", ")", "while", "j", "while", "i", "i", "<", "j", "(", ")", "(", ")", "&&", "&&", "i", "<", "j", ">=", "i", "<", "j", "<=", "nums", "[", "j", "]", "nums", "[", "left", "]", "nums", "[", "i", "]", "nums", "[", "left", "]"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 144, "ast_depth": 14, "n_identifiers": 10, "vocab_size": 35, "n_whitespaces": 175, "n_words": 53, "nloc": 14, "token_counts": 98}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/kotlin/chapter_sorting/quick_sort.kt#33-41", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/kotlin/chapter_sorting/quick_sort.kt", "language": "Java"}, "method": {"name": "quickSort", "qualified_name": "codes.kotlin.chapter_sorting.quick_sort.kt#quickSort", "start_line": 33, "end_line": 41, "signature": "quickSort(nums: IntArray, left: Int, right: Int)", "original_code": "fun quickSort(nums: IntArray, left: Int, right: Int) {\n    // \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52\n    if (left >= right) return\n    // \u54e8\u5175\u5212\u5206\n    val pivot = partition(nums, left, right)\n    // \u9012\u5f52\u5de6\u5b50\u6570\u7ec4\u3001\u53f3\u5b50\u6570\u7ec4\n    quickSort(nums, left, pivot - 1)\n    quickSort(nums, pivot + 1, right)\n}", "doc_comment": "/* \u5feb\u901f\u6392\u5e8f */"}, "code_tokens": ["fun", "quickSort", "(", ",", ",", ")", "{", "// \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52", "}", "nums", "IntArray", "left", "Int", "right", "Int", "if", "", "", ":", ":", ":", "(", ")", "return", "// \u54e8\u5175\u5212\u5206", "// \u9012\u5f52\u5de6\u5b50\u6570\u7ec4\u3001\u53f3\u5b50\u6570\u7ec4", "", "quickSort", "quickSort", "left", ">=", "right", "val", "pivot", "=", "(", "nums", ",", "left", ",", ")", "(", "nums", ",", ",", "right", ")", "partition", "pivot", "-", "1", "pivot", "+", "1", "(", "nums", ",", "left", ",", "right", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 87, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 27, "n_whitespaces": 65, "n_words": 34, "nloc": 9, "token_counts": 61}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/kotlin/chapter_sorting/quick_sort.kt#44-121", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/kotlin/chapter_sorting/quick_sort.kt", "language": "Java"}, "method": {"name": "medianThree", "qualified_name": "codes.kotlin.chapter_sorting.quick_sort.kt#medianThree", "start_line": 44, "end_line": 121, "signature": "medianThree(nums: IntArray, left: Int, mid: Int, right: Int)", "original_code": "fun medianThree(nums: IntArray, left: Int, mid: Int, right: Int): Int {\n    val l = nums[left]\n    val m = nums[mid]\n    val r = nums[right]\n    if ((m in l..r) || (m in r..l))\n        return mid  // m \u5728 l \u548c r \u4e4b\u95f4\n    if ((l in m..r) || (l in r..m))\n        return left // l \u5728 m \u548c r \u4e4b\u95f4\n    return right\n}\n\n/* \u54e8\u5175\u5212\u5206\uff08\u4e09\u6570\u53d6\u4e2d\u503c\uff09 */\nfun partitionMedian(nums: IntArray, left: Int, right: Int): Int {\n    // \u9009\u53d6\u4e09\u4e2a\u5019\u9009\u5143\u7d20\u7684\u4e2d\u4f4d\u6570\n    val med = medianThree(nums, left, (left + right) / 2, right)\n    // \u5c06\u4e2d\u4f4d\u6570\u4ea4\u6362\u81f3\u6570\u7ec4\u6700\u5de6\u7aef\n    swap(nums, left, med)\n    // \u4ee5 nums[left] \u4e3a\u57fa\u51c6\u6570\n    var i = left\n    var j = right\n    while (i < j) {\n        while (i < j && nums[j] >= nums[left])\n            j--                      // \u4ece\u53f3\u5411\u5de6\u627e\u9996\u4e2a\u5c0f\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20\n        while (i < j && nums[i] <= nums[left])\n            i++                      // \u4ece\u5de6\u5411\u53f3\u627e\u9996\u4e2a\u5927\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20\n        swap(nums, i, j)             // \u4ea4\u6362\u8fd9\u4e24\u4e2a\u5143\u7d20\n    }\n    swap(nums, i, left)              // \u5c06\u57fa\u51c6\u6570\u4ea4\u6362\u81f3\u4e24\u5b50\u6570\u7ec4\u7684\u5206\u754c\u7ebf\n    return i                         // \u8fd4\u56de\u57fa\u51c6\u6570\u7684\u7d22\u5f15\n}\n\n/* \u5feb\u901f\u6392\u5e8f */\nfun quickSortMedian(nums: IntArray, left: Int, right: Int) {\n    // \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52\n    if (left >= right) return\n    // \u54e8\u5175\u5212\u5206\n    val pivot = partitionMedian(nums, left, right)\n    // \u9012\u5f52\u5de6\u5b50\u6570\u7ec4\u3001\u53f3\u5b50\u6570\u7ec4\n    quickSort(nums, left, pivot - 1)\n    quickSort(nums, pivot + 1, right)\n}\n\n/* \u5feb\u901f\u6392\u5e8f\uff08\u9012\u5f52\u6df1\u5ea6\u4f18\u5316\uff09 */\nfun quickSortTailCall(nums: IntArray, left: Int, right: Int) {\n    // \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\n    var l = left\n    var r = right\n    while (l < r) {\n        // \u54e8\u5175\u5212\u5206\u64cd\u4f5c\n        val pivot = partition(nums, l, r)\n        // \u5bf9\u4e24\u4e2a\u5b50\u6570\u7ec4\u4e2d\u8f83\u77ed\u7684\u90a3\u4e2a\u6267\u884c\u5feb\u901f\u6392\u5e8f\n        if (pivot - l < r - pivot) {\n            quickSort(nums, l, pivot - 1) // \u9012\u5f52\u6392\u5e8f\u5de6\u5b50\u6570\u7ec4\n            l = pivot + 1 // \u5269\u4f59\u672a\u6392\u5e8f\u533a\u95f4\u4e3a [pivot + 1, right]\n        } else {\n            quickSort(nums, pivot + 1, r) // \u9012\u5f52\u6392\u5e8f\u53f3\u5b50\u6570\u7ec4\n            r = pivot - 1 // \u5269\u4f59\u672a\u6392\u5e8f\u533a\u95f4\u4e3a [left, pivot - 1]\n        }\n    }\n}\n\n/* Driver Code */\nfun main() {\n    /* \u5feb\u901f\u6392\u5e8f */\n    val nums = intArrayOf(2, 4, 1, 0, 3, 5)\n    quickSort(nums, 0, nums.size - 1)\n    println(\"\u5feb\u901f\u6392\u5e8f\u5b8c\u6210\u540e nums = ${nums.contentToString()}\")\n\n    /* \u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u51c6\u6570\u4f18\u5316\uff09 */\n    val nums1 = intArrayOf(2, 4, 1, 0, 3, 5)\n    quickSortMedian(nums1, 0, nums1.size - 1)\n    println(\"\u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u51c6\u6570\u4f18\u5316\uff09\u5b8c\u6210\u540e nums1 = ${nums1.contentToString()}\")\n\n    /* \u5feb\u901f\u6392\u5e8f\uff08\u9012\u5f52\u6df1\u5ea6\u4f18\u5316\uff09 */\n    val nums2 = intArrayOf(2, 4, 1, 0, 3, 5)\n    quickSortTailCall(nums2, 0, nums2.size - 1)\n    println(\"\u5feb\u901f\u6392\u5e8f\uff08\u9012\u5f52\u6df1\u5ea6\u4f18\u5316\uff09\u5b8c\u6210\u540e nums2 = ${nums2.contentToString()}\")\n}", "doc_comment": "/* \u9009\u53d6\u4e09\u4e2a\u5019\u9009\u5143\u7d20\u7684\u4e2d\u4f4d\u6570 */"}, "code_tokens": ["fun", "medianThree", "(", ",", ",", ",", ")", ":", "Int", "{", "}", "nums", "IntArray", "left", "Int", "mid", "Int", "right", "Int", "val", "", "val", "", "val", "", "if", "(", "(", ":", ":", ":", ":", "l", "=", "m", "=", "r", "=", "m", "in", ".", "r", ".", "m", ".", "r", ".", "/* \u54e8\u5175\u5212\u5206\uff08\u4e09\u6570\u53d6\u4e2d\u503c\uff09 */", "// \u9009\u53d6\u4e09\u4e2a\u5019\u9009\u5143\u7d20\u7684\u4e2d\u4f4d\u6570", "// \u5c06\u4e2d\u4f4d\u6570\u4ea4\u6362\u81f3\u6570\u7ec4\u6700\u5de6\u7aef", "// \u4ee5 nums[left] \u4e3a\u57fa\u51c6\u6570", "// \u4ece\u5de6\u5411\u53f3\u627e\u9996\u4e2a\u5927\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20", "/* \u5feb\u901f\u6392\u5e8f */", "// \u54e8\u5175\u5212\u5206", "// \u9012\u5f52\u5de6\u5b50\u6570\u7ec4\u3001\u53f3\u5b50\u6570\u7ec4", "/* \u5feb\u901f\u6392\u5e8f\uff08\u9012\u5f52\u6df1\u5ea6\u4f18\u5316\uff09 */", "// \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62", "// \u54e8\u5175\u5212\u5206\u64cd\u4f5c", "// \u9012\u5f52\u6392\u5e8f\u5de6\u5b50\u6570\u7ec4", "// \u9012\u5f52\u6392\u5e8f\u53f3\u5b50\u6570\u7ec4", "/* Driver Code */", "/* \u5feb\u901f\u6392\u5e8f */", "nums", ".", "println", "/* \u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u51c6\u6570\u4f18\u5316\uff09 */", "val", "nums1", "=", "nums", "[", "left", "]", "nums", "[", "mid", "]", "nums", "[", "right", "]", "l", ".", "r", ")", "||", "(", "m", "in", ".", "l", ")", ")", "return", "mid", "// m \u5728 l \u548c r \u4e4b\u95f4", "if", "(", "(", "l", "in", ".", "r", ")", "||", "(", "l", "in", ".", "m", ")", ")", "return", "left", "// l \u5728 m \u548c r \u4e4b\u95f4", "return", "right", "}", "fun", "partitionMedian", "(", "nums", ":", "IntArray", ",", "left", ":", "Int", ",", "right", ":", "Int", ")", ":", "Int", "{", "val", "med", "=", "medianThree", "(", "nums", ",", "left", ",", "(", "left", "+", "right", ")", "/", "2", ",", "right", ")", "swap", "(", "nums", ",", "left", ",", "med", ")", "var", "i", "=", "left", "var", "j", "=", "right", "while", "(", "i", "<", "j", ")", "{", "while", "(", "i", "<", "j", "&&", "nums", "[", "j", "]", ">=", "nums", "[", "left", "]", ")", "j", "--", "// \u4ece\u53f3\u5411\u5de6\u627e\u9996\u4e2a\u5c0f\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20", "while", "(", "i", "<", "j", "&&", "nums", "[", "i", "]", "<=", "nums", "[", "left", "]", ")", "i", "++", "swap", "(", "nums", ",", "i", ",", "j", ")", "// \u4ea4\u6362\u8fd9\u4e24\u4e2a\u5143\u7d20", "}", "swap", "(", "nums", ",", "i", ",", "left", ")", "// \u5c06\u57fa\u51c6\u6570\u4ea4\u6362\u81f3\u4e24\u5b50\u6570\u7ec4\u7684\u5206\u754c\u7ebf", "return", "i", "// \u8fd4\u56de\u57fa\u51c6\u6570\u7684\u7d22\u5f15", "}", "fun", "quickSortMedian", "(", "nums", ":", "IntArray", ",", "left", ":", "Int", ",", "right", ":", "Int", ")", "{", "// \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52", "if", "(", "left", ">=", "right", ")", "return", "val", "pivot", "=", "partitionMedian", "(", "nums", ",", "left", ",", "right", ")", "quickSort", "(", "nums", ",", "left", ",", "pivot", "-", "1", ")", "quickSort", "(", "nums", ",", "pivot", "+", "1", ",", "right", ")", "}", "fun", "quickSortTailCall", "(", "nums", ":", "IntArray", ",", "left", ":", "Int", ",", "right", ":", "Int", ")", "{", "var", "l", "=", "left", "var", "r", "=", "right", "while", "(", "l", "<", "r", ")", "{", "val", "pivot", "=", "partition", "(", "nums", ",", "l", ",", "r", ")", "// \u5bf9\u4e24\u4e2a\u5b50\u6570\u7ec4\u4e2d\u8f83\u77ed\u7684\u90a3\u4e2a\u6267\u884c\u5feb\u901f\u6392\u5e8f", "if", "(", "pivot", "-", "l", "<", "r", "-", "pivot", ")", "{", "quickSort", "(", "nums", ",", "l", ",", "pivot", "-", "1", ")", "l", "=", "pivot", "+", "1", "// \u5269\u4f59\u672a\u6392\u5e8f\u533a\u95f4\u4e3a [pivot + 1, right]", "}", "else", "{", "quickSort", "(", "nums", ",", "pivot", "+", "1", ",", "r", ")", "r", "=", "pivot", "-", "1", "// \u5269\u4f59\u672a\u6392\u5e8f\u533a\u95f4\u4e3a [left, pivot - 1]", "}", "}", "}", "fun", "main", "(", ")", "{", "val", "nums", "=", "intArrayOf", "(", "2", ",", "4", ",", "1", ",", "0", ",", "3", ",", "5", ")", "quickSort", "(", "nums", ",", "0", ",", "size", "-", "1", ")", "(", ")", "/* \u5feb\u901f\u6392\u5e8f\uff08\u9012\u5f52\u6df1\u5ea6\u4f18\u5316\uff09 */", "val", "println", "\"", "\u5feb\u901f\u6392\u5e8f\u5b8c\u6210\u540e nums = ${nums.contentToString()}", "\"", "intArrayOf", "quickSortMedian", "println", "nums2", "=", "quickSortTailCall", "(", ")", "(", "2", ",", "4", ",", "1", ",", "0", ",", "3", ",", "5", ")", "(", "nums1", ",", "0", ",", ")", "(", ")", "intArrayOf", "(", "nums2", ",", "0", ",", ")", "\"", "\u5feb\u901f\u6392\u5e8f\uff08\u9012\u5f52\u6df1\u5ea6\u4f18\u5316\uff09\u5b8c\u6210\u540e nums2 = ${nums2.contentToString()}", "\"", "-", "1", "\"", "\u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u51c6\u6570\u4f18\u5316\uff09\u5b8c\u6210\u540e nums1 = ${nums1.contentToString()}", "\"", "(", "2", ",", "4", ",", "1", ",", "0", ",", "3", ",", "5", ")", "-", "1", "nums1", ".", "size", "nums2", ".", "size"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 559, "ast_depth": 11, "n_identifiers": 33, "vocab_size": 90, "n_whitespaces": 767, "n_words": 299, "nloc": 72, "token_counts": 491}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/swift/chapter_sorting/quick_sort.swift#9-24", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/swift/chapter_sorting/quick_sort.swift", "language": "Java"}, "method": {"name": "partition", "qualified_name": "codes.swift.chapter_sorting.quick_sort.swift#partition", "start_line": 9, "end_line": 24, "signature": "partition(nums: inout [Int], left: Int, right: Int)", "original_code": "func partition(nums: inout [Int], left: Int, right: Int) -> Int {\n    // \u4ee5 nums[left] \u4e3a\u57fa\u51c6\u6570\n    var i = left\n    var j = right\n    while i < j {\n        while i < j, nums[j] >= nums[left] {\n            j -= 1 // \u4ece\u53f3\u5411\u5de6\u627e\u9996\u4e2a\u5c0f\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20\n        }\n        while i < j, nums[i] <= nums[left] {\n            i += 1 // \u4ece\u5de6\u5411\u53f3\u627e\u9996\u4e2a\u5927\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20\n        }\n        nums.swapAt(i, j) // \u4ea4\u6362\u8fd9\u4e24\u4e2a\u5143\u7d20\n    }\n    nums.swapAt(i, left) // \u5c06\u57fa\u51c6\u6570\u4ea4\u6362\u81f3\u4e24\u5b50\u6570\u7ec4\u7684\u5206\u754c\u7ebf\n    return i // \u8fd4\u56de\u57fa\u51c6\u6570\u7684\u7d22\u5f15\n}", "doc_comment": "/* \u54e8\u5175\u5212\u5206 */"}, "code_tokens": ["func", "partition", "(", ",", ",", ")", "->", "Int", "{", "// \u4ee5 nums[left] \u4e3a\u57fa\u51c6\u6570", "}", "nums", "inout", "left", "Int", "right", "Int", "var", "", "// \u5c06\u57fa\u51c6\u6570\u4ea4\u6362\u81f3\u4e24\u5b50\u6570\u7ec4\u7684\u5206\u754c\u7ebf", "", "return", "i", "// \u8fd4\u56de\u57fa\u51c6\u6570\u7684\u7d22\u5f15", "", ":", "[", "]", ":", ":", "i", "=", "nums", ".", "swapAt", "Int", "left", "var", "j", "=", "i", "<", "j", "{", "// \u4ea4\u6362\u8fd9\u4e24\u4e2a\u5143\u7d20", "}", "(", "i", ",", "left", ")", "right", "while", "while", ",", "while", ",", "nums", ".", "swapAt", "i", "<", "j", "{", "// \u4ece\u53f3\u5411\u5de6\u627e\u9996\u4e2a\u5c0f\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20", "}", "i", "<", "j", "{", "// \u4ece\u5de6\u5411\u53f3\u627e\u9996\u4e2a\u5927\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20", "}", "(", "i", ",", "j", ")", ">=", "j", "-=", "1", "<=", "i", "+=", "1", "nums", "[", "j", "]", "nums", "[", "left", "]", "nums", "[", "i", "]", "nums", "[", "left", "]"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 140, "ast_depth": 11, "n_identifiers": 10, "vocab_size": 37, "n_whitespaces": 161, "n_words": 56, "nloc": 16, "token_counts": 101}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/swift/chapter_sorting/quick_sort.swift#27-37", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/swift/chapter_sorting/quick_sort.swift", "language": "Java"}, "method": {"name": "quickSort", "qualified_name": "codes.swift.chapter_sorting.quick_sort.swift#quickSort", "start_line": 27, "end_line": 37, "signature": "quickSort(nums: inout [Int], left: Int, right: Int)", "original_code": "func quickSort(nums: inout [Int], left: Int, right: Int) {\n    // \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52\n    if left >= right {\n        return\n    }\n    // \u54e8\u5175\u5212\u5206\n    let pivot = partition(nums: &nums, left: left, right: right)\n    // \u9012\u5f52\u5de6\u5b50\u6570\u7ec4\u3001\u53f3\u5b50\u6570\u7ec4\n    quickSort(nums: &nums, left: left, right: pivot - 1)\n    quickSort(nums: &nums, left: pivot + 1, right: right)\n}", "doc_comment": "/* \u5feb\u901f\u6392\u5e8f */"}, "code_tokens": ["func", "quickSort", "(", ",", ",", ")", "{", "// \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52", "// \u54e8\u5175\u5212\u5206", "}", "nums", "inout", "left", "Int", "right", "Int", "if", "{", "}", "let", "// \u9012\u5f52\u5de6\u5b50\u6570\u7ec4\u3001\u53f3\u5b50\u6570\u7ec4", "", "", "", ":", "[", "]", ":", ":", "left", ">=", "right", "return", "pivot", "=", "quickSort", "quickSort", "Int", "partition", "(", ",", "left", ",", "right", ")", "(", ",", "left", ",", "right", ")", "(", ",", "left", ",", "right", ")", "nums", "&", "nums", ":", "left", ":", "pivot", "-", "1", "nums", "&", "nums", ":", "pivot", "+", "1", ":", "right", "nums", "&", "nums", ":", "left", ":", "right", ":", ":", ":"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 123, "ast_depth": 10, "n_identifiers": 8, "vocab_size": 30, "n_whitespaces": 89, "n_words": 44, "nloc": 11, "token_counts": 85}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/swift/chapter_sorting/quick_sort.swift#41-52", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/swift/chapter_sorting/quick_sort.swift", "language": "Java"}, "method": {"name": "medianThree", "qualified_name": "codes.swift.chapter_sorting.quick_sort.swift#medianThree", "start_line": 41, "end_line": 52, "signature": "medianThree(nums: [Int], left: Int, mid: Int, right: Int)", "original_code": "func medianThree(nums: [Int], left: Int, mid: Int, right: Int) -> Int {\n    let l = nums[left]\n    let m = nums[mid]\n    let r = nums[right]\n    if (l <= m && m <= r) || (r <= m && m <= l) {\n        return mid // m \u5728 l \u548c r \u4e4b\u95f4\n    }\n    if (m <= l && l <= r) || (r <= l && l <= m) {\n        return left // l \u5728 m \u548c r \u4e4b\u95f4\n    }\n    return right\n}", "doc_comment": "/* \u9009\u53d6\u4e09\u4e2a\u5019\u9009\u5143\u7d20\u7684\u4e2d\u4f4d\u6570 */"}, "code_tokens": ["func", "medianThree", "(", ",", ",", ")", "->", "Int", "{", "}", "Int", "mid", "Int", "right", "Int", "let", "", "let", "", "let", "", "{", "}", "if", "return", "right", "", "nums", ",", "left", ":", ":", ":", "l", "=", "m", "=", "r", "=", "return", "mid", "// m \u5728 l \u548c r \u4e4b\u95f4", "", "(", ")", "||", "{", "}", ":", "[", "]", "nums", "[", "left", "]", "nums", "[", "mid", "]", "||", "&&", "(", ")", "return", "left", "// l \u5728 m \u548c r \u4e4b\u95f4", "", "Int", "nums", "[", "right", "]", "if", "(", ")", "m", "<=", "l", "l", "<=", "r", "&&", "(", ")", "&&", "r", "<=", "l", "l", "<=", "m", "&&", "r", "<=", "m", "m", "<=", "l", "l", "<=", "m", "m", "<=", "r"], "metrics": {"cyclomatic_complexity": 7, "n_ast_nodes": 154, "ast_depth": 11, "n_identifiers": 10, "vocab_size": 29, "n_whitespaces": 128, "n_words": 59, "nloc": 12, "token_counts": 104}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/swift/chapter_sorting/quick_sort.swift#55-61", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/swift/chapter_sorting/quick_sort.swift", "language": "Java"}, "method": {"name": "partitionMedian", "qualified_name": "codes.swift.chapter_sorting.quick_sort.swift#partitionMedian", "start_line": 55, "end_line": 61, "signature": "partitionMedian(nums: inout [Int], left: Int, right: Int)", "original_code": "func partitionMedian(nums: inout [Int], left: Int, right: Int) -> Int {\n    // \u9009\u53d6\u4e09\u4e2a\u5019\u9009\u5143\u7d20\u7684\u4e2d\u4f4d\u6570\n    let med = medianThree(nums: nums, left: left, mid: left + (right - left) / 2, right: right)\n    // \u5c06\u4e2d\u4f4d\u6570\u4ea4\u6362\u81f3\u6570\u7ec4\u6700\u5de6\u7aef\n    nums.swapAt(left, med)\n    return partition(nums: &nums, left: left, right: right)\n}", "doc_comment": "/* \u54e8\u5175\u5212\u5206\uff08\u4e09\u6570\u53d6\u4e2d\u503c\uff09 */"}, "code_tokens": ["func", "partitionMedian", "(", ",", ",", ")", "->", "Int", "{", "// \u9009\u53d6\u4e09\u4e2a\u5019\u9009\u5143\u7d20\u7684\u4e2d\u4f4d\u6570", "}", "nums", "inout", "left", "Int", "right", "Int", "let", "", "return", "", ":", "[", "]", ":", ":", "med", "=", "partition", "Int", "// \u5c06\u4e2d\u4f4d\u6570\u4ea4\u6362\u81f3\u6570\u7ec4\u6700\u5de6\u7aef", ".", "swapAt", "(", ",", "left", ",", "right", ")", "medianThree", "nums", "(", "left", ",", "med", ")", "nums", "&", "nums", ":", "left", ":", "right", "(", "right", ")", ":", "nums", ":", "nums", ",", "left", ":", "left", ",", "mid", ":", ",", "right", ":", "left", "+", "/", "2", "(", ")", "right", "-", "left"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 111, "ast_depth": 14, "n_identifiers": 11, "vocab_size": 33, "n_whitespaces": 61, "n_words": 38, "nloc": 7, "token_counts": 79}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/swift/chapter_sorting/quick_sort.swift#64-74", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/swift/chapter_sorting/quick_sort.swift", "language": "Java"}, "method": {"name": "quickSortMedian", "qualified_name": "codes.swift.chapter_sorting.quick_sort.swift#quickSortMedian", "start_line": 64, "end_line": 74, "signature": "quickSortMedian(nums: inout [Int], left: Int, right: Int)", "original_code": "func quickSortMedian(nums: inout [Int], left: Int, right: Int) {\n    // \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52\n    if left >= right {\n        return\n    }\n    // \u54e8\u5175\u5212\u5206\n    let pivot = partitionMedian(nums: &nums, left: left, right: right)\n    // \u9012\u5f52\u5de6\u5b50\u6570\u7ec4\u3001\u53f3\u5b50\u6570\u7ec4\n    quickSortMedian(nums: &nums, left: left, right: pivot - 1)\n    quickSortMedian(nums: &nums, left: pivot + 1, right: right)\n}", "doc_comment": "/* \u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u51c6\u6570\u4f18\u5316\uff09 */"}, "code_tokens": ["func", "quickSortMedian", "(", ",", ",", ")", "{", "// \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52", "// \u54e8\u5175\u5212\u5206", "}", "nums", "inout", "left", "Int", "right", "Int", "if", "{", "}", "let", "// \u9012\u5f52\u5de6\u5b50\u6570\u7ec4\u3001\u53f3\u5b50\u6570\u7ec4", "", "", "", ":", "[", "]", ":", ":", "left", ">=", "right", "return", "pivot", "=", "quickSortMedian", "quickSortMedian", "Int", "partitionMedian", "(", ",", "left", ",", "right", ")", "(", ",", "left", ",", "right", ")", "(", ",", "left", ",", "right", ")", "nums", "&", "nums", ":", "left", ":", "pivot", "-", "1", "nums", "&", "nums", ":", "pivot", "+", "1", ":", "right", "nums", "&", "nums", ":", "left", ":", "right", ":", ":", ":"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 123, "ast_depth": 10, "n_identifiers": 8, "vocab_size": 30, "n_whitespaces": 89, "n_words": 44, "nloc": 11, "token_counts": 85}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/swift/chapter_sorting/quick_sort.swift#77-93", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/swift/chapter_sorting/quick_sort.swift", "language": "Java"}, "method": {"name": "quickSortTailCall", "qualified_name": "codes.swift.chapter_sorting.quick_sort.swift#quickSortTailCall", "start_line": 77, "end_line": 93, "signature": "quickSortTailCall(nums: inout [Int], left: Int, right: Int)", "original_code": "func quickSortTailCall(nums: inout [Int], left: Int, right: Int) {\n    var left = left\n    var right = right\n    // \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\n    while left < right {\n        // \u54e8\u5175\u5212\u5206\u64cd\u4f5c\n        let pivot = partition(nums: &nums, left: left, right: right)\n        // \u5bf9\u4e24\u4e2a\u5b50\u6570\u7ec4\u4e2d\u8f83\u77ed\u7684\u90a3\u4e2a\u6267\u884c\u5feb\u901f\u6392\u5e8f\n        if (pivot - left) < (right - pivot) {\n            quickSortTailCall(nums: &nums, left: left, right: pivot - 1) // \u9012\u5f52\u6392\u5e8f\u5de6\u5b50\u6570\u7ec4\n            left = pivot + 1 // \u5269\u4f59\u672a\u6392\u5e8f\u533a\u95f4\u4e3a [pivot + 1, right]\n        } else {\n            quickSortTailCall(nums: &nums, left: pivot + 1, right: right) // \u9012\u5f52\u6392\u5e8f\u53f3\u5b50\u6570\u7ec4\n            right = pivot - 1 // \u5269\u4f59\u672a\u6392\u5e8f\u533a\u95f4\u4e3a [left, pivot - 1]\n        }\n    }\n}", "doc_comment": "/* \u5feb\u901f\u6392\u5e8f\uff08\u9012\u5f52\u6df1\u5ea6\u4f18\u5316\uff09 */"}, "code_tokens": ["func", "quickSortTailCall", "(", ",", ",", ")", "{", "}", "nums", "inout", "left", "Int", "right", "Int", "var", "", ":", "[", "]", ":", ":", "left", "=", "Int", "left", "var", "right", "=", "left", "<", "right", "{", "// \u54e8\u5175\u5212\u5206\u64cd\u4f5c", "}", "right", "// \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62", "while", "let", "else", "{", "// \u9012\u5f52\u6392\u5e8f\u53f3\u5b50\u6570\u7ec4", "// \u5269\u4f59\u672a\u6392\u5e8f\u533a\u95f4\u4e3a [left, pivot - 1]", "}", "pivot", "=", "// \u5bf9\u4e24\u4e2a\u5b50\u6570\u7ec4\u4e2d\u8f83\u77ed\u7684\u90a3\u4e2a\u6267\u884c\u5feb\u901f\u6392\u5e8f", "{", "// \u9012\u5f52\u6392\u5e8f\u5de6\u5b50\u6570\u7ec4", "// \u5269\u4f59\u672a\u6392\u5e8f\u533a\u95f4\u4e3a [pivot + 1, right]", "}", "right", "=", "<", "left", "=", "quickSortTailCall", "pivot", "-", "1", "partition", "if", "(", ")", "quickSortTailCall", "pivot", "+", "1", "(", ",", "left", ",", "right", ")", "(", ",", "left", ",", "right", ")", "(", ")", "right", "-", "pivot", "(", ",", "left", ",", "right", ")", "nums", "&", "nums", ":", "pivot", "+", "1", ":", "right", "nums", "&", "nums", ":", "left", ":", "right", "pivot", "-", "left", "nums", "&", "nums", ":", "left", ":", "pivot", "-", "1", ":", ":", ":"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 173, "ast_depth": 14, "n_identifiers": 12, "vocab_size": 36, "n_whitespaces": 211, "n_words": 70, "nloc": 17, "token_counts": 121}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/zig/chapter_sorting/quick_sort.zig#33-41", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/zig/chapter_sorting/quick_sort.zig", "language": "Java"}, "method": {"name": "quickSort", "qualified_name": "codes.zig.chapter_sorting.quick_sort.zig#quickSort", "start_line": 33, "end_line": 41, "signature": "quickSort(nums: []i32, left: usize, right: usize)", "original_code": "pub fn quickSort(nums: []i32, left: usize, right: usize) void {\n        // \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52\n        if (left >= right) return;\n        // \u54e8\u5175\u5212\u5206\n        var pivot = partition(nums, left, right);\n        // \u9012\u5f52\u5de6\u5b50\u6570\u7ec4\u3001\u53f3\u5b50\u6570\u7ec4\n        quickSort(nums, left, pivot - 1);\n        quickSort(nums, pivot + 1, right);\n    }", "doc_comment": "// \u5feb\u901f\u6392\u5e8f"}, "code_tokens": ["pub", "quickSort", "fn", "(", ",", ",", ")", "void", "{", "// \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52", "// \u54e8\u5175\u5212\u5206", "// \u9012\u5f52\u5de6\u5b50\u6570\u7ec4\u3001\u53f3\u5b50\u6570\u7ec4", "}", "i32", "left", "usize", "right", "usize", "if", "var", ";", ";", ";", "nums", ":", ":", "(", ")", "return", ";", "pivot", "=", "quickSort", "quickSort", ":", "[", "]", "left", ">=", "right", "partition", "(", "nums", ",", "left", ",", ")", "(", "nums", ",", ",", "right", ")", "(", "nums", ",", "left", ",", "right", ")", "pivot", "-", "1", "pivot", "+", "1"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 96, "ast_depth": 8, "n_identifiers": 10, "vocab_size": 31, "n_whitespaces": 99, "n_words": 36, "nloc": 9, "token_counts": 66}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/zig/chapter_sorting/quick_sort.zig#67-82", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/zig/chapter_sorting/quick_sort.zig", "language": "Java"}, "method": {"name": "partition", "qualified_name": "codes.zig.chapter_sorting.quick_sort.zig#partition", "start_line": 67, "end_line": 82, "signature": "partition(nums: []i32, left: usize, right: usize)", "original_code": "pub fn partition(nums: []i32, left: usize, right: usize) usize {\n        // \u9009\u53d6\u4e09\u4e2a\u5019\u9009\u5143\u7d20\u7684\u4e2d\u4f4d\u6570\n        var med = medianThree(nums, left, (left + right) / 2, right);\n        // \u5c06\u4e2d\u4f4d\u6570\u4ea4\u6362\u81f3\u6570\u7ec4\u6700\u5de6\u7aef\n        swap(nums, left, med);\n        // \u4ee5 nums[left] \u4e3a\u57fa\u51c6\u6570\n        var i = left;\n        var j = right;\n        while (i < j) {\n            while (i < j and nums[j] >= nums[left]) j -= 1; // \u4ece\u53f3\u5411\u5de6\u627e\u9996\u4e2a\u5c0f\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20\n            while (i < j and nums[i] <= nums[left]) i += 1; // \u4ece\u5de6\u5411\u53f3\u627e\u9996\u4e2a\u5927\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20\n            swap(nums, i, j);   // \u4ea4\u6362\u8fd9\u4e24\u4e2a\u5143\u7d20\n        }\n        swap(nums, i, left);    // \u5c06\u57fa\u51c6\u6570\u4ea4\u6362\u81f3\u4e24\u5b50\u6570\u7ec4\u7684\u5206\u754c\u7ebf\n        return i;               // \u8fd4\u56de\u57fa\u51c6\u6570\u7684\u7d22\u5f15\n    }", "doc_comment": "// \u54e8\u5175\u5212\u5206\uff08\u4e09\u6570\u53d6\u4e2d\u503c\uff09"}, "code_tokens": ["pub", "partition", "fn", "(", ",", ",", ")", "usize", "{", "// \u9009\u53d6\u4e09\u4e2a\u5019\u9009\u5143\u7d20\u7684\u4e2d\u4f4d\u6570", "// \u5c06\u4e2d\u4f4d\u6570\u4ea4\u6362\u81f3\u6570\u7ec4\u6700\u5de6\u7aef", "// \u4ee5 nums[left] \u4e3a\u57fa\u51c6\u6570", "// \u5c06\u57fa\u51c6\u6570\u4ea4\u6362\u81f3\u4e24\u5b50\u6570\u7ec4\u7684\u5206\u754c\u7ebf", "// \u8fd4\u56de\u57fa\u51c6\u6570\u7684\u7d22\u5f15", "}", "i32", "left", "usize", "right", "usize", "var", ";", ";", "var", ";", "var", ";", "while", ";", "return", "i", ";", "nums", ":", ":", "med", "=", "swap", "i", "=", "left", "j", "=", "right", "(", ")", "{", "// \u4ece\u53f3\u5411\u5de6\u627e\u9996\u4e2a\u5c0f\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20", "// \u4ece\u5de6\u5411\u53f3\u627e\u9996\u4e2a\u5927\u4e8e\u57fa\u51c6\u6570\u7684\u5143\u7d20", "// \u4ea4\u6362\u8fd9\u4e24\u4e2a\u5143\u7d20", "}", "swap", ":", "[", "]", "medianThree", "(", "nums", ",", "left", ",", "med", ")", "i", "<", "j", "while", ";", "while", ";", "(", "nums", ",", "i", ",", "left", ")", "(", "nums", ",", "left", ",", ",", "right", ")", "(", "", "(", ")", ";", "swap", "/", "2", ")", "j", "-=", "1", "i", "<=", "i", "+=", "1", "(", "nums", ",", "i", ",", "j", ")", "(", ")", "<", "nums", "[", "left", "]", "left", "+", "right", "i", "=", "nums", "[", "]", "j", "and", "nums", "<", ">", "left", "[", "]", "j", "and", "nums", "i", "[", "]", "j"], "metrics": {"cyclomatic_complexity": 4, "n_ast_nodes": 203, "ast_depth": 15, "n_identifiers": 13, "vocab_size": 45, "n_whitespaces": 233, "n_words": 73, "nloc": 16, "token_counts": 139}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/zig/chapter_sorting/quick_sort.zig#85-94", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/zig/chapter_sorting/quick_sort.zig", "language": "Java"}, "method": {"name": "quickSort", "qualified_name": "codes.zig.chapter_sorting.quick_sort.zig#quickSort", "start_line": 85, "end_line": 94, "signature": "quickSort(nums: []i32, left: usize, right: usize)", "original_code": "pub fn quickSort(nums: []i32, left: usize, right: usize) void {\n        // \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52\n        if (left >= right) return;\n        // \u54e8\u5175\u5212\u5206\n        var pivot = partition(nums, left, right);\n        if (pivot == 0) return;\n        // \u9012\u5f52\u5de6\u5b50\u6570\u7ec4\u3001\u53f3\u5b50\u6570\u7ec4\n        quickSort(nums, left, pivot - 1);\n        quickSort(nums, pivot + 1, right);\n    }", "doc_comment": "// \u5feb\u901f\u6392\u5e8f"}, "code_tokens": ["pub", "quickSort", "fn", "(", ",", ",", ")", "void", "{", "// \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52", "// \u54e8\u5175\u5212\u5206", "// \u9012\u5f52\u5de6\u5b50\u6570\u7ec4\u3001\u53f3\u5b50\u6570\u7ec4", "}", "i32", "left", "usize", "right", "usize", "if", "var", ";", "if", ";", ";", "nums", ":", ":", "(", ")", "return", ";", "pivot", "=", "(", ")", "return", ";", "quickSort", "quickSort", ":", "[", "]", "left", ">=", "right", "partition", "pivot", "==", "0", "(", "nums", ",", "left", ",", ")", "(", "nums", ",", ",", "right", ")", "(", "nums", ",", "left", ",", "right", ")", "pivot", "-", "1", "pivot", "+", "1"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 108, "ast_depth": 8, "n_identifiers": 10, "vocab_size": 33, "n_whitespaces": 112, "n_words": 40, "nloc": 10, "token_counts": 74}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/zig/chapter_sorting/quick_sort.zig#122-138", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/zig/chapter_sorting/quick_sort.zig", "language": "Java"}, "method": {"name": "quickSort", "qualified_name": "codes.zig.chapter_sorting.quick_sort.zig#quickSort", "start_line": 122, "end_line": 138, "signature": "quickSort(nums: []i32, left_: usize, right_: usize)", "original_code": "pub fn quickSort(nums: []i32, left_: usize, right_: usize) void {\n        var left = left_;\n        var right = right_;\n        // \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52\n        while (left < right) {\n            // \u54e8\u5175\u5212\u5206\u64cd\u4f5c\n            var pivot = partition(nums, left, right);\n            // \u5bf9\u4e24\u4e2a\u5b50\u6570\u7ec4\u4e2d\u8f83\u77ed\u7684\u90a3\u4e2a\u6267\u884c\u5feb\u901f\u6392\u5e8f\n            if (pivot - left < right - pivot) {\n                quickSort(nums, left, pivot - 1);   // \u9012\u5f52\u6392\u5e8f\u5de6\u5b50\u6570\u7ec4\n                left = pivot + 1;                   // \u5269\u4f59\u672a\u6392\u5e8f\u533a\u95f4\u4e3a [pivot + 1, right]\n            } else {\n                quickSort(nums, pivot + 1, right);  // \u9012\u5f52\u6392\u5e8f\u53f3\u5b50\u6570\u7ec4\n                right = pivot - 1;                  // \u5269\u4f59\u672a\u6392\u5e8f\u533a\u95f4\u4e3a [left, pivot - 1]\n            }\n        }\n    }", "doc_comment": "// \u5feb\u901f\u6392\u5e8f\uff08\u9012\u5f52\u6df1\u5ea6\u4f18\u5316\uff09"}, "code_tokens": ["pub", "quickSort", "fn", "(", ",", ",", ")", "void", "{", "// \u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\u7ec8\u6b62\u9012\u5f52", "}", "i32", "left_", "usize", "right_", "usize", "var", ";", "var", ";", "while", "nums", ":", ":", "left", "=", "left_", "right", "=", "right_", "(", ")", "{", "// \u54e8\u5175\u5212\u5206\u64cd\u4f5c", "// \u5bf9\u4e24\u4e2a\u5b50\u6570\u7ec4\u4e2d\u8f83\u77ed\u7684\u90a3\u4e2a\u6267\u884c\u5feb\u901f\u6392\u5e8f", "}", ":", "[", "]", "left", "<", "right", "var", ";", "if", "else", "pivot", "=", "(", ")", "{", "// \u9012\u5f52\u6392\u5e8f\u5de6\u5b50\u6570\u7ec4", "// \u5269\u4f59\u672a\u6392\u5e8f\u533a\u95f4\u4e3a [pivot + 1, right]", "}", "{", "// \u9012\u5f52\u6392\u5e8f\u53f3\u5b50\u6570\u7ec4", "// \u5269\u4f59\u672a\u6392\u5e8f\u533a\u95f4\u4e3a [left, pivot - 1]", "}", "partition", "<", ";", ";", ";", ";", "(", "nums", ",", "left", ",", "right", ")", "pivot", "-", "left", "right", "-", "pivot", "quickSort", "left", "=", "quickSort", "right", "=", "(", "nums", ",", "left", ",", ")", "pivot", "+", "1", "(", "nums", ",", ",", "right", ")", "pivot", "-", "1", "pivot", "-", "1", "pivot", "+", "1"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 154, "ast_depth": 12, "n_identifiers": 12, "vocab_size": 38, "n_whitespaces": 305, "n_words": 62, "nloc": 17, "token_counts": 107}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:codes/zig/chapter_sorting/quick_sort.zig#142-142", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "codes/zig/chapter_sorting/quick_sort.zig", "language": "Java"}, "method": {"name": "main", "qualified_name": "codes.zig.chapter_sorting.quick_sort.zig#main", "start_line": 142, "end_line": 142, "signature": "main()", "original_code": "pub fn main()", "doc_comment": "// Driver Code"}, "code_tokens": ["pub", "main", "", "fn", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 10, "ast_depth": 4, "n_identifiers": 2, "vocab_size": 6, "n_whitespaces": 2, "n_words": 3, "nloc": 1, "token_counts": 6}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/c/chapter_sorting/quick_sort.c#10-14", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/c/chapter_sorting/quick_sort.c", "language": "Java"}, "method": {"name": "swap", "qualified_name": "zh-hant.codes.c.chapter_sorting.quick_sort.c#swap", "start_line": 10, "end_line": 14, "signature": "swap(int nums[], int i, int j)", "original_code": "void swap(int nums[], int i, int j) {\n    int tmp = nums[i];\n    nums[i] = nums[j];\n    nums[j] = tmp;\n}", "doc_comment": "/* \u5143\u7d20\u4ea4\u63db */"}, "code_tokens": ["void", "swap", "(", ",", ",", ")", "{", "}", "nums", "i", "j", ";", ";", ";", "int", "[", "]", "int", "int", "int", "tmp", "=", "=", "=", "tmp", "nums", "[", "i", "]", "nums", "[", "i", "]", "nums", "[", "j", "]", "nums", "[", "j", "]"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 63, "ast_depth": 7, "n_identifiers": 5, "vocab_size": 16, "n_whitespaces": 30, "n_words": 19, "nloc": 5, "token_counts": 41}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/c/chapter_sorting/quick_sort.c#17-34", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/c/chapter_sorting/quick_sort.c", "language": "Java"}, "method": {"name": "partition", "qualified_name": "zh-hant.codes.c.chapter_sorting.quick_sort.c#partition", "start_line": 17, "end_line": 34, "signature": "partition(int nums[], int left, int right)", "original_code": "int partition(int nums[], int left, int right) {\n    // \u4ee5 nums[left] \u70ba\u57fa\u6e96\u6578\n    int i = left, j = right;\n    while (i < j) {\n        while (i < j && nums[j] >= nums[left]) {\n            j--; // \u5f9e\u53f3\u5411\u5de6\u627e\u9996\u500b\u5c0f\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20\n        }\n        while (i < j && nums[i] <= nums[left]) {\n            i++; // \u5f9e\u5de6\u5411\u53f3\u627e\u9996\u500b\u5927\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20\n        }\n        // \u4ea4\u63db\u9019\u5169\u500b\u5143\u7d20\n        swap(nums, i, j);\n    }\n    // \u5c07\u57fa\u6e96\u6578\u4ea4\u63db\u81f3\u5169\u5b50\u9663\u5217\u7684\u5206\u754c\u7dda\n    swap(nums, i, left);\n    // \u8fd4\u56de\u57fa\u6e96\u6578\u7684\u7d22\u5f15\n    return i;\n}", "doc_comment": "/* \u54e8\u5175\u5283\u5206 */"}, "code_tokens": ["partition", "int", "(", ",", ",", ")", "{", "// \u4ee5 nums[left] \u70ba\u57fa\u6e96\u6578", "// \u5c07\u57fa\u6e96\u6578\u4ea4\u63db\u81f3\u5169\u5b50\u9663\u5217\u7684\u5206\u754c\u7dda", "// \u8fd4\u56de\u57fa\u6e96\u6578\u7684\u7d22\u5f15", "}", "nums", "left", "right", ",", ";", "while", ";", "return", "i", ";", "int", "[", "]", "int", "int", "int", "i", "=", "left", "j", "=", "right", "(", ")", "{", "// \u4ea4\u63db\u9019\u5169\u500b\u5143\u7d20", "}", "swap", "i", "<", "j", "while", "while", ";", "(", "nums", ",", "i", ",", "left", ")", "(", ")", "{", "// \u5f9e\u53f3\u5411\u5de6\u627e\u9996\u500b\u5c0f\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20", "}", "(", ")", "{", "// \u5f9e\u5de6\u5411\u53f3\u627e\u9996\u500b\u5927\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20", "}", "swap", "&&", ";", "&&", ";", "(", "nums", ",", "i", ",", "j", ")", "i", "<", "j", ">=", "j", "--", "i", "<", "j", "<=", "i", "++", "nums", "[", "j", "]", "nums", "[", "left", "]", "nums", "[", "i", "]", "nums", "[", "left", "]"], "metrics": {"cyclomatic_complexity": 6, "n_ast_nodes": 149, "ast_depth": 11, "n_identifiers": 7, "vocab_size": 31, "n_whitespaces": 169, "n_words": 51, "nloc": 18, "token_counts": 102}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/c/chapter_sorting/quick_sort.c#37-47", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/c/chapter_sorting/quick_sort.c", "language": "Java"}, "method": {"name": "quickSort", "qualified_name": "zh-hant.codes.c.chapter_sorting.quick_sort.c#quickSort", "start_line": 37, "end_line": 47, "signature": "quickSort(int nums[], int left, int right)", "original_code": "void quickSort(int nums[], int left, int right) {\n    // \u5b50\u9663\u5217\u9577\u5ea6\u70ba 1 \u6642\u7d42\u6b62\u905e\u8ff4\n    if (left >= right) {\n        return;\n    }\n    // \u54e8\u5175\u5283\u5206\n    int pivot = partition(nums, left, right);\n    // \u905e\u8ff4\u5de6\u5b50\u9663\u5217\u3001\u53f3\u5b50\u9663\u5217\n    quickSort(nums, left, pivot - 1);\n    quickSort(nums, pivot + 1, right);\n}", "doc_comment": "/* \u5feb\u901f\u6392\u5e8f */"}, "code_tokens": ["void", "quickSort", "(", ",", ",", ")", "{", "// \u5b50\u9663\u5217\u9577\u5ea6\u70ba 1 \u6642\u7d42\u6b62\u905e\u8ff4", "// \u54e8\u5175\u5283\u5206", "// \u905e\u8ff4\u5de6\u5b50\u9663\u5217\u3001\u53f3\u5b50\u9663\u5217", "}", "nums", "left", "right", "if", ";", ";", ";", "int", "[", "]", "int", "int", "(", ")", "{", "}", "int", "pivot", "=", "quickSort", "quickSort", "left", ">=", "right", "return", ";", "partition", "(", "nums", ",", "left", ",", ")", "(", "nums", ",", ",", "right", ")", "(", "nums", ",", "left", ",", "right", ")", "pivot", "-", "1", "pivot", "+", "1"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 92, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 26, "n_whitespaces": 79, "n_words": 34, "nloc": 11, "token_counts": 63}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/c/chapter_sorting/quick_sort.c#52-59", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/c/chapter_sorting/quick_sort.c", "language": "Java"}, "method": {"name": "medianThree", "qualified_name": "zh-hant.codes.c.chapter_sorting.quick_sort.c#medianThree", "start_line": 52, "end_line": 59, "signature": "medianThree(int nums[], int left, int mid, int right)", "original_code": "int medianThree(int nums[], int left, int mid, int right) {\n    int l = nums[left], m = nums[mid], r = nums[right];\n    if ((l <= m && m <= r) || (r <= m && m <= l))\n        return mid; // m \u5728 l \u548c r \u4e4b\u9593\n    if ((m <= l && l <= r) || (r <= l && l <= m))\n        return left; // l \u5728 m \u548c r \u4e4b\u9593\n    return right;\n}", "doc_comment": "/* \u9078\u53d6\u4e09\u500b\u5019\u9078\u5143\u7d20\u7684\u4e2d\u4f4d\u6578 */"}, "code_tokens": ["medianThree", "int", "(", ",", ",", ",", ")", "{", "// m \u5728 l \u548c r \u4e4b\u9593", "// l \u5728 m \u548c r \u4e4b\u9593", "}", "nums", "left", "mid", "right", ",", ",", ";", "if", "if", "return", "right", ";", "int", "[", "]", "int", "int", "int", "int", "l", "=", "m", "=", "r", "=", "(", ")", "return", "mid", ";", "(", ")", "return", "left", ";", "nums", "[", "left", "]", "nums", "[", "mid", "]", "nums", "[", "right", "]", "||", "||", "(", ")", "(", ")", "(", ")", "(", ")", "&&", "&&", "&&", "&&", "l", "<=", "m", "m", "<=", "r", "r", "<=", "m", "m", "<=", "l", "m", "<=", "l", "l", "<=", "r", "r", "<=", "l", "l", "<=", "m"], "metrics": {"cyclomatic_complexity": 9, "n_ast_nodes": 143, "ast_depth": 10, "n_identifiers": 8, "vocab_size": 25, "n_whitespaces": 104, "n_words": 56, "nloc": 8, "token_counts": 96}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/c/chapter_sorting/quick_sort.c#62-78", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/c/chapter_sorting/quick_sort.c", "language": "Java"}, "method": {"name": "partitionMedian", "qualified_name": "zh-hant.codes.c.chapter_sorting.quick_sort.c#partitionMedian", "start_line": 62, "end_line": 78, "signature": "partitionMedian(int nums[], int left, int right)", "original_code": "int partitionMedian(int nums[], int left, int right) {\n    // \u9078\u53d6\u4e09\u500b\u5019\u9078\u5143\u7d20\u7684\u4e2d\u4f4d\u6578\n    int med = medianThree(nums, left, (left + right) / 2, right);\n    // \u5c07\u4e2d\u4f4d\u6578\u4ea4\u63db\u81f3\u9663\u5217\u6700\u5de6\u7aef\n    swap(nums, left, med);\n    // \u4ee5 nums[left] \u70ba\u57fa\u6e96\u6578\n    int i = left, j = right;\n    while (i < j) {\n        while (i < j && nums[j] >= nums[left])\n            j--; // \u5f9e\u53f3\u5411\u5de6\u627e\u9996\u500b\u5c0f\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20\n        while (i < j && nums[i] <= nums[left])\n            i++;          // \u5f9e\u5de6\u5411\u53f3\u627e\u9996\u500b\u5927\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20\n        swap(nums, i, j); // \u4ea4\u63db\u9019\u5169\u500b\u5143\u7d20\n    }\n    swap(nums, i, left); // \u5c07\u57fa\u6e96\u6578\u4ea4\u63db\u81f3\u5169\u5b50\u9663\u5217\u7684\u5206\u754c\u7dda\n    return i;            // \u8fd4\u56de\u57fa\u6e96\u6578\u7684\u7d22\u5f15\n}", "doc_comment": "/* \u54e8\u5175\u5283\u5206\uff08\u4e09\u6578\u53d6\u4e2d\u503c\uff09 */"}, "code_tokens": ["partitionMedian", "int", "(", ",", ",", ")", "{", "// \u9078\u53d6\u4e09\u500b\u5019\u9078\u5143\u7d20\u7684\u4e2d\u4f4d\u6578", "// \u5c07\u4e2d\u4f4d\u6578\u4ea4\u63db\u81f3\u9663\u5217\u6700\u5de6\u7aef", "// \u4ee5 nums[left] \u70ba\u57fa\u6e96\u6578", "// \u5c07\u57fa\u6e96\u6578\u4ea4\u63db\u81f3\u5169\u5b50\u9663\u5217\u7684\u5206\u754c\u7dda", "// \u8fd4\u56de\u57fa\u6e96\u6578\u7684\u7d22\u5f15", "}", "nums", "left", "right", ";", ";", ",", ";", "while", ";", "return", "i", ";", "int", "[", "]", "int", "int", "int", "med", "=", "swap", "int", "i", "=", "left", "j", "=", "right", "(", ")", "{", "// \u5f9e\u53f3\u5411\u5de6\u627e\u9996\u500b\u5c0f\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20", "// \u5f9e\u5de6\u5411\u53f3\u627e\u9996\u500b\u5927\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20", "// \u4ea4\u63db\u9019\u5169\u500b\u5143\u7d20", "}", "swap", "medianThree", "(", "nums", ",", "left", ",", "med", ")", "i", "<", "j", "while", "while", ";", "(", "nums", ",", "i", ",", "left", ")", "(", "nums", ",", "left", ",", ",", "right", ")", "(", ")", ";", "(", ")", ";", "swap", "/", "2", "&&", "j", "--", "&&", "i", "++", "(", "nums", ",", "i", ",", "j", ")", "(", ")", "i", "<", "j", ">=", "i", "<", "j", "<=", "left", "+", "right", "nums", "[", "j", "]", "nums", "[", "left", "]", "nums", "[", "i", "]", "nums", "[", "left", "]"], "metrics": {"cyclomatic_complexity": 6, "n_ast_nodes": 185, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 38, "n_whitespaces": 187, "n_words": 66, "nloc": 17, "token_counts": 129}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/c/chapter_sorting/quick_sort.c#81-90", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/c/chapter_sorting/quick_sort.c", "language": "Java"}, "method": {"name": "quickSortMedian", "qualified_name": "zh-hant.codes.c.chapter_sorting.quick_sort.c#quickSortMedian", "start_line": 81, "end_line": 90, "signature": "quickSortMedian(int nums[], int left, int right)", "original_code": "void quickSortMedian(int nums[], int left, int right) {\n    // \u5b50\u9663\u5217\u9577\u5ea6\u70ba 1 \u6642\u7d42\u6b62\u905e\u8ff4\n    if (left >= right)\n        return;\n    // \u54e8\u5175\u5283\u5206\n    int pivot = partitionMedian(nums, left, right);\n    // \u905e\u8ff4\u5de6\u5b50\u9663\u5217\u3001\u53f3\u5b50\u9663\u5217\n    quickSortMedian(nums, left, pivot - 1);\n    quickSortMedian(nums, pivot + 1, right);\n}", "doc_comment": "/* \u5feb\u901f\u6392\u5e8f\uff08\u4e09\u6578\u53d6\u4e2d\u503c\uff09 */"}, "code_tokens": ["void", "quickSortMedian", "(", ",", ",", ")", "{", "// \u5b50\u9663\u5217\u9577\u5ea6\u70ba 1 \u6642\u7d42\u6b62\u905e\u8ff4", "// \u54e8\u5175\u5283\u5206", "// \u905e\u8ff4\u5de6\u5b50\u9663\u5217\u3001\u53f3\u5b50\u9663\u5217", "}", "nums", "left", "right", "if", ";", ";", ";", "int", "[", "]", "int", "int", "(", ")", "return", ";", "int", "pivot", "=", "quickSortMedian", "quickSortMedian", "left", ">=", "right", "partitionMedian", "(", "nums", ",", "left", ",", ")", "(", "nums", ",", ",", "right", ")", "(", "nums", ",", "left", ",", "right", ")", "pivot", "-", "1", "pivot", "+", "1"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 89, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 26, "n_whitespaces": 73, "n_words": 34, "nloc": 10, "token_counts": 61}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/c/chapter_sorting/quick_sort.c#95-113", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/c/chapter_sorting/quick_sort.c", "language": "Java"}, "method": {"name": "quickSortTailCall", "qualified_name": "zh-hant.codes.c.chapter_sorting.quick_sort.c#quickSortTailCall", "start_line": 95, "end_line": 113, "signature": "quickSortTailCall(int nums[], int left, int right)", "original_code": "void quickSortTailCall(int nums[], int left, int right) {\n    // \u5b50\u9663\u5217\u9577\u5ea6\u70ba 1 \u6642\u7d42\u6b62\n    while (left < right) {\n        // \u54e8\u5175\u5283\u5206\u64cd\u4f5c\n        int pivot = partition(nums, left, right);\n        // \u5c0d\u5169\u500b\u5b50\u9663\u5217\u4e2d\u8f03\u77ed\u7684\u90a3\u500b\u57f7\u884c\u5feb\u901f\u6392\u5e8f\n        if (pivot - left < right - pivot) {\n            // \u905e\u8ff4\u6392\u5e8f\u5de6\u5b50\u9663\u5217\n            quickSortTailCall(nums, left, pivot - 1);\n            // \u5269\u9918\u672a\u6392\u5e8f\u5340\u9593\u70ba [pivot + 1, right]\n            left = pivot + 1;\n        } else {\n            // \u905e\u8ff4\u6392\u5e8f\u53f3\u5b50\u9663\u5217\n            quickSortTailCall(nums, pivot + 1, right);\n            // \u5269\u9918\u672a\u6392\u5e8f\u5340\u9593\u70ba [left, pivot - 1]\n            right = pivot - 1;\n        }\n    }\n}", "doc_comment": "/* \u5feb\u901f\u6392\u5e8f\uff08\u905e\u8ff4\u6df1\u5ea6\u6700\u4f73\u5316\uff09 */"}, "code_tokens": ["void", "quickSortTailCall", "(", ",", ",", ")", "{", "// \u5b50\u9663\u5217\u9577\u5ea6\u70ba 1 \u6642\u7d42\u6b62", "}", "nums", "left", "right", "while", "int", "[", "]", "int", "int", "(", ")", "{", "// \u54e8\u5175\u5283\u5206\u64cd\u4f5c", "// \u5c0d\u5169\u500b\u5b50\u9663\u5217\u4e2d\u8f03\u77ed\u7684\u90a3\u500b\u57f7\u884c\u5feb\u901f\u6392\u5e8f", "}", "left", "<", "right", ";", "if", "else", "int", "pivot", "=", "(", ")", "{", "// \u905e\u8ff4\u6392\u5e8f\u5de6\u5b50\u9663\u5217", "// \u5269\u9918\u672a\u6392\u5e8f\u5340\u9593\u70ba [pivot + 1, right]", "}", "{", "// \u905e\u8ff4\u6392\u5e8f\u53f3\u5b50\u9663\u5217", "// \u5269\u9918\u672a\u6392\u5e8f\u5340\u9593\u70ba [left, pivot - 1]", "}", "partition", "<", ";", ";", ";", ";", "(", "nums", ",", "left", ",", "right", ")", "pivot", "-", "left", "right", "-", "pivot", "quickSortTailCall", "left", "=", "quickSortTailCall", "right", "=", "(", "nums", ",", "left", ",", ")", "pivot", "+", "1", "(", "nums", ",", ",", "right", ")", "pivot", "-", "1", "pivot", "-", "1", "pivot", "+", "1"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 133, "ast_depth": 12, "n_identifiers": 6, "vocab_size": 31, "n_whitespaces": 233, "n_words": 54, "nloc": 19, "token_counts": 92}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/c/chapter_sorting/quick_sort.c#116-137", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/c/chapter_sorting/quick_sort.c", "language": "Java"}, "method": {"name": "main", "qualified_name": "zh-hant.codes.c.chapter_sorting.quick_sort.c#main", "start_line": 116, "end_line": 137, "signature": "main()", "original_code": "int main() {\n    /* \u5feb\u901f\u6392\u5e8f */\n    int nums[] = {2, 4, 1, 0, 3, 5};\n    int size = sizeof(nums) / sizeof(int);\n    quickSort(nums, 0, size - 1);\n    printf(\"\u5feb\u901f\u6392\u5e8f\u5b8c\u6210\u5f8c nums = \");\n    printArray(nums, size);\n\n    /* \u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u6e96\u6578\u6700\u4f73\u5316\uff09 */\n    int nums1[] = {2, 4, 1, 0, 3, 5};\n    quickSortMedian(nums1, 0, size - 1);\n    printf(\"\u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u6e96\u6578\u6700\u4f73\u5316\uff09\u5b8c\u6210\u5f8c nums = \");\n    printArray(nums1, size);\n\n    /* \u5feb\u901f\u6392\u5e8f\uff08\u905e\u8ff4\u6df1\u5ea6\u6700\u4f73\u5316\uff09 */\n    int nums2[] = {2, 4, 1, 0, 3, 5};\n    quickSortTailCall(nums2, 0, size - 1);\n    printf(\"\u5feb\u901f\u6392\u5e8f\uff08\u905e\u8ff4\u6df1\u5ea6\u6700\u4f73\u5316\uff09\u5b8c\u6210\u5f8c nums = \");\n    printArray(nums1, size);\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "/* \u5feb\u901f\u6392\u5e8f */", "/* \u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u6e96\u6578\u6700\u4f73\u5316\uff09 */", "/* \u5feb\u901f\u6392\u5e8f\uff08\u905e\u8ff4\u6df1\u5ea6\u6700\u4f73\u5316\uff09 */", "}", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";", "return", "0", ";", "int", "nums", "=", "int", "size", "=", "quickSort", "printf", "printArray", "int", "nums1", "=", "quickSortMedian", "printf", "printArray", "int", "nums2", "=", "quickSortTailCall", "printf", "printArray", "[", "]", "{", "2", ",", "4", ",", "1", ",", "0", ",", "3", ",", "5", "}", "/", "(", "nums", ",", "0", ",", ")", "(", ")", "(", "nums", ",", "size", ")", "[", "]", "{", "2", ",", "4", ",", "1", ",", "0", ",", "3", ",", "5", "}", "(", "nums1", ",", "0", ",", ")", "(", ")", "(", "nums1", ",", "size", ")", "[", "]", "{", "2", ",", "4", ",", "1", ",", "0", ",", "3", ",", "5", "}", "(", "nums2", ",", "0", ",", ")", "(", ")", "(", "nums1", ",", "size", ")", "sizeof", "sizeof", "size", "-", "1", "\"", "\u5feb\u901f\u6392\u5e8f\u5b8c\u6210\u5f8c nums = ", "\"", "size", "-", "1", "\"", "\u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u6e96\u6578\u6700\u4f73\u5316\uff09\u5b8c\u6210\u5f8c nums = ", "\"", "size", "-", "1", "\"", "\u5feb\u901f\u6392\u5e8f\uff08\u905e\u8ff4\u6df1\u5ea6\u6700\u4f73\u5316\uff09\u5b8c\u6210\u5f8c nums = ", "\"", "(", "nums", ")", "(", ")", "int"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 221, "ast_depth": 11, "n_identifiers": 11, "vocab_size": 37, "n_whitespaces": 151, "n_words": 76, "nloc": 19, "token_counts": 157}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/cpp/chapter_sorting/quick_sort.cpp#11-25", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/cpp/chapter_sorting/quick_sort.cpp", "language": "Java"}, "method": {"name": "partition", "qualified_name": "zh-hant.codes.cpp.chapter_sorting.quick_sort.cpp#partition", "start_line": 11, "end_line": 25, "signature": "partition(vector<int> &nums, int left, int right)", "original_code": "private:\n    /* \u54e8\u5175\u5283\u5206 */\n    static int partition(vector<int> &nums, int left, int right) {\n        // \u4ee5 nums[left] \u70ba\u57fa\u6e96\u6578\n        int i = left, j = right;\n        while (i < j) {\n            while (i < j && nums[j] >= nums[left])\n                j--;                // \u5f9e\u53f3\u5411\u5de6\u627e\u9996\u500b\u5c0f\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20\n            while (i < j && nums[i] <= nums[left])\n                i++;                // \u5f9e\u5de6\u5411\u53f3\u627e\u9996\u500b\u5927\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20\n            swap(nums[i], nums[j]); // \u4ea4\u63db\u9019\u5169\u500b\u5143\u7d20\n        }\n        swap(nums[i], nums[left]);  // \u5c07\u57fa\u6e96\u6578\u4ea4\u63db\u81f3\u5169\u5b50\u9663\u5217\u7684\u5206\u754c\u7dda\n        return i;                   // \u8fd4\u56de\u57fa\u6e96\u6578\u7684\u7d22\u5f15\n    }", "doc_comment": ""}, "code_tokens": ["partition", "private", "/* \u54e8\u5175\u5283\u5206 */", "static", "int", "(", ",", ",", ")", "{", "// \u4ee5 nums[left] \u70ba\u57fa\u6e96\u6578", "// \u5c07\u57fa\u6e96\u6578\u4ea4\u63db\u81f3\u5169\u5b50\u9663\u5217\u7684\u5206\u754c\u7dda", "// \u8fd4\u56de\u57fa\u6e96\u6578\u7684\u7d22\u5f15", "}", ":", "nums", "left", "right", ",", ";", "while", ";", "return", "i", ";", "vector", "&", "int", "int", "int", "i", "=", "left", "j", "=", "right", "(", ")", "{", "// \u5f9e\u53f3\u5411\u5de6\u627e\u9996\u500b\u5c0f\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20", "// \u5f9e\u5de6\u5411\u53f3\u627e\u9996\u500b\u5927\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20", "// \u4ea4\u63db\u9019\u5169\u500b\u5143\u7d20", "}", "swap", "<", ">", "i", "<", "j", "while", "while", ";", "(", ",", ")", "int", "(", ")", ";", "(", ")", ";", "swap", "nums", "[", "i", "]", "nums", "[", "left", "]", "&&", "j", "--", "&&", "i", "++", "(", ",", ")", "i", "<", "j", ">=", "i", "<", "j", "<=", "nums", "[", "i", "]", "nums", "[", "j", "]", "nums", "[", "j", "]", "nums", "[", "left", "]", "nums", "[", "i", "]", "nums", "[", "left", "]"], "metrics": {"cyclomatic_complexity": 6, "n_ast_nodes": 165, "ast_depth": 11, "n_identifiers": 7, "vocab_size": 38, "n_whitespaces": 241, "n_words": 57, "nloc": 15, "token_counts": 112}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/cpp/chapter_sorting/quick_sort.cpp#27-38", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/cpp/chapter_sorting/quick_sort.cpp", "language": "Java"}, "method": {"name": "quickSort", "qualified_name": "zh-hant.codes.cpp.chapter_sorting.quick_sort.cpp#quickSort", "start_line": 27, "end_line": 38, "signature": "quickSort(vector<int> &nums, int left, int right)", "original_code": "public:\n    /* \u5feb\u901f\u6392\u5e8f */\n    static void quickSort(vector<int> &nums, int left, int right) {\n        // \u5b50\u9663\u5217\u9577\u5ea6\u70ba 1 \u6642\u7d42\u6b62\u905e\u8ff4\n        if (left >= right)\n            return;\n        // \u54e8\u5175\u5283\u5206\n        int pivot = partition(nums, left, right);\n        // \u905e\u8ff4\u5de6\u5b50\u9663\u5217\u3001\u53f3\u5b50\u9663\u5217\n        quickSort(nums, left, pivot - 1);\n        quickSort(nums, pivot + 1, right);\n    }", "doc_comment": ""}, "code_tokens": ["void", "quickSort", "public", "/* \u5feb\u901f\u6392\u5e8f */", "static", "(", ",", ",", ")", "{", "// \u5b50\u9663\u5217\u9577\u5ea6\u70ba 1 \u6642\u7d42\u6b62\u905e\u8ff4", "// \u54e8\u5175\u5283\u5206", "// \u905e\u8ff4\u5de6\u5b50\u9663\u5217\u3001\u53f3\u5b50\u9663\u5217", "}", ":", "nums", "left", "right", "if", ";", ";", ";", "vector", "&", "int", "int", "(", ")", "return", ";", "int", "pivot", "=", "quickSort", "quickSort", "<", ">", "left", ">=", "right", "partition", "(", "nums", ",", "left", ",", ")", "(", "nums", ",", ",", "right", ")", "int", "(", "nums", ",", "left", ",", "right", ")", "pivot", "-", "1", "pivot", "+", "1"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 99, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 32, "n_whitespaces": 122, "n_words": 38, "nloc": 12, "token_counts": 67}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/cpp/chapter_sorting/quick_sort.cpp#43-52", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/cpp/chapter_sorting/quick_sort.cpp", "language": "Java"}, "method": {"name": "medianThree", "qualified_name": "zh-hant.codes.cpp.chapter_sorting.quick_sort.cpp#medianThree", "start_line": 43, "end_line": 52, "signature": "medianThree(vector<int> &nums, int left, int mid, int right)", "original_code": "private:\n    /* \u9078\u53d6\u4e09\u500b\u5019\u9078\u5143\u7d20\u7684\u4e2d\u4f4d\u6578 */\n    static int medianThree(vector<int> &nums, int left, int mid, int right) {\n        int l = nums[left], m = nums[mid], r = nums[right];\n        if ((l <= m && m <= r) || (r <= m && m <= l))\n            return mid; // m \u5728 l \u548c r \u4e4b\u9593\n        if ((m <= l && l <= r) || (r <= l && l <= m))\n            return left; // l \u5728 m \u548c r \u4e4b\u9593\n        return right;\n    }", "doc_comment": ""}, "code_tokens": ["medianThree", "private", "/* \u9078\u53d6\u4e09\u500b\u5019\u9078\u5143\u7d20\u7684\u4e2d\u4f4d\u6578 */", "static", "int", "(", ",", ",", ",", ")", "{", "// m \u5728 l \u548c r \u4e4b\u9593", "// l \u5728 m \u548c r \u4e4b\u9593", "}", ":", "nums", "left", "mid", "right", ",", ",", ";", "if", "if", "return", "right", ";", "vector", "&", "int", "int", "int", "int", "l", "=", "m", "=", "r", "=", "(", ")", "return", "mid", ";", "(", ")", "return", "left", ";", "<", ">", "nums", "[", "left", "]", "nums", "[", "mid", "]", "nums", "[", "right", "]", "||", "||", "int", "(", ")", "(", ")", "(", ")", "(", ")", "&&", "&&", "&&", "&&", "l", "<=", "m", "m", "<=", "r", "r", "<=", "m", "m", "<=", "l", "m", "<=", "l", "l", "<=", "r", "r", "<=", "l", "l", "<=", "m"], "metrics": {"cyclomatic_complexity": 9, "n_ast_nodes": 153, "ast_depth": 10, "n_identifiers": 8, "vocab_size": 33, "n_whitespaces": 145, "n_words": 60, "nloc": 10, "token_counts": 102}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/cpp/chapter_sorting/quick_sort.cpp#55-71", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/cpp/chapter_sorting/quick_sort.cpp", "language": "Java"}, "method": {"name": "partition", "qualified_name": "zh-hant.codes.cpp.chapter_sorting.quick_sort.cpp#partition", "start_line": 55, "end_line": 71, "signature": "partition(vector<int> &nums, int left, int right)", "original_code": "static int partition(vector<int> &nums, int left, int right) {\n        // \u9078\u53d6\u4e09\u500b\u5019\u9078\u5143\u7d20\u7684\u4e2d\u4f4d\u6578\n        int med = medianThree(nums, left, (left + right) / 2, right);\n        // \u5c07\u4e2d\u4f4d\u6578\u4ea4\u63db\u81f3\u9663\u5217\u6700\u5de6\u7aef\n        swap(nums[left], nums[med]);\n        // \u4ee5 nums[left] \u70ba\u57fa\u6e96\u6578\n        int i = left, j = right;\n        while (i < j) {\n            while (i < j && nums[j] >= nums[left])\n                j--;                // \u5f9e\u53f3\u5411\u5de6\u627e\u9996\u500b\u5c0f\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20\n            while (i < j && nums[i] <= nums[left])\n                i++;                // \u5f9e\u5de6\u5411\u53f3\u627e\u9996\u500b\u5927\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20\n            swap(nums[i], nums[j]); // \u4ea4\u63db\u9019\u5169\u500b\u5143\u7d20\n        }\n        swap(nums[i], nums[left]);  // \u5c07\u57fa\u6e96\u6578\u4ea4\u63db\u81f3\u5169\u5b50\u9663\u5217\u7684\u5206\u754c\u7dda\n        return i;                   // \u8fd4\u56de\u57fa\u6e96\u6578\u7684\u7d22\u5f15\n    }", "doc_comment": "/* \u54e8\u5175\u5283\u5206\uff08\u4e09\u6578\u53d6\u4e2d\u503c\uff09 */"}, "code_tokens": ["partition", "static", "int", "(", ",", ",", ")", "{", "// \u9078\u53d6\u4e09\u500b\u5019\u9078\u5143\u7d20\u7684\u4e2d\u4f4d\u6578", "// \u5c07\u4e2d\u4f4d\u6578\u4ea4\u63db\u81f3\u9663\u5217\u6700\u5de6\u7aef", "// \u4ee5 nums[left] \u70ba\u57fa\u6e96\u6578", "// \u5c07\u57fa\u6e96\u6578\u4ea4\u63db\u81f3\u5169\u5b50\u9663\u5217\u7684\u5206\u754c\u7dda", "// \u8fd4\u56de\u57fa\u6e96\u6578\u7684\u7d22\u5f15", "}", "nums", "left", "right", ";", ";", ",", ";", "while", ";", "return", "i", ";", "vector", "&", "int", "int", "int", "med", "=", "swap", "int", "i", "=", "left", "j", "=", "right", "(", ")", "{", "// \u5f9e\u53f3\u5411\u5de6\u627e\u9996\u500b\u5c0f\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20", "// \u5f9e\u5de6\u5411\u53f3\u627e\u9996\u500b\u5927\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20", "// \u4ea4\u63db\u9019\u5169\u500b\u5143\u7d20", "}", "swap", "<", ">", "medianThree", "(", ",", ")", "i", "<", "j", "while", "while", ";", "(", ",", ")", "int", "(", "nums", ",", "left", ",", ",", "right", ")", "nums", "[", "left", "]", "nums", "[", "med", "]", "(", ")", ";", "(", ")", ";", "swap", "nums", "[", "i", "]", "nums", "[", "left", "]", "/", "2", "&&", "j", "--", "&&", "i", "++", "(", ",", ")", "(", ")", "i", "<", "j", ">=", "i", "<", "j", "<=", "nums", "[", "i", "]", "nums", "[", "j", "]", "left", "+", "right", "nums", "[", "j", "]", "nums", "[", "left", "]", "nums", "[", "i", "]", "nums", "[", "left", "]"], "metrics": {"cyclomatic_complexity": 6, "n_ast_nodes": 209, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 42, "n_whitespaces": 278, "n_words": 71, "nloc": 17, "token_counts": 144}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/cpp/chapter_sorting/quick_sort.cpp#73-84", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/cpp/chapter_sorting/quick_sort.cpp", "language": "Java"}, "method": {"name": "quickSort", "qualified_name": "zh-hant.codes.cpp.chapter_sorting.quick_sort.cpp#quickSort", "start_line": 73, "end_line": 84, "signature": "quickSort(vector<int> &nums, int left, int right)", "original_code": "public:\n    /* \u5feb\u901f\u6392\u5e8f */\n    static void quickSort(vector<int> &nums, int left, int right) {\n        // \u5b50\u9663\u5217\u9577\u5ea6\u70ba 1 \u6642\u7d42\u6b62\u905e\u8ff4\n        if (left >= right)\n            return;\n        // \u54e8\u5175\u5283\u5206\n        int pivot = partition(nums, left, right);\n        // \u905e\u8ff4\u5de6\u5b50\u9663\u5217\u3001\u53f3\u5b50\u9663\u5217\n        quickSort(nums, left, pivot - 1);\n        quickSort(nums, pivot + 1, right);\n    }", "doc_comment": ""}, "code_tokens": ["void", "quickSort", "public", "/* \u5feb\u901f\u6392\u5e8f */", "static", "(", ",", ",", ")", "{", "// \u5b50\u9663\u5217\u9577\u5ea6\u70ba 1 \u6642\u7d42\u6b62\u905e\u8ff4", "// \u54e8\u5175\u5283\u5206", "// \u905e\u8ff4\u5de6\u5b50\u9663\u5217\u3001\u53f3\u5b50\u9663\u5217", "}", ":", "nums", "left", "right", "if", ";", ";", ";", "vector", "&", "int", "int", "(", ")", "return", ";", "int", "pivot", "=", "quickSort", "quickSort", "<", ">", "left", ">=", "right", "partition", "(", "nums", ",", "left", ",", ")", "(", "nums", ",", ",", "right", ")", "int", "(", "nums", ",", "left", ",", "right", ")", "pivot", "-", "1", "pivot", "+", "1"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 99, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 32, "n_whitespaces": 122, "n_words": 38, "nloc": 12, "token_counts": 67}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/cpp/chapter_sorting/quick_sort.cpp#89-103", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/cpp/chapter_sorting/quick_sort.cpp", "language": "Java"}, "method": {"name": "partition", "qualified_name": "zh-hant.codes.cpp.chapter_sorting.quick_sort.cpp#partition", "start_line": 89, "end_line": 103, "signature": "partition(vector<int> &nums, int left, int right)", "original_code": "private:\n    /* \u54e8\u5175\u5283\u5206 */\n    static int partition(vector<int> &nums, int left, int right) {\n        // \u4ee5 nums[left] \u70ba\u57fa\u6e96\u6578\n        int i = left, j = right;\n        while (i < j) {\n            while (i < j && nums[j] >= nums[left])\n                j--;                // \u5f9e\u53f3\u5411\u5de6\u627e\u9996\u500b\u5c0f\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20\n            while (i < j && nums[i] <= nums[left])\n                i++;                // \u5f9e\u5de6\u5411\u53f3\u627e\u9996\u500b\u5927\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20\n            swap(nums[i], nums[j]); // \u4ea4\u63db\u9019\u5169\u500b\u5143\u7d20\n        }\n        swap(nums[i], nums[left]);  // \u5c07\u57fa\u6e96\u6578\u4ea4\u63db\u81f3\u5169\u5b50\u9663\u5217\u7684\u5206\u754c\u7dda\n        return i;                   // \u8fd4\u56de\u57fa\u6e96\u6578\u7684\u7d22\u5f15\n    }", "doc_comment": ""}, "code_tokens": ["partition", "private", "/* \u54e8\u5175\u5283\u5206 */", "static", "int", "(", ",", ",", ")", "{", "// \u4ee5 nums[left] \u70ba\u57fa\u6e96\u6578", "// \u5c07\u57fa\u6e96\u6578\u4ea4\u63db\u81f3\u5169\u5b50\u9663\u5217\u7684\u5206\u754c\u7dda", "// \u8fd4\u56de\u57fa\u6e96\u6578\u7684\u7d22\u5f15", "}", ":", "nums", "left", "right", ",", ";", "while", ";", "return", "i", ";", "vector", "&", "int", "int", "int", "i", "=", "left", "j", "=", "right", "(", ")", "{", "// \u5f9e\u53f3\u5411\u5de6\u627e\u9996\u500b\u5c0f\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20", "// \u5f9e\u5de6\u5411\u53f3\u627e\u9996\u500b\u5927\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20", "// \u4ea4\u63db\u9019\u5169\u500b\u5143\u7d20", "}", "swap", "<", ">", "i", "<", "j", "while", "while", ";", "(", ",", ")", "int", "(", ")", ";", "(", ")", ";", "swap", "nums", "[", "i", "]", "nums", "[", "left", "]", "&&", "j", "--", "&&", "i", "++", "(", ",", ")", "i", "<", "j", ">=", "i", "<", "j", "<=", "nums", "[", "i", "]", "nums", "[", "j", "]", "nums", "[", "j", "]", "nums", "[", "left", "]", "nums", "[", "i", "]", "nums", "[", "left", "]"], "metrics": {"cyclomatic_complexity": 6, "n_ast_nodes": 165, "ast_depth": 11, "n_identifiers": 7, "vocab_size": 38, "n_whitespaces": 241, "n_words": 57, "nloc": 15, "token_counts": 112}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/cpp/chapter_sorting/quick_sort.cpp#105-121", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/cpp/chapter_sorting/quick_sort.cpp", "language": "Java"}, "method": {"name": "quickSort", "qualified_name": "zh-hant.codes.cpp.chapter_sorting.quick_sort.cpp#quickSort", "start_line": 105, "end_line": 121, "signature": "quickSort(vector<int> &nums, int left, int right)", "original_code": "public:\n    /* \u5feb\u901f\u6392\u5e8f\uff08\u905e\u8ff4\u6df1\u5ea6\u6700\u4f73\u5316\uff09 */\n    static void quickSort(vector<int> &nums, int left, int right) {\n        // \u5b50\u9663\u5217\u9577\u5ea6\u70ba 1 \u6642\u7d42\u6b62\n        while (left < right) {\n            // \u54e8\u5175\u5283\u5206\u64cd\u4f5c\n            int pivot = partition(nums, left, right);\n            // \u5c0d\u5169\u500b\u5b50\u9663\u5217\u4e2d\u8f03\u77ed\u7684\u90a3\u500b\u57f7\u884c\u5feb\u901f\u6392\u5e8f\n            if (pivot - left < right - pivot) {\n                quickSort(nums, left, pivot - 1); // \u905e\u8ff4\u6392\u5e8f\u5de6\u5b50\u9663\u5217\n                left = pivot + 1;                 // \u5269\u9918\u672a\u6392\u5e8f\u5340\u9593\u70ba [pivot + 1, right]\n            } else {\n                quickSort(nums, pivot + 1, right); // \u905e\u8ff4\u6392\u5e8f\u53f3\u5b50\u9663\u5217\n                right = pivot - 1;                 // \u5269\u9918\u672a\u6392\u5e8f\u5340\u9593\u70ba [left, pivot - 1]\n            }\n        }\n    }", "doc_comment": ""}, "code_tokens": ["void", "quickSort", "public", "/* \u5feb\u901f\u6392\u5e8f\uff08\u905e\u8ff4\u6df1\u5ea6\u6700\u4f73\u5316\uff09 */", "static", "(", ",", ",", ")", "{", "// \u5b50\u9663\u5217\u9577\u5ea6\u70ba 1 \u6642\u7d42\u6b62", "}", ":", "nums", "left", "right", "while", "vector", "&", "int", "int", "(", ")", "{", "// \u54e8\u5175\u5283\u5206\u64cd\u4f5c", "// \u5c0d\u5169\u500b\u5b50\u9663\u5217\u4e2d\u8f03\u77ed\u7684\u90a3\u500b\u57f7\u884c\u5feb\u901f\u6392\u5e8f", "}", "<", ">", "left", "<", "right", ";", "if", "else", "int", "int", "pivot", "=", "(", ")", "{", "// \u905e\u8ff4\u6392\u5e8f\u5de6\u5b50\u9663\u5217", "// \u5269\u9918\u672a\u6392\u5e8f\u5340\u9593\u70ba [pivot + 1, right]", "}", "{", "// \u905e\u8ff4\u6392\u5e8f\u53f3\u5b50\u9663\u5217", "// \u5269\u9918\u672a\u6392\u5e8f\u5340\u9593\u70ba [left, pivot - 1]", "}", "partition", "<", ";", ";", ";", ";", "(", "nums", ",", "left", ",", "right", ")", "pivot", "-", "left", "right", "-", "pivot", "quickSort", "left", "=", "quickSort", "right", "=", "(", "nums", ",", "left", ",", ")", "pivot", "+", "1", "(", "nums", ",", ",", "right", ")", "pivot", "-", "1", "pivot", "-", "1", "pivot", "+", "1"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 143, "ast_depth": 12, "n_identifiers": 6, "vocab_size": 36, "n_whitespaces": 286, "n_words": 59, "nloc": 17, "token_counts": 98}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/cpp/chapter_sorting/quick_sort.cpp#125-145", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/cpp/chapter_sorting/quick_sort.cpp", "language": "Java"}, "method": {"name": "main", "qualified_name": "zh-hant.codes.cpp.chapter_sorting.quick_sort.cpp#main", "start_line": 125, "end_line": 145, "signature": "main()", "original_code": "int main() {\n    /* \u5feb\u901f\u6392\u5e8f */\n    vector<int> nums{2, 4, 1, 0, 3, 5};\n    QuickSort::quickSort(nums, 0, nums.size() - 1);\n    cout << \"\u5feb\u901f\u6392\u5e8f\u5b8c\u6210\u5f8c nums = \";\n    printVector(nums);\n\n    /* \u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u6e96\u6578\u6700\u4f73\u5316\uff09 */\n    vector<int> nums1 = {2, 4, 1, 0, 3, 5};\n    QuickSortMedian::quickSort(nums1, 0, nums1.size() - 1);\n    cout << \"\u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u6e96\u6578\u6700\u4f73\u5316\uff09\u5b8c\u6210\u5f8c nums = \";\n    printVector(nums1);\n\n    /* \u5feb\u901f\u6392\u5e8f\uff08\u905e\u8ff4\u6df1\u5ea6\u6700\u4f73\u5316\uff09 */\n    vector<int> nums2 = {2, 4, 1, 0, 3, 5};\n    QuickSortTailCall::quickSort(nums2, 0, nums2.size() - 1);\n    cout << \"\u5feb\u901f\u6392\u5e8f\uff08\u905e\u8ff4\u6df1\u5ea6\u6700\u4f73\u5316\uff09\u5b8c\u6210\u5f8c nums = \";\n    printVector(nums2);\n\n    return 0;\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["main", "int", "(", ")", "{", "/* \u5feb\u901f\u6392\u5e8f */", ";", "/* \u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u6e96\u6578\u6700\u4f73\u5316\uff09 */", "/* \u5feb\u901f\u6392\u5e8f\uff08\u905e\u8ff4\u6df1\u5ea6\u6700\u4f73\u5316\uff09 */", "}", "", "{", "}", "", ";", ";", ";", ";", "", ";", ";", ";", ";", "", ";", ";", ";", "return", "0", ";", "vector", "nums", "2", ",", "4", ",", "1", ",", "0", ",", "3", ",", "5", "QuickSort", "::", "quickSort", "(", ")", "cout", "<<", "printVector", "vector", "nums1", "=", "QuickSortMedian", "::", "quickSort", "(", ")", "cout", "<<", "printVector", "vector", "nums2", "=", "QuickSortTailCall", "::", "quickSort", "(", ")", "cout", "<<", "printVector", "<", ">", "-", "1", "\"", "\u5feb\u901f\u6392\u5e8f\u5b8c\u6210\u5f8c nums = ", "\"", "(", "nums", ")", "<", ">", "{", "2", ",", "4", ",", "1", ",", "0", ",", "3", ",", "5", "}", "-", "1", "\"", "\u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u6e96\u6578\u6700\u4f73\u5316\uff09\u5b8c\u6210\u5f8c nums = ", "\"", "(", "nums1", ")", "<", ">", "{", "2", ",", "4", ",", "1", ",", "0", ",", "3", ",", "5", "}", "-", "1", "\"", "\u5feb\u901f\u6392\u5e8f\uff08\u905e\u8ff4\u6df1\u5ea6\u6700\u4f73\u5316\uff09\u5b8c\u6210\u5f8c nums = ", "\"", "(", "nums2", ")", "int", "nums", ".", "size", "int", "nums1", ".", "size", "int", "nums2", ".", "size", ",", "nums", "(", ")", ",", "nums1", "(", ")", ",", "nums2", "(", ")", "0", ",", "0", ",", "0", ","], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 229, "ast_depth": 10, "n_identifiers": 11, "vocab_size": 41, "n_whitespaces": 142, "n_words": 76, "nloc": 18, "token_counts": 159}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/csharp/chapter_sorting/quick_sort.cs#11-13", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/csharp/chapter_sorting/quick_sort.cs", "language": "Java"}, "method": {"name": "Swap", "qualified_name": "zh-hant.codes.csharp.chapter_sorting.quick_sort.cs#Swap", "start_line": 11, "end_line": 13, "signature": "Swap(int[] nums, int i, int j)", "original_code": "static void Swap(int[] nums, int i, int j) {\n        (nums[j], nums[i]) = (nums[i], nums[j]);\n    }", "doc_comment": "/* \u5143\u7d20\u4ea4\u63db */"}, "code_tokens": ["void", "Swap", "static", "(", ",", ",", ")", "{", "}", "nums", "i", "j", "=", ";", "int", "int", "(", ")", "(", ")", "int", "[", "]", ",", "nums", "[", "i", "]", ",", "nums", "[", "j", "]", "nums", "[", "j", "]", "nums", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 64, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 16, "n_whitespaces": 26, "n_words": 17, "nloc": 3, "token_counts": 41}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/csharp/chapter_sorting/quick_sort.cs#16-28", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/csharp/chapter_sorting/quick_sort.cs", "language": "Java"}, "method": {"name": "Partition", "qualified_name": "zh-hant.codes.csharp.chapter_sorting.quick_sort.cs#Partition", "start_line": 16, "end_line": 28, "signature": "Partition(int[] nums, int left, int right)", "original_code": "static int Partition(int[] nums, int left, int right) {\n        // \u4ee5 nums[left] \u70ba\u57fa\u6e96\u6578\n        int i = left, j = right;\n        while (i < j) {\n            while (i < j && nums[j] >= nums[left])\n                j--;          // \u5f9e\u53f3\u5411\u5de6\u627e\u9996\u500b\u5c0f\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20\n            while (i < j && nums[i] <= nums[left])\n                i++;          // \u5f9e\u5de6\u5411\u53f3\u627e\u9996\u500b\u5927\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20\n            Swap(nums, i, j); // \u4ea4\u63db\u9019\u5169\u500b\u5143\u7d20\n        }\n        Swap(nums, i, left);  // \u5c07\u57fa\u6e96\u6578\u4ea4\u63db\u81f3\u5169\u5b50\u9663\u5217\u7684\u5206\u754c\u7dda\n        return i;             // \u8fd4\u56de\u57fa\u6e96\u6578\u7684\u7d22\u5f15\n    }", "doc_comment": "/* \u54e8\u5175\u5283\u5206 */"}, "code_tokens": ["Partition", "static", "int", "(", ",", ",", ")", "{", "// \u4ee5 nums[left] \u70ba\u57fa\u6e96\u6578", "// \u5c07\u57fa\u6e96\u6578\u4ea4\u63db\u81f3\u5169\u5b50\u9663\u5217\u7684\u5206\u754c\u7dda", "// \u8fd4\u56de\u57fa\u6e96\u6578\u7684\u7d22\u5f15", "}", "nums", "left", "right", ",", ";", "while", ";", "return", "i", ";", "int", "int", "int", "i", "=", "left", "j", "=", "right", "(", ")", "{", "// \u5f9e\u53f3\u5411\u5de6\u627e\u9996\u500b\u5c0f\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20", "// \u5f9e\u5de6\u5411\u53f3\u627e\u9996\u500b\u5927\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20", "// \u4ea4\u63db\u9019\u5169\u500b\u5143\u7d20", "}", "Swap", "int", "[", "]", "i", "<", "j", "while", "while", ";", "(", "nums", ",", "i", ",", "left", ")", "(", ")", ";", "(", ")", ";", "Swap", "&&", "j", "--", "&&", "i", "++", "(", "nums", ",", "i", ",", "j", ")", "i", "<", "j", ">=", "i", "<", "j", "<=", "nums", "[", "j", "]", "nums", "[", "left", "]", "nums", "[", "i", "]", "nums", "[", "left", "]"], "metrics": {"cyclomatic_complexity": 6, "n_ast_nodes": 146, "ast_depth": 11, "n_identifiers": 7, "vocab_size": 32, "n_whitespaces": 213, "n_words": 52, "nloc": 13, "token_counts": 99}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/csharp/chapter_sorting/quick_sort.cs#31-40", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/csharp/chapter_sorting/quick_sort.cs", "language": "Java"}, "method": {"name": "QuickSort", "qualified_name": "zh-hant.codes.csharp.chapter_sorting.quick_sort.cs#QuickSort", "start_line": 31, "end_line": 40, "signature": "QuickSort(int[] nums, int left, int right)", "original_code": "public static void QuickSort(int[] nums, int left, int right) {\n        // \u5b50\u9663\u5217\u9577\u5ea6\u70ba 1 \u6642\u7d42\u6b62\u905e\u8ff4\n        if (left >= right)\n            return;\n        // \u54e8\u5175\u5283\u5206\n        int pivot = Partition(nums, left, right);\n        // \u905e\u8ff4\u5de6\u5b50\u9663\u5217\u3001\u53f3\u5b50\u9663\u5217\n        QuickSort(nums, left, pivot - 1);\n        QuickSort(nums, pivot + 1, right);\n    }", "doc_comment": "/* \u5feb\u901f\u6392\u5e8f */"}, "code_tokens": ["void", "QuickSort", "public", "static", "(", ",", ",", ")", "{", "// \u5b50\u9663\u5217\u9577\u5ea6\u70ba 1 \u6642\u7d42\u6b62\u905e\u8ff4", "// \u54e8\u5175\u5283\u5206", "// \u905e\u8ff4\u5de6\u5b50\u9663\u5217\u3001\u53f3\u5b50\u9663\u5217", "}", "nums", "left", "right", "if", ";", ";", ";", "int", "int", "(", ")", "return", ";", "int", "pivot", "=", "QuickSort", "QuickSort", "int", "[", "]", "left", ">=", "right", "Partition", "(", "nums", ",", "left", ",", ")", "(", "nums", ",", ",", "right", ")", "(", "nums", ",", "left", ",", "right", ")", "pivot", "-", "1", "pivot", "+", "1"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 93, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 28, "n_whitespaces": 111, "n_words": 36, "nloc": 10, "token_counts": 63}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/csharp/chapter_sorting/quick_sort.cs#46-48", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/csharp/chapter_sorting/quick_sort.cs", "language": "Java"}, "method": {"name": "Swap", "qualified_name": "zh-hant.codes.csharp.chapter_sorting.quick_sort.cs#Swap", "start_line": 46, "end_line": 48, "signature": "Swap(int[] nums, int i, int j)", "original_code": "static void Swap(int[] nums, int i, int j) {\n        (nums[j], nums[i]) = (nums[i], nums[j]);\n    }", "doc_comment": "/* \u5143\u7d20\u4ea4\u63db */"}, "code_tokens": ["void", "Swap", "static", "(", ",", ",", ")", "{", "}", "nums", "i", "j", "=", ";", "int", "int", "(", ")", "(", ")", "int", "[", "]", ",", "nums", "[", "i", "]", ",", "nums", "[", "j", "]", "nums", "[", "j", "]", "nums", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 64, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 16, "n_whitespaces": 26, "n_words": 17, "nloc": 3, "token_counts": 41}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/csharp/chapter_sorting/quick_sort.cs#51-58", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/csharp/chapter_sorting/quick_sort.cs", "language": "Java"}, "method": {"name": "MedianThree", "qualified_name": "zh-hant.codes.csharp.chapter_sorting.quick_sort.cs#MedianThree", "start_line": 51, "end_line": 58, "signature": "MedianThree(int[] nums, int left, int mid, int right)", "original_code": "static int MedianThree(int[] nums, int left, int mid, int right) {\n        int l = nums[left], m = nums[mid], r = nums[right];\n        if ((l <= m && m <= r) || (r <= m && m <= l))\n            return mid; // m \u5728 l \u548c r \u4e4b\u9593\n        if ((m <= l && l <= r) || (r <= l && l <= m))\n            return left; // l \u5728 m \u548c r \u4e4b\u9593\n        return right;\n    }", "doc_comment": "/* \u9078\u53d6\u4e09\u500b\u5019\u9078\u5143\u7d20\u7684\u4e2d\u4f4d\u6578 */"}, "code_tokens": ["MedianThree", "static", "int", "(", ",", ",", ",", ")", "{", "// m \u5728 l \u548c r \u4e4b\u9593", "// l \u5728 m \u548c r \u4e4b\u9593", "}", "nums", "left", "mid", "right", ",", ",", ";", "if", "if", "return", "right", ";", "int", "int", "int", "int", "l", "=", "m", "=", "r", "=", "(", ")", "return", "mid", ";", "(", ")", "return", "left", ";", "int", "[", "]", "nums", "[", "left", "]", "nums", "[", "mid", "]", "nums", "[", "right", "]", "||", "||", "(", ")", "(", ")", "(", ")", "(", ")", "&&", "&&", "&&", "&&", "l", "<=", "m", "m", "<=", "r", "r", "<=", "m", "m", "<=", "l", "m", "<=", "l", "l", "<=", "r", "r", "<=", "l", "l", "<=", "m"], "metrics": {"cyclomatic_complexity": 9, "n_ast_nodes": 146, "ast_depth": 10, "n_identifiers": 8, "vocab_size": 26, "n_whitespaces": 133, "n_words": 57, "nloc": 8, "token_counts": 97}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/csharp/chapter_sorting/quick_sort.cs#61-77", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/csharp/chapter_sorting/quick_sort.cs", "language": "Java"}, "method": {"name": "Partition", "qualified_name": "zh-hant.codes.csharp.chapter_sorting.quick_sort.cs#Partition", "start_line": 61, "end_line": 77, "signature": "Partition(int[] nums, int left, int right)", "original_code": "static int Partition(int[] nums, int left, int right) {\n        // \u9078\u53d6\u4e09\u500b\u5019\u9078\u5143\u7d20\u7684\u4e2d\u4f4d\u6578\n        int med = MedianThree(nums, left, (left + right) / 2, right);\n        // \u5c07\u4e2d\u4f4d\u6578\u4ea4\u63db\u81f3\u9663\u5217\u6700\u5de6\u7aef\n        Swap(nums, left, med);\n        // \u4ee5 nums[left] \u70ba\u57fa\u6e96\u6578\n        int i = left, j = right;\n        while (i < j) {\n            while (i < j && nums[j] >= nums[left])\n                j--;          // \u5f9e\u53f3\u5411\u5de6\u627e\u9996\u500b\u5c0f\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20\n            while (i < j && nums[i] <= nums[left])\n                i++;          // \u5f9e\u5de6\u5411\u53f3\u627e\u9996\u500b\u5927\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20\n            Swap(nums, i, j); // \u4ea4\u63db\u9019\u5169\u500b\u5143\u7d20\n        }\n        Swap(nums, i, left);  // \u5c07\u57fa\u6e96\u6578\u4ea4\u63db\u81f3\u5169\u5b50\u9663\u5217\u7684\u5206\u754c\u7dda\n        return i;             // \u8fd4\u56de\u57fa\u6e96\u6578\u7684\u7d22\u5f15\n    }", "doc_comment": "/* \u54e8\u5175\u5283\u5206\uff08\u4e09\u6578\u53d6\u4e2d\u503c\uff09 */"}, "code_tokens": ["Partition", "static", "int", "(", ",", ",", ")", "{", "// \u9078\u53d6\u4e09\u500b\u5019\u9078\u5143\u7d20\u7684\u4e2d\u4f4d\u6578", "// \u5c07\u4e2d\u4f4d\u6578\u4ea4\u63db\u81f3\u9663\u5217\u6700\u5de6\u7aef", "// \u4ee5 nums[left] \u70ba\u57fa\u6e96\u6578", "// \u5c07\u57fa\u6e96\u6578\u4ea4\u63db\u81f3\u5169\u5b50\u9663\u5217\u7684\u5206\u754c\u7dda", "// \u8fd4\u56de\u57fa\u6e96\u6578\u7684\u7d22\u5f15", "}", "nums", "left", "right", ";", ";", ",", ";", "while", ";", "return", "i", ";", "int", "int", "int", "med", "=", "Swap", "int", "i", "=", "left", "j", "=", "right", "(", ")", "{", "// \u5f9e\u53f3\u5411\u5de6\u627e\u9996\u500b\u5c0f\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20", "// \u5f9e\u5de6\u5411\u53f3\u627e\u9996\u500b\u5927\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20", "// \u4ea4\u63db\u9019\u5169\u500b\u5143\u7d20", "}", "Swap", "int", "[", "]", "MedianThree", "(", "nums", ",", "left", ",", "med", ")", "i", "<", "j", "while", "while", ";", "(", "nums", ",", "i", ",", "left", ")", "(", "nums", ",", "left", ",", ",", "right", ")", "(", ")", ";", "(", ")", ";", "Swap", "/", "2", "&&", "j", "--", "&&", "i", "++", "(", "nums", ",", "i", ",", "j", ")", "(", ")", "i", "<", "j", ">=", "i", "<", "j", "<=", "left", "+", "right", "nums", "[", "j", "]", "nums", "[", "left", "]", "nums", "[", "i", "]", "nums", "[", "left", "]"], "metrics": {"cyclomatic_complexity": 6, "n_ast_nodes": 188, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 39, "n_whitespaces": 263, "n_words": 67, "nloc": 17, "token_counts": 130}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/csharp/chapter_sorting/quick_sort.cs#80-89", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/csharp/chapter_sorting/quick_sort.cs", "language": "Java"}, "method": {"name": "QuickSort", "qualified_name": "zh-hant.codes.csharp.chapter_sorting.quick_sort.cs#QuickSort", "start_line": 80, "end_line": 89, "signature": "QuickSort(int[] nums, int left, int right)", "original_code": "public static void QuickSort(int[] nums, int left, int right) {\n        // \u5b50\u9663\u5217\u9577\u5ea6\u70ba 1 \u6642\u7d42\u6b62\u905e\u8ff4\n        if (left >= right)\n            return;\n        // \u54e8\u5175\u5283\u5206\n        int pivot = Partition(nums, left, right);\n        // \u905e\u8ff4\u5de6\u5b50\u9663\u5217\u3001\u53f3\u5b50\u9663\u5217\n        QuickSort(nums, left, pivot - 1);\n        QuickSort(nums, pivot + 1, right);\n    }", "doc_comment": "/* \u5feb\u901f\u6392\u5e8f */"}, "code_tokens": ["void", "QuickSort", "public", "static", "(", ",", ",", ")", "{", "// \u5b50\u9663\u5217\u9577\u5ea6\u70ba 1 \u6642\u7d42\u6b62\u905e\u8ff4", "// \u54e8\u5175\u5283\u5206", "// \u905e\u8ff4\u5de6\u5b50\u9663\u5217\u3001\u53f3\u5b50\u9663\u5217", "}", "nums", "left", "right", "if", ";", ";", ";", "int", "int", "(", ")", "return", ";", "int", "pivot", "=", "QuickSort", "QuickSort", "int", "[", "]", "left", ">=", "right", "Partition", "(", "nums", ",", "left", ",", ")", "(", "nums", ",", ",", "right", ")", "(", "nums", ",", "left", ",", "right", ")", "pivot", "-", "1", "pivot", "+", "1"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 93, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 28, "n_whitespaces": 111, "n_words": 36, "nloc": 10, "token_counts": 63}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/csharp/chapter_sorting/quick_sort.cs#95-97", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/csharp/chapter_sorting/quick_sort.cs", "language": "Java"}, "method": {"name": "Swap", "qualified_name": "zh-hant.codes.csharp.chapter_sorting.quick_sort.cs#Swap", "start_line": 95, "end_line": 97, "signature": "Swap(int[] nums, int i, int j)", "original_code": "static void Swap(int[] nums, int i, int j) {\n        (nums[j], nums[i]) = (nums[i], nums[j]);\n    }", "doc_comment": "/* \u5143\u7d20\u4ea4\u63db */"}, "code_tokens": ["void", "Swap", "static", "(", ",", ",", ")", "{", "}", "nums", "i", "j", "=", ";", "int", "int", "(", ")", "(", ")", "int", "[", "]", ",", "nums", "[", "i", "]", ",", "nums", "[", "j", "]", "nums", "[", "j", "]", "nums", "[", "i", "]"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 64, "ast_depth": 8, "n_identifiers": 4, "vocab_size": 16, "n_whitespaces": 26, "n_words": 17, "nloc": 3, "token_counts": 41}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/csharp/chapter_sorting/quick_sort.cs#100-112", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/csharp/chapter_sorting/quick_sort.cs", "language": "Java"}, "method": {"name": "Partition", "qualified_name": "zh-hant.codes.csharp.chapter_sorting.quick_sort.cs#Partition", "start_line": 100, "end_line": 112, "signature": "Partition(int[] nums, int left, int right)", "original_code": "static int Partition(int[] nums, int left, int right) {\n        // \u4ee5 nums[left] \u70ba\u57fa\u6e96\u6578\n        int i = left, j = right;\n        while (i < j) {\n            while (i < j && nums[j] >= nums[left])\n                j--;          // \u5f9e\u53f3\u5411\u5de6\u627e\u9996\u500b\u5c0f\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20\n            while (i < j && nums[i] <= nums[left])\n                i++;          // \u5f9e\u5de6\u5411\u53f3\u627e\u9996\u500b\u5927\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20\n            Swap(nums, i, j); // \u4ea4\u63db\u9019\u5169\u500b\u5143\u7d20\n        }\n        Swap(nums, i, left);  // \u5c07\u57fa\u6e96\u6578\u4ea4\u63db\u81f3\u5169\u5b50\u9663\u5217\u7684\u5206\u754c\u7dda\n        return i; // \u8fd4\u56de\u57fa\u6e96\u6578\u7684\u7d22\u5f15\n    }", "doc_comment": "/* \u54e8\u5175\u5283\u5206 */"}, "code_tokens": ["Partition", "static", "int", "(", ",", ",", ")", "{", "// \u4ee5 nums[left] \u70ba\u57fa\u6e96\u6578", "// \u5c07\u57fa\u6e96\u6578\u4ea4\u63db\u81f3\u5169\u5b50\u9663\u5217\u7684\u5206\u754c\u7dda", "// \u8fd4\u56de\u57fa\u6e96\u6578\u7684\u7d22\u5f15", "}", "nums", "left", "right", ",", ";", "while", ";", "return", "i", ";", "int", "int", "int", "i", "=", "left", "j", "=", "right", "(", ")", "{", "// \u5f9e\u53f3\u5411\u5de6\u627e\u9996\u500b\u5c0f\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20", "// \u5f9e\u5de6\u5411\u53f3\u627e\u9996\u500b\u5927\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20", "// \u4ea4\u63db\u9019\u5169\u500b\u5143\u7d20", "}", "Swap", "int", "[", "]", "i", "<", "j", "while", "while", ";", "(", "nums", ",", "i", ",", "left", ")", "(", ")", ";", "(", ")", ";", "Swap", "&&", "j", "--", "&&", "i", "++", "(", "nums", ",", "i", ",", "j", ")", "i", "<", "j", ">=", "i", "<", "j", "<=", "nums", "[", "j", "]", "nums", "[", "left", "]", "nums", "[", "i", "]", "nums", "[", "left", "]"], "metrics": {"cyclomatic_complexity": 6, "n_ast_nodes": 146, "ast_depth": 11, "n_identifiers": 7, "vocab_size": 32, "n_whitespaces": 201, "n_words": 52, "nloc": 13, "token_counts": 99}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/csharp/chapter_sorting/quick_sort.cs#115-129", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/csharp/chapter_sorting/quick_sort.cs", "language": "Java"}, "method": {"name": "QuickSort", "qualified_name": "zh-hant.codes.csharp.chapter_sorting.quick_sort.cs#QuickSort", "start_line": 115, "end_line": 129, "signature": "QuickSort(int[] nums, int left, int right)", "original_code": "public static void QuickSort(int[] nums, int left, int right) {\n        // \u5b50\u9663\u5217\u9577\u5ea6\u70ba 1 \u6642\u7d42\u6b62\n        while (left < right) {\n            // \u54e8\u5175\u5283\u5206\u64cd\u4f5c\n            int pivot = Partition(nums, left, right);\n            // \u5c0d\u5169\u500b\u5b50\u9663\u5217\u4e2d\u8f03\u77ed\u7684\u90a3\u500b\u57f7\u884c\u5feb\u901f\u6392\u5e8f\n            if (pivot - left < right - pivot) {\n                QuickSort(nums, left, pivot - 1);  // \u905e\u8ff4\u6392\u5e8f\u5de6\u5b50\u9663\u5217\n                left = pivot + 1;  // \u5269\u9918\u672a\u6392\u5e8f\u5340\u9593\u70ba [pivot + 1, right]\n            } else {\n                QuickSort(nums, pivot + 1, right); // \u905e\u8ff4\u6392\u5e8f\u53f3\u5b50\u9663\u5217\n                right = pivot - 1; // \u5269\u9918\u672a\u6392\u5e8f\u5340\u9593\u70ba [left, pivot - 1]\n            }\n        }\n    }", "doc_comment": "/* \u5feb\u901f\u6392\u5e8f\uff08\u905e\u8ff4\u6df1\u5ea6\u6700\u4f73\u5316\uff09 */"}, "code_tokens": ["void", "QuickSort", "public", "static", "(", ",", ",", ")", "{", "// \u5b50\u9663\u5217\u9577\u5ea6\u70ba 1 \u6642\u7d42\u6b62", "}", "nums", "left", "right", "while", "int", "int", "(", ")", "{", "// \u54e8\u5175\u5283\u5206\u64cd\u4f5c", "// \u5c0d\u5169\u500b\u5b50\u9663\u5217\u4e2d\u8f03\u77ed\u7684\u90a3\u500b\u57f7\u884c\u5feb\u901f\u6392\u5e8f", "}", "int", "[", "]", "left", "<", "right", ";", "if", "else", "int", "pivot", "=", "(", ")", "{", "// \u905e\u8ff4\u6392\u5e8f\u5de6\u5b50\u9663\u5217", "// \u5269\u9918\u672a\u6392\u5e8f\u5340\u9593\u70ba [pivot + 1, right]", "}", "{", "// \u905e\u8ff4\u6392\u5e8f\u53f3\u5b50\u9663\u5217", "// \u5269\u9918\u672a\u6392\u5e8f\u5340\u9593\u70ba [left, pivot - 1]", "}", "Partition", "<", ";", ";", ";", ";", "(", "nums", ",", "left", ",", "right", ")", "pivot", "-", "left", "right", "-", "pivot", "QuickSort", "left", "=", "QuickSort", "right", "=", "(", "nums", ",", "left", ",", ")", "pivot", "+", "1", "(", "nums", ",", ",", "right", ")", "pivot", "-", "1", "pivot", "-", "1", "pivot", "+", "1"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 137, "ast_depth": 12, "n_identifiers": 6, "vocab_size": 33, "n_whitespaces": 245, "n_words": 56, "nloc": 15, "token_counts": 94}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/csharp/chapter_sorting/quick_sort.cs#134-149", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/csharp/chapter_sorting/quick_sort.cs", "language": "Java"}, "method": {"name": "Test", "qualified_name": "zh-hant.codes.csharp.chapter_sorting.quick_sort.cs#Test", "start_line": 134, "end_line": 149, "signature": "Test()", "original_code": "public void Test() {\n        /* \u5feb\u901f\u6392\u5e8f */\n        int[] nums = [2, 4, 1, 0, 3, 5];\n        quickSort.QuickSort(nums, 0, nums.Length - 1);\n        Console.WriteLine(\"\u5feb\u901f\u6392\u5e8f\u5b8c\u6210\u5f8c nums = \" + string.Join(\",\", nums));\n\n        /* \u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u6e96\u6578\u6700\u4f73\u5316\uff09 */\n        int[] nums1 = [2, 4, 1, 0, 3, 5];\n        QuickSortMedian.QuickSort(nums1, 0, nums1.Length - 1);\n        Console.WriteLine(\"\u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u6e96\u6578\u6700\u4f73\u5316\uff09\u5b8c\u6210\u5f8c nums1 = \" + string.Join(\",\", nums1));\n\n        /* \u5feb\u901f\u6392\u5e8f\uff08\u905e\u8ff4\u6df1\u5ea6\u6700\u4f73\u5316\uff09 */\n        int[] nums2 = [2, 4, 1, 0, 3, 5];\n        QuickSortTailCall.QuickSort(nums2, 0, nums2.Length - 1);\n        Console.WriteLine(\"\u5feb\u901f\u6392\u5e8f\uff08\u905e\u8ff4\u6df1\u5ea6\u6700\u4f73\u5316\uff09\u5b8c\u6210\u5f8c nums2 = \" + string.Join(\",\", nums2));\n    }", "doc_comment": ""}, "code_tokens": ["void", "Test", "public", "(", ")", "{", "/* \u5feb\u901f\u6392\u5e8f */", "/* \u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u6e96\u6578\u6700\u4f73\u5316\uff09 */", "/* \u5feb\u901f\u6392\u5e8f\uff08\u905e\u8ff4\u6df1\u5ea6\u6700\u4f73\u5316\uff09 */", "}", ";", ";", ";", ";", ";", ";", ";", ";", ";", "nums", "=", "2", ",", "4", ",", "1", ",", "0", ",", "3", ",", "5", "]", "quickSort", ".", "QuickSort", "Console", ".", "WriteLine", "nums1", "=", "2", ",", "4", ",", "1", ",", "0", ",", "3", ",", "5", "]", "QuickSortMedian", ".", "QuickSort", "Console", ".", "WriteLine", "nums2", "=", "2", ",", "4", ",", "1", ",", "0", ",", "3", ",", "5", "]", "QuickSortTailCall", ".", "QuickSort", "Console", ".", "WriteLine", "int", "[", "]", "[", "(", "nums", ",", "0", ",", ")", "(", ")", "int", "[", "]", "[", "(", "nums1", ",", "0", ",", ")", "(", ")", "int", "[", "]", "[", "(", "nums2", ",", "0", ",", ")", "(", ")", "-", "1", "+", "-", "1", "+", "-", "1", "+", "nums", ".", "Length", "\"", "\u5feb\u901f\u6392\u5e8f\u5b8c\u6210\u5f8c nums = ", "\"", "string", ".", "Join", "nums1", ".", "Length", "\"", "\u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u6e96\u6578\u6700\u4f73\u5316\uff09\u5b8c\u6210\u5f8c nums1 = ", "\"", "string", ".", "Join", "nums2", ".", "Length", "\"", "\u5feb\u901f\u6392\u5e8f\uff08\u905e\u8ff4\u6df1\u5ea6\u6700\u4f73\u5316\uff09\u5b8c\u6210\u5f8c nums2 = ", "\"", "string", ".", "Join", "(", ",", "nums", ")", "(", ",", "nums1", ")", "(", ",", "nums2", ")", "\"", ",", "\"", "\"", ",", "\"", "\"", ",", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 237, "ast_depth": 11, "n_identifiers": 13, "vocab_size": 41, "n_whitespaces": 178, "n_words": 78, "nloc": 14, "token_counts": 172}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/dart/chapter_sorting/quick_sort.dart#10-14", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/dart/chapter_sorting/quick_sort.dart", "language": "Java"}, "method": {"name": "_swap", "qualified_name": "zh-hant.codes.dart.chapter_sorting.quick_sort.dart#_swap", "start_line": 10, "end_line": 14, "signature": "_swap(List<int> nums, int i, int j)", "original_code": "static void _swap(List<int> nums, int i, int j) {\n    int tmp = nums[i];\n    nums[i] = nums[j];\n    nums[j] = tmp;\n  }", "doc_comment": "/* \u5143\u7d20\u4ea4\u63db */"}, "code_tokens": ["void", "_swap", "static", "(", ",", ",", ")", "{", "}", "nums", "i", "j", ";", ";", ";", "List", "int", "int", "int", "tmp", "=", "=", "=", "tmp", "<", ">", "nums", "[", "i", "]", "nums", "[", "i", "]", "nums", "[", "j", "]", "nums", "[", "j", "]", "int"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 67, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 20, "n_whitespaces": 33, "n_words": 21, "nloc": 5, "token_counts": 43}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/dart/chapter_sorting/quick_sort.dart#17-27", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/dart/chapter_sorting/quick_sort.dart", "language": "Java"}, "method": {"name": "_partition", "qualified_name": "zh-hant.codes.dart.chapter_sorting.quick_sort.dart#_partition", "start_line": 17, "end_line": 27, "signature": "_partition(List<int> nums, int left, int right)", "original_code": "static int _partition(List<int> nums, int left, int right) {\n    // \u4ee5 nums[left] \u70ba\u57fa\u6e96\u6578\n    int i = left, j = right;\n    while (i < j) {\n      while (i < j && nums[j] >= nums[left]) j--; // \u5f9e\u53f3\u5411\u5de6\u627e\u9996\u500b\u5c0f\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20\n      while (i < j && nums[i] <= nums[left]) i++; // \u5f9e\u5de6\u5411\u53f3\u627e\u9996\u500b\u5927\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20\n      _swap(nums, i, j); // \u4ea4\u63db\u9019\u5169\u500b\u5143\u7d20\n    }\n    _swap(nums, i, left); // \u5c07\u57fa\u6e96\u6578\u4ea4\u63db\u81f3\u5169\u5b50\u9663\u5217\u7684\u5206\u754c\u7dda\n    return i; // \u8fd4\u56de\u57fa\u6e96\u6578\u7684\u7d22\u5f15\n  }", "doc_comment": "/* \u54e8\u5175\u5283\u5206 */"}, "code_tokens": ["_partition", "static", "int", "(", ",", ",", ")", "{", "// \u4ee5 nums[left] \u70ba\u57fa\u6e96\u6578", "// \u5c07\u57fa\u6e96\u6578\u4ea4\u63db\u81f3\u5169\u5b50\u9663\u5217\u7684\u5206\u754c\u7dda", "// \u8fd4\u56de\u57fa\u6e96\u6578\u7684\u7d22\u5f15", "}", "nums", "left", "right", ",", ";", "while", ";", "return", "i", ";", "List", "int", "int", "int", "i", "=", "left", "j", "=", "right", "(", ")", "{", "// \u5f9e\u53f3\u5411\u5de6\u627e\u9996\u500b\u5c0f\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20", "// \u5f9e\u5de6\u5411\u53f3\u627e\u9996\u500b\u5927\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20", "// \u4ea4\u63db\u9019\u5169\u500b\u5143\u7d20", "}", "_swap", "<", ">", "i", "<", "j", "while", "while", ";", "(", "nums", ",", "i", ",", "left", ")", "int", "(", ")", ";", "(", ")", ";", "_swap", "&&", "j", "--", "&&", "i", "++", "(", "nums", ",", "i", ",", "j", ")", "i", "<", "j", ">=", "i", "<", "j", "<=", "nums", "[", "j", "]", "nums", "[", "left", "]", "nums", "[", "i", "]", "nums", "[", "left", "]"], "metrics": {"cyclomatic_complexity": 6, "n_ast_nodes": 147, "ast_depth": 11, "n_identifiers": 7, "vocab_size": 34, "n_whitespaces": 106, "n_words": 53, "nloc": 11, "token_counts": 100}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/dart/chapter_sorting/quick_sort.dart#30-38", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/dart/chapter_sorting/quick_sort.dart", "language": "Java"}, "method": {"name": "quickSort", "qualified_name": "zh-hant.codes.dart.chapter_sorting.quick_sort.dart#quickSort", "start_line": 30, "end_line": 38, "signature": "quickSort(List<int> nums, int left, int right)", "original_code": "static void quickSort(List<int> nums, int left, int right) {\n    // \u5b50\u9663\u5217\u9577\u5ea6\u70ba 1 \u6642\u7d42\u6b62\u905e\u8ff4\n    if (left >= right) return;\n    // \u54e8\u5175\u5283\u5206\n    int pivot = _partition(nums, left, right);\n    // \u905e\u8ff4\u5de6\u5b50\u9663\u5217\u3001\u53f3\u5b50\u9663\u5217\n    quickSort(nums, left, pivot - 1);\n    quickSort(nums, pivot + 1, right);\n  }", "doc_comment": "/* \u5feb\u901f\u6392\u5e8f */"}, "code_tokens": ["void", "quickSort", "static", "(", ",", ",", ")", "{", "// \u5b50\u9663\u5217\u9577\u5ea6\u70ba 1 \u6642\u7d42\u6b62\u905e\u8ff4", "// \u54e8\u5175\u5283\u5206", "// \u905e\u8ff4\u5de6\u5b50\u9663\u5217\u3001\u53f3\u5b50\u9663\u5217", "}", "nums", "left", "right", "if", ";", ";", ";", "List", "int", "int", "(", ")", "return", ";", "int", "pivot", "=", "quickSort", "quickSort", "<", ">", "left", ">=", "right", "_partition", "(", "nums", ",", "left", ",", ")", "(", "nums", ",", ",", "right", ")", "int", "(", "nums", ",", "left", ",", "right", ")", "pivot", "-", "1", "pivot", "+", "1"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 93, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 28, "n_whitespaces": 68, "n_words": 36, "nloc": 9, "token_counts": 63}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/dart/chapter_sorting/quick_sort.dart#44-48", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/dart/chapter_sorting/quick_sort.dart", "language": "Java"}, "method": {"name": "_swap", "qualified_name": "zh-hant.codes.dart.chapter_sorting.quick_sort.dart#_swap", "start_line": 44, "end_line": 48, "signature": "_swap(List<int> nums, int i, int j)", "original_code": "static void _swap(List<int> nums, int i, int j) {\n    int tmp = nums[i];\n    nums[i] = nums[j];\n    nums[j] = tmp;\n  }", "doc_comment": "/* \u5143\u7d20\u4ea4\u63db */"}, "code_tokens": ["void", "_swap", "static", "(", ",", ",", ")", "{", "}", "nums", "i", "j", ";", ";", ";", "List", "int", "int", "int", "tmp", "=", "=", "=", "tmp", "<", ">", "nums", "[", "i", "]", "nums", "[", "i", "]", "nums", "[", "j", "]", "nums", "[", "j", "]", "int"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 67, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 20, "n_whitespaces": 33, "n_words": 21, "nloc": 5, "token_counts": 43}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/dart/chapter_sorting/quick_sort.dart#51-58", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/dart/chapter_sorting/quick_sort.dart", "language": "Java"}, "method": {"name": "_medianThree", "qualified_name": "zh-hant.codes.dart.chapter_sorting.quick_sort.dart#_medianThree", "start_line": 51, "end_line": 58, "signature": "_medianThree(List<int> nums, int left, int mid, int right)", "original_code": "static int _medianThree(List<int> nums, int left, int mid, int right) {\n    int l = nums[left], m = nums[mid], r = nums[right];\n    if ((l <= m && m <= r) || (r <= m && m <= l))\n      return mid; // m \u5728 l \u548c r \u4e4b\u9593\n    if ((m <= l && l <= r) || (r <= l && l <= m))\n      return left; // l \u5728 m \u548c r \u4e4b\u9593\n    return right;\n  }", "doc_comment": "/* \u9078\u53d6\u4e09\u500b\u5019\u9078\u5143\u7d20\u7684\u4e2d\u4f4d\u6578 */"}, "code_tokens": ["_medianThree", "static", "int", "(", ",", ",", ",", ")", "{", "// m \u5728 l \u548c r \u4e4b\u9593", "// l \u5728 m \u548c r \u4e4b\u9593", "}", "nums", "left", "mid", "right", ",", ",", ";", "if", "if", "return", "right", ";", "List", "int", "int", "int", "int", "l", "=", "m", "=", "r", "=", "(", ")", "return", "mid", ";", "(", ")", "return", "left", ";", "<", ">", "nums", "[", "left", "]", "nums", "[", "mid", "]", "nums", "[", "right", "]", "||", "||", "int", "(", ")", "(", ")", "(", ")", "(", ")", "&&", "&&", "&&", "&&", "l", "<=", "m", "m", "<=", "r", "r", "<=", "m", "m", "<=", "l", "m", "<=", "l", "l", "<=", "r", "r", "<=", "l", "l", "<=", "m"], "metrics": {"cyclomatic_complexity": 9, "n_ast_nodes": 147, "ast_depth": 10, "n_identifiers": 8, "vocab_size": 29, "n_whitespaces": 103, "n_words": 58, "nloc": 8, "token_counts": 98}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/dart/chapter_sorting/quick_sort.dart#61-75", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/dart/chapter_sorting/quick_sort.dart", "language": "Java"}, "method": {"name": "_partition", "qualified_name": "zh-hant.codes.dart.chapter_sorting.quick_sort.dart#_partition", "start_line": 61, "end_line": 75, "signature": "_partition(List<int> nums, int left, int right)", "original_code": "static int _partition(List<int> nums, int left, int right) {\n    // \u9078\u53d6\u4e09\u500b\u5019\u9078\u5143\u7d20\u7684\u4e2d\u4f4d\u6578\n    int med = _medianThree(nums, left, (left + right) ~/ 2, right);\n    // \u5c07\u4e2d\u4f4d\u6578\u4ea4\u63db\u81f3\u9663\u5217\u6700\u5de6\u7aef\n    _swap(nums, left, med);\n    // \u4ee5 nums[left] \u70ba\u57fa\u6e96\u6578\n    int i = left, j = right;\n    while (i < j) {\n      while (i < j && nums[j] >= nums[left]) j--; // \u5f9e\u53f3\u5411\u5de6\u627e\u9996\u500b\u5c0f\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20\n      while (i < j && nums[i] <= nums[left]) i++; // \u5f9e\u5de6\u5411\u53f3\u627e\u9996\u500b\u5927\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20\n      _swap(nums, i, j); // \u4ea4\u63db\u9019\u5169\u500b\u5143\u7d20\n    }\n    _swap(nums, i, left); // \u5c07\u57fa\u6e96\u6578\u4ea4\u63db\u81f3\u5169\u5b50\u9663\u5217\u7684\u5206\u754c\u7dda\n    return i; // \u8fd4\u56de\u57fa\u6e96\u6578\u7684\u7d22\u5f15\n  }", "doc_comment": "/* \u54e8\u5175\u5283\u5206\uff08\u4e09\u6578\u53d6\u4e2d\u503c\uff09 */"}, "code_tokens": ["_partition", "static", "int", "(", ",", ",", ")", "{", "// \u9078\u53d6\u4e09\u500b\u5019\u9078\u5143\u7d20\u7684\u4e2d\u4f4d\u6578", "// \u5c07\u4e2d\u4f4d\u6578\u4ea4\u63db\u81f3\u9663\u5217\u6700\u5de6\u7aef", "// \u4ee5 nums[left] \u70ba\u57fa\u6e96\u6578", "// \u5c07\u57fa\u6e96\u6578\u4ea4\u63db\u81f3\u5169\u5b50\u9663\u5217\u7684\u5206\u754c\u7dda", "// \u8fd4\u56de\u57fa\u6e96\u6578\u7684\u7d22\u5f15", "}", "nums", "left", "right", ";", ";", ",", ";", "while", ";", "return", "i", ";", "List", "int", "int", "int", "med", "=", "_swap", "int", "i", "=", "left", "j", "=", "right", "(", ")", "{", "// \u5f9e\u53f3\u5411\u5de6\u627e\u9996\u500b\u5c0f\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20", "// \u5f9e\u5de6\u5411\u53f3\u627e\u9996\u500b\u5927\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20", "// \u4ea4\u63db\u9019\u5169\u500b\u5143\u7d20", "}", "_swap", "<", ">", "_medianThree", "(", "nums", ",", "left", ",", "med", ")", "i", "<", "j", "while", "while", ";", "(", "nums", ",", "i", ",", "left", ")", "int", "(", "nums", ",", "left", ",", ",", "right", ")", "(", ")", ";", "(", ")", ";", "_swap", "/", "2", "&&", "j", "--", "&&", "i", "++", "(", "nums", ",", "i", ",", "j", ")", "(", ")", "~", "i", "<", "j", ">=", "i", "<", "j", "<=", "left", "+", "right", "nums", "[", "j", "]", "nums", "[", "left", "]", "nums", "[", "i", "]", "nums", "[", "left", "]"], "metrics": {"cyclomatic_complexity": 6, "n_ast_nodes": 191, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 42, "n_whitespaces": 140, "n_words": 68, "nloc": 15, "token_counts": 132}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/dart/chapter_sorting/quick_sort.dart#78-86", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/dart/chapter_sorting/quick_sort.dart", "language": "Java"}, "method": {"name": "quickSort", "qualified_name": "zh-hant.codes.dart.chapter_sorting.quick_sort.dart#quickSort", "start_line": 78, "end_line": 86, "signature": "quickSort(List<int> nums, int left, int right)", "original_code": "static void quickSort(List<int> nums, int left, int right) {\n    // \u5b50\u9663\u5217\u9577\u5ea6\u70ba 1 \u6642\u7d42\u6b62\u905e\u8ff4\n    if (left >= right) return;\n    // \u54e8\u5175\u5283\u5206\n    int pivot = _partition(nums, left, right);\n    // \u905e\u8ff4\u5de6\u5b50\u9663\u5217\u3001\u53f3\u5b50\u9663\u5217\n    quickSort(nums, left, pivot - 1);\n    quickSort(nums, pivot + 1, right);\n  }", "doc_comment": "/* \u5feb\u901f\u6392\u5e8f */"}, "code_tokens": ["void", "quickSort", "static", "(", ",", ",", ")", "{", "// \u5b50\u9663\u5217\u9577\u5ea6\u70ba 1 \u6642\u7d42\u6b62\u905e\u8ff4", "// \u54e8\u5175\u5283\u5206", "// \u905e\u8ff4\u5de6\u5b50\u9663\u5217\u3001\u53f3\u5b50\u9663\u5217", "}", "nums", "left", "right", "if", ";", ";", ";", "List", "int", "int", "(", ")", "return", ";", "int", "pivot", "=", "quickSort", "quickSort", "<", ">", "left", ">=", "right", "_partition", "(", "nums", ",", "left", ",", ")", "(", "nums", ",", ",", "right", ")", "int", "(", "nums", ",", "left", ",", "right", ")", "pivot", "-", "1", "pivot", "+", "1"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 93, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 28, "n_whitespaces": 68, "n_words": 36, "nloc": 9, "token_counts": 63}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/dart/chapter_sorting/quick_sort.dart#92-96", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/dart/chapter_sorting/quick_sort.dart", "language": "Java"}, "method": {"name": "_swap", "qualified_name": "zh-hant.codes.dart.chapter_sorting.quick_sort.dart#_swap", "start_line": 92, "end_line": 96, "signature": "_swap(List<int> nums, int i, int j)", "original_code": "static void _swap(List<int> nums, int i, int j) {\n    int tmp = nums[i];\n    nums[i] = nums[j];\n    nums[j] = tmp;\n  }", "doc_comment": "/* \u5143\u7d20\u4ea4\u63db */"}, "code_tokens": ["void", "_swap", "static", "(", ",", ",", ")", "{", "}", "nums", "i", "j", ";", ";", ";", "List", "int", "int", "int", "tmp", "=", "=", "=", "tmp", "<", ">", "nums", "[", "i", "]", "nums", "[", "i", "]", "nums", "[", "j", "]", "nums", "[", "j", "]", "int"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 67, "ast_depth": 8, "n_identifiers": 5, "vocab_size": 20, "n_whitespaces": 33, "n_words": 21, "nloc": 5, "token_counts": 43}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/dart/chapter_sorting/quick_sort.dart#99-109", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/dart/chapter_sorting/quick_sort.dart", "language": "Java"}, "method": {"name": "_partition", "qualified_name": "zh-hant.codes.dart.chapter_sorting.quick_sort.dart#_partition", "start_line": 99, "end_line": 109, "signature": "_partition(List<int> nums, int left, int right)", "original_code": "static int _partition(List<int> nums, int left, int right) {\n    // \u4ee5 nums[left] \u70ba\u57fa\u6e96\u6578\n    int i = left, j = right;\n    while (i < j) {\n      while (i < j && nums[j] >= nums[left]) j--; // \u5f9e\u53f3\u5411\u5de6\u627e\u9996\u500b\u5c0f\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20\n      while (i < j && nums[i] <= nums[left]) i++; // \u5f9e\u5de6\u5411\u53f3\u627e\u9996\u500b\u5927\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20\n      _swap(nums, i, j); // \u4ea4\u63db\u9019\u5169\u500b\u5143\u7d20\n    }\n    _swap(nums, i, left); // \u5c07\u57fa\u6e96\u6578\u4ea4\u63db\u81f3\u5169\u5b50\u9663\u5217\u7684\u5206\u754c\u7dda\n    return i; // \u8fd4\u56de\u57fa\u6e96\u6578\u7684\u7d22\u5f15\n  }", "doc_comment": "/* \u54e8\u5175\u5283\u5206 */"}, "code_tokens": ["_partition", "static", "int", "(", ",", ",", ")", "{", "// \u4ee5 nums[left] \u70ba\u57fa\u6e96\u6578", "// \u5c07\u57fa\u6e96\u6578\u4ea4\u63db\u81f3\u5169\u5b50\u9663\u5217\u7684\u5206\u754c\u7dda", "// \u8fd4\u56de\u57fa\u6e96\u6578\u7684\u7d22\u5f15", "}", "nums", "left", "right", ",", ";", "while", ";", "return", "i", ";", "List", "int", "int", "int", "i", "=", "left", "j", "=", "right", "(", ")", "{", "// \u5f9e\u53f3\u5411\u5de6\u627e\u9996\u500b\u5c0f\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20", "// \u5f9e\u5de6\u5411\u53f3\u627e\u9996\u500b\u5927\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20", "// \u4ea4\u63db\u9019\u5169\u500b\u5143\u7d20", "}", "_swap", "<", ">", "i", "<", "j", "while", "while", ";", "(", "nums", ",", "i", ",", "left", ")", "int", "(", ")", ";", "(", ")", ";", "_swap", "&&", "j", "--", "&&", "i", "++", "(", "nums", ",", "i", ",", "j", ")", "i", "<", "j", ">=", "i", "<", "j", "<=", "nums", "[", "j", "]", "nums", "[", "left", "]", "nums", "[", "i", "]", "nums", "[", "left", "]"], "metrics": {"cyclomatic_complexity": 6, "n_ast_nodes": 147, "ast_depth": 11, "n_identifiers": 7, "vocab_size": 34, "n_whitespaces": 106, "n_words": 53, "nloc": 11, "token_counts": 100}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/dart/chapter_sorting/quick_sort.dart#112-126", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/dart/chapter_sorting/quick_sort.dart", "language": "Java"}, "method": {"name": "quickSort", "qualified_name": "zh-hant.codes.dart.chapter_sorting.quick_sort.dart#quickSort", "start_line": 112, "end_line": 126, "signature": "quickSort(List<int> nums, int left, int right)", "original_code": "static void quickSort(List<int> nums, int left, int right) {\n    // \u5b50\u9663\u5217\u9577\u5ea6\u70ba 1 \u6642\u7d42\u6b62\n    while (left < right) {\n      // \u54e8\u5175\u5283\u5206\u64cd\u4f5c\n      int pivot = _partition(nums, left, right);\n      // \u5c0d\u5169\u500b\u5b50\u9663\u5217\u4e2d\u8f03\u77ed\u7684\u90a3\u500b\u57f7\u884c\u5feb\u901f\u6392\u5e8f\n      if (pivot - left < right - pivot) {\n        quickSort(nums, left, pivot - 1); // \u905e\u8ff4\u6392\u5e8f\u5de6\u5b50\u9663\u5217\n        left = pivot + 1; // \u5269\u9918\u672a\u6392\u5e8f\u5340\u9593\u70ba [pivot + 1, right]\n      } else {\n        quickSort(nums, pivot + 1, right); // \u905e\u8ff4\u6392\u5e8f\u53f3\u5b50\u9663\u5217\n        right = pivot - 1; // \u5269\u9918\u672a\u6392\u5e8f\u5340\u9593\u70ba [left, pivot - 1]\n      }\n    }\n  }", "doc_comment": "/* \u5feb\u901f\u6392\u5e8f\uff08\u905e\u8ff4\u6df1\u5ea6\u6700\u4f73\u5316\uff09 */"}, "code_tokens": ["void", "quickSort", "static", "(", ",", ",", ")", "{", "// \u5b50\u9663\u5217\u9577\u5ea6\u70ba 1 \u6642\u7d42\u6b62", "}", "nums", "left", "right", "while", "List", "int", "int", "(", ")", "{", "// \u54e8\u5175\u5283\u5206\u64cd\u4f5c", "// \u5c0d\u5169\u500b\u5b50\u9663\u5217\u4e2d\u8f03\u77ed\u7684\u90a3\u500b\u57f7\u884c\u5feb\u901f\u6392\u5e8f", "}", "<", ">", "left", "<", "right", ";", "if", "else", "int", "int", "pivot", "=", "(", ")", "{", "// \u905e\u8ff4\u6392\u5e8f\u5de6\u5b50\u9663\u5217", "// \u5269\u9918\u672a\u6392\u5e8f\u5340\u9593\u70ba [pivot + 1, right]", "}", "{", "// \u905e\u8ff4\u6392\u5e8f\u53f3\u5b50\u9663\u5217", "// \u5269\u9918\u672a\u6392\u5e8f\u5340\u9593\u70ba [left, pivot - 1]", "}", "_partition", "<", ";", ";", ";", ";", "(", "nums", ",", "left", ",", "right", ")", "pivot", "-", "left", "right", "-", "pivot", "quickSort", "left", "=", "quickSort", "right", "=", "(", "nums", ",", "left", ",", ")", "pivot", "+", "1", "(", "nums", ",", ",", "right", ")", "pivot", "-", "1", "pivot", "-", "1", "pivot", "+", "1"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 137, "ast_depth": 12, "n_identifiers": 6, "vocab_size": 32, "n_whitespaces": 160, "n_words": 56, "nloc": 15, "token_counts": 94}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/dart/chapter_sorting/quick_sort.dart#130-145", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/dart/chapter_sorting/quick_sort.dart", "language": "Java"}, "method": {"name": "main", "qualified_name": "zh-hant.codes.dart.chapter_sorting.quick_sort.dart#main", "start_line": 130, "end_line": 145, "signature": "main()", "original_code": "void main() {\n  /* \u5feb\u901f\u6392\u5e8f */\n  List<int> nums = [2, 4, 1, 0, 3, 5];\n  QuickSort.quickSort(nums, 0, nums.length - 1);\n  print(\"\u5feb\u901f\u6392\u5e8f\u5b8c\u6210\u5f8c nums = $nums\");\n\n  /* \u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u6e96\u6578\u6700\u4f73\u5316\uff09 */\n  List<int> nums1 = [2, 4, 1, 0, 3, 5];\n  QuickSortMedian.quickSort(nums1, 0, nums1.length - 1);\n  print(\"\u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u6e96\u6578\u6700\u4f73\u5316\uff09\u5b8c\u6210\u5f8c nums1 = $nums1\");\n\n  /* \u5feb\u901f\u6392\u5e8f\uff08\u905e\u8ff4\u6df1\u5ea6\u6700\u4f73\u5316\uff09 */\n  List<int> nums2 = [2, 4, 1, 0, 3, 5];\n  QuickSortTailCall.quickSort(nums2, 0, nums2.length - 1);\n  print(\"\u5feb\u901f\u6392\u5e8f\uff08\u905e\u8ff4\u6df1\u5ea6\u6700\u4f73\u5316\uff09\u5b8c\u6210\u5f8c nums2 = $nums2\");\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["void", "main", "(", ")", "{", "/* \u5feb\u901f\u6392\u5e8f */", "/* \u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u6e96\u6578\u6700\u4f73\u5316\uff09 */", "/* \u5feb\u901f\u6392\u5e8f\uff08\u905e\u8ff4\u6df1\u5ea6\u6700\u4f73\u5316\uff09 */", "}", ";", ";", ";", ";", ";", ";", ";", ";", ";", "List", "nums", "=", "2", ",", "4", ",", "1", ",", "0", ",", "3", ",", "5", "]", "QuickSort", ".", "quickSort", "print", "List", "nums1", "=", "2", ",", "4", ",", "1", ",", "0", ",", "3", ",", "5", "]", "QuickSortMedian", ".", "quickSort", "print", "List", "nums2", "=", "2", ",", "4", ",", "1", ",", "0", ",", "3", ",", "5", "]", "QuickSortTailCall", ".", "quickSort", "print", "<", ">", "[", "(", "nums", ",", "0", ",", ")", "(", ")", "<", ">", "[", "(", "nums1", ",", "0", ",", ")", "(", ")", "<", ">", "[", "(", "nums2", ",", "0", ",", ")", "(", ")", "int", "-", "1", "\"", "\u5feb\u901f\u6392\u5e8f\u5b8c\u6210\u5f8c nums = $nums", "\"", "int", "-", "1", "\"", "\u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u6e96\u6578\u6700\u4f73\u5316\uff09\u5b8c\u6210\u5f8c nums1 = $nums1", "\"", "int", "-", "1", "\"", "\u5feb\u901f\u6392\u5e8f\uff08\u905e\u8ff4\u6df1\u5ea6\u6700\u4f73\u5316\uff09\u5b8c\u6210\u5f8c nums2 = $nums2", "\"", "nums", ".", "length", "nums1", ".", "length", "nums2", ".", "length"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 187, "ast_depth": 9, "n_identifiers": 10, "vocab_size": 39, "n_whitespaces": 92, "n_words": 71, "nloc": 14, "token_counts": 135}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/go/chapter_sorting/quick_sort.go#32-46", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/go/chapter_sorting/quick_sort.go", "language": "Java"}, "method": {"name": "quickSort", "qualified_name": "zh-hant.codes.go.chapter_sorting.quick_sort.go#quickSort", "start_line": 32, "end_line": 46, "signature": "quickSort(nums []int, left, right int)", "original_code": "i // \u8fd4\u56de\u57fa\u6e96\u6578\u7684\u7d22\u5f15\n}\n\n/* \u5feb\u901f\u6392\u5e8f */\nfunc (q *quickSort) quickSort(nums []int, left, right int) {\n\t// \u5b50\u9663\u5217\u9577\u5ea6\u70ba 1 \u6642\u7d42\u6b62\u905e\u8ff4\n\tif left >= right {\n\t\treturn\n\t}\n\t// \u54e8\u5175\u5283\u5206\n\tpivot := q.partition(nums, left, right)\n\t// \u905e\u8ff4\u5de6\u5b50\u9663\u5217\u3001\u53f3\u5b50\u9663\u5217\n\tq.quickSort(nums, left, pivot-1)\n\tq.quickSort(nums, pivot+1, right)\n}", "doc_comment": ""}, "code_tokens": ["i", "// \u8fd4\u56de\u57fa\u6e96\u6578\u7684\u7d22\u5f15", "/* \u5feb\u901f\u6392\u5e8f */", "quickSort", "}", "func", "(", ",", ",", ")", "{", "// \u5b50\u9663\u5217\u9577\u5ea6\u70ba 1 \u6642\u7d42\u6b62\u905e\u8ff4", "// \u54e8\u5175\u5283\u5206", "}", "(", ")", "int", "left", "", "right", "int", "if", "{", "}", "", "q", "quickSort", "nums", "left", ">=", "right", "return", "pivot", "=", "*", "[", "]", ":", ".", "quickSort", "// \u905e\u8ff4\u5de6\u5b50\u9663\u5217\u3001\u53f3\u5b50\u9663\u5217", ".", "quickSort", "q", "(", "nums", ",", ",", "right", ")", "q", ".", "partition", "q", "(", "nums", ",", "left", ",", ")", "pivot", "+", "1", "(", "nums", ",", "left", ",", "right", ")", "pivot", "-", "1"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 104, "ast_depth": 10, "n_identifiers": 10, "vocab_size": 33, "n_whitespaces": 53, "n_words": 40, "nloc": 14, "token_counts": 73}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/go/chapter_sorting/quick_sort.go#80-94", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/go/chapter_sorting/quick_sort.go", "language": "Java"}, "method": {"name": "quickSort", "qualified_name": "zh-hant.codes.go.chapter_sorting.quick_sort.go#quickSort", "start_line": 80, "end_line": 94, "signature": "quickSort(nums []int, left, right int)", "original_code": "i //\u8fd4\u56de\u57fa\u6e96\u6578\u7684\u7d22\u5f15\n}\n\n/* \u5feb\u901f\u6392\u5e8f */\nfunc (q *quickSortMedian) quickSort(nums []int, left, right int) {\n\t// \u5b50\u9663\u5217\u9577\u5ea6\u70ba 1 \u6642\u7d42\u6b62\u905e\u8ff4\n\tif left >= right {\n\t\treturn\n\t}\n\t// \u54e8\u5175\u5283\u5206\n\tpivot := q.partition(nums, left, right)\n\t// \u905e\u8ff4\u5de6\u5b50\u9663\u5217\u3001\u53f3\u5b50\u9663\u5217\n\tq.quickSort(nums, left, pivot-1)\n\tq.quickSort(nums, pivot+1, right)\n}", "doc_comment": ""}, "code_tokens": ["i", "//\u8fd4\u56de\u57fa\u6e96\u6578\u7684\u7d22\u5f15", "/* \u5feb\u901f\u6392\u5e8f */", "quickSort", "}", "func", "(", ",", ",", ")", "{", "// \u5b50\u9663\u5217\u9577\u5ea6\u70ba 1 \u6642\u7d42\u6b62\u905e\u8ff4", "// \u54e8\u5175\u5283\u5206", "}", "(", ")", "int", "left", "", "right", "int", "if", "{", "}", "", "q", "quickSortMedian", "nums", "left", ">=", "right", "return", "pivot", "=", "*", "[", "]", ":", ".", "quickSort", "// \u905e\u8ff4\u5de6\u5b50\u9663\u5217\u3001\u53f3\u5b50\u9663\u5217", ".", "quickSort", "q", "(", "nums", ",", ",", "right", ")", "q", ".", "partition", "q", "(", "nums", ",", "left", ",", ")", "pivot", "+", "1", "(", "nums", ",", "left", ",", "right", ")", "pivot", "-", "1"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 104, "ast_depth": 10, "n_identifiers": 11, "vocab_size": 34, "n_whitespaces": 52, "n_words": 40, "nloc": 14, "token_counts": 73}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/go/chapter_sorting/quick_sort.go#112-130", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/go/chapter_sorting/quick_sort.go", "language": "Java"}, "method": {"name": "quickSort", "qualified_name": "zh-hant.codes.go.chapter_sorting.quick_sort.go#quickSort", "start_line": 112, "end_line": 130, "signature": "quickSort(nums []int, left, right int)", "original_code": "i // \u8fd4\u56de\u57fa\u6e96\u6578\u7684\u7d22\u5f15\n}\n\n/* \u5feb\u901f\u6392\u5e8f\uff08\u905e\u8ff4\u6df1\u5ea6\u6700\u4f73\u5316\uff09*/\nfunc (q *quickSortTailCall) quickSort(nums []int, left, right int) {\n\t// \u5b50\u9663\u5217\u9577\u5ea6\u70ba 1 \u6642\u7d42\u6b62\n\tfor left < right {\n\t\t// \u54e8\u5175\u5283\u5206\u64cd\u4f5c\n\t\tpivot := q.partition(nums, left, right)\n\t\t// \u5c0d\u5169\u500b\u5b50\u9663\u5217\u4e2d\u8f03\u77ed\u7684\u90a3\u500b\u57f7\u884c\u5feb\u901f\u6392\u5e8f\n\t\tif pivot-left < right-pivot {\n\t\t\tq.quickSort(nums, left, pivot-1) // \u905e\u8ff4\u6392\u5e8f\u5de6\u5b50\u9663\u5217\n\t\t\tleft = pivot + 1                 // \u5269\u9918\u672a\u6392\u5e8f\u5340\u9593\u70ba [pivot + 1, right]\n\t\t} else {\n\t\t\tq.quickSort(nums, pivot+1, right) // \u905e\u8ff4\u6392\u5e8f\u53f3\u5b50\u9663\u5217\n\t\t\tright = pivot - 1                 // \u5269\u9918\u672a\u6392\u5e8f\u5340\u9593\u70ba [left, pivot - 1]\n\t\t}\n\t}\n}", "doc_comment": ""}, "code_tokens": ["i", "// \u8fd4\u56de\u57fa\u6e96\u6578\u7684\u7d22\u5f15", "/* \u5feb\u901f\u6392\u5e8f\uff08\u905e\u8ff4\u6df1\u5ea6\u6700\u4f73\u5316\uff09*/", "quickSort", "}", "func", "(", ",", ",", ")", "{", "// \u5b50\u9663\u5217\u9577\u5ea6\u70ba 1 \u6642\u7d42\u6b62", "}", "(", ")", "int", "left", "", "right", "int", "for", "left", "<", "right", "{", "// \u54e8\u5175\u5283\u5206\u64cd\u4f5c", "}", "q", "quickSortTailCall", "nums", "pivot", ":", "else", "", "{", "}", "*", "[", "]", "=", "{", "}", "// \u905e\u8ff4\u6392\u5e8f\u53f3\u5b50\u9663\u5217", "", "// \u5269\u9918\u672a\u6392\u5e8f\u5340\u9593\u70ba [left, pivot - 1]", "", "<", "// \u905e\u8ff4\u6392\u5e8f\u5de6\u5b50\u9663\u5217", "", "// \u5269\u9918\u672a\u6392\u5e8f\u5340\u9593\u70ba [pivot + 1, right]", "", "q", ".", "quickSort", "right", "=", "// \u5c0d\u5169\u500b\u5b50\u9663\u5217\u4e2d\u8f03\u77ed\u7684\u90a3\u500b\u57f7\u884c\u5feb\u901f\u6392\u5e8f", "-", "left", "right", "-", "pivot", "q", ".", "quickSort", "left", "=", "(", "nums", ",", ",", "right", ")", "pivot", "-", "1", "q", ".", "partition", "if", "pivot", "(", "nums", ",", "left", ",", ")", "pivot", "+", "1", "pivot", "+", "1", "(", "nums", ",", "left", ",", "right", ")", "pivot", "-", "1"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 144, "ast_depth": 11, "n_identifiers": 13, "vocab_size": 39, "n_whitespaces": 135, "n_words": 61, "nloc": 18, "token_counts": 103}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/go/chapter_sorting/quick_sort_test.go#21-26", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/go/chapter_sorting/quick_sort_test.go", "language": "Java"}, "method": {"name": "TestQuickSortMedian", "qualified_name": "zh-hant.codes.go.chapter_sorting.quick_sort_test.go#TestQuickSortMedian", "start_line": 21, "end_line": 26, "signature": "TestQuickSortMedian(t *testing.T)", "original_code": "func TestQuickSortMedian(t *testing.T) {\n\tq := quickSortMedian{}\n\tnums := []int{4, 1, 3, 1, 5, 2}\n\tq.quickSort(nums, 0, len(nums)-1)\n\tfmt.Println(\"\u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u6e96\u6578\u6700\u4f73\u5316\uff09\u5b8c\u6210\u5f8c nums = \", nums)\n}", "doc_comment": "// \u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u6e96\u6578\u6700\u4f73\u5316\uff09"}, "code_tokens": ["func", "TestQuickSortMedian", "(", ")", "{", "}", "t", "testing", ".", "T", "", "{", "}", "", "{", "}", "", "*", "q", "=", "quickSortMedian", "nums", "int", "4", ",", "1", ",", "3", ",", "1", ",", "5", ",", "2", ".", "Println", ":", ":", "=", "[", "]", "q", ".", "quickSort", "fmt", "(", ",", "nums", ")", "(", "nums", ",", "0", ",", ")", "\"", "\u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u6e96\u6578\u6700\u4f73\u5316\uff09\u5b8c\u6210\u5f8c nums = ", "\"", "-", "1", "len", "(", "nums", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 91, "ast_depth": 11, "n_identifiers": 11, "vocab_size": 34, "n_whitespaces": 27, "n_words": 29, "nloc": 6, "token_counts": 64}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/go/chapter_sorting/quick_sort_test.go#29-34", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/go/chapter_sorting/quick_sort_test.go", "language": "Java"}, "method": {"name": "TestQuickSortTailCall", "qualified_name": "zh-hant.codes.go.chapter_sorting.quick_sort_test.go#TestQuickSortTailCall", "start_line": 29, "end_line": 34, "signature": "TestQuickSortTailCall(t *testing.T)", "original_code": "func TestQuickSortTailCall(t *testing.T) {\n\tq := quickSortTailCall{}\n\tnums := []int{4, 1, 3, 1, 5, 2}\n\tq.quickSort(nums, 0, len(nums)-1)\n\tfmt.Println(\"\u5feb\u901f\u6392\u5e8f\uff08\u905e\u8ff4\u6df1\u5ea6\u6700\u4f73\u5316\uff09\u5b8c\u6210\u5f8c nums = \", nums)\n}", "doc_comment": "// \u5feb\u901f\u6392\u5e8f\uff08\u905e\u8ff4\u6df1\u5ea6\u6700\u4f73\u5316\uff09"}, "code_tokens": ["func", "TestQuickSortTailCall", "(", ")", "{", "}", "t", "testing", ".", "T", "", "{", "}", "", "{", "}", "", "*", "q", "=", "quickSortTailCall", "nums", "int", "4", ",", "1", ",", "3", ",", "1", ",", "5", ",", "2", ".", "Println", ":", ":", "=", "[", "]", "q", ".", "quickSort", "fmt", "(", ",", "nums", ")", "(", "nums", ",", "0", ",", ")", "\"", "\u5feb\u901f\u6392\u5e8f\uff08\u905e\u8ff4\u6df1\u5ea6\u6700\u4f73\u5316\uff09\u5b8c\u6210\u5f8c nums = ", "\"", "-", "1", "len", "(", "nums", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 91, "ast_depth": 11, "n_identifiers": 11, "vocab_size": 34, "n_whitespaces": 27, "n_words": 29, "nloc": 6, "token_counts": 64}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/java/chapter_sorting/quick_sort.java#14-18", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/java/chapter_sorting/quick_sort.java", "language": "Java"}, "method": {"name": "swap", "qualified_name": "zh-hant.codes.java.chapter_sorting.quick_sort#swap", "start_line": 14, "end_line": 18, "signature": "swap(int[] nums, int i, int j)", "original_code": "static void swap(int[] nums, int i, int j) {\n        int tmp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = tmp;\n    }", "doc_comment": "/* \u5143\u7d20\u4ea4\u63db */"}, "code_tokens": ["void", "swap", "static", "(", ",", ",", ")", "{", "}", "nums", "i", "j", ";", ";", ";", "int", "int", "int", "tmp", "=", "=", "=", "tmp", "int", "[", "]", "nums", "[", "i", "]", "nums", "[", "i", "]", "nums", "[", "j", "]", "nums", "[", "j", "]"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 66, "ast_depth": 7, "n_identifiers": 5, "vocab_size": 17, "n_whitespaces": 47, "n_words": 20, "nloc": 5, "token_counts": 42}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/java/chapter_sorting/quick_sort.java#21-33", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/java/chapter_sorting/quick_sort.java", "language": "Java"}, "method": {"name": "partition", "qualified_name": "zh-hant.codes.java.chapter_sorting.quick_sort#partition", "start_line": 21, "end_line": 33, "signature": "partition(int[] nums, int left, int right)", "original_code": "static int partition(int[] nums, int left, int right) {\n        // \u4ee5 nums[left] \u70ba\u57fa\u6e96\u6578\n        int i = left, j = right;\n        while (i < j) {\n            while (i < j && nums[j] >= nums[left])\n                j--;          // \u5f9e\u53f3\u5411\u5de6\u627e\u9996\u500b\u5c0f\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20\n            while (i < j && nums[i] <= nums[left])\n                i++;          // \u5f9e\u5de6\u5411\u53f3\u627e\u9996\u500b\u5927\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20\n            swap(nums, i, j); // \u4ea4\u63db\u9019\u5169\u500b\u5143\u7d20\n        }\n        swap(nums, i, left);  // \u5c07\u57fa\u6e96\u6578\u4ea4\u63db\u81f3\u5169\u5b50\u9663\u5217\u7684\u5206\u754c\u7dda\n        return i;             // \u8fd4\u56de\u57fa\u6e96\u6578\u7684\u7d22\u5f15\n    }", "doc_comment": "/* \u54e8\u5175\u5283\u5206 */"}, "code_tokens": ["partition", "static", "int", "(", ",", ",", ")", "{", "// \u4ee5 nums[left] \u70ba\u57fa\u6e96\u6578", "// \u5c07\u57fa\u6e96\u6578\u4ea4\u63db\u81f3\u5169\u5b50\u9663\u5217\u7684\u5206\u754c\u7dda", "// \u8fd4\u56de\u57fa\u6e96\u6578\u7684\u7d22\u5f15", "}", "nums", "left", "right", ",", ";", "while", ";", "return", "i", ";", "int", "int", "int", "i", "=", "left", "j", "=", "right", "(", ")", "{", "// \u5f9e\u53f3\u5411\u5de6\u627e\u9996\u500b\u5c0f\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20", "// \u5f9e\u5de6\u5411\u53f3\u627e\u9996\u500b\u5927\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20", "// \u4ea4\u63db\u9019\u5169\u500b\u5143\u7d20", "}", "swap", "int", "[", "]", "i", "<", "j", "while", "while", ";", "(", "nums", ",", "i", ",", "left", ")", "(", ")", ";", "(", ")", ";", "swap", "&&", "j", "--", "&&", "i", "++", "(", "nums", ",", "i", ",", "j", ")", "i", "<", "j", ">=", "i", "<", "j", "<=", "nums", "[", "j", "]", "nums", "[", "left", "]", "nums", "[", "i", "]", "nums", "[", "left", "]"], "metrics": {"cyclomatic_complexity": 6, "n_ast_nodes": 146, "ast_depth": 11, "n_identifiers": 7, "vocab_size": 32, "n_whitespaces": 213, "n_words": 52, "nloc": 13, "token_counts": 99}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/java/chapter_sorting/quick_sort.java#36-45", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/java/chapter_sorting/quick_sort.java", "language": "Java"}, "method": {"name": "quickSort", "qualified_name": "zh-hant.codes.java.chapter_sorting.quick_sort#quickSort", "start_line": 36, "end_line": 45, "signature": "quickSort(int[] nums, int left, int right)", "original_code": "public static void quickSort(int[] nums, int left, int right) {\n        // \u5b50\u9663\u5217\u9577\u5ea6\u70ba 1 \u6642\u7d42\u6b62\u905e\u8ff4\n        if (left >= right)\n            return;\n        // \u54e8\u5175\u5283\u5206\n        int pivot = partition(nums, left, right);\n        // \u905e\u8ff4\u5de6\u5b50\u9663\u5217\u3001\u53f3\u5b50\u9663\u5217\n        quickSort(nums, left, pivot - 1);\n        quickSort(nums, pivot + 1, right);\n    }", "doc_comment": "/* \u5feb\u901f\u6392\u5e8f */"}, "code_tokens": ["void", "quickSort", "public", "static", "(", ",", ",", ")", "{", "// \u5b50\u9663\u5217\u9577\u5ea6\u70ba 1 \u6642\u7d42\u6b62\u905e\u8ff4", "// \u54e8\u5175\u5283\u5206", "// \u905e\u8ff4\u5de6\u5b50\u9663\u5217\u3001\u53f3\u5b50\u9663\u5217", "}", "nums", "left", "right", "if", ";", ";", ";", "int", "int", "(", ")", "return", ";", "int", "pivot", "=", "quickSort", "quickSort", "int", "[", "]", "left", ">=", "right", "partition", "(", "nums", ",", "left", ",", ")", "(", "nums", ",", ",", "right", ")", "(", "nums", ",", "left", ",", "right", ")", "pivot", "-", "1", "pivot", "+", "1"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 93, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 28, "n_whitespaces": 111, "n_words": 36, "nloc": 10, "token_counts": 63}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/java/chapter_sorting/quick_sort.java#51-55", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/java/chapter_sorting/quick_sort.java", "language": "Java"}, "method": {"name": "swap", "qualified_name": "zh-hant.codes.java.chapter_sorting.quick_sort#swap", "start_line": 51, "end_line": 55, "signature": "swap(int[] nums, int i, int j)", "original_code": "static void swap(int[] nums, int i, int j) {\n        int tmp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = tmp;\n    }", "doc_comment": "/* \u5143\u7d20\u4ea4\u63db */"}, "code_tokens": ["void", "swap", "static", "(", ",", ",", ")", "{", "}", "nums", "i", "j", ";", ";", ";", "int", "int", "int", "tmp", "=", "=", "=", "tmp", "int", "[", "]", "nums", "[", "i", "]", "nums", "[", "i", "]", "nums", "[", "j", "]", "nums", "[", "j", "]"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 66, "ast_depth": 7, "n_identifiers": 5, "vocab_size": 17, "n_whitespaces": 47, "n_words": 20, "nloc": 5, "token_counts": 42}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/java/chapter_sorting/quick_sort.java#58-65", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/java/chapter_sorting/quick_sort.java", "language": "Java"}, "method": {"name": "medianThree", "qualified_name": "zh-hant.codes.java.chapter_sorting.quick_sort#medianThree", "start_line": 58, "end_line": 65, "signature": "medianThree(int[] nums, int left, int mid, int right)", "original_code": "static int medianThree(int[] nums, int left, int mid, int right) {\n        int l = nums[left], m = nums[mid], r = nums[right];\n        if ((l <= m && m <= r) || (r <= m && m <= l))\n            return mid; // m \u5728 l \u548c r \u4e4b\u9593\n        if ((m <= l && l <= r) || (r <= l && l <= m))\n            return left; // l \u5728 m \u548c r \u4e4b\u9593\n        return right;\n    }", "doc_comment": "/* \u9078\u53d6\u4e09\u500b\u5019\u9078\u5143\u7d20\u7684\u4e2d\u4f4d\u6578 */"}, "code_tokens": ["medianThree", "static", "int", "(", ",", ",", ",", ")", "{", "// m \u5728 l \u548c r \u4e4b\u9593", "// l \u5728 m \u548c r \u4e4b\u9593", "}", "nums", "left", "mid", "right", ",", ",", ";", "if", "if", "return", "right", ";", "int", "int", "int", "int", "l", "=", "m", "=", "r", "=", "(", ")", "return", "mid", ";", "(", ")", "return", "left", ";", "int", "[", "]", "nums", "[", "left", "]", "nums", "[", "mid", "]", "nums", "[", "right", "]", "||", "||", "(", ")", "(", ")", "(", ")", "(", ")", "&&", "&&", "&&", "&&", "l", "<=", "m", "m", "<=", "r", "r", "<=", "m", "m", "<=", "l", "m", "<=", "l", "l", "<=", "r", "r", "<=", "l", "l", "<=", "m"], "metrics": {"cyclomatic_complexity": 9, "n_ast_nodes": 146, "ast_depth": 10, "n_identifiers": 8, "vocab_size": 26, "n_whitespaces": 133, "n_words": 57, "nloc": 8, "token_counts": 97}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/java/chapter_sorting/quick_sort.java#68-84", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/java/chapter_sorting/quick_sort.java", "language": "Java"}, "method": {"name": "partition", "qualified_name": "zh-hant.codes.java.chapter_sorting.quick_sort#partition", "start_line": 68, "end_line": 84, "signature": "partition(int[] nums, int left, int right)", "original_code": "static int partition(int[] nums, int left, int right) {\n        // \u9078\u53d6\u4e09\u500b\u5019\u9078\u5143\u7d20\u7684\u4e2d\u4f4d\u6578\n        int med = medianThree(nums, left, (left + right) / 2, right);\n        // \u5c07\u4e2d\u4f4d\u6578\u4ea4\u63db\u81f3\u9663\u5217\u6700\u5de6\u7aef\n        swap(nums, left, med);\n        // \u4ee5 nums[left] \u70ba\u57fa\u6e96\u6578\n        int i = left, j = right;\n        while (i < j) {\n            while (i < j && nums[j] >= nums[left])\n                j--;          // \u5f9e\u53f3\u5411\u5de6\u627e\u9996\u500b\u5c0f\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20\n            while (i < j && nums[i] <= nums[left])\n                i++;          // \u5f9e\u5de6\u5411\u53f3\u627e\u9996\u500b\u5927\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20\n            swap(nums, i, j); // \u4ea4\u63db\u9019\u5169\u500b\u5143\u7d20\n        }\n        swap(nums, i, left);  // \u5c07\u57fa\u6e96\u6578\u4ea4\u63db\u81f3\u5169\u5b50\u9663\u5217\u7684\u5206\u754c\u7dda\n        return i;             // \u8fd4\u56de\u57fa\u6e96\u6578\u7684\u7d22\u5f15\n    }", "doc_comment": "/* \u54e8\u5175\u5283\u5206\uff08\u4e09\u6578\u53d6\u4e2d\u503c\uff09 */"}, "code_tokens": ["partition", "static", "int", "(", ",", ",", ")", "{", "// \u9078\u53d6\u4e09\u500b\u5019\u9078\u5143\u7d20\u7684\u4e2d\u4f4d\u6578", "// \u5c07\u4e2d\u4f4d\u6578\u4ea4\u63db\u81f3\u9663\u5217\u6700\u5de6\u7aef", "// \u4ee5 nums[left] \u70ba\u57fa\u6e96\u6578", "// \u5c07\u57fa\u6e96\u6578\u4ea4\u63db\u81f3\u5169\u5b50\u9663\u5217\u7684\u5206\u754c\u7dda", "// \u8fd4\u56de\u57fa\u6e96\u6578\u7684\u7d22\u5f15", "}", "nums", "left", "right", ";", ";", ",", ";", "while", ";", "return", "i", ";", "int", "int", "int", "med", "=", "swap", "int", "i", "=", "left", "j", "=", "right", "(", ")", "{", "// \u5f9e\u53f3\u5411\u5de6\u627e\u9996\u500b\u5c0f\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20", "// \u5f9e\u5de6\u5411\u53f3\u627e\u9996\u500b\u5927\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20", "// \u4ea4\u63db\u9019\u5169\u500b\u5143\u7d20", "}", "swap", "int", "[", "]", "medianThree", "(", "nums", ",", "left", ",", "med", ")", "i", "<", "j", "while", "while", ";", "(", "nums", ",", "i", ",", "left", ")", "(", "nums", ",", "left", ",", ",", "right", ")", "(", ")", ";", "(", ")", ";", "swap", "/", "2", "&&", "j", "--", "&&", "i", "++", "(", "nums", ",", "i", ",", "j", ")", "(", ")", "i", "<", "j", ">=", "i", "<", "j", "<=", "left", "+", "right", "nums", "[", "j", "]", "nums", "[", "left", "]", "nums", "[", "i", "]", "nums", "[", "left", "]"], "metrics": {"cyclomatic_complexity": 6, "n_ast_nodes": 188, "ast_depth": 11, "n_identifiers": 9, "vocab_size": 39, "n_whitespaces": 263, "n_words": 67, "nloc": 17, "token_counts": 130}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/java/chapter_sorting/quick_sort.java#87-96", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/java/chapter_sorting/quick_sort.java", "language": "Java"}, "method": {"name": "quickSort", "qualified_name": "zh-hant.codes.java.chapter_sorting.quick_sort#quickSort", "start_line": 87, "end_line": 96, "signature": "quickSort(int[] nums, int left, int right)", "original_code": "public static void quickSort(int[] nums, int left, int right) {\n        // \u5b50\u9663\u5217\u9577\u5ea6\u70ba 1 \u6642\u7d42\u6b62\u905e\u8ff4\n        if (left >= right)\n            return;\n        // \u54e8\u5175\u5283\u5206\n        int pivot = partition(nums, left, right);\n        // \u905e\u8ff4\u5de6\u5b50\u9663\u5217\u3001\u53f3\u5b50\u9663\u5217\n        quickSort(nums, left, pivot - 1);\n        quickSort(nums, pivot + 1, right);\n    }", "doc_comment": "/* \u5feb\u901f\u6392\u5e8f */"}, "code_tokens": ["void", "quickSort", "public", "static", "(", ",", ",", ")", "{", "// \u5b50\u9663\u5217\u9577\u5ea6\u70ba 1 \u6642\u7d42\u6b62\u905e\u8ff4", "// \u54e8\u5175\u5283\u5206", "// \u905e\u8ff4\u5de6\u5b50\u9663\u5217\u3001\u53f3\u5b50\u9663\u5217", "}", "nums", "left", "right", "if", ";", ";", ";", "int", "int", "(", ")", "return", ";", "int", "pivot", "=", "quickSort", "quickSort", "int", "[", "]", "left", ">=", "right", "partition", "(", "nums", ",", "left", ",", ")", "(", "nums", ",", ",", "right", ")", "(", "nums", ",", "left", ",", "right", ")", "pivot", "-", "1", "pivot", "+", "1"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 93, "ast_depth": 8, "n_identifiers": 6, "vocab_size": 28, "n_whitespaces": 111, "n_words": 36, "nloc": 10, "token_counts": 63}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/java/chapter_sorting/quick_sort.java#102-106", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/java/chapter_sorting/quick_sort.java", "language": "Java"}, "method": {"name": "swap", "qualified_name": "zh-hant.codes.java.chapter_sorting.quick_sort#swap", "start_line": 102, "end_line": 106, "signature": "swap(int[] nums, int i, int j)", "original_code": "static void swap(int[] nums, int i, int j) {\n        int tmp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = tmp;\n    }", "doc_comment": "/* \u5143\u7d20\u4ea4\u63db */"}, "code_tokens": ["void", "swap", "static", "(", ",", ",", ")", "{", "}", "nums", "i", "j", ";", ";", ";", "int", "int", "int", "tmp", "=", "=", "=", "tmp", "int", "[", "]", "nums", "[", "i", "]", "nums", "[", "i", "]", "nums", "[", "j", "]", "nums", "[", "j", "]"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 66, "ast_depth": 7, "n_identifiers": 5, "vocab_size": 17, "n_whitespaces": 47, "n_words": 20, "nloc": 5, "token_counts": 42}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/java/chapter_sorting/quick_sort.java#109-121", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/java/chapter_sorting/quick_sort.java", "language": "Java"}, "method": {"name": "partition", "qualified_name": "zh-hant.codes.java.chapter_sorting.quick_sort#partition", "start_line": 109, "end_line": 121, "signature": "partition(int[] nums, int left, int right)", "original_code": "static int partition(int[] nums, int left, int right) {\n        // \u4ee5 nums[left] \u70ba\u57fa\u6e96\u6578\n        int i = left, j = right;\n        while (i < j) {\n            while (i < j && nums[j] >= nums[left])\n                j--;          // \u5f9e\u53f3\u5411\u5de6\u627e\u9996\u500b\u5c0f\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20\n            while (i < j && nums[i] <= nums[left])\n                i++;          // \u5f9e\u5de6\u5411\u53f3\u627e\u9996\u500b\u5927\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20\n            swap(nums, i, j); // \u4ea4\u63db\u9019\u5169\u500b\u5143\u7d20\n        }\n        swap(nums, i, left);  // \u5c07\u57fa\u6e96\u6578\u4ea4\u63db\u81f3\u5169\u5b50\u9663\u5217\u7684\u5206\u754c\u7dda\n        return i;             // \u8fd4\u56de\u57fa\u6e96\u6578\u7684\u7d22\u5f15\n    }", "doc_comment": "/* \u54e8\u5175\u5283\u5206 */"}, "code_tokens": ["partition", "static", "int", "(", ",", ",", ")", "{", "// \u4ee5 nums[left] \u70ba\u57fa\u6e96\u6578", "// \u5c07\u57fa\u6e96\u6578\u4ea4\u63db\u81f3\u5169\u5b50\u9663\u5217\u7684\u5206\u754c\u7dda", "// \u8fd4\u56de\u57fa\u6e96\u6578\u7684\u7d22\u5f15", "}", "nums", "left", "right", ",", ";", "while", ";", "return", "i", ";", "int", "int", "int", "i", "=", "left", "j", "=", "right", "(", ")", "{", "// \u5f9e\u53f3\u5411\u5de6\u627e\u9996\u500b\u5c0f\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20", "// \u5f9e\u5de6\u5411\u53f3\u627e\u9996\u500b\u5927\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20", "// \u4ea4\u63db\u9019\u5169\u500b\u5143\u7d20", "}", "swap", "int", "[", "]", "i", "<", "j", "while", "while", ";", "(", "nums", ",", "i", ",", "left", ")", "(", ")", ";", "(", ")", ";", "swap", "&&", "j", "--", "&&", "i", "++", "(", "nums", ",", "i", ",", "j", ")", "i", "<", "j", ">=", "i", "<", "j", "<=", "nums", "[", "j", "]", "nums", "[", "left", "]", "nums", "[", "i", "]", "nums", "[", "left", "]"], "metrics": {"cyclomatic_complexity": 6, "n_ast_nodes": 146, "ast_depth": 11, "n_identifiers": 7, "vocab_size": 32, "n_whitespaces": 213, "n_words": 52, "nloc": 13, "token_counts": 99}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/java/chapter_sorting/quick_sort.java#124-138", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/java/chapter_sorting/quick_sort.java", "language": "Java"}, "method": {"name": "quickSort", "qualified_name": "zh-hant.codes.java.chapter_sorting.quick_sort#quickSort", "start_line": 124, "end_line": 138, "signature": "quickSort(int[] nums, int left, int right)", "original_code": "public static void quickSort(int[] nums, int left, int right) {\n        // \u5b50\u9663\u5217\u9577\u5ea6\u70ba 1 \u6642\u7d42\u6b62\n        while (left < right) {\n            // \u54e8\u5175\u5283\u5206\u64cd\u4f5c\n            int pivot = partition(nums, left, right);\n            // \u5c0d\u5169\u500b\u5b50\u9663\u5217\u4e2d\u8f03\u77ed\u7684\u90a3\u500b\u57f7\u884c\u5feb\u901f\u6392\u5e8f\n            if (pivot - left < right - pivot) {\n                quickSort(nums, left, pivot - 1); // \u905e\u8ff4\u6392\u5e8f\u5de6\u5b50\u9663\u5217\n                left = pivot + 1; // \u5269\u9918\u672a\u6392\u5e8f\u5340\u9593\u70ba [pivot + 1, right]\n            } else {\n                quickSort(nums, pivot + 1, right); // \u905e\u8ff4\u6392\u5e8f\u53f3\u5b50\u9663\u5217\n                right = pivot - 1; // \u5269\u9918\u672a\u6392\u5e8f\u5340\u9593\u70ba [left, pivot - 1]\n            }\n        }\n    }", "doc_comment": "/* \u5feb\u901f\u6392\u5e8f\uff08\u905e\u8ff4\u6df1\u5ea6\u6700\u4f73\u5316\uff09 */"}, "code_tokens": ["void", "quickSort", "public", "static", "(", ",", ",", ")", "{", "// \u5b50\u9663\u5217\u9577\u5ea6\u70ba 1 \u6642\u7d42\u6b62", "}", "nums", "left", "right", "while", "int", "int", "(", ")", "{", "// \u54e8\u5175\u5283\u5206\u64cd\u4f5c", "// \u5c0d\u5169\u500b\u5b50\u9663\u5217\u4e2d\u8f03\u77ed\u7684\u90a3\u500b\u57f7\u884c\u5feb\u901f\u6392\u5e8f", "}", "int", "[", "]", "left", "<", "right", ";", "if", "else", "int", "pivot", "=", "(", ")", "{", "// \u905e\u8ff4\u6392\u5e8f\u5de6\u5b50\u9663\u5217", "// \u5269\u9918\u672a\u6392\u5e8f\u5340\u9593\u70ba [pivot + 1, right]", "}", "{", "// \u905e\u8ff4\u6392\u5e8f\u53f3\u5b50\u9663\u5217", "// \u5269\u9918\u672a\u6392\u5e8f\u5340\u9593\u70ba [left, pivot - 1]", "}", "partition", "<", ";", ";", ";", ";", "(", "nums", ",", "left", ",", "right", ")", "pivot", "-", "left", "right", "-", "pivot", "quickSort", "left", "=", "quickSort", "right", "=", "(", "nums", ",", "left", ",", ")", "pivot", "+", "1", "(", "nums", ",", ",", "right", ")", "pivot", "-", "1", "pivot", "-", "1", "pivot", "+", "1"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 137, "ast_depth": 12, "n_identifiers": 6, "vocab_size": 33, "n_whitespaces": 243, "n_words": 56, "nloc": 15, "token_counts": 94}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/java/chapter_sorting/quick_sort.java#142-157", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/java/chapter_sorting/quick_sort.java", "language": "Java"}, "method": {"name": "main", "qualified_name": "zh-hant.codes.java.chapter_sorting.quick_sort#main", "start_line": 142, "end_line": 157, "signature": "main(String[] args)", "original_code": "public static void main(String[] args) {\n        /* \u5feb\u901f\u6392\u5e8f */\n        int[] nums = { 2, 4, 1, 0, 3, 5 };\n        QuickSort.quickSort(nums, 0, nums.length - 1);\n        System.out.println(\"\u5feb\u901f\u6392\u5e8f\u5b8c\u6210\u5f8c nums = \" + Arrays.toString(nums));\n\n        /* \u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u6e96\u6578\u6700\u4f73\u5316\uff09 */\n        int[] nums1 = { 2, 4, 1, 0, 3, 5 };\n        QuickSortMedian.quickSort(nums1, 0, nums1.length - 1);\n        System.out.println(\"\u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u6e96\u6578\u6700\u4f73\u5316\uff09\u5b8c\u6210\u5f8c nums1 = \" + Arrays.toString(nums1));\n\n        /* \u5feb\u901f\u6392\u5e8f\uff08\u905e\u8ff4\u6df1\u5ea6\u6700\u4f73\u5316\uff09 */\n        int[] nums2 = { 2, 4, 1, 0, 3, 5 };\n        QuickSortTailCall.quickSort(nums2, 0, nums2.length - 1);\n        System.out.println(\"\u5feb\u901f\u6392\u5e8f\uff08\u905e\u8ff4\u6df1\u5ea6\u6700\u4f73\u5316\uff09\u5b8c\u6210\u5f8c nums2 = \" + Arrays.toString(nums2));\n    }", "doc_comment": ""}, "code_tokens": ["void", "main", "public", "static", "(", ")", "{", "/* \u5feb\u901f\u6392\u5e8f */", "/* \u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u6e96\u6578\u6700\u4f73\u5316\uff09 */", "/* \u5feb\u901f\u6392\u5e8f\uff08\u905e\u8ff4\u6df1\u5ea6\u6700\u4f73\u5316\uff09 */", "}", "args", ";", ";", ";", ";", ";", ";", ";", ";", ";", "String", "nums", "=", "QuickSort", ".", "quickSort", ".", "println", "nums1", "=", "QuickSortMedian", ".", "quickSort", ".", "println", "nums2", "=", "QuickSortTailCall", ".", "quickSort", ".", "println", "[", "]", "int", "[", "]", "{", "2", ",", "4", ",", "1", ",", "0", ",", "3", ",", "5", "}", "(", "nums", ",", "0", ",", ")", "System", ".", "out", "(", ")", "int", "[", "]", "{", "2", ",", "4", ",", "1", ",", "0", ",", "3", ",", "5", "}", "(", "nums1", ",", "0", ",", ")", "System", ".", "out", "(", ")", "int", "[", "]", "{", "2", ",", "4", ",", "1", ",", "0", ",", "3", ",", "5", "}", "(", "nums2", ",", "0", ",", ")", "System", ".", "out", "(", ")", "-", "1", "+", "-", "1", "+", "-", "1", "+", "nums", ".", "length", "\"", "\u5feb\u901f\u6392\u5e8f\u5b8c\u6210\u5f8c nums = ", "\"", "Arrays", ".", "toString", "nums1", ".", "length", "\"", "\u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u6e96\u6578\u6700\u4f73\u5316\uff09\u5b8c\u6210\u5f8c nums1 = ", "\"", "Arrays", ".", "toString", "nums2", ".", "length", "\"", "\u5feb\u901f\u6392\u5e8f\uff08\u905e\u8ff4\u6df1\u5ea6\u6700\u4f73\u5316\uff09\u5b8c\u6210\u5f8c nums2 = ", "\"", "Arrays", ".", "toString", "(", "nums", ")", "(", "nums1", ")", "(", "nums2", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 236, "ast_depth": 10, "n_identifiers": 15, "vocab_size": 45, "n_whitespaces": 183, "n_words": 84, "nloc": 14, "token_counts": 171}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/kotlin/chapter_sorting/quick_sort.kt#10-14", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/kotlin/chapter_sorting/quick_sort.kt", "language": "Java"}, "method": {"name": "swap", "qualified_name": "zh-hant.codes.kotlin.chapter_sorting.quick_sort.kt#swap", "start_line": 10, "end_line": 14, "signature": "swap(nums: IntArray, i: Int, j: Int)", "original_code": "fun swap(nums: IntArray, i: Int, j: Int) {\n    val temp = nums[i]\n    nums[i] = nums[j]\n    nums[j] = temp\n}", "doc_comment": ""}, "code_tokens": ["fun", "swap", "(", ",", ",", ")", "{", "}", "nums", "IntArray", "i", "Int", "j", "Int", "val", "", ":", ":", ":", "temp", "=", "=", "[", "i", "]", "=", "temp", "nums", "[", "i", "]", "nums", "[", "j", "]", "nums", "[", "j", "]", "nums"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 60, "ast_depth": 10, "n_identifiers": 7, "vocab_size": 19, "n_whitespaces": 30, "n_words": 19, "nloc": 5, "token_counts": 40}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/kotlin/chapter_sorting/quick_sort.kt#17-30", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/kotlin/chapter_sorting/quick_sort.kt", "language": "Java"}, "method": {"name": "partition", "qualified_name": "zh-hant.codes.kotlin.chapter_sorting.quick_sort.kt#partition", "start_line": 17, "end_line": 30, "signature": "partition(nums: IntArray, left: Int, right: Int)", "original_code": "fun partition(nums: IntArray, left: Int, right: Int): Int {\n    // \u4ee5 nums[left] \u70ba\u57fa\u6e96\u6578\n    var i = left\n    var j = right\n    while (i < j) {\n        while (i < j && nums[j] >= nums[left])\n            j--           // \u5f9e\u53f3\u5411\u5de6\u627e\u9996\u500b\u5c0f\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20\n        while (i < j && nums[i] <= nums[left])\n            i++           // \u5f9e\u5de6\u5411\u53f3\u627e\u9996\u500b\u5927\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20\n        swap(nums, i, j)  // \u4ea4\u63db\u9019\u5169\u500b\u5143\u7d20\n    }\n    swap(nums, i, left)   // \u5c07\u57fa\u6e96\u6578\u4ea4\u63db\u81f3\u5169\u5b50\u9663\u5217\u7684\u5206\u754c\u7dda\n    return i              // \u8fd4\u56de\u57fa\u6e96\u6578\u7684\u7d22\u5f15\n}", "doc_comment": "/* \u54e8\u5175\u5283\u5206 */"}, "code_tokens": ["fun", "partition", "(", ",", ",", ")", ":", "Int", "{", "// \u4ee5 nums[left] \u70ba\u57fa\u6e96\u6578", "}", "nums", "IntArray", "left", "Int", "right", "Int", "var", "", "// \u5c07\u57fa\u6e96\u6578\u4ea4\u63db\u81f3\u5169\u5b50\u9663\u5217\u7684\u5206\u754c\u7dda", "", "return", "i", "// \u8fd4\u56de\u57fa\u6e96\u6578\u7684\u7d22\u5f15", "", ":", ":", ":", "i", "=", "swap", "left", "var", "{", "// \u5f9e\u53f3\u5411\u5de6\u627e\u9996\u500b\u5c0f\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20", "// \u5f9e\u5de6\u5411\u53f3\u627e\u9996\u500b\u5927\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20", "// \u4ea4\u63db\u9019\u5169\u500b\u5143\u7d20", "}", "(", "nums", ",", "i", ",", "left", ")", "j", "=", "swap", "right", "while", "--", "++", "(", "nums", ",", "i", ",", "j", ")", "(", ")", "while", "j", "while", "i", "i", "<", "j", "(", ")", "(", ")", "&&", "&&", "i", "<", "j", ">=", "i", "<", "j", "<=", "nums", "[", "j", "]", "nums", "[", "left", "]", "nums", "[", "i", "]", "nums", "[", "left", "]"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 144, "ast_depth": 14, "n_identifiers": 10, "vocab_size": 35, "n_whitespaces": 175, "n_words": 53, "nloc": 14, "token_counts": 98}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/kotlin/chapter_sorting/quick_sort.kt#33-41", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/kotlin/chapter_sorting/quick_sort.kt", "language": "Java"}, "method": {"name": "quickSort", "qualified_name": "zh-hant.codes.kotlin.chapter_sorting.quick_sort.kt#quickSort", "start_line": 33, "end_line": 41, "signature": "quickSort(nums: IntArray, left: Int, right: Int)", "original_code": "fun quickSort(nums: IntArray, left: Int, right: Int) {\n    // \u5b50\u9663\u5217\u9577\u5ea6\u70ba 1 \u6642\u7d42\u6b62\u905e\u8ff4\n    if (left >= right) return\n    // \u54e8\u5175\u5283\u5206\n    val pivot = partition(nums, left, right)\n    // \u905e\u8ff4\u5de6\u5b50\u9663\u5217\u3001\u53f3\u5b50\u9663\u5217\n    quickSort(nums, left, pivot - 1)\n    quickSort(nums, pivot + 1, right)\n}", "doc_comment": "/* \u5feb\u901f\u6392\u5e8f */"}, "code_tokens": ["fun", "quickSort", "(", ",", ",", ")", "{", "// \u5b50\u9663\u5217\u9577\u5ea6\u70ba 1 \u6642\u7d42\u6b62\u905e\u8ff4", "}", "nums", "IntArray", "left", "Int", "right", "Int", "if", "", "", ":", ":", ":", "(", ")", "return", "// \u54e8\u5175\u5283\u5206", "// \u905e\u8ff4\u5de6\u5b50\u9663\u5217\u3001\u53f3\u5b50\u9663\u5217", "", "quickSort", "quickSort", "left", ">=", "right", "val", "pivot", "=", "(", "nums", ",", "left", ",", ")", "(", "nums", ",", ",", "right", ")", "partition", "pivot", "-", "1", "pivot", "+", "1", "(", "nums", ",", "left", ",", "right", ")"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 87, "ast_depth": 9, "n_identifiers": 8, "vocab_size": 27, "n_whitespaces": 65, "n_words": 34, "nloc": 9, "token_counts": 61}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/kotlin/chapter_sorting/quick_sort.kt#44-121", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/kotlin/chapter_sorting/quick_sort.kt", "language": "Java"}, "method": {"name": "medianThree", "qualified_name": "zh-hant.codes.kotlin.chapter_sorting.quick_sort.kt#medianThree", "start_line": 44, "end_line": 121, "signature": "medianThree(nums: IntArray, left: Int, mid: Int, right: Int)", "original_code": "fun medianThree(nums: IntArray, left: Int, mid: Int, right: Int): Int {\n    val l = nums[left]\n    val m = nums[mid]\n    val r = nums[right]\n    if ((m in l..r) || (m in r..l))\n        return mid  // m \u5728 l \u548c r \u4e4b\u9593\n    if ((l in m..r) || (l in r..m))\n        return left // l \u5728 m \u548c r \u4e4b\u9593\n    return right\n}\n\n/* \u54e8\u5175\u5283\u5206\uff08\u4e09\u6578\u53d6\u4e2d\u503c\uff09 */\nfun partitionMedian(nums: IntArray, left: Int, right: Int): Int {\n    // \u9078\u53d6\u4e09\u500b\u5019\u9078\u5143\u7d20\u7684\u4e2d\u4f4d\u6578\n    val med = medianThree(nums, left, (left + right) / 2, right)\n    // \u5c07\u4e2d\u4f4d\u6578\u4ea4\u63db\u81f3\u9663\u5217\u6700\u5de6\u7aef\n    swap(nums, left, med)\n    // \u4ee5 nums[left] \u70ba\u57fa\u6e96\u6578\n    var i = left\n    var j = right\n    while (i < j) {\n        while (i < j && nums[j] >= nums[left])\n            j--                      // \u5f9e\u53f3\u5411\u5de6\u627e\u9996\u500b\u5c0f\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20\n        while (i < j && nums[i] <= nums[left])\n            i++                      // \u5f9e\u5de6\u5411\u53f3\u627e\u9996\u500b\u5927\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20\n        swap(nums, i, j)             // \u4ea4\u63db\u9019\u5169\u500b\u5143\u7d20\n    }\n    swap(nums, i, left)              // \u5c07\u57fa\u6e96\u6578\u4ea4\u63db\u81f3\u5169\u5b50\u9663\u5217\u7684\u5206\u754c\u7dda\n    return i                         // \u8fd4\u56de\u57fa\u6e96\u6578\u7684\u7d22\u5f15\n}\n\n/* \u5feb\u901f\u6392\u5e8f */\nfun quickSortMedian(nums: IntArray, left: Int, right: Int) {\n    // \u5b50\u9663\u5217\u9577\u5ea6\u70ba 1 \u6642\u7d42\u6b62\u905e\u8ff4\n    if (left >= right) return\n    // \u54e8\u5175\u5283\u5206\n    val pivot = partitionMedian(nums, left, right)\n    // \u905e\u8ff4\u5de6\u5b50\u9663\u5217\u3001\u53f3\u5b50\u9663\u5217\n    quickSort(nums, left, pivot - 1)\n    quickSort(nums, pivot + 1, right)\n}\n\n/* \u5feb\u901f\u6392\u5e8f\uff08\u905e\u8ff4\u6df1\u5ea6\u6700\u4f73\u5316\uff09 */\nfun quickSortTailCall(nums: IntArray, left: Int, right: Int) {\n    // \u5b50\u9663\u5217\u9577\u5ea6\u70ba 1 \u6642\u7d42\u6b62\n    var l = left\n    var r = right\n    while (l < r) {\n        // \u54e8\u5175\u5283\u5206\u64cd\u4f5c\n        val pivot = partition(nums, l, r)\n        // \u5c0d\u5169\u500b\u5b50\u9663\u5217\u4e2d\u8f03\u77ed\u7684\u90a3\u500b\u57f7\u884c\u5feb\u901f\u6392\u5e8f\n        if (pivot - l < r - pivot) {\n            quickSort(nums, l, pivot - 1) // \u905e\u8ff4\u6392\u5e8f\u5de6\u5b50\u9663\u5217\n            l = pivot + 1 // \u5269\u9918\u672a\u6392\u5e8f\u5340\u9593\u70ba [pivot + 1, right]\n        } else {\n            quickSort(nums, pivot + 1, r) // \u905e\u8ff4\u6392\u5e8f\u53f3\u5b50\u9663\u5217\n            r = pivot - 1 // \u5269\u9918\u672a\u6392\u5e8f\u5340\u9593\u70ba [left, pivot - 1]\n        }\n    }\n}\n\n/* Driver Code */\nfun main() {\n    /* \u5feb\u901f\u6392\u5e8f */\n    val nums = intArrayOf(2, 4, 1, 0, 3, 5)\n    quickSort(nums, 0, nums.size - 1)\n    println(\"\u5feb\u901f\u6392\u5e8f\u5b8c\u6210\u5f8c nums = ${nums.contentToString()}\")\n\n    /* \u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u6e96\u6578\u6700\u4f73\u5316\uff09 */\n    val nums1 = intArrayOf(2, 4, 1, 0, 3, 5)\n    quickSortMedian(nums1, 0, nums1.size - 1)\n    println(\"\u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u6e96\u6578\u6700\u4f73\u5316\uff09\u5b8c\u6210\u5f8c nums1 = ${nums1.contentToString()}\")\n\n    /* \u5feb\u901f\u6392\u5e8f\uff08\u905e\u8ff4\u6df1\u5ea6\u6700\u4f73\u5316\uff09 */\n    val nums2 = intArrayOf(2, 4, 1, 0, 3, 5)\n    quickSortTailCall(nums2, 0, nums2.size - 1)\n    println(\"\u5feb\u901f\u6392\u5e8f\uff08\u905e\u8ff4\u6df1\u5ea6\u6700\u4f73\u5316\uff09\u5b8c\u6210\u5f8c nums2 = ${nums2.contentToString()}\")\n}", "doc_comment": "/* \u9078\u53d6\u4e09\u500b\u5019\u9078\u5143\u7d20\u7684\u4e2d\u4f4d\u6578 */"}, "code_tokens": ["fun", "medianThree", "(", ",", ",", ",", ")", ":", "Int", "{", "}", "nums", "IntArray", "left", "Int", "mid", "Int", "right", "Int", "val", "", "val", "", "val", "", "if", "(", "(", ":", ":", ":", ":", "l", "=", "m", "=", "r", "=", "m", "in", ".", "r", ".", "m", ".", "r", ".", "/* \u54e8\u5175\u5283\u5206\uff08\u4e09\u6578\u53d6\u4e2d\u503c\uff09 */", "// \u9078\u53d6\u4e09\u500b\u5019\u9078\u5143\u7d20\u7684\u4e2d\u4f4d\u6578", "// \u5c07\u4e2d\u4f4d\u6578\u4ea4\u63db\u81f3\u9663\u5217\u6700\u5de6\u7aef", "// \u4ee5 nums[left] \u70ba\u57fa\u6e96\u6578", "// \u5f9e\u5de6\u5411\u53f3\u627e\u9996\u500b\u5927\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20", "/* \u5feb\u901f\u6392\u5e8f */", "// \u54e8\u5175\u5283\u5206", "// \u905e\u8ff4\u5de6\u5b50\u9663\u5217\u3001\u53f3\u5b50\u9663\u5217", "/* \u5feb\u901f\u6392\u5e8f\uff08\u905e\u8ff4\u6df1\u5ea6\u6700\u4f73\u5316\uff09 */", "// \u5b50\u9663\u5217\u9577\u5ea6\u70ba 1 \u6642\u7d42\u6b62", "// \u54e8\u5175\u5283\u5206\u64cd\u4f5c", "// \u905e\u8ff4\u6392\u5e8f\u5de6\u5b50\u9663\u5217", "// \u905e\u8ff4\u6392\u5e8f\u53f3\u5b50\u9663\u5217", "/* Driver Code */", "/* \u5feb\u901f\u6392\u5e8f */", "nums", ".", "println", "/* \u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u6e96\u6578\u6700\u4f73\u5316\uff09 */", "val", "nums1", "=", "nums", "[", "left", "]", "nums", "[", "mid", "]", "nums", "[", "right", "]", "l", ".", "r", ")", "||", "(", "m", "in", ".", "l", ")", ")", "return", "mid", "// m \u5728 l \u548c r \u4e4b\u9593", "if", "(", "(", "l", "in", ".", "r", ")", "||", "(", "l", "in", ".", "m", ")", ")", "return", "left", "// l \u5728 m \u548c r \u4e4b\u9593", "return", "right", "}", "fun", "partitionMedian", "(", "nums", ":", "IntArray", ",", "left", ":", "Int", ",", "right", ":", "Int", ")", ":", "Int", "{", "val", "med", "=", "medianThree", "(", "nums", ",", "left", ",", "(", "left", "+", "right", ")", "/", "2", ",", "right", ")", "swap", "(", "nums", ",", "left", ",", "med", ")", "var", "i", "=", "left", "var", "j", "=", "right", "while", "(", "i", "<", "j", ")", "{", "while", "(", "i", "<", "j", "&&", "nums", "[", "j", "]", ">=", "nums", "[", "left", "]", ")", "j", "--", "// \u5f9e\u53f3\u5411\u5de6\u627e\u9996\u500b\u5c0f\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20", "while", "(", "i", "<", "j", "&&", "nums", "[", "i", "]", "<=", "nums", "[", "left", "]", ")", "i", "++", "swap", "(", "nums", ",", "i", ",", "j", ")", "// \u4ea4\u63db\u9019\u5169\u500b\u5143\u7d20", "}", "swap", "(", "nums", ",", "i", ",", "left", ")", "// \u5c07\u57fa\u6e96\u6578\u4ea4\u63db\u81f3\u5169\u5b50\u9663\u5217\u7684\u5206\u754c\u7dda", "return", "i", "// \u8fd4\u56de\u57fa\u6e96\u6578\u7684\u7d22\u5f15", "}", "fun", "quickSortMedian", "(", "nums", ":", "IntArray", ",", "left", ":", "Int", ",", "right", ":", "Int", ")", "{", "// \u5b50\u9663\u5217\u9577\u5ea6\u70ba 1 \u6642\u7d42\u6b62\u905e\u8ff4", "if", "(", "left", ">=", "right", ")", "return", "val", "pivot", "=", "partitionMedian", "(", "nums", ",", "left", ",", "right", ")", "quickSort", "(", "nums", ",", "left", ",", "pivot", "-", "1", ")", "quickSort", "(", "nums", ",", "pivot", "+", "1", ",", "right", ")", "}", "fun", "quickSortTailCall", "(", "nums", ":", "IntArray", ",", "left", ":", "Int", ",", "right", ":", "Int", ")", "{", "var", "l", "=", "left", "var", "r", "=", "right", "while", "(", "l", "<", "r", ")", "{", "val", "pivot", "=", "partition", "(", "nums", ",", "l", ",", "r", ")", "// \u5c0d\u5169\u500b\u5b50\u9663\u5217\u4e2d\u8f03\u77ed\u7684\u90a3\u500b\u57f7\u884c\u5feb\u901f\u6392\u5e8f", "if", "(", "pivot", "-", "l", "<", "r", "-", "pivot", ")", "{", "quickSort", "(", "nums", ",", "l", ",", "pivot", "-", "1", ")", "l", "=", "pivot", "+", "1", "// \u5269\u9918\u672a\u6392\u5e8f\u5340\u9593\u70ba [pivot + 1, right]", "}", "else", "{", "quickSort", "(", "nums", ",", "pivot", "+", "1", ",", "r", ")", "r", "=", "pivot", "-", "1", "// \u5269\u9918\u672a\u6392\u5e8f\u5340\u9593\u70ba [left, pivot - 1]", "}", "}", "}", "fun", "main", "(", ")", "{", "val", "nums", "=", "intArrayOf", "(", "2", ",", "4", ",", "1", ",", "0", ",", "3", ",", "5", ")", "quickSort", "(", "nums", ",", "0", ",", "size", "-", "1", ")", "(", ")", "/* \u5feb\u901f\u6392\u5e8f\uff08\u905e\u8ff4\u6df1\u5ea6\u6700\u4f73\u5316\uff09 */", "val", "println", "\"", "\u5feb\u901f\u6392\u5e8f\u5b8c\u6210\u5f8c nums = ${nums.contentToString()}", "\"", "intArrayOf", "quickSortMedian", "println", "nums2", "=", "quickSortTailCall", "(", ")", "(", "2", ",", "4", ",", "1", ",", "0", ",", "3", ",", "5", ")", "(", "nums1", ",", "0", ",", ")", "(", ")", "intArrayOf", "(", "nums2", ",", "0", ",", ")", "\"", "\u5feb\u901f\u6392\u5e8f\uff08\u905e\u8ff4\u6df1\u5ea6\u6700\u4f73\u5316\uff09\u5b8c\u6210\u5f8c nums2 = ${nums2.contentToString()}", "\"", "-", "1", "\"", "\u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u6e96\u6578\u6700\u4f73\u5316\uff09\u5b8c\u6210\u5f8c nums1 = ${nums1.contentToString()}", "\"", "(", "2", ",", "4", ",", "1", ",", "0", ",", "3", ",", "5", ")", "-", "1", "nums1", ".", "size", "nums2", ".", "size"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 559, "ast_depth": 11, "n_identifiers": 33, "vocab_size": 90, "n_whitespaces": 767, "n_words": 299, "nloc": 72, "token_counts": 491}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/rust/chapter_heap/heap.rs#11-15", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/rust/chapter_heap/heap.rs", "language": "Java"}, "method": {"name": "test_push_max", "qualified_name": "zh-hant.codes.rust.chapter_heap.heap.rs#test_push_max", "start_line": 11, "end_line": 15, "signature": "test_push_max(heap: &mut BinaryHeap<i32>, val: i32)", "original_code": "fn test_push_max(heap: &mut BinaryHeap<i32>, val: i32) {\n    heap.push(val); // \u5143\u7d20\u5165\u5806\u7a4d\n    println!(\"\\n\u5143\u7d20 {} \u5165\u5806\u7a4d\u5f8c\", val);\n    print_util::print_heap(heap.iter().map(|&val| val).collect());\n}", "doc_comment": ""}, "code_tokens": ["fn", "test_push_max", "(", ",", ")", "{", "// \u5143\u7d20\u5165\u5806\u7a4d", "}", "heap", "i32", ">", "val", "i32", ";", ";", "", ";", ":", "&", "mut", "BinaryHeap", "<", ":", "heap", ".", "push", "println", "print_util", "::", "print_heap", "(", ")", "(", "val", ")", "!", "(", ",", "val", ")", ".", "collect", "\"", "\\n", "\u5143\u7d20 {} \u5165\u5806\u7a4d\u5f8c", "\"", ".", "map", "(", ")", "heap", ".", "iter", "(", ")", "(", ")", "|", "&", "val", "|", "val"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 91, "ast_depth": 10, "n_identifiers": 13, "vocab_size": 33, "n_whitespaces": 28, "n_words": 24, "nloc": 5, "token_counts": 62}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/rust/chapter_heap/heap.rs#22-26", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/rust/chapter_heap/heap.rs", "language": "Java"}, "method": {"name": "test_pop_max", "qualified_name": "zh-hant.codes.rust.chapter_heap.heap.rs#test_pop_max", "start_line": 22, "end_line": 26, "signature": "test_pop_max(heap: &mut BinaryHeap<i32>)", "original_code": "fn test_pop_max(heap: &mut BinaryHeap<i32>) {\n    let val = heap.pop().unwrap();\n    println!(\"\\n\u5806\u7a4d\u9802\u5143\u7d20 {} \u51fa\u5806\u7a4d\u5f8c\", val);\n    print_util::print_heap(heap.iter().map(|&val| val).collect());\n}", "doc_comment": ""}, "code_tokens": ["fn", "test_pop_max", "(", ")", "{", "}", "heap", "i32", ">", "let", ";", ";", "", ";", ":", "&", "mut", "BinaryHeap", "<", "val", "=", "println", "print_util", "::", "print_heap", "(", ")", ".", "unwrap", "!", "(", ",", "val", ")", ".", "collect", "heap", ".", "pop", "(", ")", "\"", "\\n", "\u5806\u7a4d\u9802\u5143\u7d20 {} \u51fa\u5806\u7a4d\u5f8c", "\"", ".", "map", "(", ")", "(", ")", "heap", ".", "iter", "(", ")", "(", ")", "|", "&", "val", "|", "val"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 93, "ast_depth": 10, "n_identifiers": 14, "vocab_size": 35, "n_whitespaces": 27, "n_words": 23, "nloc": 5, "token_counts": 63}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/rust/chapter_heap/heap.rs#34-81", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/rust/chapter_heap/heap.rs", "language": "Java"}, "method": {"name": "main", "qualified_name": "zh-hant.codes.rust.chapter_heap.heap.rs#main", "start_line": 34, "end_line": 81, "signature": "main()", "original_code": "fn main() {\n    /* \u521d\u59cb\u5316\u5806\u7a4d */\n    // \u521d\u59cb\u5316\u5c0f\u9802\u5806\u7a4d\n    #[allow(unused_assignments)]\n    let mut min_heap = BinaryHeap::new();\n    // Rust \u7684 BinaryHeap \u662f\u5927\u9802\u5806\u7a4d\uff0c\u5c0f\u9802\u5806\u7a4d\u4e00\u822c\u6703\u201c\u5957\u4e0a\u201dReverse\n    // \u521d\u59cb\u5316\u5927\u9802\u5806\u7a4d\n    let mut max_heap = BinaryHeap::new();\n\n    println!(\"\\n\u4ee5\u4e0b\u6e2c\u8a66\u6a23\u4f8b\u70ba\u5927\u9802\u5806\u7a4d\");\n\n    /* \u5143\u7d20\u5165\u5806\u7a4d */\n    test_push_max(&mut max_heap, 1);\n    test_push_max(&mut max_heap, 3);\n    test_push_max(&mut max_heap, 2);\n    test_push_max(&mut max_heap, 5);\n    test_push_max(&mut max_heap, 4);\n\n    /* \u7372\u53d6\u5806\u7a4d\u9802\u5143\u7d20 */\n    let peek = max_heap.peek().unwrap();\n    println!(\"\\n\u5806\u7a4d\u9802\u5143\u7d20\u70ba {}\", peek);\n\n    /* \u5806\u7a4d\u9802\u5143\u7d20\u51fa\u5806\u7a4d */\n    test_pop_max(&mut max_heap);\n    test_pop_max(&mut max_heap);\n    test_pop_max(&mut max_heap);\n    test_pop_max(&mut max_heap);\n    test_pop_max(&mut max_heap);\n\n    /* \u7372\u53d6\u5806\u7a4d\u5927\u5c0f */\n    let size = max_heap.len();\n    println!(\"\\n\u5806\u7a4d\u5143\u7d20\u6578\u91cf\u70ba {}\", size);\n\n    /* \u5224\u65b7\u5806\u7a4d\u662f\u5426\u70ba\u7a7a */\n    let is_empty = max_heap.is_empty();\n    println!(\"\\n\u5806\u7a4d\u662f\u5426\u70ba\u7a7a {}\", is_empty);\n\n    /* \u8f38\u5165\u4e32\u5217\u4e26\u5efa\u5806\u7a4d */\n    // \u6642\u9593\u8907\u96dc\u5ea6\u70ba O(n) \uff0c\u800c\u975e O(nlogn)\n    min_heap = BinaryHeap::from(\n        vec![1, 3, 2, 5, 4]\n            .into_iter()\n            .map(|val| Reverse(val))\n            .collect::<Vec<Reverse<i32>>>(),\n    );\n    println!(\"\\n\u8f38\u5165\u4e32\u5217\u4e26\u5efa\u7acb\u5c0f\u9802\u5806\u7a4d\u5f8c\");\n    print_util::print_heap(min_heap.iter().map(|&val| val.0).collect());\n}", "doc_comment": "/* Driver Code */"}, "code_tokens": ["fn", "main", "(", ")", "{", "/* \u521d\u59cb\u5316\u5806\u7a4d */", "// \u521d\u59cb\u5316\u5c0f\u9802\u5806\u7a4d", ";", "// Rust \u7684 BinaryHeap \u662f\u5927\u9802\u5806\u7a4d\uff0c\u5c0f\u9802\u5806\u7a4d\u4e00\u822c\u6703\u201c\u5957\u4e0a\u201dReverse", "// \u521d\u59cb\u5316\u5927\u9802\u5806\u7a4d", ";", "/* \u5143\u7d20\u5165\u5806\u7a4d */", "/* \u7372\u53d6\u5806\u7a4d\u9802\u5143\u7d20 */", "/* \u5806\u7a4d\u9802\u5143\u7d20\u51fa\u5806\u7a4d */", "/* \u7372\u53d6\u5806\u7a4d\u5927\u5c0f */", "/* \u5224\u65b7\u5806\u7a4d\u662f\u5426\u70ba\u7a7a */", "/* \u8f38\u5165\u4e32\u5217\u4e26\u5efa\u5806\u7a4d */", "// \u6642\u9593\u8907\u96dc\u5ea6\u70ba O(n) \uff0c\u800c\u975e O(nlogn)", "}", "#", "[", "]", "let", "", "let", "", ";", ";", ";", ";", ";", ";", "let", ";", ";", ";", ";", ";", ";", ";", "let", ";", ";", "let", ";", ";", "", ";", ";", "", ";", "allow", "mut", "min_heap", "=", "(", ")", "mut", "max_heap", "=", "(", ")", "println", "test_push_max", "test_push_max", "test_push_max", "test_push_max", "test_push_max", "peek", "=", "println", "test_pop_max", "test_pop_max", "test_pop_max", "test_pop_max", "test_pop_max", "size", "=", "println", "is_empty", "=", "println", "min_heap", "=", "(", ")", "println", "print_util", "::", "print_heap", "(", ")", "(", "unused_assignments", ")", "BinaryHeap", "::", "new", "BinaryHeap", "::", "new", "!", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", ".", "unwrap", "!", "(", ",", "peek", ")", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", "max_heap", ".", "len", "!", "(", ",", "size", ")", "max_heap", ".", "is_empty", "!", "(", ",", "is_empty", ")", "BinaryHeap", "::", "from", ".", "collect", "::", "(", ")", ",", "!", "(", ")", ".", "collect", "\"", "\\n", "\u4ee5\u4e0b\u6e2c\u8a66\u6a23\u4f8b\u70ba\u5927\u9802\u5806\u7a4d", "\"", "&", "mut", "max_heap", ",", "1", "&", "mut", "max_heap", ",", "3", "&", "mut", "max_heap", ",", "2", "&", "mut", "max_heap", ",", "5", "&", "mut", "max_heap", ",", "4", "max_heap", ".", "peek", "(", ")", "\"", "\\n", "\u5806\u7a4d\u9802\u5143\u7d20\u70ba {}", "\"", "&", "mut", "max_heap", "&", "mut", "max_heap", "&", "mut", "max_heap", "&", "mut", "max_heap", "&", "mut", "max_heap", "(", ")", "\"", "\\n", "\u5806\u7a4d\u5143\u7d20\u6578\u91cf\u70ba {}", "\"", "(", ")", "\"", "\\n", "\u5806\u7a4d\u662f\u5426\u70ba\u7a7a {}", "\"", ".", "map", "<", ">", "\"", "\\n", "\u8f38\u5165\u4e32\u5217\u4e26\u5efa\u7acb\u5c0f\u9802\u5806\u7a4d\u5f8c", "\"", ".", "map", "(", ")", "(", ")", ".", "into_iter", "(", ")", "Vec", "min_heap", ".", "iter", "(", ")", "vec", "[", "4", "]", "(", ")", "|", "val", "|", "<", ">", "(", ")", "|", "&", "val", "|", "val", ".0", "!", "1", ",", "3", ",", "2", ",", "5", ",", "Reverse", "Reverse", "(", "val", ")", "<", "i32", ">"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 420, "ast_depth": 12, "n_identifiers": 25, "vocab_size": 72, "n_whitespaces": 303, "n_words": 124, "nloc": 41, "token_counts": 286}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/swift/chapter_sorting/quick_sort.swift#9-24", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/swift/chapter_sorting/quick_sort.swift", "language": "Java"}, "method": {"name": "partition", "qualified_name": "zh-hant.codes.swift.chapter_sorting.quick_sort.swift#partition", "start_line": 9, "end_line": 24, "signature": "partition(nums: inout [Int], left: Int, right: Int)", "original_code": "func partition(nums: inout [Int], left: Int, right: Int) -> Int {\n    // \u4ee5 nums[left] \u70ba\u57fa\u6e96\u6578\n    var i = left\n    var j = right\n    while i < j {\n        while i < j, nums[j] >= nums[left] {\n            j -= 1 // \u5f9e\u53f3\u5411\u5de6\u627e\u9996\u500b\u5c0f\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20\n        }\n        while i < j, nums[i] <= nums[left] {\n            i += 1 // \u5f9e\u5de6\u5411\u53f3\u627e\u9996\u500b\u5927\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20\n        }\n        nums.swapAt(i, j) // \u4ea4\u63db\u9019\u5169\u500b\u5143\u7d20\n    }\n    nums.swapAt(i, left) // \u5c07\u57fa\u6e96\u6578\u4ea4\u63db\u81f3\u5169\u5b50\u9663\u5217\u7684\u5206\u754c\u7dda\n    return i // \u8fd4\u56de\u57fa\u6e96\u6578\u7684\u7d22\u5f15\n}", "doc_comment": "/* \u54e8\u5175\u5283\u5206 */"}, "code_tokens": ["func", "partition", "(", ",", ",", ")", "->", "Int", "{", "// \u4ee5 nums[left] \u70ba\u57fa\u6e96\u6578", "}", "nums", "inout", "left", "Int", "right", "Int", "var", "", "// \u5c07\u57fa\u6e96\u6578\u4ea4\u63db\u81f3\u5169\u5b50\u9663\u5217\u7684\u5206\u754c\u7dda", "", "return", "i", "// \u8fd4\u56de\u57fa\u6e96\u6578\u7684\u7d22\u5f15", "", ":", "[", "]", ":", ":", "i", "=", "nums", ".", "swapAt", "Int", "left", "var", "j", "=", "i", "<", "j", "{", "// \u4ea4\u63db\u9019\u5169\u500b\u5143\u7d20", "}", "(", "i", ",", "left", ")", "right", "while", "while", ",", "while", ",", "nums", ".", "swapAt", "i", "<", "j", "{", "// \u5f9e\u53f3\u5411\u5de6\u627e\u9996\u500b\u5c0f\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20", "}", "i", "<", "j", "{", "// \u5f9e\u5de6\u5411\u53f3\u627e\u9996\u500b\u5927\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20", "}", "(", "i", ",", "j", ")", ">=", "j", "-=", "1", "<=", "i", "+=", "1", "nums", "[", "j", "]", "nums", "[", "left", "]", "nums", "[", "i", "]", "nums", "[", "left", "]"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 140, "ast_depth": 11, "n_identifiers": 10, "vocab_size": 37, "n_whitespaces": 161, "n_words": 56, "nloc": 16, "token_counts": 101}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/swift/chapter_sorting/quick_sort.swift#27-37", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/swift/chapter_sorting/quick_sort.swift", "language": "Java"}, "method": {"name": "quickSort", "qualified_name": "zh-hant.codes.swift.chapter_sorting.quick_sort.swift#quickSort", "start_line": 27, "end_line": 37, "signature": "quickSort(nums: inout [Int], left: Int, right: Int)", "original_code": "func quickSort(nums: inout [Int], left: Int, right: Int) {\n    // \u5b50\u9663\u5217\u9577\u5ea6\u70ba 1 \u6642\u7d42\u6b62\u905e\u8ff4\n    if left >= right {\n        return\n    }\n    // \u54e8\u5175\u5283\u5206\n    let pivot = partition(nums: &nums, left: left, right: right)\n    // \u905e\u8ff4\u5de6\u5b50\u9663\u5217\u3001\u53f3\u5b50\u9663\u5217\n    quickSort(nums: &nums, left: left, right: pivot - 1)\n    quickSort(nums: &nums, left: pivot + 1, right: right)\n}", "doc_comment": "/* \u5feb\u901f\u6392\u5e8f */"}, "code_tokens": ["func", "quickSort", "(", ",", ",", ")", "{", "// \u5b50\u9663\u5217\u9577\u5ea6\u70ba 1 \u6642\u7d42\u6b62\u905e\u8ff4", "// \u54e8\u5175\u5283\u5206", "}", "nums", "inout", "left", "Int", "right", "Int", "if", "{", "}", "let", "// \u905e\u8ff4\u5de6\u5b50\u9663\u5217\u3001\u53f3\u5b50\u9663\u5217", "", "", "", ":", "[", "]", ":", ":", "left", ">=", "right", "return", "pivot", "=", "quickSort", "quickSort", "Int", "partition", "(", ",", "left", ",", "right", ")", "(", ",", "left", ",", "right", ")", "(", ",", "left", ",", "right", ")", "nums", "&", "nums", ":", "left", ":", "pivot", "-", "1", "nums", "&", "nums", ":", "pivot", "+", "1", ":", "right", "nums", "&", "nums", ":", "left", ":", "right", ":", ":", ":"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 123, "ast_depth": 10, "n_identifiers": 8, "vocab_size": 30, "n_whitespaces": 89, "n_words": 44, "nloc": 11, "token_counts": 85}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/swift/chapter_sorting/quick_sort.swift#41-52", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/swift/chapter_sorting/quick_sort.swift", "language": "Java"}, "method": {"name": "medianThree", "qualified_name": "zh-hant.codes.swift.chapter_sorting.quick_sort.swift#medianThree", "start_line": 41, "end_line": 52, "signature": "medianThree(nums: [Int], left: Int, mid: Int, right: Int)", "original_code": "func medianThree(nums: [Int], left: Int, mid: Int, right: Int) -> Int {\n    let l = nums[left]\n    let m = nums[mid]\n    let r = nums[right]\n    if (l <= m && m <= r) || (r <= m && m <= l) {\n        return mid // m \u5728 l \u548c r \u4e4b\u9593\n    }\n    if (m <= l && l <= r) || (r <= l && l <= m) {\n        return left // l \u5728 m \u548c r \u4e4b\u9593\n    }\n    return right\n}", "doc_comment": "/* \u9078\u53d6\u4e09\u500b\u5019\u9078\u5143\u7d20\u7684\u4e2d\u4f4d\u6578 */"}, "code_tokens": ["func", "medianThree", "(", ",", ",", ")", "->", "Int", "{", "}", "Int", "mid", "Int", "right", "Int", "let", "", "let", "", "let", "", "{", "}", "if", "return", "right", "", "nums", ",", "left", ":", ":", ":", "l", "=", "m", "=", "r", "=", "return", "mid", "// m \u5728 l \u548c r \u4e4b\u9593", "", "(", ")", "||", "{", "}", ":", "[", "]", "nums", "[", "left", "]", "nums", "[", "mid", "]", "||", "&&", "(", ")", "return", "left", "// l \u5728 m \u548c r \u4e4b\u9593", "", "Int", "nums", "[", "right", "]", "if", "(", ")", "m", "<=", "l", "l", "<=", "r", "&&", "(", ")", "&&", "r", "<=", "l", "l", "<=", "m", "&&", "r", "<=", "m", "m", "<=", "l", "l", "<=", "m", "m", "<=", "r"], "metrics": {"cyclomatic_complexity": 7, "n_ast_nodes": 154, "ast_depth": 11, "n_identifiers": 10, "vocab_size": 29, "n_whitespaces": 128, "n_words": 59, "nloc": 12, "token_counts": 104}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/swift/chapter_sorting/quick_sort.swift#55-61", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/swift/chapter_sorting/quick_sort.swift", "language": "Java"}, "method": {"name": "partitionMedian", "qualified_name": "zh-hant.codes.swift.chapter_sorting.quick_sort.swift#partitionMedian", "start_line": 55, "end_line": 61, "signature": "partitionMedian(nums: inout [Int], left: Int, right: Int)", "original_code": "func partitionMedian(nums: inout [Int], left: Int, right: Int) -> Int {\n    // \u9078\u53d6\u4e09\u500b\u5019\u9078\u5143\u7d20\u7684\u4e2d\u4f4d\u6578\n    let med = medianThree(nums: nums, left: left, mid: left + (right - left) / 2, right: right)\n    // \u5c07\u4e2d\u4f4d\u6578\u4ea4\u63db\u81f3\u9663\u5217\u6700\u5de6\u7aef\n    nums.swapAt(left, med)\n    return partition(nums: &nums, left: left, right: right)\n}", "doc_comment": "/* \u54e8\u5175\u5283\u5206\uff08\u4e09\u6578\u53d6\u4e2d\u503c\uff09 */"}, "code_tokens": ["func", "partitionMedian", "(", ",", ",", ")", "->", "Int", "{", "// \u9078\u53d6\u4e09\u500b\u5019\u9078\u5143\u7d20\u7684\u4e2d\u4f4d\u6578", "}", "nums", "inout", "left", "Int", "right", "Int", "let", "", "return", "", ":", "[", "]", ":", ":", "med", "=", "partition", "Int", "// \u5c07\u4e2d\u4f4d\u6578\u4ea4\u63db\u81f3\u9663\u5217\u6700\u5de6\u7aef", ".", "swapAt", "(", ",", "left", ",", "right", ")", "medianThree", "nums", "(", "left", ",", "med", ")", "nums", "&", "nums", ":", "left", ":", "right", "(", "right", ")", ":", "nums", ":", "nums", ",", "left", ":", "left", ",", "mid", ":", ",", "right", ":", "left", "+", "/", "2", "(", ")", "right", "-", "left"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 111, "ast_depth": 14, "n_identifiers": 11, "vocab_size": 33, "n_whitespaces": 61, "n_words": 38, "nloc": 7, "token_counts": 79}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/swift/chapter_sorting/quick_sort.swift#64-74", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/swift/chapter_sorting/quick_sort.swift", "language": "Java"}, "method": {"name": "quickSortMedian", "qualified_name": "zh-hant.codes.swift.chapter_sorting.quick_sort.swift#quickSortMedian", "start_line": 64, "end_line": 74, "signature": "quickSortMedian(nums: inout [Int], left: Int, right: Int)", "original_code": "func quickSortMedian(nums: inout [Int], left: Int, right: Int) {\n    // \u5b50\u9663\u5217\u9577\u5ea6\u70ba 1 \u6642\u7d42\u6b62\u905e\u8ff4\n    if left >= right {\n        return\n    }\n    // \u54e8\u5175\u5283\u5206\n    let pivot = partitionMedian(nums: &nums, left: left, right: right)\n    // \u905e\u8ff4\u5de6\u5b50\u9663\u5217\u3001\u53f3\u5b50\u9663\u5217\n    quickSortMedian(nums: &nums, left: left, right: pivot - 1)\n    quickSortMedian(nums: &nums, left: pivot + 1, right: right)\n}", "doc_comment": "/* \u5feb\u901f\u6392\u5e8f\uff08\u4e2d\u4f4d\u57fa\u6e96\u6578\u6700\u4f73\u5316\uff09 */"}, "code_tokens": ["func", "quickSortMedian", "(", ",", ",", ")", "{", "// \u5b50\u9663\u5217\u9577\u5ea6\u70ba 1 \u6642\u7d42\u6b62\u905e\u8ff4", "// \u54e8\u5175\u5283\u5206", "}", "nums", "inout", "left", "Int", "right", "Int", "if", "{", "}", "let", "// \u905e\u8ff4\u5de6\u5b50\u9663\u5217\u3001\u53f3\u5b50\u9663\u5217", "", "", "", ":", "[", "]", ":", ":", "left", ">=", "right", "return", "pivot", "=", "quickSortMedian", "quickSortMedian", "Int", "partitionMedian", "(", ",", "left", ",", "right", ")", "(", ",", "left", ",", "right", ")", "(", ",", "left", ",", "right", ")", "nums", "&", "nums", ":", "left", ":", "pivot", "-", "1", "nums", "&", "nums", ":", "pivot", "+", "1", ":", "right", "nums", "&", "nums", ":", "left", ":", "right", ":", ":", ":"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 123, "ast_depth": 10, "n_identifiers": 8, "vocab_size": 30, "n_whitespaces": 89, "n_words": 44, "nloc": 11, "token_counts": 85}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/swift/chapter_sorting/quick_sort.swift#77-93", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/swift/chapter_sorting/quick_sort.swift", "language": "Java"}, "method": {"name": "quickSortTailCall", "qualified_name": "zh-hant.codes.swift.chapter_sorting.quick_sort.swift#quickSortTailCall", "start_line": 77, "end_line": 93, "signature": "quickSortTailCall(nums: inout [Int], left: Int, right: Int)", "original_code": "func quickSortTailCall(nums: inout [Int], left: Int, right: Int) {\n    var left = left\n    var right = right\n    // \u5b50\u9663\u5217\u9577\u5ea6\u70ba 1 \u6642\u7d42\u6b62\n    while left < right {\n        // \u54e8\u5175\u5283\u5206\u64cd\u4f5c\n        let pivot = partition(nums: &nums, left: left, right: right)\n        // \u5c0d\u5169\u500b\u5b50\u9663\u5217\u4e2d\u8f03\u77ed\u7684\u90a3\u500b\u57f7\u884c\u5feb\u901f\u6392\u5e8f\n        if (pivot - left) < (right - pivot) {\n            quickSortTailCall(nums: &nums, left: left, right: pivot - 1) // \u905e\u8ff4\u6392\u5e8f\u5de6\u5b50\u9663\u5217\n            left = pivot + 1 // \u5269\u9918\u672a\u6392\u5e8f\u5340\u9593\u70ba [pivot + 1, right]\n        } else {\n            quickSortTailCall(nums: &nums, left: pivot + 1, right: right) // \u905e\u8ff4\u6392\u5e8f\u53f3\u5b50\u9663\u5217\n            right = pivot - 1 // \u5269\u9918\u672a\u6392\u5e8f\u5340\u9593\u70ba [left, pivot - 1]\n        }\n    }\n}", "doc_comment": "/* \u5feb\u901f\u6392\u5e8f\uff08\u905e\u8ff4\u6df1\u5ea6\u6700\u4f73\u5316\uff09 */"}, "code_tokens": ["func", "quickSortTailCall", "(", ",", ",", ")", "{", "}", "nums", "inout", "left", "Int", "right", "Int", "var", "", ":", "[", "]", ":", ":", "left", "=", "Int", "left", "var", "right", "=", "left", "<", "right", "{", "// \u54e8\u5175\u5283\u5206\u64cd\u4f5c", "}", "right", "// \u5b50\u9663\u5217\u9577\u5ea6\u70ba 1 \u6642\u7d42\u6b62", "while", "let", "else", "{", "// \u905e\u8ff4\u6392\u5e8f\u53f3\u5b50\u9663\u5217", "// \u5269\u9918\u672a\u6392\u5e8f\u5340\u9593\u70ba [left, pivot - 1]", "}", "pivot", "=", "// \u5c0d\u5169\u500b\u5b50\u9663\u5217\u4e2d\u8f03\u77ed\u7684\u90a3\u500b\u57f7\u884c\u5feb\u901f\u6392\u5e8f", "{", "// \u905e\u8ff4\u6392\u5e8f\u5de6\u5b50\u9663\u5217", "// \u5269\u9918\u672a\u6392\u5e8f\u5340\u9593\u70ba [pivot + 1, right]", "}", "right", "=", "<", "left", "=", "quickSortTailCall", "pivot", "-", "1", "partition", "if", "(", ")", "quickSortTailCall", "pivot", "+", "1", "(", ",", "left", ",", "right", ")", "(", ",", "left", ",", "right", ")", "(", ")", "right", "-", "pivot", "(", ",", "left", ",", "right", ")", "nums", "&", "nums", ":", "pivot", "+", "1", ":", "right", "nums", "&", "nums", ":", "left", ":", "right", "pivot", "-", "left", "nums", "&", "nums", ":", "left", ":", "pivot", "-", "1", ":", ":", ":"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 173, "ast_depth": 14, "n_identifiers": 12, "vocab_size": 36, "n_whitespaces": 211, "n_words": 70, "nloc": 17, "token_counts": 121}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/zig/chapter_sorting/quick_sort.zig#33-41", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/zig/chapter_sorting/quick_sort.zig", "language": "Java"}, "method": {"name": "quickSort", "qualified_name": "zh-hant.codes.zig.chapter_sorting.quick_sort.zig#quickSort", "start_line": 33, "end_line": 41, "signature": "quickSort(nums: []i32, left: usize, right: usize)", "original_code": "pub fn quickSort(nums: []i32, left: usize, right: usize) void {\n        // \u5b50\u9663\u5217\u9577\u5ea6\u70ba 1 \u6642\u7d42\u6b62\u905e\u8ff4\n        if (left >= right) return;\n        // \u54e8\u5175\u5283\u5206\n        var pivot = partition(nums, left, right);\n        // \u905e\u8ff4\u5de6\u5b50\u9663\u5217\u3001\u53f3\u5b50\u9663\u5217\n        quickSort(nums, left, pivot - 1);\n        quickSort(nums, pivot + 1, right);\n    }", "doc_comment": "// \u5feb\u901f\u6392\u5e8f"}, "code_tokens": ["pub", "quickSort", "fn", "(", ",", ",", ")", "void", "{", "// \u5b50\u9663\u5217\u9577\u5ea6\u70ba 1 \u6642\u7d42\u6b62\u905e\u8ff4", "// \u54e8\u5175\u5283\u5206", "// \u905e\u8ff4\u5de6\u5b50\u9663\u5217\u3001\u53f3\u5b50\u9663\u5217", "}", "i32", "left", "usize", "right", "usize", "if", "var", ";", ";", ";", "nums", ":", ":", "(", ")", "return", ";", "pivot", "=", "quickSort", "quickSort", ":", "[", "]", "left", ">=", "right", "partition", "(", "nums", ",", "left", ",", ")", "(", "nums", ",", ",", "right", ")", "(", "nums", ",", "left", ",", "right", ")", "pivot", "-", "1", "pivot", "+", "1"], "metrics": {"cyclomatic_complexity": 2, "n_ast_nodes": 96, "ast_depth": 8, "n_identifiers": 10, "vocab_size": 31, "n_whitespaces": 99, "n_words": 36, "nloc": 9, "token_counts": 66}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/zig/chapter_sorting/quick_sort.zig#67-82", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/zig/chapter_sorting/quick_sort.zig", "language": "Java"}, "method": {"name": "partition", "qualified_name": "zh-hant.codes.zig.chapter_sorting.quick_sort.zig#partition", "start_line": 67, "end_line": 82, "signature": "partition(nums: []i32, left: usize, right: usize)", "original_code": "pub fn partition(nums: []i32, left: usize, right: usize) usize {\n        // \u9078\u53d6\u4e09\u500b\u5019\u9078\u5143\u7d20\u7684\u4e2d\u4f4d\u6578\n        var med = medianThree(nums, left, (left + right) / 2, right);\n        // \u5c07\u4e2d\u4f4d\u6578\u4ea4\u63db\u81f3\u9663\u5217\u6700\u5de6\u7aef\n        swap(nums, left, med);\n        // \u4ee5 nums[left] \u70ba\u57fa\u6e96\u6578\n        var i = left;\n        var j = right;\n        while (i < j) {\n            while (i < j and nums[j] >= nums[left]) j -= 1; // \u5f9e\u53f3\u5411\u5de6\u627e\u9996\u500b\u5c0f\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20\n            while (i < j and nums[i] <= nums[left]) i += 1; // \u5f9e\u5de6\u5411\u53f3\u627e\u9996\u500b\u5927\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20\n            swap(nums, i, j);   // \u4ea4\u63db\u9019\u5169\u500b\u5143\u7d20\n        }\n        swap(nums, i, left);    // \u5c07\u57fa\u6e96\u6578\u4ea4\u63db\u81f3\u5169\u5b50\u9663\u5217\u7684\u5206\u754c\u7dda\n        return i;               // \u8fd4\u56de\u57fa\u6e96\u6578\u7684\u7d22\u5f15\n    }", "doc_comment": "// \u54e8\u5175\u5283\u5206\uff08\u4e09\u6578\u53d6\u4e2d\u503c\uff09"}, "code_tokens": ["pub", "partition", "fn", "(", ",", ",", ")", "usize", "{", "// \u9078\u53d6\u4e09\u500b\u5019\u9078\u5143\u7d20\u7684\u4e2d\u4f4d\u6578", "// \u5c07\u4e2d\u4f4d\u6578\u4ea4\u63db\u81f3\u9663\u5217\u6700\u5de6\u7aef", "// \u4ee5 nums[left] \u70ba\u57fa\u6e96\u6578", "// \u5c07\u57fa\u6e96\u6578\u4ea4\u63db\u81f3\u5169\u5b50\u9663\u5217\u7684\u5206\u754c\u7dda", "// \u8fd4\u56de\u57fa\u6e96\u6578\u7684\u7d22\u5f15", "}", "i32", "left", "usize", "right", "usize", "var", ";", ";", "var", ";", "var", ";", "while", ";", "return", "i", ";", "nums", ":", ":", "med", "=", "swap", "i", "=", "left", "j", "=", "right", "(", ")", "{", "// \u5f9e\u53f3\u5411\u5de6\u627e\u9996\u500b\u5c0f\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20", "// \u5f9e\u5de6\u5411\u53f3\u627e\u9996\u500b\u5927\u65bc\u57fa\u6e96\u6578\u7684\u5143\u7d20", "// \u4ea4\u63db\u9019\u5169\u500b\u5143\u7d20", "}", "swap", ":", "[", "]", "medianThree", "(", "nums", ",", "left", ",", "med", ")", "i", "<", "j", "while", ";", "while", ";", "(", "nums", ",", "i", ",", "left", ")", "(", "nums", ",", "left", ",", ",", "right", ")", "(", "", "(", ")", ";", "swap", "/", "2", ")", "j", "-=", "1", "i", "<=", "i", "+=", "1", "(", "nums", ",", "i", ",", "j", ")", "(", ")", "<", "nums", "[", "left", "]", "left", "+", "right", "i", "=", "nums", "[", "]", "j", "and", "nums", "<", ">", "left", "[", "]", "j", "and", "nums", "i", "[", "]", "j"], "metrics": {"cyclomatic_complexity": 4, "n_ast_nodes": 203, "ast_depth": 15, "n_identifiers": 13, "vocab_size": 45, "n_whitespaces": 233, "n_words": 73, "nloc": 16, "token_counts": 139}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/zig/chapter_sorting/quick_sort.zig#85-94", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/zig/chapter_sorting/quick_sort.zig", "language": "Java"}, "method": {"name": "quickSort", "qualified_name": "zh-hant.codes.zig.chapter_sorting.quick_sort.zig#quickSort", "start_line": 85, "end_line": 94, "signature": "quickSort(nums: []i32, left: usize, right: usize)", "original_code": "pub fn quickSort(nums: []i32, left: usize, right: usize) void {\n        // \u5b50\u9663\u5217\u9577\u5ea6\u70ba 1 \u6642\u7d42\u6b62\u905e\u8ff4\n        if (left >= right) return;\n        // \u54e8\u5175\u5283\u5206\n        var pivot = partition(nums, left, right);\n        if (pivot == 0) return;\n        // \u905e\u8ff4\u5de6\u5b50\u9663\u5217\u3001\u53f3\u5b50\u9663\u5217\n        quickSort(nums, left, pivot - 1);\n        quickSort(nums, pivot + 1, right);\n    }", "doc_comment": "// \u5feb\u901f\u6392\u5e8f"}, "code_tokens": ["pub", "quickSort", "fn", "(", ",", ",", ")", "void", "{", "// \u5b50\u9663\u5217\u9577\u5ea6\u70ba 1 \u6642\u7d42\u6b62\u905e\u8ff4", "// \u54e8\u5175\u5283\u5206", "// \u905e\u8ff4\u5de6\u5b50\u9663\u5217\u3001\u53f3\u5b50\u9663\u5217", "}", "i32", "left", "usize", "right", "usize", "if", "var", ";", "if", ";", ";", "nums", ":", ":", "(", ")", "return", ";", "pivot", "=", "(", ")", "return", ";", "quickSort", "quickSort", ":", "[", "]", "left", ">=", "right", "partition", "pivot", "==", "0", "(", "nums", ",", "left", ",", ")", "(", "nums", ",", ",", "right", ")", "(", "nums", ",", "left", ",", "right", ")", "pivot", "-", "1", "pivot", "+", "1"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 108, "ast_depth": 8, "n_identifiers": 10, "vocab_size": 33, "n_whitespaces": 112, "n_words": 40, "nloc": 10, "token_counts": 74}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/zig/chapter_sorting/quick_sort.zig#122-138", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/zig/chapter_sorting/quick_sort.zig", "language": "Java"}, "method": {"name": "quickSort", "qualified_name": "zh-hant.codes.zig.chapter_sorting.quick_sort.zig#quickSort", "start_line": 122, "end_line": 138, "signature": "quickSort(nums: []i32, left_: usize, right_: usize)", "original_code": "pub fn quickSort(nums: []i32, left_: usize, right_: usize) void {\n        var left = left_;\n        var right = right_;\n        // \u5b50\u9663\u5217\u9577\u5ea6\u70ba 1 \u6642\u7d42\u6b62\u905e\u8ff4\n        while (left < right) {\n            // \u54e8\u5175\u5283\u5206\u64cd\u4f5c\n            var pivot = partition(nums, left, right);\n            // \u5c0d\u5169\u500b\u5b50\u9663\u5217\u4e2d\u8f03\u77ed\u7684\u90a3\u500b\u57f7\u884c\u5feb\u901f\u6392\u5e8f\n            if (pivot - left < right - pivot) {\n                quickSort(nums, left, pivot - 1);   // \u905e\u8ff4\u6392\u5e8f\u5de6\u5b50\u9663\u5217\n                left = pivot + 1;                   // \u5269\u9918\u672a\u6392\u5e8f\u5340\u9593\u70ba [pivot + 1, right]\n            } else {\n                quickSort(nums, pivot + 1, right);  // \u905e\u8ff4\u6392\u5e8f\u53f3\u5b50\u9663\u5217\n                right = pivot - 1;                  // \u5269\u9918\u672a\u6392\u5e8f\u5340\u9593\u70ba [left, pivot - 1]\n            }\n        }\n    }", "doc_comment": "// \u5feb\u901f\u6392\u5e8f\uff08\u905e\u8ff4\u6df1\u5ea6\u6700\u4f73\u5316\uff09"}, "code_tokens": ["pub", "quickSort", "fn", "(", ",", ",", ")", "void", "{", "// \u5b50\u9663\u5217\u9577\u5ea6\u70ba 1 \u6642\u7d42\u6b62\u905e\u8ff4", "}", "i32", "left_", "usize", "right_", "usize", "var", ";", "var", ";", "while", "nums", ":", ":", "left", "=", "left_", "right", "=", "right_", "(", ")", "{", "// \u54e8\u5175\u5283\u5206\u64cd\u4f5c", "// \u5c0d\u5169\u500b\u5b50\u9663\u5217\u4e2d\u8f03\u77ed\u7684\u90a3\u500b\u57f7\u884c\u5feb\u901f\u6392\u5e8f", "}", ":", "[", "]", "left", "<", "right", "var", ";", "if", "else", "pivot", "=", "(", ")", "{", "// \u905e\u8ff4\u6392\u5e8f\u5de6\u5b50\u9663\u5217", "// \u5269\u9918\u672a\u6392\u5e8f\u5340\u9593\u70ba [pivot + 1, right]", "}", "{", "// \u905e\u8ff4\u6392\u5e8f\u53f3\u5b50\u9663\u5217", "// \u5269\u9918\u672a\u6392\u5e8f\u5340\u9593\u70ba [left, pivot - 1]", "}", "partition", "<", ";", ";", ";", ";", "(", "nums", ",", "left", ",", "right", ")", "pivot", "-", "left", "right", "-", "pivot", "quickSort", "left", "=", "quickSort", "right", "=", "(", "nums", ",", "left", ",", ")", "pivot", "+", "1", "(", "nums", ",", ",", "right", ")", "pivot", "-", "1", "pivot", "-", "1", "pivot", "+", "1"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 154, "ast_depth": 12, "n_identifiers": 12, "vocab_size": 38, "n_whitespaces": 305, "n_words": 62, "nloc": 17, "token_counts": 107}}
{"dataset_split": "train", "id": "hello-algo@e8dc473:zh-hant/codes/zig/chapter_sorting/quick_sort.zig#142-142", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "e8dc4736a2300e5a2a9a9ae864dbbf570a86b27b", "license": "other"}, "file": {"path": "zh-hant/codes/zig/chapter_sorting/quick_sort.zig", "language": "Java"}, "method": {"name": "main", "qualified_name": "zh-hant.codes.zig.chapter_sorting.quick_sort.zig#main", "start_line": 142, "end_line": 142, "signature": "main()", "original_code": "pub fn main()", "doc_comment": "// Driver Code"}, "code_tokens": ["pub", "main", "", "fn", "(", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 10, "ast_depth": 4, "n_identifiers": 2, "vocab_size": 6, "n_whitespaces": 2, "n_words": 3, "nloc": 1, "token_counts": 6}}
{"dataset_split": "train", "id": "hello-algo@909b896:en/codes/java/chapter_dynamic_programming/climbing_stairs_backtrack.java#13-26", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "909b89680f55641a0b61a3c7ecf6554f3da06cbf", "license": "other"}, "file": {"path": "en/codes/java/chapter_dynamic_programming/climbing_stairs_backtrack.java", "language": "Java"}, "method": {"name": "backtrack", "qualified_name": "en.codes.java.chapter_dynamic_programming.climbing_stairs_backtrack#backtrack", "start_line": 13, "end_line": 26, "signature": "backtrack(List<Integer> choices, int state, int n, List<Integer> res)", "original_code": "public static void backtrack(List<Integer> choices, int state, int n, List<Integer> res) {\n        // When climbing to the nth step, add 1 to the number of solutions\n        if (state == n)\n            res.set(0, res.get(0) + 1);\n        // Traverse all choices\n        for (Integer choice : choices) {\n            // Pruning: do not allow climbing beyond the nth step\n            if (state + choice > n)\n                continue;\n            // Attempt: make a choice, update the state\n            backtrack(choices, state + choice, n, res);\n            // Retract\n        }\n    }", "doc_comment": "/* Backtracking */"}, "code_tokens": ["void", "backtrack", "public", "static", "(", ",", ",", ",", ")", "{", "// When climbing to the nth step, add 1 to the number of solutions", "// Traverse all choices", "}", "choices", "state", "n", "res", "if", "for", "(", "Integer", "choice", ":", "choices", ")", "List", "int", "int", "List", "(", ")", ";", "{", "// Pruning: do not allow climbing beyond the nth step", "// Attempt: make a choice, update the state", "// Retract", "}", "<", "Integer", ">", "<", "Integer", ">", "state", "==", "n", "res", ".", "set", "if", ";", "(", "0", ",", ")", "(", ")", "continue", ";", "backtrack", "+", "1", ">", "n", "(", "choices", ",", ",", "n", ",", "res", ")", "res", ".", "get", "state", "+", "choice", "state", "+", "choice", "(", "0", ")"], "metrics": {"cyclomatic_complexity": 4, "n_ast_nodes": 119, "ast_depth": 11, "n_identifiers": 8, "vocab_size": 36, "n_whitespaces": 210, "n_words": 72, "nloc": 14, "token_counts": 84}}
{"dataset_split": "train", "id": "hello-algo@909b896:en/codes/java/chapter_dynamic_programming/climbing_stairs_backtrack.java#29-36", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "909b89680f55641a0b61a3c7ecf6554f3da06cbf", "license": "other"}, "file": {"path": "en/codes/java/chapter_dynamic_programming/climbing_stairs_backtrack.java", "language": "Java"}, "method": {"name": "climbingStairsBacktrack", "qualified_name": "en.codes.java.chapter_dynamic_programming.climbing_stairs_backtrack#climbingStairsBacktrack", "start_line": 29, "end_line": 36, "signature": "climbingStairsBacktrack(int n)", "original_code": "public static int climbingStairsBacktrack(int n) {\n        List<Integer> choices = Arrays.asList(1, 2); // Can choose to climb up 1 step or 2 steps\n        int state = 0; // Start climbing from the 0th step\n        List<Integer> res = new ArrayList<>();\n        res.add(0); // Use res[0] to record the number of solutions\n        backtrack(choices, state, n, res);\n        return res.get(0);\n    }", "doc_comment": "/* Climbing stairs: Backtracking */"}, "code_tokens": ["climbingStairsBacktrack", "public", "static", "int", "(", ")", "{", "// Can choose to climb up 1 step or 2 steps", "// Start climbing from the 0th step", "// Use res[0] to record the number of solutions", "}", "n", ";", ";", ";", ";", ";", "return", ";", "int", "List", "choices", "=", "int", "state", "=", "0", "List", "res", "=", "res", ".", "add", "backtrack", "res", ".", "get", "<", "Integer", ">", "Arrays", ".", "asList", "<", "Integer", ">", "new", "(", "0", ")", "(", "choices", ",", "state", ",", "n", ",", "res", ")", "(", "0", ")", "(", "1", ",", "2", ")", "ArrayList", "(", ")", "<", ">"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 106, "ast_depth": 9, "n_identifiers": 10, "vocab_size": 34, "n_whitespaces": 106, "n_words": 58, "nloc": 8, "token_counts": 72}}
{"dataset_split": "train", "id": "hello-algo@909b896:en/codes/java/chapter_dynamic_programming/climbing_stairs_backtrack.java#38-43", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "909b89680f55641a0b61a3c7ecf6554f3da06cbf", "license": "other"}, "file": {"path": "en/codes/java/chapter_dynamic_programming/climbing_stairs_backtrack.java", "language": "Java"}, "method": {"name": "main", "qualified_name": "en.codes.java.chapter_dynamic_programming.climbing_stairs_backtrack#main", "start_line": 38, "end_line": 43, "signature": "main(String[] args)", "original_code": "public static void main(String[] args) {\n        int n = 9;\n\n        int res = climbingStairsBacktrack(n);\n        System.out.println(String.format(\"There are %d solutions to climb %d stairs\", res, n));\n    }", "doc_comment": ""}, "code_tokens": ["void", "main", "public", "static", "(", ")", "{", "}", "args", ";", ";", ";", "String", "int", "n", "=", "9", "int", "res", "=", ".", "println", "[", "]", "climbingStairsBacktrack", "System", ".", "out", "(", ")", "(", "n", ")", "String", ".", "format", "(", ",", "res", ",", "n", ")", "\"", "There are %d solutions to climb %d stairs", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 68, "ast_depth": 10, "n_identifiers": 10, "vocab_size": 27, "n_whitespaces": 53, "n_words": 28, "nloc": 5, "token_counts": 45}}
{"dataset_split": "train", "id": "hello-algo@909b896:en/codes/java/chapter_dynamic_programming/climbing_stairs_constraint_dp.java#11-28", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "909b89680f55641a0b61a3c7ecf6554f3da06cbf", "license": "other"}, "file": {"path": "en/codes/java/chapter_dynamic_programming/climbing_stairs_constraint_dp.java", "language": "Java"}, "method": {"name": "climbingStairsConstraintDP", "qualified_name": "en.codes.java.chapter_dynamic_programming.climbing_stairs_constraint_dp#climbingStairsConstraintDP", "start_line": 11, "end_line": 28, "signature": "climbingStairsConstraintDP(int n)", "original_code": "static int climbingStairsConstraintDP(int n) {\n        if (n == 1 || n == 2) {\n            return 1;\n        }\n        // Initialize dp table, used to store subproblem solutions\n        int[][] dp = new int[n + 1][3];\n        // Initial state: preset the smallest subproblem solution\n        dp[1][1] = 1;\n        dp[1][2] = 0;\n        dp[2][1] = 0;\n        dp[2][2] = 1;\n        // State transition: gradually solve larger subproblems from smaller ones\n        for (int i = 3; i <= n; i++) {\n            dp[i][1] = dp[i - 1][2];\n            dp[i][2] = dp[i - 2][1] + dp[i - 2][2];\n        }\n        return dp[n][1] + dp[n][2];\n    }", "doc_comment": "/* Constrained climbing stairs: Dynamic programming */"}, "code_tokens": ["climbingStairsConstraintDP", "static", "int", "(", ")", "{", "// Initialize dp table, used to store subproblem solutions", "// Initial state: preset the smallest subproblem solution", "// State transition: gradually solve larger subproblems from smaller ones", "}", "n", "if", ";", ";", ";", ";", ";", "for", "(", ";", ")", "return", ";", "int", "(", ")", "{", "}", "dp", "=", "=", "1", "=", "0", "=", "0", "=", "1", ";", "i", "<=", "n", "i", "++", "{", "}", "+", "||", "return", "1", ";", "int", "[", "]", "[", "]", "new", "[", "1", "]", "[", "2", "]", "[", "1", "]", "[", "2", "]", "int", "i", "=", "3", ";", ";", "[", "1", "]", "[", "2", "]", "n", "==", "1", "n", "==", "2", "int", "[", "]", "[", "3", "]", "dp", "[", "1", "]", "dp", "[", "1", "]", "dp", "[", "2", "]", "dp", "[", "2", "]", "=", "=", "dp", "[", "n", "]", "dp", "[", "n", "]", "n", "+", "1", "[", "1", "]", "[", "2", "]", "[", "2", "]", "+", "dp", "[", "i", "]", "dp", "[", "]", "dp", "[", "i", "]", "[", "1", "]", "[", "2", "]", "i", "-", "1", "dp", "[", "]", "dp", "[", "]", "i", "-", "2", "i", "-", "2"], "metrics": {"cyclomatic_complexity": 4, "n_ast_nodes": 236, "ast_depth": 12, "n_identifiers": 4, "vocab_size": 31, "n_whitespaces": 236, "n_words": 91, "nloc": 18, "token_counts": 164}}
{"dataset_split": "train", "id": "hello-algo@909b896:en/codes/java/chapter_dynamic_programming/climbing_stairs_constraint_dp.java#30-35", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "909b89680f55641a0b61a3c7ecf6554f3da06cbf", "license": "other"}, "file": {"path": "en/codes/java/chapter_dynamic_programming/climbing_stairs_constraint_dp.java", "language": "Java"}, "method": {"name": "main", "qualified_name": "en.codes.java.chapter_dynamic_programming.climbing_stairs_constraint_dp#main", "start_line": 30, "end_line": 35, "signature": "main(String[] args)", "original_code": "public static void main(String[] args) {\n        int n = 9;\n\n        int res = climbingStairsConstraintDP(n);\n        System.out.println(String.format(\"There are %d solutions to climb %d stairs\", res, n));\n    }", "doc_comment": ""}, "code_tokens": ["void", "main", "public", "static", "(", ")", "{", "}", "args", ";", ";", ";", "String", "int", "n", "=", "9", "int", "res", "=", ".", "println", "[", "]", "climbingStairsConstraintDP", "System", ".", "out", "(", ")", "(", "n", ")", "String", ".", "format", "(", ",", "res", ",", "n", ")", "\"", "There are %d solutions to climb %d stairs", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 68, "ast_depth": 10, "n_identifiers": 10, "vocab_size": 27, "n_whitespaces": 53, "n_words": 28, "nloc": 5, "token_counts": 45}}
{"dataset_split": "train", "id": "hello-algo@909b896:en/codes/java/chapter_dynamic_programming/climbing_stairs_dfs.java#11-18", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "909b89680f55641a0b61a3c7ecf6554f3da06cbf", "license": "other"}, "file": {"path": "en/codes/java/chapter_dynamic_programming/climbing_stairs_dfs.java", "language": "Java"}, "method": {"name": "dfs", "qualified_name": "en.codes.java.chapter_dynamic_programming.climbing_stairs_dfs#dfs", "start_line": 11, "end_line": 18, "signature": "dfs(int i)", "original_code": "public static int dfs(int i) {\n        // Known dp[1] and dp[2], return them\n        if (i == 1 || i == 2)\n            return i;\n        // dp[i] = dp[i-1] + dp[i-2]\n        int count = dfs(i - 1) + dfs(i - 2);\n        return count;\n    }", "doc_comment": "/* Search */"}, "code_tokens": ["dfs", "public", "static", "int", "(", ")", "{", "// Known dp[1] and dp[2], return them", "// dp[i] = dp[i-1] + dp[i-2]", "}", "i", "if", ";", "return", "count", ";", "int", "(", ")", "return", "i", ";", "int", "count", "=", "||", "+", "i", "==", "1", "i", "==", "2", "dfs", "dfs", "(", ")", "(", ")", "i", "-", "1", "i", "-", "2"], "metrics": {"cyclomatic_complexity": 3, "n_ast_nodes": 70, "ast_depth": 10, "n_identifiers": 3, "vocab_size": 22, "n_whitespaces": 97, "n_words": 39, "nloc": 8, "token_counts": 45}}
{"dataset_split": "train", "id": "hello-algo@909b896:en/codes/java/chapter_dynamic_programming/climbing_stairs_dfs.java#21-23", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "909b89680f55641a0b61a3c7ecf6554f3da06cbf", "license": "other"}, "file": {"path": "en/codes/java/chapter_dynamic_programming/climbing_stairs_dfs.java", "language": "Java"}, "method": {"name": "climbingStairsDFS", "qualified_name": "en.codes.java.chapter_dynamic_programming.climbing_stairs_dfs#climbingStairsDFS", "start_line": 21, "end_line": 23, "signature": "climbingStairsDFS(int n)", "original_code": "public static int climbingStairsDFS(int n) {\n        return dfs(n);\n    }", "doc_comment": "/* Climbing stairs: Search */"}, "code_tokens": ["climbingStairsDFS", "public", "static", "int", "(", ")", "{", "}", "n", "return", ";", "int", "dfs", "(", "n", ")"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 27, "ast_depth": 7, "n_identifiers": 3, "vocab_size": 12, "n_whitespaces": 20, "n_words": 9, "nloc": 3, "token_counts": 16}}
{"dataset_split": "train", "id": "hello-algo@909b896:en/codes/java/chapter_dynamic_programming/climbing_stairs_dfs.java#25-30", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "909b89680f55641a0b61a3c7ecf6554f3da06cbf", "license": "other"}, "file": {"path": "en/codes/java/chapter_dynamic_programming/climbing_stairs_dfs.java", "language": "Java"}, "method": {"name": "main", "qualified_name": "en.codes.java.chapter_dynamic_programming.climbing_stairs_dfs#main", "start_line": 25, "end_line": 30, "signature": "main(String[] args)", "original_code": "public static void main(String[] args) {\n        int n = 9;\n\n        int res = climbingStairsDFS(n);\n        System.out.println(String.format(\"There are %d solutions to climb %d stairs\", res, n));\n    }", "doc_comment": ""}, "code_tokens": ["void", "main", "public", "static", "(", ")", "{", "}", "args", ";", ";", ";", "String", "int", "n", "=", "9", "int", "res", "=", ".", "println", "[", "]", "climbingStairsDFS", "System", ".", "out", "(", ")", "(", "n", ")", "String", ".", "format", "(", ",", "res", ",", "n", ")", "\"", "There are %d solutions to climb %d stairs", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 68, "ast_depth": 10, "n_identifiers": 10, "vocab_size": 27, "n_whitespaces": 53, "n_words": 28, "nloc": 5, "token_counts": 45}}
{"dataset_split": "train", "id": "hello-algo@909b896:en/codes/java/chapter_dynamic_programming/climbing_stairs_dfs_mem.java#13-25", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "909b89680f55641a0b61a3c7ecf6554f3da06cbf", "license": "other"}, "file": {"path": "en/codes/java/chapter_dynamic_programming/climbing_stairs_dfs_mem.java", "language": "Java"}, "method": {"name": "dfs", "qualified_name": "en.codes.java.chapter_dynamic_programming.climbing_stairs_dfs_mem#dfs", "start_line": 13, "end_line": 25, "signature": "dfs(int i, int[] mem)", "original_code": "public static int dfs(int i, int[] mem) {\n        // Known dp[1] and dp[2], return them\n        if (i == 1 || i == 2)\n            return i;\n        // If there is a record for dp[i], return it\n        if (mem[i] != -1)\n            return mem[i];\n        // dp[i] = dp[i-1] + dp[i-2]\n        int count = dfs(i - 1, mem) + dfs(i - 2, mem);\n        // Record dp[i]\n        mem[i] = count;\n        return count;\n    }", "doc_comment": "/* Memoized search */"}, "code_tokens": ["dfs", "public", "static", "int", "(", ",", ")", "{", "// Known dp[1] and dp[2], return them", "// If there is a record for dp[i], return it", "// dp[i] = dp[i-1] + dp[i-2]", "// Record dp[i]", "}", "i", "mem", "if", "if", ";", ";", "return", "count", ";", "int", "(", ")", "return", "i", ";", "(", ")", "return", ";", "int", "count", "=", "=", "count", "int", "[", "]", "||", "!=", "mem", "[", "i", "]", "+", "mem", "[", "i", "]", "i", "==", "1", "i", "==", "2", "mem", "[", "i", "]", "-", "1", "dfs", "dfs", "(", ",", "mem", ")", "(", ",", "mem", ")", "i", "-", "1", "i", "-", "2"], "metrics": {"cyclomatic_complexity": 4, "n_ast_nodes": 118, "ast_depth": 10, "n_identifiers": 4, "vocab_size": 29, "n_whitespaces": 167, "n_words": 66, "nloc": 13, "token_counts": 79}}
{"dataset_split": "train", "id": "hello-algo@909b896:en/codes/java/chapter_dynamic_programming/climbing_stairs_dfs_mem.java#28-33", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "909b89680f55641a0b61a3c7ecf6554f3da06cbf", "license": "other"}, "file": {"path": "en/codes/java/chapter_dynamic_programming/climbing_stairs_dfs_mem.java", "language": "Java"}, "method": {"name": "climbingStairsDFSMem", "qualified_name": "en.codes.java.chapter_dynamic_programming.climbing_stairs_dfs_mem#climbingStairsDFSMem", "start_line": 28, "end_line": 33, "signature": "climbingStairsDFSMem(int n)", "original_code": "public static int climbingStairsDFSMem(int n) {\n        // mem[i] records the total number of solutions for climbing to the ith step, -1 means no record\n        int[] mem = new int[n + 1];\n        Arrays.fill(mem, -1);\n        return dfs(n, mem);\n    }", "doc_comment": "/* Climbing stairs: Memoized search */"}, "code_tokens": ["climbingStairsDFSMem", "public", "static", "int", "(", ")", "{", "// mem[i] records the total number of solutions for climbing to the ith step, -1 means no record", "}", "n", ";", ";", "return", ";", "int", "mem", "=", "Arrays", ".", "fill", "dfs", "int", "[", "]", "new", "(", "mem", ",", ")", "(", "n", ",", "mem", ")", "int", "[", "]", "-", "1", "n", "+", "1"], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 66, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 25, "n_whitespaces": 72, "n_words": 38, "nloc": 6, "token_counts": 42}}
{"dataset_split": "train", "id": "hello-algo@909b896:en/codes/java/chapter_dynamic_programming/climbing_stairs_dfs_mem.java#35-40", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "909b89680f55641a0b61a3c7ecf6554f3da06cbf", "license": "other"}, "file": {"path": "en/codes/java/chapter_dynamic_programming/climbing_stairs_dfs_mem.java", "language": "Java"}, "method": {"name": "main", "qualified_name": "en.codes.java.chapter_dynamic_programming.climbing_stairs_dfs_mem#main", "start_line": 35, "end_line": 40, "signature": "main(String[] args)", "original_code": "public static void main(String[] args) {\n        int n = 9;\n\n        int res = climbingStairsDFSMem(n);\n        System.out.println(String.format(\"There are %d solutions to climb %d stairs\", res, n));\n    }", "doc_comment": ""}, "code_tokens": ["void", "main", "public", "static", "(", ")", "{", "}", "args", ";", ";", ";", "String", "int", "n", "=", "9", "int", "res", "=", ".", "println", "[", "]", "climbingStairsDFSMem", "System", ".", "out", "(", ")", "(", "n", ")", "String", ".", "format", "(", ",", "res", ",", "n", ")", "\"", "There are %d solutions to climb %d stairs", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 68, "ast_depth": 10, "n_identifiers": 10, "vocab_size": 27, "n_whitespaces": 53, "n_words": 28, "nloc": 5, "token_counts": 45}}
{"dataset_split": "train", "id": "hello-algo@909b896:en/codes/java/chapter_dynamic_programming/climbing_stairs_dp.java#11-24", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "909b89680f55641a0b61a3c7ecf6554f3da06cbf", "license": "other"}, "file": {"path": "en/codes/java/chapter_dynamic_programming/climbing_stairs_dp.java", "language": "Java"}, "method": {"name": "climbingStairsDP", "qualified_name": "en.codes.java.chapter_dynamic_programming.climbing_stairs_dp#climbingStairsDP", "start_line": 11, "end_line": 24, "signature": "climbingStairsDP(int n)", "original_code": "public static int climbingStairsDP(int n) {\n        if (n == 1 || n == 2)\n            return n;\n        // Initialize dp table, used to store subproblem solutions\n        int[] dp = new int[n + 1];\n        // Initial state: preset the smallest subproblem solution\n        dp[1] = 1;\n        dp[2] = 2;\n        // State transition: gradually solve larger subproblems from smaller ones\n        for (int i = 3; i <= n; i++) {\n            dp[i] = dp[i - 1] + dp[i - 2];\n        }\n        return dp[n];\n    }", "doc_comment": "/* Climbing stairs: Dynamic programming */"}, "code_tokens": ["climbingStairsDP", "public", "static", "int", "(", ")", "{", "// Initialize dp table, used to store subproblem solutions", "// Initial state: preset the smallest subproblem solution", "// State transition: gradually solve larger subproblems from smaller ones", "}", "n", "if", ";", ";", ";", "for", "(", ";", ")", "return", ";", "int", "(", ")", "return", "n", ";", "dp", "=", "=", "1", "=", "2", ";", "i", "<=", "n", "i", "++", "{", "}", "dp", "[", "n", "]", "||", "int", "[", "]", "new", "dp", "[", "1", "]", "dp", "[", "2", "]", "int", "i", "=", "3", ";", "n", "==", "1", "n", "==", "2", "int", "[", "]", "=", "n", "+", "1", "dp", "[", "i", "]", "+", "dp", "[", "]", "dp", "[", "]", "i", "-", "1", "i", "-", "2"], "metrics": {"cyclomatic_complexity": 4, "n_ast_nodes": 140, "ast_depth": 11, "n_identifiers": 4, "vocab_size": 31, "n_whitespaces": 186, "n_words": 67, "nloc": 14, "token_counts": 94}}
{"dataset_split": "train", "id": "hello-algo@909b896:en/codes/java/chapter_dynamic_programming/climbing_stairs_dp.java#27-37", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "909b89680f55641a0b61a3c7ecf6554f3da06cbf", "license": "other"}, "file": {"path": "en/codes/java/chapter_dynamic_programming/climbing_stairs_dp.java", "language": "Java"}, "method": {"name": "climbingStairsDPComp", "qualified_name": "en.codes.java.chapter_dynamic_programming.climbing_stairs_dp#climbingStairsDPComp", "start_line": 27, "end_line": 37, "signature": "climbingStairsDPComp(int n)", "original_code": "public static int climbingStairsDPComp(int n) {\n        if (n == 1 || n == 2)\n            return n;\n        int a = 1, b = 2;\n        for (int i = 3; i <= n; i++) {\n            int tmp = b;\n            b = a + b;\n            a = tmp;\n        }\n        return b;\n    }", "doc_comment": "/* Climbing stairs: Space-optimized dynamic programming */"}, "code_tokens": ["climbingStairsDPComp", "public", "static", "int", "(", ")", "{", "}", "n", "if", ",", ";", "for", "(", ";", ")", "return", "b", ";", "int", "(", ")", "return", "n", ";", "int", "a", "=", "1", "b", "=", "2", ";", "i", "<=", "n", "i", "++", "{", "}", "||", "int", "i", "=", "3", ";", ";", ";", "n", "==", "1", "n", "==", "2", "int", "tmp", "=", "b", "b", "=", "a", "=", "tmp", "a", "+", "b"], "metrics": {"cyclomatic_complexity": 4, "n_ast_nodes": 100, "ast_depth": 9, "n_identifiers": 6, "vocab_size": 27, "n_whitespaces": 140, "n_words": 35, "nloc": 11, "token_counts": 66}}
{"dataset_split": "train", "id": "hello-algo@909b896:en/codes/java/chapter_dynamic_programming/climbing_stairs_dp.java#39-47", "repo": {"name": "hello-algo", "url": "https://github.com/krahets/hello-algo", "commit_sha": "909b89680f55641a0b61a3c7ecf6554f3da06cbf", "license": "other"}, "file": {"path": "en/codes/java/chapter_dynamic_programming/climbing_stairs_dp.java", "language": "Java"}, "method": {"name": "main", "qualified_name": "en.codes.java.chapter_dynamic_programming.climbing_stairs_dp#main", "start_line": 39, "end_line": 47, "signature": "main(String[] args)", "original_code": "public static void main(String[] args) {\n        int n = 9;\n\n        int res = climbingStairsDP(n);\n        System.out.println(String.format(\"There are %d solutions to climb %d stairs\", res, n));\n\n        res = climbingStairsDPComp(n);\n        System.out.println(String.format(\"There are %d solutions to climb %d stairs\", res, n));\n    }", "doc_comment": ""}, "code_tokens": ["void", "main", "public", "static", "(", ")", "{", "}", "args", ";", ";", ";", ";", ";", "String", "int", "n", "=", "9", "int", "res", "=", ".", "println", "res", "=", ".", "println", "[", "]", "climbingStairsDP", "System", ".", "out", "(", ")", "climbingStairsDPComp", "System", ".", "out", "(", ")", "(", "n", ")", "String", ".", "format", "(", "n", ")", "String", ".", "format", "(", ",", "res", ",", "n", ")", "(", ",", "res", ",", "n", ")", "\"", "There are %d solutions to climb %d stairs", "\"", "\"", "There are %d solutions to climb %d stairs", "\""], "metrics": {"cyclomatic_complexity": 1, "n_ast_nodes": 106, "ast_depth": 10, "n_identifiers": 11, "vocab_size": 28, "n_whitespaces": 83, "n_words": 46, "nloc": 7, "token_counts": 72}}
